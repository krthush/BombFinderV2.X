

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 17:38:58 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TRISAbits	set	3986
    98  0000                     _TRISBbits	set	3987
    99  0000                     _TRISC	set	3988
   100  0000                     _TRISCbits	set	3988
   101  0000                     _TRISDbits	set	3989
   102  0000                     _TRISEbits	set	3990
   103  0000                     _TXREG	set	4013
   104  0000                     _TXSTAbits	set	4012
   105  0000                     _PDC0H	set	3960
   106  0000                     _PDC0L	set	3961
   107  0000                     _PDC1H	set	3958
   108  0000                     _PDC1L	set	3959
   109  00030B                     STR_6:
   110  00030B  20                 	db	32
   111  00030C  20                 	db	32
   112  00030D  20                 	db	32
   113  00030E  20                 	db	32
   114  00030F  20                 	db	32
   115  000310  20                 	db	32
   116  000311  25                 	db	37
   117  000312  30                 	db	48	;'0'
   118  000313  34                 	db	52	;'4'
   119  000314  64                 	db	100	;'d'
   120  000315  2C                 	db	44
   121  000316  20                 	db	32
   122  000317  25                 	db	37
   123  000318  30                 	db	48	;'0'
   124  000319  34                 	db	52	;'4'
   125  00031A  64                 	db	100	;'d'
   126  00031B  00                 	db	0
   127  00031C                     STR_5:
   128  00031C  20                 	db	32
   129  00031D  20                 	db	32
   130  00031E  20                 	db	32
   131  00031F  20                 	db	32
   132  000320  20                 	db	32
   133  000321  20                 	db	32
   134  000322  49                 	db	73	;'I'
   135  000323  6E                 	db	110	;'n'
   136  000324  65                 	db	101	;'e'
   137  000325  72                 	db	114	;'r'
   138  000326  74                 	db	116	;'t'
   139  000327  20                 	db	32
   140  000328  4D                 	db	77	;'M'
   141  000329  6F                 	db	111	;'o'
   142  00032A  64                 	db	100	;'d'
   143  00032B  65                 	db	101	;'e'
   144  00032C  00                 	db	0
   145  00032D                     STR_1:
   146  00032D  20                 	db	32
   147  00032E  20                 	db	32
   148  00032F  20                 	db	32
   149  000330  20                 	db	32
   150  000331  20                 	db	32
   151  000332  53                 	db	83	;'S'
   152  000333  63                 	db	99	;'c'
   153  000334  61                 	db	97	;'a'
   154  000335  6E                 	db	110	;'n'
   155  000336  49                 	db	73	;'I'
   156  000337  52                 	db	82	;'R'
   157  000338  00                 	db	0
   158  000339                     STR_8:
   159  000339  47                 	db	71	;'G'
   160  00033A  6F                 	db	111	;'o'
   161  00033B  69                 	db	105	;'i'
   162  00033C  6E                 	db	110	;'n'
   163  00033D  67                 	db	103	;'g'
   164  00033E  20                 	db	32
   165  00033F  48                 	db	72	;'H'
   166  000340  6F                 	db	111	;'o'
   167  000341  6D                 	db	109	;'m'
   168  000342  65                 	db	101	;'e'
   169  000343  00                 	db	0
   170  000344                     STR_7:
   171  000344  53                 	db	83	;'S'
   172  000345  65                 	db	101	;'e'
   173  000346  61                 	db	97	;'a'
   174  000347  72                 	db	114	;'r'
   175  000348  63                 	db	99	;'c'
   176  000349  68                 	db	104	;'h'
   177  00034A  69                 	db	105	;'i'
   178  00034B  6E                 	db	110	;'n'
   179  00034C  67                 	db	103	;'g'
   180  00034D  00                 	db	0
   181  0000                     
   182                           ; #config settings
   183  00034E  00                 	db	0	; dummy byte at the end
   184  0000                     
   185                           	psect	cinit
   186  001836                     __pcinit:
   187                           	opt stack 0
   188  001836                     start_initialization:
   189                           	opt stack 0
   190  001836                     __initialization:
   191                           	opt stack 0
   192                           
   193                           ; Clear objects allocated to BANK1 (5 bytes)
   194  001836  0101               	movlb	1
   195  001838  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   196  00183A  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   197  00183C  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   198  00183E  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   199  001840  6BFA               	clrf	__pbssBANK1& (0+255),b
   200                           
   201                           ; Clear objects allocated to BANK0 (24 bytes)
   202  001842  EE00  F0B8         	lfsr	0,__pbssBANK0
   203  001846  0E18               	movlw	24
   204  001848                     clear_0:
   205  001848  6AEE               	clrf	postinc0,c
   206  00184A  06E8               	decf	wreg,f,c
   207  00184C  E1FD               	bnz	clear_0
   208                           
   209                           ; Clear objects allocated to COMRAM (2 bytes)
   210  00184E  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   211  001850  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   212  001852                     end_of_initialization:
   213                           	opt stack 0
   214  001852                     __end_of__initialization:
   215                           	opt stack 0
   216  001852  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   217  001854  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   218  001856  0E00               	movlw	low (__Lmediumconst shr (0+16))
   219  001858  6EF8               	movwf	tblptru,c
   220  00185A  0100               	movlb	0
   221  00185C  EFA8  F001         	goto	_main	;jump to C main() function
   222                           tblptru	equ	0xFF8
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           
   226                           	psect	bssCOMRAM
   227  00003A                     __pbssCOMRAM:
   228                           	opt stack 0
   229  00003A                     _i:
   230                           	opt stack 0
   231  00003A                     	ds	1
   232  00003B                     _mode:
   233                           	opt stack 0
   234  00003B                     	ds	1
   235                           tblptru	equ	0xFF8
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	bssBANK0
   240  0000B8                     __pbssBANK0:
   241                           	opt stack 0
   242  0000B8                     ScanIR@F3882:
   243                           	opt stack 0
   244  0000B8                     	ds	4
   245  0000BC                     ScanWithRange@F3892:
   246                           	opt stack 0
   247  0000BC                     	ds	4
   248  0000C0                     _ReceivedString:
   249                           	opt stack 0
   250  0000C0                     	ds	16
   251                           tblptru	equ	0xFF8
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK1
   256  0001FA                     __pbssBANK1:
   257                           	opt stack 0
   258  0001FA                     main@F3896:
   259                           	opt stack 0
   260  0001FA                     	ds	4
   261  0001FE                     _RFID_Read:
   262                           	opt stack 0
   263  0001FE                     	ds	1
   264                           tblptru	equ	0xFF8
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	cstackBANK2
   269  000200                     __pcstackBANK2:
   270                           	opt stack 0
   271  000200                     main@mL:
   272                           	opt stack 0
   273                           
   274                           ; 9 bytes @ 0x0
   275  000200                     	ds	9
   276  000209                     main@mR:
   277                           	opt stack 0
   278                           
   279                           ; 9 bytes @ 0x9
   280  000209                     	ds	9
   281                           tblptru	equ	0xFF8
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	cstackBANK1
   286  000100                     __pcstackBANK1:
   287                           	opt stack 0
   288  000100                     main@MoveTime:
   289                           	opt stack 0
   290                           
   291                           ; 100 bytes @ 0x0
   292  000100                     	ds	100
   293  000164                     main@MoveType:
   294                           	opt stack 0
   295                           
   296                           ; 100 bytes @ 0x64
   297  000164                     	ds	100
   298  0001C8                     main@buf:
   299                           	opt stack 0
   300                           
   301                           ; 40 bytes @ 0xC8
   302  0001C8                     	ds	40
   303  0001F0                     main@Message:
   304                           	opt stack 0
   305                           
   306                           ; 10 bytes @ 0xF0
   307  0001F0                     	ds	10
   308                           tblptru	equ	0xFF8
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           	psect	cstackBANK0
   313  000060                     __pcstackBANK0:
   314                           	opt stack 0
   315  000060                     ??_sprintf:
   316  000060                     setMotorPWM@PWMduty:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x0
   320  000060                     	ds	2
   321  000062                     stop@mL:
   322                           	opt stack 0
   323  000062                     fullSpeedAhead@mL:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x2
   327  000062                     	ds	2
   328  000064                     stop@mR:
   329                           	opt stack 0
   330  000064                     fullSpeedAhead@mR:
   331                           	opt stack 0
   332  000064                     sprintf@ap:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x4
   336  000064                     	ds	2
   337  000066                     fullSpeedAhead@power:
   338                           	opt stack 0
   339  000066                     sprintf@prec:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x6
   343  000066                     	ds	1
   344  000067                     turnLeft@mL:
   345                           	opt stack 0
   346  000067                     turnRight@mL:
   347                           	opt stack 0
   348  000067                     fullSpeedBack@mL:
   349                           	opt stack 0
   350  000067                     sprintf@val:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x7
   354  000067                     	ds	2
   355  000069                     sprintf@flag:
   356                           	opt stack 0
   357  000069                     turnLeft@mR:
   358                           	opt stack 0
   359  000069                     turnRight@mR:
   360                           	opt stack 0
   361  000069                     fullSpeedBack@mR:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x9
   365  000069                     	ds	1
   366  00006A                     sprintf@width:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0xA
   370  00006A                     	ds	1
   371  00006B                     turnLeft@power:
   372                           	opt stack 0
   373  00006B                     turnRight@power:
   374                           	opt stack 0
   375  00006B                     fullSpeedBack@power:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0xB
   379  00006B                     	ds	1
   380  00006C                     sprintf@c:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0xC
   384  00006C                     	ds	1
   385  00006D                     ScanIR@mL:
   386                           	opt stack 0
   387  00006D                     ScanWithRange@mL:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0xD
   391  00006D                     	ds	2
   392  00006F                     ScanIR@mR:
   393                           	opt stack 0
   394  00006F                     ScanWithRange@mR:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0xF
   398  00006F                     	ds	2
   399  000071                     ScanIR@Move:
   400                           	opt stack 0
   401  000071                     ScanWithRange@milliseconds:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x11
   405  000071                     	ds	2
   406  000073                     ScanIR@MoveTime:
   407                           	opt stack 0
   408  000073                     ScanWithRange@MoveTimeEntry:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x13
   412  000073                     	ds	2
   413  000075                     ??_ScanWithRange:
   414  000075                     ScanIR@MoveType:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x15
   418  000075                     	ds	2
   419  000077                     ScanIR@buf:
   420                           	opt stack 0
   421  000077                     ScanWithRange@buf:
   422                           	opt stack 0
   423                           
   424                           ; 40 bytes @ 0x17
   425  000077                     	ds	40
   426  00009F                     ScanWithRange@TimeAboveThreshold:
   427                           	opt stack 0
   428  00009F                     ScanIR@DirectionMoveThreshold:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x3F
   432  00009F                     	ds	1
   433  0000A0                     ScanWithRange@i:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x40
   437  0000A0                     	ds	1
   438  0000A1                     ScanIR@SensorResult:
   439                           	opt stack 0
   440                           
   441                           ; 4 bytes @ 0x41
   442  0000A1                     	ds	1
   443  0000A2                     ScanWithRange@n:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x42
   447  0000A2                     	ds	2
   448  0000A4                     ScanWithRange@DirectionFoundThreshold:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x44
   452  0000A4                     	ds	2
   453  0000A6                     ScanWithRange@LeftFlag:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x46
   457  0000A6                     	ds	2
   458  0000A8                     ScanWithRange@RightFlag:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x48
   462  0000A8                     	ds	2
   463  0000AA                     ScanWithRange@SensorResult:
   464                           	opt stack 0
   465                           
   466                           ; 4 bytes @ 0x4A
   467  0000AA                     	ds	4
   468  0000AE                     ??_main:
   469                           
   470                           ; 0 bytes @ 0x4E
   471  0000AE                     	ds	2
   472  0000B0                     main@ScanAngle:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x50
   476  0000B0                     	ds	1
   477  0000B1                     main@SensorResult:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x51
   481  0000B1                     	ds	4
   482  0000B5                     main@DirectionFound:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x55
   486  0000B5                     	ds	1
   487  0000B6                     main@Move:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x56
   491  0000B6                     	ds	1
   492  0000B7                     main@i:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x57
   496  0000B7                     	ds	1
   497                           tblptru	equ	0xFF8
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           
   501                           	psect	cstackCOMRAM
   502  000001                     __pcstackCOMRAM:
   503                           	opt stack 0
   504  000001                     ??i2_delay_tenth_s:
   505                           
   506                           ; 0 bytes @ 0x0
   507  000001                     	ds	1
   508  000002                     i2delay_tenth_s@tenth_seconds:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x1
   512  000002                     	ds	1
   513  000003                     i2delay_tenth_s@i:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x2
   517  000003                     	ds	2
   518  000005                     ??_InterruptHandlerHigh:
   519                           
   520                           ; 0 bytes @ 0x4
   521  000005                     	ds	14
   522  000013                     ??_InterruptHandlerLow:
   523                           
   524                           ; 0 bytes @ 0x12
   525  000013                     	ds	17
   526  000024                     ??_isdigit:
   527  000024                     ??_LCDout:
   528  000024                     ??_delay_tenth_s:
   529  000024                     ?_grabRightIR:
   530                           	opt stack 0
   531  000024                     ?_grabLeftIR:
   532                           	opt stack 0
   533  000024                     ?___wmul:
   534                           	opt stack 0
   535  000024                     ?___lwdiv:
   536                           	opt stack 0
   537  000024                     enableSensor@status:
   538                           	opt stack 0
   539  000024                     VerifySignal@Signal:
   540                           	opt stack 0
   541  000024                     ___wmul@multiplier:
   542                           	opt stack 0
   543  000024                     ___lwdiv@dividend:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x23
   547  000024                     	ds	1
   548  000025                     enableSensor@sensor:
   549                           	opt stack 0
   550  000025                     delay_tenth_s@tenth_seconds:
   551                           	opt stack 0
   552  000025                     _isdigit$1958:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x24
   556  000025                     	ds	1
   557  000026                     ??_grabRightIR:
   558  000026                     ??_grabLeftIR:
   559  000026                     ??_VerifySignal:
   560  000026                     isdigit@c:
   561                           	opt stack 0
   562  000026                     delay_tenth_s@i:
   563                           	opt stack 0
   564  000026                     ___wmul@multiplicand:
   565                           	opt stack 0
   566  000026                     ___lwdiv@divisor:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x25
   570  000026                     	ds	1
   571  000027                     LCDout@number:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x26
   575  000027                     	ds	1
   576  000028                     SendLCD@type:
   577                           	opt stack 0
   578  000028                     ___wmul@product:
   579                           	opt stack 0
   580  000028                     ___lwdiv@quotient:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x27
   584  000028                     	ds	1
   585  000029                     SendLCD@Byte:
   586                           	opt stack 0
   587  000029                     grabRightIR@IR_signal:
   588                           	opt stack 0
   589  000029                     grabLeftIR@IR_signal:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x28
   593  000029                     	ds	1
   594  00002A                     ??_initLCD:
   595  00002A                     ?___awdiv:
   596                           	opt stack 0
   597  00002A                     SetLine@line:
   598                           	opt stack 0
   599  00002A                     ___lwdiv@counter:
   600                           	opt stack 0
   601  00002A                     LCD_String@string:
   602                           	opt stack 0
   603  00002A                     ___awdiv@dividend:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x29
   607  00002A                     	ds	1
   608  00002B                     ?___lwmod:
   609                           	opt stack 0
   610  00002B                     grabRightIR@i:
   611                           	opt stack 0
   612  00002B                     grabLeftIR@i:
   613                           	opt stack 0
   614  00002B                     ___lwmod@dividend:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x2A
   618  00002B                     	ds	1
   619  00002C                     VerifySignal@checksum:
   620                           	opt stack 0
   621  00002C                     ___awdiv@divisor:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x2B
   625  00002C                     	ds	1
   626  00002D                     VerifySignal@hexByte:
   627                           	opt stack 0
   628  00002D                     ___lwmod@divisor:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x2C
   632  00002D                     	ds	1
   633  00002E                     ___awdiv@counter:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x2D
   637  00002E                     	ds	1
   638  00002F                     VerifySignal@i:
   639                           	opt stack 0
   640  00002F                     ___awdiv@sign:
   641                           	opt stack 0
   642  00002F                     ___lwmod@counter:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x2E
   646  00002F                     	ds	1
   647  000030                     ?_sprintf:
   648                           	opt stack 0
   649  000030                     sprintf@sp:
   650                           	opt stack 0
   651  000030                     ___awdiv@quotient:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x2F
   655  000030                     	ds	2
   656  000032                     setMotorPWM@m:
   657                           	opt stack 0
   658  000032                     sprintf@f:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x31
   662  000032                     	ds	2
   663  000034                     ??_setMotorPWM:
   664                           
   665                           ; 0 bytes @ 0x33
   666  000034                     	ds	5
   667  000039                     ??_ScanIR:
   668                           
   669                           ; 0 bytes @ 0x38
   670  000039                     	ds	1
   671  00003A                     tblptru	equ	0xFF8
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           
   675                           ; 0 bytes @ 0x39
   676 ;;
   677 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   678 ;;
   679 ;; *************** function _main *****************
   680 ;; Defined at:
   681 ;;		line 51 in file "main.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;  MoveType      100  100[BANK1 ] unsigned char [100]
   686 ;;  MoveTime      100    0[BANK1 ] unsigned char [100]
   687 ;;  buf            40  200[BANK1 ] unsigned char [40]
   688 ;;  Message        10  240[BANK1 ] unsigned char [10]
   689 ;;  mR              9    9[BANK2 ] struct DC_motor
   690 ;;  mL              9    0[BANK2 ] struct DC_motor
   691 ;;  SensorResult    4   81[BANK0 ] unsigned int [2]
   692 ;;  i               1   87[BANK0 ] unsigned char 
   693 ;;  Move            1   86[BANK0 ] unsigned char 
   694 ;;  DirectionFou    1   85[BANK0 ] char 
   695 ;;  ScanAngle       1   80[BANK0 ] unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;		None               void
   698 ;; Registers used:
   699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   705 ;;      Params:         0       0       0       0
   706 ;;      Locals:         0       8     250      18
   707 ;;      Temps:          0       2       0       0
   708 ;;      Totals:         0      10     250      18
   709 ;;Total ram usage:      278 bytes
   710 ;; Hardware stack levels required when called:    8
   711 ;; This function calls:
   712 ;;		_LCD_String
   713 ;;		_ScanIR
   714 ;;		_ScanWithRange
   715 ;;		_SendLCD
   716 ;;		_SetLine
   717 ;;		_VerifySignal
   718 ;;		_delay_tenth_s
   719 ;;		_enableSensor
   720 ;;		_fullSpeedAhead
   721 ;;		_fullSpeedBack
   722 ;;		_grabLeftIR
   723 ;;		_grabRightIR
   724 ;;		_initIR
   725 ;;		_initLCD
   726 ;;		_initMotorPWM
   727 ;;		_initRFID
   728 ;;		_initTimer
   729 ;;		_sprintf
   730 ;;		_stop
   731 ;; This function is called by:
   732 ;;		Startup code after reset
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text0
   737  000350                     __ptext0:
   738                           	opt stack 0
   739  000350                     _main:
   740                           	opt stack 23
   741                           
   742                           ;main.c: 54: unsigned char Message[10];
   743                           ;main.c: 55: unsigned char i=0;
   744                           
   745                           ;incstack = 0
   746  000350  0E00               	movlw	0
   747  000352  0100               	movlb	0	; () banked
   748  000354  6FB7               	movwf	main@i& (0+255),b
   749                           
   750                           ;main.c: 56: signed char DirectionFound=0;
   751  000356  0E00               	movlw	0
   752  000358  0100               	movlb	0	; () banked
   753  00035A  6FB5               	movwf	main@DirectionFound& (0+255),b
   754                           
   755                           ;main.c: 57: char MoveTime[100];
   756                           ;main.c: 58: char MoveType[100];
   757                           ;main.c: 59: char Move=0;
   758  00035C  0E00               	movlw	0
   759  00035E  0100               	movlb	0	; () banked
   760  000360  6FB6               	movwf	main@Move& (0+255),b
   761                           
   762                           ; BSR set to: 0
   763                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   764  000362  C1FA  F0B1         	movff	main@F3896,main@SensorResult
   765  000366  C1FB  F0B2         	movff	main@F3896+1,main@SensorResult+1
   766  00036A  C1FC  F0B3         	movff	main@F3896+2,main@SensorResult+2
   767  00036E  C1FD  F0B4         	movff	main@F3896+3,main@SensorResult+3
   768                           
   769                           ;main.c: 61: char buf[40];
   770                           ;main.c: 63: unsigned char ScanAngle=60;
   771  000372  0E3C               	movlw	60
   772  000374  0100               	movlb	0	; () banked
   773  000376  6FB0               	movwf	main@ScanAngle& (0+255),b
   774                           
   775                           ; BSR set to: 0
   776                           ;main.c: 66: INTCONbits.GIEH=1;
   777  000378  8EF2               	bsf	intcon,7,c	;volatile
   778                           
   779                           ; BSR set to: 0
   780                           ;main.c: 67: INTCONbits.GIEL=1;
   781  00037A  8CF2               	bsf	intcon,6,c	;volatile
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 68: INTCONbits.PEIE=1;
   785  00037C  8CF2               	bsf	intcon,6,c	;volatile
   786                           
   787                           ; BSR set to: 0
   788                           ;main.c: 69: RCONbits.IPEN=1;
   789  00037E  8ED0               	bsf	4048,7,c	;volatile
   790                           
   791                           ; BSR set to: 0
   792                           ;main.c: 72: IPR1bits.RCIP=0;
   793  000380  9A9F               	bcf	3999,5,c	;volatile
   794                           
   795                           ; BSR set to: 0
   796                           ;main.c: 73: PIE1bits.RCIE=1;
   797  000382  8A9D               	bsf	3997,5,c	;volatile
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 76: TRISCbits.RC3=1;
   801  000384  8694               	bsf	3988,3,c	;volatile
   802                           
   803                           ; BSR set to: 0
   804                           ;main.c: 77: INTCONbits.INT0IE=1;
   805  000386  88F2               	bsf	intcon,4,c	;volatile
   806                           
   807                           ; BSR set to: 0
   808                           ;main.c: 80: PIR1bits.RC1IF=0;
   809  000388  9A9E               	bcf	3998,5,c	;volatile
   810                           
   811                           ; BSR set to: 0
   812                           ;main.c: 81: INTCONbits.INT0IF=0;
   813  00038A  92F2               	bcf	intcon,1,c	;volatile
   814                           
   815                           ;main.c: 84: struct DC_motor mL, mR;
   816                           ;main.c: 85: mL.power=0;
   817  00038C  0E00               	movlw	0
   818  00038E  0102               	movlb	2	; () banked
   819  000390  6F00               	movwf	main@mL& (0+255),b
   820                           
   821                           ;main.c: 86: mL.direction=1;
   822  000392  0E01               	movlw	1
   823  000394  0102               	movlb	2	; () banked
   824  000396  6F01               	movwf	(main@mL+1)& (0+255),b
   825                           
   826                           ; BSR set to: 2
   827                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   828  000398  0E79               	movlw	121
   829  00039A  0102               	movlb	2	; () banked
   830  00039C  6F02               	movwf	(main@mL+2)& (0+255),b
   831  00039E  0E0F               	movlw	15
   832  0003A0  0102               	movlb	2	; () banked
   833  0003A2  6F03               	movwf	(main@mL+3)& (0+255),b
   834                           
   835                           ; BSR set to: 2
   836                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   837  0003A4  0E78               	movlw	120
   838  0003A6  0102               	movlb	2	; () banked
   839  0003A8  6F04               	movwf	(main@mL+4)& (0+255),b
   840  0003AA  0E0F               	movlw	15
   841  0003AC  0102               	movlb	2	; () banked
   842  0003AE  6F05               	movwf	(main@mL+5)& (0+255),b
   843                           
   844                           ;main.c: 89: mL.dir_pin=0;
   845  0003B0  0E00               	movlw	0
   846  0003B2  0102               	movlb	2	; () banked
   847  0003B4  6F06               	movwf	(main@mL+6)& (0+255),b
   848                           
   849                           ;main.c: 90: mL.PWMperiod=199;
   850  0003B6  0E00               	movlw	0
   851  0003B8  0102               	movlb	2	; () banked
   852  0003BA  6F08               	movwf	(main@mL+8)& (0+255),b
   853  0003BC  0EC7               	movlw	199
   854  0003BE  6F07               	movwf	(main@mL+7)& (0+255),b
   855                           
   856                           ;main.c: 92: mR.power=0;
   857  0003C0  0E00               	movlw	0
   858  0003C2  0102               	movlb	2	; () banked
   859  0003C4  6F09               	movwf	main@mR& (0+255),b
   860                           
   861                           ;main.c: 93: mR.direction=1;
   862  0003C6  0E01               	movlw	1
   863  0003C8  0102               	movlb	2	; () banked
   864  0003CA  6F0A               	movwf	(main@mR+1)& (0+255),b
   865                           
   866                           ; BSR set to: 2
   867                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   868  0003CC  0E77               	movlw	119
   869  0003CE  0102               	movlb	2	; () banked
   870  0003D0  6F0B               	movwf	(main@mR+2)& (0+255),b
   871  0003D2  0E0F               	movlw	15
   872  0003D4  0102               	movlb	2	; () banked
   873  0003D6  6F0C               	movwf	(main@mR+3)& (0+255),b
   874                           
   875                           ; BSR set to: 2
   876                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   877  0003D8  0E76               	movlw	118
   878  0003DA  0102               	movlb	2	; () banked
   879  0003DC  6F0D               	movwf	(main@mR+4)& (0+255),b
   880  0003DE  0E0F               	movlw	15
   881  0003E0  0102               	movlb	2	; () banked
   882  0003E2  6F0E               	movwf	(main@mR+5)& (0+255),b
   883                           
   884                           ;main.c: 96: mR.dir_pin=2;
   885  0003E4  0E02               	movlw	2
   886  0003E6  0102               	movlb	2	; () banked
   887  0003E8  6F0F               	movwf	(main@mR+6)& (0+255),b
   888                           
   889                           ;main.c: 97: mR.PWMperiod=199;
   890  0003EA  0E00               	movlw	0
   891  0003EC  0102               	movlb	2	; () banked
   892  0003EE  6F11               	movwf	(main@mR+8)& (0+255),b
   893  0003F0  0EC7               	movlw	199
   894  0003F2  6F10               	movwf	(main@mR+7)& (0+255),b
   895                           
   896                           ;main.c: 99: OSCCON = 0x72;
   897  0003F4  0E72               	movlw	114
   898  0003F6  6ED3               	movwf	4051,c	;volatile
   899  0003F8                     l376:
   900  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   901  0003FA  D22A               	goto	l3319
   902  0003FC  D7FD               	goto	l376
   903  0003FE                     l3163:
   904                           
   905                           ;main.c: 112: stop(&mL, &mR);
   906  0003FE  0E00               	movlw	low main@mL
   907  000400  0100               	movlb	0	; () banked
   908  000402  6F62               	movwf	stop@mL& (0+255),b
   909  000404  0E02               	movlw	high main@mL
   910  000406  0100               	movlb	0	; () banked
   911  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   912  00040A  0E09               	movlw	low main@mR
   913  00040C  0100               	movlb	0	; () banked
   914  00040E  6F64               	movwf	stop@mR& (0+255),b
   915  000410  0E02               	movlw	high main@mR
   916  000412  0100               	movlb	0	; () banked
   917  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   918  000416  EC41  F009         	call	_stop	;wreg free
   919                           
   920                           ;main.c: 113: RFID_Read=0;
   921  00041A  0E00               	movlw	0
   922  00041C  0101               	movlb	1	; () banked
   923  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   924                           
   925                           ; BSR set to: 1
   926                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   927  000420  EC8B  F00A         	call	_grabLeftIR	;wreg free
   928  000424  C024  F0B1         	movff	?_grabLeftIR,main@SensorResult
   929  000428  C025  F0B2         	movff	?_grabLeftIR+1,main@SensorResult+1
   930                           
   931                           ;main.c: 117: SensorResult[1]=grabRightIR();
   932  00042C  EC52  F00A         	call	_grabRightIR	;wreg free
   933  000430  C024  F0B3         	movff	?_grabRightIR,main@SensorResult+2
   934  000434  C025  F0B4         	movff	?_grabRightIR+1,main@SensorResult+3
   935                           
   936                           ;main.c: 121: CAP1BUFH=0;
   937  000438  0E00               	movlw	0
   938  00043A  6E69               	movwf	3945,c	;volatile
   939                           
   940                           ;main.c: 122: CAP1BUFL=0;
   941  00043C  0E00               	movlw	0
   942  00043E  6E68               	movwf	3944,c	;volatile
   943                           
   944                           ;main.c: 123: CAP2BUFH=0;
   945  000440  0E00               	movlw	0
   946  000442  6E67               	movwf	3943,c	;volatile
   947                           
   948                           ;main.c: 124: CAP2BUFL=0;
   949  000444  0E00               	movlw	0
   950  000446  6E66               	movwf	3942,c	;volatile
   951                           
   952                           ;main.c: 127: SendLCD(0b00000001,0);
   953  000448  0E00               	movlw	0
   954  00044A  6E28               	movwf	SendLCD@type,c
   955  00044C  0E01               	movlw	1
   956  00044E  EC03  F00C         	call	_SendLCD
   957                           
   958                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   959  000452  0E21               	movlw	33
   960  000454                     u2777:
   961  000454  2EE8               	decfsz	wreg,f,c
   962  000456  D7FE               	goto	u2777
   963  000458  F000               	nop	
   964                           
   965                           ;main.c: 129: SendLCD(0b00000010,0);
   966  00045A  0E00               	movlw	0
   967  00045C  6E28               	movwf	SendLCD@type,c
   968  00045E  0E02               	movlw	2
   969  000460  EC03  F00C         	call	_SendLCD
   970                           
   971                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   972  000464  0E06               	movlw	6
   973  000466  0100               	movlb	0	; () banked
   974  000468  6FAE               	movwf	??_main& (0+255),b
   975  00046A  0E30               	movlw	48
   976  00046C                     u2787:
   977  00046C  2EE8               	decfsz	wreg,f,c
   978  00046E  D7FE               	goto	u2787
   979  000470  2FAE               	decfsz	??_main& (0+255),f,b
   980  000472  D7FC               	goto	u2787
   981  000474  D000               	nop2	
   982                           
   983                           ;main.c: 131: SetLine(1);
   984  000476  0E01               	movlw	1
   985  000478  ECEB  F00B         	call	_SetLine
   986                           
   987                           ;main.c: 132: LCD_String("      Inert Mode");
   988  00047C  0E1C               	movlw	low STR_5
   989  00047E  6E2A               	movwf	LCD_String@string,c
   990  000480  0E03               	movlw	high STR_5
   991  000482  6E2B               	movwf	LCD_String@string+1,c
   992  000484  ECC4  F00A         	call	_LCD_String	;wreg free
   993                           
   994                           ;main.c: 133: SetLine(2);
   995  000488  0E02               	movlw	2
   996  00048A  ECEB  F00B         	call	_SetLine
   997                           
   998                           ;main.c: 134: if (RFID_Read) {
   999  00048E  0101               	movlb	1	; () banked
  1000  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1001  000492  B4D8               	btfsc	status,2,c
  1002  000494  D007               	goto	l3197
  1003                           
  1004                           ; BSR set to: 1
  1005                           ;main.c: 135: LCD_String(Message);
  1006  000496  0EF0               	movlw	low main@Message
  1007  000498  6E2A               	movwf	LCD_String@string,c
  1008  00049A  0E01               	movlw	high main@Message
  1009  00049C  6E2B               	movwf	LCD_String@string+1,c
  1010  00049E  ECC4  F00A         	call	_LCD_String	;wreg free
  1011                           
  1012                           ;main.c: 136: } else {
  1013  0004A2  D1D6               	goto	l3319
  1014  0004A4                     l3197:
  1015                           
  1016                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1017  0004A4  0EC8               	movlw	low main@buf
  1018  0004A6  6E30               	movwf	sprintf@sp,c
  1019  0004A8  0E01               	movlw	high main@buf
  1020  0004AA  6E31               	movwf	sprintf@sp+1,c
  1021  0004AC  0E0B               	movlw	low STR_6
  1022  0004AE  6E32               	movwf	sprintf@f,c
  1023  0004B0  0E03               	movlw	high STR_6
  1024  0004B2  6E33               	movwf	sprintf@f+1,c
  1025  0004B4  C0B1  F034         	movff	main@SensorResult,?_sprintf+4
  1026  0004B8  C0B2  F035         	movff	main@SensorResult+1,?_sprintf+5
  1027  0004BC  C0B3  F036         	movff	main@SensorResult+2,?_sprintf+6
  1028  0004C0  C0B4  F037         	movff	main@SensorResult+3,?_sprintf+7
  1029  0004C4  EC39  F004         	call	_sprintf	;wreg free
  1030                           
  1031                           ;main.c: 138: LCD_String(buf);
  1032  0004C8  0EC8               	movlw	low main@buf
  1033  0004CA  6E2A               	movwf	LCD_String@string,c
  1034  0004CC  0E01               	movlw	high main@buf
  1035  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1036  0004D0  ECC4  F00A         	call	_LCD_String	;wreg free
  1037                           
  1038                           ;main.c: 139: }
  1039                           ;main.c: 142: break;
  1040  0004D4  D1BD               	goto	l3319
  1041  0004D6                     l3201:
  1042                           
  1043                           ;main.c: 147: initMotorPWM();
  1044  0004D6  ECD2  F00B         	call	_initMotorPWM	;wreg free
  1045                           
  1046                           ;main.c: 148: initTimer();
  1047  0004DA  EC84  F00C         	call	_initTimer	;wreg free
  1048                           
  1049                           ;main.c: 149: initRFID();
  1050  0004DE  EC76  F00C         	call	_initRFID	;wreg free
  1051                           
  1052                           ;main.c: 150: initLCD();
  1053  0004E2  EC89  F008         	call	_initLCD	;wreg free
  1054                           
  1055                           ;main.c: 151: initIR();
  1056  0004E6  EC56  F00C         	call	_initIR	;wreg free
  1057                           
  1058                           ;main.c: 153: enableSensor(0, 1);
  1059  0004EA  0E01               	movlw	1
  1060  0004EC  6E24               	movwf	enableSensor@status,c
  1061  0004EE  0E00               	movlw	0
  1062  0004F0  EC30  F00C         	call	_enableSensor
  1063                           
  1064                           ;main.c: 154: enableSensor(1, 1);
  1065  0004F4  0E01               	movlw	1
  1066  0004F6  6E24               	movwf	enableSensor@status,c
  1067  0004F8  0E01               	movlw	1
  1068  0004FA  EC30  F00C         	call	_enableSensor
  1069                           
  1070                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1071  0004FE  0E00               	movlw	low main@mL
  1072  000500  0100               	movlb	0	; () banked
  1073  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1074  000504  0E02               	movlw	high main@mL
  1075  000506  0100               	movlb	0	; () banked
  1076  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1077  00050A  0E09               	movlw	low main@mR
  1078  00050C  0100               	movlb	0	; () banked
  1079  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1080  000510  0E02               	movlw	high main@mR
  1081  000512  0100               	movlb	0	; () banked
  1082  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1083  000516  0E64               	movlw	100
  1084  000518  0100               	movlb	0	; () banked
  1085  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1086  00051C  EC12  F00A         	call	_fullSpeedAhead	;wreg free
  1087                           
  1088                           ;main.c: 158: delay_tenth_s(1);
  1089  000520  0E01               	movlw	1
  1090  000522  EC9A  F00B         	call	_delay_tenth_s
  1091                           
  1092                           ;main.c: 160: mode=-1;
  1093  000526  683B               	setf	_mode,c	;volatile
  1094                           
  1095                           ;main.c: 162: break;
  1096  000528  D193               	goto	l3319
  1097  00052A                     l3221:
  1098                           
  1099                           ;main.c: 170: SetLine(1);
  1100  00052A  0E01               	movlw	1
  1101  00052C  ECEB  F00B         	call	_SetLine
  1102                           
  1103                           ;main.c: 171: LCD_String("Searching");
  1104  000530  0E44               	movlw	low STR_7
  1105  000532  6E2A               	movwf	LCD_String@string,c
  1106  000534  0E03               	movlw	high STR_7
  1107  000536  6E2B               	movwf	LCD_String@string+1,c
  1108  000538  ECC4  F00A         	call	_LCD_String	;wreg free
  1109                           
  1110                           ;main.c: 173: if (DirectionFound==-1) {
  1111  00053C  0100               	movlb	0	; () banked
  1112  00053E  29B5               	incf	main@DirectionFound& (0+255),w,b
  1113  000540  A4D8               	btfss	status,2,c
  1114  000542  D030               	goto	l3237
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1118  000544  0E00               	movlw	low main@mL
  1119  000546  0100               	movlb	0	; () banked
  1120  000548  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1121  00054A  0E02               	movlw	high main@mL
  1122  00054C  0100               	movlb	0	; () banked
  1123  00054E  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1124  000550  0E09               	movlw	low main@mR
  1125  000552  0100               	movlb	0	; () banked
  1126  000554  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1127  000556  0E02               	movlw	high main@mR
  1128  000558  0100               	movlb	0	; () banked
  1129  00055A  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1130  00055C  0E64               	movlw	100
  1131  00055E  0100               	movlb	0	; () banked
  1132  000560  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1133  000562  EC12  F00A         	call	_fullSpeedAhead	;wreg free
  1134                           
  1135                           ;main.c: 179: delay_tenth_s(6);
  1136  000566  0E06               	movlw	6
  1137  000568  EC9A  F00B         	call	_delay_tenth_s
  1138                           
  1139                           ;main.c: 180: stop(&mL,&mR);
  1140  00056C  0E00               	movlw	low main@mL
  1141  00056E  0100               	movlb	0	; () banked
  1142  000570  6F62               	movwf	stop@mL& (0+255),b
  1143  000572  0E02               	movlw	high main@mL
  1144  000574  0100               	movlb	0	; () banked
  1145  000576  6F63               	movwf	(stop@mL+1)& (0+255),b
  1146  000578  0E09               	movlw	low main@mR
  1147  00057A  0100               	movlb	0	; () banked
  1148  00057C  6F64               	movwf	stop@mR& (0+255),b
  1149  00057E  0E02               	movlw	high main@mR
  1150  000580  0100               	movlb	0	; () banked
  1151  000582  6F65               	movwf	(stop@mR+1)& (0+255),b
  1152  000584  EC41  F009         	call	_stop	;wreg free
  1153                           
  1154                           ;main.c: 181: DirectionFound=0;
  1155  000588  0E00               	movlw	0
  1156  00058A  0100               	movlb	0	; () banked
  1157  00058C  6FB5               	movwf	main@DirectionFound& (0+255),b
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;main.c: 182: MoveType[Move]=0;
  1161  00058E  0100               	movlb	0	; () banked
  1162  000590  51B6               	movf	main@Move& (0+255),w,b
  1163  000592  0D01               	mullw	1
  1164  000594  0E64               	movlw	low main@MoveType
  1165  000596  24F3               	addwf	prodl,w,c
  1166  000598  6ED9               	movwf	fsr2l,c
  1167  00059A  0E01               	movlw	high main@MoveType
  1168  00059C  20F4               	addwfc	prodh,w,c
  1169  00059E  6EDA               	movwf	fsr2h,c
  1170  0005A0  0E00               	movlw	0
  1171  0005A2  D132               	goto	L2
  1172  0005A4                     l3237:
  1173                           
  1174                           ; BSR set to: 0
  1175  0005A4  0100               	movlb	0	; () banked
  1176  0005A6  51B5               	movf	main@DirectionFound& (0+255),w,b
  1177  0005A8  0100               	movlb	0	; () banked
  1178  0005AA  A4D8               	btfss	status,2,c
  1179  0005AC  D020               	goto	l3243
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1183  0005AE  0E00               	movlw	low main@mL
  1184  0005B0  0100               	movlb	0	; () banked
  1185  0005B2  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1186  0005B4  0E02               	movlw	high main@mL
  1187  0005B6  0100               	movlb	0	; () banked
  1188  0005B8  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1189  0005BA  0E09               	movlw	low main@mR
  1190  0005BC  0100               	movlb	0	; () banked
  1191  0005BE  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1192  0005C0  0E02               	movlw	high main@mR
  1193  0005C2  0100               	movlb	0	; () banked
  1194  0005C4  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1195  0005C6  C0B0  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1196  0005CA  0100               	movlb	0	; () banked
  1197  0005CC  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1198  0005CE  0100               	movlb	0	; () banked
  1199  0005D0  51B6               	movf	main@Move& (0+255),w,b
  1200  0005D2  0D01               	mullw	1
  1201  0005D4  0E00               	movlw	low main@MoveTime
  1202  0005D6  24F3               	addwf	prodl,w,c
  1203  0005D8  0100               	movlb	0	; () banked
  1204  0005DA  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1205  0005DC  0E01               	movlw	high main@MoveTime
  1206  0005DE  20F4               	addwfc	prodh,w,c
  1207  0005E0  0100               	movlb	0	; () banked
  1208  0005E2  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1209  0005E4  ECBC  F005         	call	_ScanWithRange	;wreg free
  1210  0005E8  0100               	movlb	0	; () banked
  1211  0005EA  6FB5               	movwf	main@DirectionFound& (0+255),b
  1212  0005EC  D02E               	goto	l3251
  1213  0005EE                     l3243:
  1214                           
  1215                           ; BSR set to: 0
  1216  0005EE  0100               	movlb	0	; () banked
  1217  0005F0  05B5               	decf	main@DirectionFound& (0+255),w,b
  1218  0005F2  A4D8               	btfss	status,2,c
  1219  0005F4  D023               	goto	l3247
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;main.c: 189: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1223  0005F6  0E00               	movlw	low main@mL
  1224  0005F8  0100               	movlb	0	; () banked
  1225  0005FA  6F6D               	movwf	ScanIR@mL& (0+255),b
  1226  0005FC  0E02               	movlw	high main@mL
  1227  0005FE  0100               	movlb	0	; () banked
  1228  000600  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1229  000602  0E09               	movlw	low main@mR
  1230  000604  0100               	movlb	0	; () banked
  1231  000606  6F6F               	movwf	ScanIR@mR& (0+255),b
  1232  000608  0E02               	movlw	high main@mR
  1233  00060A  0100               	movlb	0	; () banked
  1234  00060C  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1235  00060E  0EB6               	movlw	low main@Move
  1236  000610  0100               	movlb	0	; () banked
  1237  000612  6F71               	movwf	ScanIR@Move& (0+255),b
  1238  000614  0E00               	movlw	high main@Move
  1239  000616  0100               	movlb	0	; () banked
  1240  000618  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1241  00061A  0E00               	movlw	low main@MoveTime
  1242  00061C  0100               	movlb	0	; () banked
  1243  00061E  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1244  000620  0E01               	movlw	high main@MoveTime
  1245  000622  0100               	movlb	0	; () banked
  1246  000624  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1247  000626  0E64               	movlw	low main@MoveType
  1248  000628  0100               	movlb	0	; () banked
  1249  00062A  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1250  00062C  0E01               	movlw	high main@MoveType
  1251  00062E  0100               	movlb	0	; () banked
  1252  000630  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1253  000632  ECA9  F007         	call	_ScanIR	;wreg free
  1254  000636  0100               	movlb	0	; () banked
  1255  000638  6FB5               	movwf	main@DirectionFound& (0+255),b
  1256                           
  1257                           ;main.c: 190: } else if (DirectionFound==2) {
  1258  00063A  D0E7               	goto	l3307
  1259  00063C                     l3247:
  1260                           
  1261                           ; BSR set to: 0
  1262  00063C  0E02               	movlw	2
  1263  00063E  0100               	movlb	0	; () banked
  1264  000640  19B5               	xorwf	main@DirectionFound& (0+255),w,b
  1265  000642  A4D8               	btfss	status,2,c
  1266  000644  D0E2               	goto	l3307
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;main.c: 192: mode=2;
  1270  000646  0E02               	movlw	2
  1271  000648  6E3B               	movwf	_mode,c	;volatile
  1272  00064A                     l3251:
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;main.c: 193: MoveType[Move]=1;
  1276  00064A  0100               	movlb	0	; () banked
  1277  00064C  51B6               	movf	main@Move& (0+255),w,b
  1278  00064E  0D01               	mullw	1
  1279  000650  0E64               	movlw	low main@MoveType
  1280  000652  24F3               	addwf	prodl,w,c
  1281  000654  6ED9               	movwf	fsr2l,c
  1282  000656  0E01               	movlw	high main@MoveType
  1283  000658  20F4               	addwfc	prodh,w,c
  1284  00065A  6EDA               	movwf	fsr2h,c
  1285  00065C  0E01               	movlw	1
  1286  00065E  D0D4               	goto	L2
  1287  000660                     l3255:
  1288                           
  1289                           ;main.c: 205: if (RFID_Read) {
  1290  000660  0101               	movlb	1	; () banked
  1291  000662  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1292  000664  B4D8               	btfsc	status,2,c
  1293  000666  D0A2               	goto	l3297
  1294                           
  1295                           ; BSR set to: 1
  1296                           ;main.c: 206: stop(&mL, &mR);
  1297  000668  0E00               	movlw	low main@mL
  1298  00066A  0100               	movlb	0	; () banked
  1299  00066C  6F62               	movwf	stop@mL& (0+255),b
  1300  00066E  0E02               	movlw	high main@mL
  1301  000670  0100               	movlb	0	; () banked
  1302  000672  6F63               	movwf	(stop@mL+1)& (0+255),b
  1303  000674  0E09               	movlw	low main@mR
  1304  000676  0100               	movlb	0	; () banked
  1305  000678  6F64               	movwf	stop@mR& (0+255),b
  1306  00067A  0E02               	movlw	high main@mR
  1307  00067C  0100               	movlb	0	; () banked
  1308  00067E  6F65               	movwf	(stop@mR+1)& (0+255),b
  1309  000680  EC41  F009         	call	_stop	;wreg free
  1310                           
  1311                           ;main.c: 207: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1312  000684  0E03               	movlw	3
  1313  000686  0100               	movlb	0	; () banked
  1314  000688  19CF               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1315  00068A  A4D8               	btfss	status,2,c
  1316  00068C  D002               	goto	u2690
  1317  00068E  0E01               	movlw	1
  1318  000690  D001               	goto	u2692
  1319  000692                     u2690:
  1320  000692  0E00               	movlw	0
  1321  000694                     u2692:
  1322  000694  0100               	movlb	0	; () banked
  1323  000696  6FAE               	movwf	??_main& (0+255),b
  1324  000698  0E02               	movlw	2
  1325  00069A  0100               	movlb	0	; () banked
  1326  00069C  19C0               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1327  00069E  A4D8               	btfss	status,2,c
  1328  0006A0  D002               	goto	u2700
  1329  0006A2  0E01               	movlw	1
  1330  0006A4  D001               	goto	u2702
  1331  0006A6                     u2700:
  1332  0006A6  0E00               	movlw	0
  1333  0006A8                     u2702:
  1334  0006A8  0100               	movlb	0	; () banked
  1335  0006AA  15AE               	andwf	??_main& (0+255),w,b
  1336  0006AC  A0E8               	btfss	wreg,0,c
  1337  0006AE  D0D0               	goto	l3319
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;main.c: 208: if (VerifySignal(ReceivedString)){
  1341  0006B0  0EC0               	movlw	low _ReceivedString
  1342  0006B2  6E24               	movwf	VerifySignal@Signal,c
  1343  0006B4  0E00               	movlw	high _ReceivedString
  1344  0006B6  6E25               	movwf	VerifySignal@Signal+1,c
  1345  0006B8  ECE7  F008         	call	_VerifySignal	;wreg free
  1346  0006BC  0900               	iorlw	0
  1347  0006BE  B4D8               	btfsc	status,2,c
  1348  0006C0  D041               	goto	l3289
  1349                           
  1350                           ;main.c: 210: for (i=0; i<10; i++){
  1351  0006C2  0E00               	movlw	0
  1352  0006C4  0100               	movlb	0	; () banked
  1353  0006C6  6FB7               	movwf	main@i& (0+255),b
  1354  0006C8                     l3265:
  1355                           
  1356                           ; BSR set to: 0
  1357  0006C8  0E09               	movlw	9
  1358  0006CA  0100               	movlb	0	; () banked
  1359  0006CC  65B7               	cpfsgt	main@i& (0+255),b
  1360  0006CE  D001               	goto	l3269
  1361  0006D0  D020               	goto	l3275
  1362  0006D2                     l3269:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 211: Message[i] = ReceivedString[i+1];
  1366  0006D2  0100               	movlb	0	; () banked
  1367  0006D4  51B7               	movf	main@i& (0+255),w,b
  1368  0006D6  0100               	movlb	0	; () banked
  1369  0006D8  6FAE               	movwf	??_main& (0+255),b
  1370  0006DA  6BAF               	clrf	(??_main+1)& (0+255),b
  1371  0006DC  0E01               	movlw	1
  1372  0006DE  0100               	movlb	0	; () banked
  1373  0006E0  27AE               	addwf	??_main& (0+255),f,b
  1374  0006E2  0E00               	movlw	0
  1375  0006E4  23AF               	addwfc	(??_main+1)& (0+255),f,b
  1376  0006E6  0EC0               	movlw	low _ReceivedString
  1377  0006E8  0100               	movlb	0	; () banked
  1378  0006EA  25AE               	addwf	??_main& (0+255),w,b
  1379  0006EC  6ED9               	movwf	fsr2l,c
  1380  0006EE  0E00               	movlw	high _ReceivedString
  1381  0006F0  0100               	movlb	0	; () banked
  1382  0006F2  21AF               	addwfc	(??_main+1)& (0+255),w,b
  1383  0006F4  6EDA               	movwf	fsr2h,c
  1384  0006F6  0100               	movlb	0	; () banked
  1385  0006F8  51B7               	movf	main@i& (0+255),w,b
  1386  0006FA  0D01               	mullw	1
  1387  0006FC  0EF0               	movlw	low main@Message
  1388  0006FE  24F3               	addwf	prodl,w,c
  1389  000700  6EE1               	movwf	fsr1l,c
  1390  000702  0E01               	movlw	high main@Message
  1391  000704  20F4               	addwfc	prodh,w,c
  1392  000706  6EE2               	movwf	fsr1h,c
  1393  000708  CFDF FFE7          	movff	indf2,indf1
  1394                           
  1395                           ; BSR set to: 0
  1396  00070C  0100               	movlb	0	; () banked
  1397  00070E  2BB7               	incf	main@i& (0+255),f,b
  1398  000710  D7DB               	goto	l3265
  1399  000712                     l3275:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 212: }
  1403                           ;main.c: 215: for (i=0; i<16; i++) {
  1404  000712  0E00               	movlw	0
  1405  000714  0100               	movlb	0	; () banked
  1406  000716  6FB7               	movwf	main@i& (0+255),b
  1407  000718                     l3277:
  1408                           
  1409                           ; BSR set to: 0
  1410  000718  0E0F               	movlw	15
  1411  00071A  0100               	movlb	0	; () banked
  1412  00071C  65B7               	cpfsgt	main@i& (0+255),b
  1413  00071E  D001               	goto	l3281
  1414  000720  D00E               	goto	l3287
  1415  000722                     l3281:
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;main.c: 216: ReceivedString[i]=0;
  1419  000722  0100               	movlb	0	; () banked
  1420  000724  51B7               	movf	main@i& (0+255),w,b
  1421  000726  0D01               	mullw	1
  1422  000728  0EC0               	movlw	low _ReceivedString
  1423  00072A  24F3               	addwf	prodl,w,c
  1424  00072C  6ED9               	movwf	fsr2l,c
  1425  00072E  0E00               	movlw	high _ReceivedString
  1426  000730  20F4               	addwfc	prodh,w,c
  1427  000732  6EDA               	movwf	fsr2h,c
  1428  000734  0E00               	movlw	0
  1429  000736  6EDF               	movwf	indf2,c
  1430                           
  1431                           ; BSR set to: 0
  1432  000738  0100               	movlb	0	; () banked
  1433  00073A  2BB7               	incf	main@i& (0+255),f,b
  1434  00073C  D7ED               	goto	l3277
  1435  00073E                     l3287:
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;main.c: 217: }
  1439                           ;main.c: 218: mode=3;
  1440  00073E  0E03               	movlw	3
  1441  000740  6E3B               	movwf	_mode,c	;volatile
  1442                           
  1443                           ;main.c: 220: } else {
  1444  000742  D086               	goto	l3319
  1445  000744                     l3289:
  1446                           
  1447                           ;main.c: 221: fullSpeedBack(&mL,&mR, 100);
  1448  000744  0E00               	movlw	low main@mL
  1449  000746  0100               	movlb	0	; () banked
  1450  000748  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1451  00074A  0E02               	movlw	high main@mL
  1452  00074C  0100               	movlb	0	; () banked
  1453  00074E  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1454  000750  0E09               	movlw	low main@mR
  1455  000752  0100               	movlb	0	; () banked
  1456  000754  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1457  000756  0E02               	movlw	high main@mR
  1458  000758  0100               	movlb	0	; () banked
  1459  00075A  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1460  00075C  0E64               	movlw	100
  1461  00075E  0100               	movlb	0	; () banked
  1462  000760  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1463  000762  EC3D  F00B         	call	_fullSpeedBack	;wreg free
  1464                           
  1465                           ;main.c: 222: delay_tenth_s(5);
  1466  000766  0E05               	movlw	5
  1467  000768  EC9A  F00B         	call	_delay_tenth_s
  1468                           
  1469                           ;main.c: 223: stop(&mL,&mR);
  1470  00076C  0E00               	movlw	low main@mL
  1471  00076E  0100               	movlb	0	; () banked
  1472  000770  6F62               	movwf	stop@mL& (0+255),b
  1473  000772  0E02               	movlw	high main@mL
  1474  000774  0100               	movlb	0	; () banked
  1475  000776  6F63               	movwf	(stop@mL+1)& (0+255),b
  1476  000778  0E09               	movlw	low main@mR
  1477  00077A  0100               	movlb	0	; () banked
  1478  00077C  6F64               	movwf	stop@mR& (0+255),b
  1479  00077E  0E02               	movlw	high main@mR
  1480  000780  0100               	movlb	0	; () banked
  1481  000782  6F65               	movwf	(stop@mR+1)& (0+255),b
  1482  000784  EC41  F009         	call	_stop	;wreg free
  1483                           
  1484                           ;main.c: 224: fullSpeedAhead(&mL,&mR, 100);
  1485  000788  0E00               	movlw	low main@mL
  1486  00078A  0100               	movlb	0	; () banked
  1487  00078C  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1488  00078E  0E02               	movlw	high main@mL
  1489  000790  0100               	movlb	0	; () banked
  1490  000792  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1491  000794  0E09               	movlw	low main@mR
  1492  000796  0100               	movlb	0	; () banked
  1493  000798  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1494  00079A  0E02               	movlw	high main@mR
  1495  00079C  0100               	movlb	0	; () banked
  1496  00079E  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1497  0007A0  0E64               	movlw	100
  1498  0007A2  0100               	movlb	0	; () banked
  1499  0007A4  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1500  0007A6  EC12  F00A         	call	_fullSpeedAhead	;wreg free
  1501                           
  1502                           ;main.c: 225: }
  1503                           ;main.c: 226: }
  1504                           ;main.c: 227: } else {
  1505  0007AA  D052               	goto	l3319
  1506  0007AC                     l3297:
  1507                           
  1508                           ;main.c: 228: DirectionFound=1;
  1509  0007AC  0E01               	movlw	1
  1510  0007AE  0100               	movlb	0	; () banked
  1511  0007B0  6FB5               	movwf	main@DirectionFound& (0+255),b
  1512                           
  1513                           ;main.c: 229: mode=1;
  1514  0007B2  0E01               	movlw	1
  1515  0007B4  6E3B               	movwf	_mode,c	;volatile
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;main.c: 231: fullSpeedAhead(&mL,&mR, 100);
  1519  0007B6  0E00               	movlw	low main@mL
  1520  0007B8  0100               	movlb	0	; () banked
  1521  0007BA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1522  0007BC  0E02               	movlw	high main@mL
  1523  0007BE  0100               	movlb	0	; () banked
  1524  0007C0  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1525  0007C2  0E09               	movlw	low main@mR
  1526  0007C4  0100               	movlb	0	; () banked
  1527  0007C6  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1528  0007C8  0E02               	movlw	high main@mR
  1529  0007CA  0100               	movlb	0	; () banked
  1530  0007CC  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1531  0007CE  0E64               	movlw	100
  1532  0007D0  0100               	movlb	0	; () banked
  1533  0007D2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1534  0007D4  EC12  F00A         	call	_fullSpeedAhead	;wreg free
  1535                           
  1536                           ;main.c: 232: delay_tenth_s(5);
  1537  0007D8  0E05               	movlw	5
  1538  0007DA  EC9A  F00B         	call	_delay_tenth_s
  1539                           
  1540                           ;main.c: 233: MoveType[Move] = 0;
  1541  0007DE  0100               	movlb	0	; () banked
  1542  0007E0  51B6               	movf	main@Move& (0+255),w,b
  1543  0007E2  0D01               	mullw	1
  1544  0007E4  0E64               	movlw	low main@MoveType
  1545  0007E6  24F3               	addwf	prodl,w,c
  1546  0007E8  6ED9               	movwf	fsr2l,c
  1547  0007EA  0E01               	movlw	high main@MoveType
  1548  0007EC  20F4               	addwfc	prodh,w,c
  1549  0007EE  6EDA               	movwf	fsr2h,c
  1550  0007F0  0E00               	movlw	0
  1551  0007F2  6EDF               	movwf	indf2,c
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 234: MoveTime[Move] = 5;
  1555  0007F4  0100               	movlb	0	; () banked
  1556  0007F6  51B6               	movf	main@Move& (0+255),w,b
  1557  0007F8  0D01               	mullw	1
  1558  0007FA  0E00               	movlw	low main@MoveTime
  1559  0007FC  24F3               	addwf	prodl,w,c
  1560  0007FE  6ED9               	movwf	fsr2l,c
  1561  000800  0E01               	movlw	high main@MoveTime
  1562  000802  20F4               	addwfc	prodh,w,c
  1563  000804  6EDA               	movwf	fsr2h,c
  1564  000806  0E05               	movlw	5
  1565  000808                     L2:
  1566  000808  6EDF               	movwf	indf2,c
  1567  00080A                     l3307:
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 235: Move++;
  1571  00080A  0100               	movlb	0	; () banked
  1572  00080C  2BB6               	incf	main@Move& (0+255),f,b
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;main.c: 236: }
  1576                           ;main.c: 238: break;
  1577  00080E  D020               	goto	l3319
  1578  000810                     l3309:
  1579                           
  1580                           ;main.c: 243: SetLine(1);
  1581  000810  0E01               	movlw	1
  1582  000812  ECEB  F00B         	call	_SetLine
  1583                           
  1584                           ;main.c: 244: LCD_String(Message);
  1585  000816  0EF0               	movlw	low main@Message
  1586  000818  6E2A               	movwf	LCD_String@string,c
  1587  00081A  0E01               	movlw	high main@Message
  1588  00081C  6E2B               	movwf	LCD_String@string+1,c
  1589  00081E  ECC4  F00A         	call	_LCD_String	;wreg free
  1590                           
  1591                           ;main.c: 245: SetLine(2);
  1592  000822  0E02               	movlw	2
  1593  000824  ECEB  F00B         	call	_SetLine
  1594                           
  1595                           ;main.c: 246: LCD_String("Going Home");
  1596  000828  0E39               	movlw	low STR_8
  1597  00082A  6E2A               	movwf	LCD_String@string,c
  1598  00082C  0E03               	movlw	high STR_8
  1599  00082E  6E2B               	movwf	LCD_String@string+1,c
  1600  000830  ECC4  F00A         	call	_LCD_String	;wreg free
  1601                           
  1602                           ;main.c: 247: stop(&mL,&mR);
  1603  000834  0E00               	movlw	low main@mL
  1604  000836  0100               	movlb	0	; () banked
  1605  000838  6F62               	movwf	stop@mL& (0+255),b
  1606  00083A  0E02               	movlw	high main@mL
  1607  00083C  0100               	movlb	0	; () banked
  1608  00083E  6F63               	movwf	(stop@mL+1)& (0+255),b
  1609  000840  0E09               	movlw	low main@mR
  1610  000842  0100               	movlb	0	; () banked
  1611  000844  6F64               	movwf	stop@mR& (0+255),b
  1612  000846  0E02               	movlw	high main@mR
  1613  000848  0100               	movlb	0	; () banked
  1614  00084A  6F65               	movwf	(stop@mR+1)& (0+255),b
  1615  00084C  EC41  F009         	call	_stop	;wreg free
  1616  000850                     l3319:
  1617  000850  503B               	movf	_mode,w,c	;volatile
  1618                           
  1619                           ; Switch size 1, requested type "space"
  1620                           ; Number of cases is 5, Range of values is 0 to 255
  1621                           ; switch strategies available:
  1622                           ; Name         Instructions Cycles
  1623                           ; simple_byte           16     9 (average)
  1624                           ;	Chosen strategy is simple_byte
  1625  000852  0A00               	xorlw	0	; case 0
  1626  000854  B4D8               	btfsc	status,2,c
  1627  000856  D63F               	goto	l3201
  1628  000858  0A01               	xorlw	1	; case 1
  1629  00085A  B4D8               	btfsc	status,2,c
  1630  00085C  D666               	goto	l3221
  1631  00085E  0A03               	xorlw	3	; case 2
  1632  000860  B4D8               	btfsc	status,2,c
  1633  000862  D6FE               	goto	l3255
  1634  000864  0A01               	xorlw	1	; case 3
  1635  000866  B4D8               	btfsc	status,2,c
  1636  000868  D7D3               	goto	l3309
  1637  00086A  0AFC               	xorlw	252	; case 255
  1638  00086C  B4D8               	btfsc	status,2,c
  1639  00086E  D5C7               	goto	l3163
  1640  000870  D7EF               	goto	l3319
  1641  000872                     __end_of_main:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           prodh	equ	0xFF4
  1645                           prodl	equ	0xFF3
  1646                           intcon	equ	0xFF2
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           indf1	equ	0xFE7
  1650                           fsr1h	equ	0xFE2
  1651                           fsr1l	equ	0xFE1
  1652                           indf2	equ	0xFDF
  1653                           fsr2h	equ	0xFDA
  1654                           fsr2l	equ	0xFD9
  1655                           status	equ	0xFD8
  1656                           
  1657 ;; *************** function _initTimer *****************
  1658 ;; Defined at:
  1659 ;;		line 8 in file "Movement.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;		None
  1664 ;; Return value:  Size  Location     Type
  1665 ;;		None               void
  1666 ;; Registers used:
  1667 ;;		None
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1673 ;;      Params:         0       0       0       0
  1674 ;;      Locals:         0       0       0       0
  1675 ;;      Temps:          0       0       0       0
  1676 ;;      Totals:         0       0       0       0
  1677 ;;Total ram usage:        0 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    3
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text1
  1688  001908                     __ptext1:
  1689                           	opt stack 0
  1690  001908                     _initTimer:
  1691                           	opt stack 27
  1692                           
  1693                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1694                           
  1695                           ;incstack = 0
  1696  001908  9ED5               	bcf	4053,7,c	;volatile
  1697                           
  1698                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1699  00190A  9CD5               	bcf	4053,6,c	;volatile
  1700                           
  1701                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1702  00190C  9AD5               	bcf	4053,5,c	;volatile
  1703                           
  1704                           ;Movement.c: 13: T0CONbits.PSA=0;
  1705  00190E  96D5               	bcf	4053,3,c	;volatile
  1706                           
  1707                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1708  001910  80D5               	bsf	4053,0,c	;volatile
  1709  001912  82D5               	bsf	4053,1,c	;volatile
  1710  001914  84D5               	bsf	4053,2,c	;volatile
  1711                           
  1712                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1713  001916  9AF2               	bcf	intcon,5,c	;volatile
  1714  001918  0012               	return		;funcret
  1715  00191A                     __end_of_initTimer:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           prodh	equ	0xFF4
  1719                           prodl	equ	0xFF3
  1720                           intcon	equ	0xFF2
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           indf1	equ	0xFE7
  1724                           fsr1h	equ	0xFE2
  1725                           fsr1l	equ	0xFE1
  1726                           indf2	equ	0xFDF
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function _initRFID *****************
  1732 ;; Defined at:
  1733 ;;		line 5 in file "RFID_Reader.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;		None
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;		None
  1738 ;; Return value:  Size  Location     Type
  1739 ;;		None               void
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1747 ;;      Params:         0       0       0       0
  1748 ;;      Locals:         0       0       0       0
  1749 ;;      Temps:          0       0       0       0
  1750 ;;      Totals:         0       0       0       0
  1751 ;;Total ram usage:        0 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    3
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_main
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text2
  1762  0018EC                     __ptext2:
  1763                           	opt stack 0
  1764  0018EC                     _initRFID:
  1765                           	opt stack 27
  1766                           
  1767                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1768                           
  1769                           ;incstack = 0
  1770  0018EC  5094               	movf	3988,w,c	;volatile
  1771  0018EE  09C0               	iorlw	192
  1772  0018F0  6E94               	movwf	3988,c	;volatile
  1773                           
  1774                           ;RFID_Reader.c: 10: SPBRG=205;
  1775  0018F2  0ECD               	movlw	205
  1776  0018F4  6EAF               	movwf	4015,c	;volatile
  1777                           
  1778                           ;RFID_Reader.c: 11: SPBRGH=0;
  1779  0018F6  0E00               	movlw	0
  1780  0018F8  6EB0               	movwf	4016,c	;volatile
  1781                           
  1782                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1783  0018FA  86AA               	bsf	4010,3,c	;volatile
  1784                           
  1785                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1786  0018FC  84AC               	bsf	4012,2,c	;volatile
  1787                           
  1788                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1789  0018FE  88AB               	bsf	4011,4,c	;volatile
  1790                           
  1791                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1792  001900  8EAB               	bsf	4011,7,c	;volatile
  1793                           
  1794                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1795  001902  98AC               	bcf	4012,4,c	;volatile
  1796                           
  1797                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1798  001904  9CAB               	bcf	4011,6,c	;volatile
  1799  001906  0012               	return		;funcret
  1800  001908                     __end_of_initRFID:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           indf1	equ	0xFE7
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8
  1815                           
  1816 ;; *************** function _initMotorPWM *****************
  1817 ;; Defined at:
  1818 ;;		line 4 in file "dc_motor.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;		None
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;		None
  1823 ;; Return value:  Size  Location     Type
  1824 ;;		None               void
  1825 ;; Registers used:
  1826 ;;		wreg, status,2
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1832 ;;      Params:         0       0       0       0
  1833 ;;      Locals:         0       0       0       0
  1834 ;;      Temps:          0       0       0       0
  1835 ;;      Totals:         0       0       0       0
  1836 ;;Total ram usage:        0 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    3
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_main
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text3
  1847  0017A4                     __ptext3:
  1848                           	opt stack 0
  1849  0017A4                     _initMotorPWM:
  1850                           	opt stack 27
  1851                           
  1852                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1853                           
  1854                           ;incstack = 0
  1855  0017A4  0E00               	movlw	0
  1856  0017A6  6E7F               	movwf	3967,c	;volatile
  1857                           
  1858                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1859  0017A8  0E80               	movlw	128
  1860  0017AA  6E7E               	movwf	3966,c	;volatile
  1861                           
  1862                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1863  0017AC  0E6F               	movlw	111
  1864  0017AE  6E6F               	movwf	3951,c	;volatile
  1865                           
  1866                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1867  0017B0  0E00               	movlw	0
  1868  0017B2  6E6E               	movwf	3950,c	;volatile
  1869                           
  1870                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1871  0017B4  0EC7               	movlw	199
  1872  0017B6  6E7B               	movwf	3963,c	;volatile
  1873                           
  1874                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1875  0017B8  0E00               	movlw	0
  1876  0017BA  6E7A               	movwf	3962,c	;volatile
  1877                           
  1878                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1879  0017BC  0E00               	movlw	0
  1880  0017BE  6E79               	movwf	3961,c	;volatile
  1881                           
  1882                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1883  0017C0  0E00               	movlw	0
  1884  0017C2  6E78               	movwf	3960,c	;volatile
  1885                           
  1886                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1887  0017C4  0E00               	movlw	0
  1888  0017C6  6E77               	movwf	3959,c	;volatile
  1889                           
  1890                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1891  0017C8  0E00               	movlw	0
  1892  0017CA  6E76               	movwf	3958,c	;volatile
  1893                           
  1894                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1895  0017CC  9093               	bcf	3987,0,c	;volatile
  1896                           
  1897                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1898  0017CE  9293               	bcf	3987,1,c	;volatile
  1899                           
  1900                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1901  0017D0  9493               	bcf	3987,2,c	;volatile
  1902                           
  1903                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1904  0017D2  9693               	bcf	3987,3,c	;volatile
  1905  0017D4  0012               	return		;funcret
  1906  0017D6                     __end_of_initMotorPWM:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           prodh	equ	0xFF4
  1910                           prodl	equ	0xFF3
  1911                           intcon	equ	0xFF2
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           indf1	equ	0xFE7
  1915                           fsr1h	equ	0xFE2
  1916                           fsr1l	equ	0xFE1
  1917                           indf2	equ	0xFDF
  1918                           fsr2h	equ	0xFDA
  1919                           fsr2l	equ	0xFD9
  1920                           status	equ	0xFD8
  1921                           
  1922 ;; *************** function _initLCD *****************
  1923 ;; Defined at:
  1924 ;;		line 38 in file "LCD.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;		None               void
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1938 ;;      Params:         0       0       0       0
  1939 ;;      Locals:         0       0       0       0
  1940 ;;      Temps:          1       0       0       0
  1941 ;;      Totals:         1       0       0       0
  1942 ;;Total ram usage:        1 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    6
  1945 ;; This function calls:
  1946 ;;		_LCDout
  1947 ;;		_SendLCD
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text4
  1954  001112                     __ptext4:
  1955                           	opt stack 0
  1956  001112                     _initLCD:
  1957                           	opt stack 24
  1958                           
  1959                           ;LCD.c: 44: TRISAbits.RA6=0;
  1960                           
  1961                           ;incstack = 0
  1962  001112  9C92               	bcf	3986,6,c	;volatile
  1963                           
  1964                           ;LCD.c: 45: TRISCbits.RC0=0;
  1965  001114  9094               	bcf	3988,0,c	;volatile
  1966                           
  1967                           ;LCD.c: 46: TRISCbits.RC1=0;
  1968  001116  9294               	bcf	3988,1,c	;volatile
  1969                           
  1970                           ;LCD.c: 47: TRISCbits.RC2=0;
  1971  001118  9494               	bcf	3988,2,c	;volatile
  1972                           
  1973                           ;LCD.c: 48: TRISDbits.RD0=0;
  1974  00111A  9095               	bcf	3989,0,c	;volatile
  1975                           
  1976                           ;LCD.c: 49: TRISDbits.RD1=0;
  1977  00111C  9295               	bcf	3989,1,c	;volatile
  1978                           
  1979                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1980  00111E  0E27               	movlw	39
  1981  001120  6E2A               	movwf	??_initLCD& (0+255),c
  1982  001122  0EF5               	movlw	245
  1983  001124                     u2797:
  1984  001124  2EE8               	decfsz	wreg,f,c
  1985  001126  D7FE               	goto	u2797
  1986  001128  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1987  00112A  D7FC               	goto	u2797
  1988  00112C  F000               	nop	
  1989                           
  1990                           ;LCD.c: 52: LCDout(0b0011);
  1991  00112E  0E03               	movlw	3
  1992  001130  EC26  F008         	call	_LCDout
  1993                           
  1994                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1995  001134  0E0D               	movlw	13
  1996  001136  6E2A               	movwf	??_initLCD& (0+255),c
  1997  001138  0EFC               	movlw	252
  1998  00113A                     u2807:
  1999  00113A  2EE8               	decfsz	wreg,f,c
  2000  00113C  D7FE               	goto	u2807
  2001  00113E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2002  001140  D7FC               	goto	u2807
  2003                           
  2004                           ;LCD.c: 54: LCDout(0b0011);
  2005  001142  0E03               	movlw	3
  2006  001144  EC26  F008         	call	_LCDout
  2007                           
  2008                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2009  001148  0E85               	movlw	133
  2010  00114A                     u2817:
  2011  00114A  2EE8               	decfsz	wreg,f,c
  2012  00114C  D7FE               	goto	u2817
  2013  00114E  F000               	nop	
  2014                           
  2015                           ;LCD.c: 56: LCDout(0b0011);
  2016  001150  0E03               	movlw	3
  2017  001152  EC26  F008         	call	_LCDout
  2018                           
  2019                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2020  001156  0E21               	movlw	33
  2021  001158                     u2827:
  2022  001158  2EE8               	decfsz	wreg,f,c
  2023  00115A  D7FE               	goto	u2827
  2024  00115C  F000               	nop	
  2025                           
  2026                           ;LCD.c: 58: LCDout(0b0010);
  2027  00115E  0E02               	movlw	2
  2028  001160  EC26  F008         	call	_LCDout
  2029                           
  2030                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2031  001164  0E21               	movlw	33
  2032  001166                     u2837:
  2033  001166  2EE8               	decfsz	wreg,f,c
  2034  001168  D7FE               	goto	u2837
  2035  00116A  F000               	nop	
  2036                           
  2037                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2038  00116C  0E00               	movlw	0
  2039  00116E  6E28               	movwf	SendLCD@type,c
  2040  001170  0E28               	movlw	40
  2041  001172  EC03  F00C         	call	_SendLCD
  2042                           
  2043                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2044  001176  0E21               	movlw	33
  2045  001178                     u2847:
  2046  001178  2EE8               	decfsz	wreg,f,c
  2047  00117A  D7FE               	goto	u2847
  2048  00117C  F000               	nop	
  2049                           
  2050                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2051  00117E  0E00               	movlw	0
  2052  001180  6E28               	movwf	SendLCD@type,c
  2053  001182  0E08               	movlw	8
  2054  001184  EC03  F00C         	call	_SendLCD
  2055                           
  2056                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2057  001188  0E21               	movlw	33
  2058  00118A                     u2857:
  2059  00118A  2EE8               	decfsz	wreg,f,c
  2060  00118C  D7FE               	goto	u2857
  2061  00118E  F000               	nop	
  2062                           
  2063                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2064  001190  0E00               	movlw	0
  2065  001192  6E28               	movwf	SendLCD@type,c
  2066  001194  0E01               	movlw	1
  2067  001196  EC03  F00C         	call	_SendLCD
  2068                           
  2069                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2070  00119A  0E0D               	movlw	13
  2071  00119C  6E2A               	movwf	??_initLCD& (0+255),c
  2072  00119E  0EFC               	movlw	252
  2073  0011A0                     u2867:
  2074  0011A0  2EE8               	decfsz	wreg,f,c
  2075  0011A2  D7FE               	goto	u2867
  2076  0011A4  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2077  0011A6  D7FC               	goto	u2867
  2078                           
  2079                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2080  0011A8  0E00               	movlw	0
  2081  0011AA  6E28               	movwf	SendLCD@type,c
  2082  0011AC  0E06               	movlw	6
  2083  0011AE  EC03  F00C         	call	_SendLCD
  2084                           
  2085                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2086  0011B2  0E21               	movlw	33
  2087  0011B4                     u2877:
  2088  0011B4  2EE8               	decfsz	wreg,f,c
  2089  0011B6  D7FE               	goto	u2877
  2090  0011B8  F000               	nop	
  2091                           
  2092                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2093  0011BA  0E00               	movlw	0
  2094  0011BC  6E28               	movwf	SendLCD@type,c
  2095  0011BE  0E0C               	movlw	12
  2096  0011C0  EC03  F00C         	call	_SendLCD
  2097                           
  2098                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2099  0011C4  0E21               	movlw	33
  2100  0011C6                     u2887:
  2101  0011C6  2EE8               	decfsz	wreg,f,c
  2102  0011C8  D7FE               	goto	u2887
  2103  0011CA  F000               	nop	
  2104  0011CC  0012               	return		;funcret
  2105  0011CE                     __end_of_initLCD:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           prodh	equ	0xFF4
  2109                           prodl	equ	0xFF3
  2110                           intcon	equ	0xFF2
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           indf1	equ	0xFE7
  2114                           fsr1h	equ	0xFE2
  2115                           fsr1l	equ	0xFE1
  2116                           indf2	equ	0xFDF
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _initIR *****************
  2122 ;; Defined at:
  2123 ;;		line 30 in file "IR_Reading.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;		None               void
  2130 ;; Registers used:
  2131 ;;		wreg, status,2
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2137 ;;      Params:         0       0       0       0
  2138 ;;      Locals:         0       0       0       0
  2139 ;;      Temps:          0       0       0       0
  2140 ;;      Totals:         0       0       0       0
  2141 ;;Total ram usage:        0 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    3
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_main
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text5
  2152  0018AC                     __ptext5:
  2153                           	opt stack 0
  2154  0018AC                     _initIR:
  2155                           	opt stack 27
  2156                           
  2157                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2158                           
  2159                           ;incstack = 0
  2160  0018AC  9489               	bcf	3977,2,c	;volatile
  2161                           
  2162                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2163  0018AE  9689               	bcf	3977,3,c	;volatile
  2164                           
  2165                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2166  0018B0  8492               	bsf	3986,2,c	;volatile
  2167                           
  2168                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2169  0018B2  8692               	bsf	3986,3,c	;volatile
  2170                           
  2171                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2172  0018B4  94B8               	bcf	4024,2,c	;volatile
  2173                           
  2174                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2175  0018B6  96B8               	bcf	4024,3,c	;volatile
  2176                           
  2177                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2178  0018B8  9CB8               	bcf	4024,6,c	;volatile
  2179                           
  2180                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2181  0018BA  9EB8               	bcf	4024,7,c	;volatile
  2182                           
  2183                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2184  0018BC  0E06               	movlw	6
  2185  0018BE  6E63               	movwf	3939,c	;volatile
  2186                           
  2187                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2188  0018C0  0E06               	movlw	6
  2189  0018C2  6E62               	movwf	3938,c	;volatile
  2190                           
  2191                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2192  0018C4  9096               	bcf	3990,0,c	;volatile
  2193                           
  2194                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2195  0018C6  9296               	bcf	3990,1,c	;volatile
  2196                           
  2197                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2198  0018C8  0E59               	movlw	89
  2199  0018CA  6EB7               	movwf	4023,c	;volatile
  2200  0018CC  0012               	return		;funcret
  2201  0018CE                     __end_of_initIR:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           prodh	equ	0xFF4
  2205                           prodl	equ	0xFF3
  2206                           intcon	equ	0xFF2
  2207                           postinc0	equ	0xFEE
  2208                           wreg	equ	0xFE8
  2209                           indf1	equ	0xFE7
  2210                           fsr1h	equ	0xFE2
  2211                           fsr1l	equ	0xFE1
  2212                           indf2	equ	0xFDF
  2213                           fsr2h	equ	0xFDA
  2214                           fsr2l	equ	0xFD9
  2215                           status	equ	0xFD8
  2216                           
  2217 ;; *************** function _fullSpeedBack *****************
  2218 ;; Defined at:
  2219 ;;		line 125 in file "dc_motor.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2222 ;;		 -> main@mL(9), 
  2223 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2224 ;;		 -> main@mR(9), 
  2225 ;;  power           1   11[BANK0 ] unsigned char 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;		None               void
  2230 ;; Registers used:
  2231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2237 ;;      Params:         0       5       0       0
  2238 ;;      Locals:         0       0       0       0
  2239 ;;      Temps:          0       0       0       0
  2240 ;;      Totals:         0       5       0       0
  2241 ;;Total ram usage:        5 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    6
  2244 ;; This function calls:
  2245 ;;		_fullSpeedAhead
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text6
  2252  00167A                     __ptext6:
  2253                           	opt stack 0
  2254  00167A                     _fullSpeedBack:
  2255                           	opt stack 24
  2256                           
  2257                           ;dc_motor.c: 128: mL->direction=0;
  2258                           
  2259                           ;incstack = 0
  2260  00167A  0100               	movlb	0	; () banked
  2261  00167C  EE20 F001          	lfsr	2,1
  2262  001680  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2263  001682  26D9               	addwf	fsr2l,f,c
  2264  001684  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2265  001686  22DA               	addwfc	fsr2h,f,c
  2266  001688  0E00               	movlw	0
  2267  00168A  6EDF               	movwf	indf2,c
  2268                           
  2269                           ;dc_motor.c: 129: mR->direction=0;
  2270  00168C  0100               	movlb	0	; () banked
  2271  00168E  EE20 F001          	lfsr	2,1
  2272  001692  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2273  001694  26D9               	addwf	fsr2l,f,c
  2274  001696  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2275  001698  22DA               	addwfc	fsr2h,f,c
  2276  00169A  0E00               	movlw	0
  2277  00169C  6EDF               	movwf	indf2,c
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2281  00169E  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2282  0016A2  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2283  0016A6  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2284  0016AA  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2285  0016AE  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2286  0016B2  EC12  F00A         	call	_fullSpeedAhead	;wreg free
  2287  0016B6  0012               	return		;funcret
  2288  0016B8                     __end_of_fullSpeedBack:
  2289                           	opt stack 0
  2290                           tblptru	equ	0xFF8
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           intcon	equ	0xFF2
  2294                           postinc0	equ	0xFEE
  2295                           wreg	equ	0xFE8
  2296                           indf1	equ	0xFE7
  2297                           fsr1h	equ	0xFE2
  2298                           fsr1l	equ	0xFE1
  2299                           indf2	equ	0xFDF
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _enableSensor *****************
  2305 ;; Defined at:
  2306 ;;		line 106 in file "IR_Reading.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  sensor          1    wreg     unsigned char 
  2309 ;;  status          1   35[COMRAM] unsigned char 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  sensor          1   36[COMRAM] unsigned char 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;		None               void
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2321 ;;      Params:         1       0       0       0
  2322 ;;      Locals:         1       0       0       0
  2323 ;;      Temps:          0       0       0       0
  2324 ;;      Totals:         2       0       0       0
  2325 ;;Total ram usage:        2 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    3
  2328 ;; This function calls:
  2329 ;;		Nothing
  2330 ;; This function is called by:
  2331 ;;		_main
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text7
  2336  001860                     __ptext7:
  2337                           	opt stack 0
  2338  001860                     _enableSensor:
  2339                           	opt stack 27
  2340                           
  2341                           ;incstack = 0
  2342                           ;enableSensor@sensor stored from wreg
  2343  001860  6E25               	movwf	enableSensor@sensor,c
  2344                           
  2345                           ;IR_Reading.c: 108: if (sensor==0){
  2346  001862  5025               	movf	enableSensor@sensor,w,c
  2347  001864  A4D8               	btfss	status,2,c
  2348  001866  D006               	goto	l2307
  2349                           
  2350                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2351  001868  B024               	btfsc	enableSensor@status,0,c
  2352  00186A  D002               	bra	u1755
  2353  00186C  908D               	bcf	3981,0,c	;volatile
  2354  00186E  D001               	bra	u1756
  2355  001870                     u1755:
  2356  001870  808D               	bsf	3981,0,c	;volatile
  2357  001872                     u1756:
  2358                           
  2359                           ;IR_Reading.c: 110: } else if (sensor==1){
  2360  001872  0012               	return	
  2361  001874                     l2307:
  2362  001874  0425               	decf	enableSensor@sensor,w,c
  2363  001876  A4D8               	btfss	status,2,c
  2364  001878  0012               	return	
  2365                           
  2366                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2367  00187A  B024               	btfsc	enableSensor@status,0,c
  2368  00187C  D002               	bra	u1775
  2369  00187E  928D               	bcf	3981,1,c	;volatile
  2370  001880  D001               	bra	u1776
  2371  001882                     u1775:
  2372  001882  828D               	bsf	3981,1,c	;volatile
  2373  001884                     u1776:
  2374  001884  0012               	return	
  2375  001886                     __end_of_enableSensor:
  2376                           	opt stack 0
  2377                           tblptru	equ	0xFF8
  2378                           prodh	equ	0xFF4
  2379                           prodl	equ	0xFF3
  2380                           intcon	equ	0xFF2
  2381                           postinc0	equ	0xFEE
  2382                           wreg	equ	0xFE8
  2383                           indf1	equ	0xFE7
  2384                           fsr1h	equ	0xFE2
  2385                           fsr1l	equ	0xFE1
  2386                           indf2	equ	0xFDF
  2387                           fsr2h	equ	0xFDA
  2388                           fsr2l	equ	0xFD9
  2389                           status	equ	0xFD8
  2390                           
  2391 ;; *************** function _VerifySignal *****************
  2392 ;; Defined at:
  2393 ;;		line 55 in file "RFID_Reader.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2396 ;;		 -> ReceivedString(16), 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  hexByte         2   44[COMRAM] unsigned int 
  2399 ;;  i               1   46[COMRAM] unsigned char 
  2400 ;;  checksum        1   43[COMRAM] unsigned char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      unsigned char 
  2403 ;; Registers used:
  2404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2410 ;;      Params:         2       0       0       0
  2411 ;;      Locals:         4       0       0       0
  2412 ;;      Temps:          6       0       0       0
  2413 ;;      Totals:        12       0       0       0
  2414 ;;Total ram usage:       12 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    3
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text8
  2425  0011CE                     __ptext8:
  2426                           	opt stack 0
  2427  0011CE                     _VerifySignal:
  2428                           	opt stack 27
  2429                           
  2430                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2431                           
  2432                           ;incstack = 0
  2433  0011CE  0E00               	movlw	0
  2434  0011D0  6E2C               	movwf	VerifySignal@checksum,c
  2435                           
  2436                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2437  0011D2  0E00               	movlw	0
  2438  0011D4  6E2E               	movwf	VerifySignal@hexByte+1,c
  2439  0011D6  0E00               	movlw	0
  2440  0011D8  6E2D               	movwf	VerifySignal@hexByte,c
  2441                           
  2442                           ;RFID_Reader.c: 58: unsigned char i=0;
  2443  0011DA  0E00               	movlw	0
  2444  0011DC  6E2F               	movwf	VerifySignal@i,c
  2445                           
  2446                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2447  0011DE  EE20 F004          	lfsr	2,4
  2448  0011E2  5024               	movf	VerifySignal@Signal,w,c
  2449  0011E4  26D9               	addwf	fsr2l,f,c
  2450  0011E6  5025               	movf	VerifySignal@Signal+1,w,c
  2451  0011E8  22DA               	addwfc	fsr2h,f,c
  2452  0011EA  50DF               	movf	indf2,w,c
  2453  0011EC  6E26               	movwf	??_VerifySignal& (0+255),c
  2454  0011EE  EE20 F003          	lfsr	2,3
  2455  0011F2  5024               	movf	VerifySignal@Signal,w,c
  2456  0011F4  26D9               	addwf	fsr2l,f,c
  2457  0011F6  5025               	movf	VerifySignal@Signal+1,w,c
  2458  0011F8  22DA               	addwfc	fsr2h,f,c
  2459  0011FA  50DF               	movf	indf2,w,c
  2460  0011FC  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2461  0011FE  5027               	movf	??_VerifySignal+1,w,c
  2462  001200  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2463  001202  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2464  001204  5026               	movf	??_VerifySignal,w,c
  2465  001206  2428               	addwf	??_VerifySignal+2,w,c
  2466  001208  6E2D               	movwf	VerifySignal@hexByte,c
  2467  00120A  0E00               	movlw	0
  2468  00120C  2029               	addwfc	??_VerifySignal+3,w,c
  2469  00120E  6E2E               	movwf	VerifySignal@hexByte+1,c
  2470                           
  2471                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2472  001210  EE20 F002          	lfsr	2,2
  2473  001214  5024               	movf	VerifySignal@Signal,w,c
  2474  001216  26D9               	addwf	fsr2l,f,c
  2475  001218  5025               	movf	VerifySignal@Signal+1,w,c
  2476  00121A  22DA               	addwfc	fsr2h,f,c
  2477  00121C  50DF               	movf	indf2,w,c
  2478  00121E  182D               	xorwf	VerifySignal@hexByte,w,c
  2479  001220  6E2C               	movwf	VerifySignal@checksum,c
  2480                           
  2481                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2482  001222  0E05               	movlw	5
  2483  001224  6E2F               	movwf	VerifySignal@i,c
  2484  001226                     l2499:
  2485  001226  0E09               	movlw	9
  2486  001228  642F               	cpfsgt	VerifySignal@i,c
  2487  00122A  D001               	goto	l2503
  2488  00122C  D028               	goto	l2511
  2489  00122E                     l2503:
  2490                           
  2491                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2492  00122E  502F               	movf	VerifySignal@i,w,c
  2493  001230  6E26               	movwf	??_VerifySignal& (0+255),c
  2494  001232  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2495  001234  0E01               	movlw	1
  2496  001236  2626               	addwf	??_VerifySignal,f,c
  2497  001238  0E00               	movlw	0
  2498  00123A  2227               	addwfc	??_VerifySignal+1,f,c
  2499  00123C  5026               	movf	??_VerifySignal,w,c
  2500  00123E  2424               	addwf	VerifySignal@Signal,w,c
  2501  001240  6ED9               	movwf	fsr2l,c
  2502  001242  5027               	movf	??_VerifySignal+1,w,c
  2503  001244  2025               	addwfc	VerifySignal@Signal+1,w,c
  2504  001246  6EDA               	movwf	fsr2h,c
  2505  001248  50DF               	movf	indf2,w,c
  2506  00124A  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2507  00124C  502F               	movf	VerifySignal@i,w,c
  2508  00124E  0D01               	mullw	1
  2509  001250  50F3               	movf	prodl,w,c
  2510  001252  2424               	addwf	VerifySignal@Signal,w,c
  2511  001254  6ED9               	movwf	fsr2l,c
  2512  001256  50F4               	movf	prodh,w,c
  2513  001258  2025               	addwfc	VerifySignal@Signal+1,w,c
  2514  00125A  6EDA               	movwf	fsr2h,c
  2515  00125C  50DF               	movf	indf2,w,c
  2516  00125E  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2517  001260  5029               	movf	??_VerifySignal+3,w,c
  2518  001262  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2519  001264  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2520  001266  5028               	movf	??_VerifySignal+2,w,c
  2521  001268  242A               	addwf	??_VerifySignal+4,w,c
  2522  00126A  6E2D               	movwf	VerifySignal@hexByte,c
  2523  00126C  0E00               	movlw	0
  2524  00126E  202B               	addwfc	??_VerifySignal+5,w,c
  2525  001270  6E2E               	movwf	VerifySignal@hexByte+1,c
  2526                           
  2527                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2528  001272  502C               	movf	VerifySignal@checksum,w,c
  2529  001274  182D               	xorwf	VerifySignal@hexByte,w,c
  2530  001276  6E2C               	movwf	VerifySignal@checksum,c
  2531  001278  0E02               	movlw	2
  2532  00127A  262F               	addwf	VerifySignal@i,f,c
  2533  00127C  D7D4               	goto	l2499
  2534  00127E                     l2511:
  2535                           
  2536                           ;RFID_Reader.c: 68: }
  2537                           ;RFID_Reader.c: 71: return 1;
  2538  00127E  0E01               	movlw	1
  2539  001280  0012               	return	
  2540  001282                     __end_of_VerifySignal:
  2541                           	opt stack 0
  2542                           tblptru	equ	0xFF8
  2543                           prodh	equ	0xFF4
  2544                           prodl	equ	0xFF3
  2545                           intcon	equ	0xFF2
  2546                           postinc0	equ	0xFEE
  2547                           wreg	equ	0xFE8
  2548                           indf1	equ	0xFE7
  2549                           fsr1h	equ	0xFE2
  2550                           fsr1l	equ	0xFE1
  2551                           indf2	equ	0xFDF
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8
  2555                           
  2556 ;; *************** function _ScanWithRange *****************
  2557 ;; Defined at:
  2558 ;;		line 88 in file "Movement.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2561 ;;		 -> main@mL(9), 
  2562 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2563 ;;		 -> main@mR(9), 
  2564 ;;  milliseconds    2   17[BANK0 ] int 
  2565 ;;  MoveTimeEntr    2   19[BANK0 ] PTR unsigned char 
  2566 ;;		 -> main@MoveTime(100), 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  buf            40   23[BANK0 ] unsigned char [40]
  2569 ;;  SensorResult    4   74[BANK0 ] unsigned int [2]
  2570 ;;  RightFlag       2   72[BANK0 ] unsigned int 
  2571 ;;  LeftFlag        2   70[BANK0 ] unsigned int 
  2572 ;;  DirectionFou    2   68[BANK0 ] const unsigned int 
  2573 ;;  n               2   66[BANK0 ] unsigned int 
  2574 ;;  i               2   64[BANK0 ] unsigned int 
  2575 ;;  TimeAboveThr    1   63[BANK0 ] unsigned char 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      unsigned char 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2585 ;;      Params:         0       8       0       0
  2586 ;;      Locals:         0      55       0       0
  2587 ;;      Temps:          0       2       0       0
  2588 ;;      Totals:         0      65       0       0
  2589 ;;Total ram usage:       65 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    7
  2592 ;; This function calls:
  2593 ;;		_LCD_String
  2594 ;;		_SendLCD
  2595 ;;		_SetLine
  2596 ;;		_delay_tenth_s
  2597 ;;		_grabLeftIR
  2598 ;;		_grabRightIR
  2599 ;;		_sprintf
  2600 ;;		_stop
  2601 ;;		_turnLeft
  2602 ;;		_turnRight
  2603 ;; This function is called by:
  2604 ;;		_main
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           	psect	text9
  2609  000B78                     __ptext9:
  2610                           	opt stack 0
  2611  000B78                     _ScanWithRange:
  2612                           	opt stack 23
  2613                           
  2614                           ;Movement.c: 91: unsigned int SensorResult[2]={0,0};
  2615                           
  2616                           ;incstack = 0
  2617  000B78  C0BC  F0AA         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  2618  000B7C  C0BD  F0AB         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  2619  000B80  C0BE  F0AC         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  2620  000B84  C0BF  F0AD         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  2621                           
  2622                           ;Movement.c: 92: unsigned int LeftFlag=0;
  2623  000B88  0E00               	movlw	0
  2624  000B8A  0100               	movlb	0	; () banked
  2625  000B8C  6FA7               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2626  000B8E  0E00               	movlw	0
  2627  000B90  6FA6               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2628                           
  2629                           ;Movement.c: 93: unsigned int RightFlag=0;
  2630  000B92  0E00               	movlw	0
  2631  000B94  0100               	movlb	0	; () banked
  2632  000B96  6FA9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2633  000B98  0E00               	movlw	0
  2634  000B9A  6FA8               	movwf	ScanWithRange@RightFlag& (0+255),b
  2635                           
  2636                           ;Movement.c: 94: char buf[40];
  2637                           ;Movement.c: 95: unsigned int i=0;
  2638  000B9C  0E00               	movlw	0
  2639  000B9E  0100               	movlb	0	; () banked
  2640  000BA0  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2641  000BA2  0E00               	movlw	0
  2642  000BA4  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2643                           
  2644                           ;Movement.c: 96: unsigned int n=0;
  2645  000BA6  0E00               	movlw	0
  2646  000BA8  0100               	movlb	0	; () banked
  2647  000BAA  6FA3               	movwf	(ScanWithRange@n+1)& (0+255),b
  2648  000BAC  0E00               	movlw	0
  2649  000BAE  6FA2               	movwf	ScanWithRange@n& (0+255),b
  2650                           
  2651                           ;Movement.c: 97: unsigned char TimeAboveThreshold=0;
  2652  000BB0  0E00               	movlw	0
  2653  000BB2  0100               	movlb	0	; () banked
  2654  000BB4  6F9F               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2655                           
  2656                           ;Movement.c: 100: const unsigned int DirectionFoundThreshold=3000;
  2657  000BB6  0E0B               	movlw	11
  2658  000BB8  0100               	movlb	0	; () banked
  2659  000BBA  6FA5               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2660  000BBC  0EB8               	movlw	184
  2661  000BBE  6FA4               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;Movement.c: 109: turnLeft(mL,mR, 100);
  2665  000BC0  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2666  000BC4  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2667  000BC8  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2668  000BCC  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2669  000BD0  0E64               	movlw	100
  2670  000BD2  0100               	movlb	0	; () banked
  2671  000BD4  6F6B               	movwf	turnLeft@power& (0+255),b
  2672  000BD6  EC7B  F00B         	call	_turnLeft	;wreg free
  2673                           
  2674                           ;Movement.c: 110: delay_tenth_s(5);
  2675  000BDA  0E05               	movlw	5
  2676  000BDC  EC9A  F00B         	call	_delay_tenth_s
  2677                           
  2678                           ;Movement.c: 111: stop(mL,mR);
  2679  000BE0  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2680  000BE4  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2681  000BE8  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2682  000BEC  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2683  000BF0  EC41  F009         	call	_stop	;wreg free
  2684                           
  2685                           ;Movement.c: 114: turnRight(mL,mR, 40);
  2686  000BF4  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2687  000BF8  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2688  000BFC  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2689  000C00  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2690  000C04  0E28               	movlw	40
  2691  000C06  0100               	movlb	0	; () banked
  2692  000C08  6F6B               	movwf	turnRight@power& (0+255),b
  2693  000C0A  EC5C  F00B         	call	_turnRight	;wreg free
  2694                           
  2695                           ;Movement.c: 117: for (i=1; i<=milliseconds; i++) {
  2696  000C0E  0E00               	movlw	0
  2697  000C10  0100               	movlb	0	; () banked
  2698  000C12  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2699  000C14  0E01               	movlw	1
  2700  000C16  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2701  000C18  D0D9               	goto	l3103
  2702  000C1A                     l3037:
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;Movement.c: 120: SensorResult[0]=grabLeftIR();
  2706  000C1A  EC8B  F00A         	call	_grabLeftIR	;wreg free
  2707  000C1E  C024  F0AA         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2708  000C22  C025  F0AB         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2709                           
  2710                           ;Movement.c: 121: SensorResult[1]=grabRightIR();
  2711  000C26  EC52  F00A         	call	_grabRightIR	;wreg free
  2712  000C2A  C024  F0AC         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2713  000C2E  C025  F0AD         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2714                           
  2715                           ;Movement.c: 125: CAP1BUFH=0;
  2716  000C32  0E00               	movlw	0
  2717  000C34  6E69               	movwf	3945,c	;volatile
  2718                           
  2719                           ;Movement.c: 126: CAP1BUFL=0;
  2720  000C36  0E00               	movlw	0
  2721  000C38  6E68               	movwf	3944,c	;volatile
  2722                           
  2723                           ;Movement.c: 127: CAP2BUFH=0;
  2724  000C3A  0E00               	movlw	0
  2725  000C3C  6E67               	movwf	3943,c	;volatile
  2726                           
  2727                           ;Movement.c: 128: CAP2BUFL=0;
  2728  000C3E  0E00               	movlw	0
  2729  000C40  6E66               	movwf	3942,c	;volatile
  2730                           
  2731                           ;Movement.c: 132: SendLCD(0b00000001,0);
  2732  000C42  0E00               	movlw	0
  2733  000C44  6E28               	movwf	SendLCD@type,c
  2734  000C46  0E01               	movlw	1
  2735  000C48  EC03  F00C         	call	_SendLCD
  2736                           
  2737                           ;Movement.c: 133: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2738  000C4C  0E21               	movlw	33
  2739  000C4E                     u2897:
  2740  000C4E  2EE8               	decfsz	wreg,f,c
  2741  000C50  D7FE               	goto	u2897
  2742  000C52  F000               	nop	
  2743                           
  2744                           ;Movement.c: 134: SendLCD(0b00000010,0);
  2745  000C54  0E00               	movlw	0
  2746  000C56  6E28               	movwf	SendLCD@type,c
  2747  000C58  0E02               	movlw	2
  2748  000C5A  EC03  F00C         	call	_SendLCD
  2749                           
  2750                           ;Movement.c: 135: _delay((unsigned long)((2)*(8000000/4000.0)));
  2751  000C5E  0E06               	movlw	6
  2752  000C60  0100               	movlb	0	; () banked
  2753  000C62  6F75               	movwf	??_ScanWithRange& (0+255),b
  2754  000C64  0E30               	movlw	48
  2755  000C66                     u2907:
  2756  000C66  2EE8               	decfsz	wreg,f,c
  2757  000C68  D7FE               	goto	u2907
  2758  000C6A  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2759  000C6C  D7FC               	goto	u2907
  2760  000C6E  D000               	nop2	
  2761                           
  2762                           ;Movement.c: 136: SetLine(1);
  2763  000C70  0E01               	movlw	1
  2764  000C72  ECEB  F00B         	call	_SetLine
  2765                           
  2766                           ;Movement.c: 137: LCD_String("     ScanIR");
  2767  000C76  0E2D               	movlw	low STR_1
  2768  000C78  6E2A               	movwf	LCD_String@string,c
  2769  000C7A  0E03               	movlw	high STR_1
  2770  000C7C  6E2B               	movwf	LCD_String@string+1,c
  2771  000C7E  ECC4  F00A         	call	_LCD_String	;wreg free
  2772                           
  2773                           ;Movement.c: 138: SetLine(2);
  2774  000C82  0E02               	movlw	2
  2775  000C84  ECEB  F00B         	call	_SetLine
  2776                           
  2777                           ;Movement.c: 139: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2778  000C88  0E77               	movlw	low ScanWithRange@buf
  2779  000C8A  6E30               	movwf	sprintf@sp,c
  2780  000C8C  0E00               	movlw	high ScanWithRange@buf
  2781  000C8E  6E31               	movwf	sprintf@sp+1,c
  2782  000C90  0E0C               	movlw	low (STR_6+1)
  2783  000C92  6E32               	movwf	sprintf@f,c
  2784  000C94  0E03               	movlw	high (STR_6+1)
  2785  000C96  6E33               	movwf	sprintf@f+1,c
  2786  000C98  C0AA  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2787  000C9C  C0AB  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2788  000CA0  C0AC  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2789  000CA4  C0AD  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2790  000CA8  EC39  F004         	call	_sprintf	;wreg free
  2791                           
  2792                           ;Movement.c: 140: LCD_String(buf);
  2793  000CAC  0E77               	movlw	low ScanWithRange@buf
  2794  000CAE  6E2A               	movwf	LCD_String@string,c
  2795  000CB0  0E00               	movlw	high ScanWithRange@buf
  2796  000CB2  6E2B               	movwf	LCD_String@string+1,c
  2797  000CB4  ECC4  F00A         	call	_LCD_String	;wreg free
  2798                           
  2799                           ;Movement.c: 142: if (SensorResult[1]>DirectionFoundThreshold) {
  2800  000CB8  0100               	movlb	0	; () banked
  2801  000CBA  51AC               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2802  000CBC  0100               	movlb	0	; () banked
  2803  000CBE  5DA4               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2804  000CC0  0100               	movlb	0	; () banked
  2805  000CC2  51AD               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2806  000CC4  0100               	movlb	0	; () banked
  2807  000CC6  59A5               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2808  000CC8  B0D8               	btfsc	status,0,c
  2809  000CCA  D005               	goto	l3065
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;Movement.c: 143: RightFlag=1;
  2813  000CCC  0E00               	movlw	0
  2814  000CCE  0100               	movlb	0	; () banked
  2815  000CD0  6FA9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2816  000CD2  0E01               	movlw	1
  2817  000CD4  6FA8               	movwf	ScanWithRange@RightFlag& (0+255),b
  2818  000CD6                     l3065:
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;Movement.c: 144: }
  2822                           ;Movement.c: 146: if (SensorResult[0]>DirectionFoundThreshold) {
  2823  000CD6  0100               	movlb	0	; () banked
  2824  000CD8  51AA               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2825  000CDA  0100               	movlb	0	; () banked
  2826  000CDC  5DA4               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2827  000CDE  0100               	movlb	0	; () banked
  2828  000CE0  51AB               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2829  000CE2  0100               	movlb	0	; () banked
  2830  000CE4  59A5               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2831  000CE6  B0D8               	btfsc	status,0,c
  2832  000CE8  D005               	goto	l3069
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;Movement.c: 147: LeftFlag=1;
  2836  000CEA  0E00               	movlw	0
  2837  000CEC  0100               	movlb	0	; () banked
  2838  000CEE  6FA7               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2839  000CF0  0E01               	movlw	1
  2840  000CF2  6FA6               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2841  000CF4                     l3069:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;Movement.c: 148: }
  2845                           ;Movement.c: 151: if ((LeftFlag==1)||(RightFlag==1)) {
  2846  000CF4  0100               	movlb	0	; () banked
  2847  000CF6  05A6               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2848  000CF8  0100               	movlb	0	; () banked
  2849  000CFA  11A7               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2850  000CFC  B4D8               	btfsc	status,2,c
  2851  000CFE  D006               	goto	l3073
  2852                           
  2853                           ; BSR set to: 0
  2854  000D00  0100               	movlb	0	; () banked
  2855  000D02  05A8               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2856  000D04  0100               	movlb	0	; () banked
  2857  000D06  11A9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2858  000D08  A4D8               	btfss	status,2,c
  2859  000D0A  D002               	goto	l3075
  2860  000D0C                     l3073:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;Movement.c: 152: TimeAboveThreshold++;
  2864  000D0C  0100               	movlb	0	; () banked
  2865  000D0E  2B9F               	incf	ScanWithRange@TimeAboveThreshold& (0+255),f,b
  2866  000D10                     l3075:
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;Movement.c: 153: }
  2870                           ;Movement.c: 155: if (LeftFlag==1) {
  2871  000D10  0100               	movlb	0	; () banked
  2872  000D12  05A6               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2873  000D14  0100               	movlb	0	; () banked
  2874  000D16  11A7               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2875  000D18  A4D8               	btfss	status,2,c
  2876  000D1A  D055               	goto	l3101
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;Movement.c: 158: if (RightFlag==1) {
  2880  000D1C  0100               	movlb	0	; () banked
  2881  000D1E  05A8               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2882  000D20  0100               	movlb	0	; () banked
  2883  000D22  11A9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2884  000D24  A4D8               	btfss	status,2,c
  2885  000D26  D044               	goto	l3095
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;Movement.c: 159: for (n=1; n<=(TimeAboveThreshold>>1); n++) {
  2889  000D28  0E00               	movlw	0
  2890  000D2A  0100               	movlb	0	; () banked
  2891  000D2C  6FA3               	movwf	(ScanWithRange@n+1)& (0+255),b
  2892  000D2E  0E01               	movlw	1
  2893  000D30  6FA2               	movwf	ScanWithRange@n& (0+255),b
  2894  000D32  D02C               	goto	l224
  2895  000D34                     l3081:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;Movement.c: 160: stop(mL,mR);
  2899  000D34  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2900  000D38  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2901  000D3C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2902  000D40  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2903  000D44  EC41  F009         	call	_stop	;wreg free
  2904                           
  2905                           ;Movement.c: 161: turnLeft(mL,mR, 100);
  2906  000D48  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2907  000D4C  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2908  000D50  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2909  000D54  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2910  000D58  0E64               	movlw	100
  2911  000D5A  0100               	movlb	0	; () banked
  2912  000D5C  6F6B               	movwf	turnLeft@power& (0+255),b
  2913  000D5E  EC7B  F00B         	call	_turnLeft	;wreg free
  2914                           
  2915                           ;Movement.c: 162: _delay((unsigned long)((1)*(8000000/4000.0)));
  2916  000D62  0E03               	movlw	3
  2917  000D64  0100               	movlb	0	; () banked
  2918  000D66  6F75               	movwf	??_ScanWithRange& (0+255),b
  2919  000D68  0E98               	movlw	152
  2920  000D6A                     u2917:
  2921  000D6A  2EE8               	decfsz	wreg,f,c
  2922  000D6C  D7FE               	goto	u2917
  2923  000D6E  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2924  000D70  D7FC               	goto	u2917
  2925                           
  2926                           ;Movement.c: 163: stop(mL,mR);
  2927  000D72  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2928  000D76  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2929  000D7A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2930  000D7E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2931  000D82  EC41  F009         	call	_stop	;wreg free
  2932  000D86  0100               	movlb	0	; () banked
  2933  000D88  4BA2               	infsnz	ScanWithRange@n& (0+255),f,b
  2934  000D8A  2BA3               	incf	(ScanWithRange@n+1)& (0+255),f,b
  2935  000D8C                     l224:
  2936                           
  2937                           ; BSR set to: 0
  2938  000D8C  0100               	movlb	0	; () banked
  2939  000D8E  90D8               	bcf	status,0,c
  2940  000D90  319F               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  2941  000D92  0100               	movlb	0	; () banked
  2942  000D94  6F75               	movwf	??_ScanWithRange& (0+255),b
  2943  000D96  6B76               	clrf	(??_ScanWithRange+1)& (0+255),b
  2944  000D98  0100               	movlb	0	; () banked
  2945  000D9A  51A2               	movf	ScanWithRange@n& (0+255),w,b
  2946  000D9C  0100               	movlb	0	; () banked
  2947  000D9E  5D75               	subwf	??_ScanWithRange& (0+255),w,b
  2948  000DA0  0100               	movlb	0	; () banked
  2949  000DA2  51A3               	movf	(ScanWithRange@n+1)& (0+255),w,b
  2950  000DA4  0100               	movlb	0	; () banked
  2951  000DA6  5976               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2952  000DA8  B0D8               	btfsc	status,0,c
  2953  000DAA  D7C4               	goto	l3081
  2954  000DAC                     l3089:
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;Movement.c: 164: }
  2958                           ;Movement.c: 165: return 2;
  2959  000DAC  0E02               	movlw	2
  2960                           
  2961                           ; BSR set to: 0
  2962  000DAE  0012               	return	
  2963  000DB0                     l3095:
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;Movement.c: 168: stop(mL,mR);
  2967  000DB0  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2968  000DB4  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2969  000DB8  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2970  000DBC  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2971  000DC0  EC41  F009         	call	_stop	;wreg free
  2972  000DC4  D7F3               	goto	l3089
  2973  000DC6                     l3101:
  2974  000DC6  0100               	movlb	0	; () banked
  2975  000DC8  4BA0               	infsnz	ScanWithRange@i& (0+255),f,b
  2976  000DCA  2BA1               	incf	(ScanWithRange@i+1)& (0+255),f,b
  2977  000DCC                     l3103:
  2978                           
  2979                           ; BSR set to: 0
  2980  000DCC  0100               	movlb	0	; () banked
  2981  000DCE  51A0               	movf	ScanWithRange@i& (0+255),w,b
  2982  000DD0  0100               	movlb	0	; () banked
  2983  000DD2  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  2984  000DD4  0100               	movlb	0	; () banked
  2985  000DD6  51A1               	movf	(ScanWithRange@i+1)& (0+255),w,b
  2986  000DD8  0100               	movlb	0	; () banked
  2987  000DDA  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  2988  000DDC  B0D8               	btfsc	status,0,c
  2989  000DDE  D71D               	goto	l3037
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;Movement.c: 170: }
  2993                           ;Movement.c: 171: }
  2994                           ;Movement.c: 172: }
  2995                           ;Movement.c: 175: turnRight(mL,mR, 100);
  2996                           
  2997                           ; BSR set to: 0
  2998  000DE0  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2999  000DE4  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3000  000DE8  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3001  000DEC  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3002  000DF0  0E64               	movlw	100
  3003  000DF2  0100               	movlb	0	; () banked
  3004  000DF4  6F6B               	movwf	turnRight@power& (0+255),b
  3005  000DF6  EC5C  F00B         	call	_turnRight	;wreg free
  3006                           
  3007                           ;Movement.c: 176: delay_tenth_s(5);
  3008  000DFA  0E05               	movlw	5
  3009  000DFC  EC9A  F00B         	call	_delay_tenth_s
  3010                           
  3011                           ;Movement.c: 177: stop(mL,mR);
  3012  000E00  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3013  000E04  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3014  000E08  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3015  000E0C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3016  000E10  EC41  F009         	call	_stop	;wreg free
  3017                           
  3018                           ;Movement.c: 178: return -1;
  3019  000E14  0EFF               	movlw	255
  3020  000E16  0012               	return	
  3021  000E18                     __end_of_ScanWithRange:
  3022                           	opt stack 0
  3023                           tblptru	equ	0xFF8
  3024                           prodh	equ	0xFF4
  3025                           prodl	equ	0xFF3
  3026                           intcon	equ	0xFF2
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           indf1	equ	0xFE7
  3030                           fsr1h	equ	0xFE2
  3031                           fsr1l	equ	0xFE1
  3032                           indf2	equ	0xFDF
  3033                           fsr2h	equ	0xFDA
  3034                           fsr2l	equ	0xFD9
  3035                           status	equ	0xFD8
  3036                           
  3037 ;; *************** function _turnRight *****************
  3038 ;; Defined at:
  3039 ;;		line 98 in file "dc_motor.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3042 ;;		 -> main@mL(9), 
  3043 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3044 ;;		 -> main@mR(9), 
  3045 ;;  power           1   11[BANK0 ] unsigned char 
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;		None               void
  3050 ;; Registers used:
  3051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3057 ;;      Params:         0       5       0       0
  3058 ;;      Locals:         0       0       0       0
  3059 ;;      Temps:          0       0       0       0
  3060 ;;      Totals:         0       5       0       0
  3061 ;;Total ram usage:        5 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    6
  3064 ;; This function calls:
  3065 ;;		_fullSpeedAhead
  3066 ;; This function is called by:
  3067 ;;		_ScanWithRange
  3068 ;; This function uses a non-reentrant model
  3069 ;;
  3070                           
  3071                           	psect	text10
  3072  0016B8                     __ptext10:
  3073                           	opt stack 0
  3074  0016B8                     _turnRight:
  3075                           	opt stack 23
  3076                           
  3077                           ;dc_motor.c: 102: mL->direction=0;
  3078                           
  3079                           ;incstack = 0
  3080  0016B8  0100               	movlb	0	; () banked
  3081  0016BA  EE20 F001          	lfsr	2,1
  3082  0016BE  5167               	movf	turnRight@mL& (0+255),w,b
  3083  0016C0  26D9               	addwf	fsr2l,f,c
  3084  0016C2  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3085  0016C4  22DA               	addwfc	fsr2h,f,c
  3086  0016C6  0E00               	movlw	0
  3087  0016C8  6EDF               	movwf	indf2,c
  3088                           
  3089                           ;dc_motor.c: 103: mR->direction=1;
  3090  0016CA  0100               	movlb	0	; () banked
  3091  0016CC  EE20 F001          	lfsr	2,1
  3092  0016D0  5169               	movf	turnRight@mR& (0+255),w,b
  3093  0016D2  26D9               	addwf	fsr2l,f,c
  3094  0016D4  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3095  0016D6  22DA               	addwfc	fsr2h,f,c
  3096  0016D8  0E01               	movlw	1
  3097  0016DA  6EDF               	movwf	indf2,c
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3101  0016DC  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3102  0016E0  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3103  0016E4  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3104  0016E8  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3105  0016EC  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3106  0016F0  EC12  F00A         	call	_fullSpeedAhead	;wreg free
  3107  0016F4  0012               	return		;funcret
  3108  0016F6                     __end_of_turnRight:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           intcon	equ	0xFF2
  3114                           postinc0	equ	0xFEE
  3115                           wreg	equ	0xFE8
  3116                           indf1	equ	0xFE7
  3117                           fsr1h	equ	0xFE2
  3118                           fsr1l	equ	0xFE1
  3119                           indf2	equ	0xFDF
  3120                           fsr2h	equ	0xFDA
  3121                           fsr2l	equ	0xFD9
  3122                           status	equ	0xFD8
  3123                           
  3124 ;; *************** function _turnLeft *****************
  3125 ;; Defined at:
  3126 ;;		line 87 in file "dc_motor.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3129 ;;		 -> main@mL(9), 
  3130 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3131 ;;		 -> main@mR(9), 
  3132 ;;  power           1   11[BANK0 ] unsigned char 
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;		None               void
  3137 ;; Registers used:
  3138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3144 ;;      Params:         0       5       0       0
  3145 ;;      Locals:         0       0       0       0
  3146 ;;      Temps:          0       0       0       0
  3147 ;;      Totals:         0       5       0       0
  3148 ;;Total ram usage:        5 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    6
  3151 ;; This function calls:
  3152 ;;		_fullSpeedAhead
  3153 ;; This function is called by:
  3154 ;;		_ScanWithRange
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text11
  3159  0016F6                     __ptext11:
  3160                           	opt stack 0
  3161  0016F6                     _turnLeft:
  3162                           	opt stack 23
  3163                           
  3164                           ;dc_motor.c: 91: mL->direction=1;
  3165                           
  3166                           ;incstack = 0
  3167  0016F6  0100               	movlb	0	; () banked
  3168  0016F8  EE20 F001          	lfsr	2,1
  3169  0016FC  5167               	movf	turnLeft@mL& (0+255),w,b
  3170  0016FE  26D9               	addwf	fsr2l,f,c
  3171  001700  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3172  001702  22DA               	addwfc	fsr2h,f,c
  3173  001704  0E01               	movlw	1
  3174  001706  6EDF               	movwf	indf2,c
  3175                           
  3176                           ;dc_motor.c: 92: mR->direction=0;
  3177  001708  0100               	movlb	0	; () banked
  3178  00170A  EE20 F001          	lfsr	2,1
  3179  00170E  5169               	movf	turnLeft@mR& (0+255),w,b
  3180  001710  26D9               	addwf	fsr2l,f,c
  3181  001712  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3182  001714  22DA               	addwfc	fsr2h,f,c
  3183  001716  0E00               	movlw	0
  3184  001718  6EDF               	movwf	indf2,c
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3188  00171A  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3189  00171E  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3190  001722  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3191  001726  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3192  00172A  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3193  00172E  EC12  F00A         	call	_fullSpeedAhead	;wreg free
  3194  001732  0012               	return		;funcret
  3195  001734                     __end_of_turnLeft:
  3196                           	opt stack 0
  3197                           tblptru	equ	0xFF8
  3198                           prodh	equ	0xFF4
  3199                           prodl	equ	0xFF3
  3200                           intcon	equ	0xFF2
  3201                           postinc0	equ	0xFEE
  3202                           wreg	equ	0xFE8
  3203                           indf1	equ	0xFE7
  3204                           fsr1h	equ	0xFE2
  3205                           fsr1l	equ	0xFE1
  3206                           indf2	equ	0xFDF
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _fullSpeedAhead *****************
  3212 ;; Defined at:
  3213 ;;		line 108 in file "dc_motor.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3216 ;;		 -> main@mL(9), 
  3217 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3218 ;;		 -> main@mR(9), 
  3219 ;;  power           1    6[BANK0 ] unsigned char 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;		None               void
  3224 ;; Registers used:
  3225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3231 ;;      Params:         0       5       0       0
  3232 ;;      Locals:         0       0       0       0
  3233 ;;      Temps:          1       0       0       0
  3234 ;;      Totals:         1       5       0       0
  3235 ;;Total ram usage:        6 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    5
  3238 ;; This function calls:
  3239 ;;		_setMotorPWM
  3240 ;; This function is called by:
  3241 ;;		_turnLeft
  3242 ;;		_turnRight
  3243 ;;		_fullSpeedBack
  3244 ;;		_main
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           	psect	text12
  3249  001424                     __ptext12:
  3250                           	opt stack 0
  3251  001424                     _fullSpeedAhead:
  3252                           	opt stack 24
  3253                           
  3254                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3255                           
  3256                           ;incstack = 0
  3257  001424  D02C               	goto	l65
  3258  001426                     l2817:
  3259                           
  3260                           ;dc_motor.c: 112: if(mL->power<power){
  3261  001426  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3262  00142A  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3263  00142E  0100               	movlb	0	; () banked
  3264  001430  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3265  001432  5CDE               	subwf	postinc2,w,c
  3266  001434  B0D8               	btfsc	status,0,c
  3267  001436  D005               	goto	l2821
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;dc_motor.c: 113: mL->power++;
  3271  001438  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3272  00143C  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3273  001440  2ADF               	incf	indf2,f,c
  3274  001442                     l2821:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;dc_motor.c: 114: }
  3278                           ;dc_motor.c: 115: if(mR->power<power){
  3279  001442  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3280  001446  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3281  00144A  0100               	movlb	0	; () banked
  3282  00144C  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3283  00144E  5CDE               	subwf	postinc2,w,c
  3284  001450  B0D8               	btfsc	status,0,c
  3285  001452  D005               	goto	l2825
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;dc_motor.c: 116: mR->power++;
  3289  001454  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3290  001458  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3291  00145C  2ADF               	incf	indf2,f,c
  3292  00145E                     l2825:
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;dc_motor.c: 117: }
  3296                           ;dc_motor.c: 118: setMotorPWM(mL);
  3297  00145E  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3298  001462  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3299  001466  EC0C  F007         	call	_setMotorPWM	;wreg free
  3300                           
  3301                           ;dc_motor.c: 119: setMotorPWM(mR);
  3302  00146A  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3303  00146E  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3304  001472  EC0C  F007         	call	_setMotorPWM	;wreg free
  3305                           
  3306                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3307  001476  0E21               	movlw	33
  3308  001478                     u2927:
  3309  001478  2EE8               	decfsz	wreg,f,c
  3310  00147A  D7FE               	goto	u2927
  3311  00147C  F000               	nop	
  3312  00147E                     l65:
  3313  00147E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3314  001482  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3315  001486  0100               	movlb	0	; () banked
  3316  001488  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3317  00148A  5CDE               	subwf	postinc2,w,c
  3318  00148C  A0D8               	btfss	status,0,c
  3319  00148E  D7CB               	goto	l2817
  3320                           
  3321                           ; BSR set to: 0
  3322  001490  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3323  001494  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3324  001498  0100               	movlb	0	; () banked
  3325  00149A  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3326  00149C  5CDE               	subwf	postinc2,w,c
  3327  00149E  B0D8               	btfsc	status,0,c
  3328  0014A0  0012               	return	
  3329  0014A2  D7C1               	goto	l2817
  3330  0014A4                     __end_of_fullSpeedAhead:
  3331                           	opt stack 0
  3332                           tblptru	equ	0xFF8
  3333                           prodh	equ	0xFF4
  3334                           prodl	equ	0xFF3
  3335                           intcon	equ	0xFF2
  3336                           postinc0	equ	0xFEE
  3337                           wreg	equ	0xFE8
  3338                           indf1	equ	0xFE7
  3339                           fsr1h	equ	0xFE2
  3340                           fsr1l	equ	0xFE1
  3341                           indf2	equ	0xFDF
  3342                           postinc2	equ	0xFDE
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function _delay_tenth_s *****************
  3348 ;; Defined at:
  3349 ;;		line 32 in file "Movement.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  tenth_second    1    wreg     unsigned char 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3354 ;;  i               2   37[COMRAM] unsigned int 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;		None               void
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3364 ;;      Params:         0       0       0       0
  3365 ;;      Locals:         3       0       0       0
  3366 ;;      Temps:          1       0       0       0
  3367 ;;      Totals:         4       0       0       0
  3368 ;;Total ram usage:        4 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    3
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_ScanWithRange
  3375 ;;		_main
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text13
  3380  001734                     __ptext13:
  3381                           	opt stack 0
  3382  001734                     _delay_tenth_s:
  3383                           	opt stack 27
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;incstack = 0
  3387                           ;delay_tenth_s@tenth_seconds stored from wreg
  3388  001734  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3389                           
  3390                           ;Movement.c: 33: unsigned int i=0;
  3391  001736  0E00               	movlw	0
  3392  001738  6E27               	movwf	delay_tenth_s@i+1,c
  3393  00173A  0E00               	movlw	0
  3394  00173C  6E26               	movwf	delay_tenth_s@i,c
  3395                           
  3396                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3397  00173E  0E00               	movlw	0
  3398  001740  6E27               	movwf	delay_tenth_s@i+1,c
  3399  001742  0E01               	movlw	1
  3400  001744  6E26               	movwf	delay_tenth_s@i,c
  3401  001746  D009               	goto	l2165
  3402  001748                     l2161:
  3403                           
  3404                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3405  001748  0E82               	movlw	130
  3406  00174A  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3407  00174C  0EDE               	movlw	222
  3408  00174E                     u2937:
  3409  00174E  2EE8               	decfsz	wreg,f,c
  3410  001750  D7FE               	goto	u2937
  3411  001752  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3412  001754  D7FC               	goto	u2937
  3413  001756  4A26               	infsnz	delay_tenth_s@i,f,c
  3414  001758  2A27               	incf	delay_tenth_s@i+1,f,c
  3415  00175A                     l2165:
  3416  00175A  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3417  00175C  0D02               	mullw	2
  3418  00175E  5026               	movf	delay_tenth_s@i,w,c
  3419  001760  5CF3               	subwf	prodl,w,c
  3420  001762  5027               	movf	delay_tenth_s@i+1,w,c
  3421  001764  58F4               	subwfb	prodh,w,c
  3422  001766  A0D8               	btfss	status,0,c
  3423  001768  0012               	return	
  3424  00176A  D7EE               	goto	l2161
  3425  00176C                     __end_of_delay_tenth_s:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           prodh	equ	0xFF4
  3429                           prodl	equ	0xFF3
  3430                           intcon	equ	0xFF2
  3431                           postinc0	equ	0xFEE
  3432                           wreg	equ	0xFE8
  3433                           indf1	equ	0xFE7
  3434                           fsr1h	equ	0xFE2
  3435                           fsr1l	equ	0xFE1
  3436                           indf2	equ	0xFDF
  3437                           postinc2	equ	0xFDE
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function _ScanIR *****************
  3443 ;; Defined at:
  3444 ;;		line 45 in file "Movement.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3447 ;;		 -> main@mL(9), 
  3448 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3449 ;;		 -> main@mR(9), 
  3450 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3451 ;;		 -> main@Move(1), 
  3452 ;;  MoveTime        2   19[BANK0 ] PTR unsigned char 
  3453 ;;		 -> main@MoveTime(100), 
  3454 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3455 ;;		 -> main@MoveType(100), 
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3458 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3459 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;                  1    wreg      unsigned char 
  3462 ;; Registers used:
  3463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3469 ;;      Params:         0      10       0       0
  3470 ;;      Locals:         0      46       0       0
  3471 ;;      Temps:          1       0       0       0
  3472 ;;      Totals:         1      56       0       0
  3473 ;;Total ram usage:       57 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    7
  3476 ;; This function calls:
  3477 ;;		_LCD_String
  3478 ;;		_SendLCD
  3479 ;;		_SetLine
  3480 ;;		_grabLeftIR
  3481 ;;		_grabRightIR
  3482 ;;		_sprintf
  3483 ;;		_stop
  3484 ;; This function is called by:
  3485 ;;		_main
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text14
  3490  000F52                     __ptext14:
  3491                           	opt stack 0
  3492  000F52                     _ScanIR:
  3493                           	opt stack 23
  3494                           
  3495                           ;Movement.c: 48: unsigned int SensorResult[2]={0,0};
  3496                           
  3497                           ;incstack = 0
  3498  000F52  C0B8  F0A1         	movff	ScanIR@F3882,ScanIR@SensorResult
  3499  000F56  C0B9  F0A2         	movff	ScanIR@F3882+1,ScanIR@SensorResult+1
  3500  000F5A  C0BA  F0A3         	movff	ScanIR@F3882+2,ScanIR@SensorResult+2
  3501  000F5E  C0BB  F0A4         	movff	ScanIR@F3882+3,ScanIR@SensorResult+3
  3502                           
  3503                           ;Movement.c: 49: char buf[40];
  3504                           ;Movement.c: 52: const unsigned int DirectionMoveThreshold=2500;
  3505  000F62  0E09               	movlw	9
  3506  000F64  0100               	movlb	0	; () banked
  3507  000F66  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3508  000F68  0EC4               	movlw	196
  3509  000F6A  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  3513  000F6C  EC8B  F00A         	call	_grabLeftIR	;wreg free
  3514  000F70  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3515  000F74  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3516                           
  3517                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  3518  000F78  EC52  F00A         	call	_grabRightIR	;wreg free
  3519  000F7C  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3520  000F80  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3521                           
  3522                           ;Movement.c: 60: CAP1BUFH=0;
  3523  000F84  0E00               	movlw	0
  3524  000F86  6E69               	movwf	3945,c	;volatile
  3525                           
  3526                           ;Movement.c: 61: CAP1BUFL=0;
  3527  000F88  0E00               	movlw	0
  3528  000F8A  6E68               	movwf	3944,c	;volatile
  3529                           
  3530                           ;Movement.c: 62: CAP2BUFH=0;
  3531  000F8C  0E00               	movlw	0
  3532  000F8E  6E67               	movwf	3943,c	;volatile
  3533                           
  3534                           ;Movement.c: 63: CAP2BUFL=0;
  3535  000F90  0E00               	movlw	0
  3536  000F92  6E66               	movwf	3942,c	;volatile
  3537                           
  3538                           ;Movement.c: 66: SendLCD(0b00000001,0);
  3539  000F94  0E00               	movlw	0
  3540  000F96  6E28               	movwf	SendLCD@type,c
  3541  000F98  0E01               	movlw	1
  3542  000F9A  EC03  F00C         	call	_SendLCD
  3543                           
  3544                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3545  000F9E  0E21               	movlw	33
  3546  000FA0                     u2947:
  3547  000FA0  2EE8               	decfsz	wreg,f,c
  3548  000FA2  D7FE               	goto	u2947
  3549  000FA4  F000               	nop	
  3550                           
  3551                           ;Movement.c: 68: SendLCD(0b00000010,0);
  3552  000FA6  0E00               	movlw	0
  3553  000FA8  6E28               	movwf	SendLCD@type,c
  3554  000FAA  0E02               	movlw	2
  3555  000FAC  EC03  F00C         	call	_SendLCD
  3556                           
  3557                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  3558  000FB0  0E06               	movlw	6
  3559  000FB2  6E39               	movwf	??_ScanIR& (0+255),c
  3560  000FB4  0E30               	movlw	48
  3561  000FB6                     u2957:
  3562  000FB6  2EE8               	decfsz	wreg,f,c
  3563  000FB8  D7FE               	goto	u2957
  3564  000FBA  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3565  000FBC  D7FC               	goto	u2957
  3566  000FBE  D000               	nop2	
  3567                           
  3568                           ;Movement.c: 70: SetLine(1);
  3569  000FC0  0E01               	movlw	1
  3570  000FC2  ECEB  F00B         	call	_SetLine
  3571                           
  3572                           ;Movement.c: 71: LCD_String("     ScanIR");
  3573  000FC6  0E2D               	movlw	low STR_1
  3574  000FC8  6E2A               	movwf	LCD_String@string,c
  3575  000FCA  0E03               	movlw	high STR_1
  3576  000FCC  6E2B               	movwf	LCD_String@string+1,c
  3577  000FCE  ECC4  F00A         	call	_LCD_String	;wreg free
  3578                           
  3579                           ;Movement.c: 72: SetLine(2);
  3580  000FD2  0E02               	movlw	2
  3581  000FD4  ECEB  F00B         	call	_SetLine
  3582                           
  3583                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3584  000FD8  0E77               	movlw	low ScanIR@buf
  3585  000FDA  6E30               	movwf	sprintf@sp,c
  3586  000FDC  0E00               	movlw	high ScanIR@buf
  3587  000FDE  6E31               	movwf	sprintf@sp+1,c
  3588  000FE0  0E0C               	movlw	low (STR_6+1)
  3589  000FE2  6E32               	movwf	sprintf@f,c
  3590  000FE4  0E03               	movlw	high (STR_6+1)
  3591  000FE6  6E33               	movwf	sprintf@f+1,c
  3592  000FE8  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3593  000FEC  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3594  000FF0  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3595  000FF4  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3596  000FF8  EC39  F004         	call	_sprintf	;wreg free
  3597                           
  3598                           ;Movement.c: 74: LCD_String(buf);
  3599  000FFC  0E77               	movlw	low ScanIR@buf
  3600  000FFE  6E2A               	movwf	LCD_String@string,c
  3601  001000  0E00               	movlw	high ScanIR@buf
  3602  001002  6E2B               	movwf	LCD_String@string+1,c
  3603  001004  ECC4  F00A         	call	_LCD_String	;wreg free
  3604                           
  3605                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>Directio
      +                          nMoveThreshold)) {
  3606  001008  0100               	movlb	0	; () banked
  3607  00100A  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3608  00100C  0100               	movlb	0	; () banked
  3609  00100E  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3610  001010  0100               	movlb	0	; () banked
  3611  001012  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3612  001014  0100               	movlb	0	; () banked
  3613  001016  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3614  001018  B0D8               	btfsc	status,0,c
  3615  00101A  D00C               	goto	l3017
  3616                           
  3617                           ; BSR set to: 0
  3618  00101C  0100               	movlb	0	; () banked
  3619  00101E  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3620  001020  0100               	movlb	0	; () banked
  3621  001022  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3622  001024  0100               	movlb	0	; () banked
  3623  001026  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3624  001028  0100               	movlb	0	; () banked
  3625  00102A  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3626  00102C  B0D8               	btfsc	status,0,c
  3627  00102E  D002               	goto	l3017
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;Movement.c: 79: return 2;
  3631  001030  0E02               	movlw	2
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;Movement.c: 80: } else {
  3635                           
  3636                           ; BSR set to: 0
  3637  001032  0012               	return	
  3638  001034                     l3017:
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;Movement.c: 81: stop(mL,mR);
  3642  001034  C06D  F062         	movff	ScanIR@mL,stop@mL
  3643  001038  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3644  00103C  C06F  F064         	movff	ScanIR@mR,stop@mR
  3645  001040  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3646  001044  EC41  F009         	call	_stop	;wreg free
  3647                           
  3648                           ;Movement.c: 82: return 0;
  3649  001048  0E00               	movlw	0
  3650  00104A  0012               	return	
  3651  00104C                     __end_of_ScanIR:
  3652                           	opt stack 0
  3653                           tblptru	equ	0xFF8
  3654                           prodh	equ	0xFF4
  3655                           prodl	equ	0xFF3
  3656                           intcon	equ	0xFF2
  3657                           postinc0	equ	0xFEE
  3658                           wreg	equ	0xFE8
  3659                           indf1	equ	0xFE7
  3660                           fsr1h	equ	0xFE2
  3661                           fsr1l	equ	0xFE1
  3662                           indf2	equ	0xFDF
  3663                           postinc2	equ	0xFDE
  3664                           fsr2h	equ	0xFDA
  3665                           fsr2l	equ	0xFD9
  3666                           status	equ	0xFD8
  3667                           
  3668 ;; *************** function _stop *****************
  3669 ;; Defined at:
  3670 ;;		line 67 in file "dc_motor.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3673 ;;		 -> main@mL(9), 
  3674 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3675 ;;		 -> main@mR(9), 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;		None               void
  3680 ;; Registers used:
  3681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3687 ;;      Params:         0       4       0       0
  3688 ;;      Locals:         0       0       0       0
  3689 ;;      Temps:          0       0       0       0
  3690 ;;      Totals:         0       4       0       0
  3691 ;;Total ram usage:        4 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    5
  3694 ;; This function calls:
  3695 ;;		_setMotorPWM
  3696 ;; This function is called by:
  3697 ;;		_ScanIR
  3698 ;;		_ScanWithRange
  3699 ;;		_main
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text15
  3704  001282                     __ptext15:
  3705                           	opt stack 0
  3706  001282                     _stop:
  3707                           	opt stack 25
  3708                           
  3709                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3710                           
  3711                           ;incstack = 0
  3712  001282  D028               	goto	l2849
  3713  001284                     l2835:
  3714                           
  3715                           ;dc_motor.c: 71: if(mL->power>0){
  3716  001284  C062  FFD9         	movff	stop@mL,fsr2l
  3717  001288  C063  FFDA         	movff	stop@mL+1,fsr2h
  3718  00128C  50DF               	movf	indf2,w,c
  3719  00128E  B4D8               	btfsc	status,2,c
  3720  001290  D005               	goto	l2839
  3721                           
  3722                           ;dc_motor.c: 72: mL->power--;
  3723  001292  C062  FFD9         	movff	stop@mL,fsr2l
  3724  001296  C063  FFDA         	movff	stop@mL+1,fsr2h
  3725  00129A  06DF               	decf	indf2,f,c
  3726  00129C                     l2839:
  3727                           
  3728                           ;dc_motor.c: 73: }
  3729                           ;dc_motor.c: 74: if(mR->power>0){
  3730  00129C  C064  FFD9         	movff	stop@mR,fsr2l
  3731  0012A0  C065  FFDA         	movff	stop@mR+1,fsr2h
  3732  0012A4  50DF               	movf	indf2,w,c
  3733  0012A6  B4D8               	btfsc	status,2,c
  3734  0012A8  D005               	goto	l2843
  3735                           
  3736                           ;dc_motor.c: 75: mR->power--;
  3737  0012AA  C064  FFD9         	movff	stop@mR,fsr2l
  3738  0012AE  C065  FFDA         	movff	stop@mR+1,fsr2h
  3739  0012B2  06DF               	decf	indf2,f,c
  3740  0012B4                     l2843:
  3741                           
  3742                           ;dc_motor.c: 76: }
  3743                           ;dc_motor.c: 77: setMotorPWM(mL);
  3744  0012B4  C062  F032         	movff	stop@mL,setMotorPWM@m
  3745  0012B8  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3746  0012BC  EC0C  F007         	call	_setMotorPWM	;wreg free
  3747                           
  3748                           ;dc_motor.c: 78: setMotorPWM(mR);
  3749  0012C0  C064  F032         	movff	stop@mR,setMotorPWM@m
  3750  0012C4  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3751  0012C8  EC0C  F007         	call	_setMotorPWM	;wreg free
  3752                           
  3753                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3754  0012CC  0E21               	movlw	33
  3755  0012CE                     u2967:
  3756  0012CE  2EE8               	decfsz	wreg,f,c
  3757  0012D0  D7FE               	goto	u2967
  3758  0012D2  F000               	nop	
  3759  0012D4                     l2849:
  3760  0012D4  C062  FFD9         	movff	stop@mL,fsr2l
  3761  0012D8  C063  FFDA         	movff	stop@mL+1,fsr2h
  3762  0012DC  50DF               	movf	indf2,w,c
  3763  0012DE  A4D8               	btfss	status,2,c
  3764  0012E0  D7D1               	goto	l2835
  3765  0012E2  C064  FFD9         	movff	stop@mR,fsr2l
  3766  0012E6  C065  FFDA         	movff	stop@mR+1,fsr2h
  3767  0012EA  50DF               	movf	indf2,w,c
  3768  0012EC  A4D8               	btfss	status,2,c
  3769  0012EE  D7CA               	goto	l2835
  3770                           
  3771                           ;dc_motor.c: 80: }
  3772                           ;dc_motor.c: 81: mL->direction=1;
  3773  0012F0  0100               	movlb	0	; () banked
  3774  0012F2  EE20 F001          	lfsr	2,1
  3775  0012F6  5162               	movf	stop@mL& (0+255),w,b
  3776  0012F8  26D9               	addwf	fsr2l,f,c
  3777  0012FA  5163               	movf	(stop@mL+1)& (0+255),w,b
  3778  0012FC  22DA               	addwfc	fsr2h,f,c
  3779  0012FE  0E01               	movlw	1
  3780  001300  6EDF               	movwf	indf2,c
  3781                           
  3782                           ;dc_motor.c: 82: mR->direction=1;
  3783  001302  0100               	movlb	0	; () banked
  3784  001304  EE20 F001          	lfsr	2,1
  3785  001308  5164               	movf	stop@mR& (0+255),w,b
  3786  00130A  26D9               	addwf	fsr2l,f,c
  3787  00130C  5165               	movf	(stop@mR+1)& (0+255),w,b
  3788  00130E  22DA               	addwfc	fsr2h,f,c
  3789  001310  0E01               	movlw	1
  3790  001312  6EDF               	movwf	indf2,c
  3791                           
  3792                           ; BSR set to: 0
  3793  001314  0012               	return		;funcret
  3794  001316                     __end_of_stop:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           intcon	equ	0xFF2
  3800                           postinc0	equ	0xFEE
  3801                           wreg	equ	0xFE8
  3802                           indf1	equ	0xFE7
  3803                           fsr1h	equ	0xFE2
  3804                           fsr1l	equ	0xFE1
  3805                           indf2	equ	0xFDF
  3806                           postinc2	equ	0xFDE
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _setMotorPWM *****************
  3812 ;; Defined at:
  3813 ;;		line 26 in file "dc_motor.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3816 ;;		 -> main@mR(9), main@mL(9), 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  PWMduty         2    0[BANK0 ] int 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;		None               void
  3821 ;; Registers used:
  3822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3828 ;;      Params:         2       0       0       0
  3829 ;;      Locals:         0       2       0       0
  3830 ;;      Temps:          5       0       0       0
  3831 ;;      Totals:         7       2       0       0
  3832 ;;Total ram usage:        9 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    4
  3835 ;; This function calls:
  3836 ;;		___awdiv
  3837 ;;		___wmul
  3838 ;; This function is called by:
  3839 ;;		_stop
  3840 ;;		_fullSpeedAhead
  3841 ;;		_setMotorFullSpeed
  3842 ;;		_stopMotor
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text16
  3847  000E18                     __ptext16:
  3848                           	opt stack 0
  3849  000E18                     _setMotorPWM:
  3850                           	opt stack 25
  3851                           
  3852                           ;dc_motor.c: 28: int PWMduty;
  3853                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;incstack = 0
  3857  000E18  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  3858  000E1C  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3859  000E20  50DF               	movf	indf2,w,c
  3860  000E22  6E34               	movwf	??_setMotorPWM& (0+255),c
  3861  000E24  5034               	movf	??_setMotorPWM,w,c
  3862  000E26  6E24               	movwf	___wmul@multiplier,c
  3863  000E28  6A25               	clrf	___wmul@multiplier+1,c
  3864  000E2A  EE20 F007          	lfsr	2,7
  3865  000E2E  5032               	movf	setMotorPWM@m,w,c
  3866  000E30  26D9               	addwf	fsr2l,f,c
  3867  000E32  5033               	movf	setMotorPWM@m+1,w,c
  3868  000E34  22DA               	addwfc	fsr2h,f,c
  3869  000E36  CFDE F026          	movff	postinc2,___wmul@multiplicand
  3870  000E3A  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  3871  000E3E  EC43  F00C         	call	___wmul	;wreg free
  3872  000E42  C024  F02A         	movff	?___wmul,___awdiv@dividend
  3873  000E46  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  3874  000E4A  0E00               	movlw	0
  3875  000E4C  6E2D               	movwf	___awdiv@divisor+1,c
  3876  000E4E  0E64               	movlw	100
  3877  000E50  6E2C               	movwf	___awdiv@divisor,c
  3878  000E52  ECD0  F009         	call	___awdiv	;wreg free
  3879  000E56  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  3880  000E5A  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3881                           
  3882                           ;dc_motor.c: 32: if (m->direction)
  3883  000E5E  EE20 F001          	lfsr	2,1
  3884  000E62  5032               	movf	setMotorPWM@m,w,c
  3885  000E64  26D9               	addwf	fsr2l,f,c
  3886  000E66  5033               	movf	setMotorPWM@m+1,w,c
  3887  000E68  22DA               	addwfc	fsr2h,f,c
  3888  000E6A  50DF               	movf	indf2,w,c
  3889  000E6C  B4D8               	btfsc	status,2,c
  3890  000E6E  D02E               	goto	l2813
  3891                           
  3892                           ;dc_motor.c: 33: {
  3893                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3894  000E70  EE20 F006          	lfsr	2,6
  3895  000E74  5032               	movf	setMotorPWM@m,w,c
  3896  000E76  26D9               	addwf	fsr2l,f,c
  3897  000E78  5033               	movf	setMotorPWM@m+1,w,c
  3898  000E7A  22DA               	addwfc	fsr2h,f,c
  3899  000E7C  50DF               	movf	indf2,w,c
  3900  000E7E  6E34               	movwf	??_setMotorPWM& (0+255),c
  3901  000E80  0E01               	movlw	1
  3902  000E82  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3903  000E84  2A34               	incf	??_setMotorPWM,f,c
  3904  000E86  D002               	goto	u2204
  3905  000E88                     u2205:
  3906  000E88  90D8               	bcf	status,0,c
  3907  000E8A  3635               	rlcf	??_setMotorPWM+1,f,c
  3908  000E8C                     u2204:
  3909  000E8C  2E34               	decfsz	??_setMotorPWM,f,c
  3910  000E8E  D7FC               	goto	u2205
  3911  000E90  5035               	movf	??_setMotorPWM+1,w,c
  3912  000E92  108A               	iorwf	3978,w,c	;volatile
  3913  000E94  6E8A               	movwf	3978,c	;volatile
  3914                           
  3915                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3916  000E96  EE20 F007          	lfsr	2,7
  3917  000E9A  5032               	movf	setMotorPWM@m,w,c
  3918  000E9C  26D9               	addwf	fsr2l,f,c
  3919  000E9E  5033               	movf	setMotorPWM@m+1,w,c
  3920  000EA0  22DA               	addwfc	fsr2h,f,c
  3921  000EA2  CFDE F034          	movff	postinc2,??_setMotorPWM
  3922  000EA6  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3923  000EAA  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3924  000EAE  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3925  000EB2  1E36               	comf	??_setMotorPWM+2,f,c
  3926  000EB4  1E37               	comf	??_setMotorPWM+3,f,c
  3927  000EB6  4A36               	infsnz	??_setMotorPWM+2,f,c
  3928  000EB8  2A37               	incf	??_setMotorPWM+3,f,c
  3929  000EBA  5034               	movf	??_setMotorPWM,w,c
  3930  000EBC  2436               	addwf	??_setMotorPWM+2,w,c
  3931  000EBE  0100               	movlb	0	; () banked
  3932  000EC0  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  3933  000EC2  5035               	movf	??_setMotorPWM+1,w,c
  3934  000EC4  2037               	addwfc	??_setMotorPWM+3,w,c
  3935  000EC6  0100               	movlb	0	; () banked
  3936  000EC8  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  3937                           
  3938                           ;dc_motor.c: 36: }
  3939  000ECA  D014               	goto	l35
  3940  000ECC                     l2813:
  3941                           
  3942                           ;dc_motor.c: 37: else
  3943                           ;dc_motor.c: 38: {
  3944                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  3945  000ECC  EE20 F006          	lfsr	2,6
  3946  000ED0  5032               	movf	setMotorPWM@m,w,c
  3947  000ED2  26D9               	addwf	fsr2l,f,c
  3948  000ED4  5033               	movf	setMotorPWM@m+1,w,c
  3949  000ED6  22DA               	addwfc	fsr2h,f,c
  3950  000ED8  50DF               	movf	indf2,w,c
  3951  000EDA  6E34               	movwf	??_setMotorPWM& (0+255),c
  3952  000EDC  0E01               	movlw	1
  3953  000EDE  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3954  000EE0  2A34               	incf	??_setMotorPWM,f,c
  3955  000EE2  D002               	goto	u2214
  3956  000EE4                     u2215:
  3957  000EE4  90D8               	bcf	status,0,c
  3958  000EE6  3635               	rlcf	??_setMotorPWM+1,f,c
  3959  000EE8                     u2214:
  3960  000EE8  2E34               	decfsz	??_setMotorPWM,f,c
  3961  000EEA  D7FC               	goto	u2215
  3962  000EEC  5035               	movf	??_setMotorPWM+1,w,c
  3963  000EEE  0AFF               	xorlw	255
  3964  000EF0  148A               	andwf	3978,w,c	;volatile
  3965  000EF2  6E8A               	movwf	3978,c	;volatile
  3966  000EF4                     l35:
  3967                           
  3968                           ;dc_motor.c: 40: }
  3969                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  3970  000EF4  EE20 F002          	lfsr	2,2
  3971  000EF8  5032               	movf	setMotorPWM@m,w,c
  3972  000EFA  26D9               	addwf	fsr2l,f,c
  3973  000EFC  5033               	movf	setMotorPWM@m+1,w,c
  3974  000EFE  22DA               	addwfc	fsr2h,f,c
  3975  000F00  CFDE F034          	movff	postinc2,??_setMotorPWM
  3976  000F04  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3977  000F08  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  3978  000F0C  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3979  000F10  0100               	movlb	0	; () banked
  3980  000F12  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  3981  000F14  46E8               	rlncf	wreg,f,c
  3982  000F16  0BFC               	andlw	252
  3983  000F18  6EDF               	movwf	indf2,c
  3984                           
  3985                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  3986  000F1A  EE20 F004          	lfsr	2,4
  3987  000F1E  5032               	movf	setMotorPWM@m,w,c
  3988  000F20  26D9               	addwf	fsr2l,f,c
  3989  000F22  5033               	movf	setMotorPWM@m+1,w,c
  3990  000F24  22DA               	addwfc	fsr2h,f,c
  3991  000F26  CFDE F034          	movff	postinc2,??_setMotorPWM
  3992  000F2A  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3993  000F2E  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  3994  000F32  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3995  000F36  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3996  000F3A  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3997  000F3E  0E06               	movlw	6
  3998  000F40  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  3999  000F42                     u2225:
  4000  000F42  3437               	rlcf	??_setMotorPWM+3,w,c
  4001  000F44  3237               	rrcf	??_setMotorPWM+3,f,c
  4002  000F46  3236               	rrcf	??_setMotorPWM+2,f,c
  4003  000F48  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4004  000F4A  D7FB               	goto	u2225
  4005  000F4C  5036               	movf	??_setMotorPWM+2,w,c
  4006  000F4E  6EDF               	movwf	indf2,c
  4007                           
  4008                           ; BSR set to: 0
  4009  000F50  0012               	return		;funcret
  4010  000F52                     __end_of_setMotorPWM:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           prodh	equ	0xFF4
  4014                           prodl	equ	0xFF3
  4015                           intcon	equ	0xFF2
  4016                           postinc0	equ	0xFEE
  4017                           wreg	equ	0xFE8
  4018                           indf1	equ	0xFE7
  4019                           fsr1h	equ	0xFE2
  4020                           fsr1l	equ	0xFE1
  4021                           indf2	equ	0xFDF
  4022                           postinc2	equ	0xFDE
  4023                           postdec2	equ	0xFDD
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function ___awdiv *****************
  4029 ;; Defined at:
  4030 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  dividend        2   41[COMRAM] int 
  4033 ;;  divisor         2   43[COMRAM] int 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  quotient        2   47[COMRAM] int 
  4036 ;;  sign            1   46[COMRAM] unsigned char 
  4037 ;;  counter         1   45[COMRAM] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;                  2   41[COMRAM] int 
  4040 ;; Registers used:
  4041 ;;		wreg, status,2, status,0
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4047 ;;      Params:         4       0       0       0
  4048 ;;      Locals:         4       0       0       0
  4049 ;;      Temps:          0       0       0       0
  4050 ;;      Totals:         8       0       0       0
  4051 ;;Total ram usage:        8 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    3
  4054 ;; This function calls:
  4055 ;;		Nothing
  4056 ;; This function is called by:
  4057 ;;		_setMotorPWM
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           	psect	text17
  4062  0013A0                     __ptext17:
  4063                           	opt stack 0
  4064  0013A0                     ___awdiv:
  4065                           	opt stack 25
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;incstack = 0
  4069  0013A0  0E00               	movlw	0
  4070  0013A2  6E2F               	movwf	___awdiv@sign,c
  4071  0013A4  AE2D               	btfss	___awdiv@divisor+1,7,c
  4072  0013A6  D006               	goto	l2771
  4073  0013A8  6C2C               	negf	___awdiv@divisor,c
  4074  0013AA  1E2D               	comf	___awdiv@divisor+1,f,c
  4075  0013AC  B0D8               	btfsc	status,0,c
  4076  0013AE  2A2D               	incf	___awdiv@divisor+1,f,c
  4077  0013B0  0E01               	movlw	1
  4078  0013B2  6E2F               	movwf	___awdiv@sign,c
  4079  0013B4                     l2771:
  4080  0013B4  AE2B               	btfss	___awdiv@dividend+1,7,c
  4081  0013B6  D006               	goto	l2777
  4082  0013B8  6C2A               	negf	___awdiv@dividend,c
  4083  0013BA  1E2B               	comf	___awdiv@dividend+1,f,c
  4084  0013BC  B0D8               	btfsc	status,0,c
  4085  0013BE  2A2B               	incf	___awdiv@dividend+1,f,c
  4086  0013C0  0E01               	movlw	1
  4087  0013C2  1A2F               	xorwf	___awdiv@sign,f,c
  4088  0013C4                     l2777:
  4089  0013C4  0E00               	movlw	0
  4090  0013C6  6E31               	movwf	___awdiv@quotient+1,c
  4091  0013C8  0E00               	movlw	0
  4092  0013CA  6E30               	movwf	___awdiv@quotient,c
  4093  0013CC  502C               	movf	___awdiv@divisor,w,c
  4094  0013CE  102D               	iorwf	___awdiv@divisor+1,w,c
  4095  0013D0  B4D8               	btfsc	status,2,c
  4096  0013D2  D01C               	goto	l2799
  4097  0013D4  0E01               	movlw	1
  4098  0013D6  6E2E               	movwf	___awdiv@counter,c
  4099  0013D8  D004               	goto	l2785
  4100  0013DA                     l2783:
  4101  0013DA  90D8               	bcf	status,0,c
  4102  0013DC  362C               	rlcf	___awdiv@divisor,f,c
  4103  0013DE  362D               	rlcf	___awdiv@divisor+1,f,c
  4104  0013E0  2A2E               	incf	___awdiv@counter,f,c
  4105  0013E2                     l2785:
  4106  0013E2  AE2D               	btfss	___awdiv@divisor+1,7,c
  4107  0013E4  D7FA               	goto	l2783
  4108  0013E6                     l2787:
  4109  0013E6  90D8               	bcf	status,0,c
  4110  0013E8  3630               	rlcf	___awdiv@quotient,f,c
  4111  0013EA  3631               	rlcf	___awdiv@quotient+1,f,c
  4112  0013EC  502C               	movf	___awdiv@divisor,w,c
  4113  0013EE  5C2A               	subwf	___awdiv@dividend,w,c
  4114  0013F0  502D               	movf	___awdiv@divisor+1,w,c
  4115  0013F2  582B               	subwfb	___awdiv@dividend+1,w,c
  4116  0013F4  A0D8               	btfss	status,0,c
  4117  0013F6  D005               	goto	l2795
  4118  0013F8  502C               	movf	___awdiv@divisor,w,c
  4119  0013FA  5E2A               	subwf	___awdiv@dividend,f,c
  4120  0013FC  502D               	movf	___awdiv@divisor+1,w,c
  4121  0013FE  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4122  001400  8030               	bsf	___awdiv@quotient,0,c
  4123  001402                     l2795:
  4124  001402  90D8               	bcf	status,0,c
  4125  001404  322D               	rrcf	___awdiv@divisor+1,f,c
  4126  001406  322C               	rrcf	___awdiv@divisor,f,c
  4127  001408  2E2E               	decfsz	___awdiv@counter,f,c
  4128  00140A  D7ED               	goto	l2787
  4129  00140C                     l2799:
  4130  00140C  502F               	movf	___awdiv@sign,w,c
  4131  00140E  B4D8               	btfsc	status,2,c
  4132  001410  D004               	goto	l2803
  4133  001412  6C30               	negf	___awdiv@quotient,c
  4134  001414  1E31               	comf	___awdiv@quotient+1,f,c
  4135  001416  B0D8               	btfsc	status,0,c
  4136  001418  2A31               	incf	___awdiv@quotient+1,f,c
  4137  00141A                     l2803:
  4138  00141A  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4139  00141E  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4140  001422  0012               	return	
  4141  001424                     __end_of___awdiv:
  4142                           	opt stack 0
  4143                           tblptru	equ	0xFF8
  4144                           prodh	equ	0xFF4
  4145                           prodl	equ	0xFF3
  4146                           intcon	equ	0xFF2
  4147                           postinc0	equ	0xFEE
  4148                           wreg	equ	0xFE8
  4149                           indf1	equ	0xFE7
  4150                           fsr1h	equ	0xFE2
  4151                           fsr1l	equ	0xFE1
  4152                           indf2	equ	0xFDF
  4153                           postinc2	equ	0xFDE
  4154                           postdec2	equ	0xFDD
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function _sprintf *****************
  4160 ;; Defined at:
  4161 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4164 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4165 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4166 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  tmpval          4    0        struct .
  4169 ;;  cp              3    0        PTR const unsigned char 
  4170 ;;  width           2   10[BANK0 ] int 
  4171 ;;  val             2    7[BANK0 ] unsigned int 
  4172 ;;  ap              2    4[BANK0 ] PTR void [1]
  4173 ;;		 -> ?_sprintf(2), 
  4174 ;;  len             2    0        unsigned int 
  4175 ;;  c               1   12[BANK0 ] char 
  4176 ;;  flag            1    9[BANK0 ] unsigned char 
  4177 ;;  prec            1    6[BANK0 ] char 
  4178 ;; Return value:  Size  Location     Type
  4179 ;;                  2   47[COMRAM] int 
  4180 ;; Registers used:
  4181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4187 ;;      Params:         8       0       0       0
  4188 ;;      Locals:         0       9       0       0
  4189 ;;      Temps:          0       4       0       0
  4190 ;;      Totals:         8      13       0       0
  4191 ;;Total ram usage:       21 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:    4
  4194 ;; This function calls:
  4195 ;;		___lwdiv
  4196 ;;		___lwmod
  4197 ;;		___wmul
  4198 ;;		_isdigit
  4199 ;; This function is called by:
  4200 ;;		_ScanIR
  4201 ;;		_ScanWithRange
  4202 ;;		_main
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text18
  4207  000872                     __ptext18:
  4208                           	opt stack 0
  4209  000872                     _sprintf:
  4210                           	opt stack 26
  4211                           
  4212                           ;doprnt.c: 494: va_list ap;
  4213                           ;doprnt.c: 499: signed char c;
  4214                           ;doprnt.c: 501: int width;
  4215                           ;doprnt.c: 506: signed char prec;
  4216                           ;doprnt.c: 508: unsigned char flag;
  4217                           ;doprnt.c: 523: union {
  4218                           ;doprnt.c: 524: unsigned long vd;
  4219                           ;doprnt.c: 525: double integ;
  4220                           ;doprnt.c: 526: } tmpval;
  4221                           ;doprnt.c: 528: unsigned int val;
  4222                           ;doprnt.c: 529: unsigned len;
  4223                           ;doprnt.c: 530: const char * cp;
  4224                           ;doprnt.c: 533: *ap = __va_start();
  4225                           
  4226                           ;incstack = 0
  4227  000872  0E34               	movlw	low (?_sprintf+4)
  4228  000874  0100               	movlb	0	; () banked
  4229  000876  6F64               	movwf	sprintf@ap& (0+255),b
  4230  000878  0E00               	movlw	high (?_sprintf+4)
  4231  00087A  0100               	movlb	0	; () banked
  4232  00087C  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4233                           
  4234                           ;doprnt.c: 536: while(c = *f++) {
  4235  00087E  D168               	goto	l2971
  4236  000880                     l2865:
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;doprnt.c: 538: if(c != '%')
  4240  000880  0E25               	movlw	37
  4241  000882  0100               	movlb	0	; () banked
  4242  000884  196C               	xorwf	sprintf@c& (0+255),w,b
  4243  000886  B4D8               	btfsc	status,2,c
  4244  000888  D009               	goto	l2871
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;doprnt.c: 540: {
  4248                           ;doprnt.c: 541: ((*sp++ = (c)));
  4249  00088A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4250  00088E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4251  000892  C06C  FFDF         	movff	sprintf@c,indf2
  4252                           
  4253                           ; BSR set to: 0
  4254  000896  4A30               	infsnz	sprintf@sp,f,c
  4255  000898  2A31               	incf	sprintf@sp+1,f,c
  4256                           
  4257                           ;doprnt.c: 542: continue;
  4258  00089A  D15A               	goto	l2971
  4259  00089C                     l2871:
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;doprnt.c: 543: }
  4263                           ;doprnt.c: 546: width = 0;
  4264  00089C  0E00               	movlw	0
  4265  00089E  0100               	movlb	0	; () banked
  4266  0008A0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4267  0008A2  0E00               	movlw	0
  4268  0008A4  6F6A               	movwf	sprintf@width& (0+255),b
  4269                           
  4270                           ;doprnt.c: 548: flag = 0;
  4271  0008A6  0E00               	movlw	0
  4272  0008A8  0100               	movlb	0	; () banked
  4273  0008AA  6F69               	movwf	sprintf@flag& (0+255),b
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;doprnt.c: 551: switch(*f) {
  4277                           
  4278                           ;doprnt.c: 550: for(;;) {
  4279  0008AC  D004               	goto	l2877
  4280  0008AE                     l2873:
  4281                           
  4282                           ;doprnt.c: 580: flag |= 0x04;
  4283  0008AE  0100               	movlb	0	; () banked
  4284  0008B0  8569               	bsf	sprintf@flag& (0+255),2,b
  4285                           
  4286                           ;doprnt.c: 581: f++;
  4287  0008B2  4A32               	infsnz	sprintf@f,f,c
  4288  0008B4  2A33               	incf	sprintf@f+1,f,c
  4289  0008B6                     l2877:
  4290  0008B6  C032  FFF6         	movff	sprintf@f,tblptrl
  4291  0008BA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4292  0008BE                     	if	0	;tblptru may be non-zero
  4293  0008BE                     	endif
  4294  0008BE                     	if	0	;tblptru may be non-zero
  4295  0008BE                     	endif
  4296  0008BE  0008               	tblrd		*
  4297  0008C0  50F5               	movf	tablat,w,c
  4298                           
  4299                           ; Switch size 1, requested type "space"
  4300                           ; Number of cases is 1, Range of values is 48 to 48
  4301                           ; switch strategies available:
  4302                           ; Name         Instructions Cycles
  4303                           ; simple_byte            4     3 (average)
  4304                           ;	Chosen strategy is simple_byte
  4305  0008C2  0A30               	xorlw	48	; case 48
  4306  0008C4  B4D8               	btfsc	status,2,c
  4307  0008C6  D7F3               	goto	l2873
  4308                           
  4309                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4310                           
  4311                           ;doprnt.c: 586: }
  4312                           
  4313                           ;doprnt.c: 585: break;
  4314  0008C8  C032  FFF6         	movff	sprintf@f,tblptrl
  4315  0008CC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4316  0008D0                     	if	0	;tblptru may be non-zero
  4317  0008D0                     	endif
  4318  0008D0                     	if	0	;tblptru may be non-zero
  4319  0008D0                     	endif
  4320  0008D0  0008               	tblrd		*
  4321  0008D2  50F5               	movf	tablat,w,c
  4322  0008D4  EC67  F00C         	call	_isdigit
  4323  0008D8  A0D8               	btfss	status,0,c
  4324  0008DA  D03E               	goto	l2893
  4325                           
  4326                           ;doprnt.c: 598: width = 0;
  4327  0008DC  0E00               	movlw	0
  4328  0008DE  0100               	movlb	0	; () banked
  4329  0008E0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4330  0008E2  0E00               	movlw	0
  4331  0008E4  6F6A               	movwf	sprintf@width& (0+255),b
  4332  0008E6                     l2883:
  4333                           
  4334                           ;doprnt.c: 600: width *= 10;
  4335  0008E6  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4336  0008EA  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4337  0008EE  0E00               	movlw	0
  4338  0008F0  6E27               	movwf	___wmul@multiplicand+1,c
  4339  0008F2  0E0A               	movlw	10
  4340  0008F4  6E26               	movwf	___wmul@multiplicand,c
  4341  0008F6  EC43  F00C         	call	___wmul	;wreg free
  4342  0008FA  C024  F06A         	movff	?___wmul,sprintf@width
  4343  0008FE  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4344                           
  4345                           ;doprnt.c: 601: width += *f++ - '0';
  4346  000902  0ED0               	movlw	208
  4347  000904  0100               	movlb	0	; () banked
  4348  000906  6F60               	movwf	??_sprintf& (0+255),b
  4349  000908  0EFF               	movlw	255
  4350  00090A  0100               	movlb	0	; () banked
  4351  00090C  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4352  00090E  C032  FFF6         	movff	sprintf@f,tblptrl
  4353  000912  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4354  000916                     	if	0	;tblptru may be non-zero
  4355  000916                     	endif
  4356  000916                     	if	0	;tblptru may be non-zero
  4357  000916                     	endif
  4358  000916  0008               	tblrd		*
  4359  000918  50F5               	movf	tablat,w,c
  4360  00091A  0100               	movlb	0	; () banked
  4361  00091C  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4362  00091E  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4363  000920  0100               	movlb	0	; () banked
  4364  000922  5160               	movf	??_sprintf& (0+255),w,b
  4365  000924  0100               	movlb	0	; () banked
  4366  000926  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4367  000928  0100               	movlb	0	; () banked
  4368  00092A  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4369  00092C  0100               	movlb	0	; () banked
  4370  00092E  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4371  000930  0100               	movlb	0	; () banked
  4372  000932  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4373  000934  0100               	movlb	0	; () banked
  4374  000936  276A               	addwf	sprintf@width& (0+255),f,b
  4375  000938  0100               	movlb	0	; () banked
  4376  00093A  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4377  00093C  0100               	movlb	0	; () banked
  4378  00093E  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4379                           
  4380                           ; BSR set to: 0
  4381  000940  4A32               	infsnz	sprintf@f,f,c
  4382  000942  2A33               	incf	sprintf@f+1,f,c
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4386  000944  C032  FFF6         	movff	sprintf@f,tblptrl
  4387  000948  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4388  00094C                     	if	0	;tblptru may be non-zero
  4389  00094C                     	endif
  4390  00094C                     	if	0	;tblptru may be non-zero
  4391  00094C                     	endif
  4392  00094C  0008               	tblrd		*
  4393  00094E  50F5               	movf	tablat,w,c
  4394  000950  EC67  F00C         	call	_isdigit
  4395  000954  B0D8               	btfsc	status,0,c
  4396  000956  D7C7               	goto	l2883
  4397  000958                     l2893:
  4398  000958  C032  FFF6         	movff	sprintf@f,tblptrl
  4399  00095C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4400  000960  4A32               	infsnz	sprintf@f,f,c
  4401  000962  2A33               	incf	sprintf@f+1,f,c
  4402  000964                     	if	0	;tblptru may be non-zero
  4403  000964                     	endif
  4404  000964                     	if	0	;tblptru may be non-zero
  4405  000964                     	endif
  4406  000964  0008               	tblrd		*
  4407  000966  CFF5 F06C          	movff	tablat,sprintf@c
  4408  00096A  0100               	movlb	0	; () banked
  4409  00096C  516C               	movf	sprintf@c& (0+255),w,b
  4410                           
  4411                           ; Switch size 1, requested type "space"
  4412                           ; Number of cases is 3, Range of values is 0 to 105
  4413                           ; switch strategies available:
  4414                           ; Name         Instructions Cycles
  4415                           ; simple_byte           10     6 (average)
  4416                           ;	Chosen strategy is simple_byte
  4417  00096E  0A00               	xorlw	0	; case 0
  4418  000970  B4D8               	btfsc	status,2,c
  4419  000972  D0FB               	goto	l2973
  4420  000974  0A64               	xorlw	100	; case 100
  4421  000976  B4D8               	btfsc	status,2,c
  4422  000978  D003               	goto	l2895
  4423  00097A  0A0D               	xorlw	13	; case 105
  4424  00097C  A4D8               	btfss	status,2,c
  4425  00097E  D0E8               	goto	l2971
  4426  000980                     l2895:
  4427                           
  4428                           ;doprnt.c: 1253: {
  4429                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4430  000980  C064  FFD9         	movff	sprintf@ap,fsr2l
  4431  000984  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4432  000988  CFDE F067          	movff	postinc2,sprintf@val
  4433  00098C  CFDD F068          	movff	postdec2,sprintf@val+1
  4434  000990  0E02               	movlw	2
  4435  000992  0100               	movlb	0	; () banked
  4436  000994  2764               	addwf	sprintf@ap& (0+255),f,b
  4437  000996  0E00               	movlw	0
  4438  000998  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;doprnt.c: 1261: if((int)val < 0) {
  4442  00099A  0100               	movlb	0	; () banked
  4443  00099C  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4444  00099E  D008               	goto	l2905
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;doprnt.c: 1262: flag |= 0x03;
  4448  0009A0  0E03               	movlw	3
  4449  0009A2  0100               	movlb	0	; () banked
  4450  0009A4  1369               	iorwf	sprintf@flag& (0+255),f,b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;doprnt.c: 1263: val = -val;
  4454  0009A6  0100               	movlb	0	; () banked
  4455  0009A8  6D67               	negf	sprintf@val& (0+255),b
  4456  0009AA  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4457  0009AC  B0D8               	btfsc	status,0,c
  4458  0009AE  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4459  0009B0                     l2905:
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;doprnt.c: 1264: }
  4463                           ;doprnt.c: 1266: }
  4464                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4465  0009B0  0E01               	movlw	1
  4466  0009B2  0100               	movlb	0	; () banked
  4467  0009B4  6F6C               	movwf	sprintf@c& (0+255),b
  4468  0009B6                     l2907:
  4469                           
  4470                           ; BSR set to: 0
  4471  0009B6  0E05               	movlw	5
  4472  0009B8  0100               	movlb	0	; () banked
  4473  0009BA  196C               	xorwf	sprintf@c& (0+255),w,b
  4474  0009BC  B4D8               	btfsc	status,2,c
  4475  0009BE  D016               	goto	l2919
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;doprnt.c: 1306: if(val < dpowers[c])
  4479                           
  4480                           ; BSR set to: 0
  4481                           
  4482                           ; BSR set to: 0
  4483  0009C0  0100               	movlb	0	; () banked
  4484  0009C2  516C               	movf	sprintf@c& (0+255),w,b
  4485  0009C4  0D02               	mullw	2
  4486  0009C6  0E01               	movlw	low _dpowers
  4487  0009C8  24F3               	addwf	prodl,w,c
  4488  0009CA  6EF6               	movwf	tblptrl,c
  4489  0009CC  0E03               	movlw	high _dpowers
  4490  0009CE  20F4               	addwfc	prodh,w,c
  4491  0009D0  6EF7               	movwf	tblptrh,c
  4492  0009D2                     	if	0	;There are less than 3 active tblptr bytes
  4493  0009D2                     	endif
  4494  0009D2  0009               	tblrd		*+
  4495  0009D4  50F5               	movf	tablat,w,c
  4496  0009D6  0100               	movlb	0	; () banked
  4497  0009D8  5D67               	subwf	sprintf@val& (0+255),w,b
  4498  0009DA  0009               	tblrd		*+
  4499  0009DC  50F5               	movf	tablat,w,c
  4500  0009DE  0100               	movlb	0	; () banked
  4501  0009E0  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4502  0009E2  A0D8               	btfss	status,0,c
  4503  0009E4  D003               	goto	l2919
  4504                           
  4505                           ; BSR set to: 0
  4506                           
  4507                           ; BSR set to: 0
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;doprnt.c: 1307: break;
  4511  0009E6  0100               	movlb	0	; () banked
  4512  0009E8  2B6C               	incf	sprintf@c& (0+255),f,b
  4513  0009EA  D7E5               	goto	l2907
  4514  0009EC                     l2919:
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4518  0009EC  0100               	movlb	0	; () banked
  4519  0009EE  516A               	movf	sprintf@width& (0+255),w,b
  4520  0009F0  0100               	movlb	0	; () banked
  4521  0009F2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4522  0009F4  B4D8               	btfsc	status,2,c
  4523  0009F6  D00B               	goto	l2925
  4524                           
  4525                           ; BSR set to: 0
  4526  0009F8  C069  F060         	movff	sprintf@flag,??_sprintf
  4527  0009FC  0E03               	movlw	3
  4528  0009FE  0100               	movlb	0	; () banked
  4529  000A00  1760               	andwf	??_sprintf& (0+255),f,b
  4530  000A02  B4D8               	btfsc	status,2,c
  4531  000A04  D004               	goto	l2925
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;doprnt.c: 1346: width--;
  4535  000A06  0100               	movlb	0	; () banked
  4536  000A08  076A               	decf	sprintf@width& (0+255),f,b
  4537  000A0A  A0D8               	btfss	status,0,c
  4538  000A0C  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4539  000A0E                     l2925:
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;doprnt.c: 1381: if(width > c)
  4543  000A0E  0E80               	movlw	128
  4544  000A10  0100               	movlb	0	; () banked
  4545  000A12  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4546  000A14  0E7F               	movlw	127
  4547  000A16  0100               	movlb	0	; () banked
  4548  000A18  6F60               	movwf	??_sprintf& (0+255),b
  4549  000A1A  0100               	movlb	0	; () banked
  4550  000A1C  516A               	movf	sprintf@width& (0+255),w,b
  4551  000A1E  0100               	movlb	0	; () banked
  4552  000A20  5D6C               	subwf	sprintf@c& (0+255),w,b
  4553  000A22  0100               	movlb	0	; () banked
  4554  000A24  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4555  000A26  0A80               	xorlw	128
  4556  000A28  0100               	movlb	0	; () banked
  4557  000A2A  5960               	subwfb	??_sprintf& (0+255),w,b
  4558  000A2C  B0D8               	btfsc	status,0,c
  4559  000A2E  D00B               	goto	l2929
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;doprnt.c: 1382: width -= c;
  4563  000A30  0100               	movlb	0	; () banked
  4564  000A32  516C               	movf	sprintf@c& (0+255),w,b
  4565  000A34  0100               	movlb	0	; () banked
  4566  000A36  5F6A               	subwf	sprintf@width& (0+255),f,b
  4567  000A38  0E00               	movlw	0
  4568  000A3A  0100               	movlb	0	; () banked
  4569  000A3C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4570  000A3E  0EFF               	movlw	255
  4571  000A40  0100               	movlb	0	; () banked
  4572  000A42  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4573  000A44  D005               	goto	l2931
  4574  000A46                     l2929:
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;doprnt.c: 1383: else
  4578                           ;doprnt.c: 1384: width = 0;
  4579  000A46  0E00               	movlw	0
  4580  000A48  0100               	movlb	0	; () banked
  4581  000A4A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4582  000A4C  0E00               	movlw	0
  4583  000A4E  6F6A               	movwf	sprintf@width& (0+255),b
  4584  000A50                     l2931:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;doprnt.c: 1387: if(flag & 0x04) {
  4588  000A50  0100               	movlb	0	; () banked
  4589  000A52  A569               	btfss	sprintf@flag& (0+255),2,b
  4590  000A54  D022               	goto	l2947
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;doprnt.c: 1392: if(flag & 0x03)
  4594  000A56  C069  F060         	movff	sprintf@flag,??_sprintf
  4595  000A5A  0E03               	movlw	3
  4596  000A5C  0100               	movlb	0	; () banked
  4597  000A5E  1760               	andwf	??_sprintf& (0+255),f,b
  4598  000A60  B4D8               	btfsc	status,2,c
  4599  000A62  D008               	goto	l2939
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4603  000A64  C030  FFD9         	movff	sprintf@sp,fsr2l
  4604  000A68  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4605  000A6C  0E2D               	movlw	45
  4606  000A6E  6EDF               	movwf	indf2,c
  4607                           
  4608                           ; BSR set to: 0
  4609  000A70  4A30               	infsnz	sprintf@sp,f,c
  4610  000A72  2A31               	incf	sprintf@sp+1,f,c
  4611  000A74                     l2939:
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;doprnt.c: 1415: if(width)
  4615  000A74  0100               	movlb	0	; () banked
  4616  000A76  516A               	movf	sprintf@width& (0+255),w,b
  4617  000A78  0100               	movlb	0	; () banked
  4618  000A7A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4619  000A7C  B4D8               	btfsc	status,2,c
  4620  000A7E  D034               	goto	l2961
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4624                           
  4625                           ; BSR set to: 0
  4626                           
  4627                           ;doprnt.c: 1416: do
  4628  000A80  C030  FFD9         	movff	sprintf@sp,fsr2l
  4629  000A84  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4630  000A88  0E30               	movlw	48
  4631  000A8A  6EDF               	movwf	indf2,c
  4632                           
  4633                           ; BSR set to: 0
  4634  000A8C  4A30               	infsnz	sprintf@sp,f,c
  4635  000A8E  2A31               	incf	sprintf@sp+1,f,c
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;doprnt.c: 1418: while(--width);
  4639  000A90  0100               	movlb	0	; () banked
  4640  000A92  076A               	decf	sprintf@width& (0+255),f,b
  4641  000A94  A0D8               	btfss	status,0,c
  4642  000A96  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4643  000A98  D7ED               	goto	l2939
  4644  000A9A                     l2947:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;doprnt.c: 1422: {
  4648                           ;doprnt.c: 1424: if(width
  4649                           ;doprnt.c: 1428: )
  4650  000A9A  0100               	movlb	0	; () banked
  4651  000A9C  516A               	movf	sprintf@width& (0+255),w,b
  4652  000A9E  0100               	movlb	0	; () banked
  4653  000AA0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4654  000AA2  B4D8               	btfsc	status,2,c
  4655  000AA4  D012               	goto	l2955
  4656  000AA6                     l2949:
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4660  000AA6  C030  FFD9         	movff	sprintf@sp,fsr2l
  4661  000AAA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4662  000AAE  0E20               	movlw	32
  4663  000AB0  6EDF               	movwf	indf2,c
  4664                           
  4665                           ; BSR set to: 0
  4666  000AB2  4A30               	infsnz	sprintf@sp,f,c
  4667  000AB4  2A31               	incf	sprintf@sp+1,f,c
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;doprnt.c: 1431: while(--width);
  4671  000AB6  0100               	movlb	0	; () banked
  4672  000AB8  076A               	decf	sprintf@width& (0+255),f,b
  4673  000ABA  A0D8               	btfss	status,0,c
  4674  000ABC  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4675  000ABE  0100               	movlb	0	; () banked
  4676  000AC0  516A               	movf	sprintf@width& (0+255),w,b
  4677  000AC2  0100               	movlb	0	; () banked
  4678  000AC4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4679  000AC6  A4D8               	btfss	status,2,c
  4680  000AC8  D7EE               	goto	l2949
  4681  000ACA                     l2955:
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;doprnt.c: 1438: if(flag & 0x03)
  4685  000ACA  C069  F060         	movff	sprintf@flag,??_sprintf
  4686  000ACE  0E03               	movlw	3
  4687  000AD0  0100               	movlb	0	; () banked
  4688  000AD2  1760               	andwf	??_sprintf& (0+255),f,b
  4689  000AD4  B4D8               	btfsc	status,2,c
  4690  000AD6  D008               	goto	l2961
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4694  000AD8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4695  000ADC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4696  000AE0  0E2D               	movlw	45
  4697  000AE2  6EDF               	movwf	indf2,c
  4698                           
  4699                           ; BSR set to: 0
  4700  000AE4  4A30               	infsnz	sprintf@sp,f,c
  4701  000AE6  2A31               	incf	sprintf@sp+1,f,c
  4702  000AE8                     l2961:
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;doprnt.c: 1469: }
  4706                           ;doprnt.c: 1472: prec = c;
  4707  000AE8  C06C  F066         	movff	sprintf@c,sprintf@prec
  4708                           
  4709                           ;doprnt.c: 1474: while(prec--) {
  4710  000AEC  D02B               	goto	l2969
  4711  000AEE                     l2963:
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;doprnt.c: 1478: {
  4715                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4716  000AEE  0100               	movlb	0	; () banked
  4717  000AF0  5166               	movf	sprintf@prec& (0+255),w,b
  4718  000AF2  0D02               	mullw	2
  4719  000AF4  0E01               	movlw	low _dpowers
  4720  000AF6  24F3               	addwf	prodl,w,c
  4721  000AF8  6EF6               	movwf	tblptrl,c
  4722  000AFA  0E03               	movlw	high _dpowers
  4723  000AFC  20F4               	addwfc	prodh,w,c
  4724  000AFE  6EF7               	movwf	tblptrh,c
  4725  000B00                     	if	0	;There are less than 3 active tblptr bytes
  4726  000B00                     	endif
  4727  000B00  0009               	tblrd		*+
  4728  000B02  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4729  000B06  000A               	tblrd		*-
  4730  000B08  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4731  000B0C  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4732  000B10  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4733  000B14  ECF3  F00A         	call	___lwdiv	;wreg free
  4734  000B18  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4735  000B1C  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4736  000B20  0E00               	movlw	0
  4737  000B22  6E2E               	movwf	___lwmod@divisor+1,c
  4738  000B24  0E0A               	movlw	10
  4739  000B26  6E2D               	movwf	___lwmod@divisor,c
  4740  000B28  EC1C  F00B         	call	___lwmod	;wreg free
  4741  000B2C  502B               	movf	?___lwmod,w,c
  4742  000B2E  0F30               	addlw	48
  4743  000B30  0100               	movlb	0	; () banked
  4744  000B32  6F6C               	movwf	sprintf@c& (0+255),b
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;doprnt.c: 1523: }
  4748                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4749  000B34  C030  FFD9         	movff	sprintf@sp,fsr2l
  4750  000B38  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4751  000B3C  C06C  FFDF         	movff	sprintf@c,indf2
  4752                           
  4753                           ; BSR set to: 0
  4754  000B40  4A30               	infsnz	sprintf@sp,f,c
  4755  000B42  2A31               	incf	sprintf@sp+1,f,c
  4756  000B44                     l2969:
  4757                           
  4758                           ; BSR set to: 0
  4759  000B44  0100               	movlb	0	; () banked
  4760  000B46  0766               	decf	sprintf@prec& (0+255),f,b
  4761  000B48  0100               	movlb	0	; () banked
  4762  000B4A  2966               	incf	sprintf@prec& (0+255),w,b
  4763  000B4C  A4D8               	btfss	status,2,c
  4764  000B4E  D7CF               	goto	l2963
  4765  000B50                     l2971:
  4766  000B50  C032  FFF6         	movff	sprintf@f,tblptrl
  4767  000B54  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4768  000B58  4A32               	infsnz	sprintf@f,f,c
  4769  000B5A  2A33               	incf	sprintf@f+1,f,c
  4770  000B5C                     	if	0	;tblptru may be non-zero
  4771  000B5C                     	endif
  4772  000B5C                     	if	0	;tblptru may be non-zero
  4773  000B5C                     	endif
  4774  000B5C  0008               	tblrd		*
  4775  000B5E  CFF5 F06C          	movff	tablat,sprintf@c
  4776  000B62  0100               	movlb	0	; () banked
  4777  000B64  516C               	movf	sprintf@c& (0+255),w,b
  4778  000B66  A4D8               	btfss	status,2,c
  4779  000B68  D68B               	goto	l2865
  4780  000B6A                     l2973:
  4781                           
  4782                           ;doprnt.c: 1538: *sp = 0;
  4783  000B6A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4784  000B6E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4785  000B72  0E00               	movlw	0
  4786  000B74  6EDF               	movwf	indf2,c
  4787  000B76  0012               	return	
  4788  000B78                     __end_of_sprintf:
  4789                           	opt stack 0
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           postinc0	equ	0xFEE
  4798                           wreg	equ	0xFE8
  4799                           indf1	equ	0xFE7
  4800                           fsr1h	equ	0xFE2
  4801                           fsr1l	equ	0xFE1
  4802                           indf2	equ	0xFDF
  4803                           postinc2	equ	0xFDE
  4804                           postdec2	equ	0xFDD
  4805                           fsr2h	equ	0xFDA
  4806                           fsr2l	equ	0xFD9
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function _isdigit *****************
  4810 ;; Defined at:
  4811 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  c               1    wreg     unsigned char 
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;  c               1   37[COMRAM] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;		None               void
  4818 ;; Registers used:
  4819 ;;		wreg, status,2, status,0
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4825 ;;      Params:         0       0       0       0
  4826 ;;      Locals:         2       0       0       0
  4827 ;;      Temps:          1       0       0       0
  4828 ;;      Totals:         3       0       0       0
  4829 ;;Total ram usage:        3 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    3
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_sprintf
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text19
  4840  0018CE                     __ptext19:
  4841                           	opt stack 0
  4842  0018CE                     _isdigit:
  4843                           	opt stack 26
  4844                           
  4845                           ;incstack = 0
  4846                           ;isdigit@c stored from wreg
  4847  0018CE  6E26               	movwf	isdigit@c,c
  4848  0018D0  0E00               	movlw	0
  4849  0018D2  6E25               	movwf	_isdigit$1958,c
  4850  0018D4  0E3A               	movlw	58
  4851  0018D6  6026               	cpfslt	isdigit@c,c
  4852  0018D8  D005               	goto	l2035
  4853  0018DA  0E2F               	movlw	47
  4854  0018DC  6426               	cpfsgt	isdigit@c,c
  4855  0018DE  D002               	goto	l2035
  4856  0018E0  0E01               	movlw	1
  4857  0018E2  6E25               	movwf	_isdigit$1958,c
  4858  0018E4                     l2035:
  4859  0018E4  C025  F024         	movff	_isdigit$1958,??_isdigit
  4860  0018E8  3024               	rrcf	??_isdigit,w,c
  4861  0018EA  0012               	return	
  4862  0018EC                     __end_of_isdigit:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           postinc0	equ	0xFEE
  4872                           wreg	equ	0xFE8
  4873                           indf1	equ	0xFE7
  4874                           fsr1h	equ	0xFE2
  4875                           fsr1l	equ	0xFE1
  4876                           indf2	equ	0xFDF
  4877                           postinc2	equ	0xFDE
  4878                           postdec2	equ	0xFDD
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function ___wmul *****************
  4884 ;; Defined at:
  4885 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  multiplier      2   35[COMRAM] unsigned int 
  4888 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;  product         2   39[COMRAM] unsigned int 
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  2   35[COMRAM] unsigned int 
  4893 ;; Registers used:
  4894 ;;		wreg, status,2, status,0, prodl, prodh
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4900 ;;      Params:         4       0       0       0
  4901 ;;      Locals:         2       0       0       0
  4902 ;;      Temps:          0       0       0       0
  4903 ;;      Totals:         6       0       0       0
  4904 ;;Total ram usage:        6 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    3
  4907 ;; This function calls:
  4908 ;;		Nothing
  4909 ;; This function is called by:
  4910 ;;		_setMotorPWM
  4911 ;;		_sprintf
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text20
  4916  001886                     __ptext20:
  4917                           	opt stack 0
  4918  001886                     ___wmul:
  4919                           	opt stack 25
  4920                           
  4921                           ;incstack = 0
  4922  001886  5024               	movf	___wmul@multiplier,w,c
  4923  001888  0226               	mulwf	___wmul@multiplicand,c
  4924  00188A  CFF3 F028          	movff	prodl,___wmul@product
  4925  00188E  CFF4 F029          	movff	prodh,___wmul@product+1
  4926  001892  5024               	movf	___wmul@multiplier,w,c
  4927  001894  0227               	mulwf	___wmul@multiplicand+1,c
  4928  001896  50F3               	movf	prodl,w,c
  4929  001898  2629               	addwf	___wmul@product+1,f,c
  4930  00189A  5025               	movf	___wmul@multiplier+1,w,c
  4931  00189C  0226               	mulwf	___wmul@multiplicand,c
  4932  00189E  50F3               	movf	prodl,w,c
  4933  0018A0  2629               	addwf	___wmul@product+1,f,c
  4934  0018A2  C028  F024         	movff	___wmul@product,?___wmul
  4935  0018A6  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4936  0018AA  0012               	return	
  4937  0018AC                     __end_of___wmul:
  4938                           	opt stack 0
  4939                           tblptru	equ	0xFF8
  4940                           tblptrh	equ	0xFF7
  4941                           tblptrl	equ	0xFF6
  4942                           tablat	equ	0xFF5
  4943                           prodh	equ	0xFF4
  4944                           prodl	equ	0xFF3
  4945                           intcon	equ	0xFF2
  4946                           postinc0	equ	0xFEE
  4947                           wreg	equ	0xFE8
  4948                           indf1	equ	0xFE7
  4949                           fsr1h	equ	0xFE2
  4950                           fsr1l	equ	0xFE1
  4951                           indf2	equ	0xFDF
  4952                           postinc2	equ	0xFDE
  4953                           postdec2	equ	0xFDD
  4954                           fsr2h	equ	0xFDA
  4955                           fsr2l	equ	0xFD9
  4956                           status	equ	0xFD8
  4957                           
  4958 ;; *************** function ___lwmod *****************
  4959 ;; Defined at:
  4960 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  dividend        2   42[COMRAM] unsigned int 
  4963 ;;  divisor         2   44[COMRAM] unsigned int 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  counter         1   46[COMRAM] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  2   42[COMRAM] unsigned int 
  4968 ;; Registers used:
  4969 ;;		wreg, status,2, status,0
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4975 ;;      Params:         4       0       0       0
  4976 ;;      Locals:         1       0       0       0
  4977 ;;      Temps:          0       0       0       0
  4978 ;;      Totals:         5       0       0       0
  4979 ;;Total ram usage:        5 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    3
  4982 ;; This function calls:
  4983 ;;		Nothing
  4984 ;; This function is called by:
  4985 ;;		_sprintf
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           	psect	text21
  4990  001638                     __ptext21:
  4991                           	opt stack 0
  4992  001638                     ___lwmod:
  4993                           	opt stack 26
  4994                           
  4995                           ;incstack = 0
  4996  001638  502D               	movf	___lwmod@divisor,w,c
  4997  00163A  102E               	iorwf	___lwmod@divisor+1,w,c
  4998  00163C  B4D8               	btfsc	status,2,c
  4999  00163E  D018               	goto	l876
  5000  001640  0E01               	movlw	1
  5001  001642  6E2F               	movwf	___lwmod@counter,c
  5002  001644  D004               	goto	l2067
  5003  001646                     l2065:
  5004  001646  90D8               	bcf	status,0,c
  5005  001648  362D               	rlcf	___lwmod@divisor,f,c
  5006  00164A  362E               	rlcf	___lwmod@divisor+1,f,c
  5007  00164C  2A2F               	incf	___lwmod@counter,f,c
  5008  00164E                     l2067:
  5009  00164E  AE2E               	btfss	___lwmod@divisor+1,7,c
  5010  001650  D7FA               	goto	l2065
  5011  001652                     l2069:
  5012  001652  502D               	movf	___lwmod@divisor,w,c
  5013  001654  5C2B               	subwf	___lwmod@dividend,w,c
  5014  001656  502E               	movf	___lwmod@divisor+1,w,c
  5015  001658  582C               	subwfb	___lwmod@dividend+1,w,c
  5016  00165A  A0D8               	btfss	status,0,c
  5017  00165C  D004               	goto	l2073
  5018  00165E  502D               	movf	___lwmod@divisor,w,c
  5019  001660  5E2B               	subwf	___lwmod@dividend,f,c
  5020  001662  502E               	movf	___lwmod@divisor+1,w,c
  5021  001664  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5022  001666                     l2073:
  5023  001666  90D8               	bcf	status,0,c
  5024  001668  322E               	rrcf	___lwmod@divisor+1,f,c
  5025  00166A  322D               	rrcf	___lwmod@divisor,f,c
  5026  00166C  2E2F               	decfsz	___lwmod@counter,f,c
  5027  00166E  D7F1               	goto	l2069
  5028  001670                     l876:
  5029  001670  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5030  001674  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5031  001678  0012               	return		;funcret
  5032  00167A                     __end_of___lwmod:
  5033                           	opt stack 0
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           intcon	equ	0xFF2
  5041                           postinc0	equ	0xFEE
  5042                           wreg	equ	0xFE8
  5043                           indf1	equ	0xFE7
  5044                           fsr1h	equ	0xFE2
  5045                           fsr1l	equ	0xFE1
  5046                           indf2	equ	0xFDF
  5047                           postinc2	equ	0xFDE
  5048                           postdec2	equ	0xFDD
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function ___lwdiv *****************
  5054 ;; Defined at:
  5055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  dividend        2   35[COMRAM] unsigned int 
  5058 ;;  divisor         2   37[COMRAM] unsigned int 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  quotient        2   39[COMRAM] unsigned int 
  5061 ;;  counter         1   41[COMRAM] unsigned char 
  5062 ;; Return value:  Size  Location     Type
  5063 ;;                  2   35[COMRAM] unsigned int 
  5064 ;; Registers used:
  5065 ;;		wreg, status,2, status,0
  5066 ;; Tracked objects:
  5067 ;;		On entry : 0/0
  5068 ;;		On exit  : 0/0
  5069 ;;		Unchanged: 0/0
  5070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5071 ;;      Params:         4       0       0       0
  5072 ;;      Locals:         3       0       0       0
  5073 ;;      Temps:          0       0       0       0
  5074 ;;      Totals:         7       0       0       0
  5075 ;;Total ram usage:        7 bytes
  5076 ;; Hardware stack levels used:    1
  5077 ;; Hardware stack levels required when called:    3
  5078 ;; This function calls:
  5079 ;;		Nothing
  5080 ;; This function is called by:
  5081 ;;		_sprintf
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text22
  5086  0015E6                     __ptext22:
  5087                           	opt stack 0
  5088  0015E6                     ___lwdiv:
  5089                           	opt stack 26
  5090                           
  5091                           ;incstack = 0
  5092  0015E6  0E00               	movlw	0
  5093  0015E8  6E29               	movwf	___lwdiv@quotient+1,c
  5094  0015EA  0E00               	movlw	0
  5095  0015EC  6E28               	movwf	___lwdiv@quotient,c
  5096  0015EE  5026               	movf	___lwdiv@divisor,w,c
  5097  0015F0  1027               	iorwf	___lwdiv@divisor+1,w,c
  5098  0015F2  B4D8               	btfsc	status,2,c
  5099  0015F4  D01C               	goto	l866
  5100  0015F6  0E01               	movlw	1
  5101  0015F8  6E2A               	movwf	___lwdiv@counter,c
  5102  0015FA  D004               	goto	l2047
  5103  0015FC                     l2045:
  5104  0015FC  90D8               	bcf	status,0,c
  5105  0015FE  3626               	rlcf	___lwdiv@divisor,f,c
  5106  001600  3627               	rlcf	___lwdiv@divisor+1,f,c
  5107  001602  2A2A               	incf	___lwdiv@counter,f,c
  5108  001604                     l2047:
  5109  001604  AE27               	btfss	___lwdiv@divisor+1,7,c
  5110  001606  D7FA               	goto	l2045
  5111  001608                     l2049:
  5112  001608  90D8               	bcf	status,0,c
  5113  00160A  3628               	rlcf	___lwdiv@quotient,f,c
  5114  00160C  3629               	rlcf	___lwdiv@quotient+1,f,c
  5115  00160E  5026               	movf	___lwdiv@divisor,w,c
  5116  001610  5C24               	subwf	___lwdiv@dividend,w,c
  5117  001612  5027               	movf	___lwdiv@divisor+1,w,c
  5118  001614  5825               	subwfb	___lwdiv@dividend+1,w,c
  5119  001616  A0D8               	btfss	status,0,c
  5120  001618  D005               	goto	l2057
  5121  00161A  5026               	movf	___lwdiv@divisor,w,c
  5122  00161C  5E24               	subwf	___lwdiv@dividend,f,c
  5123  00161E  5027               	movf	___lwdiv@divisor+1,w,c
  5124  001620  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5125  001622  8028               	bsf	___lwdiv@quotient,0,c
  5126  001624                     l2057:
  5127  001624  90D8               	bcf	status,0,c
  5128  001626  3227               	rrcf	___lwdiv@divisor+1,f,c
  5129  001628  3226               	rrcf	___lwdiv@divisor,f,c
  5130  00162A  2E2A               	decfsz	___lwdiv@counter,f,c
  5131  00162C  D7ED               	goto	l2049
  5132  00162E                     l866:
  5133  00162E  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5134  001632  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5135  001636  0012               	return		;funcret
  5136  001638                     __end_of___lwdiv:
  5137                           	opt stack 0
  5138                           tblptru	equ	0xFF8
  5139                           tblptrh	equ	0xFF7
  5140                           tblptrl	equ	0xFF6
  5141                           tablat	equ	0xFF5
  5142                           prodh	equ	0xFF4
  5143                           prodl	equ	0xFF3
  5144                           intcon	equ	0xFF2
  5145                           postinc0	equ	0xFEE
  5146                           wreg	equ	0xFE8
  5147                           indf1	equ	0xFE7
  5148                           fsr1h	equ	0xFE2
  5149                           fsr1l	equ	0xFE1
  5150                           indf2	equ	0xFDF
  5151                           postinc2	equ	0xFDE
  5152                           postdec2	equ	0xFDD
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _grabRightIR *****************
  5158 ;; Defined at:
  5159 ;;		line 74 in file "IR_Reading.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5164 ;;  i               1   42[COMRAM] unsigned char 
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  2   35[COMRAM] unsigned int 
  5167 ;; Registers used:
  5168 ;;		wreg, status,2, status,0
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5174 ;;      Params:         2       0       0       0
  5175 ;;      Locals:         3       0       0       0
  5176 ;;      Temps:          3       0       0       0
  5177 ;;      Totals:         8       0       0       0
  5178 ;;Total ram usage:        8 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    3
  5181 ;; This function calls:
  5182 ;;		Nothing
  5183 ;; This function is called by:
  5184 ;;		_ScanIR
  5185 ;;		_ScanWithRange
  5186 ;;		_main
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text23
  5191  0014A4                     __ptext23:
  5192                           	opt stack 0
  5193  0014A4                     _grabRightIR:
  5194                           	opt stack 27
  5195                           
  5196                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5197                           
  5198                           ;incstack = 0
  5199  0014A4  0E00               	movlw	0
  5200  0014A6  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5201  0014A8  0E00               	movlw	0
  5202  0014AA  6E29               	movwf	grabRightIR@IR_signal,c
  5203                           
  5204                           ;IR_Reading.c: 77: unsigned char i=0;
  5205  0014AC  0E00               	movlw	0
  5206  0014AE  6E2B               	movwf	grabRightIR@i,c
  5207                           
  5208                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5209  0014B0  0E00               	movlw	0
  5210  0014B2  6E2B               	movwf	grabRightIR@i,c
  5211  0014B4                     l2109:
  5212  0014B4  0E03               	movlw	3
  5213  0014B6  642B               	cpfsgt	grabRightIR@i,c
  5214  0014B8  D001               	goto	l2113
  5215  0014BA  D01E               	goto	l2119
  5216  0014BC                     l2113:
  5217                           
  5218                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5219  0014BC  5069               	movf	3945,w,c	;volatile
  5220  0014BE  6E26               	movwf	??_grabRightIR& (0+255),c
  5221  0014C0  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5222  0014C2  0E07               	movlw	7
  5223  0014C4                     u1445:
  5224  0014C4  90D8               	bcf	status,0,c
  5225  0014C6  3626               	rlcf	??_grabRightIR,f,c
  5226  0014C8  3627               	rlcf	??_grabRightIR+1,f,c
  5227  0014CA  2EE8               	decfsz	wreg,f,c
  5228  0014CC  D7FB               	goto	u1445
  5229  0014CE  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5230  0014D2  90D8               	bcf	status,0,c
  5231  0014D4  3228               	rrcf	??_grabRightIR+2,f,c
  5232  0014D6  5028               	movf	??_grabRightIR+2,w,c
  5233  0014D8  1226               	iorwf	??_grabRightIR,f,c
  5234  0014DA  0E00               	movlw	0
  5235  0014DC  1227               	iorwf	??_grabRightIR+1,f,c
  5236  0014DE  5026               	movf	??_grabRightIR,w,c
  5237  0014E0  2629               	addwf	grabRightIR@IR_signal,f,c
  5238  0014E2  5027               	movf	??_grabRightIR+1,w,c
  5239  0014E4  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5240                           
  5241                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5242  0014E6  0E82               	movlw	130
  5243  0014E8  6E26               	movwf	??_grabRightIR& (0+255),c
  5244  0014EA  0EDE               	movlw	222
  5245  0014EC                     u2977:
  5246  0014EC  2EE8               	decfsz	wreg,f,c
  5247  0014EE  D7FE               	goto	u2977
  5248  0014F0  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5249  0014F2  D7FC               	goto	u2977
  5250  0014F4  2A2B               	incf	grabRightIR@i,f,c
  5251  0014F6  D7DE               	goto	l2109
  5252  0014F8                     l2119:
  5253                           
  5254                           ;IR_Reading.c: 83: }
  5255                           ;IR_Reading.c: 85: return IR_signal>>2;
  5256  0014F8  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5257  0014FC  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5258  001500  90D8               	bcf	status,0,c
  5259  001502  3227               	rrcf	??_grabRightIR+1,f,c
  5260  001504  3226               	rrcf	??_grabRightIR,f,c
  5261  001506  90D8               	bcf	status,0,c
  5262  001508  3227               	rrcf	??_grabRightIR+1,f,c
  5263  00150A  3226               	rrcf	??_grabRightIR,f,c
  5264  00150C  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5265  001510  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5266  001514  0012               	return	
  5267  001516                     __end_of_grabRightIR:
  5268                           	opt stack 0
  5269                           tblptru	equ	0xFF8
  5270                           tblptrh	equ	0xFF7
  5271                           tblptrl	equ	0xFF6
  5272                           tablat	equ	0xFF5
  5273                           prodh	equ	0xFF4
  5274                           prodl	equ	0xFF3
  5275                           intcon	equ	0xFF2
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           indf1	equ	0xFE7
  5279                           fsr1h	equ	0xFE2
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function _grabLeftIR *****************
  5289 ;; Defined at:
  5290 ;;		line 90 in file "IR_Reading.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;		None
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5295 ;;  i               1   42[COMRAM] unsigned char 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  2   35[COMRAM] unsigned int 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5305 ;;      Params:         2       0       0       0
  5306 ;;      Locals:         3       0       0       0
  5307 ;;      Temps:          3       0       0       0
  5308 ;;      Totals:         8       0       0       0
  5309 ;;Total ram usage:        8 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    3
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_ScanIR
  5316 ;;		_ScanWithRange
  5317 ;;		_main
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text24
  5322  001516                     __ptext24:
  5323                           	opt stack 0
  5324  001516                     _grabLeftIR:
  5325                           	opt stack 27
  5326                           
  5327                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5328                           
  5329                           ;incstack = 0
  5330  001516  0E00               	movlw	0
  5331  001518  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5332  00151A  0E00               	movlw	0
  5333  00151C  6E29               	movwf	grabLeftIR@IR_signal,c
  5334                           
  5335                           ;IR_Reading.c: 93: unsigned char i=0;
  5336  00151E  0E00               	movlw	0
  5337  001520  6E2B               	movwf	grabLeftIR@i,c
  5338                           
  5339                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5340  001522  0E00               	movlw	0
  5341  001524  6E2B               	movwf	grabLeftIR@i,c
  5342  001526                     l2125:
  5343  001526  0E03               	movlw	3
  5344  001528  642B               	cpfsgt	grabLeftIR@i,c
  5345  00152A  D001               	goto	l2129
  5346  00152C  D01E               	goto	l2135
  5347  00152E                     l2129:
  5348                           
  5349                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5350  00152E  5067               	movf	3943,w,c	;volatile
  5351  001530  6E26               	movwf	??_grabLeftIR& (0+255),c
  5352  001532  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5353  001534  0E07               	movlw	7
  5354  001536                     u1475:
  5355  001536  90D8               	bcf	status,0,c
  5356  001538  3626               	rlcf	??_grabLeftIR,f,c
  5357  00153A  3627               	rlcf	??_grabLeftIR+1,f,c
  5358  00153C  2EE8               	decfsz	wreg,f,c
  5359  00153E  D7FB               	goto	u1475
  5360  001540  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5361  001544  90D8               	bcf	status,0,c
  5362  001546  3228               	rrcf	??_grabLeftIR+2,f,c
  5363  001548  5028               	movf	??_grabLeftIR+2,w,c
  5364  00154A  1226               	iorwf	??_grabLeftIR,f,c
  5365  00154C  0E00               	movlw	0
  5366  00154E  1227               	iorwf	??_grabLeftIR+1,f,c
  5367  001550  5026               	movf	??_grabLeftIR,w,c
  5368  001552  2629               	addwf	grabLeftIR@IR_signal,f,c
  5369  001554  5027               	movf	??_grabLeftIR+1,w,c
  5370  001556  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5371                           
  5372                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5373  001558  0E82               	movlw	130
  5374  00155A  6E26               	movwf	??_grabLeftIR& (0+255),c
  5375  00155C  0EDE               	movlw	222
  5376  00155E                     u2987:
  5377  00155E  2EE8               	decfsz	wreg,f,c
  5378  001560  D7FE               	goto	u2987
  5379  001562  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5380  001564  D7FC               	goto	u2987
  5381  001566  2A2B               	incf	grabLeftIR@i,f,c
  5382  001568  D7DE               	goto	l2125
  5383  00156A                     l2135:
  5384                           
  5385                           ;IR_Reading.c: 99: }
  5386                           ;IR_Reading.c: 101: return IR_signal>>2;
  5387  00156A  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5388  00156E  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5389  001572  90D8               	bcf	status,0,c
  5390  001574  3227               	rrcf	??_grabLeftIR+1,f,c
  5391  001576  3226               	rrcf	??_grabLeftIR,f,c
  5392  001578  90D8               	bcf	status,0,c
  5393  00157A  3227               	rrcf	??_grabLeftIR+1,f,c
  5394  00157C  3226               	rrcf	??_grabLeftIR,f,c
  5395  00157E  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5396  001582  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5397  001586  0012               	return	
  5398  001588                     __end_of_grabLeftIR:
  5399                           	opt stack 0
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodh	equ	0xFF4
  5405                           prodl	equ	0xFF3
  5406                           intcon	equ	0xFF2
  5407                           postinc0	equ	0xFEE
  5408                           wreg	equ	0xFE8
  5409                           indf1	equ	0xFE7
  5410                           fsr1h	equ	0xFE2
  5411                           fsr1l	equ	0xFE1
  5412                           indf2	equ	0xFDF
  5413                           postinc2	equ	0xFDE
  5414                           postdec2	equ	0xFDD
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419 ;; *************** function _SetLine *****************
  5420 ;; Defined at:
  5421 ;;		line 74 in file "LCD.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  line            1    wreg     unsigned char 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  line            1   41[COMRAM] unsigned char 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;		None               void
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, cstack
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5435 ;;      Params:         0       0       0       0
  5436 ;;      Locals:         1       0       0       0
  5437 ;;      Temps:          0       0       0       0
  5438 ;;      Totals:         1       0       0       0
  5439 ;;Total ram usage:        1 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; Hardware stack levels required when called:    6
  5442 ;; This function calls:
  5443 ;;		_SendLCD
  5444 ;; This function is called by:
  5445 ;;		_ScanIR
  5446 ;;		_ScanWithRange
  5447 ;;		_main
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	text25
  5452  0017D6                     __ptext25:
  5453                           	opt stack 0
  5454  0017D6                     _SetLine:
  5455                           	opt stack 24
  5456                           
  5457                           ;incstack = 0
  5458                           ;SetLine@line stored from wreg
  5459  0017D6  6E2A               	movwf	SetLine@line,c
  5460                           
  5461                           ;LCD.c: 75: if (line==1) {
  5462  0017D8  042A               	decf	SetLine@line,w,c
  5463  0017DA  A4D8               	btfss	status,2,c
  5464  0017DC  D006               	goto	l2143
  5465                           
  5466                           ;LCD.c: 76: SendLCD(0x80,0);
  5467  0017DE  0E00               	movlw	0
  5468  0017E0  6E28               	movwf	SendLCD@type,c
  5469  0017E2  0E80               	movlw	128
  5470  0017E4  EC03  F00C         	call	_SendLCD
  5471                           
  5472                           ;LCD.c: 77: } else if (line==2) {
  5473  0017E8  D009               	goto	l2147
  5474  0017EA                     l2143:
  5475  0017EA  0E02               	movlw	2
  5476  0017EC  182A               	xorwf	SetLine@line,w,c
  5477  0017EE  A4D8               	btfss	status,2,c
  5478  0017F0  D005               	goto	l2147
  5479                           
  5480                           ;LCD.c: 78: SendLCD(0xC0,0);
  5481  0017F2  0E00               	movlw	0
  5482  0017F4  6E28               	movwf	SendLCD@type,c
  5483  0017F6  0EC0               	movlw	192
  5484  0017F8  EC03  F00C         	call	_SendLCD
  5485  0017FC                     l2147:
  5486                           
  5487                           ;LCD.c: 79: }
  5488                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5489  0017FC  0E21               	movlw	33
  5490  0017FE                     u2997:
  5491  0017FE  2EE8               	decfsz	wreg,f,c
  5492  001800  D7FE               	goto	u2997
  5493  001802  F000               	nop	
  5494  001804  0012               	return		;funcret
  5495  001806                     __end_of_SetLine:
  5496                           	opt stack 0
  5497                           tblptru	equ	0xFF8
  5498                           tblptrh	equ	0xFF7
  5499                           tblptrl	equ	0xFF6
  5500                           tablat	equ	0xFF5
  5501                           prodh	equ	0xFF4
  5502                           prodl	equ	0xFF3
  5503                           intcon	equ	0xFF2
  5504                           postinc0	equ	0xFEE
  5505                           wreg	equ	0xFE8
  5506                           indf1	equ	0xFE7
  5507                           fsr1h	equ	0xFE2
  5508                           fsr1l	equ	0xFE1
  5509                           indf2	equ	0xFDF
  5510                           postinc2	equ	0xFDE
  5511                           postdec2	equ	0xFDD
  5512                           fsr2h	equ	0xFDA
  5513                           fsr2l	equ	0xFD9
  5514                           status	equ	0xFD8
  5515                           
  5516 ;; *************** function _LCD_String *****************
  5517 ;; Defined at:
  5518 ;;		line 83 in file "LCD.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;  string          2   41[COMRAM] PTR unsigned char 
  5521 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5522 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5523 ;;		 -> STR_1(12), 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;		None               void
  5528 ;; Registers used:
  5529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5535 ;;      Params:         2       0       0       0
  5536 ;;      Locals:         0       0       0       0
  5537 ;;      Temps:          0       0       0       0
  5538 ;;      Totals:         2       0       0       0
  5539 ;;Total ram usage:        2 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    6
  5542 ;; This function calls:
  5543 ;;		_SendLCD
  5544 ;; This function is called by:
  5545 ;;		_ScanIR
  5546 ;;		_ScanWithRange
  5547 ;;		_main
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           	psect	text26
  5552  001588                     __ptext26:
  5553                           	opt stack 0
  5554  001588                     _LCD_String:
  5555                           	opt stack 23
  5556                           
  5557                           ;LCD.c: 85: while(*string != 0){
  5558                           
  5559                           ;incstack = 0
  5560  001588  D01A               	goto	l2157
  5561  00158A                     l2151:
  5562                           
  5563                           ;LCD.c: 88: SendLCD(*string++,1);
  5564  00158A  0E01               	movlw	1
  5565  00158C  6E28               	movwf	SendLCD@type,c
  5566  00158E  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5567  001592  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5568  001596  6AF8               	clrf	tblptru,c
  5569  001598  0E02               	movlw	(high __ramtop+-1)
  5570  00159A  64F7               	cpfsgt	tblptrh,c
  5571  00159C  D003               	bra	u1517
  5572  00159E  0008               	tblrd		*
  5573  0015A0  50F5               	movf	tablat,w,c
  5574  0015A2  D005               	bra	u1510
  5575  0015A4                     u1517:
  5576  0015A4  CFF6 FFE1          	movff	tblptrl,fsr1l
  5577  0015A8  CFF7 FFE2          	movff	tblptrh,fsr1h
  5578  0015AC  50E7               	movf	indf1,w,c
  5579  0015AE                     u1510:
  5580  0015AE  EC03  F00C         	call	_SendLCD
  5581  0015B2  4A2A               	infsnz	LCD_String@string,f,c
  5582  0015B4  2A2B               	incf	LCD_String@string+1,f,c
  5583                           
  5584                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5585  0015B6  0E21               	movlw	33
  5586  0015B8                     u3007:
  5587  0015B8  2EE8               	decfsz	wreg,f,c
  5588  0015BA  D7FE               	goto	u3007
  5589  0015BC  F000               	nop	
  5590  0015BE                     l2157:
  5591  0015BE  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5592  0015C2  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5593  0015C6  6AF8               	clrf	tblptru,c
  5594  0015C8  0E02               	movlw	(high __ramtop+-1)
  5595  0015CA  64F7               	cpfsgt	tblptrh,c
  5596  0015CC  D003               	bra	u1527
  5597  0015CE  0008               	tblrd		*
  5598  0015D0  50F5               	movf	tablat,w,c
  5599  0015D2  D005               	bra	u1520
  5600  0015D4                     u1527:
  5601  0015D4  CFF6 FFE1          	movff	tblptrl,fsr1l
  5602  0015D8  CFF7 FFE2          	movff	tblptrh,fsr1h
  5603  0015DC  50E7               	movf	indf1,w,c
  5604  0015DE                     u1520:
  5605  0015DE  0900               	iorlw	0
  5606  0015E0  B4D8               	btfsc	status,2,c
  5607  0015E2  0012               	return	
  5608  0015E4  D7D2               	goto	l2151
  5609  0015E6                     __end_of_LCD_String:
  5610                           	opt stack 0
  5611                           tblptru	equ	0xFF8
  5612                           tblptrh	equ	0xFF7
  5613                           tblptrl	equ	0xFF6
  5614                           tablat	equ	0xFF5
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           intcon	equ	0xFF2
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           indf1	equ	0xFE7
  5621                           fsr1h	equ	0xFE2
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           postdec2	equ	0xFDD
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function _SendLCD *****************
  5631 ;; Defined at:
  5632 ;;		line 27 in file "LCD.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;  Byte            1    wreg     unsigned char 
  5635 ;;  type            1   39[COMRAM] unsigned char 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  Byte            1   40[COMRAM] unsigned char 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;		None               void
  5640 ;; Registers used:
  5641 ;;		wreg, status,2, status,0, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5647 ;;      Params:         1       0       0       0
  5648 ;;      Locals:         1       0       0       0
  5649 ;;      Temps:          0       0       0       0
  5650 ;;      Totals:         2       0       0       0
  5651 ;;Total ram usage:        2 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    5
  5654 ;; This function calls:
  5655 ;;		_LCDout
  5656 ;; This function is called by:
  5657 ;;		_initLCD
  5658 ;;		_SetLine
  5659 ;;		_LCD_String
  5660 ;;		_ScanIR
  5661 ;;		_ScanWithRange
  5662 ;;		_main
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           	psect	text27
  5667  001806                     __ptext27:
  5668                           	opt stack 0
  5669  001806                     _SendLCD:
  5670                           	opt stack 24
  5671                           
  5672                           ;incstack = 0
  5673                           ;SendLCD@Byte stored from wreg
  5674  001806  6E29               	movwf	SendLCD@Byte,c
  5675                           
  5676                           ;LCD.c: 30: LATAbits.LATA6=type;
  5677  001808  B028               	btfsc	SendLCD@type,0,c
  5678  00180A  D002               	bra	u1305
  5679  00180C  9C89               	bcf	3977,6,c	;volatile
  5680  00180E  D001               	bra	u1306
  5681  001810                     u1305:
  5682  001810  8C89               	bsf	3977,6,c	;volatile
  5683  001812                     u1306:
  5684                           
  5685                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5686  001812  3829               	swapf	SendLCD@Byte,w,c
  5687  001814  0B0F               	andlw	15
  5688  001816  0B0F               	andlw	15
  5689  001818  EC26  F008         	call	_LCDout
  5690                           
  5691                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5692  00181C  0E06               	movlw	6
  5693  00181E                     u3017:
  5694  00181E  2EE8               	decfsz	wreg,f,c
  5695  001820  D7FE               	goto	u3017
  5696  001822  D000               	nop2		;nop
  5697                           
  5698                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5699  001824  5029               	movf	SendLCD@Byte,w,c
  5700  001826  0B0F               	andlw	15
  5701  001828  EC26  F008         	call	_LCDout
  5702                           
  5703                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5704  00182C  0E21               	movlw	33
  5705  00182E                     u3027:
  5706  00182E  2EE8               	decfsz	wreg,f,c
  5707  001830  D7FE               	goto	u3027
  5708  001832  F000               	nop	
  5709  001834  0012               	return		;funcret
  5710  001836                     __end_of_SendLCD:
  5711                           	opt stack 0
  5712                           tblptru	equ	0xFF8
  5713                           tblptrh	equ	0xFF7
  5714                           tblptrl	equ	0xFF6
  5715                           tablat	equ	0xFF5
  5716                           prodh	equ	0xFF4
  5717                           prodl	equ	0xFF3
  5718                           intcon	equ	0xFF2
  5719                           postinc0	equ	0xFEE
  5720                           wreg	equ	0xFE8
  5721                           indf1	equ	0xFE7
  5722                           fsr1h	equ	0xFE2
  5723                           fsr1l	equ	0xFE1
  5724                           indf2	equ	0xFDF
  5725                           postinc2	equ	0xFDE
  5726                           postdec2	equ	0xFDD
  5727                           fsr2h	equ	0xFDA
  5728                           fsr2l	equ	0xFD9
  5729                           status	equ	0xFD8
  5730                           
  5731 ;; *************** function _LCDout *****************
  5732 ;; Defined at:
  5733 ;;		line 14 in file "LCD.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;  number          1    wreg     unsigned char 
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;  number          1   38[COMRAM] unsigned char 
  5738 ;; Return value:  Size  Location     Type
  5739 ;;		None               void
  5740 ;; Registers used:
  5741 ;;		wreg, status,2, status,0, cstack
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5747 ;;      Params:         0       0       0       0
  5748 ;;      Locals:         1       0       0       0
  5749 ;;      Temps:          3       0       0       0
  5750 ;;      Totals:         4       0       0       0
  5751 ;;Total ram usage:        4 bytes
  5752 ;; Hardware stack levels used:    1
  5753 ;; Hardware stack levels required when called:    4
  5754 ;; This function calls:
  5755 ;;		_E_TOG
  5756 ;; This function is called by:
  5757 ;;		_SendLCD
  5758 ;;		_initLCD
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text28
  5763  00104C                     __ptext28:
  5764                           	opt stack 0
  5765  00104C                     _LCDout:
  5766                           	opt stack 24
  5767                           
  5768                           ;incstack = 0
  5769                           ;LCDout@number stored from wreg
  5770  00104C  6E27               	movwf	LCDout@number,c
  5771                           
  5772                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5773  00104E  5027               	movf	LCDout@number,w,c
  5774  001050  6E24               	movwf	??_LCDout& (0+255),c
  5775  001052  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5776  001054  0E07               	movlw	7
  5777  001056                     u1195:
  5778  001056  90D8               	bcf	status,0,c
  5779  001058  3624               	rlcf	??_LCDout,f,c
  5780  00105A  3625               	rlcf	??_LCDout+1,f,c
  5781  00105C  2EE8               	decfsz	wreg,f,c
  5782  00105E  D7FB               	goto	u1195
  5783  001060  0E07               	movlw	7
  5784  001062  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5785  001064                     u1205:
  5786  001064  3425               	rlcf	??_LCDout+1,w,c
  5787  001066  3225               	rrcf	??_LCDout+1,f,c
  5788  001068  3224               	rrcf	??_LCDout,f,c
  5789  00106A  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5790  00106C  D7FB               	goto	u1205
  5791  00106E  4624               	rlncf	??_LCDout,f,c
  5792  001070  508B               	movf	3979,w,c	;volatile
  5793  001072  1824               	xorwf	??_LCDout,w,c
  5794  001074  0BFD               	andlw	-3
  5795  001076  1824               	xorwf	??_LCDout,w,c
  5796  001078  6E8B               	movwf	3979,c	;volatile
  5797                           
  5798                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5799  00107A  5027               	movf	LCDout@number,w,c
  5800  00107C  6E24               	movwf	??_LCDout& (0+255),c
  5801  00107E  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5802  001080  0E06               	movlw	6
  5803  001082                     u1215:
  5804  001082  90D8               	bcf	status,0,c
  5805  001084  3624               	rlcf	??_LCDout,f,c
  5806  001086  3625               	rlcf	??_LCDout+1,f,c
  5807  001088  2EE8               	decfsz	wreg,f,c
  5808  00108A  D7FB               	goto	u1215
  5809  00108C  0E07               	movlw	7
  5810  00108E  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5811  001090                     u1225:
  5812  001090  3425               	rlcf	??_LCDout+1,w,c
  5813  001092  3225               	rrcf	??_LCDout+1,f,c
  5814  001094  3224               	rrcf	??_LCDout,f,c
  5815  001096  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5816  001098  D7FB               	goto	u1225
  5817  00109A  4624               	rlncf	??_LCDout,f,c
  5818  00109C  4624               	rlncf	??_LCDout,f,c
  5819  00109E  508B               	movf	3979,w,c	;volatile
  5820  0010A0  1824               	xorwf	??_LCDout,w,c
  5821  0010A2  0BFB               	andlw	-5
  5822  0010A4  1824               	xorwf	??_LCDout,w,c
  5823  0010A6  6E8B               	movwf	3979,c	;volatile
  5824                           
  5825                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5826  0010A8  5027               	movf	LCDout@number,w,c
  5827  0010AA  6E24               	movwf	??_LCDout& (0+255),c
  5828  0010AC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5829  0010AE  0E05               	movlw	5
  5830  0010B0                     u1235:
  5831  0010B0  90D8               	bcf	status,0,c
  5832  0010B2  3624               	rlcf	??_LCDout,f,c
  5833  0010B4  3625               	rlcf	??_LCDout+1,f,c
  5834  0010B6  2EE8               	decfsz	wreg,f,c
  5835  0010B8  D7FB               	goto	u1235
  5836  0010BA  0E07               	movlw	7
  5837  0010BC  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5838  0010BE                     u1245:
  5839  0010BE  3425               	rlcf	??_LCDout+1,w,c
  5840  0010C0  3225               	rrcf	??_LCDout+1,f,c
  5841  0010C2  3224               	rrcf	??_LCDout,f,c
  5842  0010C4  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5843  0010C6  D7FB               	goto	u1245
  5844  0010C8  508C               	movf	3980,w,c	;volatile
  5845  0010CA  1824               	xorwf	??_LCDout,w,c
  5846  0010CC  0BFE               	andlw	-2
  5847  0010CE  1824               	xorwf	??_LCDout,w,c
  5848  0010D0  6E8C               	movwf	3980,c	;volatile
  5849                           
  5850                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  5851  0010D2  5027               	movf	LCDout@number,w,c
  5852  0010D4  6E24               	movwf	??_LCDout& (0+255),c
  5853  0010D6  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5854  0010D8  3A24               	swapf	??_LCDout,f,c
  5855  0010DA  3A25               	swapf	??_LCDout+1,f,c
  5856  0010DC  0EF0               	movlw	240
  5857  0010DE  1625               	andwf	??_LCDout+1,f,c
  5858  0010E0  5024               	movf	??_LCDout,w,c
  5859  0010E2  0B0F               	andlw	15
  5860  0010E4  1225               	iorwf	??_LCDout+1,f,c
  5861  0010E6  0EF0               	movlw	240
  5862  0010E8  1624               	andwf	??_LCDout,f,c
  5863  0010EA  0E07               	movlw	7
  5864  0010EC  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5865  0010EE                     u1255:
  5866  0010EE  3425               	rlcf	??_LCDout+1,w,c
  5867  0010F0  3225               	rrcf	??_LCDout+1,f,c
  5868  0010F2  3224               	rrcf	??_LCDout,f,c
  5869  0010F4  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5870  0010F6  D7FB               	goto	u1255
  5871  0010F8  4624               	rlncf	??_LCDout,f,c
  5872  0010FA  508C               	movf	3980,w,c	;volatile
  5873  0010FC  1824               	xorwf	??_LCDout,w,c
  5874  0010FE  0BFD               	andlw	-3
  5875  001100  1824               	xorwf	??_LCDout,w,c
  5876  001102  6E8C               	movwf	3980,c	;volatile
  5877                           
  5878                           ;LCD.c: 21: E_TOG();
  5879  001104  EC8D  F00C         	call	_E_TOG	;wreg free
  5880                           
  5881                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5882  001108  0E03               	movlw	3
  5883  00110A                     u3037:
  5884  00110A  2EE8               	decfsz	wreg,f,c
  5885  00110C  D7FE               	goto	u3037
  5886  00110E  F000               	nop	
  5887  001110  0012               	return		;funcret
  5888  001112                     __end_of_LCDout:
  5889                           	opt stack 0
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           prodh	equ	0xFF4
  5895                           prodl	equ	0xFF3
  5896                           intcon	equ	0xFF2
  5897                           postinc0	equ	0xFEE
  5898                           wreg	equ	0xFE8
  5899                           indf1	equ	0xFE7
  5900                           fsr1h	equ	0xFE2
  5901                           fsr1l	equ	0xFE1
  5902                           indf2	equ	0xFDF
  5903                           postinc2	equ	0xFDE
  5904                           postdec2	equ	0xFDD
  5905                           fsr2h	equ	0xFDA
  5906                           fsr2l	equ	0xFD9
  5907                           status	equ	0xFD8
  5908                           
  5909 ;; *************** function _E_TOG *****************
  5910 ;; Defined at:
  5911 ;;		line 5 in file "LCD.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;		None
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;		None               void
  5918 ;; Registers used:
  5919 ;;		wreg
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5925 ;;      Params:         0       0       0       0
  5926 ;;      Locals:         0       0       0       0
  5927 ;;      Temps:          0       0       0       0
  5928 ;;      Totals:         0       0       0       0
  5929 ;;Total ram usage:        0 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    3
  5932 ;; This function calls:
  5933 ;;		Nothing
  5934 ;; This function is called by:
  5935 ;;		_LCDout
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	text29
  5940  00191A                     __ptext29:
  5941                           	opt stack 0
  5942  00191A                     _E_TOG:
  5943                           	opt stack 24
  5944                           
  5945                           ;LCD.c: 8: LATCbits.LATC0=1;
  5946                           
  5947                           ;incstack = 0
  5948  00191A  808B               	bsf	3979,0,c	;volatile
  5949                           
  5950                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5951  00191C  0E03               	movlw	3
  5952  00191E                     u3047:
  5953  00191E  2EE8               	decfsz	wreg,f,c
  5954  001920  D7FE               	goto	u3047
  5955  001922  F000               	nop	
  5956                           
  5957                           ;LCD.c: 10: LATCbits.LATC0=0;
  5958  001924  908B               	bcf	3979,0,c	;volatile
  5959  001926  0012               	return		;funcret
  5960  001928                     __end_of_E_TOG:
  5961                           	opt stack 0
  5962                           tblptru	equ	0xFF8
  5963                           tblptrh	equ	0xFF7
  5964                           tblptrl	equ	0xFF6
  5965                           tablat	equ	0xFF5
  5966                           prodh	equ	0xFF4
  5967                           prodl	equ	0xFF3
  5968                           intcon	equ	0xFF2
  5969                           postinc0	equ	0xFEE
  5970                           wreg	equ	0xFE8
  5971                           indf1	equ	0xFE7
  5972                           fsr1h	equ	0xFE2
  5973                           fsr1l	equ	0xFE1
  5974                           indf2	equ	0xFDF
  5975                           postinc2	equ	0xFDE
  5976                           postdec2	equ	0xFDD
  5977                           fsr2h	equ	0xFDA
  5978                           fsr2l	equ	0xFD9
  5979                           status	equ	0xFD8
  5980                           
  5981 ;; *************** function _InterruptHandlerLow *****************
  5982 ;; Defined at:
  5983 ;;		line 18 in file "main.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;		None               void
  5990 ;; Registers used:
  5991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5997 ;;      Params:         0       0       0       0
  5998 ;;      Locals:         0       0       0       0
  5999 ;;      Temps:         17       0       0       0
  6000 ;;      Totals:        17       0       0       0
  6001 ;;Total ram usage:       17 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    2
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		Interrupt level 1
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           	psect	intcodelo
  6012  000018                     __pintcodelo:
  6013                           	opt stack 0
  6014  000018                     _InterruptHandlerLow:
  6015                           	opt stack 23
  6016                           
  6017                           ;incstack = 0
  6018  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6019  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6020  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6021  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6022  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6023  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6024  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6025  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6026  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6027  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6028  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6029  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6030  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6031  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6032  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6033  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6034  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6035  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6036                           
  6037                           ;main.c: 20: if (PIR1bits.RCIF) {
  6038  00005E  AA9E               	btfss	3998,5,c	;volatile
  6039  000060  D016               	goto	i1l363
  6040                           
  6041                           ;main.c: 21: ReceivedString[i]=RCREG;
  6042  000062  503A               	movf	_i,w,c	;volatile
  6043  000064  0D01               	mullw	1
  6044  000066  0EC0               	movlw	low _ReceivedString
  6045  000068  24F3               	addwf	prodl,w,c
  6046  00006A  6ED9               	movwf	fsr2l,c
  6047  00006C  0E00               	movlw	high _ReceivedString
  6048  00006E  20F4               	addwfc	prodh,w,c
  6049  000070  6EDA               	movwf	fsr2h,c
  6050  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6051                           
  6052                           ;main.c: 22: RFID_Read=1;
  6053  000076  0E01               	movlw	1
  6054  000078  0101               	movlb	1	; () banked
  6055  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6056                           
  6057                           ; BSR set to: 1
  6058                           ;main.c: 23: if (i==15){
  6059  00007C  0E0F               	movlw	15
  6060  00007E  183A               	xorwf	_i,w,c	;volatile
  6061  000080  A4D8               	btfss	status,2,c
  6062  000082  D003               	goto	i1l2549
  6063                           
  6064                           ; BSR set to: 1
  6065                           ;main.c: 24: i=0;
  6066  000084  0E00               	movlw	0
  6067  000086  6E3A               	movwf	_i,c	;volatile
  6068                           
  6069                           ;main.c: 25: }else{
  6070  000088  D001               	goto	i1l2551
  6071  00008A                     i1l2549:
  6072                           
  6073                           ; BSR set to: 1
  6074                           ;main.c: 26: i++;
  6075  00008A  2A3A               	incf	_i,f,c	;volatile
  6076  00008C                     i1l2551:
  6077                           
  6078                           ; BSR set to: 1
  6079                           ;main.c: 27: }
  6080                           ;main.c: 28: PIR1bits.RCIF=0;
  6081  00008C  9A9E               	bcf	3998,5,c	;volatile
  6082  00008E                     i1l363:
  6083  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6084  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6085  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6086  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6087  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6088  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6089  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6090  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6091  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6092  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6093  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6094  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6095  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6096  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6097  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6098  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6099  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6100  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6101  0000D4  0010               	retfie	
  6102  0000D6                     __end_of_InterruptHandlerLow:
  6103                           	opt stack 0
  6104                           pclatu	equ	0xFFB
  6105                           pclath	equ	0xFFA
  6106                           tblptru	equ	0xFF8
  6107                           tblptrh	equ	0xFF7
  6108                           tblptrl	equ	0xFF6
  6109                           tablat	equ	0xFF5
  6110                           prodh	equ	0xFF4
  6111                           prodl	equ	0xFF3
  6112                           intcon	equ	0xFF2
  6113                           postinc0	equ	0xFEE
  6114                           fsr0h	equ	0xFEA
  6115                           fsr0l	equ	0xFE9
  6116                           wreg	equ	0xFE8
  6117                           indf1	equ	0xFE7
  6118                           fsr1h	equ	0xFE2
  6119                           fsr1l	equ	0xFE1
  6120                           bsr	equ	0xFE0
  6121                           indf2	equ	0xFDF
  6122                           postinc2	equ	0xFDE
  6123                           postdec2	equ	0xFDD
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _InterruptHandlerHigh *****************
  6129 ;; Defined at:
  6130 ;;		line 34 in file "main.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;		None
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;		None
  6135 ;; Return value:  Size  Location     Type
  6136 ;;		None               void
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6144 ;;      Params:         0       0       0       0
  6145 ;;      Locals:         0       0       0       0
  6146 ;;      Temps:         14       0       0       0
  6147 ;;      Totals:        14       0       0       0
  6148 ;;Total ram usage:       14 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    1
  6151 ;; This function calls:
  6152 ;;		i2_delay_tenth_s
  6153 ;; This function is called by:
  6154 ;;		Interrupt level 2
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           	psect	intcode
  6159  000008                     __pintcode:
  6160                           	opt stack 0
  6161  000008                     _InterruptHandlerHigh:
  6162                           	opt stack 23
  6163                           
  6164                           ;incstack = 0
  6165  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6166  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6167  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6168  000012  EF8B  F009         	goto	int_func
  6169                           pclatu	equ	0xFFB
  6170                           pclath	equ	0xFFA
  6171                           tblptru	equ	0xFF8
  6172                           tblptrh	equ	0xFF7
  6173                           tblptrl	equ	0xFF6
  6174                           tablat	equ	0xFF5
  6175                           prodh	equ	0xFF4
  6176                           prodl	equ	0xFF3
  6177                           intcon	equ	0xFF2
  6178                           postinc0	equ	0xFEE
  6179                           fsr0h	equ	0xFEA
  6180                           fsr0l	equ	0xFE9
  6181                           wreg	equ	0xFE8
  6182                           indf1	equ	0xFE7
  6183                           fsr1h	equ	0xFE2
  6184                           fsr1l	equ	0xFE1
  6185                           bsr	equ	0xFE0
  6186                           indf2	equ	0xFDF
  6187                           postinc2	equ	0xFDE
  6188                           postdec2	equ	0xFDD
  6189                           fsr2h	equ	0xFDA
  6190                           fsr2l	equ	0xFD9
  6191                           status	equ	0xFD8
  6192                           
  6193                           	psect	intcode_body
  6194  001316                     __pintcode_body:
  6195                           	opt stack 23
  6196  001316                     int_func:
  6197                           	opt stack 23
  6198  001316  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6199  00131A  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6200  00131E  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6201  001322  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6202  001326  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6203  00132A  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6204  00132E  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6205  001332  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6206  001336  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6207  00133A  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6208  00133E  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6209  001342  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6210                           
  6211                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6212  001346  A2F2               	btfss	intcon,1,c	;volatile
  6213  001348  D00D               	goto	i2l371
  6214                           
  6215                           ;main.c: 36: if (mode==-1) {
  6216  00134A  283B               	incf	_mode,w,c	;volatile
  6217  00134C  A4D8               	btfss	status,2,c
  6218  00134E  D003               	goto	i2l2559
  6219                           
  6220                           ;main.c: 38: mode=1;
  6221  001350  0E01               	movlw	1
  6222  001352  6E3B               	movwf	_mode,c	;volatile
  6223                           
  6224                           ;main.c: 39: } else if (mode==0) {
  6225  001354  D003               	goto	i2l2563
  6226  001356                     i2l2559:
  6227  001356  503B               	movf	_mode,w,c	;volatile
  6228  001358  A4D8               	btfss	status,2,c
  6229                           
  6230                           ;main.c: 43: mode=-1;
  6231                           
  6232                           ;main.c: 41: } else {
  6233  00135A  683B               	setf	_mode,c	;volatile
  6234  00135C                     i2l2563:
  6235                           
  6236                           ;main.c: 44: }
  6237                           ;main.c: 46: delay_tenth_s(2);
  6238  00135C  0E02               	movlw	2
  6239  00135E  ECB6  F00B         	call	i2_delay_tenth_s
  6240                           
  6241                           ;main.c: 47: INTCONbits.INT0IF=0;
  6242  001362  92F2               	bcf	intcon,1,c	;volatile
  6243  001364                     i2l371:
  6244  001364  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6245  001368  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6246  00136C  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6247  001370  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6248  001374  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6249  001378  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6250  00137C  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6251  001380  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6252  001384  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6253  001388  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6254  00138C  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6255  001390  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6256  001394  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6257  001398  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6258  00139C  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6259  00139E  0011               	retfie		f
  6260  0013A0                     __end_of_InterruptHandlerHigh:
  6261                           	opt stack 0
  6262                           pclatu	equ	0xFFB
  6263                           pclath	equ	0xFFA
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           intcon	equ	0xFF2
  6271                           postinc0	equ	0xFEE
  6272                           fsr0h	equ	0xFEA
  6273                           fsr0l	equ	0xFE9
  6274                           wreg	equ	0xFE8
  6275                           indf1	equ	0xFE7
  6276                           fsr1h	equ	0xFE2
  6277                           fsr1l	equ	0xFE1
  6278                           bsr	equ	0xFE0
  6279                           indf2	equ	0xFDF
  6280                           postinc2	equ	0xFDE
  6281                           postdec2	equ	0xFDD
  6282                           fsr2h	equ	0xFDA
  6283                           fsr2l	equ	0xFD9
  6284                           status	equ	0xFD8
  6285                           
  6286 ;; *************** function i2_delay_tenth_s *****************
  6287 ;; Defined at:
  6288 ;;		line 32 in file "Movement.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  tenth_second    1    wreg     unsigned char 
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6293 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;		None               void
  6296 ;; Registers used:
  6297 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6303 ;;      Params:         0       0       0       0
  6304 ;;      Locals:         3       0       0       0
  6305 ;;      Temps:          1       0       0       0
  6306 ;;      Totals:         4       0       0       0
  6307 ;;Total ram usage:        4 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_InterruptHandlerHigh
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           	psect	text32
  6317  00176C                     __ptext32:
  6318                           	opt stack 0
  6319  00176C                     i2_delay_tenth_s:
  6320                           	opt stack 23
  6321                           
  6322                           ;incstack = 0
  6323                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6324  00176C  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6325                           
  6326                           ;Movement.c: 33: unsigned int i=0;
  6327  00176E  0E00               	movlw	0
  6328  001770  6E04               	movwf	i2delay_tenth_s@i+1,c
  6329  001772  0E00               	movlw	0
  6330  001774  6E03               	movwf	i2delay_tenth_s@i,c
  6331                           
  6332                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6333  001776  0E00               	movlw	0
  6334  001778  6E04               	movwf	i2delay_tenth_s@i+1,c
  6335  00177A  0E01               	movlw	1
  6336  00177C  6E03               	movwf	i2delay_tenth_s@i,c
  6337  00177E  D009               	goto	i2l2521
  6338  001780                     i2l2517:
  6339                           
  6340                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6341  001780  0E82               	movlw	130
  6342  001782  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6343  001784  0EDE               	movlw	222
  6344  001786                     i2u305_47:
  6345  001786  2EE8               	decfsz	wreg,f,c
  6346  001788  D7FE               	goto	i2u305_47
  6347  00178A  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6348  00178C  D7FC               	goto	i2u305_47
  6349  00178E  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6350  001790  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6351  001792                     i2l2521:
  6352  001792  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6353  001794  0D02               	mullw	2
  6354  001796  5003               	movf	i2delay_tenth_s@i,w,c
  6355  001798  5CF3               	subwf	prodl,w,c
  6356  00179A  5004               	movf	i2delay_tenth_s@i+1,w,c
  6357  00179C  58F4               	subwfb	prodh,w,c
  6358  00179E  A0D8               	btfss	status,0,c
  6359  0017A0  0012               	return	
  6360  0017A2  D7EE               	goto	i2l2517
  6361  0017A4                     __end_ofi2_delay_tenth_s:
  6362                           	opt stack 0
  6363                           pclatu	equ	0xFFB
  6364                           pclath	equ	0xFFA
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           intcon	equ	0xFF2
  6372                           postinc0	equ	0xFEE
  6373                           fsr0h	equ	0xFEA
  6374                           fsr0l	equ	0xFE9
  6375                           wreg	equ	0xFE8
  6376                           indf1	equ	0xFE7
  6377                           fsr1h	equ	0xFE2
  6378                           fsr1l	equ	0xFE1
  6379                           bsr	equ	0xFE0
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           pclatu	equ	0xFFB
  6387                           pclath	equ	0xFFA
  6388                           tblptru	equ	0xFF8
  6389                           tblptrh	equ	0xFF7
  6390                           tblptrl	equ	0xFF6
  6391                           tablat	equ	0xFF5
  6392                           prodh	equ	0xFF4
  6393                           prodl	equ	0xFF3
  6394                           intcon	equ	0xFF2
  6395                           postinc0	equ	0xFEE
  6396                           fsr0h	equ	0xFEA
  6397                           fsr0l	equ	0xFE9
  6398                           wreg	equ	0xFE8
  6399                           indf1	equ	0xFE7
  6400                           fsr1h	equ	0xFE2
  6401                           fsr1l	equ	0xFE1
  6402                           bsr	equ	0xFE0
  6403                           indf2	equ	0xFDF
  6404                           postinc2	equ	0xFDE
  6405                           postdec2	equ	0xFDD
  6406                           fsr2h	equ	0xFDA
  6407                           fsr2l	equ	0xFD9
  6408                           status	equ	0xFD8
  6409                           
  6410                           	psect	rparam
  6411  0000                     pclatu	equ	0xFFB
  6412                           pclath	equ	0xFFA
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           postinc0	equ	0xFEE
  6421                           fsr0h	equ	0xFEA
  6422                           fsr0l	equ	0xFE9
  6423                           wreg	equ	0xFE8
  6424                           indf1	equ	0xFE7
  6425                           fsr1h	equ	0xFE2
  6426                           fsr1l	equ	0xFE1
  6427                           bsr	equ	0xFE0
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8
  6434                           
  6435                           	psect	temp
  6436  00003C                     btemp:
  6437                           	opt stack 0
  6438  00003C                     	ds	1
  6439  0000                     int$flags	set	btemp
  6440                           pclatu	equ	0xFFB
  6441                           pclath	equ	0xFFA
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           intcon	equ	0xFF2
  6449                           postinc0	equ	0xFEE
  6450                           fsr0h	equ	0xFEA
  6451                           fsr0l	equ	0xFE9
  6452                           wreg	equ	0xFE8
  6453                           indf1	equ	0xFE7
  6454                           fsr1h	equ	0xFE2
  6455                           fsr1l	equ	0xFE1
  6456                           bsr	equ	0xFE0
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     88     112
    BANK1           256    250     255
    BANK2           256     18      18

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               278   278      0   56128
                                             78 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2     18    18      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       65    57      8   21331
                                             13 BANK0     65    57      8
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11625
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     12      12       9        7.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BC       3        0.0%
DATA                 0      0     1BC      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 17:38:58 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0EF4  
                                  l65 147E                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l224 0D8C                                   l376 03F8  
                                 l866 162E                                   l876 1670  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0164  
                                l2113 14BC                                  l2035 18E4  
                                l2125 1526                                  l2109 14B4  
                                l2045 15FC                                  l3101 0DC6  
                                l2151 158A                                  l2143 17EA  
                                l2135 156A                                  l2119 14F8  
                                l2047 1604                                  l3103 0DCC  
                                l2129 152E                                  l2057 1624  
                                l2049 1608                                  l2073 1666  
                                l2065 1646                                  l3017 1034  
                                l2161 1748                                  l3201 04D6  
                                l2147 17FC                                  l2067 164E  
                                l2307 1874                                  l2157 15BE  
                                l2069 1652                                  l2165 175A  
                                l3037 0C1A                                  l3221 052A  
                                l2511 127E                                  l2503 122E  
                                l3081 0D34                                  l3073 0D0C  
                                l3065 0CD6                                  l3075 0D10  
                                l3307 080A                                  l3251 064A  
                                l3243 05EE                                  l3163 03FE  
                                l3069 0CF4                                  l3309 0810  
                                l3237 05A4                                  l3095 0DB0  
                                l3255 0660                                  l3247 063C  
                                l3319 0850                                  l3089 0DAC  
                                l3281 0722                                  l3265 06C8  
                                l2803 141A                                  l3275 0712  
                                l2813 0ECC                                  l2821 1442  
                                l3277 0718                                  l3269 06D2  
                                l3197 04A4                                  l3287 073E  
                                l2905 09B0                                  l2825 145E  
                                l2817 1426                                  l3289 0744  
                                l3297 07AC                                  l2931 0A50  
                                l2907 09B6                                  l2771 13B4  
                                l2843 12B4                                  l2835 1284  
                                l2499 1226                                  l2925 0A0E  
                                l2919 09EC                                  l2871 089C  
                                l2783 13DA                                  l2839 129C  
                                l2961 0AE8                                  l2929 0A46  
                                l2873 08AE                                  l2865 0880  
                                l2785 13E2                                  l2777 13C4  
                                l2849 12D4                                  l2963 0AEE  
                                l2955 0ACA                                  l2939 0A74  
                                l2947 0A9A                                  l2883 08E6  
                                l2971 0B50                                  l2795 1402  
                                l2787 13E6                                  l2949 0AA6  
                                l2973 0B6A                                  l2893 0958  
                                l2877 08B6                                  l2895 0980  
                                l2799 140C                                  l2969 0B44  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1205 1064                                  u1215 1082  
                                u1225 1090                                  u1305 1810  
                                u1306 1812                                  u1235 10B0  
                                u2204 0E8C                                  u1245 10BE  
                                u2205 0E88                                  u1510 15AE  
                                u2214 0EE8                                  _LATB 000F8A  
                                u1255 10EE                                  u3007 15B8  
                                u2215 0EE4                                  u1520 15DE  
                                u3017 181E                                  u2225 0F42  
                                u1195 1056                                  u3027 182E  
                                u3037 110A                                  u1517 15A4  
                                u1445 14C4                                  u3047 191E  
                                u1527 15D4                                  u1475 1536  
                                u2700 06A6                                  u2702 06A8  
                                u1755 1870                                  u1756 1872  
                                u1775 1882                                  u2807 113A  
                                u1776 1884                                  u2817 114A  
                                u2690 0692                                  u2907 0C66  
                                u2827 1158                                  u2692 0694  
                                u2917 0D6A                                  u2837 1166  
                                u2927 1478                                  u2847 1178  
                                u2937 174E                                  u2857 118A  
                                u2777 0454                                  u2947 0FA0  
                                u2867 11A0                                  u2787 046C  
                                u2957 0FB6                                  u2877 11B4  
                                u2797 1124                                  u2967 12CE  
                                u2887 11C6                                  u2977 14EC  
                                u2897 0C4E                                  u2987 155E  
                                u2997 17FE                            ScanIR@Move 0071  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 00B0                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1282                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 176C  
                     __end_of_SendLCD 1836                       __end_of_SetLine 1806  
                  ScanWithRange@F3892 00BC                           ScanIR@F3882 00B8  
                               ?_main 0001                       __end_of___awdiv 1424  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 1638                       __end_of___lwmod 167A  
                               i1l363 008E                                 i2l371 1364  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 191A                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 11CE                       __end_of_dpowers 030B  
                     __end_of_isdigit 18EC                                 main@i 00B7  
                               tablat 000FF5                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 0B78  
              __size_of_ScanWithRange 02A0                        __CFG_MCLRE$OFF 000000  
                     __initialization 1836                          __end_of_main 0872  
                        __end_of_stop 1316                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 009F                  __end_of_enableSensor 1886  
                 VerifySignal@hexByte 002D                                ??_main 00AE  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2551 008C  
                              i1l2549 008A                                i2l2521 1792  
                              i2l2517 1780                        __CFG_WDTEN$OFF 000000  
                              i2l2563 135C                                i2l2559 1356  
               __end_of_delay_tenth_s 176C                                _LCDout 104C  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 17A4  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 0F52                             ??_SetLine 002A  
                              ___wmul 1886                             ??___awdiv 002E  
                    __end_of_initRFID 1908                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 18AC  
                __size_of_grabRightIR 0072                                clear_0 1848  
                    ___awdiv@quotient 0030                                main@mL 0200  
                              main@mR 0209                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0B78  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060       ScanWithRange@TimeAboveThreshold 009F  
                    __end_of_turnLeft 1734                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 1852                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 1928  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 167A  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002C                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 1398           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00B8                            __pbssBANK1 01FA  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 15E6  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 1516  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 1860  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 17D6  
                             _SendLCD 1806                               __Hparam 0000  
                             _SetLine 17D6                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 13A0  
                     __size_of___wmul 0026                               ___lwdiv 15E6  
                             ___lwmod 1638                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1836  
                     ??_ScanWithRange 0075                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 1908                               __ptext2 18EC  
                             __ptext3 17A4                               __ptext4 1112  
                             __ptext5 18AC                               __ptext6 167A  
                             __ptext7 1860                               __ptext8 11CE  
                             __ptext9 0B78                             _T0CONbits 000FD5  
                             _initLCD 1112                     __end_of_initTimer 191A  
                             _dpowers 0301                               _isdigit 18CE  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0872  
                      __pintcode_body 1316                  end_of_initialization 1852  
                      ScanWithRange@i 00A0                        ScanWithRange@n 00A2  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 1316  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 16F6                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00A8                        __end_of_LCDout 1112  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 104C                        _fullSpeedAhead 1424  
                      _ReceivedString 00C0                        __end_of___wmul 18AC  
                         _BAUDCONbits 000FAA                        __end_of_initIR 18CE  
              __size_of_delay_tenth_s 0038                   start_initialization 1836  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 13A0  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 14A4  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 1516  
                        _initMotorPWM 17A4                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1958 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1734  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 1282                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B1  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 1908  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u305_47 1786                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3896 01FA  
                         _grabRightIR 14A4                 ScanWithRange@LeftFlag 00A6  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0E18  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 16B8                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 0077  
                 __end_of_setMotorPWM 0F52                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 16B8                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 1588                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 16B8  
                            __ptext11 16F6                              __ptext20 1886  
                            __ptext12 1424                              __ptext21 1638  
                            __ptext13 1734                              __ptext22 15E6  
                            __ptext14 0F52                              __ptext23 14A4  
                            __ptext15 1282                              __ptext32 176C  
                            __ptext24 1516                              __ptext16 0E18  
                            __ptext25 17D6                              __ptext17 13A0  
                            __ptext26 1588                              __ptext18 0872  
                            __ptext27 1806                              __ptext19 18CE  
                            __ptext28 104C                              __ptext29 191A  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 18EC             ScanWithRange@SensorResult 00AA  
                      turnRight@power 006B                         __size_of_main 0522  
                  main@DirectionFound 00B5                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00B4  
                            int$flags 003C                              main@Move 00B6  
                 _InterruptHandlerLow 0018                            _LCD_String 1588  
                            _turnLeft 16F6                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 0E18  
                        _VerifySignal 11CE                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A4                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
