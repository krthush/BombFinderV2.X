

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 15:55:08 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _dpowers:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  000A               	dw	10
    59  000305  0064               	dw	100
    60  000307  03E8               	dw	1000
    61  000309  2710               	dw	10000
    62  00030B                     __end_of_dpowers:
    63                           	opt stack 0
    64  0000                     _ANSEL0bits	set	4024
    65  0000                     _BAUDCONbits	set	4010
    66  0000                     _CAP1BUFH	set	3945
    67  0000                     _CAP1BUFL	set	3944
    68  0000                     _CAP1CON	set	3939
    69  0000                     _CAP2BUFH	set	3943
    70  0000                     _CAP2BUFL	set	3942
    71  0000                     _CAP2CON	set	3938
    72  0000                     _INTCONbits	set	4082
    73  0000                     _IPR1bits	set	3999
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATB	set	3978
    76  0000                     _LATCbits	set	3979
    77  0000                     _LATDbits	set	3980
    78  0000                     _LATEbits	set	3981
    79  0000                     _OSCCON	set	4051
    80  0000                     _OSCCONbits	set	4051
    81  0000                     _PIE1bits	set	3997
    82  0000                     _PIR1bits	set	3998
    83  0000                     _PTCON0	set	3967
    84  0000                     _PTCON1	set	3966
    85  0000                     _PTPERH	set	3962
    86  0000                     _PTPERL	set	3963
    87  0000                     _PWMCON0	set	3951
    88  0000                     _PWMCON1	set	3950
    89  0000                     _RCONbits	set	4048
    90  0000                     _RCREG	set	4014
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _SPBRG	set	4015
    93  0000                     _SPBRGH	set	4016
    94  0000                     _T5CON	set	4023
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISBbits	set	3987
    97  0000                     _TRISC	set	3988
    98  0000                     _TRISCbits	set	3988
    99  0000                     _TRISDbits	set	3989
   100  0000                     _TRISEbits	set	3990
   101  0000                     _TXREG	set	4013
   102  0000                     _TXSTAbits	set	4012
   103  0000                     _PDC0H	set	3960
   104  0000                     _PDC0L	set	3961
   105  0000                     _PDC1H	set	3958
   106  0000                     _PDC1L	set	3959
   107  00030B                     STR_6:
   108  00030B  20                 	db	32
   109  00030C  20                 	db	32
   110  00030D  20                 	db	32
   111  00030E  20                 	db	32
   112  00030F  20                 	db	32
   113  000310  20                 	db	32
   114  000311  25                 	db	37
   115  000312  30                 	db	48	;'0'
   116  000313  34                 	db	52	;'4'
   117  000314  64                 	db	100	;'d'
   118  000315  2C                 	db	44
   119  000316  20                 	db	32
   120  000317  25                 	db	37
   121  000318  30                 	db	48	;'0'
   122  000319  34                 	db	52	;'4'
   123  00031A  64                 	db	100	;'d'
   124  00031B  00                 	db	0
   125  00031C                     STR_5:
   126  00031C  20                 	db	32
   127  00031D  20                 	db	32
   128  00031E  20                 	db	32
   129  00031F  20                 	db	32
   130  000320  20                 	db	32
   131  000321  20                 	db	32
   132  000322  49                 	db	73	;'I'
   133  000323  6E                 	db	110	;'n'
   134  000324  65                 	db	101	;'e'
   135  000325  72                 	db	114	;'r'
   136  000326  74                 	db	116	;'t'
   137  000327  20                 	db	32
   138  000328  4D                 	db	77	;'M'
   139  000329  6F                 	db	111	;'o'
   140  00032A  64                 	db	100	;'d'
   141  00032B  65                 	db	101	;'e'
   142  00032C  00                 	db	0
   143  00032D                     STR_8:
   144  00032D  50                 	db	80	;'P'
   145  00032E  55                 	db	85	;'U'
   146  00032F  54                 	db	84	;'T'
   147  000330  20                 	db	32
   148  000331  4D                 	db	77	;'M'
   149  000332  45                 	db	69	;'E'
   150  000333  53                 	db	83	;'S'
   151  000334  53                 	db	83	;'S'
   152  000335  41                 	db	65	;'A'
   153  000336  47                 	db	71	;'G'
   154  000337  45                 	db	69	;'E'
   155  000338  00                 	db	0
   156  000339                     STR_1:
   157  000339  20                 	db	32
   158  00033A  20                 	db	32
   159  00033B  20                 	db	32
   160  00033C  20                 	db	32
   161  00033D  20                 	db	32
   162  00033E  53                 	db	83	;'S'
   163  00033F  63                 	db	99	;'c'
   164  000340  61                 	db	97	;'a'
   165  000341  6E                 	db	110	;'n'
   166  000342  49                 	db	73	;'I'
   167  000343  52                 	db	82	;'R'
   168  000344  00                 	db	0
   169  000345                     STR_9:
   170  000345  47                 	db	71	;'G'
   171  000346  6F                 	db	111	;'o'
   172  000347  69                 	db	105	;'i'
   173  000348  6E                 	db	110	;'n'
   174  000349  67                 	db	103	;'g'
   175  00034A  20                 	db	32
   176  00034B  48                 	db	72	;'H'
   177  00034C  6F                 	db	111	;'o'
   178  00034D  6D                 	db	109	;'m'
   179  00034E  65                 	db	101	;'e'
   180  00034F  00                 	db	0
   181  000350                     STR_7:
   182  000350  53                 	db	83	;'S'
   183  000351  65                 	db	101	;'e'
   184  000352  61                 	db	97	;'a'
   185  000353  72                 	db	114	;'r'
   186  000354  63                 	db	99	;'c'
   187  000355  68                 	db	104	;'h'
   188  000356  69                 	db	105	;'i'
   189  000357  6E                 	db	110	;'n'
   190  000358  67                 	db	103	;'g'
   191  000359  00                 	db	0
   192  0000                     
   193                           ; #config settings
   194  00035A  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	cinit
   197  001854                     __pcinit:
   198                           	opt stack 0
   199  001854                     start_initialization:
   200                           	opt stack 0
   201  001854                     __initialization:
   202                           	opt stack 0
   203                           
   204                           ; Clear objects allocated to BANK1 (5 bytes)
   205  001854  0101               	movlb	1
   206  001856  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   207  001858  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   208  00185A  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   209  00185C  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   210  00185E  6BFA               	clrf	__pbssBANK1& (0+255),b
   211                           
   212                           ; Clear objects allocated to BANK0 (24 bytes)
   213  001860  EE00  F0B8         	lfsr	0,__pbssBANK0
   214  001864  0E18               	movlw	24
   215  001866                     clear_0:
   216  001866  6AEE               	clrf	postinc0,c
   217  001868  06E8               	decf	wreg,f,c
   218  00186A  E1FD               	bnz	clear_0
   219                           
   220                           ; Clear objects allocated to COMRAM (2 bytes)
   221  00186C  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   222  00186E  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   223  001870                     end_of_initialization:
   224                           	opt stack 0
   225  001870                     __end_of__initialization:
   226                           	opt stack 0
   227  001870  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   228  001872  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   229  001874  0E00               	movlw	low (__Lmediumconst shr (0+16))
   230  001876  6EF8               	movwf	tblptru,c
   231  001878  0100               	movlb	0
   232  00187A  EFAE  F001         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	bssCOMRAM
   238  00003A                     __pbssCOMRAM:
   239                           	opt stack 0
   240  00003A                     _i:
   241                           	opt stack 0
   242  00003A                     	ds	1
   243  00003B                     _mode:
   244                           	opt stack 0
   245  00003B                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           
   250                           	psect	bssBANK0
   251  0000B8                     __pbssBANK0:
   252                           	opt stack 0
   253  0000B8                     ScanIR@F3882:
   254                           	opt stack 0
   255  0000B8                     	ds	4
   256  0000BC                     ScanWithRange@F3893:
   257                           	opt stack 0
   258  0000BC                     	ds	4
   259  0000C0                     _ReceivedString:
   260                           	opt stack 0
   261  0000C0                     	ds	16
   262                           tblptru	equ	0xFF8
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	bssBANK1
   267  0001FA                     __pbssBANK1:
   268                           	opt stack 0
   269  0001FA                     main@F3897:
   270                           	opt stack 0
   271  0001FA                     	ds	4
   272  0001FE                     _RFID_Read:
   273                           	opt stack 0
   274  0001FE                     	ds	1
   275                           tblptru	equ	0xFF8
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           
   279                           	psect	cstackBANK2
   280  000200                     __pcstackBANK2:
   281                           	opt stack 0
   282  000200                     main@mL:
   283                           	opt stack 0
   284                           
   285                           ; 9 bytes @ 0x0
   286  000200                     	ds	9
   287  000209                     main@mR:
   288                           	opt stack 0
   289                           
   290                           ; 9 bytes @ 0x9
   291  000209                     	ds	9
   292                           tblptru	equ	0xFF8
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	cstackBANK1
   297  000100                     __pcstackBANK1:
   298                           	opt stack 0
   299  000100                     main@MoveTime:
   300                           	opt stack 0
   301                           
   302                           ; 100 bytes @ 0x0
   303  000100                     	ds	100
   304  000164                     main@MoveType:
   305                           	opt stack 0
   306                           
   307                           ; 100 bytes @ 0x64
   308  000164                     	ds	100
   309  0001C8                     main@buf:
   310                           	opt stack 0
   311                           
   312                           ; 40 bytes @ 0xC8
   313  0001C8                     	ds	40
   314  0001F0                     main@Message:
   315                           	opt stack 0
   316                           
   317                           ; 10 bytes @ 0xF0
   318  0001F0                     	ds	10
   319                           tblptru	equ	0xFF8
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           
   323                           	psect	cstackBANK0
   324  000060                     __pcstackBANK0:
   325                           	opt stack 0
   326  000060                     ??_sprintf:
   327  000060                     setMotorPWM@PWMduty:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x0
   331  000060                     	ds	2
   332  000062                     stop@mL:
   333                           	opt stack 0
   334  000062                     fullSpeedAhead@mL:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x2
   338  000062                     	ds	2
   339  000064                     stop@mR:
   340                           	opt stack 0
   341  000064                     fullSpeedAhead@mR:
   342                           	opt stack 0
   343  000064                     sprintf@ap:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x4
   347  000064                     	ds	2
   348  000066                     fullSpeedAhead@power:
   349                           	opt stack 0
   350  000066                     sprintf@prec:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x6
   354  000066                     	ds	1
   355  000067                     turnLeft@mL:
   356                           	opt stack 0
   357  000067                     turnRight@mL:
   358                           	opt stack 0
   359  000067                     fullSpeedBack@mL:
   360                           	opt stack 0
   361  000067                     sprintf@val:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x7
   365  000067                     	ds	2
   366  000069                     sprintf@flag:
   367                           	opt stack 0
   368  000069                     turnLeft@mR:
   369                           	opt stack 0
   370  000069                     turnRight@mR:
   371                           	opt stack 0
   372  000069                     fullSpeedBack@mR:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x9
   376  000069                     	ds	1
   377  00006A                     sprintf@width:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0xA
   381  00006A                     	ds	1
   382  00006B                     turnLeft@power:
   383                           	opt stack 0
   384  00006B                     turnRight@power:
   385                           	opt stack 0
   386  00006B                     fullSpeedBack@power:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0xB
   390  00006B                     	ds	1
   391  00006C                     sprintf@c:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0xC
   395  00006C                     	ds	1
   396  00006D                     ScanIR@mL:
   397                           	opt stack 0
   398  00006D                     ScanWithRange@mL:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0xD
   402  00006D                     	ds	2
   403  00006F                     ScanIR@mR:
   404                           	opt stack 0
   405  00006F                     ScanWithRange@mR:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0xF
   409  00006F                     	ds	2
   410  000071                     ScanIR@TurnDirection:
   411                           	opt stack 0
   412  000071                     ScanWithRange@milliseconds:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x11
   416  000071                     	ds	1
   417  000072                     ScanIR@Move:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x12
   421  000072                     	ds	1
   422  000073                     ScanWithRange@TurnDirection:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x13
   426  000073                     	ds	1
   427  000074                     ScanIR@MoveTime:
   428                           	opt stack 0
   429  000074                     ScanWithRange@MoveTimeEntry:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x14
   433  000074                     	ds	2
   434  000076                     ??_ScanWithRange:
   435  000076                     ScanIR@MoveType:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x16
   439  000076                     	ds	2
   440  000078                     ScanIR@buf:
   441                           	opt stack 0
   442  000078                     ScanWithRange@buf:
   443                           	opt stack 0
   444                           
   445                           ; 40 bytes @ 0x18
   446  000078                     	ds	40
   447  0000A0                     ScanWithRange@TimeAboveThreshold:
   448                           	opt stack 0
   449  0000A0                     ScanIR@DirectionMoveThreshold:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x40
   453  0000A0                     	ds	1
   454  0000A1                     ScanWithRange@i:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x41
   458  0000A1                     	ds	1
   459  0000A2                     ScanIR@SensorResult:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x42
   463  0000A2                     	ds	1
   464  0000A3                     ScanWithRange@n:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x43
   468  0000A3                     	ds	2
   469  0000A5                     ScanWithRange@DirectionFoundThreshold:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x45
   473  0000A5                     	ds	2
   474  0000A7                     ScanWithRange@SensorResult:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x47
   478  0000A7                     	ds	4
   479  0000AB                     ScanWithRange@LeftFlag:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x4B
   483  0000AB                     	ds	1
   484  0000AC                     ScanWithRange@RightFlag:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x4C
   488  0000AC                     	ds	1
   489  0000AD                     ??_main:
   490                           
   491                           ; 0 bytes @ 0x4D
   492  0000AD                     	ds	2
   493  0000AF                     main@ScanAngle:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x4F
   497  0000AF                     	ds	1
   498  0000B0                     main@SensorResult:
   499                           	opt stack 0
   500                           
   501                           ; 4 bytes @ 0x50
   502  0000B0                     	ds	4
   503  0000B4                     main@TurnDirection:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x54
   507  0000B4                     	ds	1
   508  0000B5                     main@DirectionFound:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x55
   512  0000B5                     	ds	1
   513  0000B6                     main@Move:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x56
   517  0000B6                     	ds	1
   518  0000B7                     main@i:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x57
   522  0000B7                     	ds	1
   523                           tblptru	equ	0xFF8
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           
   527                           	psect	cstackCOMRAM
   528  000001                     __pcstackCOMRAM:
   529                           	opt stack 0
   530  000001                     ??i2_delay_tenth_s:
   531                           
   532                           ; 0 bytes @ 0x0
   533  000001                     	ds	1
   534  000002                     i2delay_tenth_s@tenth_seconds:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x1
   538  000002                     	ds	1
   539  000003                     i2delay_tenth_s@i:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x2
   543  000003                     	ds	2
   544  000005                     ??_InterruptHandlerHigh:
   545                           
   546                           ; 0 bytes @ 0x4
   547  000005                     	ds	14
   548  000013                     ??_InterruptHandlerLow:
   549                           
   550                           ; 0 bytes @ 0x12
   551  000013                     	ds	17
   552  000024                     ??_isdigit:
   553  000024                     ??_LCDout:
   554  000024                     ??_delay_tenth_s:
   555  000024                     ?_grabRightIR:
   556                           	opt stack 0
   557  000024                     ?_grabLeftIR:
   558                           	opt stack 0
   559  000024                     ?___wmul:
   560                           	opt stack 0
   561  000024                     ?___lwdiv:
   562                           	opt stack 0
   563  000024                     enableSensor@status:
   564                           	opt stack 0
   565  000024                     VerifySignal@Signal:
   566                           	opt stack 0
   567  000024                     ___wmul@multiplier:
   568                           	opt stack 0
   569  000024                     ___lwdiv@dividend:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x23
   573  000024                     	ds	1
   574  000025                     enableSensor@sensor:
   575                           	opt stack 0
   576  000025                     delay_tenth_s@tenth_seconds:
   577                           	opt stack 0
   578  000025                     _isdigit$1878:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x24
   582  000025                     	ds	1
   583  000026                     ??_grabRightIR:
   584  000026                     ??_grabLeftIR:
   585  000026                     ??_VerifySignal:
   586  000026                     isdigit@c:
   587                           	opt stack 0
   588  000026                     delay_tenth_s@i:
   589                           	opt stack 0
   590  000026                     ___wmul@multiplicand:
   591                           	opt stack 0
   592  000026                     ___lwdiv@divisor:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x25
   596  000026                     	ds	1
   597  000027                     LCDout@number:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x26
   601  000027                     	ds	1
   602  000028                     SendLCD@type:
   603                           	opt stack 0
   604  000028                     ___wmul@product:
   605                           	opt stack 0
   606  000028                     ___lwdiv@quotient:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x27
   610  000028                     	ds	1
   611  000029                     SendLCD@Byte:
   612                           	opt stack 0
   613  000029                     grabRightIR@IR_signal:
   614                           	opt stack 0
   615  000029                     grabLeftIR@IR_signal:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x28
   619  000029                     	ds	1
   620  00002A                     ??_initLCD:
   621  00002A                     ?___awdiv:
   622                           	opt stack 0
   623  00002A                     SetLine@line:
   624                           	opt stack 0
   625  00002A                     ___lwdiv@counter:
   626                           	opt stack 0
   627  00002A                     LCD_String@string:
   628                           	opt stack 0
   629  00002A                     ___awdiv@dividend:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x29
   633  00002A                     	ds	1
   634  00002B                     ?___lwmod:
   635                           	opt stack 0
   636  00002B                     grabRightIR@i:
   637                           	opt stack 0
   638  00002B                     grabLeftIR@i:
   639                           	opt stack 0
   640  00002B                     ___lwmod@dividend:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x2A
   644  00002B                     	ds	1
   645  00002C                     VerifySignal@checksum:
   646                           	opt stack 0
   647  00002C                     ___awdiv@divisor:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x2B
   651  00002C                     	ds	1
   652  00002D                     VerifySignal@hexByte:
   653                           	opt stack 0
   654  00002D                     ___lwmod@divisor:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x2C
   658  00002D                     	ds	1
   659  00002E                     ___awdiv@counter:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x2D
   663  00002E                     	ds	1
   664  00002F                     VerifySignal@i:
   665                           	opt stack 0
   666  00002F                     ___awdiv@sign:
   667                           	opt stack 0
   668  00002F                     ___lwmod@counter:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x2E
   672  00002F                     	ds	1
   673  000030                     ?_sprintf:
   674                           	opt stack 0
   675  000030                     sprintf@sp:
   676                           	opt stack 0
   677  000030                     ___awdiv@quotient:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x2F
   681  000030                     	ds	2
   682  000032                     setMotorPWM@m:
   683                           	opt stack 0
   684  000032                     sprintf@f:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x31
   688  000032                     	ds	2
   689  000034                     ??_setMotorPWM:
   690                           
   691                           ; 0 bytes @ 0x33
   692  000034                     	ds	5
   693  000039                     ??_ScanIR:
   694                           
   695                           ; 0 bytes @ 0x38
   696  000039                     	ds	1
   697  00003A                     tblptru	equ	0xFF8
   698                           postinc0	equ	0xFEE
   699                           wreg	equ	0xFE8
   700                           
   701                           ; 0 bytes @ 0x39
   702 ;;
   703 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   704 ;;
   705 ;; *************** function _main *****************
   706 ;; Defined at:
   707 ;;		line 51 in file "main.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;		None
   710 ;; Auto vars:     Size  Location     Type
   711 ;;  MoveType      100  100[BANK1 ] unsigned char [100]
   712 ;;  MoveTime      100    0[BANK1 ] unsigned char [100]
   713 ;;  buf            40  200[BANK1 ] unsigned char [40]
   714 ;;  Message        10  240[BANK1 ] unsigned char [10]
   715 ;;  mR              9    9[BANK2 ] struct DC_motor
   716 ;;  mL              9    0[BANK2 ] struct DC_motor
   717 ;;  SensorResult    4   80[BANK0 ] unsigned int [2]
   718 ;;  i               1   87[BANK0 ] unsigned char 
   719 ;;  Move            1   86[BANK0 ] unsigned char 
   720 ;;  DirectionFou    1   85[BANK0 ] char 
   721 ;;  TurnDirectio    1   84[BANK0 ] unsigned char 
   722 ;;  ScanAngle       1   79[BANK0 ] unsigned char 
   723 ;; Return value:  Size  Location     Type
   724 ;;		None               void
   725 ;; Registers used:
   726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   732 ;;      Params:         0       0       0       0
   733 ;;      Locals:         0       9     250      18
   734 ;;      Temps:          0       2       0       0
   735 ;;      Totals:         0      11     250      18
   736 ;;Total ram usage:      279 bytes
   737 ;; Hardware stack levels required when called:    8
   738 ;; This function calls:
   739 ;;		_LCD_String
   740 ;;		_ScanIR
   741 ;;		_ScanWithRange
   742 ;;		_SendLCD
   743 ;;		_SetLine
   744 ;;		_VerifySignal
   745 ;;		_delay_tenth_s
   746 ;;		_enableSensor
   747 ;;		_fullSpeedAhead
   748 ;;		_fullSpeedBack
   749 ;;		_grabLeftIR
   750 ;;		_grabRightIR
   751 ;;		_initIR
   752 ;;		_initLCD
   753 ;;		_initMotorPWM
   754 ;;		_initRFID
   755 ;;		_sprintf
   756 ;;		_stop
   757 ;; This function is called by:
   758 ;;		Startup code after reset
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text0
   763  00035C                     __ptext0:
   764                           	opt stack 0
   765  00035C                     _main:
   766                           	opt stack 23
   767                           
   768                           ;main.c: 54: unsigned char Message[10];
   769                           ;main.c: 55: unsigned char i=0;
   770                           
   771                           ;incstack = 0
   772  00035C  0E00               	movlw	0
   773  00035E  0100               	movlb	0	; () banked
   774  000360  6FB7               	movwf	main@i& (0+255),b
   775                           
   776                           ;main.c: 56: signed char DirectionFound=0;
   777  000362  0E00               	movlw	0
   778  000364  0100               	movlb	0	; () banked
   779  000366  6FB5               	movwf	main@DirectionFound& (0+255),b
   780                           
   781                           ;main.c: 57: unsigned char TurnDirection=0;
   782  000368  0E00               	movlw	0
   783  00036A  0100               	movlb	0	; () banked
   784  00036C  6FB4               	movwf	main@TurnDirection& (0+255),b
   785                           
   786                           ;main.c: 58: char MoveTime[100];
   787                           ;main.c: 59: char MoveType[100];
   788                           ;main.c: 60: char Move=0;
   789  00036E  0E00               	movlw	0
   790  000370  0100               	movlb	0	; () banked
   791  000372  6FB6               	movwf	main@Move& (0+255),b
   792                           
   793                           ; BSR set to: 0
   794                           ;main.c: 61: unsigned int SensorResult[2]={0,0};
   795  000374  C1FA  F0B0         	movff	main@F3897,main@SensorResult
   796  000378  C1FB  F0B1         	movff	main@F3897+1,main@SensorResult+1
   797  00037C  C1FC  F0B2         	movff	main@F3897+2,main@SensorResult+2
   798  000380  C1FD  F0B3         	movff	main@F3897+3,main@SensorResult+3
   799                           
   800                           ;main.c: 62: char buf[40];
   801                           ;main.c: 64: unsigned char ScanAngle=60;
   802  000384  0E3C               	movlw	60
   803  000386  0100               	movlb	0	; () banked
   804  000388  6FAF               	movwf	main@ScanAngle& (0+255),b
   805                           
   806                           ; BSR set to: 0
   807                           ;main.c: 67: INTCONbits.GIEH=1;
   808  00038A  8EF2               	bsf	intcon,7,c	;volatile
   809                           
   810                           ; BSR set to: 0
   811                           ;main.c: 68: INTCONbits.GIEL=1;
   812  00038C  8CF2               	bsf	intcon,6,c	;volatile
   813                           
   814                           ; BSR set to: 0
   815                           ;main.c: 69: INTCONbits.PEIE=1;
   816  00038E  8CF2               	bsf	intcon,6,c	;volatile
   817                           
   818                           ; BSR set to: 0
   819                           ;main.c: 70: RCONbits.IPEN=1;
   820  000390  8ED0               	bsf	4048,7,c	;volatile
   821                           
   822                           ; BSR set to: 0
   823                           ;main.c: 73: IPR1bits.RCIP=0;
   824  000392  9A9F               	bcf	3999,5,c	;volatile
   825                           
   826                           ; BSR set to: 0
   827                           ;main.c: 74: PIE1bits.RCIE=1;
   828  000394  8A9D               	bsf	3997,5,c	;volatile
   829                           
   830                           ; BSR set to: 0
   831                           ;main.c: 77: TRISCbits.RC3=1;
   832  000396  8694               	bsf	3988,3,c	;volatile
   833                           
   834                           ; BSR set to: 0
   835                           ;main.c: 78: INTCONbits.INT0IE=1;
   836  000398  88F2               	bsf	intcon,4,c	;volatile
   837                           
   838                           ; BSR set to: 0
   839                           ;main.c: 81: PIR1bits.RC1IF=0;
   840  00039A  9A9E               	bcf	3998,5,c	;volatile
   841                           
   842                           ; BSR set to: 0
   843                           ;main.c: 82: INTCONbits.INT0IF=0;
   844  00039C  92F2               	bcf	intcon,1,c	;volatile
   845                           
   846                           ;main.c: 85: struct DC_motor mL, mR;
   847                           ;main.c: 86: mL.power=0;
   848  00039E  0E00               	movlw	0
   849  0003A0  0102               	movlb	2	; () banked
   850  0003A2  6F00               	movwf	main@mL& (0+255),b
   851                           
   852                           ;main.c: 87: mL.direction=1;
   853  0003A4  0E01               	movlw	1
   854  0003A6  0102               	movlb	2	; () banked
   855  0003A8  6F01               	movwf	(main@mL+1)& (0+255),b
   856                           
   857                           ; BSR set to: 2
   858                           ;main.c: 88: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   859  0003AA  0E79               	movlw	121
   860  0003AC  0102               	movlb	2	; () banked
   861  0003AE  6F02               	movwf	(main@mL+2)& (0+255),b
   862  0003B0  0E0F               	movlw	15
   863  0003B2  0102               	movlb	2	; () banked
   864  0003B4  6F03               	movwf	(main@mL+3)& (0+255),b
   865                           
   866                           ; BSR set to: 2
   867                           ;main.c: 89: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   868  0003B6  0E78               	movlw	120
   869  0003B8  0102               	movlb	2	; () banked
   870  0003BA  6F04               	movwf	(main@mL+4)& (0+255),b
   871  0003BC  0E0F               	movlw	15
   872  0003BE  0102               	movlb	2	; () banked
   873  0003C0  6F05               	movwf	(main@mL+5)& (0+255),b
   874                           
   875                           ;main.c: 90: mL.dir_pin=0;
   876  0003C2  0E00               	movlw	0
   877  0003C4  0102               	movlb	2	; () banked
   878  0003C6  6F06               	movwf	(main@mL+6)& (0+255),b
   879                           
   880                           ;main.c: 91: mL.PWMperiod=199;
   881  0003C8  0E00               	movlw	0
   882  0003CA  0102               	movlb	2	; () banked
   883  0003CC  6F08               	movwf	(main@mL+8)& (0+255),b
   884  0003CE  0EC7               	movlw	199
   885  0003D0  6F07               	movwf	(main@mL+7)& (0+255),b
   886                           
   887                           ;main.c: 93: mR.power=0;
   888  0003D2  0E00               	movlw	0
   889  0003D4  0102               	movlb	2	; () banked
   890  0003D6  6F09               	movwf	main@mR& (0+255),b
   891                           
   892                           ;main.c: 94: mR.direction=1;
   893  0003D8  0E01               	movlw	1
   894  0003DA  0102               	movlb	2	; () banked
   895  0003DC  6F0A               	movwf	(main@mR+1)& (0+255),b
   896                           
   897                           ; BSR set to: 2
   898                           ;main.c: 95: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   899  0003DE  0E77               	movlw	119
   900  0003E0  0102               	movlb	2	; () banked
   901  0003E2  6F0B               	movwf	(main@mR+2)& (0+255),b
   902  0003E4  0E0F               	movlw	15
   903  0003E6  0102               	movlb	2	; () banked
   904  0003E8  6F0C               	movwf	(main@mR+3)& (0+255),b
   905                           
   906                           ; BSR set to: 2
   907                           ;main.c: 96: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   908  0003EA  0E76               	movlw	118
   909  0003EC  0102               	movlb	2	; () banked
   910  0003EE  6F0D               	movwf	(main@mR+4)& (0+255),b
   911  0003F0  0E0F               	movlw	15
   912  0003F2  0102               	movlb	2	; () banked
   913  0003F4  6F0E               	movwf	(main@mR+5)& (0+255),b
   914                           
   915                           ;main.c: 97: mR.dir_pin=2;
   916  0003F6  0E02               	movlw	2
   917  0003F8  0102               	movlb	2	; () banked
   918  0003FA  6F0F               	movwf	(main@mR+6)& (0+255),b
   919                           
   920                           ;main.c: 98: mR.PWMperiod=199;
   921  0003FC  0E00               	movlw	0
   922  0003FE  0102               	movlb	2	; () banked
   923  000400  6F11               	movwf	(main@mR+8)& (0+255),b
   924  000402  0EC7               	movlw	199
   925  000404  6F10               	movwf	(main@mR+7)& (0+255),b
   926                           
   927                           ;main.c: 100: OSCCON = 0x72;
   928  000406  0E72               	movlw	114
   929  000408  6ED3               	movwf	4051,c	;volatile
   930  00040A                     l366:
   931  00040A  B4D3               	btfsc	4051,2,c	;volatile
   932  00040C  D221               	goto	l3315
   933  00040E  D7FD               	goto	l366
   934  000410                     l3165:
   935                           
   936                           ;main.c: 113: stop(&mL, &mR);
   937  000410  0E00               	movlw	low main@mL
   938  000412  0100               	movlb	0	; () banked
   939  000414  6F62               	movwf	stop@mL& (0+255),b
   940  000416  0E02               	movlw	high main@mL
   941  000418  0100               	movlb	0	; () banked
   942  00041A  6F63               	movwf	(stop@mL+1)& (0+255),b
   943  00041C  0E09               	movlw	low main@mR
   944  00041E  0100               	movlb	0	; () banked
   945  000420  6F64               	movwf	stop@mR& (0+255),b
   946  000422  0E02               	movlw	high main@mR
   947  000424  0100               	movlb	0	; () banked
   948  000426  6F65               	movwf	(stop@mR+1)& (0+255),b
   949  000428  EC3C  F009         	call	_stop	;wreg free
   950                           
   951                           ;main.c: 114: RFID_Read=0;
   952  00042C  0E00               	movlw	0
   953  00042E  0101               	movlb	1	; () banked
   954  000430  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   955                           
   956                           ; BSR set to: 1
   957                           ;main.c: 117: SensorResult[0]=grabLeftIR();
   958  000432  EC86  F00A         	call	_grabLeftIR	;wreg free
   959  000436  C024  F0B0         	movff	?_grabLeftIR,main@SensorResult
   960  00043A  C025  F0B1         	movff	?_grabLeftIR+1,main@SensorResult+1
   961                           
   962                           ;main.c: 118: SensorResult[1]=grabRightIR();
   963  00043E  EC4D  F00A         	call	_grabRightIR	;wreg free
   964  000442  C024  F0B2         	movff	?_grabRightIR,main@SensorResult+2
   965  000446  C025  F0B3         	movff	?_grabRightIR+1,main@SensorResult+3
   966                           
   967                           ;main.c: 122: CAP1BUFH=0;
   968  00044A  0E00               	movlw	0
   969  00044C  6E69               	movwf	3945,c	;volatile
   970                           
   971                           ;main.c: 123: CAP1BUFL=0;
   972  00044E  0E00               	movlw	0
   973  000450  6E68               	movwf	3944,c	;volatile
   974                           
   975                           ;main.c: 124: CAP2BUFH=0;
   976  000452  0E00               	movlw	0
   977  000454  6E67               	movwf	3943,c	;volatile
   978                           
   979                           ;main.c: 125: CAP2BUFL=0;
   980  000456  0E00               	movlw	0
   981  000458  6E66               	movwf	3942,c	;volatile
   982                           
   983                           ;main.c: 128: SendLCD(0b00000001,0);
   984  00045A  0E00               	movlw	0
   985  00045C  6E28               	movwf	SendLCD@type,c
   986  00045E  0E01               	movlw	1
   987  000460  EC12  F00C         	call	_SendLCD
   988                           
   989                           ;main.c: 129: _delay((unsigned long)((50)*(8000000/4000000.0)));
   990  000464  0E21               	movlw	33
   991  000466                     u2807:
   992  000466  2EE8               	decfsz	wreg,f,c
   993  000468  D7FE               	goto	u2807
   994  00046A  F000               	nop	
   995                           
   996                           ;main.c: 130: SendLCD(0b00000010,0);
   997  00046C  0E00               	movlw	0
   998  00046E  6E28               	movwf	SendLCD@type,c
   999  000470  0E02               	movlw	2
  1000  000472  EC12  F00C         	call	_SendLCD
  1001                           
  1002                           ;main.c: 131: _delay((unsigned long)((2)*(8000000/4000.0)));
  1003  000476  0E06               	movlw	6
  1004  000478  0100               	movlb	0	; () banked
  1005  00047A  6FAD               	movwf	??_main& (0+255),b
  1006  00047C  0E30               	movlw	48
  1007  00047E                     u2817:
  1008  00047E  2EE8               	decfsz	wreg,f,c
  1009  000480  D7FE               	goto	u2817
  1010  000482  2FAD               	decfsz	??_main& (0+255),f,b
  1011  000484  D7FC               	goto	u2817
  1012  000486  D000               	nop2	
  1013                           
  1014                           ;main.c: 132: SetLine(1);
  1015  000488  0E01               	movlw	1
  1016  00048A  ECFA  F00B         	call	_SetLine
  1017                           
  1018                           ;main.c: 133: LCD_String("      Inert Mode");
  1019  00048E  0E1C               	movlw	low STR_5
  1020  000490  6E2A               	movwf	LCD_String@string,c
  1021  000492  0E03               	movlw	high STR_5
  1022  000494  6E2B               	movwf	LCD_String@string+1,c
  1023  000496  ECBF  F00A         	call	_LCD_String	;wreg free
  1024                           
  1025                           ;main.c: 134: SetLine(2);
  1026  00049A  0E02               	movlw	2
  1027  00049C  ECFA  F00B         	call	_SetLine
  1028                           
  1029                           ;main.c: 135: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1030  0004A0  0EC8               	movlw	low main@buf
  1031  0004A2  6E30               	movwf	sprintf@sp,c
  1032  0004A4  0E01               	movlw	high main@buf
  1033  0004A6  6E31               	movwf	sprintf@sp+1,c
  1034  0004A8  0E0B               	movlw	low STR_6
  1035  0004AA  6E32               	movwf	sprintf@f,c
  1036  0004AC  0E03               	movlw	high STR_6
  1037  0004AE  6E33               	movwf	sprintf@f+1,c
  1038  0004B0  C0B0  F034         	movff	main@SensorResult,?_sprintf+4
  1039  0004B4  C0B1  F035         	movff	main@SensorResult+1,?_sprintf+5
  1040  0004B8  C0B2  F036         	movff	main@SensorResult+2,?_sprintf+6
  1041  0004BC  C0B3  F037         	movff	main@SensorResult+3,?_sprintf+7
  1042  0004C0  EC39  F004         	call	_sprintf	;wreg free
  1043                           
  1044                           ;main.c: 136: LCD_String(buf);
  1045  0004C4  0EC8               	movlw	low main@buf
  1046  0004C6  6E2A               	movwf	LCD_String@string,c
  1047  0004C8  0E01               	movlw	high main@buf
  1048  0004CA  6E2B               	movwf	LCD_String@string+1,c
  1049  0004CC  ECBF  F00A         	call	_LCD_String	;wreg free
  1050                           
  1051                           ;main.c: 138: break;
  1052  0004D0  D1BF               	goto	l3315
  1053  0004D2                     l3199:
  1054                           
  1055                           ;main.c: 143: initMotorPWM();
  1056  0004D2  ECE1  F00B         	call	_initMotorPWM	;wreg free
  1057                           
  1058                           ;main.c: 144: initRFID();
  1059  0004D6  EC85  F00C         	call	_initRFID	;wreg free
  1060                           
  1061                           ;main.c: 145: initLCD();
  1062  0004DA  EC84  F008         	call	_initLCD	;wreg free
  1063                           
  1064                           ;main.c: 146: initIR();
  1065  0004DE  EC65  F00C         	call	_initIR	;wreg free
  1066                           
  1067                           ;main.c: 148: enableSensor(0, 1);
  1068  0004E2  0E01               	movlw	1
  1069  0004E4  6E24               	movwf	enableSensor@status,c
  1070  0004E6  0E00               	movlw	0
  1071  0004E8  EC3F  F00C         	call	_enableSensor
  1072                           
  1073                           ;main.c: 149: enableSensor(1, 1);
  1074  0004EC  0E01               	movlw	1
  1075  0004EE  6E24               	movwf	enableSensor@status,c
  1076  0004F0  0E01               	movlw	1
  1077  0004F2  EC3F  F00C         	call	_enableSensor
  1078                           
  1079                           ;main.c: 152: fullSpeedAhead(&mL, &mR, 100);
  1080  0004F6  0E00               	movlw	low main@mL
  1081  0004F8  0100               	movlb	0	; () banked
  1082  0004FA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1083  0004FC  0E02               	movlw	high main@mL
  1084  0004FE  0100               	movlb	0	; () banked
  1085  000500  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1086  000502  0E09               	movlw	low main@mR
  1087  000504  0100               	movlb	0	; () banked
  1088  000506  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1089  000508  0E02               	movlw	high main@mR
  1090  00050A  0100               	movlb	0	; () banked
  1091  00050C  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1092  00050E  0E64               	movlw	100
  1093  000510  0100               	movlb	0	; () banked
  1094  000512  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1095  000514  EC0D  F00A         	call	_fullSpeedAhead	;wreg free
  1096                           
  1097                           ;main.c: 153: delay_tenth_s(1);
  1098  000518  0E01               	movlw	1
  1099  00051A  ECA9  F00B         	call	_delay_tenth_s
  1100  00051E  D197               	goto	l3311
  1101  000520                     l3215:
  1102                           
  1103                           ;main.c: 165: SetLine(1);
  1104  000520  0E01               	movlw	1
  1105  000522  ECFA  F00B         	call	_SetLine
  1106                           
  1107                           ;main.c: 166: LCD_String("Searching");
  1108  000526  0E50               	movlw	low STR_7
  1109  000528  6E2A               	movwf	LCD_String@string,c
  1110  00052A  0E03               	movlw	high STR_7
  1111  00052C  6E2B               	movwf	LCD_String@string+1,c
  1112  00052E  ECBF  F00A         	call	_LCD_String	;wreg free
  1113                           
  1114                           ;main.c: 168: if (DirectionFound==-1) {
  1115  000532  0100               	movlb	0	; () banked
  1116  000534  29B5               	incf	main@DirectionFound& (0+255),w,b
  1117  000536  A4D8               	btfss	status,2,c
  1118  000538  D030               	goto	l3231
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;main.c: 173: fullSpeedAhead(&mL, &mR, 100);
  1122  00053A  0E00               	movlw	low main@mL
  1123  00053C  0100               	movlb	0	; () banked
  1124  00053E  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1125  000540  0E02               	movlw	high main@mL
  1126  000542  0100               	movlb	0	; () banked
  1127  000544  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1128  000546  0E09               	movlw	low main@mR
  1129  000548  0100               	movlb	0	; () banked
  1130  00054A  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1131  00054C  0E02               	movlw	high main@mR
  1132  00054E  0100               	movlb	0	; () banked
  1133  000550  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1134  000552  0E64               	movlw	100
  1135  000554  0100               	movlb	0	; () banked
  1136  000556  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1137  000558  EC0D  F00A         	call	_fullSpeedAhead	;wreg free
  1138                           
  1139                           ;main.c: 174: delay_tenth_s(6);
  1140  00055C  0E06               	movlw	6
  1141  00055E  ECA9  F00B         	call	_delay_tenth_s
  1142                           
  1143                           ;main.c: 175: stop(&mL,&mR);
  1144  000562  0E00               	movlw	low main@mL
  1145  000564  0100               	movlb	0	; () banked
  1146  000566  6F62               	movwf	stop@mL& (0+255),b
  1147  000568  0E02               	movlw	high main@mL
  1148  00056A  0100               	movlb	0	; () banked
  1149  00056C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1150  00056E  0E09               	movlw	low main@mR
  1151  000570  0100               	movlb	0	; () banked
  1152  000572  6F64               	movwf	stop@mR& (0+255),b
  1153  000574  0E02               	movlw	high main@mR
  1154  000576  0100               	movlb	0	; () banked
  1155  000578  6F65               	movwf	(stop@mR+1)& (0+255),b
  1156  00057A  EC3C  F009         	call	_stop	;wreg free
  1157                           
  1158                           ;main.c: 176: DirectionFound=0;
  1159  00057E  0E00               	movlw	0
  1160  000580  0100               	movlb	0	; () banked
  1161  000582  6FB5               	movwf	main@DirectionFound& (0+255),b
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;main.c: 177: MoveType[Move]=0;
  1165  000584  0100               	movlb	0	; () banked
  1166  000586  51B6               	movf	main@Move& (0+255),w,b
  1167  000588  0D01               	mullw	1
  1168  00058A  0E64               	movlw	low main@MoveType
  1169  00058C  24F3               	addwf	prodl,w,c
  1170  00058E  6ED9               	movwf	fsr2l,c
  1171  000590  0E01               	movlw	high main@MoveType
  1172  000592  20F4               	addwfc	prodh,w,c
  1173  000594  6EDA               	movwf	fsr2h,c
  1174  000596  0E00               	movlw	0
  1175  000598  D136               	goto	L2
  1176  00059A                     l3231:
  1177                           
  1178                           ; BSR set to: 0
  1179  00059A  0100               	movlb	0	; () banked
  1180  00059C  51B5               	movf	main@DirectionFound& (0+255),w,b
  1181  00059E  0100               	movlb	0	; () banked
  1182  0005A0  A4D8               	btfss	status,2,c
  1183  0005A2  D022               	goto	l3237
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;main.c: 180: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, TurnDirection, &MoveTime
      +                          [Move]);
  1187  0005A4  0E00               	movlw	low main@mL
  1188  0005A6  0100               	movlb	0	; () banked
  1189  0005A8  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1190  0005AA  0E02               	movlw	high main@mL
  1191  0005AC  0100               	movlb	0	; () banked
  1192  0005AE  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1193  0005B0  0E09               	movlw	low main@mR
  1194  0005B2  0100               	movlb	0	; () banked
  1195  0005B4  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1196  0005B6  0E02               	movlw	high main@mR
  1197  0005B8  0100               	movlb	0	; () banked
  1198  0005BA  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1199  0005BC  C0AF  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1200  0005C0  0100               	movlb	0	; () banked
  1201  0005C2  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1202  0005C4  C0B4  F073         	movff	main@TurnDirection,ScanWithRange@TurnDirection
  1203  0005C8  0100               	movlb	0	; () banked
  1204  0005CA  51B6               	movf	main@Move& (0+255),w,b
  1205  0005CC  0D01               	mullw	1
  1206  0005CE  0E00               	movlw	low main@MoveTime
  1207  0005D0  24F3               	addwf	prodl,w,c
  1208  0005D2  0100               	movlb	0	; () banked
  1209  0005D4  6F74               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1210  0005D6  0E01               	movlw	high main@MoveTime
  1211  0005D8  20F4               	addwfc	prodh,w,c
  1212  0005DA  0100               	movlb	0	; () banked
  1213  0005DC  6F75               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1214  0005DE  ECBC  F005         	call	_ScanWithRange	;wreg free
  1215  0005E2  0100               	movlb	0	; () banked
  1216  0005E4  6FB5               	movwf	main@DirectionFound& (0+255),b
  1217  0005E6  D030               	goto	l3245
  1218  0005E8                     l3237:
  1219                           
  1220                           ; BSR set to: 0
  1221  0005E8  0100               	movlb	0	; () banked
  1222  0005EA  05B5               	decf	main@DirectionFound& (0+255),w,b
  1223  0005EC  A4D8               	btfss	status,2,c
  1224  0005EE  D025               	goto	l3241
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;main.c: 184: DirectionFound=ScanIR(&mL, &mR, TurnDirection, &Move, &MoveTime, &MoveType
      +                          );
  1228  0005F0  0E00               	movlw	low main@mL
  1229  0005F2  0100               	movlb	0	; () banked
  1230  0005F4  6F6D               	movwf	ScanIR@mL& (0+255),b
  1231  0005F6  0E02               	movlw	high main@mL
  1232  0005F8  0100               	movlb	0	; () banked
  1233  0005FA  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1234  0005FC  0E09               	movlw	low main@mR
  1235  0005FE  0100               	movlb	0	; () banked
  1236  000600  6F6F               	movwf	ScanIR@mR& (0+255),b
  1237  000602  0E02               	movlw	high main@mR
  1238  000604  0100               	movlb	0	; () banked
  1239  000606  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1240  000608  C0B4  F071         	movff	main@TurnDirection,ScanIR@TurnDirection
  1241  00060C  0EB6               	movlw	low main@Move
  1242  00060E  0100               	movlb	0	; () banked
  1243  000610  6F72               	movwf	ScanIR@Move& (0+255),b
  1244  000612  0E00               	movlw	high main@Move
  1245  000614  0100               	movlb	0	; () banked
  1246  000616  6F73               	movwf	(ScanIR@Move+1)& (0+255),b
  1247  000618  0E00               	movlw	low main@MoveTime
  1248  00061A  0100               	movlb	0	; () banked
  1249  00061C  6F74               	movwf	ScanIR@MoveTime& (0+255),b
  1250  00061E  0E01               	movlw	high main@MoveTime
  1251  000620  0100               	movlb	0	; () banked
  1252  000622  6F75               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1253  000624  0E64               	movlw	low main@MoveType
  1254  000626  0100               	movlb	0	; () banked
  1255  000628  6F76               	movwf	ScanIR@MoveType& (0+255),b
  1256  00062A  0E01               	movlw	high main@MoveType
  1257  00062C  0100               	movlb	0	; () banked
  1258  00062E  6F77               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1259  000630  ECA4  F007         	call	_ScanIR	;wreg free
  1260  000634  0100               	movlb	0	; () banked
  1261  000636  6FB5               	movwf	main@DirectionFound& (0+255),b
  1262                           
  1263                           ;main.c: 185: } else if (DirectionFound==2) {
  1264  000638  D0E7               	goto	l3301
  1265  00063A                     l3241:
  1266                           
  1267                           ; BSR set to: 0
  1268  00063A  0E02               	movlw	2
  1269  00063C  0100               	movlb	0	; () banked
  1270  00063E  19B5               	xorwf	main@DirectionFound& (0+255),w,b
  1271  000640  A4D8               	btfss	status,2,c
  1272  000642  D0E2               	goto	l3301
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;main.c: 187: mode=2;
  1276  000644  0E02               	movlw	2
  1277  000646  6E3B               	movwf	_mode,c	;volatile
  1278  000648                     l3245:
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;main.c: 188: MoveType[Move]=1;
  1282  000648  0100               	movlb	0	; () banked
  1283  00064A  51B6               	movf	main@Move& (0+255),w,b
  1284  00064C  0D01               	mullw	1
  1285  00064E  0E64               	movlw	low main@MoveType
  1286  000650  24F3               	addwf	prodl,w,c
  1287  000652  6ED9               	movwf	fsr2l,c
  1288  000654  0E01               	movlw	high main@MoveType
  1289  000656  20F4               	addwfc	prodh,w,c
  1290  000658  6EDA               	movwf	fsr2h,c
  1291  00065A  0E01               	movlw	1
  1292  00065C  D0D4               	goto	L2
  1293  00065E                     l3249:
  1294                           
  1295                           ;main.c: 200: if (RFID_Read) {
  1296  00065E  0101               	movlb	1	; () banked
  1297  000660  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1298  000662  B4D8               	btfsc	status,2,c
  1299  000664  D0A2               	goto	l3291
  1300                           
  1301                           ; BSR set to: 1
  1302                           ;main.c: 201: stop(&mL, &mR);
  1303  000666  0E00               	movlw	low main@mL
  1304  000668  0100               	movlb	0	; () banked
  1305  00066A  6F62               	movwf	stop@mL& (0+255),b
  1306  00066C  0E02               	movlw	high main@mL
  1307  00066E  0100               	movlb	0	; () banked
  1308  000670  6F63               	movwf	(stop@mL+1)& (0+255),b
  1309  000672  0E09               	movlw	low main@mR
  1310  000674  0100               	movlb	0	; () banked
  1311  000676  6F64               	movwf	stop@mR& (0+255),b
  1312  000678  0E02               	movlw	high main@mR
  1313  00067A  0100               	movlb	0	; () banked
  1314  00067C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1315  00067E  EC3C  F009         	call	_stop	;wreg free
  1316                           
  1317                           ;main.c: 202: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1318  000682  0E03               	movlw	3
  1319  000684  0100               	movlb	0	; () banked
  1320  000686  19CF               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1321  000688  A4D8               	btfss	status,2,c
  1322  00068A  D002               	goto	u2720
  1323  00068C  0E01               	movlw	1
  1324  00068E  D001               	goto	u2722
  1325  000690                     u2720:
  1326  000690  0E00               	movlw	0
  1327  000692                     u2722:
  1328  000692  0100               	movlb	0	; () banked
  1329  000694  6FAD               	movwf	??_main& (0+255),b
  1330  000696  0E02               	movlw	2
  1331  000698  0100               	movlb	0	; () banked
  1332  00069A  19C0               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1333  00069C  A4D8               	btfss	status,2,c
  1334  00069E  D002               	goto	u2730
  1335  0006A0  0E01               	movlw	1
  1336  0006A2  D001               	goto	u2732
  1337  0006A4                     u2730:
  1338  0006A4  0E00               	movlw	0
  1339  0006A6                     u2732:
  1340  0006A6  0100               	movlb	0	; () banked
  1341  0006A8  15AD               	andwf	??_main& (0+255),w,b
  1342  0006AA  A0E8               	btfss	wreg,0,c
  1343  0006AC  D0D1               	goto	l3315
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;main.c: 203: if (VerifySignal(ReceivedString)){
  1347  0006AE  0EC0               	movlw	low _ReceivedString
  1348  0006B0  6E24               	movwf	VerifySignal@Signal,c
  1349  0006B2  0E00               	movlw	high _ReceivedString
  1350  0006B4  6E25               	movwf	VerifySignal@Signal+1,c
  1351  0006B6  ECE2  F008         	call	_VerifySignal	;wreg free
  1352  0006BA  0900               	iorlw	0
  1353  0006BC  B4D8               	btfsc	status,2,c
  1354  0006BE  D041               	goto	l3283
  1355                           
  1356                           ;main.c: 205: for (i=0; i<10; i++){
  1357  0006C0  0E00               	movlw	0
  1358  0006C2  0100               	movlb	0	; () banked
  1359  0006C4  6FB7               	movwf	main@i& (0+255),b
  1360  0006C6                     l3259:
  1361                           
  1362                           ; BSR set to: 0
  1363  0006C6  0E09               	movlw	9
  1364  0006C8  0100               	movlb	0	; () banked
  1365  0006CA  65B7               	cpfsgt	main@i& (0+255),b
  1366  0006CC  D001               	goto	l3263
  1367  0006CE  D020               	goto	l3269
  1368  0006D0                     l3263:
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;main.c: 206: Message[i] = ReceivedString[i+1];
  1372  0006D0  0100               	movlb	0	; () banked
  1373  0006D2  51B7               	movf	main@i& (0+255),w,b
  1374  0006D4  0100               	movlb	0	; () banked
  1375  0006D6  6FAD               	movwf	??_main& (0+255),b
  1376  0006D8  6BAE               	clrf	(??_main+1)& (0+255),b
  1377  0006DA  0E01               	movlw	1
  1378  0006DC  0100               	movlb	0	; () banked
  1379  0006DE  27AD               	addwf	??_main& (0+255),f,b
  1380  0006E0  0E00               	movlw	0
  1381  0006E2  23AE               	addwfc	(??_main+1)& (0+255),f,b
  1382  0006E4  0EC0               	movlw	low _ReceivedString
  1383  0006E6  0100               	movlb	0	; () banked
  1384  0006E8  25AD               	addwf	??_main& (0+255),w,b
  1385  0006EA  6ED9               	movwf	fsr2l,c
  1386  0006EC  0E00               	movlw	high _ReceivedString
  1387  0006EE  0100               	movlb	0	; () banked
  1388  0006F0  21AE               	addwfc	(??_main+1)& (0+255),w,b
  1389  0006F2  6EDA               	movwf	fsr2h,c
  1390  0006F4  0100               	movlb	0	; () banked
  1391  0006F6  51B7               	movf	main@i& (0+255),w,b
  1392  0006F8  0D01               	mullw	1
  1393  0006FA  0EF0               	movlw	low main@Message
  1394  0006FC  24F3               	addwf	prodl,w,c
  1395  0006FE  6EE1               	movwf	fsr1l,c
  1396  000700  0E01               	movlw	high main@Message
  1397  000702  20F4               	addwfc	prodh,w,c
  1398  000704  6EE2               	movwf	fsr1h,c
  1399  000706  CFDF FFE7          	movff	indf2,indf1
  1400                           
  1401                           ; BSR set to: 0
  1402  00070A  0100               	movlb	0	; () banked
  1403  00070C  2BB7               	incf	main@i& (0+255),f,b
  1404  00070E  D7DB               	goto	l3259
  1405  000710                     l3269:
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;main.c: 207: }
  1409                           ;main.c: 210: for (i=0; i<16; i++) {
  1410  000710  0E00               	movlw	0
  1411  000712  0100               	movlb	0	; () banked
  1412  000714  6FB7               	movwf	main@i& (0+255),b
  1413  000716                     l3271:
  1414                           
  1415                           ; BSR set to: 0
  1416  000716  0E0F               	movlw	15
  1417  000718  0100               	movlb	0	; () banked
  1418  00071A  65B7               	cpfsgt	main@i& (0+255),b
  1419  00071C  D001               	goto	l3275
  1420  00071E  D00E               	goto	l3281
  1421  000720                     l3275:
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 211: ReceivedString[i]=0;
  1425  000720  0100               	movlb	0	; () banked
  1426  000722  51B7               	movf	main@i& (0+255),w,b
  1427  000724  0D01               	mullw	1
  1428  000726  0EC0               	movlw	low _ReceivedString
  1429  000728  24F3               	addwf	prodl,w,c
  1430  00072A  6ED9               	movwf	fsr2l,c
  1431  00072C  0E00               	movlw	high _ReceivedString
  1432  00072E  20F4               	addwfc	prodh,w,c
  1433  000730  6EDA               	movwf	fsr2h,c
  1434  000732  0E00               	movlw	0
  1435  000734  6EDF               	movwf	indf2,c
  1436                           
  1437                           ; BSR set to: 0
  1438  000736  0100               	movlb	0	; () banked
  1439  000738  2BB7               	incf	main@i& (0+255),f,b
  1440  00073A  D7ED               	goto	l3271
  1441  00073C                     l3281:
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;main.c: 212: }
  1445                           ;main.c: 213: mode=3;
  1446  00073C  0E03               	movlw	3
  1447  00073E  6E3B               	movwf	_mode,c	;volatile
  1448                           
  1449                           ;main.c: 215: } else {
  1450  000740  D087               	goto	l3315
  1451  000742                     l3283:
  1452                           
  1453                           ;main.c: 216: fullSpeedBack(&mL,&mR, 100);
  1454  000742  0E00               	movlw	low main@mL
  1455  000744  0100               	movlb	0	; () banked
  1456  000746  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1457  000748  0E02               	movlw	high main@mL
  1458  00074A  0100               	movlb	0	; () banked
  1459  00074C  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1460  00074E  0E09               	movlw	low main@mR
  1461  000750  0100               	movlb	0	; () banked
  1462  000752  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1463  000754  0E02               	movlw	high main@mR
  1464  000756  0100               	movlb	0	; () banked
  1465  000758  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1466  00075A  0E64               	movlw	100
  1467  00075C  0100               	movlb	0	; () banked
  1468  00075E  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1469  000760  EC8A  F00B         	call	_fullSpeedBack	;wreg free
  1470                           
  1471                           ;main.c: 217: delay_tenth_s(5);
  1472  000764  0E05               	movlw	5
  1473  000766  ECA9  F00B         	call	_delay_tenth_s
  1474                           
  1475                           ;main.c: 218: stop(&mL,&mR);
  1476  00076A  0E00               	movlw	low main@mL
  1477  00076C  0100               	movlb	0	; () banked
  1478  00076E  6F62               	movwf	stop@mL& (0+255),b
  1479  000770  0E02               	movlw	high main@mL
  1480  000772  0100               	movlb	0	; () banked
  1481  000774  6F63               	movwf	(stop@mL+1)& (0+255),b
  1482  000776  0E09               	movlw	low main@mR
  1483  000778  0100               	movlb	0	; () banked
  1484  00077A  6F64               	movwf	stop@mR& (0+255),b
  1485  00077C  0E02               	movlw	high main@mR
  1486  00077E  0100               	movlb	0	; () banked
  1487  000780  6F65               	movwf	(stop@mR+1)& (0+255),b
  1488  000782  EC3C  F009         	call	_stop	;wreg free
  1489                           
  1490                           ;main.c: 219: fullSpeedAhead(&mL,&mR, 100);
  1491  000786  0E00               	movlw	low main@mL
  1492  000788  0100               	movlb	0	; () banked
  1493  00078A  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1494  00078C  0E02               	movlw	high main@mL
  1495  00078E  0100               	movlb	0	; () banked
  1496  000790  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1497  000792  0E09               	movlw	low main@mR
  1498  000794  0100               	movlb	0	; () banked
  1499  000796  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1500  000798  0E02               	movlw	high main@mR
  1501  00079A  0100               	movlb	0	; () banked
  1502  00079C  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1503  00079E  0E64               	movlw	100
  1504  0007A0  0100               	movlb	0	; () banked
  1505  0007A2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1506  0007A4  EC0D  F00A         	call	_fullSpeedAhead	;wreg free
  1507                           
  1508                           ;main.c: 220: }
  1509                           ;main.c: 221: }
  1510                           ;main.c: 222: } else {
  1511  0007A8  D053               	goto	l3315
  1512  0007AA                     l3291:
  1513                           
  1514                           ;main.c: 223: DirectionFound=1;
  1515  0007AA  0E01               	movlw	1
  1516  0007AC  0100               	movlb	0	; () banked
  1517  0007AE  6FB5               	movwf	main@DirectionFound& (0+255),b
  1518                           
  1519                           ;main.c: 224: mode=1;
  1520  0007B0  0E01               	movlw	1
  1521  0007B2  6E3B               	movwf	_mode,c	;volatile
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;main.c: 226: fullSpeedAhead(&mL,&mR, 100);
  1525  0007B4  0E00               	movlw	low main@mL
  1526  0007B6  0100               	movlb	0	; () banked
  1527  0007B8  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1528  0007BA  0E02               	movlw	high main@mL
  1529  0007BC  0100               	movlb	0	; () banked
  1530  0007BE  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1531  0007C0  0E09               	movlw	low main@mR
  1532  0007C2  0100               	movlb	0	; () banked
  1533  0007C4  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1534  0007C6  0E02               	movlw	high main@mR
  1535  0007C8  0100               	movlb	0	; () banked
  1536  0007CA  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1537  0007CC  0E64               	movlw	100
  1538  0007CE  0100               	movlb	0	; () banked
  1539  0007D0  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1540  0007D2  EC0D  F00A         	call	_fullSpeedAhead	;wreg free
  1541                           
  1542                           ;main.c: 227: delay_tenth_s(5);
  1543  0007D6  0E05               	movlw	5
  1544  0007D8  ECA9  F00B         	call	_delay_tenth_s
  1545                           
  1546                           ;main.c: 228: MoveType[Move] = 0;
  1547  0007DC  0100               	movlb	0	; () banked
  1548  0007DE  51B6               	movf	main@Move& (0+255),w,b
  1549  0007E0  0D01               	mullw	1
  1550  0007E2  0E64               	movlw	low main@MoveType
  1551  0007E4  24F3               	addwf	prodl,w,c
  1552  0007E6  6ED9               	movwf	fsr2l,c
  1553  0007E8  0E01               	movlw	high main@MoveType
  1554  0007EA  20F4               	addwfc	prodh,w,c
  1555  0007EC  6EDA               	movwf	fsr2h,c
  1556  0007EE  0E00               	movlw	0
  1557  0007F0  6EDF               	movwf	indf2,c
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;main.c: 229: MoveTime[Move] = 5;
  1561  0007F2  0100               	movlb	0	; () banked
  1562  0007F4  51B6               	movf	main@Move& (0+255),w,b
  1563  0007F6  0D01               	mullw	1
  1564  0007F8  0E00               	movlw	low main@MoveTime
  1565  0007FA  24F3               	addwf	prodl,w,c
  1566  0007FC  6ED9               	movwf	fsr2l,c
  1567  0007FE  0E01               	movlw	high main@MoveTime
  1568  000800  20F4               	addwfc	prodh,w,c
  1569  000802  6EDA               	movwf	fsr2h,c
  1570  000804  0E05               	movlw	5
  1571  000806                     L2:
  1572  000806  6EDF               	movwf	indf2,c
  1573  000808                     l3301:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 230: Move++;
  1577  000808  0100               	movlb	0	; () banked
  1578  00080A  2BB6               	incf	main@Move& (0+255),f,b
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;main.c: 231: }
  1582                           ;main.c: 233: break;
  1583  00080C  D021               	goto	l3315
  1584  00080E                     l3303:
  1585                           
  1586                           ;main.c: 238: SetLine(1);
  1587  00080E  0E01               	movlw	1
  1588  000810  ECFA  F00B         	call	_SetLine
  1589                           
  1590                           ;main.c: 239: LCD_String("PUT MESSAGE");
  1591  000814  0E2D               	movlw	low STR_8
  1592  000816  6E2A               	movwf	LCD_String@string,c
  1593  000818  0E03               	movlw	high STR_8
  1594  00081A  6E2B               	movwf	LCD_String@string+1,c
  1595  00081C  ECBF  F00A         	call	_LCD_String	;wreg free
  1596                           
  1597                           ;main.c: 240: SetLine(2);
  1598  000820  0E02               	movlw	2
  1599  000822  ECFA  F00B         	call	_SetLine
  1600                           
  1601                           ;main.c: 241: LCD_String("Going Home");
  1602  000826  0E45               	movlw	low STR_9
  1603  000828  6E2A               	movwf	LCD_String@string,c
  1604  00082A  0E03               	movlw	high STR_9
  1605  00082C  6E2B               	movwf	LCD_String@string+1,c
  1606  00082E  ECBF  F00A         	call	_LCD_String	;wreg free
  1607                           
  1608                           ;main.c: 242: stop(&mL,&mR);
  1609  000832  0E00               	movlw	low main@mL
  1610  000834  0100               	movlb	0	; () banked
  1611  000836  6F62               	movwf	stop@mL& (0+255),b
  1612  000838  0E02               	movlw	high main@mL
  1613  00083A  0100               	movlb	0	; () banked
  1614  00083C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1615  00083E  0E09               	movlw	low main@mR
  1616  000840  0100               	movlb	0	; () banked
  1617  000842  6F64               	movwf	stop@mR& (0+255),b
  1618  000844  0E02               	movlw	high main@mR
  1619  000846  0100               	movlb	0	; () banked
  1620  000848  6F65               	movwf	(stop@mR+1)& (0+255),b
  1621  00084A  EC3C  F009         	call	_stop	;wreg free
  1622  00084E                     l3311:
  1623                           
  1624                           ;main.c: 258: mode=-1;
  1625  00084E  683B               	setf	_mode,c	;volatile
  1626  000850                     l3315:
  1627  000850  503B               	movf	_mode,w,c	;volatile
  1628                           
  1629                           ; Switch size 1, requested type "space"
  1630                           ; Number of cases is 5, Range of values is 0 to 255
  1631                           ; switch strategies available:
  1632                           ; Name         Instructions Cycles
  1633                           ; simple_byte           16     9 (average)
  1634                           ;	Chosen strategy is simple_byte
  1635  000852  0A00               	xorlw	0	; case 0
  1636  000854  B4D8               	btfsc	status,2,c
  1637  000856  D63D               	goto	l3199
  1638  000858  0A01               	xorlw	1	; case 1
  1639  00085A  B4D8               	btfsc	status,2,c
  1640  00085C  D661               	goto	l3215
  1641  00085E  0A03               	xorlw	3	; case 2
  1642  000860  B4D8               	btfsc	status,2,c
  1643  000862  D6FD               	goto	l3249
  1644  000864  0A01               	xorlw	1	; case 3
  1645  000866  B4D8               	btfsc	status,2,c
  1646  000868  D7D2               	goto	l3303
  1647  00086A  0AFC               	xorlw	252	; case 255
  1648  00086C  B4D8               	btfsc	status,2,c
  1649  00086E  D5D0               	goto	l3165
  1650  000870  D7EF               	goto	l3315
  1651  000872                     __end_of_main:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           prodh	equ	0xFF4
  1655                           prodl	equ	0xFF3
  1656                           intcon	equ	0xFF2
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           indf1	equ	0xFE7
  1660                           fsr1h	equ	0xFE2
  1661                           fsr1l	equ	0xFE1
  1662                           indf2	equ	0xFDF
  1663                           fsr2h	equ	0xFDA
  1664                           fsr2l	equ	0xFD9
  1665                           status	equ	0xFD8
  1666                           
  1667 ;; *************** function _initRFID *****************
  1668 ;; Defined at:
  1669 ;;		line 5 in file "RFID_Reader.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;		None
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;		None
  1674 ;; Return value:  Size  Location     Type
  1675 ;;		None               void
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1683 ;;      Params:         0       0       0       0
  1684 ;;      Locals:         0       0       0       0
  1685 ;;      Temps:          0       0       0       0
  1686 ;;      Totals:         0       0       0       0
  1687 ;;Total ram usage:        0 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    3
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text1
  1698  00190A                     __ptext1:
  1699                           	opt stack 0
  1700  00190A                     _initRFID:
  1701                           	opt stack 27
  1702                           
  1703                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1704                           
  1705                           ;incstack = 0
  1706  00190A  5094               	movf	3988,w,c	;volatile
  1707  00190C  09C0               	iorlw	192
  1708  00190E  6E94               	movwf	3988,c	;volatile
  1709                           
  1710                           ;RFID_Reader.c: 10: SPBRG=205;
  1711  001910  0ECD               	movlw	205
  1712  001912  6EAF               	movwf	4015,c	;volatile
  1713                           
  1714                           ;RFID_Reader.c: 11: SPBRGH=0;
  1715  001914  0E00               	movlw	0
  1716  001916  6EB0               	movwf	4016,c	;volatile
  1717                           
  1718                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1719  001918  86AA               	bsf	4010,3,c	;volatile
  1720                           
  1721                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1722  00191A  84AC               	bsf	4012,2,c	;volatile
  1723                           
  1724                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1725  00191C  88AB               	bsf	4011,4,c	;volatile
  1726                           
  1727                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1728  00191E  8EAB               	bsf	4011,7,c	;volatile
  1729                           
  1730                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1731  001920  98AC               	bcf	4012,4,c	;volatile
  1732                           
  1733                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1734  001922  9CAB               	bcf	4011,6,c	;volatile
  1735  001924  0012               	return		;funcret
  1736  001926                     __end_of_initRFID:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           prodh	equ	0xFF4
  1740                           prodl	equ	0xFF3
  1741                           intcon	equ	0xFF2
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           indf1	equ	0xFE7
  1745                           fsr1h	equ	0xFE2
  1746                           fsr1l	equ	0xFE1
  1747                           indf2	equ	0xFDF
  1748                           fsr2h	equ	0xFDA
  1749                           fsr2l	equ	0xFD9
  1750                           status	equ	0xFD8
  1751                           
  1752 ;; *************** function _initMotorPWM *****************
  1753 ;; Defined at:
  1754 ;;		line 4 in file "dc_motor.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;		None
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;		None
  1759 ;; Return value:  Size  Location     Type
  1760 ;;		None               void
  1761 ;; Registers used:
  1762 ;;		wreg, status,2
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1768 ;;      Params:         0       0       0       0
  1769 ;;      Locals:         0       0       0       0
  1770 ;;      Temps:          0       0       0       0
  1771 ;;      Totals:         0       0       0       0
  1772 ;;Total ram usage:        0 bytes
  1773 ;; Hardware stack levels used:    1
  1774 ;; Hardware stack levels required when called:    3
  1775 ;; This function calls:
  1776 ;;		Nothing
  1777 ;; This function is called by:
  1778 ;;		_main
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text2
  1783  0017C2                     __ptext2:
  1784                           	opt stack 0
  1785  0017C2                     _initMotorPWM:
  1786                           	opt stack 27
  1787                           
  1788                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1789                           
  1790                           ;incstack = 0
  1791  0017C2  0E00               	movlw	0
  1792  0017C4  6E7F               	movwf	3967,c	;volatile
  1793                           
  1794                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1795  0017C6  0E80               	movlw	128
  1796  0017C8  6E7E               	movwf	3966,c	;volatile
  1797                           
  1798                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1799  0017CA  0E6F               	movlw	111
  1800  0017CC  6E6F               	movwf	3951,c	;volatile
  1801                           
  1802                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1803  0017CE  0E00               	movlw	0
  1804  0017D0  6E6E               	movwf	3950,c	;volatile
  1805                           
  1806                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1807  0017D2  0EC7               	movlw	199
  1808  0017D4  6E7B               	movwf	3963,c	;volatile
  1809                           
  1810                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1811  0017D6  0E00               	movlw	0
  1812  0017D8  6E7A               	movwf	3962,c	;volatile
  1813                           
  1814                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1815  0017DA  0E00               	movlw	0
  1816  0017DC  6E79               	movwf	3961,c	;volatile
  1817                           
  1818                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1819  0017DE  0E00               	movlw	0
  1820  0017E0  6E78               	movwf	3960,c	;volatile
  1821                           
  1822                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1823  0017E2  0E00               	movlw	0
  1824  0017E4  6E77               	movwf	3959,c	;volatile
  1825                           
  1826                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1827  0017E6  0E00               	movlw	0
  1828  0017E8  6E76               	movwf	3958,c	;volatile
  1829                           
  1830                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1831  0017EA  9093               	bcf	3987,0,c	;volatile
  1832                           
  1833                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1834  0017EC  9293               	bcf	3987,1,c	;volatile
  1835                           
  1836                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1837  0017EE  9493               	bcf	3987,2,c	;volatile
  1838                           
  1839                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1840  0017F0  9693               	bcf	3987,3,c	;volatile
  1841  0017F2  0012               	return		;funcret
  1842  0017F4                     __end_of_initMotorPWM:
  1843                           	opt stack 0
  1844                           tblptru	equ	0xFF8
  1845                           prodh	equ	0xFF4
  1846                           prodl	equ	0xFF3
  1847                           intcon	equ	0xFF2
  1848                           postinc0	equ	0xFEE
  1849                           wreg	equ	0xFE8
  1850                           indf1	equ	0xFE7
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           indf2	equ	0xFDF
  1854                           fsr2h	equ	0xFDA
  1855                           fsr2l	equ	0xFD9
  1856                           status	equ	0xFD8
  1857                           
  1858 ;; *************** function _initLCD *****************
  1859 ;; Defined at:
  1860 ;;		line 38 in file "LCD.c"
  1861 ;; Parameters:    Size  Location     Type
  1862 ;;		None
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;		None
  1865 ;; Return value:  Size  Location     Type
  1866 ;;		None               void
  1867 ;; Registers used:
  1868 ;;		wreg, status,2, status,0, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1874 ;;      Params:         0       0       0       0
  1875 ;;      Locals:         0       0       0       0
  1876 ;;      Temps:          1       0       0       0
  1877 ;;      Totals:         1       0       0       0
  1878 ;;Total ram usage:        1 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; Hardware stack levels required when called:    6
  1881 ;; This function calls:
  1882 ;;		_LCDout
  1883 ;;		_SendLCD
  1884 ;; This function is called by:
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889                           	psect	text3
  1890  001108                     __ptext3:
  1891                           	opt stack 0
  1892  001108                     _initLCD:
  1893                           	opt stack 24
  1894                           
  1895                           ;LCD.c: 44: TRISAbits.RA6=0;
  1896                           
  1897                           ;incstack = 0
  1898  001108  9C92               	bcf	3986,6,c	;volatile
  1899                           
  1900                           ;LCD.c: 45: TRISCbits.RC0=0;
  1901  00110A  9094               	bcf	3988,0,c	;volatile
  1902                           
  1903                           ;LCD.c: 46: TRISCbits.RC1=0;
  1904  00110C  9294               	bcf	3988,1,c	;volatile
  1905                           
  1906                           ;LCD.c: 47: TRISCbits.RC2=0;
  1907  00110E  9494               	bcf	3988,2,c	;volatile
  1908                           
  1909                           ;LCD.c: 48: TRISDbits.RD0=0;
  1910  001110  9095               	bcf	3989,0,c	;volatile
  1911                           
  1912                           ;LCD.c: 49: TRISDbits.RD1=0;
  1913  001112  9295               	bcf	3989,1,c	;volatile
  1914                           
  1915                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1916  001114  0E27               	movlw	39
  1917  001116  6E2A               	movwf	??_initLCD& (0+255),c
  1918  001118  0EF5               	movlw	245
  1919  00111A                     u2827:
  1920  00111A  2EE8               	decfsz	wreg,f,c
  1921  00111C  D7FE               	goto	u2827
  1922  00111E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1923  001120  D7FC               	goto	u2827
  1924  001122  F000               	nop	
  1925                           
  1926                           ;LCD.c: 52: LCDout(0b0011);
  1927  001124  0E03               	movlw	3
  1928  001126  EC21  F008         	call	_LCDout
  1929                           
  1930                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1931  00112A  0E0D               	movlw	13
  1932  00112C  6E2A               	movwf	??_initLCD& (0+255),c
  1933  00112E  0EFC               	movlw	252
  1934  001130                     u2837:
  1935  001130  2EE8               	decfsz	wreg,f,c
  1936  001132  D7FE               	goto	u2837
  1937  001134  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1938  001136  D7FC               	goto	u2837
  1939                           
  1940                           ;LCD.c: 54: LCDout(0b0011);
  1941  001138  0E03               	movlw	3
  1942  00113A  EC21  F008         	call	_LCDout
  1943                           
  1944                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1945  00113E  0E85               	movlw	133
  1946  001140                     u2847:
  1947  001140  2EE8               	decfsz	wreg,f,c
  1948  001142  D7FE               	goto	u2847
  1949  001144  F000               	nop	
  1950                           
  1951                           ;LCD.c: 56: LCDout(0b0011);
  1952  001146  0E03               	movlw	3
  1953  001148  EC21  F008         	call	_LCDout
  1954                           
  1955                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1956  00114C  0E21               	movlw	33
  1957  00114E                     u2857:
  1958  00114E  2EE8               	decfsz	wreg,f,c
  1959  001150  D7FE               	goto	u2857
  1960  001152  F000               	nop	
  1961                           
  1962                           ;LCD.c: 58: LCDout(0b0010);
  1963  001154  0E02               	movlw	2
  1964  001156  EC21  F008         	call	_LCDout
  1965                           
  1966                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1967  00115A  0E21               	movlw	33
  1968  00115C                     u2867:
  1969  00115C  2EE8               	decfsz	wreg,f,c
  1970  00115E  D7FE               	goto	u2867
  1971  001160  F000               	nop	
  1972                           
  1973                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1974  001162  0E00               	movlw	0
  1975  001164  6E28               	movwf	SendLCD@type,c
  1976  001166  0E28               	movlw	40
  1977  001168  EC12  F00C         	call	_SendLCD
  1978                           
  1979                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1980  00116C  0E21               	movlw	33
  1981  00116E                     u2877:
  1982  00116E  2EE8               	decfsz	wreg,f,c
  1983  001170  D7FE               	goto	u2877
  1984  001172  F000               	nop	
  1985                           
  1986                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1987  001174  0E00               	movlw	0
  1988  001176  6E28               	movwf	SendLCD@type,c
  1989  001178  0E08               	movlw	8
  1990  00117A  EC12  F00C         	call	_SendLCD
  1991                           
  1992                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1993  00117E  0E21               	movlw	33
  1994  001180                     u2887:
  1995  001180  2EE8               	decfsz	wreg,f,c
  1996  001182  D7FE               	goto	u2887
  1997  001184  F000               	nop	
  1998                           
  1999                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2000  001186  0E00               	movlw	0
  2001  001188  6E28               	movwf	SendLCD@type,c
  2002  00118A  0E01               	movlw	1
  2003  00118C  EC12  F00C         	call	_SendLCD
  2004                           
  2005                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2006  001190  0E0D               	movlw	13
  2007  001192  6E2A               	movwf	??_initLCD& (0+255),c
  2008  001194  0EFC               	movlw	252
  2009  001196                     u2897:
  2010  001196  2EE8               	decfsz	wreg,f,c
  2011  001198  D7FE               	goto	u2897
  2012  00119A  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2013  00119C  D7FC               	goto	u2897
  2014                           
  2015                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2016  00119E  0E00               	movlw	0
  2017  0011A0  6E28               	movwf	SendLCD@type,c
  2018  0011A2  0E06               	movlw	6
  2019  0011A4  EC12  F00C         	call	_SendLCD
  2020                           
  2021                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2022  0011A8  0E21               	movlw	33
  2023  0011AA                     u2907:
  2024  0011AA  2EE8               	decfsz	wreg,f,c
  2025  0011AC  D7FE               	goto	u2907
  2026  0011AE  F000               	nop	
  2027                           
  2028                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2029  0011B0  0E00               	movlw	0
  2030  0011B2  6E28               	movwf	SendLCD@type,c
  2031  0011B4  0E0C               	movlw	12
  2032  0011B6  EC12  F00C         	call	_SendLCD
  2033                           
  2034                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2035  0011BA  0E21               	movlw	33
  2036  0011BC                     u2917:
  2037  0011BC  2EE8               	decfsz	wreg,f,c
  2038  0011BE  D7FE               	goto	u2917
  2039  0011C0  F000               	nop	
  2040  0011C2  0012               	return		;funcret
  2041  0011C4                     __end_of_initLCD:
  2042                           	opt stack 0
  2043                           tblptru	equ	0xFF8
  2044                           prodh	equ	0xFF4
  2045                           prodl	equ	0xFF3
  2046                           intcon	equ	0xFF2
  2047                           postinc0	equ	0xFEE
  2048                           wreg	equ	0xFE8
  2049                           indf1	equ	0xFE7
  2050                           fsr1h	equ	0xFE2
  2051                           fsr1l	equ	0xFE1
  2052                           indf2	equ	0xFDF
  2053                           fsr2h	equ	0xFDA
  2054                           fsr2l	equ	0xFD9
  2055                           status	equ	0xFD8
  2056                           
  2057 ;; *************** function _initIR *****************
  2058 ;; Defined at:
  2059 ;;		line 30 in file "IR_Reading.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;		None
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;		None               void
  2066 ;; Registers used:
  2067 ;;		wreg, status,2
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2073 ;;      Params:         0       0       0       0
  2074 ;;      Locals:         0       0       0       0
  2075 ;;      Temps:          0       0       0       0
  2076 ;;      Totals:         0       0       0       0
  2077 ;;Total ram usage:        0 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    3
  2080 ;; This function calls:
  2081 ;;		Nothing
  2082 ;; This function is called by:
  2083 ;;		_main
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text4
  2088  0018CA                     __ptext4:
  2089                           	opt stack 0
  2090  0018CA                     _initIR:
  2091                           	opt stack 27
  2092                           
  2093                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2094                           
  2095                           ;incstack = 0
  2096  0018CA  9489               	bcf	3977,2,c	;volatile
  2097                           
  2098                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2099  0018CC  9689               	bcf	3977,3,c	;volatile
  2100                           
  2101                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2102  0018CE  8492               	bsf	3986,2,c	;volatile
  2103                           
  2104                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2105  0018D0  8692               	bsf	3986,3,c	;volatile
  2106                           
  2107                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2108  0018D2  94B8               	bcf	4024,2,c	;volatile
  2109                           
  2110                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2111  0018D4  96B8               	bcf	4024,3,c	;volatile
  2112                           
  2113                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2114  0018D6  9CB8               	bcf	4024,6,c	;volatile
  2115                           
  2116                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2117  0018D8  9EB8               	bcf	4024,7,c	;volatile
  2118                           
  2119                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2120  0018DA  0E06               	movlw	6
  2121  0018DC  6E63               	movwf	3939,c	;volatile
  2122                           
  2123                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2124  0018DE  0E06               	movlw	6
  2125  0018E0  6E62               	movwf	3938,c	;volatile
  2126                           
  2127                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2128  0018E2  9096               	bcf	3990,0,c	;volatile
  2129                           
  2130                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2131  0018E4  9296               	bcf	3990,1,c	;volatile
  2132                           
  2133                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2134  0018E6  0E59               	movlw	89
  2135  0018E8  6EB7               	movwf	4023,c	;volatile
  2136  0018EA  0012               	return		;funcret
  2137  0018EC                     __end_of_initIR:
  2138                           	opt stack 0
  2139                           tblptru	equ	0xFF8
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           intcon	equ	0xFF2
  2143                           postinc0	equ	0xFEE
  2144                           wreg	equ	0xFE8
  2145                           indf1	equ	0xFE7
  2146                           fsr1h	equ	0xFE2
  2147                           fsr1l	equ	0xFE1
  2148                           indf2	equ	0xFDF
  2149                           fsr2h	equ	0xFDA
  2150                           fsr2l	equ	0xFD9
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function _fullSpeedBack *****************
  2154 ;; Defined at:
  2155 ;;		line 125 in file "dc_motor.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2158 ;;		 -> main@mL(9), 
  2159 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2160 ;;		 -> main@mR(9), 
  2161 ;;  power           1   11[BANK0 ] unsigned char 
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;		None
  2164 ;; Return value:  Size  Location     Type
  2165 ;;		None               void
  2166 ;; Registers used:
  2167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2173 ;;      Params:         0       5       0       0
  2174 ;;      Locals:         0       0       0       0
  2175 ;;      Temps:          0       0       0       0
  2176 ;;      Totals:         0       5       0       0
  2177 ;;Total ram usage:        5 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    6
  2180 ;; This function calls:
  2181 ;;		_fullSpeedAhead
  2182 ;; This function is called by:
  2183 ;;		_main
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text5
  2188  001714                     __ptext5:
  2189                           	opt stack 0
  2190  001714                     _fullSpeedBack:
  2191                           	opt stack 24
  2192                           
  2193                           ;dc_motor.c: 128: mL->direction=0;
  2194                           
  2195                           ;incstack = 0
  2196  001714  0100               	movlb	0	; () banked
  2197  001716  EE20 F001          	lfsr	2,1
  2198  00171A  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2199  00171C  26D9               	addwf	fsr2l,f,c
  2200  00171E  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2201  001720  22DA               	addwfc	fsr2h,f,c
  2202  001722  0E00               	movlw	0
  2203  001724  6EDF               	movwf	indf2,c
  2204                           
  2205                           ;dc_motor.c: 129: mR->direction=0;
  2206  001726  0100               	movlb	0	; () banked
  2207  001728  EE20 F001          	lfsr	2,1
  2208  00172C  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2209  00172E  26D9               	addwf	fsr2l,f,c
  2210  001730  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2211  001732  22DA               	addwfc	fsr2h,f,c
  2212  001734  0E00               	movlw	0
  2213  001736  6EDF               	movwf	indf2,c
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2217  001738  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2218  00173C  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2219  001740  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2220  001744  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2221  001748  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2222  00174C  EC0D  F00A         	call	_fullSpeedAhead	;wreg free
  2223  001750  0012               	return		;funcret
  2224  001752                     __end_of_fullSpeedBack:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           intcon	equ	0xFF2
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           indf1	equ	0xFE7
  2233                           fsr1h	equ	0xFE2
  2234                           fsr1l	equ	0xFE1
  2235                           indf2	equ	0xFDF
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _enableSensor *****************
  2241 ;; Defined at:
  2242 ;;		line 106 in file "IR_Reading.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  sensor          1    wreg     unsigned char 
  2245 ;;  status          1   35[COMRAM] unsigned char 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;  sensor          1   36[COMRAM] unsigned char 
  2248 ;; Return value:  Size  Location     Type
  2249 ;;		None               void
  2250 ;; Registers used:
  2251 ;;		wreg, status,2, status,0
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2257 ;;      Params:         1       0       0       0
  2258 ;;      Locals:         1       0       0       0
  2259 ;;      Temps:          0       0       0       0
  2260 ;;      Totals:         2       0       0       0
  2261 ;;Total ram usage:        2 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    3
  2264 ;; This function calls:
  2265 ;;		Nothing
  2266 ;; This function is called by:
  2267 ;;		_main
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           	psect	text6
  2272  00187E                     __ptext6:
  2273                           	opt stack 0
  2274  00187E                     _enableSensor:
  2275                           	opt stack 27
  2276                           
  2277                           ;incstack = 0
  2278                           ;enableSensor@sensor stored from wreg
  2279  00187E  6E25               	movwf	enableSensor@sensor,c
  2280                           
  2281                           ;IR_Reading.c: 108: if (sensor==0){
  2282  001880  5025               	movf	enableSensor@sensor,w,c
  2283  001882  A4D8               	btfss	status,2,c
  2284  001884  D006               	goto	l2301
  2285                           
  2286                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2287  001886  B024               	btfsc	enableSensor@status,0,c
  2288  001888  D002               	bra	u1765
  2289  00188A  908D               	bcf	3981,0,c	;volatile
  2290  00188C  D001               	bra	u1766
  2291  00188E                     u1765:
  2292  00188E  808D               	bsf	3981,0,c	;volatile
  2293  001890                     u1766:
  2294                           
  2295                           ;IR_Reading.c: 110: } else if (sensor==1){
  2296  001890  0012               	return	
  2297  001892                     l2301:
  2298  001892  0425               	decf	enableSensor@sensor,w,c
  2299  001894  A4D8               	btfss	status,2,c
  2300  001896  0012               	return	
  2301                           
  2302                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2303  001898  B024               	btfsc	enableSensor@status,0,c
  2304  00189A  D002               	bra	u1785
  2305  00189C  928D               	bcf	3981,1,c	;volatile
  2306  00189E  D001               	bra	u1786
  2307  0018A0                     u1785:
  2308  0018A0  828D               	bsf	3981,1,c	;volatile
  2309  0018A2                     u1786:
  2310  0018A2  0012               	return	
  2311  0018A4                     __end_of_enableSensor:
  2312                           	opt stack 0
  2313                           tblptru	equ	0xFF8
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           intcon	equ	0xFF2
  2317                           postinc0	equ	0xFEE
  2318                           wreg	equ	0xFE8
  2319                           indf1	equ	0xFE7
  2320                           fsr1h	equ	0xFE2
  2321                           fsr1l	equ	0xFE1
  2322                           indf2	equ	0xFDF
  2323                           fsr2h	equ	0xFDA
  2324                           fsr2l	equ	0xFD9
  2325                           status	equ	0xFD8
  2326                           
  2327 ;; *************** function _VerifySignal *****************
  2328 ;; Defined at:
  2329 ;;		line 55 in file "RFID_Reader.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2332 ;;		 -> ReceivedString(16), 
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;  hexByte         2   44[COMRAM] unsigned int 
  2335 ;;  i               1   46[COMRAM] unsigned char 
  2336 ;;  checksum        1   43[COMRAM] unsigned char 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      unsigned char 
  2339 ;; Registers used:
  2340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2346 ;;      Params:         2       0       0       0
  2347 ;;      Locals:         4       0       0       0
  2348 ;;      Temps:          6       0       0       0
  2349 ;;      Totals:        12       0       0       0
  2350 ;;Total ram usage:       12 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    3
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           	psect	text7
  2361  0011C4                     __ptext7:
  2362                           	opt stack 0
  2363  0011C4                     _VerifySignal:
  2364                           	opt stack 27
  2365                           
  2366                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2367                           
  2368                           ;incstack = 0
  2369  0011C4  0E00               	movlw	0
  2370  0011C6  6E2C               	movwf	VerifySignal@checksum,c
  2371                           
  2372                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2373  0011C8  0E00               	movlw	0
  2374  0011CA  6E2E               	movwf	VerifySignal@hexByte+1,c
  2375  0011CC  0E00               	movlw	0
  2376  0011CE  6E2D               	movwf	VerifySignal@hexByte,c
  2377                           
  2378                           ;RFID_Reader.c: 58: unsigned char i=0;
  2379  0011D0  0E00               	movlw	0
  2380  0011D2  6E2F               	movwf	VerifySignal@i,c
  2381                           
  2382                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2383  0011D4  EE20 F004          	lfsr	2,4
  2384  0011D8  5024               	movf	VerifySignal@Signal,w,c
  2385  0011DA  26D9               	addwf	fsr2l,f,c
  2386  0011DC  5025               	movf	VerifySignal@Signal+1,w,c
  2387  0011DE  22DA               	addwfc	fsr2h,f,c
  2388  0011E0  50DF               	movf	indf2,w,c
  2389  0011E2  6E26               	movwf	??_VerifySignal& (0+255),c
  2390  0011E4  EE20 F003          	lfsr	2,3
  2391  0011E8  5024               	movf	VerifySignal@Signal,w,c
  2392  0011EA  26D9               	addwf	fsr2l,f,c
  2393  0011EC  5025               	movf	VerifySignal@Signal+1,w,c
  2394  0011EE  22DA               	addwfc	fsr2h,f,c
  2395  0011F0  50DF               	movf	indf2,w,c
  2396  0011F2  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2397  0011F4  5027               	movf	??_VerifySignal+1,w,c
  2398  0011F6  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2399  0011F8  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2400  0011FA  5026               	movf	??_VerifySignal,w,c
  2401  0011FC  2428               	addwf	??_VerifySignal+2,w,c
  2402  0011FE  6E2D               	movwf	VerifySignal@hexByte,c
  2403  001200  0E00               	movlw	0
  2404  001202  2029               	addwfc	??_VerifySignal+3,w,c
  2405  001204  6E2E               	movwf	VerifySignal@hexByte+1,c
  2406                           
  2407                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2408  001206  EE20 F002          	lfsr	2,2
  2409  00120A  5024               	movf	VerifySignal@Signal,w,c
  2410  00120C  26D9               	addwf	fsr2l,f,c
  2411  00120E  5025               	movf	VerifySignal@Signal+1,w,c
  2412  001210  22DA               	addwfc	fsr2h,f,c
  2413  001212  50DF               	movf	indf2,w,c
  2414  001214  182D               	xorwf	VerifySignal@hexByte,w,c
  2415  001216  6E2C               	movwf	VerifySignal@checksum,c
  2416                           
  2417                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2418  001218  0E05               	movlw	5
  2419  00121A  6E2F               	movwf	VerifySignal@i,c
  2420  00121C                     l2497:
  2421  00121C  0E09               	movlw	9
  2422  00121E  642F               	cpfsgt	VerifySignal@i,c
  2423  001220  D001               	goto	l2501
  2424  001222  D028               	goto	l2509
  2425  001224                     l2501:
  2426                           
  2427                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2428  001224  502F               	movf	VerifySignal@i,w,c
  2429  001226  6E26               	movwf	??_VerifySignal& (0+255),c
  2430  001228  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2431  00122A  0E01               	movlw	1
  2432  00122C  2626               	addwf	??_VerifySignal,f,c
  2433  00122E  0E00               	movlw	0
  2434  001230  2227               	addwfc	??_VerifySignal+1,f,c
  2435  001232  5026               	movf	??_VerifySignal,w,c
  2436  001234  2424               	addwf	VerifySignal@Signal,w,c
  2437  001236  6ED9               	movwf	fsr2l,c
  2438  001238  5027               	movf	??_VerifySignal+1,w,c
  2439  00123A  2025               	addwfc	VerifySignal@Signal+1,w,c
  2440  00123C  6EDA               	movwf	fsr2h,c
  2441  00123E  50DF               	movf	indf2,w,c
  2442  001240  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2443  001242  502F               	movf	VerifySignal@i,w,c
  2444  001244  0D01               	mullw	1
  2445  001246  50F3               	movf	prodl,w,c
  2446  001248  2424               	addwf	VerifySignal@Signal,w,c
  2447  00124A  6ED9               	movwf	fsr2l,c
  2448  00124C  50F4               	movf	prodh,w,c
  2449  00124E  2025               	addwfc	VerifySignal@Signal+1,w,c
  2450  001250  6EDA               	movwf	fsr2h,c
  2451  001252  50DF               	movf	indf2,w,c
  2452  001254  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2453  001256  5029               	movf	??_VerifySignal+3,w,c
  2454  001258  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2455  00125A  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2456  00125C  5028               	movf	??_VerifySignal+2,w,c
  2457  00125E  242A               	addwf	??_VerifySignal+4,w,c
  2458  001260  6E2D               	movwf	VerifySignal@hexByte,c
  2459  001262  0E00               	movlw	0
  2460  001264  202B               	addwfc	??_VerifySignal+5,w,c
  2461  001266  6E2E               	movwf	VerifySignal@hexByte+1,c
  2462                           
  2463                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2464  001268  502C               	movf	VerifySignal@checksum,w,c
  2465  00126A  182D               	xorwf	VerifySignal@hexByte,w,c
  2466  00126C  6E2C               	movwf	VerifySignal@checksum,c
  2467  00126E  0E02               	movlw	2
  2468  001270  262F               	addwf	VerifySignal@i,f,c
  2469  001272  D7D4               	goto	l2497
  2470  001274                     l2509:
  2471                           
  2472                           ;RFID_Reader.c: 68: }
  2473                           ;RFID_Reader.c: 71: return 1;
  2474  001274  0E01               	movlw	1
  2475  001276  0012               	return	
  2476  001278                     __end_of_VerifySignal:
  2477                           	opt stack 0
  2478                           tblptru	equ	0xFF8
  2479                           prodh	equ	0xFF4
  2480                           prodl	equ	0xFF3
  2481                           intcon	equ	0xFF2
  2482                           postinc0	equ	0xFEE
  2483                           wreg	equ	0xFE8
  2484                           indf1	equ	0xFE7
  2485                           fsr1h	equ	0xFE2
  2486                           fsr1l	equ	0xFE1
  2487                           indf2	equ	0xFDF
  2488                           fsr2h	equ	0xFDA
  2489                           fsr2l	equ	0xFD9
  2490                           status	equ	0xFD8
  2491                           
  2492 ;; *************** function _ScanWithRange *****************
  2493 ;; Defined at:
  2494 ;;		line 77 in file "Movement.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2497 ;;		 -> main@mL(9), 
  2498 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2499 ;;		 -> main@mR(9), 
  2500 ;;  milliseconds    2   17[BANK0 ] int 
  2501 ;;  TurnDirectio    1   19[BANK0 ] unsigned char 
  2502 ;;  MoveTimeEntr    2   20[BANK0 ] PTR unsigned char 
  2503 ;;		 -> main@MoveTime(100), 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  buf            40   24[BANK0 ] unsigned char [40]
  2506 ;;  SensorResult    4   71[BANK0 ] unsigned int [2]
  2507 ;;  DirectionFou    2   69[BANK0 ] const unsigned int 
  2508 ;;  n               2   67[BANK0 ] unsigned int 
  2509 ;;  i               2   65[BANK0 ] unsigned int 
  2510 ;;  RightFlag       1   76[BANK0 ] unsigned char 
  2511 ;;  LeftFlag        1   75[BANK0 ] unsigned char 
  2512 ;;  TimeAboveThr    1   64[BANK0 ] unsigned char 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      unsigned char 
  2515 ;; Registers used:
  2516 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2522 ;;      Params:         0       9       0       0
  2523 ;;      Locals:         0      53       0       0
  2524 ;;      Temps:          0       2       0       0
  2525 ;;      Totals:         0      64       0       0
  2526 ;;Total ram usage:       64 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    7
  2529 ;; This function calls:
  2530 ;;		_LCD_String
  2531 ;;		_SendLCD
  2532 ;;		_SetLine
  2533 ;;		_delay_tenth_s
  2534 ;;		_grabLeftIR
  2535 ;;		_grabRightIR
  2536 ;;		_sprintf
  2537 ;;		_stop
  2538 ;;		_turnLeft
  2539 ;;		_turnRight
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           	psect	text8
  2546  000B78                     __ptext8:
  2547                           	opt stack 0
  2548  000B78                     _ScanWithRange:
  2549                           	opt stack 23
  2550                           
  2551                           ;Movement.c: 80: unsigned int SensorResult[2]={0,0};
  2552                           
  2553                           ;incstack = 0
  2554  000B78  C0BC  F0A7         	movff	ScanWithRange@F3893,ScanWithRange@SensorResult
  2555  000B7C  C0BD  F0A8         	movff	ScanWithRange@F3893+1,ScanWithRange@SensorResult+1
  2556  000B80  C0BE  F0A9         	movff	ScanWithRange@F3893+2,ScanWithRange@SensorResult+2
  2557  000B84  C0BF  F0AA         	movff	ScanWithRange@F3893+3,ScanWithRange@SensorResult+3
  2558                           
  2559                           ;Movement.c: 81: unsigned char LeftFlag=0;
  2560  000B88  0E00               	movlw	0
  2561  000B8A  0100               	movlb	0	; () banked
  2562  000B8C  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2563                           
  2564                           ;Movement.c: 82: unsigned char RightFlag=0;
  2565  000B8E  0E00               	movlw	0
  2566  000B90  0100               	movlb	0	; () banked
  2567  000B92  6FAC               	movwf	ScanWithRange@RightFlag& (0+255),b
  2568                           
  2569                           ;Movement.c: 83: char buf[40];
  2570                           ;Movement.c: 84: unsigned int i=0;
  2571  000B94  0E00               	movlw	0
  2572  000B96  0100               	movlb	0	; () banked
  2573  000B98  6FA2               	movwf	(ScanWithRange@i+1)& (0+255),b
  2574  000B9A  0E00               	movlw	0
  2575  000B9C  6FA1               	movwf	ScanWithRange@i& (0+255),b
  2576                           
  2577                           ;Movement.c: 85: unsigned int n=0;
  2578  000B9E  0E00               	movlw	0
  2579  000BA0  0100               	movlb	0	; () banked
  2580  000BA2  6FA4               	movwf	(ScanWithRange@n+1)& (0+255),b
  2581  000BA4  0E00               	movlw	0
  2582  000BA6  6FA3               	movwf	ScanWithRange@n& (0+255),b
  2583                           
  2584                           ;Movement.c: 86: unsigned char TimeAboveThreshold=0;
  2585  000BA8  0E00               	movlw	0
  2586  000BAA  0100               	movlb	0	; () banked
  2587  000BAC  6FA0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2588                           
  2589                           ;Movement.c: 89: const unsigned int DirectionFoundThreshold=4000;
  2590  000BAE  0E0F               	movlw	15
  2591  000BB0  0100               	movlb	0	; () banked
  2592  000BB2  6FA6               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2593  000BB4  0EA0               	movlw	160
  2594  000BB6  6FA5               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;Movement.c: 98: turnLeft(mL,mR, 100);
  2598  000BB8  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2599  000BBC  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2600  000BC0  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2601  000BC4  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2602  000BC8  0E64               	movlw	100
  2603  000BCA  0100               	movlb	0	; () banked
  2604  000BCC  6F6B               	movwf	turnLeft@power& (0+255),b
  2605  000BCE  EC17  F00B         	call	_turnLeft	;wreg free
  2606                           
  2607                           ;Movement.c: 99: delay_tenth_s(5);
  2608  000BD2  0E05               	movlw	5
  2609  000BD4  ECA9  F00B         	call	_delay_tenth_s
  2610                           
  2611                           ;Movement.c: 100: stop(mL,mR);
  2612  000BD8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2613  000BDC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2614  000BE0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2615  000BE4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2616  000BE8  EC3C  F009         	call	_stop	;wreg free
  2617                           
  2618                           ;Movement.c: 103: TurnDirection=0;
  2619  000BEC  0E00               	movlw	0
  2620  000BEE  0100               	movlb	0	; () banked
  2621  000BF0  6F73               	movwf	ScanWithRange@TurnDirection& (0+255),b
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;Movement.c: 104: for (i=1; i<=milliseconds; i++) {
  2625  000BF2  0E00               	movlw	0
  2626  000BF4  0100               	movlb	0	; () banked
  2627  000BF6  6FA2               	movwf	(ScanWithRange@i+1)& (0+255),b
  2628  000BF8  0E01               	movlw	1
  2629  000BFA  6FA1               	movwf	ScanWithRange@i& (0+255),b
  2630  000BFC  D0E2               	goto	l3105
  2631  000BFE                     l3033:
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;Movement.c: 107: SensorResult[0]=grabLeftIR();
  2635  000BFE  EC86  F00A         	call	_grabLeftIR	;wreg free
  2636  000C02  C024  F0A7         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2637  000C06  C025  F0A8         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2638                           
  2639                           ;Movement.c: 108: SensorResult[1]=grabRightIR();
  2640  000C0A  EC4D  F00A         	call	_grabRightIR	;wreg free
  2641  000C0E  C024  F0A9         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2642  000C12  C025  F0AA         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2643                           
  2644                           ;Movement.c: 112: CAP1BUFH=0;
  2645  000C16  0E00               	movlw	0
  2646  000C18  6E69               	movwf	3945,c	;volatile
  2647                           
  2648                           ;Movement.c: 113: CAP1BUFL=0;
  2649  000C1A  0E00               	movlw	0
  2650  000C1C  6E68               	movwf	3944,c	;volatile
  2651                           
  2652                           ;Movement.c: 114: CAP2BUFH=0;
  2653  000C1E  0E00               	movlw	0
  2654  000C20  6E67               	movwf	3943,c	;volatile
  2655                           
  2656                           ;Movement.c: 115: CAP2BUFL=0;
  2657  000C22  0E00               	movlw	0
  2658  000C24  6E66               	movwf	3942,c	;volatile
  2659                           
  2660                           ;Movement.c: 118: SendLCD(0b00000001,0);
  2661  000C26  0E00               	movlw	0
  2662  000C28  6E28               	movwf	SendLCD@type,c
  2663  000C2A  0E01               	movlw	1
  2664  000C2C  EC12  F00C         	call	_SendLCD
  2665                           
  2666                           ;Movement.c: 119: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2667  000C30  0E21               	movlw	33
  2668  000C32                     u2927:
  2669  000C32  2EE8               	decfsz	wreg,f,c
  2670  000C34  D7FE               	goto	u2927
  2671  000C36  F000               	nop	
  2672                           
  2673                           ;Movement.c: 120: SendLCD(0b00000010,0);
  2674  000C38  0E00               	movlw	0
  2675  000C3A  6E28               	movwf	SendLCD@type,c
  2676  000C3C  0E02               	movlw	2
  2677  000C3E  EC12  F00C         	call	_SendLCD
  2678                           
  2679                           ;Movement.c: 121: _delay((unsigned long)((2)*(8000000/4000.0)));
  2680  000C42  0E06               	movlw	6
  2681  000C44  0100               	movlb	0	; () banked
  2682  000C46  6F76               	movwf	??_ScanWithRange& (0+255),b
  2683  000C48  0E30               	movlw	48
  2684  000C4A                     u2937:
  2685  000C4A  2EE8               	decfsz	wreg,f,c
  2686  000C4C  D7FE               	goto	u2937
  2687  000C4E  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2688  000C50  D7FC               	goto	u2937
  2689  000C52  D000               	nop2	
  2690                           
  2691                           ;Movement.c: 122: SetLine(1);
  2692  000C54  0E01               	movlw	1
  2693  000C56  ECFA  F00B         	call	_SetLine
  2694                           
  2695                           ;Movement.c: 123: LCD_String("     ScanIR");
  2696  000C5A  0E39               	movlw	low STR_1
  2697  000C5C  6E2A               	movwf	LCD_String@string,c
  2698  000C5E  0E03               	movlw	high STR_1
  2699  000C60  6E2B               	movwf	LCD_String@string+1,c
  2700  000C62  ECBF  F00A         	call	_LCD_String	;wreg free
  2701                           
  2702                           ;Movement.c: 124: SetLine(2);
  2703  000C66  0E02               	movlw	2
  2704  000C68  ECFA  F00B         	call	_SetLine
  2705                           
  2706                           ;Movement.c: 125: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2707  000C6C  0E78               	movlw	low ScanWithRange@buf
  2708  000C6E  6E30               	movwf	sprintf@sp,c
  2709  000C70  0E00               	movlw	high ScanWithRange@buf
  2710  000C72  6E31               	movwf	sprintf@sp+1,c
  2711  000C74  0E0C               	movlw	low (STR_6+1)
  2712  000C76  6E32               	movwf	sprintf@f,c
  2713  000C78  0E03               	movlw	high (STR_6+1)
  2714  000C7A  6E33               	movwf	sprintf@f+1,c
  2715  000C7C  C0A7  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2716  000C80  C0A8  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2717  000C84  C0A9  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2718  000C88  C0AA  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2719  000C8C  EC39  F004         	call	_sprintf	;wreg free
  2720                           
  2721                           ;Movement.c: 126: LCD_String(buf);
  2722  000C90  0E78               	movlw	low ScanWithRange@buf
  2723  000C92  6E2A               	movwf	LCD_String@string,c
  2724  000C94  0E00               	movlw	high ScanWithRange@buf
  2725  000C96  6E2B               	movwf	LCD_String@string+1,c
  2726  000C98  ECBF  F00A         	call	_LCD_String	;wreg free
  2727                           
  2728                           ;Movement.c: 129: turnRight(mL,mR, 100);
  2729  000C9C  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2730  000CA0  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2731  000CA4  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2732  000CA8  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2733  000CAC  0E64               	movlw	100
  2734  000CAE  0100               	movlb	0	; () banked
  2735  000CB0  6F6B               	movwf	turnRight@power& (0+255),b
  2736  000CB2  ECEE  F00A         	call	_turnRight	;wreg free
  2737                           
  2738                           ;Movement.c: 130: _delay((unsigned long)((1)*(8000000/4000.0)));
  2739  000CB6  0E03               	movlw	3
  2740  000CB8  0100               	movlb	0	; () banked
  2741  000CBA  6F76               	movwf	??_ScanWithRange& (0+255),b
  2742  000CBC  0E98               	movlw	152
  2743  000CBE                     u2947:
  2744  000CBE  2EE8               	decfsz	wreg,f,c
  2745  000CC0  D7FE               	goto	u2947
  2746  000CC2  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2747  000CC4  D7FC               	goto	u2947
  2748                           
  2749                           ;Movement.c: 131: stop(mL,mR);
  2750  000CC6  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2751  000CCA  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2752  000CCE  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2753  000CD2  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2754  000CD6  EC3C  F009         	call	_stop	;wreg free
  2755                           
  2756                           ;Movement.c: 133: if (SensorResult[1]>DirectionFoundThreshold) {
  2757  000CDA  0100               	movlb	0	; () banked
  2758  000CDC  51A9               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2759  000CDE  0100               	movlb	0	; () banked
  2760  000CE0  5DA5               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2761  000CE2  0100               	movlb	0	; () banked
  2762  000CE4  51AA               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2763  000CE6  0100               	movlb	0	; () banked
  2764  000CE8  59A6               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2765  000CEA  B0D8               	btfsc	status,0,c
  2766  000CEC  D003               	goto	l3067
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;Movement.c: 134: RightFlag=1;
  2770  000CEE  0E01               	movlw	1
  2771  000CF0  0100               	movlb	0	; () banked
  2772  000CF2  6FAC               	movwf	ScanWithRange@RightFlag& (0+255),b
  2773  000CF4                     l3067:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;Movement.c: 135: }
  2777                           ;Movement.c: 137: if (SensorResult[0]>DirectionFoundThreshold) {
  2778  000CF4  0100               	movlb	0	; () banked
  2779  000CF6  51A7               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2780  000CF8  0100               	movlb	0	; () banked
  2781  000CFA  5DA5               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2782  000CFC  0100               	movlb	0	; () banked
  2783  000CFE  51A8               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2784  000D00  0100               	movlb	0	; () banked
  2785  000D02  59A6               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2786  000D04  B0D8               	btfsc	status,0,c
  2787  000D06  D003               	goto	l3071
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;Movement.c: 138: LeftFlag=1;
  2791  000D08  0E01               	movlw	1
  2792  000D0A  0100               	movlb	0	; () banked
  2793  000D0C  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2794  000D0E                     l3071:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;Movement.c: 139: }
  2798                           ;Movement.c: 142: if ((LeftFlag==1)||(RightFlag==1)) {
  2799  000D0E  0100               	movlb	0	; () banked
  2800  000D10  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2801  000D12  B4D8               	btfsc	status,2,c
  2802  000D14  D004               	goto	l3075
  2803                           
  2804                           ; BSR set to: 0
  2805  000D16  0100               	movlb	0	; () banked
  2806  000D18  05AC               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2807  000D1A  A4D8               	btfss	status,2,c
  2808  000D1C  D002               	goto	l3077
  2809  000D1E                     l3075:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;Movement.c: 143: TimeAboveThreshold++;
  2813  000D1E  0100               	movlb	0	; () banked
  2814  000D20  2BA0               	incf	ScanWithRange@TimeAboveThreshold& (0+255),f,b
  2815  000D22                     l3077:
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;Movement.c: 144: }
  2819                           ;Movement.c: 148: if ((LeftFlag==1)&&(RightFlag==1)) {
  2820  000D22  0100               	movlb	0	; () banked
  2821  000D24  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2822  000D26  A4D8               	btfss	status,2,c
  2823  000D28  D03E               	goto	l3095
  2824                           
  2825                           ; BSR set to: 0
  2826  000D2A  0100               	movlb	0	; () banked
  2827  000D2C  05AC               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2828  000D2E  A4D8               	btfss	status,2,c
  2829  000D30  D03A               	goto	l3095
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;Movement.c: 149: for (n=1; n<=(TimeAboveThreshold>>1); n++) {
  2833  000D32  0E00               	movlw	0
  2834  000D34  0100               	movlb	0	; () banked
  2835  000D36  6FA4               	movwf	(ScanWithRange@n+1)& (0+255),b
  2836  000D38  0E01               	movlw	1
  2837  000D3A  6FA3               	movwf	ScanWithRange@n& (0+255),b
  2838  000D3C  D022               	goto	l216
  2839  000D3E                     l3083:
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;Movement.c: 150: turnLeft(mL,mR, 100);
  2843  000D3E  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2844  000D42  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2845  000D46  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2846  000D4A  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2847  000D4E  0E64               	movlw	100
  2848  000D50  0100               	movlb	0	; () banked
  2849  000D52  6F6B               	movwf	turnLeft@power& (0+255),b
  2850  000D54  EC17  F00B         	call	_turnLeft	;wreg free
  2851                           
  2852                           ;Movement.c: 151: _delay((unsigned long)((1)*(8000000/4000.0)));
  2853  000D58  0E03               	movlw	3
  2854  000D5A  0100               	movlb	0	; () banked
  2855  000D5C  6F76               	movwf	??_ScanWithRange& (0+255),b
  2856  000D5E  0E98               	movlw	152
  2857  000D60                     u2957:
  2858  000D60  2EE8               	decfsz	wreg,f,c
  2859  000D62  D7FE               	goto	u2957
  2860  000D64  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2861  000D66  D7FC               	goto	u2957
  2862                           
  2863                           ;Movement.c: 152: stop(mL,mR);
  2864  000D68  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2865  000D6C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2866  000D70  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2867  000D74  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2868  000D78  EC3C  F009         	call	_stop	;wreg free
  2869  000D7C  0100               	movlb	0	; () banked
  2870  000D7E  4BA3               	infsnz	ScanWithRange@n& (0+255),f,b
  2871  000D80  2BA4               	incf	(ScanWithRange@n+1)& (0+255),f,b
  2872  000D82                     l216:
  2873                           
  2874                           ; BSR set to: 0
  2875  000D82  0100               	movlb	0	; () banked
  2876  000D84  90D8               	bcf	status,0,c
  2877  000D86  31A0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  2878  000D88  0100               	movlb	0	; () banked
  2879  000D8A  6F76               	movwf	??_ScanWithRange& (0+255),b
  2880  000D8C  6B77               	clrf	(??_ScanWithRange+1)& (0+255),b
  2881  000D8E  0100               	movlb	0	; () banked
  2882  000D90  51A3               	movf	ScanWithRange@n& (0+255),w,b
  2883  000D92  0100               	movlb	0	; () banked
  2884  000D94  5D76               	subwf	??_ScanWithRange& (0+255),w,b
  2885  000D96  0100               	movlb	0	; () banked
  2886  000D98  51A4               	movf	(ScanWithRange@n+1)& (0+255),w,b
  2887  000D9A  0100               	movlb	0	; () banked
  2888  000D9C  5977               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2889  000D9E  B0D8               	btfsc	status,0,c
  2890  000DA0  D7CE               	goto	l3083
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;Movement.c: 153: }
  2894                           ;Movement.c: 154: return 2;
  2895                           
  2896                           ; BSR set to: 0
  2897  000DA2  0E02               	movlw	2
  2898                           
  2899                           ; BSR set to: 0
  2900  000DA4  0012               	return	
  2901  000DA6                     l3095:
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;Movement.c: 155: }
  2905                           ;Movement.c: 158: if ((LeftFlag==1)&&(RightFlag==0)) {
  2906  000DA6  0100               	movlb	0	; () banked
  2907  000DA8  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2908  000DAA  A4D8               	btfss	status,2,c
  2909  000DAC  D007               	goto	l3103
  2910                           
  2911                           ; BSR set to: 0
  2912  000DAE  0100               	movlb	0	; () banked
  2913  000DB0  51AC               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2914  000DB2  0100               	movlb	0	; () banked
  2915  000DB4  A4D8               	btfss	status,2,c
  2916  000DB6  D002               	goto	l3103
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;Movement.c: 159: return 2;
  2920  000DB8  0E02               	movlw	2
  2921                           
  2922                           ; BSR set to: 0
  2923  000DBA  0012               	return	
  2924  000DBC                     l3103:
  2925                           
  2926                           ; BSR set to: 0
  2927  000DBC  0100               	movlb	0	; () banked
  2928  000DBE  4BA1               	infsnz	ScanWithRange@i& (0+255),f,b
  2929  000DC0  2BA2               	incf	(ScanWithRange@i+1)& (0+255),f,b
  2930  000DC2                     l3105:
  2931                           
  2932                           ; BSR set to: 0
  2933  000DC2  0100               	movlb	0	; () banked
  2934  000DC4  51A1               	movf	ScanWithRange@i& (0+255),w,b
  2935  000DC6  0100               	movlb	0	; () banked
  2936  000DC8  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  2937  000DCA  0100               	movlb	0	; () banked
  2938  000DCC  51A2               	movf	(ScanWithRange@i+1)& (0+255),w,b
  2939  000DCE  0100               	movlb	0	; () banked
  2940  000DD0  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  2941  000DD2  B0D8               	btfsc	status,0,c
  2942  000DD4  D714               	goto	l3033
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;Movement.c: 160: }
  2946                           ;Movement.c: 162: }
  2947                           ;Movement.c: 165: turnRight(mL,mR, 100);
  2948                           
  2949                           ; BSR set to: 0
  2950  000DD6  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2951  000DDA  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2952  000DDE  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2953  000DE2  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2954  000DE6  0E64               	movlw	100
  2955  000DE8  0100               	movlb	0	; () banked
  2956  000DEA  6F6B               	movwf	turnRight@power& (0+255),b
  2957  000DEC  ECEE  F00A         	call	_turnRight	;wreg free
  2958                           
  2959                           ;Movement.c: 166: delay_tenth_s(5);
  2960  000DF0  0E05               	movlw	5
  2961  000DF2  ECA9  F00B         	call	_delay_tenth_s
  2962                           
  2963                           ;Movement.c: 167: stop(mL,mR);
  2964  000DF6  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2965  000DFA  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2966  000DFE  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2967  000E02  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2968  000E06  EC3C  F009         	call	_stop	;wreg free
  2969                           
  2970                           ;Movement.c: 168: return -1;
  2971  000E0A  0EFF               	movlw	255
  2972  000E0C  0012               	return	
  2973  000E0E                     __end_of_ScanWithRange:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           prodh	equ	0xFF4
  2977                           prodl	equ	0xFF3
  2978                           intcon	equ	0xFF2
  2979                           postinc0	equ	0xFEE
  2980                           wreg	equ	0xFE8
  2981                           indf1	equ	0xFE7
  2982                           fsr1h	equ	0xFE2
  2983                           fsr1l	equ	0xFE1
  2984                           indf2	equ	0xFDF
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function _turnRight *****************
  2990 ;; Defined at:
  2991 ;;		line 98 in file "dc_motor.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2994 ;;		 -> main@mL(9), 
  2995 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2996 ;;		 -> main@mR(9), 
  2997 ;;  power           1   11[BANK0 ] unsigned char 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;		None               void
  3002 ;; Registers used:
  3003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3009 ;;      Params:         0       5       0       0
  3010 ;;      Locals:         0       0       0       0
  3011 ;;      Temps:          0       0       0       0
  3012 ;;      Totals:         0       5       0       0
  3013 ;;Total ram usage:        5 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    6
  3016 ;; This function calls:
  3017 ;;		_fullSpeedAhead
  3018 ;;		_stop
  3019 ;; This function is called by:
  3020 ;;		_ScanWithRange
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text9
  3025  0015DC                     __ptext9:
  3026                           	opt stack 0
  3027  0015DC                     _turnRight:
  3028                           	opt stack 23
  3029                           
  3030                           ;dc_motor.c: 100: stop(mL, mR);
  3031                           
  3032                           ;incstack = 0
  3033  0015DC  C067  F062         	movff	turnRight@mL,stop@mL
  3034  0015E0  C068  F063         	movff	turnRight@mL+1,stop@mL+1
  3035  0015E4  C069  F064         	movff	turnRight@mR,stop@mR
  3036  0015E8  C06A  F065         	movff	turnRight@mR+1,stop@mR+1
  3037  0015EC  EC3C  F009         	call	_stop	;wreg free
  3038                           
  3039                           ;dc_motor.c: 102: mL->direction=0;
  3040  0015F0  0100               	movlb	0	; () banked
  3041  0015F2  EE20 F001          	lfsr	2,1
  3042  0015F6  5167               	movf	turnRight@mL& (0+255),w,b
  3043  0015F8  26D9               	addwf	fsr2l,f,c
  3044  0015FA  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3045  0015FC  22DA               	addwfc	fsr2h,f,c
  3046  0015FE  0E00               	movlw	0
  3047  001600  6EDF               	movwf	indf2,c
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;dc_motor.c: 103: mR->direction=1;
  3051  001602  0100               	movlb	0	; () banked
  3052  001604  EE20 F001          	lfsr	2,1
  3053  001608  5169               	movf	turnRight@mR& (0+255),w,b
  3054  00160A  26D9               	addwf	fsr2l,f,c
  3055  00160C  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3056  00160E  22DA               	addwfc	fsr2h,f,c
  3057  001610  0E01               	movlw	1
  3058  001612  6EDF               	movwf	indf2,c
  3059                           
  3060                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3061  001614  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3062  001618  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3063  00161C  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3064  001620  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3065  001624  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3066  001628  EC0D  F00A         	call	_fullSpeedAhead	;wreg free
  3067  00162C  0012               	return		;funcret
  3068  00162E                     __end_of_turnRight:
  3069                           	opt stack 0
  3070                           tblptru	equ	0xFF8
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           intcon	equ	0xFF2
  3074                           postinc0	equ	0xFEE
  3075                           wreg	equ	0xFE8
  3076                           indf1	equ	0xFE7
  3077                           fsr1h	equ	0xFE2
  3078                           fsr1l	equ	0xFE1
  3079                           indf2	equ	0xFDF
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _turnLeft *****************
  3085 ;; Defined at:
  3086 ;;		line 87 in file "dc_motor.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3089 ;;		 -> main@mL(9), 
  3090 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3091 ;;		 -> main@mR(9), 
  3092 ;;  power           1   11[BANK0 ] unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;		None
  3095 ;; Return value:  Size  Location     Type
  3096 ;;		None               void
  3097 ;; Registers used:
  3098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3104 ;;      Params:         0       5       0       0
  3105 ;;      Locals:         0       0       0       0
  3106 ;;      Temps:          0       0       0       0
  3107 ;;      Totals:         0       5       0       0
  3108 ;;Total ram usage:        5 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    6
  3111 ;; This function calls:
  3112 ;;		_fullSpeedAhead
  3113 ;;		_stop
  3114 ;; This function is called by:
  3115 ;;		_ScanWithRange
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text10
  3120  00162E                     __ptext10:
  3121                           	opt stack 0
  3122  00162E                     _turnLeft:
  3123                           	opt stack 23
  3124                           
  3125                           ;dc_motor.c: 89: stop(mL, mR);
  3126                           
  3127                           ;incstack = 0
  3128  00162E  C067  F062         	movff	turnLeft@mL,stop@mL
  3129  001632  C068  F063         	movff	turnLeft@mL+1,stop@mL+1
  3130  001636  C069  F064         	movff	turnLeft@mR,stop@mR
  3131  00163A  C06A  F065         	movff	turnLeft@mR+1,stop@mR+1
  3132  00163E  EC3C  F009         	call	_stop	;wreg free
  3133                           
  3134                           ;dc_motor.c: 91: mL->direction=1;
  3135  001642  0100               	movlb	0	; () banked
  3136  001644  EE20 F001          	lfsr	2,1
  3137  001648  5167               	movf	turnLeft@mL& (0+255),w,b
  3138  00164A  26D9               	addwf	fsr2l,f,c
  3139  00164C  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3140  00164E  22DA               	addwfc	fsr2h,f,c
  3141  001650  0E01               	movlw	1
  3142  001652  6EDF               	movwf	indf2,c
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;dc_motor.c: 92: mR->direction=0;
  3146  001654  0100               	movlb	0	; () banked
  3147  001656  EE20 F001          	lfsr	2,1
  3148  00165A  5169               	movf	turnLeft@mR& (0+255),w,b
  3149  00165C  26D9               	addwf	fsr2l,f,c
  3150  00165E  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3151  001660  22DA               	addwfc	fsr2h,f,c
  3152  001662  0E00               	movlw	0
  3153  001664  6EDF               	movwf	indf2,c
  3154                           
  3155                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3156  001666  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3157  00166A  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3158  00166E  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3159  001672  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3160  001676  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3161  00167A  EC0D  F00A         	call	_fullSpeedAhead	;wreg free
  3162  00167E  0012               	return		;funcret
  3163  001680                     __end_of_turnLeft:
  3164                           	opt stack 0
  3165                           tblptru	equ	0xFF8
  3166                           prodh	equ	0xFF4
  3167                           prodl	equ	0xFF3
  3168                           intcon	equ	0xFF2
  3169                           postinc0	equ	0xFEE
  3170                           wreg	equ	0xFE8
  3171                           indf1	equ	0xFE7
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           indf2	equ	0xFDF
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function _fullSpeedAhead *****************
  3180 ;; Defined at:
  3181 ;;		line 108 in file "dc_motor.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3184 ;;		 -> main@mL(9), 
  3185 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3186 ;;		 -> main@mR(9), 
  3187 ;;  power           1    6[BANK0 ] unsigned char 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3199 ;;      Params:         0       5       0       0
  3200 ;;      Locals:         0       0       0       0
  3201 ;;      Temps:          1       0       0       0
  3202 ;;      Totals:         1       5       0       0
  3203 ;;Total ram usage:        6 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    5
  3206 ;; This function calls:
  3207 ;;		_setMotorPWM
  3208 ;; This function is called by:
  3209 ;;		_turnLeft
  3210 ;;		_turnRight
  3211 ;;		_fullSpeedBack
  3212 ;;		_main
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text11
  3217  00141A                     __ptext11:
  3218                           	opt stack 0
  3219  00141A                     _fullSpeedAhead:
  3220                           	opt stack 24
  3221                           
  3222                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3223                           
  3224                           ;incstack = 0
  3225  00141A  D02C               	goto	l65
  3226  00141C                     l2831:
  3227                           
  3228                           ;dc_motor.c: 112: if(mL->power<power){
  3229  00141C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3230  001420  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3231  001424  0100               	movlb	0	; () banked
  3232  001426  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3233  001428  5CDE               	subwf	postinc2,w,c
  3234  00142A  B0D8               	btfsc	status,0,c
  3235  00142C  D005               	goto	l2835
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;dc_motor.c: 113: mL->power++;
  3239  00142E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3240  001432  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3241  001436  2ADF               	incf	indf2,f,c
  3242  001438                     l2835:
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;dc_motor.c: 114: }
  3246                           ;dc_motor.c: 115: if(mR->power<power){
  3247  001438  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3248  00143C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3249  001440  0100               	movlb	0	; () banked
  3250  001442  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3251  001444  5CDE               	subwf	postinc2,w,c
  3252  001446  B0D8               	btfsc	status,0,c
  3253  001448  D005               	goto	l2839
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;dc_motor.c: 116: mR->power++;
  3257  00144A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3258  00144E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3259  001452  2ADF               	incf	indf2,f,c
  3260  001454                     l2839:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;dc_motor.c: 117: }
  3264                           ;dc_motor.c: 118: setMotorPWM(mL);
  3265  001454  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3266  001458  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3267  00145C  EC07  F007         	call	_setMotorPWM	;wreg free
  3268                           
  3269                           ;dc_motor.c: 119: setMotorPWM(mR);
  3270  001460  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3271  001464  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3272  001468  EC07  F007         	call	_setMotorPWM	;wreg free
  3273                           
  3274                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3275  00146C  0E21               	movlw	33
  3276  00146E                     u2967:
  3277  00146E  2EE8               	decfsz	wreg,f,c
  3278  001470  D7FE               	goto	u2967
  3279  001472  F000               	nop	
  3280  001474                     l65:
  3281  001474  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3282  001478  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3283  00147C  0100               	movlb	0	; () banked
  3284  00147E  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3285  001480  5CDE               	subwf	postinc2,w,c
  3286  001482  A0D8               	btfss	status,0,c
  3287  001484  D7CB               	goto	l2831
  3288                           
  3289                           ; BSR set to: 0
  3290  001486  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3291  00148A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3292  00148E  0100               	movlb	0	; () banked
  3293  001490  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3294  001492  5CDE               	subwf	postinc2,w,c
  3295  001494  B0D8               	btfsc	status,0,c
  3296  001496  0012               	return	
  3297  001498  D7C1               	goto	l2831
  3298  00149A                     __end_of_fullSpeedAhead:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           indf1	equ	0xFE7
  3307                           fsr1h	equ	0xFE2
  3308                           fsr1l	equ	0xFE1
  3309                           indf2	equ	0xFDF
  3310                           postinc2	equ	0xFDE
  3311                           fsr2h	equ	0xFDA
  3312                           fsr2l	equ	0xFD9
  3313                           status	equ	0xFD8
  3314                           
  3315 ;; *************** function _delay_tenth_s *****************
  3316 ;; Defined at:
  3317 ;;		line 21 in file "Movement.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  tenth_second    1    wreg     unsigned char 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3322 ;;  i               2   37[COMRAM] unsigned int 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;		None               void
  3325 ;; Registers used:
  3326 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3332 ;;      Params:         0       0       0       0
  3333 ;;      Locals:         3       0       0       0
  3334 ;;      Temps:          1       0       0       0
  3335 ;;      Totals:         4       0       0       0
  3336 ;;Total ram usage:        4 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    3
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_ScanWithRange
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text12
  3348  001752                     __ptext12:
  3349                           	opt stack 0
  3350  001752                     _delay_tenth_s:
  3351                           	opt stack 27
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;incstack = 0
  3355                           ;delay_tenth_s@tenth_seconds stored from wreg
  3356  001752  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3357                           
  3358                           ;Movement.c: 22: unsigned int i=0;
  3359  001754  0E00               	movlw	0
  3360  001756  6E27               	movwf	delay_tenth_s@i+1,c
  3361  001758  0E00               	movlw	0
  3362  00175A  6E26               	movwf	delay_tenth_s@i,c
  3363                           
  3364                           ;Movement.c: 23: for (i=1; i<=tenth_seconds*2; i++) {
  3365  00175C  0E00               	movlw	0
  3366  00175E  6E27               	movwf	delay_tenth_s@i+1,c
  3367  001760  0E01               	movlw	1
  3368  001762  6E26               	movwf	delay_tenth_s@i,c
  3369  001764  D009               	goto	l2159
  3370  001766                     l2155:
  3371                           
  3372                           ;Movement.c: 25: _delay((unsigned long)((50)*(8000000/4000.0)));
  3373  001766  0E82               	movlw	130
  3374  001768  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3375  00176A  0EDE               	movlw	222
  3376  00176C                     u2977:
  3377  00176C  2EE8               	decfsz	wreg,f,c
  3378  00176E  D7FE               	goto	u2977
  3379  001770  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3380  001772  D7FC               	goto	u2977
  3381  001774  4A26               	infsnz	delay_tenth_s@i,f,c
  3382  001776  2A27               	incf	delay_tenth_s@i+1,f,c
  3383  001778                     l2159:
  3384  001778  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3385  00177A  0D02               	mullw	2
  3386  00177C  5026               	movf	delay_tenth_s@i,w,c
  3387  00177E  5CF3               	subwf	prodl,w,c
  3388  001780  5027               	movf	delay_tenth_s@i+1,w,c
  3389  001782  58F4               	subwfb	prodh,w,c
  3390  001784  A0D8               	btfss	status,0,c
  3391  001786  0012               	return	
  3392  001788  D7EE               	goto	l2155
  3393  00178A                     __end_of_delay_tenth_s:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           intcon	equ	0xFF2
  3399                           postinc0	equ	0xFEE
  3400                           wreg	equ	0xFE8
  3401                           indf1	equ	0xFE7
  3402                           fsr1h	equ	0xFE2
  3403                           fsr1l	equ	0xFE1
  3404                           indf2	equ	0xFDF
  3405                           postinc2	equ	0xFDE
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function _ScanIR *****************
  3411 ;; Defined at:
  3412 ;;		line 34 in file "Movement.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3415 ;;		 -> main@mL(9), 
  3416 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3417 ;;		 -> main@mR(9), 
  3418 ;;  TurnDirectio    1   17[BANK0 ] unsigned char 
  3419 ;;  Move            2   18[BANK0 ] PTR unsigned char 
  3420 ;;		 -> main@Move(1), 
  3421 ;;  MoveTime        2   20[BANK0 ] PTR unsigned char 
  3422 ;;		 -> main@MoveTime(100), 
  3423 ;;  MoveType        2   22[BANK0 ] PTR unsigned char 
  3424 ;;		 -> main@MoveType(100), 
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  buf            40   24[BANK0 ] unsigned char [40]
  3427 ;;  SensorResult    4   66[BANK0 ] unsigned int [2]
  3428 ;;  DirectionMov    2   64[BANK0 ] const unsigned int 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      unsigned char 
  3431 ;; Registers used:
  3432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3438 ;;      Params:         0      11       0       0
  3439 ;;      Locals:         0      46       0       0
  3440 ;;      Temps:          1       0       0       0
  3441 ;;      Totals:         1      57       0       0
  3442 ;;Total ram usage:       58 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    7
  3445 ;; This function calls:
  3446 ;;		_LCD_String
  3447 ;;		_SendLCD
  3448 ;;		_SetLine
  3449 ;;		_grabLeftIR
  3450 ;;		_grabRightIR
  3451 ;;		_sprintf
  3452 ;;		_stop
  3453 ;; This function is called by:
  3454 ;;		_main
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text13
  3459  000F48                     __ptext13:
  3460                           	opt stack 0
  3461  000F48                     _ScanIR:
  3462                           	opt stack 23
  3463                           
  3464                           ;Movement.c: 37: unsigned int SensorResult[2]={0,0};
  3465                           
  3466                           ;incstack = 0
  3467  000F48  C0B8  F0A2         	movff	ScanIR@F3882,ScanIR@SensorResult
  3468  000F4C  C0B9  F0A3         	movff	ScanIR@F3882+1,ScanIR@SensorResult+1
  3469  000F50  C0BA  F0A4         	movff	ScanIR@F3882+2,ScanIR@SensorResult+2
  3470  000F54  C0BB  F0A5         	movff	ScanIR@F3882+3,ScanIR@SensorResult+3
  3471                           
  3472                           ;Movement.c: 38: char buf[40];
  3473                           ;Movement.c: 41: const unsigned int DirectionMoveThreshold=2500;
  3474  000F58  0E09               	movlw	9
  3475  000F5A  0100               	movlb	0	; () banked
  3476  000F5C  6FA1               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3477  000F5E  0EC4               	movlw	196
  3478  000F60  6FA0               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;Movement.c: 44: SensorResult[0]=grabLeftIR();
  3482  000F62  EC86  F00A         	call	_grabLeftIR	;wreg free
  3483  000F66  C024  F0A2         	movff	?_grabLeftIR,ScanIR@SensorResult
  3484  000F6A  C025  F0A3         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3485                           
  3486                           ;Movement.c: 45: SensorResult[1]=grabRightIR();
  3487  000F6E  EC4D  F00A         	call	_grabRightIR	;wreg free
  3488  000F72  C024  F0A4         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3489  000F76  C025  F0A5         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3490                           
  3491                           ;Movement.c: 49: CAP1BUFH=0;
  3492  000F7A  0E00               	movlw	0
  3493  000F7C  6E69               	movwf	3945,c	;volatile
  3494                           
  3495                           ;Movement.c: 50: CAP1BUFL=0;
  3496  000F7E  0E00               	movlw	0
  3497  000F80  6E68               	movwf	3944,c	;volatile
  3498                           
  3499                           ;Movement.c: 51: CAP2BUFH=0;
  3500  000F82  0E00               	movlw	0
  3501  000F84  6E67               	movwf	3943,c	;volatile
  3502                           
  3503                           ;Movement.c: 52: CAP2BUFL=0;
  3504  000F86  0E00               	movlw	0
  3505  000F88  6E66               	movwf	3942,c	;volatile
  3506                           
  3507                           ;Movement.c: 55: SendLCD(0b00000001,0);
  3508  000F8A  0E00               	movlw	0
  3509  000F8C  6E28               	movwf	SendLCD@type,c
  3510  000F8E  0E01               	movlw	1
  3511  000F90  EC12  F00C         	call	_SendLCD
  3512                           
  3513                           ;Movement.c: 56: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3514  000F94  0E21               	movlw	33
  3515  000F96                     u2987:
  3516  000F96  2EE8               	decfsz	wreg,f,c
  3517  000F98  D7FE               	goto	u2987
  3518  000F9A  F000               	nop	
  3519                           
  3520                           ;Movement.c: 57: SendLCD(0b00000010,0);
  3521  000F9C  0E00               	movlw	0
  3522  000F9E  6E28               	movwf	SendLCD@type,c
  3523  000FA0  0E02               	movlw	2
  3524  000FA2  EC12  F00C         	call	_SendLCD
  3525                           
  3526                           ;Movement.c: 58: _delay((unsigned long)((2)*(8000000/4000.0)));
  3527  000FA6  0E06               	movlw	6
  3528  000FA8  6E39               	movwf	??_ScanIR& (0+255),c
  3529  000FAA  0E30               	movlw	48
  3530  000FAC                     u2997:
  3531  000FAC  2EE8               	decfsz	wreg,f,c
  3532  000FAE  D7FE               	goto	u2997
  3533  000FB0  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3534  000FB2  D7FC               	goto	u2997
  3535  000FB4  D000               	nop2	
  3536                           
  3537                           ;Movement.c: 59: SetLine(1);
  3538  000FB6  0E01               	movlw	1
  3539  000FB8  ECFA  F00B         	call	_SetLine
  3540                           
  3541                           ;Movement.c: 60: LCD_String("     ScanIR");
  3542  000FBC  0E39               	movlw	low STR_1
  3543  000FBE  6E2A               	movwf	LCD_String@string,c
  3544  000FC0  0E03               	movlw	high STR_1
  3545  000FC2  6E2B               	movwf	LCD_String@string+1,c
  3546  000FC4  ECBF  F00A         	call	_LCD_String	;wreg free
  3547                           
  3548                           ;Movement.c: 61: SetLine(2);
  3549  000FC8  0E02               	movlw	2
  3550  000FCA  ECFA  F00B         	call	_SetLine
  3551                           
  3552                           ;Movement.c: 62: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3553  000FCE  0E78               	movlw	low ScanIR@buf
  3554  000FD0  6E30               	movwf	sprintf@sp,c
  3555  000FD2  0E00               	movlw	high ScanIR@buf
  3556  000FD4  6E31               	movwf	sprintf@sp+1,c
  3557  000FD6  0E0C               	movlw	low (STR_6+1)
  3558  000FD8  6E32               	movwf	sprintf@f,c
  3559  000FDA  0E03               	movlw	high (STR_6+1)
  3560  000FDC  6E33               	movwf	sprintf@f+1,c
  3561  000FDE  C0A2  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3562  000FE2  C0A3  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3563  000FE6  C0A4  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3564  000FEA  C0A5  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3565  000FEE  EC39  F004         	call	_sprintf	;wreg free
  3566                           
  3567                           ;Movement.c: 63: LCD_String(buf);
  3568  000FF2  0E78               	movlw	low ScanIR@buf
  3569  000FF4  6E2A               	movwf	LCD_String@string,c
  3570  000FF6  0E00               	movlw	high ScanIR@buf
  3571  000FF8  6E2B               	movwf	LCD_String@string+1,c
  3572  000FFA  ECBF  F00A         	call	_LCD_String	;wreg free
  3573                           
  3574                           ;Movement.c: 67: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>Directio
      +                          nMoveThreshold)) {
  3575  000FFE  0100               	movlb	0	; () banked
  3576  001000  51A2               	movf	ScanIR@SensorResult& (0+255),w,b
  3577  001002  0100               	movlb	0	; () banked
  3578  001004  5DA0               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3579  001006  0100               	movlb	0	; () banked
  3580  001008  51A3               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3581  00100A  0100               	movlb	0	; () banked
  3582  00100C  59A1               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3583  00100E  B0D8               	btfsc	status,0,c
  3584  001010  D00C               	goto	l3013
  3585                           
  3586                           ; BSR set to: 0
  3587  001012  0100               	movlb	0	; () banked
  3588  001014  51A4               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3589  001016  0100               	movlb	0	; () banked
  3590  001018  5DA0               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3591  00101A  0100               	movlb	0	; () banked
  3592  00101C  51A5               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3593  00101E  0100               	movlb	0	; () banked
  3594  001020  59A1               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3595  001022  B0D8               	btfsc	status,0,c
  3596  001024  D002               	goto	l3013
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;Movement.c: 68: return 2;
  3600  001026  0E02               	movlw	2
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;Movement.c: 69: } else {
  3604                           
  3605                           ; BSR set to: 0
  3606  001028  0012               	return	
  3607  00102A                     l3013:
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;Movement.c: 70: stop(mL,mR);
  3611  00102A  C06D  F062         	movff	ScanIR@mL,stop@mL
  3612  00102E  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3613  001032  C06F  F064         	movff	ScanIR@mR,stop@mR
  3614  001036  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3615  00103A  EC3C  F009         	call	_stop	;wreg free
  3616                           
  3617                           ;Movement.c: 71: return 0;
  3618  00103E  0E00               	movlw	0
  3619  001040  0012               	return	
  3620  001042                     __end_of_ScanIR:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           postinc0	equ	0xFEE
  3627                           wreg	equ	0xFE8
  3628                           indf1	equ	0xFE7
  3629                           fsr1h	equ	0xFE2
  3630                           fsr1l	equ	0xFE1
  3631                           indf2	equ	0xFDF
  3632                           postinc2	equ	0xFDE
  3633                           fsr2h	equ	0xFDA
  3634                           fsr2l	equ	0xFD9
  3635                           status	equ	0xFD8
  3636                           
  3637 ;; *************** function _stop *****************
  3638 ;; Defined at:
  3639 ;;		line 67 in file "dc_motor.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3642 ;;		 -> main@mL(9), 
  3643 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3644 ;;		 -> main@mR(9), 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;		None               void
  3649 ;; Registers used:
  3650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3656 ;;      Params:         0       4       0       0
  3657 ;;      Locals:         0       0       0       0
  3658 ;;      Temps:          0       0       0       0
  3659 ;;      Totals:         0       4       0       0
  3660 ;;Total ram usage:        4 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    5
  3663 ;; This function calls:
  3664 ;;		_setMotorPWM
  3665 ;; This function is called by:
  3666 ;;		_turnLeft
  3667 ;;		_turnRight
  3668 ;;		_ScanIR
  3669 ;;		_ScanWithRange
  3670 ;;		_main
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text14
  3675  001278                     __ptext14:
  3676                           	opt stack 0
  3677  001278                     _stop:
  3678                           	opt stack 25
  3679                           
  3680                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3681                           
  3682                           ;incstack = 0
  3683  001278  D028               	goto	l2823
  3684  00127A                     l2809:
  3685                           
  3686                           ;dc_motor.c: 71: if(mL->power>0){
  3687  00127A  C062  FFD9         	movff	stop@mL,fsr2l
  3688  00127E  C063  FFDA         	movff	stop@mL+1,fsr2h
  3689  001282  50DF               	movf	indf2,w,c
  3690  001284  B4D8               	btfsc	status,2,c
  3691  001286  D005               	goto	l2813
  3692                           
  3693                           ;dc_motor.c: 72: mL->power--;
  3694  001288  C062  FFD9         	movff	stop@mL,fsr2l
  3695  00128C  C063  FFDA         	movff	stop@mL+1,fsr2h
  3696  001290  06DF               	decf	indf2,f,c
  3697  001292                     l2813:
  3698                           
  3699                           ;dc_motor.c: 73: }
  3700                           ;dc_motor.c: 74: if(mR->power>0){
  3701  001292  C064  FFD9         	movff	stop@mR,fsr2l
  3702  001296  C065  FFDA         	movff	stop@mR+1,fsr2h
  3703  00129A  50DF               	movf	indf2,w,c
  3704  00129C  B4D8               	btfsc	status,2,c
  3705  00129E  D005               	goto	l2817
  3706                           
  3707                           ;dc_motor.c: 75: mR->power--;
  3708  0012A0  C064  FFD9         	movff	stop@mR,fsr2l
  3709  0012A4  C065  FFDA         	movff	stop@mR+1,fsr2h
  3710  0012A8  06DF               	decf	indf2,f,c
  3711  0012AA                     l2817:
  3712                           
  3713                           ;dc_motor.c: 76: }
  3714                           ;dc_motor.c: 77: setMotorPWM(mL);
  3715  0012AA  C062  F032         	movff	stop@mL,setMotorPWM@m
  3716  0012AE  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3717  0012B2  EC07  F007         	call	_setMotorPWM	;wreg free
  3718                           
  3719                           ;dc_motor.c: 78: setMotorPWM(mR);
  3720  0012B6  C064  F032         	movff	stop@mR,setMotorPWM@m
  3721  0012BA  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3722  0012BE  EC07  F007         	call	_setMotorPWM	;wreg free
  3723                           
  3724                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3725  0012C2  0E21               	movlw	33
  3726  0012C4                     u3007:
  3727  0012C4  2EE8               	decfsz	wreg,f,c
  3728  0012C6  D7FE               	goto	u3007
  3729  0012C8  F000               	nop	
  3730  0012CA                     l2823:
  3731  0012CA  C062  FFD9         	movff	stop@mL,fsr2l
  3732  0012CE  C063  FFDA         	movff	stop@mL+1,fsr2h
  3733  0012D2  50DF               	movf	indf2,w,c
  3734  0012D4  A4D8               	btfss	status,2,c
  3735  0012D6  D7D1               	goto	l2809
  3736  0012D8  C064  FFD9         	movff	stop@mR,fsr2l
  3737  0012DC  C065  FFDA         	movff	stop@mR+1,fsr2h
  3738  0012E0  50DF               	movf	indf2,w,c
  3739  0012E2  A4D8               	btfss	status,2,c
  3740  0012E4  D7CA               	goto	l2809
  3741                           
  3742                           ;dc_motor.c: 80: }
  3743                           ;dc_motor.c: 81: mL->direction=1;
  3744  0012E6  0100               	movlb	0	; () banked
  3745  0012E8  EE20 F001          	lfsr	2,1
  3746  0012EC  5162               	movf	stop@mL& (0+255),w,b
  3747  0012EE  26D9               	addwf	fsr2l,f,c
  3748  0012F0  5163               	movf	(stop@mL+1)& (0+255),w,b
  3749  0012F2  22DA               	addwfc	fsr2h,f,c
  3750  0012F4  0E01               	movlw	1
  3751  0012F6  6EDF               	movwf	indf2,c
  3752                           
  3753                           ;dc_motor.c: 82: mR->direction=1;
  3754  0012F8  0100               	movlb	0	; () banked
  3755  0012FA  EE20 F001          	lfsr	2,1
  3756  0012FE  5164               	movf	stop@mR& (0+255),w,b
  3757  001300  26D9               	addwf	fsr2l,f,c
  3758  001302  5165               	movf	(stop@mR+1)& (0+255),w,b
  3759  001304  22DA               	addwfc	fsr2h,f,c
  3760  001306  0E01               	movlw	1
  3761  001308  6EDF               	movwf	indf2,c
  3762                           
  3763                           ; BSR set to: 0
  3764  00130A  0012               	return		;funcret
  3765  00130C                     __end_of_stop:
  3766                           	opt stack 0
  3767                           tblptru	equ	0xFF8
  3768                           prodh	equ	0xFF4
  3769                           prodl	equ	0xFF3
  3770                           intcon	equ	0xFF2
  3771                           postinc0	equ	0xFEE
  3772                           wreg	equ	0xFE8
  3773                           indf1	equ	0xFE7
  3774                           fsr1h	equ	0xFE2
  3775                           fsr1l	equ	0xFE1
  3776                           indf2	equ	0xFDF
  3777                           postinc2	equ	0xFDE
  3778                           fsr2h	equ	0xFDA
  3779                           fsr2l	equ	0xFD9
  3780                           status	equ	0xFD8
  3781                           
  3782 ;; *************** function _setMotorPWM *****************
  3783 ;; Defined at:
  3784 ;;		line 26 in file "dc_motor.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3787 ;;		 -> main@mR(9), main@mL(9), 
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;  PWMduty         2    0[BANK0 ] int 
  3790 ;; Return value:  Size  Location     Type
  3791 ;;		None               void
  3792 ;; Registers used:
  3793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3794 ;; Tracked objects:
  3795 ;;		On entry : 0/0
  3796 ;;		On exit  : 0/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3799 ;;      Params:         2       0       0       0
  3800 ;;      Locals:         0       2       0       0
  3801 ;;      Temps:          5       0       0       0
  3802 ;;      Totals:         7       2       0       0
  3803 ;;Total ram usage:        9 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; Hardware stack levels required when called:    4
  3806 ;; This function calls:
  3807 ;;		___awdiv
  3808 ;;		___wmul
  3809 ;; This function is called by:
  3810 ;;		_stop
  3811 ;;		_fullSpeedAhead
  3812 ;;		_setMotorFullSpeed
  3813 ;;		_stopMotor
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text15
  3818  000E0E                     __ptext15:
  3819                           	opt stack 0
  3820  000E0E                     _setMotorPWM:
  3821                           	opt stack 25
  3822                           
  3823                           ;dc_motor.c: 28: int PWMduty;
  3824                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;incstack = 0
  3828  000E0E  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  3829  000E12  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3830  000E16  50DF               	movf	indf2,w,c
  3831  000E18  6E34               	movwf	??_setMotorPWM& (0+255),c
  3832  000E1A  5034               	movf	??_setMotorPWM,w,c
  3833  000E1C  6E24               	movwf	___wmul@multiplier,c
  3834  000E1E  6A25               	clrf	___wmul@multiplier+1,c
  3835  000E20  EE20 F007          	lfsr	2,7
  3836  000E24  5032               	movf	setMotorPWM@m,w,c
  3837  000E26  26D9               	addwf	fsr2l,f,c
  3838  000E28  5033               	movf	setMotorPWM@m+1,w,c
  3839  000E2A  22DA               	addwfc	fsr2h,f,c
  3840  000E2C  CFDE F026          	movff	postinc2,___wmul@multiplicand
  3841  000E30  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  3842  000E34  EC52  F00C         	call	___wmul	;wreg free
  3843  000E38  C024  F02A         	movff	?___wmul,___awdiv@dividend
  3844  000E3C  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  3845  000E40  0E00               	movlw	0
  3846  000E42  6E2D               	movwf	___awdiv@divisor+1,c
  3847  000E44  0E64               	movlw	100
  3848  000E46  6E2C               	movwf	___awdiv@divisor,c
  3849  000E48  ECCB  F009         	call	___awdiv	;wreg free
  3850  000E4C  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  3851  000E50  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3852                           
  3853                           ;dc_motor.c: 32: if (m->direction)
  3854  000E54  EE20 F001          	lfsr	2,1
  3855  000E58  5032               	movf	setMotorPWM@m,w,c
  3856  000E5A  26D9               	addwf	fsr2l,f,c
  3857  000E5C  5033               	movf	setMotorPWM@m+1,w,c
  3858  000E5E  22DA               	addwfc	fsr2h,f,c
  3859  000E60  50DF               	movf	indf2,w,c
  3860  000E62  B4D8               	btfsc	status,2,c
  3861  000E64  D02E               	goto	l2805
  3862                           
  3863                           ;dc_motor.c: 33: {
  3864                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3865  000E66  EE20 F006          	lfsr	2,6
  3866  000E6A  5032               	movf	setMotorPWM@m,w,c
  3867  000E6C  26D9               	addwf	fsr2l,f,c
  3868  000E6E  5033               	movf	setMotorPWM@m+1,w,c
  3869  000E70  22DA               	addwfc	fsr2h,f,c
  3870  000E72  50DF               	movf	indf2,w,c
  3871  000E74  6E34               	movwf	??_setMotorPWM& (0+255),c
  3872  000E76  0E01               	movlw	1
  3873  000E78  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3874  000E7A  2A34               	incf	??_setMotorPWM,f,c
  3875  000E7C  D002               	goto	u2224
  3876  000E7E                     u2225:
  3877  000E7E  90D8               	bcf	status,0,c
  3878  000E80  3635               	rlcf	??_setMotorPWM+1,f,c
  3879  000E82                     u2224:
  3880  000E82  2E34               	decfsz	??_setMotorPWM,f,c
  3881  000E84  D7FC               	goto	u2225
  3882  000E86  5035               	movf	??_setMotorPWM+1,w,c
  3883  000E88  108A               	iorwf	3978,w,c	;volatile
  3884  000E8A  6E8A               	movwf	3978,c	;volatile
  3885                           
  3886                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3887  000E8C  EE20 F007          	lfsr	2,7
  3888  000E90  5032               	movf	setMotorPWM@m,w,c
  3889  000E92  26D9               	addwf	fsr2l,f,c
  3890  000E94  5033               	movf	setMotorPWM@m+1,w,c
  3891  000E96  22DA               	addwfc	fsr2h,f,c
  3892  000E98  CFDE F034          	movff	postinc2,??_setMotorPWM
  3893  000E9C  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3894  000EA0  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3895  000EA4  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3896  000EA8  1E36               	comf	??_setMotorPWM+2,f,c
  3897  000EAA  1E37               	comf	??_setMotorPWM+3,f,c
  3898  000EAC  4A36               	infsnz	??_setMotorPWM+2,f,c
  3899  000EAE  2A37               	incf	??_setMotorPWM+3,f,c
  3900  000EB0  5034               	movf	??_setMotorPWM,w,c
  3901  000EB2  2436               	addwf	??_setMotorPWM+2,w,c
  3902  000EB4  0100               	movlb	0	; () banked
  3903  000EB6  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  3904  000EB8  5035               	movf	??_setMotorPWM+1,w,c
  3905  000EBA  2037               	addwfc	??_setMotorPWM+3,w,c
  3906  000EBC  0100               	movlb	0	; () banked
  3907  000EBE  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  3908                           
  3909                           ;dc_motor.c: 36: }
  3910  000EC0  D014               	goto	l35
  3911  000EC2                     l2805:
  3912                           
  3913                           ;dc_motor.c: 37: else
  3914                           ;dc_motor.c: 38: {
  3915                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  3916  000EC2  EE20 F006          	lfsr	2,6
  3917  000EC6  5032               	movf	setMotorPWM@m,w,c
  3918  000EC8  26D9               	addwf	fsr2l,f,c
  3919  000ECA  5033               	movf	setMotorPWM@m+1,w,c
  3920  000ECC  22DA               	addwfc	fsr2h,f,c
  3921  000ECE  50DF               	movf	indf2,w,c
  3922  000ED0  6E34               	movwf	??_setMotorPWM& (0+255),c
  3923  000ED2  0E01               	movlw	1
  3924  000ED4  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3925  000ED6  2A34               	incf	??_setMotorPWM,f,c
  3926  000ED8  D002               	goto	u2234
  3927  000EDA                     u2235:
  3928  000EDA  90D8               	bcf	status,0,c
  3929  000EDC  3635               	rlcf	??_setMotorPWM+1,f,c
  3930  000EDE                     u2234:
  3931  000EDE  2E34               	decfsz	??_setMotorPWM,f,c
  3932  000EE0  D7FC               	goto	u2235
  3933  000EE2  5035               	movf	??_setMotorPWM+1,w,c
  3934  000EE4  0AFF               	xorlw	255
  3935  000EE6  148A               	andwf	3978,w,c	;volatile
  3936  000EE8  6E8A               	movwf	3978,c	;volatile
  3937  000EEA                     l35:
  3938                           
  3939                           ;dc_motor.c: 40: }
  3940                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  3941  000EEA  EE20 F002          	lfsr	2,2
  3942  000EEE  5032               	movf	setMotorPWM@m,w,c
  3943  000EF0  26D9               	addwf	fsr2l,f,c
  3944  000EF2  5033               	movf	setMotorPWM@m+1,w,c
  3945  000EF4  22DA               	addwfc	fsr2h,f,c
  3946  000EF6  CFDE F034          	movff	postinc2,??_setMotorPWM
  3947  000EFA  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3948  000EFE  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  3949  000F02  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3950  000F06  0100               	movlb	0	; () banked
  3951  000F08  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  3952  000F0A  46E8               	rlncf	wreg,f,c
  3953  000F0C  0BFC               	andlw	252
  3954  000F0E  6EDF               	movwf	indf2,c
  3955                           
  3956                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  3957  000F10  EE20 F004          	lfsr	2,4
  3958  000F14  5032               	movf	setMotorPWM@m,w,c
  3959  000F16  26D9               	addwf	fsr2l,f,c
  3960  000F18  5033               	movf	setMotorPWM@m+1,w,c
  3961  000F1A  22DA               	addwfc	fsr2h,f,c
  3962  000F1C  CFDE F034          	movff	postinc2,??_setMotorPWM
  3963  000F20  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3964  000F24  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  3965  000F28  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3966  000F2C  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3967  000F30  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3968  000F34  0E06               	movlw	6
  3969  000F36  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  3970  000F38                     u2245:
  3971  000F38  3437               	rlcf	??_setMotorPWM+3,w,c
  3972  000F3A  3237               	rrcf	??_setMotorPWM+3,f,c
  3973  000F3C  3236               	rrcf	??_setMotorPWM+2,f,c
  3974  000F3E  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3975  000F40  D7FB               	goto	u2245
  3976  000F42  5036               	movf	??_setMotorPWM+2,w,c
  3977  000F44  6EDF               	movwf	indf2,c
  3978                           
  3979                           ; BSR set to: 0
  3980  000F46  0012               	return		;funcret
  3981  000F48                     __end_of_setMotorPWM:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           prodh	equ	0xFF4
  3985                           prodl	equ	0xFF3
  3986                           intcon	equ	0xFF2
  3987                           postinc0	equ	0xFEE
  3988                           wreg	equ	0xFE8
  3989                           indf1	equ	0xFE7
  3990                           fsr1h	equ	0xFE2
  3991                           fsr1l	equ	0xFE1
  3992                           indf2	equ	0xFDF
  3993                           postinc2	equ	0xFDE
  3994                           postdec2	equ	0xFDD
  3995                           fsr2h	equ	0xFDA
  3996                           fsr2l	equ	0xFD9
  3997                           status	equ	0xFD8
  3998                           
  3999 ;; *************** function ___awdiv *****************
  4000 ;; Defined at:
  4001 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  dividend        2   41[COMRAM] int 
  4004 ;;  divisor         2   43[COMRAM] int 
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;  quotient        2   47[COMRAM] int 
  4007 ;;  sign            1   46[COMRAM] unsigned char 
  4008 ;;  counter         1   45[COMRAM] unsigned char 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  2   41[COMRAM] int 
  4011 ;; Registers used:
  4012 ;;		wreg, status,2, status,0
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4018 ;;      Params:         4       0       0       0
  4019 ;;      Locals:         4       0       0       0
  4020 ;;      Temps:          0       0       0       0
  4021 ;;      Totals:         8       0       0       0
  4022 ;;Total ram usage:        8 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    3
  4025 ;; This function calls:
  4026 ;;		Nothing
  4027 ;; This function is called by:
  4028 ;;		_setMotorPWM
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           	psect	text16
  4033  001396                     __ptext16:
  4034                           	opt stack 0
  4035  001396                     ___awdiv:
  4036                           	opt stack 25
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;incstack = 0
  4040  001396  0E00               	movlw	0
  4041  001398  6E2F               	movwf	___awdiv@sign,c
  4042  00139A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4043  00139C  D006               	goto	l2763
  4044  00139E  6C2C               	negf	___awdiv@divisor,c
  4045  0013A0  1E2D               	comf	___awdiv@divisor+1,f,c
  4046  0013A2  B0D8               	btfsc	status,0,c
  4047  0013A4  2A2D               	incf	___awdiv@divisor+1,f,c
  4048  0013A6  0E01               	movlw	1
  4049  0013A8  6E2F               	movwf	___awdiv@sign,c
  4050  0013AA                     l2763:
  4051  0013AA  AE2B               	btfss	___awdiv@dividend+1,7,c
  4052  0013AC  D006               	goto	l2769
  4053  0013AE  6C2A               	negf	___awdiv@dividend,c
  4054  0013B0  1E2B               	comf	___awdiv@dividend+1,f,c
  4055  0013B2  B0D8               	btfsc	status,0,c
  4056  0013B4  2A2B               	incf	___awdiv@dividend+1,f,c
  4057  0013B6  0E01               	movlw	1
  4058  0013B8  1A2F               	xorwf	___awdiv@sign,f,c
  4059  0013BA                     l2769:
  4060  0013BA  0E00               	movlw	0
  4061  0013BC  6E31               	movwf	___awdiv@quotient+1,c
  4062  0013BE  0E00               	movlw	0
  4063  0013C0  6E30               	movwf	___awdiv@quotient,c
  4064  0013C2  502C               	movf	___awdiv@divisor,w,c
  4065  0013C4  102D               	iorwf	___awdiv@divisor+1,w,c
  4066  0013C6  B4D8               	btfsc	status,2,c
  4067  0013C8  D01C               	goto	l2791
  4068  0013CA  0E01               	movlw	1
  4069  0013CC  6E2E               	movwf	___awdiv@counter,c
  4070  0013CE  D004               	goto	l2777
  4071  0013D0                     l2775:
  4072  0013D0  90D8               	bcf	status,0,c
  4073  0013D2  362C               	rlcf	___awdiv@divisor,f,c
  4074  0013D4  362D               	rlcf	___awdiv@divisor+1,f,c
  4075  0013D6  2A2E               	incf	___awdiv@counter,f,c
  4076  0013D8                     l2777:
  4077  0013D8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4078  0013DA  D7FA               	goto	l2775
  4079  0013DC                     l2779:
  4080  0013DC  90D8               	bcf	status,0,c
  4081  0013DE  3630               	rlcf	___awdiv@quotient,f,c
  4082  0013E0  3631               	rlcf	___awdiv@quotient+1,f,c
  4083  0013E2  502C               	movf	___awdiv@divisor,w,c
  4084  0013E4  5C2A               	subwf	___awdiv@dividend,w,c
  4085  0013E6  502D               	movf	___awdiv@divisor+1,w,c
  4086  0013E8  582B               	subwfb	___awdiv@dividend+1,w,c
  4087  0013EA  A0D8               	btfss	status,0,c
  4088  0013EC  D005               	goto	l2787
  4089  0013EE  502C               	movf	___awdiv@divisor,w,c
  4090  0013F0  5E2A               	subwf	___awdiv@dividend,f,c
  4091  0013F2  502D               	movf	___awdiv@divisor+1,w,c
  4092  0013F4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4093  0013F6  8030               	bsf	___awdiv@quotient,0,c
  4094  0013F8                     l2787:
  4095  0013F8  90D8               	bcf	status,0,c
  4096  0013FA  322D               	rrcf	___awdiv@divisor+1,f,c
  4097  0013FC  322C               	rrcf	___awdiv@divisor,f,c
  4098  0013FE  2E2E               	decfsz	___awdiv@counter,f,c
  4099  001400  D7ED               	goto	l2779
  4100  001402                     l2791:
  4101  001402  502F               	movf	___awdiv@sign,w,c
  4102  001404  B4D8               	btfsc	status,2,c
  4103  001406  D004               	goto	l2795
  4104  001408  6C30               	negf	___awdiv@quotient,c
  4105  00140A  1E31               	comf	___awdiv@quotient+1,f,c
  4106  00140C  B0D8               	btfsc	status,0,c
  4107  00140E  2A31               	incf	___awdiv@quotient+1,f,c
  4108  001410                     l2795:
  4109  001410  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4110  001414  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4111  001418  0012               	return	
  4112  00141A                     __end_of___awdiv:
  4113                           	opt stack 0
  4114                           tblptru	equ	0xFF8
  4115                           prodh	equ	0xFF4
  4116                           prodl	equ	0xFF3
  4117                           intcon	equ	0xFF2
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           indf1	equ	0xFE7
  4121                           fsr1h	equ	0xFE2
  4122                           fsr1l	equ	0xFE1
  4123                           indf2	equ	0xFDF
  4124                           postinc2	equ	0xFDE
  4125                           postdec2	equ	0xFDD
  4126                           fsr2h	equ	0xFDA
  4127                           fsr2l	equ	0xFD9
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function _sprintf *****************
  4131 ;; Defined at:
  4132 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4135 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4136 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4137 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  tmpval          4    0        struct .
  4140 ;;  cp              3    0        PTR const unsigned char 
  4141 ;;  width           2   10[BANK0 ] int 
  4142 ;;  val             2    7[BANK0 ] unsigned int 
  4143 ;;  ap              2    4[BANK0 ] PTR void [1]
  4144 ;;		 -> ?_sprintf(2), 
  4145 ;;  len             2    0        unsigned int 
  4146 ;;  c               1   12[BANK0 ] char 
  4147 ;;  flag            1    9[BANK0 ] unsigned char 
  4148 ;;  prec            1    6[BANK0 ] char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;                  2   47[COMRAM] int 
  4151 ;; Registers used:
  4152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4158 ;;      Params:         8       0       0       0
  4159 ;;      Locals:         0       9       0       0
  4160 ;;      Temps:          0       4       0       0
  4161 ;;      Totals:         8      13       0       0
  4162 ;;Total ram usage:       21 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    4
  4165 ;; This function calls:
  4166 ;;		___lwdiv
  4167 ;;		___lwmod
  4168 ;;		___wmul
  4169 ;;		_isdigit
  4170 ;; This function is called by:
  4171 ;;		_ScanIR
  4172 ;;		_ScanWithRange
  4173 ;;		_main
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text17
  4178  000872                     __ptext17:
  4179                           	opt stack 0
  4180  000872                     _sprintf:
  4181                           	opt stack 26
  4182                           
  4183                           ;doprnt.c: 494: va_list ap;
  4184                           ;doprnt.c: 499: signed char c;
  4185                           ;doprnt.c: 501: int width;
  4186                           ;doprnt.c: 506: signed char prec;
  4187                           ;doprnt.c: 508: unsigned char flag;
  4188                           ;doprnt.c: 523: union {
  4189                           ;doprnt.c: 524: unsigned long vd;
  4190                           ;doprnt.c: 525: double integ;
  4191                           ;doprnt.c: 526: } tmpval;
  4192                           ;doprnt.c: 528: unsigned int val;
  4193                           ;doprnt.c: 529: unsigned len;
  4194                           ;doprnt.c: 530: const char * cp;
  4195                           ;doprnt.c: 533: *ap = __va_start();
  4196                           
  4197                           ;incstack = 0
  4198  000872  0E34               	movlw	low (?_sprintf+4)
  4199  000874  0100               	movlb	0	; () banked
  4200  000876  6F64               	movwf	sprintf@ap& (0+255),b
  4201  000878  0E00               	movlw	high (?_sprintf+4)
  4202  00087A  0100               	movlb	0	; () banked
  4203  00087C  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4204                           
  4205                           ;doprnt.c: 536: while(c = *f++) {
  4206  00087E  D168               	goto	l2967
  4207  000880                     l2861:
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;doprnt.c: 538: if(c != '%')
  4211  000880  0E25               	movlw	37
  4212  000882  0100               	movlb	0	; () banked
  4213  000884  196C               	xorwf	sprintf@c& (0+255),w,b
  4214  000886  B4D8               	btfsc	status,2,c
  4215  000888  D009               	goto	l2867
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;doprnt.c: 540: {
  4219                           ;doprnt.c: 541: ((*sp++ = (c)));
  4220  00088A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4221  00088E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4222  000892  C06C  FFDF         	movff	sprintf@c,indf2
  4223                           
  4224                           ; BSR set to: 0
  4225  000896  4A30               	infsnz	sprintf@sp,f,c
  4226  000898  2A31               	incf	sprintf@sp+1,f,c
  4227                           
  4228                           ;doprnt.c: 542: continue;
  4229  00089A  D15A               	goto	l2967
  4230  00089C                     l2867:
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;doprnt.c: 543: }
  4234                           ;doprnt.c: 546: width = 0;
  4235  00089C  0E00               	movlw	0
  4236  00089E  0100               	movlb	0	; () banked
  4237  0008A0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4238  0008A2  0E00               	movlw	0
  4239  0008A4  6F6A               	movwf	sprintf@width& (0+255),b
  4240                           
  4241                           ;doprnt.c: 548: flag = 0;
  4242  0008A6  0E00               	movlw	0
  4243  0008A8  0100               	movlb	0	; () banked
  4244  0008AA  6F69               	movwf	sprintf@flag& (0+255),b
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;doprnt.c: 551: switch(*f) {
  4248                           
  4249                           ;doprnt.c: 550: for(;;) {
  4250  0008AC  D004               	goto	l2873
  4251  0008AE                     l2869:
  4252                           
  4253                           ;doprnt.c: 580: flag |= 0x04;
  4254  0008AE  0100               	movlb	0	; () banked
  4255  0008B0  8569               	bsf	sprintf@flag& (0+255),2,b
  4256                           
  4257                           ;doprnt.c: 581: f++;
  4258  0008B2  4A32               	infsnz	sprintf@f,f,c
  4259  0008B4  2A33               	incf	sprintf@f+1,f,c
  4260  0008B6                     l2873:
  4261  0008B6  C032  FFF6         	movff	sprintf@f,tblptrl
  4262  0008BA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4263  0008BE                     	if	0	;tblptru may be non-zero
  4264  0008BE                     	endif
  4265  0008BE                     	if	0	;tblptru may be non-zero
  4266  0008BE                     	endif
  4267  0008BE  0008               	tblrd		*
  4268  0008C0  50F5               	movf	tablat,w,c
  4269                           
  4270                           ; Switch size 1, requested type "space"
  4271                           ; Number of cases is 1, Range of values is 48 to 48
  4272                           ; switch strategies available:
  4273                           ; Name         Instructions Cycles
  4274                           ; simple_byte            4     3 (average)
  4275                           ;	Chosen strategy is simple_byte
  4276  0008C2  0A30               	xorlw	48	; case 48
  4277  0008C4  B4D8               	btfsc	status,2,c
  4278  0008C6  D7F3               	goto	l2869
  4279                           
  4280                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4281                           
  4282                           ;doprnt.c: 586: }
  4283                           
  4284                           ;doprnt.c: 585: break;
  4285  0008C8  C032  FFF6         	movff	sprintf@f,tblptrl
  4286  0008CC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4287  0008D0                     	if	0	;tblptru may be non-zero
  4288  0008D0                     	endif
  4289  0008D0                     	if	0	;tblptru may be non-zero
  4290  0008D0                     	endif
  4291  0008D0  0008               	tblrd		*
  4292  0008D2  50F5               	movf	tablat,w,c
  4293  0008D4  EC76  F00C         	call	_isdigit
  4294  0008D8  A0D8               	btfss	status,0,c
  4295  0008DA  D03E               	goto	l2889
  4296                           
  4297                           ;doprnt.c: 598: width = 0;
  4298  0008DC  0E00               	movlw	0
  4299  0008DE  0100               	movlb	0	; () banked
  4300  0008E0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4301  0008E2  0E00               	movlw	0
  4302  0008E4  6F6A               	movwf	sprintf@width& (0+255),b
  4303  0008E6                     l2879:
  4304                           
  4305                           ;doprnt.c: 600: width *= 10;
  4306  0008E6  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4307  0008EA  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4308  0008EE  0E00               	movlw	0
  4309  0008F0  6E27               	movwf	___wmul@multiplicand+1,c
  4310  0008F2  0E0A               	movlw	10
  4311  0008F4  6E26               	movwf	___wmul@multiplicand,c
  4312  0008F6  EC52  F00C         	call	___wmul	;wreg free
  4313  0008FA  C024  F06A         	movff	?___wmul,sprintf@width
  4314  0008FE  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4315                           
  4316                           ;doprnt.c: 601: width += *f++ - '0';
  4317  000902  0ED0               	movlw	208
  4318  000904  0100               	movlb	0	; () banked
  4319  000906  6F60               	movwf	??_sprintf& (0+255),b
  4320  000908  0EFF               	movlw	255
  4321  00090A  0100               	movlb	0	; () banked
  4322  00090C  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4323  00090E  C032  FFF6         	movff	sprintf@f,tblptrl
  4324  000912  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4325  000916                     	if	0	;tblptru may be non-zero
  4326  000916                     	endif
  4327  000916                     	if	0	;tblptru may be non-zero
  4328  000916                     	endif
  4329  000916  0008               	tblrd		*
  4330  000918  50F5               	movf	tablat,w,c
  4331  00091A  0100               	movlb	0	; () banked
  4332  00091C  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4333  00091E  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4334  000920  0100               	movlb	0	; () banked
  4335  000922  5160               	movf	??_sprintf& (0+255),w,b
  4336  000924  0100               	movlb	0	; () banked
  4337  000926  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4338  000928  0100               	movlb	0	; () banked
  4339  00092A  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4340  00092C  0100               	movlb	0	; () banked
  4341  00092E  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4342  000930  0100               	movlb	0	; () banked
  4343  000932  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4344  000934  0100               	movlb	0	; () banked
  4345  000936  276A               	addwf	sprintf@width& (0+255),f,b
  4346  000938  0100               	movlb	0	; () banked
  4347  00093A  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4348  00093C  0100               	movlb	0	; () banked
  4349  00093E  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4350                           
  4351                           ; BSR set to: 0
  4352  000940  4A32               	infsnz	sprintf@f,f,c
  4353  000942  2A33               	incf	sprintf@f+1,f,c
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4357  000944  C032  FFF6         	movff	sprintf@f,tblptrl
  4358  000948  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4359  00094C                     	if	0	;tblptru may be non-zero
  4360  00094C                     	endif
  4361  00094C                     	if	0	;tblptru may be non-zero
  4362  00094C                     	endif
  4363  00094C  0008               	tblrd		*
  4364  00094E  50F5               	movf	tablat,w,c
  4365  000950  EC76  F00C         	call	_isdigit
  4366  000954  B0D8               	btfsc	status,0,c
  4367  000956  D7C7               	goto	l2879
  4368  000958                     l2889:
  4369  000958  C032  FFF6         	movff	sprintf@f,tblptrl
  4370  00095C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4371  000960  4A32               	infsnz	sprintf@f,f,c
  4372  000962  2A33               	incf	sprintf@f+1,f,c
  4373  000964                     	if	0	;tblptru may be non-zero
  4374  000964                     	endif
  4375  000964                     	if	0	;tblptru may be non-zero
  4376  000964                     	endif
  4377  000964  0008               	tblrd		*
  4378  000966  CFF5 F06C          	movff	tablat,sprintf@c
  4379  00096A  0100               	movlb	0	; () banked
  4380  00096C  516C               	movf	sprintf@c& (0+255),w,b
  4381                           
  4382                           ; Switch size 1, requested type "space"
  4383                           ; Number of cases is 3, Range of values is 0 to 105
  4384                           ; switch strategies available:
  4385                           ; Name         Instructions Cycles
  4386                           ; simple_byte           10     6 (average)
  4387                           ;	Chosen strategy is simple_byte
  4388  00096E  0A00               	xorlw	0	; case 0
  4389  000970  B4D8               	btfsc	status,2,c
  4390  000972  D0FB               	goto	l2969
  4391  000974  0A64               	xorlw	100	; case 100
  4392  000976  B4D8               	btfsc	status,2,c
  4393  000978  D003               	goto	l2891
  4394  00097A  0A0D               	xorlw	13	; case 105
  4395  00097C  A4D8               	btfss	status,2,c
  4396  00097E  D0E8               	goto	l2967
  4397  000980                     l2891:
  4398                           
  4399                           ;doprnt.c: 1253: {
  4400                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4401  000980  C064  FFD9         	movff	sprintf@ap,fsr2l
  4402  000984  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4403  000988  CFDE F067          	movff	postinc2,sprintf@val
  4404  00098C  CFDD F068          	movff	postdec2,sprintf@val+1
  4405  000990  0E02               	movlw	2
  4406  000992  0100               	movlb	0	; () banked
  4407  000994  2764               	addwf	sprintf@ap& (0+255),f,b
  4408  000996  0E00               	movlw	0
  4409  000998  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;doprnt.c: 1261: if((int)val < 0) {
  4413  00099A  0100               	movlb	0	; () banked
  4414  00099C  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4415  00099E  D008               	goto	l2901
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;doprnt.c: 1262: flag |= 0x03;
  4419  0009A0  0E03               	movlw	3
  4420  0009A2  0100               	movlb	0	; () banked
  4421  0009A4  1369               	iorwf	sprintf@flag& (0+255),f,b
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;doprnt.c: 1263: val = -val;
  4425  0009A6  0100               	movlb	0	; () banked
  4426  0009A8  6D67               	negf	sprintf@val& (0+255),b
  4427  0009AA  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4428  0009AC  B0D8               	btfsc	status,0,c
  4429  0009AE  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4430  0009B0                     l2901:
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;doprnt.c: 1264: }
  4434                           ;doprnt.c: 1266: }
  4435                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4436  0009B0  0E01               	movlw	1
  4437  0009B2  0100               	movlb	0	; () banked
  4438  0009B4  6F6C               	movwf	sprintf@c& (0+255),b
  4439  0009B6                     l2903:
  4440                           
  4441                           ; BSR set to: 0
  4442  0009B6  0E05               	movlw	5
  4443  0009B8  0100               	movlb	0	; () banked
  4444  0009BA  196C               	xorwf	sprintf@c& (0+255),w,b
  4445  0009BC  B4D8               	btfsc	status,2,c
  4446  0009BE  D016               	goto	l2915
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;doprnt.c: 1306: if(val < dpowers[c])
  4450                           
  4451                           ; BSR set to: 0
  4452                           
  4453                           ; BSR set to: 0
  4454  0009C0  0100               	movlb	0	; () banked
  4455  0009C2  516C               	movf	sprintf@c& (0+255),w,b
  4456  0009C4  0D02               	mullw	2
  4457  0009C6  0E01               	movlw	low _dpowers
  4458  0009C8  24F3               	addwf	prodl,w,c
  4459  0009CA  6EF6               	movwf	tblptrl,c
  4460  0009CC  0E03               	movlw	high _dpowers
  4461  0009CE  20F4               	addwfc	prodh,w,c
  4462  0009D0  6EF7               	movwf	tblptrh,c
  4463  0009D2                     	if	0	;There are less than 3 active tblptr bytes
  4464  0009D2                     	endif
  4465  0009D2  0009               	tblrd		*+
  4466  0009D4  50F5               	movf	tablat,w,c
  4467  0009D6  0100               	movlb	0	; () banked
  4468  0009D8  5D67               	subwf	sprintf@val& (0+255),w,b
  4469  0009DA  0009               	tblrd		*+
  4470  0009DC  50F5               	movf	tablat,w,c
  4471  0009DE  0100               	movlb	0	; () banked
  4472  0009E0  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4473  0009E2  A0D8               	btfss	status,0,c
  4474  0009E4  D003               	goto	l2915
  4475                           
  4476                           ; BSR set to: 0
  4477                           
  4478                           ; BSR set to: 0
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;doprnt.c: 1307: break;
  4482  0009E6  0100               	movlb	0	; () banked
  4483  0009E8  2B6C               	incf	sprintf@c& (0+255),f,b
  4484  0009EA  D7E5               	goto	l2903
  4485  0009EC                     l2915:
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4489  0009EC  0100               	movlb	0	; () banked
  4490  0009EE  516A               	movf	sprintf@width& (0+255),w,b
  4491  0009F0  0100               	movlb	0	; () banked
  4492  0009F2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4493  0009F4  B4D8               	btfsc	status,2,c
  4494  0009F6  D00B               	goto	l2921
  4495                           
  4496                           ; BSR set to: 0
  4497  0009F8  C069  F060         	movff	sprintf@flag,??_sprintf
  4498  0009FC  0E03               	movlw	3
  4499  0009FE  0100               	movlb	0	; () banked
  4500  000A00  1760               	andwf	??_sprintf& (0+255),f,b
  4501  000A02  B4D8               	btfsc	status,2,c
  4502  000A04  D004               	goto	l2921
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;doprnt.c: 1346: width--;
  4506  000A06  0100               	movlb	0	; () banked
  4507  000A08  076A               	decf	sprintf@width& (0+255),f,b
  4508  000A0A  A0D8               	btfss	status,0,c
  4509  000A0C  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4510  000A0E                     l2921:
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;doprnt.c: 1381: if(width > c)
  4514  000A0E  0E80               	movlw	128
  4515  000A10  0100               	movlb	0	; () banked
  4516  000A12  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4517  000A14  0E7F               	movlw	127
  4518  000A16  0100               	movlb	0	; () banked
  4519  000A18  6F60               	movwf	??_sprintf& (0+255),b
  4520  000A1A  0100               	movlb	0	; () banked
  4521  000A1C  516A               	movf	sprintf@width& (0+255),w,b
  4522  000A1E  0100               	movlb	0	; () banked
  4523  000A20  5D6C               	subwf	sprintf@c& (0+255),w,b
  4524  000A22  0100               	movlb	0	; () banked
  4525  000A24  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4526  000A26  0A80               	xorlw	128
  4527  000A28  0100               	movlb	0	; () banked
  4528  000A2A  5960               	subwfb	??_sprintf& (0+255),w,b
  4529  000A2C  B0D8               	btfsc	status,0,c
  4530  000A2E  D00B               	goto	l2925
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;doprnt.c: 1382: width -= c;
  4534  000A30  0100               	movlb	0	; () banked
  4535  000A32  516C               	movf	sprintf@c& (0+255),w,b
  4536  000A34  0100               	movlb	0	; () banked
  4537  000A36  5F6A               	subwf	sprintf@width& (0+255),f,b
  4538  000A38  0E00               	movlw	0
  4539  000A3A  0100               	movlb	0	; () banked
  4540  000A3C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4541  000A3E  0EFF               	movlw	255
  4542  000A40  0100               	movlb	0	; () banked
  4543  000A42  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4544  000A44  D005               	goto	l2927
  4545  000A46                     l2925:
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;doprnt.c: 1383: else
  4549                           ;doprnt.c: 1384: width = 0;
  4550  000A46  0E00               	movlw	0
  4551  000A48  0100               	movlb	0	; () banked
  4552  000A4A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4553  000A4C  0E00               	movlw	0
  4554  000A4E  6F6A               	movwf	sprintf@width& (0+255),b
  4555  000A50                     l2927:
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;doprnt.c: 1387: if(flag & 0x04) {
  4559  000A50  0100               	movlb	0	; () banked
  4560  000A52  A569               	btfss	sprintf@flag& (0+255),2,b
  4561  000A54  D022               	goto	l2943
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;doprnt.c: 1392: if(flag & 0x03)
  4565  000A56  C069  F060         	movff	sprintf@flag,??_sprintf
  4566  000A5A  0E03               	movlw	3
  4567  000A5C  0100               	movlb	0	; () banked
  4568  000A5E  1760               	andwf	??_sprintf& (0+255),f,b
  4569  000A60  B4D8               	btfsc	status,2,c
  4570  000A62  D008               	goto	l2935
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4574  000A64  C030  FFD9         	movff	sprintf@sp,fsr2l
  4575  000A68  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4576  000A6C  0E2D               	movlw	45
  4577  000A6E  6EDF               	movwf	indf2,c
  4578                           
  4579                           ; BSR set to: 0
  4580  000A70  4A30               	infsnz	sprintf@sp,f,c
  4581  000A72  2A31               	incf	sprintf@sp+1,f,c
  4582  000A74                     l2935:
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;doprnt.c: 1415: if(width)
  4586  000A74  0100               	movlb	0	; () banked
  4587  000A76  516A               	movf	sprintf@width& (0+255),w,b
  4588  000A78  0100               	movlb	0	; () banked
  4589  000A7A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4590  000A7C  B4D8               	btfsc	status,2,c
  4591  000A7E  D034               	goto	l2957
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4595                           
  4596                           ; BSR set to: 0
  4597                           
  4598                           ;doprnt.c: 1416: do
  4599  000A80  C030  FFD9         	movff	sprintf@sp,fsr2l
  4600  000A84  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4601  000A88  0E30               	movlw	48
  4602  000A8A  6EDF               	movwf	indf2,c
  4603                           
  4604                           ; BSR set to: 0
  4605  000A8C  4A30               	infsnz	sprintf@sp,f,c
  4606  000A8E  2A31               	incf	sprintf@sp+1,f,c
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;doprnt.c: 1418: while(--width);
  4610  000A90  0100               	movlb	0	; () banked
  4611  000A92  076A               	decf	sprintf@width& (0+255),f,b
  4612  000A94  A0D8               	btfss	status,0,c
  4613  000A96  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4614  000A98  D7ED               	goto	l2935
  4615  000A9A                     l2943:
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;doprnt.c: 1422: {
  4619                           ;doprnt.c: 1424: if(width
  4620                           ;doprnt.c: 1428: )
  4621  000A9A  0100               	movlb	0	; () banked
  4622  000A9C  516A               	movf	sprintf@width& (0+255),w,b
  4623  000A9E  0100               	movlb	0	; () banked
  4624  000AA0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4625  000AA2  B4D8               	btfsc	status,2,c
  4626  000AA4  D012               	goto	l2951
  4627  000AA6                     l2945:
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4631  000AA6  C030  FFD9         	movff	sprintf@sp,fsr2l
  4632  000AAA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4633  000AAE  0E20               	movlw	32
  4634  000AB0  6EDF               	movwf	indf2,c
  4635                           
  4636                           ; BSR set to: 0
  4637  000AB2  4A30               	infsnz	sprintf@sp,f,c
  4638  000AB4  2A31               	incf	sprintf@sp+1,f,c
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;doprnt.c: 1431: while(--width);
  4642  000AB6  0100               	movlb	0	; () banked
  4643  000AB8  076A               	decf	sprintf@width& (0+255),f,b
  4644  000ABA  A0D8               	btfss	status,0,c
  4645  000ABC  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4646  000ABE  0100               	movlb	0	; () banked
  4647  000AC0  516A               	movf	sprintf@width& (0+255),w,b
  4648  000AC2  0100               	movlb	0	; () banked
  4649  000AC4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4650  000AC6  A4D8               	btfss	status,2,c
  4651  000AC8  D7EE               	goto	l2945
  4652  000ACA                     l2951:
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;doprnt.c: 1438: if(flag & 0x03)
  4656  000ACA  C069  F060         	movff	sprintf@flag,??_sprintf
  4657  000ACE  0E03               	movlw	3
  4658  000AD0  0100               	movlb	0	; () banked
  4659  000AD2  1760               	andwf	??_sprintf& (0+255),f,b
  4660  000AD4  B4D8               	btfsc	status,2,c
  4661  000AD6  D008               	goto	l2957
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4665  000AD8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4666  000ADC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4667  000AE0  0E2D               	movlw	45
  4668  000AE2  6EDF               	movwf	indf2,c
  4669                           
  4670                           ; BSR set to: 0
  4671  000AE4  4A30               	infsnz	sprintf@sp,f,c
  4672  000AE6  2A31               	incf	sprintf@sp+1,f,c
  4673  000AE8                     l2957:
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;doprnt.c: 1469: }
  4677                           ;doprnt.c: 1472: prec = c;
  4678  000AE8  C06C  F066         	movff	sprintf@c,sprintf@prec
  4679                           
  4680                           ;doprnt.c: 1474: while(prec--) {
  4681  000AEC  D02B               	goto	l2965
  4682  000AEE                     l2959:
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;doprnt.c: 1478: {
  4686                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4687  000AEE  0100               	movlb	0	; () banked
  4688  000AF0  5166               	movf	sprintf@prec& (0+255),w,b
  4689  000AF2  0D02               	mullw	2
  4690  000AF4  0E01               	movlw	low _dpowers
  4691  000AF6  24F3               	addwf	prodl,w,c
  4692  000AF8  6EF6               	movwf	tblptrl,c
  4693  000AFA  0E03               	movlw	high _dpowers
  4694  000AFC  20F4               	addwfc	prodh,w,c
  4695  000AFE  6EF7               	movwf	tblptrh,c
  4696  000B00                     	if	0	;There are less than 3 active tblptr bytes
  4697  000B00                     	endif
  4698  000B00  0009               	tblrd		*+
  4699  000B02  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4700  000B06  000A               	tblrd		*-
  4701  000B08  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4702  000B0C  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4703  000B10  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4704  000B14  EC40  F00B         	call	___lwdiv	;wreg free
  4705  000B18  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4706  000B1C  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4707  000B20  0E00               	movlw	0
  4708  000B22  6E2E               	movwf	___lwmod@divisor+1,c
  4709  000B24  0E0A               	movlw	10
  4710  000B26  6E2D               	movwf	___lwmod@divisor,c
  4711  000B28  EC69  F00B         	call	___lwmod	;wreg free
  4712  000B2C  502B               	movf	?___lwmod,w,c
  4713  000B2E  0F30               	addlw	48
  4714  000B30  0100               	movlb	0	; () banked
  4715  000B32  6F6C               	movwf	sprintf@c& (0+255),b
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 1523: }
  4719                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4720  000B34  C030  FFD9         	movff	sprintf@sp,fsr2l
  4721  000B38  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4722  000B3C  C06C  FFDF         	movff	sprintf@c,indf2
  4723                           
  4724                           ; BSR set to: 0
  4725  000B40  4A30               	infsnz	sprintf@sp,f,c
  4726  000B42  2A31               	incf	sprintf@sp+1,f,c
  4727  000B44                     l2965:
  4728                           
  4729                           ; BSR set to: 0
  4730  000B44  0100               	movlb	0	; () banked
  4731  000B46  0766               	decf	sprintf@prec& (0+255),f,b
  4732  000B48  0100               	movlb	0	; () banked
  4733  000B4A  2966               	incf	sprintf@prec& (0+255),w,b
  4734  000B4C  A4D8               	btfss	status,2,c
  4735  000B4E  D7CF               	goto	l2959
  4736  000B50                     l2967:
  4737  000B50  C032  FFF6         	movff	sprintf@f,tblptrl
  4738  000B54  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4739  000B58  4A32               	infsnz	sprintf@f,f,c
  4740  000B5A  2A33               	incf	sprintf@f+1,f,c
  4741  000B5C                     	if	0	;tblptru may be non-zero
  4742  000B5C                     	endif
  4743  000B5C                     	if	0	;tblptru may be non-zero
  4744  000B5C                     	endif
  4745  000B5C  0008               	tblrd		*
  4746  000B5E  CFF5 F06C          	movff	tablat,sprintf@c
  4747  000B62  0100               	movlb	0	; () banked
  4748  000B64  516C               	movf	sprintf@c& (0+255),w,b
  4749  000B66  A4D8               	btfss	status,2,c
  4750  000B68  D68B               	goto	l2861
  4751  000B6A                     l2969:
  4752                           
  4753                           ;doprnt.c: 1538: *sp = 0;
  4754  000B6A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4755  000B6E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4756  000B72  0E00               	movlw	0
  4757  000B74  6EDF               	movwf	indf2,c
  4758  000B76  0012               	return	
  4759  000B78                     __end_of_sprintf:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           postinc0	equ	0xFEE
  4769                           wreg	equ	0xFE8
  4770                           indf1	equ	0xFE7
  4771                           fsr1h	equ	0xFE2
  4772                           fsr1l	equ	0xFE1
  4773                           indf2	equ	0xFDF
  4774                           postinc2	equ	0xFDE
  4775                           postdec2	equ	0xFDD
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function _isdigit *****************
  4781 ;; Defined at:
  4782 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  c               1    wreg     unsigned char 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  c               1   37[COMRAM] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;		None               void
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4796 ;;      Params:         0       0       0       0
  4797 ;;      Locals:         2       0       0       0
  4798 ;;      Temps:          1       0       0       0
  4799 ;;      Totals:         3       0       0       0
  4800 ;;Total ram usage:        3 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    3
  4803 ;; This function calls:
  4804 ;;		Nothing
  4805 ;; This function is called by:
  4806 ;;		_sprintf
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           	psect	text18
  4811  0018EC                     __ptext18:
  4812                           	opt stack 0
  4813  0018EC                     _isdigit:
  4814                           	opt stack 26
  4815                           
  4816                           ;incstack = 0
  4817                           ;isdigit@c stored from wreg
  4818  0018EC  6E26               	movwf	isdigit@c,c
  4819  0018EE  0E00               	movlw	0
  4820  0018F0  6E25               	movwf	_isdigit$1878,c
  4821  0018F2  0E3A               	movlw	58
  4822  0018F4  6026               	cpfslt	isdigit@c,c
  4823  0018F6  D005               	goto	l2047
  4824  0018F8  0E2F               	movlw	47
  4825  0018FA  6426               	cpfsgt	isdigit@c,c
  4826  0018FC  D002               	goto	l2047
  4827  0018FE  0E01               	movlw	1
  4828  001900  6E25               	movwf	_isdigit$1878,c
  4829  001902                     l2047:
  4830  001902  C025  F024         	movff	_isdigit$1878,??_isdigit
  4831  001906  3024               	rrcf	??_isdigit,w,c
  4832  001908  0012               	return	
  4833  00190A                     __end_of_isdigit:
  4834                           	opt stack 0
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           prodh	equ	0xFF4
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           indf1	equ	0xFE7
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function ___wmul *****************
  4855 ;; Defined at:
  4856 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  multiplier      2   35[COMRAM] unsigned int 
  4859 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  product         2   39[COMRAM] unsigned int 
  4862 ;; Return value:  Size  Location     Type
  4863 ;;                  2   35[COMRAM] unsigned int 
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0, prodl, prodh
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4871 ;;      Params:         4       0       0       0
  4872 ;;      Locals:         2       0       0       0
  4873 ;;      Temps:          0       0       0       0
  4874 ;;      Totals:         6       0       0       0
  4875 ;;Total ram usage:        6 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; Hardware stack levels required when called:    3
  4878 ;; This function calls:
  4879 ;;		Nothing
  4880 ;; This function is called by:
  4881 ;;		_setMotorPWM
  4882 ;;		_sprintf
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           	psect	text19
  4887  0018A4                     __ptext19:
  4888                           	opt stack 0
  4889  0018A4                     ___wmul:
  4890                           	opt stack 25
  4891                           
  4892                           ;incstack = 0
  4893  0018A4  5024               	movf	___wmul@multiplier,w,c
  4894  0018A6  0226               	mulwf	___wmul@multiplicand,c
  4895  0018A8  CFF3 F028          	movff	prodl,___wmul@product
  4896  0018AC  CFF4 F029          	movff	prodh,___wmul@product+1
  4897  0018B0  5024               	movf	___wmul@multiplier,w,c
  4898  0018B2  0227               	mulwf	___wmul@multiplicand+1,c
  4899  0018B4  50F3               	movf	prodl,w,c
  4900  0018B6  2629               	addwf	___wmul@product+1,f,c
  4901  0018B8  5025               	movf	___wmul@multiplier+1,w,c
  4902  0018BA  0226               	mulwf	___wmul@multiplicand,c
  4903  0018BC  50F3               	movf	prodl,w,c
  4904  0018BE  2629               	addwf	___wmul@product+1,f,c
  4905  0018C0  C028  F024         	movff	___wmul@product,?___wmul
  4906  0018C4  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4907  0018C8  0012               	return	
  4908  0018CA                     __end_of___wmul:
  4909                           	opt stack 0
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           intcon	equ	0xFF2
  4917                           postinc0	equ	0xFEE
  4918                           wreg	equ	0xFE8
  4919                           indf1	equ	0xFE7
  4920                           fsr1h	equ	0xFE2
  4921                           fsr1l	equ	0xFE1
  4922                           indf2	equ	0xFDF
  4923                           postinc2	equ	0xFDE
  4924                           postdec2	equ	0xFDD
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function ___lwmod *****************
  4930 ;; Defined at:
  4931 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;  dividend        2   42[COMRAM] unsigned int 
  4934 ;;  divisor         2   44[COMRAM] unsigned int 
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;  counter         1   46[COMRAM] unsigned char 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  2   42[COMRAM] unsigned int 
  4939 ;; Registers used:
  4940 ;;		wreg, status,2, status,0
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4946 ;;      Params:         4       0       0       0
  4947 ;;      Locals:         1       0       0       0
  4948 ;;      Temps:          0       0       0       0
  4949 ;;      Totals:         5       0       0       0
  4950 ;;Total ram usage:        5 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    3
  4953 ;; This function calls:
  4954 ;;		Nothing
  4955 ;; This function is called by:
  4956 ;;		_sprintf
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           
  4960                           	psect	text20
  4961  0016D2                     __ptext20:
  4962                           	opt stack 0
  4963  0016D2                     ___lwmod:
  4964                           	opt stack 26
  4965                           
  4966                           ;incstack = 0
  4967  0016D2  502D               	movf	___lwmod@divisor,w,c
  4968  0016D4  102E               	iorwf	___lwmod@divisor+1,w,c
  4969  0016D6  B4D8               	btfsc	status,2,c
  4970  0016D8  D018               	goto	l864
  4971  0016DA  0E01               	movlw	1
  4972  0016DC  6E2F               	movwf	___lwmod@counter,c
  4973  0016DE  D004               	goto	l2079
  4974  0016E0                     l2077:
  4975  0016E0  90D8               	bcf	status,0,c
  4976  0016E2  362D               	rlcf	___lwmod@divisor,f,c
  4977  0016E4  362E               	rlcf	___lwmod@divisor+1,f,c
  4978  0016E6  2A2F               	incf	___lwmod@counter,f,c
  4979  0016E8                     l2079:
  4980  0016E8  AE2E               	btfss	___lwmod@divisor+1,7,c
  4981  0016EA  D7FA               	goto	l2077
  4982  0016EC                     l2081:
  4983  0016EC  502D               	movf	___lwmod@divisor,w,c
  4984  0016EE  5C2B               	subwf	___lwmod@dividend,w,c
  4985  0016F0  502E               	movf	___lwmod@divisor+1,w,c
  4986  0016F2  582C               	subwfb	___lwmod@dividend+1,w,c
  4987  0016F4  A0D8               	btfss	status,0,c
  4988  0016F6  D004               	goto	l2085
  4989  0016F8  502D               	movf	___lwmod@divisor,w,c
  4990  0016FA  5E2B               	subwf	___lwmod@dividend,f,c
  4991  0016FC  502E               	movf	___lwmod@divisor+1,w,c
  4992  0016FE  5A2C               	subwfb	___lwmod@dividend+1,f,c
  4993  001700                     l2085:
  4994  001700  90D8               	bcf	status,0,c
  4995  001702  322E               	rrcf	___lwmod@divisor+1,f,c
  4996  001704  322D               	rrcf	___lwmod@divisor,f,c
  4997  001706  2E2F               	decfsz	___lwmod@counter,f,c
  4998  001708  D7F1               	goto	l2081
  4999  00170A                     l864:
  5000  00170A  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5001  00170E  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5002  001712  0012               	return		;funcret
  5003  001714                     __end_of___lwmod:
  5004                           	opt stack 0
  5005                           tblptru	equ	0xFF8
  5006                           tblptrh	equ	0xFF7
  5007                           tblptrl	equ	0xFF6
  5008                           tablat	equ	0xFF5
  5009                           prodh	equ	0xFF4
  5010                           prodl	equ	0xFF3
  5011                           intcon	equ	0xFF2
  5012                           postinc0	equ	0xFEE
  5013                           wreg	equ	0xFE8
  5014                           indf1	equ	0xFE7
  5015                           fsr1h	equ	0xFE2
  5016                           fsr1l	equ	0xFE1
  5017                           indf2	equ	0xFDF
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function ___lwdiv *****************
  5025 ;; Defined at:
  5026 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  dividend        2   35[COMRAM] unsigned int 
  5029 ;;  divisor         2   37[COMRAM] unsigned int 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  quotient        2   39[COMRAM] unsigned int 
  5032 ;;  counter         1   41[COMRAM] unsigned char 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  2   35[COMRAM] unsigned int 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5042 ;;      Params:         4       0       0       0
  5043 ;;      Locals:         3       0       0       0
  5044 ;;      Temps:          0       0       0       0
  5045 ;;      Totals:         7       0       0       0
  5046 ;;Total ram usage:        7 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    3
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_sprintf
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text21
  5057  001680                     __ptext21:
  5058                           	opt stack 0
  5059  001680                     ___lwdiv:
  5060                           	opt stack 26
  5061                           
  5062                           ;incstack = 0
  5063  001680  0E00               	movlw	0
  5064  001682  6E29               	movwf	___lwdiv@quotient+1,c
  5065  001684  0E00               	movlw	0
  5066  001686  6E28               	movwf	___lwdiv@quotient,c
  5067  001688  5026               	movf	___lwdiv@divisor,w,c
  5068  00168A  1027               	iorwf	___lwdiv@divisor+1,w,c
  5069  00168C  B4D8               	btfsc	status,2,c
  5070  00168E  D01C               	goto	l854
  5071  001690  0E01               	movlw	1
  5072  001692  6E2A               	movwf	___lwdiv@counter,c
  5073  001694  D004               	goto	l2059
  5074  001696                     l2057:
  5075  001696  90D8               	bcf	status,0,c
  5076  001698  3626               	rlcf	___lwdiv@divisor,f,c
  5077  00169A  3627               	rlcf	___lwdiv@divisor+1,f,c
  5078  00169C  2A2A               	incf	___lwdiv@counter,f,c
  5079  00169E                     l2059:
  5080  00169E  AE27               	btfss	___lwdiv@divisor+1,7,c
  5081  0016A0  D7FA               	goto	l2057
  5082  0016A2                     l2061:
  5083  0016A2  90D8               	bcf	status,0,c
  5084  0016A4  3628               	rlcf	___lwdiv@quotient,f,c
  5085  0016A6  3629               	rlcf	___lwdiv@quotient+1,f,c
  5086  0016A8  5026               	movf	___lwdiv@divisor,w,c
  5087  0016AA  5C24               	subwf	___lwdiv@dividend,w,c
  5088  0016AC  5027               	movf	___lwdiv@divisor+1,w,c
  5089  0016AE  5825               	subwfb	___lwdiv@dividend+1,w,c
  5090  0016B0  A0D8               	btfss	status,0,c
  5091  0016B2  D005               	goto	l2069
  5092  0016B4  5026               	movf	___lwdiv@divisor,w,c
  5093  0016B6  5E24               	subwf	___lwdiv@dividend,f,c
  5094  0016B8  5027               	movf	___lwdiv@divisor+1,w,c
  5095  0016BA  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5096  0016BC  8028               	bsf	___lwdiv@quotient,0,c
  5097  0016BE                     l2069:
  5098  0016BE  90D8               	bcf	status,0,c
  5099  0016C0  3227               	rrcf	___lwdiv@divisor+1,f,c
  5100  0016C2  3226               	rrcf	___lwdiv@divisor,f,c
  5101  0016C4  2E2A               	decfsz	___lwdiv@counter,f,c
  5102  0016C6  D7ED               	goto	l2061
  5103  0016C8                     l854:
  5104  0016C8  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5105  0016CC  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5106  0016D0  0012               	return		;funcret
  5107  0016D2                     __end_of___lwdiv:
  5108                           	opt stack 0
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodh	equ	0xFF4
  5114                           prodl	equ	0xFF3
  5115                           intcon	equ	0xFF2
  5116                           postinc0	equ	0xFEE
  5117                           wreg	equ	0xFE8
  5118                           indf1	equ	0xFE7
  5119                           fsr1h	equ	0xFE2
  5120                           fsr1l	equ	0xFE1
  5121                           indf2	equ	0xFDF
  5122                           postinc2	equ	0xFDE
  5123                           postdec2	equ	0xFDD
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function _grabRightIR *****************
  5129 ;; Defined at:
  5130 ;;		line 74 in file "IR_Reading.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;		None
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5135 ;;  i               1   42[COMRAM] unsigned char 
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  2   35[COMRAM] unsigned int 
  5138 ;; Registers used:
  5139 ;;		wreg, status,2, status,0
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5145 ;;      Params:         2       0       0       0
  5146 ;;      Locals:         3       0       0       0
  5147 ;;      Temps:          3       0       0       0
  5148 ;;      Totals:         8       0       0       0
  5149 ;;Total ram usage:        8 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    3
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_ScanIR
  5156 ;;		_ScanWithRange
  5157 ;;		_main
  5158 ;; This function uses a non-reentrant model
  5159 ;;
  5160                           
  5161                           	psect	text22
  5162  00149A                     __ptext22:
  5163                           	opt stack 0
  5164  00149A                     _grabRightIR:
  5165                           	opt stack 27
  5166                           
  5167                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5168                           
  5169                           ;incstack = 0
  5170  00149A  0E00               	movlw	0
  5171  00149C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5172  00149E  0E00               	movlw	0
  5173  0014A0  6E29               	movwf	grabRightIR@IR_signal,c
  5174                           
  5175                           ;IR_Reading.c: 77: unsigned char i=0;
  5176  0014A2  0E00               	movlw	0
  5177  0014A4  6E2B               	movwf	grabRightIR@i,c
  5178                           
  5179                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5180  0014A6  0E00               	movlw	0
  5181  0014A8  6E2B               	movwf	grabRightIR@i,c
  5182  0014AA                     l2103:
  5183  0014AA  0E03               	movlw	3
  5184  0014AC  642B               	cpfsgt	grabRightIR@i,c
  5185  0014AE  D001               	goto	l2107
  5186  0014B0  D01E               	goto	l2113
  5187  0014B2                     l2107:
  5188                           
  5189                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5190  0014B2  5069               	movf	3945,w,c	;volatile
  5191  0014B4  6E26               	movwf	??_grabRightIR& (0+255),c
  5192  0014B6  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5193  0014B8  0E07               	movlw	7
  5194  0014BA                     u1455:
  5195  0014BA  90D8               	bcf	status,0,c
  5196  0014BC  3626               	rlcf	??_grabRightIR,f,c
  5197  0014BE  3627               	rlcf	??_grabRightIR+1,f,c
  5198  0014C0  2EE8               	decfsz	wreg,f,c
  5199  0014C2  D7FB               	goto	u1455
  5200  0014C4  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5201  0014C8  90D8               	bcf	status,0,c
  5202  0014CA  3228               	rrcf	??_grabRightIR+2,f,c
  5203  0014CC  5028               	movf	??_grabRightIR+2,w,c
  5204  0014CE  1226               	iorwf	??_grabRightIR,f,c
  5205  0014D0  0E00               	movlw	0
  5206  0014D2  1227               	iorwf	??_grabRightIR+1,f,c
  5207  0014D4  5026               	movf	??_grabRightIR,w,c
  5208  0014D6  2629               	addwf	grabRightIR@IR_signal,f,c
  5209  0014D8  5027               	movf	??_grabRightIR+1,w,c
  5210  0014DA  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5211                           
  5212                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5213  0014DC  0E82               	movlw	130
  5214  0014DE  6E26               	movwf	??_grabRightIR& (0+255),c
  5215  0014E0  0EDE               	movlw	222
  5216  0014E2                     u3017:
  5217  0014E2  2EE8               	decfsz	wreg,f,c
  5218  0014E4  D7FE               	goto	u3017
  5219  0014E6  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5220  0014E8  D7FC               	goto	u3017
  5221  0014EA  2A2B               	incf	grabRightIR@i,f,c
  5222  0014EC  D7DE               	goto	l2103
  5223  0014EE                     l2113:
  5224                           
  5225                           ;IR_Reading.c: 83: }
  5226                           ;IR_Reading.c: 85: return IR_signal>>2;
  5227  0014EE  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5228  0014F2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5229  0014F6  90D8               	bcf	status,0,c
  5230  0014F8  3227               	rrcf	??_grabRightIR+1,f,c
  5231  0014FA  3226               	rrcf	??_grabRightIR,f,c
  5232  0014FC  90D8               	bcf	status,0,c
  5233  0014FE  3227               	rrcf	??_grabRightIR+1,f,c
  5234  001500  3226               	rrcf	??_grabRightIR,f,c
  5235  001502  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5236  001506  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5237  00150A  0012               	return	
  5238  00150C                     __end_of_grabRightIR:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           postinc0	equ	0xFEE
  5248                           wreg	equ	0xFE8
  5249                           indf1	equ	0xFE7
  5250                           fsr1h	equ	0xFE2
  5251                           fsr1l	equ	0xFE1
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _grabLeftIR *****************
  5260 ;; Defined at:
  5261 ;;		line 90 in file "IR_Reading.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5266 ;;  i               1   42[COMRAM] unsigned char 
  5267 ;; Return value:  Size  Location     Type
  5268 ;;                  2   35[COMRAM] unsigned int 
  5269 ;; Registers used:
  5270 ;;		wreg, status,2, status,0
  5271 ;; Tracked objects:
  5272 ;;		On entry : 0/0
  5273 ;;		On exit  : 0/0
  5274 ;;		Unchanged: 0/0
  5275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5276 ;;      Params:         2       0       0       0
  5277 ;;      Locals:         3       0       0       0
  5278 ;;      Temps:          3       0       0       0
  5279 ;;      Totals:         8       0       0       0
  5280 ;;Total ram usage:        8 bytes
  5281 ;; Hardware stack levels used:    1
  5282 ;; Hardware stack levels required when called:    3
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_ScanIR
  5287 ;;		_ScanWithRange
  5288 ;;		_main
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text23
  5293  00150C                     __ptext23:
  5294                           	opt stack 0
  5295  00150C                     _grabLeftIR:
  5296                           	opt stack 27
  5297                           
  5298                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5299                           
  5300                           ;incstack = 0
  5301  00150C  0E00               	movlw	0
  5302  00150E  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5303  001510  0E00               	movlw	0
  5304  001512  6E29               	movwf	grabLeftIR@IR_signal,c
  5305                           
  5306                           ;IR_Reading.c: 93: unsigned char i=0;
  5307  001514  0E00               	movlw	0
  5308  001516  6E2B               	movwf	grabLeftIR@i,c
  5309                           
  5310                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5311  001518  0E00               	movlw	0
  5312  00151A  6E2B               	movwf	grabLeftIR@i,c
  5313  00151C                     l2119:
  5314  00151C  0E03               	movlw	3
  5315  00151E  642B               	cpfsgt	grabLeftIR@i,c
  5316  001520  D001               	goto	l2123
  5317  001522  D01E               	goto	l2129
  5318  001524                     l2123:
  5319                           
  5320                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5321  001524  5067               	movf	3943,w,c	;volatile
  5322  001526  6E26               	movwf	??_grabLeftIR& (0+255),c
  5323  001528  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5324  00152A  0E07               	movlw	7
  5325  00152C                     u1485:
  5326  00152C  90D8               	bcf	status,0,c
  5327  00152E  3626               	rlcf	??_grabLeftIR,f,c
  5328  001530  3627               	rlcf	??_grabLeftIR+1,f,c
  5329  001532  2EE8               	decfsz	wreg,f,c
  5330  001534  D7FB               	goto	u1485
  5331  001536  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5332  00153A  90D8               	bcf	status,0,c
  5333  00153C  3228               	rrcf	??_grabLeftIR+2,f,c
  5334  00153E  5028               	movf	??_grabLeftIR+2,w,c
  5335  001540  1226               	iorwf	??_grabLeftIR,f,c
  5336  001542  0E00               	movlw	0
  5337  001544  1227               	iorwf	??_grabLeftIR+1,f,c
  5338  001546  5026               	movf	??_grabLeftIR,w,c
  5339  001548  2629               	addwf	grabLeftIR@IR_signal,f,c
  5340  00154A  5027               	movf	??_grabLeftIR+1,w,c
  5341  00154C  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5342                           
  5343                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5344  00154E  0E82               	movlw	130
  5345  001550  6E26               	movwf	??_grabLeftIR& (0+255),c
  5346  001552  0EDE               	movlw	222
  5347  001554                     u3027:
  5348  001554  2EE8               	decfsz	wreg,f,c
  5349  001556  D7FE               	goto	u3027
  5350  001558  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5351  00155A  D7FC               	goto	u3027
  5352  00155C  2A2B               	incf	grabLeftIR@i,f,c
  5353  00155E  D7DE               	goto	l2119
  5354  001560                     l2129:
  5355                           
  5356                           ;IR_Reading.c: 99: }
  5357                           ;IR_Reading.c: 101: return IR_signal>>2;
  5358  001560  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5359  001564  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5360  001568  90D8               	bcf	status,0,c
  5361  00156A  3227               	rrcf	??_grabLeftIR+1,f,c
  5362  00156C  3226               	rrcf	??_grabLeftIR,f,c
  5363  00156E  90D8               	bcf	status,0,c
  5364  001570  3227               	rrcf	??_grabLeftIR+1,f,c
  5365  001572  3226               	rrcf	??_grabLeftIR,f,c
  5366  001574  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5367  001578  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5368  00157C  0012               	return	
  5369  00157E                     __end_of_grabLeftIR:
  5370                           	opt stack 0
  5371                           tblptru	equ	0xFF8
  5372                           tblptrh	equ	0xFF7
  5373                           tblptrl	equ	0xFF6
  5374                           tablat	equ	0xFF5
  5375                           prodh	equ	0xFF4
  5376                           prodl	equ	0xFF3
  5377                           intcon	equ	0xFF2
  5378                           postinc0	equ	0xFEE
  5379                           wreg	equ	0xFE8
  5380                           indf1	equ	0xFE7
  5381                           fsr1h	equ	0xFE2
  5382                           fsr1l	equ	0xFE1
  5383                           indf2	equ	0xFDF
  5384                           postinc2	equ	0xFDE
  5385                           postdec2	equ	0xFDD
  5386                           fsr2h	equ	0xFDA
  5387                           fsr2l	equ	0xFD9
  5388                           status	equ	0xFD8
  5389                           
  5390 ;; *************** function _SetLine *****************
  5391 ;; Defined at:
  5392 ;;		line 74 in file "LCD.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;  line            1    wreg     unsigned char 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  line            1   41[COMRAM] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;		None               void
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5406 ;;      Params:         0       0       0       0
  5407 ;;      Locals:         1       0       0       0
  5408 ;;      Temps:          0       0       0       0
  5409 ;;      Totals:         1       0       0       0
  5410 ;;Total ram usage:        1 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    6
  5413 ;; This function calls:
  5414 ;;		_SendLCD
  5415 ;; This function is called by:
  5416 ;;		_ScanIR
  5417 ;;		_ScanWithRange
  5418 ;;		_main
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           	psect	text24
  5423  0017F4                     __ptext24:
  5424                           	opt stack 0
  5425  0017F4                     _SetLine:
  5426                           	opt stack 24
  5427                           
  5428                           ;incstack = 0
  5429                           ;SetLine@line stored from wreg
  5430  0017F4  6E2A               	movwf	SetLine@line,c
  5431                           
  5432                           ;LCD.c: 75: if (line==1) {
  5433  0017F6  042A               	decf	SetLine@line,w,c
  5434  0017F8  A4D8               	btfss	status,2,c
  5435  0017FA  D006               	goto	l2137
  5436                           
  5437                           ;LCD.c: 76: SendLCD(0x80,0);
  5438  0017FC  0E00               	movlw	0
  5439  0017FE  6E28               	movwf	SendLCD@type,c
  5440  001800  0E80               	movlw	128
  5441  001802  EC12  F00C         	call	_SendLCD
  5442                           
  5443                           ;LCD.c: 77: } else if (line==2) {
  5444  001806  D009               	goto	l2141
  5445  001808                     l2137:
  5446  001808  0E02               	movlw	2
  5447  00180A  182A               	xorwf	SetLine@line,w,c
  5448  00180C  A4D8               	btfss	status,2,c
  5449  00180E  D005               	goto	l2141
  5450                           
  5451                           ;LCD.c: 78: SendLCD(0xC0,0);
  5452  001810  0E00               	movlw	0
  5453  001812  6E28               	movwf	SendLCD@type,c
  5454  001814  0EC0               	movlw	192
  5455  001816  EC12  F00C         	call	_SendLCD
  5456  00181A                     l2141:
  5457                           
  5458                           ;LCD.c: 79: }
  5459                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5460  00181A  0E21               	movlw	33
  5461  00181C                     u3037:
  5462  00181C  2EE8               	decfsz	wreg,f,c
  5463  00181E  D7FE               	goto	u3037
  5464  001820  F000               	nop	
  5465  001822  0012               	return		;funcret
  5466  001824                     __end_of_SetLine:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           postinc0	equ	0xFEE
  5476                           wreg	equ	0xFE8
  5477                           indf1	equ	0xFE7
  5478                           fsr1h	equ	0xFE2
  5479                           fsr1l	equ	0xFE1
  5480                           indf2	equ	0xFDF
  5481                           postinc2	equ	0xFDE
  5482                           postdec2	equ	0xFDD
  5483                           fsr2h	equ	0xFDA
  5484                           fsr2l	equ	0xFD9
  5485                           status	equ	0xFD8
  5486                           
  5487 ;; *************** function _LCD_String *****************
  5488 ;; Defined at:
  5489 ;;		line 83 in file "LCD.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  string          2   41[COMRAM] PTR unsigned char 
  5492 ;;		 -> STR_9(11), STR_8(12), STR_7(10), main@buf(40), 
  5493 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5494 ;;		 -> STR_1(12), 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;		None
  5497 ;; Return value:  Size  Location     Type
  5498 ;;		None               void
  5499 ;; Registers used:
  5500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5506 ;;      Params:         2       0       0       0
  5507 ;;      Locals:         0       0       0       0
  5508 ;;      Temps:          0       0       0       0
  5509 ;;      Totals:         2       0       0       0
  5510 ;;Total ram usage:        2 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    6
  5513 ;; This function calls:
  5514 ;;		_SendLCD
  5515 ;; This function is called by:
  5516 ;;		_ScanIR
  5517 ;;		_ScanWithRange
  5518 ;;		_main
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text25
  5523  00157E                     __ptext25:
  5524                           	opt stack 0
  5525  00157E                     _LCD_String:
  5526                           	opt stack 23
  5527                           
  5528                           ;LCD.c: 85: while(*string != 0){
  5529                           
  5530                           ;incstack = 0
  5531  00157E  D01A               	goto	l2151
  5532  001580                     l2145:
  5533                           
  5534                           ;LCD.c: 88: SendLCD(*string++,1);
  5535  001580  0E01               	movlw	1
  5536  001582  6E28               	movwf	SendLCD@type,c
  5537  001584  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5538  001588  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5539  00158C  6AF8               	clrf	tblptru,c
  5540  00158E  0E02               	movlw	(high __ramtop+-1)
  5541  001590  64F7               	cpfsgt	tblptrh,c
  5542  001592  D003               	bra	u1527
  5543  001594  0008               	tblrd		*
  5544  001596  50F5               	movf	tablat,w,c
  5545  001598  D005               	bra	u1520
  5546  00159A                     u1527:
  5547  00159A  CFF6 FFE1          	movff	tblptrl,fsr1l
  5548  00159E  CFF7 FFE2          	movff	tblptrh,fsr1h
  5549  0015A2  50E7               	movf	indf1,w,c
  5550  0015A4                     u1520:
  5551  0015A4  EC12  F00C         	call	_SendLCD
  5552  0015A8  4A2A               	infsnz	LCD_String@string,f,c
  5553  0015AA  2A2B               	incf	LCD_String@string+1,f,c
  5554                           
  5555                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5556  0015AC  0E21               	movlw	33
  5557  0015AE                     u3047:
  5558  0015AE  2EE8               	decfsz	wreg,f,c
  5559  0015B0  D7FE               	goto	u3047
  5560  0015B2  F000               	nop	
  5561  0015B4                     l2151:
  5562  0015B4  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5563  0015B8  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5564  0015BC  6AF8               	clrf	tblptru,c
  5565  0015BE  0E02               	movlw	(high __ramtop+-1)
  5566  0015C0  64F7               	cpfsgt	tblptrh,c
  5567  0015C2  D003               	bra	u1537
  5568  0015C4  0008               	tblrd		*
  5569  0015C6  50F5               	movf	tablat,w,c
  5570  0015C8  D005               	bra	u1530
  5571  0015CA                     u1537:
  5572  0015CA  CFF6 FFE1          	movff	tblptrl,fsr1l
  5573  0015CE  CFF7 FFE2          	movff	tblptrh,fsr1h
  5574  0015D2  50E7               	movf	indf1,w,c
  5575  0015D4                     u1530:
  5576  0015D4  0900               	iorlw	0
  5577  0015D6  B4D8               	btfsc	status,2,c
  5578  0015D8  0012               	return	
  5579  0015DA  D7D2               	goto	l2145
  5580  0015DC                     __end_of_LCD_String:
  5581                           	opt stack 0
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           intcon	equ	0xFF2
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           indf1	equ	0xFE7
  5592                           fsr1h	equ	0xFE2
  5593                           fsr1l	equ	0xFE1
  5594                           indf2	equ	0xFDF
  5595                           postinc2	equ	0xFDE
  5596                           postdec2	equ	0xFDD
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function _SendLCD *****************
  5602 ;; Defined at:
  5603 ;;		line 27 in file "LCD.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  Byte            1    wreg     unsigned char 
  5606 ;;  type            1   39[COMRAM] unsigned char 
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;  Byte            1   40[COMRAM] unsigned char 
  5609 ;; Return value:  Size  Location     Type
  5610 ;;		None               void
  5611 ;; Registers used:
  5612 ;;		wreg, status,2, status,0, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5618 ;;      Params:         1       0       0       0
  5619 ;;      Locals:         1       0       0       0
  5620 ;;      Temps:          0       0       0       0
  5621 ;;      Totals:         2       0       0       0
  5622 ;;Total ram usage:        2 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    5
  5625 ;; This function calls:
  5626 ;;		_LCDout
  5627 ;; This function is called by:
  5628 ;;		_initLCD
  5629 ;;		_SetLine
  5630 ;;		_LCD_String
  5631 ;;		_ScanIR
  5632 ;;		_ScanWithRange
  5633 ;;		_main
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text26
  5638  001824                     __ptext26:
  5639                           	opt stack 0
  5640  001824                     _SendLCD:
  5641                           	opt stack 24
  5642                           
  5643                           ;incstack = 0
  5644                           ;SendLCD@Byte stored from wreg
  5645  001824  6E29               	movwf	SendLCD@Byte,c
  5646                           
  5647                           ;LCD.c: 30: LATAbits.LATA6=type;
  5648  001826  B028               	btfsc	SendLCD@type,0,c
  5649  001828  D002               	bra	u1355
  5650  00182A  9C89               	bcf	3977,6,c	;volatile
  5651  00182C  D001               	bra	u1356
  5652  00182E                     u1355:
  5653  00182E  8C89               	bsf	3977,6,c	;volatile
  5654  001830                     u1356:
  5655                           
  5656                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5657  001830  3829               	swapf	SendLCD@Byte,w,c
  5658  001832  0B0F               	andlw	15
  5659  001834  0B0F               	andlw	15
  5660  001836  EC21  F008         	call	_LCDout
  5661                           
  5662                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5663  00183A  0E06               	movlw	6
  5664  00183C                     u3057:
  5665  00183C  2EE8               	decfsz	wreg,f,c
  5666  00183E  D7FE               	goto	u3057
  5667  001840  D000               	nop2		;nop
  5668                           
  5669                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5670  001842  5029               	movf	SendLCD@Byte,w,c
  5671  001844  0B0F               	andlw	15
  5672  001846  EC21  F008         	call	_LCDout
  5673                           
  5674                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5675  00184A  0E21               	movlw	33
  5676  00184C                     u3067:
  5677  00184C  2EE8               	decfsz	wreg,f,c
  5678  00184E  D7FE               	goto	u3067
  5679  001850  F000               	nop	
  5680  001852  0012               	return		;funcret
  5681  001854                     __end_of_SendLCD:
  5682                           	opt stack 0
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           intcon	equ	0xFF2
  5690                           postinc0	equ	0xFEE
  5691                           wreg	equ	0xFE8
  5692                           indf1	equ	0xFE7
  5693                           fsr1h	equ	0xFE2
  5694                           fsr1l	equ	0xFE1
  5695                           indf2	equ	0xFDF
  5696                           postinc2	equ	0xFDE
  5697                           postdec2	equ	0xFDD
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _LCDout *****************
  5703 ;; Defined at:
  5704 ;;		line 14 in file "LCD.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  number          1    wreg     unsigned char 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  number          1   38[COMRAM] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;		None               void
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0, cstack
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5718 ;;      Params:         0       0       0       0
  5719 ;;      Locals:         1       0       0       0
  5720 ;;      Temps:          3       0       0       0
  5721 ;;      Totals:         4       0       0       0
  5722 ;;Total ram usage:        4 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    4
  5725 ;; This function calls:
  5726 ;;		_E_TOG
  5727 ;; This function is called by:
  5728 ;;		_SendLCD
  5729 ;;		_initLCD
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text27
  5734  001042                     __ptext27:
  5735                           	opt stack 0
  5736  001042                     _LCDout:
  5737                           	opt stack 24
  5738                           
  5739                           ;incstack = 0
  5740                           ;LCDout@number stored from wreg
  5741  001042  6E27               	movwf	LCDout@number,c
  5742                           
  5743                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5744  001044  5027               	movf	LCDout@number,w,c
  5745  001046  6E24               	movwf	??_LCDout& (0+255),c
  5746  001048  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5747  00104A  0E07               	movlw	7
  5748  00104C                     u1205:
  5749  00104C  90D8               	bcf	status,0,c
  5750  00104E  3624               	rlcf	??_LCDout,f,c
  5751  001050  3625               	rlcf	??_LCDout+1,f,c
  5752  001052  2EE8               	decfsz	wreg,f,c
  5753  001054  D7FB               	goto	u1205
  5754  001056  0E07               	movlw	7
  5755  001058  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5756  00105A                     u1215:
  5757  00105A  3425               	rlcf	??_LCDout+1,w,c
  5758  00105C  3225               	rrcf	??_LCDout+1,f,c
  5759  00105E  3224               	rrcf	??_LCDout,f,c
  5760  001060  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5761  001062  D7FB               	goto	u1215
  5762  001064  4624               	rlncf	??_LCDout,f,c
  5763  001066  508B               	movf	3979,w,c	;volatile
  5764  001068  1824               	xorwf	??_LCDout,w,c
  5765  00106A  0BFD               	andlw	-3
  5766  00106C  1824               	xorwf	??_LCDout,w,c
  5767  00106E  6E8B               	movwf	3979,c	;volatile
  5768                           
  5769                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5770  001070  5027               	movf	LCDout@number,w,c
  5771  001072  6E24               	movwf	??_LCDout& (0+255),c
  5772  001074  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5773  001076  0E06               	movlw	6
  5774  001078                     u1225:
  5775  001078  90D8               	bcf	status,0,c
  5776  00107A  3624               	rlcf	??_LCDout,f,c
  5777  00107C  3625               	rlcf	??_LCDout+1,f,c
  5778  00107E  2EE8               	decfsz	wreg,f,c
  5779  001080  D7FB               	goto	u1225
  5780  001082  0E07               	movlw	7
  5781  001084  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5782  001086                     u1235:
  5783  001086  3425               	rlcf	??_LCDout+1,w,c
  5784  001088  3225               	rrcf	??_LCDout+1,f,c
  5785  00108A  3224               	rrcf	??_LCDout,f,c
  5786  00108C  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5787  00108E  D7FB               	goto	u1235
  5788  001090  4624               	rlncf	??_LCDout,f,c
  5789  001092  4624               	rlncf	??_LCDout,f,c
  5790  001094  508B               	movf	3979,w,c	;volatile
  5791  001096  1824               	xorwf	??_LCDout,w,c
  5792  001098  0BFB               	andlw	-5
  5793  00109A  1824               	xorwf	??_LCDout,w,c
  5794  00109C  6E8B               	movwf	3979,c	;volatile
  5795                           
  5796                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5797  00109E  5027               	movf	LCDout@number,w,c
  5798  0010A0  6E24               	movwf	??_LCDout& (0+255),c
  5799  0010A2  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5800  0010A4  0E05               	movlw	5
  5801  0010A6                     u1245:
  5802  0010A6  90D8               	bcf	status,0,c
  5803  0010A8  3624               	rlcf	??_LCDout,f,c
  5804  0010AA  3625               	rlcf	??_LCDout+1,f,c
  5805  0010AC  2EE8               	decfsz	wreg,f,c
  5806  0010AE  D7FB               	goto	u1245
  5807  0010B0  0E07               	movlw	7
  5808  0010B2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5809  0010B4                     u1255:
  5810  0010B4  3425               	rlcf	??_LCDout+1,w,c
  5811  0010B6  3225               	rrcf	??_LCDout+1,f,c
  5812  0010B8  3224               	rrcf	??_LCDout,f,c
  5813  0010BA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5814  0010BC  D7FB               	goto	u1255
  5815  0010BE  508C               	movf	3980,w,c	;volatile
  5816  0010C0  1824               	xorwf	??_LCDout,w,c
  5817  0010C2  0BFE               	andlw	-2
  5818  0010C4  1824               	xorwf	??_LCDout,w,c
  5819  0010C6  6E8C               	movwf	3980,c	;volatile
  5820                           
  5821                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  5822  0010C8  5027               	movf	LCDout@number,w,c
  5823  0010CA  6E24               	movwf	??_LCDout& (0+255),c
  5824  0010CC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5825  0010CE  3A24               	swapf	??_LCDout,f,c
  5826  0010D0  3A25               	swapf	??_LCDout+1,f,c
  5827  0010D2  0EF0               	movlw	240
  5828  0010D4  1625               	andwf	??_LCDout+1,f,c
  5829  0010D6  5024               	movf	??_LCDout,w,c
  5830  0010D8  0B0F               	andlw	15
  5831  0010DA  1225               	iorwf	??_LCDout+1,f,c
  5832  0010DC  0EF0               	movlw	240
  5833  0010DE  1624               	andwf	??_LCDout,f,c
  5834  0010E0  0E07               	movlw	7
  5835  0010E2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5836  0010E4                     u1265:
  5837  0010E4  3425               	rlcf	??_LCDout+1,w,c
  5838  0010E6  3225               	rrcf	??_LCDout+1,f,c
  5839  0010E8  3224               	rrcf	??_LCDout,f,c
  5840  0010EA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5841  0010EC  D7FB               	goto	u1265
  5842  0010EE  4624               	rlncf	??_LCDout,f,c
  5843  0010F0  508C               	movf	3980,w,c	;volatile
  5844  0010F2  1824               	xorwf	??_LCDout,w,c
  5845  0010F4  0BFD               	andlw	-3
  5846  0010F6  1824               	xorwf	??_LCDout,w,c
  5847  0010F8  6E8C               	movwf	3980,c	;volatile
  5848                           
  5849                           ;LCD.c: 21: E_TOG();
  5850  0010FA  EC93  F00C         	call	_E_TOG	;wreg free
  5851                           
  5852                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5853  0010FE  0E03               	movlw	3
  5854  001100                     u3077:
  5855  001100  2EE8               	decfsz	wreg,f,c
  5856  001102  D7FE               	goto	u3077
  5857  001104  F000               	nop	
  5858  001106  0012               	return		;funcret
  5859  001108                     __end_of_LCDout:
  5860                           	opt stack 0
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           postinc0	equ	0xFEE
  5869                           wreg	equ	0xFE8
  5870                           indf1	equ	0xFE7
  5871                           fsr1h	equ	0xFE2
  5872                           fsr1l	equ	0xFE1
  5873                           indf2	equ	0xFDF
  5874                           postinc2	equ	0xFDE
  5875                           postdec2	equ	0xFDD
  5876                           fsr2h	equ	0xFDA
  5877                           fsr2l	equ	0xFD9
  5878                           status	equ	0xFD8
  5879                           
  5880 ;; *************** function _E_TOG *****************
  5881 ;; Defined at:
  5882 ;;		line 5 in file "LCD.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;		None
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;		None
  5887 ;; Return value:  Size  Location     Type
  5888 ;;		None               void
  5889 ;; Registers used:
  5890 ;;		wreg
  5891 ;; Tracked objects:
  5892 ;;		On entry : 0/0
  5893 ;;		On exit  : 0/0
  5894 ;;		Unchanged: 0/0
  5895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5896 ;;      Params:         0       0       0       0
  5897 ;;      Locals:         0       0       0       0
  5898 ;;      Temps:          0       0       0       0
  5899 ;;      Totals:         0       0       0       0
  5900 ;;Total ram usage:        0 bytes
  5901 ;; Hardware stack levels used:    1
  5902 ;; Hardware stack levels required when called:    3
  5903 ;; This function calls:
  5904 ;;		Nothing
  5905 ;; This function is called by:
  5906 ;;		_LCDout
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           	psect	text28
  5911  001926                     __ptext28:
  5912                           	opt stack 0
  5913  001926                     _E_TOG:
  5914                           	opt stack 24
  5915                           
  5916                           ;LCD.c: 8: LATCbits.LATC0=1;
  5917                           
  5918                           ;incstack = 0
  5919  001926  808B               	bsf	3979,0,c	;volatile
  5920                           
  5921                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5922  001928  0E03               	movlw	3
  5923  00192A                     u3087:
  5924  00192A  2EE8               	decfsz	wreg,f,c
  5925  00192C  D7FE               	goto	u3087
  5926  00192E  F000               	nop	
  5927                           
  5928                           ;LCD.c: 10: LATCbits.LATC0=0;
  5929  001930  908B               	bcf	3979,0,c	;volatile
  5930  001932  0012               	return		;funcret
  5931  001934                     __end_of_E_TOG:
  5932                           	opt stack 0
  5933                           tblptru	equ	0xFF8
  5934                           tblptrh	equ	0xFF7
  5935                           tblptrl	equ	0xFF6
  5936                           tablat	equ	0xFF5
  5937                           prodh	equ	0xFF4
  5938                           prodl	equ	0xFF3
  5939                           intcon	equ	0xFF2
  5940                           postinc0	equ	0xFEE
  5941                           wreg	equ	0xFE8
  5942                           indf1	equ	0xFE7
  5943                           fsr1h	equ	0xFE2
  5944                           fsr1l	equ	0xFE1
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           postdec2	equ	0xFDD
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _InterruptHandlerLow *****************
  5953 ;; Defined at:
  5954 ;;		line 18 in file "main.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;		None
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;		None               void
  5961 ;; Registers used:
  5962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5968 ;;      Params:         0       0       0       0
  5969 ;;      Locals:         0       0       0       0
  5970 ;;      Temps:         17       0       0       0
  5971 ;;      Totals:        17       0       0       0
  5972 ;;Total ram usage:       17 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    2
  5975 ;; This function calls:
  5976 ;;		Nothing
  5977 ;; This function is called by:
  5978 ;;		Interrupt level 1
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           	psect	intcodelo
  5983  000018                     __pintcodelo:
  5984                           	opt stack 0
  5985  000018                     _InterruptHandlerLow:
  5986                           	opt stack 23
  5987                           
  5988                           ;incstack = 0
  5989  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5990  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  5991  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  5992  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  5993  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  5994  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  5995  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  5996  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  5997  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  5998  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  5999  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6000  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6001  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6002  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6003  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6004  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6005  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6006  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6007                           
  6008                           ;main.c: 20: if (PIR1bits.RCIF) {
  6009  00005E  AA9E               	btfss	3998,5,c	;volatile
  6010  000060  D016               	goto	i1l353
  6011                           
  6012                           ;main.c: 21: ReceivedString[i]=RCREG;
  6013  000062  503A               	movf	_i,w,c	;volatile
  6014  000064  0D01               	mullw	1
  6015  000066  0EC0               	movlw	low _ReceivedString
  6016  000068  24F3               	addwf	prodl,w,c
  6017  00006A  6ED9               	movwf	fsr2l,c
  6018  00006C  0E00               	movlw	high _ReceivedString
  6019  00006E  20F4               	addwfc	prodh,w,c
  6020  000070  6EDA               	movwf	fsr2h,c
  6021  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6022                           
  6023                           ;main.c: 22: RFID_Read=1;
  6024  000076  0E01               	movlw	1
  6025  000078  0101               	movlb	1	; () banked
  6026  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6027                           
  6028                           ; BSR set to: 1
  6029                           ;main.c: 23: if (i==15){
  6030  00007C  0E0F               	movlw	15
  6031  00007E  183A               	xorwf	_i,w,c	;volatile
  6032  000080  A4D8               	btfss	status,2,c
  6033  000082  D003               	goto	i1l2547
  6034                           
  6035                           ; BSR set to: 1
  6036                           ;main.c: 24: i=0;
  6037  000084  0E00               	movlw	0
  6038  000086  6E3A               	movwf	_i,c	;volatile
  6039                           
  6040                           ;main.c: 25: }else{
  6041  000088  D001               	goto	i1l2549
  6042  00008A                     i1l2547:
  6043                           
  6044                           ; BSR set to: 1
  6045                           ;main.c: 26: i++;
  6046  00008A  2A3A               	incf	_i,f,c	;volatile
  6047  00008C                     i1l2549:
  6048                           
  6049                           ; BSR set to: 1
  6050                           ;main.c: 27: }
  6051                           ;main.c: 28: PIR1bits.RCIF=0;
  6052  00008C  9A9E               	bcf	3998,5,c	;volatile
  6053  00008E                     i1l353:
  6054  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6055  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6056  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6057  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6058  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6059  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6060  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6061  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6062  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6063  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6064  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6065  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6066  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6067  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6068  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6069  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6070  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6071  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6072  0000D4  0010               	retfie	
  6073  0000D6                     __end_of_InterruptHandlerLow:
  6074                           	opt stack 0
  6075                           pclatu	equ	0xFFB
  6076                           pclath	equ	0xFFA
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           intcon	equ	0xFF2
  6084                           postinc0	equ	0xFEE
  6085                           fsr0h	equ	0xFEA
  6086                           fsr0l	equ	0xFE9
  6087                           wreg	equ	0xFE8
  6088                           indf1	equ	0xFE7
  6089                           fsr1h	equ	0xFE2
  6090                           fsr1l	equ	0xFE1
  6091                           bsr	equ	0xFE0
  6092                           indf2	equ	0xFDF
  6093                           postinc2	equ	0xFDE
  6094                           postdec2	equ	0xFDD
  6095                           fsr2h	equ	0xFDA
  6096                           fsr2l	equ	0xFD9
  6097                           status	equ	0xFD8
  6098                           
  6099 ;; *************** function _InterruptHandlerHigh *****************
  6100 ;; Defined at:
  6101 ;;		line 34 in file "main.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;		None
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;		None
  6106 ;; Return value:  Size  Location     Type
  6107 ;;		None               void
  6108 ;; Registers used:
  6109 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6115 ;;      Params:         0       0       0       0
  6116 ;;      Locals:         0       0       0       0
  6117 ;;      Temps:         14       0       0       0
  6118 ;;      Totals:        14       0       0       0
  6119 ;;Total ram usage:       14 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    1
  6122 ;; This function calls:
  6123 ;;		i2_delay_tenth_s
  6124 ;; This function is called by:
  6125 ;;		Interrupt level 2
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	intcode
  6130  000008                     __pintcode:
  6131                           	opt stack 0
  6132  000008                     _InterruptHandlerHigh:
  6133                           	opt stack 23
  6134                           
  6135                           ;incstack = 0
  6136  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6137  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6138  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6139  000012  EF86  F009         	goto	int_func
  6140                           pclatu	equ	0xFFB
  6141                           pclath	equ	0xFFA
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           intcon	equ	0xFF2
  6149                           postinc0	equ	0xFEE
  6150                           fsr0h	equ	0xFEA
  6151                           fsr0l	equ	0xFE9
  6152                           wreg	equ	0xFE8
  6153                           indf1	equ	0xFE7
  6154                           fsr1h	equ	0xFE2
  6155                           fsr1l	equ	0xFE1
  6156                           bsr	equ	0xFE0
  6157                           indf2	equ	0xFDF
  6158                           postinc2	equ	0xFDE
  6159                           postdec2	equ	0xFDD
  6160                           fsr2h	equ	0xFDA
  6161                           fsr2l	equ	0xFD9
  6162                           status	equ	0xFD8
  6163                           
  6164                           	psect	intcode_body
  6165  00130C                     __pintcode_body:
  6166                           	opt stack 23
  6167  00130C                     int_func:
  6168                           	opt stack 23
  6169  00130C  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6170  001310  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6171  001314  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6172  001318  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6173  00131C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6174  001320  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6175  001324  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6176  001328  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6177  00132C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6178  001330  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6179  001334  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6180  001338  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6181                           
  6182                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6183  00133C  A2F2               	btfss	intcon,1,c	;volatile
  6184  00133E  D00D               	goto	i2l361
  6185                           
  6186                           ;main.c: 36: if (mode==-1) {
  6187  001340  283B               	incf	_mode,w,c	;volatile
  6188  001342  A4D8               	btfss	status,2,c
  6189  001344  D003               	goto	i2l2557
  6190                           
  6191                           ;main.c: 38: mode=1;
  6192  001346  0E01               	movlw	1
  6193  001348  6E3B               	movwf	_mode,c	;volatile
  6194                           
  6195                           ;main.c: 39: } else if (mode==0) {
  6196  00134A  D003               	goto	i2l2561
  6197  00134C                     i2l2557:
  6198  00134C  503B               	movf	_mode,w,c	;volatile
  6199  00134E  A4D8               	btfss	status,2,c
  6200                           
  6201                           ;main.c: 43: mode=-1;
  6202                           
  6203                           ;main.c: 41: } else {
  6204  001350  683B               	setf	_mode,c	;volatile
  6205  001352                     i2l2561:
  6206                           
  6207                           ;main.c: 44: }
  6208                           ;main.c: 46: delay_tenth_s(2);
  6209  001352  0E02               	movlw	2
  6210  001354  ECC5  F00B         	call	i2_delay_tenth_s
  6211                           
  6212                           ;main.c: 47: INTCONbits.INT0IF=0;
  6213  001358  92F2               	bcf	intcon,1,c	;volatile
  6214  00135A                     i2l361:
  6215  00135A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6216  00135E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6217  001362  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6218  001366  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6219  00136A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6220  00136E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6221  001372  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6222  001376  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6223  00137A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6224  00137E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6225  001382  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6226  001386  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6227  00138A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6228  00138E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6229  001392  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6230  001394  0011               	retfie		f
  6231  001396                     __end_of_InterruptHandlerHigh:
  6232                           	opt stack 0
  6233                           pclatu	equ	0xFFB
  6234                           pclath	equ	0xFFA
  6235                           tblptru	equ	0xFF8
  6236                           tblptrh	equ	0xFF7
  6237                           tblptrl	equ	0xFF6
  6238                           tablat	equ	0xFF5
  6239                           prodh	equ	0xFF4
  6240                           prodl	equ	0xFF3
  6241                           intcon	equ	0xFF2
  6242                           postinc0	equ	0xFEE
  6243                           fsr0h	equ	0xFEA
  6244                           fsr0l	equ	0xFE9
  6245                           wreg	equ	0xFE8
  6246                           indf1	equ	0xFE7
  6247                           fsr1h	equ	0xFE2
  6248                           fsr1l	equ	0xFE1
  6249                           bsr	equ	0xFE0
  6250                           indf2	equ	0xFDF
  6251                           postinc2	equ	0xFDE
  6252                           postdec2	equ	0xFDD
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function i2_delay_tenth_s *****************
  6258 ;; Defined at:
  6259 ;;		line 21 in file "Movement.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;  tenth_second    1    wreg     unsigned char 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6264 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6265 ;; Return value:  Size  Location     Type
  6266 ;;		None               void
  6267 ;; Registers used:
  6268 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6269 ;; Tracked objects:
  6270 ;;		On entry : 0/0
  6271 ;;		On exit  : 0/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6274 ;;      Params:         0       0       0       0
  6275 ;;      Locals:         3       0       0       0
  6276 ;;      Temps:          1       0       0       0
  6277 ;;      Totals:         4       0       0       0
  6278 ;;Total ram usage:        4 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; This function calls:
  6281 ;;		Nothing
  6282 ;; This function is called by:
  6283 ;;		_InterruptHandlerHigh
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           	psect	text31
  6288  00178A                     __ptext31:
  6289                           	opt stack 0
  6290  00178A                     i2_delay_tenth_s:
  6291                           	opt stack 23
  6292                           
  6293                           ;incstack = 0
  6294                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6295  00178A  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6296                           
  6297                           ;Movement.c: 22: unsigned int i=0;
  6298  00178C  0E00               	movlw	0
  6299  00178E  6E04               	movwf	i2delay_tenth_s@i+1,c
  6300  001790  0E00               	movlw	0
  6301  001792  6E03               	movwf	i2delay_tenth_s@i,c
  6302                           
  6303                           ;Movement.c: 23: for (i=1; i<=tenth_seconds*2; i++) {
  6304  001794  0E00               	movlw	0
  6305  001796  6E04               	movwf	i2delay_tenth_s@i+1,c
  6306  001798  0E01               	movlw	1
  6307  00179A  6E03               	movwf	i2delay_tenth_s@i,c
  6308  00179C  D009               	goto	i2l2519
  6309  00179E                     i2l2515:
  6310                           
  6311                           ;Movement.c: 25: _delay((unsigned long)((50)*(8000000/4000.0)));
  6312  00179E  0E82               	movlw	130
  6313  0017A0  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6314  0017A2  0EDE               	movlw	222
  6315  0017A4                     i2u309_47:
  6316  0017A4  2EE8               	decfsz	wreg,f,c
  6317  0017A6  D7FE               	goto	i2u309_47
  6318  0017A8  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6319  0017AA  D7FC               	goto	i2u309_47
  6320  0017AC  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6321  0017AE  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6322  0017B0                     i2l2519:
  6323  0017B0  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6324  0017B2  0D02               	mullw	2
  6325  0017B4  5003               	movf	i2delay_tenth_s@i,w,c
  6326  0017B6  5CF3               	subwf	prodl,w,c
  6327  0017B8  5004               	movf	i2delay_tenth_s@i+1,w,c
  6328  0017BA  58F4               	subwfb	prodh,w,c
  6329  0017BC  A0D8               	btfss	status,0,c
  6330  0017BE  0012               	return	
  6331  0017C0  D7EE               	goto	i2l2515
  6332  0017C2                     __end_ofi2_delay_tenth_s:
  6333                           	opt stack 0
  6334                           pclatu	equ	0xFFB
  6335                           pclath	equ	0xFFA
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           postinc0	equ	0xFEE
  6344                           fsr0h	equ	0xFEA
  6345                           fsr0l	equ	0xFE9
  6346                           wreg	equ	0xFE8
  6347                           indf1	equ	0xFE7
  6348                           fsr1h	equ	0xFE2
  6349                           fsr1l	equ	0xFE1
  6350                           bsr	equ	0xFE0
  6351                           indf2	equ	0xFDF
  6352                           postinc2	equ	0xFDE
  6353                           postdec2	equ	0xFDD
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           pclatu	equ	0xFFB
  6358                           pclath	equ	0xFFA
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           prodh	equ	0xFF4
  6364                           prodl	equ	0xFF3
  6365                           intcon	equ	0xFF2
  6366                           postinc0	equ	0xFEE
  6367                           fsr0h	equ	0xFEA
  6368                           fsr0l	equ	0xFE9
  6369                           wreg	equ	0xFE8
  6370                           indf1	equ	0xFE7
  6371                           fsr1h	equ	0xFE2
  6372                           fsr1l	equ	0xFE1
  6373                           bsr	equ	0xFE0
  6374                           indf2	equ	0xFDF
  6375                           postinc2	equ	0xFDE
  6376                           postdec2	equ	0xFDD
  6377                           fsr2h	equ	0xFDA
  6378                           fsr2l	equ	0xFD9
  6379                           status	equ	0xFD8
  6380                           
  6381                           	psect	rparam
  6382  0000                     pclatu	equ	0xFFB
  6383                           pclath	equ	0xFFA
  6384                           tblptru	equ	0xFF8
  6385                           tblptrh	equ	0xFF7
  6386                           tblptrl	equ	0xFF6
  6387                           tablat	equ	0xFF5
  6388                           prodh	equ	0xFF4
  6389                           prodl	equ	0xFF3
  6390                           intcon	equ	0xFF2
  6391                           postinc0	equ	0xFEE
  6392                           fsr0h	equ	0xFEA
  6393                           fsr0l	equ	0xFE9
  6394                           wreg	equ	0xFE8
  6395                           indf1	equ	0xFE7
  6396                           fsr1h	equ	0xFE2
  6397                           fsr1l	equ	0xFE1
  6398                           bsr	equ	0xFE0
  6399                           indf2	equ	0xFDF
  6400                           postinc2	equ	0xFDE
  6401                           postdec2	equ	0xFDD
  6402                           fsr2h	equ	0xFDA
  6403                           fsr2l	equ	0xFD9
  6404                           status	equ	0xFD8
  6405                           
  6406                           	psect	temp
  6407  00003C                     btemp:
  6408                           	opt stack 0
  6409  00003C                     	ds	1
  6410  0000                     int$flags	set	btemp
  6411                           pclatu	equ	0xFFB
  6412                           pclath	equ	0xFFA
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           postinc0	equ	0xFEE
  6421                           fsr0h	equ	0xFEA
  6422                           fsr0l	equ	0xFE9
  6423                           wreg	equ	0xFE8
  6424                           indf1	equ	0xFE7
  6425                           fsr1h	equ	0xFE2
  6426                           fsr1l	equ	0xFE1
  6427                           bsr	equ	0xFE0
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8


Data Sizes:
    Strings     79
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     88     112
    BANK1           256    250     255
    BANK2           256     18      18

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_9(CODE[11]), STR_8(CODE[12]), STR_7(CODE[10]), main@buf(BANK1[40]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               279   279      0   64736
                                             77 BANK0     11    11      0
                                              0 BANK1    250   250      0
                                              0 BANK2     18    18      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       64    55      9   29685
                                             13 BANK0     64    55      9
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    8570
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    8570
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              58    47     11   11792
                                             56 COMRAM     1     1      0
                                             13 BANK0     57    46     11
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4030
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1671
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     12      12       9        7.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BC       3        0.0%
DATA                 0      0     1BC      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 15:55:08 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0EEA  
                                  l65 1474                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l216 0D82                                   l366 040A  
                                 l854 16C8                                   l864 170A  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        main@MoveType 0164                                  l2103 14AA  
                                l2113 14EE                                  l2123 1524  
                                l2107 14B2                                  l2141 181A  
                                l2061 16A2                                  l3013 102A  
                                l2301 1892                                  l2151 15B4  
                                l2119 151C                                  l2047 1902  
                                l3103 0DBC                                  l2145 1580  
                                l2137 1808                                  l2129 1560  
                                l2057 1696                                  l2081 16EC  
                                l3033 0BFE                                  l3105 0DC2  
                                l2059 169E                                  l2155 1766  
                                l2069 16BE                                  l2085 1700  
                                l2077 16E0                                  l2501 1224  
                                l3301 0808                                  l2079 16E8  
                                l2159 1778                                  l3071 0D0E  
                                l3311 084E                                  l3303 080E  
                                l3231 059A                                  l3215 0520  
                                l3241 063A                                  l3083 0D3E  
                                l3075 0D1E                                  l3067 0CF4  
                                l3315 0850                                  l3077 0D22  
                                l2509 1274                                  l3245 0648  
                                l3237 05E8                                  l3165 0410  
                                l3095 0DA6                                  l3271 0716  
                                l3263 06D0                                  l3281 073C  
                                l3249 065E                                  l3275 0720  
                                l3259 06C6                                  l3283 0742  
                                l3291 07AA                                  l2901 09B0  
                                l2805 0EC2                                  l2813 1292  
                                l3269 0710                                  l2903 09B6  
                                l2823 12CA                                  l2831 141C  
                                l3199 04D2                                  l2921 0A0E  
                                l2817 12AA                                  l2809 127A  
                                l2497 121C                                  l2915 09EC  
                                l2763 13AA                                  l2835 1438  
                                l2925 0A46                                  l2861 0880  
                                l2951 0ACA                                  l2935 0A74  
                                l2943 0A9A                                  l2927 0A50  
                                l2775 13D0                                  l2791 1402  
                                l2839 1454                                  l2945 0AA6  
                                l2873 08B6                                  l2777 13D8  
                                l2769 13BA                                  l2891 0980  
                                l2867 089C                                  l2795 1410  
                                l2787 13F8                                  l2779 13DC  
                                l2965 0B44                                  l2957 0AE8  
                                l2869 08AE                                  l2959 0AEE  
                                l2879 08E6                                  l2967 0B50  
                                l2969 0B6A                                  l2889 0958  
                                STR_1 0339                                  STR_2 030C  
                                STR_3 0339                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0350                                  STR_8 032D  
                                STR_9 0345                                  u1205 104C  
                                u1215 105A                                  u1225 1078  
                                u1235 1086                                  u1245 10A6  
                                _LATB 000F8A                                  u1255 10B4  
                                u3007 12C4                                  u1520 15A4  
                                u2224 0E82                                  u1265 10E4  
                                u3017 14E2                                  u2225 0E7E  
                                u1530 15D4                                  u2234 0EDE  
                                u1355 182E                                  u3027 1554  
                                u2235 0EDA                                  u1356 1830  
                                u3037 181C                                  u2245 0F38  
                                u3047 15AE                                  u1527 159A  
                                u1455 14BA                                  u3057 183C  
                                u1537 15CA                                  u3067 184C  
                                u3077 1100                                  u1485 152C  
                                u3087 192A                                  u2720 0690  
                                u2730 06A4                                  u2722 0692  
                                u2732 06A6                                  u1765 188E  
                                u1766 1890                                  u2807 0466  
                                u1785 18A0                                  u2817 047E  
                                u1786 18A2                                  u2907 11AA  
                                u2827 111A                                  u2917 11BC  
                                u2837 1130                                  u2927 0C32  
                                u2847 1140                                  u2937 0C4A  
                                u2857 114E                                  u2947 0CBE  
                                u2867 115C                                  u2957 0D60  
                                u2877 116E                                  u2967 146E  
                                u2887 1180                                  u2977 176C  
                                u2897 1196                                  u2987 0F96  
                                u2997 0FAC                            ScanIR@Move 0072  
                                _main 035C                                  _mode 003B  
                       main@ScanAngle 00AF                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1278                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 178A  
                     __end_of_SendLCD 1854                       __end_of_SetLine 1824  
                  ScanWithRange@F3893 00BC                           ScanIR@F3882 00B8  
                               ?_main 0001                       __end_of___awdiv 141A  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 16D2                                 i1l353 008E  
                     __end_of___lwmod 1714                                 i2l361 135A  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 1926                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 11C4                       __end_of_dpowers 030B  
                     __end_of_isdigit 190A                                 main@i 00B7  
                               tablat 000FF5                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 0B78  
              __size_of_ScanWithRange 0296                       __initialization 1854  
                        __end_of_main 0872                          __end_of_stop 130C  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 00A0  
                __end_of_enableSensor 18A4                   VerifySignal@hexByte 002D  
                              ??_main 00AD                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001            ScanWithRange@TurnDirection 0073  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2547 008A  
                              i1l2549 008C                                i2l2515 179E  
                      __CFG_WDTEN$OFF 000000                                i2l2519 17B0  
                              i2l2561 1352                                i2l2557 134C  
               __end_of_delay_tenth_s 178A                                _LCDout 1042  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 17C2  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 0F48                             ??_SetLine 002A  
                              ___wmul 18A4                             ??___awdiv 002E  
                    __end_of_initRFID 1926                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 18CA  
                __size_of_grabRightIR 0072                                clear_0 1866  
                    ___awdiv@quotient 0030                                main@mL 0200  
                              main@mR 0209                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0B78  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060       ScanWithRange@TimeAboveThreshold 00A0  
                    __end_of_turnLeft 1680                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 1870                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 1934  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1714  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002C                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 138E           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00B8                            __pbssBANK1 01FA  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __end_of_LCD_String 15DC                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 150C                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                   ScanIR@TurnDirection 0071  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 187E  
                  __size_of_turnRight 0052                  __end_of_initMotorPWM 17F4  
                             _SendLCD 1824                               __Hparam 0000  
                             _SetLine 17F4                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 1396  
                     __size_of___wmul 0026                               ___lwdiv 1680  
                             ___lwmod 16D2                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1854  
                     ??_ScanWithRange 0076                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 035C  
                             __ptext1 190A                               __ptext2 17C2  
                             __ptext3 1108                               __ptext4 18CA  
                             __ptext5 1714                               __ptext6 187E  
                             __ptext7 11C4                               __ptext8 0B78  
                             __ptext9 15DC                               _initLCD 1108  
                             _dpowers 0301                               _isdigit 18EC  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0872  
                      __pintcode_body 130C                  end_of_initialization 1870  
                      ScanWithRange@i 00A1                        ScanWithRange@n 00A3  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 130C  
                  ScanIR@SensorResult 00A2                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 162E                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00AC                        __end_of_LCDout 1108  
                           _TXSTAbits 000FAC                             ScanIR@buf 0078  
          ScanWithRange@MoveTimeEntry 0074                         ??_grabRightIR 0026  
                      __end_of_ScanIR 1042                        _fullSpeedAhead 141A  
                      _ReceivedString 00C0                        __end_of___wmul 18CA  
                         _BAUDCONbits 000FAA                        __end_of_initIR 18EC  
              __size_of_delay_tenth_s 0038                   start_initialization 1854  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1396  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 149A  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 150C  
                        _initMotorPWM 17C2                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1878 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1752  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 1278                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B0  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 0052  
                       ??_setMotorPWM 0034                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u309_47 17A4  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3897 01FA                           _grabRightIR 149A  
               ScanWithRange@LeftFlag 00AB                  grabRightIR@IR_signal 0029  
           ScanWithRange@milliseconds 0071                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 0E0E                          setMotorPWM@m 0032  
                _InterruptHandlerHigh 0008                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                           _turnRight 15DC                        ScanIR@MoveTime 0074  
                      ScanIR@MoveType 0076                      ScanWithRange@buf 0078  
                 __end_of_setMotorPWM 0F48                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1752                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 157E                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 162E  
                            __ptext11 141A                              __ptext20 16D2  
                            __ptext12 1752                              __ptext21 1680  
                            __ptext13 0F48                              __ptext22 149A  
                            __ptext14 1278                              __ptext31 178A  
                            __ptext23 150C                              __ptext15 0E0E  
                            __ptext24 17F4                              __ptext16 1396  
                            __ptext25 157E                              __ptext17 0872  
                            __ptext26 1824                              __ptext18 18EC  
                            __ptext27 1042                              __ptext19 18A4  
                            __ptext28 1926                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                     main@TurnDirection 00B4  
                            _initRFID 190A             ScanWithRange@SensorResult 00A7  
                      turnRight@power 006B                         __size_of_main 0516  
                  main@DirectionFound 00B5                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00B4  
                            int$flags 003C                              main@Move 00B6  
                 _InterruptHandlerLow 0018                            _LCD_String 157E  
                            _turnLeft 162E                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                              isdigit@c 0026  
                         _setMotorPWM 0E0E                          _VerifySignal 11C4  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                      ??_fullSpeedAhead 0039  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00A5  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
