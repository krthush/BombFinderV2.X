

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 19:37:37 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	smallconst
    54  000300                     __psmallconst:
    55                           	opt stack 0
    56  000300  00                 	db	0
    57  000301                     _dpowers:
    58                           	opt stack 0
    59  000301  0001               	dw	1
    60  000303  000A               	dw	10
    61  000305  0064               	dw	100
    62  000307  03E8               	dw	1000
    63  000309  2710               	dw	10000
    64  00030B                     __end_of_dpowers:
    65                           	opt stack 0
    66  0000                     _ANSEL0bits	set	4024
    67  0000                     _BAUDCONbits	set	4010
    68  0000                     _CAP1BUFH	set	3945
    69  0000                     _CAP1BUFL	set	3944
    70  0000                     _CAP1CON	set	3939
    71  0000                     _CAP2BUFH	set	3943
    72  0000                     _CAP2BUFL	set	3942
    73  0000                     _CAP2CON	set	3938
    74  0000                     _INTCONbits	set	4082
    75  0000                     _IPR1bits	set	3999
    76  0000                     _LATAbits	set	3977
    77  0000                     _LATB	set	3978
    78  0000                     _LATCbits	set	3979
    79  0000                     _LATDbits	set	3980
    80  0000                     _LATEbits	set	3981
    81  0000                     _OSCCON	set	4051
    82  0000                     _OSCCONbits	set	4051
    83  0000                     _PIE1bits	set	3997
    84  0000                     _PIR1bits	set	3998
    85  0000                     _PTCON0	set	3967
    86  0000                     _PTCON1	set	3966
    87  0000                     _PTPERH	set	3962
    88  0000                     _PTPERL	set	3963
    89  0000                     _PWMCON0	set	3951
    90  0000                     _PWMCON1	set	3950
    91  0000                     _RCONbits	set	4048
    92  0000                     _RCREG	set	4014
    93  0000                     _RCSTAbits	set	4011
    94  0000                     _SPBRG	set	4015
    95  0000                     _SPBRGH	set	4016
    96  0000                     _T0CONbits	set	4053
    97  0000                     _T5CON	set	4023
    98  0000                     _TMR0H	set	4055
    99  0000                     _TMR0L	set	4054
   100  0000                     _TRISAbits	set	3986
   101  0000                     _TRISBbits	set	3987
   102  0000                     _TRISC	set	3988
   103  0000                     _TRISCbits	set	3988
   104  0000                     _TRISDbits	set	3989
   105  0000                     _TRISEbits	set	3990
   106  0000                     _TXREG	set	4013
   107  0000                     _TXSTAbits	set	4012
   108  0000                     _PDC0H	set	3960
   109  0000                     _PDC0L	set	3961
   110  0000                     _PDC1H	set	3958
   111  0000                     _PDC1L	set	3959
   112  00030B                     STR_6:
   113  00030B  20                 	db	32
   114  00030C  20                 	db	32
   115  00030D  20                 	db	32
   116  00030E  20                 	db	32
   117  00030F  20                 	db	32
   118  000310  20                 	db	32
   119  000311  25                 	db	37
   120  000312  30                 	db	48	;'0'
   121  000313  34                 	db	52	;'4'
   122  000314  64                 	db	100	;'d'
   123  000315  2C                 	db	44
   124  000316  20                 	db	32
   125  000317  25                 	db	37
   126  000318  30                 	db	48	;'0'
   127  000319  34                 	db	52	;'4'
   128  00031A  64                 	db	100	;'d'
   129  00031B  00                 	db	0
   130  00031C                     STR_5:
   131  00031C  20                 	db	32
   132  00031D  20                 	db	32
   133  00031E  20                 	db	32
   134  00031F  20                 	db	32
   135  000320  20                 	db	32
   136  000321  20                 	db	32
   137  000322  49                 	db	73	;'I'
   138  000323  6E                 	db	110	;'n'
   139  000324  65                 	db	101	;'e'
   140  000325  72                 	db	114	;'r'
   141  000326  74                 	db	116	;'t'
   142  000327  20                 	db	32
   143  000328  4D                 	db	77	;'M'
   144  000329  6F                 	db	111	;'o'
   145  00032A  64                 	db	100	;'d'
   146  00032B  65                 	db	101	;'e'
   147  00032C  00                 	db	0
   148  00032D                     STR_1:
   149  00032D  20                 	db	32
   150  00032E  20                 	db	32
   151  00032F  20                 	db	32
   152  000330  20                 	db	32
   153  000331  20                 	db	32
   154  000332  53                 	db	83	;'S'
   155  000333  63                 	db	99	;'c'
   156  000334  61                 	db	97	;'a'
   157  000335  6E                 	db	110	;'n'
   158  000336  49                 	db	73	;'I'
   159  000337  52                 	db	82	;'R'
   160  000338  00                 	db	0
   161  000339                     STR_8:
   162  000339  47                 	db	71	;'G'
   163  00033A  6F                 	db	111	;'o'
   164  00033B  69                 	db	105	;'i'
   165  00033C  6E                 	db	110	;'n'
   166  00033D  67                 	db	103	;'g'
   167  00033E  20                 	db	32
   168  00033F  48                 	db	72	;'H'
   169  000340  6F                 	db	111	;'o'
   170  000341  6D                 	db	109	;'m'
   171  000342  65                 	db	101	;'e'
   172  000343  00                 	db	0
   173  000344                     STR_7:
   174  000344  53                 	db	83	;'S'
   175  000345  65                 	db	101	;'e'
   176  000346  61                 	db	97	;'a'
   177  000347  72                 	db	114	;'r'
   178  000348  63                 	db	99	;'c'
   179  000349  68                 	db	104	;'h'
   180  00034A  69                 	db	105	;'i'
   181  00034B  6E                 	db	110	;'n'
   182  00034C  67                 	db	103	;'g'
   183  00034D  00                 	db	0
   184  0000                     
   185                           ; #config settings
   186  00034E  00                 	db	0	; dummy byte at the end
   187  0000                     
   188                           	psect	cinit
   189  001954                     __pcinit:
   190                           	opt stack 0
   191  001954                     start_initialization:
   192                           	opt stack 0
   193  001954                     __initialization:
   194                           	opt stack 0
   195                           
   196                           ; Clear objects allocated to BANK1 (5 bytes)
   197  001954  0101               	movlb	1
   198  001956  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   199  001958  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   200  00195A  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   201  00195C  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   202  00195E  6BFA               	clrf	__pbssBANK1& (0+255),b
   203                           
   204                           ; Clear objects allocated to BANK0 (24 bytes)
   205  001960  EE00  F0BE         	lfsr	0,__pbssBANK0
   206  001964  0E18               	movlw	24
   207  001966                     clear_0:
   208  001966  6AEE               	clrf	postinc0,c
   209  001968  06E8               	decf	wreg,f,c
   210  00196A  E1FD               	bnz	clear_0
   211                           
   212                           ; Clear objects allocated to COMRAM (2 bytes)
   213  00196C  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   214  00196E  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   215  001970                     end_of_initialization:
   216                           	opt stack 0
   217  001970                     __end_of__initialization:
   218                           	opt stack 0
   219  001970  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   220  001972  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   221  001974  0E00               	movlw	low (__Lmediumconst shr (0+16))
   222  001976  6EF8               	movwf	tblptru,c
   223  001978  0100               	movlb	0
   224  00197A  EFA8  F001         	goto	_main	;jump to C main() function
   225                           tblptru	equ	0xFF8
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	bssCOMRAM
   230  00003A                     __pbssCOMRAM:
   231                           	opt stack 0
   232  00003A                     _i:
   233                           	opt stack 0
   234  00003A                     	ds	1
   235  00003B                     _mode:
   236                           	opt stack 0
   237  00003B                     	ds	1
   238                           tblptru	equ	0xFF8
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           
   242                           	psect	bssBANK0
   243  0000BE                     __pbssBANK0:
   244                           	opt stack 0
   245  0000BE                     ScanIR@F3883:
   246                           	opt stack 0
   247  0000BE                     	ds	4
   248  0000C2                     ScanWithRange@F3894:
   249                           	opt stack 0
   250  0000C2                     	ds	4
   251  0000C6                     _ReceivedString:
   252                           	opt stack 0
   253  0000C6                     	ds	16
   254                           tblptru	equ	0xFF8
   255                           postinc0	equ	0xFEE
   256                           wreg	equ	0xFE8
   257                           
   258                           	psect	bssBANK1
   259  0001FA                     __pbssBANK1:
   260                           	opt stack 0
   261  0001FA                     main@F3897:
   262                           	opt stack 0
   263  0001FA                     	ds	4
   264  0001FE                     _RFID_Read:
   265                           	opt stack 0
   266  0001FE                     	ds	1
   267                           tblptru	equ	0xFF8
   268                           postinc0	equ	0xFEE
   269                           wreg	equ	0xFE8
   270                           
   271                           	psect	cstackBANK2
   272  000200                     __pcstackBANK2:
   273                           	opt stack 0
   274  000200                     main@MoveType:
   275                           	opt stack 0
   276                           
   277                           ; 100 bytes @ 0x0
   278  000200                     	ds	100
   279  000264                     main@mL:
   280                           	opt stack 0
   281                           
   282                           ; 9 bytes @ 0x64
   283  000264                     	ds	9
   284  00026D                     main@mR:
   285                           	opt stack 0
   286                           
   287                           ; 9 bytes @ 0x6D
   288  00026D                     	ds	9
   289                           tblptru	equ	0xFF8
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	cstackBANK1
   294  000100                     __pcstackBANK1:
   295                           	opt stack 0
   296  000100                     main@MoveTime:
   297                           	opt stack 0
   298                           
   299                           ; 200 bytes @ 0x0
   300  000100                     	ds	200
   301  0001C8                     main@buf:
   302                           	opt stack 0
   303                           
   304                           ; 40 bytes @ 0xC8
   305  0001C8                     	ds	40
   306  0001F0                     main@Message:
   307                           	opt stack 0
   308                           
   309                           ; 10 bytes @ 0xF0
   310  0001F0                     	ds	10
   311                           tblptru	equ	0xFF8
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           
   315                           	psect	cstackBANK0
   316  000060                     __pcstackBANK0:
   317                           	opt stack 0
   318  000060                     ??_sprintf:
   319  000060                     setMotorPWM@PWMduty:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x0
   323  000060                     	ds	2
   324  000062                     stop@mL:
   325                           	opt stack 0
   326  000062                     fullSpeedAhead@mL:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x2
   330  000062                     	ds	2
   331  000064                     stop@mR:
   332                           	opt stack 0
   333  000064                     fullSpeedAhead@mR:
   334                           	opt stack 0
   335  000064                     sprintf@ap:
   336                           	opt stack 0
   337                           
   338                           ; 2 bytes @ 0x4
   339  000064                     	ds	2
   340  000066                     fullSpeedAhead@power:
   341                           	opt stack 0
   342  000066                     sprintf@prec:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x6
   346  000066                     	ds	1
   347  000067                     turnLeft@mL:
   348                           	opt stack 0
   349  000067                     turnRight@mL:
   350                           	opt stack 0
   351  000067                     fullSpeedBack@mL:
   352                           	opt stack 0
   353  000067                     sprintf@val:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x7
   357  000067                     	ds	2
   358  000069                     sprintf@flag:
   359                           	opt stack 0
   360  000069                     turnLeft@mR:
   361                           	opt stack 0
   362  000069                     turnRight@mR:
   363                           	opt stack 0
   364  000069                     fullSpeedBack@mR:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x9
   368  000069                     	ds	1
   369  00006A                     sprintf@width:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0xA
   373  00006A                     	ds	1
   374  00006B                     turnLeft@power:
   375                           	opt stack 0
   376  00006B                     turnRight@power:
   377                           	opt stack 0
   378  00006B                     fullSpeedBack@power:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0xB
   382  00006B                     	ds	1
   383  00006C                     sprintf@c:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0xC
   387  00006C                     	ds	1
   388  00006D                     ScanIR@mL:
   389                           	opt stack 0
   390  00006D                     ScanWithRange@mL:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0xD
   394  00006D                     	ds	2
   395  00006F                     ScanIR@mR:
   396                           	opt stack 0
   397  00006F                     ScanWithRange@mR:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0xF
   401  00006F                     	ds	2
   402  000071                     ScanIR@Move:
   403                           	opt stack 0
   404  000071                     ScanWithRange@milliseconds:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x11
   408  000071                     	ds	2
   409  000073                     ScanIR@MoveTime:
   410                           	opt stack 0
   411  000073                     ScanWithRange@MoveTimeEntry:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x13
   415  000073                     	ds	2
   416  000075                     ScanIR@MoveType:
   417                           	opt stack 0
   418  000075                     ScanWithRange@RFID_Read:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x15
   422  000075                     	ds	2
   423  000077                     ??_ScanWithRange:
   424  000077                     ScanIR@buf:
   425                           	opt stack 0
   426                           
   427                           ; 40 bytes @ 0x17
   428  000077                     	ds	5
   429  00007C                     ScanWithRange@buf:
   430                           	opt stack 0
   431                           
   432                           ; 40 bytes @ 0x1C
   433  00007C                     	ds	35
   434  00009F                     ScanIR@DirectionMoveThreshold:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x3F
   438  00009F                     	ds	2
   439  0000A1                     ScanIR@SensorResult:
   440                           	opt stack 0
   441                           
   442                           ; 4 bytes @ 0x41
   443  0000A1                     	ds	3
   444  0000A4                     ScanWithRange@n:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x44
   448  0000A4                     	ds	2
   449  0000A6                     ScanWithRange@i:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x46
   453  0000A6                     	ds	2
   454  0000A8                     ScanWithRange@DirectionFoundThreshold:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x48
   458  0000A8                     	ds	2
   459  0000AA                     ScanWithRange@power:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x4A
   463  0000AA                     	ds	1
   464  0000AB                     ScanWithRange@TimeAboveThreshold:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x4B
   468  0000AB                     	ds	1
   469  0000AC                     ScanWithRange@SensorResult:
   470                           	opt stack 0
   471                           
   472                           ; 4 bytes @ 0x4C
   473  0000AC                     	ds	4
   474  0000B0                     ScanWithRange@LeftFlag:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x50
   478  0000B0                     	ds	2
   479  0000B2                     ScanWithRange@RightFlag:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x52
   483  0000B2                     	ds	2
   484  0000B4                     ??_main:
   485                           
   486                           ; 0 bytes @ 0x54
   487  0000B4                     	ds	2
   488  0000B6                     main@ScanAngle:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x56
   492  0000B6                     	ds	1
   493  0000B7                     main@SensorResult:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x57
   497  0000B7                     	ds	4
   498  0000BB                     main@DirectionFound:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x5B
   502  0000BB                     	ds	1
   503  0000BC                     main@Move:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x5C
   507  0000BC                     	ds	1
   508  0000BD                     main@i:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x5D
   512  0000BD                     	ds	1
   513                           tblptru	equ	0xFF8
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           
   517                           	psect	cstackCOMRAM
   518  000001                     __pcstackCOMRAM:
   519                           	opt stack 0
   520  000001                     ??i2_delay_tenth_s:
   521                           
   522                           ; 0 bytes @ 0x0
   523  000001                     	ds	1
   524  000002                     i2delay_tenth_s@tenth_seconds:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x1
   528  000002                     	ds	1
   529  000003                     i2delay_tenth_s@i:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x2
   533  000003                     	ds	2
   534  000005                     ??_InterruptHandlerHigh:
   535                           
   536                           ; 0 bytes @ 0x4
   537  000005                     	ds	14
   538  000013                     ??_InterruptHandlerLow:
   539                           
   540                           ; 0 bytes @ 0x12
   541  000013                     	ds	17
   542  000024                     ??_isdigit:
   543  000024                     ??_LCDout:
   544  000024                     ??_delay_s:
   545  000024                     ??_delay_tenth_s:
   546  000024                     ?_grabRightIR:
   547                           	opt stack 0
   548  000024                     ?_grabLeftIR:
   549                           	opt stack 0
   550  000024                     ?___wmul:
   551                           	opt stack 0
   552  000024                     ?___lwdiv:
   553                           	opt stack 0
   554  000024                     enableSensor@status:
   555                           	opt stack 0
   556  000024                     VerifySignal@Signal:
   557                           	opt stack 0
   558  000024                     ___wmul@multiplier:
   559                           	opt stack 0
   560  000024                     ___lwdiv@dividend:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x23
   564  000024                     	ds	1
   565  000025                     enableSensor@sensor:
   566                           	opt stack 0
   567  000025                     delay_s@seconds:
   568                           	opt stack 0
   569  000025                     delay_tenth_s@tenth_seconds:
   570                           	opt stack 0
   571  000025                     _isdigit$1964:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x24
   575  000025                     	ds	1
   576  000026                     ??_grabRightIR:
   577  000026                     ??_grabLeftIR:
   578  000026                     ??_VerifySignal:
   579  000026                     isdigit@c:
   580                           	opt stack 0
   581  000026                     delay_s@i:
   582                           	opt stack 0
   583  000026                     delay_tenth_s@i:
   584                           	opt stack 0
   585  000026                     ___wmul@multiplicand:
   586                           	opt stack 0
   587  000026                     ___lwdiv@divisor:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x25
   591  000026                     	ds	1
   592  000027                     LCDout@number:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x26
   596  000027                     	ds	1
   597  000028                     SendLCD@type:
   598                           	opt stack 0
   599  000028                     ___wmul@product:
   600                           	opt stack 0
   601  000028                     ___lwdiv@quotient:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x27
   605  000028                     	ds	1
   606  000029                     SendLCD@Byte:
   607                           	opt stack 0
   608  000029                     grabRightIR@IR_signal:
   609                           	opt stack 0
   610  000029                     grabLeftIR@IR_signal:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x28
   614  000029                     	ds	1
   615  00002A                     ??_initLCD:
   616  00002A                     ?___awdiv:
   617                           	opt stack 0
   618  00002A                     SetLine@line:
   619                           	opt stack 0
   620  00002A                     ___lwdiv@counter:
   621                           	opt stack 0
   622  00002A                     LCD_String@string:
   623                           	opt stack 0
   624  00002A                     ___awdiv@dividend:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x29
   628  00002A                     	ds	1
   629  00002B                     ?___lwmod:
   630                           	opt stack 0
   631  00002B                     grabRightIR@i:
   632                           	opt stack 0
   633  00002B                     grabLeftIR@i:
   634                           	opt stack 0
   635  00002B                     ___lwmod@dividend:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x2A
   639  00002B                     	ds	1
   640  00002C                     VerifySignal@checksum:
   641                           	opt stack 0
   642  00002C                     ___awdiv@divisor:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x2B
   646  00002C                     	ds	1
   647  00002D                     VerifySignal@hexByte:
   648                           	opt stack 0
   649  00002D                     ___lwmod@divisor:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x2C
   653  00002D                     	ds	1
   654  00002E                     ___awdiv@counter:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x2D
   658  00002E                     	ds	1
   659  00002F                     VerifySignal@i:
   660                           	opt stack 0
   661  00002F                     ___awdiv@sign:
   662                           	opt stack 0
   663  00002F                     ___lwmod@counter:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x2E
   667  00002F                     	ds	1
   668  000030                     ?_sprintf:
   669                           	opt stack 0
   670  000030                     sprintf@sp:
   671                           	opt stack 0
   672  000030                     ___awdiv@quotient:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x2F
   676  000030                     	ds	2
   677  000032                     setMotorPWM@m:
   678                           	opt stack 0
   679  000032                     sprintf@f:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x31
   683  000032                     	ds	2
   684  000034                     ??_setMotorPWM:
   685                           
   686                           ; 0 bytes @ 0x33
   687  000034                     	ds	5
   688  000039                     ??_ScanIR:
   689                           
   690                           ; 0 bytes @ 0x38
   691  000039                     	ds	1
   692  00003A                     tblptru	equ	0xFF8
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           
   696                           ; 0 bytes @ 0x39
   697 ;;
   698 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   699 ;;
   700 ;; *************** function _main *****************
   701 ;; Defined at:
   702 ;;		line 51 in file "main.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  MoveTime      200    0[BANK1 ] int [100]
   707 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   708 ;;  buf            40  200[BANK1 ] unsigned char [40]
   709 ;;  Message        10  240[BANK1 ] unsigned char [10]
   710 ;;  mR              9  109[BANK2 ] struct DC_motor
   711 ;;  mL              9  100[BANK2 ] struct DC_motor
   712 ;;  SensorResult    4   87[BANK0 ] unsigned int [2]
   713 ;;  i               1   93[BANK0 ] unsigned char 
   714 ;;  Move            1   92[BANK0 ] unsigned char 
   715 ;;  DirectionFou    1   91[BANK0 ] char 
   716 ;;  ScanAngle       1   86[BANK0 ] unsigned char 
   717 ;; Return value:  Size  Location     Type
   718 ;;		None               void
   719 ;; Registers used:
   720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   726 ;;      Params:         0       0       0       0
   727 ;;      Locals:         0       8     250     118
   728 ;;      Temps:          0       2       0       0
   729 ;;      Totals:         0      10     250     118
   730 ;;Total ram usage:      378 bytes
   731 ;; Hardware stack levels required when called:    8
   732 ;; This function calls:
   733 ;;		_LCD_String
   734 ;;		_ScanIR
   735 ;;		_ScanWithRange
   736 ;;		_SendLCD
   737 ;;		_SetLine
   738 ;;		_VerifySignal
   739 ;;		_delay_s
   740 ;;		_delay_tenth_s
   741 ;;		_enableSensor
   742 ;;		_fullSpeedAhead
   743 ;;		_fullSpeedBack
   744 ;;		_grabLeftIR
   745 ;;		_grabRightIR
   746 ;;		_initIR
   747 ;;		_initLCD
   748 ;;		_initMotorPWM
   749 ;;		_initRFID
   750 ;;		_initTimer
   751 ;;		_sprintf
   752 ;;		_stop
   753 ;; This function is called by:
   754 ;;		Startup code after reset
   755 ;; This function uses a non-reentrant model
   756 ;;
   757                           
   758                           	psect	text0
   759  000350                     __ptext0:
   760                           	opt stack 0
   761  000350                     _main:
   762                           	opt stack 23
   763                           
   764                           ;main.c: 54: unsigned char Message[10];
   765                           ;main.c: 55: unsigned char i=0;
   766                           
   767                           ;incstack = 0
   768  000350  0E00               	movlw	0
   769  000352  0100               	movlb	0	; () banked
   770  000354  6FBD               	movwf	main@i& (0+255),b
   771                           
   772                           ;main.c: 56: signed char DirectionFound=0;
   773  000356  0E00               	movlw	0
   774  000358  0100               	movlb	0	; () banked
   775  00035A  6FBB               	movwf	main@DirectionFound& (0+255),b
   776                           
   777                           ;main.c: 57: int MoveTime[100];
   778                           ;main.c: 58: char MoveType[100];
   779                           ;main.c: 59: char Move=0;
   780  00035C  0E00               	movlw	0
   781  00035E  0100               	movlb	0	; () banked
   782  000360  6FBC               	movwf	main@Move& (0+255),b
   783                           
   784                           ; BSR set to: 0
   785                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   786  000362  C1FA  F0B7         	movff	main@F3897,main@SensorResult
   787  000366  C1FB  F0B8         	movff	main@F3897+1,main@SensorResult+1
   788  00036A  C1FC  F0B9         	movff	main@F3897+2,main@SensorResult+2
   789  00036E  C1FD  F0BA         	movff	main@F3897+3,main@SensorResult+3
   790                           
   791                           ;main.c: 61: char buf[40];
   792                           ;main.c: 63: unsigned char ScanAngle=60;
   793  000372  0E3C               	movlw	60
   794  000374  0100               	movlb	0	; () banked
   795  000376  6FB6               	movwf	main@ScanAngle& (0+255),b
   796                           
   797                           ; BSR set to: 0
   798                           ;main.c: 66: INTCONbits.GIEH=1;
   799  000378  8EF2               	bsf	intcon,7,c	;volatile
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 67: INTCONbits.GIEL=1;
   803  00037A  8CF2               	bsf	intcon,6,c	;volatile
   804                           
   805                           ; BSR set to: 0
   806                           ;main.c: 68: INTCONbits.PEIE=1;
   807  00037C  8CF2               	bsf	intcon,6,c	;volatile
   808                           
   809                           ; BSR set to: 0
   810                           ;main.c: 69: RCONbits.IPEN=1;
   811  00037E  8ED0               	bsf	4048,7,c	;volatile
   812                           
   813                           ; BSR set to: 0
   814                           ;main.c: 72: IPR1bits.RCIP=0;
   815  000380  9A9F               	bcf	3999,5,c	;volatile
   816                           
   817                           ; BSR set to: 0
   818                           ;main.c: 73: PIE1bits.RCIE=1;
   819  000382  8A9D               	bsf	3997,5,c	;volatile
   820                           
   821                           ; BSR set to: 0
   822                           ;main.c: 76: TRISCbits.RC3=1;
   823  000384  8694               	bsf	3988,3,c	;volatile
   824                           
   825                           ; BSR set to: 0
   826                           ;main.c: 77: INTCONbits.INT0IE=1;
   827  000386  88F2               	bsf	intcon,4,c	;volatile
   828                           
   829                           ; BSR set to: 0
   830                           ;main.c: 80: PIR1bits.RC1IF=0;
   831  000388  9A9E               	bcf	3998,5,c	;volatile
   832                           
   833                           ; BSR set to: 0
   834                           ;main.c: 81: INTCONbits.INT0IF=0;
   835  00038A  92F2               	bcf	intcon,1,c	;volatile
   836                           
   837                           ;main.c: 84: struct DC_motor mL, mR;
   838                           ;main.c: 85: mL.power=0;
   839  00038C  0E00               	movlw	0
   840  00038E  0102               	movlb	2	; () banked
   841  000390  6F64               	movwf	main@mL& (0+255),b
   842                           
   843                           ;main.c: 86: mL.direction=1;
   844  000392  0E01               	movlw	1
   845  000394  0102               	movlb	2	; () banked
   846  000396  6F65               	movwf	(main@mL+1)& (0+255),b
   847                           
   848                           ; BSR set to: 2
   849                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   850  000398  0E79               	movlw	121
   851  00039A  0102               	movlb	2	; () banked
   852  00039C  6F66               	movwf	(main@mL+2)& (0+255),b
   853  00039E  0E0F               	movlw	15
   854  0003A0  0102               	movlb	2	; () banked
   855  0003A2  6F67               	movwf	(main@mL+3)& (0+255),b
   856                           
   857                           ; BSR set to: 2
   858                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   859  0003A4  0E78               	movlw	120
   860  0003A6  0102               	movlb	2	; () banked
   861  0003A8  6F68               	movwf	(main@mL+4)& (0+255),b
   862  0003AA  0E0F               	movlw	15
   863  0003AC  0102               	movlb	2	; () banked
   864  0003AE  6F69               	movwf	(main@mL+5)& (0+255),b
   865                           
   866                           ;main.c: 89: mL.dir_pin=0;
   867  0003B0  0E00               	movlw	0
   868  0003B2  0102               	movlb	2	; () banked
   869  0003B4  6F6A               	movwf	(main@mL+6)& (0+255),b
   870                           
   871                           ;main.c: 90: mL.PWMperiod=199;
   872  0003B6  0E00               	movlw	0
   873  0003B8  0102               	movlb	2	; () banked
   874  0003BA  6F6C               	movwf	(main@mL+8)& (0+255),b
   875  0003BC  0EC7               	movlw	199
   876  0003BE  6F6B               	movwf	(main@mL+7)& (0+255),b
   877                           
   878                           ;main.c: 92: mR.power=0;
   879  0003C0  0E00               	movlw	0
   880  0003C2  0102               	movlb	2	; () banked
   881  0003C4  6F6D               	movwf	main@mR& (0+255),b
   882                           
   883                           ;main.c: 93: mR.direction=1;
   884  0003C6  0E01               	movlw	1
   885  0003C8  0102               	movlb	2	; () banked
   886  0003CA  6F6E               	movwf	(main@mR+1)& (0+255),b
   887                           
   888                           ; BSR set to: 2
   889                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   890  0003CC  0E77               	movlw	119
   891  0003CE  0102               	movlb	2	; () banked
   892  0003D0  6F6F               	movwf	(main@mR+2)& (0+255),b
   893  0003D2  0E0F               	movlw	15
   894  0003D4  0102               	movlb	2	; () banked
   895  0003D6  6F70               	movwf	(main@mR+3)& (0+255),b
   896                           
   897                           ; BSR set to: 2
   898                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   899  0003D8  0E76               	movlw	118
   900  0003DA  0102               	movlb	2	; () banked
   901  0003DC  6F71               	movwf	(main@mR+4)& (0+255),b
   902  0003DE  0E0F               	movlw	15
   903  0003E0  0102               	movlb	2	; () banked
   904  0003E2  6F72               	movwf	(main@mR+5)& (0+255),b
   905                           
   906                           ;main.c: 96: mR.dir_pin=2;
   907  0003E4  0E02               	movlw	2
   908  0003E6  0102               	movlb	2	; () banked
   909  0003E8  6F73               	movwf	(main@mR+6)& (0+255),b
   910                           
   911                           ;main.c: 97: mR.PWMperiod=199;
   912  0003EA  0E00               	movlw	0
   913  0003EC  0102               	movlb	2	; () banked
   914  0003EE  6F75               	movwf	(main@mR+8)& (0+255),b
   915  0003F0  0EC7               	movlw	199
   916  0003F2  6F74               	movwf	(main@mR+7)& (0+255),b
   917                           
   918                           ;main.c: 99: OSCCON = 0x72;
   919  0003F4  0E72               	movlw	114
   920  0003F6  6ED3               	movwf	4051,c	;volatile
   921  0003F8                     l382:
   922  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   923  0003FA  D256               	goto	l3387
   924  0003FC  D7FD               	goto	l382
   925  0003FE                     l3225:
   926                           
   927                           ;main.c: 112: stop(&mL, &mR);
   928  0003FE  0E64               	movlw	low main@mL
   929  000400  0100               	movlb	0	; () banked
   930  000402  6F62               	movwf	stop@mL& (0+255),b
   931  000404  0E02               	movlw	high main@mL
   932  000406  0100               	movlb	0	; () banked
   933  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   934  00040A  0E6D               	movlw	low main@mR
   935  00040C  0100               	movlb	0	; () banked
   936  00040E  6F64               	movwf	stop@mR& (0+255),b
   937  000410  0E02               	movlw	high main@mR
   938  000412  0100               	movlb	0	; () banked
   939  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   940  000416  ECB4  F009         	call	_stop	;wreg free
   941                           
   942                           ;main.c: 113: RFID_Read=0;
   943  00041A  0E00               	movlw	0
   944  00041C  0101               	movlb	1	; () banked
   945  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   946                           
   947                           ; BSR set to: 1
   948                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   949  000420  ECFE  F00A         	call	_grabLeftIR	;wreg free
   950  000424  C024  F0B7         	movff	?_grabLeftIR,main@SensorResult
   951  000428  C025  F0B8         	movff	?_grabLeftIR+1,main@SensorResult+1
   952                           
   953                           ;main.c: 117: SensorResult[1]=grabRightIR();
   954  00042C  ECC5  F00A         	call	_grabRightIR	;wreg free
   955  000430  C024  F0B9         	movff	?_grabRightIR,main@SensorResult+2
   956  000434  C025  F0BA         	movff	?_grabRightIR+1,main@SensorResult+3
   957                           
   958                           ;main.c: 121: CAP1BUFH=0;
   959  000438  0E00               	movlw	0
   960  00043A  6E69               	movwf	3945,c	;volatile
   961                           
   962                           ;main.c: 122: CAP1BUFL=0;
   963  00043C  0E00               	movlw	0
   964  00043E  6E68               	movwf	3944,c	;volatile
   965                           
   966                           ;main.c: 123: CAP2BUFH=0;
   967  000440  0E00               	movlw	0
   968  000442  6E67               	movwf	3943,c	;volatile
   969                           
   970                           ;main.c: 124: CAP2BUFL=0;
   971  000444  0E00               	movlw	0
   972  000446  6E66               	movwf	3942,c	;volatile
   973                           
   974                           ;main.c: 127: SendLCD(0b00000001,0);
   975  000448  0E00               	movlw	0
   976  00044A  6E28               	movwf	SendLCD@type,c
   977  00044C  0E01               	movlw	1
   978  00044E  EC92  F00C         	call	_SendLCD
   979                           
   980                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   981  000452  0E21               	movlw	33
   982  000454                     u2817:
   983  000454  2EE8               	decfsz	wreg,f,c
   984  000456  D7FE               	goto	u2817
   985  000458  F000               	nop	
   986                           
   987                           ;main.c: 129: SendLCD(0b00000010,0);
   988  00045A  0E00               	movlw	0
   989  00045C  6E28               	movwf	SendLCD@type,c
   990  00045E  0E02               	movlw	2
   991  000460  EC92  F00C         	call	_SendLCD
   992                           
   993                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   994  000464  0E06               	movlw	6
   995  000466  0100               	movlb	0	; () banked
   996  000468  6FB4               	movwf	??_main& (0+255),b
   997  00046A  0E30               	movlw	48
   998  00046C                     u2827:
   999  00046C  2EE8               	decfsz	wreg,f,c
  1000  00046E  D7FE               	goto	u2827
  1001  000470  2FB4               	decfsz	??_main& (0+255),f,b
  1002  000472  D7FC               	goto	u2827
  1003  000474  D000               	nop2	
  1004                           
  1005                           ;main.c: 131: SetLine(1);
  1006  000476  0E01               	movlw	1
  1007  000478  EC7A  F00C         	call	_SetLine
  1008                           
  1009                           ;main.c: 132: LCD_String("      Inert Mode");
  1010  00047C  0E1C               	movlw	low STR_5
  1011  00047E  6E2A               	movwf	LCD_String@string,c
  1012  000480  0E03               	movlw	high STR_5
  1013  000482  6E2B               	movwf	LCD_String@string+1,c
  1014  000484  EC37  F00B         	call	_LCD_String	;wreg free
  1015                           
  1016                           ;main.c: 133: SetLine(2);
  1017  000488  0E02               	movlw	2
  1018  00048A  EC7A  F00C         	call	_SetLine
  1019                           
  1020                           ;main.c: 134: if (RFID_Read) {
  1021  00048E  0101               	movlb	1	; () banked
  1022  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1023  000492  B4D8               	btfsc	status,2,c
  1024  000494  D007               	goto	l3259
  1025                           
  1026                           ; BSR set to: 1
  1027                           ;main.c: 135: LCD_String(Message);
  1028  000496  0EF0               	movlw	low main@Message
  1029  000498  6E2A               	movwf	LCD_String@string,c
  1030  00049A  0E01               	movlw	high main@Message
  1031  00049C  6E2B               	movwf	LCD_String@string+1,c
  1032  00049E  EC37  F00B         	call	_LCD_String	;wreg free
  1033                           
  1034                           ;main.c: 136: } else {
  1035  0004A2  D202               	goto	l3387
  1036  0004A4                     l3259:
  1037                           
  1038                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1039  0004A4  0EC8               	movlw	low main@buf
  1040  0004A6  6E30               	movwf	sprintf@sp,c
  1041  0004A8  0E01               	movlw	high main@buf
  1042  0004AA  6E31               	movwf	sprintf@sp+1,c
  1043  0004AC  0E0B               	movlw	low STR_6
  1044  0004AE  6E32               	movwf	sprintf@f,c
  1045  0004B0  0E03               	movlw	high STR_6
  1046  0004B2  6E33               	movwf	sprintf@f+1,c
  1047  0004B4  C0B7  F034         	movff	main@SensorResult,?_sprintf+4
  1048  0004B8  C0B8  F035         	movff	main@SensorResult+1,?_sprintf+5
  1049  0004BC  C0B9  F036         	movff	main@SensorResult+2,?_sprintf+6
  1050  0004C0  C0BA  F037         	movff	main@SensorResult+3,?_sprintf+7
  1051  0004C4  ECFC  F005         	call	_sprintf	;wreg free
  1052                           
  1053                           ;main.c: 138: LCD_String(buf);
  1054  0004C8  0EC8               	movlw	low main@buf
  1055  0004CA  6E2A               	movwf	LCD_String@string,c
  1056  0004CC  0E01               	movlw	high main@buf
  1057  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1058  0004D0  EC37  F00B         	call	_LCD_String	;wreg free
  1059                           
  1060                           ;main.c: 139: }
  1061                           ;main.c: 142: break;
  1062  0004D4  D1E9               	goto	l3387
  1063  0004D6                     l3263:
  1064                           
  1065                           ;main.c: 147: initMotorPWM();
  1066  0004D6  EC61  F00C         	call	_initMotorPWM	;wreg free
  1067                           
  1068                           ;main.c: 148: initTimer();
  1069  0004DA  EC13  F00D         	call	_initTimer	;wreg free
  1070                           
  1071                           ;main.c: 149: initRFID();
  1072  0004DE  EC05  F00D         	call	_initRFID	;wreg free
  1073                           
  1074                           ;main.c: 150: initLCD();
  1075  0004E2  ECFC  F008         	call	_initLCD	;wreg free
  1076                           
  1077                           ;main.c: 151: initIR();
  1078  0004E6  ECE5  F00C         	call	_initIR	;wreg free
  1079                           
  1080                           ;main.c: 153: enableSensor(0, 1);
  1081  0004EA  0E01               	movlw	1
  1082  0004EC  6E24               	movwf	enableSensor@status,c
  1083  0004EE  0E00               	movlw	0
  1084  0004F0  ECBF  F00C         	call	_enableSensor
  1085                           
  1086                           ;main.c: 154: enableSensor(1, 1);
  1087  0004F4  0E01               	movlw	1
  1088  0004F6  6E24               	movwf	enableSensor@status,c
  1089  0004F8  0E01               	movlw	1
  1090  0004FA  ECBF  F00C         	call	_enableSensor
  1091                           
  1092                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1093  0004FE  0E64               	movlw	low main@mL
  1094  000500  0100               	movlb	0	; () banked
  1095  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1096  000504  0E02               	movlw	high main@mL
  1097  000506  0100               	movlb	0	; () banked
  1098  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1099  00050A  0E6D               	movlw	low main@mR
  1100  00050C  0100               	movlb	0	; () banked
  1101  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1102  000510  0E02               	movlw	high main@mR
  1103  000512  0100               	movlb	0	; () banked
  1104  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1105  000516  0E64               	movlw	100
  1106  000518  0100               	movlb	0	; () banked
  1107  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1108  00051C  EC85  F00A         	call	_fullSpeedAhead	;wreg free
  1109                           
  1110                           ;main.c: 158: delay_tenth_s(1);
  1111  000520  0E01               	movlw	1
  1112  000522  EC29  F00C         	call	_delay_tenth_s
  1113                           
  1114                           ;main.c: 160: mode=-1;
  1115  000526  683B               	setf	_mode,c	;volatile
  1116                           
  1117                           ;main.c: 162: break;
  1118  000528  D1BF               	goto	l3387
  1119  00052A                     l3283:
  1120                           
  1121                           ;main.c: 170: SetLine(1);
  1122  00052A  0E01               	movlw	1
  1123  00052C  EC7A  F00C         	call	_SetLine
  1124                           
  1125                           ;main.c: 171: LCD_String("Searching");
  1126  000530  0E44               	movlw	low STR_7
  1127  000532  6E2A               	movwf	LCD_String@string,c
  1128  000534  0E03               	movlw	high STR_7
  1129  000536  6E2B               	movwf	LCD_String@string+1,c
  1130  000538  EC37  F00B         	call	_LCD_String	;wreg free
  1131                           
  1132                           ;main.c: 173: if (DirectionFound==-1) {
  1133  00053C  0100               	movlb	0	; () banked
  1134  00053E  29BB               	incf	main@DirectionFound& (0+255),w,b
  1135  000540  A4D8               	btfss	status,2,c
  1136  000542  D030               	goto	l3299
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1140  000544  0E64               	movlw	low main@mL
  1141  000546  0100               	movlb	0	; () banked
  1142  000548  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1143  00054A  0E02               	movlw	high main@mL
  1144  00054C  0100               	movlb	0	; () banked
  1145  00054E  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1146  000550  0E6D               	movlw	low main@mR
  1147  000552  0100               	movlb	0	; () banked
  1148  000554  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1149  000556  0E02               	movlw	high main@mR
  1150  000558  0100               	movlb	0	; () banked
  1151  00055A  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1152  00055C  0E64               	movlw	100
  1153  00055E  0100               	movlb	0	; () banked
  1154  000560  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1155  000562  EC85  F00A         	call	_fullSpeedAhead	;wreg free
  1156                           
  1157                           ;main.c: 179: delay_tenth_s(6);
  1158  000566  0E06               	movlw	6
  1159  000568  EC29  F00C         	call	_delay_tenth_s
  1160                           
  1161                           ;main.c: 180: stop(&mL,&mR);
  1162  00056C  0E64               	movlw	low main@mL
  1163  00056E  0100               	movlb	0	; () banked
  1164  000570  6F62               	movwf	stop@mL& (0+255),b
  1165  000572  0E02               	movlw	high main@mL
  1166  000574  0100               	movlb	0	; () banked
  1167  000576  6F63               	movwf	(stop@mL+1)& (0+255),b
  1168  000578  0E6D               	movlw	low main@mR
  1169  00057A  0100               	movlb	0	; () banked
  1170  00057C  6F64               	movwf	stop@mR& (0+255),b
  1171  00057E  0E02               	movlw	high main@mR
  1172  000580  0100               	movlb	0	; () banked
  1173  000582  6F65               	movwf	(stop@mR+1)& (0+255),b
  1174  000584  ECB4  F009         	call	_stop	;wreg free
  1175                           
  1176                           ;main.c: 181: DirectionFound=0;
  1177  000588  0E00               	movlw	0
  1178  00058A  0100               	movlb	0	; () banked
  1179  00058C  6FBB               	movwf	main@DirectionFound& (0+255),b
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;main.c: 182: MoveType[Move]=0;
  1183  00058E  0100               	movlb	0	; () banked
  1184  000590  51BC               	movf	main@Move& (0+255),w,b
  1185  000592  0D01               	mullw	1
  1186  000594  0E00               	movlw	low main@MoveType
  1187  000596  24F3               	addwf	prodl,w,c
  1188  000598  6ED9               	movwf	fsr2l,c
  1189  00059A  0E02               	movlw	high main@MoveType
  1190  00059C  20F4               	addwfc	prodh,w,c
  1191  00059E  6EDA               	movwf	fsr2h,c
  1192  0005A0  0E00               	movlw	0
  1193  0005A2  D02B               	goto	L1
  1194  0005A4                     l3299:
  1195                           
  1196                           ; BSR set to: 0
  1197  0005A4  0100               	movlb	0	; () banked
  1198  0005A6  51BB               	movf	main@DirectionFound& (0+255),w,b
  1199  0005A8  0100               	movlb	0	; () banked
  1200  0005AA  A4D8               	btfss	status,2,c
  1201  0005AC  D028               	goto	l3305
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1205                           ;main.c: 186: &MoveTime[Move], &RFID_Read);
  1206  0005AE  0E64               	movlw	low main@mL
  1207  0005B0  0100               	movlb	0	; () banked
  1208  0005B2  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1209  0005B4  0E02               	movlw	high main@mL
  1210  0005B6  0100               	movlb	0	; () banked
  1211  0005B8  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1212  0005BA  0E6D               	movlw	low main@mR
  1213  0005BC  0100               	movlb	0	; () banked
  1214  0005BE  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1215  0005C0  0E02               	movlw	high main@mR
  1216  0005C2  0100               	movlb	0	; () banked
  1217  0005C4  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1218  0005C6  C0B6  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1219  0005CA  0100               	movlb	0	; () banked
  1220  0005CC  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1221  0005CE  0100               	movlb	0	; () banked
  1222  0005D0  51BC               	movf	main@Move& (0+255),w,b
  1223  0005D2  0D02               	mullw	2
  1224  0005D4  0E00               	movlw	low main@MoveTime
  1225  0005D6  24F3               	addwf	prodl,w,c
  1226  0005D8  0100               	movlb	0	; () banked
  1227  0005DA  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1228  0005DC  0E01               	movlw	high main@MoveTime
  1229  0005DE  20F4               	addwfc	prodh,w,c
  1230  0005E0  0100               	movlb	0	; () banked
  1231  0005E2  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1232  0005E4  0EFE               	movlw	low _RFID_Read
  1233  0005E6  0100               	movlb	0	; () banked
  1234  0005E8  6F75               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1235  0005EA  0E01               	movlw	high _RFID_Read
  1236  0005EC  0100               	movlb	0	; () banked
  1237  0005EE  6F76               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1238  0005F0  EC65  F004         	call	_ScanWithRange	;wreg free
  1239  0005F4  0100               	movlb	0	; () banked
  1240  0005F6  6FBB               	movwf	main@DirectionFound& (0+255),b
  1241  0005F8  D030               	goto	l3313
  1242  0005FA                     L1:
  1243  0005FA  6EDF               	movwf	indf2,c
  1244                           
  1245                           ;main.c: 188: } else if (DirectionFound==1) {
  1246  0005FC  D110               	goto	l3369
  1247  0005FE                     l3305:
  1248                           
  1249                           ; BSR set to: 0
  1250  0005FE  0100               	movlb	0	; () banked
  1251  000600  05BB               	decf	main@DirectionFound& (0+255),w,b
  1252  000602  A4D8               	btfss	status,2,c
  1253  000604  D023               	goto	l3309
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;main.c: 190: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1257  000606  0E64               	movlw	low main@mL
  1258  000608  0100               	movlb	0	; () banked
  1259  00060A  6F6D               	movwf	ScanIR@mL& (0+255),b
  1260  00060C  0E02               	movlw	high main@mL
  1261  00060E  0100               	movlb	0	; () banked
  1262  000610  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1263  000612  0E6D               	movlw	low main@mR
  1264  000614  0100               	movlb	0	; () banked
  1265  000616  6F6F               	movwf	ScanIR@mR& (0+255),b
  1266  000618  0E02               	movlw	high main@mR
  1267  00061A  0100               	movlb	0	; () banked
  1268  00061C  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1269  00061E  0EBC               	movlw	low main@Move
  1270  000620  0100               	movlb	0	; () banked
  1271  000622  6F71               	movwf	ScanIR@Move& (0+255),b
  1272  000624  0E00               	movlw	high main@Move
  1273  000626  0100               	movlb	0	; () banked
  1274  000628  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1275  00062A  0E00               	movlw	low main@MoveTime
  1276  00062C  0100               	movlb	0	; () banked
  1277  00062E  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1278  000630  0E01               	movlw	high main@MoveTime
  1279  000632  0100               	movlb	0	; () banked
  1280  000634  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1281  000636  0E00               	movlw	low main@MoveType
  1282  000638  0100               	movlb	0	; () banked
  1283  00063A  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1284  00063C  0E02               	movlw	high main@MoveType
  1285  00063E  0100               	movlb	0	; () banked
  1286  000640  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1287  000642  EC1C  F008         	call	_ScanIR	;wreg free
  1288  000646  0100               	movlb	0	; () banked
  1289  000648  6FBB               	movwf	main@DirectionFound& (0+255),b
  1290                           
  1291                           ;main.c: 191: } else if (DirectionFound==2) {
  1292  00064A  D0E9               	goto	l3369
  1293  00064C                     l3309:
  1294                           
  1295                           ; BSR set to: 0
  1296  00064C  0E02               	movlw	2
  1297  00064E  0100               	movlb	0	; () banked
  1298  000650  19BB               	xorwf	main@DirectionFound& (0+255),w,b
  1299  000652  A4D8               	btfss	status,2,c
  1300  000654  D0E4               	goto	l3369
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;main.c: 193: mode=2;
  1304  000656  0E02               	movlw	2
  1305  000658  6E3B               	movwf	_mode,c	;volatile
  1306  00065A                     l3313:
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 194: MoveType[Move]=1;
  1310  00065A  0100               	movlb	0	; () banked
  1311  00065C  51BC               	movf	main@Move& (0+255),w,b
  1312  00065E  0D01               	mullw	1
  1313  000660  0E00               	movlw	low main@MoveType
  1314  000662  24F3               	addwf	prodl,w,c
  1315  000664  6ED9               	movwf	fsr2l,c
  1316  000666  0E02               	movlw	high main@MoveType
  1317  000668  20F4               	addwfc	prodh,w,c
  1318  00066A  6EDA               	movwf	fsr2h,c
  1319  00066C  0E01               	movlw	1
  1320  00066E  D7C5               	goto	L1
  1321  000670                     l3317:
  1322                           
  1323                           ;main.c: 206: if (RFID_Read) {
  1324  000670  0101               	movlb	1	; () banked
  1325  000672  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1326  000674  B4D8               	btfsc	status,2,c
  1327  000676  D0A2               	goto	l3359
  1328                           
  1329                           ; BSR set to: 1
  1330                           ;main.c: 207: stop(&mL, &mR);
  1331  000678  0E64               	movlw	low main@mL
  1332  00067A  0100               	movlb	0	; () banked
  1333  00067C  6F62               	movwf	stop@mL& (0+255),b
  1334  00067E  0E02               	movlw	high main@mL
  1335  000680  0100               	movlb	0	; () banked
  1336  000682  6F63               	movwf	(stop@mL+1)& (0+255),b
  1337  000684  0E6D               	movlw	low main@mR
  1338  000686  0100               	movlb	0	; () banked
  1339  000688  6F64               	movwf	stop@mR& (0+255),b
  1340  00068A  0E02               	movlw	high main@mR
  1341  00068C  0100               	movlb	0	; () banked
  1342  00068E  6F65               	movwf	(stop@mR+1)& (0+255),b
  1343  000690  ECB4  F009         	call	_stop	;wreg free
  1344                           
  1345                           ;main.c: 208: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1346  000694  0E03               	movlw	3
  1347  000696  0100               	movlb	0	; () banked
  1348  000698  19D5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1349  00069A  A4D8               	btfss	status,2,c
  1350  00069C  D002               	goto	u2730
  1351  00069E  0E01               	movlw	1
  1352  0006A0  D001               	goto	u2732
  1353  0006A2                     u2730:
  1354  0006A2  0E00               	movlw	0
  1355  0006A4                     u2732:
  1356  0006A4  0100               	movlb	0	; () banked
  1357  0006A6  6FB4               	movwf	??_main& (0+255),b
  1358  0006A8  0E02               	movlw	2
  1359  0006AA  0100               	movlb	0	; () banked
  1360  0006AC  19C6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1361  0006AE  A4D8               	btfss	status,2,c
  1362  0006B0  D002               	goto	u2740
  1363  0006B2  0E01               	movlw	1
  1364  0006B4  D001               	goto	u2742
  1365  0006B6                     u2740:
  1366  0006B6  0E00               	movlw	0
  1367  0006B8                     u2742:
  1368  0006B8  0100               	movlb	0	; () banked
  1369  0006BA  15B4               	andwf	??_main& (0+255),w,b
  1370  0006BC  A0E8               	btfss	wreg,0,c
  1371  0006BE  D0F4               	goto	l3387
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 209: if (VerifySignal(ReceivedString)){
  1375  0006C0  0EC6               	movlw	low _ReceivedString
  1376  0006C2  6E24               	movwf	VerifySignal@Signal,c
  1377  0006C4  0E00               	movlw	high _ReceivedString
  1378  0006C6  6E25               	movwf	VerifySignal@Signal+1,c
  1379  0006C8  EC5A  F009         	call	_VerifySignal	;wreg free
  1380  0006CC  0900               	iorlw	0
  1381  0006CE  B4D8               	btfsc	status,2,c
  1382  0006D0  D041               	goto	l3351
  1383                           
  1384                           ;main.c: 211: for (i=0; i<10; i++){
  1385  0006D2  0E00               	movlw	0
  1386  0006D4  0100               	movlb	0	; () banked
  1387  0006D6  6FBD               	movwf	main@i& (0+255),b
  1388  0006D8                     l3327:
  1389                           
  1390                           ; BSR set to: 0
  1391  0006D8  0E09               	movlw	9
  1392  0006DA  0100               	movlb	0	; () banked
  1393  0006DC  65BD               	cpfsgt	main@i& (0+255),b
  1394  0006DE  D001               	goto	l3331
  1395  0006E0  D020               	goto	l3337
  1396  0006E2                     l3331:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 212: Message[i] = ReceivedString[i+1];
  1400  0006E2  0100               	movlb	0	; () banked
  1401  0006E4  51BD               	movf	main@i& (0+255),w,b
  1402  0006E6  0100               	movlb	0	; () banked
  1403  0006E8  6FB4               	movwf	??_main& (0+255),b
  1404  0006EA  6BB5               	clrf	(??_main+1)& (0+255),b
  1405  0006EC  0E01               	movlw	1
  1406  0006EE  0100               	movlb	0	; () banked
  1407  0006F0  27B4               	addwf	??_main& (0+255),f,b
  1408  0006F2  0E00               	movlw	0
  1409  0006F4  23B5               	addwfc	(??_main+1)& (0+255),f,b
  1410  0006F6  0EC6               	movlw	low _ReceivedString
  1411  0006F8  0100               	movlb	0	; () banked
  1412  0006FA  25B4               	addwf	??_main& (0+255),w,b
  1413  0006FC  6ED9               	movwf	fsr2l,c
  1414  0006FE  0E00               	movlw	high _ReceivedString
  1415  000700  0100               	movlb	0	; () banked
  1416  000702  21B5               	addwfc	(??_main+1)& (0+255),w,b
  1417  000704  6EDA               	movwf	fsr2h,c
  1418  000706  0100               	movlb	0	; () banked
  1419  000708  51BD               	movf	main@i& (0+255),w,b
  1420  00070A  0D01               	mullw	1
  1421  00070C  0EF0               	movlw	low main@Message
  1422  00070E  24F3               	addwf	prodl,w,c
  1423  000710  6EE1               	movwf	fsr1l,c
  1424  000712  0E01               	movlw	high main@Message
  1425  000714  20F4               	addwfc	prodh,w,c
  1426  000716  6EE2               	movwf	fsr1h,c
  1427  000718  CFDF FFE7          	movff	indf2,indf1
  1428                           
  1429                           ; BSR set to: 0
  1430  00071C  0100               	movlb	0	; () banked
  1431  00071E  2BBD               	incf	main@i& (0+255),f,b
  1432  000720  D7DB               	goto	l3327
  1433  000722                     l3337:
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;main.c: 213: }
  1437                           ;main.c: 216: for (i=0; i<16; i++) {
  1438  000722  0E00               	movlw	0
  1439  000724  0100               	movlb	0	; () banked
  1440  000726  6FBD               	movwf	main@i& (0+255),b
  1441  000728                     l3339:
  1442                           
  1443                           ; BSR set to: 0
  1444  000728  0E0F               	movlw	15
  1445  00072A  0100               	movlb	0	; () banked
  1446  00072C  65BD               	cpfsgt	main@i& (0+255),b
  1447  00072E  D001               	goto	l3343
  1448  000730  D00E               	goto	l3349
  1449  000732                     l3343:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;main.c: 217: ReceivedString[i]=0;
  1453  000732  0100               	movlb	0	; () banked
  1454  000734  51BD               	movf	main@i& (0+255),w,b
  1455  000736  0D01               	mullw	1
  1456  000738  0EC6               	movlw	low _ReceivedString
  1457  00073A  24F3               	addwf	prodl,w,c
  1458  00073C  6ED9               	movwf	fsr2l,c
  1459  00073E  0E00               	movlw	high _ReceivedString
  1460  000740  20F4               	addwfc	prodh,w,c
  1461  000742  6EDA               	movwf	fsr2h,c
  1462  000744  0E00               	movlw	0
  1463  000746  6EDF               	movwf	indf2,c
  1464                           
  1465                           ; BSR set to: 0
  1466  000748  0100               	movlb	0	; () banked
  1467  00074A  2BBD               	incf	main@i& (0+255),f,b
  1468  00074C  D7ED               	goto	l3339
  1469  00074E                     l3349:
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;main.c: 218: }
  1473                           ;main.c: 219: mode=3;
  1474  00074E  0E03               	movlw	3
  1475  000750  6E3B               	movwf	_mode,c	;volatile
  1476                           
  1477                           ;main.c: 221: } else {
  1478  000752  D0AA               	goto	l3387
  1479  000754                     l3351:
  1480                           
  1481                           ;main.c: 222: fullSpeedBack(&mL,&mR, 100);
  1482  000754  0E64               	movlw	low main@mL
  1483  000756  0100               	movlb	0	; () banked
  1484  000758  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1485  00075A  0E02               	movlw	high main@mL
  1486  00075C  0100               	movlb	0	; () banked
  1487  00075E  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1488  000760  0E6D               	movlw	low main@mR
  1489  000762  0100               	movlb	0	; () banked
  1490  000764  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1491  000766  0E02               	movlw	high main@mR
  1492  000768  0100               	movlb	0	; () banked
  1493  00076A  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1494  00076C  0E64               	movlw	100
  1495  00076E  0100               	movlb	0	; () banked
  1496  000770  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1497  000772  ECB0  F00B         	call	_fullSpeedBack	;wreg free
  1498                           
  1499                           ;main.c: 223: delay_tenth_s(5);
  1500  000776  0E05               	movlw	5
  1501  000778  EC29  F00C         	call	_delay_tenth_s
  1502                           
  1503                           ;main.c: 224: stop(&mL,&mR);
  1504  00077C  0E64               	movlw	low main@mL
  1505  00077E  0100               	movlb	0	; () banked
  1506  000780  6F62               	movwf	stop@mL& (0+255),b
  1507  000782  0E02               	movlw	high main@mL
  1508  000784  0100               	movlb	0	; () banked
  1509  000786  6F63               	movwf	(stop@mL+1)& (0+255),b
  1510  000788  0E6D               	movlw	low main@mR
  1511  00078A  0100               	movlb	0	; () banked
  1512  00078C  6F64               	movwf	stop@mR& (0+255),b
  1513  00078E  0E02               	movlw	high main@mR
  1514  000790  0100               	movlb	0	; () banked
  1515  000792  6F65               	movwf	(stop@mR+1)& (0+255),b
  1516  000794  ECB4  F009         	call	_stop	;wreg free
  1517                           
  1518                           ;main.c: 225: fullSpeedAhead(&mL,&mR, 100);
  1519  000798  0E64               	movlw	low main@mL
  1520  00079A  0100               	movlb	0	; () banked
  1521  00079C  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1522  00079E  0E02               	movlw	high main@mL
  1523  0007A0  0100               	movlb	0	; () banked
  1524  0007A2  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1525  0007A4  0E6D               	movlw	low main@mR
  1526  0007A6  0100               	movlb	0	; () banked
  1527  0007A8  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1528  0007AA  0E02               	movlw	high main@mR
  1529  0007AC  0100               	movlb	0	; () banked
  1530  0007AE  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1531  0007B0  0E64               	movlw	100
  1532  0007B2  0100               	movlb	0	; () banked
  1533  0007B4  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1534  0007B6  EC85  F00A         	call	_fullSpeedAhead	;wreg free
  1535                           
  1536                           ;main.c: 226: }
  1537                           ;main.c: 227: }
  1538                           ;main.c: 228: } else {
  1539  0007BA  D076               	goto	l3387
  1540  0007BC                     l3359:
  1541                           
  1542                           ;main.c: 229: DirectionFound=1;
  1543  0007BC  0E01               	movlw	1
  1544  0007BE  0100               	movlb	0	; () banked
  1545  0007C0  6FBB               	movwf	main@DirectionFound& (0+255),b
  1546                           
  1547                           ;main.c: 230: mode=1;
  1548  0007C2  0E01               	movlw	1
  1549  0007C4  6E3B               	movwf	_mode,c	;volatile
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;main.c: 232: fullSpeedAhead(&mL,&mR, 100);
  1553  0007C6  0E64               	movlw	low main@mL
  1554  0007C8  0100               	movlb	0	; () banked
  1555  0007CA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1556  0007CC  0E02               	movlw	high main@mL
  1557  0007CE  0100               	movlb	0	; () banked
  1558  0007D0  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1559  0007D2  0E6D               	movlw	low main@mR
  1560  0007D4  0100               	movlb	0	; () banked
  1561  0007D6  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1562  0007D8  0E02               	movlw	high main@mR
  1563  0007DA  0100               	movlb	0	; () banked
  1564  0007DC  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1565  0007DE  0E64               	movlw	100
  1566  0007E0  0100               	movlb	0	; () banked
  1567  0007E2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1568  0007E4  EC85  F00A         	call	_fullSpeedAhead	;wreg free
  1569                           
  1570                           ;main.c: 233: delay_tenth_s(5);
  1571  0007E8  0E05               	movlw	5
  1572  0007EA  EC29  F00C         	call	_delay_tenth_s
  1573                           
  1574                           ;main.c: 234: MoveType[Move] = 0;
  1575  0007EE  0100               	movlb	0	; () banked
  1576  0007F0  51BC               	movf	main@Move& (0+255),w,b
  1577  0007F2  0D01               	mullw	1
  1578  0007F4  0E00               	movlw	low main@MoveType
  1579  0007F6  24F3               	addwf	prodl,w,c
  1580  0007F8  6ED9               	movwf	fsr2l,c
  1581  0007FA  0E02               	movlw	high main@MoveType
  1582  0007FC  20F4               	addwfc	prodh,w,c
  1583  0007FE  6EDA               	movwf	fsr2h,c
  1584  000800  0E00               	movlw	0
  1585  000802  6EDF               	movwf	indf2,c
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 235: MoveTime[Move] = 5;
  1589  000804  0100               	movlb	0	; () banked
  1590  000806  51BC               	movf	main@Move& (0+255),w,b
  1591  000808  0D02               	mullw	2
  1592  00080A  0E00               	movlw	low main@MoveTime
  1593  00080C  24F3               	addwf	prodl,w,c
  1594  00080E  6ED9               	movwf	fsr2l,c
  1595  000810  0E01               	movlw	high main@MoveTime
  1596  000812  20F4               	addwfc	prodh,w,c
  1597  000814  6EDA               	movwf	fsr2h,c
  1598  000816  0E05               	movlw	5
  1599  000818  6EDE               	movwf	postinc2,c
  1600  00081A  0E00               	movlw	0
  1601  00081C  6EDD               	movwf	postdec2,c
  1602  00081E                     l3369:
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;main.c: 236: Move++;
  1606  00081E  0100               	movlb	0	; () banked
  1607  000820  2BBC               	incf	main@Move& (0+255),f,b
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;main.c: 237: }
  1611                           ;main.c: 239: break;
  1612  000822  D042               	goto	l3387
  1613  000824                     l3371:
  1614                           
  1615                           ;main.c: 244: SetLine(1);
  1616  000824  0E01               	movlw	1
  1617  000826  EC7A  F00C         	call	_SetLine
  1618                           
  1619                           ;main.c: 245: LCD_String(Message);
  1620  00082A  0EF0               	movlw	low main@Message
  1621  00082C  6E2A               	movwf	LCD_String@string,c
  1622  00082E  0E01               	movlw	high main@Message
  1623  000830  6E2B               	movwf	LCD_String@string+1,c
  1624  000832  EC37  F00B         	call	_LCD_String	;wreg free
  1625                           
  1626                           ;main.c: 246: SetLine(2);
  1627  000836  0E02               	movlw	2
  1628  000838  EC7A  F00C         	call	_SetLine
  1629                           
  1630                           ;main.c: 247: LCD_String("Going Home");
  1631  00083C  0E39               	movlw	low STR_8
  1632  00083E  6E2A               	movwf	LCD_String@string,c
  1633  000840  0E03               	movlw	high STR_8
  1634  000842  6E2B               	movwf	LCD_String@string+1,c
  1635  000844  EC37  F00B         	call	_LCD_String	;wreg free
  1636                           
  1637                           ;main.c: 248: stop(&mL,&mR);
  1638  000848  0E64               	movlw	low main@mL
  1639  00084A  0100               	movlb	0	; () banked
  1640  00084C  6F62               	movwf	stop@mL& (0+255),b
  1641  00084E  0E02               	movlw	high main@mL
  1642  000850  0100               	movlb	0	; () banked
  1643  000852  6F63               	movwf	(stop@mL+1)& (0+255),b
  1644  000854  0E6D               	movlw	low main@mR
  1645  000856  0100               	movlb	0	; () banked
  1646  000858  6F64               	movwf	stop@mR& (0+255),b
  1647  00085A  0E02               	movlw	high main@mR
  1648  00085C  0100               	movlb	0	; () banked
  1649  00085E  6F65               	movwf	(stop@mR+1)& (0+255),b
  1650  000860  ECB4  F009         	call	_stop	;wreg free
  1651                           
  1652                           ;main.c: 265: fullSpeedBack(&mL,&mR, 100);
  1653  000864  0E64               	movlw	low main@mL
  1654  000866  0100               	movlb	0	; () banked
  1655  000868  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1656  00086A  0E02               	movlw	high main@mL
  1657  00086C  0100               	movlb	0	; () banked
  1658  00086E  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1659  000870  0E6D               	movlw	low main@mR
  1660  000872  0100               	movlb	0	; () banked
  1661  000874  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1662  000876  0E02               	movlw	high main@mR
  1663  000878  0100               	movlb	0	; () banked
  1664  00087A  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1665  00087C  0E64               	movlw	100
  1666  00087E  0100               	movlb	0	; () banked
  1667  000880  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1668  000882  ECB0  F00B         	call	_fullSpeedBack	;wreg free
  1669                           
  1670                           ;main.c: 266: delay_s(3);
  1671  000886  0E03               	movlw	3
  1672  000888  EC0D  F00C         	call	_delay_s
  1673                           
  1674                           ;main.c: 267: stop(&mL, &mR);
  1675  00088C  0E64               	movlw	low main@mL
  1676  00088E  0100               	movlb	0	; () banked
  1677  000890  6F62               	movwf	stop@mL& (0+255),b
  1678  000892  0E02               	movlw	high main@mL
  1679  000894  0100               	movlb	0	; () banked
  1680  000896  6F63               	movwf	(stop@mL+1)& (0+255),b
  1681  000898  0E6D               	movlw	low main@mR
  1682  00089A  0100               	movlb	0	; () banked
  1683  00089C  6F64               	movwf	stop@mR& (0+255),b
  1684  00089E  0E02               	movlw	high main@mR
  1685  0008A0  0100               	movlb	0	; () banked
  1686  0008A2  6F65               	movwf	(stop@mR+1)& (0+255),b
  1687  0008A4  ECB4  F009         	call	_stop	;wreg free
  1688  0008A8                     l3387:
  1689  0008A8  503B               	movf	_mode,w,c	;volatile
  1690                           
  1691                           ; Switch size 1, requested type "space"
  1692                           ; Number of cases is 5, Range of values is 0 to 255
  1693                           ; switch strategies available:
  1694                           ; Name         Instructions Cycles
  1695                           ; simple_byte           16     9 (average)
  1696                           ;	Chosen strategy is simple_byte
  1697  0008AA  0A00               	xorlw	0	; case 0
  1698  0008AC  B4D8               	btfsc	status,2,c
  1699  0008AE  D613               	goto	l3263
  1700  0008B0  0A01               	xorlw	1	; case 1
  1701  0008B2  B4D8               	btfsc	status,2,c
  1702  0008B4  D63A               	goto	l3283
  1703  0008B6  0A03               	xorlw	3	; case 2
  1704  0008B8  B4D8               	btfsc	status,2,c
  1705  0008BA  D6DA               	goto	l3317
  1706  0008BC  0A01               	xorlw	1	; case 3
  1707  0008BE  B4D8               	btfsc	status,2,c
  1708  0008C0  D7B1               	goto	l3371
  1709  0008C2  0AFC               	xorlw	252	; case 255
  1710  0008C4  B4D8               	btfsc	status,2,c
  1711  0008C6  D59B               	goto	l3225
  1712  0008C8  D7EF               	goto	l3387
  1713  0008CA                     __end_of_main:
  1714                           	opt stack 0
  1715                           tblptru	equ	0xFF8
  1716                           prodh	equ	0xFF4
  1717                           prodl	equ	0xFF3
  1718                           intcon	equ	0xFF2
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           indf1	equ	0xFE7
  1722                           fsr1h	equ	0xFE2
  1723                           fsr1l	equ	0xFE1
  1724                           indf2	equ	0xFDF
  1725                           postinc2	equ	0xFDE
  1726                           postdec2	equ	0xFDD
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function _initTimer *****************
  1732 ;; Defined at:
  1733 ;;		line 8 in file "Movement.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;		None
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;		None
  1738 ;; Return value:  Size  Location     Type
  1739 ;;		None               void
  1740 ;; Registers used:
  1741 ;;		None
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1747 ;;      Params:         0       0       0       0
  1748 ;;      Locals:         0       0       0       0
  1749 ;;      Temps:          0       0       0       0
  1750 ;;      Totals:         0       0       0       0
  1751 ;;Total ram usage:        0 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    3
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_main
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text1
  1762  001A26                     __ptext1:
  1763                           	opt stack 0
  1764  001A26                     _initTimer:
  1765                           	opt stack 27
  1766                           
  1767                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1768                           
  1769                           ;incstack = 0
  1770  001A26  9ED5               	bcf	4053,7,c	;volatile
  1771                           
  1772                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1773  001A28  9CD5               	bcf	4053,6,c	;volatile
  1774                           
  1775                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1776  001A2A  9AD5               	bcf	4053,5,c	;volatile
  1777                           
  1778                           ;Movement.c: 13: T0CONbits.PSA=0;
  1779  001A2C  96D5               	bcf	4053,3,c	;volatile
  1780                           
  1781                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1782  001A2E  80D5               	bsf	4053,0,c	;volatile
  1783  001A30  82D5               	bsf	4053,1,c	;volatile
  1784  001A32  84D5               	bsf	4053,2,c	;volatile
  1785                           
  1786                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1787  001A34  9AF2               	bcf	intcon,5,c	;volatile
  1788  001A36  0012               	return		;funcret
  1789  001A38                     __end_of_initTimer:
  1790                           	opt stack 0
  1791                           tblptru	equ	0xFF8
  1792                           prodh	equ	0xFF4
  1793                           prodl	equ	0xFF3
  1794                           intcon	equ	0xFF2
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           indf1	equ	0xFE7
  1798                           fsr1h	equ	0xFE2
  1799                           fsr1l	equ	0xFE1
  1800                           indf2	equ	0xFDF
  1801                           postinc2	equ	0xFDE
  1802                           postdec2	equ	0xFDD
  1803                           fsr2h	equ	0xFDA
  1804                           fsr2l	equ	0xFD9
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function _initRFID *****************
  1808 ;; Defined at:
  1809 ;;		line 5 in file "RFID_Reader.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;		None               void
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1823 ;;      Params:         0       0       0       0
  1824 ;;      Locals:         0       0       0       0
  1825 ;;      Temps:          0       0       0       0
  1826 ;;      Totals:         0       0       0       0
  1827 ;;Total ram usage:        0 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    3
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           	psect	text2
  1838  001A0A                     __ptext2:
  1839                           	opt stack 0
  1840  001A0A                     _initRFID:
  1841                           	opt stack 27
  1842                           
  1843                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1844                           
  1845                           ;incstack = 0
  1846  001A0A  5094               	movf	3988,w,c	;volatile
  1847  001A0C  09C0               	iorlw	192
  1848  001A0E  6E94               	movwf	3988,c	;volatile
  1849                           
  1850                           ;RFID_Reader.c: 10: SPBRG=205;
  1851  001A10  0ECD               	movlw	205
  1852  001A12  6EAF               	movwf	4015,c	;volatile
  1853                           
  1854                           ;RFID_Reader.c: 11: SPBRGH=0;
  1855  001A14  0E00               	movlw	0
  1856  001A16  6EB0               	movwf	4016,c	;volatile
  1857                           
  1858                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1859  001A18  86AA               	bsf	4010,3,c	;volatile
  1860                           
  1861                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1862  001A1A  84AC               	bsf	4012,2,c	;volatile
  1863                           
  1864                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1865  001A1C  88AB               	bsf	4011,4,c	;volatile
  1866                           
  1867                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1868  001A1E  8EAB               	bsf	4011,7,c	;volatile
  1869                           
  1870                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1871  001A20  98AC               	bcf	4012,4,c	;volatile
  1872                           
  1873                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1874  001A22  9CAB               	bcf	4011,6,c	;volatile
  1875  001A24  0012               	return		;funcret
  1876  001A26                     __end_of_initRFID:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           prodh	equ	0xFF4
  1880                           prodl	equ	0xFF3
  1881                           intcon	equ	0xFF2
  1882                           postinc0	equ	0xFEE
  1883                           wreg	equ	0xFE8
  1884                           indf1	equ	0xFE7
  1885                           fsr1h	equ	0xFE2
  1886                           fsr1l	equ	0xFE1
  1887                           indf2	equ	0xFDF
  1888                           postinc2	equ	0xFDE
  1889                           postdec2	equ	0xFDD
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _initMotorPWM *****************
  1895 ;; Defined at:
  1896 ;;		line 4 in file "dc_motor.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;		None               void
  1903 ;; Registers used:
  1904 ;;		wreg, status,2
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1910 ;;      Params:         0       0       0       0
  1911 ;;      Locals:         0       0       0       0
  1912 ;;      Temps:          0       0       0       0
  1913 ;;      Totals:         0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    3
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text3
  1925  0018C2                     __ptext3:
  1926                           	opt stack 0
  1927  0018C2                     _initMotorPWM:
  1928                           	opt stack 27
  1929                           
  1930                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1931                           
  1932                           ;incstack = 0
  1933  0018C2  0E00               	movlw	0
  1934  0018C4  6E7F               	movwf	3967,c	;volatile
  1935                           
  1936                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1937  0018C6  0E80               	movlw	128
  1938  0018C8  6E7E               	movwf	3966,c	;volatile
  1939                           
  1940                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1941  0018CA  0E6F               	movlw	111
  1942  0018CC  6E6F               	movwf	3951,c	;volatile
  1943                           
  1944                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1945  0018CE  0E00               	movlw	0
  1946  0018D0  6E6E               	movwf	3950,c	;volatile
  1947                           
  1948                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1949  0018D2  0EC7               	movlw	199
  1950  0018D4  6E7B               	movwf	3963,c	;volatile
  1951                           
  1952                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1953  0018D6  0E00               	movlw	0
  1954  0018D8  6E7A               	movwf	3962,c	;volatile
  1955                           
  1956                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1957  0018DA  0E00               	movlw	0
  1958  0018DC  6E79               	movwf	3961,c	;volatile
  1959                           
  1960                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1961  0018DE  0E00               	movlw	0
  1962  0018E0  6E78               	movwf	3960,c	;volatile
  1963                           
  1964                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1965  0018E2  0E00               	movlw	0
  1966  0018E4  6E77               	movwf	3959,c	;volatile
  1967                           
  1968                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1969  0018E6  0E00               	movlw	0
  1970  0018E8  6E76               	movwf	3958,c	;volatile
  1971                           
  1972                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1973  0018EA  9093               	bcf	3987,0,c	;volatile
  1974                           
  1975                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1976  0018EC  9293               	bcf	3987,1,c	;volatile
  1977                           
  1978                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1979  0018EE  9493               	bcf	3987,2,c	;volatile
  1980                           
  1981                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1982  0018F0  9693               	bcf	3987,3,c	;volatile
  1983  0018F2  0012               	return		;funcret
  1984  0018F4                     __end_of_initMotorPWM:
  1985                           	opt stack 0
  1986                           tblptru	equ	0xFF8
  1987                           prodh	equ	0xFF4
  1988                           prodl	equ	0xFF3
  1989                           intcon	equ	0xFF2
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           indf1	equ	0xFE7
  1993                           fsr1h	equ	0xFE2
  1994                           fsr1l	equ	0xFE1
  1995                           indf2	equ	0xFDF
  1996                           postinc2	equ	0xFDE
  1997                           postdec2	equ	0xFDD
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _initLCD *****************
  2003 ;; Defined at:
  2004 ;;		line 38 in file "LCD.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;		None               void
  2011 ;; Registers used:
  2012 ;;		wreg, status,2, status,0, cstack
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2018 ;;      Params:         0       0       0       0
  2019 ;;      Locals:         0       0       0       0
  2020 ;;      Temps:          1       0       0       0
  2021 ;;      Totals:         1       0       0       0
  2022 ;;Total ram usage:        1 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    6
  2025 ;; This function calls:
  2026 ;;		_LCDout
  2027 ;;		_SendLCD
  2028 ;; This function is called by:
  2029 ;;		_main
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text4
  2034  0011F8                     __ptext4:
  2035                           	opt stack 0
  2036  0011F8                     _initLCD:
  2037                           	opt stack 24
  2038                           
  2039                           ;LCD.c: 44: TRISAbits.RA6=0;
  2040                           
  2041                           ;incstack = 0
  2042  0011F8  9C92               	bcf	3986,6,c	;volatile
  2043                           
  2044                           ;LCD.c: 45: TRISCbits.RC0=0;
  2045  0011FA  9094               	bcf	3988,0,c	;volatile
  2046                           
  2047                           ;LCD.c: 46: TRISCbits.RC1=0;
  2048  0011FC  9294               	bcf	3988,1,c	;volatile
  2049                           
  2050                           ;LCD.c: 47: TRISCbits.RC2=0;
  2051  0011FE  9494               	bcf	3988,2,c	;volatile
  2052                           
  2053                           ;LCD.c: 48: TRISDbits.RD0=0;
  2054  001200  9095               	bcf	3989,0,c	;volatile
  2055                           
  2056                           ;LCD.c: 49: TRISDbits.RD1=0;
  2057  001202  9295               	bcf	3989,1,c	;volatile
  2058                           
  2059                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2060  001204  0E27               	movlw	39
  2061  001206  6E2A               	movwf	??_initLCD& (0+255),c
  2062  001208  0EF5               	movlw	245
  2063  00120A                     u2837:
  2064  00120A  2EE8               	decfsz	wreg,f,c
  2065  00120C  D7FE               	goto	u2837
  2066  00120E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2067  001210  D7FC               	goto	u2837
  2068  001212  F000               	nop	
  2069                           
  2070                           ;LCD.c: 52: LCDout(0b0011);
  2071  001214  0E03               	movlw	3
  2072  001216  EC99  F008         	call	_LCDout
  2073                           
  2074                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2075  00121A  0E0D               	movlw	13
  2076  00121C  6E2A               	movwf	??_initLCD& (0+255),c
  2077  00121E  0EFC               	movlw	252
  2078  001220                     u2847:
  2079  001220  2EE8               	decfsz	wreg,f,c
  2080  001222  D7FE               	goto	u2847
  2081  001224  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2082  001226  D7FC               	goto	u2847
  2083                           
  2084                           ;LCD.c: 54: LCDout(0b0011);
  2085  001228  0E03               	movlw	3
  2086  00122A  EC99  F008         	call	_LCDout
  2087                           
  2088                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2089  00122E  0E85               	movlw	133
  2090  001230                     u2857:
  2091  001230  2EE8               	decfsz	wreg,f,c
  2092  001232  D7FE               	goto	u2857
  2093  001234  F000               	nop	
  2094                           
  2095                           ;LCD.c: 56: LCDout(0b0011);
  2096  001236  0E03               	movlw	3
  2097  001238  EC99  F008         	call	_LCDout
  2098                           
  2099                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2100  00123C  0E21               	movlw	33
  2101  00123E                     u2867:
  2102  00123E  2EE8               	decfsz	wreg,f,c
  2103  001240  D7FE               	goto	u2867
  2104  001242  F000               	nop	
  2105                           
  2106                           ;LCD.c: 58: LCDout(0b0010);
  2107  001244  0E02               	movlw	2
  2108  001246  EC99  F008         	call	_LCDout
  2109                           
  2110                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2111  00124A  0E21               	movlw	33
  2112  00124C                     u2877:
  2113  00124C  2EE8               	decfsz	wreg,f,c
  2114  00124E  D7FE               	goto	u2877
  2115  001250  F000               	nop	
  2116                           
  2117                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2118  001252  0E00               	movlw	0
  2119  001254  6E28               	movwf	SendLCD@type,c
  2120  001256  0E28               	movlw	40
  2121  001258  EC92  F00C         	call	_SendLCD
  2122                           
  2123                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2124  00125C  0E21               	movlw	33
  2125  00125E                     u2887:
  2126  00125E  2EE8               	decfsz	wreg,f,c
  2127  001260  D7FE               	goto	u2887
  2128  001262  F000               	nop	
  2129                           
  2130                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2131  001264  0E00               	movlw	0
  2132  001266  6E28               	movwf	SendLCD@type,c
  2133  001268  0E08               	movlw	8
  2134  00126A  EC92  F00C         	call	_SendLCD
  2135                           
  2136                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2137  00126E  0E21               	movlw	33
  2138  001270                     u2897:
  2139  001270  2EE8               	decfsz	wreg,f,c
  2140  001272  D7FE               	goto	u2897
  2141  001274  F000               	nop	
  2142                           
  2143                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2144  001276  0E00               	movlw	0
  2145  001278  6E28               	movwf	SendLCD@type,c
  2146  00127A  0E01               	movlw	1
  2147  00127C  EC92  F00C         	call	_SendLCD
  2148                           
  2149                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2150  001280  0E0D               	movlw	13
  2151  001282  6E2A               	movwf	??_initLCD& (0+255),c
  2152  001284  0EFC               	movlw	252
  2153  001286                     u2907:
  2154  001286  2EE8               	decfsz	wreg,f,c
  2155  001288  D7FE               	goto	u2907
  2156  00128A  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2157  00128C  D7FC               	goto	u2907
  2158                           
  2159                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2160  00128E  0E00               	movlw	0
  2161  001290  6E28               	movwf	SendLCD@type,c
  2162  001292  0E06               	movlw	6
  2163  001294  EC92  F00C         	call	_SendLCD
  2164                           
  2165                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2166  001298  0E21               	movlw	33
  2167  00129A                     u2917:
  2168  00129A  2EE8               	decfsz	wreg,f,c
  2169  00129C  D7FE               	goto	u2917
  2170  00129E  F000               	nop	
  2171                           
  2172                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2173  0012A0  0E00               	movlw	0
  2174  0012A2  6E28               	movwf	SendLCD@type,c
  2175  0012A4  0E0C               	movlw	12
  2176  0012A6  EC92  F00C         	call	_SendLCD
  2177                           
  2178                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2179  0012AA  0E21               	movlw	33
  2180  0012AC                     u2927:
  2181  0012AC  2EE8               	decfsz	wreg,f,c
  2182  0012AE  D7FE               	goto	u2927
  2183  0012B0  F000               	nop	
  2184  0012B2  0012               	return		;funcret
  2185  0012B4                     __end_of_initLCD:
  2186                           	opt stack 0
  2187                           tblptru	equ	0xFF8
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           intcon	equ	0xFF2
  2191                           postinc0	equ	0xFEE
  2192                           wreg	equ	0xFE8
  2193                           indf1	equ	0xFE7
  2194                           fsr1h	equ	0xFE2
  2195                           fsr1l	equ	0xFE1
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           postdec2	equ	0xFDD
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203 ;; *************** function _initIR *****************
  2204 ;; Defined at:
  2205 ;;		line 30 in file "IR_Reading.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;		None
  2210 ;; Return value:  Size  Location     Type
  2211 ;;		None               void
  2212 ;; Registers used:
  2213 ;;		wreg, status,2
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2219 ;;      Params:         0       0       0       0
  2220 ;;      Locals:         0       0       0       0
  2221 ;;      Temps:          0       0       0       0
  2222 ;;      Totals:         0       0       0       0
  2223 ;;Total ram usage:        0 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    3
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_main
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text5
  2234  0019CA                     __ptext5:
  2235                           	opt stack 0
  2236  0019CA                     _initIR:
  2237                           	opt stack 27
  2238                           
  2239                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2240                           
  2241                           ;incstack = 0
  2242  0019CA  9489               	bcf	3977,2,c	;volatile
  2243                           
  2244                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2245  0019CC  9689               	bcf	3977,3,c	;volatile
  2246                           
  2247                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2248  0019CE  8492               	bsf	3986,2,c	;volatile
  2249                           
  2250                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2251  0019D0  8692               	bsf	3986,3,c	;volatile
  2252                           
  2253                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2254  0019D2  94B8               	bcf	4024,2,c	;volatile
  2255                           
  2256                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2257  0019D4  96B8               	bcf	4024,3,c	;volatile
  2258                           
  2259                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2260  0019D6  9CB8               	bcf	4024,6,c	;volatile
  2261                           
  2262                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2263  0019D8  9EB8               	bcf	4024,7,c	;volatile
  2264                           
  2265                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2266  0019DA  0E06               	movlw	6
  2267  0019DC  6E63               	movwf	3939,c	;volatile
  2268                           
  2269                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2270  0019DE  0E06               	movlw	6
  2271  0019E0  6E62               	movwf	3938,c	;volatile
  2272                           
  2273                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2274  0019E2  9096               	bcf	3990,0,c	;volatile
  2275                           
  2276                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2277  0019E4  9296               	bcf	3990,1,c	;volatile
  2278                           
  2279                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2280  0019E6  0E59               	movlw	89
  2281  0019E8  6EB7               	movwf	4023,c	;volatile
  2282  0019EA  0012               	return		;funcret
  2283  0019EC                     __end_of_initIR:
  2284                           	opt stack 0
  2285                           tblptru	equ	0xFF8
  2286                           prodh	equ	0xFF4
  2287                           prodl	equ	0xFF3
  2288                           intcon	equ	0xFF2
  2289                           postinc0	equ	0xFEE
  2290                           wreg	equ	0xFE8
  2291                           indf1	equ	0xFE7
  2292                           fsr1h	equ	0xFE2
  2293                           fsr1l	equ	0xFE1
  2294                           indf2	equ	0xFDF
  2295                           postinc2	equ	0xFDE
  2296                           postdec2	equ	0xFDD
  2297                           fsr2h	equ	0xFDA
  2298                           fsr2l	equ	0xFD9
  2299                           status	equ	0xFD8
  2300                           
  2301 ;; *************** function _fullSpeedBack *****************
  2302 ;; Defined at:
  2303 ;;		line 125 in file "dc_motor.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2306 ;;		 -> main@mL(9), 
  2307 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2308 ;;		 -> main@mR(9), 
  2309 ;;  power           1   11[BANK0 ] unsigned char 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;		None
  2312 ;; Return value:  Size  Location     Type
  2313 ;;		None               void
  2314 ;; Registers used:
  2315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2321 ;;      Params:         0       5       0       0
  2322 ;;      Locals:         0       0       0       0
  2323 ;;      Temps:          0       0       0       0
  2324 ;;      Totals:         0       5       0       0
  2325 ;;Total ram usage:        5 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    6
  2328 ;; This function calls:
  2329 ;;		_fullSpeedAhead
  2330 ;; This function is called by:
  2331 ;;		_main
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text6
  2336  001760                     __ptext6:
  2337                           	opt stack 0
  2338  001760                     _fullSpeedBack:
  2339                           	opt stack 24
  2340                           
  2341                           ;dc_motor.c: 128: mL->direction=0;
  2342                           
  2343                           ;incstack = 0
  2344  001760  0100               	movlb	0	; () banked
  2345  001762  EE20 F001          	lfsr	2,1
  2346  001766  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2347  001768  26D9               	addwf	fsr2l,f,c
  2348  00176A  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2349  00176C  22DA               	addwfc	fsr2h,f,c
  2350  00176E  0E00               	movlw	0
  2351  001770  6EDF               	movwf	indf2,c
  2352                           
  2353                           ;dc_motor.c: 129: mR->direction=0;
  2354  001772  0100               	movlb	0	; () banked
  2355  001774  EE20 F001          	lfsr	2,1
  2356  001778  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2357  00177A  26D9               	addwf	fsr2l,f,c
  2358  00177C  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2359  00177E  22DA               	addwfc	fsr2h,f,c
  2360  001780  0E00               	movlw	0
  2361  001782  6EDF               	movwf	indf2,c
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2365  001784  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2366  001788  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2367  00178C  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2368  001790  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2369  001794  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2370  001798  EC85  F00A         	call	_fullSpeedAhead	;wreg free
  2371  00179C  0012               	return		;funcret
  2372  00179E                     __end_of_fullSpeedBack:
  2373                           	opt stack 0
  2374                           tblptru	equ	0xFF8
  2375                           prodh	equ	0xFF4
  2376                           prodl	equ	0xFF3
  2377                           intcon	equ	0xFF2
  2378                           postinc0	equ	0xFEE
  2379                           wreg	equ	0xFE8
  2380                           indf1	equ	0xFE7
  2381                           fsr1h	equ	0xFE2
  2382                           fsr1l	equ	0xFE1
  2383                           indf2	equ	0xFDF
  2384                           postinc2	equ	0xFDE
  2385                           postdec2	equ	0xFDD
  2386                           fsr2h	equ	0xFDA
  2387                           fsr2l	equ	0xFD9
  2388                           status	equ	0xFD8
  2389                           
  2390 ;; *************** function _enableSensor *****************
  2391 ;; Defined at:
  2392 ;;		line 106 in file "IR_Reading.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  sensor          1    wreg     unsigned char 
  2395 ;;  status          1   35[COMRAM] unsigned char 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  sensor          1   36[COMRAM] unsigned char 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;		None               void
  2400 ;; Registers used:
  2401 ;;		wreg, status,2, status,0
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2407 ;;      Params:         1       0       0       0
  2408 ;;      Locals:         1       0       0       0
  2409 ;;      Temps:          0       0       0       0
  2410 ;;      Totals:         2       0       0       0
  2411 ;;Total ram usage:        2 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    3
  2414 ;; This function calls:
  2415 ;;		Nothing
  2416 ;; This function is called by:
  2417 ;;		_main
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           	psect	text7
  2422  00197E                     __ptext7:
  2423                           	opt stack 0
  2424  00197E                     _enableSensor:
  2425                           	opt stack 27
  2426                           
  2427                           ;incstack = 0
  2428                           ;enableSensor@sensor stored from wreg
  2429  00197E  6E25               	movwf	enableSensor@sensor,c
  2430                           
  2431                           ;IR_Reading.c: 108: if (sensor==0){
  2432  001980  5025               	movf	enableSensor@sensor,w,c
  2433  001982  A4D8               	btfss	status,2,c
  2434  001984  D006               	goto	l2331
  2435                           
  2436                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2437  001986  B024               	btfsc	enableSensor@status,0,c
  2438  001988  D002               	bra	u1765
  2439  00198A  908D               	bcf	3981,0,c	;volatile
  2440  00198C  D001               	bra	u1766
  2441  00198E                     u1765:
  2442  00198E  808D               	bsf	3981,0,c	;volatile
  2443  001990                     u1766:
  2444                           
  2445                           ;IR_Reading.c: 110: } else if (sensor==1){
  2446  001990  0012               	return	
  2447  001992                     l2331:
  2448  001992  0425               	decf	enableSensor@sensor,w,c
  2449  001994  A4D8               	btfss	status,2,c
  2450  001996  0012               	return	
  2451                           
  2452                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2453  001998  B024               	btfsc	enableSensor@status,0,c
  2454  00199A  D002               	bra	u1785
  2455  00199C  928D               	bcf	3981,1,c	;volatile
  2456  00199E  D001               	bra	u1786
  2457  0019A0                     u1785:
  2458  0019A0  828D               	bsf	3981,1,c	;volatile
  2459  0019A2                     u1786:
  2460  0019A2  0012               	return	
  2461  0019A4                     __end_of_enableSensor:
  2462                           	opt stack 0
  2463                           tblptru	equ	0xFF8
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           intcon	equ	0xFF2
  2467                           postinc0	equ	0xFEE
  2468                           wreg	equ	0xFE8
  2469                           indf1	equ	0xFE7
  2470                           fsr1h	equ	0xFE2
  2471                           fsr1l	equ	0xFE1
  2472                           indf2	equ	0xFDF
  2473                           postinc2	equ	0xFDE
  2474                           postdec2	equ	0xFDD
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           status	equ	0xFD8
  2478                           
  2479 ;; *************** function _delay_s *****************
  2480 ;; Defined at:
  2481 ;;		line 23 in file "Movement.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  seconds         1    wreg     unsigned char 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  seconds         1   36[COMRAM] unsigned char 
  2486 ;;  i               2   37[COMRAM] unsigned int 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;		None               void
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2496 ;;      Params:         0       0       0       0
  2497 ;;      Locals:         3       0       0       0
  2498 ;;      Temps:          1       0       0       0
  2499 ;;      Totals:         4       0       0       0
  2500 ;;Total ram usage:        4 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    3
  2503 ;; This function calls:
  2504 ;;		Nothing
  2505 ;; This function is called by:
  2506 ;;		_main
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text8
  2511  00181A                     __ptext8:
  2512                           	opt stack 0
  2513  00181A                     _delay_s:
  2514                           	opt stack 27
  2515                           
  2516                           ;incstack = 0
  2517                           ;delay_s@seconds stored from wreg
  2518  00181A  6E25               	movwf	delay_s@seconds,c
  2519                           
  2520                           ;Movement.c: 24: unsigned int i=0;
  2521  00181C  0E00               	movlw	0
  2522  00181E  6E27               	movwf	delay_s@i+1,c
  2523  001820  0E00               	movlw	0
  2524  001822  6E26               	movwf	delay_s@i,c
  2525                           
  2526                           ;Movement.c: 25: for (i=1; i<=seconds*20; i++) {
  2527  001824  0E00               	movlw	0
  2528  001826  6E27               	movwf	delay_s@i+1,c
  2529  001828  0E01               	movlw	1
  2530  00182A  6E26               	movwf	delay_s@i,c
  2531  00182C  D009               	goto	l2371
  2532  00182E                     l2367:
  2533                           
  2534                           ;Movement.c: 27: _delay((unsigned long)((50)*(8000000/4000.0)));
  2535  00182E  0E82               	movlw	130
  2536  001830  6E24               	movwf	??_delay_s& (0+255),c
  2537  001832  0EDE               	movlw	222
  2538  001834                     u2937:
  2539  001834  2EE8               	decfsz	wreg,f,c
  2540  001836  D7FE               	goto	u2937
  2541  001838  2E24               	decfsz	??_delay_s& (0+255),f,c
  2542  00183A  D7FC               	goto	u2937
  2543  00183C  4A26               	infsnz	delay_s@i,f,c
  2544  00183E  2A27               	incf	delay_s@i+1,f,c
  2545  001840                     l2371:
  2546  001840  5025               	movf	delay_s@seconds,w,c
  2547  001842  0D14               	mullw	20
  2548  001844  5026               	movf	delay_s@i,w,c
  2549  001846  5CF3               	subwf	prodl,w,c
  2550  001848  5027               	movf	delay_s@i+1,w,c
  2551  00184A  58F4               	subwfb	prodh,w,c
  2552  00184C  A0D8               	btfss	status,0,c
  2553  00184E  0012               	return	
  2554  001850  D7EE               	goto	l2367
  2555  001852                     __end_of_delay_s:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           prodh	equ	0xFF4
  2559                           prodl	equ	0xFF3
  2560                           intcon	equ	0xFF2
  2561                           postinc0	equ	0xFEE
  2562                           wreg	equ	0xFE8
  2563                           indf1	equ	0xFE7
  2564                           fsr1h	equ	0xFE2
  2565                           fsr1l	equ	0xFE1
  2566                           indf2	equ	0xFDF
  2567                           postinc2	equ	0xFDE
  2568                           postdec2	equ	0xFDD
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function _VerifySignal *****************
  2574 ;; Defined at:
  2575 ;;		line 55 in file "RFID_Reader.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2578 ;;		 -> ReceivedString(16), 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  hexByte         2   44[COMRAM] unsigned int 
  2581 ;;  i               1   46[COMRAM] unsigned char 
  2582 ;;  checksum        1   43[COMRAM] unsigned char 
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      unsigned char 
  2585 ;; Registers used:
  2586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2592 ;;      Params:         2       0       0       0
  2593 ;;      Locals:         4       0       0       0
  2594 ;;      Temps:          6       0       0       0
  2595 ;;      Totals:        12       0       0       0
  2596 ;;Total ram usage:       12 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    3
  2599 ;; This function calls:
  2600 ;;		Nothing
  2601 ;; This function is called by:
  2602 ;;		_main
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text9
  2607  0012B4                     __ptext9:
  2608                           	opt stack 0
  2609  0012B4                     _VerifySignal:
  2610                           	opt stack 27
  2611                           
  2612                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2613                           
  2614                           ;incstack = 0
  2615  0012B4  0E00               	movlw	0
  2616  0012B6  6E2C               	movwf	VerifySignal@checksum,c
  2617                           
  2618                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2619  0012B8  0E00               	movlw	0
  2620  0012BA  6E2E               	movwf	VerifySignal@hexByte+1,c
  2621  0012BC  0E00               	movlw	0
  2622  0012BE  6E2D               	movwf	VerifySignal@hexByte,c
  2623                           
  2624                           ;RFID_Reader.c: 58: unsigned char i=0;
  2625  0012C0  0E00               	movlw	0
  2626  0012C2  6E2F               	movwf	VerifySignal@i,c
  2627                           
  2628                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2629  0012C4  EE20 F004          	lfsr	2,4
  2630  0012C8  5024               	movf	VerifySignal@Signal,w,c
  2631  0012CA  26D9               	addwf	fsr2l,f,c
  2632  0012CC  5025               	movf	VerifySignal@Signal+1,w,c
  2633  0012CE  22DA               	addwfc	fsr2h,f,c
  2634  0012D0  50DF               	movf	indf2,w,c
  2635  0012D2  6E26               	movwf	??_VerifySignal& (0+255),c
  2636  0012D4  EE20 F003          	lfsr	2,3
  2637  0012D8  5024               	movf	VerifySignal@Signal,w,c
  2638  0012DA  26D9               	addwf	fsr2l,f,c
  2639  0012DC  5025               	movf	VerifySignal@Signal+1,w,c
  2640  0012DE  22DA               	addwfc	fsr2h,f,c
  2641  0012E0  50DF               	movf	indf2,w,c
  2642  0012E2  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2643  0012E4  5027               	movf	??_VerifySignal+1,w,c
  2644  0012E6  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2645  0012E8  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2646  0012EA  5026               	movf	??_VerifySignal,w,c
  2647  0012EC  2428               	addwf	??_VerifySignal+2,w,c
  2648  0012EE  6E2D               	movwf	VerifySignal@hexByte,c
  2649  0012F0  0E00               	movlw	0
  2650  0012F2  2029               	addwfc	??_VerifySignal+3,w,c
  2651  0012F4  6E2E               	movwf	VerifySignal@hexByte+1,c
  2652                           
  2653                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2654  0012F6  EE20 F002          	lfsr	2,2
  2655  0012FA  5024               	movf	VerifySignal@Signal,w,c
  2656  0012FC  26D9               	addwf	fsr2l,f,c
  2657  0012FE  5025               	movf	VerifySignal@Signal+1,w,c
  2658  001300  22DA               	addwfc	fsr2h,f,c
  2659  001302  50DF               	movf	indf2,w,c
  2660  001304  182D               	xorwf	VerifySignal@hexByte,w,c
  2661  001306  6E2C               	movwf	VerifySignal@checksum,c
  2662                           
  2663                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2664  001308  0E05               	movlw	5
  2665  00130A  6E2F               	movwf	VerifySignal@i,c
  2666  00130C                     l2543:
  2667  00130C  0E09               	movlw	9
  2668  00130E  642F               	cpfsgt	VerifySignal@i,c
  2669  001310  D001               	goto	l2547
  2670  001312  D028               	goto	l2555
  2671  001314                     l2547:
  2672                           
  2673                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2674  001314  502F               	movf	VerifySignal@i,w,c
  2675  001316  6E26               	movwf	??_VerifySignal& (0+255),c
  2676  001318  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2677  00131A  0E01               	movlw	1
  2678  00131C  2626               	addwf	??_VerifySignal,f,c
  2679  00131E  0E00               	movlw	0
  2680  001320  2227               	addwfc	??_VerifySignal+1,f,c
  2681  001322  5026               	movf	??_VerifySignal,w,c
  2682  001324  2424               	addwf	VerifySignal@Signal,w,c
  2683  001326  6ED9               	movwf	fsr2l,c
  2684  001328  5027               	movf	??_VerifySignal+1,w,c
  2685  00132A  2025               	addwfc	VerifySignal@Signal+1,w,c
  2686  00132C  6EDA               	movwf	fsr2h,c
  2687  00132E  50DF               	movf	indf2,w,c
  2688  001330  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2689  001332  502F               	movf	VerifySignal@i,w,c
  2690  001334  0D01               	mullw	1
  2691  001336  50F3               	movf	prodl,w,c
  2692  001338  2424               	addwf	VerifySignal@Signal,w,c
  2693  00133A  6ED9               	movwf	fsr2l,c
  2694  00133C  50F4               	movf	prodh,w,c
  2695  00133E  2025               	addwfc	VerifySignal@Signal+1,w,c
  2696  001340  6EDA               	movwf	fsr2h,c
  2697  001342  50DF               	movf	indf2,w,c
  2698  001344  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2699  001346  5029               	movf	??_VerifySignal+3,w,c
  2700  001348  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2701  00134A  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2702  00134C  5028               	movf	??_VerifySignal+2,w,c
  2703  00134E  242A               	addwf	??_VerifySignal+4,w,c
  2704  001350  6E2D               	movwf	VerifySignal@hexByte,c
  2705  001352  0E00               	movlw	0
  2706  001354  202B               	addwfc	??_VerifySignal+5,w,c
  2707  001356  6E2E               	movwf	VerifySignal@hexByte+1,c
  2708                           
  2709                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2710  001358  502C               	movf	VerifySignal@checksum,w,c
  2711  00135A  182D               	xorwf	VerifySignal@hexByte,w,c
  2712  00135C  6E2C               	movwf	VerifySignal@checksum,c
  2713  00135E  0E02               	movlw	2
  2714  001360  262F               	addwf	VerifySignal@i,f,c
  2715  001362  D7D4               	goto	l2543
  2716  001364                     l2555:
  2717                           
  2718                           ;RFID_Reader.c: 68: }
  2719                           ;RFID_Reader.c: 71: return 1;
  2720  001364  0E01               	movlw	1
  2721  001366  0012               	return	
  2722  001368                     __end_of_VerifySignal:
  2723                           	opt stack 0
  2724                           tblptru	equ	0xFF8
  2725                           prodh	equ	0xFF4
  2726                           prodl	equ	0xFF3
  2727                           intcon	equ	0xFF2
  2728                           postinc0	equ	0xFEE
  2729                           wreg	equ	0xFE8
  2730                           indf1	equ	0xFE7
  2731                           fsr1h	equ	0xFE2
  2732                           fsr1l	equ	0xFE1
  2733                           indf2	equ	0xFDF
  2734                           postinc2	equ	0xFDE
  2735                           postdec2	equ	0xFDD
  2736                           fsr2h	equ	0xFDA
  2737                           fsr2l	equ	0xFD9
  2738                           status	equ	0xFD8
  2739                           
  2740 ;; *************** function _ScanWithRange *****************
  2741 ;; Defined at:
  2742 ;;		line 91 in file "Movement.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2745 ;;		 -> main@mL(9), 
  2746 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2747 ;;		 -> main@mR(9), 
  2748 ;;  milliseconds    2   17[BANK0 ] int 
  2749 ;;  MoveTimeEntr    2   19[BANK0 ] PTR int 
  2750 ;;		 -> main@MoveTime(200), 
  2751 ;;  RFID_Read       2   21[BANK0 ] PTR unsigned char 
  2752 ;;		 -> RFID_Read(1), 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  buf            40   28[BANK0 ] unsigned char [40]
  2755 ;;  SensorResult    4   76[BANK0 ] unsigned int [2]
  2756 ;;  RightFlag       2   82[BANK0 ] unsigned int 
  2757 ;;  LeftFlag        2   80[BANK0 ] unsigned int 
  2758 ;;  DirectionFou    2   72[BANK0 ] const unsigned int 
  2759 ;;  i               2   70[BANK0 ] unsigned int 
  2760 ;;  n               2   68[BANK0 ] unsigned int 
  2761 ;;  TimeAboveThr    1   75[BANK0 ] unsigned char 
  2762 ;;  power           1   74[BANK0 ] const unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      unsigned char 
  2765 ;; Registers used:
  2766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2772 ;;      Params:         0      10       0       0
  2773 ;;      Locals:         0      56       0       0
  2774 ;;      Temps:          0       5       0       0
  2775 ;;      Totals:         0      71       0       0
  2776 ;;Total ram usage:       71 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    7
  2779 ;; This function calls:
  2780 ;;		_LCD_String
  2781 ;;		_SendLCD
  2782 ;;		_SetLine
  2783 ;;		_delay_tenth_s
  2784 ;;		_grabLeftIR
  2785 ;;		_grabRightIR
  2786 ;;		_sprintf
  2787 ;;		_stop
  2788 ;;		_turnLeft
  2789 ;;		_turnRight
  2790 ;; This function is called by:
  2791 ;;		_main
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text10
  2796  0008CA                     __ptext10:
  2797                           	opt stack 0
  2798  0008CA                     _ScanWithRange:
  2799                           	opt stack 23
  2800                           
  2801                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2802                           
  2803                           ;incstack = 0
  2804  0008CA  C0C2  F0AC         	movff	ScanWithRange@F3894,ScanWithRange@SensorResult
  2805  0008CE  C0C3  F0AD         	movff	ScanWithRange@F3894+1,ScanWithRange@SensorResult+1
  2806  0008D2  C0C4  F0AE         	movff	ScanWithRange@F3894+2,ScanWithRange@SensorResult+2
  2807  0008D6  C0C5  F0AF         	movff	ScanWithRange@F3894+3,ScanWithRange@SensorResult+3
  2808                           
  2809                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2810  0008DA  0E00               	movlw	0
  2811  0008DC  0100               	movlb	0	; () banked
  2812  0008DE  6FB1               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2813  0008E0  0E00               	movlw	0
  2814  0008E2  6FB0               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2815                           
  2816                           ;Movement.c: 97: unsigned int RightFlag=0;
  2817  0008E4  0E00               	movlw	0
  2818  0008E6  0100               	movlb	0	; () banked
  2819  0008E8  6FB3               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2820  0008EA  0E00               	movlw	0
  2821  0008EC  6FB2               	movwf	ScanWithRange@RightFlag& (0+255),b
  2822                           
  2823                           ;Movement.c: 98: char buf[40];
  2824                           ;Movement.c: 99: unsigned int i=0;
  2825  0008EE  0E00               	movlw	0
  2826  0008F0  0100               	movlb	0	; () banked
  2827  0008F2  6FA7               	movwf	(ScanWithRange@i+1)& (0+255),b
  2828  0008F4  0E00               	movlw	0
  2829  0008F6  6FA6               	movwf	ScanWithRange@i& (0+255),b
  2830                           
  2831                           ;Movement.c: 100: unsigned int n=0;
  2832  0008F8  0E00               	movlw	0
  2833  0008FA  0100               	movlb	0	; () banked
  2834  0008FC  6FA5               	movwf	(ScanWithRange@n+1)& (0+255),b
  2835  0008FE  0E00               	movlw	0
  2836  000900  6FA4               	movwf	ScanWithRange@n& (0+255),b
  2837                           
  2838                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2839  000902  0E00               	movlw	0
  2840  000904  0100               	movlb	0	; () banked
  2841  000906  6FAB               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2842                           
  2843                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2844  000908  0E0B               	movlw	11
  2845  00090A  0100               	movlb	0	; () banked
  2846  00090C  6FA9               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2847  00090E  0EB8               	movlw	184
  2848  000910  6FA8               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2849                           
  2850                           ;Movement.c: 105: const unsigned char power=40;
  2851  000912  0E28               	movlw	40
  2852  000914  0100               	movlb	0	; () banked
  2853  000916  6FAA               	movwf	ScanWithRange@power& (0+255),b
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2857  000918  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2858  00091C  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2859  000920  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2860  000924  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2861  000928  0E64               	movlw	100
  2862  00092A  0100               	movlb	0	; () banked
  2863  00092C  6F6B               	movwf	turnLeft@power& (0+255),b
  2864  00092E  ECEE  F00B         	call	_turnLeft	;wreg free
  2865                           
  2866                           ;Movement.c: 115: delay_tenth_s(3);
  2867  000932  0E03               	movlw	3
  2868  000934  EC29  F00C         	call	_delay_tenth_s
  2869                           
  2870                           ;Movement.c: 116: stop(mL,mR);
  2871  000938  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2872  00093C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2873  000940  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2874  000944  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2875  000948  ECB4  F009         	call	_stop	;wreg free
  2876                           
  2877                           ;Movement.c: 119: turnRight(mL,mR, power);
  2878  00094C  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2879  000950  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2880  000954  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2881  000958  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2882  00095C  C0AA  F06B         	movff	ScanWithRange@power,turnRight@power
  2883  000960  ECCF  F00B         	call	_turnRight	;wreg free
  2884                           
  2885                           ;Movement.c: 122: TMR0L = 0;
  2886  000964  0E00               	movlw	0
  2887  000966  6ED6               	movwf	4054,c	;volatile
  2888                           
  2889                           ;Movement.c: 123: TMR0H = 0;
  2890  000968  0E00               	movlw	0
  2891  00096A  6ED7               	movwf	4055,c	;volatile
  2892                           
  2893                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2894  00096C  8ED5               	bsf	4053,7,c	;volatile
  2895                           
  2896                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2897  00096E  0E00               	movlw	0
  2898  000970  0100               	movlb	0	; () banked
  2899  000972  6FA7               	movwf	(ScanWithRange@i+1)& (0+255),b
  2900  000974  0E01               	movlw	1
  2901  000976  6FA6               	movwf	ScanWithRange@i& (0+255),b
  2902  000978  D119               	goto	l3165
  2903  00097A                     l3093:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2907  00097A  ECFE  F00A         	call	_grabLeftIR	;wreg free
  2908  00097E  C024  F0AC         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2909  000982  C025  F0AD         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2910                           
  2911                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2912  000986  ECC5  F00A         	call	_grabRightIR	;wreg free
  2913  00098A  C024  F0AE         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2914  00098E  C025  F0AF         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2915                           
  2916                           ;Movement.c: 134: CAP1BUFH=0;
  2917  000992  0E00               	movlw	0
  2918  000994  6E69               	movwf	3945,c	;volatile
  2919                           
  2920                           ;Movement.c: 135: CAP1BUFL=0;
  2921  000996  0E00               	movlw	0
  2922  000998  6E68               	movwf	3944,c	;volatile
  2923                           
  2924                           ;Movement.c: 136: CAP2BUFH=0;
  2925  00099A  0E00               	movlw	0
  2926  00099C  6E67               	movwf	3943,c	;volatile
  2927                           
  2928                           ;Movement.c: 137: CAP2BUFL=0;
  2929  00099E  0E00               	movlw	0
  2930  0009A0  6E66               	movwf	3942,c	;volatile
  2931                           
  2932                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2933  0009A2  0E00               	movlw	0
  2934  0009A4  6E28               	movwf	SendLCD@type,c
  2935  0009A6  0E01               	movlw	1
  2936  0009A8  EC92  F00C         	call	_SendLCD
  2937                           
  2938                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2939  0009AC  0E21               	movlw	33
  2940  0009AE                     u2947:
  2941  0009AE  2EE8               	decfsz	wreg,f,c
  2942  0009B0  D7FE               	goto	u2947
  2943  0009B2  F000               	nop	
  2944                           
  2945                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2946  0009B4  0E00               	movlw	0
  2947  0009B6  6E28               	movwf	SendLCD@type,c
  2948  0009B8  0E02               	movlw	2
  2949  0009BA  EC92  F00C         	call	_SendLCD
  2950                           
  2951                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2952  0009BE  0E06               	movlw	6
  2953  0009C0  0100               	movlb	0	; () banked
  2954  0009C2  6F77               	movwf	??_ScanWithRange& (0+255),b
  2955  0009C4  0E30               	movlw	48
  2956  0009C6                     u2957:
  2957  0009C6  2EE8               	decfsz	wreg,f,c
  2958  0009C8  D7FE               	goto	u2957
  2959  0009CA  2F77               	decfsz	??_ScanWithRange& (0+255),f,b
  2960  0009CC  D7FC               	goto	u2957
  2961  0009CE  D000               	nop2	
  2962                           
  2963                           ;Movement.c: 145: SetLine(1);
  2964  0009D0  0E01               	movlw	1
  2965  0009D2  EC7A  F00C         	call	_SetLine
  2966                           
  2967                           ;Movement.c: 146: LCD_String("     ScanIR");
  2968  0009D6  0E2D               	movlw	low STR_1
  2969  0009D8  6E2A               	movwf	LCD_String@string,c
  2970  0009DA  0E03               	movlw	high STR_1
  2971  0009DC  6E2B               	movwf	LCD_String@string+1,c
  2972  0009DE  EC37  F00B         	call	_LCD_String	;wreg free
  2973                           
  2974                           ;Movement.c: 147: SetLine(2);
  2975  0009E2  0E02               	movlw	2
  2976  0009E4  EC7A  F00C         	call	_SetLine
  2977                           
  2978                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2979  0009E8  0E7C               	movlw	low ScanWithRange@buf
  2980  0009EA  6E30               	movwf	sprintf@sp,c
  2981  0009EC  0E00               	movlw	high ScanWithRange@buf
  2982  0009EE  6E31               	movwf	sprintf@sp+1,c
  2983  0009F0  0E0C               	movlw	low (STR_6+1)
  2984  0009F2  6E32               	movwf	sprintf@f,c
  2985  0009F4  0E03               	movlw	high (STR_6+1)
  2986  0009F6  6E33               	movwf	sprintf@f+1,c
  2987  0009F8  C0AC  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2988  0009FC  C0AD  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2989  000A00  C0AE  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2990  000A04  C0AF  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2991  000A08  ECFC  F005         	call	_sprintf	;wreg free
  2992                           
  2993                           ;Movement.c: 149: LCD_String(buf);
  2994  000A0C  0E7C               	movlw	low ScanWithRange@buf
  2995  000A0E  6E2A               	movwf	LCD_String@string,c
  2996  000A10  0E00               	movlw	high ScanWithRange@buf
  2997  000A12  6E2B               	movwf	LCD_String@string+1,c
  2998  000A14  EC37  F00B         	call	_LCD_String	;wreg free
  2999                           
  3000                           ;Movement.c: 151: if (RightFlag==0){
  3001  000A18  0100               	movlb	0	; () banked
  3002  000A1A  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3003  000A1C  0100               	movlb	0	; () banked
  3004  000A1E  11B3               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3005  000A20  A4D8               	btfss	status,2,c
  3006  000A22  D018               	goto	l221
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;Movement.c: 152: if (SensorResult[1]>DirectionFoundThreshold) {
  3010  000A24  0100               	movlb	0	; () banked
  3011  000A26  51AE               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3012  000A28  0100               	movlb	0	; () banked
  3013  000A2A  5DA8               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3014  000A2C  0100               	movlb	0	; () banked
  3015  000A2E  51AF               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3016  000A30  0100               	movlb	0	; () banked
  3017  000A32  59A9               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3018  000A34  B0D8               	btfsc	status,0,c
  3019  000A36  D00E               	goto	l221
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;Movement.c: 153: RightFlag= (TMR0H<<8)+TMR0L;
  3023  000A38  50D7               	movf	4055,w,c	;volatile
  3024  000A3A  0100               	movlb	0	; () banked
  3025  000A3C  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  3026  000A3E  6B77               	clrf	??_ScanWithRange& (0+255),b
  3027  000A40  50D6               	movf	4054,w,c	;volatile
  3028  000A42  0100               	movlb	0	; () banked
  3029  000A44  2577               	addwf	??_ScanWithRange& (0+255),w,b
  3030  000A46  0100               	movlb	0	; () banked
  3031  000A48  6FB2               	movwf	ScanWithRange@RightFlag& (0+255),b
  3032  000A4A  0E00               	movlw	0
  3033  000A4C  0100               	movlb	0	; () banked
  3034  000A4E  2178               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3035  000A50  0100               	movlb	0	; () banked
  3036  000A52  6FB3               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3037  000A54                     l221:
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;Movement.c: 154: }
  3041                           ;Movement.c: 155: }
  3042                           ;Movement.c: 157: if (LeftFlag==0){
  3043  000A54  0100               	movlb	0	; () banked
  3044  000A56  51B0               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3045  000A58  0100               	movlb	0	; () banked
  3046  000A5A  11B1               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3047  000A5C  A4D8               	btfss	status,2,c
  3048  000A5E  D018               	goto	l223
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;Movement.c: 158: if (SensorResult[0]>DirectionFoundThreshold) {
  3052  000A60  0100               	movlb	0	; () banked
  3053  000A62  51AC               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3054  000A64  0100               	movlb	0	; () banked
  3055  000A66  5DA8               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3056  000A68  0100               	movlb	0	; () banked
  3057  000A6A  51AD               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3058  000A6C  0100               	movlb	0	; () banked
  3059  000A6E  59A9               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3060  000A70  B0D8               	btfsc	status,0,c
  3061  000A72  D00E               	goto	l223
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;Movement.c: 159: LeftFlag=(TMR0H<<8)+TMR0L;
  3065  000A74  50D7               	movf	4055,w,c	;volatile
  3066  000A76  0100               	movlb	0	; () banked
  3067  000A78  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  3068  000A7A  6B77               	clrf	??_ScanWithRange& (0+255),b
  3069  000A7C  50D6               	movf	4054,w,c	;volatile
  3070  000A7E  0100               	movlb	0	; () banked
  3071  000A80  2577               	addwf	??_ScanWithRange& (0+255),w,b
  3072  000A82  0100               	movlb	0	; () banked
  3073  000A84  6FB0               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3074  000A86  0E00               	movlw	0
  3075  000A88  0100               	movlb	0	; () banked
  3076  000A8A  2178               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3077  000A8C  0100               	movlb	0	; () banked
  3078  000A8E  6FB1               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3079  000A90                     l223:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;Movement.c: 160: }
  3083                           ;Movement.c: 161: }
  3084                           ;Movement.c: 168: if (LeftFlag>0) {
  3085  000A90  0100               	movlb	0	; () banked
  3086  000A92  51B0               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3087  000A94  0100               	movlb	0	; () banked
  3088  000A96  11B1               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3089  000A98  B4D8               	btfsc	status,2,c
  3090  000A9A  D07C               	goto	l3157
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;Movement.c: 171: if (RightFlag>0) {
  3094  000A9C  0100               	movlb	0	; () banked
  3095  000A9E  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3096  000AA0  0100               	movlb	0	; () banked
  3097  000AA2  11B3               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3098  000AA4  B4D8               	btfsc	status,2,c
  3099  000AA6  D06A               	goto	l226
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;Movement.c: 172: TimeAboveThreshold = LeftFlag - RightFlag;
  3103  000AA8  0100               	movlb	0	; () banked
  3104  000AAA  51B2               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3105  000AAC  0800               	sublw	0
  3106  000AAE  0100               	movlb	0	; () banked
  3107  000AB0  25B0               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3108  000AB2  0100               	movlb	0	; () banked
  3109  000AB4  6FAB               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;Movement.c: 173: TMR0L = 0;
  3113  000AB6  0E00               	movlw	0
  3114  000AB8  6ED6               	movwf	4054,c	;volatile
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;Movement.c: 174: TMR0H = 0;
  3118  000ABA  0E00               	movlw	0
  3119  000ABC  6ED7               	movwf	4055,c	;volatile
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;Movement.c: 175: stop(mL,mR);
  3123  000ABE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3124  000AC2  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3125  000AC6  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3126  000ACA  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3127  000ACE  ECB4  F009         	call	_stop	;wreg free
  3128                           
  3129                           ;Movement.c: 176: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3130  000AD2  D00C               	goto	l3139
  3131  000AD4                     l3137:
  3132                           
  3133                           ;Movement.c: 177: turnLeft(mL,mR, power);
  3134  000AD4  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3135  000AD8  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3136  000ADC  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3137  000AE0  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3138  000AE4  C0AA  F06B         	movff	ScanWithRange@power,turnLeft@power
  3139  000AE8  ECEE  F00B         	call	_turnLeft	;wreg free
  3140  000AEC                     l3139:
  3141  000AEC  0100               	movlb	0	; () banked
  3142  000AEE  90D8               	bcf	status,0,c
  3143  000AF0  31AB               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3144  000AF2  0100               	movlb	0	; () banked
  3145  000AF4  6F77               	movwf	??_ScanWithRange& (0+255),b
  3146  000AF6  6B78               	clrf	(??_ScanWithRange+1)& (0+255),b
  3147  000AF8  50D6               	movf	4054,w,c	;volatile
  3148  000AFA  CFD7 F079          	movff	4055,??_ScanWithRange+2	;volatile
  3149  000AFE  0100               	movlb	0	; () banked
  3150  000B00  6B7A               	clrf	(??_ScanWithRange+3)& (0+255),b
  3151  000B02  C079  F07A         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3152  000B06  0100               	movlb	0	; () banked
  3153  000B08  6B79               	clrf	(??_ScanWithRange+2)& (0+255),b
  3154  000B0A  0100               	movlb	0	; () banked
  3155  000B0C  2779               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3156  000B0E  0E00               	movlw	0
  3157  000B10  237A               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3158  000B12  0100               	movlb	0	; () banked
  3159  000B14  5177               	movf	??_ScanWithRange& (0+255),w,b
  3160  000B16  0100               	movlb	0	; () banked
  3161  000B18  5D79               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3162  000B1A  0100               	movlb	0	; () banked
  3163  000B1C  517A               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3164  000B1E  0A80               	xorlw	128
  3165  000B20  0100               	movlb	0	; () banked
  3166  000B22  6F7B               	movwf	(??_ScanWithRange+4)& (0+255),b
  3167  000B24  0100               	movlb	0	; () banked
  3168  000B26  5178               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3169  000B28  0A80               	xorlw	128
  3170  000B2A  0100               	movlb	0	; () banked
  3171  000B2C  597B               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3172  000B2E  A0D8               	btfss	status,0,c
  3173  000B30  D7D1               	goto	l3137
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;Movement.c: 178: }
  3177                           ;Movement.c: 179: T0CONbits.TMR0ON=0;
  3178  000B32  9ED5               	bcf	4053,7,c	;volatile
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;Movement.c: 180: stop(mL,mR);
  3182  000B34  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3183  000B38  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3184  000B3C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3185  000B40  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3186  000B44  ECB4  F009         	call	_stop	;wreg free
  3187                           
  3188                           ;Movement.c: 181: *MoveTimeEntry = RightFlag + (TimeAboveThreshold>>1);
  3189  000B48  C0AB  F077         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3190  000B4C  0100               	movlb	0	; () banked
  3191  000B4E  90D8               	bcf	status,0,c
  3192  000B50  3377               	rrcf	??_ScanWithRange& (0+255),f,b
  3193  000B52  0100               	movlb	0	; () banked
  3194  000B54  5177               	movf	??_ScanWithRange& (0+255),w,b
  3195  000B56  0100               	movlb	0	; () banked
  3196  000B58  25B2               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3197  000B5A  0100               	movlb	0	; () banked
  3198  000B5C  6F78               	movwf	(??_ScanWithRange+1)& (0+255),b
  3199  000B5E  0E00               	movlw	0
  3200  000B60  0100               	movlb	0	; () banked
  3201  000B62  21B3               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3202  000B64  0100               	movlb	0	; () banked
  3203  000B66  6F79               	movwf	(??_ScanWithRange+2)& (0+255),b
  3204  000B68  C073  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3205  000B6C  C074  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3206  000B70  C078  FFDE         	movff	??_ScanWithRange+1,postinc2
  3207  000B74  C079  FFDD         	movff	??_ScanWithRange+2,postdec2
  3208  000B78                     l3145:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;Movement.c: 182: return 2;
  3212  000B78  0E02               	movlw	2
  3213                           
  3214                           ; BSR set to: 0
  3215  000B7A  0012               	return	
  3216  000B7C                     l226:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;Movement.c: 185: T0CONbits.TMR0ON=0;
  3220  000B7C  9ED5               	bcf	4053,7,c	;volatile
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;Movement.c: 186: stop(mL,mR);
  3224  000B7E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3225  000B82  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3226  000B86  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3227  000B8A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3228  000B8E  ECB4  F009         	call	_stop	;wreg free
  3229  000B92  D7F2               	goto	l3145
  3230  000B94                     l3157:
  3231                           
  3232                           ;Movement.c: 188: }
  3233                           ;Movement.c: 189: }
  3234                           ;Movement.c: 191: if (*RFID_Read==1) {
  3235  000B94  C075  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3236  000B98  C076  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3237  000B9C  04DE               	decf	postinc2,w,c
  3238  000B9E  A4D8               	btfss	status,2,c
  3239  000BA0  D002               	goto	l3163
  3240                           
  3241                           ;Movement.c: 192: return 2;
  3242  000BA2  0E02               	movlw	2
  3243  000BA4  0012               	return	
  3244  000BA6                     l3163:
  3245  000BA6  0100               	movlb	0	; () banked
  3246  000BA8  4BA6               	infsnz	ScanWithRange@i& (0+255),f,b
  3247  000BAA  2BA7               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3248  000BAC                     l3165:
  3249                           
  3250                           ; BSR set to: 0
  3251  000BAC  0100               	movlb	0	; () banked
  3252  000BAE  51A6               	movf	ScanWithRange@i& (0+255),w,b
  3253  000BB0  0100               	movlb	0	; () banked
  3254  000BB2  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3255  000BB4  0100               	movlb	0	; () banked
  3256  000BB6  51A7               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3257  000BB8  0100               	movlb	0	; () banked
  3258  000BBA  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3259  000BBC  B0D8               	btfsc	status,0,c
  3260  000BBE  D6DD               	goto	l3093
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;Movement.c: 193: }
  3264                           ;Movement.c: 194: }
  3265                           ;Movement.c: 197: turnRight(mL,mR, 100);
  3266                           
  3267                           ; BSR set to: 0
  3268  000BC0  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3269  000BC4  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3270  000BC8  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3271  000BCC  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3272  000BD0  0E64               	movlw	100
  3273  000BD2  0100               	movlb	0	; () banked
  3274  000BD4  6F6B               	movwf	turnRight@power& (0+255),b
  3275  000BD6  ECCF  F00B         	call	_turnRight	;wreg free
  3276                           
  3277                           ;Movement.c: 198: delay_tenth_s(2);
  3278  000BDA  0E02               	movlw	2
  3279  000BDC  EC29  F00C         	call	_delay_tenth_s
  3280                           
  3281                           ;Movement.c: 199: stop(mL,mR);
  3282  000BE0  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3283  000BE4  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3284  000BE8  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3285  000BEC  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3286  000BF0  ECB4  F009         	call	_stop	;wreg free
  3287                           
  3288                           ;Movement.c: 200: return -1;
  3289  000BF4  0EFF               	movlw	255
  3290  000BF6  0012               	return	
  3291  000BF8                     __end_of_ScanWithRange:
  3292                           	opt stack 0
  3293                           tblptru	equ	0xFF8
  3294                           prodh	equ	0xFF4
  3295                           prodl	equ	0xFF3
  3296                           intcon	equ	0xFF2
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           indf1	equ	0xFE7
  3300                           fsr1h	equ	0xFE2
  3301                           fsr1l	equ	0xFE1
  3302                           indf2	equ	0xFDF
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _turnRight *****************
  3310 ;; Defined at:
  3311 ;;		line 98 in file "dc_motor.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3314 ;;		 -> main@mL(9), 
  3315 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3316 ;;		 -> main@mR(9), 
  3317 ;;  power           1   11[BANK0 ] unsigned char 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;		None               void
  3322 ;; Registers used:
  3323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3329 ;;      Params:         0       5       0       0
  3330 ;;      Locals:         0       0       0       0
  3331 ;;      Temps:          0       0       0       0
  3332 ;;      Totals:         0       5       0       0
  3333 ;;Total ram usage:        5 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    6
  3336 ;; This function calls:
  3337 ;;		_fullSpeedAhead
  3338 ;; This function is called by:
  3339 ;;		_ScanWithRange
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text11
  3344  00179E                     __ptext11:
  3345                           	opt stack 0
  3346  00179E                     _turnRight:
  3347                           	opt stack 23
  3348                           
  3349                           ;dc_motor.c: 102: mL->direction=0;
  3350                           
  3351                           ;incstack = 0
  3352  00179E  0100               	movlb	0	; () banked
  3353  0017A0  EE20 F001          	lfsr	2,1
  3354  0017A4  5167               	movf	turnRight@mL& (0+255),w,b
  3355  0017A6  26D9               	addwf	fsr2l,f,c
  3356  0017A8  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3357  0017AA  22DA               	addwfc	fsr2h,f,c
  3358  0017AC  0E00               	movlw	0
  3359  0017AE  6EDF               	movwf	indf2,c
  3360                           
  3361                           ;dc_motor.c: 103: mR->direction=1;
  3362  0017B0  0100               	movlb	0	; () banked
  3363  0017B2  EE20 F001          	lfsr	2,1
  3364  0017B6  5169               	movf	turnRight@mR& (0+255),w,b
  3365  0017B8  26D9               	addwf	fsr2l,f,c
  3366  0017BA  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3367  0017BC  22DA               	addwfc	fsr2h,f,c
  3368  0017BE  0E01               	movlw	1
  3369  0017C0  6EDF               	movwf	indf2,c
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3373  0017C2  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3374  0017C6  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3375  0017CA  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3376  0017CE  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3377  0017D2  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3378  0017D6  EC85  F00A         	call	_fullSpeedAhead	;wreg free
  3379  0017DA  0012               	return		;funcret
  3380  0017DC                     __end_of_turnRight:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           intcon	equ	0xFF2
  3386                           postinc0	equ	0xFEE
  3387                           wreg	equ	0xFE8
  3388                           indf1	equ	0xFE7
  3389                           fsr1h	equ	0xFE2
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _turnLeft *****************
  3399 ;; Defined at:
  3400 ;;		line 87 in file "dc_motor.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3403 ;;		 -> main@mL(9), 
  3404 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3405 ;;		 -> main@mR(9), 
  3406 ;;  power           1   11[BANK0 ] unsigned char 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;		None
  3409 ;; Return value:  Size  Location     Type
  3410 ;;		None               void
  3411 ;; Registers used:
  3412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3418 ;;      Params:         0       5       0       0
  3419 ;;      Locals:         0       0       0       0
  3420 ;;      Temps:          0       0       0       0
  3421 ;;      Totals:         0       5       0       0
  3422 ;;Total ram usage:        5 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    6
  3425 ;; This function calls:
  3426 ;;		_fullSpeedAhead
  3427 ;; This function is called by:
  3428 ;;		_ScanWithRange
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text12
  3433  0017DC                     __ptext12:
  3434                           	opt stack 0
  3435  0017DC                     _turnLeft:
  3436                           	opt stack 23
  3437                           
  3438                           ;dc_motor.c: 91: mL->direction=1;
  3439                           
  3440                           ;incstack = 0
  3441  0017DC  0100               	movlb	0	; () banked
  3442  0017DE  EE20 F001          	lfsr	2,1
  3443  0017E2  5167               	movf	turnLeft@mL& (0+255),w,b
  3444  0017E4  26D9               	addwf	fsr2l,f,c
  3445  0017E6  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3446  0017E8  22DA               	addwfc	fsr2h,f,c
  3447  0017EA  0E01               	movlw	1
  3448  0017EC  6EDF               	movwf	indf2,c
  3449                           
  3450                           ;dc_motor.c: 92: mR->direction=0;
  3451  0017EE  0100               	movlb	0	; () banked
  3452  0017F0  EE20 F001          	lfsr	2,1
  3453  0017F4  5169               	movf	turnLeft@mR& (0+255),w,b
  3454  0017F6  26D9               	addwf	fsr2l,f,c
  3455  0017F8  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3456  0017FA  22DA               	addwfc	fsr2h,f,c
  3457  0017FC  0E00               	movlw	0
  3458  0017FE  6EDF               	movwf	indf2,c
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3462  001800  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3463  001804  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3464  001808  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3465  00180C  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3466  001810  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3467  001814  EC85  F00A         	call	_fullSpeedAhead	;wreg free
  3468  001818  0012               	return		;funcret
  3469  00181A                     __end_of_turnLeft:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           postinc0	equ	0xFEE
  3476                           wreg	equ	0xFE8
  3477                           indf1	equ	0xFE7
  3478                           fsr1h	equ	0xFE2
  3479                           fsr1l	equ	0xFE1
  3480                           indf2	equ	0xFDF
  3481                           postinc2	equ	0xFDE
  3482                           postdec2	equ	0xFDD
  3483                           fsr2h	equ	0xFDA
  3484                           fsr2l	equ	0xFD9
  3485                           status	equ	0xFD8
  3486                           
  3487 ;; *************** function _fullSpeedAhead *****************
  3488 ;; Defined at:
  3489 ;;		line 108 in file "dc_motor.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3492 ;;		 -> main@mL(9), 
  3493 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3494 ;;		 -> main@mR(9), 
  3495 ;;  power           1    6[BANK0 ] unsigned char 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;		None               void
  3500 ;; Registers used:
  3501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3507 ;;      Params:         0       5       0       0
  3508 ;;      Locals:         0       0       0       0
  3509 ;;      Temps:          1       0       0       0
  3510 ;;      Totals:         1       5       0       0
  3511 ;;Total ram usage:        6 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    5
  3514 ;; This function calls:
  3515 ;;		_setMotorPWM
  3516 ;; This function is called by:
  3517 ;;		_turnLeft
  3518 ;;		_turnRight
  3519 ;;		_fullSpeedBack
  3520 ;;		_main
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text13
  3525  00150A                     __ptext13:
  3526                           	opt stack 0
  3527  00150A                     _fullSpeedAhead:
  3528                           	opt stack 24
  3529                           
  3530                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3531                           
  3532                           ;incstack = 0
  3533  00150A  D02C               	goto	l65
  3534  00150C                     l2867:
  3535                           
  3536                           ;dc_motor.c: 112: if(mL->power<power){
  3537  00150C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3538  001510  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3539  001514  0100               	movlb	0	; () banked
  3540  001516  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3541  001518  5CDE               	subwf	postinc2,w,c
  3542  00151A  B0D8               	btfsc	status,0,c
  3543  00151C  D005               	goto	l2871
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;dc_motor.c: 113: mL->power++;
  3547  00151E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3548  001522  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3549  001526  2ADF               	incf	indf2,f,c
  3550  001528                     l2871:
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;dc_motor.c: 114: }
  3554                           ;dc_motor.c: 115: if(mR->power<power){
  3555  001528  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3556  00152C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3557  001530  0100               	movlb	0	; () banked
  3558  001532  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3559  001534  5CDE               	subwf	postinc2,w,c
  3560  001536  B0D8               	btfsc	status,0,c
  3561  001538  D005               	goto	l2875
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;dc_motor.c: 116: mR->power++;
  3565  00153A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3566  00153E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3567  001542  2ADF               	incf	indf2,f,c
  3568  001544                     l2875:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;dc_motor.c: 117: }
  3572                           ;dc_motor.c: 118: setMotorPWM(mL);
  3573  001544  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3574  001548  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3575  00154C  EC7F  F007         	call	_setMotorPWM	;wreg free
  3576                           
  3577                           ;dc_motor.c: 119: setMotorPWM(mR);
  3578  001550  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3579  001554  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3580  001558  EC7F  F007         	call	_setMotorPWM	;wreg free
  3581                           
  3582                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3583  00155C  0E21               	movlw	33
  3584  00155E                     u2967:
  3585  00155E  2EE8               	decfsz	wreg,f,c
  3586  001560  D7FE               	goto	u2967
  3587  001562  F000               	nop	
  3588  001564                     l65:
  3589  001564  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3590  001568  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3591  00156C  0100               	movlb	0	; () banked
  3592  00156E  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3593  001570  5CDE               	subwf	postinc2,w,c
  3594  001572  A0D8               	btfss	status,0,c
  3595  001574  D7CB               	goto	l2867
  3596                           
  3597                           ; BSR set to: 0
  3598  001576  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3599  00157A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3600  00157E  0100               	movlb	0	; () banked
  3601  001580  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3602  001582  5CDE               	subwf	postinc2,w,c
  3603  001584  B0D8               	btfsc	status,0,c
  3604  001586  0012               	return	
  3605  001588  D7C1               	goto	l2867
  3606  00158A                     __end_of_fullSpeedAhead:
  3607                           	opt stack 0
  3608                           tblptru	equ	0xFF8
  3609                           prodh	equ	0xFF4
  3610                           prodl	equ	0xFF3
  3611                           intcon	equ	0xFF2
  3612                           postinc0	equ	0xFEE
  3613                           wreg	equ	0xFE8
  3614                           indf1	equ	0xFE7
  3615                           fsr1h	equ	0xFE2
  3616                           fsr1l	equ	0xFE1
  3617                           indf2	equ	0xFDF
  3618                           postinc2	equ	0xFDE
  3619                           postdec2	equ	0xFDD
  3620                           fsr2h	equ	0xFDA
  3621                           fsr2l	equ	0xFD9
  3622                           status	equ	0xFD8
  3623                           
  3624 ;; *************** function _delay_tenth_s *****************
  3625 ;; Defined at:
  3626 ;;		line 32 in file "Movement.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  tenth_second    1    wreg     unsigned char 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3631 ;;  i               2   37[COMRAM] unsigned int 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;		None               void
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3641 ;;      Params:         0       0       0       0
  3642 ;;      Locals:         3       0       0       0
  3643 ;;      Temps:          1       0       0       0
  3644 ;;      Totals:         4       0       0       0
  3645 ;;Total ram usage:        4 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    3
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_ScanWithRange
  3652 ;;		_main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text14
  3657  001852                     __ptext14:
  3658                           	opt stack 0
  3659  001852                     _delay_tenth_s:
  3660                           	opt stack 27
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;incstack = 0
  3664                           ;delay_tenth_s@tenth_seconds stored from wreg
  3665  001852  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3666                           
  3667                           ;Movement.c: 33: unsigned int i=0;
  3668  001854  0E00               	movlw	0
  3669  001856  6E27               	movwf	delay_tenth_s@i+1,c
  3670  001858  0E00               	movlw	0
  3671  00185A  6E26               	movwf	delay_tenth_s@i,c
  3672                           
  3673                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3674  00185C  0E00               	movlw	0
  3675  00185E  6E27               	movwf	delay_tenth_s@i+1,c
  3676  001860  0E01               	movlw	1
  3677  001862  6E26               	movwf	delay_tenth_s@i,c
  3678  001864  D009               	goto	l2189
  3679  001866                     l2185:
  3680                           
  3681                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3682  001866  0E82               	movlw	130
  3683  001868  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3684  00186A  0EDE               	movlw	222
  3685  00186C                     u2977:
  3686  00186C  2EE8               	decfsz	wreg,f,c
  3687  00186E  D7FE               	goto	u2977
  3688  001870  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3689  001872  D7FC               	goto	u2977
  3690  001874  4A26               	infsnz	delay_tenth_s@i,f,c
  3691  001876  2A27               	incf	delay_tenth_s@i+1,f,c
  3692  001878                     l2189:
  3693  001878  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3694  00187A  0D02               	mullw	2
  3695  00187C  5026               	movf	delay_tenth_s@i,w,c
  3696  00187E  5CF3               	subwf	prodl,w,c
  3697  001880  5027               	movf	delay_tenth_s@i+1,w,c
  3698  001882  58F4               	subwfb	prodh,w,c
  3699  001884  A0D8               	btfss	status,0,c
  3700  001886  0012               	return	
  3701  001888  D7EE               	goto	l2185
  3702  00188A                     __end_of_delay_tenth_s:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           prodh	equ	0xFF4
  3706                           prodl	equ	0xFF3
  3707                           intcon	equ	0xFF2
  3708                           postinc0	equ	0xFEE
  3709                           wreg	equ	0xFE8
  3710                           indf1	equ	0xFE7
  3711                           fsr1h	equ	0xFE2
  3712                           fsr1l	equ	0xFE1
  3713                           indf2	equ	0xFDF
  3714                           postinc2	equ	0xFDE
  3715                           postdec2	equ	0xFDD
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _ScanIR *****************
  3721 ;; Defined at:
  3722 ;;		line 45 in file "Movement.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3725 ;;		 -> main@mL(9), 
  3726 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3727 ;;		 -> main@mR(9), 
  3728 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3729 ;;		 -> main@Move(1), 
  3730 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3731 ;;		 -> main@MoveTime(200), 
  3732 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3733 ;;		 -> main@MoveType(100), 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3736 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3737 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      unsigned char 
  3740 ;; Registers used:
  3741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3747 ;;      Params:         0      10       0       0
  3748 ;;      Locals:         0      46       0       0
  3749 ;;      Temps:          1       0       0       0
  3750 ;;      Totals:         1      56       0       0
  3751 ;;Total ram usage:       57 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    7
  3754 ;; This function calls:
  3755 ;;		_LCD_String
  3756 ;;		_SendLCD
  3757 ;;		_SetLine
  3758 ;;		_grabLeftIR
  3759 ;;		_grabRightIR
  3760 ;;		_sprintf
  3761 ;;		_stop
  3762 ;; This function is called by:
  3763 ;;		_main
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           	psect	text15
  3768  001038                     __ptext15:
  3769                           	opt stack 0
  3770  001038                     _ScanIR:
  3771                           	opt stack 23
  3772                           
  3773                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3774                           
  3775                           ;incstack = 0
  3776  001038  C0BE  F0A1         	movff	ScanIR@F3883,ScanIR@SensorResult
  3777  00103C  C0BF  F0A2         	movff	ScanIR@F3883+1,ScanIR@SensorResult+1
  3778  001040  C0C0  F0A3         	movff	ScanIR@F3883+2,ScanIR@SensorResult+2
  3779  001044  C0C1  F0A4         	movff	ScanIR@F3883+3,ScanIR@SensorResult+3
  3780                           
  3781                           ;Movement.c: 50: char buf[40];
  3782                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3783  001048  0E09               	movlw	9
  3784  00104A  0100               	movlb	0	; () banked
  3785  00104C  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3786  00104E  0EC4               	movlw	196
  3787  001050  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3791  001052  ECFE  F00A         	call	_grabLeftIR	;wreg free
  3792  001056  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3793  00105A  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3794                           
  3795                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3796  00105E  ECC5  F00A         	call	_grabRightIR	;wreg free
  3797  001062  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3798  001066  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3799                           
  3800                           ;Movement.c: 62: CAP1BUFH=0;
  3801  00106A  0E00               	movlw	0
  3802  00106C  6E69               	movwf	3945,c	;volatile
  3803                           
  3804                           ;Movement.c: 63: CAP1BUFL=0;
  3805  00106E  0E00               	movlw	0
  3806  001070  6E68               	movwf	3944,c	;volatile
  3807                           
  3808                           ;Movement.c: 64: CAP2BUFH=0;
  3809  001072  0E00               	movlw	0
  3810  001074  6E67               	movwf	3943,c	;volatile
  3811                           
  3812                           ;Movement.c: 65: CAP2BUFL=0;
  3813  001076  0E00               	movlw	0
  3814  001078  6E66               	movwf	3942,c	;volatile
  3815                           
  3816                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3817  00107A  0E00               	movlw	0
  3818  00107C  6E28               	movwf	SendLCD@type,c
  3819  00107E  0E01               	movlw	1
  3820  001080  EC92  F00C         	call	_SendLCD
  3821                           
  3822                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3823  001084  0E21               	movlw	33
  3824  001086                     u2987:
  3825  001086  2EE8               	decfsz	wreg,f,c
  3826  001088  D7FE               	goto	u2987
  3827  00108A  F000               	nop	
  3828                           
  3829                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3830  00108C  0E00               	movlw	0
  3831  00108E  6E28               	movwf	SendLCD@type,c
  3832  001090  0E02               	movlw	2
  3833  001092  EC92  F00C         	call	_SendLCD
  3834                           
  3835                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3836  001096  0E06               	movlw	6
  3837  001098  6E39               	movwf	??_ScanIR& (0+255),c
  3838  00109A  0E30               	movlw	48
  3839  00109C                     u2997:
  3840  00109C  2EE8               	decfsz	wreg,f,c
  3841  00109E  D7FE               	goto	u2997
  3842  0010A0  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3843  0010A2  D7FC               	goto	u2997
  3844  0010A4  D000               	nop2	
  3845                           
  3846                           ;Movement.c: 72: SetLine(1);
  3847  0010A6  0E01               	movlw	1
  3848  0010A8  EC7A  F00C         	call	_SetLine
  3849                           
  3850                           ;Movement.c: 73: LCD_String("     ScanIR");
  3851  0010AC  0E2D               	movlw	low STR_1
  3852  0010AE  6E2A               	movwf	LCD_String@string,c
  3853  0010B0  0E03               	movlw	high STR_1
  3854  0010B2  6E2B               	movwf	LCD_String@string+1,c
  3855  0010B4  EC37  F00B         	call	_LCD_String	;wreg free
  3856                           
  3857                           ;Movement.c: 74: SetLine(2);
  3858  0010B8  0E02               	movlw	2
  3859  0010BA  EC7A  F00C         	call	_SetLine
  3860                           
  3861                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3862  0010BE  0E77               	movlw	low ScanIR@buf
  3863  0010C0  6E30               	movwf	sprintf@sp,c
  3864  0010C2  0E00               	movlw	high ScanIR@buf
  3865  0010C4  6E31               	movwf	sprintf@sp+1,c
  3866  0010C6  0E0C               	movlw	low (STR_6+1)
  3867  0010C8  6E32               	movwf	sprintf@f,c
  3868  0010CA  0E03               	movlw	high (STR_6+1)
  3869  0010CC  6E33               	movwf	sprintf@f+1,c
  3870  0010CE  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3871  0010D2  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3872  0010D6  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3873  0010DA  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3874  0010DE  ECFC  F005         	call	_sprintf	;wreg free
  3875                           
  3876                           ;Movement.c: 76: LCD_String(buf);
  3877  0010E2  0E77               	movlw	low ScanIR@buf
  3878  0010E4  6E2A               	movwf	LCD_String@string,c
  3879  0010E6  0E00               	movlw	high ScanIR@buf
  3880  0010E8  6E2B               	movwf	LCD_String@string+1,c
  3881  0010EA  EC37  F00B         	call	_LCD_String	;wreg free
  3882                           
  3883                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3884                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3885  0010EE  0100               	movlb	0	; () banked
  3886  0010F0  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3887  0010F2  0100               	movlb	0	; () banked
  3888  0010F4  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3889  0010F6  0100               	movlb	0	; () banked
  3890  0010F8  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3891  0010FA  0100               	movlb	0	; () banked
  3892  0010FC  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3893  0010FE  B0D8               	btfsc	status,0,c
  3894  001100  D00C               	goto	l3067
  3895                           
  3896                           ; BSR set to: 0
  3897  001102  0100               	movlb	0	; () banked
  3898  001104  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3899  001106  0100               	movlb	0	; () banked
  3900  001108  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3901  00110A  0100               	movlb	0	; () banked
  3902  00110C  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3903  00110E  0100               	movlb	0	; () banked
  3904  001110  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3905  001112  B0D8               	btfsc	status,0,c
  3906  001114  D002               	goto	l3067
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;Movement.c: 82: return 2;
  3910  001116  0E02               	movlw	2
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;Movement.c: 83: } else {
  3914                           
  3915                           ; BSR set to: 0
  3916  001118  0012               	return	
  3917  00111A                     l3067:
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;Movement.c: 84: stop(mL,mR);
  3921  00111A  C06D  F062         	movff	ScanIR@mL,stop@mL
  3922  00111E  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3923  001122  C06F  F064         	movff	ScanIR@mR,stop@mR
  3924  001126  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3925  00112A  ECB4  F009         	call	_stop	;wreg free
  3926                           
  3927                           ;Movement.c: 85: return 0;
  3928  00112E  0E00               	movlw	0
  3929  001130  0012               	return	
  3930  001132                     __end_of_ScanIR:
  3931                           	opt stack 0
  3932                           tblptru	equ	0xFF8
  3933                           prodh	equ	0xFF4
  3934                           prodl	equ	0xFF3
  3935                           intcon	equ	0xFF2
  3936                           postinc0	equ	0xFEE
  3937                           wreg	equ	0xFE8
  3938                           indf1	equ	0xFE7
  3939                           fsr1h	equ	0xFE2
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _stop *****************
  3949 ;; Defined at:
  3950 ;;		line 67 in file "dc_motor.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3953 ;;		 -> main@mL(9), 
  3954 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3955 ;;		 -> main@mR(9), 
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;		None
  3958 ;; Return value:  Size  Location     Type
  3959 ;;		None               void
  3960 ;; Registers used:
  3961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3967 ;;      Params:         0       4       0       0
  3968 ;;      Locals:         0       0       0       0
  3969 ;;      Temps:          0       0       0       0
  3970 ;;      Totals:         0       4       0       0
  3971 ;;Total ram usage:        4 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    5
  3974 ;; This function calls:
  3975 ;;		_setMotorPWM
  3976 ;; This function is called by:
  3977 ;;		_ScanIR
  3978 ;;		_ScanWithRange
  3979 ;;		_main
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text16
  3984  001368                     __ptext16:
  3985                           	opt stack 0
  3986  001368                     _stop:
  3987                           	opt stack 25
  3988                           
  3989                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3990                           
  3991                           ;incstack = 0
  3992  001368  D028               	goto	l2899
  3993  00136A                     l2885:
  3994                           
  3995                           ;dc_motor.c: 71: if(mL->power>0){
  3996  00136A  C062  FFD9         	movff	stop@mL,fsr2l
  3997  00136E  C063  FFDA         	movff	stop@mL+1,fsr2h
  3998  001372  50DF               	movf	indf2,w,c
  3999  001374  B4D8               	btfsc	status,2,c
  4000  001376  D005               	goto	l2889
  4001                           
  4002                           ;dc_motor.c: 72: mL->power--;
  4003  001378  C062  FFD9         	movff	stop@mL,fsr2l
  4004  00137C  C063  FFDA         	movff	stop@mL+1,fsr2h
  4005  001380  06DF               	decf	indf2,f,c
  4006  001382                     l2889:
  4007                           
  4008                           ;dc_motor.c: 73: }
  4009                           ;dc_motor.c: 74: if(mR->power>0){
  4010  001382  C064  FFD9         	movff	stop@mR,fsr2l
  4011  001386  C065  FFDA         	movff	stop@mR+1,fsr2h
  4012  00138A  50DF               	movf	indf2,w,c
  4013  00138C  B4D8               	btfsc	status,2,c
  4014  00138E  D005               	goto	l2893
  4015                           
  4016                           ;dc_motor.c: 75: mR->power--;
  4017  001390  C064  FFD9         	movff	stop@mR,fsr2l
  4018  001394  C065  FFDA         	movff	stop@mR+1,fsr2h
  4019  001398  06DF               	decf	indf2,f,c
  4020  00139A                     l2893:
  4021                           
  4022                           ;dc_motor.c: 76: }
  4023                           ;dc_motor.c: 77: setMotorPWM(mL);
  4024  00139A  C062  F032         	movff	stop@mL,setMotorPWM@m
  4025  00139E  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4026  0013A2  EC7F  F007         	call	_setMotorPWM	;wreg free
  4027                           
  4028                           ;dc_motor.c: 78: setMotorPWM(mR);
  4029  0013A6  C064  F032         	movff	stop@mR,setMotorPWM@m
  4030  0013AA  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4031  0013AE  EC7F  F007         	call	_setMotorPWM	;wreg free
  4032                           
  4033                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4034  0013B2  0E21               	movlw	33
  4035  0013B4                     u3007:
  4036  0013B4  2EE8               	decfsz	wreg,f,c
  4037  0013B6  D7FE               	goto	u3007
  4038  0013B8  F000               	nop	
  4039  0013BA                     l2899:
  4040  0013BA  C062  FFD9         	movff	stop@mL,fsr2l
  4041  0013BE  C063  FFDA         	movff	stop@mL+1,fsr2h
  4042  0013C2  50DF               	movf	indf2,w,c
  4043  0013C4  A4D8               	btfss	status,2,c
  4044  0013C6  D7D1               	goto	l2885
  4045  0013C8  C064  FFD9         	movff	stop@mR,fsr2l
  4046  0013CC  C065  FFDA         	movff	stop@mR+1,fsr2h
  4047  0013D0  50DF               	movf	indf2,w,c
  4048  0013D2  A4D8               	btfss	status,2,c
  4049  0013D4  D7CA               	goto	l2885
  4050                           
  4051                           ;dc_motor.c: 80: }
  4052                           ;dc_motor.c: 81: mL->direction=1;
  4053  0013D6  0100               	movlb	0	; () banked
  4054  0013D8  EE20 F001          	lfsr	2,1
  4055  0013DC  5162               	movf	stop@mL& (0+255),w,b
  4056  0013DE  26D9               	addwf	fsr2l,f,c
  4057  0013E0  5163               	movf	(stop@mL+1)& (0+255),w,b
  4058  0013E2  22DA               	addwfc	fsr2h,f,c
  4059  0013E4  0E01               	movlw	1
  4060  0013E6  6EDF               	movwf	indf2,c
  4061                           
  4062                           ;dc_motor.c: 82: mR->direction=1;
  4063  0013E8  0100               	movlb	0	; () banked
  4064  0013EA  EE20 F001          	lfsr	2,1
  4065  0013EE  5164               	movf	stop@mR& (0+255),w,b
  4066  0013F0  26D9               	addwf	fsr2l,f,c
  4067  0013F2  5165               	movf	(stop@mR+1)& (0+255),w,b
  4068  0013F4  22DA               	addwfc	fsr2h,f,c
  4069  0013F6  0E01               	movlw	1
  4070  0013F8  6EDF               	movwf	indf2,c
  4071                           
  4072                           ; BSR set to: 0
  4073  0013FA  0012               	return		;funcret
  4074  0013FC                     __end_of_stop:
  4075                           	opt stack 0
  4076                           tblptru	equ	0xFF8
  4077                           prodh	equ	0xFF4
  4078                           prodl	equ	0xFF3
  4079                           intcon	equ	0xFF2
  4080                           postinc0	equ	0xFEE
  4081                           wreg	equ	0xFE8
  4082                           indf1	equ	0xFE7
  4083                           fsr1h	equ	0xFE2
  4084                           fsr1l	equ	0xFE1
  4085                           indf2	equ	0xFDF
  4086                           postinc2	equ	0xFDE
  4087                           postdec2	equ	0xFDD
  4088                           fsr2h	equ	0xFDA
  4089                           fsr2l	equ	0xFD9
  4090                           status	equ	0xFD8
  4091                           
  4092 ;; *************** function _setMotorPWM *****************
  4093 ;; Defined at:
  4094 ;;		line 26 in file "dc_motor.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4097 ;;		 -> main@mR(9), main@mL(9), 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  PWMduty         2    0[BANK0 ] int 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;		None               void
  4102 ;; Registers used:
  4103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4109 ;;      Params:         2       0       0       0
  4110 ;;      Locals:         0       2       0       0
  4111 ;;      Temps:          5       0       0       0
  4112 ;;      Totals:         7       2       0       0
  4113 ;;Total ram usage:        9 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    4
  4116 ;; This function calls:
  4117 ;;		___awdiv
  4118 ;;		___wmul
  4119 ;; This function is called by:
  4120 ;;		_stop
  4121 ;;		_fullSpeedAhead
  4122 ;;		_setMotorFullSpeed
  4123 ;;		_stopMotor
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text17
  4128  000EFE                     __ptext17:
  4129                           	opt stack 0
  4130  000EFE                     _setMotorPWM:
  4131                           	opt stack 25
  4132                           
  4133                           ;dc_motor.c: 28: int PWMduty;
  4134                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;incstack = 0
  4138  000EFE  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4139  000F02  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4140  000F06  50DF               	movf	indf2,w,c
  4141  000F08  6E34               	movwf	??_setMotorPWM& (0+255),c
  4142  000F0A  5034               	movf	??_setMotorPWM,w,c
  4143  000F0C  6E24               	movwf	___wmul@multiplier,c
  4144  000F0E  6A25               	clrf	___wmul@multiplier+1,c
  4145  000F10  EE20 F007          	lfsr	2,7
  4146  000F14  5032               	movf	setMotorPWM@m,w,c
  4147  000F16  26D9               	addwf	fsr2l,f,c
  4148  000F18  5033               	movf	setMotorPWM@m+1,w,c
  4149  000F1A  22DA               	addwfc	fsr2h,f,c
  4150  000F1C  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4151  000F20  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4152  000F24  ECD2  F00C         	call	___wmul	;wreg free
  4153  000F28  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4154  000F2C  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4155  000F30  0E00               	movlw	0
  4156  000F32  6E2D               	movwf	___awdiv@divisor+1,c
  4157  000F34  0E64               	movlw	100
  4158  000F36  6E2C               	movwf	___awdiv@divisor,c
  4159  000F38  EC43  F00A         	call	___awdiv	;wreg free
  4160  000F3C  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4161  000F40  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4162                           
  4163                           ;dc_motor.c: 32: if (m->direction)
  4164  000F44  EE20 F001          	lfsr	2,1
  4165  000F48  5032               	movf	setMotorPWM@m,w,c
  4166  000F4A  26D9               	addwf	fsr2l,f,c
  4167  000F4C  5033               	movf	setMotorPWM@m+1,w,c
  4168  000F4E  22DA               	addwfc	fsr2h,f,c
  4169  000F50  50DF               	movf	indf2,w,c
  4170  000F52  B4D8               	btfsc	status,2,c
  4171  000F54  D02E               	goto	l2863
  4172                           
  4173                           ;dc_motor.c: 33: {
  4174                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4175  000F56  EE20 F006          	lfsr	2,6
  4176  000F5A  5032               	movf	setMotorPWM@m,w,c
  4177  000F5C  26D9               	addwf	fsr2l,f,c
  4178  000F5E  5033               	movf	setMotorPWM@m+1,w,c
  4179  000F60  22DA               	addwfc	fsr2h,f,c
  4180  000F62  50DF               	movf	indf2,w,c
  4181  000F64  6E34               	movwf	??_setMotorPWM& (0+255),c
  4182  000F66  0E01               	movlw	1
  4183  000F68  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4184  000F6A  2A34               	incf	??_setMotorPWM,f,c
  4185  000F6C  D002               	goto	u2234
  4186  000F6E                     u2235:
  4187  000F6E  90D8               	bcf	status,0,c
  4188  000F70  3635               	rlcf	??_setMotorPWM+1,f,c
  4189  000F72                     u2234:
  4190  000F72  2E34               	decfsz	??_setMotorPWM,f,c
  4191  000F74  D7FC               	goto	u2235
  4192  000F76  5035               	movf	??_setMotorPWM+1,w,c
  4193  000F78  108A               	iorwf	3978,w,c	;volatile
  4194  000F7A  6E8A               	movwf	3978,c	;volatile
  4195                           
  4196                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4197  000F7C  EE20 F007          	lfsr	2,7
  4198  000F80  5032               	movf	setMotorPWM@m,w,c
  4199  000F82  26D9               	addwf	fsr2l,f,c
  4200  000F84  5033               	movf	setMotorPWM@m+1,w,c
  4201  000F86  22DA               	addwfc	fsr2h,f,c
  4202  000F88  CFDE F034          	movff	postinc2,??_setMotorPWM
  4203  000F8C  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4204  000F90  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4205  000F94  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4206  000F98  1E36               	comf	??_setMotorPWM+2,f,c
  4207  000F9A  1E37               	comf	??_setMotorPWM+3,f,c
  4208  000F9C  4A36               	infsnz	??_setMotorPWM+2,f,c
  4209  000F9E  2A37               	incf	??_setMotorPWM+3,f,c
  4210  000FA0  5034               	movf	??_setMotorPWM,w,c
  4211  000FA2  2436               	addwf	??_setMotorPWM+2,w,c
  4212  000FA4  0100               	movlb	0	; () banked
  4213  000FA6  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4214  000FA8  5035               	movf	??_setMotorPWM+1,w,c
  4215  000FAA  2037               	addwfc	??_setMotorPWM+3,w,c
  4216  000FAC  0100               	movlb	0	; () banked
  4217  000FAE  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4218                           
  4219                           ;dc_motor.c: 36: }
  4220  000FB0  D014               	goto	l35
  4221  000FB2                     l2863:
  4222                           
  4223                           ;dc_motor.c: 37: else
  4224                           ;dc_motor.c: 38: {
  4225                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4226  000FB2  EE20 F006          	lfsr	2,6
  4227  000FB6  5032               	movf	setMotorPWM@m,w,c
  4228  000FB8  26D9               	addwf	fsr2l,f,c
  4229  000FBA  5033               	movf	setMotorPWM@m+1,w,c
  4230  000FBC  22DA               	addwfc	fsr2h,f,c
  4231  000FBE  50DF               	movf	indf2,w,c
  4232  000FC0  6E34               	movwf	??_setMotorPWM& (0+255),c
  4233  000FC2  0E01               	movlw	1
  4234  000FC4  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4235  000FC6  2A34               	incf	??_setMotorPWM,f,c
  4236  000FC8  D002               	goto	u2244
  4237  000FCA                     u2245:
  4238  000FCA  90D8               	bcf	status,0,c
  4239  000FCC  3635               	rlcf	??_setMotorPWM+1,f,c
  4240  000FCE                     u2244:
  4241  000FCE  2E34               	decfsz	??_setMotorPWM,f,c
  4242  000FD0  D7FC               	goto	u2245
  4243  000FD2  5035               	movf	??_setMotorPWM+1,w,c
  4244  000FD4  0AFF               	xorlw	255
  4245  000FD6  148A               	andwf	3978,w,c	;volatile
  4246  000FD8  6E8A               	movwf	3978,c	;volatile
  4247  000FDA                     l35:
  4248                           
  4249                           ;dc_motor.c: 40: }
  4250                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4251  000FDA  EE20 F002          	lfsr	2,2
  4252  000FDE  5032               	movf	setMotorPWM@m,w,c
  4253  000FE0  26D9               	addwf	fsr2l,f,c
  4254  000FE2  5033               	movf	setMotorPWM@m+1,w,c
  4255  000FE4  22DA               	addwfc	fsr2h,f,c
  4256  000FE6  CFDE F034          	movff	postinc2,??_setMotorPWM
  4257  000FEA  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4258  000FEE  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4259  000FF2  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4260  000FF6  0100               	movlb	0	; () banked
  4261  000FF8  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4262  000FFA  46E8               	rlncf	wreg,f,c
  4263  000FFC  0BFC               	andlw	252
  4264  000FFE  6EDF               	movwf	indf2,c
  4265                           
  4266                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4267  001000  EE20 F004          	lfsr	2,4
  4268  001004  5032               	movf	setMotorPWM@m,w,c
  4269  001006  26D9               	addwf	fsr2l,f,c
  4270  001008  5033               	movf	setMotorPWM@m+1,w,c
  4271  00100A  22DA               	addwfc	fsr2h,f,c
  4272  00100C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4273  001010  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4274  001014  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4275  001018  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4276  00101C  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4277  001020  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4278  001024  0E06               	movlw	6
  4279  001026  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4280  001028                     u2255:
  4281  001028  3437               	rlcf	??_setMotorPWM+3,w,c
  4282  00102A  3237               	rrcf	??_setMotorPWM+3,f,c
  4283  00102C  3236               	rrcf	??_setMotorPWM+2,f,c
  4284  00102E  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4285  001030  D7FB               	goto	u2255
  4286  001032  5036               	movf	??_setMotorPWM+2,w,c
  4287  001034  6EDF               	movwf	indf2,c
  4288                           
  4289                           ; BSR set to: 0
  4290  001036  0012               	return		;funcret
  4291  001038                     __end_of_setMotorPWM:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           intcon	equ	0xFF2
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           indf1	equ	0xFE7
  4300                           fsr1h	equ	0xFE2
  4301                           fsr1l	equ	0xFE1
  4302                           indf2	equ	0xFDF
  4303                           postinc2	equ	0xFDE
  4304                           postdec2	equ	0xFDD
  4305                           fsr2h	equ	0xFDA
  4306                           fsr2l	equ	0xFD9
  4307                           status	equ	0xFD8
  4308                           
  4309 ;; *************** function ___awdiv *****************
  4310 ;; Defined at:
  4311 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;  dividend        2   41[COMRAM] int 
  4314 ;;  divisor         2   43[COMRAM] int 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  quotient        2   47[COMRAM] int 
  4317 ;;  sign            1   46[COMRAM] unsigned char 
  4318 ;;  counter         1   45[COMRAM] unsigned char 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  2   41[COMRAM] int 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4328 ;;      Params:         4       0       0       0
  4329 ;;      Locals:         4       0       0       0
  4330 ;;      Temps:          0       0       0       0
  4331 ;;      Totals:         8       0       0       0
  4332 ;;Total ram usage:        8 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    3
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_setMotorPWM
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text18
  4343  001486                     __ptext18:
  4344                           	opt stack 0
  4345  001486                     ___awdiv:
  4346                           	opt stack 25
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;incstack = 0
  4350  001486  0E00               	movlw	0
  4351  001488  6E2F               	movwf	___awdiv@sign,c
  4352  00148A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4353  00148C  D006               	goto	l2821
  4354  00148E  6C2C               	negf	___awdiv@divisor,c
  4355  001490  1E2D               	comf	___awdiv@divisor+1,f,c
  4356  001492  B0D8               	btfsc	status,0,c
  4357  001494  2A2D               	incf	___awdiv@divisor+1,f,c
  4358  001496  0E01               	movlw	1
  4359  001498  6E2F               	movwf	___awdiv@sign,c
  4360  00149A                     l2821:
  4361  00149A  AE2B               	btfss	___awdiv@dividend+1,7,c
  4362  00149C  D006               	goto	l2827
  4363  00149E  6C2A               	negf	___awdiv@dividend,c
  4364  0014A0  1E2B               	comf	___awdiv@dividend+1,f,c
  4365  0014A2  B0D8               	btfsc	status,0,c
  4366  0014A4  2A2B               	incf	___awdiv@dividend+1,f,c
  4367  0014A6  0E01               	movlw	1
  4368  0014A8  1A2F               	xorwf	___awdiv@sign,f,c
  4369  0014AA                     l2827:
  4370  0014AA  0E00               	movlw	0
  4371  0014AC  6E31               	movwf	___awdiv@quotient+1,c
  4372  0014AE  0E00               	movlw	0
  4373  0014B0  6E30               	movwf	___awdiv@quotient,c
  4374  0014B2  502C               	movf	___awdiv@divisor,w,c
  4375  0014B4  102D               	iorwf	___awdiv@divisor+1,w,c
  4376  0014B6  B4D8               	btfsc	status,2,c
  4377  0014B8  D01C               	goto	l2849
  4378  0014BA  0E01               	movlw	1
  4379  0014BC  6E2E               	movwf	___awdiv@counter,c
  4380  0014BE  D004               	goto	l2835
  4381  0014C0                     l2833:
  4382  0014C0  90D8               	bcf	status,0,c
  4383  0014C2  362C               	rlcf	___awdiv@divisor,f,c
  4384  0014C4  362D               	rlcf	___awdiv@divisor+1,f,c
  4385  0014C6  2A2E               	incf	___awdiv@counter,f,c
  4386  0014C8                     l2835:
  4387  0014C8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4388  0014CA  D7FA               	goto	l2833
  4389  0014CC                     l2837:
  4390  0014CC  90D8               	bcf	status,0,c
  4391  0014CE  3630               	rlcf	___awdiv@quotient,f,c
  4392  0014D0  3631               	rlcf	___awdiv@quotient+1,f,c
  4393  0014D2  502C               	movf	___awdiv@divisor,w,c
  4394  0014D4  5C2A               	subwf	___awdiv@dividend,w,c
  4395  0014D6  502D               	movf	___awdiv@divisor+1,w,c
  4396  0014D8  582B               	subwfb	___awdiv@dividend+1,w,c
  4397  0014DA  A0D8               	btfss	status,0,c
  4398  0014DC  D005               	goto	l2845
  4399  0014DE  502C               	movf	___awdiv@divisor,w,c
  4400  0014E0  5E2A               	subwf	___awdiv@dividend,f,c
  4401  0014E2  502D               	movf	___awdiv@divisor+1,w,c
  4402  0014E4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4403  0014E6  8030               	bsf	___awdiv@quotient,0,c
  4404  0014E8                     l2845:
  4405  0014E8  90D8               	bcf	status,0,c
  4406  0014EA  322D               	rrcf	___awdiv@divisor+1,f,c
  4407  0014EC  322C               	rrcf	___awdiv@divisor,f,c
  4408  0014EE  2E2E               	decfsz	___awdiv@counter,f,c
  4409  0014F0  D7ED               	goto	l2837
  4410  0014F2                     l2849:
  4411  0014F2  502F               	movf	___awdiv@sign,w,c
  4412  0014F4  B4D8               	btfsc	status,2,c
  4413  0014F6  D004               	goto	l2853
  4414  0014F8  6C30               	negf	___awdiv@quotient,c
  4415  0014FA  1E31               	comf	___awdiv@quotient+1,f,c
  4416  0014FC  B0D8               	btfsc	status,0,c
  4417  0014FE  2A31               	incf	___awdiv@quotient+1,f,c
  4418  001500                     l2853:
  4419  001500  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4420  001504  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4421  001508  0012               	return	
  4422  00150A                     __end_of___awdiv:
  4423                           	opt stack 0
  4424                           tblptru	equ	0xFF8
  4425                           prodh	equ	0xFF4
  4426                           prodl	equ	0xFF3
  4427                           intcon	equ	0xFF2
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           indf1	equ	0xFE7
  4431                           fsr1h	equ	0xFE2
  4432                           fsr1l	equ	0xFE1
  4433                           indf2	equ	0xFDF
  4434                           postinc2	equ	0xFDE
  4435                           postdec2	equ	0xFDD
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function _sprintf *****************
  4441 ;; Defined at:
  4442 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4445 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4446 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4447 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  tmpval          4    0        struct .
  4450 ;;  cp              3    0        PTR const unsigned char 
  4451 ;;  width           2   10[BANK0 ] int 
  4452 ;;  val             2    7[BANK0 ] unsigned int 
  4453 ;;  ap              2    4[BANK0 ] PTR void [1]
  4454 ;;		 -> ?_sprintf(2), 
  4455 ;;  len             2    0        unsigned int 
  4456 ;;  c               1   12[BANK0 ] char 
  4457 ;;  flag            1    9[BANK0 ] unsigned char 
  4458 ;;  prec            1    6[BANK0 ] char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  2   47[COMRAM] int 
  4461 ;; Registers used:
  4462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4468 ;;      Params:         8       0       0       0
  4469 ;;      Locals:         0       9       0       0
  4470 ;;      Temps:          0       4       0       0
  4471 ;;      Totals:         8      13       0       0
  4472 ;;Total ram usage:       21 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    4
  4475 ;; This function calls:
  4476 ;;		___lwdiv
  4477 ;;		___lwmod
  4478 ;;		___wmul
  4479 ;;		_isdigit
  4480 ;; This function is called by:
  4481 ;;		_ScanIR
  4482 ;;		_ScanWithRange
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           	psect	text19
  4488  000BF8                     __ptext19:
  4489                           	opt stack 0
  4490  000BF8                     _sprintf:
  4491                           	opt stack 26
  4492                           
  4493                           ;doprnt.c: 494: va_list ap;
  4494                           ;doprnt.c: 499: signed char c;
  4495                           ;doprnt.c: 501: int width;
  4496                           ;doprnt.c: 506: signed char prec;
  4497                           ;doprnt.c: 508: unsigned char flag;
  4498                           ;doprnt.c: 523: union {
  4499                           ;doprnt.c: 524: unsigned long vd;
  4500                           ;doprnt.c: 525: double integ;
  4501                           ;doprnt.c: 526: } tmpval;
  4502                           ;doprnt.c: 528: unsigned int val;
  4503                           ;doprnt.c: 529: unsigned len;
  4504                           ;doprnt.c: 530: const char * cp;
  4505                           ;doprnt.c: 533: *ap = __va_start();
  4506                           
  4507                           ;incstack = 0
  4508  000BF8  0E34               	movlw	low (?_sprintf+4)
  4509  000BFA  0100               	movlb	0	; () banked
  4510  000BFC  6F64               	movwf	sprintf@ap& (0+255),b
  4511  000BFE  0E00               	movlw	high (?_sprintf+4)
  4512  000C00  0100               	movlb	0	; () banked
  4513  000C02  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4514                           
  4515                           ;doprnt.c: 536: while(c = *f++) {
  4516  000C04  D168               	goto	l3021
  4517  000C06                     l2915:
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;doprnt.c: 538: if(c != '%')
  4521  000C06  0E25               	movlw	37
  4522  000C08  0100               	movlb	0	; () banked
  4523  000C0A  196C               	xorwf	sprintf@c& (0+255),w,b
  4524  000C0C  B4D8               	btfsc	status,2,c
  4525  000C0E  D009               	goto	l2921
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;doprnt.c: 540: {
  4529                           ;doprnt.c: 541: ((*sp++ = (c)));
  4530  000C10  C030  FFD9         	movff	sprintf@sp,fsr2l
  4531  000C14  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4532  000C18  C06C  FFDF         	movff	sprintf@c,indf2
  4533                           
  4534                           ; BSR set to: 0
  4535  000C1C  4A30               	infsnz	sprintf@sp,f,c
  4536  000C1E  2A31               	incf	sprintf@sp+1,f,c
  4537                           
  4538                           ;doprnt.c: 542: continue;
  4539  000C20  D15A               	goto	l3021
  4540  000C22                     l2921:
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;doprnt.c: 543: }
  4544                           ;doprnt.c: 546: width = 0;
  4545  000C22  0E00               	movlw	0
  4546  000C24  0100               	movlb	0	; () banked
  4547  000C26  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4548  000C28  0E00               	movlw	0
  4549  000C2A  6F6A               	movwf	sprintf@width& (0+255),b
  4550                           
  4551                           ;doprnt.c: 548: flag = 0;
  4552  000C2C  0E00               	movlw	0
  4553  000C2E  0100               	movlb	0	; () banked
  4554  000C30  6F69               	movwf	sprintf@flag& (0+255),b
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;doprnt.c: 551: switch(*f) {
  4558                           
  4559                           ;doprnt.c: 550: for(;;) {
  4560  000C32  D004               	goto	l2927
  4561  000C34                     l2923:
  4562                           
  4563                           ;doprnt.c: 580: flag |= 0x04;
  4564  000C34  0100               	movlb	0	; () banked
  4565  000C36  8569               	bsf	sprintf@flag& (0+255),2,b
  4566                           
  4567                           ;doprnt.c: 581: f++;
  4568  000C38  4A32               	infsnz	sprintf@f,f,c
  4569  000C3A  2A33               	incf	sprintf@f+1,f,c
  4570  000C3C                     l2927:
  4571  000C3C  C032  FFF6         	movff	sprintf@f,tblptrl
  4572  000C40  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4573  000C44                     	if	0	;tblptru may be non-zero
  4574  000C44                     	endif
  4575  000C44                     	if	0	;tblptru may be non-zero
  4576  000C44                     	endif
  4577  000C44  0008               	tblrd		*
  4578  000C46  50F5               	movf	tablat,w,c
  4579                           
  4580                           ; Switch size 1, requested type "space"
  4581                           ; Number of cases is 1, Range of values is 48 to 48
  4582                           ; switch strategies available:
  4583                           ; Name         Instructions Cycles
  4584                           ; simple_byte            4     3 (average)
  4585                           ;	Chosen strategy is simple_byte
  4586  000C48  0A30               	xorlw	48	; case 48
  4587  000C4A  B4D8               	btfsc	status,2,c
  4588  000C4C  D7F3               	goto	l2923
  4589                           
  4590                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4591                           
  4592                           ;doprnt.c: 586: }
  4593                           
  4594                           ;doprnt.c: 585: break;
  4595  000C4E  C032  FFF6         	movff	sprintf@f,tblptrl
  4596  000C52  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4597  000C56                     	if	0	;tblptru may be non-zero
  4598  000C56                     	endif
  4599  000C56                     	if	0	;tblptru may be non-zero
  4600  000C56                     	endif
  4601  000C56  0008               	tblrd		*
  4602  000C58  50F5               	movf	tablat,w,c
  4603  000C5A  ECF6  F00C         	call	_isdigit
  4604  000C5E  A0D8               	btfss	status,0,c
  4605  000C60  D03E               	goto	l2943
  4606                           
  4607                           ;doprnt.c: 598: width = 0;
  4608  000C62  0E00               	movlw	0
  4609  000C64  0100               	movlb	0	; () banked
  4610  000C66  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4611  000C68  0E00               	movlw	0
  4612  000C6A  6F6A               	movwf	sprintf@width& (0+255),b
  4613  000C6C                     l2933:
  4614                           
  4615                           ;doprnt.c: 600: width *= 10;
  4616  000C6C  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4617  000C70  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4618  000C74  0E00               	movlw	0
  4619  000C76  6E27               	movwf	___wmul@multiplicand+1,c
  4620  000C78  0E0A               	movlw	10
  4621  000C7A  6E26               	movwf	___wmul@multiplicand,c
  4622  000C7C  ECD2  F00C         	call	___wmul	;wreg free
  4623  000C80  C024  F06A         	movff	?___wmul,sprintf@width
  4624  000C84  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4625                           
  4626                           ;doprnt.c: 601: width += *f++ - '0';
  4627  000C88  0ED0               	movlw	208
  4628  000C8A  0100               	movlb	0	; () banked
  4629  000C8C  6F60               	movwf	??_sprintf& (0+255),b
  4630  000C8E  0EFF               	movlw	255
  4631  000C90  0100               	movlb	0	; () banked
  4632  000C92  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4633  000C94  C032  FFF6         	movff	sprintf@f,tblptrl
  4634  000C98  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4635  000C9C                     	if	0	;tblptru may be non-zero
  4636  000C9C                     	endif
  4637  000C9C                     	if	0	;tblptru may be non-zero
  4638  000C9C                     	endif
  4639  000C9C  0008               	tblrd		*
  4640  000C9E  50F5               	movf	tablat,w,c
  4641  000CA0  0100               	movlb	0	; () banked
  4642  000CA2  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4643  000CA4  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4644  000CA6  0100               	movlb	0	; () banked
  4645  000CA8  5160               	movf	??_sprintf& (0+255),w,b
  4646  000CAA  0100               	movlb	0	; () banked
  4647  000CAC  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4648  000CAE  0100               	movlb	0	; () banked
  4649  000CB0  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4650  000CB2  0100               	movlb	0	; () banked
  4651  000CB4  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4652  000CB6  0100               	movlb	0	; () banked
  4653  000CB8  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4654  000CBA  0100               	movlb	0	; () banked
  4655  000CBC  276A               	addwf	sprintf@width& (0+255),f,b
  4656  000CBE  0100               	movlb	0	; () banked
  4657  000CC0  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4658  000CC2  0100               	movlb	0	; () banked
  4659  000CC4  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4660                           
  4661                           ; BSR set to: 0
  4662  000CC6  4A32               	infsnz	sprintf@f,f,c
  4663  000CC8  2A33               	incf	sprintf@f+1,f,c
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4667  000CCA  C032  FFF6         	movff	sprintf@f,tblptrl
  4668  000CCE  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4669  000CD2                     	if	0	;tblptru may be non-zero
  4670  000CD2                     	endif
  4671  000CD2                     	if	0	;tblptru may be non-zero
  4672  000CD2                     	endif
  4673  000CD2  0008               	tblrd		*
  4674  000CD4  50F5               	movf	tablat,w,c
  4675  000CD6  ECF6  F00C         	call	_isdigit
  4676  000CDA  B0D8               	btfsc	status,0,c
  4677  000CDC  D7C7               	goto	l2933
  4678  000CDE                     l2943:
  4679  000CDE  C032  FFF6         	movff	sprintf@f,tblptrl
  4680  000CE2  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4681  000CE6  4A32               	infsnz	sprintf@f,f,c
  4682  000CE8  2A33               	incf	sprintf@f+1,f,c
  4683  000CEA                     	if	0	;tblptru may be non-zero
  4684  000CEA                     	endif
  4685  000CEA                     	if	0	;tblptru may be non-zero
  4686  000CEA                     	endif
  4687  000CEA  0008               	tblrd		*
  4688  000CEC  CFF5 F06C          	movff	tablat,sprintf@c
  4689  000CF0  0100               	movlb	0	; () banked
  4690  000CF2  516C               	movf	sprintf@c& (0+255),w,b
  4691                           
  4692                           ; Switch size 1, requested type "space"
  4693                           ; Number of cases is 3, Range of values is 0 to 105
  4694                           ; switch strategies available:
  4695                           ; Name         Instructions Cycles
  4696                           ; simple_byte           10     6 (average)
  4697                           ;	Chosen strategy is simple_byte
  4698  000CF4  0A00               	xorlw	0	; case 0
  4699  000CF6  B4D8               	btfsc	status,2,c
  4700  000CF8  D0FB               	goto	l3023
  4701  000CFA  0A64               	xorlw	100	; case 100
  4702  000CFC  B4D8               	btfsc	status,2,c
  4703  000CFE  D003               	goto	l2945
  4704  000D00  0A0D               	xorlw	13	; case 105
  4705  000D02  A4D8               	btfss	status,2,c
  4706  000D04  D0E8               	goto	l3021
  4707  000D06                     l2945:
  4708                           
  4709                           ;doprnt.c: 1253: {
  4710                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4711  000D06  C064  FFD9         	movff	sprintf@ap,fsr2l
  4712  000D0A  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4713  000D0E  CFDE F067          	movff	postinc2,sprintf@val
  4714  000D12  CFDD F068          	movff	postdec2,sprintf@val+1
  4715  000D16  0E02               	movlw	2
  4716  000D18  0100               	movlb	0	; () banked
  4717  000D1A  2764               	addwf	sprintf@ap& (0+255),f,b
  4718  000D1C  0E00               	movlw	0
  4719  000D1E  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;doprnt.c: 1261: if((int)val < 0) {
  4723  000D20  0100               	movlb	0	; () banked
  4724  000D22  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4725  000D24  D008               	goto	l2955
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;doprnt.c: 1262: flag |= 0x03;
  4729  000D26  0E03               	movlw	3
  4730  000D28  0100               	movlb	0	; () banked
  4731  000D2A  1369               	iorwf	sprintf@flag& (0+255),f,b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;doprnt.c: 1263: val = -val;
  4735  000D2C  0100               	movlb	0	; () banked
  4736  000D2E  6D67               	negf	sprintf@val& (0+255),b
  4737  000D30  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4738  000D32  B0D8               	btfsc	status,0,c
  4739  000D34  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4740  000D36                     l2955:
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;doprnt.c: 1264: }
  4744                           ;doprnt.c: 1266: }
  4745                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4746  000D36  0E01               	movlw	1
  4747  000D38  0100               	movlb	0	; () banked
  4748  000D3A  6F6C               	movwf	sprintf@c& (0+255),b
  4749  000D3C                     l2957:
  4750                           
  4751                           ; BSR set to: 0
  4752  000D3C  0E05               	movlw	5
  4753  000D3E  0100               	movlb	0	; () banked
  4754  000D40  196C               	xorwf	sprintf@c& (0+255),w,b
  4755  000D42  B4D8               	btfsc	status,2,c
  4756  000D44  D016               	goto	l2969
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;doprnt.c: 1306: if(val < dpowers[c])
  4760                           
  4761                           ; BSR set to: 0
  4762                           
  4763                           ; BSR set to: 0
  4764  000D46  0100               	movlb	0	; () banked
  4765  000D48  516C               	movf	sprintf@c& (0+255),w,b
  4766  000D4A  0D02               	mullw	2
  4767  000D4C  0E01               	movlw	low _dpowers
  4768  000D4E  24F3               	addwf	prodl,w,c
  4769  000D50  6EF6               	movwf	tblptrl,c
  4770  000D52  0E03               	movlw	high _dpowers
  4771  000D54  20F4               	addwfc	prodh,w,c
  4772  000D56  6EF7               	movwf	tblptrh,c
  4773  000D58                     	if	0	;There are less than 3 active tblptr bytes
  4774  000D58                     	endif
  4775  000D58  0009               	tblrd		*+
  4776  000D5A  50F5               	movf	tablat,w,c
  4777  000D5C  0100               	movlb	0	; () banked
  4778  000D5E  5D67               	subwf	sprintf@val& (0+255),w,b
  4779  000D60  0009               	tblrd		*+
  4780  000D62  50F5               	movf	tablat,w,c
  4781  000D64  0100               	movlb	0	; () banked
  4782  000D66  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4783  000D68  A0D8               	btfss	status,0,c
  4784  000D6A  D003               	goto	l2969
  4785                           
  4786                           ; BSR set to: 0
  4787                           
  4788                           ; BSR set to: 0
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;doprnt.c: 1307: break;
  4792  000D6C  0100               	movlb	0	; () banked
  4793  000D6E  2B6C               	incf	sprintf@c& (0+255),f,b
  4794  000D70  D7E5               	goto	l2957
  4795  000D72                     l2969:
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4799  000D72  0100               	movlb	0	; () banked
  4800  000D74  516A               	movf	sprintf@width& (0+255),w,b
  4801  000D76  0100               	movlb	0	; () banked
  4802  000D78  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4803  000D7A  B4D8               	btfsc	status,2,c
  4804  000D7C  D00B               	goto	l2975
  4805                           
  4806                           ; BSR set to: 0
  4807  000D7E  C069  F060         	movff	sprintf@flag,??_sprintf
  4808  000D82  0E03               	movlw	3
  4809  000D84  0100               	movlb	0	; () banked
  4810  000D86  1760               	andwf	??_sprintf& (0+255),f,b
  4811  000D88  B4D8               	btfsc	status,2,c
  4812  000D8A  D004               	goto	l2975
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;doprnt.c: 1346: width--;
  4816  000D8C  0100               	movlb	0	; () banked
  4817  000D8E  076A               	decf	sprintf@width& (0+255),f,b
  4818  000D90  A0D8               	btfss	status,0,c
  4819  000D92  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4820  000D94                     l2975:
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;doprnt.c: 1381: if(width > c)
  4824  000D94  0E80               	movlw	128
  4825  000D96  0100               	movlb	0	; () banked
  4826  000D98  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4827  000D9A  0E7F               	movlw	127
  4828  000D9C  0100               	movlb	0	; () banked
  4829  000D9E  6F60               	movwf	??_sprintf& (0+255),b
  4830  000DA0  0100               	movlb	0	; () banked
  4831  000DA2  516A               	movf	sprintf@width& (0+255),w,b
  4832  000DA4  0100               	movlb	0	; () banked
  4833  000DA6  5D6C               	subwf	sprintf@c& (0+255),w,b
  4834  000DA8  0100               	movlb	0	; () banked
  4835  000DAA  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4836  000DAC  0A80               	xorlw	128
  4837  000DAE  0100               	movlb	0	; () banked
  4838  000DB0  5960               	subwfb	??_sprintf& (0+255),w,b
  4839  000DB2  B0D8               	btfsc	status,0,c
  4840  000DB4  D00B               	goto	l2979
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;doprnt.c: 1382: width -= c;
  4844  000DB6  0100               	movlb	0	; () banked
  4845  000DB8  516C               	movf	sprintf@c& (0+255),w,b
  4846  000DBA  0100               	movlb	0	; () banked
  4847  000DBC  5F6A               	subwf	sprintf@width& (0+255),f,b
  4848  000DBE  0E00               	movlw	0
  4849  000DC0  0100               	movlb	0	; () banked
  4850  000DC2  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4851  000DC4  0EFF               	movlw	255
  4852  000DC6  0100               	movlb	0	; () banked
  4853  000DC8  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4854  000DCA  D005               	goto	l2981
  4855  000DCC                     l2979:
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;doprnt.c: 1383: else
  4859                           ;doprnt.c: 1384: width = 0;
  4860  000DCC  0E00               	movlw	0
  4861  000DCE  0100               	movlb	0	; () banked
  4862  000DD0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4863  000DD2  0E00               	movlw	0
  4864  000DD4  6F6A               	movwf	sprintf@width& (0+255),b
  4865  000DD6                     l2981:
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;doprnt.c: 1387: if(flag & 0x04) {
  4869  000DD6  0100               	movlb	0	; () banked
  4870  000DD8  A569               	btfss	sprintf@flag& (0+255),2,b
  4871  000DDA  D022               	goto	l2997
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;doprnt.c: 1392: if(flag & 0x03)
  4875  000DDC  C069  F060         	movff	sprintf@flag,??_sprintf
  4876  000DE0  0E03               	movlw	3
  4877  000DE2  0100               	movlb	0	; () banked
  4878  000DE4  1760               	andwf	??_sprintf& (0+255),f,b
  4879  000DE6  B4D8               	btfsc	status,2,c
  4880  000DE8  D008               	goto	l2989
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4884  000DEA  C030  FFD9         	movff	sprintf@sp,fsr2l
  4885  000DEE  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4886  000DF2  0E2D               	movlw	45
  4887  000DF4  6EDF               	movwf	indf2,c
  4888                           
  4889                           ; BSR set to: 0
  4890  000DF6  4A30               	infsnz	sprintf@sp,f,c
  4891  000DF8  2A31               	incf	sprintf@sp+1,f,c
  4892  000DFA                     l2989:
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;doprnt.c: 1415: if(width)
  4896  000DFA  0100               	movlb	0	; () banked
  4897  000DFC  516A               	movf	sprintf@width& (0+255),w,b
  4898  000DFE  0100               	movlb	0	; () banked
  4899  000E00  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4900  000E02  B4D8               	btfsc	status,2,c
  4901  000E04  D034               	goto	l3011
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4905                           
  4906                           ; BSR set to: 0
  4907                           
  4908                           ;doprnt.c: 1416: do
  4909  000E06  C030  FFD9         	movff	sprintf@sp,fsr2l
  4910  000E0A  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4911  000E0E  0E30               	movlw	48
  4912  000E10  6EDF               	movwf	indf2,c
  4913                           
  4914                           ; BSR set to: 0
  4915  000E12  4A30               	infsnz	sprintf@sp,f,c
  4916  000E14  2A31               	incf	sprintf@sp+1,f,c
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;doprnt.c: 1418: while(--width);
  4920  000E16  0100               	movlb	0	; () banked
  4921  000E18  076A               	decf	sprintf@width& (0+255),f,b
  4922  000E1A  A0D8               	btfss	status,0,c
  4923  000E1C  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4924  000E1E  D7ED               	goto	l2989
  4925  000E20                     l2997:
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;doprnt.c: 1422: {
  4929                           ;doprnt.c: 1424: if(width
  4930                           ;doprnt.c: 1428: )
  4931  000E20  0100               	movlb	0	; () banked
  4932  000E22  516A               	movf	sprintf@width& (0+255),w,b
  4933  000E24  0100               	movlb	0	; () banked
  4934  000E26  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4935  000E28  B4D8               	btfsc	status,2,c
  4936  000E2A  D012               	goto	l3005
  4937  000E2C                     l2999:
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4941  000E2C  C030  FFD9         	movff	sprintf@sp,fsr2l
  4942  000E30  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4943  000E34  0E20               	movlw	32
  4944  000E36  6EDF               	movwf	indf2,c
  4945                           
  4946                           ; BSR set to: 0
  4947  000E38  4A30               	infsnz	sprintf@sp,f,c
  4948  000E3A  2A31               	incf	sprintf@sp+1,f,c
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;doprnt.c: 1431: while(--width);
  4952  000E3C  0100               	movlb	0	; () banked
  4953  000E3E  076A               	decf	sprintf@width& (0+255),f,b
  4954  000E40  A0D8               	btfss	status,0,c
  4955  000E42  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4956  000E44  0100               	movlb	0	; () banked
  4957  000E46  516A               	movf	sprintf@width& (0+255),w,b
  4958  000E48  0100               	movlb	0	; () banked
  4959  000E4A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4960  000E4C  A4D8               	btfss	status,2,c
  4961  000E4E  D7EE               	goto	l2999
  4962  000E50                     l3005:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;doprnt.c: 1438: if(flag & 0x03)
  4966  000E50  C069  F060         	movff	sprintf@flag,??_sprintf
  4967  000E54  0E03               	movlw	3
  4968  000E56  0100               	movlb	0	; () banked
  4969  000E58  1760               	andwf	??_sprintf& (0+255),f,b
  4970  000E5A  B4D8               	btfsc	status,2,c
  4971  000E5C  D008               	goto	l3011
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4975  000E5E  C030  FFD9         	movff	sprintf@sp,fsr2l
  4976  000E62  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4977  000E66  0E2D               	movlw	45
  4978  000E68  6EDF               	movwf	indf2,c
  4979                           
  4980                           ; BSR set to: 0
  4981  000E6A  4A30               	infsnz	sprintf@sp,f,c
  4982  000E6C  2A31               	incf	sprintf@sp+1,f,c
  4983  000E6E                     l3011:
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;doprnt.c: 1469: }
  4987                           ;doprnt.c: 1472: prec = c;
  4988  000E6E  C06C  F066         	movff	sprintf@c,sprintf@prec
  4989                           
  4990                           ;doprnt.c: 1474: while(prec--) {
  4991  000E72  D02B               	goto	l3019
  4992  000E74                     l3013:
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;doprnt.c: 1478: {
  4996                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4997  000E74  0100               	movlb	0	; () banked
  4998  000E76  5166               	movf	sprintf@prec& (0+255),w,b
  4999  000E78  0D02               	mullw	2
  5000  000E7A  0E01               	movlw	low _dpowers
  5001  000E7C  24F3               	addwf	prodl,w,c
  5002  000E7E  6EF6               	movwf	tblptrl,c
  5003  000E80  0E03               	movlw	high _dpowers
  5004  000E82  20F4               	addwfc	prodh,w,c
  5005  000E84  6EF7               	movwf	tblptrh,c
  5006  000E86                     	if	0	;There are less than 3 active tblptr bytes
  5007  000E86                     	endif
  5008  000E86  0009               	tblrd		*+
  5009  000E88  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5010  000E8C  000A               	tblrd		*-
  5011  000E8E  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5012  000E92  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5013  000E96  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5014  000E9A  EC66  F00B         	call	___lwdiv	;wreg free
  5015  000E9E  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5016  000EA2  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5017  000EA6  0E00               	movlw	0
  5018  000EA8  6E2E               	movwf	___lwmod@divisor+1,c
  5019  000EAA  0E0A               	movlw	10
  5020  000EAC  6E2D               	movwf	___lwmod@divisor,c
  5021  000EAE  EC8F  F00B         	call	___lwmod	;wreg free
  5022  000EB2  502B               	movf	?___lwmod,w,c
  5023  000EB4  0F30               	addlw	48
  5024  000EB6  0100               	movlb	0	; () banked
  5025  000EB8  6F6C               	movwf	sprintf@c& (0+255),b
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;doprnt.c: 1523: }
  5029                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5030  000EBA  C030  FFD9         	movff	sprintf@sp,fsr2l
  5031  000EBE  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5032  000EC2  C06C  FFDF         	movff	sprintf@c,indf2
  5033                           
  5034                           ; BSR set to: 0
  5035  000EC6  4A30               	infsnz	sprintf@sp,f,c
  5036  000EC8  2A31               	incf	sprintf@sp+1,f,c
  5037  000ECA                     l3019:
  5038                           
  5039                           ; BSR set to: 0
  5040  000ECA  0100               	movlb	0	; () banked
  5041  000ECC  0766               	decf	sprintf@prec& (0+255),f,b
  5042  000ECE  0100               	movlb	0	; () banked
  5043  000ED0  2966               	incf	sprintf@prec& (0+255),w,b
  5044  000ED2  A4D8               	btfss	status,2,c
  5045  000ED4  D7CF               	goto	l3013
  5046  000ED6                     l3021:
  5047  000ED6  C032  FFF6         	movff	sprintf@f,tblptrl
  5048  000EDA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5049  000EDE  4A32               	infsnz	sprintf@f,f,c
  5050  000EE0  2A33               	incf	sprintf@f+1,f,c
  5051  000EE2                     	if	0	;tblptru may be non-zero
  5052  000EE2                     	endif
  5053  000EE2                     	if	0	;tblptru may be non-zero
  5054  000EE2                     	endif
  5055  000EE2  0008               	tblrd		*
  5056  000EE4  CFF5 F06C          	movff	tablat,sprintf@c
  5057  000EE8  0100               	movlb	0	; () banked
  5058  000EEA  516C               	movf	sprintf@c& (0+255),w,b
  5059  000EEC  A4D8               	btfss	status,2,c
  5060  000EEE  D68B               	goto	l2915
  5061  000EF0                     l3023:
  5062                           
  5063                           ;doprnt.c: 1538: *sp = 0;
  5064  000EF0  C030  FFD9         	movff	sprintf@sp,fsr2l
  5065  000EF4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5066  000EF8  0E00               	movlw	0
  5067  000EFA  6EDF               	movwf	indf2,c
  5068  000EFC  0012               	return	
  5069  000EFE                     __end_of_sprintf:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           intcon	equ	0xFF2
  5078                           postinc0	equ	0xFEE
  5079                           wreg	equ	0xFE8
  5080                           indf1	equ	0xFE7
  5081                           fsr1h	equ	0xFE2
  5082                           fsr1l	equ	0xFE1
  5083                           indf2	equ	0xFDF
  5084                           postinc2	equ	0xFDE
  5085                           postdec2	equ	0xFDD
  5086                           fsr2h	equ	0xFDA
  5087                           fsr2l	equ	0xFD9
  5088                           status	equ	0xFD8
  5089                           
  5090 ;; *************** function _isdigit *****************
  5091 ;; Defined at:
  5092 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  c               1    wreg     unsigned char 
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;  c               1   37[COMRAM] unsigned char 
  5097 ;; Return value:  Size  Location     Type
  5098 ;;		None               void
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0
  5101 ;; Tracked objects:
  5102 ;;		On entry : 0/0
  5103 ;;		On exit  : 0/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5106 ;;      Params:         0       0       0       0
  5107 ;;      Locals:         2       0       0       0
  5108 ;;      Temps:          1       0       0       0
  5109 ;;      Totals:         3       0       0       0
  5110 ;;Total ram usage:        3 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:    3
  5113 ;; This function calls:
  5114 ;;		Nothing
  5115 ;; This function is called by:
  5116 ;;		_sprintf
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text20
  5121  0019EC                     __ptext20:
  5122                           	opt stack 0
  5123  0019EC                     _isdigit:
  5124                           	opt stack 26
  5125                           
  5126                           ;incstack = 0
  5127                           ;isdigit@c stored from wreg
  5128  0019EC  6E26               	movwf	isdigit@c,c
  5129  0019EE  0E00               	movlw	0
  5130  0019F0  6E25               	movwf	_isdigit$1964,c
  5131  0019F2  0E3A               	movlw	58
  5132  0019F4  6026               	cpfslt	isdigit@c,c
  5133  0019F6  D005               	goto	l2059
  5134  0019F8  0E2F               	movlw	47
  5135  0019FA  6426               	cpfsgt	isdigit@c,c
  5136  0019FC  D002               	goto	l2059
  5137  0019FE  0E01               	movlw	1
  5138  001A00  6E25               	movwf	_isdigit$1964,c
  5139  001A02                     l2059:
  5140  001A02  C025  F024         	movff	_isdigit$1964,??_isdigit
  5141  001A06  3024               	rrcf	??_isdigit,w,c
  5142  001A08  0012               	return	
  5143  001A0A                     __end_of_isdigit:
  5144                           	opt stack 0
  5145                           tblptru	equ	0xFF8
  5146                           tblptrh	equ	0xFF7
  5147                           tblptrl	equ	0xFF6
  5148                           tablat	equ	0xFF5
  5149                           prodh	equ	0xFF4
  5150                           prodl	equ	0xFF3
  5151                           intcon	equ	0xFF2
  5152                           postinc0	equ	0xFEE
  5153                           wreg	equ	0xFE8
  5154                           indf1	equ	0xFE7
  5155                           fsr1h	equ	0xFE2
  5156                           fsr1l	equ	0xFE1
  5157                           indf2	equ	0xFDF
  5158                           postinc2	equ	0xFDE
  5159                           postdec2	equ	0xFDD
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function ___wmul *****************
  5165 ;; Defined at:
  5166 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  multiplier      2   35[COMRAM] unsigned int 
  5169 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  product         2   39[COMRAM] unsigned int 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  2   35[COMRAM] unsigned int 
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0, prodl, prodh
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5181 ;;      Params:         4       0       0       0
  5182 ;;      Locals:         2       0       0       0
  5183 ;;      Temps:          0       0       0       0
  5184 ;;      Totals:         6       0       0       0
  5185 ;;Total ram usage:        6 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    3
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_setMotorPWM
  5192 ;;		_sprintf
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           	psect	text21
  5197  0019A4                     __ptext21:
  5198                           	opt stack 0
  5199  0019A4                     ___wmul:
  5200                           	opt stack 25
  5201                           
  5202                           ;incstack = 0
  5203  0019A4  5024               	movf	___wmul@multiplier,w,c
  5204  0019A6  0226               	mulwf	___wmul@multiplicand,c
  5205  0019A8  CFF3 F028          	movff	prodl,___wmul@product
  5206  0019AC  CFF4 F029          	movff	prodh,___wmul@product+1
  5207  0019B0  5024               	movf	___wmul@multiplier,w,c
  5208  0019B2  0227               	mulwf	___wmul@multiplicand+1,c
  5209  0019B4  50F3               	movf	prodl,w,c
  5210  0019B6  2629               	addwf	___wmul@product+1,f,c
  5211  0019B8  5025               	movf	___wmul@multiplier+1,w,c
  5212  0019BA  0226               	mulwf	___wmul@multiplicand,c
  5213  0019BC  50F3               	movf	prodl,w,c
  5214  0019BE  2629               	addwf	___wmul@product+1,f,c
  5215  0019C0  C028  F024         	movff	___wmul@product,?___wmul
  5216  0019C4  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5217  0019C8  0012               	return	
  5218  0019CA                     __end_of___wmul:
  5219                           	opt stack 0
  5220                           tblptru	equ	0xFF8
  5221                           tblptrh	equ	0xFF7
  5222                           tblptrl	equ	0xFF6
  5223                           tablat	equ	0xFF5
  5224                           prodh	equ	0xFF4
  5225                           prodl	equ	0xFF3
  5226                           intcon	equ	0xFF2
  5227                           postinc0	equ	0xFEE
  5228                           wreg	equ	0xFE8
  5229                           indf1	equ	0xFE7
  5230                           fsr1h	equ	0xFE2
  5231                           fsr1l	equ	0xFE1
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function ___lwmod *****************
  5240 ;; Defined at:
  5241 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  dividend        2   42[COMRAM] unsigned int 
  5244 ;;  divisor         2   44[COMRAM] unsigned int 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  counter         1   46[COMRAM] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  2   42[COMRAM] unsigned int 
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5256 ;;      Params:         4       0       0       0
  5257 ;;      Locals:         1       0       0       0
  5258 ;;      Temps:          0       0       0       0
  5259 ;;      Totals:         5       0       0       0
  5260 ;;Total ram usage:        5 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    3
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_sprintf
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text22
  5271  00171E                     __ptext22:
  5272                           	opt stack 0
  5273  00171E                     ___lwmod:
  5274                           	opt stack 26
  5275                           
  5276                           ;incstack = 0
  5277  00171E  502D               	movf	___lwmod@divisor,w,c
  5278  001720  102E               	iorwf	___lwmod@divisor+1,w,c
  5279  001722  B4D8               	btfsc	status,2,c
  5280  001724  D018               	goto	l882
  5281  001726  0E01               	movlw	1
  5282  001728  6E2F               	movwf	___lwmod@counter,c
  5283  00172A  D004               	goto	l2091
  5284  00172C                     l2089:
  5285  00172C  90D8               	bcf	status,0,c
  5286  00172E  362D               	rlcf	___lwmod@divisor,f,c
  5287  001730  362E               	rlcf	___lwmod@divisor+1,f,c
  5288  001732  2A2F               	incf	___lwmod@counter,f,c
  5289  001734                     l2091:
  5290  001734  AE2E               	btfss	___lwmod@divisor+1,7,c
  5291  001736  D7FA               	goto	l2089
  5292  001738                     l2093:
  5293  001738  502D               	movf	___lwmod@divisor,w,c
  5294  00173A  5C2B               	subwf	___lwmod@dividend,w,c
  5295  00173C  502E               	movf	___lwmod@divisor+1,w,c
  5296  00173E  582C               	subwfb	___lwmod@dividend+1,w,c
  5297  001740  A0D8               	btfss	status,0,c
  5298  001742  D004               	goto	l2097
  5299  001744  502D               	movf	___lwmod@divisor,w,c
  5300  001746  5E2B               	subwf	___lwmod@dividend,f,c
  5301  001748  502E               	movf	___lwmod@divisor+1,w,c
  5302  00174A  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5303  00174C                     l2097:
  5304  00174C  90D8               	bcf	status,0,c
  5305  00174E  322E               	rrcf	___lwmod@divisor+1,f,c
  5306  001750  322D               	rrcf	___lwmod@divisor,f,c
  5307  001752  2E2F               	decfsz	___lwmod@counter,f,c
  5308  001754  D7F1               	goto	l2093
  5309  001756                     l882:
  5310  001756  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5311  00175A  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5312  00175E  0012               	return		;funcret
  5313  001760                     __end_of___lwmod:
  5314                           	opt stack 0
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           intcon	equ	0xFF2
  5322                           postinc0	equ	0xFEE
  5323                           wreg	equ	0xFE8
  5324                           indf1	equ	0xFE7
  5325                           fsr1h	equ	0xFE2
  5326                           fsr1l	equ	0xFE1
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           fsr2h	equ	0xFDA
  5331                           fsr2l	equ	0xFD9
  5332                           status	equ	0xFD8
  5333                           
  5334 ;; *************** function ___lwdiv *****************
  5335 ;; Defined at:
  5336 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;  dividend        2   35[COMRAM] unsigned int 
  5339 ;;  divisor         2   37[COMRAM] unsigned int 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  quotient        2   39[COMRAM] unsigned int 
  5342 ;;  counter         1   41[COMRAM] unsigned char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  2   35[COMRAM] unsigned int 
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5352 ;;      Params:         4       0       0       0
  5353 ;;      Locals:         3       0       0       0
  5354 ;;      Temps:          0       0       0       0
  5355 ;;      Totals:         7       0       0       0
  5356 ;;Total ram usage:        7 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    3
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_sprintf
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text23
  5367  0016CC                     __ptext23:
  5368                           	opt stack 0
  5369  0016CC                     ___lwdiv:
  5370                           	opt stack 26
  5371                           
  5372                           ;incstack = 0
  5373  0016CC  0E00               	movlw	0
  5374  0016CE  6E29               	movwf	___lwdiv@quotient+1,c
  5375  0016D0  0E00               	movlw	0
  5376  0016D2  6E28               	movwf	___lwdiv@quotient,c
  5377  0016D4  5026               	movf	___lwdiv@divisor,w,c
  5378  0016D6  1027               	iorwf	___lwdiv@divisor+1,w,c
  5379  0016D8  B4D8               	btfsc	status,2,c
  5380  0016DA  D01C               	goto	l872
  5381  0016DC  0E01               	movlw	1
  5382  0016DE  6E2A               	movwf	___lwdiv@counter,c
  5383  0016E0  D004               	goto	l2071
  5384  0016E2                     l2069:
  5385  0016E2  90D8               	bcf	status,0,c
  5386  0016E4  3626               	rlcf	___lwdiv@divisor,f,c
  5387  0016E6  3627               	rlcf	___lwdiv@divisor+1,f,c
  5388  0016E8  2A2A               	incf	___lwdiv@counter,f,c
  5389  0016EA                     l2071:
  5390  0016EA  AE27               	btfss	___lwdiv@divisor+1,7,c
  5391  0016EC  D7FA               	goto	l2069
  5392  0016EE                     l2073:
  5393  0016EE  90D8               	bcf	status,0,c
  5394  0016F0  3628               	rlcf	___lwdiv@quotient,f,c
  5395  0016F2  3629               	rlcf	___lwdiv@quotient+1,f,c
  5396  0016F4  5026               	movf	___lwdiv@divisor,w,c
  5397  0016F6  5C24               	subwf	___lwdiv@dividend,w,c
  5398  0016F8  5027               	movf	___lwdiv@divisor+1,w,c
  5399  0016FA  5825               	subwfb	___lwdiv@dividend+1,w,c
  5400  0016FC  A0D8               	btfss	status,0,c
  5401  0016FE  D005               	goto	l2081
  5402  001700  5026               	movf	___lwdiv@divisor,w,c
  5403  001702  5E24               	subwf	___lwdiv@dividend,f,c
  5404  001704  5027               	movf	___lwdiv@divisor+1,w,c
  5405  001706  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5406  001708  8028               	bsf	___lwdiv@quotient,0,c
  5407  00170A                     l2081:
  5408  00170A  90D8               	bcf	status,0,c
  5409  00170C  3227               	rrcf	___lwdiv@divisor+1,f,c
  5410  00170E  3226               	rrcf	___lwdiv@divisor,f,c
  5411  001710  2E2A               	decfsz	___lwdiv@counter,f,c
  5412  001712  D7ED               	goto	l2073
  5413  001714                     l872:
  5414  001714  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5415  001718  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5416  00171C  0012               	return		;funcret
  5417  00171E                     __end_of___lwdiv:
  5418                           	opt stack 0
  5419                           tblptru	equ	0xFF8
  5420                           tblptrh	equ	0xFF7
  5421                           tblptrl	equ	0xFF6
  5422                           tablat	equ	0xFF5
  5423                           prodh	equ	0xFF4
  5424                           prodl	equ	0xFF3
  5425                           intcon	equ	0xFF2
  5426                           postinc0	equ	0xFEE
  5427                           wreg	equ	0xFE8
  5428                           indf1	equ	0xFE7
  5429                           fsr1h	equ	0xFE2
  5430                           fsr1l	equ	0xFE1
  5431                           indf2	equ	0xFDF
  5432                           postinc2	equ	0xFDE
  5433                           postdec2	equ	0xFDD
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438 ;; *************** function _grabRightIR *****************
  5439 ;; Defined at:
  5440 ;;		line 74 in file "IR_Reading.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;		None
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5445 ;;  i               1   42[COMRAM] unsigned char 
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  2   35[COMRAM] unsigned int 
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5455 ;;      Params:         2       0       0       0
  5456 ;;      Locals:         3       0       0       0
  5457 ;;      Temps:          3       0       0       0
  5458 ;;      Totals:         8       0       0       0
  5459 ;;Total ram usage:        8 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; Hardware stack levels required when called:    3
  5462 ;; This function calls:
  5463 ;;		Nothing
  5464 ;; This function is called by:
  5465 ;;		_ScanIR
  5466 ;;		_ScanWithRange
  5467 ;;		_main
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text24
  5472  00158A                     __ptext24:
  5473                           	opt stack 0
  5474  00158A                     _grabRightIR:
  5475                           	opt stack 27
  5476                           
  5477                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5478                           
  5479                           ;incstack = 0
  5480  00158A  0E00               	movlw	0
  5481  00158C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5482  00158E  0E00               	movlw	0
  5483  001590  6E29               	movwf	grabRightIR@IR_signal,c
  5484                           
  5485                           ;IR_Reading.c: 77: unsigned char i=0;
  5486  001592  0E00               	movlw	0
  5487  001594  6E2B               	movwf	grabRightIR@i,c
  5488                           
  5489                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5490  001596  0E00               	movlw	0
  5491  001598  6E2B               	movwf	grabRightIR@i,c
  5492  00159A                     l2133:
  5493  00159A  0E03               	movlw	3
  5494  00159C  642B               	cpfsgt	grabRightIR@i,c
  5495  00159E  D001               	goto	l2137
  5496  0015A0  D01E               	goto	l2143
  5497  0015A2                     l2137:
  5498                           
  5499                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5500  0015A2  5069               	movf	3945,w,c	;volatile
  5501  0015A4  6E26               	movwf	??_grabRightIR& (0+255),c
  5502  0015A6  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5503  0015A8  0E07               	movlw	7
  5504  0015AA                     u1455:
  5505  0015AA  90D8               	bcf	status,0,c
  5506  0015AC  3626               	rlcf	??_grabRightIR,f,c
  5507  0015AE  3627               	rlcf	??_grabRightIR+1,f,c
  5508  0015B0  2EE8               	decfsz	wreg,f,c
  5509  0015B2  D7FB               	goto	u1455
  5510  0015B4  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5511  0015B8  90D8               	bcf	status,0,c
  5512  0015BA  3228               	rrcf	??_grabRightIR+2,f,c
  5513  0015BC  5028               	movf	??_grabRightIR+2,w,c
  5514  0015BE  1226               	iorwf	??_grabRightIR,f,c
  5515  0015C0  0E00               	movlw	0
  5516  0015C2  1227               	iorwf	??_grabRightIR+1,f,c
  5517  0015C4  5026               	movf	??_grabRightIR,w,c
  5518  0015C6  2629               	addwf	grabRightIR@IR_signal,f,c
  5519  0015C8  5027               	movf	??_grabRightIR+1,w,c
  5520  0015CA  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5521                           
  5522                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5523  0015CC  0E82               	movlw	130
  5524  0015CE  6E26               	movwf	??_grabRightIR& (0+255),c
  5525  0015D0  0EDE               	movlw	222
  5526  0015D2                     u3017:
  5527  0015D2  2EE8               	decfsz	wreg,f,c
  5528  0015D4  D7FE               	goto	u3017
  5529  0015D6  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5530  0015D8  D7FC               	goto	u3017
  5531  0015DA  2A2B               	incf	grabRightIR@i,f,c
  5532  0015DC  D7DE               	goto	l2133
  5533  0015DE                     l2143:
  5534                           
  5535                           ;IR_Reading.c: 83: }
  5536                           ;IR_Reading.c: 85: return IR_signal>>2;
  5537  0015DE  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5538  0015E2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5539  0015E6  90D8               	bcf	status,0,c
  5540  0015E8  3227               	rrcf	??_grabRightIR+1,f,c
  5541  0015EA  3226               	rrcf	??_grabRightIR,f,c
  5542  0015EC  90D8               	bcf	status,0,c
  5543  0015EE  3227               	rrcf	??_grabRightIR+1,f,c
  5544  0015F0  3226               	rrcf	??_grabRightIR,f,c
  5545  0015F2  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5546  0015F6  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5547  0015FA  0012               	return	
  5548  0015FC                     __end_of_grabRightIR:
  5549                           	opt stack 0
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           prodh	equ	0xFF4
  5555                           prodl	equ	0xFF3
  5556                           intcon	equ	0xFF2
  5557                           postinc0	equ	0xFEE
  5558                           wreg	equ	0xFE8
  5559                           indf1	equ	0xFE7
  5560                           fsr1h	equ	0xFE2
  5561                           fsr1l	equ	0xFE1
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           fsr2h	equ	0xFDA
  5566                           fsr2l	equ	0xFD9
  5567                           status	equ	0xFD8
  5568                           
  5569 ;; *************** function _grabLeftIR *****************
  5570 ;; Defined at:
  5571 ;;		line 90 in file "IR_Reading.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5576 ;;  i               1   42[COMRAM] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  2   35[COMRAM] unsigned int 
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5586 ;;      Params:         2       0       0       0
  5587 ;;      Locals:         3       0       0       0
  5588 ;;      Temps:          3       0       0       0
  5589 ;;      Totals:         8       0       0       0
  5590 ;;Total ram usage:        8 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    3
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_ScanIR
  5597 ;;		_ScanWithRange
  5598 ;;		_main
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text25
  5603  0015FC                     __ptext25:
  5604                           	opt stack 0
  5605  0015FC                     _grabLeftIR:
  5606                           	opt stack 27
  5607                           
  5608                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5609                           
  5610                           ;incstack = 0
  5611  0015FC  0E00               	movlw	0
  5612  0015FE  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5613  001600  0E00               	movlw	0
  5614  001602  6E29               	movwf	grabLeftIR@IR_signal,c
  5615                           
  5616                           ;IR_Reading.c: 93: unsigned char i=0;
  5617  001604  0E00               	movlw	0
  5618  001606  6E2B               	movwf	grabLeftIR@i,c
  5619                           
  5620                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5621  001608  0E00               	movlw	0
  5622  00160A  6E2B               	movwf	grabLeftIR@i,c
  5623  00160C                     l2149:
  5624  00160C  0E03               	movlw	3
  5625  00160E  642B               	cpfsgt	grabLeftIR@i,c
  5626  001610  D001               	goto	l2153
  5627  001612  D01E               	goto	l2159
  5628  001614                     l2153:
  5629                           
  5630                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5631  001614  5067               	movf	3943,w,c	;volatile
  5632  001616  6E26               	movwf	??_grabLeftIR& (0+255),c
  5633  001618  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5634  00161A  0E07               	movlw	7
  5635  00161C                     u1485:
  5636  00161C  90D8               	bcf	status,0,c
  5637  00161E  3626               	rlcf	??_grabLeftIR,f,c
  5638  001620  3627               	rlcf	??_grabLeftIR+1,f,c
  5639  001622  2EE8               	decfsz	wreg,f,c
  5640  001624  D7FB               	goto	u1485
  5641  001626  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5642  00162A  90D8               	bcf	status,0,c
  5643  00162C  3228               	rrcf	??_grabLeftIR+2,f,c
  5644  00162E  5028               	movf	??_grabLeftIR+2,w,c
  5645  001630  1226               	iorwf	??_grabLeftIR,f,c
  5646  001632  0E00               	movlw	0
  5647  001634  1227               	iorwf	??_grabLeftIR+1,f,c
  5648  001636  5026               	movf	??_grabLeftIR,w,c
  5649  001638  2629               	addwf	grabLeftIR@IR_signal,f,c
  5650  00163A  5027               	movf	??_grabLeftIR+1,w,c
  5651  00163C  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5652                           
  5653                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5654  00163E  0E82               	movlw	130
  5655  001640  6E26               	movwf	??_grabLeftIR& (0+255),c
  5656  001642  0EDE               	movlw	222
  5657  001644                     u3027:
  5658  001644  2EE8               	decfsz	wreg,f,c
  5659  001646  D7FE               	goto	u3027
  5660  001648  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5661  00164A  D7FC               	goto	u3027
  5662  00164C  2A2B               	incf	grabLeftIR@i,f,c
  5663  00164E  D7DE               	goto	l2149
  5664  001650                     l2159:
  5665                           
  5666                           ;IR_Reading.c: 99: }
  5667                           ;IR_Reading.c: 101: return IR_signal>>2;
  5668  001650  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5669  001654  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5670  001658  90D8               	bcf	status,0,c
  5671  00165A  3227               	rrcf	??_grabLeftIR+1,f,c
  5672  00165C  3226               	rrcf	??_grabLeftIR,f,c
  5673  00165E  90D8               	bcf	status,0,c
  5674  001660  3227               	rrcf	??_grabLeftIR+1,f,c
  5675  001662  3226               	rrcf	??_grabLeftIR,f,c
  5676  001664  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5677  001668  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5678  00166C  0012               	return	
  5679  00166E                     __end_of_grabLeftIR:
  5680                           	opt stack 0
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           prodh	equ	0xFF4
  5686                           prodl	equ	0xFF3
  5687                           intcon	equ	0xFF2
  5688                           postinc0	equ	0xFEE
  5689                           wreg	equ	0xFE8
  5690                           indf1	equ	0xFE7
  5691                           fsr1h	equ	0xFE2
  5692                           fsr1l	equ	0xFE1
  5693                           indf2	equ	0xFDF
  5694                           postinc2	equ	0xFDE
  5695                           postdec2	equ	0xFDD
  5696                           fsr2h	equ	0xFDA
  5697                           fsr2l	equ	0xFD9
  5698                           status	equ	0xFD8
  5699                           
  5700 ;; *************** function _SetLine *****************
  5701 ;; Defined at:
  5702 ;;		line 74 in file "LCD.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  line            1    wreg     unsigned char 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  line            1   41[COMRAM] unsigned char 
  5707 ;; Return value:  Size  Location     Type
  5708 ;;		None               void
  5709 ;; Registers used:
  5710 ;;		wreg, status,2, status,0, cstack
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5716 ;;      Params:         0       0       0       0
  5717 ;;      Locals:         1       0       0       0
  5718 ;;      Temps:          0       0       0       0
  5719 ;;      Totals:         1       0       0       0
  5720 ;;Total ram usage:        1 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    6
  5723 ;; This function calls:
  5724 ;;		_SendLCD
  5725 ;; This function is called by:
  5726 ;;		_ScanIR
  5727 ;;		_ScanWithRange
  5728 ;;		_main
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text26
  5733  0018F4                     __ptext26:
  5734                           	opt stack 0
  5735  0018F4                     _SetLine:
  5736                           	opt stack 24
  5737                           
  5738                           ;incstack = 0
  5739                           ;SetLine@line stored from wreg
  5740  0018F4  6E2A               	movwf	SetLine@line,c
  5741                           
  5742                           ;LCD.c: 75: if (line==1) {
  5743  0018F6  042A               	decf	SetLine@line,w,c
  5744  0018F8  A4D8               	btfss	status,2,c
  5745  0018FA  D006               	goto	l2167
  5746                           
  5747                           ;LCD.c: 76: SendLCD(0x80,0);
  5748  0018FC  0E00               	movlw	0
  5749  0018FE  6E28               	movwf	SendLCD@type,c
  5750  001900  0E80               	movlw	128
  5751  001902  EC92  F00C         	call	_SendLCD
  5752                           
  5753                           ;LCD.c: 77: } else if (line==2) {
  5754  001906  D009               	goto	l2171
  5755  001908                     l2167:
  5756  001908  0E02               	movlw	2
  5757  00190A  182A               	xorwf	SetLine@line,w,c
  5758  00190C  A4D8               	btfss	status,2,c
  5759  00190E  D005               	goto	l2171
  5760                           
  5761                           ;LCD.c: 78: SendLCD(0xC0,0);
  5762  001910  0E00               	movlw	0
  5763  001912  6E28               	movwf	SendLCD@type,c
  5764  001914  0EC0               	movlw	192
  5765  001916  EC92  F00C         	call	_SendLCD
  5766  00191A                     l2171:
  5767                           
  5768                           ;LCD.c: 79: }
  5769                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5770  00191A  0E21               	movlw	33
  5771  00191C                     u3037:
  5772  00191C  2EE8               	decfsz	wreg,f,c
  5773  00191E  D7FE               	goto	u3037
  5774  001920  F000               	nop	
  5775  001922  0012               	return		;funcret
  5776  001924                     __end_of_SetLine:
  5777                           	opt stack 0
  5778                           tblptru	equ	0xFF8
  5779                           tblptrh	equ	0xFF7
  5780                           tblptrl	equ	0xFF6
  5781                           tablat	equ	0xFF5
  5782                           prodh	equ	0xFF4
  5783                           prodl	equ	0xFF3
  5784                           intcon	equ	0xFF2
  5785                           postinc0	equ	0xFEE
  5786                           wreg	equ	0xFE8
  5787                           indf1	equ	0xFE7
  5788                           fsr1h	equ	0xFE2
  5789                           fsr1l	equ	0xFE1
  5790                           indf2	equ	0xFDF
  5791                           postinc2	equ	0xFDE
  5792                           postdec2	equ	0xFDD
  5793                           fsr2h	equ	0xFDA
  5794                           fsr2l	equ	0xFD9
  5795                           status	equ	0xFD8
  5796                           
  5797 ;; *************** function _LCD_String *****************
  5798 ;; Defined at:
  5799 ;;		line 83 in file "LCD.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  string          2   41[COMRAM] PTR unsigned char 
  5802 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5803 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5804 ;;		 -> STR_1(12), 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;		None               void
  5809 ;; Registers used:
  5810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : 0/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5816 ;;      Params:         2       0       0       0
  5817 ;;      Locals:         0       0       0       0
  5818 ;;      Temps:          0       0       0       0
  5819 ;;      Totals:         2       0       0       0
  5820 ;;Total ram usage:        2 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    6
  5823 ;; This function calls:
  5824 ;;		_SendLCD
  5825 ;; This function is called by:
  5826 ;;		_ScanIR
  5827 ;;		_ScanWithRange
  5828 ;;		_main
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           	psect	text27
  5833  00166E                     __ptext27:
  5834                           	opt stack 0
  5835  00166E                     _LCD_String:
  5836                           	opt stack 23
  5837                           
  5838                           ;LCD.c: 85: while(*string != 0){
  5839                           
  5840                           ;incstack = 0
  5841  00166E  D01A               	goto	l2181
  5842  001670                     l2175:
  5843                           
  5844                           ;LCD.c: 88: SendLCD(*string++,1);
  5845  001670  0E01               	movlw	1
  5846  001672  6E28               	movwf	SendLCD@type,c
  5847  001674  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5848  001678  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5849  00167C  6AF8               	clrf	tblptru,c
  5850  00167E  0E02               	movlw	(high __ramtop+-1)
  5851  001680  64F7               	cpfsgt	tblptrh,c
  5852  001682  D003               	bra	u1527
  5853  001684  0008               	tblrd		*
  5854  001686  50F5               	movf	tablat,w,c
  5855  001688  D005               	bra	u1520
  5856  00168A                     u1527:
  5857  00168A  CFF6 FFE1          	movff	tblptrl,fsr1l
  5858  00168E  CFF7 FFE2          	movff	tblptrh,fsr1h
  5859  001692  50E7               	movf	indf1,w,c
  5860  001694                     u1520:
  5861  001694  EC92  F00C         	call	_SendLCD
  5862  001698  4A2A               	infsnz	LCD_String@string,f,c
  5863  00169A  2A2B               	incf	LCD_String@string+1,f,c
  5864                           
  5865                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5866  00169C  0E21               	movlw	33
  5867  00169E                     u3047:
  5868  00169E  2EE8               	decfsz	wreg,f,c
  5869  0016A0  D7FE               	goto	u3047
  5870  0016A2  F000               	nop	
  5871  0016A4                     l2181:
  5872  0016A4  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5873  0016A8  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5874  0016AC  6AF8               	clrf	tblptru,c
  5875  0016AE  0E02               	movlw	(high __ramtop+-1)
  5876  0016B0  64F7               	cpfsgt	tblptrh,c
  5877  0016B2  D003               	bra	u1537
  5878  0016B4  0008               	tblrd		*
  5879  0016B6  50F5               	movf	tablat,w,c
  5880  0016B8  D005               	bra	u1530
  5881  0016BA                     u1537:
  5882  0016BA  CFF6 FFE1          	movff	tblptrl,fsr1l
  5883  0016BE  CFF7 FFE2          	movff	tblptrh,fsr1h
  5884  0016C2  50E7               	movf	indf1,w,c
  5885  0016C4                     u1530:
  5886  0016C4  0900               	iorlw	0
  5887  0016C6  B4D8               	btfsc	status,2,c
  5888  0016C8  0012               	return	
  5889  0016CA  D7D2               	goto	l2175
  5890  0016CC                     __end_of_LCD_String:
  5891                           	opt stack 0
  5892                           tblptru	equ	0xFF8
  5893                           tblptrh	equ	0xFF7
  5894                           tblptrl	equ	0xFF6
  5895                           tablat	equ	0xFF5
  5896                           prodh	equ	0xFF4
  5897                           prodl	equ	0xFF3
  5898                           intcon	equ	0xFF2
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           indf1	equ	0xFE7
  5902                           fsr1h	equ	0xFE2
  5903                           fsr1l	equ	0xFE1
  5904                           indf2	equ	0xFDF
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           fsr2h	equ	0xFDA
  5908                           fsr2l	equ	0xFD9
  5909                           status	equ	0xFD8
  5910                           
  5911 ;; *************** function _SendLCD *****************
  5912 ;; Defined at:
  5913 ;;		line 27 in file "LCD.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  Byte            1    wreg     unsigned char 
  5916 ;;  type            1   39[COMRAM] unsigned char 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  Byte            1   40[COMRAM] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;		None               void
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5928 ;;      Params:         1       0       0       0
  5929 ;;      Locals:         1       0       0       0
  5930 ;;      Temps:          0       0       0       0
  5931 ;;      Totals:         2       0       0       0
  5932 ;;Total ram usage:        2 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    5
  5935 ;; This function calls:
  5936 ;;		_LCDout
  5937 ;; This function is called by:
  5938 ;;		_initLCD
  5939 ;;		_SetLine
  5940 ;;		_LCD_String
  5941 ;;		_ScanIR
  5942 ;;		_ScanWithRange
  5943 ;;		_main
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           	psect	text28
  5948  001924                     __ptext28:
  5949                           	opt stack 0
  5950  001924                     _SendLCD:
  5951                           	opt stack 24
  5952                           
  5953                           ;incstack = 0
  5954                           ;SendLCD@Byte stored from wreg
  5955  001924  6E29               	movwf	SendLCD@Byte,c
  5956                           
  5957                           ;LCD.c: 30: LATAbits.LATA6=type;
  5958  001926  B028               	btfsc	SendLCD@type,0,c
  5959  001928  D002               	bra	u1315
  5960  00192A  9C89               	bcf	3977,6,c	;volatile
  5961  00192C  D001               	bra	u1316
  5962  00192E                     u1315:
  5963  00192E  8C89               	bsf	3977,6,c	;volatile
  5964  001930                     u1316:
  5965                           
  5966                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5967  001930  3829               	swapf	SendLCD@Byte,w,c
  5968  001932  0B0F               	andlw	15
  5969  001934  0B0F               	andlw	15
  5970  001936  EC99  F008         	call	_LCDout
  5971                           
  5972                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5973  00193A  0E06               	movlw	6
  5974  00193C                     u3057:
  5975  00193C  2EE8               	decfsz	wreg,f,c
  5976  00193E  D7FE               	goto	u3057
  5977  001940  D000               	nop2		;nop
  5978                           
  5979                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5980  001942  5029               	movf	SendLCD@Byte,w,c
  5981  001944  0B0F               	andlw	15
  5982  001946  EC99  F008         	call	_LCDout
  5983                           
  5984                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5985  00194A  0E21               	movlw	33
  5986  00194C                     u3067:
  5987  00194C  2EE8               	decfsz	wreg,f,c
  5988  00194E  D7FE               	goto	u3067
  5989  001950  F000               	nop	
  5990  001952  0012               	return		;funcret
  5991  001954                     __end_of_SendLCD:
  5992                           	opt stack 0
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           intcon	equ	0xFF2
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           indf1	equ	0xFE7
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _LCDout *****************
  6013 ;; Defined at:
  6014 ;;		line 14 in file "LCD.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  number          1    wreg     unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  number          1   38[COMRAM] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, status,0, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6028 ;;      Params:         0       0       0       0
  6029 ;;      Locals:         1       0       0       0
  6030 ;;      Temps:          3       0       0       0
  6031 ;;      Totals:         4       0       0       0
  6032 ;;Total ram usage:        4 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    4
  6035 ;; This function calls:
  6036 ;;		_E_TOG
  6037 ;; This function is called by:
  6038 ;;		_SendLCD
  6039 ;;		_initLCD
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           	psect	text29
  6044  001132                     __ptext29:
  6045                           	opt stack 0
  6046  001132                     _LCDout:
  6047                           	opt stack 24
  6048                           
  6049                           ;incstack = 0
  6050                           ;LCDout@number stored from wreg
  6051  001132  6E27               	movwf	LCDout@number,c
  6052                           
  6053                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6054  001134  5027               	movf	LCDout@number,w,c
  6055  001136  6E24               	movwf	??_LCDout& (0+255),c
  6056  001138  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6057  00113A  0E07               	movlw	7
  6058  00113C                     u1205:
  6059  00113C  90D8               	bcf	status,0,c
  6060  00113E  3624               	rlcf	??_LCDout,f,c
  6061  001140  3625               	rlcf	??_LCDout+1,f,c
  6062  001142  2EE8               	decfsz	wreg,f,c
  6063  001144  D7FB               	goto	u1205
  6064  001146  0E07               	movlw	7
  6065  001148  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6066  00114A                     u1215:
  6067  00114A  3425               	rlcf	??_LCDout+1,w,c
  6068  00114C  3225               	rrcf	??_LCDout+1,f,c
  6069  00114E  3224               	rrcf	??_LCDout,f,c
  6070  001150  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6071  001152  D7FB               	goto	u1215
  6072  001154  4624               	rlncf	??_LCDout,f,c
  6073  001156  508B               	movf	3979,w,c	;volatile
  6074  001158  1824               	xorwf	??_LCDout,w,c
  6075  00115A  0BFD               	andlw	-3
  6076  00115C  1824               	xorwf	??_LCDout,w,c
  6077  00115E  6E8B               	movwf	3979,c	;volatile
  6078                           
  6079                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6080  001160  5027               	movf	LCDout@number,w,c
  6081  001162  6E24               	movwf	??_LCDout& (0+255),c
  6082  001164  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6083  001166  0E06               	movlw	6
  6084  001168                     u1225:
  6085  001168  90D8               	bcf	status,0,c
  6086  00116A  3624               	rlcf	??_LCDout,f,c
  6087  00116C  3625               	rlcf	??_LCDout+1,f,c
  6088  00116E  2EE8               	decfsz	wreg,f,c
  6089  001170  D7FB               	goto	u1225
  6090  001172  0E07               	movlw	7
  6091  001174  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6092  001176                     u1235:
  6093  001176  3425               	rlcf	??_LCDout+1,w,c
  6094  001178  3225               	rrcf	??_LCDout+1,f,c
  6095  00117A  3224               	rrcf	??_LCDout,f,c
  6096  00117C  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6097  00117E  D7FB               	goto	u1235
  6098  001180  4624               	rlncf	??_LCDout,f,c
  6099  001182  4624               	rlncf	??_LCDout,f,c
  6100  001184  508B               	movf	3979,w,c	;volatile
  6101  001186  1824               	xorwf	??_LCDout,w,c
  6102  001188  0BFB               	andlw	-5
  6103  00118A  1824               	xorwf	??_LCDout,w,c
  6104  00118C  6E8B               	movwf	3979,c	;volatile
  6105                           
  6106                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6107  00118E  5027               	movf	LCDout@number,w,c
  6108  001190  6E24               	movwf	??_LCDout& (0+255),c
  6109  001192  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6110  001194  0E05               	movlw	5
  6111  001196                     u1245:
  6112  001196  90D8               	bcf	status,0,c
  6113  001198  3624               	rlcf	??_LCDout,f,c
  6114  00119A  3625               	rlcf	??_LCDout+1,f,c
  6115  00119C  2EE8               	decfsz	wreg,f,c
  6116  00119E  D7FB               	goto	u1245
  6117  0011A0  0E07               	movlw	7
  6118  0011A2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6119  0011A4                     u1255:
  6120  0011A4  3425               	rlcf	??_LCDout+1,w,c
  6121  0011A6  3225               	rrcf	??_LCDout+1,f,c
  6122  0011A8  3224               	rrcf	??_LCDout,f,c
  6123  0011AA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6124  0011AC  D7FB               	goto	u1255
  6125  0011AE  508C               	movf	3980,w,c	;volatile
  6126  0011B0  1824               	xorwf	??_LCDout,w,c
  6127  0011B2  0BFE               	andlw	-2
  6128  0011B4  1824               	xorwf	??_LCDout,w,c
  6129  0011B6  6E8C               	movwf	3980,c	;volatile
  6130                           
  6131                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6132  0011B8  5027               	movf	LCDout@number,w,c
  6133  0011BA  6E24               	movwf	??_LCDout& (0+255),c
  6134  0011BC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6135  0011BE  3A24               	swapf	??_LCDout,f,c
  6136  0011C0  3A25               	swapf	??_LCDout+1,f,c
  6137  0011C2  0EF0               	movlw	240
  6138  0011C4  1625               	andwf	??_LCDout+1,f,c
  6139  0011C6  5024               	movf	??_LCDout,w,c
  6140  0011C8  0B0F               	andlw	15
  6141  0011CA  1225               	iorwf	??_LCDout+1,f,c
  6142  0011CC  0EF0               	movlw	240
  6143  0011CE  1624               	andwf	??_LCDout,f,c
  6144  0011D0  0E07               	movlw	7
  6145  0011D2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6146  0011D4                     u1265:
  6147  0011D4  3425               	rlcf	??_LCDout+1,w,c
  6148  0011D6  3225               	rrcf	??_LCDout+1,f,c
  6149  0011D8  3224               	rrcf	??_LCDout,f,c
  6150  0011DA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6151  0011DC  D7FB               	goto	u1265
  6152  0011DE  4624               	rlncf	??_LCDout,f,c
  6153  0011E0  508C               	movf	3980,w,c	;volatile
  6154  0011E2  1824               	xorwf	??_LCDout,w,c
  6155  0011E4  0BFD               	andlw	-3
  6156  0011E6  1824               	xorwf	??_LCDout,w,c
  6157  0011E8  6E8C               	movwf	3980,c	;volatile
  6158                           
  6159                           ;LCD.c: 21: E_TOG();
  6160  0011EA  EC1C  F00D         	call	_E_TOG	;wreg free
  6161                           
  6162                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6163  0011EE  0E03               	movlw	3
  6164  0011F0                     u3077:
  6165  0011F0  2EE8               	decfsz	wreg,f,c
  6166  0011F2  D7FE               	goto	u3077
  6167  0011F4  F000               	nop	
  6168  0011F6  0012               	return		;funcret
  6169  0011F8                     __end_of_LCDout:
  6170                           	opt stack 0
  6171                           tblptru	equ	0xFF8
  6172                           tblptrh	equ	0xFF7
  6173                           tblptrl	equ	0xFF6
  6174                           tablat	equ	0xFF5
  6175                           prodh	equ	0xFF4
  6176                           prodl	equ	0xFF3
  6177                           intcon	equ	0xFF2
  6178                           postinc0	equ	0xFEE
  6179                           wreg	equ	0xFE8
  6180                           indf1	equ	0xFE7
  6181                           fsr1h	equ	0xFE2
  6182                           fsr1l	equ	0xFE1
  6183                           indf2	equ	0xFDF
  6184                           postinc2	equ	0xFDE
  6185                           postdec2	equ	0xFDD
  6186                           fsr2h	equ	0xFDA
  6187                           fsr2l	equ	0xFD9
  6188                           status	equ	0xFD8
  6189                           
  6190 ;; *************** function _E_TOG *****************
  6191 ;; Defined at:
  6192 ;;		line 5 in file "LCD.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;		None
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;		None
  6197 ;; Return value:  Size  Location     Type
  6198 ;;		None               void
  6199 ;; Registers used:
  6200 ;;		wreg
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6206 ;;      Params:         0       0       0       0
  6207 ;;      Locals:         0       0       0       0
  6208 ;;      Temps:          0       0       0       0
  6209 ;;      Totals:         0       0       0       0
  6210 ;;Total ram usage:        0 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; Hardware stack levels required when called:    3
  6213 ;; This function calls:
  6214 ;;		Nothing
  6215 ;; This function is called by:
  6216 ;;		_LCDout
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           	psect	text30
  6221  001A38                     __ptext30:
  6222                           	opt stack 0
  6223  001A38                     _E_TOG:
  6224                           	opt stack 24
  6225                           
  6226                           ;LCD.c: 8: LATCbits.LATC0=1;
  6227                           
  6228                           ;incstack = 0
  6229  001A38  808B               	bsf	3979,0,c	;volatile
  6230                           
  6231                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6232  001A3A  0E03               	movlw	3
  6233  001A3C                     u3087:
  6234  001A3C  2EE8               	decfsz	wreg,f,c
  6235  001A3E  D7FE               	goto	u3087
  6236  001A40  F000               	nop	
  6237                           
  6238                           ;LCD.c: 10: LATCbits.LATC0=0;
  6239  001A42  908B               	bcf	3979,0,c	;volatile
  6240  001A44  0012               	return		;funcret
  6241  001A46                     __end_of_E_TOG:
  6242                           	opt stack 0
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           prodh	equ	0xFF4
  6248                           prodl	equ	0xFF3
  6249                           intcon	equ	0xFF2
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           indf1	equ	0xFE7
  6253                           fsr1h	equ	0xFE2
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _InterruptHandlerLow *****************
  6263 ;; Defined at:
  6264 ;;		line 18 in file "main.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;		None               void
  6271 ;; Registers used:
  6272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6278 ;;      Params:         0       0       0       0
  6279 ;;      Locals:         0       0       0       0
  6280 ;;      Temps:         17       0       0       0
  6281 ;;      Totals:        17       0       0       0
  6282 ;;Total ram usage:       17 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    2
  6285 ;; This function calls:
  6286 ;;		Nothing
  6287 ;; This function is called by:
  6288 ;;		Interrupt level 1
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           	psect	intcodelo
  6293  000018                     __pintcodelo:
  6294                           	opt stack 0
  6295  000018                     _InterruptHandlerLow:
  6296                           	opt stack 23
  6297                           
  6298                           ;incstack = 0
  6299  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6300  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6301  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6302  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6303  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6304  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6305  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6306  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6307  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6308  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6309  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6310  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6311  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6312  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6313  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6314  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6315  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6316  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6317                           
  6318                           ;main.c: 20: if (PIR1bits.RCIF) {
  6319  00005E  AA9E               	btfss	3998,5,c	;volatile
  6320  000060  D016               	goto	i1l369
  6321                           
  6322                           ;main.c: 21: ReceivedString[i]=RCREG;
  6323  000062  503A               	movf	_i,w,c	;volatile
  6324  000064  0D01               	mullw	1
  6325  000066  0EC6               	movlw	low _ReceivedString
  6326  000068  24F3               	addwf	prodl,w,c
  6327  00006A  6ED9               	movwf	fsr2l,c
  6328  00006C  0E00               	movlw	high _ReceivedString
  6329  00006E  20F4               	addwfc	prodh,w,c
  6330  000070  6EDA               	movwf	fsr2h,c
  6331  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6332                           
  6333                           ;main.c: 22: RFID_Read=1;
  6334  000076  0E01               	movlw	1
  6335  000078  0101               	movlb	1	; () banked
  6336  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6337                           
  6338                           ; BSR set to: 1
  6339                           ;main.c: 23: if (i==15){
  6340  00007C  0E0F               	movlw	15
  6341  00007E  183A               	xorwf	_i,w,c	;volatile
  6342  000080  A4D8               	btfss	status,2,c
  6343  000082  D003               	goto	i1l2593
  6344                           
  6345                           ; BSR set to: 1
  6346                           ;main.c: 24: i=0;
  6347  000084  0E00               	movlw	0
  6348  000086  6E3A               	movwf	_i,c	;volatile
  6349                           
  6350                           ;main.c: 25: }else{
  6351  000088  D001               	goto	i1l2595
  6352  00008A                     i1l2593:
  6353                           
  6354                           ; BSR set to: 1
  6355                           ;main.c: 26: i++;
  6356  00008A  2A3A               	incf	_i,f,c	;volatile
  6357  00008C                     i1l2595:
  6358                           
  6359                           ; BSR set to: 1
  6360                           ;main.c: 27: }
  6361                           ;main.c: 28: PIR1bits.RCIF=0;
  6362  00008C  9A9E               	bcf	3998,5,c	;volatile
  6363  00008E                     i1l369:
  6364  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6365  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6366  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6367  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6368  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6369  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6370  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6371  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6372  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6373  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6374  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6375  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6376  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6377  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6378  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6379  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6380  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6381  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6382  0000D4  0010               	retfie	
  6383  0000D6                     __end_of_InterruptHandlerLow:
  6384                           	opt stack 0
  6385                           pclatu	equ	0xFFB
  6386                           pclath	equ	0xFFA
  6387                           tblptru	equ	0xFF8
  6388                           tblptrh	equ	0xFF7
  6389                           tblptrl	equ	0xFF6
  6390                           tablat	equ	0xFF5
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           postinc0	equ	0xFEE
  6395                           fsr0h	equ	0xFEA
  6396                           fsr0l	equ	0xFE9
  6397                           wreg	equ	0xFE8
  6398                           indf1	equ	0xFE7
  6399                           fsr1h	equ	0xFE2
  6400                           fsr1l	equ	0xFE1
  6401                           bsr	equ	0xFE0
  6402                           indf2	equ	0xFDF
  6403                           postinc2	equ	0xFDE
  6404                           postdec2	equ	0xFDD
  6405                           fsr2h	equ	0xFDA
  6406                           fsr2l	equ	0xFD9
  6407                           status	equ	0xFD8
  6408                           
  6409 ;; *************** function _InterruptHandlerHigh *****************
  6410 ;; Defined at:
  6411 ;;		line 34 in file "main.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;		None
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;		None
  6416 ;; Return value:  Size  Location     Type
  6417 ;;		None               void
  6418 ;; Registers used:
  6419 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6420 ;; Tracked objects:
  6421 ;;		On entry : 0/0
  6422 ;;		On exit  : 0/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6425 ;;      Params:         0       0       0       0
  6426 ;;      Locals:         0       0       0       0
  6427 ;;      Temps:         14       0       0       0
  6428 ;;      Totals:        14       0       0       0
  6429 ;;Total ram usage:       14 bytes
  6430 ;; Hardware stack levels used:    1
  6431 ;; Hardware stack levels required when called:    1
  6432 ;; This function calls:
  6433 ;;		i2_delay_tenth_s
  6434 ;; This function is called by:
  6435 ;;		Interrupt level 2
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           	psect	intcode
  6440  000008                     __pintcode:
  6441                           	opt stack 0
  6442  000008                     _InterruptHandlerHigh:
  6443                           	opt stack 23
  6444                           
  6445                           ;incstack = 0
  6446  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6447  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6448  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6449  000012  EFFE  F009         	goto	int_func
  6450                           pclatu	equ	0xFFB
  6451                           pclath	equ	0xFFA
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodh	equ	0xFF4
  6457                           prodl	equ	0xFF3
  6458                           intcon	equ	0xFF2
  6459                           postinc0	equ	0xFEE
  6460                           fsr0h	equ	0xFEA
  6461                           fsr0l	equ	0xFE9
  6462                           wreg	equ	0xFE8
  6463                           indf1	equ	0xFE7
  6464                           fsr1h	equ	0xFE2
  6465                           fsr1l	equ	0xFE1
  6466                           bsr	equ	0xFE0
  6467                           indf2	equ	0xFDF
  6468                           postinc2	equ	0xFDE
  6469                           postdec2	equ	0xFDD
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474                           	psect	intcode_body
  6475  0013FC                     __pintcode_body:
  6476                           	opt stack 23
  6477  0013FC                     int_func:
  6478                           	opt stack 23
  6479  0013FC  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6480  001400  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6481  001404  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6482  001408  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6483  00140C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6484  001410  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6485  001414  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6486  001418  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6487  00141C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6488  001420  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6489  001424  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6490  001428  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6491                           
  6492                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6493  00142C  A2F2               	btfss	intcon,1,c	;volatile
  6494  00142E  D00D               	goto	i2l377
  6495                           
  6496                           ;main.c: 36: if (mode==-1) {
  6497  001430  283B               	incf	_mode,w,c	;volatile
  6498  001432  A4D8               	btfss	status,2,c
  6499  001434  D003               	goto	i2l2603
  6500                           
  6501                           ;main.c: 38: mode=1;
  6502  001436  0E01               	movlw	1
  6503  001438  6E3B               	movwf	_mode,c	;volatile
  6504                           
  6505                           ;main.c: 39: } else if (mode==0) {
  6506  00143A  D003               	goto	i2l2607
  6507  00143C                     i2l2603:
  6508  00143C  503B               	movf	_mode,w,c	;volatile
  6509  00143E  A4D8               	btfss	status,2,c
  6510                           
  6511                           ;main.c: 43: mode=-1;
  6512                           
  6513                           ;main.c: 41: } else {
  6514  001440  683B               	setf	_mode,c	;volatile
  6515  001442                     i2l2607:
  6516                           
  6517                           ;main.c: 44: }
  6518                           ;main.c: 46: delay_tenth_s(2);
  6519  001442  0E02               	movlw	2
  6520  001444  EC45  F00C         	call	i2_delay_tenth_s
  6521                           
  6522                           ;main.c: 47: INTCONbits.INT0IF=0;
  6523  001448  92F2               	bcf	intcon,1,c	;volatile
  6524  00144A                     i2l377:
  6525  00144A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6526  00144E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6527  001452  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6528  001456  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6529  00145A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6530  00145E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6531  001462  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6532  001466  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6533  00146A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6534  00146E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6535  001472  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6536  001476  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6537  00147A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6538  00147E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6539  001482  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6540  001484  0011               	retfie		f
  6541  001486                     __end_of_InterruptHandlerHigh:
  6542                           	opt stack 0
  6543                           pclatu	equ	0xFFB
  6544                           pclath	equ	0xFFA
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodh	equ	0xFF4
  6550                           prodl	equ	0xFF3
  6551                           intcon	equ	0xFF2
  6552                           postinc0	equ	0xFEE
  6553                           fsr0h	equ	0xFEA
  6554                           fsr0l	equ	0xFE9
  6555                           wreg	equ	0xFE8
  6556                           indf1	equ	0xFE7
  6557                           fsr1h	equ	0xFE2
  6558                           fsr1l	equ	0xFE1
  6559                           bsr	equ	0xFE0
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           fsr2h	equ	0xFDA
  6564                           fsr2l	equ	0xFD9
  6565                           status	equ	0xFD8
  6566                           
  6567 ;; *************** function i2_delay_tenth_s *****************
  6568 ;; Defined at:
  6569 ;;		line 32 in file "Movement.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  tenth_second    1    wreg     unsigned char 
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6574 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;		None               void
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6584 ;;      Params:         0       0       0       0
  6585 ;;      Locals:         3       0       0       0
  6586 ;;      Temps:          1       0       0       0
  6587 ;;      Totals:         4       0       0       0
  6588 ;;Total ram usage:        4 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; This function calls:
  6591 ;;		Nothing
  6592 ;; This function is called by:
  6593 ;;		_InterruptHandlerHigh
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           	psect	text33
  6598  00188A                     __ptext33:
  6599                           	opt stack 0
  6600  00188A                     i2_delay_tenth_s:
  6601                           	opt stack 23
  6602                           
  6603                           ;incstack = 0
  6604                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6605  00188A  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6606                           
  6607                           ;Movement.c: 33: unsigned int i=0;
  6608  00188C  0E00               	movlw	0
  6609  00188E  6E04               	movwf	i2delay_tenth_s@i+1,c
  6610  001890  0E00               	movlw	0
  6611  001892  6E03               	movwf	i2delay_tenth_s@i,c
  6612                           
  6613                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6614  001894  0E00               	movlw	0
  6615  001896  6E04               	movwf	i2delay_tenth_s@i+1,c
  6616  001898  0E01               	movlw	1
  6617  00189A  6E03               	movwf	i2delay_tenth_s@i,c
  6618  00189C  D009               	goto	i2l2565
  6619  00189E                     i2l2561:
  6620                           
  6621                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6622  00189E  0E82               	movlw	130
  6623  0018A0  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6624  0018A2  0EDE               	movlw	222
  6625  0018A4                     i2u309_47:
  6626  0018A4  2EE8               	decfsz	wreg,f,c
  6627  0018A6  D7FE               	goto	i2u309_47
  6628  0018A8  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6629  0018AA  D7FC               	goto	i2u309_47
  6630  0018AC  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6631  0018AE  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6632  0018B0                     i2l2565:
  6633  0018B0  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6634  0018B2  0D02               	mullw	2
  6635  0018B4  5003               	movf	i2delay_tenth_s@i,w,c
  6636  0018B6  5CF3               	subwf	prodl,w,c
  6637  0018B8  5004               	movf	i2delay_tenth_s@i+1,w,c
  6638  0018BA  58F4               	subwfb	prodh,w,c
  6639  0018BC  A0D8               	btfss	status,0,c
  6640  0018BE  0012               	return	
  6641  0018C0  D7EE               	goto	i2l2561
  6642  0018C2                     __end_ofi2_delay_tenth_s:
  6643                           	opt stack 0
  6644                           pclatu	equ	0xFFB
  6645                           pclath	equ	0xFFA
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           prodh	equ	0xFF4
  6651                           prodl	equ	0xFF3
  6652                           intcon	equ	0xFF2
  6653                           postinc0	equ	0xFEE
  6654                           fsr0h	equ	0xFEA
  6655                           fsr0l	equ	0xFE9
  6656                           wreg	equ	0xFE8
  6657                           indf1	equ	0xFE7
  6658                           fsr1h	equ	0xFE2
  6659                           fsr1l	equ	0xFE1
  6660                           bsr	equ	0xFE0
  6661                           indf2	equ	0xFDF
  6662                           postinc2	equ	0xFDE
  6663                           postdec2	equ	0xFDD
  6664                           fsr2h	equ	0xFDA
  6665                           fsr2l	equ	0xFD9
  6666                           status	equ	0xFD8
  6667                           pclatu	equ	0xFFB
  6668                           pclath	equ	0xFFA
  6669                           tblptru	equ	0xFF8
  6670                           tblptrh	equ	0xFF7
  6671                           tblptrl	equ	0xFF6
  6672                           tablat	equ	0xFF5
  6673                           prodh	equ	0xFF4
  6674                           prodl	equ	0xFF3
  6675                           intcon	equ	0xFF2
  6676                           postinc0	equ	0xFEE
  6677                           fsr0h	equ	0xFEA
  6678                           fsr0l	equ	0xFE9
  6679                           wreg	equ	0xFE8
  6680                           indf1	equ	0xFE7
  6681                           fsr1h	equ	0xFE2
  6682                           fsr1l	equ	0xFE1
  6683                           bsr	equ	0xFE0
  6684                           indf2	equ	0xFDF
  6685                           postinc2	equ	0xFDE
  6686                           postdec2	equ	0xFDD
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691                           	psect	rparam
  6692  0000                     pclatu	equ	0xFFB
  6693                           pclath	equ	0xFFA
  6694                           tblptru	equ	0xFF8
  6695                           tblptrh	equ	0xFF7
  6696                           tblptrl	equ	0xFF6
  6697                           tablat	equ	0xFF5
  6698                           prodh	equ	0xFF4
  6699                           prodl	equ	0xFF3
  6700                           intcon	equ	0xFF2
  6701                           postinc0	equ	0xFEE
  6702                           fsr0h	equ	0xFEA
  6703                           fsr0l	equ	0xFE9
  6704                           wreg	equ	0xFE8
  6705                           indf1	equ	0xFE7
  6706                           fsr1h	equ	0xFE2
  6707                           fsr1l	equ	0xFE1
  6708                           bsr	equ	0xFE0
  6709                           indf2	equ	0xFDF
  6710                           postinc2	equ	0xFDE
  6711                           postdec2	equ	0xFDD
  6712                           fsr2h	equ	0xFDA
  6713                           fsr2l	equ	0xFD9
  6714                           status	equ	0xFD8
  6715                           
  6716                           	psect	temp
  6717  00003C                     btemp:
  6718                           	opt stack 0
  6719  00003C                     	ds	1
  6720  0000                     int$flags	set	btemp
  6721                           pclatu	equ	0xFFB
  6722                           pclath	equ	0xFFA
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           prodh	equ	0xFF4
  6728                           prodl	equ	0xFF3
  6729                           intcon	equ	0xFF2
  6730                           postinc0	equ	0xFEE
  6731                           fsr0h	equ	0xFEA
  6732                           fsr0l	equ	0xFE9
  6733                           wreg	equ	0xFE8
  6734                           indf1	equ	0xFE7
  6735                           fsr1h	equ	0xFE2
  6736                           fsr1l	equ	0xFE1
  6737                           bsr	equ	0xFE0
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     94     118
    BANK1           256    250     255
    BANK2           256    118     118

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanIR@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@MoveTimeEntry	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   57289
                                             84 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2    118   118      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                            _delay_s
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delay_s                                              4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       71    61     10   21776
                                             13 BANK0     71    61     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11779
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4030
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_s
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     76      76       9       46.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5E      76       5       73.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     226       3        0.0%
DATA                 0      0     226      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 19:37:37 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0FDA  
                                  l65 1564                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0A54                                   l223 0A90  
                                 l226 0B7C                                   l382 03F8  
                                 l872 1714                                   l882 1756  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l3011 0E6E                                  l2133 159A  
                                l3013 0E74                                  l3005 0E50  
                                l3021 0ED6                                  l2143 15DE  
                                l2071 16EA                                  l3023 0EF0  
                                l2153 1614                                  l2137 15A2  
                                l2081 170A                                  l2073 16EE  
                                l2171 191A                                  l2091 1734  
                                l2059 1A02                                  l3019 0ECA  
                                l2331 1992                                  l2181 16A4  
                                l2149 160C                                  l2069 16E2  
                                l2093 1738                                  l2175 1670  
                                l2167 1908                                  l2159 1650  
                                l2097 174C                                  l2089 172C  
                                l2185 1866                                  l3145 0B78  
                                l3137 0AD4                                  l3313 065A  
                                l3305 05FE                                  l3225 03FE  
                                l3067 111A                                  l3163 0BA6  
                                l3139 0AEC                                  l2371 1840  
                                l3331 06E2                                  l2189 1878  
                                l3157 0B94                                  l3093 097A  
                                l3165 0BAC                                  l3317 0670  
                                l3309 064C                                  l2543 130C  
                                l2367 182E                                  l3343 0732  
                                l3327 06D8                                  l3351 0754  
                                l3263 04D6                                  l3337 0722  
                                l2555 1364                                  l2547 1314  
                                l3371 0824                                  l3339 0728  
                                l3283 052A                                  l3259 04A4  
                                l2821 149A                                  l3349 074E  
                                l3359 07BC                                  l2921 0C22  
                                l2833 14C0                                  l3369 081E  
                                l2923 0C34                                  l2915 0C06  
                                l2835 14C8                                  l2827 14AA  
                                l3299 05A4                                  l3387 08A8  
                                l2933 0C6C                                  l2853 1500  
                                l2845 14E8                                  l2837 14CC  
                                l2943 0CDE                                  l2927 0C3C  
                                l2863 0FB2                                  l2871 1528  
                                l2945 0D06                                  l2849 14F2  
                                l2955 0D36                                  l2875 1544  
                                l2867 150C                                  l2981 0DD6  
                                l2957 0D3C                                  l2893 139A  
                                l2885 136A                                  l2975 0D94  
                                l2969 0D72                                  l2889 1382  
                                l2979 0DCC                                  l2899 13BA  
                                l2989 0DFA                                  l2997 0E20  
                                l2999 0E2C                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1205 113C  
                                u1215 114A                                  u1225 1168  
                                u1235 1176                                  u1315 192E  
                                u1316 1930                                  u1245 1196  
                                _LATB 000F8A                                  u1255 11A4  
                                u3007 13B4                                  u1520 1694  
                                u1265 11D4                                  u3017 15D2  
                                u1530 16C4                                  u2234 0F72  
                                u3027 1644                                  u2235 0F6E  
                                u2244 0FCE                                  u3037 191C  
                                u2245 0FCA                                  u3047 169E  
                                u1527 168A                                  u1455 15AA  
                                u2255 1028                                  u3057 193C  
                                u1537 16BA                                  u3067 194C  
                                u3077 11F0                                  u1485 161C  
                                u3087 1A3C                                  u2730 06A2  
                                u2740 06B6                                  u2732 06A4  
                                u1765 198E                                  u1766 1990  
                                u2742 06B8                                  u1785 19A0  
                                u2817 0454                                  u1786 19A2  
                                u2907 1286                                  u2827 046C  
                                u2917 129A                                  u2837 120A  
                                u2927 12AC                                  u2847 1220  
                                u2937 1834                                  u2857 1230  
                                u2947 09AE                                  u2867 123E  
                                u2957 09C6                                  u2877 124C  
                                u2967 155E                                  u2887 125E  
                                u2977 186C                                  u2897 1270  
                                u2987 1086                                  u2997 109C  
                          ScanIR@Move 0071                                  _main 0350  
                                _mode 003B                         main@ScanAngle 00B6  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 1368  
                                pclat 000FFA                   fullSpeedAhead@power 0066  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00D6                        delay_s@seconds 0025  
                        ___param_bank 000010                       i2_delay_tenth_s 188A  
                     __end_of_SendLCD 1954                       __end_of_SetLine 1924  
                  ScanWithRange@F3894 00C2                           ScanIR@F3883 00BE  
                               ?_main 0001                       __end_of___awdiv 150A  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 171E                       __end_of___lwmod 1760  
                               i1l369 008E                                 i2l377 144A  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 1A38                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_delay_s 1852                       __end_of_initLCD 12B4  
                  ScanWithRange@power 00AA                       __end_of_dpowers 030B  
                     __end_of_isdigit 1A0A                                 main@i 00BD  
                               tablat 000FF5                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 0EFE  
              __size_of_ScanWithRange 032E                        __CFG_MCLRE$OFF 000000  
                     __initialization 1954                          __end_of_main 08CA  
                        __end_of_stop 13FC                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 009F                  __end_of_enableSensor 19A4  
                 VerifySignal@hexByte 002D                                ??_main 00B4  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2593 008A  
                              i1l2595 008C                                i2l2603 143C  
                      __CFG_WDTEN$OFF 000000                                i2l2607 1442  
                              i2l2561 189E                                i2l2565 18B0  
               __end_of_delay_tenth_s 188A                                _LCDout 1132  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 18C2  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 1038                             ??_SetLine 002A  
                              ___wmul 19A4                             ??___awdiv 002E  
                    __end_of_initRFID 1A26                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 19CA  
                __size_of_grabRightIR 0072                                clear_0 1966  
                    ___awdiv@quotient 0030                             ??_delay_s 0024  
                              main@mL 0264                                main@mR 026D  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 08CA                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00AB                      __end_of_turnLeft 181A  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1970  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1A46                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1760                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002C  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 147E  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BE  
                          __pbssBANK1 01FA                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 16CC                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 15FC                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 197E                    __size_of_turnRight 003E  
                __end_of_initMotorPWM 18F4                ScanWithRange@RFID_Read 0075  
                             _SendLCD 1924                               __Hparam 0000  
                             _SetLine 18F4                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 1486  
                     __size_of___wmul 0026                               ___lwdiv 16CC  
                             ___lwmod 171E                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1954  
                     ??_ScanWithRange 0077                               _delay_s 181A  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 1A26  
                             __ptext2 1A0A                               __ptext3 18C2  
                             __ptext4 11F8                               __ptext5 19CA  
                             __ptext6 1760                               __ptext7 197E  
                             __ptext8 181A                               __ptext9 12B4  
                           _T0CONbits 000FD5                               _initLCD 11F8  
                   __end_of_initTimer 1A38                               _dpowers 0301  
                             _isdigit 19EC                          LCDout@number 0027  
                       ?_VerifySignal 0024                               main@buf 01C8  
                             _sprintf 0BF8                        __pintcode_body 13FC  
                end_of_initialization 1970                        ScanWithRange@i 00A6  
                      ScanWithRange@n 00A4                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 13FC                    ScanIR@SensorResult 00A1  
                     ??_fullSpeedBack 003A                             _RFID_Read 01FE  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                     __end_of_turnRight 17DC  
                         ?_grabLeftIR 0024                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0026                      fullSpeedAhead@mL 0062  
                    fullSpeedAhead@mR 0064                ScanWithRange@RightFlag 00B2  
                      __end_of_LCDout 11F8                             _TXSTAbits 000FAC  
                           ScanIR@buf 0077            ScanWithRange@MoveTimeEntry 0073  
                       ??_grabRightIR 0026                        __end_of_ScanIR 1132  
                      _fullSpeedAhead 150A                        _ReceivedString 00C6  
                      __end_of___wmul 19CA                           _BAUDCONbits 000FAA  
                      __end_of_initIR 19EC                __size_of_delay_tenth_s 0038  
                 start_initialization 1954                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 0032                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 1486                              ??_ScanIR 0039  
              __end_of_fullSpeedAhead 158A                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 15FC                          _initMotorPWM 18C2  
                         __pbssCOMRAM 003A                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                         __pcstackBANK2 0200  
                        _isdigit$1964 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1852                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0062  
                           __pintcode 0008                  __end_of_VerifySignal 1368  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              ?_delay_s 0001  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B7  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 1A26  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u309_47 18A4                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3897 01FA  
                         _grabRightIR 158A                 ScanWithRange@LeftFlag 00B0  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0BF8  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 179E                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 007C  
                 __end_of_setMotorPWM 1038                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 179E                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 166E                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                      __size_of_delay_s 0038  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0067  
                            __ptext10 08CA                              __ptext11 179E  
                            __ptext20 19EC                              __ptext12 17DC  
                            __ptext21 19A4                              __ptext13 150A  
                            __ptext30 1A38                              __ptext22 171E  
                            __ptext14 1852                              __ptext23 16CC  
                            __ptext15 1038                              __ptext24 158A  
                            __ptext16 1368                              __ptext33 188A  
                            __ptext25 15FC                              __ptext17 0EFE  
                            __ptext26 18F4                              __ptext18 1486  
                            __ptext27 166E                              __ptext19 0BF8  
                            __ptext28 1924                              __ptext29 1132  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 1A0A             ScanWithRange@SensorResult 00AC  
                      turnRight@power 006B                         __size_of_main 057A  
                  main@DirectionFound 00BB                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00B4  
                            delay_s@i 0026                              int$flags 003C  
                            main@Move 00BC                   _InterruptHandlerLow 0018  
                          _LCD_String 166E                              _turnLeft 17DC  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002F                            _INTCONbits 000FF2  
                         ??_initTimer 0024                              isdigit@c 0026  
                         _setMotorPWM 0EFE                          _VerifySignal 12B4  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                      ??_fullSpeedAhead 0039  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00A8  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
