

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 17:03:57 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATBbits	set	3978
    78  0000                     _LATCbits	set	3979
    79  0000                     _LATDbits	set	3980
    80  0000                     _LATEbits	set	3981
    81  0000                     _OSCCON	set	4051
    82  0000                     _OSCCONbits	set	4051
    83  0000                     _PIE1bits	set	3997
    84  0000                     _PIR1bits	set	3998
    85  0000                     _PTCON0	set	3967
    86  0000                     _PTCON1	set	3966
    87  0000                     _PTPERH	set	3962
    88  0000                     _PTPERL	set	3963
    89  0000                     _PWMCON0	set	3951
    90  0000                     _PWMCON1	set	3950
    91  0000                     _RCONbits	set	4048
    92  0000                     _RCREG	set	4014
    93  0000                     _RCSTAbits	set	4011
    94  0000                     _SPBRG	set	4015
    95  0000                     _SPBRGH	set	4016
    96  0000                     _T0CONbits	set	4053
    97  0000                     _T5CON	set	4023
    98  0000                     _TMR0H	set	4055
    99  0000                     _TMR0L	set	4054
   100  0000                     _TRISAbits	set	3986
   101  0000                     _TRISBbits	set	3987
   102  0000                     _TRISC	set	3988
   103  0000                     _TRISCbits	set	3988
   104  0000                     _TRISDbits	set	3989
   105  0000                     _TRISEbits	set	3990
   106  0000                     _TXREG	set	4013
   107  0000                     _TXSTAbits	set	4012
   108  0000                     _PDC0H	set	3960
   109  0000                     _PDC0L	set	3961
   110  0000                     _PDC1H	set	3958
   111  0000                     _PDC1L	set	3959
   112  00030B                     STR_6:
   113  00030B  20                 	db	32
   114  00030C  20                 	db	32
   115  00030D  20                 	db	32
   116  00030E  20                 	db	32
   117  00030F  20                 	db	32
   118  000310  20                 	db	32
   119  000311  25                 	db	37
   120  000312  30                 	db	48	;'0'
   121  000313  34                 	db	52	;'4'
   122  000314  64                 	db	100	;'d'
   123  000315  2C                 	db	44
   124  000316  20                 	db	32
   125  000317  25                 	db	37
   126  000318  30                 	db	48	;'0'
   127  000319  34                 	db	52	;'4'
   128  00031A  64                 	db	100	;'d'
   129  00031B  00                 	db	0
   130  00031C                     STR_5:
   131  00031C  20                 	db	32
   132  00031D  20                 	db	32
   133  00031E  20                 	db	32
   134  00031F  20                 	db	32
   135  000320  20                 	db	32
   136  000321  20                 	db	32
   137  000322  49                 	db	73	;'I'
   138  000323  6E                 	db	110	;'n'
   139  000324  65                 	db	101	;'e'
   140  000325  72                 	db	114	;'r'
   141  000326  74                 	db	116	;'t'
   142  000327  20                 	db	32
   143  000328  4D                 	db	77	;'M'
   144  000329  6F                 	db	111	;'o'
   145  00032A  64                 	db	100	;'d'
   146  00032B  65                 	db	101	;'e'
   147  00032C  00                 	db	0
   148  00032D                     STR_1:
   149  00032D  20                 	db	32
   150  00032E  20                 	db	32
   151  00032F  20                 	db	32
   152  000330  20                 	db	32
   153  000331  20                 	db	32
   154  000332  53                 	db	83	;'S'
   155  000333  63                 	db	99	;'c'
   156  000334  61                 	db	97	;'a'
   157  000335  6E                 	db	110	;'n'
   158  000336  49                 	db	73	;'I'
   159  000337  52                 	db	82	;'R'
   160  000338  00                 	db	0
   161  000339                     STR_8:
   162  000339  47                 	db	71	;'G'
   163  00033A  6F                 	db	111	;'o'
   164  00033B  69                 	db	105	;'i'
   165  00033C  6E                 	db	110	;'n'
   166  00033D  67                 	db	103	;'g'
   167  00033E  20                 	db	32
   168  00033F  48                 	db	72	;'H'
   169  000340  6F                 	db	111	;'o'
   170  000341  6D                 	db	109	;'m'
   171  000342  65                 	db	101	;'e'
   172  000343  00                 	db	0
   173  000344                     STR_7:
   174  000344  53                 	db	83	;'S'
   175  000345  65                 	db	101	;'e'
   176  000346  61                 	db	97	;'a'
   177  000347  72                 	db	114	;'r'
   178  000348  63                 	db	99	;'c'
   179  000349  68                 	db	104	;'h'
   180  00034A  69                 	db	105	;'i'
   181  00034B  6E                 	db	110	;'n'
   182  00034C  67                 	db	103	;'g'
   183  00034D  00                 	db	0
   184  0000                     
   185                           ; #config settings
   186  00034E  00                 	db	0	; dummy byte at the end
   187  0000                     
   188                           	psect	cinit
   189  001D2C                     __pcinit:
   190                           	opt stack 0
   191  001D2C                     start_initialization:
   192                           	opt stack 0
   193  001D2C                     __initialization:
   194                           	opt stack 0
   195                           
   196                           ; Clear objects allocated to BANK2 (100 bytes)
   197  001D2C  EE02  F000         	lfsr	0,__pbssBANK2
   198  001D30  0E64               	movlw	100
   199  001D32                     clear_0:
   200  001D32  6AEE               	clrf	postinc0,c
   201  001D34  06E8               	decf	wreg,f,c
   202  001D36  E1FD               	bnz	clear_0
   203                           
   204                           ; Clear objects allocated to BANK1 (21 bytes)
   205  001D38  EE01  F0E2         	lfsr	0,__pbssBANK1
   206  001D3C  0E15               	movlw	21
   207  001D3E                     clear_1:
   208  001D3E  6AEE               	clrf	postinc0,c
   209  001D40  06E8               	decf	wreg,f,c
   210  001D42  E1FD               	bnz	clear_1
   211                           
   212                           ; Clear objects allocated to BANK0 (58 bytes)
   213  001D44  EE00  F0BF         	lfsr	0,__pbssBANK0
   214  001D48  0E3A               	movlw	58
   215  001D4A                     clear_2:
   216  001D4A  6AEE               	clrf	postinc0,c
   217  001D4C  06E8               	decf	wreg,f,c
   218  001D4E  E1FD               	bnz	clear_2
   219                           
   220                           ; Clear objects allocated to COMRAM (2 bytes)
   221  001D50  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   222  001D52  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   223  001D54                     end_of_initialization:
   224                           	opt stack 0
   225  001D54                     __end_of__initialization:
   226                           	opt stack 0
   227  001D54  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   228  001D56  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   229  001D58  0E00               	movlw	low (__Lmediumconst shr (0+16))
   230  001D5A  6EF8               	movwf	tblptru,c
   231  001D5C  0100               	movlb	0
   232  001D5E  EFA8  F001         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	bssCOMRAM
   238  00003A                     __pbssCOMRAM:
   239                           	opt stack 0
   240  00003A                     _i:
   241                           	opt stack 0
   242  00003A                     	ds	1
   243  00003B                     _mode:
   244                           	opt stack 0
   245  00003B                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           
   250                           	psect	bssBANK0
   251  0000BF                     __pbssBANK0:
   252                           	opt stack 0
   253  0000BF                     main@F3895:
   254                           	opt stack 0
   255  0000BF                     	ds	50
   256  0000F1                     ScanIR@F3879:
   257                           	opt stack 0
   258  0000F1                     	ds	4
   259  0000F5                     ScanWithRange@F3892:
   260                           	opt stack 0
   261  0000F5                     	ds	4
   262                           tblptru	equ	0xFF8
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	bssBANK1
   267  0001E2                     __pbssBANK1:
   268                           	opt stack 0
   269  0001E2                     main@F3898:
   270                           	opt stack 0
   271  0001E2                     	ds	4
   272  0001E6                     _ReceivedString:
   273                           	opt stack 0
   274  0001E6                     	ds	16
   275  0001F6                     _RFID_Read:
   276                           	opt stack 0
   277  0001F6                     	ds	1
   278                           tblptru	equ	0xFF8
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           
   282                           	psect	bssBANK2
   283  000200                     __pbssBANK2:
   284                           	opt stack 0
   285  000200                     main@F3893:
   286                           	opt stack 0
   287  000200                     	ds	100
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     main@buf:
   296                           	opt stack 0
   297                           
   298                           ; 40 bytes @ 0x0
   299  000100                     	ds	40
   300  000128                     main@MoveType:
   301                           	opt stack 0
   302                           
   303                           ; 50 bytes @ 0x28
   304  000128                     	ds	50
   305  00015A                     main@MoveTime:
   306                           	opt stack 0
   307                           
   308                           ; 100 bytes @ 0x5A
   309  00015A                     	ds	100
   310  0001BE                     main@Message:
   311                           	opt stack 0
   312                           
   313                           ; 10 bytes @ 0xBE
   314  0001BE                     	ds	10
   315  0001C8                     main@ScanAngle:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0xC8
   319  0001C8                     	ds	1
   320  0001C9                     main@SensorResult:
   321                           	opt stack 0
   322                           
   323                           ; 4 bytes @ 0xC9
   324  0001C9                     	ds	4
   325  0001CD                     main@DirectionFound:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0xCD
   329  0001CD                     	ds	1
   330  0001CE                     main@i:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0xCE
   334  0001CE                     	ds	1
   335  0001CF                     main@Move:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0xCF
   339  0001CF                     	ds	1
   340  0001D0                     main@mL:
   341                           	opt stack 0
   342                           
   343                           ; 9 bytes @ 0xD0
   344  0001D0                     	ds	9
   345  0001D9                     main@mR:
   346                           	opt stack 0
   347                           
   348                           ; 9 bytes @ 0xD9
   349  0001D9                     	ds	9
   350                           tblptru	equ	0xFF8
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	cstackBANK0
   355  000060                     __pcstackBANK0:
   356                           	opt stack 0
   357  000060                     ??_sprintf:
   358  000060                     setMotorPWM@PWMduty:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x0
   362  000060                     	ds	2
   363  000062                     stop@mL:
   364                           	opt stack 0
   365  000062                     fullSpeedAhead@mL:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369  000062                     	ds	2
   370  000064                     stop@mR:
   371                           	opt stack 0
   372  000064                     fullSpeedAhead@mR:
   373                           	opt stack 0
   374  000064                     sprintf@ap:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x4
   378  000064                     	ds	2
   379  000066                     fullSpeedAhead@power:
   380                           	opt stack 0
   381  000066                     sprintf@prec:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x6
   385  000066                     	ds	1
   386  000067                     turnLeft@mL:
   387                           	opt stack 0
   388  000067                     turnRight@mL:
   389                           	opt stack 0
   390  000067                     fullSpeedBack@mL:
   391                           	opt stack 0
   392  000067                     sprintf@val:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x7
   396  000067                     	ds	2
   397  000069                     sprintf@flag:
   398                           	opt stack 0
   399  000069                     turnLeft@mR:
   400                           	opt stack 0
   401  000069                     turnRight@mR:
   402                           	opt stack 0
   403  000069                     fullSpeedBack@mR:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x9
   407  000069                     	ds	1
   408  00006A                     sprintf@width:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0xA
   412  00006A                     	ds	1
   413  00006B                     turnLeft@power:
   414                           	opt stack 0
   415  00006B                     turnRight@power:
   416                           	opt stack 0
   417  00006B                     fullSpeedBack@power:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0xB
   421  00006B                     	ds	1
   422  00006C                     sprintf@c:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0xC
   426  00006C                     	ds	1
   427  00006D                     ScanIR@mL:
   428                           	opt stack 0
   429  00006D                     ScanWithRange@mL:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0xD
   433  00006D                     	ds	2
   434  00006F                     ScanIR@mR:
   435                           	opt stack 0
   436  00006F                     ScanWithRange@mR:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0xF
   440  00006F                     	ds	2
   441  000071                     ScanWithRange@loops:
   442                           	opt stack 0
   443  000071                     ScanIR@buf:
   444                           	opt stack 0
   445                           
   446                           ; 40 bytes @ 0x11
   447  000071                     	ds	2
   448  000073                     ScanWithRange@MoveTime:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x13
   452  000073                     	ds	2
   453  000075                     ScanWithRange@Move:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x15
   457  000075                     	ds	2
   458  000077                     ScanWithRange@MoveType:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x17
   462  000077                     	ds	2
   463  000079                     ScanWithRange@RFID_Read:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x19
   467  000079                     	ds	2
   468  00007B                     ??_ScanWithRange:
   469                           
   470                           ; 0 bytes @ 0x1B
   471  00007B                     	ds	5
   472  000080                     ScanWithRange@buf:
   473                           	opt stack 0
   474                           
   475                           ; 40 bytes @ 0x20
   476  000080                     	ds	25
   477  000099                     ScanIR@DirectionMoveThreshold:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x39
   481  000099                     	ds	2
   482  00009B                     ScanIR@SensorResult:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x3B
   486  00009B                     	ds	13
   487  0000A8                     ScanWithRange@n:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x48
   491  0000A8                     	ds	2
   492  0000AA                     ScanWithRange@i:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x4A
   496  0000AA                     	ds	2
   497  0000AC                     ScanWithRange@DirectionFoundThreshold:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x4C
   501  0000AC                     	ds	2
   502  0000AE                     ScanWithRange@MotorPower:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x4E
   506  0000AE                     	ds	1
   507  0000AF                     ScanWithRange@LeftFlick:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x4F
   511  0000AF                     	ds	1
   512  0000B0                     ScanWithRange@MiniLeftFlick:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x50
   516  0000B0                     	ds	1
   517  0000B1                     ScanWithRange@LeftFlag:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x51
   521  0000B1                     	ds	2
   522  0000B3                     ScanWithRange@TimeAboveThreshold:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x53
   526  0000B3                     	ds	1
   527  0000B4                     ScanWithRange@SensorResult:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x54
   531  0000B4                     	ds	4
   532  0000B8                     ScanWithRange@RightFlag:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x58
   536  0000B8                     	ds	2
   537  0000BA                     ??_main:
   538                           
   539                           ; 0 bytes @ 0x5A
   540  0000BA                     	ds	5
   541                           tblptru	equ	0xFF8
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           
   545                           	psect	cstackCOMRAM
   546  000001                     __pcstackCOMRAM:
   547                           	opt stack 0
   548  000001                     ??i2_delay_tenth_s:
   549                           
   550                           ; 0 bytes @ 0x0
   551  000001                     	ds	1
   552  000002                     i2delay_tenth_s@tenth_seconds:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x1
   556  000002                     	ds	1
   557  000003                     i2delay_tenth_s@i:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x2
   561  000003                     	ds	2
   562  000005                     ??_InterruptHandlerHigh:
   563                           
   564                           ; 0 bytes @ 0x4
   565  000005                     	ds	14
   566  000013                     ??_InterruptHandlerLow:
   567                           
   568                           ; 0 bytes @ 0x12
   569  000013                     	ds	17
   570  000024                     ??_isdigit:
   571  000024                     ??_LCDout:
   572  000024                     ??_delay_tenth_s:
   573  000024                     ?_grabRightIR:
   574                           	opt stack 0
   575  000024                     ?_grabLeftIR:
   576                           	opt stack 0
   577  000024                     ?___wmul:
   578                           	opt stack 0
   579  000024                     ?___lwdiv:
   580                           	opt stack 0
   581  000024                     enableSensor@status:
   582                           	opt stack 0
   583  000024                     VerifySignal@Signal:
   584                           	opt stack 0
   585  000024                     ___wmul@multiplier:
   586                           	opt stack 0
   587  000024                     ___lwdiv@dividend:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x23
   591  000024                     	ds	1
   592  000025                     enableSensor@sensor:
   593                           	opt stack 0
   594  000025                     delay_tenth_s@tenth_seconds:
   595                           	opt stack 0
   596  000025                     _isdigit$2069:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x24
   600  000025                     	ds	1
   601  000026                     ??_grabRightIR:
   602  000026                     ??_grabLeftIR:
   603  000026                     ??_VerifySignal:
   604  000026                     isdigit@c:
   605                           	opt stack 0
   606  000026                     delay_tenth_s@i:
   607                           	opt stack 0
   608  000026                     ___wmul@multiplicand:
   609                           	opt stack 0
   610  000026                     ___lwdiv@divisor:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x25
   614  000026                     	ds	1
   615  000027                     LCDout@number:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x26
   619  000027                     	ds	1
   620  000028                     SendLCD@type:
   621                           	opt stack 0
   622  000028                     ___wmul@product:
   623                           	opt stack 0
   624  000028                     ___lwdiv@quotient:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x27
   628  000028                     	ds	1
   629  000029                     SendLCD@Byte:
   630                           	opt stack 0
   631  000029                     grabRightIR@IR_signal:
   632                           	opt stack 0
   633  000029                     grabLeftIR@IR_signal:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x28
   637  000029                     	ds	1
   638  00002A                     ??_initLCD:
   639  00002A                     ?___awdiv:
   640                           	opt stack 0
   641  00002A                     SetLine@line:
   642                           	opt stack 0
   643  00002A                     VerifySignal@i:
   644                           	opt stack 0
   645  00002A                     ___lwdiv@counter:
   646                           	opt stack 0
   647  00002A                     LCD_String@string:
   648                           	opt stack 0
   649  00002A                     ___awdiv@dividend:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x29
   653  00002A                     	ds	1
   654  00002B                     ?___lwmod:
   655                           	opt stack 0
   656  00002B                     grabRightIR@i:
   657                           	opt stack 0
   658  00002B                     grabLeftIR@i:
   659                           	opt stack 0
   660  00002B                     VerifySignal@checksum:
   661                           	opt stack 0
   662  00002B                     ___lwmod@dividend:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x2A
   666  00002B                     	ds	1
   667  00002C                     VerifySignal@hexByte:
   668                           	opt stack 0
   669  00002C                     ___awdiv@divisor:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x2B
   673  00002C                     	ds	1
   674  00002D                     ___lwmod@divisor:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2C
   678  00002D                     	ds	1
   679  00002E                     ___awdiv@counter:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x2D
   683  00002E                     	ds	1
   684  00002F                     ___awdiv@sign:
   685                           	opt stack 0
   686  00002F                     ___lwmod@counter:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x2E
   690  00002F                     	ds	1
   691  000030                     ?_sprintf:
   692                           	opt stack 0
   693  000030                     sprintf@sp:
   694                           	opt stack 0
   695  000030                     ___awdiv@quotient:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x2F
   699  000030                     	ds	2
   700  000032                     setMotorPWM@m:
   701                           	opt stack 0
   702  000032                     sprintf@f:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x31
   706  000032                     	ds	2
   707  000034                     ??_setMotorPWM:
   708                           
   709                           ; 0 bytes @ 0x33
   710  000034                     	ds	5
   711  000039                     ??_ScanIR:
   712                           
   713                           ; 0 bytes @ 0x38
   714  000039                     	ds	1
   715  00003A                     tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           
   719                           ; 0 bytes @ 0x39
   720 ;;
   721 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   722 ;;
   723 ;; *************** function _main *****************
   724 ;; Defined at:
   725 ;;		line 51 in file "main.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  MoveTime      100   90[BANK1 ] int [50]
   730 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   731 ;;  buf            40    0[BANK1 ] unsigned char [40]
   732 ;;  Message        10  190[BANK1 ] unsigned char [10]
   733 ;;  mR              9  217[BANK1 ] struct DC_motor
   734 ;;  mL              9  208[BANK1 ] struct DC_motor
   735 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   736 ;;  Move            1  207[BANK1 ] char 
   737 ;;  i               1  206[BANK1 ] unsigned char 
   738 ;;  DirectionFou    1  205[BANK1 ] char 
   739 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;		None               void
   742 ;; Registers used:
   743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   749 ;;      Params:         0       0       0       0
   750 ;;      Locals:         0       0     226       0
   751 ;;      Temps:          0       5       0       0
   752 ;;      Totals:         0       5     226       0
   753 ;;Total ram usage:      231 bytes
   754 ;; Hardware stack levels required when called:    8
   755 ;; This function calls:
   756 ;;		_LCD_String
   757 ;;		_ScanIR
   758 ;;		_ScanWithRange
   759 ;;		_SendLCD
   760 ;;		_SetLine
   761 ;;		_VerifySignal
   762 ;;		_delay_tenth_s
   763 ;;		_enableSensor
   764 ;;		_fullSpeedAhead
   765 ;;		_fullSpeedBack
   766 ;;		_grabLeftIR
   767 ;;		_grabRightIR
   768 ;;		_initIR
   769 ;;		_initLCD
   770 ;;		_initMotorPWM
   771 ;;		_initRFID
   772 ;;		_initTimer
   773 ;;		_sprintf
   774 ;;		_stop
   775 ;;		_turnLeft
   776 ;;		_turnRight
   777 ;; This function is called by:
   778 ;;		Startup code after reset
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text0
   783  000350                     __ptext0:
   784                           	opt stack 0
   785  000350                     _main:
   786                           	opt stack 23
   787                           
   788                           ;main.c: 54: unsigned char Message[10];
   789                           ;main.c: 55: unsigned char i=0;
   790                           
   791                           ;incstack = 0
   792  000350  0E00               	movlw	0
   793  000352  0101               	movlb	1	; () banked
   794  000354  6FCE               	movwf	main@i& (0+255),b
   795                           
   796                           ;main.c: 56: signed char DirectionFound=0;
   797  000356  0E00               	movlw	0
   798  000358  0101               	movlb	1	; () banked
   799  00035A  6FCD               	movwf	main@DirectionFound& (0+255),b
   800                           
   801                           ; BSR set to: 1
   802                           ;main.c: 57: int MoveTime[50] = { 0 };
   803  00035C  EE22  F000         	lfsr	2,main@F3893
   804  000360  EE11  F05A         	lfsr	1,main@MoveTime
   805  000364  0E63               	movlw	99
   806  000366                     u2771:
   807  000366  CFDB FFE3          	movff	plusw2,plusw1
   808  00036A  06E8               	decf	wreg,f,c
   809  00036C  E2FC               	bc	u2771
   810                           
   811                           ; BSR set to: 1
   812                           ;main.c: 60: char MoveType[50] = { 0 };
   813  00036E  EE20  F0BF         	lfsr	2,main@F3895
   814  000372  EE11  F028         	lfsr	1,main@MoveType
   815  000376  0E31               	movlw	49
   816  000378                     u2781:
   817  000378  CFDB FFE3          	movff	plusw2,plusw1
   818  00037C  06E8               	decf	wreg,f,c
   819  00037E  E2FC               	bc	u2781
   820                           
   821                           ;main.c: 63: signed char Move=0;
   822  000380  0E00               	movlw	0
   823  000382  0101               	movlb	1	; () banked
   824  000384  6FCF               	movwf	main@Move& (0+255),b
   825                           
   826                           ; BSR set to: 1
   827                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   828  000386  C1E2  F1C9         	movff	main@F3898,main@SensorResult
   829  00038A  C1E3  F1CA         	movff	main@F3898+1,main@SensorResult+1
   830  00038E  C1E4  F1CB         	movff	main@F3898+2,main@SensorResult+2
   831  000392  C1E5  F1CC         	movff	main@F3898+3,main@SensorResult+3
   832                           
   833                           ;main.c: 65: char buf[40];
   834                           ;main.c: 67: unsigned char ScanAngle=60;
   835  000396  0E3C               	movlw	60
   836  000398  0101               	movlb	1	; () banked
   837  00039A  6FC8               	movwf	main@ScanAngle& (0+255),b
   838                           
   839                           ; BSR set to: 1
   840                           ;main.c: 76: INTCONbits.GIEH=1;
   841  00039C  8EF2               	bsf	intcon,7,c	;volatile
   842                           
   843                           ; BSR set to: 1
   844                           ;main.c: 77: INTCONbits.GIEL=1;
   845  00039E  8CF2               	bsf	intcon,6,c	;volatile
   846                           
   847                           ; BSR set to: 1
   848                           ;main.c: 78: INTCONbits.PEIE=1;
   849  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   850                           
   851                           ; BSR set to: 1
   852                           ;main.c: 79: RCONbits.IPEN=1;
   853  0003A2  8ED0               	bsf	4048,7,c	;volatile
   854                           
   855                           ; BSR set to: 1
   856                           ;main.c: 82: IPR1bits.RCIP=0;
   857  0003A4  9A9F               	bcf	3999,5,c	;volatile
   858                           
   859                           ; BSR set to: 1
   860                           ;main.c: 83: PIE1bits.RCIE=1;
   861  0003A6  8A9D               	bsf	3997,5,c	;volatile
   862                           
   863                           ; BSR set to: 1
   864                           ;main.c: 86: TRISCbits.RC3=1;
   865  0003A8  8694               	bsf	3988,3,c	;volatile
   866                           
   867                           ; BSR set to: 1
   868                           ;main.c: 87: INTCONbits.INT0IE=1;
   869  0003AA  88F2               	bsf	intcon,4,c	;volatile
   870                           
   871                           ; BSR set to: 1
   872                           ;main.c: 90: PIR1bits.RC1IF=0;
   873  0003AC  9A9E               	bcf	3998,5,c	;volatile
   874                           
   875                           ; BSR set to: 1
   876                           ;main.c: 91: INTCONbits.INT0IF=0;
   877  0003AE  92F2               	bcf	intcon,1,c	;volatile
   878                           
   879                           ;main.c: 94: struct DC_motor mL, mR;
   880                           ;main.c: 95: mL.power=0;
   881  0003B0  0E00               	movlw	0
   882  0003B2  0101               	movlb	1	; () banked
   883  0003B4  6FD0               	movwf	main@mL& (0+255),b
   884                           
   885                           ;main.c: 96: mL.direction=1;
   886  0003B6  0E01               	movlw	1
   887  0003B8  0101               	movlb	1	; () banked
   888  0003BA  6FD1               	movwf	(main@mL+1)& (0+255),b
   889                           
   890                           ; BSR set to: 1
   891                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   892  0003BC  0E79               	movlw	121
   893  0003BE  0101               	movlb	1	; () banked
   894  0003C0  6FD2               	movwf	(main@mL+2)& (0+255),b
   895  0003C2  0E0F               	movlw	15
   896  0003C4  0101               	movlb	1	; () banked
   897  0003C6  6FD3               	movwf	(main@mL+3)& (0+255),b
   898                           
   899                           ; BSR set to: 1
   900                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   901  0003C8  0E78               	movlw	120
   902  0003CA  0101               	movlb	1	; () banked
   903  0003CC  6FD4               	movwf	(main@mL+4)& (0+255),b
   904  0003CE  0E0F               	movlw	15
   905  0003D0  0101               	movlb	1	; () banked
   906  0003D2  6FD5               	movwf	(main@mL+5)& (0+255),b
   907                           
   908                           ;main.c: 99: mL.dir_pin=0;
   909  0003D4  0E00               	movlw	0
   910  0003D6  0101               	movlb	1	; () banked
   911  0003D8  6FD6               	movwf	(main@mL+6)& (0+255),b
   912                           
   913                           ;main.c: 100: mL.PWMperiod=199;
   914  0003DA  0E00               	movlw	0
   915  0003DC  0101               	movlb	1	; () banked
   916  0003DE  6FD8               	movwf	(main@mL+8)& (0+255),b
   917  0003E0  0EC7               	movlw	199
   918  0003E2  6FD7               	movwf	(main@mL+7)& (0+255),b
   919                           
   920                           ;main.c: 102: mR.power=0;
   921  0003E4  0E00               	movlw	0
   922  0003E6  0101               	movlb	1	; () banked
   923  0003E8  6FD9               	movwf	main@mR& (0+255),b
   924                           
   925                           ;main.c: 103: mR.direction=1;
   926  0003EA  0E01               	movlw	1
   927  0003EC  0101               	movlb	1	; () banked
   928  0003EE  6FDA               	movwf	(main@mR+1)& (0+255),b
   929                           
   930                           ; BSR set to: 1
   931                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   932  0003F0  0E77               	movlw	119
   933  0003F2  0101               	movlb	1	; () banked
   934  0003F4  6FDB               	movwf	(main@mR+2)& (0+255),b
   935  0003F6  0E0F               	movlw	15
   936  0003F8  0101               	movlb	1	; () banked
   937  0003FA  6FDC               	movwf	(main@mR+3)& (0+255),b
   938                           
   939                           ; BSR set to: 1
   940                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   941  0003FC  0E76               	movlw	118
   942  0003FE  0101               	movlb	1	; () banked
   943  000400  6FDD               	movwf	(main@mR+4)& (0+255),b
   944  000402  0E0F               	movlw	15
   945  000404  0101               	movlb	1	; () banked
   946  000406  6FDE               	movwf	(main@mR+5)& (0+255),b
   947                           
   948                           ;main.c: 106: mR.dir_pin=2;
   949  000408  0E02               	movlw	2
   950  00040A  0101               	movlb	1	; () banked
   951  00040C  6FDF               	movwf	(main@mR+6)& (0+255),b
   952                           
   953                           ;main.c: 107: mR.PWMperiod=199;
   954  00040E  0E00               	movlw	0
   955  000410  0101               	movlb	1	; () banked
   956  000412  6FE1               	movwf	(main@mR+8)& (0+255),b
   957  000414  0EC7               	movlw	199
   958  000416  6FE0               	movwf	(main@mR+7)& (0+255),b
   959                           
   960                           ;main.c: 109: OSCCON = 0x72;
   961  000418  0E72               	movlw	114
   962  00041A  6ED3               	movwf	4051,c	;volatile
   963  00041C                     l392:
   964  00041C  B4D3               	btfsc	4051,2,c	;volatile
   965  00041E  D36C               	goto	l3596
   966  000420  D7FD               	goto	l392
   967  000422                     l3398:
   968                           
   969                           ;main.c: 121: stop(&mL, &mR);
   970  000422  0ED0               	movlw	low main@mL
   971  000424  0100               	movlb	0	; () banked
   972  000426  6F62               	movwf	stop@mL& (0+255),b
   973  000428  0E01               	movlw	high main@mL
   974  00042A  0100               	movlb	0	; () banked
   975  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   976  00042E  0ED9               	movlw	low main@mR
   977  000430  0100               	movlb	0	; () banked
   978  000432  6F64               	movwf	stop@mR& (0+255),b
   979  000434  0E01               	movlw	high main@mR
   980  000436  0100               	movlb	0	; () banked
   981  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   982  00043A  ECBC  F00B         	call	_stop	;wreg free
   983                           
   984                           ;main.c: 124: RFID_Read=0;
   985  00043E  0E00               	movlw	0
   986  000440  0101               	movlb	1	; () banked
   987  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   988                           
   989                           ; BSR set to: 1
   990                           ;main.c: 125: Move=0;
   991  000444  0E00               	movlw	0
   992  000446  0101               	movlb	1	; () banked
   993  000448  6FCF               	movwf	main@Move& (0+255),b
   994                           
   995                           ; BSR set to: 1
   996                           ;main.c: 128: SensorResult[0]=grabLeftIR();
   997  00044A  EC06  F00D         	call	_grabLeftIR	;wreg free
   998  00044E  C024  F1C9         	movff	?_grabLeftIR,main@SensorResult
   999  000452  C025  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1000                           
  1001                           ;main.c: 129: SensorResult[1]=grabRightIR();
  1002  000456  ECCD  F00C         	call	_grabRightIR	;wreg free
  1003  00045A  C024  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1004  00045E  C025  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1005                           
  1006                           ;main.c: 133: CAP1BUFH=0;
  1007  000462  0E00               	movlw	0
  1008  000464  6E69               	movwf	3945,c	;volatile
  1009                           
  1010                           ;main.c: 134: CAP1BUFL=0;
  1011  000466  0E00               	movlw	0
  1012  000468  6E68               	movwf	3944,c	;volatile
  1013                           
  1014                           ;main.c: 135: CAP2BUFH=0;
  1015  00046A  0E00               	movlw	0
  1016  00046C  6E67               	movwf	3943,c	;volatile
  1017                           
  1018                           ;main.c: 136: CAP2BUFL=0;
  1019  00046E  0E00               	movlw	0
  1020  000470  6E66               	movwf	3942,c	;volatile
  1021                           
  1022                           ;main.c: 139: SendLCD(0b00000001,0);
  1023  000472  0E00               	movlw	0
  1024  000474  6E28               	movwf	SendLCD@type,c
  1025  000476  0E01               	movlw	1
  1026  000478  ECC9  F00E         	call	_SendLCD
  1027                           
  1028                           ;main.c: 140: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1029  00047C  0E21               	movlw	33
  1030  00047E                     u3037:
  1031  00047E  2EE8               	decfsz	wreg,f,c
  1032  000480  D7FE               	goto	u3037
  1033  000482  F000               	nop	
  1034                           
  1035                           ;main.c: 141: SendLCD(0b00000010,0);
  1036  000484  0E00               	movlw	0
  1037  000486  6E28               	movwf	SendLCD@type,c
  1038  000488  0E02               	movlw	2
  1039  00048A  ECC9  F00E         	call	_SendLCD
  1040                           
  1041                           ;main.c: 142: _delay((unsigned long)((2)*(8000000/4000.0)));
  1042  00048E  0E06               	movlw	6
  1043  000490  0100               	movlb	0	; () banked
  1044  000492  6FBA               	movwf	??_main& (0+255),b
  1045  000494  0E30               	movlw	48
  1046  000496                     u3047:
  1047  000496  2EE8               	decfsz	wreg,f,c
  1048  000498  D7FE               	goto	u3047
  1049  00049A  2FBA               	decfsz	??_main& (0+255),f,b
  1050  00049C  D7FC               	goto	u3047
  1051  00049E  D000               	nop2	
  1052                           
  1053                           ;main.c: 143: SetLine(1);
  1054  0004A0  0E01               	movlw	1
  1055  0004A2  ECB1  F00E         	call	_SetLine
  1056                           
  1057                           ;main.c: 144: LCD_String("      Inert Mode");
  1058  0004A6  0E1C               	movlw	low STR_5
  1059  0004A8  6E2A               	movwf	LCD_String@string,c
  1060  0004AA  0E03               	movlw	high STR_5
  1061  0004AC  6E2B               	movwf	LCD_String@string+1,c
  1062  0004AE  EC3F  F00D         	call	_LCD_String	;wreg free
  1063                           
  1064                           ;main.c: 145: SetLine(2);
  1065  0004B2  0E02               	movlw	2
  1066  0004B4  ECB1  F00E         	call	_SetLine
  1067                           
  1068                           ;main.c: 146: if (RFID_Read) {
  1069  0004B8  0101               	movlb	1	; () banked
  1070  0004BA  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1071  0004BC  B4D8               	btfsc	status,2,c
  1072  0004BE  D007               	goto	l3434
  1073                           
  1074                           ; BSR set to: 1
  1075                           ;main.c: 147: LCD_String(Message);
  1076  0004C0  0EBE               	movlw	low main@Message
  1077  0004C2  6E2A               	movwf	LCD_String@string,c
  1078  0004C4  0E01               	movlw	high main@Message
  1079  0004C6  6E2B               	movwf	LCD_String@string+1,c
  1080  0004C8  EC3F  F00D         	call	_LCD_String	;wreg free
  1081                           
  1082                           ;main.c: 148: } else {
  1083  0004CC  D315               	goto	l3596
  1084  0004CE                     l3434:
  1085                           
  1086                           ;main.c: 149: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1087  0004CE  0E00               	movlw	low main@buf
  1088  0004D0  6E30               	movwf	sprintf@sp,c
  1089  0004D2  0E01               	movlw	high main@buf
  1090  0004D4  6E31               	movwf	sprintf@sp+1,c
  1091  0004D6  0E0B               	movlw	low STR_6
  1092  0004D8  6E32               	movwf	sprintf@f,c
  1093  0004DA  0E03               	movlw	high STR_6
  1094  0004DC  6E33               	movwf	sprintf@f+1,c
  1095  0004DE  C1C9  F034         	movff	main@SensorResult,?_sprintf+4
  1096  0004E2  C1CA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1097  0004E6  C1CB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1098  0004EA  C1CC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1099  0004EE  EC5E  F008         	call	_sprintf	;wreg free
  1100                           
  1101                           ;main.c: 150: LCD_String(buf);
  1102  0004F2  0E00               	movlw	low main@buf
  1103  0004F4  6E2A               	movwf	LCD_String@string,c
  1104  0004F6  0E01               	movlw	high main@buf
  1105  0004F8  6E2B               	movwf	LCD_String@string+1,c
  1106  0004FA  EC3F  F00D         	call	_LCD_String	;wreg free
  1107                           
  1108                           ;main.c: 151: }
  1109                           ;main.c: 153: break;
  1110  0004FE  D2FC               	goto	l3596
  1111  000500                     l3438:
  1112                           
  1113                           ;main.c: 157: initMotorPWM();
  1114  000500  EC41  F00E         	call	_initMotorPWM	;wreg free
  1115                           
  1116                           ;main.c: 158: initTimer();
  1117  000504  EC35  F00F         	call	_initTimer	;wreg free
  1118                           
  1119                           ;main.c: 159: initRFID();
  1120  000508  EC27  F00F         	call	_initRFID	;wreg free
  1121                           
  1122                           ;main.c: 160: initLCD();
  1123  00050C  EC5E  F00B         	call	_initLCD	;wreg free
  1124                           
  1125                           ;main.c: 161: initIR();
  1126  000510  EC07  F00F         	call	_initIR	;wreg free
  1127                           
  1128                           ;main.c: 163: enableSensor(0, 1);
  1129  000514  0E01               	movlw	1
  1130  000516  6E24               	movwf	enableSensor@status,c
  1131  000518  0E00               	movlw	0
  1132  00051A  ECE1  F00E         	call	_enableSensor
  1133                           
  1134                           ;main.c: 164: enableSensor(1, 1);
  1135  00051E  0E01               	movlw	1
  1136  000520  6E24               	movwf	enableSensor@status,c
  1137  000522  0E01               	movlw	1
  1138  000524  ECE1  F00E         	call	_enableSensor
  1139                           
  1140                           ;main.c: 167: fullSpeedAhead(&mL, &mR, 100);
  1141  000528  0ED0               	movlw	low main@mL
  1142  00052A  0100               	movlb	0	; () banked
  1143  00052C  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1144  00052E  0E01               	movlw	high main@mL
  1145  000530  0100               	movlb	0	; () banked
  1146  000532  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1147  000534  0ED9               	movlw	low main@mR
  1148  000536  0100               	movlb	0	; () banked
  1149  000538  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1150  00053A  0E01               	movlw	high main@mR
  1151  00053C  0100               	movlb	0	; () banked
  1152  00053E  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1153  000540  0E64               	movlw	100
  1154  000542  0100               	movlb	0	; () banked
  1155  000544  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1156  000546  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  1157                           
  1158                           ;main.c: 168: delay_tenth_s(1);
  1159  00054A  0E01               	movlw	1
  1160  00054C  EC5E  F00E         	call	_delay_tenth_s
  1161  000550  D2D2               	goto	l3592
  1162  000552                     l3458:
  1163                           
  1164                           ;main.c: 176: SetLine(1);
  1165  000552  0E01               	movlw	1
  1166  000554  ECB1  F00E         	call	_SetLine
  1167                           
  1168                           ;main.c: 177: LCD_String("Searching");
  1169  000558  0E44               	movlw	low STR_7
  1170  00055A  6E2A               	movwf	LCD_String@string,c
  1171  00055C  0E03               	movlw	high STR_7
  1172  00055E  6E2B               	movwf	LCD_String@string+1,c
  1173  000560  EC3F  F00D         	call	_LCD_String	;wreg free
  1174                           
  1175                           ;main.c: 179: if (DirectionFound==-1) {
  1176  000564  0101               	movlb	1	; () banked
  1177  000566  29CD               	incf	main@DirectionFound& (0+255),w,b
  1178  000568  A4D8               	btfss	status,2,c
  1179  00056A  D03E               	goto	l3476
  1180                           
  1181                           ; BSR set to: 1
  1182                           ;main.c: 184: MoveType[Move]=0;
  1183  00056C  0101               	movlb	1	; () banked
  1184  00056E  51CF               	movf	main@Move& (0+255),w,b
  1185  000570  0D01               	mullw	1
  1186  000572  0E28               	movlw	low main@MoveType
  1187  000574  24F3               	addwf	prodl,w,c
  1188  000576  6ED9               	movwf	fsr2l,c
  1189  000578  0E01               	movlw	high main@MoveType
  1190  00057A  20F4               	addwfc	prodh,w,c
  1191  00057C  6EDA               	movwf	fsr2h,c
  1192  00057E  0E00               	movlw	0
  1193  000580  6EDF               	movwf	indf2,c
  1194                           
  1195                           ;main.c: 185: MoveTime[Move]=6;
  1196  000582  0101               	movlb	1	; () banked
  1197  000584  51CF               	movf	main@Move& (0+255),w,b
  1198  000586  0D02               	mullw	2
  1199  000588  0E5A               	movlw	low main@MoveTime
  1200  00058A  24F3               	addwf	prodl,w,c
  1201  00058C  6ED9               	movwf	fsr2l,c
  1202  00058E  0E01               	movlw	high main@MoveTime
  1203  000590  20F4               	addwfc	prodh,w,c
  1204  000592  6EDA               	movwf	fsr2h,c
  1205  000594  0E06               	movlw	6
  1206  000596  6EDE               	movwf	postinc2,c
  1207  000598  0E00               	movlw	0
  1208  00059A  6EDD               	movwf	postdec2,c
  1209                           
  1210                           ; BSR set to: 1
  1211                           ;main.c: 186: Move++;
  1212  00059C  0101               	movlb	1	; () banked
  1213  00059E  2BCF               	incf	main@Move& (0+255),f,b
  1214                           
  1215                           ; BSR set to: 1
  1216                           ;main.c: 187: fullSpeedAhead(&mL, &mR, 100);
  1217  0005A0  0ED0               	movlw	low main@mL
  1218  0005A2  0100               	movlb	0	; () banked
  1219  0005A4  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1220  0005A6  0E01               	movlw	high main@mL
  1221  0005A8  0100               	movlb	0	; () banked
  1222  0005AA  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1223  0005AC  0ED9               	movlw	low main@mR
  1224  0005AE  0100               	movlb	0	; () banked
  1225  0005B0  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1226  0005B2  0E01               	movlw	high main@mR
  1227  0005B4  0100               	movlb	0	; () banked
  1228  0005B6  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1229  0005B8  0E64               	movlw	100
  1230  0005BA  0100               	movlb	0	; () banked
  1231  0005BC  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1232  0005BE  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  1233                           
  1234                           ;main.c: 188: delay_tenth_s(6);
  1235  0005C2  0E06               	movlw	6
  1236  0005C4  EC5E  F00E         	call	_delay_tenth_s
  1237                           
  1238                           ;main.c: 189: stop(&mL,&mR);
  1239  0005C8  0ED0               	movlw	low main@mL
  1240  0005CA  0100               	movlb	0	; () banked
  1241  0005CC  6F62               	movwf	stop@mL& (0+255),b
  1242  0005CE  0E01               	movlw	high main@mL
  1243  0005D0  0100               	movlb	0	; () banked
  1244  0005D2  6F63               	movwf	(stop@mL+1)& (0+255),b
  1245  0005D4  0ED9               	movlw	low main@mR
  1246  0005D6  0100               	movlb	0	; () banked
  1247  0005D8  6F64               	movwf	stop@mR& (0+255),b
  1248  0005DA  0E01               	movlw	high main@mR
  1249  0005DC  0100               	movlb	0	; () banked
  1250  0005DE  6F65               	movwf	(stop@mR+1)& (0+255),b
  1251  0005E0  ECBC  F00B         	call	_stop	;wreg free
  1252                           
  1253                           ;main.c: 190: DirectionFound=0;
  1254  0005E4  0E00               	movlw	0
  1255  0005E6  D042               	goto	L2
  1256  0005E8                     l3476:
  1257                           
  1258                           ; BSR set to: 1
  1259  0005E8  0101               	movlb	1	; () banked
  1260  0005EA  51CD               	movf	main@DirectionFound& (0+255),w,b
  1261  0005EC  0101               	movlb	1	; () banked
  1262  0005EE  A4D8               	btfss	status,2,c
  1263  0005F0  D02B               	goto	l3480
  1264                           
  1265                           ; BSR set to: 1
  1266                           ;main.c: 193: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1267                           ;main.c: 194: &MoveTime, &Move, &MoveType, &RFID_Read);
  1268  0005F2  0ED0               	movlw	low main@mL
  1269  0005F4  0100               	movlb	0	; () banked
  1270  0005F6  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1271  0005F8  0E01               	movlw	high main@mL
  1272  0005FA  0100               	movlb	0	; () banked
  1273  0005FC  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1274  0005FE  0ED9               	movlw	low main@mR
  1275  000600  0100               	movlb	0	; () banked
  1276  000602  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1277  000604  0E01               	movlw	high main@mR
  1278  000606  0100               	movlb	0	; () banked
  1279  000608  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1280  00060A  C1C8  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1281  00060E  0100               	movlb	0	; () banked
  1282  000610  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1283  000612  0E5A               	movlw	low main@MoveTime
  1284  000614  0100               	movlb	0	; () banked
  1285  000616  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1286  000618  0E01               	movlw	high main@MoveTime
  1287  00061A  0100               	movlb	0	; () banked
  1288  00061C  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1289  00061E  0ECF               	movlw	low main@Move
  1290  000620  0100               	movlb	0	; () banked
  1291  000622  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1292  000624  0E01               	movlw	high main@Move
  1293  000626  0100               	movlb	0	; () banked
  1294  000628  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1295  00062A  0E28               	movlw	low main@MoveType
  1296  00062C  0100               	movlb	0	; () banked
  1297  00062E  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1298  000630  0E01               	movlw	high main@MoveType
  1299  000632  0100               	movlb	0	; () banked
  1300  000634  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1301  000636  0EF6               	movlw	low _RFID_Read
  1302  000638  0100               	movlb	0	; () banked
  1303  00063A  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1304  00063C  0E01               	movlw	high _RFID_Read
  1305  00063E  0100               	movlb	0	; () banked
  1306  000640  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1307  000642  EC8D  F005         	call	_ScanWithRange	;wreg free
  1308  000646  D012               	goto	L2
  1309  000648                     l3480:
  1310                           
  1311                           ; BSR set to: 1
  1312  000648  0101               	movlb	1	; () banked
  1313  00064A  05CD               	decf	main@DirectionFound& (0+255),w,b
  1314  00064C  A4D8               	btfss	status,2,c
  1315  00064E  D011               	goto	l3484
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;main.c: 197: DirectionFound=ScanIR(&mL, &mR);
  1319  000650  0ED0               	movlw	low main@mL
  1320  000652  0100               	movlb	0	; () banked
  1321  000654  6F6D               	movwf	ScanIR@mL& (0+255),b
  1322  000656  0E01               	movlw	high main@mL
  1323  000658  0100               	movlb	0	; () banked
  1324  00065A  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1325  00065C  0ED9               	movlw	low main@mR
  1326  00065E  0100               	movlb	0	; () banked
  1327  000660  6F6F               	movwf	ScanIR@mR& (0+255),b
  1328  000662  0E01               	movlw	high main@mR
  1329  000664  0100               	movlb	0	; () banked
  1330  000666  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1331  000668  EC7E  F00A         	call	_ScanIR	;wreg free
  1332  00066C                     L2:
  1333  00066C  0101               	movlb	1	; () banked
  1334  00066E  6FCD               	movwf	main@DirectionFound& (0+255),b
  1335                           
  1336                           ;main.c: 198: } else if (DirectionFound==2) {
  1337  000670  D243               	goto	l3596
  1338  000672                     l3484:
  1339                           
  1340                           ; BSR set to: 1
  1341  000672  0E02               	movlw	2
  1342  000674  0101               	movlb	1	; () banked
  1343  000676  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1344  000678  A4D8               	btfss	status,2,c
  1345  00067A  D23E               	goto	l3596
  1346                           
  1347                           ; BSR set to: 1
  1348                           ;main.c: 200: mode=2;
  1349  00067C  0E02               	movlw	2
  1350  00067E  6E3B               	movwf	_mode,c	;volatile
  1351                           
  1352                           ; BSR set to: 1
  1353                           ;main.c: 201: MoveType[Move]=1;
  1354  000680  0101               	movlb	1	; () banked
  1355  000682  51CF               	movf	main@Move& (0+255),w,b
  1356  000684  0D01               	mullw	1
  1357  000686  0E28               	movlw	low main@MoveType
  1358  000688  24F3               	addwf	prodl,w,c
  1359  00068A  6ED9               	movwf	fsr2l,c
  1360  00068C  0E01               	movlw	high main@MoveType
  1361  00068E  20F4               	addwfc	prodh,w,c
  1362  000690  6EDA               	movwf	fsr2h,c
  1363  000692  0E01               	movlw	1
  1364  000694  6EDF               	movwf	indf2,c
  1365                           
  1366                           ; BSR set to: 1
  1367                           ;main.c: 202: }
  1368                           ;main.c: 204: break;
  1369                           
  1370                           ; BSR set to: 1
  1371                           
  1372                           ; BSR set to: 1
  1373                           
  1374                           ; BSR set to: 1
  1375  000696  D230               	goto	l3596
  1376  000698                     l3490:
  1377                           
  1378                           ;main.c: 211: if (RFID_Read) {
  1379  000698  0101               	movlb	1	; () banked
  1380  00069A  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1381  00069C  B4D8               	btfsc	status,2,c
  1382  00069E  D0A2               	goto	l3532
  1383                           
  1384                           ; BSR set to: 1
  1385                           ;main.c: 212: stop(&mL, &mR);
  1386  0006A0  0ED0               	movlw	low main@mL
  1387  0006A2  0100               	movlb	0	; () banked
  1388  0006A4  6F62               	movwf	stop@mL& (0+255),b
  1389  0006A6  0E01               	movlw	high main@mL
  1390  0006A8  0100               	movlb	0	; () banked
  1391  0006AA  6F63               	movwf	(stop@mL+1)& (0+255),b
  1392  0006AC  0ED9               	movlw	low main@mR
  1393  0006AE  0100               	movlb	0	; () banked
  1394  0006B0  6F64               	movwf	stop@mR& (0+255),b
  1395  0006B2  0E01               	movlw	high main@mR
  1396  0006B4  0100               	movlb	0	; () banked
  1397  0006B6  6F65               	movwf	(stop@mR+1)& (0+255),b
  1398  0006B8  ECBC  F00B         	call	_stop	;wreg free
  1399                           
  1400                           ;main.c: 213: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1401  0006BC  0E03               	movlw	3
  1402  0006BE  0101               	movlb	1	; () banked
  1403  0006C0  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1404  0006C2  A4D8               	btfss	status,2,c
  1405  0006C4  D002               	goto	u2860
  1406  0006C6  0E01               	movlw	1
  1407  0006C8  D001               	goto	u2862
  1408  0006CA                     u2860:
  1409  0006CA  0E00               	movlw	0
  1410  0006CC                     u2862:
  1411  0006CC  0100               	movlb	0	; () banked
  1412  0006CE  6FBA               	movwf	??_main& (0+255),b
  1413  0006D0  0E02               	movlw	2
  1414  0006D2  0101               	movlb	1	; () banked
  1415  0006D4  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1416  0006D6  A4D8               	btfss	status,2,c
  1417  0006D8  D002               	goto	u2870
  1418  0006DA  0E01               	movlw	1
  1419  0006DC  D001               	goto	u2872
  1420  0006DE                     u2870:
  1421  0006DE  0E00               	movlw	0
  1422  0006E0                     u2872:
  1423  0006E0  0100               	movlb	0	; () banked
  1424  0006E2  15BA               	andwf	??_main& (0+255),w,b
  1425  0006E4  A0E8               	btfss	wreg,0,c
  1426  0006E6  D208               	goto	l3596
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;main.c: 214: if (VerifySignal(&ReceivedString)){
  1430  0006E8  0EE6               	movlw	low _ReceivedString
  1431  0006EA  6E24               	movwf	VerifySignal@Signal,c
  1432  0006EC  0E01               	movlw	high _ReceivedString
  1433  0006EE  6E25               	movwf	VerifySignal@Signal+1,c
  1434  0006F0  EC6E  F00D         	call	_VerifySignal	;wreg free
  1435  0006F4  0900               	iorlw	0
  1436  0006F6  B4D8               	btfsc	status,2,c
  1437  0006F8  D041               	goto	l3524
  1438                           
  1439                           ;main.c: 216: for (i=0; i<10; i++){
  1440  0006FA  0E00               	movlw	0
  1441  0006FC  0101               	movlb	1	; () banked
  1442  0006FE  6FCE               	movwf	main@i& (0+255),b
  1443  000700                     l3500:
  1444                           
  1445                           ; BSR set to: 1
  1446  000700  0E09               	movlw	9
  1447  000702  0101               	movlb	1	; () banked
  1448  000704  65CE               	cpfsgt	main@i& (0+255),b
  1449  000706  D001               	goto	l3504
  1450  000708  D020               	goto	l3510
  1451  00070A                     l3504:
  1452                           
  1453                           ; BSR set to: 1
  1454                           ;main.c: 217: Message[i] = ReceivedString[i+1];
  1455  00070A  0101               	movlb	1	; () banked
  1456  00070C  51CE               	movf	main@i& (0+255),w,b
  1457  00070E  0100               	movlb	0	; () banked
  1458  000710  6FBA               	movwf	??_main& (0+255),b
  1459  000712  6BBB               	clrf	(??_main+1)& (0+255),b
  1460  000714  0E01               	movlw	1
  1461  000716  0100               	movlb	0	; () banked
  1462  000718  27BA               	addwf	??_main& (0+255),f,b
  1463  00071A  0E00               	movlw	0
  1464  00071C  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1465  00071E  0EE6               	movlw	low _ReceivedString
  1466  000720  0100               	movlb	0	; () banked
  1467  000722  25BA               	addwf	??_main& (0+255),w,b
  1468  000724  6ED9               	movwf	fsr2l,c
  1469  000726  0E01               	movlw	high _ReceivedString
  1470  000728  0100               	movlb	0	; () banked
  1471  00072A  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1472  00072C  6EDA               	movwf	fsr2h,c
  1473  00072E  0101               	movlb	1	; () banked
  1474  000730  51CE               	movf	main@i& (0+255),w,b
  1475  000732  0D01               	mullw	1
  1476  000734  0EBE               	movlw	low main@Message
  1477  000736  24F3               	addwf	prodl,w,c
  1478  000738  6EE1               	movwf	fsr1l,c
  1479  00073A  0E01               	movlw	high main@Message
  1480  00073C  20F4               	addwfc	prodh,w,c
  1481  00073E  6EE2               	movwf	fsr1h,c
  1482  000740  CFDF FFE7          	movff	indf2,indf1
  1483                           
  1484                           ; BSR set to: 1
  1485  000744  0101               	movlb	1	; () banked
  1486  000746  2BCE               	incf	main@i& (0+255),f,b
  1487  000748  D7DB               	goto	l3500
  1488  00074A                     l3510:
  1489                           
  1490                           ; BSR set to: 1
  1491                           ;main.c: 218: }
  1492                           ;main.c: 221: for (i=0; i<16; i++) {
  1493  00074A  0E00               	movlw	0
  1494  00074C  0101               	movlb	1	; () banked
  1495  00074E  6FCE               	movwf	main@i& (0+255),b
  1496  000750                     l3512:
  1497                           
  1498                           ; BSR set to: 1
  1499  000750  0E0F               	movlw	15
  1500  000752  0101               	movlb	1	; () banked
  1501  000754  65CE               	cpfsgt	main@i& (0+255),b
  1502  000756  D001               	goto	l3516
  1503  000758  D00E               	goto	l3522
  1504  00075A                     l3516:
  1505                           
  1506                           ; BSR set to: 1
  1507                           ;main.c: 222: ReceivedString[i]=0;
  1508  00075A  0101               	movlb	1	; () banked
  1509  00075C  51CE               	movf	main@i& (0+255),w,b
  1510  00075E  0D01               	mullw	1
  1511  000760  0EE6               	movlw	low _ReceivedString
  1512  000762  24F3               	addwf	prodl,w,c
  1513  000764  6ED9               	movwf	fsr2l,c
  1514  000766  0E01               	movlw	high _ReceivedString
  1515  000768  20F4               	addwfc	prodh,w,c
  1516  00076A  6EDA               	movwf	fsr2h,c
  1517  00076C  0E00               	movlw	0
  1518  00076E  6EDF               	movwf	indf2,c
  1519                           
  1520                           ; BSR set to: 1
  1521  000770  0101               	movlb	1	; () banked
  1522  000772  2BCE               	incf	main@i& (0+255),f,b
  1523  000774  D7ED               	goto	l3512
  1524  000776                     l3522:
  1525                           
  1526                           ; BSR set to: 1
  1527                           ;main.c: 223: }
  1528                           ;main.c: 224: mode=3;
  1529  000776  0E03               	movlw	3
  1530  000778  6E3B               	movwf	_mode,c	;volatile
  1531                           
  1532                           ;main.c: 226: } else {
  1533  00077A  D1BE               	goto	l3596
  1534  00077C                     l3524:
  1535                           
  1536                           ;main.c: 227: fullSpeedBack(&mL,&mR, 100);
  1537  00077C  0ED0               	movlw	low main@mL
  1538  00077E  0100               	movlb	0	; () banked
  1539  000780  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1540  000782  0E01               	movlw	high main@mL
  1541  000784  0100               	movlb	0	; () banked
  1542  000786  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1543  000788  0ED9               	movlw	low main@mR
  1544  00078A  0100               	movlb	0	; () banked
  1545  00078C  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1546  00078E  0E01               	movlw	high main@mR
  1547  000790  0100               	movlb	0	; () banked
  1548  000792  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1549  000794  0E64               	movlw	100
  1550  000796  0100               	movlb	0	; () banked
  1551  000798  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1552  00079A  ECE4  F00D         	call	_fullSpeedBack	;wreg free
  1553                           
  1554                           ;main.c: 228: delay_tenth_s(5);
  1555  00079E  0E05               	movlw	5
  1556  0007A0  EC5E  F00E         	call	_delay_tenth_s
  1557                           
  1558                           ;main.c: 229: stop(&mL,&mR);
  1559  0007A4  0ED0               	movlw	low main@mL
  1560  0007A6  0100               	movlb	0	; () banked
  1561  0007A8  6F62               	movwf	stop@mL& (0+255),b
  1562  0007AA  0E01               	movlw	high main@mL
  1563  0007AC  0100               	movlb	0	; () banked
  1564  0007AE  6F63               	movwf	(stop@mL+1)& (0+255),b
  1565  0007B0  0ED9               	movlw	low main@mR
  1566  0007B2  0100               	movlb	0	; () banked
  1567  0007B4  6F64               	movwf	stop@mR& (0+255),b
  1568  0007B6  0E01               	movlw	high main@mR
  1569  0007B8  0100               	movlb	0	; () banked
  1570  0007BA  6F65               	movwf	(stop@mR+1)& (0+255),b
  1571  0007BC  ECBC  F00B         	call	_stop	;wreg free
  1572                           
  1573                           ;main.c: 230: fullSpeedAhead(&mL,&mR, 100);
  1574  0007C0  0ED0               	movlw	low main@mL
  1575  0007C2  0100               	movlb	0	; () banked
  1576  0007C4  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1577  0007C6  0E01               	movlw	high main@mL
  1578  0007C8  0100               	movlb	0	; () banked
  1579  0007CA  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1580  0007CC  0ED9               	movlw	low main@mR
  1581  0007CE  0100               	movlb	0	; () banked
  1582  0007D0  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1583  0007D2  0E01               	movlw	high main@mR
  1584  0007D4  0100               	movlb	0	; () banked
  1585  0007D6  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1586  0007D8  0E64               	movlw	100
  1587  0007DA  0100               	movlb	0	; () banked
  1588  0007DC  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1589  0007DE  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  1590                           
  1591                           ;main.c: 231: }
  1592                           ;main.c: 232: }
  1593                           ;main.c: 233: } else {
  1594  0007E2  D18A               	goto	l3596
  1595  0007E4                     l3532:
  1596                           
  1597                           ;main.c: 234: DirectionFound=1;
  1598  0007E4  0E01               	movlw	1
  1599  0007E6  0101               	movlb	1	; () banked
  1600  0007E8  6FCD               	movwf	main@DirectionFound& (0+255),b
  1601                           
  1602                           ;main.c: 235: mode=1;
  1603  0007EA  0E01               	movlw	1
  1604  0007EC  6E3B               	movwf	_mode,c	;volatile
  1605                           
  1606                           ; BSR set to: 1
  1607                           ;main.c: 237: fullSpeedAhead(&mL,&mR, 100);
  1608  0007EE  0ED0               	movlw	low main@mL
  1609  0007F0  0100               	movlb	0	; () banked
  1610  0007F2  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1611  0007F4  0E01               	movlw	high main@mL
  1612  0007F6  0100               	movlb	0	; () banked
  1613  0007F8  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1614  0007FA  0ED9               	movlw	low main@mR
  1615  0007FC  0100               	movlb	0	; () banked
  1616  0007FE  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1617  000800  0E01               	movlw	high main@mR
  1618  000802  0100               	movlb	0	; () banked
  1619  000804  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1620  000806  0E64               	movlw	100
  1621  000808  0100               	movlb	0	; () banked
  1622  00080A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1623  00080C  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  1624                           
  1625                           ;main.c: 238: delay_tenth_s(1);
  1626  000810  0E01               	movlw	1
  1627  000812  EC5E  F00E         	call	_delay_tenth_s
  1628                           
  1629                           ;main.c: 239: MoveType[Move] = 0;
  1630  000816  0101               	movlb	1	; () banked
  1631  000818  51CF               	movf	main@Move& (0+255),w,b
  1632  00081A  0D01               	mullw	1
  1633  00081C  0E28               	movlw	low main@MoveType
  1634  00081E  24F3               	addwf	prodl,w,c
  1635  000820  6ED9               	movwf	fsr2l,c
  1636  000822  0E01               	movlw	high main@MoveType
  1637  000824  20F4               	addwfc	prodh,w,c
  1638  000826  6EDA               	movwf	fsr2h,c
  1639  000828  0E00               	movlw	0
  1640  00082A  6EDF               	movwf	indf2,c
  1641                           
  1642                           ; BSR set to: 1
  1643                           ;main.c: 240: MoveTime[Move] = 5;
  1644  00082C  0101               	movlb	1	; () banked
  1645  00082E  51CF               	movf	main@Move& (0+255),w,b
  1646  000830  0D02               	mullw	2
  1647  000832  0E5A               	movlw	low main@MoveTime
  1648  000834  24F3               	addwf	prodl,w,c
  1649  000836  6ED9               	movwf	fsr2l,c
  1650  000838  0E01               	movlw	high main@MoveTime
  1651  00083A  20F4               	addwfc	prodh,w,c
  1652  00083C  6EDA               	movwf	fsr2h,c
  1653  00083E  0E05               	movlw	5
  1654  000840  6EDE               	movwf	postinc2,c
  1655  000842  0E00               	movlw	0
  1656  000844  6EDD               	movwf	postdec2,c
  1657                           
  1658                           ; BSR set to: 1
  1659                           ;main.c: 241: Move++;
  1660  000846  0101               	movlb	1	; () banked
  1661  000848  2BCF               	incf	main@Move& (0+255),f,b
  1662                           
  1663                           ; BSR set to: 1
  1664                           ;main.c: 242: }
  1665                           ;main.c: 244: break;
  1666  00084A  D156               	goto	l3596
  1667  00084C                     l3544:
  1668                           
  1669                           ;main.c: 249: SetLine(1);
  1670  00084C  0E01               	movlw	1
  1671  00084E  ECB1  F00E         	call	_SetLine
  1672                           
  1673                           ;main.c: 250: LCD_String(Message);
  1674  000852  0EBE               	movlw	low main@Message
  1675  000854  6E2A               	movwf	LCD_String@string,c
  1676  000856  0E01               	movlw	high main@Message
  1677  000858  6E2B               	movwf	LCD_String@string+1,c
  1678  00085A  EC3F  F00D         	call	_LCD_String	;wreg free
  1679                           
  1680                           ;main.c: 251: SetLine(2);
  1681  00085E  0E02               	movlw	2
  1682  000860  ECB1  F00E         	call	_SetLine
  1683                           
  1684                           ;main.c: 252: LCD_String("Going Home");
  1685  000864  0E39               	movlw	low STR_8
  1686  000866  6E2A               	movwf	LCD_String@string,c
  1687  000868  0E03               	movlw	high STR_8
  1688  00086A  6E2B               	movwf	LCD_String@string+1,c
  1689  00086C  EC3F  F00D         	call	_LCD_String	;wreg free
  1690  000870                     l3550:
  1691  000870  0101               	movlb	1	; () banked
  1692  000872  BFCF               	btfsc	main@Move& (0+255),7,b
  1693  000874  D132               	goto	l3590
  1694                           
  1695                           ; BSR set to: 1
  1696                           ;main.c: 255: stop(&mL,&mR);
  1697                           
  1698                           ; BSR set to: 1
  1699                           
  1700                           ; BSR set to: 1
  1701  000876  0ED0               	movlw	low main@mL
  1702  000878  0100               	movlb	0	; () banked
  1703  00087A  6F62               	movwf	stop@mL& (0+255),b
  1704  00087C  0E01               	movlw	high main@mL
  1705  00087E  0100               	movlb	0	; () banked
  1706  000880  6F63               	movwf	(stop@mL+1)& (0+255),b
  1707  000882  0ED9               	movlw	low main@mR
  1708  000884  0100               	movlb	0	; () banked
  1709  000886  6F64               	movwf	stop@mR& (0+255),b
  1710  000888  0E01               	movlw	high main@mR
  1711  00088A  0100               	movlb	0	; () banked
  1712  00088C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1713  00088E  ECBC  F00B         	call	_stop	;wreg free
  1714                           
  1715                           ;main.c: 256: if (MoveType[Move]==0) {
  1716  000892  0101               	movlb	1	; () banked
  1717  000894  51CF               	movf	main@Move& (0+255),w,b
  1718  000896  0D01               	mullw	1
  1719  000898  0E28               	movlw	low main@MoveType
  1720  00089A  24F3               	addwf	prodl,w,c
  1721  00089C  6ED9               	movwf	fsr2l,c
  1722  00089E  0E01               	movlw	high main@MoveType
  1723  0008A0  20F4               	addwfc	prodh,w,c
  1724  0008A2  6EDA               	movwf	fsr2h,c
  1725  0008A4  50DF               	movf	indf2,w,c
  1726  0008A6  A4D8               	btfss	status,2,c
  1727  0008A8  D01E               	goto	l3560
  1728                           
  1729                           ; BSR set to: 1
  1730                           ;main.c: 257: fullSpeedBack(&mL,&mR,100);
  1731  0008AA  0ED0               	movlw	low main@mL
  1732  0008AC  0100               	movlb	0	; () banked
  1733  0008AE  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1734  0008B0  0E01               	movlw	high main@mL
  1735  0008B2  0100               	movlb	0	; () banked
  1736  0008B4  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1737  0008B6  0ED9               	movlw	low main@mR
  1738  0008B8  0100               	movlb	0	; () banked
  1739  0008BA  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1740  0008BC  0E01               	movlw	high main@mR
  1741  0008BE  0100               	movlb	0	; () banked
  1742  0008C0  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1743  0008C2  0E64               	movlw	100
  1744  0008C4  0100               	movlb	0	; () banked
  1745  0008C6  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1746  0008C8  ECE4  F00D         	call	_fullSpeedBack	;wreg free
  1747                           
  1748                           ;main.c: 258: delay_tenth_s(MoveTime[Move]);
  1749  0008CC  0101               	movlb	1	; () banked
  1750  0008CE  51CF               	movf	main@Move& (0+255),w,b
  1751  0008D0  0D02               	mullw	2
  1752  0008D2  0E5A               	movlw	low main@MoveTime
  1753  0008D4  24F3               	addwf	prodl,w,c
  1754  0008D6  6ED9               	movwf	fsr2l,c
  1755  0008D8  0E01               	movlw	high main@MoveTime
  1756  0008DA  20F4               	addwfc	prodh,w,c
  1757  0008DC  6EDA               	movwf	fsr2h,c
  1758  0008DE  50DF               	movf	indf2,w,c
  1759  0008E0  EC5E  F00E         	call	_delay_tenth_s
  1760                           
  1761                           ;main.c: 259: } else if (MoveType[Move]==1) {
  1762  0008E4  D0F7               	goto	l3586
  1763  0008E6                     l3560:
  1764  0008E6  0101               	movlb	1	; () banked
  1765  0008E8  51CF               	movf	main@Move& (0+255),w,b
  1766  0008EA  0D01               	mullw	1
  1767  0008EC  0E28               	movlw	low main@MoveType
  1768  0008EE  24F3               	addwf	prodl,w,c
  1769  0008F0  6ED9               	movwf	fsr2l,c
  1770  0008F2  0E01               	movlw	high main@MoveType
  1771  0008F4  20F4               	addwfc	prodh,w,c
  1772  0008F6  6EDA               	movwf	fsr2h,c
  1773  0008F8  04DE               	decf	postinc2,w,c
  1774  0008FA  A4D8               	btfss	status,2,c
  1775  0008FC  D091               	goto	l3578
  1776                           
  1777                           ; BSR set to: 1
  1778                           ;main.c: 260: T0CONbits.TMR0ON=0;
  1779  0008FE  9ED5               	bcf	4053,7,c	;volatile
  1780                           
  1781                           ; BSR set to: 1
  1782                           ;main.c: 261: TMR0L = 0;
  1783  000900  0E00               	movlw	0
  1784  000902  6ED6               	movwf	4054,c	;volatile
  1785                           
  1786                           ;main.c: 262: TMR0H = 0;
  1787  000904  0E00               	movlw	0
  1788  000906  6ED7               	movwf	4055,c	;volatile
  1789                           
  1790                           ; BSR set to: 1
  1791                           ;main.c: 263: if (MoveTime[Move]>0) {
  1792  000908  0101               	movlb	1	; () banked
  1793  00090A  51CF               	movf	main@Move& (0+255),w,b
  1794  00090C  0D02               	mullw	2
  1795  00090E  0E5A               	movlw	low main@MoveTime
  1796  000910  24F3               	addwf	prodl,w,c
  1797  000912  6ED9               	movwf	fsr2l,c
  1798  000914  0E01               	movlw	high main@MoveTime
  1799  000916  20F4               	addwfc	prodh,w,c
  1800  000918  6EDA               	movwf	fsr2h,c
  1801  00091A  0E01               	movlw	1
  1802  00091C  BEDB               	btfsc	plusw2,7,c
  1803  00091E  D03D               	goto	l426
  1804  000920  0E01               	movlw	1
  1805  000922  50DB               	movf	plusw2,w,c
  1806  000924  E103               	bnz	u2970
  1807  000926  04DE               	decf	postinc2,w,c
  1808  000928  A0D8               	btfss	status,0,c
  1809  00092A  D037               	goto	l426
  1810  00092C                     u2970:
  1811                           
  1812                           ; BSR set to: 1
  1813                           ;main.c: 264: T0CONbits.TMR0ON=1;
  1814  00092C  8ED5               	bsf	4053,7,c	;volatile
  1815                           
  1816                           ; BSR set to: 1
  1817                           ;main.c: 265: turnRight(&mL,&mR,40);
  1818  00092E  0ED0               	movlw	low main@mL
  1819  000930  0100               	movlb	0	; () banked
  1820  000932  6F67               	movwf	turnRight@mL& (0+255),b
  1821  000934  0E01               	movlw	high main@mL
  1822  000936  0100               	movlb	0	; () banked
  1823  000938  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1824  00093A  0ED9               	movlw	low main@mR
  1825  00093C  0100               	movlb	0	; () banked
  1826  00093E  6F69               	movwf	turnRight@mR& (0+255),b
  1827  000940  0E01               	movlw	high main@mR
  1828  000942  0100               	movlb	0	; () banked
  1829  000944  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1830  000946  0E28               	movlw	40
  1831  000948  0100               	movlb	0	; () banked
  1832  00094A  6F6B               	movwf	turnRight@power& (0+255),b
  1833  00094C  EC03  F00E         	call	_turnRight	;wreg free
  1834  000950                     l3572:
  1835  000950  0101               	movlb	1	; () banked
  1836  000952  51CF               	movf	main@Move& (0+255),w,b
  1837  000954  0D02               	mullw	2
  1838  000956  0E5A               	movlw	low main@MoveTime
  1839  000958  24F3               	addwf	prodl,w,c
  1840  00095A  6ED9               	movwf	fsr2l,c
  1841  00095C  0E01               	movlw	high main@MoveTime
  1842  00095E  20F4               	addwfc	prodh,w,c
  1843  000960  6EDA               	movwf	fsr2h,c
  1844  000962  50D6               	movf	4054,w,c	;volatile
  1845  000964  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1846  000968  0100               	movlb	0	; () banked
  1847  00096A  6BBD               	clrf	(??_main+3)& (0+255),b
  1848  00096C  C0BC  F0BD         	movff	??_main+2,??_main+3
  1849  000970  0100               	movlb	0	; () banked
  1850  000972  6BBC               	clrf	(??_main+2)& (0+255),b
  1851  000974  0100               	movlb	0	; () banked
  1852  000976  27BC               	addwf	(??_main+2)& (0+255),f,b
  1853  000978  0E00               	movlw	0
  1854  00097A  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1855  00097C  50DE               	movf	postinc2,w,c
  1856  00097E  0100               	movlb	0	; () banked
  1857  000980  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1858  000982  0100               	movlb	0	; () banked
  1859  000984  51BD               	movf	(??_main+3)& (0+255),w,b
  1860  000986  0A80               	xorlw	128
  1861  000988  0100               	movlb	0	; () banked
  1862  00098A  6FBE               	movwf	(??_main+4)& (0+255),b
  1863  00098C  50DE               	movf	postinc2,w,c
  1864  00098E  0A80               	xorlw	128
  1865  000990  0100               	movlb	0	; () banked
  1866  000992  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1867  000994  A0D8               	btfss	status,0,c
  1868  000996  D7DC               	goto	l3572
  1869  000998  D041               	goto	l433
  1870  00099A                     l426:
  1871                           
  1872                           ; BSR set to: 1
  1873                           ;main.c: 270: T0CONbits.TMR0ON=1;
  1874  00099A  8ED5               	bsf	4053,7,c	;volatile
  1875                           
  1876                           ; BSR set to: 1
  1877                           ;main.c: 271: turnLeft(&mL,&mR,40);
  1878  00099C  0ED0               	movlw	low main@mL
  1879  00099E  0100               	movlb	0	; () banked
  1880  0009A0  6F67               	movwf	turnLeft@mL& (0+255),b
  1881  0009A2  0E01               	movlw	high main@mL
  1882  0009A4  0100               	movlb	0	; () banked
  1883  0009A6  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1884  0009A8  0ED9               	movlw	low main@mR
  1885  0009AA  0100               	movlb	0	; () banked
  1886  0009AC  6F69               	movwf	turnLeft@mR& (0+255),b
  1887  0009AE  0E01               	movlw	high main@mR
  1888  0009B0  0100               	movlb	0	; () banked
  1889  0009B2  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1890  0009B4  0E28               	movlw	40
  1891  0009B6  0100               	movlb	0	; () banked
  1892  0009B8  6F6B               	movwf	turnLeft@power& (0+255),b
  1893  0009BA  EC22  F00E         	call	_turnLeft	;wreg free
  1894  0009BE                     l3576:
  1895  0009BE  0101               	movlb	1	; () banked
  1896  0009C0  51CF               	movf	main@Move& (0+255),w,b
  1897  0009C2  0D02               	mullw	2
  1898  0009C4  0E5A               	movlw	low main@MoveTime
  1899  0009C6  24F3               	addwf	prodl,w,c
  1900  0009C8  6ED9               	movwf	fsr2l,c
  1901  0009CA  0E01               	movlw	high main@MoveTime
  1902  0009CC  20F4               	addwfc	prodh,w,c
  1903  0009CE  6EDA               	movwf	fsr2h,c
  1904  0009D0  CFDE F0BA          	movff	postinc2,??_main
  1905  0009D4  CFDD F0BB          	movff	postdec2,??_main+1
  1906  0009D8  0100               	movlb	0	; () banked
  1907  0009DA  1FBA               	comf	??_main& (0+255),f,b
  1908  0009DC  1FBB               	comf	(??_main+1)& (0+255),f,b
  1909  0009DE  4BBA               	infsnz	??_main& (0+255),f,b
  1910  0009E0  2BBB               	incf	(??_main+1)& (0+255),f,b
  1911  0009E2  50D6               	movf	4054,w,c	;volatile
  1912  0009E4  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1913  0009E8  0100               	movlb	0	; () banked
  1914  0009EA  6BBD               	clrf	(??_main+3)& (0+255),b
  1915  0009EC  C0BC  F0BD         	movff	??_main+2,??_main+3
  1916  0009F0  0100               	movlb	0	; () banked
  1917  0009F2  6BBC               	clrf	(??_main+2)& (0+255),b
  1918  0009F4  0100               	movlb	0	; () banked
  1919  0009F6  27BC               	addwf	(??_main+2)& (0+255),f,b
  1920  0009F8  0E00               	movlw	0
  1921  0009FA  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1922  0009FC  0100               	movlb	0	; () banked
  1923  0009FE  51BA               	movf	??_main& (0+255),w,b
  1924  000A00  0100               	movlb	0	; () banked
  1925  000A02  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1926  000A04  0100               	movlb	0	; () banked
  1927  000A06  51BD               	movf	(??_main+3)& (0+255),w,b
  1928  000A08  0A80               	xorlw	128
  1929  000A0A  0100               	movlb	0	; () banked
  1930  000A0C  6FBE               	movwf	(??_main+4)& (0+255),b
  1931  000A0E  0100               	movlb	0	; () banked
  1932  000A10  51BB               	movf	(??_main+1)& (0+255),w,b
  1933  000A12  0A80               	xorlw	128
  1934  000A14  0100               	movlb	0	; () banked
  1935  000A16  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1936  000A18  A0D8               	btfss	status,0,c
  1937  000A1A  D7D1               	goto	l3576
  1938  000A1C                     l433:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;main.c: 274: T0CONbits.TMR0ON=0;
  1942  000A1C  9ED5               	bcf	4053,7,c	;volatile
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 275: }
  1946                           ;main.c: 276: } else if (MoveType[Move]==2) {
  1947  000A1E  D05A               	goto	l3586
  1948  000A20                     l3578:
  1949  000A20  0101               	movlb	1	; () banked
  1950  000A22  51CF               	movf	main@Move& (0+255),w,b
  1951  000A24  0D01               	mullw	1
  1952  000A26  0E28               	movlw	low main@MoveType
  1953  000A28  24F3               	addwf	prodl,w,c
  1954  000A2A  6ED9               	movwf	fsr2l,c
  1955  000A2C  0E01               	movlw	high main@MoveType
  1956  000A2E  20F4               	addwfc	prodh,w,c
  1957  000A30  6EDA               	movwf	fsr2h,c
  1958  000A32  0E02               	movlw	2
  1959  000A34  18DE               	xorwf	postinc2,w,c
  1960  000A36  A4D8               	btfss	status,2,c
  1961  000A38  D04D               	goto	l3586
  1962                           
  1963                           ; BSR set to: 1
  1964                           ;main.c: 277: if (MoveTime[Move]>0) {
  1965  000A3A  0101               	movlb	1	; () banked
  1966  000A3C  51CF               	movf	main@Move& (0+255),w,b
  1967  000A3E  0D02               	mullw	2
  1968  000A40  0E5A               	movlw	low main@MoveTime
  1969  000A42  24F3               	addwf	prodl,w,c
  1970  000A44  6ED9               	movwf	fsr2l,c
  1971  000A46  0E01               	movlw	high main@MoveTime
  1972  000A48  20F4               	addwfc	prodh,w,c
  1973  000A4A  6EDA               	movwf	fsr2h,c
  1974  000A4C  0E01               	movlw	1
  1975  000A4E  BEDB               	btfsc	plusw2,7,c
  1976  000A50  D024               	goto	l3584
  1977  000A52  0E01               	movlw	1
  1978  000A54  50DB               	movf	plusw2,w,c
  1979  000A56  E103               	bnz	u3010
  1980  000A58  04DE               	decf	postinc2,w,c
  1981  000A5A  A0D8               	btfss	status,0,c
  1982  000A5C  D01E               	goto	l3584
  1983  000A5E                     u3010:
  1984                           
  1985                           ; BSR set to: 1
  1986                           ;main.c: 278: turnRight(&mL,&mR,100);
  1987  000A5E  0ED0               	movlw	low main@mL
  1988  000A60  0100               	movlb	0	; () banked
  1989  000A62  6F67               	movwf	turnRight@mL& (0+255),b
  1990  000A64  0E01               	movlw	high main@mL
  1991  000A66  0100               	movlb	0	; () banked
  1992  000A68  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1993  000A6A  0ED9               	movlw	low main@mR
  1994  000A6C  0100               	movlb	0	; () banked
  1995  000A6E  6F69               	movwf	turnRight@mR& (0+255),b
  1996  000A70  0E01               	movlw	high main@mR
  1997  000A72  0100               	movlb	0	; () banked
  1998  000A74  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1999  000A76  0E64               	movlw	100
  2000  000A78  0100               	movlb	0	; () banked
  2001  000A7A  6F6B               	movwf	turnRight@power& (0+255),b
  2002  000A7C  EC03  F00E         	call	_turnRight	;wreg free
  2003                           
  2004                           ;main.c: 279: delay_tenth_s(MoveTime[Move]);
  2005  000A80  0101               	movlb	1	; () banked
  2006  000A82  51CF               	movf	main@Move& (0+255),w,b
  2007  000A84  0D02               	mullw	2
  2008  000A86  0E5A               	movlw	low main@MoveTime
  2009  000A88  24F3               	addwf	prodl,w,c
  2010  000A8A  6ED9               	movwf	fsr2l,c
  2011  000A8C  0E01               	movlw	high main@MoveTime
  2012  000A8E  20F4               	addwfc	prodh,w,c
  2013  000A90  6EDA               	movwf	fsr2h,c
  2014  000A92  50DF               	movf	indf2,w,c
  2015  000A94  EC5E  F00E         	call	_delay_tenth_s
  2016                           
  2017                           ;main.c: 280: } else {
  2018  000A98  D01D               	goto	l3586
  2019  000A9A                     l3584:
  2020                           
  2021                           ;main.c: 281: turnLeft(&mL,&mR,100);
  2022  000A9A  0ED0               	movlw	low main@mL
  2023  000A9C  0100               	movlb	0	; () banked
  2024  000A9E  6F67               	movwf	turnLeft@mL& (0+255),b
  2025  000AA0  0E01               	movlw	high main@mL
  2026  000AA2  0100               	movlb	0	; () banked
  2027  000AA4  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2028  000AA6  0ED9               	movlw	low main@mR
  2029  000AA8  0100               	movlb	0	; () banked
  2030  000AAA  6F69               	movwf	turnLeft@mR& (0+255),b
  2031  000AAC  0E01               	movlw	high main@mR
  2032  000AAE  0100               	movlb	0	; () banked
  2033  000AB0  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2034  000AB2  0E64               	movlw	100
  2035  000AB4  0100               	movlb	0	; () banked
  2036  000AB6  6F6B               	movwf	turnLeft@power& (0+255),b
  2037  000AB8  EC22  F00E         	call	_turnLeft	;wreg free
  2038                           
  2039                           ;main.c: 282: delay_tenth_s(MoveTime[Move]);
  2040  000ABC  0101               	movlb	1	; () banked
  2041  000ABE  51CF               	movf	main@Move& (0+255),w,b
  2042  000AC0  0D02               	mullw	2
  2043  000AC2  0E5A               	movlw	low main@MoveTime
  2044  000AC4  24F3               	addwf	prodl,w,c
  2045  000AC6  6ED9               	movwf	fsr2l,c
  2046  000AC8  0E01               	movlw	high main@MoveTime
  2047  000ACA  20F4               	addwfc	prodh,w,c
  2048  000ACC  6EDA               	movwf	fsr2h,c
  2049  000ACE  50DF               	movf	indf2,w,c
  2050  000AD0  EC5E  F00E         	call	_delay_tenth_s
  2051  000AD4                     l3586:
  2052  000AD4  0101               	movlb	1	; () banked
  2053  000AD6  07CF               	decf	main@Move& (0+255),f,b
  2054  000AD8  D6CB               	goto	l3550
  2055  000ADA                     l3590:
  2056                           
  2057                           ; BSR set to: 1
  2058                           ;main.c: 283: }
  2059                           ;main.c: 284: }
  2060                           ;main.c: 285: }
  2061                           ;main.c: 286: stop(&mL,&mR);
  2062  000ADA  0ED0               	movlw	low main@mL
  2063  000ADC  0100               	movlb	0	; () banked
  2064  000ADE  6F62               	movwf	stop@mL& (0+255),b
  2065  000AE0  0E01               	movlw	high main@mL
  2066  000AE2  0100               	movlb	0	; () banked
  2067  000AE4  6F63               	movwf	(stop@mL+1)& (0+255),b
  2068  000AE6  0ED9               	movlw	low main@mR
  2069  000AE8  0100               	movlb	0	; () banked
  2070  000AEA  6F64               	movwf	stop@mR& (0+255),b
  2071  000AEC  0E01               	movlw	high main@mR
  2072  000AEE  0100               	movlb	0	; () banked
  2073  000AF0  6F65               	movwf	(stop@mR+1)& (0+255),b
  2074  000AF2  ECBC  F00B         	call	_stop	;wreg free
  2075  000AF6                     l3592:
  2076                           
  2077                           ;main.c: 287: mode=-1;
  2078  000AF6  683B               	setf	_mode,c	;volatile
  2079  000AF8                     l3596:
  2080  000AF8  503B               	movf	_mode,w,c	;volatile
  2081                           
  2082                           ; Switch size 1, requested type "space"
  2083                           ; Number of cases is 5, Range of values is 0 to 255
  2084                           ; switch strategies available:
  2085                           ; Name         Instructions Cycles
  2086                           ; simple_byte           16     9 (average)
  2087                           ;	Chosen strategy is simple_byte
  2088  000AFA  0A00               	xorlw	0	; case 0
  2089  000AFC  B4D8               	btfsc	status,2,c
  2090  000AFE  D500               	goto	l3438
  2091  000B00  0A01               	xorlw	1	; case 1
  2092  000B02  B4D8               	btfsc	status,2,c
  2093  000B04  D526               	goto	l3458
  2094  000B06  0A03               	xorlw	3	; case 2
  2095  000B08  B4D8               	btfsc	status,2,c
  2096  000B0A  D5C6               	goto	l3490
  2097  000B0C  0A01               	xorlw	1	; case 3
  2098  000B0E  B4D8               	btfsc	status,2,c
  2099  000B10  D69D               	goto	l3544
  2100  000B12  0AFC               	xorlw	252	; case 255
  2101  000B14  B4D8               	btfsc	status,2,c
  2102  000B16  D485               	goto	l3398
  2103  000B18  D7EF               	goto	l3596
  2104  000B1A                     __end_of_main:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           prodh	equ	0xFF4
  2108                           prodl	equ	0xFF3
  2109                           intcon	equ	0xFF2
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           indf1	equ	0xFE7
  2113                           plusw1	equ	0xFE3
  2114                           fsr1h	equ	0xFE2
  2115                           fsr1l	equ	0xFE1
  2116                           indf2	equ	0xFDF
  2117                           postinc2	equ	0xFDE
  2118                           postdec2	equ	0xFDD
  2119                           plusw2	equ	0xFDB
  2120                           fsr2h	equ	0xFDA
  2121                           fsr2l	equ	0xFD9
  2122                           status	equ	0xFD8
  2123                           
  2124 ;; *************** function _initTimer *****************
  2125 ;; Defined at:
  2126 ;;		line 8 in file "Movement.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;		None
  2129 ;; Auto vars:     Size  Location     Type
  2130 ;;		None
  2131 ;; Return value:  Size  Location     Type
  2132 ;;		None               void
  2133 ;; Registers used:
  2134 ;;		None
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2140 ;;      Params:         0       0       0       0
  2141 ;;      Locals:         0       0       0       0
  2142 ;;      Temps:          0       0       0       0
  2143 ;;      Totals:         0       0       0       0
  2144 ;;Total ram usage:        0 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    3
  2147 ;; This function calls:
  2148 ;;		Nothing
  2149 ;; This function is called by:
  2150 ;;		_main
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text1
  2155  001E6A                     __ptext1:
  2156                           	opt stack 0
  2157  001E6A                     _initTimer:
  2158                           	opt stack 27
  2159                           
  2160                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2161                           
  2162                           ;incstack = 0
  2163  001E6A  9ED5               	bcf	4053,7,c	;volatile
  2164                           
  2165                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2166  001E6C  9CD5               	bcf	4053,6,c	;volatile
  2167                           
  2168                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2169  001E6E  9AD5               	bcf	4053,5,c	;volatile
  2170                           
  2171                           ;Movement.c: 13: T0CONbits.PSA=0;
  2172  001E70  96D5               	bcf	4053,3,c	;volatile
  2173                           
  2174                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2175  001E72  80D5               	bsf	4053,0,c	;volatile
  2176  001E74  82D5               	bsf	4053,1,c	;volatile
  2177  001E76  84D5               	bsf	4053,2,c	;volatile
  2178                           
  2179                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2180  001E78  9AF2               	bcf	intcon,5,c	;volatile
  2181  001E7A  0012               	return		;funcret
  2182  001E7C                     __end_of_initTimer:
  2183                           	opt stack 0
  2184                           tblptru	equ	0xFF8
  2185                           prodh	equ	0xFF4
  2186                           prodl	equ	0xFF3
  2187                           intcon	equ	0xFF2
  2188                           postinc0	equ	0xFEE
  2189                           wreg	equ	0xFE8
  2190                           indf1	equ	0xFE7
  2191                           plusw1	equ	0xFE3
  2192                           fsr1h	equ	0xFE2
  2193                           fsr1l	equ	0xFE1
  2194                           indf2	equ	0xFDF
  2195                           postinc2	equ	0xFDE
  2196                           postdec2	equ	0xFDD
  2197                           plusw2	equ	0xFDB
  2198                           fsr2h	equ	0xFDA
  2199                           fsr2l	equ	0xFD9
  2200                           status	equ	0xFD8
  2201                           
  2202 ;; *************** function _initRFID *****************
  2203 ;; Defined at:
  2204 ;;		line 8 in file "RFID_Reader.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;		None               void
  2211 ;; Registers used:
  2212 ;;		wreg, status,2, status,0
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2218 ;;      Params:         0       0       0       0
  2219 ;;      Locals:         0       0       0       0
  2220 ;;      Temps:          0       0       0       0
  2221 ;;      Totals:         0       0       0       0
  2222 ;;Total ram usage:        0 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    3
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_main
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text2
  2233  001E4E                     __ptext2:
  2234                           	opt stack 0
  2235  001E4E                     _initRFID:
  2236                           	opt stack 27
  2237                           
  2238                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2239                           
  2240                           ;incstack = 0
  2241  001E4E  5094               	movf	3988,w,c	;volatile
  2242  001E50  09C0               	iorlw	192
  2243  001E52  6E94               	movwf	3988,c	;volatile
  2244                           
  2245                           ;RFID_Reader.c: 13: SPBRG=205;
  2246  001E54  0ECD               	movlw	205
  2247  001E56  6EAF               	movwf	4015,c	;volatile
  2248                           
  2249                           ;RFID_Reader.c: 14: SPBRGH=0;
  2250  001E58  0E00               	movlw	0
  2251  001E5A  6EB0               	movwf	4016,c	;volatile
  2252                           
  2253                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2254  001E5C  86AA               	bsf	4010,3,c	;volatile
  2255                           
  2256                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2257  001E5E  84AC               	bsf	4012,2,c	;volatile
  2258                           
  2259                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2260  001E60  88AB               	bsf	4011,4,c	;volatile
  2261                           
  2262                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2263  001E62  8EAB               	bsf	4011,7,c	;volatile
  2264                           
  2265                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2266  001E64  98AC               	bcf	4012,4,c	;volatile
  2267                           
  2268                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2269  001E66  9CAB               	bcf	4011,6,c	;volatile
  2270  001E68  0012               	return		;funcret
  2271  001E6A                     __end_of_initRFID:
  2272                           	opt stack 0
  2273                           tblptru	equ	0xFF8
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           intcon	equ	0xFF2
  2277                           postinc0	equ	0xFEE
  2278                           wreg	equ	0xFE8
  2279                           indf1	equ	0xFE7
  2280                           plusw1	equ	0xFE3
  2281                           fsr1h	equ	0xFE2
  2282                           fsr1l	equ	0xFE1
  2283                           indf2	equ	0xFDF
  2284                           postinc2	equ	0xFDE
  2285                           postdec2	equ	0xFDD
  2286                           plusw2	equ	0xFDB
  2287                           fsr2h	equ	0xFDA
  2288                           fsr2l	equ	0xFD9
  2289                           status	equ	0xFD8
  2290                           
  2291 ;; *************** function _initMotorPWM *****************
  2292 ;; Defined at:
  2293 ;;		line 4 in file "dc_motor.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;		None
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;		None
  2298 ;; Return value:  Size  Location     Type
  2299 ;;		None               void
  2300 ;; Registers used:
  2301 ;;		wreg, status,2
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2307 ;;      Params:         0       0       0       0
  2308 ;;      Locals:         0       0       0       0
  2309 ;;      Temps:          0       0       0       0
  2310 ;;      Totals:         0       0       0       0
  2311 ;;Total ram usage:        0 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    3
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text3
  2322  001C82                     __ptext3:
  2323                           	opt stack 0
  2324  001C82                     _initMotorPWM:
  2325                           	opt stack 27
  2326                           
  2327                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2328                           
  2329                           ;incstack = 0
  2330  001C82  0E00               	movlw	0
  2331  001C84  6E7F               	movwf	3967,c	;volatile
  2332                           
  2333                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2334  001C86  0E80               	movlw	128
  2335  001C88  6E7E               	movwf	3966,c	;volatile
  2336                           
  2337                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2338  001C8A  0E6F               	movlw	111
  2339  001C8C  6E6F               	movwf	3951,c	;volatile
  2340                           
  2341                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2342  001C8E  0E00               	movlw	0
  2343  001C90  6E6E               	movwf	3950,c	;volatile
  2344                           
  2345                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2346  001C92  0EC7               	movlw	199
  2347  001C94  6E7B               	movwf	3963,c	;volatile
  2348                           
  2349                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2350  001C96  0E00               	movlw	0
  2351  001C98  6E7A               	movwf	3962,c	;volatile
  2352                           
  2353                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2354  001C9A  0E00               	movlw	0
  2355  001C9C  6E79               	movwf	3961,c	;volatile
  2356                           
  2357                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2358  001C9E  0E00               	movlw	0
  2359  001CA0  6E78               	movwf	3960,c	;volatile
  2360                           
  2361                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2362  001CA2  0E00               	movlw	0
  2363  001CA4  6E77               	movwf	3959,c	;volatile
  2364                           
  2365                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2366  001CA6  0E00               	movlw	0
  2367  001CA8  6E76               	movwf	3958,c	;volatile
  2368                           
  2369                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2370  001CAA  9093               	bcf	3987,0,c	;volatile
  2371                           
  2372                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2373  001CAC  9293               	bcf	3987,1,c	;volatile
  2374                           
  2375                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2376  001CAE  9493               	bcf	3987,2,c	;volatile
  2377                           
  2378                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2379  001CB0  9693               	bcf	3987,3,c	;volatile
  2380                           
  2381                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2382  001CB2  908A               	bcf	3978,0,c	;volatile
  2383                           
  2384                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2385  001CB4  928A               	bcf	3978,1,c	;volatile
  2386                           
  2387                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2388  001CB6  948A               	bcf	3978,2,c	;volatile
  2389                           
  2390                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2391  001CB8  968A               	bcf	3978,3,c	;volatile
  2392  001CBA  0012               	return		;funcret
  2393  001CBC                     __end_of_initMotorPWM:
  2394                           	opt stack 0
  2395                           tblptru	equ	0xFF8
  2396                           prodh	equ	0xFF4
  2397                           prodl	equ	0xFF3
  2398                           intcon	equ	0xFF2
  2399                           postinc0	equ	0xFEE
  2400                           wreg	equ	0xFE8
  2401                           indf1	equ	0xFE7
  2402                           plusw1	equ	0xFE3
  2403                           fsr1h	equ	0xFE2
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           postdec2	equ	0xFDD
  2408                           plusw2	equ	0xFDB
  2409                           fsr2h	equ	0xFDA
  2410                           fsr2l	equ	0xFD9
  2411                           status	equ	0xFD8
  2412                           
  2413 ;; *************** function _initLCD *****************
  2414 ;; Defined at:
  2415 ;;		line 38 in file "LCD.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;		None
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;		None               void
  2422 ;; Registers used:
  2423 ;;		wreg, status,2, status,0, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2429 ;;      Params:         0       0       0       0
  2430 ;;      Locals:         0       0       0       0
  2431 ;;      Temps:          1       0       0       0
  2432 ;;      Totals:         1       0       0       0
  2433 ;;Total ram usage:        1 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    6
  2436 ;; This function calls:
  2437 ;;		_LCDout
  2438 ;;		_SendLCD
  2439 ;; This function is called by:
  2440 ;;		_main
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           	psect	text4
  2445  0016BC                     __ptext4:
  2446                           	opt stack 0
  2447  0016BC                     _initLCD:
  2448                           	opt stack 24
  2449                           
  2450                           ;LCD.c: 44: TRISAbits.RA6=0;
  2451                           
  2452                           ;incstack = 0
  2453  0016BC  9C92               	bcf	3986,6,c	;volatile
  2454                           
  2455                           ;LCD.c: 45: TRISCbits.RC0=0;
  2456  0016BE  9094               	bcf	3988,0,c	;volatile
  2457                           
  2458                           ;LCD.c: 46: TRISCbits.RC1=0;
  2459  0016C0  9294               	bcf	3988,1,c	;volatile
  2460                           
  2461                           ;LCD.c: 47: TRISCbits.RC2=0;
  2462  0016C2  9494               	bcf	3988,2,c	;volatile
  2463                           
  2464                           ;LCD.c: 48: TRISDbits.RD0=0;
  2465  0016C4  9095               	bcf	3989,0,c	;volatile
  2466                           
  2467                           ;LCD.c: 49: TRISDbits.RD1=0;
  2468  0016C6  9295               	bcf	3989,1,c	;volatile
  2469                           
  2470                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2471  0016C8  0E27               	movlw	39
  2472  0016CA  6E2A               	movwf	??_initLCD& (0+255),c
  2473  0016CC  0EF5               	movlw	245
  2474  0016CE                     u3057:
  2475  0016CE  2EE8               	decfsz	wreg,f,c
  2476  0016D0  D7FE               	goto	u3057
  2477  0016D2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2478  0016D4  D7FC               	goto	u3057
  2479  0016D6  F000               	nop	
  2480                           
  2481                           ;LCD.c: 52: LCDout(0b0011);
  2482  0016D8  0E03               	movlw	3
  2483  0016DA  ECFB  F00A         	call	_LCDout
  2484                           
  2485                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2486  0016DE  0E0D               	movlw	13
  2487  0016E0  6E2A               	movwf	??_initLCD& (0+255),c
  2488  0016E2  0EFC               	movlw	252
  2489  0016E4                     u3067:
  2490  0016E4  2EE8               	decfsz	wreg,f,c
  2491  0016E6  D7FE               	goto	u3067
  2492  0016E8  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2493  0016EA  D7FC               	goto	u3067
  2494                           
  2495                           ;LCD.c: 54: LCDout(0b0011);
  2496  0016EC  0E03               	movlw	3
  2497  0016EE  ECFB  F00A         	call	_LCDout
  2498                           
  2499                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2500  0016F2  0E85               	movlw	133
  2501  0016F4                     u3077:
  2502  0016F4  2EE8               	decfsz	wreg,f,c
  2503  0016F6  D7FE               	goto	u3077
  2504  0016F8  F000               	nop	
  2505                           
  2506                           ;LCD.c: 56: LCDout(0b0011);
  2507  0016FA  0E03               	movlw	3
  2508  0016FC  ECFB  F00A         	call	_LCDout
  2509                           
  2510                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2511  001700  0E21               	movlw	33
  2512  001702                     u3087:
  2513  001702  2EE8               	decfsz	wreg,f,c
  2514  001704  D7FE               	goto	u3087
  2515  001706  F000               	nop	
  2516                           
  2517                           ;LCD.c: 58: LCDout(0b0010);
  2518  001708  0E02               	movlw	2
  2519  00170A  ECFB  F00A         	call	_LCDout
  2520                           
  2521                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2522  00170E  0E21               	movlw	33
  2523  001710                     u3097:
  2524  001710  2EE8               	decfsz	wreg,f,c
  2525  001712  D7FE               	goto	u3097
  2526  001714  F000               	nop	
  2527                           
  2528                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2529  001716  0E00               	movlw	0
  2530  001718  6E28               	movwf	SendLCD@type,c
  2531  00171A  0E28               	movlw	40
  2532  00171C  ECC9  F00E         	call	_SendLCD
  2533                           
  2534                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2535  001720  0E21               	movlw	33
  2536  001722                     u3107:
  2537  001722  2EE8               	decfsz	wreg,f,c
  2538  001724  D7FE               	goto	u3107
  2539  001726  F000               	nop	
  2540                           
  2541                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2542  001728  0E00               	movlw	0
  2543  00172A  6E28               	movwf	SendLCD@type,c
  2544  00172C  0E08               	movlw	8
  2545  00172E  ECC9  F00E         	call	_SendLCD
  2546                           
  2547                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2548  001732  0E21               	movlw	33
  2549  001734                     u3117:
  2550  001734  2EE8               	decfsz	wreg,f,c
  2551  001736  D7FE               	goto	u3117
  2552  001738  F000               	nop	
  2553                           
  2554                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2555  00173A  0E00               	movlw	0
  2556  00173C  6E28               	movwf	SendLCD@type,c
  2557  00173E  0E01               	movlw	1
  2558  001740  ECC9  F00E         	call	_SendLCD
  2559                           
  2560                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2561  001744  0E0D               	movlw	13
  2562  001746  6E2A               	movwf	??_initLCD& (0+255),c
  2563  001748  0EFC               	movlw	252
  2564  00174A                     u3127:
  2565  00174A  2EE8               	decfsz	wreg,f,c
  2566  00174C  D7FE               	goto	u3127
  2567  00174E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2568  001750  D7FC               	goto	u3127
  2569                           
  2570                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2571  001752  0E00               	movlw	0
  2572  001754  6E28               	movwf	SendLCD@type,c
  2573  001756  0E06               	movlw	6
  2574  001758  ECC9  F00E         	call	_SendLCD
  2575                           
  2576                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2577  00175C  0E21               	movlw	33
  2578  00175E                     u3137:
  2579  00175E  2EE8               	decfsz	wreg,f,c
  2580  001760  D7FE               	goto	u3137
  2581  001762  F000               	nop	
  2582                           
  2583                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2584  001764  0E00               	movlw	0
  2585  001766  6E28               	movwf	SendLCD@type,c
  2586  001768  0E0C               	movlw	12
  2587  00176A  ECC9  F00E         	call	_SendLCD
  2588                           
  2589                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2590  00176E  0E21               	movlw	33
  2591  001770                     u3147:
  2592  001770  2EE8               	decfsz	wreg,f,c
  2593  001772  D7FE               	goto	u3147
  2594  001774  F000               	nop	
  2595  001776  0012               	return		;funcret
  2596  001778                     __end_of_initLCD:
  2597                           	opt stack 0
  2598                           tblptru	equ	0xFF8
  2599                           prodh	equ	0xFF4
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           postinc0	equ	0xFEE
  2603                           wreg	equ	0xFE8
  2604                           indf1	equ	0xFE7
  2605                           plusw1	equ	0xFE3
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           indf2	equ	0xFDF
  2609                           postinc2	equ	0xFDE
  2610                           postdec2	equ	0xFDD
  2611                           plusw2	equ	0xFDB
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function _initIR *****************
  2617 ;; Defined at:
  2618 ;;		line 30 in file "IR_Reading.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;		None
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;		None
  2623 ;; Return value:  Size  Location     Type
  2624 ;;		None               void
  2625 ;; Registers used:
  2626 ;;		wreg, status,2
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2632 ;;      Params:         0       0       0       0
  2633 ;;      Locals:         0       0       0       0
  2634 ;;      Temps:          0       0       0       0
  2635 ;;      Totals:         0       0       0       0
  2636 ;;Total ram usage:        0 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    3
  2639 ;; This function calls:
  2640 ;;		Nothing
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text5
  2647  001E0E                     __ptext5:
  2648                           	opt stack 0
  2649  001E0E                     _initIR:
  2650                           	opt stack 27
  2651                           
  2652                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2653                           
  2654                           ;incstack = 0
  2655  001E0E  9489               	bcf	3977,2,c	;volatile
  2656                           
  2657                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2658  001E10  9689               	bcf	3977,3,c	;volatile
  2659                           
  2660                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2661  001E12  8492               	bsf	3986,2,c	;volatile
  2662                           
  2663                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2664  001E14  8692               	bsf	3986,3,c	;volatile
  2665                           
  2666                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2667  001E16  94B8               	bcf	4024,2,c	;volatile
  2668                           
  2669                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2670  001E18  96B8               	bcf	4024,3,c	;volatile
  2671                           
  2672                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2673  001E1A  9CB8               	bcf	4024,6,c	;volatile
  2674                           
  2675                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2676  001E1C  9EB8               	bcf	4024,7,c	;volatile
  2677                           
  2678                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2679  001E1E  0E06               	movlw	6
  2680  001E20  6E63               	movwf	3939,c	;volatile
  2681                           
  2682                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2683  001E22  0E06               	movlw	6
  2684  001E24  6E62               	movwf	3938,c	;volatile
  2685                           
  2686                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2687  001E26  9096               	bcf	3990,0,c	;volatile
  2688                           
  2689                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2690  001E28  9296               	bcf	3990,1,c	;volatile
  2691                           
  2692                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2693  001E2A  0E59               	movlw	89
  2694  001E2C  6EB7               	movwf	4023,c	;volatile
  2695  001E2E  0012               	return		;funcret
  2696  001E30                     __end_of_initIR:
  2697                           	opt stack 0
  2698                           tblptru	equ	0xFF8
  2699                           prodh	equ	0xFF4
  2700                           prodl	equ	0xFF3
  2701                           intcon	equ	0xFF2
  2702                           postinc0	equ	0xFEE
  2703                           wreg	equ	0xFE8
  2704                           indf1	equ	0xFE7
  2705                           plusw1	equ	0xFE3
  2706                           fsr1h	equ	0xFE2
  2707                           fsr1l	equ	0xFE1
  2708                           indf2	equ	0xFDF
  2709                           postinc2	equ	0xFDE
  2710                           postdec2	equ	0xFDD
  2711                           plusw2	equ	0xFDB
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function _fullSpeedBack *****************
  2717 ;; Defined at:
  2718 ;;		line 130 in file "dc_motor.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2721 ;;		 -> main@mL(9), 
  2722 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2723 ;;		 -> main@mR(9), 
  2724 ;;  power           1   11[BANK0 ] unsigned char 
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;		None
  2727 ;; Return value:  Size  Location     Type
  2728 ;;		None               void
  2729 ;; Registers used:
  2730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2736 ;;      Params:         0       5       0       0
  2737 ;;      Locals:         0       0       0       0
  2738 ;;      Temps:          0       0       0       0
  2739 ;;      Totals:         0       5       0       0
  2740 ;;Total ram usage:        5 bytes
  2741 ;; Hardware stack levels used:    1
  2742 ;; Hardware stack levels required when called:    6
  2743 ;; This function calls:
  2744 ;;		_fullSpeedAhead
  2745 ;; This function is called by:
  2746 ;;		_main
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text6
  2751  001BC8                     __ptext6:
  2752                           	opt stack 0
  2753  001BC8                     _fullSpeedBack:
  2754                           	opt stack 24
  2755                           
  2756                           ;dc_motor.c: 133: mL->direction=0;
  2757                           
  2758                           ;incstack = 0
  2759  001BC8  0100               	movlb	0	; () banked
  2760  001BCA  EE20 F001          	lfsr	2,1
  2761  001BCE  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2762  001BD0  26D9               	addwf	fsr2l,f,c
  2763  001BD2  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2764  001BD4  22DA               	addwfc	fsr2h,f,c
  2765  001BD6  0E00               	movlw	0
  2766  001BD8  6EDF               	movwf	indf2,c
  2767                           
  2768                           ;dc_motor.c: 134: mR->direction=0;
  2769  001BDA  0100               	movlb	0	; () banked
  2770  001BDC  EE20 F001          	lfsr	2,1
  2771  001BE0  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2772  001BE2  26D9               	addwf	fsr2l,f,c
  2773  001BE4  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2774  001BE6  22DA               	addwfc	fsr2h,f,c
  2775  001BE8  0E00               	movlw	0
  2776  001BEA  6EDF               	movwf	indf2,c
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;dc_motor.c: 135: fullSpeedAhead(mL, mR, power);
  2780  001BEC  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2781  001BF0  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2782  001BF4  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2783  001BF8  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2784  001BFC  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2785  001C00  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  2786  001C04  0012               	return		;funcret
  2787  001C06                     __end_of_fullSpeedBack:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           intcon	equ	0xFF2
  2793                           postinc0	equ	0xFEE
  2794                           wreg	equ	0xFE8
  2795                           indf1	equ	0xFE7
  2796                           plusw1	equ	0xFE3
  2797                           fsr1h	equ	0xFE2
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           postinc2	equ	0xFDE
  2801                           postdec2	equ	0xFDD
  2802                           plusw2	equ	0xFDB
  2803                           fsr2h	equ	0xFDA
  2804                           fsr2l	equ	0xFD9
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _enableSensor *****************
  2808 ;; Defined at:
  2809 ;;		line 106 in file "IR_Reading.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;  sensor          1    wreg     unsigned char 
  2812 ;;  status          1   35[COMRAM] unsigned char 
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;  sensor          1   36[COMRAM] unsigned char 
  2815 ;; Return value:  Size  Location     Type
  2816 ;;		None               void
  2817 ;; Registers used:
  2818 ;;		wreg, status,2, status,0
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2824 ;;      Params:         1       0       0       0
  2825 ;;      Locals:         1       0       0       0
  2826 ;;      Temps:          0       0       0       0
  2827 ;;      Totals:         2       0       0       0
  2828 ;;Total ram usage:        2 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:    3
  2831 ;; This function calls:
  2832 ;;		Nothing
  2833 ;; This function is called by:
  2834 ;;		_main
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text7
  2839  001DC2                     __ptext7:
  2840                           	opt stack 0
  2841  001DC2                     _enableSensor:
  2842                           	opt stack 27
  2843                           
  2844                           ;incstack = 0
  2845                           ;enableSensor@sensor stored from wreg
  2846  001DC2  6E25               	movwf	enableSensor@sensor,c
  2847                           
  2848                           ;IR_Reading.c: 108: if (sensor==0){
  2849  001DC4  5025               	movf	enableSensor@sensor,w,c
  2850  001DC6  A4D8               	btfss	status,2,c
  2851  001DC8  D006               	goto	l2428
  2852                           
  2853                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2854  001DCA  B024               	btfsc	enableSensor@status,0,c
  2855  001DCC  D002               	bra	u1835
  2856  001DCE  908D               	bcf	3981,0,c	;volatile
  2857  001DD0  D001               	bra	u1836
  2858  001DD2                     u1835:
  2859  001DD2  808D               	bsf	3981,0,c	;volatile
  2860  001DD4                     u1836:
  2861                           
  2862                           ;IR_Reading.c: 110: } else if (sensor==1){
  2863  001DD4  0012               	return	
  2864  001DD6                     l2428:
  2865  001DD6  0425               	decf	enableSensor@sensor,w,c
  2866  001DD8  A4D8               	btfss	status,2,c
  2867  001DDA  0012               	return	
  2868                           
  2869                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2870  001DDC  B024               	btfsc	enableSensor@status,0,c
  2871  001DDE  D002               	bra	u1855
  2872  001DE0  928D               	bcf	3981,1,c	;volatile
  2873  001DE2  D001               	bra	u1856
  2874  001DE4                     u1855:
  2875  001DE4  828D               	bsf	3981,1,c	;volatile
  2876  001DE6                     u1856:
  2877  001DE6  0012               	return	
  2878  001DE8                     __end_of_enableSensor:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           prodh	equ	0xFF4
  2882                           prodl	equ	0xFF3
  2883                           intcon	equ	0xFF2
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           indf1	equ	0xFE7
  2887                           plusw1	equ	0xFE3
  2888                           fsr1h	equ	0xFE2
  2889                           fsr1l	equ	0xFE1
  2890                           indf2	equ	0xFDF
  2891                           postinc2	equ	0xFDE
  2892                           postdec2	equ	0xFDD
  2893                           plusw2	equ	0xFDB
  2894                           fsr2h	equ	0xFDA
  2895                           fsr2l	equ	0xFD9
  2896                           status	equ	0xFD8
  2897                           
  2898 ;; *************** function _VerifySignal *****************
  2899 ;; Defined at:
  2900 ;;		line 58 in file "RFID_Reader.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2903 ;;		 -> ReceivedString(16), 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  ptr             3    0        PTR unsigned char 
  2906 ;;  hexByte         2   43[COMRAM] unsigned int 
  2907 ;;  checksum        1   42[COMRAM] unsigned char 
  2908 ;;  i               1   41[COMRAM] unsigned char 
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  1    wreg      unsigned char 
  2911 ;; Registers used:
  2912 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2918 ;;      Params:         2       0       0       0
  2919 ;;      Locals:         4       0       0       0
  2920 ;;      Temps:          4       0       0       0
  2921 ;;      Totals:        10       0       0       0
  2922 ;;Total ram usage:       10 bytes
  2923 ;; Hardware stack levels used:    1
  2924 ;; Hardware stack levels required when called:    3
  2925 ;; This function calls:
  2926 ;;		Nothing
  2927 ;; This function is called by:
  2928 ;;		_main
  2929 ;; This function uses a non-reentrant model
  2930 ;;
  2931                           
  2932                           	psect	text8
  2933  001ADC                     __ptext8:
  2934                           	opt stack 0
  2935  001ADC                     _VerifySignal:
  2936                           	opt stack 27
  2937                           
  2938                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2939                           
  2940                           ;incstack = 0
  2941  001ADC  0E00               	movlw	0
  2942  001ADE  6E2B               	movwf	VerifySignal@checksum,c
  2943                           
  2944                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2945  001AE0  0E00               	movlw	0
  2946  001AE2  6E2D               	movwf	VerifySignal@hexByte+1,c
  2947  001AE4  0E00               	movlw	0
  2948  001AE6  6E2C               	movwf	VerifySignal@hexByte,c
  2949                           
  2950                           ;RFID_Reader.c: 61: unsigned char i=0;
  2951  001AE8  0E00               	movlw	0
  2952  001AEA  6E2A               	movwf	VerifySignal@i,c
  2953                           
  2954                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2955                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2956  001AEC  EE20 F004          	lfsr	2,4
  2957  001AF0  5024               	movf	VerifySignal@Signal,w,c
  2958  001AF2  26D9               	addwf	fsr2l,f,c
  2959  001AF4  5025               	movf	VerifySignal@Signal+1,w,c
  2960  001AF6  22DA               	addwfc	fsr2h,f,c
  2961  001AF8  50DF               	movf	indf2,w,c
  2962  001AFA  6E26               	movwf	??_VerifySignal& (0+255),c
  2963  001AFC  EE20 F003          	lfsr	2,3
  2964  001B00  5024               	movf	VerifySignal@Signal,w,c
  2965  001B02  26D9               	addwf	fsr2l,f,c
  2966  001B04  5025               	movf	VerifySignal@Signal+1,w,c
  2967  001B06  22DA               	addwfc	fsr2h,f,c
  2968  001B08  50DF               	movf	indf2,w,c
  2969  001B0A  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2970  001B0C  5027               	movf	??_VerifySignal+1,w,c
  2971  001B0E  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2972  001B10  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2973  001B12  5026               	movf	??_VerifySignal,w,c
  2974  001B14  2428               	addwf	??_VerifySignal+2,w,c
  2975  001B16  6E2C               	movwf	VerifySignal@hexByte,c
  2976  001B18  0E00               	movlw	0
  2977  001B1A  2029               	addwfc	??_VerifySignal+3,w,c
  2978  001B1C  6E2D               	movwf	VerifySignal@hexByte+1,c
  2979                           
  2980                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2981  001B1E  EE20 F002          	lfsr	2,2
  2982  001B22  5024               	movf	VerifySignal@Signal,w,c
  2983  001B24  26D9               	addwf	fsr2l,f,c
  2984  001B26  5025               	movf	VerifySignal@Signal+1,w,c
  2985  001B28  22DA               	addwfc	fsr2h,f,c
  2986  001B2A  50DF               	movf	indf2,w,c
  2987  001B2C  182C               	xorwf	VerifySignal@hexByte,w,c
  2988  001B2E  6E2B               	movwf	VerifySignal@checksum,c
  2989                           
  2990                           ;RFID_Reader.c: 75: return 1;
  2991  001B30  0E01               	movlw	1
  2992  001B32  0012               	return	
  2993  001B34                     __end_of_VerifySignal:
  2994                           	opt stack 0
  2995                           tblptru	equ	0xFF8
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           postinc0	equ	0xFEE
  3000                           wreg	equ	0xFE8
  3001                           indf1	equ	0xFE7
  3002                           plusw1	equ	0xFE3
  3003                           fsr1h	equ	0xFE2
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           postinc2	equ	0xFDE
  3007                           postdec2	equ	0xFDD
  3008                           plusw2	equ	0xFDB
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _ScanWithRange *****************
  3014 ;; Defined at:
  3015 ;;		line 98 in file "Movement.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3018 ;;		 -> main@mL(9), 
  3019 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3020 ;;		 -> main@mR(9), 
  3021 ;;  loops           2   17[BANK0 ] int 
  3022 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3023 ;;		 -> main@MoveTime(100), 
  3024 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  3025 ;;		 -> main@Move(1), 
  3026 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  3027 ;;		 -> main@MoveType(50), 
  3028 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  3029 ;;		 -> RFID_Read(1), 
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;  buf            40   32[BANK0 ] unsigned char [40]
  3032 ;;  SensorResult    4   84[BANK0 ] unsigned int [2]
  3033 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  3034 ;;  LeftFlag        2   81[BANK0 ] unsigned int 
  3035 ;;  DirectionFou    2   76[BANK0 ] const unsigned int 
  3036 ;;  i               2   74[BANK0 ] unsigned int 
  3037 ;;  n               2   72[BANK0 ] unsigned int 
  3038 ;;  TimeAboveThr    1   83[BANK0 ] unsigned char 
  3039 ;;  MiniLeftFlic    1   80[BANK0 ] const unsigned char 
  3040 ;;  LeftFlick       1   79[BANK0 ] const unsigned char 
  3041 ;;  MotorPower      1   78[BANK0 ] const unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      unsigned char 
  3044 ;; Registers used:
  3045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3051 ;;      Params:         0      14       0       0
  3052 ;;      Locals:         0      58       0       0
  3053 ;;      Temps:          0       5       0       0
  3054 ;;      Totals:         0      77       0       0
  3055 ;;Total ram usage:       77 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    7
  3058 ;; This function calls:
  3059 ;;		_LCD_String
  3060 ;;		_SendLCD
  3061 ;;		_SetLine
  3062 ;;		_delay_tenth_s
  3063 ;;		_grabLeftIR
  3064 ;;		_grabRightIR
  3065 ;;		_sprintf
  3066 ;;		_stop
  3067 ;;		_turnLeft
  3068 ;;		_turnRight
  3069 ;; This function is called by:
  3070 ;;		_main
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text9
  3075  000B1A                     __ptext9:
  3076                           	opt stack 0
  3077  000B1A                     _ScanWithRange:
  3078                           	opt stack 23
  3079                           
  3080                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3081                           
  3082                           ;incstack = 0
  3083  000B1A  C0F5  F0B4         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3084  000B1E  C0F6  F0B5         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3085  000B22  C0F7  F0B6         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3086  000B26  C0F8  F0B7         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3087                           
  3088                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3089  000B2A  0E00               	movlw	0
  3090  000B2C  0100               	movlb	0	; () banked
  3091  000B2E  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3092  000B30  0E00               	movlw	0
  3093  000B32  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3094                           
  3095                           ;Movement.c: 104: unsigned int RightFlag=0;
  3096  000B34  0E00               	movlw	0
  3097  000B36  0100               	movlb	0	; () banked
  3098  000B38  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3099  000B3A  0E00               	movlw	0
  3100  000B3C  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3101                           
  3102                           ;Movement.c: 105: char buf[40];
  3103                           ;Movement.c: 106: unsigned int i=0;
  3104  000B3E  0E00               	movlw	0
  3105  000B40  0100               	movlb	0	; () banked
  3106  000B42  6FAB               	movwf	(ScanWithRange@i+1)& (0+255),b
  3107  000B44  0E00               	movlw	0
  3108  000B46  6FAA               	movwf	ScanWithRange@i& (0+255),b
  3109                           
  3110                           ;Movement.c: 107: unsigned int n=0;
  3111  000B48  0E00               	movlw	0
  3112  000B4A  0100               	movlb	0	; () banked
  3113  000B4C  6FA9               	movwf	(ScanWithRange@n+1)& (0+255),b
  3114  000B4E  0E00               	movlw	0
  3115  000B50  6FA8               	movwf	ScanWithRange@n& (0+255),b
  3116                           
  3117                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  3118  000B52  0E00               	movlw	0
  3119  000B54  0100               	movlb	0	; () banked
  3120  000B56  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3121                           
  3122                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3123  000B58  0E03               	movlw	3
  3124  000B5A  0100               	movlb	0	; () banked
  3125  000B5C  6FAD               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3126  000B5E  0EE8               	movlw	232
  3127  000B60  6FAC               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3128                           
  3129                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3130  000B62  0E28               	movlw	40
  3131  000B64  0100               	movlb	0	; () banked
  3132  000B66  6FAE               	movwf	ScanWithRange@MotorPower& (0+255),b
  3133                           
  3134                           ;Movement.c: 114: const unsigned char LeftFlick=2;
  3135  000B68  0E02               	movlw	2
  3136  000B6A  0100               	movlb	0	; () banked
  3137  000B6C  6FAF               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3138                           
  3139                           ;Movement.c: 116: const unsigned char MiniLeftFlick=1;
  3140  000B6E  0E01               	movlw	1
  3141  000B70  0100               	movlb	0	; () banked
  3142  000B72  6FB0               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;Movement.c: 121: (MoveType[*Move]) = 2;
  3146  000B74  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3147  000B78  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3148  000B7C  50DF               	movf	indf2,w,c
  3149  000B7E  0100               	movlb	0	; () banked
  3150  000B80  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3151  000B82  0100               	movlb	0	; () banked
  3152  000B84  517B               	movf	??_ScanWithRange& (0+255),w,b
  3153  000B86  0D01               	mullw	1
  3154  000B88  50F3               	movf	prodl,w,c
  3155  000B8A  0100               	movlb	0	; () banked
  3156  000B8C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3157  000B8E  6ED9               	movwf	fsr2l,c
  3158  000B90  50F4               	movf	prodh,w,c
  3159  000B92  0100               	movlb	0	; () banked
  3160  000B94  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3161  000B96  6EDA               	movwf	fsr2h,c
  3162  000B98  0E02               	movlw	2
  3163  000B9A  6EDF               	movwf	indf2,c
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;Movement.c: 122: (MoveTime[*Move]) = LeftFlick;
  3167  000B9C  0100               	movlb	0	; () banked
  3168  000B9E  51AF               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3169  000BA0  0100               	movlb	0	; () banked
  3170  000BA2  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3171  000BA4  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3172  000BA6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3173  000BAA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3174  000BAE  50DF               	movf	indf2,w,c
  3175  000BB0  0100               	movlb	0	; () banked
  3176  000BB2  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3177  000BB4  0100               	movlb	0	; () banked
  3178  000BB6  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3179  000BB8  0D02               	mullw	2
  3180  000BBA  50F3               	movf	prodl,w,c
  3181  000BBC  0100               	movlb	0	; () banked
  3182  000BBE  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3183  000BC0  6ED9               	movwf	fsr2l,c
  3184  000BC2  50F4               	movf	prodh,w,c
  3185  000BC4  0100               	movlb	0	; () banked
  3186  000BC6  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3187  000BC8  6EDA               	movwf	fsr2h,c
  3188  000BCA  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3189  000BCE  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;Movement.c: 123: *Move = *Move+1;
  3193  000BD2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3194  000BD6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3195  000BDA  50DF               	movf	indf2,w,c
  3196  000BDC  0100               	movlb	0	; () banked
  3197  000BDE  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3198  000BE0  0100               	movlb	0	; () banked
  3199  000BE2  297B               	incf	??_ScanWithRange& (0+255),w,b
  3200  000BE4  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3201  000BE8  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3202  000BEC  6EDF               	movwf	indf2,c
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;Movement.c: 124: turnLeft(mL,mR, 100);
  3206  000BEE  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3207  000BF2  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3208  000BF6  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3209  000BFA  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3210  000BFE  0E64               	movlw	100
  3211  000C00  0100               	movlb	0	; () banked
  3212  000C02  6F6B               	movwf	turnLeft@power& (0+255),b
  3213  000C04  EC22  F00E         	call	_turnLeft	;wreg free
  3214                           
  3215                           ;Movement.c: 125: delay_tenth_s(LeftFlick);
  3216  000C08  0100               	movlb	0	; () banked
  3217  000C0A  51AF               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3218  000C0C  EC5E  F00E         	call	_delay_tenth_s
  3219                           
  3220                           ;Movement.c: 126: stop(mL,mR);
  3221  000C10  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3222  000C14  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3223  000C18  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3224  000C1C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3225  000C20  ECBC  F00B         	call	_stop	;wreg free
  3226                           
  3227                           ;Movement.c: 129: turnRight(mL,mR, MotorPower);
  3228  000C24  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3229  000C28  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3230  000C2C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3231  000C30  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3232  000C34  C0AE  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3233  000C38  EC03  F00E         	call	_turnRight	;wreg free
  3234                           
  3235                           ;Movement.c: 132: TMR0L = 0;
  3236  000C3C  0E00               	movlw	0
  3237  000C3E  6ED6               	movwf	4054,c	;volatile
  3238                           
  3239                           ;Movement.c: 133: TMR0H = 0;
  3240  000C40  0E00               	movlw	0
  3241  000C42  6ED7               	movwf	4055,c	;volatile
  3242                           
  3243                           ;Movement.c: 134: T0CONbits.TMR0ON=1;
  3244  000C44  8ED5               	bsf	4053,7,c	;volatile
  3245                           
  3246                           ;Movement.c: 136: for (i=1; i<=loops; i++) {
  3247  000C46  0E00               	movlw	0
  3248  000C48  0100               	movlb	0	; () banked
  3249  000C4A  6FAB               	movwf	(ScanWithRange@i+1)& (0+255),b
  3250  000C4C  0E01               	movlw	1
  3251  000C4E  6FAA               	movwf	ScanWithRange@i& (0+255),b
  3252  000C50  D1D7               	goto	l3330
  3253  000C52                     l3242:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;Movement.c: 139: SensorResult[0]=grabLeftIR();
  3257  000C52  EC06  F00D         	call	_grabLeftIR	;wreg free
  3258  000C56  C024  F0B4         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3259  000C5A  C025  F0B5         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3260                           
  3261                           ;Movement.c: 140: SensorResult[1]=grabRightIR();
  3262  000C5E  ECCD  F00C         	call	_grabRightIR	;wreg free
  3263  000C62  C024  F0B6         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3264  000C66  C025  F0B7         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3265                           
  3266                           ;Movement.c: 144: CAP1BUFH=0;
  3267  000C6A  0E00               	movlw	0
  3268  000C6C  6E69               	movwf	3945,c	;volatile
  3269                           
  3270                           ;Movement.c: 145: CAP1BUFL=0;
  3271  000C6E  0E00               	movlw	0
  3272  000C70  6E68               	movwf	3944,c	;volatile
  3273                           
  3274                           ;Movement.c: 146: CAP2BUFH=0;
  3275  000C72  0E00               	movlw	0
  3276  000C74  6E67               	movwf	3943,c	;volatile
  3277                           
  3278                           ;Movement.c: 147: CAP2BUFL=0;
  3279  000C76  0E00               	movlw	0
  3280  000C78  6E66               	movwf	3942,c	;volatile
  3281                           
  3282                           ;Movement.c: 151: SendLCD(0b00000001,0);
  3283  000C7A  0E00               	movlw	0
  3284  000C7C  6E28               	movwf	SendLCD@type,c
  3285  000C7E  0E01               	movlw	1
  3286  000C80  ECC9  F00E         	call	_SendLCD
  3287                           
  3288                           ;Movement.c: 152: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3289  000C84  0E21               	movlw	33
  3290  000C86                     u3157:
  3291  000C86  2EE8               	decfsz	wreg,f,c
  3292  000C88  D7FE               	goto	u3157
  3293  000C8A  F000               	nop	
  3294                           
  3295                           ;Movement.c: 153: SendLCD(0b00000010,0);
  3296  000C8C  0E00               	movlw	0
  3297  000C8E  6E28               	movwf	SendLCD@type,c
  3298  000C90  0E02               	movlw	2
  3299  000C92  ECC9  F00E         	call	_SendLCD
  3300                           
  3301                           ;Movement.c: 154: _delay((unsigned long)((2)*(8000000/4000.0)));
  3302  000C96  0E06               	movlw	6
  3303  000C98  0100               	movlb	0	; () banked
  3304  000C9A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3305  000C9C  0E30               	movlw	48
  3306  000C9E                     u3167:
  3307  000C9E  2EE8               	decfsz	wreg,f,c
  3308  000CA0  D7FE               	goto	u3167
  3309  000CA2  2F7B               	decfsz	??_ScanWithRange& (0+255),f,b
  3310  000CA4  D7FC               	goto	u3167
  3311  000CA6  D000               	nop2	
  3312                           
  3313                           ;Movement.c: 155: SetLine(1);
  3314  000CA8  0E01               	movlw	1
  3315  000CAA  ECB1  F00E         	call	_SetLine
  3316                           
  3317                           ;Movement.c: 156: LCD_String("     ScanIR");
  3318  000CAE  0E2D               	movlw	low STR_1
  3319  000CB0  6E2A               	movwf	LCD_String@string,c
  3320  000CB2  0E03               	movlw	high STR_1
  3321  000CB4  6E2B               	movwf	LCD_String@string+1,c
  3322  000CB6  EC3F  F00D         	call	_LCD_String	;wreg free
  3323                           
  3324                           ;Movement.c: 157: SetLine(2);
  3325  000CBA  0E02               	movlw	2
  3326  000CBC  ECB1  F00E         	call	_SetLine
  3327                           
  3328                           ;Movement.c: 158: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3329  000CC0  0E80               	movlw	low ScanWithRange@buf
  3330  000CC2  6E30               	movwf	sprintf@sp,c
  3331  000CC4  0E00               	movlw	high ScanWithRange@buf
  3332  000CC6  6E31               	movwf	sprintf@sp+1,c
  3333  000CC8  0E0C               	movlw	low (STR_6+1)
  3334  000CCA  6E32               	movwf	sprintf@f,c
  3335  000CCC  0E03               	movlw	high (STR_6+1)
  3336  000CCE  6E33               	movwf	sprintf@f+1,c
  3337  000CD0  C0B4  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3338  000CD4  C0B5  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3339  000CD8  C0B6  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3340  000CDC  C0B7  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3341  000CE0  EC5E  F008         	call	_sprintf	;wreg free
  3342                           
  3343                           ;Movement.c: 159: LCD_String(buf);
  3344  000CE4  0E80               	movlw	low ScanWithRange@buf
  3345  000CE6  6E2A               	movwf	LCD_String@string,c
  3346  000CE8  0E00               	movlw	high ScanWithRange@buf
  3347  000CEA  6E2B               	movwf	LCD_String@string+1,c
  3348  000CEC  EC3F  F00D         	call	_LCD_String	;wreg free
  3349                           
  3350                           ;Movement.c: 163: if (SensorResult[1]>DirectionFoundThreshold) {
  3351  000CF0  0100               	movlb	0	; () banked
  3352  000CF2  51B6               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3353  000CF4  0100               	movlb	0	; () banked
  3354  000CF6  5DAC               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3355  000CF8  0100               	movlb	0	; () banked
  3356  000CFA  51B7               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3357  000CFC  0100               	movlb	0	; () banked
  3358  000CFE  59AD               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3359  000D00  B0D8               	btfsc	status,0,c
  3360  000D02  D00E               	goto	l223
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;Movement.c: 164: RightFlag= (TMR0H<<8)+TMR0L;
  3364  000D04  50D7               	movf	4055,w,c	;volatile
  3365  000D06  0100               	movlb	0	; () banked
  3366  000D08  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3367  000D0A  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3368  000D0C  50D6               	movf	4054,w,c	;volatile
  3369  000D0E  0100               	movlb	0	; () banked
  3370  000D10  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3371  000D12  0100               	movlb	0	; () banked
  3372  000D14  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3373  000D16  0E00               	movlw	0
  3374  000D18  0100               	movlb	0	; () banked
  3375  000D1A  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3376  000D1C  0100               	movlb	0	; () banked
  3377  000D1E  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3378  000D20                     l223:
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;Movement.c: 165: }
  3382                           ;Movement.c: 167: if (SensorResult[0]>DirectionFoundThreshold) {
  3383  000D20  0100               	movlb	0	; () banked
  3384  000D22  51B4               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3385  000D24  0100               	movlb	0	; () banked
  3386  000D26  5DAC               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3387  000D28  0100               	movlb	0	; () banked
  3388  000D2A  51B5               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3389  000D2C  0100               	movlb	0	; () banked
  3390  000D2E  59AD               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3391  000D30  B0D8               	btfsc	status,0,c
  3392  000D32  D00E               	goto	l224
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;Movement.c: 168: LeftFlag=(TMR0H<<8)+TMR0L;
  3396  000D34  50D7               	movf	4055,w,c	;volatile
  3397  000D36  0100               	movlb	0	; () banked
  3398  000D38  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3399  000D3A  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3400  000D3C  50D6               	movf	4054,w,c	;volatile
  3401  000D3E  0100               	movlb	0	; () banked
  3402  000D40  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3403  000D42  0100               	movlb	0	; () banked
  3404  000D44  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3405  000D46  0E00               	movlw	0
  3406  000D48  0100               	movlb	0	; () banked
  3407  000D4A  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3408  000D4C  0100               	movlb	0	; () banked
  3409  000D4E  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3410  000D50                     l224:
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;Movement.c: 169: }
  3414                           ;Movement.c: 176: if (LeftFlag>0) {
  3415  000D50  0100               	movlb	0	; () banked
  3416  000D52  51B1               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3417  000D54  0100               	movlb	0	; () banked
  3418  000D56  11B2               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3419  000D58  B4D8               	btfsc	status,2,c
  3420  000D5A  D146               	goto	l3322
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;Movement.c: 179: if (RightFlag>0) {
  3424  000D5C  0100               	movlb	0	; () banked
  3425  000D5E  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3426  000D60  0100               	movlb	0	; () banked
  3427  000D62  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3428  000D64  B4D8               	btfsc	status,2,c
  3429  000D66  D09E               	goto	l226
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;Movement.c: 180: TimeAboveThreshold = LeftFlag - RightFlag;
  3433  000D68  0100               	movlb	0	; () banked
  3434  000D6A  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3435  000D6C  0800               	sublw	0
  3436  000D6E  0100               	movlb	0	; () banked
  3437  000D70  25B1               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3438  000D72  0100               	movlb	0	; () banked
  3439  000D74  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;Movement.c: 181: TMR0L = 0;
  3443  000D76  0E00               	movlw	0
  3444  000D78  6ED6               	movwf	4054,c	;volatile
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;Movement.c: 182: TMR0H = 0;
  3448  000D7A  0E00               	movlw	0
  3449  000D7C  6ED7               	movwf	4055,c	;volatile
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;Movement.c: 183: stop(mL,mR);
  3453  000D7E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3454  000D82  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3455  000D86  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3456  000D8A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3457  000D8E  ECBC  F00B         	call	_stop	;wreg free
  3458                           
  3459                           ;Movement.c: 184: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3460  000D92  D00C               	goto	l3284
  3461  000D94                     l3282:
  3462                           
  3463                           ;Movement.c: 185: turnLeft(mL,mR, MotorPower);
  3464  000D94  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3465  000D98  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3466  000D9C  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3467  000DA0  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3468  000DA4  C0AE  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3469  000DA8  EC22  F00E         	call	_turnLeft	;wreg free
  3470  000DAC                     l3284:
  3471  000DAC  0100               	movlb	0	; () banked
  3472  000DAE  90D8               	bcf	status,0,c
  3473  000DB0  31B3               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3474  000DB2  0100               	movlb	0	; () banked
  3475  000DB4  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3476  000DB6  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3477  000DB8  50D6               	movf	4054,w,c	;volatile
  3478  000DBA  CFD7 F07D          	movff	4055,??_ScanWithRange+2	;volatile
  3479  000DBE  0100               	movlb	0	; () banked
  3480  000DC0  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3481  000DC2  C07D  F07E         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3482  000DC6  0100               	movlb	0	; () banked
  3483  000DC8  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3484  000DCA  0100               	movlb	0	; () banked
  3485  000DCC  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3486  000DCE  0E00               	movlw	0
  3487  000DD0  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3488  000DD2  0100               	movlb	0	; () banked
  3489  000DD4  517B               	movf	??_ScanWithRange& (0+255),w,b
  3490  000DD6  0100               	movlb	0	; () banked
  3491  000DD8  5D7D               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3492  000DDA  0100               	movlb	0	; () banked
  3493  000DDC  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3494  000DDE  0A80               	xorlw	128
  3495  000DE0  0100               	movlb	0	; () banked
  3496  000DE2  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3497  000DE4  0100               	movlb	0	; () banked
  3498  000DE6  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3499  000DE8  0A80               	xorlw	128
  3500  000DEA  0100               	movlb	0	; () banked
  3501  000DEC  597F               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3502  000DEE  A0D8               	btfss	status,0,c
  3503  000DF0  D7D1               	goto	l3282
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;Movement.c: 186: }
  3507                           ;Movement.c: 187: T0CONbits.TMR0ON=0;
  3508  000DF2  9ED5               	bcf	4053,7,c	;volatile
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;Movement.c: 188: stop(mL,mR);
  3512  000DF4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3513  000DF8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3514  000DFC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3515  000E00  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3516  000E04  ECBC  F00B         	call	_stop	;wreg free
  3517                           
  3518                           ;Movement.c: 190: (MoveType[*Move]) = 1;
  3519  000E08  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3520  000E0C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3521  000E10  50DF               	movf	indf2,w,c
  3522  000E12  0100               	movlb	0	; () banked
  3523  000E14  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3524  000E16  0100               	movlb	0	; () banked
  3525  000E18  517B               	movf	??_ScanWithRange& (0+255),w,b
  3526  000E1A  0D01               	mullw	1
  3527  000E1C  50F3               	movf	prodl,w,c
  3528  000E1E  0100               	movlb	0	; () banked
  3529  000E20  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3530  000E22  6ED9               	movwf	fsr2l,c
  3531  000E24  50F4               	movf	prodh,w,c
  3532  000E26  0100               	movlb	0	; () banked
  3533  000E28  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3534  000E2A  6EDA               	movwf	fsr2h,c
  3535  000E2C  0E01               	movlw	1
  3536  000E2E  6EDF               	movwf	indf2,c
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;Movement.c: 191: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3540  000E30  C0B3  F07B         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3541  000E34  0100               	movlb	0	; () banked
  3542  000E36  90D8               	bcf	status,0,c
  3543  000E38  337B               	rrcf	??_ScanWithRange& (0+255),f,b
  3544  000E3A  0100               	movlb	0	; () banked
  3545  000E3C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3546  000E3E  0100               	movlb	0	; () banked
  3547  000E40  25B8               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3548  000E42  0100               	movlb	0	; () banked
  3549  000E44  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3550  000E46  0E00               	movlw	0
  3551  000E48  0100               	movlb	0	; () banked
  3552  000E4A  21B9               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3553  000E4C  0100               	movlb	0	; () banked
  3554  000E4E  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3555  000E50  0100               	movlb	0	; () banked
  3556  000E52  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3557  000E54  1F7D               	comf	(??_ScanWithRange+2)& (0+255),f,b
  3558  000E56  4B7C               	infsnz	(??_ScanWithRange+1)& (0+255),f,b
  3559  000E58  2B7D               	incf	(??_ScanWithRange+2)& (0+255),f,b
  3560  000E5A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3561  000E5E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3562  000E62  50DF               	movf	indf2,w,c
  3563  000E64  0100               	movlb	0	; () banked
  3564  000E66  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3565  000E68  0100               	movlb	0	; () banked
  3566  000E6A  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3567  000E6C  0D02               	mullw	2
  3568  000E6E  50F3               	movf	prodl,w,c
  3569  000E70  0100               	movlb	0	; () banked
  3570  000E72  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3571  000E74  6ED9               	movwf	fsr2l,c
  3572  000E76  50F4               	movf	prodh,w,c
  3573  000E78  0100               	movlb	0	; () banked
  3574  000E7A  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3575  000E7C  6EDA               	movwf	fsr2h,c
  3576  000E7E  C07C  FFDE         	movff	??_ScanWithRange+1,postinc2
  3577  000E82  C07D  FFDD         	movff	??_ScanWithRange+2,postdec2
  3578  000E86                     l3292:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;Movement.c: 192: *Move = *Move+1;
  3582  000E86  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3583  000E8A  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3584  000E8E  50DF               	movf	indf2,w,c
  3585  000E90  0100               	movlb	0	; () banked
  3586  000E92  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3587  000E94  0100               	movlb	0	; () banked
  3588  000E96  297B               	incf	??_ScanWithRange& (0+255),w,b
  3589  000E98  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3590  000E9C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3591  000EA0  6EDF               	movwf	indf2,c
  3592  000EA2  D0A0               	goto	l3318
  3593  000EA4                     l226:
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;Movement.c: 196: T0CONbits.TMR0ON=0;
  3597  000EA4  9ED5               	bcf	4053,7,c	;volatile
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;Movement.c: 200: (MoveType[*Move]) = 1;
  3601  000EA6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3602  000EAA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3603  000EAE  50DF               	movf	indf2,w,c
  3604  000EB0  0100               	movlb	0	; () banked
  3605  000EB2  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3606  000EB4  0100               	movlb	0	; () banked
  3607  000EB6  517B               	movf	??_ScanWithRange& (0+255),w,b
  3608  000EB8  0D01               	mullw	1
  3609  000EBA  50F3               	movf	prodl,w,c
  3610  000EBC  0100               	movlb	0	; () banked
  3611  000EBE  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3612  000EC0  6ED9               	movwf	fsr2l,c
  3613  000EC2  50F4               	movf	prodh,w,c
  3614  000EC4  0100               	movlb	0	; () banked
  3615  000EC6  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3616  000EC8  6EDA               	movwf	fsr2h,c
  3617  000ECA  0E01               	movlw	1
  3618  000ECC  6EDF               	movwf	indf2,c
  3619                           
  3620                           ;Movement.c: 201: (MoveTime[*Move]) = -((TMR0H<<8)+TMR0L);
  3621  000ECE  50D6               	movf	4054,w,c	;volatile
  3622  000ED0  CFD7 F07B          	movff	4055,??_ScanWithRange	;volatile
  3623  000ED4  0100               	movlb	0	; () banked
  3624  000ED6  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3625  000ED8  C07B  F07C         	movff	??_ScanWithRange,??_ScanWithRange+1
  3626  000EDC  0100               	movlb	0	; () banked
  3627  000EDE  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3628  000EE0  0100               	movlb	0	; () banked
  3629  000EE2  277B               	addwf	??_ScanWithRange& (0+255),f,b
  3630  000EE4  0E00               	movlw	0
  3631  000EE6  237C               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3632  000EE8  0100               	movlb	0	; () banked
  3633  000EEA  1F7B               	comf	??_ScanWithRange& (0+255),f,b
  3634  000EEC  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3635  000EEE  4B7B               	infsnz	??_ScanWithRange& (0+255),f,b
  3636  000EF0  2B7C               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3637  000EF2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3638  000EF6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3639  000EFA  50DF               	movf	indf2,w,c
  3640  000EFC  0100               	movlb	0	; () banked
  3641  000EFE  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3642  000F00  0100               	movlb	0	; () banked
  3643  000F02  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3644  000F04  0D02               	mullw	2
  3645  000F06  50F3               	movf	prodl,w,c
  3646  000F08  0100               	movlb	0	; () banked
  3647  000F0A  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3648  000F0C  6ED9               	movwf	fsr2l,c
  3649  000F0E  50F4               	movf	prodh,w,c
  3650  000F10  0100               	movlb	0	; () banked
  3651  000F12  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3652  000F14  6EDA               	movwf	fsr2h,c
  3653  000F16  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3654  000F1A  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;Movement.c: 202: *Move = *Move+1;
  3658  000F1E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3659  000F22  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3660  000F26  50DF               	movf	indf2,w,c
  3661  000F28  0100               	movlb	0	; () banked
  3662  000F2A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3663  000F2C  0100               	movlb	0	; () banked
  3664  000F2E  297B               	incf	??_ScanWithRange& (0+255),w,b
  3665  000F30  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3666  000F34  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3667  000F38  6EDF               	movwf	indf2,c
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;Movement.c: 203: stop(mL,mR);
  3671  000F3A  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3672  000F3E  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3673  000F42  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3674  000F46  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3675  000F4A  ECBC  F00B         	call	_stop	;wreg free
  3676                           
  3677                           ;Movement.c: 206: turnLeft(mL,mR,100);
  3678  000F4E  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3679  000F52  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3680  000F56  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3681  000F5A  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3682  000F5E  0E64               	movlw	100
  3683  000F60  0100               	movlb	0	; () banked
  3684  000F62  6F6B               	movwf	turnLeft@power& (0+255),b
  3685  000F64  EC22  F00E         	call	_turnLeft	;wreg free
  3686                           
  3687                           ;Movement.c: 207: delay_tenth_s(MiniLeftFlick);
  3688  000F68  0100               	movlb	0	; () banked
  3689  000F6A  51B0               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3690  000F6C  EC5E  F00E         	call	_delay_tenth_s
  3691                           
  3692                           ;Movement.c: 208: stop(mL,mR);
  3693  000F70  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3694  000F74  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3695  000F78  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3696  000F7C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3697  000F80  ECBC  F00B         	call	_stop	;wreg free
  3698                           
  3699                           ;Movement.c: 209: (MoveType[*Move]) = 2;
  3700  000F84  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3701  000F88  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3702  000F8C  50DF               	movf	indf2,w,c
  3703  000F8E  0100               	movlb	0	; () banked
  3704  000F90  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3705  000F92  0100               	movlb	0	; () banked
  3706  000F94  517B               	movf	??_ScanWithRange& (0+255),w,b
  3707  000F96  0D01               	mullw	1
  3708  000F98  50F3               	movf	prodl,w,c
  3709  000F9A  0100               	movlb	0	; () banked
  3710  000F9C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3711  000F9E  6ED9               	movwf	fsr2l,c
  3712  000FA0  50F4               	movf	prodh,w,c
  3713  000FA2  0100               	movlb	0	; () banked
  3714  000FA4  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3715  000FA6  6EDA               	movwf	fsr2h,c
  3716  000FA8  0E02               	movlw	2
  3717  000FAA  6EDF               	movwf	indf2,c
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;Movement.c: 210: (MoveTime[*Move]) = MiniLeftFlick;
  3721  000FAC  0100               	movlb	0	; () banked
  3722  000FAE  51B0               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3723  000FB0  0100               	movlb	0	; () banked
  3724  000FB2  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3725  000FB4  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3726  000FB6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3727  000FBA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3728  000FBE  50DF               	movf	indf2,w,c
  3729  000FC0  0100               	movlb	0	; () banked
  3730  000FC2  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3731  000FC4  0100               	movlb	0	; () banked
  3732  000FC6  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3733  000FC8  0D02               	mullw	2
  3734  000FCA  50F3               	movf	prodl,w,c
  3735  000FCC  0100               	movlb	0	; () banked
  3736  000FCE  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3737  000FD0  6ED9               	movwf	fsr2l,c
  3738  000FD2  50F4               	movf	prodh,w,c
  3739  000FD4  0100               	movlb	0	; () banked
  3740  000FD6  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3741  000FD8  6EDA               	movwf	fsr2h,c
  3742  000FDA  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3743  000FDE  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3744  000FE2  D751               	goto	l3292
  3745  000FE4                     l3318:
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;Movement.c: 214: return 2;
  3749  000FE4  0E02               	movlw	2
  3750                           
  3751                           ; BSR set to: 0
  3752  000FE6  0012               	return	
  3753  000FE8                     l3322:
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;Movement.c: 215: }
  3757                           ;Movement.c: 216: }
  3758                           ;Movement.c: 218: if (*RFID_Read==1) {
  3759  000FE8  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3760  000FEC  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3761  000FF0  04DE               	decf	postinc2,w,c
  3762  000FF2  A4D8               	btfss	status,2,c
  3763  000FF4  D002               	goto	l3328
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;Movement.c: 219: return 2;
  3767  000FF6  0E02               	movlw	2
  3768                           
  3769                           ; BSR set to: 0
  3770  000FF8  0012               	return	
  3771  000FFA                     l3328:
  3772                           
  3773                           ; BSR set to: 0
  3774  000FFA  0100               	movlb	0	; () banked
  3775  000FFC  4BAA               	infsnz	ScanWithRange@i& (0+255),f,b
  3776  000FFE  2BAB               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3777  001000                     l3330:
  3778                           
  3779                           ; BSR set to: 0
  3780  001000  0100               	movlb	0	; () banked
  3781  001002  51AA               	movf	ScanWithRange@i& (0+255),w,b
  3782  001004  0100               	movlb	0	; () banked
  3783  001006  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3784  001008  0100               	movlb	0	; () banked
  3785  00100A  51AB               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3786  00100C  0100               	movlb	0	; () banked
  3787  00100E  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3788  001010  B0D8               	btfsc	status,0,c
  3789  001012  D61F               	goto	l3242
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;Movement.c: 220: }
  3793                           ;Movement.c: 221: }
  3794                           ;Movement.c: 224: (MoveType[*Move]) = 2;
  3795                           
  3796                           ; BSR set to: 0
  3797  001014  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3798  001018  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3799  00101C  50DF               	movf	indf2,w,c
  3800  00101E  0100               	movlb	0	; () banked
  3801  001020  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3802  001022  0100               	movlb	0	; () banked
  3803  001024  517B               	movf	??_ScanWithRange& (0+255),w,b
  3804  001026  0D01               	mullw	1
  3805  001028  50F3               	movf	prodl,w,c
  3806  00102A  0100               	movlb	0	; () banked
  3807  00102C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3808  00102E  6ED9               	movwf	fsr2l,c
  3809  001030  50F4               	movf	prodh,w,c
  3810  001032  0100               	movlb	0	; () banked
  3811  001034  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3812  001036  6EDA               	movwf	fsr2h,c
  3813  001038  0E02               	movlw	2
  3814  00103A  6EDF               	movwf	indf2,c
  3815                           
  3816                           ;Movement.c: 225: (MoveTime[*Move]) = -2;
  3817  00103C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3818  001040  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3819  001044  50DF               	movf	indf2,w,c
  3820  001046  0100               	movlb	0	; () banked
  3821  001048  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3822  00104A  0100               	movlb	0	; () banked
  3823  00104C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3824  00104E  0D02               	mullw	2
  3825  001050  50F3               	movf	prodl,w,c
  3826  001052  0100               	movlb	0	; () banked
  3827  001054  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3828  001056  6ED9               	movwf	fsr2l,c
  3829  001058  50F4               	movf	prodh,w,c
  3830  00105A  0100               	movlb	0	; () banked
  3831  00105C  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3832  00105E  6EDA               	movwf	fsr2h,c
  3833  001060  0EFE               	movlw	254
  3834  001062  6EDE               	movwf	postinc2,c
  3835  001064  0EFF               	movlw	255
  3836  001066  6EDD               	movwf	postdec2,c
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;Movement.c: 226: *Move = *Move+1;
  3840  001068  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3841  00106C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3842  001070  50DF               	movf	indf2,w,c
  3843  001072  0100               	movlb	0	; () banked
  3844  001074  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3845  001076  0100               	movlb	0	; () banked
  3846  001078  297B               	incf	??_ScanWithRange& (0+255),w,b
  3847  00107A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3848  00107E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3849  001082  6EDF               	movwf	indf2,c
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;Movement.c: 227: turnRight(mL,mR, 100);
  3853  001084  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3854  001088  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3855  00108C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3856  001090  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3857  001094  0E64               	movlw	100
  3858  001096  0100               	movlb	0	; () banked
  3859  001098  6F6B               	movwf	turnRight@power& (0+255),b
  3860  00109A  EC03  F00E         	call	_turnRight	;wreg free
  3861                           
  3862                           ;Movement.c: 228: delay_tenth_s(2);
  3863  00109E  0E02               	movlw	2
  3864  0010A0  EC5E  F00E         	call	_delay_tenth_s
  3865                           
  3866                           ;Movement.c: 229: stop(mL,mR);
  3867  0010A4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3868  0010A8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3869  0010AC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3870  0010B0  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3871  0010B4  ECBC  F00B         	call	_stop	;wreg free
  3872                           
  3873                           ;Movement.c: 230: return -1;
  3874  0010B8  0EFF               	movlw	255
  3875  0010BA  0012               	return	
  3876  0010BC                     __end_of_ScanWithRange:
  3877                           	opt stack 0
  3878                           tblptru	equ	0xFF8
  3879                           prodh	equ	0xFF4
  3880                           prodl	equ	0xFF3
  3881                           intcon	equ	0xFF2
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           indf1	equ	0xFE7
  3885                           plusw1	equ	0xFE3
  3886                           fsr1h	equ	0xFE2
  3887                           fsr1l	equ	0xFE1
  3888                           indf2	equ	0xFDF
  3889                           postinc2	equ	0xFDE
  3890                           postdec2	equ	0xFDD
  3891                           plusw2	equ	0xFDB
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _turnRight *****************
  3897 ;; Defined at:
  3898 ;;		line 103 in file "dc_motor.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3901 ;;		 -> main@mL(9), 
  3902 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3903 ;;		 -> main@mR(9), 
  3904 ;;  power           1   11[BANK0 ] unsigned char 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;		None
  3907 ;; Return value:  Size  Location     Type
  3908 ;;		None               void
  3909 ;; Registers used:
  3910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3916 ;;      Params:         0       5       0       0
  3917 ;;      Locals:         0       0       0       0
  3918 ;;      Temps:          0       0       0       0
  3919 ;;      Totals:         0       5       0       0
  3920 ;;Total ram usage:        5 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    6
  3923 ;; This function calls:
  3924 ;;		_fullSpeedAhead
  3925 ;; This function is called by:
  3926 ;;		_ScanWithRange
  3927 ;;		_main
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text10
  3932  001C06                     __ptext10:
  3933                           	opt stack 0
  3934  001C06                     _turnRight:
  3935                           	opt stack 24
  3936                           
  3937                           ;dc_motor.c: 107: mL->direction=0;
  3938                           
  3939                           ;incstack = 0
  3940  001C06  0100               	movlb	0	; () banked
  3941  001C08  EE20 F001          	lfsr	2,1
  3942  001C0C  5167               	movf	turnRight@mL& (0+255),w,b
  3943  001C0E  26D9               	addwf	fsr2l,f,c
  3944  001C10  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3945  001C12  22DA               	addwfc	fsr2h,f,c
  3946  001C14  0E00               	movlw	0
  3947  001C16  6EDF               	movwf	indf2,c
  3948                           
  3949                           ;dc_motor.c: 108: mR->direction=1;
  3950  001C18  0100               	movlb	0	; () banked
  3951  001C1A  EE20 F001          	lfsr	2,1
  3952  001C1E  5169               	movf	turnRight@mR& (0+255),w,b
  3953  001C20  26D9               	addwf	fsr2l,f,c
  3954  001C22  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3955  001C24  22DA               	addwfc	fsr2h,f,c
  3956  001C26  0E01               	movlw	1
  3957  001C28  6EDF               	movwf	indf2,c
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;dc_motor.c: 109: fullSpeedAhead(mL, mR, power);
  3961  001C2A  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3962  001C2E  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3963  001C32  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3964  001C36  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3965  001C3A  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3966  001C3E  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  3967  001C42  0012               	return		;funcret
  3968  001C44                     __end_of_turnRight:
  3969                           	opt stack 0
  3970                           tblptru	equ	0xFF8
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           postinc0	equ	0xFEE
  3975                           wreg	equ	0xFE8
  3976                           indf1	equ	0xFE7
  3977                           plusw1	equ	0xFE3
  3978                           fsr1h	equ	0xFE2
  3979                           fsr1l	equ	0xFE1
  3980                           indf2	equ	0xFDF
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           plusw2	equ	0xFDB
  3984                           fsr2h	equ	0xFDA
  3985                           fsr2l	equ	0xFD9
  3986                           status	equ	0xFD8
  3987                           
  3988 ;; *************** function _turnLeft *****************
  3989 ;; Defined at:
  3990 ;;		line 92 in file "dc_motor.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3993 ;;		 -> main@mL(9), 
  3994 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3995 ;;		 -> main@mR(9), 
  3996 ;;  power           1   11[BANK0 ] unsigned char 
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;		None
  3999 ;; Return value:  Size  Location     Type
  4000 ;;		None               void
  4001 ;; Registers used:
  4002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4008 ;;      Params:         0       5       0       0
  4009 ;;      Locals:         0       0       0       0
  4010 ;;      Temps:          0       0       0       0
  4011 ;;      Totals:         0       5       0       0
  4012 ;;Total ram usage:        5 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    6
  4015 ;; This function calls:
  4016 ;;		_fullSpeedAhead
  4017 ;; This function is called by:
  4018 ;;		_ScanWithRange
  4019 ;;		_main
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text11
  4024  001C44                     __ptext11:
  4025                           	opt stack 0
  4026  001C44                     _turnLeft:
  4027                           	opt stack 24
  4028                           
  4029                           ;dc_motor.c: 96: mL->direction=1;
  4030                           
  4031                           ;incstack = 0
  4032  001C44  0100               	movlb	0	; () banked
  4033  001C46  EE20 F001          	lfsr	2,1
  4034  001C4A  5167               	movf	turnLeft@mL& (0+255),w,b
  4035  001C4C  26D9               	addwf	fsr2l,f,c
  4036  001C4E  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  4037  001C50  22DA               	addwfc	fsr2h,f,c
  4038  001C52  0E01               	movlw	1
  4039  001C54  6EDF               	movwf	indf2,c
  4040                           
  4041                           ;dc_motor.c: 97: mR->direction=0;
  4042  001C56  0100               	movlb	0	; () banked
  4043  001C58  EE20 F001          	lfsr	2,1
  4044  001C5C  5169               	movf	turnLeft@mR& (0+255),w,b
  4045  001C5E  26D9               	addwf	fsr2l,f,c
  4046  001C60  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  4047  001C62  22DA               	addwfc	fsr2h,f,c
  4048  001C64  0E00               	movlw	0
  4049  001C66  6EDF               	movwf	indf2,c
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;dc_motor.c: 98: fullSpeedAhead(mL, mR, power);
  4053  001C68  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  4054  001C6C  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4055  001C70  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  4056  001C74  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4057  001C78  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  4058  001C7C  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  4059  001C80  0012               	return		;funcret
  4060  001C82                     __end_of_turnLeft:
  4061                           	opt stack 0
  4062                           tblptru	equ	0xFF8
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           postinc0	equ	0xFEE
  4067                           wreg	equ	0xFE8
  4068                           indf1	equ	0xFE7
  4069                           plusw1	equ	0xFE3
  4070                           fsr1h	equ	0xFE2
  4071                           fsr1l	equ	0xFE1
  4072                           indf2	equ	0xFDF
  4073                           postinc2	equ	0xFDE
  4074                           postdec2	equ	0xFDD
  4075                           plusw2	equ	0xFDB
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _fullSpeedAhead *****************
  4081 ;; Defined at:
  4082 ;;		line 113 in file "dc_motor.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4085 ;;		 -> main@mL(9), 
  4086 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4087 ;;		 -> main@mR(9), 
  4088 ;;  power           1    6[BANK0 ] unsigned char 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;		None               void
  4093 ;; Registers used:
  4094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4100 ;;      Params:         0       5       0       0
  4101 ;;      Locals:         0       0       0       0
  4102 ;;      Temps:          1       0       0       0
  4103 ;;      Totals:         1       5       0       0
  4104 ;;Total ram usage:        6 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:    5
  4107 ;; This function calls:
  4108 ;;		_setMotorPWM
  4109 ;; This function is called by:
  4110 ;;		_turnLeft
  4111 ;;		_turnRight
  4112 ;;		_fullSpeedBack
  4113 ;;		_main
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text12
  4118  00191A                     __ptext12:
  4119                           	opt stack 0
  4120  00191A                     _fullSpeedAhead:
  4121                           	opt stack 24
  4122                           
  4123                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4124                           
  4125                           ;incstack = 0
  4126  00191A  D02C               	goto	l67
  4127  00191C                     l3010:
  4128                           
  4129                           ;dc_motor.c: 117: if(mL->power<power){
  4130  00191C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4131  001920  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4132  001924  0100               	movlb	0	; () banked
  4133  001926  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4134  001928  5CDE               	subwf	postinc2,w,c
  4135  00192A  B0D8               	btfsc	status,0,c
  4136  00192C  D005               	goto	l3014
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;dc_motor.c: 118: mL->power++;
  4140  00192E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4141  001932  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4142  001936  2ADF               	incf	indf2,f,c
  4143  001938                     l3014:
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;dc_motor.c: 119: }
  4147                           ;dc_motor.c: 120: if(mR->power<power){
  4148  001938  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4149  00193C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4150  001940  0100               	movlb	0	; () banked
  4151  001942  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4152  001944  5CDE               	subwf	postinc2,w,c
  4153  001946  B0D8               	btfsc	status,0,c
  4154  001948  D005               	goto	l3018
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;dc_motor.c: 121: mR->power++;
  4158  00194A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4159  00194E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4160  001952  2ADF               	incf	indf2,f,c
  4161  001954                     l3018:
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;dc_motor.c: 122: }
  4165                           ;dc_motor.c: 123: setMotorPWM(mL);
  4166  001954  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4167  001958  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4168  00195C  ECE1  F009         	call	_setMotorPWM	;wreg free
  4169                           
  4170                           ;dc_motor.c: 124: setMotorPWM(mR);
  4171  001960  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4172  001964  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4173  001968  ECE1  F009         	call	_setMotorPWM	;wreg free
  4174                           
  4175                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4176  00196C  0E21               	movlw	33
  4177  00196E                     u3177:
  4178  00196E  2EE8               	decfsz	wreg,f,c
  4179  001970  D7FE               	goto	u3177
  4180  001972  F000               	nop	
  4181  001974                     l67:
  4182  001974  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4183  001978  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4184  00197C  0100               	movlb	0	; () banked
  4185  00197E  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4186  001980  5CDE               	subwf	postinc2,w,c
  4187  001982  A0D8               	btfss	status,0,c
  4188  001984  D7CB               	goto	l3010
  4189                           
  4190                           ; BSR set to: 0
  4191  001986  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4192  00198A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4193  00198E  0100               	movlb	0	; () banked
  4194  001990  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4195  001992  5CDE               	subwf	postinc2,w,c
  4196  001994  B0D8               	btfsc	status,0,c
  4197  001996  0012               	return	
  4198  001998  D7C1               	goto	l3010
  4199  00199A                     __end_of_fullSpeedAhead:
  4200                           	opt stack 0
  4201                           tblptru	equ	0xFF8
  4202                           prodh	equ	0xFF4
  4203                           prodl	equ	0xFF3
  4204                           intcon	equ	0xFF2
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           indf1	equ	0xFE7
  4208                           plusw1	equ	0xFE3
  4209                           fsr1h	equ	0xFE2
  4210                           fsr1l	equ	0xFE1
  4211                           indf2	equ	0xFDF
  4212                           postinc2	equ	0xFDE
  4213                           postdec2	equ	0xFDD
  4214                           plusw2	equ	0xFDB
  4215                           fsr2h	equ	0xFDA
  4216                           fsr2l	equ	0xFD9
  4217                           status	equ	0xFD8
  4218                           
  4219 ;; *************** function _delay_tenth_s *****************
  4220 ;; Defined at:
  4221 ;;		line 32 in file "Movement.c"
  4222 ;; Parameters:    Size  Location     Type
  4223 ;;  tenth_second    1    wreg     unsigned char 
  4224 ;; Auto vars:     Size  Location     Type
  4225 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4226 ;;  i               2   37[COMRAM] unsigned int 
  4227 ;; Return value:  Size  Location     Type
  4228 ;;		None               void
  4229 ;; Registers used:
  4230 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4236 ;;      Params:         0       0       0       0
  4237 ;;      Locals:         3       0       0       0
  4238 ;;      Temps:          1       0       0       0
  4239 ;;      Totals:         4       0       0       0
  4240 ;;Total ram usage:        4 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; Hardware stack levels required when called:    3
  4243 ;; This function calls:
  4244 ;;		Nothing
  4245 ;; This function is called by:
  4246 ;;		_ScanWithRange
  4247 ;;		_main
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text13
  4252  001CBC                     __ptext13:
  4253                           	opt stack 0
  4254  001CBC                     _delay_tenth_s:
  4255                           	opt stack 27
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;incstack = 0
  4259                           ;delay_tenth_s@tenth_seconds stored from wreg
  4260  001CBC  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4261                           
  4262                           ;Movement.c: 33: unsigned int i=0;
  4263  001CBE  0E00               	movlw	0
  4264  001CC0  6E27               	movwf	delay_tenth_s@i+1,c
  4265  001CC2  0E00               	movlw	0
  4266  001CC4  6E26               	movwf	delay_tenth_s@i,c
  4267                           
  4268                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4269  001CC6  0E00               	movlw	0
  4270  001CC8  6E27               	movwf	delay_tenth_s@i+1,c
  4271  001CCA  0E01               	movlw	1
  4272  001CCC  6E26               	movwf	delay_tenth_s@i,c
  4273  001CCE  D009               	goto	l2278
  4274  001CD0                     l2274:
  4275                           
  4276                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4277  001CD0  0E82               	movlw	130
  4278  001CD2  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4279  001CD4  0EDE               	movlw	222
  4280  001CD6                     u3187:
  4281  001CD6  2EE8               	decfsz	wreg,f,c
  4282  001CD8  D7FE               	goto	u3187
  4283  001CDA  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4284  001CDC  D7FC               	goto	u3187
  4285  001CDE  4A26               	infsnz	delay_tenth_s@i,f,c
  4286  001CE0  2A27               	incf	delay_tenth_s@i+1,f,c
  4287  001CE2                     l2278:
  4288  001CE2  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4289  001CE4  0D02               	mullw	2
  4290  001CE6  5026               	movf	delay_tenth_s@i,w,c
  4291  001CE8  5CF3               	subwf	prodl,w,c
  4292  001CEA  5027               	movf	delay_tenth_s@i+1,w,c
  4293  001CEC  58F4               	subwfb	prodh,w,c
  4294  001CEE  A0D8               	btfss	status,0,c
  4295  001CF0  0012               	return	
  4296  001CF2  D7EE               	goto	l2274
  4297  001CF4                     __end_of_delay_tenth_s:
  4298                           	opt stack 0
  4299                           tblptru	equ	0xFF8
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon	equ	0xFF2
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           indf1	equ	0xFE7
  4306                           plusw1	equ	0xFE3
  4307                           fsr1h	equ	0xFE2
  4308                           fsr1l	equ	0xFE1
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           plusw2	equ	0xFDB
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _ScanIR *****************
  4318 ;; Defined at:
  4319 ;;		line 44 in file "Movement.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4322 ;;		 -> main@mL(9), 
  4323 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4324 ;;		 -> main@mR(9), 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4327 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4328 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      unsigned char 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4338 ;;      Params:         0       4       0       0
  4339 ;;      Locals:         0      46       0       0
  4340 ;;      Temps:          1       0       0       0
  4341 ;;      Totals:         1      50       0       0
  4342 ;;Total ram usage:       51 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    7
  4345 ;; This function calls:
  4346 ;;		_LCD_String
  4347 ;;		_SendLCD
  4348 ;;		_SetLine
  4349 ;;		_grabLeftIR
  4350 ;;		_grabRightIR
  4351 ;;		_sprintf
  4352 ;;		_stop
  4353 ;; This function is called by:
  4354 ;;		_main
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text14
  4359  0014FC                     __ptext14:
  4360                           	opt stack 0
  4361  0014FC                     _ScanIR:
  4362                           	opt stack 23
  4363                           
  4364                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4365                           
  4366                           ;incstack = 0
  4367  0014FC  C0F1  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4368  001500  C0F2  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4369  001504  C0F3  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4370  001508  C0F4  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4371                           
  4372                           ;Movement.c: 48: char buf[40];
  4373                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4374  00150C  0E03               	movlw	3
  4375  00150E  0100               	movlb	0	; () banked
  4376  001510  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4377  001512  0EE8               	movlw	232
  4378  001514  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4382  001516  EC06  F00D         	call	_grabLeftIR	;wreg free
  4383  00151A  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4384  00151E  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4385                           
  4386                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4387  001522  ECCD  F00C         	call	_grabRightIR	;wreg free
  4388  001526  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4389  00152A  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4390                           
  4391                           ;Movement.c: 60: CAP1BUFH=0;
  4392  00152E  0E00               	movlw	0
  4393  001530  6E69               	movwf	3945,c	;volatile
  4394                           
  4395                           ;Movement.c: 61: CAP1BUFL=0;
  4396  001532  0E00               	movlw	0
  4397  001534  6E68               	movwf	3944,c	;volatile
  4398                           
  4399                           ;Movement.c: 62: CAP2BUFH=0;
  4400  001536  0E00               	movlw	0
  4401  001538  6E67               	movwf	3943,c	;volatile
  4402                           
  4403                           ;Movement.c: 63: CAP2BUFL=0;
  4404  00153A  0E00               	movlw	0
  4405  00153C  6E66               	movwf	3942,c	;volatile
  4406                           
  4407                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4408  00153E  0E00               	movlw	0
  4409  001540  6E28               	movwf	SendLCD@type,c
  4410  001542  0E01               	movlw	1
  4411  001544  ECC9  F00E         	call	_SendLCD
  4412                           
  4413                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4414  001548  0E21               	movlw	33
  4415  00154A                     u3197:
  4416  00154A  2EE8               	decfsz	wreg,f,c
  4417  00154C  D7FE               	goto	u3197
  4418  00154E  F000               	nop	
  4419                           
  4420                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4421  001550  0E00               	movlw	0
  4422  001552  6E28               	movwf	SendLCD@type,c
  4423  001554  0E02               	movlw	2
  4424  001556  ECC9  F00E         	call	_SendLCD
  4425                           
  4426                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4427  00155A  0E06               	movlw	6
  4428  00155C  6E39               	movwf	??_ScanIR& (0+255),c
  4429  00155E  0E30               	movlw	48
  4430  001560                     u3207:
  4431  001560  2EE8               	decfsz	wreg,f,c
  4432  001562  D7FE               	goto	u3207
  4433  001564  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4434  001566  D7FC               	goto	u3207
  4435  001568  D000               	nop2	
  4436                           
  4437                           ;Movement.c: 70: SetLine(1);
  4438  00156A  0E01               	movlw	1
  4439  00156C  ECB1  F00E         	call	_SetLine
  4440                           
  4441                           ;Movement.c: 71: LCD_String("     ScanIR");
  4442  001570  0E2D               	movlw	low STR_1
  4443  001572  6E2A               	movwf	LCD_String@string,c
  4444  001574  0E03               	movlw	high STR_1
  4445  001576  6E2B               	movwf	LCD_String@string+1,c
  4446  001578  EC3F  F00D         	call	_LCD_String	;wreg free
  4447                           
  4448                           ;Movement.c: 72: SetLine(2);
  4449  00157C  0E02               	movlw	2
  4450  00157E  ECB1  F00E         	call	_SetLine
  4451                           
  4452                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4453  001582  0E71               	movlw	low ScanIR@buf
  4454  001584  6E30               	movwf	sprintf@sp,c
  4455  001586  0E00               	movlw	high ScanIR@buf
  4456  001588  6E31               	movwf	sprintf@sp+1,c
  4457  00158A  0E0C               	movlw	low (STR_6+1)
  4458  00158C  6E32               	movwf	sprintf@f,c
  4459  00158E  0E03               	movlw	high (STR_6+1)
  4460  001590  6E33               	movwf	sprintf@f+1,c
  4461  001592  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4462  001596  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4463  00159A  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4464  00159E  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4465  0015A2  EC5E  F008         	call	_sprintf	;wreg free
  4466                           
  4467                           ;Movement.c: 74: LCD_String(buf);
  4468  0015A6  0E71               	movlw	low ScanIR@buf
  4469  0015A8  6E2A               	movwf	LCD_String@string,c
  4470  0015AA  0E00               	movlw	high ScanIR@buf
  4471  0015AC  6E2B               	movwf	LCD_String@string+1,c
  4472  0015AE  EC3F  F00D         	call	_LCD_String	;wreg free
  4473                           
  4474                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4475                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4476  0015B2  0100               	movlb	0	; () banked
  4477  0015B4  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4478  0015B6  0100               	movlb	0	; () banked
  4479  0015B8  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4480  0015BA  0100               	movlb	0	; () banked
  4481  0015BC  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4482  0015BE  0100               	movlb	0	; () banked
  4483  0015C0  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4484  0015C2  B0D8               	btfsc	status,0,c
  4485  0015C4  D00C               	goto	l3210
  4486                           
  4487                           ; BSR set to: 0
  4488  0015C6  0100               	movlb	0	; () banked
  4489  0015C8  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4490  0015CA  0100               	movlb	0	; () banked
  4491  0015CC  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4492  0015CE  0100               	movlb	0	; () banked
  4493  0015D0  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4494  0015D2  0100               	movlb	0	; () banked
  4495  0015D4  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4496  0015D6  B0D8               	btfsc	status,0,c
  4497  0015D8  D002               	goto	l3210
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;Movement.c: 80: return 2;
  4501  0015DA  0E02               	movlw	2
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;Movement.c: 81: } else {
  4505                           
  4506                           ; BSR set to: 0
  4507  0015DC  0012               	return	
  4508  0015DE                     l3210:
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;Movement.c: 82: stop(mL,mR);
  4512  0015DE  C06D  F062         	movff	ScanIR@mL,stop@mL
  4513  0015E2  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4514  0015E6  C06F  F064         	movff	ScanIR@mR,stop@mR
  4515  0015EA  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4516  0015EE  ECBC  F00B         	call	_stop	;wreg free
  4517                           
  4518                           ;Movement.c: 83: return 0;
  4519  0015F2  0E00               	movlw	0
  4520  0015F4  0012               	return	
  4521  0015F6                     __end_of_ScanIR:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           prodh	equ	0xFF4
  4525                           prodl	equ	0xFF3
  4526                           intcon	equ	0xFF2
  4527                           postinc0	equ	0xFEE
  4528                           wreg	equ	0xFE8
  4529                           indf1	equ	0xFE7
  4530                           plusw1	equ	0xFE3
  4531                           fsr1h	equ	0xFE2
  4532                           fsr1l	equ	0xFE1
  4533                           indf2	equ	0xFDF
  4534                           postinc2	equ	0xFDE
  4535                           postdec2	equ	0xFDD
  4536                           plusw2	equ	0xFDB
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function _stop *****************
  4542 ;; Defined at:
  4543 ;;		line 72 in file "dc_motor.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4546 ;;		 -> main@mL(9), 
  4547 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4548 ;;		 -> main@mR(9), 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;		None
  4551 ;; Return value:  Size  Location     Type
  4552 ;;		None               void
  4553 ;; Registers used:
  4554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4560 ;;      Params:         0       4       0       0
  4561 ;;      Locals:         0       0       0       0
  4562 ;;      Temps:          0       0       0       0
  4563 ;;      Totals:         0       4       0       0
  4564 ;;Total ram usage:        4 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    5
  4567 ;; This function calls:
  4568 ;;		_setMotorPWM
  4569 ;; This function is called by:
  4570 ;;		_ScanIR
  4571 ;;		_ScanWithRange
  4572 ;;		_main
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text15
  4577  001778                     __ptext15:
  4578                           	opt stack 0
  4579  001778                     _stop:
  4580                           	opt stack 25
  4581                           
  4582                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4583                           
  4584                           ;incstack = 0
  4585  001778  D028               	goto	l3042
  4586  00177A                     l3028:
  4587                           
  4588                           ;dc_motor.c: 76: if(mL->power>0){
  4589  00177A  C062  FFD9         	movff	stop@mL,fsr2l
  4590  00177E  C063  FFDA         	movff	stop@mL+1,fsr2h
  4591  001782  50DF               	movf	indf2,w,c
  4592  001784  B4D8               	btfsc	status,2,c
  4593  001786  D005               	goto	l3032
  4594                           
  4595                           ;dc_motor.c: 77: mL->power--;
  4596  001788  C062  FFD9         	movff	stop@mL,fsr2l
  4597  00178C  C063  FFDA         	movff	stop@mL+1,fsr2h
  4598  001790  06DF               	decf	indf2,f,c
  4599  001792                     l3032:
  4600                           
  4601                           ;dc_motor.c: 78: }
  4602                           ;dc_motor.c: 79: if(mR->power>0){
  4603  001792  C064  FFD9         	movff	stop@mR,fsr2l
  4604  001796  C065  FFDA         	movff	stop@mR+1,fsr2h
  4605  00179A  50DF               	movf	indf2,w,c
  4606  00179C  B4D8               	btfsc	status,2,c
  4607  00179E  D005               	goto	l3036
  4608                           
  4609                           ;dc_motor.c: 80: mR->power--;
  4610  0017A0  C064  FFD9         	movff	stop@mR,fsr2l
  4611  0017A4  C065  FFDA         	movff	stop@mR+1,fsr2h
  4612  0017A8  06DF               	decf	indf2,f,c
  4613  0017AA                     l3036:
  4614                           
  4615                           ;dc_motor.c: 81: }
  4616                           ;dc_motor.c: 82: setMotorPWM(mL);
  4617  0017AA  C062  F032         	movff	stop@mL,setMotorPWM@m
  4618  0017AE  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4619  0017B2  ECE1  F009         	call	_setMotorPWM	;wreg free
  4620                           
  4621                           ;dc_motor.c: 83: setMotorPWM(mR);
  4622  0017B6  C064  F032         	movff	stop@mR,setMotorPWM@m
  4623  0017BA  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4624  0017BE  ECE1  F009         	call	_setMotorPWM	;wreg free
  4625                           
  4626                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4627  0017C2  0E21               	movlw	33
  4628  0017C4                     u3217:
  4629  0017C4  2EE8               	decfsz	wreg,f,c
  4630  0017C6  D7FE               	goto	u3217
  4631  0017C8  F000               	nop	
  4632  0017CA                     l3042:
  4633  0017CA  C062  FFD9         	movff	stop@mL,fsr2l
  4634  0017CE  C063  FFDA         	movff	stop@mL+1,fsr2h
  4635  0017D2  50DF               	movf	indf2,w,c
  4636  0017D4  A4D8               	btfss	status,2,c
  4637  0017D6  D7D1               	goto	l3028
  4638  0017D8  C064  FFD9         	movff	stop@mR,fsr2l
  4639  0017DC  C065  FFDA         	movff	stop@mR+1,fsr2h
  4640  0017E0  50DF               	movf	indf2,w,c
  4641  0017E2  A4D8               	btfss	status,2,c
  4642  0017E4  D7CA               	goto	l3028
  4643                           
  4644                           ;dc_motor.c: 85: }
  4645                           ;dc_motor.c: 86: mL->direction=1;
  4646  0017E6  0100               	movlb	0	; () banked
  4647  0017E8  EE20 F001          	lfsr	2,1
  4648  0017EC  5162               	movf	stop@mL& (0+255),w,b
  4649  0017EE  26D9               	addwf	fsr2l,f,c
  4650  0017F0  5163               	movf	(stop@mL+1)& (0+255),w,b
  4651  0017F2  22DA               	addwfc	fsr2h,f,c
  4652  0017F4  0E01               	movlw	1
  4653  0017F6  6EDF               	movwf	indf2,c
  4654                           
  4655                           ;dc_motor.c: 87: mR->direction=1;
  4656  0017F8  0100               	movlb	0	; () banked
  4657  0017FA  EE20 F001          	lfsr	2,1
  4658  0017FE  5164               	movf	stop@mR& (0+255),w,b
  4659  001800  26D9               	addwf	fsr2l,f,c
  4660  001802  5165               	movf	(stop@mR+1)& (0+255),w,b
  4661  001804  22DA               	addwfc	fsr2h,f,c
  4662  001806  0E01               	movlw	1
  4663  001808  6EDF               	movwf	indf2,c
  4664                           
  4665                           ; BSR set to: 0
  4666  00180A  0012               	return		;funcret
  4667  00180C                     __end_of_stop:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           intcon	equ	0xFF2
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           indf1	equ	0xFE7
  4676                           plusw1	equ	0xFE3
  4677                           fsr1h	equ	0xFE2
  4678                           fsr1l	equ	0xFE1
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           plusw2	equ	0xFDB
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _setMotorPWM *****************
  4688 ;; Defined at:
  4689 ;;		line 31 in file "dc_motor.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4692 ;;		 -> main@mR(9), main@mL(9), 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  PWMduty         2    0[BANK0 ] int 
  4695 ;; Return value:  Size  Location     Type
  4696 ;;		None               void
  4697 ;; Registers used:
  4698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4699 ;; Tracked objects:
  4700 ;;		On entry : 0/0
  4701 ;;		On exit  : 0/0
  4702 ;;		Unchanged: 0/0
  4703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4704 ;;      Params:         2       0       0       0
  4705 ;;      Locals:         0       2       0       0
  4706 ;;      Temps:          5       0       0       0
  4707 ;;      Totals:         7       2       0       0
  4708 ;;Total ram usage:        9 bytes
  4709 ;; Hardware stack levels used:    1
  4710 ;; Hardware stack levels required when called:    4
  4711 ;; This function calls:
  4712 ;;		___awdiv
  4713 ;;		___wmul
  4714 ;; This function is called by:
  4715 ;;		_stop
  4716 ;;		_fullSpeedAhead
  4717 ;;		_setMotorFullSpeed
  4718 ;;		_stopMotor
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           	psect	text16
  4723  0013C2                     __ptext16:
  4724                           	opt stack 0
  4725  0013C2                     _setMotorPWM:
  4726                           	opt stack 24
  4727                           
  4728                           ;dc_motor.c: 33: int PWMduty;
  4729                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;incstack = 0
  4733  0013C2  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4734  0013C6  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4735  0013CA  50DF               	movf	indf2,w,c
  4736  0013CC  6E34               	movwf	??_setMotorPWM& (0+255),c
  4737  0013CE  5034               	movf	??_setMotorPWM,w,c
  4738  0013D0  6E24               	movwf	___wmul@multiplier,c
  4739  0013D2  6A25               	clrf	___wmul@multiplier+1,c
  4740  0013D4  EE20 F007          	lfsr	2,7
  4741  0013D8  5032               	movf	setMotorPWM@m,w,c
  4742  0013DA  26D9               	addwf	fsr2l,f,c
  4743  0013DC  5033               	movf	setMotorPWM@m+1,w,c
  4744  0013DE  22DA               	addwfc	fsr2h,f,c
  4745  0013E0  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4746  0013E4  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4747  0013E8  ECF4  F00E         	call	___wmul	;wreg free
  4748  0013EC  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4749  0013F0  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4750  0013F4  0E00               	movlw	0
  4751  0013F6  6E2D               	movwf	___awdiv@divisor+1,c
  4752  0013F8  0E64               	movlw	100
  4753  0013FA  6E2C               	movwf	___awdiv@divisor,c
  4754  0013FC  EC4B  F00C         	call	___awdiv	;wreg free
  4755  001400  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4756  001404  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4757                           
  4758                           ;dc_motor.c: 37: if (m->direction)
  4759  001408  EE20 F001          	lfsr	2,1
  4760  00140C  5032               	movf	setMotorPWM@m,w,c
  4761  00140E  26D9               	addwf	fsr2l,f,c
  4762  001410  5033               	movf	setMotorPWM@m+1,w,c
  4763  001412  22DA               	addwfc	fsr2h,f,c
  4764  001414  50DF               	movf	indf2,w,c
  4765  001416  B4D8               	btfsc	status,2,c
  4766  001418  D02E               	goto	l3006
  4767                           
  4768                           ;dc_motor.c: 38: {
  4769                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4770  00141A  EE20 F006          	lfsr	2,6
  4771  00141E  5032               	movf	setMotorPWM@m,w,c
  4772  001420  26D9               	addwf	fsr2l,f,c
  4773  001422  5033               	movf	setMotorPWM@m+1,w,c
  4774  001424  22DA               	addwfc	fsr2h,f,c
  4775  001426  50DF               	movf	indf2,w,c
  4776  001428  6E34               	movwf	??_setMotorPWM& (0+255),c
  4777  00142A  0E01               	movlw	1
  4778  00142C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4779  00142E  2A34               	incf	??_setMotorPWM,f,c
  4780  001430  D002               	goto	u2364
  4781  001432                     u2365:
  4782  001432  90D8               	bcf	status,0,c
  4783  001434  3635               	rlcf	??_setMotorPWM+1,f,c
  4784  001436                     u2364:
  4785  001436  2E34               	decfsz	??_setMotorPWM,f,c
  4786  001438  D7FC               	goto	u2365
  4787  00143A  5035               	movf	??_setMotorPWM+1,w,c
  4788  00143C  108A               	iorwf	3978,w,c	;volatile
  4789  00143E  6E8A               	movwf	3978,c	;volatile
  4790                           
  4791                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4792  001440  EE20 F007          	lfsr	2,7
  4793  001444  5032               	movf	setMotorPWM@m,w,c
  4794  001446  26D9               	addwf	fsr2l,f,c
  4795  001448  5033               	movf	setMotorPWM@m+1,w,c
  4796  00144A  22DA               	addwfc	fsr2h,f,c
  4797  00144C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4798  001450  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4799  001454  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4800  001458  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4801  00145C  1E36               	comf	??_setMotorPWM+2,f,c
  4802  00145E  1E37               	comf	??_setMotorPWM+3,f,c
  4803  001460  4A36               	infsnz	??_setMotorPWM+2,f,c
  4804  001462  2A37               	incf	??_setMotorPWM+3,f,c
  4805  001464  5034               	movf	??_setMotorPWM,w,c
  4806  001466  2436               	addwf	??_setMotorPWM+2,w,c
  4807  001468  0100               	movlb	0	; () banked
  4808  00146A  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4809  00146C  5035               	movf	??_setMotorPWM+1,w,c
  4810  00146E  2037               	addwfc	??_setMotorPWM+3,w,c
  4811  001470  0100               	movlb	0	; () banked
  4812  001472  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4813                           
  4814                           ;dc_motor.c: 41: }
  4815  001474  D014               	goto	l37
  4816  001476                     l3006:
  4817                           
  4818                           ;dc_motor.c: 42: else
  4819                           ;dc_motor.c: 43: {
  4820                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4821  001476  EE20 F006          	lfsr	2,6
  4822  00147A  5032               	movf	setMotorPWM@m,w,c
  4823  00147C  26D9               	addwf	fsr2l,f,c
  4824  00147E  5033               	movf	setMotorPWM@m+1,w,c
  4825  001480  22DA               	addwfc	fsr2h,f,c
  4826  001482  50DF               	movf	indf2,w,c
  4827  001484  6E34               	movwf	??_setMotorPWM& (0+255),c
  4828  001486  0E01               	movlw	1
  4829  001488  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4830  00148A  2A34               	incf	??_setMotorPWM,f,c
  4831  00148C  D002               	goto	u2374
  4832  00148E                     u2375:
  4833  00148E  90D8               	bcf	status,0,c
  4834  001490  3635               	rlcf	??_setMotorPWM+1,f,c
  4835  001492                     u2374:
  4836  001492  2E34               	decfsz	??_setMotorPWM,f,c
  4837  001494  D7FC               	goto	u2375
  4838  001496  5035               	movf	??_setMotorPWM+1,w,c
  4839  001498  0AFF               	xorlw	255
  4840  00149A  148A               	andwf	3978,w,c	;volatile
  4841  00149C  6E8A               	movwf	3978,c	;volatile
  4842  00149E                     l37:
  4843                           
  4844                           ;dc_motor.c: 45: }
  4845                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4846  00149E  EE20 F002          	lfsr	2,2
  4847  0014A2  5032               	movf	setMotorPWM@m,w,c
  4848  0014A4  26D9               	addwf	fsr2l,f,c
  4849  0014A6  5033               	movf	setMotorPWM@m+1,w,c
  4850  0014A8  22DA               	addwfc	fsr2h,f,c
  4851  0014AA  CFDE F034          	movff	postinc2,??_setMotorPWM
  4852  0014AE  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4853  0014B2  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4854  0014B6  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4855  0014BA  0100               	movlb	0	; () banked
  4856  0014BC  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4857  0014BE  46E8               	rlncf	wreg,f,c
  4858  0014C0  0BFC               	andlw	252
  4859  0014C2  6EDF               	movwf	indf2,c
  4860                           
  4861                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4862  0014C4  EE20 F004          	lfsr	2,4
  4863  0014C8  5032               	movf	setMotorPWM@m,w,c
  4864  0014CA  26D9               	addwf	fsr2l,f,c
  4865  0014CC  5033               	movf	setMotorPWM@m+1,w,c
  4866  0014CE  22DA               	addwfc	fsr2h,f,c
  4867  0014D0  CFDE F034          	movff	postinc2,??_setMotorPWM
  4868  0014D4  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4869  0014D8  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4870  0014DC  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4871  0014E0  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4872  0014E4  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4873  0014E8  0E06               	movlw	6
  4874  0014EA  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4875  0014EC                     u2385:
  4876  0014EC  3437               	rlcf	??_setMotorPWM+3,w,c
  4877  0014EE  3237               	rrcf	??_setMotorPWM+3,f,c
  4878  0014F0  3236               	rrcf	??_setMotorPWM+2,f,c
  4879  0014F2  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4880  0014F4  D7FB               	goto	u2385
  4881  0014F6  5036               	movf	??_setMotorPWM+2,w,c
  4882  0014F8  6EDF               	movwf	indf2,c
  4883                           
  4884                           ; BSR set to: 0
  4885  0014FA  0012               	return		;funcret
  4886  0014FC                     __end_of_setMotorPWM:
  4887                           	opt stack 0
  4888                           tblptru	equ	0xFF8
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           postinc0	equ	0xFEE
  4893                           wreg	equ	0xFE8
  4894                           indf1	equ	0xFE7
  4895                           plusw1	equ	0xFE3
  4896                           fsr1h	equ	0xFE2
  4897                           fsr1l	equ	0xFE1
  4898                           indf2	equ	0xFDF
  4899                           postinc2	equ	0xFDE
  4900                           postdec2	equ	0xFDD
  4901                           plusw2	equ	0xFDB
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function ___awdiv *****************
  4907 ;; Defined at:
  4908 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  dividend        2   41[COMRAM] int 
  4911 ;;  divisor         2   43[COMRAM] int 
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;  quotient        2   47[COMRAM] int 
  4914 ;;  sign            1   46[COMRAM] unsigned char 
  4915 ;;  counter         1   45[COMRAM] unsigned char 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  2   41[COMRAM] int 
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4925 ;;      Params:         4       0       0       0
  4926 ;;      Locals:         4       0       0       0
  4927 ;;      Temps:          0       0       0       0
  4928 ;;      Totals:         8       0       0       0
  4929 ;;Total ram usage:        8 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    3
  4932 ;; This function calls:
  4933 ;;		Nothing
  4934 ;; This function is called by:
  4935 ;;		_setMotorPWM
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           	psect	text17
  4940  001896                     __ptext17:
  4941                           	opt stack 0
  4942  001896                     ___awdiv:
  4943                           	opt stack 24
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;incstack = 0
  4947  001896  0E00               	movlw	0
  4948  001898  6E2F               	movwf	___awdiv@sign,c
  4949  00189A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4950  00189C  D006               	goto	l2964
  4951  00189E  6C2C               	negf	___awdiv@divisor,c
  4952  0018A0  1E2D               	comf	___awdiv@divisor+1,f,c
  4953  0018A2  B0D8               	btfsc	status,0,c
  4954  0018A4  2A2D               	incf	___awdiv@divisor+1,f,c
  4955  0018A6  0E01               	movlw	1
  4956  0018A8  6E2F               	movwf	___awdiv@sign,c
  4957  0018AA                     l2964:
  4958  0018AA  AE2B               	btfss	___awdiv@dividend+1,7,c
  4959  0018AC  D006               	goto	l2970
  4960  0018AE  6C2A               	negf	___awdiv@dividend,c
  4961  0018B0  1E2B               	comf	___awdiv@dividend+1,f,c
  4962  0018B2  B0D8               	btfsc	status,0,c
  4963  0018B4  2A2B               	incf	___awdiv@dividend+1,f,c
  4964  0018B6  0E01               	movlw	1
  4965  0018B8  1A2F               	xorwf	___awdiv@sign,f,c
  4966  0018BA                     l2970:
  4967  0018BA  0E00               	movlw	0
  4968  0018BC  6E31               	movwf	___awdiv@quotient+1,c
  4969  0018BE  0E00               	movlw	0
  4970  0018C0  6E30               	movwf	___awdiv@quotient,c
  4971  0018C2  502C               	movf	___awdiv@divisor,w,c
  4972  0018C4  102D               	iorwf	___awdiv@divisor+1,w,c
  4973  0018C6  B4D8               	btfsc	status,2,c
  4974  0018C8  D01C               	goto	l2992
  4975  0018CA  0E01               	movlw	1
  4976  0018CC  6E2E               	movwf	___awdiv@counter,c
  4977  0018CE  D004               	goto	l2978
  4978  0018D0                     l2976:
  4979  0018D0  90D8               	bcf	status,0,c
  4980  0018D2  362C               	rlcf	___awdiv@divisor,f,c
  4981  0018D4  362D               	rlcf	___awdiv@divisor+1,f,c
  4982  0018D6  2A2E               	incf	___awdiv@counter,f,c
  4983  0018D8                     l2978:
  4984  0018D8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4985  0018DA  D7FA               	goto	l2976
  4986  0018DC                     l2980:
  4987  0018DC  90D8               	bcf	status,0,c
  4988  0018DE  3630               	rlcf	___awdiv@quotient,f,c
  4989  0018E0  3631               	rlcf	___awdiv@quotient+1,f,c
  4990  0018E2  502C               	movf	___awdiv@divisor,w,c
  4991  0018E4  5C2A               	subwf	___awdiv@dividend,w,c
  4992  0018E6  502D               	movf	___awdiv@divisor+1,w,c
  4993  0018E8  582B               	subwfb	___awdiv@dividend+1,w,c
  4994  0018EA  A0D8               	btfss	status,0,c
  4995  0018EC  D005               	goto	l2988
  4996  0018EE  502C               	movf	___awdiv@divisor,w,c
  4997  0018F0  5E2A               	subwf	___awdiv@dividend,f,c
  4998  0018F2  502D               	movf	___awdiv@divisor+1,w,c
  4999  0018F4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  5000  0018F6  8030               	bsf	___awdiv@quotient,0,c
  5001  0018F8                     l2988:
  5002  0018F8  90D8               	bcf	status,0,c
  5003  0018FA  322D               	rrcf	___awdiv@divisor+1,f,c
  5004  0018FC  322C               	rrcf	___awdiv@divisor,f,c
  5005  0018FE  2E2E               	decfsz	___awdiv@counter,f,c
  5006  001900  D7ED               	goto	l2980
  5007  001902                     l2992:
  5008  001902  502F               	movf	___awdiv@sign,w,c
  5009  001904  B4D8               	btfsc	status,2,c
  5010  001906  D004               	goto	l2996
  5011  001908  6C30               	negf	___awdiv@quotient,c
  5012  00190A  1E31               	comf	___awdiv@quotient+1,f,c
  5013  00190C  B0D8               	btfsc	status,0,c
  5014  00190E  2A31               	incf	___awdiv@quotient+1,f,c
  5015  001910                     l2996:
  5016  001910  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  5017  001914  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  5018  001918  0012               	return	
  5019  00191A                     __end_of___awdiv:
  5020                           	opt stack 0
  5021                           tblptru	equ	0xFF8
  5022                           prodh	equ	0xFF4
  5023                           prodl	equ	0xFF3
  5024                           intcon	equ	0xFF2
  5025                           postinc0	equ	0xFEE
  5026                           wreg	equ	0xFE8
  5027                           indf1	equ	0xFE7
  5028                           plusw1	equ	0xFE3
  5029                           fsr1h	equ	0xFE2
  5030                           fsr1l	equ	0xFE1
  5031                           indf2	equ	0xFDF
  5032                           postinc2	equ	0xFDE
  5033                           postdec2	equ	0xFDD
  5034                           plusw2	equ	0xFDB
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function _sprintf *****************
  5040 ;; Defined at:
  5041 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5044 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  5045 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5046 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  tmpval          4    0        struct .
  5049 ;;  cp              3    0        PTR const unsigned char 
  5050 ;;  width           2   10[BANK0 ] int 
  5051 ;;  val             2    7[BANK0 ] unsigned int 
  5052 ;;  ap              2    4[BANK0 ] PTR void [1]
  5053 ;;		 -> ?_sprintf(2), 
  5054 ;;  len             2    0        unsigned int 
  5055 ;;  c               1   12[BANK0 ] char 
  5056 ;;  flag            1    9[BANK0 ] unsigned char 
  5057 ;;  prec            1    6[BANK0 ] char 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;                  2   47[COMRAM] int 
  5060 ;; Registers used:
  5061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : 0/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5067 ;;      Params:         8       0       0       0
  5068 ;;      Locals:         0       9       0       0
  5069 ;;      Temps:          0       4       0       0
  5070 ;;      Totals:         8      13       0       0
  5071 ;;Total ram usage:       21 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    4
  5074 ;; This function calls:
  5075 ;;		___lwdiv
  5076 ;;		___lwmod
  5077 ;;		___wmul
  5078 ;;		_isdigit
  5079 ;; This function is called by:
  5080 ;;		_ScanIR
  5081 ;;		_ScanWithRange
  5082 ;;		_main
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text18
  5087  0010BC                     __ptext18:
  5088                           	opt stack 0
  5089  0010BC                     _sprintf:
  5090                           	opt stack 26
  5091                           
  5092                           ;doprnt.c: 494: va_list ap;
  5093                           ;doprnt.c: 499: signed char c;
  5094                           ;doprnt.c: 501: int width;
  5095                           ;doprnt.c: 506: signed char prec;
  5096                           ;doprnt.c: 508: unsigned char flag;
  5097                           ;doprnt.c: 523: union {
  5098                           ;doprnt.c: 524: unsigned long vd;
  5099                           ;doprnt.c: 525: double integ;
  5100                           ;doprnt.c: 526: } tmpval;
  5101                           ;doprnt.c: 528: unsigned int val;
  5102                           ;doprnt.c: 529: unsigned len;
  5103                           ;doprnt.c: 530: const char * cp;
  5104                           ;doprnt.c: 533: *ap = __va_start();
  5105                           
  5106                           ;incstack = 0
  5107  0010BC  0E34               	movlw	low (?_sprintf+4)
  5108  0010BE  0100               	movlb	0	; () banked
  5109  0010C0  6F64               	movwf	sprintf@ap& (0+255),b
  5110  0010C2  0E00               	movlw	high (?_sprintf+4)
  5111  0010C4  0100               	movlb	0	; () banked
  5112  0010C6  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  5113                           
  5114                           ;doprnt.c: 536: while(c = *f++) {
  5115  0010C8  D168               	goto	l3164
  5116  0010CA                     l3058:
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;doprnt.c: 538: if(c != '%')
  5120  0010CA  0E25               	movlw	37
  5121  0010CC  0100               	movlb	0	; () banked
  5122  0010CE  196C               	xorwf	sprintf@c& (0+255),w,b
  5123  0010D0  B4D8               	btfsc	status,2,c
  5124  0010D2  D009               	goto	l3064
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 540: {
  5128                           ;doprnt.c: 541: ((*sp++ = (c)));
  5129  0010D4  C030  FFD9         	movff	sprintf@sp,fsr2l
  5130  0010D8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5131  0010DC  C06C  FFDF         	movff	sprintf@c,indf2
  5132                           
  5133                           ; BSR set to: 0
  5134  0010E0  4A30               	infsnz	sprintf@sp,f,c
  5135  0010E2  2A31               	incf	sprintf@sp+1,f,c
  5136                           
  5137                           ;doprnt.c: 542: continue;
  5138  0010E4  D15A               	goto	l3164
  5139  0010E6                     l3064:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;doprnt.c: 543: }
  5143                           ;doprnt.c: 546: width = 0;
  5144  0010E6  0E00               	movlw	0
  5145  0010E8  0100               	movlb	0	; () banked
  5146  0010EA  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5147  0010EC  0E00               	movlw	0
  5148  0010EE  6F6A               	movwf	sprintf@width& (0+255),b
  5149                           
  5150                           ;doprnt.c: 548: flag = 0;
  5151  0010F0  0E00               	movlw	0
  5152  0010F2  0100               	movlb	0	; () banked
  5153  0010F4  6F69               	movwf	sprintf@flag& (0+255),b
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;doprnt.c: 551: switch(*f) {
  5157                           
  5158                           ;doprnt.c: 550: for(;;) {
  5159  0010F6  D004               	goto	l3070
  5160  0010F8                     l3066:
  5161                           
  5162                           ;doprnt.c: 580: flag |= 0x04;
  5163  0010F8  0100               	movlb	0	; () banked
  5164  0010FA  8569               	bsf	sprintf@flag& (0+255),2,b
  5165                           
  5166                           ;doprnt.c: 581: f++;
  5167  0010FC  4A32               	infsnz	sprintf@f,f,c
  5168  0010FE  2A33               	incf	sprintf@f+1,f,c
  5169  001100                     l3070:
  5170  001100  C032  FFF6         	movff	sprintf@f,tblptrl
  5171  001104  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5172  001108                     	if	0	;tblptru may be non-zero
  5173  001108                     	endif
  5174  001108                     	if	0	;tblptru may be non-zero
  5175  001108                     	endif
  5176  001108  0008               	tblrd		*
  5177  00110A  50F5               	movf	tablat,w,c
  5178                           
  5179                           ; Switch size 1, requested type "space"
  5180                           ; Number of cases is 1, Range of values is 48 to 48
  5181                           ; switch strategies available:
  5182                           ; Name         Instructions Cycles
  5183                           ; simple_byte            4     3 (average)
  5184                           ;	Chosen strategy is simple_byte
  5185  00110C  0A30               	xorlw	48	; case 48
  5186  00110E  B4D8               	btfsc	status,2,c
  5187  001110  D7F3               	goto	l3066
  5188                           
  5189                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5190                           
  5191                           ;doprnt.c: 586: }
  5192                           
  5193                           ;doprnt.c: 585: break;
  5194  001112  C032  FFF6         	movff	sprintf@f,tblptrl
  5195  001116  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5196  00111A                     	if	0	;tblptru may be non-zero
  5197  00111A                     	endif
  5198  00111A                     	if	0	;tblptru may be non-zero
  5199  00111A                     	endif
  5200  00111A  0008               	tblrd		*
  5201  00111C  50F5               	movf	tablat,w,c
  5202  00111E  EC18  F00F         	call	_isdigit
  5203  001122  A0D8               	btfss	status,0,c
  5204  001124  D03E               	goto	l3086
  5205                           
  5206                           ;doprnt.c: 598: width = 0;
  5207  001126  0E00               	movlw	0
  5208  001128  0100               	movlb	0	; () banked
  5209  00112A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5210  00112C  0E00               	movlw	0
  5211  00112E  6F6A               	movwf	sprintf@width& (0+255),b
  5212  001130                     l3076:
  5213                           
  5214                           ;doprnt.c: 600: width *= 10;
  5215  001130  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5216  001134  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5217  001138  0E00               	movlw	0
  5218  00113A  6E27               	movwf	___wmul@multiplicand+1,c
  5219  00113C  0E0A               	movlw	10
  5220  00113E  6E26               	movwf	___wmul@multiplicand,c
  5221  001140  ECF4  F00E         	call	___wmul	;wreg free
  5222  001144  C024  F06A         	movff	?___wmul,sprintf@width
  5223  001148  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5224                           
  5225                           ;doprnt.c: 601: width += *f++ - '0';
  5226  00114C  0ED0               	movlw	208
  5227  00114E  0100               	movlb	0	; () banked
  5228  001150  6F60               	movwf	??_sprintf& (0+255),b
  5229  001152  0EFF               	movlw	255
  5230  001154  0100               	movlb	0	; () banked
  5231  001156  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5232  001158  C032  FFF6         	movff	sprintf@f,tblptrl
  5233  00115C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5234  001160                     	if	0	;tblptru may be non-zero
  5235  001160                     	endif
  5236  001160                     	if	0	;tblptru may be non-zero
  5237  001160                     	endif
  5238  001160  0008               	tblrd		*
  5239  001162  50F5               	movf	tablat,w,c
  5240  001164  0100               	movlb	0	; () banked
  5241  001166  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5242  001168  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5243  00116A  0100               	movlb	0	; () banked
  5244  00116C  5160               	movf	??_sprintf& (0+255),w,b
  5245  00116E  0100               	movlb	0	; () banked
  5246  001170  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5247  001172  0100               	movlb	0	; () banked
  5248  001174  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5249  001176  0100               	movlb	0	; () banked
  5250  001178  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5251  00117A  0100               	movlb	0	; () banked
  5252  00117C  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5253  00117E  0100               	movlb	0	; () banked
  5254  001180  276A               	addwf	sprintf@width& (0+255),f,b
  5255  001182  0100               	movlb	0	; () banked
  5256  001184  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5257  001186  0100               	movlb	0	; () banked
  5258  001188  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5259                           
  5260                           ; BSR set to: 0
  5261  00118A  4A32               	infsnz	sprintf@f,f,c
  5262  00118C  2A33               	incf	sprintf@f+1,f,c
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5266  00118E  C032  FFF6         	movff	sprintf@f,tblptrl
  5267  001192  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5268  001196                     	if	0	;tblptru may be non-zero
  5269  001196                     	endif
  5270  001196                     	if	0	;tblptru may be non-zero
  5271  001196                     	endif
  5272  001196  0008               	tblrd		*
  5273  001198  50F5               	movf	tablat,w,c
  5274  00119A  EC18  F00F         	call	_isdigit
  5275  00119E  B0D8               	btfsc	status,0,c
  5276  0011A0  D7C7               	goto	l3076
  5277  0011A2                     l3086:
  5278  0011A2  C032  FFF6         	movff	sprintf@f,tblptrl
  5279  0011A6  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5280  0011AA  4A32               	infsnz	sprintf@f,f,c
  5281  0011AC  2A33               	incf	sprintf@f+1,f,c
  5282  0011AE                     	if	0	;tblptru may be non-zero
  5283  0011AE                     	endif
  5284  0011AE                     	if	0	;tblptru may be non-zero
  5285  0011AE                     	endif
  5286  0011AE  0008               	tblrd		*
  5287  0011B0  CFF5 F06C          	movff	tablat,sprintf@c
  5288  0011B4  0100               	movlb	0	; () banked
  5289  0011B6  516C               	movf	sprintf@c& (0+255),w,b
  5290                           
  5291                           ; Switch size 1, requested type "space"
  5292                           ; Number of cases is 3, Range of values is 0 to 105
  5293                           ; switch strategies available:
  5294                           ; Name         Instructions Cycles
  5295                           ; simple_byte           10     6 (average)
  5296                           ;	Chosen strategy is simple_byte
  5297  0011B8  0A00               	xorlw	0	; case 0
  5298  0011BA  B4D8               	btfsc	status,2,c
  5299  0011BC  D0FB               	goto	l3166
  5300  0011BE  0A64               	xorlw	100	; case 100
  5301  0011C0  B4D8               	btfsc	status,2,c
  5302  0011C2  D003               	goto	l3088
  5303  0011C4  0A0D               	xorlw	13	; case 105
  5304  0011C6  A4D8               	btfss	status,2,c
  5305  0011C8  D0E8               	goto	l3164
  5306  0011CA                     l3088:
  5307                           
  5308                           ;doprnt.c: 1253: {
  5309                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5310  0011CA  C064  FFD9         	movff	sprintf@ap,fsr2l
  5311  0011CE  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5312  0011D2  CFDE F067          	movff	postinc2,sprintf@val
  5313  0011D6  CFDD F068          	movff	postdec2,sprintf@val+1
  5314  0011DA  0E02               	movlw	2
  5315  0011DC  0100               	movlb	0	; () banked
  5316  0011DE  2764               	addwf	sprintf@ap& (0+255),f,b
  5317  0011E0  0E00               	movlw	0
  5318  0011E2  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;doprnt.c: 1261: if((int)val < 0) {
  5322  0011E4  0100               	movlb	0	; () banked
  5323  0011E6  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5324  0011E8  D008               	goto	l3098
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;doprnt.c: 1262: flag |= 0x03;
  5328  0011EA  0E03               	movlw	3
  5329  0011EC  0100               	movlb	0	; () banked
  5330  0011EE  1369               	iorwf	sprintf@flag& (0+255),f,b
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;doprnt.c: 1263: val = -val;
  5334  0011F0  0100               	movlb	0	; () banked
  5335  0011F2  6D67               	negf	sprintf@val& (0+255),b
  5336  0011F4  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5337  0011F6  B0D8               	btfsc	status,0,c
  5338  0011F8  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5339  0011FA                     l3098:
  5340                           
  5341                           ; BSR set to: 0
  5342                           ;doprnt.c: 1264: }
  5343                           ;doprnt.c: 1266: }
  5344                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5345  0011FA  0E01               	movlw	1
  5346  0011FC  0100               	movlb	0	; () banked
  5347  0011FE  6F6C               	movwf	sprintf@c& (0+255),b
  5348  001200                     l3100:
  5349                           
  5350                           ; BSR set to: 0
  5351  001200  0E05               	movlw	5
  5352  001202  0100               	movlb	0	; () banked
  5353  001204  196C               	xorwf	sprintf@c& (0+255),w,b
  5354  001206  B4D8               	btfsc	status,2,c
  5355  001208  D016               	goto	l3112
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;doprnt.c: 1306: if(val < dpowers[c])
  5359                           
  5360                           ; BSR set to: 0
  5361                           
  5362                           ; BSR set to: 0
  5363  00120A  0100               	movlb	0	; () banked
  5364  00120C  516C               	movf	sprintf@c& (0+255),w,b
  5365  00120E  0D02               	mullw	2
  5366  001210  0E01               	movlw	low _dpowers
  5367  001212  24F3               	addwf	prodl,w,c
  5368  001214  6EF6               	movwf	tblptrl,c
  5369  001216  0E03               	movlw	high _dpowers
  5370  001218  20F4               	addwfc	prodh,w,c
  5371  00121A  6EF7               	movwf	tblptrh,c
  5372  00121C                     	if	0	;There are less than 3 active tblptr bytes
  5373  00121C                     	endif
  5374  00121C  0009               	tblrd		*+
  5375  00121E  50F5               	movf	tablat,w,c
  5376  001220  0100               	movlb	0	; () banked
  5377  001222  5D67               	subwf	sprintf@val& (0+255),w,b
  5378  001224  0009               	tblrd		*+
  5379  001226  50F5               	movf	tablat,w,c
  5380  001228  0100               	movlb	0	; () banked
  5381  00122A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5382  00122C  A0D8               	btfss	status,0,c
  5383  00122E  D003               	goto	l3112
  5384                           
  5385                           ; BSR set to: 0
  5386                           
  5387                           ; BSR set to: 0
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;doprnt.c: 1307: break;
  5391  001230  0100               	movlb	0	; () banked
  5392  001232  2B6C               	incf	sprintf@c& (0+255),f,b
  5393  001234  D7E5               	goto	l3100
  5394  001236                     l3112:
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5398  001236  0100               	movlb	0	; () banked
  5399  001238  516A               	movf	sprintf@width& (0+255),w,b
  5400  00123A  0100               	movlb	0	; () banked
  5401  00123C  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5402  00123E  B4D8               	btfsc	status,2,c
  5403  001240  D00B               	goto	l3118
  5404                           
  5405                           ; BSR set to: 0
  5406  001242  C069  F060         	movff	sprintf@flag,??_sprintf
  5407  001246  0E03               	movlw	3
  5408  001248  0100               	movlb	0	; () banked
  5409  00124A  1760               	andwf	??_sprintf& (0+255),f,b
  5410  00124C  B4D8               	btfsc	status,2,c
  5411  00124E  D004               	goto	l3118
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;doprnt.c: 1346: width--;
  5415  001250  0100               	movlb	0	; () banked
  5416  001252  076A               	decf	sprintf@width& (0+255),f,b
  5417  001254  A0D8               	btfss	status,0,c
  5418  001256  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5419  001258                     l3118:
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;doprnt.c: 1381: if(width > c)
  5423  001258  0E80               	movlw	128
  5424  00125A  0100               	movlb	0	; () banked
  5425  00125C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5426  00125E  0E7F               	movlw	127
  5427  001260  0100               	movlb	0	; () banked
  5428  001262  6F60               	movwf	??_sprintf& (0+255),b
  5429  001264  0100               	movlb	0	; () banked
  5430  001266  516A               	movf	sprintf@width& (0+255),w,b
  5431  001268  0100               	movlb	0	; () banked
  5432  00126A  5D6C               	subwf	sprintf@c& (0+255),w,b
  5433  00126C  0100               	movlb	0	; () banked
  5434  00126E  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5435  001270  0A80               	xorlw	128
  5436  001272  0100               	movlb	0	; () banked
  5437  001274  5960               	subwfb	??_sprintf& (0+255),w,b
  5438  001276  B0D8               	btfsc	status,0,c
  5439  001278  D00B               	goto	l3122
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;doprnt.c: 1382: width -= c;
  5443  00127A  0100               	movlb	0	; () banked
  5444  00127C  516C               	movf	sprintf@c& (0+255),w,b
  5445  00127E  0100               	movlb	0	; () banked
  5446  001280  5F6A               	subwf	sprintf@width& (0+255),f,b
  5447  001282  0E00               	movlw	0
  5448  001284  0100               	movlb	0	; () banked
  5449  001286  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5450  001288  0EFF               	movlw	255
  5451  00128A  0100               	movlb	0	; () banked
  5452  00128C  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5453  00128E  D005               	goto	l3124
  5454  001290                     l3122:
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;doprnt.c: 1383: else
  5458                           ;doprnt.c: 1384: width = 0;
  5459  001290  0E00               	movlw	0
  5460  001292  0100               	movlb	0	; () banked
  5461  001294  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5462  001296  0E00               	movlw	0
  5463  001298  6F6A               	movwf	sprintf@width& (0+255),b
  5464  00129A                     l3124:
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;doprnt.c: 1387: if(flag & 0x04) {
  5468  00129A  0100               	movlb	0	; () banked
  5469  00129C  A569               	btfss	sprintf@flag& (0+255),2,b
  5470  00129E  D022               	goto	l3140
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;doprnt.c: 1392: if(flag & 0x03)
  5474  0012A0  C069  F060         	movff	sprintf@flag,??_sprintf
  5475  0012A4  0E03               	movlw	3
  5476  0012A6  0100               	movlb	0	; () banked
  5477  0012A8  1760               	andwf	??_sprintf& (0+255),f,b
  5478  0012AA  B4D8               	btfsc	status,2,c
  5479  0012AC  D008               	goto	l3132
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5483  0012AE  C030  FFD9         	movff	sprintf@sp,fsr2l
  5484  0012B2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5485  0012B6  0E2D               	movlw	45
  5486  0012B8  6EDF               	movwf	indf2,c
  5487                           
  5488                           ; BSR set to: 0
  5489  0012BA  4A30               	infsnz	sprintf@sp,f,c
  5490  0012BC  2A31               	incf	sprintf@sp+1,f,c
  5491  0012BE                     l3132:
  5492                           
  5493                           ; BSR set to: 0
  5494                           ;doprnt.c: 1415: if(width)
  5495  0012BE  0100               	movlb	0	; () banked
  5496  0012C0  516A               	movf	sprintf@width& (0+255),w,b
  5497  0012C2  0100               	movlb	0	; () banked
  5498  0012C4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5499  0012C6  B4D8               	btfsc	status,2,c
  5500  0012C8  D034               	goto	l3154
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5504                           
  5505                           ; BSR set to: 0
  5506                           
  5507                           ;doprnt.c: 1416: do
  5508  0012CA  C030  FFD9         	movff	sprintf@sp,fsr2l
  5509  0012CE  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5510  0012D2  0E30               	movlw	48
  5511  0012D4  6EDF               	movwf	indf2,c
  5512                           
  5513                           ; BSR set to: 0
  5514  0012D6  4A30               	infsnz	sprintf@sp,f,c
  5515  0012D8  2A31               	incf	sprintf@sp+1,f,c
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;doprnt.c: 1418: while(--width);
  5519  0012DA  0100               	movlb	0	; () banked
  5520  0012DC  076A               	decf	sprintf@width& (0+255),f,b
  5521  0012DE  A0D8               	btfss	status,0,c
  5522  0012E0  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5523  0012E2  D7ED               	goto	l3132
  5524  0012E4                     l3140:
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;doprnt.c: 1422: {
  5528                           ;doprnt.c: 1424: if(width
  5529                           ;doprnt.c: 1428: )
  5530  0012E4  0100               	movlb	0	; () banked
  5531  0012E6  516A               	movf	sprintf@width& (0+255),w,b
  5532  0012E8  0100               	movlb	0	; () banked
  5533  0012EA  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5534  0012EC  B4D8               	btfsc	status,2,c
  5535  0012EE  D012               	goto	l3148
  5536  0012F0                     l3142:
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5540  0012F0  C030  FFD9         	movff	sprintf@sp,fsr2l
  5541  0012F4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5542  0012F8  0E20               	movlw	32
  5543  0012FA  6EDF               	movwf	indf2,c
  5544                           
  5545                           ; BSR set to: 0
  5546  0012FC  4A30               	infsnz	sprintf@sp,f,c
  5547  0012FE  2A31               	incf	sprintf@sp+1,f,c
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;doprnt.c: 1431: while(--width);
  5551  001300  0100               	movlb	0	; () banked
  5552  001302  076A               	decf	sprintf@width& (0+255),f,b
  5553  001304  A0D8               	btfss	status,0,c
  5554  001306  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5555  001308  0100               	movlb	0	; () banked
  5556  00130A  516A               	movf	sprintf@width& (0+255),w,b
  5557  00130C  0100               	movlb	0	; () banked
  5558  00130E  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5559  001310  A4D8               	btfss	status,2,c
  5560  001312  D7EE               	goto	l3142
  5561  001314                     l3148:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;doprnt.c: 1438: if(flag & 0x03)
  5565  001314  C069  F060         	movff	sprintf@flag,??_sprintf
  5566  001318  0E03               	movlw	3
  5567  00131A  0100               	movlb	0	; () banked
  5568  00131C  1760               	andwf	??_sprintf& (0+255),f,b
  5569  00131E  B4D8               	btfsc	status,2,c
  5570  001320  D008               	goto	l3154
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5574  001322  C030  FFD9         	movff	sprintf@sp,fsr2l
  5575  001326  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5576  00132A  0E2D               	movlw	45
  5577  00132C  6EDF               	movwf	indf2,c
  5578                           
  5579                           ; BSR set to: 0
  5580  00132E  4A30               	infsnz	sprintf@sp,f,c
  5581  001330  2A31               	incf	sprintf@sp+1,f,c
  5582  001332                     l3154:
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;doprnt.c: 1469: }
  5586                           ;doprnt.c: 1472: prec = c;
  5587  001332  C06C  F066         	movff	sprintf@c,sprintf@prec
  5588                           
  5589                           ;doprnt.c: 1474: while(prec--) {
  5590  001336  D02B               	goto	l3162
  5591  001338                     l3156:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;doprnt.c: 1478: {
  5595                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5596  001338  0100               	movlb	0	; () banked
  5597  00133A  5166               	movf	sprintf@prec& (0+255),w,b
  5598  00133C  0D02               	mullw	2
  5599  00133E  0E01               	movlw	low _dpowers
  5600  001340  24F3               	addwf	prodl,w,c
  5601  001342  6EF6               	movwf	tblptrl,c
  5602  001344  0E03               	movlw	high _dpowers
  5603  001346  20F4               	addwfc	prodh,w,c
  5604  001348  6EF7               	movwf	tblptrh,c
  5605  00134A                     	if	0	;There are less than 3 active tblptr bytes
  5606  00134A                     	endif
  5607  00134A  0009               	tblrd		*+
  5608  00134C  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5609  001350  000A               	tblrd		*-
  5610  001352  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5611  001356  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5612  00135A  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5613  00135E  EC9A  F00D         	call	___lwdiv	;wreg free
  5614  001362  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5615  001366  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5616  00136A  0E00               	movlw	0
  5617  00136C  6E2E               	movwf	___lwmod@divisor+1,c
  5618  00136E  0E0A               	movlw	10
  5619  001370  6E2D               	movwf	___lwmod@divisor,c
  5620  001372  ECC3  F00D         	call	___lwmod	;wreg free
  5621  001376  502B               	movf	?___lwmod,w,c
  5622  001378  0F30               	addlw	48
  5623  00137A  0100               	movlb	0	; () banked
  5624  00137C  6F6C               	movwf	sprintf@c& (0+255),b
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;doprnt.c: 1523: }
  5628                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5629  00137E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5630  001382  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5631  001386  C06C  FFDF         	movff	sprintf@c,indf2
  5632                           
  5633                           ; BSR set to: 0
  5634  00138A  4A30               	infsnz	sprintf@sp,f,c
  5635  00138C  2A31               	incf	sprintf@sp+1,f,c
  5636  00138E                     l3162:
  5637                           
  5638                           ; BSR set to: 0
  5639  00138E  0100               	movlb	0	; () banked
  5640  001390  0766               	decf	sprintf@prec& (0+255),f,b
  5641  001392  0100               	movlb	0	; () banked
  5642  001394  2966               	incf	sprintf@prec& (0+255),w,b
  5643  001396  A4D8               	btfss	status,2,c
  5644  001398  D7CF               	goto	l3156
  5645  00139A                     l3164:
  5646  00139A  C032  FFF6         	movff	sprintf@f,tblptrl
  5647  00139E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5648  0013A2  4A32               	infsnz	sprintf@f,f,c
  5649  0013A4  2A33               	incf	sprintf@f+1,f,c
  5650  0013A6                     	if	0	;tblptru may be non-zero
  5651  0013A6                     	endif
  5652  0013A6                     	if	0	;tblptru may be non-zero
  5653  0013A6                     	endif
  5654  0013A6  0008               	tblrd		*
  5655  0013A8  CFF5 F06C          	movff	tablat,sprintf@c
  5656  0013AC  0100               	movlb	0	; () banked
  5657  0013AE  516C               	movf	sprintf@c& (0+255),w,b
  5658  0013B0  A4D8               	btfss	status,2,c
  5659  0013B2  D68B               	goto	l3058
  5660  0013B4                     l3166:
  5661                           
  5662                           ;doprnt.c: 1538: *sp = 0;
  5663  0013B4  C030  FFD9         	movff	sprintf@sp,fsr2l
  5664  0013B8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5665  0013BC  0E00               	movlw	0
  5666  0013BE  6EDF               	movwf	indf2,c
  5667  0013C0  0012               	return	
  5668  0013C2                     __end_of_sprintf:
  5669                           	opt stack 0
  5670                           tblptru	equ	0xFF8
  5671                           tblptrh	equ	0xFF7
  5672                           tblptrl	equ	0xFF6
  5673                           tablat	equ	0xFF5
  5674                           prodh	equ	0xFF4
  5675                           prodl	equ	0xFF3
  5676                           intcon	equ	0xFF2
  5677                           postinc0	equ	0xFEE
  5678                           wreg	equ	0xFE8
  5679                           indf1	equ	0xFE7
  5680                           plusw1	equ	0xFE3
  5681                           fsr1h	equ	0xFE2
  5682                           fsr1l	equ	0xFE1
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           plusw2	equ	0xFDB
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _isdigit *****************
  5692 ;; Defined at:
  5693 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  c               1    wreg     unsigned char 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  c               1   37[COMRAM] unsigned char 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;		None               void
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5707 ;;      Params:         0       0       0       0
  5708 ;;      Locals:         2       0       0       0
  5709 ;;      Temps:          1       0       0       0
  5710 ;;      Totals:         3       0       0       0
  5711 ;;Total ram usage:        3 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    3
  5714 ;; This function calls:
  5715 ;;		Nothing
  5716 ;; This function is called by:
  5717 ;;		_sprintf
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text19
  5722  001E30                     __ptext19:
  5723                           	opt stack 0
  5724  001E30                     _isdigit:
  5725                           	opt stack 26
  5726                           
  5727                           ;incstack = 0
  5728                           ;isdigit@c stored from wreg
  5729  001E30  6E26               	movwf	isdigit@c,c
  5730  001E32  0E00               	movlw	0
  5731  001E34  6E25               	movwf	_isdigit$2069,c
  5732  001E36  0E3A               	movlw	58
  5733  001E38  6026               	cpfslt	isdigit@c,c
  5734  001E3A  D005               	goto	l2148
  5735  001E3C  0E2F               	movlw	47
  5736  001E3E  6426               	cpfsgt	isdigit@c,c
  5737  001E40  D002               	goto	l2148
  5738  001E42  0E01               	movlw	1
  5739  001E44  6E25               	movwf	_isdigit$2069,c
  5740  001E46                     l2148:
  5741  001E46  C025  F024         	movff	_isdigit$2069,??_isdigit
  5742  001E4A  3024               	rrcf	??_isdigit,w,c
  5743  001E4C  0012               	return	
  5744  001E4E                     __end_of_isdigit:
  5745                           	opt stack 0
  5746                           tblptru	equ	0xFF8
  5747                           tblptrh	equ	0xFF7
  5748                           tblptrl	equ	0xFF6
  5749                           tablat	equ	0xFF5
  5750                           prodh	equ	0xFF4
  5751                           prodl	equ	0xFF3
  5752                           intcon	equ	0xFF2
  5753                           postinc0	equ	0xFEE
  5754                           wreg	equ	0xFE8
  5755                           indf1	equ	0xFE7
  5756                           plusw1	equ	0xFE3
  5757                           fsr1h	equ	0xFE2
  5758                           fsr1l	equ	0xFE1
  5759                           indf2	equ	0xFDF
  5760                           postinc2	equ	0xFDE
  5761                           postdec2	equ	0xFDD
  5762                           plusw2	equ	0xFDB
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function ___wmul *****************
  5768 ;; Defined at:
  5769 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  multiplier      2   35[COMRAM] unsigned int 
  5772 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;  product         2   39[COMRAM] unsigned int 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  2   35[COMRAM] unsigned int 
  5777 ;; Registers used:
  5778 ;;		wreg, status,2, status,0, prodl, prodh
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5784 ;;      Params:         4       0       0       0
  5785 ;;      Locals:         2       0       0       0
  5786 ;;      Temps:          0       0       0       0
  5787 ;;      Totals:         6       0       0       0
  5788 ;;Total ram usage:        6 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    3
  5791 ;; This function calls:
  5792 ;;		Nothing
  5793 ;; This function is called by:
  5794 ;;		_setMotorPWM
  5795 ;;		_sprintf
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           	psect	text20
  5800  001DE8                     __ptext20:
  5801                           	opt stack 0
  5802  001DE8                     ___wmul:
  5803                           	opt stack 24
  5804                           
  5805                           ;incstack = 0
  5806  001DE8  5024               	movf	___wmul@multiplier,w,c
  5807  001DEA  0226               	mulwf	___wmul@multiplicand,c
  5808  001DEC  CFF3 F028          	movff	prodl,___wmul@product
  5809  001DF0  CFF4 F029          	movff	prodh,___wmul@product+1
  5810  001DF4  5024               	movf	___wmul@multiplier,w,c
  5811  001DF6  0227               	mulwf	___wmul@multiplicand+1,c
  5812  001DF8  50F3               	movf	prodl,w,c
  5813  001DFA  2629               	addwf	___wmul@product+1,f,c
  5814  001DFC  5025               	movf	___wmul@multiplier+1,w,c
  5815  001DFE  0226               	mulwf	___wmul@multiplicand,c
  5816  001E00  50F3               	movf	prodl,w,c
  5817  001E02  2629               	addwf	___wmul@product+1,f,c
  5818  001E04  C028  F024         	movff	___wmul@product,?___wmul
  5819  001E08  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5820  001E0C  0012               	return	
  5821  001E0E                     __end_of___wmul:
  5822                           	opt stack 0
  5823                           tblptru	equ	0xFF8
  5824                           tblptrh	equ	0xFF7
  5825                           tblptrl	equ	0xFF6
  5826                           tablat	equ	0xFF5
  5827                           prodh	equ	0xFF4
  5828                           prodl	equ	0xFF3
  5829                           intcon	equ	0xFF2
  5830                           postinc0	equ	0xFEE
  5831                           wreg	equ	0xFE8
  5832                           indf1	equ	0xFE7
  5833                           plusw1	equ	0xFE3
  5834                           fsr1h	equ	0xFE2
  5835                           fsr1l	equ	0xFE1
  5836                           indf2	equ	0xFDF
  5837                           postinc2	equ	0xFDE
  5838                           postdec2	equ	0xFDD
  5839                           plusw2	equ	0xFDB
  5840                           fsr2h	equ	0xFDA
  5841                           fsr2l	equ	0xFD9
  5842                           status	equ	0xFD8
  5843                           
  5844 ;; *************** function ___lwmod *****************
  5845 ;; Defined at:
  5846 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  dividend        2   42[COMRAM] unsigned int 
  5849 ;;  divisor         2   44[COMRAM] unsigned int 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  counter         1   46[COMRAM] unsigned char 
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  2   42[COMRAM] unsigned int 
  5854 ;; Registers used:
  5855 ;;		wreg, status,2, status,0
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5861 ;;      Params:         4       0       0       0
  5862 ;;      Locals:         1       0       0       0
  5863 ;;      Temps:          0       0       0       0
  5864 ;;      Totals:         5       0       0       0
  5865 ;;Total ram usage:        5 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; Hardware stack levels required when called:    3
  5868 ;; This function calls:
  5869 ;;		Nothing
  5870 ;; This function is called by:
  5871 ;;		_sprintf
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           	psect	text21
  5876  001B86                     __ptext21:
  5877                           	opt stack 0
  5878  001B86                     ___lwmod:
  5879                           	opt stack 26
  5880                           
  5881                           ;incstack = 0
  5882  001B86  502D               	movf	___lwmod@divisor,w,c
  5883  001B88  102E               	iorwf	___lwmod@divisor+1,w,c
  5884  001B8A  B4D8               	btfsc	status,2,c
  5885  001B8C  D018               	goto	l909
  5886  001B8E  0E01               	movlw	1
  5887  001B90  6E2F               	movwf	___lwmod@counter,c
  5888  001B92  D004               	goto	l2180
  5889  001B94                     l2178:
  5890  001B94  90D8               	bcf	status,0,c
  5891  001B96  362D               	rlcf	___lwmod@divisor,f,c
  5892  001B98  362E               	rlcf	___lwmod@divisor+1,f,c
  5893  001B9A  2A2F               	incf	___lwmod@counter,f,c
  5894  001B9C                     l2180:
  5895  001B9C  AE2E               	btfss	___lwmod@divisor+1,7,c
  5896  001B9E  D7FA               	goto	l2178
  5897  001BA0                     l2182:
  5898  001BA0  502D               	movf	___lwmod@divisor,w,c
  5899  001BA2  5C2B               	subwf	___lwmod@dividend,w,c
  5900  001BA4  502E               	movf	___lwmod@divisor+1,w,c
  5901  001BA6  582C               	subwfb	___lwmod@dividend+1,w,c
  5902  001BA8  A0D8               	btfss	status,0,c
  5903  001BAA  D004               	goto	l2186
  5904  001BAC  502D               	movf	___lwmod@divisor,w,c
  5905  001BAE  5E2B               	subwf	___lwmod@dividend,f,c
  5906  001BB0  502E               	movf	___lwmod@divisor+1,w,c
  5907  001BB2  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5908  001BB4                     l2186:
  5909  001BB4  90D8               	bcf	status,0,c
  5910  001BB6  322E               	rrcf	___lwmod@divisor+1,f,c
  5911  001BB8  322D               	rrcf	___lwmod@divisor,f,c
  5912  001BBA  2E2F               	decfsz	___lwmod@counter,f,c
  5913  001BBC  D7F1               	goto	l2182
  5914  001BBE                     l909:
  5915  001BBE  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5916  001BC2  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5917  001BC6  0012               	return		;funcret
  5918  001BC8                     __end_of___lwmod:
  5919                           	opt stack 0
  5920                           tblptru	equ	0xFF8
  5921                           tblptrh	equ	0xFF7
  5922                           tblptrl	equ	0xFF6
  5923                           tablat	equ	0xFF5
  5924                           prodh	equ	0xFF4
  5925                           prodl	equ	0xFF3
  5926                           intcon	equ	0xFF2
  5927                           postinc0	equ	0xFEE
  5928                           wreg	equ	0xFE8
  5929                           indf1	equ	0xFE7
  5930                           plusw1	equ	0xFE3
  5931                           fsr1h	equ	0xFE2
  5932                           fsr1l	equ	0xFE1
  5933                           indf2	equ	0xFDF
  5934                           postinc2	equ	0xFDE
  5935                           postdec2	equ	0xFDD
  5936                           plusw2	equ	0xFDB
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function ___lwdiv *****************
  5942 ;; Defined at:
  5943 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  dividend        2   35[COMRAM] unsigned int 
  5946 ;;  divisor         2   37[COMRAM] unsigned int 
  5947 ;; Auto vars:     Size  Location     Type
  5948 ;;  quotient        2   39[COMRAM] unsigned int 
  5949 ;;  counter         1   41[COMRAM] unsigned char 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  2   35[COMRAM] unsigned int 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5959 ;;      Params:         4       0       0       0
  5960 ;;      Locals:         3       0       0       0
  5961 ;;      Temps:          0       0       0       0
  5962 ;;      Totals:         7       0       0       0
  5963 ;;Total ram usage:        7 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    3
  5966 ;; This function calls:
  5967 ;;		Nothing
  5968 ;; This function is called by:
  5969 ;;		_sprintf
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           	psect	text22
  5974  001B34                     __ptext22:
  5975                           	opt stack 0
  5976  001B34                     ___lwdiv:
  5977                           	opt stack 26
  5978                           
  5979                           ;incstack = 0
  5980  001B34  0E00               	movlw	0
  5981  001B36  6E29               	movwf	___lwdiv@quotient+1,c
  5982  001B38  0E00               	movlw	0
  5983  001B3A  6E28               	movwf	___lwdiv@quotient,c
  5984  001B3C  5026               	movf	___lwdiv@divisor,w,c
  5985  001B3E  1027               	iorwf	___lwdiv@divisor+1,w,c
  5986  001B40  B4D8               	btfsc	status,2,c
  5987  001B42  D01C               	goto	l899
  5988  001B44  0E01               	movlw	1
  5989  001B46  6E2A               	movwf	___lwdiv@counter,c
  5990  001B48  D004               	goto	l2160
  5991  001B4A                     l2158:
  5992  001B4A  90D8               	bcf	status,0,c
  5993  001B4C  3626               	rlcf	___lwdiv@divisor,f,c
  5994  001B4E  3627               	rlcf	___lwdiv@divisor+1,f,c
  5995  001B50  2A2A               	incf	___lwdiv@counter,f,c
  5996  001B52                     l2160:
  5997  001B52  AE27               	btfss	___lwdiv@divisor+1,7,c
  5998  001B54  D7FA               	goto	l2158
  5999  001B56                     l2162:
  6000  001B56  90D8               	bcf	status,0,c
  6001  001B58  3628               	rlcf	___lwdiv@quotient,f,c
  6002  001B5A  3629               	rlcf	___lwdiv@quotient+1,f,c
  6003  001B5C  5026               	movf	___lwdiv@divisor,w,c
  6004  001B5E  5C24               	subwf	___lwdiv@dividend,w,c
  6005  001B60  5027               	movf	___lwdiv@divisor+1,w,c
  6006  001B62  5825               	subwfb	___lwdiv@dividend+1,w,c
  6007  001B64  A0D8               	btfss	status,0,c
  6008  001B66  D005               	goto	l2170
  6009  001B68  5026               	movf	___lwdiv@divisor,w,c
  6010  001B6A  5E24               	subwf	___lwdiv@dividend,f,c
  6011  001B6C  5027               	movf	___lwdiv@divisor+1,w,c
  6012  001B6E  5A25               	subwfb	___lwdiv@dividend+1,f,c
  6013  001B70  8028               	bsf	___lwdiv@quotient,0,c
  6014  001B72                     l2170:
  6015  001B72  90D8               	bcf	status,0,c
  6016  001B74  3227               	rrcf	___lwdiv@divisor+1,f,c
  6017  001B76  3226               	rrcf	___lwdiv@divisor,f,c
  6018  001B78  2E2A               	decfsz	___lwdiv@counter,f,c
  6019  001B7A  D7ED               	goto	l2162
  6020  001B7C                     l899:
  6021  001B7C  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  6022  001B80  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6023  001B84  0012               	return		;funcret
  6024  001B86                     __end_of___lwdiv:
  6025                           	opt stack 0
  6026                           tblptru	equ	0xFF8
  6027                           tblptrh	equ	0xFF7
  6028                           tblptrl	equ	0xFF6
  6029                           tablat	equ	0xFF5
  6030                           prodh	equ	0xFF4
  6031                           prodl	equ	0xFF3
  6032                           intcon	equ	0xFF2
  6033                           postinc0	equ	0xFEE
  6034                           wreg	equ	0xFE8
  6035                           indf1	equ	0xFE7
  6036                           plusw1	equ	0xFE3
  6037                           fsr1h	equ	0xFE2
  6038                           fsr1l	equ	0xFE1
  6039                           indf2	equ	0xFDF
  6040                           postinc2	equ	0xFDE
  6041                           postdec2	equ	0xFDD
  6042                           plusw2	equ	0xFDB
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047 ;; *************** function _grabRightIR *****************
  6048 ;; Defined at:
  6049 ;;		line 74 in file "IR_Reading.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;		None
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6054 ;;  i               1   42[COMRAM] unsigned char 
  6055 ;; Return value:  Size  Location     Type
  6056 ;;                  2   35[COMRAM] unsigned int 
  6057 ;; Registers used:
  6058 ;;		wreg, status,2, status,0
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6064 ;;      Params:         2       0       0       0
  6065 ;;      Locals:         3       0       0       0
  6066 ;;      Temps:          3       0       0       0
  6067 ;;      Totals:         8       0       0       0
  6068 ;;Total ram usage:        8 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:    3
  6071 ;; This function calls:
  6072 ;;		Nothing
  6073 ;; This function is called by:
  6074 ;;		_ScanIR
  6075 ;;		_ScanWithRange
  6076 ;;		_main
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text23
  6081  00199A                     __ptext23:
  6082                           	opt stack 0
  6083  00199A                     _grabRightIR:
  6084                           	opt stack 27
  6085                           
  6086                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6087                           
  6088                           ;incstack = 0
  6089  00199A  0E00               	movlw	0
  6090  00199C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6091  00199E  0E00               	movlw	0
  6092  0019A0  6E29               	movwf	grabRightIR@IR_signal,c
  6093                           
  6094                           ;IR_Reading.c: 77: unsigned char i=0;
  6095  0019A2  0E00               	movlw	0
  6096  0019A4  6E2B               	movwf	grabRightIR@i,c
  6097                           
  6098                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6099  0019A6  0E00               	movlw	0
  6100  0019A8  6E2B               	movwf	grabRightIR@i,c
  6101  0019AA                     l2222:
  6102  0019AA  0E03               	movlw	3
  6103  0019AC  642B               	cpfsgt	grabRightIR@i,c
  6104  0019AE  D001               	goto	l2226
  6105  0019B0  D01E               	goto	l2232
  6106  0019B2                     l2226:
  6107                           
  6108                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6109  0019B2  5069               	movf	3945,w,c	;volatile
  6110  0019B4  6E26               	movwf	??_grabRightIR& (0+255),c
  6111  0019B6  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6112  0019B8  0E07               	movlw	7
  6113  0019BA                     u1525:
  6114  0019BA  90D8               	bcf	status,0,c
  6115  0019BC  3626               	rlcf	??_grabRightIR,f,c
  6116  0019BE  3627               	rlcf	??_grabRightIR+1,f,c
  6117  0019C0  2EE8               	decfsz	wreg,f,c
  6118  0019C2  D7FB               	goto	u1525
  6119  0019C4  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6120  0019C8  90D8               	bcf	status,0,c
  6121  0019CA  3228               	rrcf	??_grabRightIR+2,f,c
  6122  0019CC  5028               	movf	??_grabRightIR+2,w,c
  6123  0019CE  1226               	iorwf	??_grabRightIR,f,c
  6124  0019D0  0E00               	movlw	0
  6125  0019D2  1227               	iorwf	??_grabRightIR+1,f,c
  6126  0019D4  5026               	movf	??_grabRightIR,w,c
  6127  0019D6  2629               	addwf	grabRightIR@IR_signal,f,c
  6128  0019D8  5027               	movf	??_grabRightIR+1,w,c
  6129  0019DA  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6130                           
  6131                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6132  0019DC  0E82               	movlw	130
  6133  0019DE  6E26               	movwf	??_grabRightIR& (0+255),c
  6134  0019E0  0EDE               	movlw	222
  6135  0019E2                     u3227:
  6136  0019E2  2EE8               	decfsz	wreg,f,c
  6137  0019E4  D7FE               	goto	u3227
  6138  0019E6  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6139  0019E8  D7FC               	goto	u3227
  6140  0019EA  2A2B               	incf	grabRightIR@i,f,c
  6141  0019EC  D7DE               	goto	l2222
  6142  0019EE                     l2232:
  6143                           
  6144                           ;IR_Reading.c: 83: }
  6145                           ;IR_Reading.c: 85: return IR_signal>>2;
  6146  0019EE  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6147  0019F2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6148  0019F6  90D8               	bcf	status,0,c
  6149  0019F8  3227               	rrcf	??_grabRightIR+1,f,c
  6150  0019FA  3226               	rrcf	??_grabRightIR,f,c
  6151  0019FC  90D8               	bcf	status,0,c
  6152  0019FE  3227               	rrcf	??_grabRightIR+1,f,c
  6153  001A00  3226               	rrcf	??_grabRightIR,f,c
  6154  001A02  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6155  001A06  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6156  001A0A  0012               	return	
  6157  001A0C                     __end_of_grabRightIR:
  6158                           	opt stack 0
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           prodh	equ	0xFF4
  6164                           prodl	equ	0xFF3
  6165                           intcon	equ	0xFF2
  6166                           postinc0	equ	0xFEE
  6167                           wreg	equ	0xFE8
  6168                           indf1	equ	0xFE7
  6169                           plusw1	equ	0xFE3
  6170                           fsr1h	equ	0xFE2
  6171                           fsr1l	equ	0xFE1
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           plusw2	equ	0xFDB
  6176                           fsr2h	equ	0xFDA
  6177                           fsr2l	equ	0xFD9
  6178                           status	equ	0xFD8
  6179                           
  6180 ;; *************** function _grabLeftIR *****************
  6181 ;; Defined at:
  6182 ;;		line 90 in file "IR_Reading.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;		None
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6187 ;;  i               1   42[COMRAM] unsigned char 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  2   35[COMRAM] unsigned int 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6197 ;;      Params:         2       0       0       0
  6198 ;;      Locals:         3       0       0       0
  6199 ;;      Temps:          3       0       0       0
  6200 ;;      Totals:         8       0       0       0
  6201 ;;Total ram usage:        8 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    3
  6204 ;; This function calls:
  6205 ;;		Nothing
  6206 ;; This function is called by:
  6207 ;;		_ScanIR
  6208 ;;		_ScanWithRange
  6209 ;;		_main
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text24
  6214  001A0C                     __ptext24:
  6215                           	opt stack 0
  6216  001A0C                     _grabLeftIR:
  6217                           	opt stack 27
  6218                           
  6219                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6220                           
  6221                           ;incstack = 0
  6222  001A0C  0E00               	movlw	0
  6223  001A0E  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6224  001A10  0E00               	movlw	0
  6225  001A12  6E29               	movwf	grabLeftIR@IR_signal,c
  6226                           
  6227                           ;IR_Reading.c: 93: unsigned char i=0;
  6228  001A14  0E00               	movlw	0
  6229  001A16  6E2B               	movwf	grabLeftIR@i,c
  6230                           
  6231                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6232  001A18  0E00               	movlw	0
  6233  001A1A  6E2B               	movwf	grabLeftIR@i,c
  6234  001A1C                     l2238:
  6235  001A1C  0E03               	movlw	3
  6236  001A1E  642B               	cpfsgt	grabLeftIR@i,c
  6237  001A20  D001               	goto	l2242
  6238  001A22  D01E               	goto	l2248
  6239  001A24                     l2242:
  6240                           
  6241                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6242  001A24  5067               	movf	3943,w,c	;volatile
  6243  001A26  6E26               	movwf	??_grabLeftIR& (0+255),c
  6244  001A28  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6245  001A2A  0E07               	movlw	7
  6246  001A2C                     u1555:
  6247  001A2C  90D8               	bcf	status,0,c
  6248  001A2E  3626               	rlcf	??_grabLeftIR,f,c
  6249  001A30  3627               	rlcf	??_grabLeftIR+1,f,c
  6250  001A32  2EE8               	decfsz	wreg,f,c
  6251  001A34  D7FB               	goto	u1555
  6252  001A36  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6253  001A3A  90D8               	bcf	status,0,c
  6254  001A3C  3228               	rrcf	??_grabLeftIR+2,f,c
  6255  001A3E  5028               	movf	??_grabLeftIR+2,w,c
  6256  001A40  1226               	iorwf	??_grabLeftIR,f,c
  6257  001A42  0E00               	movlw	0
  6258  001A44  1227               	iorwf	??_grabLeftIR+1,f,c
  6259  001A46  5026               	movf	??_grabLeftIR,w,c
  6260  001A48  2629               	addwf	grabLeftIR@IR_signal,f,c
  6261  001A4A  5027               	movf	??_grabLeftIR+1,w,c
  6262  001A4C  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6263                           
  6264                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6265  001A4E  0E82               	movlw	130
  6266  001A50  6E26               	movwf	??_grabLeftIR& (0+255),c
  6267  001A52  0EDE               	movlw	222
  6268  001A54                     u3237:
  6269  001A54  2EE8               	decfsz	wreg,f,c
  6270  001A56  D7FE               	goto	u3237
  6271  001A58  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6272  001A5A  D7FC               	goto	u3237
  6273  001A5C  2A2B               	incf	grabLeftIR@i,f,c
  6274  001A5E  D7DE               	goto	l2238
  6275  001A60                     l2248:
  6276                           
  6277                           ;IR_Reading.c: 99: }
  6278                           ;IR_Reading.c: 101: return IR_signal>>2;
  6279  001A60  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6280  001A64  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6281  001A68  90D8               	bcf	status,0,c
  6282  001A6A  3227               	rrcf	??_grabLeftIR+1,f,c
  6283  001A6C  3226               	rrcf	??_grabLeftIR,f,c
  6284  001A6E  90D8               	bcf	status,0,c
  6285  001A70  3227               	rrcf	??_grabLeftIR+1,f,c
  6286  001A72  3226               	rrcf	??_grabLeftIR,f,c
  6287  001A74  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6288  001A78  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6289  001A7C  0012               	return	
  6290  001A7E                     __end_of_grabLeftIR:
  6291                           	opt stack 0
  6292                           tblptru	equ	0xFF8
  6293                           tblptrh	equ	0xFF7
  6294                           tblptrl	equ	0xFF6
  6295                           tablat	equ	0xFF5
  6296                           prodh	equ	0xFF4
  6297                           prodl	equ	0xFF3
  6298                           intcon	equ	0xFF2
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           indf1	equ	0xFE7
  6302                           plusw1	equ	0xFE3
  6303                           fsr1h	equ	0xFE2
  6304                           fsr1l	equ	0xFE1
  6305                           indf2	equ	0xFDF
  6306                           postinc2	equ	0xFDE
  6307                           postdec2	equ	0xFDD
  6308                           plusw2	equ	0xFDB
  6309                           fsr2h	equ	0xFDA
  6310                           fsr2l	equ	0xFD9
  6311                           status	equ	0xFD8
  6312                           
  6313 ;; *************** function _SetLine *****************
  6314 ;; Defined at:
  6315 ;;		line 74 in file "LCD.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  line            1    wreg     unsigned char 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  line            1   41[COMRAM] unsigned char 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;		None               void
  6322 ;; Registers used:
  6323 ;;		wreg, status,2, status,0, cstack
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6329 ;;      Params:         0       0       0       0
  6330 ;;      Locals:         1       0       0       0
  6331 ;;      Temps:          0       0       0       0
  6332 ;;      Totals:         1       0       0       0
  6333 ;;Total ram usage:        1 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; Hardware stack levels required when called:    6
  6336 ;; This function calls:
  6337 ;;		_SendLCD
  6338 ;; This function is called by:
  6339 ;;		_ScanIR
  6340 ;;		_ScanWithRange
  6341 ;;		_main
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           	psect	text25
  6346  001D62                     __ptext25:
  6347                           	opt stack 0
  6348  001D62                     _SetLine:
  6349                           	opt stack 24
  6350                           
  6351                           ;incstack = 0
  6352                           ;SetLine@line stored from wreg
  6353  001D62  6E2A               	movwf	SetLine@line,c
  6354                           
  6355                           ;LCD.c: 75: if (line==1) {
  6356  001D64  042A               	decf	SetLine@line,w,c
  6357  001D66  A4D8               	btfss	status,2,c
  6358  001D68  D006               	goto	l2256
  6359                           
  6360                           ;LCD.c: 76: SendLCD(0x80,0);
  6361  001D6A  0E00               	movlw	0
  6362  001D6C  6E28               	movwf	SendLCD@type,c
  6363  001D6E  0E80               	movlw	128
  6364  001D70  ECC9  F00E         	call	_SendLCD
  6365                           
  6366                           ;LCD.c: 77: } else if (line==2) {
  6367  001D74  D009               	goto	l2260
  6368  001D76                     l2256:
  6369  001D76  0E02               	movlw	2
  6370  001D78  182A               	xorwf	SetLine@line,w,c
  6371  001D7A  A4D8               	btfss	status,2,c
  6372  001D7C  D005               	goto	l2260
  6373                           
  6374                           ;LCD.c: 78: SendLCD(0xC0,0);
  6375  001D7E  0E00               	movlw	0
  6376  001D80  6E28               	movwf	SendLCD@type,c
  6377  001D82  0EC0               	movlw	192
  6378  001D84  ECC9  F00E         	call	_SendLCD
  6379  001D88                     l2260:
  6380                           
  6381                           ;LCD.c: 79: }
  6382                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6383  001D88  0E21               	movlw	33
  6384  001D8A                     u3247:
  6385  001D8A  2EE8               	decfsz	wreg,f,c
  6386  001D8C  D7FE               	goto	u3247
  6387  001D8E  F000               	nop	
  6388  001D90  0012               	return		;funcret
  6389  001D92                     __end_of_SetLine:
  6390                           	opt stack 0
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon	equ	0xFF2
  6398                           postinc0	equ	0xFEE
  6399                           wreg	equ	0xFE8
  6400                           indf1	equ	0xFE7
  6401                           plusw1	equ	0xFE3
  6402                           fsr1h	equ	0xFE2
  6403                           fsr1l	equ	0xFE1
  6404                           indf2	equ	0xFDF
  6405                           postinc2	equ	0xFDE
  6406                           postdec2	equ	0xFDD
  6407                           plusw2	equ	0xFDB
  6408                           fsr2h	equ	0xFDA
  6409                           fsr2l	equ	0xFD9
  6410                           status	equ	0xFD8
  6411                           
  6412 ;; *************** function _LCD_String *****************
  6413 ;; Defined at:
  6414 ;;		line 83 in file "LCD.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;  string          2   41[COMRAM] PTR unsigned char 
  6417 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6418 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6419 ;;		 -> STR_1(12), 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;		None               void
  6424 ;; Registers used:
  6425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6431 ;;      Params:         2       0       0       0
  6432 ;;      Locals:         0       0       0       0
  6433 ;;      Temps:          0       0       0       0
  6434 ;;      Totals:         2       0       0       0
  6435 ;;Total ram usage:        2 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    6
  6438 ;; This function calls:
  6439 ;;		_SendLCD
  6440 ;; This function is called by:
  6441 ;;		_ScanIR
  6442 ;;		_ScanWithRange
  6443 ;;		_main
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text26
  6448  001A7E                     __ptext26:
  6449                           	opt stack 0
  6450  001A7E                     _LCD_String:
  6451                           	opt stack 23
  6452                           
  6453                           ;LCD.c: 85: while(*string != 0){
  6454                           
  6455                           ;incstack = 0
  6456  001A7E  D01A               	goto	l2270
  6457  001A80                     l2264:
  6458                           
  6459                           ;LCD.c: 88: SendLCD(*string++,1);
  6460  001A80  0E01               	movlw	1
  6461  001A82  6E28               	movwf	SendLCD@type,c
  6462  001A84  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6463  001A88  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6464  001A8C  6AF8               	clrf	tblptru,c
  6465  001A8E  0E02               	movlw	(high __ramtop+-1)
  6466  001A90  64F7               	cpfsgt	tblptrh,c
  6467  001A92  D003               	bra	u1597
  6468  001A94  0008               	tblrd		*
  6469  001A96  50F5               	movf	tablat,w,c
  6470  001A98  D005               	bra	u1590
  6471  001A9A                     u1597:
  6472  001A9A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6473  001A9E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6474  001AA2  50E7               	movf	indf1,w,c
  6475  001AA4                     u1590:
  6476  001AA4  ECC9  F00E         	call	_SendLCD
  6477  001AA8  4A2A               	infsnz	LCD_String@string,f,c
  6478  001AAA  2A2B               	incf	LCD_String@string+1,f,c
  6479                           
  6480                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6481  001AAC  0E21               	movlw	33
  6482  001AAE                     u3257:
  6483  001AAE  2EE8               	decfsz	wreg,f,c
  6484  001AB0  D7FE               	goto	u3257
  6485  001AB2  F000               	nop	
  6486  001AB4                     l2270:
  6487  001AB4  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6488  001AB8  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6489  001ABC  6AF8               	clrf	tblptru,c
  6490  001ABE  0E02               	movlw	(high __ramtop+-1)
  6491  001AC0  64F7               	cpfsgt	tblptrh,c
  6492  001AC2  D003               	bra	u1607
  6493  001AC4  0008               	tblrd		*
  6494  001AC6  50F5               	movf	tablat,w,c
  6495  001AC8  D005               	bra	u1600
  6496  001ACA                     u1607:
  6497  001ACA  CFF6 FFE1          	movff	tblptrl,fsr1l
  6498  001ACE  CFF7 FFE2          	movff	tblptrh,fsr1h
  6499  001AD2  50E7               	movf	indf1,w,c
  6500  001AD4                     u1600:
  6501  001AD4  0900               	iorlw	0
  6502  001AD6  B4D8               	btfsc	status,2,c
  6503  001AD8  0012               	return	
  6504  001ADA  D7D2               	goto	l2264
  6505  001ADC                     __end_of_LCD_String:
  6506                           	opt stack 0
  6507                           tblptru	equ	0xFF8
  6508                           tblptrh	equ	0xFF7
  6509                           tblptrl	equ	0xFF6
  6510                           tablat	equ	0xFF5
  6511                           prodh	equ	0xFF4
  6512                           prodl	equ	0xFF3
  6513                           intcon	equ	0xFF2
  6514                           postinc0	equ	0xFEE
  6515                           wreg	equ	0xFE8
  6516                           indf1	equ	0xFE7
  6517                           plusw1	equ	0xFE3
  6518                           fsr1h	equ	0xFE2
  6519                           fsr1l	equ	0xFE1
  6520                           indf2	equ	0xFDF
  6521                           postinc2	equ	0xFDE
  6522                           postdec2	equ	0xFDD
  6523                           plusw2	equ	0xFDB
  6524                           fsr2h	equ	0xFDA
  6525                           fsr2l	equ	0xFD9
  6526                           status	equ	0xFD8
  6527                           
  6528 ;; *************** function _SendLCD *****************
  6529 ;; Defined at:
  6530 ;;		line 27 in file "LCD.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;  Byte            1    wreg     unsigned char 
  6533 ;;  type            1   39[COMRAM] unsigned char 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  Byte            1   40[COMRAM] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, status,2, status,0, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6545 ;;      Params:         1       0       0       0
  6546 ;;      Locals:         1       0       0       0
  6547 ;;      Temps:          0       0       0       0
  6548 ;;      Totals:         2       0       0       0
  6549 ;;Total ram usage:        2 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    5
  6552 ;; This function calls:
  6553 ;;		_LCDout
  6554 ;; This function is called by:
  6555 ;;		_initLCD
  6556 ;;		_SetLine
  6557 ;;		_LCD_String
  6558 ;;		_ScanIR
  6559 ;;		_ScanWithRange
  6560 ;;		_main
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           	psect	text27
  6565  001D92                     __ptext27:
  6566                           	opt stack 0
  6567  001D92                     _SendLCD:
  6568                           	opt stack 24
  6569                           
  6570                           ;incstack = 0
  6571                           ;SendLCD@Byte stored from wreg
  6572  001D92  6E29               	movwf	SendLCD@Byte,c
  6573                           
  6574                           ;LCD.c: 30: LATAbits.LATA6=type;
  6575  001D94  B028               	btfsc	SendLCD@type,0,c
  6576  001D96  D002               	bra	u1385
  6577  001D98  9C89               	bcf	3977,6,c	;volatile
  6578  001D9A  D001               	bra	u1386
  6579  001D9C                     u1385:
  6580  001D9C  8C89               	bsf	3977,6,c	;volatile
  6581  001D9E                     u1386:
  6582                           
  6583                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6584  001D9E  3829               	swapf	SendLCD@Byte,w,c
  6585  001DA0  0B0F               	andlw	15
  6586  001DA2  0B0F               	andlw	15
  6587  001DA4  ECFB  F00A         	call	_LCDout
  6588                           
  6589                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6590  001DA8  0E06               	movlw	6
  6591  001DAA                     u3267:
  6592  001DAA  2EE8               	decfsz	wreg,f,c
  6593  001DAC  D7FE               	goto	u3267
  6594  001DAE  D000               	nop2		;nop
  6595                           
  6596                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6597  001DB0  5029               	movf	SendLCD@Byte,w,c
  6598  001DB2  0B0F               	andlw	15
  6599  001DB4  ECFB  F00A         	call	_LCDout
  6600                           
  6601                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6602  001DB8  0E21               	movlw	33
  6603  001DBA                     u3277:
  6604  001DBA  2EE8               	decfsz	wreg,f,c
  6605  001DBC  D7FE               	goto	u3277
  6606  001DBE  F000               	nop	
  6607  001DC0  0012               	return		;funcret
  6608  001DC2                     __end_of_SendLCD:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           intcon	equ	0xFF2
  6617                           postinc0	equ	0xFEE
  6618                           wreg	equ	0xFE8
  6619                           indf1	equ	0xFE7
  6620                           plusw1	equ	0xFE3
  6621                           fsr1h	equ	0xFE2
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           plusw2	equ	0xFDB
  6627                           fsr2h	equ	0xFDA
  6628                           fsr2l	equ	0xFD9
  6629                           status	equ	0xFD8
  6630                           
  6631 ;; *************** function _LCDout *****************
  6632 ;; Defined at:
  6633 ;;		line 14 in file "LCD.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;  number          1    wreg     unsigned char 
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;  number          1   38[COMRAM] unsigned char 
  6638 ;; Return value:  Size  Location     Type
  6639 ;;		None               void
  6640 ;; Registers used:
  6641 ;;		wreg, status,2, status,0, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6647 ;;      Params:         0       0       0       0
  6648 ;;      Locals:         1       0       0       0
  6649 ;;      Temps:          3       0       0       0
  6650 ;;      Totals:         4       0       0       0
  6651 ;;Total ram usage:        4 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    4
  6654 ;; This function calls:
  6655 ;;		_E_TOG
  6656 ;; This function is called by:
  6657 ;;		_SendLCD
  6658 ;;		_initLCD
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text28
  6663  0015F6                     __ptext28:
  6664                           	opt stack 0
  6665  0015F6                     _LCDout:
  6666                           	opt stack 24
  6667                           
  6668                           ;incstack = 0
  6669                           ;LCDout@number stored from wreg
  6670  0015F6  6E27               	movwf	LCDout@number,c
  6671                           
  6672                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6673  0015F8  5027               	movf	LCDout@number,w,c
  6674  0015FA  6E24               	movwf	??_LCDout& (0+255),c
  6675  0015FC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6676  0015FE  0E07               	movlw	7
  6677  001600                     u1275:
  6678  001600  90D8               	bcf	status,0,c
  6679  001602  3624               	rlcf	??_LCDout,f,c
  6680  001604  3625               	rlcf	??_LCDout+1,f,c
  6681  001606  2EE8               	decfsz	wreg,f,c
  6682  001608  D7FB               	goto	u1275
  6683  00160A  0E07               	movlw	7
  6684  00160C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6685  00160E                     u1285:
  6686  00160E  3425               	rlcf	??_LCDout+1,w,c
  6687  001610  3225               	rrcf	??_LCDout+1,f,c
  6688  001612  3224               	rrcf	??_LCDout,f,c
  6689  001614  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6690  001616  D7FB               	goto	u1285
  6691  001618  4624               	rlncf	??_LCDout,f,c
  6692  00161A  508B               	movf	3979,w,c	;volatile
  6693  00161C  1824               	xorwf	??_LCDout,w,c
  6694  00161E  0BFD               	andlw	-3
  6695  001620  1824               	xorwf	??_LCDout,w,c
  6696  001622  6E8B               	movwf	3979,c	;volatile
  6697                           
  6698                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6699  001624  5027               	movf	LCDout@number,w,c
  6700  001626  6E24               	movwf	??_LCDout& (0+255),c
  6701  001628  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6702  00162A  0E06               	movlw	6
  6703  00162C                     u1295:
  6704  00162C  90D8               	bcf	status,0,c
  6705  00162E  3624               	rlcf	??_LCDout,f,c
  6706  001630  3625               	rlcf	??_LCDout+1,f,c
  6707  001632  2EE8               	decfsz	wreg,f,c
  6708  001634  D7FB               	goto	u1295
  6709  001636  0E07               	movlw	7
  6710  001638  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6711  00163A                     u1305:
  6712  00163A  3425               	rlcf	??_LCDout+1,w,c
  6713  00163C  3225               	rrcf	??_LCDout+1,f,c
  6714  00163E  3224               	rrcf	??_LCDout,f,c
  6715  001640  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6716  001642  D7FB               	goto	u1305
  6717  001644  4624               	rlncf	??_LCDout,f,c
  6718  001646  4624               	rlncf	??_LCDout,f,c
  6719  001648  508B               	movf	3979,w,c	;volatile
  6720  00164A  1824               	xorwf	??_LCDout,w,c
  6721  00164C  0BFB               	andlw	-5
  6722  00164E  1824               	xorwf	??_LCDout,w,c
  6723  001650  6E8B               	movwf	3979,c	;volatile
  6724                           
  6725                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6726  001652  5027               	movf	LCDout@number,w,c
  6727  001654  6E24               	movwf	??_LCDout& (0+255),c
  6728  001656  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6729  001658  0E05               	movlw	5
  6730  00165A                     u1315:
  6731  00165A  90D8               	bcf	status,0,c
  6732  00165C  3624               	rlcf	??_LCDout,f,c
  6733  00165E  3625               	rlcf	??_LCDout+1,f,c
  6734  001660  2EE8               	decfsz	wreg,f,c
  6735  001662  D7FB               	goto	u1315
  6736  001664  0E07               	movlw	7
  6737  001666  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6738  001668                     u1325:
  6739  001668  3425               	rlcf	??_LCDout+1,w,c
  6740  00166A  3225               	rrcf	??_LCDout+1,f,c
  6741  00166C  3224               	rrcf	??_LCDout,f,c
  6742  00166E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6743  001670  D7FB               	goto	u1325
  6744  001672  508C               	movf	3980,w,c	;volatile
  6745  001674  1824               	xorwf	??_LCDout,w,c
  6746  001676  0BFE               	andlw	-2
  6747  001678  1824               	xorwf	??_LCDout,w,c
  6748  00167A  6E8C               	movwf	3980,c	;volatile
  6749                           
  6750                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6751  00167C  5027               	movf	LCDout@number,w,c
  6752  00167E  6E24               	movwf	??_LCDout& (0+255),c
  6753  001680  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6754  001682  3A24               	swapf	??_LCDout,f,c
  6755  001684  3A25               	swapf	??_LCDout+1,f,c
  6756  001686  0EF0               	movlw	240
  6757  001688  1625               	andwf	??_LCDout+1,f,c
  6758  00168A  5024               	movf	??_LCDout,w,c
  6759  00168C  0B0F               	andlw	15
  6760  00168E  1225               	iorwf	??_LCDout+1,f,c
  6761  001690  0EF0               	movlw	240
  6762  001692  1624               	andwf	??_LCDout,f,c
  6763  001694  0E07               	movlw	7
  6764  001696  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6765  001698                     u1335:
  6766  001698  3425               	rlcf	??_LCDout+1,w,c
  6767  00169A  3225               	rrcf	??_LCDout+1,f,c
  6768  00169C  3224               	rrcf	??_LCDout,f,c
  6769  00169E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6770  0016A0  D7FB               	goto	u1335
  6771  0016A2  4624               	rlncf	??_LCDout,f,c
  6772  0016A4  508C               	movf	3980,w,c	;volatile
  6773  0016A6  1824               	xorwf	??_LCDout,w,c
  6774  0016A8  0BFD               	andlw	-3
  6775  0016AA  1824               	xorwf	??_LCDout,w,c
  6776  0016AC  6E8C               	movwf	3980,c	;volatile
  6777                           
  6778                           ;LCD.c: 21: E_TOG();
  6779  0016AE  EC3E  F00F         	call	_E_TOG	;wreg free
  6780                           
  6781                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6782  0016B2  0E03               	movlw	3
  6783  0016B4                     u3287:
  6784  0016B4  2EE8               	decfsz	wreg,f,c
  6785  0016B6  D7FE               	goto	u3287
  6786  0016B8  F000               	nop	
  6787  0016BA  0012               	return		;funcret
  6788  0016BC                     __end_of_LCDout:
  6789                           	opt stack 0
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           postinc0	equ	0xFEE
  6798                           wreg	equ	0xFE8
  6799                           indf1	equ	0xFE7
  6800                           plusw1	equ	0xFE3
  6801                           fsr1h	equ	0xFE2
  6802                           fsr1l	equ	0xFE1
  6803                           indf2	equ	0xFDF
  6804                           postinc2	equ	0xFDE
  6805                           postdec2	equ	0xFDD
  6806                           plusw2	equ	0xFDB
  6807                           fsr2h	equ	0xFDA
  6808                           fsr2l	equ	0xFD9
  6809                           status	equ	0xFD8
  6810                           
  6811 ;; *************** function _E_TOG *****************
  6812 ;; Defined at:
  6813 ;;		line 5 in file "LCD.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;		None
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;		None
  6818 ;; Return value:  Size  Location     Type
  6819 ;;		None               void
  6820 ;; Registers used:
  6821 ;;		wreg
  6822 ;; Tracked objects:
  6823 ;;		On entry : 0/0
  6824 ;;		On exit  : 0/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6827 ;;      Params:         0       0       0       0
  6828 ;;      Locals:         0       0       0       0
  6829 ;;      Temps:          0       0       0       0
  6830 ;;      Totals:         0       0       0       0
  6831 ;;Total ram usage:        0 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:    3
  6834 ;; This function calls:
  6835 ;;		Nothing
  6836 ;; This function is called by:
  6837 ;;		_LCDout
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text29
  6842  001E7C                     __ptext29:
  6843                           	opt stack 0
  6844  001E7C                     _E_TOG:
  6845                           	opt stack 24
  6846                           
  6847                           ;LCD.c: 8: LATCbits.LATC0=1;
  6848                           
  6849                           ;incstack = 0
  6850  001E7C  808B               	bsf	3979,0,c	;volatile
  6851                           
  6852                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6853  001E7E  0E03               	movlw	3
  6854  001E80                     u3297:
  6855  001E80  2EE8               	decfsz	wreg,f,c
  6856  001E82  D7FE               	goto	u3297
  6857  001E84  F000               	nop	
  6858                           
  6859                           ;LCD.c: 10: LATCbits.LATC0=0;
  6860  001E86  908B               	bcf	3979,0,c	;volatile
  6861  001E88  0012               	return		;funcret
  6862  001E8A                     __end_of_E_TOG:
  6863                           	opt stack 0
  6864                           tblptru	equ	0xFF8
  6865                           tblptrh	equ	0xFF7
  6866                           tblptrl	equ	0xFF6
  6867                           tablat	equ	0xFF5
  6868                           prodh	equ	0xFF4
  6869                           prodl	equ	0xFF3
  6870                           intcon	equ	0xFF2
  6871                           postinc0	equ	0xFEE
  6872                           wreg	equ	0xFE8
  6873                           indf1	equ	0xFE7
  6874                           plusw1	equ	0xFE3
  6875                           fsr1h	equ	0xFE2
  6876                           fsr1l	equ	0xFE1
  6877                           indf2	equ	0xFDF
  6878                           postinc2	equ	0xFDE
  6879                           postdec2	equ	0xFDD
  6880                           plusw2	equ	0xFDB
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _InterruptHandlerLow *****************
  6886 ;; Defined at:
  6887 ;;		line 18 in file "main.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;		None
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;		None
  6892 ;; Return value:  Size  Location     Type
  6893 ;;		None               void
  6894 ;; Registers used:
  6895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6901 ;;      Params:         0       0       0       0
  6902 ;;      Locals:         0       0       0       0
  6903 ;;      Temps:         17       0       0       0
  6904 ;;      Totals:        17       0       0       0
  6905 ;;Total ram usage:       17 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    2
  6908 ;; This function calls:
  6909 ;;		Nothing
  6910 ;; This function is called by:
  6911 ;;		Interrupt level 1
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	intcodelo
  6916  000018                     __pintcodelo:
  6917                           	opt stack 0
  6918  000018                     _InterruptHandlerLow:
  6919                           	opt stack 23
  6920                           
  6921                           ;incstack = 0
  6922  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6923  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6924  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6925  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6926  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6927  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6928  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6929  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6930  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6931  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6932  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6933  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6934  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6935  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6936  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6937  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6938  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6939  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6940                           
  6941                           ;main.c: 20: if (PIR1bits.RCIF) {
  6942  00005E  AA9E               	btfss	3998,5,c	;volatile
  6943  000060  D016               	goto	i1l375
  6944                           
  6945                           ;main.c: 21: ReceivedString[i]=RCREG;
  6946  000062  503A               	movf	_i,w,c	;volatile
  6947  000064  0D01               	mullw	1
  6948  000066  0EE6               	movlw	low _ReceivedString
  6949  000068  24F3               	addwf	prodl,w,c
  6950  00006A  6ED9               	movwf	fsr2l,c
  6951  00006C  0E01               	movlw	high _ReceivedString
  6952  00006E  20F4               	addwfc	prodh,w,c
  6953  000070  6EDA               	movwf	fsr2h,c
  6954  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6955                           
  6956                           ;main.c: 22: RFID_Read=1;
  6957  000076  0E01               	movlw	1
  6958  000078  0101               	movlb	1	; () banked
  6959  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6960                           
  6961                           ; BSR set to: 1
  6962                           ;main.c: 23: if (i==15){
  6963  00007C  0E0F               	movlw	15
  6964  00007E  183A               	xorwf	_i,w,c	;volatile
  6965  000080  A4D8               	btfss	status,2,c
  6966  000082  D003               	goto	i1l2696
  6967                           
  6968                           ; BSR set to: 1
  6969                           ;main.c: 24: i=0;
  6970  000084  0E00               	movlw	0
  6971  000086  6E3A               	movwf	_i,c	;volatile
  6972                           
  6973                           ;main.c: 25: }else{
  6974  000088  D001               	goto	i1l2698
  6975  00008A                     i1l2696:
  6976                           
  6977                           ; BSR set to: 1
  6978                           ;main.c: 26: i++;
  6979  00008A  2A3A               	incf	_i,f,c	;volatile
  6980  00008C                     i1l2698:
  6981                           
  6982                           ; BSR set to: 1
  6983                           ;main.c: 27: }
  6984                           ;main.c: 28: PIR1bits.RCIF=0;
  6985  00008C  9A9E               	bcf	3998,5,c	;volatile
  6986  00008E                     i1l375:
  6987  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6988  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6989  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6990  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6991  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6992  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6993  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6994  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6995  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6996  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6997  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6998  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6999  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7000  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7001  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7002  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7003  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  7004  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7005  0000D4  0010               	retfie	
  7006  0000D6                     __end_of_InterruptHandlerLow:
  7007                           	opt stack 0
  7008                           pclatu	equ	0xFFB
  7009                           pclath	equ	0xFFA
  7010                           tblptru	equ	0xFF8
  7011                           tblptrh	equ	0xFF7
  7012                           tblptrl	equ	0xFF6
  7013                           tablat	equ	0xFF5
  7014                           prodh	equ	0xFF4
  7015                           prodl	equ	0xFF3
  7016                           intcon	equ	0xFF2
  7017                           postinc0	equ	0xFEE
  7018                           fsr0h	equ	0xFEA
  7019                           fsr0l	equ	0xFE9
  7020                           wreg	equ	0xFE8
  7021                           indf1	equ	0xFE7
  7022                           plusw1	equ	0xFE3
  7023                           fsr1h	equ	0xFE2
  7024                           fsr1l	equ	0xFE1
  7025                           bsr	equ	0xFE0
  7026                           indf2	equ	0xFDF
  7027                           postinc2	equ	0xFDE
  7028                           postdec2	equ	0xFDD
  7029                           plusw2	equ	0xFDB
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _InterruptHandlerHigh *****************
  7035 ;; Defined at:
  7036 ;;		line 34 in file "main.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;		None
  7041 ;; Return value:  Size  Location     Type
  7042 ;;		None               void
  7043 ;; Registers used:
  7044 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7050 ;;      Params:         0       0       0       0
  7051 ;;      Locals:         0       0       0       0
  7052 ;;      Temps:         14       0       0       0
  7053 ;;      Totals:        14       0       0       0
  7054 ;;Total ram usage:       14 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    1
  7057 ;; This function calls:
  7058 ;;		i2_delay_tenth_s
  7059 ;; This function is called by:
  7060 ;;		Interrupt level 2
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           	psect	intcode
  7065  000008                     __pintcode:
  7066                           	opt stack 0
  7067  000008                     _InterruptHandlerHigh:
  7068                           	opt stack 23
  7069                           
  7070                           ;incstack = 0
  7071  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7072  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7073  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7074  000012  EF06  F00C         	goto	int_func
  7075                           pclatu	equ	0xFFB
  7076                           pclath	equ	0xFFA
  7077                           tblptru	equ	0xFF8
  7078                           tblptrh	equ	0xFF7
  7079                           tblptrl	equ	0xFF6
  7080                           tablat	equ	0xFF5
  7081                           prodh	equ	0xFF4
  7082                           prodl	equ	0xFF3
  7083                           intcon	equ	0xFF2
  7084                           postinc0	equ	0xFEE
  7085                           fsr0h	equ	0xFEA
  7086                           fsr0l	equ	0xFE9
  7087                           wreg	equ	0xFE8
  7088                           indf1	equ	0xFE7
  7089                           plusw1	equ	0xFE3
  7090                           fsr1h	equ	0xFE2
  7091                           fsr1l	equ	0xFE1
  7092                           bsr	equ	0xFE0
  7093                           indf2	equ	0xFDF
  7094                           postinc2	equ	0xFDE
  7095                           postdec2	equ	0xFDD
  7096                           plusw2	equ	0xFDB
  7097                           fsr2h	equ	0xFDA
  7098                           fsr2l	equ	0xFD9
  7099                           status	equ	0xFD8
  7100                           
  7101                           	psect	intcode_body
  7102  00180C                     __pintcode_body:
  7103                           	opt stack 23
  7104  00180C                     int_func:
  7105                           	opt stack 23
  7106  00180C  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7107  001810  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7108  001814  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7109  001818  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7110  00181C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7111  001820  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7112  001824  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7113  001828  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7114  00182C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7115  001830  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7116  001834  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7117  001838  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7118                           
  7119                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7120  00183C  A2F2               	btfss	intcon,1,c	;volatile
  7121  00183E  D00D               	goto	i2l383
  7122                           
  7123                           ;main.c: 36: if (mode==-1) {
  7124  001840  283B               	incf	_mode,w,c	;volatile
  7125  001842  A4D8               	btfss	status,2,c
  7126  001844  D003               	goto	i2l2706
  7127                           
  7128                           ;main.c: 38: mode=1;
  7129  001846  0E01               	movlw	1
  7130  001848  6E3B               	movwf	_mode,c	;volatile
  7131                           
  7132                           ;main.c: 39: } else if (mode==0) {
  7133  00184A  D003               	goto	i2l2710
  7134  00184C                     i2l2706:
  7135  00184C  503B               	movf	_mode,w,c	;volatile
  7136  00184E  A4D8               	btfss	status,2,c
  7137                           
  7138                           ;main.c: 43: mode=-1;
  7139                           
  7140                           ;main.c: 41: } else {
  7141  001850  683B               	setf	_mode,c	;volatile
  7142  001852                     i2l2710:
  7143                           
  7144                           ;main.c: 44: }
  7145                           ;main.c: 46: delay_tenth_s(2);
  7146  001852  0E02               	movlw	2
  7147  001854  EC7A  F00E         	call	i2_delay_tenth_s
  7148                           
  7149                           ;main.c: 47: INTCONbits.INT0IF=0;
  7150  001858  92F2               	bcf	intcon,1,c	;volatile
  7151  00185A                     i2l383:
  7152  00185A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7153  00185E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7154  001862  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7155  001866  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7156  00186A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7157  00186E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7158  001872  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7159  001876  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7160  00187A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7161  00187E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7162  001882  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7163  001886  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7164  00188A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7165  00188E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7166  001892  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7167  001894  0011               	retfie		f
  7168  001896                     __end_of_InterruptHandlerHigh:
  7169                           	opt stack 0
  7170                           pclatu	equ	0xFFB
  7171                           pclath	equ	0xFFA
  7172                           tblptru	equ	0xFF8
  7173                           tblptrh	equ	0xFF7
  7174                           tblptrl	equ	0xFF6
  7175                           tablat	equ	0xFF5
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           intcon	equ	0xFF2
  7179                           postinc0	equ	0xFEE
  7180                           fsr0h	equ	0xFEA
  7181                           fsr0l	equ	0xFE9
  7182                           wreg	equ	0xFE8
  7183                           indf1	equ	0xFE7
  7184                           plusw1	equ	0xFE3
  7185                           fsr1h	equ	0xFE2
  7186                           fsr1l	equ	0xFE1
  7187                           bsr	equ	0xFE0
  7188                           indf2	equ	0xFDF
  7189                           postinc2	equ	0xFDE
  7190                           postdec2	equ	0xFDD
  7191                           plusw2	equ	0xFDB
  7192                           fsr2h	equ	0xFDA
  7193                           fsr2l	equ	0xFD9
  7194                           status	equ	0xFD8
  7195                           
  7196 ;; *************** function i2_delay_tenth_s *****************
  7197 ;; Defined at:
  7198 ;;		line 32 in file "Movement.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  tenth_second    1    wreg     unsigned char 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7203 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7204 ;; Return value:  Size  Location     Type
  7205 ;;		None               void
  7206 ;; Registers used:
  7207 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7213 ;;      Params:         0       0       0       0
  7214 ;;      Locals:         3       0       0       0
  7215 ;;      Temps:          1       0       0       0
  7216 ;;      Totals:         4       0       0       0
  7217 ;;Total ram usage:        4 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; This function calls:
  7220 ;;		Nothing
  7221 ;; This function is called by:
  7222 ;;		_InterruptHandlerHigh
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text32
  7227  001CF4                     __ptext32:
  7228                           	opt stack 0
  7229  001CF4                     i2_delay_tenth_s:
  7230                           	opt stack 23
  7231                           
  7232                           ;incstack = 0
  7233                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7234  001CF4  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7235                           
  7236                           ;Movement.c: 33: unsigned int i=0;
  7237  001CF6  0E00               	movlw	0
  7238  001CF8  6E04               	movwf	i2delay_tenth_s@i+1,c
  7239  001CFA  0E00               	movlw	0
  7240  001CFC  6E03               	movwf	i2delay_tenth_s@i,c
  7241                           
  7242                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7243  001CFE  0E00               	movlw	0
  7244  001D00  6E04               	movwf	i2delay_tenth_s@i+1,c
  7245  001D02  0E01               	movlw	1
  7246  001D04  6E03               	movwf	i2delay_tenth_s@i,c
  7247  001D06  D009               	goto	i2l2668
  7248  001D08                     i2l2664:
  7249                           
  7250                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7251  001D08  0E82               	movlw	130
  7252  001D0A  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7253  001D0C  0EDE               	movlw	222
  7254  001D0E                     i2u330_47:
  7255  001D0E  2EE8               	decfsz	wreg,f,c
  7256  001D10  D7FE               	goto	i2u330_47
  7257  001D12  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7258  001D14  D7FC               	goto	i2u330_47
  7259  001D16  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7260  001D18  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7261  001D1A                     i2l2668:
  7262  001D1A  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7263  001D1C  0D02               	mullw	2
  7264  001D1E  5003               	movf	i2delay_tenth_s@i,w,c
  7265  001D20  5CF3               	subwf	prodl,w,c
  7266  001D22  5004               	movf	i2delay_tenth_s@i+1,w,c
  7267  001D24  58F4               	subwfb	prodh,w,c
  7268  001D26  A0D8               	btfss	status,0,c
  7269  001D28  0012               	return	
  7270  001D2A  D7EE               	goto	i2l2664
  7271  001D2C                     __end_ofi2_delay_tenth_s:
  7272                           	opt stack 0
  7273                           pclatu	equ	0xFFB
  7274                           pclath	equ	0xFFA
  7275                           tblptru	equ	0xFF8
  7276                           tblptrh	equ	0xFF7
  7277                           tblptrl	equ	0xFF6
  7278                           tablat	equ	0xFF5
  7279                           prodh	equ	0xFF4
  7280                           prodl	equ	0xFF3
  7281                           intcon	equ	0xFF2
  7282                           postinc0	equ	0xFEE
  7283                           fsr0h	equ	0xFEA
  7284                           fsr0l	equ	0xFE9
  7285                           wreg	equ	0xFE8
  7286                           indf1	equ	0xFE7
  7287                           plusw1	equ	0xFE3
  7288                           fsr1h	equ	0xFE2
  7289                           fsr1l	equ	0xFE1
  7290                           bsr	equ	0xFE0
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           postdec2	equ	0xFDD
  7294                           plusw2	equ	0xFDB
  7295                           fsr2h	equ	0xFDA
  7296                           fsr2l	equ	0xFD9
  7297                           status	equ	0xFD8
  7298                           pclatu	equ	0xFFB
  7299                           pclath	equ	0xFFA
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           intcon	equ	0xFF2
  7307                           postinc0	equ	0xFEE
  7308                           fsr0h	equ	0xFEA
  7309                           fsr0l	equ	0xFE9
  7310                           wreg	equ	0xFE8
  7311                           indf1	equ	0xFE7
  7312                           plusw1	equ	0xFE3
  7313                           fsr1h	equ	0xFE2
  7314                           fsr1l	equ	0xFE1
  7315                           bsr	equ	0xFE0
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           plusw2	equ	0xFDB
  7320                           fsr2h	equ	0xFDA
  7321                           fsr2l	equ	0xFD9
  7322                           status	equ	0xFD8
  7323                           
  7324                           	psect	rparam
  7325  0000                     pclatu	equ	0xFFB
  7326                           pclath	equ	0xFFA
  7327                           tblptru	equ	0xFF8
  7328                           tblptrh	equ	0xFF7
  7329                           tblptrl	equ	0xFF6
  7330                           tablat	equ	0xFF5
  7331                           prodh	equ	0xFF4
  7332                           prodl	equ	0xFF3
  7333                           intcon	equ	0xFF2
  7334                           postinc0	equ	0xFEE
  7335                           fsr0h	equ	0xFEA
  7336                           fsr0l	equ	0xFE9
  7337                           wreg	equ	0xFE8
  7338                           indf1	equ	0xFE7
  7339                           plusw1	equ	0xFE3
  7340                           fsr1h	equ	0xFE2
  7341                           fsr1l	equ	0xFE1
  7342                           bsr	equ	0xFE0
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           plusw2	equ	0xFDB
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351                           	psect	temp
  7352  00003C                     btemp:
  7353                           	opt stack 0
  7354  00003C                     	ds	1
  7355  0000                     int$flags	set	btemp
  7356                           pclatu	equ	0xFFB
  7357                           pclath	equ	0xFFA
  7358                           tblptru	equ	0xFF8
  7359                           tblptrh	equ	0xFF7
  7360                           tblptrl	equ	0xFF6
  7361                           tablat	equ	0xFF5
  7362                           prodh	equ	0xFF4
  7363                           prodl	equ	0xFF3
  7364                           intcon	equ	0xFF2
  7365                           postinc0	equ	0xFEE
  7366                           fsr0h	equ	0xFEA
  7367                           fsr0l	equ	0xFE9
  7368                           wreg	equ	0xFE8
  7369                           indf1	equ	0xFE7
  7370                           plusw1	equ	0xFE3
  7371                           fsr1h	equ	0xFE2
  7372                           fsr1l	equ	0xFE1
  7373                           bsr	equ	0xFE0
  7374                           indf2	equ	0xFDF
  7375                           postinc2	equ	0xFDE
  7376                           postdec2	equ	0xFDD
  7377                           plusw2	equ	0xFDB
  7378                           fsr2h	equ	0xFDA
  7379                           fsr2l	equ	0xFD9
  7380                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     153
    BANK1           256    226     247
    BANK2           256      0     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S146DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S146DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   70843
                                             90 BANK0      5     5      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   24330
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    4940
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5171
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11702
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F       3        0.0%
DATA                 0      0     22F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 17:03:57 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l37 149E  
                                  l67 1974                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01BE                           ?_LCD_String 002A  
                                 l223 0D20                                   l224 0D50  
                                 l226 0EA4                                   l433 0A1C  
                                 l426 099A                                   l392 041C  
                                 l909 1BBE                                   l899 1B7C  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3010 191C                                  l3100 1200  
                                l2222 19AA                                  l3006 1476  
                                l3014 1938                                  l2232 19EE  
                                l2160 1B52                                  l3112 1236  
                                l3032 1792                                  l2242 1A24  
                                l2226 19B2                                  l2170 1B72  
                                l2162 1B56                                  l3122 1290  
                                l3042 17CA                                  l3210 15DE  
                                l3018 1954                                  l2260 1D88  
                                l2180 1B9C                                  l2148 1E46  
                                l3132 12BE                                  l3140 12E4  
                                l3124 129A                                  l3036 17AA  
                                l3028 177A                                  l2270 1AB4  
                                l2238 1A1C                                  l2158 1B4A  
                                l2182 1BA0                                  l3142 12F0  
                                l3118 1258                                  l3070 1100  
                                l2264 1A80                                  l2256 1D76  
                                l2248 1A60                                  l3064 10E6  
                                l2186 1BB4                                  l2178 1B94  
                                l3162 138E                                  l3154 1332  
                                l3066 10F8                                  l3058 10CA  
                                l2274 1CD0                                  l3322 0FE8  
                                l3242 0C52                                  l3330 1000  
                                l3156 1338                                  l3148 1314  
                                l3076 1130                                  l3164 139A  
                                l2428 1DD6                                  l3500 0700  
                                l3166 13B4                                  l3086 11A2  
                                l2278 1CE2                                  l3318 0FE4  
                                l3510 074A                                  l3088 11CA  
                                l3328 0FFA                                  l3512 0750  
                                l3504 070A                                  l3098 11FA  
                                l3282 0D94                                  l3522 0776  
                                l3434 04CE                                  l3292 0E86  
                                l3284 0DAC                                  l3516 075A  
                                l3524 077C                                  l3532 07E4  
                                l3550 0870                                  l3438 0500  
                                l3560 08E6                                  l3544 084C  
                                l3480 0648                                  l3490 0698  
                                l3458 0552                                  l3572 0950  
                                l3484 0672                                  l3476 05E8  
                                l3590 0ADA                                  l3398 0422  
                                l3592 0AF6                                  l3584 0A9A  
                                l3576 09BE                                  l2970 18BA  
                                l3578 0A20                                  l3586 0AD4  
                                l2980 18DC                                  l2964 18AA  
                                l3596 0AF8                                  l2976 18D0  
                                l2992 1902                                  l2978 18D8  
                                l2996 1910                                  l2988 18F8  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1305 163A                                  u3010 0A5E  
                                u1315 165A                                  u1325 1668  
                                _LATB 000F8A                                  u1335 1698  
                                u1600 1AD4                                  u1275 1600  
                                u3107 1722                                  u1285 160E  
                                u1525 19BA                                  u3117 1734  
                                u3037 047E                                  u1295 162C  
                                u1607 1ACA                                  u3207 1560  
                                u3127 174A                                  u3047 0496  
                                u1385 1D9C                                  u3217 17C4  
                                u3137 175E                                  u3057 16CE  
                                u1386 1D9E                                  u1555 1A2C  
                                u3227 19E2                                  u3147 1770  
                                u3067 16E4                                  u2364 1436  
                                u3237 1A54                                  u2365 1432  
                                u3157 0C86                                  u3077 16F4  
                                u1590 1AA4                                  u2374 1492  
                                u3247 1D8A                                  u2375 148E  
                                u3167 0C9E                                  u3087 1702  
                                u3257 1AAE                                  u2385 14EC  
                                u3177 196E                                  u3097 1710  
                                u3267 1DAA                                  u3187 1CD6  
                                u1835 1DD2                                  u1836 1DD4  
                                u3277 1DBA                                  u1597 1A9A  
                                u3197 154A                                  u3287 16B4  
                                u1855 1DE4                                  u1856 1DE6  
                                u3297 1E80                                  u2771 0366  
                                u2860 06CA                                  u2781 0378  
                                u2870 06DE                                  u2862 06CC  
                                u2872 06E0                                  u2970 092C  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 01C8                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1778                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00AE                          ___param_bank 000010  
                     i2_delay_tenth_s 1CF4                       __end_of_SendLCD 1DC2  
                     __end_of_SetLine 1D92                    ScanWithRange@F3892 00F5  
                         ScanIR@F3879 00F1                                 ?_main 0001  
                     __end_of___awdiv 191A                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1B86  
                     __end_of___lwmod 1BC8                                 i1l375 008E  
                               i2l383 185A                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1E7C  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1778  
                  ScanWithRange@loops 0071                       __end_of_dpowers 030B  
                     __end_of_isdigit 1E4E                                 main@i 01CE  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 13C2  
              __size_of_ScanWithRange 05A2                        __CFG_MCLRE$OFF 000000  
                     __initialization 1D2C                          __end_of_main 0B1A  
                        __end_of_stop 180C                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 0099                  __end_of_enableSensor 1DE8  
                 VerifySignal@hexByte 002C                                ??_main 00BA  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2696 008A  
                              i1l2698 008C                                i2l2710 1852  
                      __CFG_WDTEN$OFF 000000                                i2l2706 184C  
                              i2l2664 1D08                                i2l2668 1D1A  
               __end_of_delay_tenth_s 1CF4                                _LCDout 15F6  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00B0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1D2C                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 14FC  
                           ??_SetLine 002A                                ___wmul 1DE8  
                           ??___awdiv 002E                      __end_of_initRFID 1E6A  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1E0E                  __size_of_grabRightIR 0072  
                              clear_0 1D32                                clear_1 1D3E  
                              clear_2 1D4A                      ___awdiv@quotient 0030  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0B1A                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00B3                      __end_of_turnLeft 1C82  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1D54  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1E8A                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1BC8                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002B  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 188E  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BF  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 1ADC  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 1A0C  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 1DC2  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1CBC  
              ScanWithRange@RFID_Read 0079                               _SendLCD 1D92  
                             __Hparam 0000                               _SetLine 1D62  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 1896                       __size_of___wmul 0026  
                             ___lwdiv 1B34                               ___lwmod 1B86  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1D2C                       ??_ScanWithRange 007B  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 1E6A  
                             __ptext2 1E4E                               __ptext3 1C82  
                             __ptext4 16BC                               __ptext5 1E0E  
                             __ptext6 1BC8                               __ptext7 1DC2  
                             __ptext8 1ADC                               __ptext9 0B1A  
                           _T0CONbits 000FD5                               _initLCD 16BC  
                   __end_of_initTimer 1E7C                               _dpowers 0301  
                             _isdigit 1E30                          LCDout@number 0027  
                       ?_VerifySignal 0024                               main@buf 0100  
                             _sprintf 10BC                        __pintcode_body 180C  
                end_of_initialization 1D54                        ScanWithRange@i 00AA  
                      ScanWithRange@n 00A8                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 180C                    ScanIR@SensorResult 009B  
                     ??_fullSpeedBack 003A                             _RFID_Read 01F6  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                ScanWithRange@LeftFlick 00AF  
                   __end_of_turnRight 1C44                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B8                        __end_of_LCDout 16BC  
                           _TXSTAbits 000FAC                             ScanIR@buf 0071  
                       ??_grabRightIR 0026                        __end_of_ScanIR 15F6  
                      _fullSpeedAhead 191A                        _ReceivedString 01E6  
                      __end_of___wmul 1E0E                     ScanWithRange@Move 0075  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1E30  
              __size_of_delay_tenth_s 0038                   start_initialization 1D2C  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 003A  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1896  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 199A  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 1A0C  
                        _initMotorPWM 1C82                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$2069 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1CBC                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0062  
                           __pintcode 0008                  __end_of_VerifySignal 1B34  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 01C9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 1E6A                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATBbits 000F8A                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u330_47 1D0E                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3893 0200  
                           main@F3895 00BF                             main@F3898 01E2  
                         _grabRightIR 199A                 ScanWithRange@LeftFlag 00B1  
                grabRightIR@IR_signal 0029                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 10BC                          setMotorPWM@m 0032  
               ScanWithRange@MoveTime 0073                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 0077                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                          ?_initTimer 0001                             _turnRight 1C06  
                    ScanWithRange@buf 0080                   __end_of_setMotorPWM 14FC  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1C06  
                    __size_of_SetLine 0030                    __end_of_grabLeftIR 1A7E  
                    __size_of___awdiv 0084                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0067  
                            __ptext10 1C06                              __ptext11 1C44  
                            __ptext20 1DE8                              __ptext12 191A  
                            __ptext21 1B86                              __ptext13 1CBC  
                            __ptext22 1B34                              __ptext14 14FC  
                            __ptext23 199A                              __ptext15 1778  
                            __ptext32 1CF4                              __ptext24 1A0C  
                            __ptext16 13C2                              __ptext25 1D62  
                            __ptext17 1896                              __ptext26 1A7E  
                            __ptext18 10BC                              __ptext27 1D92  
                            __ptext19 1E30                              __ptext28 15F6  
                            __ptext29 1E7C                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                              _initRFID 1E4E  
           ScanWithRange@SensorResult 00B4                        turnRight@power 006B  
                       __size_of_main 07CA                    main@DirectionFound 01CD  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 0058                              int$flags 003C  
                            main@Move 01CF                   _InterruptHandlerLow 0018  
                          _LCD_String 1A7E                              _turnLeft 1C44  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002A                            _INTCONbits 000FF2  
                         ??_initTimer 0024                              isdigit@c 0026  
                         _setMotorPWM 13C2                          _VerifySignal 1ADC  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                      ??_fullSpeedAhead 0039  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00AC  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
