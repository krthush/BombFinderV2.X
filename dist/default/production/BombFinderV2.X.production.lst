

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 15:32:15 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _dpowers:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  000A               	dw	10
    59  000305  0064               	dw	100
    60  000307  03E8               	dw	1000
    61  000309  2710               	dw	10000
    62  00030B                     __end_of_dpowers:
    63                           	opt stack 0
    64  0000                     _ANSEL0bits	set	4024
    65  0000                     _BAUDCONbits	set	4010
    66  0000                     _CAP1BUFH	set	3945
    67  0000                     _CAP1BUFL	set	3944
    68  0000                     _CAP1CON	set	3939
    69  0000                     _CAP2BUFH	set	3943
    70  0000                     _CAP2BUFL	set	3942
    71  0000                     _CAP2CON	set	3938
    72  0000                     _INTCONbits	set	4082
    73  0000                     _IPR1bits	set	3999
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATB	set	3978
    76  0000                     _LATCbits	set	3979
    77  0000                     _LATDbits	set	3980
    78  0000                     _LATEbits	set	3981
    79  0000                     _OSCCON	set	4051
    80  0000                     _OSCCONbits	set	4051
    81  0000                     _PIE1bits	set	3997
    82  0000                     _PIR1bits	set	3998
    83  0000                     _PTCON0	set	3967
    84  0000                     _PTCON1	set	3966
    85  0000                     _PTPERH	set	3962
    86  0000                     _PTPERL	set	3963
    87  0000                     _PWMCON0	set	3951
    88  0000                     _PWMCON1	set	3950
    89  0000                     _RCONbits	set	4048
    90  0000                     _RCREG	set	4014
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _SPBRG	set	4015
    93  0000                     _SPBRGH	set	4016
    94  0000                     _T5CON	set	4023
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISBbits	set	3987
    97  0000                     _TRISC	set	3988
    98  0000                     _TRISCbits	set	3988
    99  0000                     _TRISDbits	set	3989
   100  0000                     _TRISEbits	set	3990
   101  0000                     _TXREG	set	4013
   102  0000                     _TXSTAbits	set	4012
   103  0000                     _PDC0H	set	3960
   104  0000                     _PDC0L	set	3961
   105  0000                     _PDC1H	set	3958
   106  0000                     _PDC1L	set	3959
   107  00030B                     STR_6:
   108  00030B  20                 	db	32
   109  00030C  20                 	db	32
   110  00030D  20                 	db	32
   111  00030E  20                 	db	32
   112  00030F  20                 	db	32
   113  000310  20                 	db	32
   114  000311  25                 	db	37
   115  000312  30                 	db	48	;'0'
   116  000313  34                 	db	52	;'4'
   117  000314  64                 	db	100	;'d'
   118  000315  2C                 	db	44
   119  000316  20                 	db	32
   120  000317  25                 	db	37
   121  000318  30                 	db	48	;'0'
   122  000319  34                 	db	52	;'4'
   123  00031A  64                 	db	100	;'d'
   124  00031B  00                 	db	0
   125  00031C                     STR_5:
   126  00031C  20                 	db	32
   127  00031D  20                 	db	32
   128  00031E  20                 	db	32
   129  00031F  20                 	db	32
   130  000320  20                 	db	32
   131  000321  20                 	db	32
   132  000322  49                 	db	73	;'I'
   133  000323  6E                 	db	110	;'n'
   134  000324  65                 	db	101	;'e'
   135  000325  72                 	db	114	;'r'
   136  000326  74                 	db	116	;'t'
   137  000327  20                 	db	32
   138  000328  4D                 	db	77	;'M'
   139  000329  6F                 	db	111	;'o'
   140  00032A  64                 	db	100	;'d'
   141  00032B  65                 	db	101	;'e'
   142  00032C  00                 	db	0
   143  00032D                     STR_8:
   144  00032D  50                 	db	80	;'P'
   145  00032E  55                 	db	85	;'U'
   146  00032F  54                 	db	84	;'T'
   147  000330  20                 	db	32
   148  000331  4D                 	db	77	;'M'
   149  000332  45                 	db	69	;'E'
   150  000333  53                 	db	83	;'S'
   151  000334  53                 	db	83	;'S'
   152  000335  41                 	db	65	;'A'
   153  000336  47                 	db	71	;'G'
   154  000337  45                 	db	69	;'E'
   155  000338  00                 	db	0
   156  000339                     STR_1:
   157  000339  20                 	db	32
   158  00033A  20                 	db	32
   159  00033B  20                 	db	32
   160  00033C  20                 	db	32
   161  00033D  20                 	db	32
   162  00033E  53                 	db	83	;'S'
   163  00033F  63                 	db	99	;'c'
   164  000340  61                 	db	97	;'a'
   165  000341  6E                 	db	110	;'n'
   166  000342  49                 	db	73	;'I'
   167  000343  52                 	db	82	;'R'
   168  000344  00                 	db	0
   169  000345                     STR_9:
   170  000345  47                 	db	71	;'G'
   171  000346  6F                 	db	111	;'o'
   172  000347  69                 	db	105	;'i'
   173  000348  6E                 	db	110	;'n'
   174  000349  67                 	db	103	;'g'
   175  00034A  20                 	db	32
   176  00034B  48                 	db	72	;'H'
   177  00034C  6F                 	db	111	;'o'
   178  00034D  6D                 	db	109	;'m'
   179  00034E  65                 	db	101	;'e'
   180  00034F  00                 	db	0
   181  000350                     STR_7:
   182  000350  53                 	db	83	;'S'
   183  000351  65                 	db	101	;'e'
   184  000352  61                 	db	97	;'a'
   185  000353  72                 	db	114	;'r'
   186  000354  63                 	db	99	;'c'
   187  000355  68                 	db	104	;'h'
   188  000356  69                 	db	105	;'i'
   189  000357  6E                 	db	110	;'n'
   190  000358  67                 	db	103	;'g'
   191  000359  00                 	db	0
   192  0000                     
   193                           ; #config settings
   194  00035A  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	cinit
   197  0018C2                     __pcinit:
   198                           	opt stack 0
   199  0018C2                     start_initialization:
   200                           	opt stack 0
   201  0018C2                     __initialization:
   202                           	opt stack 0
   203                           
   204                           ; Clear objects allocated to BANK1 (5 bytes)
   205  0018C2  0101               	movlb	1
   206  0018C4  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   207  0018C6  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   208  0018C8  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   209  0018CA  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   210  0018CC  6BFA               	clrf	__pbssBANK1& (0+255),b
   211                           
   212                           ; Clear objects allocated to BANK0 (24 bytes)
   213  0018CE  EE00  F0B8         	lfsr	0,__pbssBANK0
   214  0018D2  0E18               	movlw	24
   215  0018D4                     clear_0:
   216  0018D4  6AEE               	clrf	postinc0,c
   217  0018D6  06E8               	decf	wreg,f,c
   218  0018D8  E1FD               	bnz	clear_0
   219                           
   220                           ; Clear objects allocated to COMRAM (2 bytes)
   221  0018DA  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   222  0018DC  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   223  0018DE                     end_of_initialization:
   224                           	opt stack 0
   225  0018DE                     __end_of__initialization:
   226                           	opt stack 0
   227  0018DE  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   228  0018E0  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   229  0018E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   230  0018E4  6EF8               	movwf	tblptru,c
   231  0018E6  0100               	movlb	0
   232  0018E8  EFAE  F001         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	bssCOMRAM
   238  00003A                     __pbssCOMRAM:
   239                           	opt stack 0
   240  00003A                     _i:
   241                           	opt stack 0
   242  00003A                     	ds	1
   243  00003B                     _mode:
   244                           	opt stack 0
   245  00003B                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           
   250                           	psect	bssBANK0
   251  0000B8                     __pbssBANK0:
   252                           	opt stack 0
   253  0000B8                     ScanIR@F3882:
   254                           	opt stack 0
   255  0000B8                     	ds	4
   256  0000BC                     ScanWithRange@F3893:
   257                           	opt stack 0
   258  0000BC                     	ds	4
   259  0000C0                     _ReceivedString:
   260                           	opt stack 0
   261  0000C0                     	ds	16
   262                           tblptru	equ	0xFF8
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	bssBANK1
   267  0001FA                     __pbssBANK1:
   268                           	opt stack 0
   269  0001FA                     main@F3897:
   270                           	opt stack 0
   271  0001FA                     	ds	4
   272  0001FE                     _RFID_Read:
   273                           	opt stack 0
   274  0001FE                     	ds	1
   275                           tblptru	equ	0xFF8
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           
   279                           	psect	cstackBANK2
   280  000200                     __pcstackBANK2:
   281                           	opt stack 0
   282  000200                     main@mL:
   283                           	opt stack 0
   284                           
   285                           ; 9 bytes @ 0x0
   286  000200                     	ds	9
   287  000209                     main@mR:
   288                           	opt stack 0
   289                           
   290                           ; 9 bytes @ 0x9
   291  000209                     	ds	9
   292                           tblptru	equ	0xFF8
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	cstackBANK1
   297  000100                     __pcstackBANK1:
   298                           	opt stack 0
   299  000100                     main@MoveTime:
   300                           	opt stack 0
   301                           
   302                           ; 100 bytes @ 0x0
   303  000100                     	ds	100
   304  000164                     main@MoveType:
   305                           	opt stack 0
   306                           
   307                           ; 100 bytes @ 0x64
   308  000164                     	ds	100
   309  0001C8                     main@buf:
   310                           	opt stack 0
   311                           
   312                           ; 40 bytes @ 0xC8
   313  0001C8                     	ds	40
   314  0001F0                     main@Message:
   315                           	opt stack 0
   316                           
   317                           ; 10 bytes @ 0xF0
   318  0001F0                     	ds	10
   319                           tblptru	equ	0xFF8
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           
   323                           	psect	cstackBANK0
   324  000060                     __pcstackBANK0:
   325                           	opt stack 0
   326  000060                     ??_sprintf:
   327  000060                     setMotorPWM@PWMduty:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x0
   331  000060                     	ds	2
   332  000062                     stop@mL:
   333                           	opt stack 0
   334  000062                     fullSpeedAhead@mL:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x2
   338  000062                     	ds	2
   339  000064                     stop@mR:
   340                           	opt stack 0
   341  000064                     fullSpeedAhead@mR:
   342                           	opt stack 0
   343  000064                     sprintf@ap:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x4
   347  000064                     	ds	2
   348  000066                     fullSpeedAhead@power:
   349                           	opt stack 0
   350  000066                     sprintf@prec:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x6
   354  000066                     	ds	1
   355  000067                     turnRight@mL:
   356                           	opt stack 0
   357  000067                     turnLeft@mL:
   358                           	opt stack 0
   359  000067                     fullSpeedBack@mL:
   360                           	opt stack 0
   361  000067                     sprintf@val:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x7
   365  000067                     	ds	2
   366  000069                     sprintf@flag:
   367                           	opt stack 0
   368  000069                     turnRight@mR:
   369                           	opt stack 0
   370  000069                     turnLeft@mR:
   371                           	opt stack 0
   372  000069                     fullSpeedBack@mR:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x9
   376  000069                     	ds	1
   377  00006A                     sprintf@width:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0xA
   381  00006A                     	ds	1
   382  00006B                     turnRight@power:
   383                           	opt stack 0
   384  00006B                     turnLeft@power:
   385                           	opt stack 0
   386  00006B                     fullSpeedBack@power:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0xB
   390  00006B                     	ds	1
   391  00006C                     sprintf@c:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0xC
   395  00006C                     	ds	1
   396  00006D                     ScanIR@mL:
   397                           	opt stack 0
   398  00006D                     ScanWithRange@mL:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0xD
   402  00006D                     	ds	2
   403  00006F                     ScanIR@mR:
   404                           	opt stack 0
   405  00006F                     ScanWithRange@mR:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0xF
   409  00006F                     	ds	2
   410  000071                     ScanIR@TurnDirection:
   411                           	opt stack 0
   412  000071                     ScanWithRange@milliseconds:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x11
   416  000071                     	ds	1
   417  000072                     ScanIR@Move:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x12
   421  000072                     	ds	1
   422  000073                     ScanWithRange@TurnDirection:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x13
   426  000073                     	ds	1
   427  000074                     ScanIR@MoveTime:
   428                           	opt stack 0
   429  000074                     ScanWithRange@MoveTimeEntry:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x14
   433  000074                     	ds	2
   434  000076                     ??_ScanWithRange:
   435  000076                     ScanIR@MoveType:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x16
   439  000076                     	ds	2
   440  000078                     ScanIR@buf:
   441                           	opt stack 0
   442  000078                     ScanWithRange@buf:
   443                           	opt stack 0
   444                           
   445                           ; 40 bytes @ 0x18
   446  000078                     	ds	40
   447  0000A0                     ScanIR@DirectionMoveThreshold:
   448                           	opt stack 0
   449  0000A0                     ScanWithRange@i:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x40
   453  0000A0                     	ds	2
   454  0000A2                     ScanWithRange@DirectionFoundThreshold:
   455                           	opt stack 0
   456  0000A2                     ScanIR@SensorResult:
   457                           	opt stack 0
   458                           
   459                           ; 4 bytes @ 0x42
   460  0000A2                     	ds	2
   461  0000A4                     ScanWithRange@FlagCounter:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x44
   465  0000A4                     	ds	1
   466  0000A5                     ScanWithRange@SensorResult:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x45
   470  0000A5                     	ds	4
   471  0000A9                     ScanWithRange@n:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x49
   475  0000A9                     	ds	2
   476  0000AB                     ScanWithRange@LeftFlag:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x4B
   480  0000AB                     	ds	1
   481  0000AC                     ScanWithRange@RightFlag:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x4C
   485  0000AC                     	ds	1
   486  0000AD                     ??_main:
   487                           
   488                           ; 0 bytes @ 0x4D
   489  0000AD                     	ds	2
   490  0000AF                     main@ScanAngle:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x4F
   494  0000AF                     	ds	1
   495  0000B0                     main@SensorResult:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x50
   499  0000B0                     	ds	4
   500  0000B4                     main@TurnDirection:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x54
   504  0000B4                     	ds	1
   505  0000B5                     main@DirectionFound:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x55
   509  0000B5                     	ds	1
   510  0000B6                     main@Move:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x56
   514  0000B6                     	ds	1
   515  0000B7                     main@i:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x57
   519  0000B7                     	ds	1
   520                           tblptru	equ	0xFF8
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           
   524                           	psect	cstackCOMRAM
   525  000001                     __pcstackCOMRAM:
   526                           	opt stack 0
   527  000001                     ??i2_delay_tenth_s:
   528                           
   529                           ; 0 bytes @ 0x0
   530  000001                     	ds	1
   531  000002                     i2delay_tenth_s@tenth_seconds:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1
   535  000002                     	ds	1
   536  000003                     i2delay_tenth_s@i:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x2
   540  000003                     	ds	2
   541  000005                     ??_InterruptHandlerHigh:
   542                           
   543                           ; 0 bytes @ 0x4
   544  000005                     	ds	14
   545  000013                     ??_InterruptHandlerLow:
   546                           
   547                           ; 0 bytes @ 0x12
   548  000013                     	ds	17
   549  000024                     ??_isdigit:
   550  000024                     ??_LCDout:
   551  000024                     ??_delay_tenth_s:
   552  000024                     ?_grabRightIR:
   553                           	opt stack 0
   554  000024                     ?_grabLeftIR:
   555                           	opt stack 0
   556  000024                     ?___wmul:
   557                           	opt stack 0
   558  000024                     ?___lwdiv:
   559                           	opt stack 0
   560  000024                     enableSensor@status:
   561                           	opt stack 0
   562  000024                     VerifySignal@Signal:
   563                           	opt stack 0
   564  000024                     ___wmul@multiplier:
   565                           	opt stack 0
   566  000024                     ___lwdiv@dividend:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x23
   570  000024                     	ds	1
   571  000025                     enableSensor@sensor:
   572                           	opt stack 0
   573  000025                     delay_tenth_s@tenth_seconds:
   574                           	opt stack 0
   575  000025                     _isdigit$1878:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x24
   579  000025                     	ds	1
   580  000026                     ??_grabRightIR:
   581  000026                     ??_grabLeftIR:
   582  000026                     ??_VerifySignal:
   583  000026                     isdigit@c:
   584                           	opt stack 0
   585  000026                     delay_tenth_s@i:
   586                           	opt stack 0
   587  000026                     ___wmul@multiplicand:
   588                           	opt stack 0
   589  000026                     ___lwdiv@divisor:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x25
   593  000026                     	ds	1
   594  000027                     LCDout@number:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x26
   598  000027                     	ds	1
   599  000028                     SendLCD@type:
   600                           	opt stack 0
   601  000028                     ___wmul@product:
   602                           	opt stack 0
   603  000028                     ___lwdiv@quotient:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x27
   607  000028                     	ds	1
   608  000029                     SendLCD@Byte:
   609                           	opt stack 0
   610  000029                     grabRightIR@IR_signal:
   611                           	opt stack 0
   612  000029                     grabLeftIR@IR_signal:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x28
   616  000029                     	ds	1
   617  00002A                     ??_initLCD:
   618  00002A                     ?___awdiv:
   619                           	opt stack 0
   620  00002A                     SetLine@line:
   621                           	opt stack 0
   622  00002A                     ___lwdiv@counter:
   623                           	opt stack 0
   624  00002A                     LCD_String@string:
   625                           	opt stack 0
   626  00002A                     ___awdiv@dividend:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x29
   630  00002A                     	ds	1
   631  00002B                     ?___lwmod:
   632                           	opt stack 0
   633  00002B                     grabRightIR@i:
   634                           	opt stack 0
   635  00002B                     grabLeftIR@i:
   636                           	opt stack 0
   637  00002B                     ___lwmod@dividend:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x2A
   641  00002B                     	ds	1
   642  00002C                     VerifySignal@checksum:
   643                           	opt stack 0
   644  00002C                     ___awdiv@divisor:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x2B
   648  00002C                     	ds	1
   649  00002D                     VerifySignal@hexByte:
   650                           	opt stack 0
   651  00002D                     ___lwmod@divisor:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x2C
   655  00002D                     	ds	1
   656  00002E                     ___awdiv@counter:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x2D
   660  00002E                     	ds	1
   661  00002F                     VerifySignal@i:
   662                           	opt stack 0
   663  00002F                     ___awdiv@sign:
   664                           	opt stack 0
   665  00002F                     ___lwmod@counter:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x2E
   669  00002F                     	ds	1
   670  000030                     ?_sprintf:
   671                           	opt stack 0
   672  000030                     sprintf@sp:
   673                           	opt stack 0
   674  000030                     ___awdiv@quotient:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2F
   678  000030                     	ds	2
   679  000032                     setMotorPWM@m:
   680                           	opt stack 0
   681  000032                     sprintf@f:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x31
   685  000032                     	ds	2
   686  000034                     ??_setMotorPWM:
   687                           
   688                           ; 0 bytes @ 0x33
   689  000034                     	ds	5
   690  000039                     ??_ScanIR:
   691                           
   692                           ; 0 bytes @ 0x38
   693  000039                     	ds	1
   694  00003A                     tblptru	equ	0xFF8
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           
   698                           ; 0 bytes @ 0x39
   699 ;;
   700 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   701 ;;
   702 ;; *************** function _main *****************
   703 ;; Defined at:
   704 ;;		line 51 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  MoveType      100  100[BANK1 ] unsigned char [100]
   709 ;;  MoveTime      100    0[BANK1 ] unsigned char [100]
   710 ;;  buf            40  200[BANK1 ] unsigned char [40]
   711 ;;  Message        10  240[BANK1 ] unsigned char [10]
   712 ;;  mR              9    9[BANK2 ] struct DC_motor
   713 ;;  mL              9    0[BANK2 ] struct DC_motor
   714 ;;  SensorResult    4   80[BANK0 ] unsigned int [2]
   715 ;;  i               1   87[BANK0 ] unsigned char 
   716 ;;  Move            1   86[BANK0 ] unsigned char 
   717 ;;  DirectionFou    1   85[BANK0 ] char 
   718 ;;  TurnDirectio    1   84[BANK0 ] unsigned char 
   719 ;;  ScanAngle       1   79[BANK0 ] unsigned char 
   720 ;; Return value:  Size  Location     Type
   721 ;;		None               void
   722 ;; Registers used:
   723 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   729 ;;      Params:         0       0       0       0
   730 ;;      Locals:         0       9     250      18
   731 ;;      Temps:          0       2       0       0
   732 ;;      Totals:         0      11     250      18
   733 ;;Total ram usage:      279 bytes
   734 ;; Hardware stack levels required when called:    8
   735 ;; This function calls:
   736 ;;		_LCD_String
   737 ;;		_ScanIR
   738 ;;		_ScanWithRange
   739 ;;		_SendLCD
   740 ;;		_SetLine
   741 ;;		_VerifySignal
   742 ;;		_delay_tenth_s
   743 ;;		_enableSensor
   744 ;;		_fullSpeedAhead
   745 ;;		_fullSpeedBack
   746 ;;		_grabLeftIR
   747 ;;		_grabRightIR
   748 ;;		_initIR
   749 ;;		_initLCD
   750 ;;		_initMotorPWM
   751 ;;		_initRFID
   752 ;;		_sprintf
   753 ;;		_stop
   754 ;; This function is called by:
   755 ;;		Startup code after reset
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text0
   760  00035C                     __ptext0:
   761                           	opt stack 0
   762  00035C                     _main:
   763                           	opt stack 23
   764                           
   765                           ;main.c: 54: unsigned char Message[10];
   766                           ;main.c: 55: unsigned char i=0;
   767                           
   768                           ;incstack = 0
   769  00035C  0E00               	movlw	0
   770  00035E  0100               	movlb	0	; () banked
   771  000360  6FB7               	movwf	main@i& (0+255),b
   772                           
   773                           ;main.c: 56: signed char DirectionFound=0;
   774  000362  0E00               	movlw	0
   775  000364  0100               	movlb	0	; () banked
   776  000366  6FB5               	movwf	main@DirectionFound& (0+255),b
   777                           
   778                           ;main.c: 57: unsigned char TurnDirection=0;
   779  000368  0E00               	movlw	0
   780  00036A  0100               	movlb	0	; () banked
   781  00036C  6FB4               	movwf	main@TurnDirection& (0+255),b
   782                           
   783                           ;main.c: 58: char MoveTime[100];
   784                           ;main.c: 59: char MoveType[100];
   785                           ;main.c: 60: char Move=0;
   786  00036E  0E00               	movlw	0
   787  000370  0100               	movlb	0	; () banked
   788  000372  6FB6               	movwf	main@Move& (0+255),b
   789                           
   790                           ; BSR set to: 0
   791                           ;main.c: 61: unsigned int SensorResult[2]={0,0};
   792  000374  C1FA  F0B0         	movff	main@F3897,main@SensorResult
   793  000378  C1FB  F0B1         	movff	main@F3897+1,main@SensorResult+1
   794  00037C  C1FC  F0B2         	movff	main@F3897+2,main@SensorResult+2
   795  000380  C1FD  F0B3         	movff	main@F3897+3,main@SensorResult+3
   796                           
   797                           ;main.c: 62: char buf[40];
   798                           ;main.c: 64: unsigned char ScanAngle=60;
   799  000384  0E3C               	movlw	60
   800  000386  0100               	movlb	0	; () banked
   801  000388  6FAF               	movwf	main@ScanAngle& (0+255),b
   802                           
   803                           ; BSR set to: 0
   804                           ;main.c: 67: INTCONbits.GIEH=1;
   805  00038A  8EF2               	bsf	intcon,7,c	;volatile
   806                           
   807                           ; BSR set to: 0
   808                           ;main.c: 68: INTCONbits.GIEL=1;
   809  00038C  8CF2               	bsf	intcon,6,c	;volatile
   810                           
   811                           ; BSR set to: 0
   812                           ;main.c: 69: INTCONbits.PEIE=1;
   813  00038E  8CF2               	bsf	intcon,6,c	;volatile
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 70: RCONbits.IPEN=1;
   817  000390  8ED0               	bsf	4048,7,c	;volatile
   818                           
   819                           ; BSR set to: 0
   820                           ;main.c: 73: IPR1bits.RCIP=0;
   821  000392  9A9F               	bcf	3999,5,c	;volatile
   822                           
   823                           ; BSR set to: 0
   824                           ;main.c: 74: PIE1bits.RCIE=1;
   825  000394  8A9D               	bsf	3997,5,c	;volatile
   826                           
   827                           ; BSR set to: 0
   828                           ;main.c: 77: TRISCbits.RC3=1;
   829  000396  8694               	bsf	3988,3,c	;volatile
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 78: INTCONbits.INT0IE=1;
   833  000398  88F2               	bsf	intcon,4,c	;volatile
   834                           
   835                           ; BSR set to: 0
   836                           ;main.c: 81: PIR1bits.RC1IF=0;
   837  00039A  9A9E               	bcf	3998,5,c	;volatile
   838                           
   839                           ; BSR set to: 0
   840                           ;main.c: 82: INTCONbits.INT0IF=0;
   841  00039C  92F2               	bcf	intcon,1,c	;volatile
   842                           
   843                           ;main.c: 85: struct DC_motor mL, mR;
   844                           ;main.c: 86: mL.power=0;
   845  00039E  0E00               	movlw	0
   846  0003A0  0102               	movlb	2	; () banked
   847  0003A2  6F00               	movwf	main@mL& (0+255),b
   848                           
   849                           ;main.c: 87: mL.direction=1;
   850  0003A4  0E01               	movlw	1
   851  0003A6  0102               	movlb	2	; () banked
   852  0003A8  6F01               	movwf	(main@mL+1)& (0+255),b
   853                           
   854                           ; BSR set to: 2
   855                           ;main.c: 88: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   856  0003AA  0E79               	movlw	121
   857  0003AC  0102               	movlb	2	; () banked
   858  0003AE  6F02               	movwf	(main@mL+2)& (0+255),b
   859  0003B0  0E0F               	movlw	15
   860  0003B2  0102               	movlb	2	; () banked
   861  0003B4  6F03               	movwf	(main@mL+3)& (0+255),b
   862                           
   863                           ; BSR set to: 2
   864                           ;main.c: 89: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   865  0003B6  0E78               	movlw	120
   866  0003B8  0102               	movlb	2	; () banked
   867  0003BA  6F04               	movwf	(main@mL+4)& (0+255),b
   868  0003BC  0E0F               	movlw	15
   869  0003BE  0102               	movlb	2	; () banked
   870  0003C0  6F05               	movwf	(main@mL+5)& (0+255),b
   871                           
   872                           ;main.c: 90: mL.dir_pin=0;
   873  0003C2  0E00               	movlw	0
   874  0003C4  0102               	movlb	2	; () banked
   875  0003C6  6F06               	movwf	(main@mL+6)& (0+255),b
   876                           
   877                           ;main.c: 91: mL.PWMperiod=199;
   878  0003C8  0E00               	movlw	0
   879  0003CA  0102               	movlb	2	; () banked
   880  0003CC  6F08               	movwf	(main@mL+8)& (0+255),b
   881  0003CE  0EC7               	movlw	199
   882  0003D0  6F07               	movwf	(main@mL+7)& (0+255),b
   883                           
   884                           ;main.c: 93: mR.power=0;
   885  0003D2  0E00               	movlw	0
   886  0003D4  0102               	movlb	2	; () banked
   887  0003D6  6F09               	movwf	main@mR& (0+255),b
   888                           
   889                           ;main.c: 94: mR.direction=1;
   890  0003D8  0E01               	movlw	1
   891  0003DA  0102               	movlb	2	; () banked
   892  0003DC  6F0A               	movwf	(main@mR+1)& (0+255),b
   893                           
   894                           ; BSR set to: 2
   895                           ;main.c: 95: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   896  0003DE  0E77               	movlw	119
   897  0003E0  0102               	movlb	2	; () banked
   898  0003E2  6F0B               	movwf	(main@mR+2)& (0+255),b
   899  0003E4  0E0F               	movlw	15
   900  0003E6  0102               	movlb	2	; () banked
   901  0003E8  6F0C               	movwf	(main@mR+3)& (0+255),b
   902                           
   903                           ; BSR set to: 2
   904                           ;main.c: 96: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   905  0003EA  0E76               	movlw	118
   906  0003EC  0102               	movlb	2	; () banked
   907  0003EE  6F0D               	movwf	(main@mR+4)& (0+255),b
   908  0003F0  0E0F               	movlw	15
   909  0003F2  0102               	movlb	2	; () banked
   910  0003F4  6F0E               	movwf	(main@mR+5)& (0+255),b
   911                           
   912                           ;main.c: 97: mR.dir_pin=2;
   913  0003F6  0E02               	movlw	2
   914  0003F8  0102               	movlb	2	; () banked
   915  0003FA  6F0F               	movwf	(main@mR+6)& (0+255),b
   916                           
   917                           ;main.c: 98: mR.PWMperiod=199;
   918  0003FC  0E00               	movlw	0
   919  0003FE  0102               	movlb	2	; () banked
   920  000400  6F11               	movwf	(main@mR+8)& (0+255),b
   921  000402  0EC7               	movlw	199
   922  000404  6F10               	movwf	(main@mR+7)& (0+255),b
   923                           
   924                           ;main.c: 100: OSCCON = 0x72;
   925  000406  0E72               	movlw	114
   926  000408  6ED3               	movwf	4051,c	;volatile
   927  00040A                     l369:
   928  00040A  B4D3               	btfsc	4051,2,c	;volatile
   929  00040C  D221               	goto	l3348
   930  00040E  D7FD               	goto	l369
   931  000410                     l3198:
   932                           
   933                           ;main.c: 113: stop(&mL, &mR);
   934  000410  0E00               	movlw	low main@mL
   935  000412  0100               	movlb	0	; () banked
   936  000414  6F62               	movwf	stop@mL& (0+255),b
   937  000416  0E02               	movlw	high main@mL
   938  000418  0100               	movlb	0	; () banked
   939  00041A  6F63               	movwf	(stop@mL+1)& (0+255),b
   940  00041C  0E09               	movlw	low main@mR
   941  00041E  0100               	movlb	0	; () banked
   942  000420  6F64               	movwf	stop@mR& (0+255),b
   943  000422  0E02               	movlw	high main@mR
   944  000424  0100               	movlb	0	; () banked
   945  000426  6F65               	movwf	(stop@mR+1)& (0+255),b
   946  000428  EC73  F009         	call	_stop	;wreg free
   947                           
   948                           ;main.c: 114: RFID_Read=0;
   949  00042C  0E00               	movlw	0
   950  00042E  0101               	movlb	1	; () banked
   951  000430  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   952                           
   953                           ; BSR set to: 1
   954                           ;main.c: 117: SensorResult[0]=grabLeftIR();
   955  000432  ECBD  F00A         	call	_grabLeftIR	;wreg free
   956  000436  C024  F0B0         	movff	?_grabLeftIR,main@SensorResult
   957  00043A  C025  F0B1         	movff	?_grabLeftIR+1,main@SensorResult+1
   958                           
   959                           ;main.c: 118: SensorResult[1]=grabRightIR();
   960  00043E  EC84  F00A         	call	_grabRightIR	;wreg free
   961  000442  C024  F0B2         	movff	?_grabRightIR,main@SensorResult+2
   962  000446  C025  F0B3         	movff	?_grabRightIR+1,main@SensorResult+3
   963                           
   964                           ;main.c: 122: CAP1BUFH=0;
   965  00044A  0E00               	movlw	0
   966  00044C  6E69               	movwf	3945,c	;volatile
   967                           
   968                           ;main.c: 123: CAP1BUFL=0;
   969  00044E  0E00               	movlw	0
   970  000450  6E68               	movwf	3944,c	;volatile
   971                           
   972                           ;main.c: 124: CAP2BUFH=0;
   973  000452  0E00               	movlw	0
   974  000454  6E67               	movwf	3943,c	;volatile
   975                           
   976                           ;main.c: 125: CAP2BUFL=0;
   977  000456  0E00               	movlw	0
   978  000458  6E66               	movwf	3942,c	;volatile
   979                           
   980                           ;main.c: 128: SendLCD(0b00000001,0);
   981  00045A  0E00               	movlw	0
   982  00045C  6E28               	movwf	SendLCD@type,c
   983  00045E  0E01               	movlw	1
   984  000460  EC49  F00C         	call	_SendLCD
   985                           
   986                           ;main.c: 129: _delay((unsigned long)((50)*(8000000/4000000.0)));
   987  000464  0E21               	movlw	33
   988  000466                     u2837:
   989  000466  2EE8               	decfsz	wreg,f,c
   990  000468  D7FE               	goto	u2837
   991  00046A  F000               	nop	
   992                           
   993                           ;main.c: 130: SendLCD(0b00000010,0);
   994  00046C  0E00               	movlw	0
   995  00046E  6E28               	movwf	SendLCD@type,c
   996  000470  0E02               	movlw	2
   997  000472  EC49  F00C         	call	_SendLCD
   998                           
   999                           ;main.c: 131: _delay((unsigned long)((2)*(8000000/4000.0)));
  1000  000476  0E06               	movlw	6
  1001  000478  0100               	movlb	0	; () banked
  1002  00047A  6FAD               	movwf	??_main& (0+255),b
  1003  00047C  0E30               	movlw	48
  1004  00047E                     u2847:
  1005  00047E  2EE8               	decfsz	wreg,f,c
  1006  000480  D7FE               	goto	u2847
  1007  000482  2FAD               	decfsz	??_main& (0+255),f,b
  1008  000484  D7FC               	goto	u2847
  1009  000486  D000               	nop2	
  1010                           
  1011                           ;main.c: 132: SetLine(1);
  1012  000488  0E01               	movlw	1
  1013  00048A  EC31  F00C         	call	_SetLine
  1014                           
  1015                           ;main.c: 133: LCD_String("      Inert Mode");
  1016  00048E  0E1C               	movlw	low STR_5
  1017  000490  6E2A               	movwf	LCD_String@string,c
  1018  000492  0E03               	movlw	high STR_5
  1019  000494  6E2B               	movwf	LCD_String@string+1,c
  1020  000496  ECF6  F00A         	call	_LCD_String	;wreg free
  1021                           
  1022                           ;main.c: 134: SetLine(2);
  1023  00049A  0E02               	movlw	2
  1024  00049C  EC31  F00C         	call	_SetLine
  1025                           
  1026                           ;main.c: 135: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1027  0004A0  0EC8               	movlw	low main@buf
  1028  0004A2  6E30               	movwf	sprintf@sp,c
  1029  0004A4  0E01               	movlw	high main@buf
  1030  0004A6  6E31               	movwf	sprintf@sp+1,c
  1031  0004A8  0E0B               	movlw	low STR_6
  1032  0004AA  6E32               	movwf	sprintf@f,c
  1033  0004AC  0E03               	movlw	high STR_6
  1034  0004AE  6E33               	movwf	sprintf@f+1,c
  1035  0004B0  C0B0  F034         	movff	main@SensorResult,?_sprintf+4
  1036  0004B4  C0B1  F035         	movff	main@SensorResult+1,?_sprintf+5
  1037  0004B8  C0B2  F036         	movff	main@SensorResult+2,?_sprintf+6
  1038  0004BC  C0B3  F037         	movff	main@SensorResult+3,?_sprintf+7
  1039  0004C0  EC39  F004         	call	_sprintf	;wreg free
  1040                           
  1041                           ;main.c: 136: LCD_String(buf);
  1042  0004C4  0EC8               	movlw	low main@buf
  1043  0004C6  6E2A               	movwf	LCD_String@string,c
  1044  0004C8  0E01               	movlw	high main@buf
  1045  0004CA  6E2B               	movwf	LCD_String@string+1,c
  1046  0004CC  ECF6  F00A         	call	_LCD_String	;wreg free
  1047                           
  1048                           ;main.c: 138: break;
  1049  0004D0  D1BF               	goto	l3348
  1050  0004D2                     l3232:
  1051                           
  1052                           ;main.c: 143: initMotorPWM();
  1053  0004D2  EC18  F00C         	call	_initMotorPWM	;wreg free
  1054                           
  1055                           ;main.c: 144: initRFID();
  1056  0004D6  ECBC  F00C         	call	_initRFID	;wreg free
  1057                           
  1058                           ;main.c: 145: initLCD();
  1059  0004DA  ECBB  F008         	call	_initLCD	;wreg free
  1060                           
  1061                           ;main.c: 146: initIR();
  1062  0004DE  EC9C  F00C         	call	_initIR	;wreg free
  1063                           
  1064                           ;main.c: 148: enableSensor(0, 1);
  1065  0004E2  0E01               	movlw	1
  1066  0004E4  6E24               	movwf	enableSensor@status,c
  1067  0004E6  0E00               	movlw	0
  1068  0004E8  EC76  F00C         	call	_enableSensor
  1069                           
  1070                           ;main.c: 149: enableSensor(1, 1);
  1071  0004EC  0E01               	movlw	1
  1072  0004EE  6E24               	movwf	enableSensor@status,c
  1073  0004F0  0E01               	movlw	1
  1074  0004F2  EC76  F00C         	call	_enableSensor
  1075                           
  1076                           ;main.c: 152: fullSpeedAhead(&mL, &mR, 100);
  1077  0004F6  0E00               	movlw	low main@mL
  1078  0004F8  0100               	movlb	0	; () banked
  1079  0004FA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1080  0004FC  0E02               	movlw	high main@mL
  1081  0004FE  0100               	movlb	0	; () banked
  1082  000500  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1083  000502  0E09               	movlw	low main@mR
  1084  000504  0100               	movlb	0	; () banked
  1085  000506  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1086  000508  0E02               	movlw	high main@mR
  1087  00050A  0100               	movlb	0	; () banked
  1088  00050C  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1089  00050E  0E64               	movlw	100
  1090  000510  0100               	movlb	0	; () banked
  1091  000512  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1092  000514  EC44  F00A         	call	_fullSpeedAhead	;wreg free
  1093                           
  1094                           ;main.c: 153: delay_tenth_s(1);
  1095  000518  0E01               	movlw	1
  1096  00051A  ECE0  F00B         	call	_delay_tenth_s
  1097  00051E  D197               	goto	l3344
  1098  000520                     l3248:
  1099                           
  1100                           ;main.c: 165: SetLine(1);
  1101  000520  0E01               	movlw	1
  1102  000522  EC31  F00C         	call	_SetLine
  1103                           
  1104                           ;main.c: 166: LCD_String("Searching");
  1105  000526  0E50               	movlw	low STR_7
  1106  000528  6E2A               	movwf	LCD_String@string,c
  1107  00052A  0E03               	movlw	high STR_7
  1108  00052C  6E2B               	movwf	LCD_String@string+1,c
  1109  00052E  ECF6  F00A         	call	_LCD_String	;wreg free
  1110                           
  1111                           ;main.c: 168: if (DirectionFound==-1) {
  1112  000532  0100               	movlb	0	; () banked
  1113  000534  29B5               	incf	main@DirectionFound& (0+255),w,b
  1114  000536  A4D8               	btfss	status,2,c
  1115  000538  D030               	goto	l3264
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;main.c: 173: fullSpeedAhead(&mL, &mR, 100);
  1119  00053A  0E00               	movlw	low main@mL
  1120  00053C  0100               	movlb	0	; () banked
  1121  00053E  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1122  000540  0E02               	movlw	high main@mL
  1123  000542  0100               	movlb	0	; () banked
  1124  000544  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1125  000546  0E09               	movlw	low main@mR
  1126  000548  0100               	movlb	0	; () banked
  1127  00054A  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1128  00054C  0E02               	movlw	high main@mR
  1129  00054E  0100               	movlb	0	; () banked
  1130  000550  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1131  000552  0E64               	movlw	100
  1132  000554  0100               	movlb	0	; () banked
  1133  000556  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1134  000558  EC44  F00A         	call	_fullSpeedAhead	;wreg free
  1135                           
  1136                           ;main.c: 174: delay_tenth_s(6);
  1137  00055C  0E06               	movlw	6
  1138  00055E  ECE0  F00B         	call	_delay_tenth_s
  1139                           
  1140                           ;main.c: 175: stop(&mL,&mR);
  1141  000562  0E00               	movlw	low main@mL
  1142  000564  0100               	movlb	0	; () banked
  1143  000566  6F62               	movwf	stop@mL& (0+255),b
  1144  000568  0E02               	movlw	high main@mL
  1145  00056A  0100               	movlb	0	; () banked
  1146  00056C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1147  00056E  0E09               	movlw	low main@mR
  1148  000570  0100               	movlb	0	; () banked
  1149  000572  6F64               	movwf	stop@mR& (0+255),b
  1150  000574  0E02               	movlw	high main@mR
  1151  000576  0100               	movlb	0	; () banked
  1152  000578  6F65               	movwf	(stop@mR+1)& (0+255),b
  1153  00057A  EC73  F009         	call	_stop	;wreg free
  1154                           
  1155                           ;main.c: 176: DirectionFound=0;
  1156  00057E  0E00               	movlw	0
  1157  000580  0100               	movlb	0	; () banked
  1158  000582  6FB5               	movwf	main@DirectionFound& (0+255),b
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 177: MoveType[Move]=0;
  1162  000584  0100               	movlb	0	; () banked
  1163  000586  51B6               	movf	main@Move& (0+255),w,b
  1164  000588  0D01               	mullw	1
  1165  00058A  0E64               	movlw	low main@MoveType
  1166  00058C  24F3               	addwf	prodl,w,c
  1167  00058E  6ED9               	movwf	fsr2l,c
  1168  000590  0E01               	movlw	high main@MoveType
  1169  000592  20F4               	addwfc	prodh,w,c
  1170  000594  6EDA               	movwf	fsr2h,c
  1171  000596  0E00               	movlw	0
  1172  000598  D136               	goto	L2
  1173  00059A                     l3264:
  1174                           
  1175                           ; BSR set to: 0
  1176  00059A  0100               	movlb	0	; () banked
  1177  00059C  51B5               	movf	main@DirectionFound& (0+255),w,b
  1178  00059E  0100               	movlb	0	; () banked
  1179  0005A0  A4D8               	btfss	status,2,c
  1180  0005A2  D022               	goto	l3270
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;main.c: 180: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, TurnDirection, &MoveTime
      +                          [Move]);
  1184  0005A4  0E00               	movlw	low main@mL
  1185  0005A6  0100               	movlb	0	; () banked
  1186  0005A8  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1187  0005AA  0E02               	movlw	high main@mL
  1188  0005AC  0100               	movlb	0	; () banked
  1189  0005AE  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1190  0005B0  0E09               	movlw	low main@mR
  1191  0005B2  0100               	movlb	0	; () banked
  1192  0005B4  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1193  0005B6  0E02               	movlw	high main@mR
  1194  0005B8  0100               	movlb	0	; () banked
  1195  0005BA  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1196  0005BC  C0AF  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1197  0005C0  0100               	movlb	0	; () banked
  1198  0005C2  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1199  0005C4  C0B4  F073         	movff	main@TurnDirection,ScanWithRange@TurnDirection
  1200  0005C8  0100               	movlb	0	; () banked
  1201  0005CA  51B6               	movf	main@Move& (0+255),w,b
  1202  0005CC  0D01               	mullw	1
  1203  0005CE  0E00               	movlw	low main@MoveTime
  1204  0005D0  24F3               	addwf	prodl,w,c
  1205  0005D2  0100               	movlb	0	; () banked
  1206  0005D4  6F74               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1207  0005D6  0E01               	movlw	high main@MoveTime
  1208  0005D8  20F4               	addwfc	prodh,w,c
  1209  0005DA  0100               	movlb	0	; () banked
  1210  0005DC  6F75               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1211  0005DE  ECBC  F005         	call	_ScanWithRange	;wreg free
  1212  0005E2  0100               	movlb	0	; () banked
  1213  0005E4  6FB5               	movwf	main@DirectionFound& (0+255),b
  1214  0005E6  D030               	goto	l3278
  1215  0005E8                     l3270:
  1216                           
  1217                           ; BSR set to: 0
  1218  0005E8  0100               	movlb	0	; () banked
  1219  0005EA  05B5               	decf	main@DirectionFound& (0+255),w,b
  1220  0005EC  A4D8               	btfss	status,2,c
  1221  0005EE  D025               	goto	l3274
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;main.c: 184: DirectionFound=ScanIR(&mL, &mR, TurnDirection, &Move, &MoveTime, &MoveType
      +                          );
  1225  0005F0  0E00               	movlw	low main@mL
  1226  0005F2  0100               	movlb	0	; () banked
  1227  0005F4  6F6D               	movwf	ScanIR@mL& (0+255),b
  1228  0005F6  0E02               	movlw	high main@mL
  1229  0005F8  0100               	movlb	0	; () banked
  1230  0005FA  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1231  0005FC  0E09               	movlw	low main@mR
  1232  0005FE  0100               	movlb	0	; () banked
  1233  000600  6F6F               	movwf	ScanIR@mR& (0+255),b
  1234  000602  0E02               	movlw	high main@mR
  1235  000604  0100               	movlb	0	; () banked
  1236  000606  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1237  000608  C0B4  F071         	movff	main@TurnDirection,ScanIR@TurnDirection
  1238  00060C  0EB6               	movlw	low main@Move
  1239  00060E  0100               	movlb	0	; () banked
  1240  000610  6F72               	movwf	ScanIR@Move& (0+255),b
  1241  000612  0E00               	movlw	high main@Move
  1242  000614  0100               	movlb	0	; () banked
  1243  000616  6F73               	movwf	(ScanIR@Move+1)& (0+255),b
  1244  000618  0E00               	movlw	low main@MoveTime
  1245  00061A  0100               	movlb	0	; () banked
  1246  00061C  6F74               	movwf	ScanIR@MoveTime& (0+255),b
  1247  00061E  0E01               	movlw	high main@MoveTime
  1248  000620  0100               	movlb	0	; () banked
  1249  000622  6F75               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1250  000624  0E64               	movlw	low main@MoveType
  1251  000626  0100               	movlb	0	; () banked
  1252  000628  6F76               	movwf	ScanIR@MoveType& (0+255),b
  1253  00062A  0E01               	movlw	high main@MoveType
  1254  00062C  0100               	movlb	0	; () banked
  1255  00062E  6F77               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1256  000630  ECDB  F007         	call	_ScanIR	;wreg free
  1257  000634  0100               	movlb	0	; () banked
  1258  000636  6FB5               	movwf	main@DirectionFound& (0+255),b
  1259                           
  1260                           ;main.c: 185: } else if (DirectionFound==2) {
  1261  000638  D0E7               	goto	l3334
  1262  00063A                     l3274:
  1263                           
  1264                           ; BSR set to: 0
  1265  00063A  0E02               	movlw	2
  1266  00063C  0100               	movlb	0	; () banked
  1267  00063E  19B5               	xorwf	main@DirectionFound& (0+255),w,b
  1268  000640  A4D8               	btfss	status,2,c
  1269  000642  D0E2               	goto	l3334
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 187: mode=2;
  1273  000644  0E02               	movlw	2
  1274  000646  6E3B               	movwf	_mode,c	;volatile
  1275  000648                     l3278:
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;main.c: 188: MoveType[Move]=1;
  1279  000648  0100               	movlb	0	; () banked
  1280  00064A  51B6               	movf	main@Move& (0+255),w,b
  1281  00064C  0D01               	mullw	1
  1282  00064E  0E64               	movlw	low main@MoveType
  1283  000650  24F3               	addwf	prodl,w,c
  1284  000652  6ED9               	movwf	fsr2l,c
  1285  000654  0E01               	movlw	high main@MoveType
  1286  000656  20F4               	addwfc	prodh,w,c
  1287  000658  6EDA               	movwf	fsr2h,c
  1288  00065A  0E01               	movlw	1
  1289  00065C  D0D4               	goto	L2
  1290  00065E                     l3282:
  1291                           
  1292                           ;main.c: 200: if (RFID_Read) {
  1293  00065E  0101               	movlb	1	; () banked
  1294  000660  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1295  000662  B4D8               	btfsc	status,2,c
  1296  000664  D0A2               	goto	l3324
  1297                           
  1298                           ; BSR set to: 1
  1299                           ;main.c: 201: stop(&mL, &mR);
  1300  000666  0E00               	movlw	low main@mL
  1301  000668  0100               	movlb	0	; () banked
  1302  00066A  6F62               	movwf	stop@mL& (0+255),b
  1303  00066C  0E02               	movlw	high main@mL
  1304  00066E  0100               	movlb	0	; () banked
  1305  000670  6F63               	movwf	(stop@mL+1)& (0+255),b
  1306  000672  0E09               	movlw	low main@mR
  1307  000674  0100               	movlb	0	; () banked
  1308  000676  6F64               	movwf	stop@mR& (0+255),b
  1309  000678  0E02               	movlw	high main@mR
  1310  00067A  0100               	movlb	0	; () banked
  1311  00067C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1312  00067E  EC73  F009         	call	_stop	;wreg free
  1313                           
  1314                           ;main.c: 202: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1315  000682  0E03               	movlw	3
  1316  000684  0100               	movlb	0	; () banked
  1317  000686  19CF               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1318  000688  A4D8               	btfss	status,2,c
  1319  00068A  D002               	goto	u2750
  1320  00068C  0E01               	movlw	1
  1321  00068E  D001               	goto	u2752
  1322  000690                     u2750:
  1323  000690  0E00               	movlw	0
  1324  000692                     u2752:
  1325  000692  0100               	movlb	0	; () banked
  1326  000694  6FAD               	movwf	??_main& (0+255),b
  1327  000696  0E02               	movlw	2
  1328  000698  0100               	movlb	0	; () banked
  1329  00069A  19C0               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1330  00069C  A4D8               	btfss	status,2,c
  1331  00069E  D002               	goto	u2760
  1332  0006A0  0E01               	movlw	1
  1333  0006A2  D001               	goto	u2762
  1334  0006A4                     u2760:
  1335  0006A4  0E00               	movlw	0
  1336  0006A6                     u2762:
  1337  0006A6  0100               	movlb	0	; () banked
  1338  0006A8  15AD               	andwf	??_main& (0+255),w,b
  1339  0006AA  A0E8               	btfss	wreg,0,c
  1340  0006AC  D0D1               	goto	l3348
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 203: if (VerifySignal(ReceivedString)){
  1344  0006AE  0EC0               	movlw	low _ReceivedString
  1345  0006B0  6E24               	movwf	VerifySignal@Signal,c
  1346  0006B2  0E00               	movlw	high _ReceivedString
  1347  0006B4  6E25               	movwf	VerifySignal@Signal+1,c
  1348  0006B6  EC19  F009         	call	_VerifySignal	;wreg free
  1349  0006BA  0900               	iorlw	0
  1350  0006BC  B4D8               	btfsc	status,2,c
  1351  0006BE  D041               	goto	l3316
  1352                           
  1353                           ;main.c: 205: for (i=0; i<10; i++){
  1354  0006C0  0E00               	movlw	0
  1355  0006C2  0100               	movlb	0	; () banked
  1356  0006C4  6FB7               	movwf	main@i& (0+255),b
  1357  0006C6                     l3292:
  1358                           
  1359                           ; BSR set to: 0
  1360  0006C6  0E09               	movlw	9
  1361  0006C8  0100               	movlb	0	; () banked
  1362  0006CA  65B7               	cpfsgt	main@i& (0+255),b
  1363  0006CC  D001               	goto	l3296
  1364  0006CE  D020               	goto	l3302
  1365  0006D0                     l3296:
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;main.c: 206: Message[i] = ReceivedString[i+1];
  1369  0006D0  0100               	movlb	0	; () banked
  1370  0006D2  51B7               	movf	main@i& (0+255),w,b
  1371  0006D4  0100               	movlb	0	; () banked
  1372  0006D6  6FAD               	movwf	??_main& (0+255),b
  1373  0006D8  6BAE               	clrf	(??_main+1)& (0+255),b
  1374  0006DA  0E01               	movlw	1
  1375  0006DC  0100               	movlb	0	; () banked
  1376  0006DE  27AD               	addwf	??_main& (0+255),f,b
  1377  0006E0  0E00               	movlw	0
  1378  0006E2  23AE               	addwfc	(??_main+1)& (0+255),f,b
  1379  0006E4  0EC0               	movlw	low _ReceivedString
  1380  0006E6  0100               	movlb	0	; () banked
  1381  0006E8  25AD               	addwf	??_main& (0+255),w,b
  1382  0006EA  6ED9               	movwf	fsr2l,c
  1383  0006EC  0E00               	movlw	high _ReceivedString
  1384  0006EE  0100               	movlb	0	; () banked
  1385  0006F0  21AE               	addwfc	(??_main+1)& (0+255),w,b
  1386  0006F2  6EDA               	movwf	fsr2h,c
  1387  0006F4  0100               	movlb	0	; () banked
  1388  0006F6  51B7               	movf	main@i& (0+255),w,b
  1389  0006F8  0D01               	mullw	1
  1390  0006FA  0EF0               	movlw	low main@Message
  1391  0006FC  24F3               	addwf	prodl,w,c
  1392  0006FE  6EE1               	movwf	fsr1l,c
  1393  000700  0E01               	movlw	high main@Message
  1394  000702  20F4               	addwfc	prodh,w,c
  1395  000704  6EE2               	movwf	fsr1h,c
  1396  000706  CFDF FFE7          	movff	indf2,indf1
  1397                           
  1398                           ; BSR set to: 0
  1399  00070A  0100               	movlb	0	; () banked
  1400  00070C  2BB7               	incf	main@i& (0+255),f,b
  1401  00070E  D7DB               	goto	l3292
  1402  000710                     l3302:
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 207: }
  1406                           ;main.c: 210: for (i=0; i<16; i++) {
  1407  000710  0E00               	movlw	0
  1408  000712  0100               	movlb	0	; () banked
  1409  000714  6FB7               	movwf	main@i& (0+255),b
  1410  000716                     l3304:
  1411                           
  1412                           ; BSR set to: 0
  1413  000716  0E0F               	movlw	15
  1414  000718  0100               	movlb	0	; () banked
  1415  00071A  65B7               	cpfsgt	main@i& (0+255),b
  1416  00071C  D001               	goto	l3308
  1417  00071E  D00E               	goto	l3314
  1418  000720                     l3308:
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;main.c: 211: ReceivedString[i]=0;
  1422  000720  0100               	movlb	0	; () banked
  1423  000722  51B7               	movf	main@i& (0+255),w,b
  1424  000724  0D01               	mullw	1
  1425  000726  0EC0               	movlw	low _ReceivedString
  1426  000728  24F3               	addwf	prodl,w,c
  1427  00072A  6ED9               	movwf	fsr2l,c
  1428  00072C  0E00               	movlw	high _ReceivedString
  1429  00072E  20F4               	addwfc	prodh,w,c
  1430  000730  6EDA               	movwf	fsr2h,c
  1431  000732  0E00               	movlw	0
  1432  000734  6EDF               	movwf	indf2,c
  1433                           
  1434                           ; BSR set to: 0
  1435  000736  0100               	movlb	0	; () banked
  1436  000738  2BB7               	incf	main@i& (0+255),f,b
  1437  00073A  D7ED               	goto	l3304
  1438  00073C                     l3314:
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;main.c: 212: }
  1442                           ;main.c: 213: mode=3;
  1443  00073C  0E03               	movlw	3
  1444  00073E  6E3B               	movwf	_mode,c	;volatile
  1445                           
  1446                           ;main.c: 215: } else {
  1447  000740  D087               	goto	l3348
  1448  000742                     l3316:
  1449                           
  1450                           ;main.c: 216: fullSpeedBack(&mL,&mR, 100);
  1451  000742  0E00               	movlw	low main@mL
  1452  000744  0100               	movlb	0	; () banked
  1453  000746  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1454  000748  0E02               	movlw	high main@mL
  1455  00074A  0100               	movlb	0	; () banked
  1456  00074C  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1457  00074E  0E09               	movlw	low main@mR
  1458  000750  0100               	movlb	0	; () banked
  1459  000752  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1460  000754  0E02               	movlw	high main@mR
  1461  000756  0100               	movlb	0	; () banked
  1462  000758  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1463  00075A  0E64               	movlw	100
  1464  00075C  0100               	movlb	0	; () banked
  1465  00075E  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1466  000760  ECC1  F00B         	call	_fullSpeedBack	;wreg free
  1467                           
  1468                           ;main.c: 217: delay_tenth_s(5);
  1469  000764  0E05               	movlw	5
  1470  000766  ECE0  F00B         	call	_delay_tenth_s
  1471                           
  1472                           ;main.c: 218: stop(&mL,&mR);
  1473  00076A  0E00               	movlw	low main@mL
  1474  00076C  0100               	movlb	0	; () banked
  1475  00076E  6F62               	movwf	stop@mL& (0+255),b
  1476  000770  0E02               	movlw	high main@mL
  1477  000772  0100               	movlb	0	; () banked
  1478  000774  6F63               	movwf	(stop@mL+1)& (0+255),b
  1479  000776  0E09               	movlw	low main@mR
  1480  000778  0100               	movlb	0	; () banked
  1481  00077A  6F64               	movwf	stop@mR& (0+255),b
  1482  00077C  0E02               	movlw	high main@mR
  1483  00077E  0100               	movlb	0	; () banked
  1484  000780  6F65               	movwf	(stop@mR+1)& (0+255),b
  1485  000782  EC73  F009         	call	_stop	;wreg free
  1486                           
  1487                           ;main.c: 219: fullSpeedAhead(&mL,&mR, 100);
  1488  000786  0E00               	movlw	low main@mL
  1489  000788  0100               	movlb	0	; () banked
  1490  00078A  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1491  00078C  0E02               	movlw	high main@mL
  1492  00078E  0100               	movlb	0	; () banked
  1493  000790  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1494  000792  0E09               	movlw	low main@mR
  1495  000794  0100               	movlb	0	; () banked
  1496  000796  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1497  000798  0E02               	movlw	high main@mR
  1498  00079A  0100               	movlb	0	; () banked
  1499  00079C  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1500  00079E  0E64               	movlw	100
  1501  0007A0  0100               	movlb	0	; () banked
  1502  0007A2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1503  0007A4  EC44  F00A         	call	_fullSpeedAhead	;wreg free
  1504                           
  1505                           ;main.c: 220: }
  1506                           ;main.c: 221: }
  1507                           ;main.c: 222: } else {
  1508  0007A8  D053               	goto	l3348
  1509  0007AA                     l3324:
  1510                           
  1511                           ;main.c: 223: DirectionFound=1;
  1512  0007AA  0E01               	movlw	1
  1513  0007AC  0100               	movlb	0	; () banked
  1514  0007AE  6FB5               	movwf	main@DirectionFound& (0+255),b
  1515                           
  1516                           ;main.c: 224: mode=1;
  1517  0007B0  0E01               	movlw	1
  1518  0007B2  6E3B               	movwf	_mode,c	;volatile
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;main.c: 226: fullSpeedAhead(&mL,&mR, 100);
  1522  0007B4  0E00               	movlw	low main@mL
  1523  0007B6  0100               	movlb	0	; () banked
  1524  0007B8  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1525  0007BA  0E02               	movlw	high main@mL
  1526  0007BC  0100               	movlb	0	; () banked
  1527  0007BE  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1528  0007C0  0E09               	movlw	low main@mR
  1529  0007C2  0100               	movlb	0	; () banked
  1530  0007C4  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1531  0007C6  0E02               	movlw	high main@mR
  1532  0007C8  0100               	movlb	0	; () banked
  1533  0007CA  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1534  0007CC  0E64               	movlw	100
  1535  0007CE  0100               	movlb	0	; () banked
  1536  0007D0  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1537  0007D2  EC44  F00A         	call	_fullSpeedAhead	;wreg free
  1538                           
  1539                           ;main.c: 227: delay_tenth_s(5);
  1540  0007D6  0E05               	movlw	5
  1541  0007D8  ECE0  F00B         	call	_delay_tenth_s
  1542                           
  1543                           ;main.c: 228: MoveType[Move] = 0;
  1544  0007DC  0100               	movlb	0	; () banked
  1545  0007DE  51B6               	movf	main@Move& (0+255),w,b
  1546  0007E0  0D01               	mullw	1
  1547  0007E2  0E64               	movlw	low main@MoveType
  1548  0007E4  24F3               	addwf	prodl,w,c
  1549  0007E6  6ED9               	movwf	fsr2l,c
  1550  0007E8  0E01               	movlw	high main@MoveType
  1551  0007EA  20F4               	addwfc	prodh,w,c
  1552  0007EC  6EDA               	movwf	fsr2h,c
  1553  0007EE  0E00               	movlw	0
  1554  0007F0  6EDF               	movwf	indf2,c
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;main.c: 229: MoveTime[Move] = 5;
  1558  0007F2  0100               	movlb	0	; () banked
  1559  0007F4  51B6               	movf	main@Move& (0+255),w,b
  1560  0007F6  0D01               	mullw	1
  1561  0007F8  0E00               	movlw	low main@MoveTime
  1562  0007FA  24F3               	addwf	prodl,w,c
  1563  0007FC  6ED9               	movwf	fsr2l,c
  1564  0007FE  0E01               	movlw	high main@MoveTime
  1565  000800  20F4               	addwfc	prodh,w,c
  1566  000802  6EDA               	movwf	fsr2h,c
  1567  000804  0E05               	movlw	5
  1568  000806                     L2:
  1569  000806  6EDF               	movwf	indf2,c
  1570  000808                     l3334:
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;main.c: 230: Move++;
  1574  000808  0100               	movlb	0	; () banked
  1575  00080A  2BB6               	incf	main@Move& (0+255),f,b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;main.c: 231: }
  1579                           ;main.c: 233: break;
  1580  00080C  D021               	goto	l3348
  1581  00080E                     l3336:
  1582                           
  1583                           ;main.c: 238: SetLine(1);
  1584  00080E  0E01               	movlw	1
  1585  000810  EC31  F00C         	call	_SetLine
  1586                           
  1587                           ;main.c: 239: LCD_String("PUT MESSAGE");
  1588  000814  0E2D               	movlw	low STR_8
  1589  000816  6E2A               	movwf	LCD_String@string,c
  1590  000818  0E03               	movlw	high STR_8
  1591  00081A  6E2B               	movwf	LCD_String@string+1,c
  1592  00081C  ECF6  F00A         	call	_LCD_String	;wreg free
  1593                           
  1594                           ;main.c: 240: SetLine(2);
  1595  000820  0E02               	movlw	2
  1596  000822  EC31  F00C         	call	_SetLine
  1597                           
  1598                           ;main.c: 241: LCD_String("Going Home");
  1599  000826  0E45               	movlw	low STR_9
  1600  000828  6E2A               	movwf	LCD_String@string,c
  1601  00082A  0E03               	movlw	high STR_9
  1602  00082C  6E2B               	movwf	LCD_String@string+1,c
  1603  00082E  ECF6  F00A         	call	_LCD_String	;wreg free
  1604                           
  1605                           ;main.c: 242: stop(&mL,&mR);
  1606  000832  0E00               	movlw	low main@mL
  1607  000834  0100               	movlb	0	; () banked
  1608  000836  6F62               	movwf	stop@mL& (0+255),b
  1609  000838  0E02               	movlw	high main@mL
  1610  00083A  0100               	movlb	0	; () banked
  1611  00083C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1612  00083E  0E09               	movlw	low main@mR
  1613  000840  0100               	movlb	0	; () banked
  1614  000842  6F64               	movwf	stop@mR& (0+255),b
  1615  000844  0E02               	movlw	high main@mR
  1616  000846  0100               	movlb	0	; () banked
  1617  000848  6F65               	movwf	(stop@mR+1)& (0+255),b
  1618  00084A  EC73  F009         	call	_stop	;wreg free
  1619  00084E                     l3344:
  1620                           
  1621                           ;main.c: 258: mode=-1;
  1622  00084E  683B               	setf	_mode,c	;volatile
  1623  000850                     l3348:
  1624  000850  503B               	movf	_mode,w,c	;volatile
  1625                           
  1626                           ; Switch size 1, requested type "space"
  1627                           ; Number of cases is 5, Range of values is 0 to 255
  1628                           ; switch strategies available:
  1629                           ; Name         Instructions Cycles
  1630                           ; simple_byte           16     9 (average)
  1631                           ;	Chosen strategy is simple_byte
  1632  000852  0A00               	xorlw	0	; case 0
  1633  000854  B4D8               	btfsc	status,2,c
  1634  000856  D63D               	goto	l3232
  1635  000858  0A01               	xorlw	1	; case 1
  1636  00085A  B4D8               	btfsc	status,2,c
  1637  00085C  D661               	goto	l3248
  1638  00085E  0A03               	xorlw	3	; case 2
  1639  000860  B4D8               	btfsc	status,2,c
  1640  000862  D6FD               	goto	l3282
  1641  000864  0A01               	xorlw	1	; case 3
  1642  000866  B4D8               	btfsc	status,2,c
  1643  000868  D7D2               	goto	l3336
  1644  00086A  0AFC               	xorlw	252	; case 255
  1645  00086C  B4D8               	btfsc	status,2,c
  1646  00086E  D5D0               	goto	l3198
  1647  000870  D7EF               	goto	l3348
  1648  000872                     __end_of_main:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           prodh	equ	0xFF4
  1652                           prodl	equ	0xFF3
  1653                           intcon	equ	0xFF2
  1654                           postinc0	equ	0xFEE
  1655                           wreg	equ	0xFE8
  1656                           indf1	equ	0xFE7
  1657                           fsr1h	equ	0xFE2
  1658                           fsr1l	equ	0xFE1
  1659                           indf2	equ	0xFDF
  1660                           fsr2h	equ	0xFDA
  1661                           fsr2l	equ	0xFD9
  1662                           status	equ	0xFD8
  1663                           
  1664 ;; *************** function _initRFID *****************
  1665 ;; Defined at:
  1666 ;;		line 5 in file "RFID_Reader.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;		None               void
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1680 ;;      Params:         0       0       0       0
  1681 ;;      Locals:         0       0       0       0
  1682 ;;      Temps:          0       0       0       0
  1683 ;;      Totals:         0       0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    3
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_main
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text1
  1695  001978                     __ptext1:
  1696                           	opt stack 0
  1697  001978                     _initRFID:
  1698                           	opt stack 27
  1699                           
  1700                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1701                           
  1702                           ;incstack = 0
  1703  001978  5094               	movf	3988,w,c	;volatile
  1704  00197A  09C0               	iorlw	192
  1705  00197C  6E94               	movwf	3988,c	;volatile
  1706                           
  1707                           ;RFID_Reader.c: 10: SPBRG=205;
  1708  00197E  0ECD               	movlw	205
  1709  001980  6EAF               	movwf	4015,c	;volatile
  1710                           
  1711                           ;RFID_Reader.c: 11: SPBRGH=0;
  1712  001982  0E00               	movlw	0
  1713  001984  6EB0               	movwf	4016,c	;volatile
  1714                           
  1715                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1716  001986  86AA               	bsf	4010,3,c	;volatile
  1717                           
  1718                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1719  001988  84AC               	bsf	4012,2,c	;volatile
  1720                           
  1721                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1722  00198A  88AB               	bsf	4011,4,c	;volatile
  1723                           
  1724                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1725  00198C  8EAB               	bsf	4011,7,c	;volatile
  1726                           
  1727                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1728  00198E  98AC               	bcf	4012,4,c	;volatile
  1729                           
  1730                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1731  001990  9CAB               	bcf	4011,6,c	;volatile
  1732  001992  0012               	return		;funcret
  1733  001994                     __end_of_initRFID:
  1734                           	opt stack 0
  1735                           tblptru	equ	0xFF8
  1736                           prodh	equ	0xFF4
  1737                           prodl	equ	0xFF3
  1738                           intcon	equ	0xFF2
  1739                           postinc0	equ	0xFEE
  1740                           wreg	equ	0xFE8
  1741                           indf1	equ	0xFE7
  1742                           fsr1h	equ	0xFE2
  1743                           fsr1l	equ	0xFE1
  1744                           indf2	equ	0xFDF
  1745                           fsr2h	equ	0xFDA
  1746                           fsr2l	equ	0xFD9
  1747                           status	equ	0xFD8
  1748                           
  1749 ;; *************** function _initMotorPWM *****************
  1750 ;; Defined at:
  1751 ;;		line 4 in file "dc_motor.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;		None               void
  1758 ;; Registers used:
  1759 ;;		wreg, status,2
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1765 ;;      Params:         0       0       0       0
  1766 ;;      Locals:         0       0       0       0
  1767 ;;      Temps:          0       0       0       0
  1768 ;;      Totals:         0       0       0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    3
  1772 ;; This function calls:
  1773 ;;		Nothing
  1774 ;; This function is called by:
  1775 ;;		_main
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text2
  1780  001830                     __ptext2:
  1781                           	opt stack 0
  1782  001830                     _initMotorPWM:
  1783                           	opt stack 27
  1784                           
  1785                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1786                           
  1787                           ;incstack = 0
  1788  001830  0E00               	movlw	0
  1789  001832  6E7F               	movwf	3967,c	;volatile
  1790                           
  1791                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1792  001834  0E80               	movlw	128
  1793  001836  6E7E               	movwf	3966,c	;volatile
  1794                           
  1795                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1796  001838  0E6F               	movlw	111
  1797  00183A  6E6F               	movwf	3951,c	;volatile
  1798                           
  1799                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1800  00183C  0E00               	movlw	0
  1801  00183E  6E6E               	movwf	3950,c	;volatile
  1802                           
  1803                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1804  001840  0EC7               	movlw	199
  1805  001842  6E7B               	movwf	3963,c	;volatile
  1806                           
  1807                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1808  001844  0E00               	movlw	0
  1809  001846  6E7A               	movwf	3962,c	;volatile
  1810                           
  1811                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1812  001848  0E00               	movlw	0
  1813  00184A  6E79               	movwf	3961,c	;volatile
  1814                           
  1815                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1816  00184C  0E00               	movlw	0
  1817  00184E  6E78               	movwf	3960,c	;volatile
  1818                           
  1819                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1820  001850  0E00               	movlw	0
  1821  001852  6E77               	movwf	3959,c	;volatile
  1822                           
  1823                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1824  001854  0E00               	movlw	0
  1825  001856  6E76               	movwf	3958,c	;volatile
  1826                           
  1827                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1828  001858  9093               	bcf	3987,0,c	;volatile
  1829                           
  1830                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1831  00185A  9293               	bcf	3987,1,c	;volatile
  1832                           
  1833                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1834  00185C  9493               	bcf	3987,2,c	;volatile
  1835                           
  1836                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1837  00185E  9693               	bcf	3987,3,c	;volatile
  1838  001860  0012               	return		;funcret
  1839  001862                     __end_of_initMotorPWM:
  1840                           	opt stack 0
  1841                           tblptru	equ	0xFF8
  1842                           prodh	equ	0xFF4
  1843                           prodl	equ	0xFF3
  1844                           intcon	equ	0xFF2
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           indf1	equ	0xFE7
  1848                           fsr1h	equ	0xFE2
  1849                           fsr1l	equ	0xFE1
  1850                           indf2	equ	0xFDF
  1851                           fsr2h	equ	0xFDA
  1852                           fsr2l	equ	0xFD9
  1853                           status	equ	0xFD8
  1854                           
  1855 ;; *************** function _initLCD *****************
  1856 ;; Defined at:
  1857 ;;		line 38 in file "LCD.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;		None
  1862 ;; Return value:  Size  Location     Type
  1863 ;;		None               void
  1864 ;; Registers used:
  1865 ;;		wreg, status,2, status,0, cstack
  1866 ;; Tracked objects:
  1867 ;;		On entry : 0/0
  1868 ;;		On exit  : 0/0
  1869 ;;		Unchanged: 0/0
  1870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1871 ;;      Params:         0       0       0       0
  1872 ;;      Locals:         0       0       0       0
  1873 ;;      Temps:          1       0       0       0
  1874 ;;      Totals:         1       0       0       0
  1875 ;;Total ram usage:        1 bytes
  1876 ;; Hardware stack levels used:    1
  1877 ;; Hardware stack levels required when called:    6
  1878 ;; This function calls:
  1879 ;;		_LCDout
  1880 ;;		_SendLCD
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text3
  1887  001176                     __ptext3:
  1888                           	opt stack 0
  1889  001176                     _initLCD:
  1890                           	opt stack 24
  1891                           
  1892                           ;LCD.c: 44: TRISAbits.RA6=0;
  1893                           
  1894                           ;incstack = 0
  1895  001176  9C92               	bcf	3986,6,c	;volatile
  1896                           
  1897                           ;LCD.c: 45: TRISCbits.RC0=0;
  1898  001178  9094               	bcf	3988,0,c	;volatile
  1899                           
  1900                           ;LCD.c: 46: TRISCbits.RC1=0;
  1901  00117A  9294               	bcf	3988,1,c	;volatile
  1902                           
  1903                           ;LCD.c: 47: TRISCbits.RC2=0;
  1904  00117C  9494               	bcf	3988,2,c	;volatile
  1905                           
  1906                           ;LCD.c: 48: TRISDbits.RD0=0;
  1907  00117E  9095               	bcf	3989,0,c	;volatile
  1908                           
  1909                           ;LCD.c: 49: TRISDbits.RD1=0;
  1910  001180  9295               	bcf	3989,1,c	;volatile
  1911                           
  1912                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1913  001182  0E27               	movlw	39
  1914  001184  6E2A               	movwf	??_initLCD& (0+255),c
  1915  001186  0EF5               	movlw	245
  1916  001188                     u2857:
  1917  001188  2EE8               	decfsz	wreg,f,c
  1918  00118A  D7FE               	goto	u2857
  1919  00118C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1920  00118E  D7FC               	goto	u2857
  1921  001190  F000               	nop	
  1922                           
  1923                           ;LCD.c: 52: LCDout(0b0011);
  1924  001192  0E03               	movlw	3
  1925  001194  EC58  F008         	call	_LCDout
  1926                           
  1927                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1928  001198  0E0D               	movlw	13
  1929  00119A  6E2A               	movwf	??_initLCD& (0+255),c
  1930  00119C  0EFC               	movlw	252
  1931  00119E                     u2867:
  1932  00119E  2EE8               	decfsz	wreg,f,c
  1933  0011A0  D7FE               	goto	u2867
  1934  0011A2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1935  0011A4  D7FC               	goto	u2867
  1936                           
  1937                           ;LCD.c: 54: LCDout(0b0011);
  1938  0011A6  0E03               	movlw	3
  1939  0011A8  EC58  F008         	call	_LCDout
  1940                           
  1941                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1942  0011AC  0E85               	movlw	133
  1943  0011AE                     u2877:
  1944  0011AE  2EE8               	decfsz	wreg,f,c
  1945  0011B0  D7FE               	goto	u2877
  1946  0011B2  F000               	nop	
  1947                           
  1948                           ;LCD.c: 56: LCDout(0b0011);
  1949  0011B4  0E03               	movlw	3
  1950  0011B6  EC58  F008         	call	_LCDout
  1951                           
  1952                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1953  0011BA  0E21               	movlw	33
  1954  0011BC                     u2887:
  1955  0011BC  2EE8               	decfsz	wreg,f,c
  1956  0011BE  D7FE               	goto	u2887
  1957  0011C0  F000               	nop	
  1958                           
  1959                           ;LCD.c: 58: LCDout(0b0010);
  1960  0011C2  0E02               	movlw	2
  1961  0011C4  EC58  F008         	call	_LCDout
  1962                           
  1963                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1964  0011C8  0E21               	movlw	33
  1965  0011CA                     u2897:
  1966  0011CA  2EE8               	decfsz	wreg,f,c
  1967  0011CC  D7FE               	goto	u2897
  1968  0011CE  F000               	nop	
  1969                           
  1970                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1971  0011D0  0E00               	movlw	0
  1972  0011D2  6E28               	movwf	SendLCD@type,c
  1973  0011D4  0E28               	movlw	40
  1974  0011D6  EC49  F00C         	call	_SendLCD
  1975                           
  1976                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1977  0011DA  0E21               	movlw	33
  1978  0011DC                     u2907:
  1979  0011DC  2EE8               	decfsz	wreg,f,c
  1980  0011DE  D7FE               	goto	u2907
  1981  0011E0  F000               	nop	
  1982                           
  1983                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1984  0011E2  0E00               	movlw	0
  1985  0011E4  6E28               	movwf	SendLCD@type,c
  1986  0011E6  0E08               	movlw	8
  1987  0011E8  EC49  F00C         	call	_SendLCD
  1988                           
  1989                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1990  0011EC  0E21               	movlw	33
  1991  0011EE                     u2917:
  1992  0011EE  2EE8               	decfsz	wreg,f,c
  1993  0011F0  D7FE               	goto	u2917
  1994  0011F2  F000               	nop	
  1995                           
  1996                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1997  0011F4  0E00               	movlw	0
  1998  0011F6  6E28               	movwf	SendLCD@type,c
  1999  0011F8  0E01               	movlw	1
  2000  0011FA  EC49  F00C         	call	_SendLCD
  2001                           
  2002                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2003  0011FE  0E0D               	movlw	13
  2004  001200  6E2A               	movwf	??_initLCD& (0+255),c
  2005  001202  0EFC               	movlw	252
  2006  001204                     u2927:
  2007  001204  2EE8               	decfsz	wreg,f,c
  2008  001206  D7FE               	goto	u2927
  2009  001208  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2010  00120A  D7FC               	goto	u2927
  2011                           
  2012                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2013  00120C  0E00               	movlw	0
  2014  00120E  6E28               	movwf	SendLCD@type,c
  2015  001210  0E06               	movlw	6
  2016  001212  EC49  F00C         	call	_SendLCD
  2017                           
  2018                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2019  001216  0E21               	movlw	33
  2020  001218                     u2937:
  2021  001218  2EE8               	decfsz	wreg,f,c
  2022  00121A  D7FE               	goto	u2937
  2023  00121C  F000               	nop	
  2024                           
  2025                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2026  00121E  0E00               	movlw	0
  2027  001220  6E28               	movwf	SendLCD@type,c
  2028  001222  0E0C               	movlw	12
  2029  001224  EC49  F00C         	call	_SendLCD
  2030                           
  2031                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2032  001228  0E21               	movlw	33
  2033  00122A                     u2947:
  2034  00122A  2EE8               	decfsz	wreg,f,c
  2035  00122C  D7FE               	goto	u2947
  2036  00122E  F000               	nop	
  2037  001230  0012               	return		;funcret
  2038  001232                     __end_of_initLCD:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           prodh	equ	0xFF4
  2042                           prodl	equ	0xFF3
  2043                           intcon	equ	0xFF2
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           indf1	equ	0xFE7
  2047                           fsr1h	equ	0xFE2
  2048                           fsr1l	equ	0xFE1
  2049                           indf2	equ	0xFDF
  2050                           fsr2h	equ	0xFDA
  2051                           fsr2l	equ	0xFD9
  2052                           status	equ	0xFD8
  2053                           
  2054 ;; *************** function _initIR *****************
  2055 ;; Defined at:
  2056 ;;		line 30 in file "IR_Reading.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;		None
  2061 ;; Return value:  Size  Location     Type
  2062 ;;		None               void
  2063 ;; Registers used:
  2064 ;;		wreg, status,2
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2070 ;;      Params:         0       0       0       0
  2071 ;;      Locals:         0       0       0       0
  2072 ;;      Temps:          0       0       0       0
  2073 ;;      Totals:         0       0       0       0
  2074 ;;Total ram usage:        0 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    3
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_main
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text4
  2085  001938                     __ptext4:
  2086                           	opt stack 0
  2087  001938                     _initIR:
  2088                           	opt stack 27
  2089                           
  2090                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2091                           
  2092                           ;incstack = 0
  2093  001938  9489               	bcf	3977,2,c	;volatile
  2094                           
  2095                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2096  00193A  9689               	bcf	3977,3,c	;volatile
  2097                           
  2098                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2099  00193C  8492               	bsf	3986,2,c	;volatile
  2100                           
  2101                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2102  00193E  8692               	bsf	3986,3,c	;volatile
  2103                           
  2104                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2105  001940  94B8               	bcf	4024,2,c	;volatile
  2106                           
  2107                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2108  001942  96B8               	bcf	4024,3,c	;volatile
  2109                           
  2110                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2111  001944  9CB8               	bcf	4024,6,c	;volatile
  2112                           
  2113                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2114  001946  9EB8               	bcf	4024,7,c	;volatile
  2115                           
  2116                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2117  001948  0E06               	movlw	6
  2118  00194A  6E63               	movwf	3939,c	;volatile
  2119                           
  2120                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2121  00194C  0E06               	movlw	6
  2122  00194E  6E62               	movwf	3938,c	;volatile
  2123                           
  2124                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2125  001950  9096               	bcf	3990,0,c	;volatile
  2126                           
  2127                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2128  001952  9296               	bcf	3990,1,c	;volatile
  2129                           
  2130                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2131  001954  0E59               	movlw	89
  2132  001956  6EB7               	movwf	4023,c	;volatile
  2133  001958  0012               	return		;funcret
  2134  00195A                     __end_of_initIR:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           intcon	equ	0xFF2
  2140                           postinc0	equ	0xFEE
  2141                           wreg	equ	0xFE8
  2142                           indf1	equ	0xFE7
  2143                           fsr1h	equ	0xFE2
  2144                           fsr1l	equ	0xFE1
  2145                           indf2	equ	0xFDF
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _fullSpeedBack *****************
  2151 ;; Defined at:
  2152 ;;		line 125 in file "dc_motor.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2155 ;;		 -> main@mL(9), 
  2156 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2157 ;;		 -> main@mR(9), 
  2158 ;;  power           1   11[BANK0 ] unsigned char 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;		None
  2161 ;; Return value:  Size  Location     Type
  2162 ;;		None               void
  2163 ;; Registers used:
  2164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2170 ;;      Params:         0       5       0       0
  2171 ;;      Locals:         0       0       0       0
  2172 ;;      Temps:          0       0       0       0
  2173 ;;      Totals:         0       5       0       0
  2174 ;;Total ram usage:        5 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    6
  2177 ;; This function calls:
  2178 ;;		_fullSpeedAhead
  2179 ;; This function is called by:
  2180 ;;		_main
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text5
  2185  001782                     __ptext5:
  2186                           	opt stack 0
  2187  001782                     _fullSpeedBack:
  2188                           	opt stack 24
  2189                           
  2190                           ;dc_motor.c: 128: mL->direction=0;
  2191                           
  2192                           ;incstack = 0
  2193  001782  0100               	movlb	0	; () banked
  2194  001784  EE20 F001          	lfsr	2,1
  2195  001788  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2196  00178A  26D9               	addwf	fsr2l,f,c
  2197  00178C  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2198  00178E  22DA               	addwfc	fsr2h,f,c
  2199  001790  0E00               	movlw	0
  2200  001792  6EDF               	movwf	indf2,c
  2201                           
  2202                           ;dc_motor.c: 129: mR->direction=0;
  2203  001794  0100               	movlb	0	; () banked
  2204  001796  EE20 F001          	lfsr	2,1
  2205  00179A  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2206  00179C  26D9               	addwf	fsr2l,f,c
  2207  00179E  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2208  0017A0  22DA               	addwfc	fsr2h,f,c
  2209  0017A2  0E00               	movlw	0
  2210  0017A4  6EDF               	movwf	indf2,c
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2214  0017A6  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2215  0017AA  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2216  0017AE  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2217  0017B2  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2218  0017B6  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2219  0017BA  EC44  F00A         	call	_fullSpeedAhead	;wreg free
  2220  0017BE  0012               	return		;funcret
  2221  0017C0                     __end_of_fullSpeedBack:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           prodh	equ	0xFF4
  2225                           prodl	equ	0xFF3
  2226                           intcon	equ	0xFF2
  2227                           postinc0	equ	0xFEE
  2228                           wreg	equ	0xFE8
  2229                           indf1	equ	0xFE7
  2230                           fsr1h	equ	0xFE2
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           fsr2h	equ	0xFDA
  2234                           fsr2l	equ	0xFD9
  2235                           status	equ	0xFD8
  2236                           
  2237 ;; *************** function _enableSensor *****************
  2238 ;; Defined at:
  2239 ;;		line 106 in file "IR_Reading.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  sensor          1    wreg     unsigned char 
  2242 ;;  status          1   35[COMRAM] unsigned char 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  sensor          1   36[COMRAM] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;		None               void
  2247 ;; Registers used:
  2248 ;;		wreg, status,2, status,0
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2254 ;;      Params:         1       0       0       0
  2255 ;;      Locals:         1       0       0       0
  2256 ;;      Temps:          0       0       0       0
  2257 ;;      Totals:         2       0       0       0
  2258 ;;Total ram usage:        2 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    3
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_main
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text6
  2269  0018EC                     __ptext6:
  2270                           	opt stack 0
  2271  0018EC                     _enableSensor:
  2272                           	opt stack 27
  2273                           
  2274                           ;incstack = 0
  2275                           ;enableSensor@sensor stored from wreg
  2276  0018EC  6E25               	movwf	enableSensor@sensor,c
  2277                           
  2278                           ;IR_Reading.c: 108: if (sensor==0){
  2279  0018EE  5025               	movf	enableSensor@sensor,w,c
  2280  0018F0  A4D8               	btfss	status,2,c
  2281  0018F2  D006               	goto	l2314
  2282                           
  2283                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2284  0018F4  B024               	btfsc	enableSensor@status,0,c
  2285  0018F6  D002               	bra	u1775
  2286  0018F8  908D               	bcf	3981,0,c	;volatile
  2287  0018FA  D001               	bra	u1776
  2288  0018FC                     u1775:
  2289  0018FC  808D               	bsf	3981,0,c	;volatile
  2290  0018FE                     u1776:
  2291                           
  2292                           ;IR_Reading.c: 110: } else if (sensor==1){
  2293  0018FE  0012               	return	
  2294  001900                     l2314:
  2295  001900  0425               	decf	enableSensor@sensor,w,c
  2296  001902  A4D8               	btfss	status,2,c
  2297  001904  0012               	return	
  2298                           
  2299                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2300  001906  B024               	btfsc	enableSensor@status,0,c
  2301  001908  D002               	bra	u1795
  2302  00190A  928D               	bcf	3981,1,c	;volatile
  2303  00190C  D001               	bra	u1796
  2304  00190E                     u1795:
  2305  00190E  828D               	bsf	3981,1,c	;volatile
  2306  001910                     u1796:
  2307  001910  0012               	return	
  2308  001912                     __end_of_enableSensor:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           prodh	equ	0xFF4
  2312                           prodl	equ	0xFF3
  2313                           intcon	equ	0xFF2
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           indf1	equ	0xFE7
  2317                           fsr1h	equ	0xFE2
  2318                           fsr1l	equ	0xFE1
  2319                           indf2	equ	0xFDF
  2320                           fsr2h	equ	0xFDA
  2321                           fsr2l	equ	0xFD9
  2322                           status	equ	0xFD8
  2323                           
  2324 ;; *************** function _VerifySignal *****************
  2325 ;; Defined at:
  2326 ;;		line 55 in file "RFID_Reader.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2329 ;;		 -> ReceivedString(16), 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  hexByte         2   44[COMRAM] unsigned int 
  2332 ;;  i               1   46[COMRAM] unsigned char 
  2333 ;;  checksum        1   43[COMRAM] unsigned char 
  2334 ;; Return value:  Size  Location     Type
  2335 ;;                  1    wreg      unsigned char 
  2336 ;; Registers used:
  2337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2338 ;; Tracked objects:
  2339 ;;		On entry : 0/0
  2340 ;;		On exit  : 0/0
  2341 ;;		Unchanged: 0/0
  2342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2343 ;;      Params:         2       0       0       0
  2344 ;;      Locals:         4       0       0       0
  2345 ;;      Temps:          6       0       0       0
  2346 ;;      Totals:        12       0       0       0
  2347 ;;Total ram usage:       12 bytes
  2348 ;; Hardware stack levels used:    1
  2349 ;; Hardware stack levels required when called:    3
  2350 ;; This function calls:
  2351 ;;		Nothing
  2352 ;; This function is called by:
  2353 ;;		_main
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text7
  2358  001232                     __ptext7:
  2359                           	opt stack 0
  2360  001232                     _VerifySignal:
  2361                           	opt stack 27
  2362                           
  2363                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2364                           
  2365                           ;incstack = 0
  2366  001232  0E00               	movlw	0
  2367  001234  6E2C               	movwf	VerifySignal@checksum,c
  2368                           
  2369                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2370  001236  0E00               	movlw	0
  2371  001238  6E2E               	movwf	VerifySignal@hexByte+1,c
  2372  00123A  0E00               	movlw	0
  2373  00123C  6E2D               	movwf	VerifySignal@hexByte,c
  2374                           
  2375                           ;RFID_Reader.c: 58: unsigned char i=0;
  2376  00123E  0E00               	movlw	0
  2377  001240  6E2F               	movwf	VerifySignal@i,c
  2378                           
  2379                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2380  001242  EE20 F004          	lfsr	2,4
  2381  001246  5024               	movf	VerifySignal@Signal,w,c
  2382  001248  26D9               	addwf	fsr2l,f,c
  2383  00124A  5025               	movf	VerifySignal@Signal+1,w,c
  2384  00124C  22DA               	addwfc	fsr2h,f,c
  2385  00124E  50DF               	movf	indf2,w,c
  2386  001250  6E26               	movwf	??_VerifySignal& (0+255),c
  2387  001252  EE20 F003          	lfsr	2,3
  2388  001256  5024               	movf	VerifySignal@Signal,w,c
  2389  001258  26D9               	addwf	fsr2l,f,c
  2390  00125A  5025               	movf	VerifySignal@Signal+1,w,c
  2391  00125C  22DA               	addwfc	fsr2h,f,c
  2392  00125E  50DF               	movf	indf2,w,c
  2393  001260  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2394  001262  5027               	movf	??_VerifySignal+1,w,c
  2395  001264  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2396  001266  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2397  001268  5026               	movf	??_VerifySignal,w,c
  2398  00126A  2428               	addwf	??_VerifySignal+2,w,c
  2399  00126C  6E2D               	movwf	VerifySignal@hexByte,c
  2400  00126E  0E00               	movlw	0
  2401  001270  2029               	addwfc	??_VerifySignal+3,w,c
  2402  001272  6E2E               	movwf	VerifySignal@hexByte+1,c
  2403                           
  2404                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2405  001274  EE20 F002          	lfsr	2,2
  2406  001278  5024               	movf	VerifySignal@Signal,w,c
  2407  00127A  26D9               	addwf	fsr2l,f,c
  2408  00127C  5025               	movf	VerifySignal@Signal+1,w,c
  2409  00127E  22DA               	addwfc	fsr2h,f,c
  2410  001280  50DF               	movf	indf2,w,c
  2411  001282  182D               	xorwf	VerifySignal@hexByte,w,c
  2412  001284  6E2C               	movwf	VerifySignal@checksum,c
  2413                           
  2414                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2415  001286  0E05               	movlw	5
  2416  001288  6E2F               	movwf	VerifySignal@i,c
  2417  00128A                     l2520:
  2418  00128A  0E09               	movlw	9
  2419  00128C  642F               	cpfsgt	VerifySignal@i,c
  2420  00128E  D001               	goto	l2524
  2421  001290  D028               	goto	l2532
  2422  001292                     l2524:
  2423                           
  2424                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2425  001292  502F               	movf	VerifySignal@i,w,c
  2426  001294  6E26               	movwf	??_VerifySignal& (0+255),c
  2427  001296  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2428  001298  0E01               	movlw	1
  2429  00129A  2626               	addwf	??_VerifySignal,f,c
  2430  00129C  0E00               	movlw	0
  2431  00129E  2227               	addwfc	??_VerifySignal+1,f,c
  2432  0012A0  5026               	movf	??_VerifySignal,w,c
  2433  0012A2  2424               	addwf	VerifySignal@Signal,w,c
  2434  0012A4  6ED9               	movwf	fsr2l,c
  2435  0012A6  5027               	movf	??_VerifySignal+1,w,c
  2436  0012A8  2025               	addwfc	VerifySignal@Signal+1,w,c
  2437  0012AA  6EDA               	movwf	fsr2h,c
  2438  0012AC  50DF               	movf	indf2,w,c
  2439  0012AE  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2440  0012B0  502F               	movf	VerifySignal@i,w,c
  2441  0012B2  0D01               	mullw	1
  2442  0012B4  50F3               	movf	prodl,w,c
  2443  0012B6  2424               	addwf	VerifySignal@Signal,w,c
  2444  0012B8  6ED9               	movwf	fsr2l,c
  2445  0012BA  50F4               	movf	prodh,w,c
  2446  0012BC  2025               	addwfc	VerifySignal@Signal+1,w,c
  2447  0012BE  6EDA               	movwf	fsr2h,c
  2448  0012C0  50DF               	movf	indf2,w,c
  2449  0012C2  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2450  0012C4  5029               	movf	??_VerifySignal+3,w,c
  2451  0012C6  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2452  0012C8  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2453  0012CA  5028               	movf	??_VerifySignal+2,w,c
  2454  0012CC  242A               	addwf	??_VerifySignal+4,w,c
  2455  0012CE  6E2D               	movwf	VerifySignal@hexByte,c
  2456  0012D0  0E00               	movlw	0
  2457  0012D2  202B               	addwfc	??_VerifySignal+5,w,c
  2458  0012D4  6E2E               	movwf	VerifySignal@hexByte+1,c
  2459                           
  2460                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2461  0012D6  502C               	movf	VerifySignal@checksum,w,c
  2462  0012D8  182D               	xorwf	VerifySignal@hexByte,w,c
  2463  0012DA  6E2C               	movwf	VerifySignal@checksum,c
  2464  0012DC  0E02               	movlw	2
  2465  0012DE  262F               	addwf	VerifySignal@i,f,c
  2466  0012E0  D7D4               	goto	l2520
  2467  0012E2                     l2532:
  2468                           
  2469                           ;RFID_Reader.c: 68: }
  2470                           ;RFID_Reader.c: 71: return 1;
  2471  0012E2  0E01               	movlw	1
  2472  0012E4  0012               	return	
  2473  0012E6                     __end_of_VerifySignal:
  2474                           	opt stack 0
  2475                           tblptru	equ	0xFF8
  2476                           prodh	equ	0xFF4
  2477                           prodl	equ	0xFF3
  2478                           intcon	equ	0xFF2
  2479                           postinc0	equ	0xFEE
  2480                           wreg	equ	0xFE8
  2481                           indf1	equ	0xFE7
  2482                           fsr1h	equ	0xFE2
  2483                           fsr1l	equ	0xFE1
  2484                           indf2	equ	0xFDF
  2485                           fsr2h	equ	0xFDA
  2486                           fsr2l	equ	0xFD9
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _ScanWithRange *****************
  2490 ;; Defined at:
  2491 ;;		line 77 in file "Movement.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2494 ;;		 -> main@mL(9), 
  2495 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2496 ;;		 -> main@mR(9), 
  2497 ;;  milliseconds    2   17[BANK0 ] int 
  2498 ;;  TurnDirectio    1   19[BANK0 ] unsigned char 
  2499 ;;  MoveTimeEntr    2   20[BANK0 ] PTR unsigned char 
  2500 ;;		 -> main@MoveTime(100), 
  2501 ;; Auto vars:     Size  Location     Type
  2502 ;;  buf            40   24[BANK0 ] unsigned char [40]
  2503 ;;  SensorResult    4   69[BANK0 ] unsigned int [2]
  2504 ;;  n               2   73[BANK0 ] unsigned int 
  2505 ;;  DirectionFou    2   66[BANK0 ] const unsigned int 
  2506 ;;  i               2   64[BANK0 ] unsigned int 
  2507 ;;  RightFlag       1   76[BANK0 ] unsigned char 
  2508 ;;  LeftFlag        1   75[BANK0 ] unsigned char 
  2509 ;;  FlagCounter     1   68[BANK0 ] unsigned char 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      unsigned char 
  2512 ;; Registers used:
  2513 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2519 ;;      Params:         0       9       0       0
  2520 ;;      Locals:         0      53       0       0
  2521 ;;      Temps:          0       2       0       0
  2522 ;;      Totals:         0      64       0       0
  2523 ;;Total ram usage:       64 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    7
  2526 ;; This function calls:
  2527 ;;		_LCD_String
  2528 ;;		_SendLCD
  2529 ;;		_SetLine
  2530 ;;		_delay_tenth_s
  2531 ;;		_grabLeftIR
  2532 ;;		_grabRightIR
  2533 ;;		_sprintf
  2534 ;;		_stop
  2535 ;;		_turnLeft
  2536 ;;		_turnRight
  2537 ;; This function is called by:
  2538 ;;		_main
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text8
  2543  000B78                     __ptext8:
  2544                           	opt stack 0
  2545  000B78                     _ScanWithRange:
  2546                           	opt stack 23
  2547                           
  2548                           ;Movement.c: 80: unsigned int SensorResult[2]={0,0};
  2549                           
  2550                           ;incstack = 0
  2551  000B78  C0BC  F0A5         	movff	ScanWithRange@F3893,ScanWithRange@SensorResult
  2552  000B7C  C0BD  F0A6         	movff	ScanWithRange@F3893+1,ScanWithRange@SensorResult+1
  2553  000B80  C0BE  F0A7         	movff	ScanWithRange@F3893+2,ScanWithRange@SensorResult+2
  2554  000B84  C0BF  F0A8         	movff	ScanWithRange@F3893+3,ScanWithRange@SensorResult+3
  2555                           
  2556                           ;Movement.c: 81: unsigned char LeftFlag=0;
  2557  000B88  0E00               	movlw	0
  2558  000B8A  0100               	movlb	0	; () banked
  2559  000B8C  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2560                           
  2561                           ;Movement.c: 82: unsigned char RightFlag=0;
  2562  000B8E  0E00               	movlw	0
  2563  000B90  0100               	movlb	0	; () banked
  2564  000B92  6FAC               	movwf	ScanWithRange@RightFlag& (0+255),b
  2565                           
  2566                           ;Movement.c: 83: char buf[40];
  2567                           ;Movement.c: 84: unsigned int i=0;
  2568  000B94  0E00               	movlw	0
  2569  000B96  0100               	movlb	0	; () banked
  2570  000B98  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2571  000B9A  0E00               	movlw	0
  2572  000B9C  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2573                           
  2574                           ;Movement.c: 85: unsigned int n=0;
  2575  000B9E  0E00               	movlw	0
  2576  000BA0  0100               	movlb	0	; () banked
  2577  000BA2  6FAA               	movwf	(ScanWithRange@n+1)& (0+255),b
  2578  000BA4  0E00               	movlw	0
  2579  000BA6  6FA9               	movwf	ScanWithRange@n& (0+255),b
  2580                           
  2581                           ;Movement.c: 86: unsigned char FlagCounter=0;
  2582  000BA8  0E00               	movlw	0
  2583  000BAA  0100               	movlb	0	; () banked
  2584  000BAC  6FA4               	movwf	ScanWithRange@FlagCounter& (0+255),b
  2585                           
  2586                           ;Movement.c: 89: const unsigned int DirectionFoundThreshold=4000;
  2587  000BAE  0E0F               	movlw	15
  2588  000BB0  0100               	movlb	0	; () banked
  2589  000BB2  6FA3               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2590  000BB4  0EA0               	movlw	160
  2591  000BB6  6FA2               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;Movement.c: 98: turnLeft(mL,mR, 100);
  2595  000BB8  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2596  000BBC  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2597  000BC0  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2598  000BC4  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2599  000BC8  0E64               	movlw	100
  2600  000BCA  0100               	movlb	0	; () banked
  2601  000BCC  6F6B               	movwf	turnLeft@power& (0+255),b
  2602  000BCE  EC4E  F00B         	call	_turnLeft	;wreg free
  2603                           
  2604                           ;Movement.c: 99: delay_tenth_s(5);
  2605  000BD2  0E05               	movlw	5
  2606  000BD4  ECE0  F00B         	call	_delay_tenth_s
  2607                           
  2608                           ;Movement.c: 100: stop(mL,mR);
  2609  000BD8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2610  000BDC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2611  000BE0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2612  000BE4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2613  000BE8  EC73  F009         	call	_stop	;wreg free
  2614                           
  2615                           ;Movement.c: 103: TurnDirection=0;
  2616  000BEC  0E00               	movlw	0
  2617  000BEE  0100               	movlb	0	; () banked
  2618  000BF0  6F73               	movwf	ScanWithRange@TurnDirection& (0+255),b
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;Movement.c: 104: for (i=1; i<=milliseconds; i++) {
  2622  000BF2  0E00               	movlw	0
  2623  000BF4  0100               	movlb	0	; () banked
  2624  000BF6  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2625  000BF8  0E01               	movlw	1
  2626  000BFA  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2627  000BFC  D119               	goto	l3138
  2628  000BFE                     l3056:
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;Movement.c: 107: SensorResult[0]=grabLeftIR();
  2632  000BFE  ECBD  F00A         	call	_grabLeftIR	;wreg free
  2633  000C02  C024  F0A5         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2634  000C06  C025  F0A6         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2635                           
  2636                           ;Movement.c: 108: SensorResult[1]=grabRightIR();
  2637  000C0A  EC84  F00A         	call	_grabRightIR	;wreg free
  2638  000C0E  C024  F0A7         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2639  000C12  C025  F0A8         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2640                           
  2641                           ;Movement.c: 112: CAP1BUFH=0;
  2642  000C16  0E00               	movlw	0
  2643  000C18  6E69               	movwf	3945,c	;volatile
  2644                           
  2645                           ;Movement.c: 113: CAP1BUFL=0;
  2646  000C1A  0E00               	movlw	0
  2647  000C1C  6E68               	movwf	3944,c	;volatile
  2648                           
  2649                           ;Movement.c: 114: CAP2BUFH=0;
  2650  000C1E  0E00               	movlw	0
  2651  000C20  6E67               	movwf	3943,c	;volatile
  2652                           
  2653                           ;Movement.c: 115: CAP2BUFL=0;
  2654  000C22  0E00               	movlw	0
  2655  000C24  6E66               	movwf	3942,c	;volatile
  2656                           
  2657                           ;Movement.c: 118: SendLCD(0b00000001,0);
  2658  000C26  0E00               	movlw	0
  2659  000C28  6E28               	movwf	SendLCD@type,c
  2660  000C2A  0E01               	movlw	1
  2661  000C2C  EC49  F00C         	call	_SendLCD
  2662                           
  2663                           ;Movement.c: 119: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2664  000C30  0E21               	movlw	33
  2665  000C32                     u2957:
  2666  000C32  2EE8               	decfsz	wreg,f,c
  2667  000C34  D7FE               	goto	u2957
  2668  000C36  F000               	nop	
  2669                           
  2670                           ;Movement.c: 120: SendLCD(0b00000010,0);
  2671  000C38  0E00               	movlw	0
  2672  000C3A  6E28               	movwf	SendLCD@type,c
  2673  000C3C  0E02               	movlw	2
  2674  000C3E  EC49  F00C         	call	_SendLCD
  2675                           
  2676                           ;Movement.c: 121: _delay((unsigned long)((2)*(8000000/4000.0)));
  2677  000C42  0E06               	movlw	6
  2678  000C44  0100               	movlb	0	; () banked
  2679  000C46  6F76               	movwf	??_ScanWithRange& (0+255),b
  2680  000C48  0E30               	movlw	48
  2681  000C4A                     u2967:
  2682  000C4A  2EE8               	decfsz	wreg,f,c
  2683  000C4C  D7FE               	goto	u2967
  2684  000C4E  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2685  000C50  D7FC               	goto	u2967
  2686  000C52  D000               	nop2	
  2687                           
  2688                           ;Movement.c: 122: SetLine(1);
  2689  000C54  0E01               	movlw	1
  2690  000C56  EC31  F00C         	call	_SetLine
  2691                           
  2692                           ;Movement.c: 123: LCD_String("     ScanIR");
  2693  000C5A  0E39               	movlw	low STR_1
  2694  000C5C  6E2A               	movwf	LCD_String@string,c
  2695  000C5E  0E03               	movlw	high STR_1
  2696  000C60  6E2B               	movwf	LCD_String@string+1,c
  2697  000C62  ECF6  F00A         	call	_LCD_String	;wreg free
  2698                           
  2699                           ;Movement.c: 124: SetLine(2);
  2700  000C66  0E02               	movlw	2
  2701  000C68  EC31  F00C         	call	_SetLine
  2702                           
  2703                           ;Movement.c: 125: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2704  000C6C  0E78               	movlw	low ScanWithRange@buf
  2705  000C6E  6E30               	movwf	sprintf@sp,c
  2706  000C70  0E00               	movlw	high ScanWithRange@buf
  2707  000C72  6E31               	movwf	sprintf@sp+1,c
  2708  000C74  0E0C               	movlw	low (STR_6+1)
  2709  000C76  6E32               	movwf	sprintf@f,c
  2710  000C78  0E03               	movlw	high (STR_6+1)
  2711  000C7A  6E33               	movwf	sprintf@f+1,c
  2712  000C7C  C0A5  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2713  000C80  C0A6  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2714  000C84  C0A7  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2715  000C88  C0A8  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2716  000C8C  EC39  F004         	call	_sprintf	;wreg free
  2717                           
  2718                           ;Movement.c: 126: LCD_String(buf);
  2719  000C90  0E78               	movlw	low ScanWithRange@buf
  2720  000C92  6E2A               	movwf	LCD_String@string,c
  2721  000C94  0E00               	movlw	high ScanWithRange@buf
  2722  000C96  6E2B               	movwf	LCD_String@string+1,c
  2723  000C98  ECF6  F00A         	call	_LCD_String	;wreg free
  2724                           
  2725                           ;Movement.c: 129: turnRight(mL,mR, 100);
  2726  000C9C  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2727  000CA0  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2728  000CA4  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2729  000CA8  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2730  000CAC  0E64               	movlw	100
  2731  000CAE  0100               	movlb	0	; () banked
  2732  000CB0  6F6B               	movwf	turnRight@power& (0+255),b
  2733  000CB2  EC25  F00B         	call	_turnRight	;wreg free
  2734                           
  2735                           ;Movement.c: 130: _delay((unsigned long)((1)*(8000000/4000.0)));
  2736  000CB6  0E03               	movlw	3
  2737  000CB8  0100               	movlb	0	; () banked
  2738  000CBA  6F76               	movwf	??_ScanWithRange& (0+255),b
  2739  000CBC  0E98               	movlw	152
  2740  000CBE                     u2977:
  2741  000CBE  2EE8               	decfsz	wreg,f,c
  2742  000CC0  D7FE               	goto	u2977
  2743  000CC2  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2744  000CC4  D7FC               	goto	u2977
  2745                           
  2746                           ;Movement.c: 131: stop(mL,mR);
  2747  000CC6  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2748  000CCA  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2749  000CCE  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2750  000CD2  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2751  000CD6  EC73  F009         	call	_stop	;wreg free
  2752                           
  2753                           ;Movement.c: 133: if (SensorResult[1]>DirectionFoundThreshold) {
  2754  000CDA  0100               	movlb	0	; () banked
  2755  000CDC  51A7               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2756  000CDE  0100               	movlb	0	; () banked
  2757  000CE0  5DA2               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2758  000CE2  0100               	movlb	0	; () banked
  2759  000CE4  51A8               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2760  000CE6  0100               	movlb	0	; () banked
  2761  000CE8  59A3               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2762  000CEA  B0D8               	btfsc	status,0,c
  2763  000CEC  D003               	goto	l3090
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;Movement.c: 134: RightFlag=1;
  2767  000CEE  0E01               	movlw	1
  2768  000CF0  0100               	movlb	0	; () banked
  2769  000CF2  6FAC               	movwf	ScanWithRange@RightFlag& (0+255),b
  2770  000CF4                     l3090:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;Movement.c: 135: }
  2774                           ;Movement.c: 137: if (SensorResult[0]>DirectionFoundThreshold) {
  2775  000CF4  0100               	movlb	0	; () banked
  2776  000CF6  51A5               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2777  000CF8  0100               	movlb	0	; () banked
  2778  000CFA  5DA2               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2779  000CFC  0100               	movlb	0	; () banked
  2780  000CFE  51A6               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2781  000D00  0100               	movlb	0	; () banked
  2782  000D02  59A3               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2783  000D04  B0D8               	btfsc	status,0,c
  2784  000D06  D003               	goto	l3094
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;Movement.c: 138: LeftFlag=1;
  2788  000D08  0E01               	movlw	1
  2789  000D0A  0100               	movlb	0	; () banked
  2790  000D0C  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2791  000D0E                     l3094:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;Movement.c: 139: }
  2795                           ;Movement.c: 142: if ((LeftFlag==1)||(RightFlag==1)) {
  2796  000D0E  0100               	movlb	0	; () banked
  2797  000D10  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2798  000D12  B4D8               	btfsc	status,2,c
  2799  000D14  D004               	goto	l3098
  2800                           
  2801                           ; BSR set to: 0
  2802  000D16  0100               	movlb	0	; () banked
  2803  000D18  05AC               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2804  000D1A  A4D8               	btfss	status,2,c
  2805  000D1C  D002               	goto	l3100
  2806  000D1E                     l3098:
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;Movement.c: 143: FlagCounter++;
  2810  000D1E  0100               	movlb	0	; () banked
  2811  000D20  2BA4               	incf	ScanWithRange@FlagCounter& (0+255),f,b
  2812  000D22                     l3100:
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;Movement.c: 144: }
  2816                           ;Movement.c: 148: if ((LeftFlag==1)&&(RightFlag==1)) {
  2817  000D22  0100               	movlb	0	; () banked
  2818  000D24  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2819  000D26  A4D8               	btfss	status,2,c
  2820  000D28  D03E               	goto	l3118
  2821                           
  2822                           ; BSR set to: 0
  2823  000D2A  0100               	movlb	0	; () banked
  2824  000D2C  05AC               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2825  000D2E  A4D8               	btfss	status,2,c
  2826  000D30  D03A               	goto	l3118
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;Movement.c: 149: for (n=1; n<=(FlagCounter>>1); n++) {
  2830  000D32  0E00               	movlw	0
  2831  000D34  0100               	movlb	0	; () banked
  2832  000D36  6FAA               	movwf	(ScanWithRange@n+1)& (0+255),b
  2833  000D38  0E01               	movlw	1
  2834  000D3A  6FA9               	movwf	ScanWithRange@n& (0+255),b
  2835  000D3C  D022               	goto	l216
  2836  000D3E                     l3106:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;Movement.c: 150: turnLeft(mL,mR, 100);
  2840  000D3E  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2841  000D42  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2842  000D46  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2843  000D4A  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2844  000D4E  0E64               	movlw	100
  2845  000D50  0100               	movlb	0	; () banked
  2846  000D52  6F6B               	movwf	turnLeft@power& (0+255),b
  2847  000D54  EC4E  F00B         	call	_turnLeft	;wreg free
  2848                           
  2849                           ;Movement.c: 151: _delay((unsigned long)((1)*(8000000/4000.0)));
  2850  000D58  0E03               	movlw	3
  2851  000D5A  0100               	movlb	0	; () banked
  2852  000D5C  6F76               	movwf	??_ScanWithRange& (0+255),b
  2853  000D5E  0E98               	movlw	152
  2854  000D60                     u2987:
  2855  000D60  2EE8               	decfsz	wreg,f,c
  2856  000D62  D7FE               	goto	u2987
  2857  000D64  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2858  000D66  D7FC               	goto	u2987
  2859                           
  2860                           ;Movement.c: 152: stop(mL,mR);
  2861  000D68  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2862  000D6C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2863  000D70  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2864  000D74  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2865  000D78  EC73  F009         	call	_stop	;wreg free
  2866  000D7C  0100               	movlb	0	; () banked
  2867  000D7E  4BA9               	infsnz	ScanWithRange@n& (0+255),f,b
  2868  000D80  2BAA               	incf	(ScanWithRange@n+1)& (0+255),f,b
  2869  000D82                     l216:
  2870                           
  2871                           ; BSR set to: 0
  2872  000D82  0100               	movlb	0	; () banked
  2873  000D84  90D8               	bcf	status,0,c
  2874  000D86  31A4               	rrcf	ScanWithRange@FlagCounter& (0+255),w,b
  2875  000D88  0100               	movlb	0	; () banked
  2876  000D8A  6F76               	movwf	??_ScanWithRange& (0+255),b
  2877  000D8C  6B77               	clrf	(??_ScanWithRange+1)& (0+255),b
  2878  000D8E  0100               	movlb	0	; () banked
  2879  000D90  51A9               	movf	ScanWithRange@n& (0+255),w,b
  2880  000D92  0100               	movlb	0	; () banked
  2881  000D94  5D76               	subwf	??_ScanWithRange& (0+255),w,b
  2882  000D96  0100               	movlb	0	; () banked
  2883  000D98  51AA               	movf	(ScanWithRange@n+1)& (0+255),w,b
  2884  000D9A  0100               	movlb	0	; () banked
  2885  000D9C  5977               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2886  000D9E  B0D8               	btfsc	status,0,c
  2887  000DA0  D7CE               	goto	l3106
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;Movement.c: 153: }
  2891                           ;Movement.c: 154: return 2;
  2892                           
  2893                           ; BSR set to: 0
  2894  000DA2  0E02               	movlw	2
  2895                           
  2896                           ; BSR set to: 0
  2897  000DA4  0012               	return	
  2898  000DA6                     l3118:
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;Movement.c: 155: }
  2902                           ;Movement.c: 158: if ((LeftFlag==1)&&(RightFlag==0)) {
  2903  000DA6  0100               	movlb	0	; () banked
  2904  000DA8  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2905  000DAA  A4D8               	btfss	status,2,c
  2906  000DAC  D03E               	goto	l3136
  2907                           
  2908                           ; BSR set to: 0
  2909  000DAE  0100               	movlb	0	; () banked
  2910  000DB0  51AC               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2911  000DB2  0100               	movlb	0	; () banked
  2912  000DB4  A4D8               	btfss	status,2,c
  2913  000DB6  D039               	goto	l3136
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;Movement.c: 159: for (n=1; n<=(FlagCounter); n++) {
  2917  000DB8  0E00               	movlw	0
  2918  000DBA  0100               	movlb	0	; () banked
  2919  000DBC  6FAA               	movwf	(ScanWithRange@n+1)& (0+255),b
  2920  000DBE  0E01               	movlw	1
  2921  000DC0  6FA9               	movwf	ScanWithRange@n& (0+255),b
  2922  000DC2  D022               	goto	l221
  2923  000DC4                     l3124:
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;Movement.c: 160: turnLeft(mL,mR, 100);
  2927  000DC4  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2928  000DC8  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2929  000DCC  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2930  000DD0  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2931  000DD4  0E64               	movlw	100
  2932  000DD6  0100               	movlb	0	; () banked
  2933  000DD8  6F6B               	movwf	turnLeft@power& (0+255),b
  2934  000DDA  EC4E  F00B         	call	_turnLeft	;wreg free
  2935                           
  2936                           ;Movement.c: 161: _delay((unsigned long)((1)*(8000000/4000.0)));
  2937  000DDE  0E03               	movlw	3
  2938  000DE0  0100               	movlb	0	; () banked
  2939  000DE2  6F76               	movwf	??_ScanWithRange& (0+255),b
  2940  000DE4  0E98               	movlw	152
  2941  000DE6                     u2997:
  2942  000DE6  2EE8               	decfsz	wreg,f,c
  2943  000DE8  D7FE               	goto	u2997
  2944  000DEA  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2945  000DEC  D7FC               	goto	u2997
  2946                           
  2947                           ;Movement.c: 162: stop(mL,mR);
  2948  000DEE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2949  000DF2  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2950  000DF6  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2951  000DFA  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2952  000DFE  EC73  F009         	call	_stop	;wreg free
  2953  000E02  0100               	movlb	0	; () banked
  2954  000E04  4BA9               	infsnz	ScanWithRange@n& (0+255),f,b
  2955  000E06  2BAA               	incf	(ScanWithRange@n+1)& (0+255),f,b
  2956  000E08                     l221:
  2957                           
  2958                           ; BSR set to: 0
  2959  000E08  0100               	movlb	0	; () banked
  2960  000E0A  51A4               	movf	ScanWithRange@FlagCounter& (0+255),w,b
  2961  000E0C  0100               	movlb	0	; () banked
  2962  000E0E  6F76               	movwf	??_ScanWithRange& (0+255),b
  2963  000E10  6B77               	clrf	(??_ScanWithRange+1)& (0+255),b
  2964  000E12  0100               	movlb	0	; () banked
  2965  000E14  51A9               	movf	ScanWithRange@n& (0+255),w,b
  2966  000E16  0100               	movlb	0	; () banked
  2967  000E18  5D76               	subwf	??_ScanWithRange& (0+255),w,b
  2968  000E1A  0100               	movlb	0	; () banked
  2969  000E1C  51AA               	movf	(ScanWithRange@n+1)& (0+255),w,b
  2970  000E1E  0100               	movlb	0	; () banked
  2971  000E20  5977               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2972  000E22  B0D8               	btfsc	status,0,c
  2973  000E24  D7CF               	goto	l3124
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;Movement.c: 163: }
  2977                           ;Movement.c: 164: return 2;
  2978                           
  2979                           ; BSR set to: 0
  2980  000E26  0E02               	movlw	2
  2981                           
  2982                           ; BSR set to: 0
  2983  000E28  0012               	return	
  2984  000E2A                     l3136:
  2985                           
  2986                           ; BSR set to: 0
  2987  000E2A  0100               	movlb	0	; () banked
  2988  000E2C  4BA0               	infsnz	ScanWithRange@i& (0+255),f,b
  2989  000E2E  2BA1               	incf	(ScanWithRange@i+1)& (0+255),f,b
  2990  000E30                     l3138:
  2991                           
  2992                           ; BSR set to: 0
  2993  000E30  0100               	movlb	0	; () banked
  2994  000E32  51A0               	movf	ScanWithRange@i& (0+255),w,b
  2995  000E34  0100               	movlb	0	; () banked
  2996  000E36  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  2997  000E38  0100               	movlb	0	; () banked
  2998  000E3A  51A1               	movf	(ScanWithRange@i+1)& (0+255),w,b
  2999  000E3C  0100               	movlb	0	; () banked
  3000  000E3E  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3001  000E40  B0D8               	btfsc	status,0,c
  3002  000E42  D6DD               	goto	l3056
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;Movement.c: 165: }
  3006                           ;Movement.c: 167: }
  3007                           ;Movement.c: 170: turnRight(mL,mR, 100);
  3008                           
  3009                           ; BSR set to: 0
  3010  000E44  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3011  000E48  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3012  000E4C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3013  000E50  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3014  000E54  0E64               	movlw	100
  3015  000E56  0100               	movlb	0	; () banked
  3016  000E58  6F6B               	movwf	turnRight@power& (0+255),b
  3017  000E5A  EC25  F00B         	call	_turnRight	;wreg free
  3018                           
  3019                           ;Movement.c: 171: delay_tenth_s(5);
  3020  000E5E  0E05               	movlw	5
  3021  000E60  ECE0  F00B         	call	_delay_tenth_s
  3022                           
  3023                           ;Movement.c: 172: stop(mL,mR);
  3024  000E64  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3025  000E68  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3026  000E6C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3027  000E70  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3028  000E74  EC73  F009         	call	_stop	;wreg free
  3029                           
  3030                           ;Movement.c: 173: return -1;
  3031  000E78  0EFF               	movlw	255
  3032  000E7A  0012               	return	
  3033  000E7C                     __end_of_ScanWithRange:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           intcon	equ	0xFF2
  3039                           postinc0	equ	0xFEE
  3040                           wreg	equ	0xFE8
  3041                           indf1	equ	0xFE7
  3042                           fsr1h	equ	0xFE2
  3043                           fsr1l	equ	0xFE1
  3044                           indf2	equ	0xFDF
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _turnRight *****************
  3050 ;; Defined at:
  3051 ;;		line 87 in file "dc_motor.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3054 ;;		 -> main@mL(9), 
  3055 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3056 ;;		 -> main@mR(9), 
  3057 ;;  power           1   11[BANK0 ] unsigned char 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;		None               void
  3062 ;; Registers used:
  3063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3069 ;;      Params:         0       5       0       0
  3070 ;;      Locals:         0       0       0       0
  3071 ;;      Temps:          0       0       0       0
  3072 ;;      Totals:         0       5       0       0
  3073 ;;Total ram usage:        5 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    6
  3076 ;; This function calls:
  3077 ;;		_fullSpeedAhead
  3078 ;;		_stop
  3079 ;; This function is called by:
  3080 ;;		_ScanWithRange
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text9
  3085  00164A                     __ptext9:
  3086                           	opt stack 0
  3087  00164A                     _turnRight:
  3088                           	opt stack 23
  3089                           
  3090                           ;dc_motor.c: 89: stop(mL, mR);
  3091                           
  3092                           ;incstack = 0
  3093  00164A  C067  F062         	movff	turnRight@mL,stop@mL
  3094  00164E  C068  F063         	movff	turnRight@mL+1,stop@mL+1
  3095  001652  C069  F064         	movff	turnRight@mR,stop@mR
  3096  001656  C06A  F065         	movff	turnRight@mR+1,stop@mR+1
  3097  00165A  EC73  F009         	call	_stop	;wreg free
  3098                           
  3099                           ;dc_motor.c: 91: mL->direction=0;
  3100  00165E  0100               	movlb	0	; () banked
  3101  001660  EE20 F001          	lfsr	2,1
  3102  001664  5167               	movf	turnRight@mL& (0+255),w,b
  3103  001666  26D9               	addwf	fsr2l,f,c
  3104  001668  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3105  00166A  22DA               	addwfc	fsr2h,f,c
  3106  00166C  0E00               	movlw	0
  3107  00166E  6EDF               	movwf	indf2,c
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;dc_motor.c: 92: mR->direction=1;
  3111  001670  0100               	movlb	0	; () banked
  3112  001672  EE20 F001          	lfsr	2,1
  3113  001676  5169               	movf	turnRight@mR& (0+255),w,b
  3114  001678  26D9               	addwf	fsr2l,f,c
  3115  00167A  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3116  00167C  22DA               	addwfc	fsr2h,f,c
  3117  00167E  0E01               	movlw	1
  3118  001680  6EDF               	movwf	indf2,c
  3119                           
  3120                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3121  001682  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3122  001686  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3123  00168A  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3124  00168E  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3125  001692  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3126  001696  EC44  F00A         	call	_fullSpeedAhead	;wreg free
  3127  00169A  0012               	return		;funcret
  3128  00169C                     __end_of_turnRight:
  3129                           	opt stack 0
  3130                           tblptru	equ	0xFF8
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           intcon	equ	0xFF2
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           indf1	equ	0xFE7
  3137                           fsr1h	equ	0xFE2
  3138                           fsr1l	equ	0xFE1
  3139                           indf2	equ	0xFDF
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _turnLeft *****************
  3145 ;; Defined at:
  3146 ;;		line 98 in file "dc_motor.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3149 ;;		 -> main@mL(9), 
  3150 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3151 ;;		 -> main@mR(9), 
  3152 ;;  power           1   11[BANK0 ] unsigned char 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;		None               void
  3157 ;; Registers used:
  3158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3164 ;;      Params:         0       5       0       0
  3165 ;;      Locals:         0       0       0       0
  3166 ;;      Temps:          0       0       0       0
  3167 ;;      Totals:         0       5       0       0
  3168 ;;Total ram usage:        5 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    6
  3171 ;; This function calls:
  3172 ;;		_fullSpeedAhead
  3173 ;;		_stop
  3174 ;; This function is called by:
  3175 ;;		_ScanWithRange
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text10
  3180  00169C                     __ptext10:
  3181                           	opt stack 0
  3182  00169C                     _turnLeft:
  3183                           	opt stack 23
  3184                           
  3185                           ;dc_motor.c: 100: stop(mL, mR);
  3186                           
  3187                           ;incstack = 0
  3188  00169C  C067  F062         	movff	turnLeft@mL,stop@mL
  3189  0016A0  C068  F063         	movff	turnLeft@mL+1,stop@mL+1
  3190  0016A4  C069  F064         	movff	turnLeft@mR,stop@mR
  3191  0016A8  C06A  F065         	movff	turnLeft@mR+1,stop@mR+1
  3192  0016AC  EC73  F009         	call	_stop	;wreg free
  3193                           
  3194                           ;dc_motor.c: 102: mL->direction=1;
  3195  0016B0  0100               	movlb	0	; () banked
  3196  0016B2  EE20 F001          	lfsr	2,1
  3197  0016B6  5167               	movf	turnLeft@mL& (0+255),w,b
  3198  0016B8  26D9               	addwf	fsr2l,f,c
  3199  0016BA  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3200  0016BC  22DA               	addwfc	fsr2h,f,c
  3201  0016BE  0E01               	movlw	1
  3202  0016C0  6EDF               	movwf	indf2,c
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;dc_motor.c: 103: mR->direction=0;
  3206  0016C2  0100               	movlb	0	; () banked
  3207  0016C4  EE20 F001          	lfsr	2,1
  3208  0016C8  5169               	movf	turnLeft@mR& (0+255),w,b
  3209  0016CA  26D9               	addwf	fsr2l,f,c
  3210  0016CC  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3211  0016CE  22DA               	addwfc	fsr2h,f,c
  3212  0016D0  0E00               	movlw	0
  3213  0016D2  6EDF               	movwf	indf2,c
  3214                           
  3215                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3216  0016D4  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3217  0016D8  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3218  0016DC  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3219  0016E0  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3220  0016E4  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3221  0016E8  EC44  F00A         	call	_fullSpeedAhead	;wreg free
  3222  0016EC  0012               	return		;funcret
  3223  0016EE                     __end_of_turnLeft:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           prodh	equ	0xFF4
  3227                           prodl	equ	0xFF3
  3228                           intcon	equ	0xFF2
  3229                           postinc0	equ	0xFEE
  3230                           wreg	equ	0xFE8
  3231                           indf1	equ	0xFE7
  3232                           fsr1h	equ	0xFE2
  3233                           fsr1l	equ	0xFE1
  3234                           indf2	equ	0xFDF
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _fullSpeedAhead *****************
  3240 ;; Defined at:
  3241 ;;		line 108 in file "dc_motor.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3244 ;;		 -> main@mL(9), 
  3245 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3246 ;;		 -> main@mR(9), 
  3247 ;;  power           1    6[BANK0 ] unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;		None
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3259 ;;      Params:         0       5       0       0
  3260 ;;      Locals:         0       0       0       0
  3261 ;;      Temps:          1       0       0       0
  3262 ;;      Totals:         1       5       0       0
  3263 ;;Total ram usage:        6 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    5
  3266 ;; This function calls:
  3267 ;;		_setMotorPWM
  3268 ;; This function is called by:
  3269 ;;		_turnRight
  3270 ;;		_turnLeft
  3271 ;;		_fullSpeedBack
  3272 ;;		_main
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text11
  3277  001488                     __ptext11:
  3278                           	opt stack 0
  3279  001488                     _fullSpeedAhead:
  3280                           	opt stack 24
  3281                           
  3282                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3283                           
  3284                           ;incstack = 0
  3285  001488  D02C               	goto	l65
  3286  00148A                     l2854:
  3287                           
  3288                           ;dc_motor.c: 112: if(mL->power<power){
  3289  00148A  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3290  00148E  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3291  001492  0100               	movlb	0	; () banked
  3292  001494  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3293  001496  5CDE               	subwf	postinc2,w,c
  3294  001498  B0D8               	btfsc	status,0,c
  3295  00149A  D005               	goto	l2858
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;dc_motor.c: 113: mL->power++;
  3299  00149C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3300  0014A0  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3301  0014A4  2ADF               	incf	indf2,f,c
  3302  0014A6                     l2858:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;dc_motor.c: 114: }
  3306                           ;dc_motor.c: 115: if(mR->power<power){
  3307  0014A6  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3308  0014AA  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3309  0014AE  0100               	movlb	0	; () banked
  3310  0014B0  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3311  0014B2  5CDE               	subwf	postinc2,w,c
  3312  0014B4  B0D8               	btfsc	status,0,c
  3313  0014B6  D005               	goto	l2862
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;dc_motor.c: 116: mR->power++;
  3317  0014B8  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3318  0014BC  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3319  0014C0  2ADF               	incf	indf2,f,c
  3320  0014C2                     l2862:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;dc_motor.c: 117: }
  3324                           ;dc_motor.c: 118: setMotorPWM(mL);
  3325  0014C2  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3326  0014C6  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3327  0014CA  EC3E  F007         	call	_setMotorPWM	;wreg free
  3328                           
  3329                           ;dc_motor.c: 119: setMotorPWM(mR);
  3330  0014CE  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3331  0014D2  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3332  0014D6  EC3E  F007         	call	_setMotorPWM	;wreg free
  3333                           
  3334                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3335  0014DA  0E21               	movlw	33
  3336  0014DC                     u3007:
  3337  0014DC  2EE8               	decfsz	wreg,f,c
  3338  0014DE  D7FE               	goto	u3007
  3339  0014E0  F000               	nop	
  3340  0014E2                     l65:
  3341  0014E2  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3342  0014E6  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3343  0014EA  0100               	movlb	0	; () banked
  3344  0014EC  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3345  0014EE  5CDE               	subwf	postinc2,w,c
  3346  0014F0  A0D8               	btfss	status,0,c
  3347  0014F2  D7CB               	goto	l2854
  3348                           
  3349                           ; BSR set to: 0
  3350  0014F4  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3351  0014F8  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3352  0014FC  0100               	movlb	0	; () banked
  3353  0014FE  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3354  001500  5CDE               	subwf	postinc2,w,c
  3355  001502  B0D8               	btfsc	status,0,c
  3356  001504  0012               	return	
  3357  001506  D7C1               	goto	l2854
  3358  001508                     __end_of_fullSpeedAhead:
  3359                           	opt stack 0
  3360                           tblptru	equ	0xFF8
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           indf1	equ	0xFE7
  3367                           fsr1h	equ	0xFE2
  3368                           fsr1l	equ	0xFE1
  3369                           indf2	equ	0xFDF
  3370                           postinc2	equ	0xFDE
  3371                           fsr2h	equ	0xFDA
  3372                           fsr2l	equ	0xFD9
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function _delay_tenth_s *****************
  3376 ;; Defined at:
  3377 ;;		line 21 in file "Movement.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  tenth_second    1    wreg     unsigned char 
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3382 ;;  i               2   37[COMRAM] unsigned int 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;		None               void
  3385 ;; Registers used:
  3386 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3392 ;;      Params:         0       0       0       0
  3393 ;;      Locals:         3       0       0       0
  3394 ;;      Temps:          1       0       0       0
  3395 ;;      Totals:         4       0       0       0
  3396 ;;Total ram usage:        4 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    3
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_ScanWithRange
  3403 ;;		_main
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text12
  3408  0017C0                     __ptext12:
  3409                           	opt stack 0
  3410  0017C0                     _delay_tenth_s:
  3411                           	opt stack 27
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;incstack = 0
  3415                           ;delay_tenth_s@tenth_seconds stored from wreg
  3416  0017C0  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3417                           
  3418                           ;Movement.c: 22: unsigned int i=0;
  3419  0017C2  0E00               	movlw	0
  3420  0017C4  6E27               	movwf	delay_tenth_s@i+1,c
  3421  0017C6  0E00               	movlw	0
  3422  0017C8  6E26               	movwf	delay_tenth_s@i,c
  3423                           
  3424                           ;Movement.c: 23: for (i=1; i<=tenth_seconds*2; i++) {
  3425  0017CA  0E00               	movlw	0
  3426  0017CC  6E27               	movwf	delay_tenth_s@i+1,c
  3427  0017CE  0E01               	movlw	1
  3428  0017D0  6E26               	movwf	delay_tenth_s@i,c
  3429  0017D2  D009               	goto	l2172
  3430  0017D4                     l2168:
  3431                           
  3432                           ;Movement.c: 25: _delay((unsigned long)((50)*(8000000/4000.0)));
  3433  0017D4  0E82               	movlw	130
  3434  0017D6  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3435  0017D8  0EDE               	movlw	222
  3436  0017DA                     u3017:
  3437  0017DA  2EE8               	decfsz	wreg,f,c
  3438  0017DC  D7FE               	goto	u3017
  3439  0017DE  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3440  0017E0  D7FC               	goto	u3017
  3441  0017E2  4A26               	infsnz	delay_tenth_s@i,f,c
  3442  0017E4  2A27               	incf	delay_tenth_s@i+1,f,c
  3443  0017E6                     l2172:
  3444  0017E6  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3445  0017E8  0D02               	mullw	2
  3446  0017EA  5026               	movf	delay_tenth_s@i,w,c
  3447  0017EC  5CF3               	subwf	prodl,w,c
  3448  0017EE  5027               	movf	delay_tenth_s@i+1,w,c
  3449  0017F0  58F4               	subwfb	prodh,w,c
  3450  0017F2  A0D8               	btfss	status,0,c
  3451  0017F4  0012               	return	
  3452  0017F6  D7EE               	goto	l2168
  3453  0017F8                     __end_of_delay_tenth_s:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           prodh	equ	0xFF4
  3457                           prodl	equ	0xFF3
  3458                           intcon	equ	0xFF2
  3459                           postinc0	equ	0xFEE
  3460                           wreg	equ	0xFE8
  3461                           indf1	equ	0xFE7
  3462                           fsr1h	equ	0xFE2
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _ScanIR *****************
  3471 ;; Defined at:
  3472 ;;		line 34 in file "Movement.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3475 ;;		 -> main@mL(9), 
  3476 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3477 ;;		 -> main@mR(9), 
  3478 ;;  TurnDirectio    1   17[BANK0 ] unsigned char 
  3479 ;;  Move            2   18[BANK0 ] PTR unsigned char 
  3480 ;;		 -> main@Move(1), 
  3481 ;;  MoveTime        2   20[BANK0 ] PTR unsigned char 
  3482 ;;		 -> main@MoveTime(100), 
  3483 ;;  MoveType        2   22[BANK0 ] PTR unsigned char 
  3484 ;;		 -> main@MoveType(100), 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  buf            40   24[BANK0 ] unsigned char [40]
  3487 ;;  SensorResult    4   66[BANK0 ] unsigned int [2]
  3488 ;;  DirectionMov    2   64[BANK0 ] const unsigned int 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  1    wreg      unsigned char 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3498 ;;      Params:         0      11       0       0
  3499 ;;      Locals:         0      46       0       0
  3500 ;;      Temps:          1       0       0       0
  3501 ;;      Totals:         1      57       0       0
  3502 ;;Total ram usage:       58 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    7
  3505 ;; This function calls:
  3506 ;;		_LCD_String
  3507 ;;		_SendLCD
  3508 ;;		_SetLine
  3509 ;;		_grabLeftIR
  3510 ;;		_grabRightIR
  3511 ;;		_sprintf
  3512 ;;		_stop
  3513 ;; This function is called by:
  3514 ;;		_main
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text13
  3519  000FB6                     __ptext13:
  3520                           	opt stack 0
  3521  000FB6                     _ScanIR:
  3522                           	opt stack 23
  3523                           
  3524                           ;Movement.c: 37: unsigned int SensorResult[2]={0,0};
  3525                           
  3526                           ;incstack = 0
  3527  000FB6  C0B8  F0A2         	movff	ScanIR@F3882,ScanIR@SensorResult
  3528  000FBA  C0B9  F0A3         	movff	ScanIR@F3882+1,ScanIR@SensorResult+1
  3529  000FBE  C0BA  F0A4         	movff	ScanIR@F3882+2,ScanIR@SensorResult+2
  3530  000FC2  C0BB  F0A5         	movff	ScanIR@F3882+3,ScanIR@SensorResult+3
  3531                           
  3532                           ;Movement.c: 38: char buf[40];
  3533                           ;Movement.c: 41: const unsigned int DirectionMoveThreshold=2500;
  3534  000FC6  0E09               	movlw	9
  3535  000FC8  0100               	movlb	0	; () banked
  3536  000FCA  6FA1               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3537  000FCC  0EC4               	movlw	196
  3538  000FCE  6FA0               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;Movement.c: 44: SensorResult[0]=grabLeftIR();
  3542  000FD0  ECBD  F00A         	call	_grabLeftIR	;wreg free
  3543  000FD4  C024  F0A2         	movff	?_grabLeftIR,ScanIR@SensorResult
  3544  000FD8  C025  F0A3         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3545                           
  3546                           ;Movement.c: 45: SensorResult[1]=grabRightIR();
  3547  000FDC  EC84  F00A         	call	_grabRightIR	;wreg free
  3548  000FE0  C024  F0A4         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3549  000FE4  C025  F0A5         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3550                           
  3551                           ;Movement.c: 49: CAP1BUFH=0;
  3552  000FE8  0E00               	movlw	0
  3553  000FEA  6E69               	movwf	3945,c	;volatile
  3554                           
  3555                           ;Movement.c: 50: CAP1BUFL=0;
  3556  000FEC  0E00               	movlw	0
  3557  000FEE  6E68               	movwf	3944,c	;volatile
  3558                           
  3559                           ;Movement.c: 51: CAP2BUFH=0;
  3560  000FF0  0E00               	movlw	0
  3561  000FF2  6E67               	movwf	3943,c	;volatile
  3562                           
  3563                           ;Movement.c: 52: CAP2BUFL=0;
  3564  000FF4  0E00               	movlw	0
  3565  000FF6  6E66               	movwf	3942,c	;volatile
  3566                           
  3567                           ;Movement.c: 55: SendLCD(0b00000001,0);
  3568  000FF8  0E00               	movlw	0
  3569  000FFA  6E28               	movwf	SendLCD@type,c
  3570  000FFC  0E01               	movlw	1
  3571  000FFE  EC49  F00C         	call	_SendLCD
  3572                           
  3573                           ;Movement.c: 56: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3574  001002  0E21               	movlw	33
  3575  001004                     u3027:
  3576  001004  2EE8               	decfsz	wreg,f,c
  3577  001006  D7FE               	goto	u3027
  3578  001008  F000               	nop	
  3579                           
  3580                           ;Movement.c: 57: SendLCD(0b00000010,0);
  3581  00100A  0E00               	movlw	0
  3582  00100C  6E28               	movwf	SendLCD@type,c
  3583  00100E  0E02               	movlw	2
  3584  001010  EC49  F00C         	call	_SendLCD
  3585                           
  3586                           ;Movement.c: 58: _delay((unsigned long)((2)*(8000000/4000.0)));
  3587  001014  0E06               	movlw	6
  3588  001016  6E39               	movwf	??_ScanIR& (0+255),c
  3589  001018  0E30               	movlw	48
  3590  00101A                     u3037:
  3591  00101A  2EE8               	decfsz	wreg,f,c
  3592  00101C  D7FE               	goto	u3037
  3593  00101E  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3594  001020  D7FC               	goto	u3037
  3595  001022  D000               	nop2	
  3596                           
  3597                           ;Movement.c: 59: SetLine(1);
  3598  001024  0E01               	movlw	1
  3599  001026  EC31  F00C         	call	_SetLine
  3600                           
  3601                           ;Movement.c: 60: LCD_String("     ScanIR");
  3602  00102A  0E39               	movlw	low STR_1
  3603  00102C  6E2A               	movwf	LCD_String@string,c
  3604  00102E  0E03               	movlw	high STR_1
  3605  001030  6E2B               	movwf	LCD_String@string+1,c
  3606  001032  ECF6  F00A         	call	_LCD_String	;wreg free
  3607                           
  3608                           ;Movement.c: 61: SetLine(2);
  3609  001036  0E02               	movlw	2
  3610  001038  EC31  F00C         	call	_SetLine
  3611                           
  3612                           ;Movement.c: 62: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3613  00103C  0E78               	movlw	low ScanIR@buf
  3614  00103E  6E30               	movwf	sprintf@sp,c
  3615  001040  0E00               	movlw	high ScanIR@buf
  3616  001042  6E31               	movwf	sprintf@sp+1,c
  3617  001044  0E0C               	movlw	low (STR_6+1)
  3618  001046  6E32               	movwf	sprintf@f,c
  3619  001048  0E03               	movlw	high (STR_6+1)
  3620  00104A  6E33               	movwf	sprintf@f+1,c
  3621  00104C  C0A2  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3622  001050  C0A3  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3623  001054  C0A4  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3624  001058  C0A5  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3625  00105C  EC39  F004         	call	_sprintf	;wreg free
  3626                           
  3627                           ;Movement.c: 63: LCD_String(buf);
  3628  001060  0E78               	movlw	low ScanIR@buf
  3629  001062  6E2A               	movwf	LCD_String@string,c
  3630  001064  0E00               	movlw	high ScanIR@buf
  3631  001066  6E2B               	movwf	LCD_String@string+1,c
  3632  001068  ECF6  F00A         	call	_LCD_String	;wreg free
  3633                           
  3634                           ;Movement.c: 67: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>Directio
      +                          nMoveThreshold)) {
  3635  00106C  0100               	movlb	0	; () banked
  3636  00106E  51A2               	movf	ScanIR@SensorResult& (0+255),w,b
  3637  001070  0100               	movlb	0	; () banked
  3638  001072  5DA0               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3639  001074  0100               	movlb	0	; () banked
  3640  001076  51A3               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3641  001078  0100               	movlb	0	; () banked
  3642  00107A  59A1               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3643  00107C  B0D8               	btfsc	status,0,c
  3644  00107E  D00C               	goto	l3036
  3645                           
  3646                           ; BSR set to: 0
  3647  001080  0100               	movlb	0	; () banked
  3648  001082  51A4               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3649  001084  0100               	movlb	0	; () banked
  3650  001086  5DA0               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3651  001088  0100               	movlb	0	; () banked
  3652  00108A  51A5               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3653  00108C  0100               	movlb	0	; () banked
  3654  00108E  59A1               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3655  001090  B0D8               	btfsc	status,0,c
  3656  001092  D002               	goto	l3036
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;Movement.c: 68: return 2;
  3660  001094  0E02               	movlw	2
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;Movement.c: 69: } else {
  3664                           
  3665                           ; BSR set to: 0
  3666  001096  0012               	return	
  3667  001098                     l3036:
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;Movement.c: 70: stop(mL,mR);
  3671  001098  C06D  F062         	movff	ScanIR@mL,stop@mL
  3672  00109C  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3673  0010A0  C06F  F064         	movff	ScanIR@mR,stop@mR
  3674  0010A4  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3675  0010A8  EC73  F009         	call	_stop	;wreg free
  3676                           
  3677                           ;Movement.c: 71: return 0;
  3678  0010AC  0E00               	movlw	0
  3679  0010AE  0012               	return	
  3680  0010B0                     __end_of_ScanIR:
  3681                           	opt stack 0
  3682                           tblptru	equ	0xFF8
  3683                           prodh	equ	0xFF4
  3684                           prodl	equ	0xFF3
  3685                           intcon	equ	0xFF2
  3686                           postinc0	equ	0xFEE
  3687                           wreg	equ	0xFE8
  3688                           indf1	equ	0xFE7
  3689                           fsr1h	equ	0xFE2
  3690                           fsr1l	equ	0xFE1
  3691                           indf2	equ	0xFDF
  3692                           postinc2	equ	0xFDE
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _stop *****************
  3698 ;; Defined at:
  3699 ;;		line 67 in file "dc_motor.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3702 ;;		 -> main@mL(9), 
  3703 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3704 ;;		 -> main@mR(9), 
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;		None               void
  3709 ;; Registers used:
  3710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3716 ;;      Params:         0       4       0       0
  3717 ;;      Locals:         0       0       0       0
  3718 ;;      Temps:          0       0       0       0
  3719 ;;      Totals:         0       4       0       0
  3720 ;;Total ram usage:        4 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    5
  3723 ;; This function calls:
  3724 ;;		_setMotorPWM
  3725 ;; This function is called by:
  3726 ;;		_turnRight
  3727 ;;		_turnLeft
  3728 ;;		_ScanIR
  3729 ;;		_ScanWithRange
  3730 ;;		_main
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text14
  3735  0012E6                     __ptext14:
  3736                           	opt stack 0
  3737  0012E6                     _stop:
  3738                           	opt stack 25
  3739                           
  3740                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3741                           
  3742                           ;incstack = 0
  3743  0012E6  D028               	goto	l2846
  3744  0012E8                     l2832:
  3745                           
  3746                           ;dc_motor.c: 71: if(mL->power>0){
  3747  0012E8  C062  FFD9         	movff	stop@mL,fsr2l
  3748  0012EC  C063  FFDA         	movff	stop@mL+1,fsr2h
  3749  0012F0  50DF               	movf	indf2,w,c
  3750  0012F2  B4D8               	btfsc	status,2,c
  3751  0012F4  D005               	goto	l2836
  3752                           
  3753                           ;dc_motor.c: 72: mL->power--;
  3754  0012F6  C062  FFD9         	movff	stop@mL,fsr2l
  3755  0012FA  C063  FFDA         	movff	stop@mL+1,fsr2h
  3756  0012FE  06DF               	decf	indf2,f,c
  3757  001300                     l2836:
  3758                           
  3759                           ;dc_motor.c: 73: }
  3760                           ;dc_motor.c: 74: if(mR->power>0){
  3761  001300  C064  FFD9         	movff	stop@mR,fsr2l
  3762  001304  C065  FFDA         	movff	stop@mR+1,fsr2h
  3763  001308  50DF               	movf	indf2,w,c
  3764  00130A  B4D8               	btfsc	status,2,c
  3765  00130C  D005               	goto	l2840
  3766                           
  3767                           ;dc_motor.c: 75: mR->power--;
  3768  00130E  C064  FFD9         	movff	stop@mR,fsr2l
  3769  001312  C065  FFDA         	movff	stop@mR+1,fsr2h
  3770  001316  06DF               	decf	indf2,f,c
  3771  001318                     l2840:
  3772                           
  3773                           ;dc_motor.c: 76: }
  3774                           ;dc_motor.c: 77: setMotorPWM(mL);
  3775  001318  C062  F032         	movff	stop@mL,setMotorPWM@m
  3776  00131C  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3777  001320  EC3E  F007         	call	_setMotorPWM	;wreg free
  3778                           
  3779                           ;dc_motor.c: 78: setMotorPWM(mR);
  3780  001324  C064  F032         	movff	stop@mR,setMotorPWM@m
  3781  001328  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3782  00132C  EC3E  F007         	call	_setMotorPWM	;wreg free
  3783                           
  3784                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3785  001330  0E21               	movlw	33
  3786  001332                     u3047:
  3787  001332  2EE8               	decfsz	wreg,f,c
  3788  001334  D7FE               	goto	u3047
  3789  001336  F000               	nop	
  3790  001338                     l2846:
  3791  001338  C062  FFD9         	movff	stop@mL,fsr2l
  3792  00133C  C063  FFDA         	movff	stop@mL+1,fsr2h
  3793  001340  50DF               	movf	indf2,w,c
  3794  001342  A4D8               	btfss	status,2,c
  3795  001344  D7D1               	goto	l2832
  3796  001346  C064  FFD9         	movff	stop@mR,fsr2l
  3797  00134A  C065  FFDA         	movff	stop@mR+1,fsr2h
  3798  00134E  50DF               	movf	indf2,w,c
  3799  001350  A4D8               	btfss	status,2,c
  3800  001352  D7CA               	goto	l2832
  3801                           
  3802                           ;dc_motor.c: 80: }
  3803                           ;dc_motor.c: 81: mL->direction=1;
  3804  001354  0100               	movlb	0	; () banked
  3805  001356  EE20 F001          	lfsr	2,1
  3806  00135A  5162               	movf	stop@mL& (0+255),w,b
  3807  00135C  26D9               	addwf	fsr2l,f,c
  3808  00135E  5163               	movf	(stop@mL+1)& (0+255),w,b
  3809  001360  22DA               	addwfc	fsr2h,f,c
  3810  001362  0E01               	movlw	1
  3811  001364  6EDF               	movwf	indf2,c
  3812                           
  3813                           ;dc_motor.c: 82: mR->direction=1;
  3814  001366  0100               	movlb	0	; () banked
  3815  001368  EE20 F001          	lfsr	2,1
  3816  00136C  5164               	movf	stop@mR& (0+255),w,b
  3817  00136E  26D9               	addwf	fsr2l,f,c
  3818  001370  5165               	movf	(stop@mR+1)& (0+255),w,b
  3819  001372  22DA               	addwfc	fsr2h,f,c
  3820  001374  0E01               	movlw	1
  3821  001376  6EDF               	movwf	indf2,c
  3822                           
  3823                           ; BSR set to: 0
  3824  001378  0012               	return		;funcret
  3825  00137A                     __end_of_stop:
  3826                           	opt stack 0
  3827                           tblptru	equ	0xFF8
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           intcon	equ	0xFF2
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           indf1	equ	0xFE7
  3834                           fsr1h	equ	0xFE2
  3835                           fsr1l	equ	0xFE1
  3836                           indf2	equ	0xFDF
  3837                           postinc2	equ	0xFDE
  3838                           fsr2h	equ	0xFDA
  3839                           fsr2l	equ	0xFD9
  3840                           status	equ	0xFD8
  3841                           
  3842 ;; *************** function _setMotorPWM *****************
  3843 ;; Defined at:
  3844 ;;		line 26 in file "dc_motor.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3847 ;;		 -> main@mR(9), main@mL(9), 
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;  PWMduty         2    0[BANK0 ] int 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;		None               void
  3852 ;; Registers used:
  3853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3859 ;;      Params:         2       0       0       0
  3860 ;;      Locals:         0       2       0       0
  3861 ;;      Temps:          5       0       0       0
  3862 ;;      Totals:         7       2       0       0
  3863 ;;Total ram usage:        9 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    4
  3866 ;; This function calls:
  3867 ;;		___awdiv
  3868 ;;		___wmul
  3869 ;; This function is called by:
  3870 ;;		_stop
  3871 ;;		_fullSpeedAhead
  3872 ;;		_setMotorFullSpeed
  3873 ;;		_stopMotor
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text15
  3878  000E7C                     __ptext15:
  3879                           	opt stack 0
  3880  000E7C                     _setMotorPWM:
  3881                           	opt stack 25
  3882                           
  3883                           ;dc_motor.c: 28: int PWMduty;
  3884                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;incstack = 0
  3888  000E7C  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  3889  000E80  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3890  000E84  50DF               	movf	indf2,w,c
  3891  000E86  6E34               	movwf	??_setMotorPWM& (0+255),c
  3892  000E88  5034               	movf	??_setMotorPWM,w,c
  3893  000E8A  6E24               	movwf	___wmul@multiplier,c
  3894  000E8C  6A25               	clrf	___wmul@multiplier+1,c
  3895  000E8E  EE20 F007          	lfsr	2,7
  3896  000E92  5032               	movf	setMotorPWM@m,w,c
  3897  000E94  26D9               	addwf	fsr2l,f,c
  3898  000E96  5033               	movf	setMotorPWM@m+1,w,c
  3899  000E98  22DA               	addwfc	fsr2h,f,c
  3900  000E9A  CFDE F026          	movff	postinc2,___wmul@multiplicand
  3901  000E9E  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  3902  000EA2  EC89  F00C         	call	___wmul	;wreg free
  3903  000EA6  C024  F02A         	movff	?___wmul,___awdiv@dividend
  3904  000EAA  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  3905  000EAE  0E00               	movlw	0
  3906  000EB0  6E2D               	movwf	___awdiv@divisor+1,c
  3907  000EB2  0E64               	movlw	100
  3908  000EB4  6E2C               	movwf	___awdiv@divisor,c
  3909  000EB6  EC02  F00A         	call	___awdiv	;wreg free
  3910  000EBA  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  3911  000EBE  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3912                           
  3913                           ;dc_motor.c: 32: if (m->direction)
  3914  000EC2  EE20 F001          	lfsr	2,1
  3915  000EC6  5032               	movf	setMotorPWM@m,w,c
  3916  000EC8  26D9               	addwf	fsr2l,f,c
  3917  000ECA  5033               	movf	setMotorPWM@m+1,w,c
  3918  000ECC  22DA               	addwfc	fsr2h,f,c
  3919  000ECE  50DF               	movf	indf2,w,c
  3920  000ED0  B4D8               	btfsc	status,2,c
  3921  000ED2  D02E               	goto	l2828
  3922                           
  3923                           ;dc_motor.c: 33: {
  3924                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3925  000ED4  EE20 F006          	lfsr	2,6
  3926  000ED8  5032               	movf	setMotorPWM@m,w,c
  3927  000EDA  26D9               	addwf	fsr2l,f,c
  3928  000EDC  5033               	movf	setMotorPWM@m+1,w,c
  3929  000EDE  22DA               	addwfc	fsr2h,f,c
  3930  000EE0  50DF               	movf	indf2,w,c
  3931  000EE2  6E34               	movwf	??_setMotorPWM& (0+255),c
  3932  000EE4  0E01               	movlw	1
  3933  000EE6  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3934  000EE8  2A34               	incf	??_setMotorPWM,f,c
  3935  000EEA  D002               	goto	u2244
  3936  000EEC                     u2245:
  3937  000EEC  90D8               	bcf	status,0,c
  3938  000EEE  3635               	rlcf	??_setMotorPWM+1,f,c
  3939  000EF0                     u2244:
  3940  000EF0  2E34               	decfsz	??_setMotorPWM,f,c
  3941  000EF2  D7FC               	goto	u2245
  3942  000EF4  5035               	movf	??_setMotorPWM+1,w,c
  3943  000EF6  108A               	iorwf	3978,w,c	;volatile
  3944  000EF8  6E8A               	movwf	3978,c	;volatile
  3945                           
  3946                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3947  000EFA  EE20 F007          	lfsr	2,7
  3948  000EFE  5032               	movf	setMotorPWM@m,w,c
  3949  000F00  26D9               	addwf	fsr2l,f,c
  3950  000F02  5033               	movf	setMotorPWM@m+1,w,c
  3951  000F04  22DA               	addwfc	fsr2h,f,c
  3952  000F06  CFDE F034          	movff	postinc2,??_setMotorPWM
  3953  000F0A  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3954  000F0E  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3955  000F12  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3956  000F16  1E36               	comf	??_setMotorPWM+2,f,c
  3957  000F18  1E37               	comf	??_setMotorPWM+3,f,c
  3958  000F1A  4A36               	infsnz	??_setMotorPWM+2,f,c
  3959  000F1C  2A37               	incf	??_setMotorPWM+3,f,c
  3960  000F1E  5034               	movf	??_setMotorPWM,w,c
  3961  000F20  2436               	addwf	??_setMotorPWM+2,w,c
  3962  000F22  0100               	movlb	0	; () banked
  3963  000F24  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  3964  000F26  5035               	movf	??_setMotorPWM+1,w,c
  3965  000F28  2037               	addwfc	??_setMotorPWM+3,w,c
  3966  000F2A  0100               	movlb	0	; () banked
  3967  000F2C  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  3968                           
  3969                           ;dc_motor.c: 36: }
  3970  000F2E  D014               	goto	l35
  3971  000F30                     l2828:
  3972                           
  3973                           ;dc_motor.c: 37: else
  3974                           ;dc_motor.c: 38: {
  3975                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  3976  000F30  EE20 F006          	lfsr	2,6
  3977  000F34  5032               	movf	setMotorPWM@m,w,c
  3978  000F36  26D9               	addwf	fsr2l,f,c
  3979  000F38  5033               	movf	setMotorPWM@m+1,w,c
  3980  000F3A  22DA               	addwfc	fsr2h,f,c
  3981  000F3C  50DF               	movf	indf2,w,c
  3982  000F3E  6E34               	movwf	??_setMotorPWM& (0+255),c
  3983  000F40  0E01               	movlw	1
  3984  000F42  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3985  000F44  2A34               	incf	??_setMotorPWM,f,c
  3986  000F46  D002               	goto	u2254
  3987  000F48                     u2255:
  3988  000F48  90D8               	bcf	status,0,c
  3989  000F4A  3635               	rlcf	??_setMotorPWM+1,f,c
  3990  000F4C                     u2254:
  3991  000F4C  2E34               	decfsz	??_setMotorPWM,f,c
  3992  000F4E  D7FC               	goto	u2255
  3993  000F50  5035               	movf	??_setMotorPWM+1,w,c
  3994  000F52  0AFF               	xorlw	255
  3995  000F54  148A               	andwf	3978,w,c	;volatile
  3996  000F56  6E8A               	movwf	3978,c	;volatile
  3997  000F58                     l35:
  3998                           
  3999                           ;dc_motor.c: 40: }
  4000                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4001  000F58  EE20 F002          	lfsr	2,2
  4002  000F5C  5032               	movf	setMotorPWM@m,w,c
  4003  000F5E  26D9               	addwf	fsr2l,f,c
  4004  000F60  5033               	movf	setMotorPWM@m+1,w,c
  4005  000F62  22DA               	addwfc	fsr2h,f,c
  4006  000F64  CFDE F034          	movff	postinc2,??_setMotorPWM
  4007  000F68  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4008  000F6C  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4009  000F70  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4010  000F74  0100               	movlb	0	; () banked
  4011  000F76  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4012  000F78  46E8               	rlncf	wreg,f,c
  4013  000F7A  0BFC               	andlw	252
  4014  000F7C  6EDF               	movwf	indf2,c
  4015                           
  4016                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4017  000F7E  EE20 F004          	lfsr	2,4
  4018  000F82  5032               	movf	setMotorPWM@m,w,c
  4019  000F84  26D9               	addwf	fsr2l,f,c
  4020  000F86  5033               	movf	setMotorPWM@m+1,w,c
  4021  000F88  22DA               	addwfc	fsr2h,f,c
  4022  000F8A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4023  000F8E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4024  000F92  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4025  000F96  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4026  000F9A  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4027  000F9E  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4028  000FA2  0E06               	movlw	6
  4029  000FA4  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4030  000FA6                     u2265:
  4031  000FA6  3437               	rlcf	??_setMotorPWM+3,w,c
  4032  000FA8  3237               	rrcf	??_setMotorPWM+3,f,c
  4033  000FAA  3236               	rrcf	??_setMotorPWM+2,f,c
  4034  000FAC  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4035  000FAE  D7FB               	goto	u2265
  4036  000FB0  5036               	movf	??_setMotorPWM+2,w,c
  4037  000FB2  6EDF               	movwf	indf2,c
  4038                           
  4039                           ; BSR set to: 0
  4040  000FB4  0012               	return		;funcret
  4041  000FB6                     __end_of_setMotorPWM:
  4042                           	opt stack 0
  4043                           tblptru	equ	0xFF8
  4044                           prodh	equ	0xFF4
  4045                           prodl	equ	0xFF3
  4046                           intcon	equ	0xFF2
  4047                           postinc0	equ	0xFEE
  4048                           wreg	equ	0xFE8
  4049                           indf1	equ	0xFE7
  4050                           fsr1h	equ	0xFE2
  4051                           fsr1l	equ	0xFE1
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           postdec2	equ	0xFDD
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function ___awdiv *****************
  4060 ;; Defined at:
  4061 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  dividend        2   41[COMRAM] int 
  4064 ;;  divisor         2   43[COMRAM] int 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  quotient        2   47[COMRAM] int 
  4067 ;;  sign            1   46[COMRAM] unsigned char 
  4068 ;;  counter         1   45[COMRAM] unsigned char 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  2   41[COMRAM] int 
  4071 ;; Registers used:
  4072 ;;		wreg, status,2, status,0
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4078 ;;      Params:         4       0       0       0
  4079 ;;      Locals:         4       0       0       0
  4080 ;;      Temps:          0       0       0       0
  4081 ;;      Totals:         8       0       0       0
  4082 ;;Total ram usage:        8 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    3
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_setMotorPWM
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text16
  4093  001404                     __ptext16:
  4094                           	opt stack 0
  4095  001404                     ___awdiv:
  4096                           	opt stack 25
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;incstack = 0
  4100  001404  0E00               	movlw	0
  4101  001406  6E2F               	movwf	___awdiv@sign,c
  4102  001408  AE2D               	btfss	___awdiv@divisor+1,7,c
  4103  00140A  D006               	goto	l2786
  4104  00140C  6C2C               	negf	___awdiv@divisor,c
  4105  00140E  1E2D               	comf	___awdiv@divisor+1,f,c
  4106  001410  B0D8               	btfsc	status,0,c
  4107  001412  2A2D               	incf	___awdiv@divisor+1,f,c
  4108  001414  0E01               	movlw	1
  4109  001416  6E2F               	movwf	___awdiv@sign,c
  4110  001418                     l2786:
  4111  001418  AE2B               	btfss	___awdiv@dividend+1,7,c
  4112  00141A  D006               	goto	l2792
  4113  00141C  6C2A               	negf	___awdiv@dividend,c
  4114  00141E  1E2B               	comf	___awdiv@dividend+1,f,c
  4115  001420  B0D8               	btfsc	status,0,c
  4116  001422  2A2B               	incf	___awdiv@dividend+1,f,c
  4117  001424  0E01               	movlw	1
  4118  001426  1A2F               	xorwf	___awdiv@sign,f,c
  4119  001428                     l2792:
  4120  001428  0E00               	movlw	0
  4121  00142A  6E31               	movwf	___awdiv@quotient+1,c
  4122  00142C  0E00               	movlw	0
  4123  00142E  6E30               	movwf	___awdiv@quotient,c
  4124  001430  502C               	movf	___awdiv@divisor,w,c
  4125  001432  102D               	iorwf	___awdiv@divisor+1,w,c
  4126  001434  B4D8               	btfsc	status,2,c
  4127  001436  D01C               	goto	l2814
  4128  001438  0E01               	movlw	1
  4129  00143A  6E2E               	movwf	___awdiv@counter,c
  4130  00143C  D004               	goto	l2800
  4131  00143E                     l2798:
  4132  00143E  90D8               	bcf	status,0,c
  4133  001440  362C               	rlcf	___awdiv@divisor,f,c
  4134  001442  362D               	rlcf	___awdiv@divisor+1,f,c
  4135  001444  2A2E               	incf	___awdiv@counter,f,c
  4136  001446                     l2800:
  4137  001446  AE2D               	btfss	___awdiv@divisor+1,7,c
  4138  001448  D7FA               	goto	l2798
  4139  00144A                     l2802:
  4140  00144A  90D8               	bcf	status,0,c
  4141  00144C  3630               	rlcf	___awdiv@quotient,f,c
  4142  00144E  3631               	rlcf	___awdiv@quotient+1,f,c
  4143  001450  502C               	movf	___awdiv@divisor,w,c
  4144  001452  5C2A               	subwf	___awdiv@dividend,w,c
  4145  001454  502D               	movf	___awdiv@divisor+1,w,c
  4146  001456  582B               	subwfb	___awdiv@dividend+1,w,c
  4147  001458  A0D8               	btfss	status,0,c
  4148  00145A  D005               	goto	l2810
  4149  00145C  502C               	movf	___awdiv@divisor,w,c
  4150  00145E  5E2A               	subwf	___awdiv@dividend,f,c
  4151  001460  502D               	movf	___awdiv@divisor+1,w,c
  4152  001462  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4153  001464  8030               	bsf	___awdiv@quotient,0,c
  4154  001466                     l2810:
  4155  001466  90D8               	bcf	status,0,c
  4156  001468  322D               	rrcf	___awdiv@divisor+1,f,c
  4157  00146A  322C               	rrcf	___awdiv@divisor,f,c
  4158  00146C  2E2E               	decfsz	___awdiv@counter,f,c
  4159  00146E  D7ED               	goto	l2802
  4160  001470                     l2814:
  4161  001470  502F               	movf	___awdiv@sign,w,c
  4162  001472  B4D8               	btfsc	status,2,c
  4163  001474  D004               	goto	l2818
  4164  001476  6C30               	negf	___awdiv@quotient,c
  4165  001478  1E31               	comf	___awdiv@quotient+1,f,c
  4166  00147A  B0D8               	btfsc	status,0,c
  4167  00147C  2A31               	incf	___awdiv@quotient+1,f,c
  4168  00147E                     l2818:
  4169  00147E  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4170  001482  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4171  001486  0012               	return	
  4172  001488                     __end_of___awdiv:
  4173                           	opt stack 0
  4174                           tblptru	equ	0xFF8
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           intcon	equ	0xFF2
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           indf1	equ	0xFE7
  4181                           fsr1h	equ	0xFE2
  4182                           fsr1l	equ	0xFE1
  4183                           indf2	equ	0xFDF
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190 ;; *************** function _sprintf *****************
  4191 ;; Defined at:
  4192 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4195 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4196 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4197 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  tmpval          4    0        struct .
  4200 ;;  cp              3    0        PTR const unsigned char 
  4201 ;;  width           2   10[BANK0 ] int 
  4202 ;;  val             2    7[BANK0 ] unsigned int 
  4203 ;;  ap              2    4[BANK0 ] PTR void [1]
  4204 ;;		 -> ?_sprintf(2), 
  4205 ;;  len             2    0        unsigned int 
  4206 ;;  c               1   12[BANK0 ] char 
  4207 ;;  flag            1    9[BANK0 ] unsigned char 
  4208 ;;  prec            1    6[BANK0 ] char 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  2   47[COMRAM] int 
  4211 ;; Registers used:
  4212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4218 ;;      Params:         8       0       0       0
  4219 ;;      Locals:         0       9       0       0
  4220 ;;      Temps:          0       4       0       0
  4221 ;;      Totals:         8      13       0       0
  4222 ;;Total ram usage:       21 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    4
  4225 ;; This function calls:
  4226 ;;		___lwdiv
  4227 ;;		___lwmod
  4228 ;;		___wmul
  4229 ;;		_isdigit
  4230 ;; This function is called by:
  4231 ;;		_ScanIR
  4232 ;;		_ScanWithRange
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text17
  4238  000872                     __ptext17:
  4239                           	opt stack 0
  4240  000872                     _sprintf:
  4241                           	opt stack 26
  4242                           
  4243                           ;doprnt.c: 494: va_list ap;
  4244                           ;doprnt.c: 499: signed char c;
  4245                           ;doprnt.c: 501: int width;
  4246                           ;doprnt.c: 506: signed char prec;
  4247                           ;doprnt.c: 508: unsigned char flag;
  4248                           ;doprnt.c: 523: union {
  4249                           ;doprnt.c: 524: unsigned long vd;
  4250                           ;doprnt.c: 525: double integ;
  4251                           ;doprnt.c: 526: } tmpval;
  4252                           ;doprnt.c: 528: unsigned int val;
  4253                           ;doprnt.c: 529: unsigned len;
  4254                           ;doprnt.c: 530: const char * cp;
  4255                           ;doprnt.c: 533: *ap = __va_start();
  4256                           
  4257                           ;incstack = 0
  4258  000872  0E34               	movlw	low (?_sprintf+4)
  4259  000874  0100               	movlb	0	; () banked
  4260  000876  6F64               	movwf	sprintf@ap& (0+255),b
  4261  000878  0E00               	movlw	high (?_sprintf+4)
  4262  00087A  0100               	movlb	0	; () banked
  4263  00087C  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4264                           
  4265                           ;doprnt.c: 536: while(c = *f++) {
  4266  00087E  D168               	goto	l2990
  4267  000880                     l2884:
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;doprnt.c: 538: if(c != '%')
  4271  000880  0E25               	movlw	37
  4272  000882  0100               	movlb	0	; () banked
  4273  000884  196C               	xorwf	sprintf@c& (0+255),w,b
  4274  000886  B4D8               	btfsc	status,2,c
  4275  000888  D009               	goto	l2890
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;doprnt.c: 540: {
  4279                           ;doprnt.c: 541: ((*sp++ = (c)));
  4280  00088A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4281  00088E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4282  000892  C06C  FFDF         	movff	sprintf@c,indf2
  4283                           
  4284                           ; BSR set to: 0
  4285  000896  4A30               	infsnz	sprintf@sp,f,c
  4286  000898  2A31               	incf	sprintf@sp+1,f,c
  4287                           
  4288                           ;doprnt.c: 542: continue;
  4289  00089A  D15A               	goto	l2990
  4290  00089C                     l2890:
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;doprnt.c: 543: }
  4294                           ;doprnt.c: 546: width = 0;
  4295  00089C  0E00               	movlw	0
  4296  00089E  0100               	movlb	0	; () banked
  4297  0008A0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4298  0008A2  0E00               	movlw	0
  4299  0008A4  6F6A               	movwf	sprintf@width& (0+255),b
  4300                           
  4301                           ;doprnt.c: 548: flag = 0;
  4302  0008A6  0E00               	movlw	0
  4303  0008A8  0100               	movlb	0	; () banked
  4304  0008AA  6F69               	movwf	sprintf@flag& (0+255),b
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;doprnt.c: 551: switch(*f) {
  4308                           
  4309                           ;doprnt.c: 550: for(;;) {
  4310  0008AC  D004               	goto	l2896
  4311  0008AE                     l2892:
  4312                           
  4313                           ;doprnt.c: 580: flag |= 0x04;
  4314  0008AE  0100               	movlb	0	; () banked
  4315  0008B0  8569               	bsf	sprintf@flag& (0+255),2,b
  4316                           
  4317                           ;doprnt.c: 581: f++;
  4318  0008B2  4A32               	infsnz	sprintf@f,f,c
  4319  0008B4  2A33               	incf	sprintf@f+1,f,c
  4320  0008B6                     l2896:
  4321  0008B6  C032  FFF6         	movff	sprintf@f,tblptrl
  4322  0008BA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4323  0008BE                     	if	0	;tblptru may be non-zero
  4324  0008BE                     	endif
  4325  0008BE                     	if	0	;tblptru may be non-zero
  4326  0008BE                     	endif
  4327  0008BE  0008               	tblrd		*
  4328  0008C0  50F5               	movf	tablat,w,c
  4329                           
  4330                           ; Switch size 1, requested type "space"
  4331                           ; Number of cases is 1, Range of values is 48 to 48
  4332                           ; switch strategies available:
  4333                           ; Name         Instructions Cycles
  4334                           ; simple_byte            4     3 (average)
  4335                           ;	Chosen strategy is simple_byte
  4336  0008C2  0A30               	xorlw	48	; case 48
  4337  0008C4  B4D8               	btfsc	status,2,c
  4338  0008C6  D7F3               	goto	l2892
  4339                           
  4340                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4341                           
  4342                           ;doprnt.c: 586: }
  4343                           
  4344                           ;doprnt.c: 585: break;
  4345  0008C8  C032  FFF6         	movff	sprintf@f,tblptrl
  4346  0008CC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4347  0008D0                     	if	0	;tblptru may be non-zero
  4348  0008D0                     	endif
  4349  0008D0                     	if	0	;tblptru may be non-zero
  4350  0008D0                     	endif
  4351  0008D0  0008               	tblrd		*
  4352  0008D2  50F5               	movf	tablat,w,c
  4353  0008D4  ECAD  F00C         	call	_isdigit
  4354  0008D8  A0D8               	btfss	status,0,c
  4355  0008DA  D03E               	goto	l2912
  4356                           
  4357                           ;doprnt.c: 598: width = 0;
  4358  0008DC  0E00               	movlw	0
  4359  0008DE  0100               	movlb	0	; () banked
  4360  0008E0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4361  0008E2  0E00               	movlw	0
  4362  0008E4  6F6A               	movwf	sprintf@width& (0+255),b
  4363  0008E6                     l2902:
  4364                           
  4365                           ;doprnt.c: 600: width *= 10;
  4366  0008E6  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4367  0008EA  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4368  0008EE  0E00               	movlw	0
  4369  0008F0  6E27               	movwf	___wmul@multiplicand+1,c
  4370  0008F2  0E0A               	movlw	10
  4371  0008F4  6E26               	movwf	___wmul@multiplicand,c
  4372  0008F6  EC89  F00C         	call	___wmul	;wreg free
  4373  0008FA  C024  F06A         	movff	?___wmul,sprintf@width
  4374  0008FE  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4375                           
  4376                           ;doprnt.c: 601: width += *f++ - '0';
  4377  000902  0ED0               	movlw	208
  4378  000904  0100               	movlb	0	; () banked
  4379  000906  6F60               	movwf	??_sprintf& (0+255),b
  4380  000908  0EFF               	movlw	255
  4381  00090A  0100               	movlb	0	; () banked
  4382  00090C  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4383  00090E  C032  FFF6         	movff	sprintf@f,tblptrl
  4384  000912  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4385  000916                     	if	0	;tblptru may be non-zero
  4386  000916                     	endif
  4387  000916                     	if	0	;tblptru may be non-zero
  4388  000916                     	endif
  4389  000916  0008               	tblrd		*
  4390  000918  50F5               	movf	tablat,w,c
  4391  00091A  0100               	movlb	0	; () banked
  4392  00091C  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4393  00091E  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4394  000920  0100               	movlb	0	; () banked
  4395  000922  5160               	movf	??_sprintf& (0+255),w,b
  4396  000924  0100               	movlb	0	; () banked
  4397  000926  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4398  000928  0100               	movlb	0	; () banked
  4399  00092A  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4400  00092C  0100               	movlb	0	; () banked
  4401  00092E  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4402  000930  0100               	movlb	0	; () banked
  4403  000932  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4404  000934  0100               	movlb	0	; () banked
  4405  000936  276A               	addwf	sprintf@width& (0+255),f,b
  4406  000938  0100               	movlb	0	; () banked
  4407  00093A  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4408  00093C  0100               	movlb	0	; () banked
  4409  00093E  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4410                           
  4411                           ; BSR set to: 0
  4412  000940  4A32               	infsnz	sprintf@f,f,c
  4413  000942  2A33               	incf	sprintf@f+1,f,c
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4417  000944  C032  FFF6         	movff	sprintf@f,tblptrl
  4418  000948  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4419  00094C                     	if	0	;tblptru may be non-zero
  4420  00094C                     	endif
  4421  00094C                     	if	0	;tblptru may be non-zero
  4422  00094C                     	endif
  4423  00094C  0008               	tblrd		*
  4424  00094E  50F5               	movf	tablat,w,c
  4425  000950  ECAD  F00C         	call	_isdigit
  4426  000954  B0D8               	btfsc	status,0,c
  4427  000956  D7C7               	goto	l2902
  4428  000958                     l2912:
  4429  000958  C032  FFF6         	movff	sprintf@f,tblptrl
  4430  00095C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4431  000960  4A32               	infsnz	sprintf@f,f,c
  4432  000962  2A33               	incf	sprintf@f+1,f,c
  4433  000964                     	if	0	;tblptru may be non-zero
  4434  000964                     	endif
  4435  000964                     	if	0	;tblptru may be non-zero
  4436  000964                     	endif
  4437  000964  0008               	tblrd		*
  4438  000966  CFF5 F06C          	movff	tablat,sprintf@c
  4439  00096A  0100               	movlb	0	; () banked
  4440  00096C  516C               	movf	sprintf@c& (0+255),w,b
  4441                           
  4442                           ; Switch size 1, requested type "space"
  4443                           ; Number of cases is 3, Range of values is 0 to 105
  4444                           ; switch strategies available:
  4445                           ; Name         Instructions Cycles
  4446                           ; simple_byte           10     6 (average)
  4447                           ;	Chosen strategy is simple_byte
  4448  00096E  0A00               	xorlw	0	; case 0
  4449  000970  B4D8               	btfsc	status,2,c
  4450  000972  D0FB               	goto	l2992
  4451  000974  0A64               	xorlw	100	; case 100
  4452  000976  B4D8               	btfsc	status,2,c
  4453  000978  D003               	goto	l2914
  4454  00097A  0A0D               	xorlw	13	; case 105
  4455  00097C  A4D8               	btfss	status,2,c
  4456  00097E  D0E8               	goto	l2990
  4457  000980                     l2914:
  4458                           
  4459                           ;doprnt.c: 1253: {
  4460                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4461  000980  C064  FFD9         	movff	sprintf@ap,fsr2l
  4462  000984  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4463  000988  CFDE F067          	movff	postinc2,sprintf@val
  4464  00098C  CFDD F068          	movff	postdec2,sprintf@val+1
  4465  000990  0E02               	movlw	2
  4466  000992  0100               	movlb	0	; () banked
  4467  000994  2764               	addwf	sprintf@ap& (0+255),f,b
  4468  000996  0E00               	movlw	0
  4469  000998  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;doprnt.c: 1261: if((int)val < 0) {
  4473  00099A  0100               	movlb	0	; () banked
  4474  00099C  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4475  00099E  D008               	goto	l2924
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;doprnt.c: 1262: flag |= 0x03;
  4479  0009A0  0E03               	movlw	3
  4480  0009A2  0100               	movlb	0	; () banked
  4481  0009A4  1369               	iorwf	sprintf@flag& (0+255),f,b
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;doprnt.c: 1263: val = -val;
  4485  0009A6  0100               	movlb	0	; () banked
  4486  0009A8  6D67               	negf	sprintf@val& (0+255),b
  4487  0009AA  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4488  0009AC  B0D8               	btfsc	status,0,c
  4489  0009AE  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4490  0009B0                     l2924:
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;doprnt.c: 1264: }
  4494                           ;doprnt.c: 1266: }
  4495                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4496  0009B0  0E01               	movlw	1
  4497  0009B2  0100               	movlb	0	; () banked
  4498  0009B4  6F6C               	movwf	sprintf@c& (0+255),b
  4499  0009B6                     l2926:
  4500                           
  4501                           ; BSR set to: 0
  4502  0009B6  0E05               	movlw	5
  4503  0009B8  0100               	movlb	0	; () banked
  4504  0009BA  196C               	xorwf	sprintf@c& (0+255),w,b
  4505  0009BC  B4D8               	btfsc	status,2,c
  4506  0009BE  D016               	goto	l2938
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;doprnt.c: 1306: if(val < dpowers[c])
  4510                           
  4511                           ; BSR set to: 0
  4512                           
  4513                           ; BSR set to: 0
  4514  0009C0  0100               	movlb	0	; () banked
  4515  0009C2  516C               	movf	sprintf@c& (0+255),w,b
  4516  0009C4  0D02               	mullw	2
  4517  0009C6  0E01               	movlw	low _dpowers
  4518  0009C8  24F3               	addwf	prodl,w,c
  4519  0009CA  6EF6               	movwf	tblptrl,c
  4520  0009CC  0E03               	movlw	high _dpowers
  4521  0009CE  20F4               	addwfc	prodh,w,c
  4522  0009D0  6EF7               	movwf	tblptrh,c
  4523  0009D2                     	if	0	;There are less than 3 active tblptr bytes
  4524  0009D2                     	endif
  4525  0009D2  0009               	tblrd		*+
  4526  0009D4  50F5               	movf	tablat,w,c
  4527  0009D6  0100               	movlb	0	; () banked
  4528  0009D8  5D67               	subwf	sprintf@val& (0+255),w,b
  4529  0009DA  0009               	tblrd		*+
  4530  0009DC  50F5               	movf	tablat,w,c
  4531  0009DE  0100               	movlb	0	; () banked
  4532  0009E0  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4533  0009E2  A0D8               	btfss	status,0,c
  4534  0009E4  D003               	goto	l2938
  4535                           
  4536                           ; BSR set to: 0
  4537                           
  4538                           ; BSR set to: 0
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;doprnt.c: 1307: break;
  4542  0009E6  0100               	movlb	0	; () banked
  4543  0009E8  2B6C               	incf	sprintf@c& (0+255),f,b
  4544  0009EA  D7E5               	goto	l2926
  4545  0009EC                     l2938:
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4549  0009EC  0100               	movlb	0	; () banked
  4550  0009EE  516A               	movf	sprintf@width& (0+255),w,b
  4551  0009F0  0100               	movlb	0	; () banked
  4552  0009F2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4553  0009F4  B4D8               	btfsc	status,2,c
  4554  0009F6  D00B               	goto	l2944
  4555                           
  4556                           ; BSR set to: 0
  4557  0009F8  C069  F060         	movff	sprintf@flag,??_sprintf
  4558  0009FC  0E03               	movlw	3
  4559  0009FE  0100               	movlb	0	; () banked
  4560  000A00  1760               	andwf	??_sprintf& (0+255),f,b
  4561  000A02  B4D8               	btfsc	status,2,c
  4562  000A04  D004               	goto	l2944
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;doprnt.c: 1346: width--;
  4566  000A06  0100               	movlb	0	; () banked
  4567  000A08  076A               	decf	sprintf@width& (0+255),f,b
  4568  000A0A  A0D8               	btfss	status,0,c
  4569  000A0C  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4570  000A0E                     l2944:
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;doprnt.c: 1381: if(width > c)
  4574  000A0E  0E80               	movlw	128
  4575  000A10  0100               	movlb	0	; () banked
  4576  000A12  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4577  000A14  0E7F               	movlw	127
  4578  000A16  0100               	movlb	0	; () banked
  4579  000A18  6F60               	movwf	??_sprintf& (0+255),b
  4580  000A1A  0100               	movlb	0	; () banked
  4581  000A1C  516A               	movf	sprintf@width& (0+255),w,b
  4582  000A1E  0100               	movlb	0	; () banked
  4583  000A20  5D6C               	subwf	sprintf@c& (0+255),w,b
  4584  000A22  0100               	movlb	0	; () banked
  4585  000A24  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4586  000A26  0A80               	xorlw	128
  4587  000A28  0100               	movlb	0	; () banked
  4588  000A2A  5960               	subwfb	??_sprintf& (0+255),w,b
  4589  000A2C  B0D8               	btfsc	status,0,c
  4590  000A2E  D00B               	goto	l2948
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;doprnt.c: 1382: width -= c;
  4594  000A30  0100               	movlb	0	; () banked
  4595  000A32  516C               	movf	sprintf@c& (0+255),w,b
  4596  000A34  0100               	movlb	0	; () banked
  4597  000A36  5F6A               	subwf	sprintf@width& (0+255),f,b
  4598  000A38  0E00               	movlw	0
  4599  000A3A  0100               	movlb	0	; () banked
  4600  000A3C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4601  000A3E  0EFF               	movlw	255
  4602  000A40  0100               	movlb	0	; () banked
  4603  000A42  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4604  000A44  D005               	goto	l2950
  4605  000A46                     l2948:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;doprnt.c: 1383: else
  4609                           ;doprnt.c: 1384: width = 0;
  4610  000A46  0E00               	movlw	0
  4611  000A48  0100               	movlb	0	; () banked
  4612  000A4A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4613  000A4C  0E00               	movlw	0
  4614  000A4E  6F6A               	movwf	sprintf@width& (0+255),b
  4615  000A50                     l2950:
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;doprnt.c: 1387: if(flag & 0x04) {
  4619  000A50  0100               	movlb	0	; () banked
  4620  000A52  A569               	btfss	sprintf@flag& (0+255),2,b
  4621  000A54  D022               	goto	l2966
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;doprnt.c: 1392: if(flag & 0x03)
  4625  000A56  C069  F060         	movff	sprintf@flag,??_sprintf
  4626  000A5A  0E03               	movlw	3
  4627  000A5C  0100               	movlb	0	; () banked
  4628  000A5E  1760               	andwf	??_sprintf& (0+255),f,b
  4629  000A60  B4D8               	btfsc	status,2,c
  4630  000A62  D008               	goto	l2958
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4634  000A64  C030  FFD9         	movff	sprintf@sp,fsr2l
  4635  000A68  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4636  000A6C  0E2D               	movlw	45
  4637  000A6E  6EDF               	movwf	indf2,c
  4638                           
  4639                           ; BSR set to: 0
  4640  000A70  4A30               	infsnz	sprintf@sp,f,c
  4641  000A72  2A31               	incf	sprintf@sp+1,f,c
  4642  000A74                     l2958:
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;doprnt.c: 1415: if(width)
  4646  000A74  0100               	movlb	0	; () banked
  4647  000A76  516A               	movf	sprintf@width& (0+255),w,b
  4648  000A78  0100               	movlb	0	; () banked
  4649  000A7A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4650  000A7C  B4D8               	btfsc	status,2,c
  4651  000A7E  D034               	goto	l2980
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4655                           
  4656                           ; BSR set to: 0
  4657                           
  4658                           ;doprnt.c: 1416: do
  4659  000A80  C030  FFD9         	movff	sprintf@sp,fsr2l
  4660  000A84  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4661  000A88  0E30               	movlw	48
  4662  000A8A  6EDF               	movwf	indf2,c
  4663                           
  4664                           ; BSR set to: 0
  4665  000A8C  4A30               	infsnz	sprintf@sp,f,c
  4666  000A8E  2A31               	incf	sprintf@sp+1,f,c
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;doprnt.c: 1418: while(--width);
  4670  000A90  0100               	movlb	0	; () banked
  4671  000A92  076A               	decf	sprintf@width& (0+255),f,b
  4672  000A94  A0D8               	btfss	status,0,c
  4673  000A96  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4674  000A98  D7ED               	goto	l2958
  4675  000A9A                     l2966:
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;doprnt.c: 1422: {
  4679                           ;doprnt.c: 1424: if(width
  4680                           ;doprnt.c: 1428: )
  4681  000A9A  0100               	movlb	0	; () banked
  4682  000A9C  516A               	movf	sprintf@width& (0+255),w,b
  4683  000A9E  0100               	movlb	0	; () banked
  4684  000AA0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4685  000AA2  B4D8               	btfsc	status,2,c
  4686  000AA4  D012               	goto	l2974
  4687  000AA6                     l2968:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4691  000AA6  C030  FFD9         	movff	sprintf@sp,fsr2l
  4692  000AAA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4693  000AAE  0E20               	movlw	32
  4694  000AB0  6EDF               	movwf	indf2,c
  4695                           
  4696                           ; BSR set to: 0
  4697  000AB2  4A30               	infsnz	sprintf@sp,f,c
  4698  000AB4  2A31               	incf	sprintf@sp+1,f,c
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;doprnt.c: 1431: while(--width);
  4702  000AB6  0100               	movlb	0	; () banked
  4703  000AB8  076A               	decf	sprintf@width& (0+255),f,b
  4704  000ABA  A0D8               	btfss	status,0,c
  4705  000ABC  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4706  000ABE  0100               	movlb	0	; () banked
  4707  000AC0  516A               	movf	sprintf@width& (0+255),w,b
  4708  000AC2  0100               	movlb	0	; () banked
  4709  000AC4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4710  000AC6  A4D8               	btfss	status,2,c
  4711  000AC8  D7EE               	goto	l2968
  4712  000ACA                     l2974:
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;doprnt.c: 1438: if(flag & 0x03)
  4716  000ACA  C069  F060         	movff	sprintf@flag,??_sprintf
  4717  000ACE  0E03               	movlw	3
  4718  000AD0  0100               	movlb	0	; () banked
  4719  000AD2  1760               	andwf	??_sprintf& (0+255),f,b
  4720  000AD4  B4D8               	btfsc	status,2,c
  4721  000AD6  D008               	goto	l2980
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4725  000AD8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4726  000ADC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4727  000AE0  0E2D               	movlw	45
  4728  000AE2  6EDF               	movwf	indf2,c
  4729                           
  4730                           ; BSR set to: 0
  4731  000AE4  4A30               	infsnz	sprintf@sp,f,c
  4732  000AE6  2A31               	incf	sprintf@sp+1,f,c
  4733  000AE8                     l2980:
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;doprnt.c: 1469: }
  4737                           ;doprnt.c: 1472: prec = c;
  4738  000AE8  C06C  F066         	movff	sprintf@c,sprintf@prec
  4739                           
  4740                           ;doprnt.c: 1474: while(prec--) {
  4741  000AEC  D02B               	goto	l2988
  4742  000AEE                     l2982:
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;doprnt.c: 1478: {
  4746                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4747  000AEE  0100               	movlb	0	; () banked
  4748  000AF0  5166               	movf	sprintf@prec& (0+255),w,b
  4749  000AF2  0D02               	mullw	2
  4750  000AF4  0E01               	movlw	low _dpowers
  4751  000AF6  24F3               	addwf	prodl,w,c
  4752  000AF8  6EF6               	movwf	tblptrl,c
  4753  000AFA  0E03               	movlw	high _dpowers
  4754  000AFC  20F4               	addwfc	prodh,w,c
  4755  000AFE  6EF7               	movwf	tblptrh,c
  4756  000B00                     	if	0	;There are less than 3 active tblptr bytes
  4757  000B00                     	endif
  4758  000B00  0009               	tblrd		*+
  4759  000B02  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4760  000B06  000A               	tblrd		*-
  4761  000B08  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4762  000B0C  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4763  000B10  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4764  000B14  EC77  F00B         	call	___lwdiv	;wreg free
  4765  000B18  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4766  000B1C  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4767  000B20  0E00               	movlw	0
  4768  000B22  6E2E               	movwf	___lwmod@divisor+1,c
  4769  000B24  0E0A               	movlw	10
  4770  000B26  6E2D               	movwf	___lwmod@divisor,c
  4771  000B28  ECA0  F00B         	call	___lwmod	;wreg free
  4772  000B2C  502B               	movf	?___lwmod,w,c
  4773  000B2E  0F30               	addlw	48
  4774  000B30  0100               	movlb	0	; () banked
  4775  000B32  6F6C               	movwf	sprintf@c& (0+255),b
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;doprnt.c: 1523: }
  4779                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4780  000B34  C030  FFD9         	movff	sprintf@sp,fsr2l
  4781  000B38  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4782  000B3C  C06C  FFDF         	movff	sprintf@c,indf2
  4783                           
  4784                           ; BSR set to: 0
  4785  000B40  4A30               	infsnz	sprintf@sp,f,c
  4786  000B42  2A31               	incf	sprintf@sp+1,f,c
  4787  000B44                     l2988:
  4788                           
  4789                           ; BSR set to: 0
  4790  000B44  0100               	movlb	0	; () banked
  4791  000B46  0766               	decf	sprintf@prec& (0+255),f,b
  4792  000B48  0100               	movlb	0	; () banked
  4793  000B4A  2966               	incf	sprintf@prec& (0+255),w,b
  4794  000B4C  A4D8               	btfss	status,2,c
  4795  000B4E  D7CF               	goto	l2982
  4796  000B50                     l2990:
  4797  000B50  C032  FFF6         	movff	sprintf@f,tblptrl
  4798  000B54  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4799  000B58  4A32               	infsnz	sprintf@f,f,c
  4800  000B5A  2A33               	incf	sprintf@f+1,f,c
  4801  000B5C                     	if	0	;tblptru may be non-zero
  4802  000B5C                     	endif
  4803  000B5C                     	if	0	;tblptru may be non-zero
  4804  000B5C                     	endif
  4805  000B5C  0008               	tblrd		*
  4806  000B5E  CFF5 F06C          	movff	tablat,sprintf@c
  4807  000B62  0100               	movlb	0	; () banked
  4808  000B64  516C               	movf	sprintf@c& (0+255),w,b
  4809  000B66  A4D8               	btfss	status,2,c
  4810  000B68  D68B               	goto	l2884
  4811  000B6A                     l2992:
  4812                           
  4813                           ;doprnt.c: 1538: *sp = 0;
  4814  000B6A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4815  000B6E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4816  000B72  0E00               	movlw	0
  4817  000B74  6EDF               	movwf	indf2,c
  4818  000B76  0012               	return	
  4819  000B78                     __end_of_sprintf:
  4820                           	opt stack 0
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           indf1	equ	0xFE7
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840 ;; *************** function _isdigit *****************
  4841 ;; Defined at:
  4842 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  c               1    wreg     unsigned char 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  c               1   37[COMRAM] unsigned char 
  4847 ;; Return value:  Size  Location     Type
  4848 ;;		None               void
  4849 ;; Registers used:
  4850 ;;		wreg, status,2, status,0
  4851 ;; Tracked objects:
  4852 ;;		On entry : 0/0
  4853 ;;		On exit  : 0/0
  4854 ;;		Unchanged: 0/0
  4855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4856 ;;      Params:         0       0       0       0
  4857 ;;      Locals:         2       0       0       0
  4858 ;;      Temps:          1       0       0       0
  4859 ;;      Totals:         3       0       0       0
  4860 ;;Total ram usage:        3 bytes
  4861 ;; Hardware stack levels used:    1
  4862 ;; Hardware stack levels required when called:    3
  4863 ;; This function calls:
  4864 ;;		Nothing
  4865 ;; This function is called by:
  4866 ;;		_sprintf
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text18
  4871  00195A                     __ptext18:
  4872                           	opt stack 0
  4873  00195A                     _isdigit:
  4874                           	opt stack 26
  4875                           
  4876                           ;incstack = 0
  4877                           ;isdigit@c stored from wreg
  4878  00195A  6E26               	movwf	isdigit@c,c
  4879  00195C  0E00               	movlw	0
  4880  00195E  6E25               	movwf	_isdigit$1878,c
  4881  001960  0E3A               	movlw	58
  4882  001962  6026               	cpfslt	isdigit@c,c
  4883  001964  D005               	goto	l2060
  4884  001966  0E2F               	movlw	47
  4885  001968  6426               	cpfsgt	isdigit@c,c
  4886  00196A  D002               	goto	l2060
  4887  00196C  0E01               	movlw	1
  4888  00196E  6E25               	movwf	_isdigit$1878,c
  4889  001970                     l2060:
  4890  001970  C025  F024         	movff	_isdigit$1878,??_isdigit
  4891  001974  3024               	rrcf	??_isdigit,w,c
  4892  001976  0012               	return	
  4893  001978                     __end_of_isdigit:
  4894                           	opt stack 0
  4895                           tblptru	equ	0xFF8
  4896                           tblptrh	equ	0xFF7
  4897                           tblptrl	equ	0xFF6
  4898                           tablat	equ	0xFF5
  4899                           prodh	equ	0xFF4
  4900                           prodl	equ	0xFF3
  4901                           intcon	equ	0xFF2
  4902                           postinc0	equ	0xFEE
  4903                           wreg	equ	0xFE8
  4904                           indf1	equ	0xFE7
  4905                           fsr1h	equ	0xFE2
  4906                           fsr1l	equ	0xFE1
  4907                           indf2	equ	0xFDF
  4908                           postinc2	equ	0xFDE
  4909                           postdec2	equ	0xFDD
  4910                           fsr2h	equ	0xFDA
  4911                           fsr2l	equ	0xFD9
  4912                           status	equ	0xFD8
  4913                           
  4914 ;; *************** function ___wmul *****************
  4915 ;; Defined at:
  4916 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;  multiplier      2   35[COMRAM] unsigned int 
  4919 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  product         2   39[COMRAM] unsigned int 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  2   35[COMRAM] unsigned int 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0, prodl, prodh
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4931 ;;      Params:         4       0       0       0
  4932 ;;      Locals:         2       0       0       0
  4933 ;;      Temps:          0       0       0       0
  4934 ;;      Totals:         6       0       0       0
  4935 ;;Total ram usage:        6 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    3
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_setMotorPWM
  4942 ;;		_sprintf
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text19
  4947  001912                     __ptext19:
  4948                           	opt stack 0
  4949  001912                     ___wmul:
  4950                           	opt stack 25
  4951                           
  4952                           ;incstack = 0
  4953  001912  5024               	movf	___wmul@multiplier,w,c
  4954  001914  0226               	mulwf	___wmul@multiplicand,c
  4955  001916  CFF3 F028          	movff	prodl,___wmul@product
  4956  00191A  CFF4 F029          	movff	prodh,___wmul@product+1
  4957  00191E  5024               	movf	___wmul@multiplier,w,c
  4958  001920  0227               	mulwf	___wmul@multiplicand+1,c
  4959  001922  50F3               	movf	prodl,w,c
  4960  001924  2629               	addwf	___wmul@product+1,f,c
  4961  001926  5025               	movf	___wmul@multiplier+1,w,c
  4962  001928  0226               	mulwf	___wmul@multiplicand,c
  4963  00192A  50F3               	movf	prodl,w,c
  4964  00192C  2629               	addwf	___wmul@product+1,f,c
  4965  00192E  C028  F024         	movff	___wmul@product,?___wmul
  4966  001932  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4967  001936  0012               	return	
  4968  001938                     __end_of___wmul:
  4969                           	opt stack 0
  4970                           tblptru	equ	0xFF8
  4971                           tblptrh	equ	0xFF7
  4972                           tblptrl	equ	0xFF6
  4973                           tablat	equ	0xFF5
  4974                           prodh	equ	0xFF4
  4975                           prodl	equ	0xFF3
  4976                           intcon	equ	0xFF2
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           indf1	equ	0xFE7
  4980                           fsr1h	equ	0xFE2
  4981                           fsr1l	equ	0xFE1
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           fsr2h	equ	0xFDA
  4986                           fsr2l	equ	0xFD9
  4987                           status	equ	0xFD8
  4988                           
  4989 ;; *************** function ___lwmod *****************
  4990 ;; Defined at:
  4991 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  dividend        2   42[COMRAM] unsigned int 
  4994 ;;  divisor         2   44[COMRAM] unsigned int 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  counter         1   46[COMRAM] unsigned char 
  4997 ;; Return value:  Size  Location     Type
  4998 ;;                  2   42[COMRAM] unsigned int 
  4999 ;; Registers used:
  5000 ;;		wreg, status,2, status,0
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5006 ;;      Params:         4       0       0       0
  5007 ;;      Locals:         1       0       0       0
  5008 ;;      Temps:          0       0       0       0
  5009 ;;      Totals:         5       0       0       0
  5010 ;;Total ram usage:        5 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    3
  5013 ;; This function calls:
  5014 ;;		Nothing
  5015 ;; This function is called by:
  5016 ;;		_sprintf
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text20
  5021  001740                     __ptext20:
  5022                           	opt stack 0
  5023  001740                     ___lwmod:
  5024                           	opt stack 26
  5025                           
  5026                           ;incstack = 0
  5027  001740  502D               	movf	___lwmod@divisor,w,c
  5028  001742  102E               	iorwf	___lwmod@divisor+1,w,c
  5029  001744  B4D8               	btfsc	status,2,c
  5030  001746  D018               	goto	l867
  5031  001748  0E01               	movlw	1
  5032  00174A  6E2F               	movwf	___lwmod@counter,c
  5033  00174C  D004               	goto	l2092
  5034  00174E                     l2090:
  5035  00174E  90D8               	bcf	status,0,c
  5036  001750  362D               	rlcf	___lwmod@divisor,f,c
  5037  001752  362E               	rlcf	___lwmod@divisor+1,f,c
  5038  001754  2A2F               	incf	___lwmod@counter,f,c
  5039  001756                     l2092:
  5040  001756  AE2E               	btfss	___lwmod@divisor+1,7,c
  5041  001758  D7FA               	goto	l2090
  5042  00175A                     l2094:
  5043  00175A  502D               	movf	___lwmod@divisor,w,c
  5044  00175C  5C2B               	subwf	___lwmod@dividend,w,c
  5045  00175E  502E               	movf	___lwmod@divisor+1,w,c
  5046  001760  582C               	subwfb	___lwmod@dividend+1,w,c
  5047  001762  A0D8               	btfss	status,0,c
  5048  001764  D004               	goto	l2098
  5049  001766  502D               	movf	___lwmod@divisor,w,c
  5050  001768  5E2B               	subwf	___lwmod@dividend,f,c
  5051  00176A  502E               	movf	___lwmod@divisor+1,w,c
  5052  00176C  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5053  00176E                     l2098:
  5054  00176E  90D8               	bcf	status,0,c
  5055  001770  322E               	rrcf	___lwmod@divisor+1,f,c
  5056  001772  322D               	rrcf	___lwmod@divisor,f,c
  5057  001774  2E2F               	decfsz	___lwmod@counter,f,c
  5058  001776  D7F1               	goto	l2094
  5059  001778                     l867:
  5060  001778  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5061  00177C  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5062  001780  0012               	return		;funcret
  5063  001782                     __end_of___lwmod:
  5064                           	opt stack 0
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           postinc0	equ	0xFEE
  5073                           wreg	equ	0xFE8
  5074                           indf1	equ	0xFE7
  5075                           fsr1h	equ	0xFE2
  5076                           fsr1l	equ	0xFE1
  5077                           indf2	equ	0xFDF
  5078                           postinc2	equ	0xFDE
  5079                           postdec2	equ	0xFDD
  5080                           fsr2h	equ	0xFDA
  5081                           fsr2l	equ	0xFD9
  5082                           status	equ	0xFD8
  5083                           
  5084 ;; *************** function ___lwdiv *****************
  5085 ;; Defined at:
  5086 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  dividend        2   35[COMRAM] unsigned int 
  5089 ;;  divisor         2   37[COMRAM] unsigned int 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  quotient        2   39[COMRAM] unsigned int 
  5092 ;;  counter         1   41[COMRAM] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  2   35[COMRAM] unsigned int 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5102 ;;      Params:         4       0       0       0
  5103 ;;      Locals:         3       0       0       0
  5104 ;;      Temps:          0       0       0       0
  5105 ;;      Totals:         7       0       0       0
  5106 ;;Total ram usage:        7 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    3
  5109 ;; This function calls:
  5110 ;;		Nothing
  5111 ;; This function is called by:
  5112 ;;		_sprintf
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text21
  5117  0016EE                     __ptext21:
  5118                           	opt stack 0
  5119  0016EE                     ___lwdiv:
  5120                           	opt stack 26
  5121                           
  5122                           ;incstack = 0
  5123  0016EE  0E00               	movlw	0
  5124  0016F0  6E29               	movwf	___lwdiv@quotient+1,c
  5125  0016F2  0E00               	movlw	0
  5126  0016F4  6E28               	movwf	___lwdiv@quotient,c
  5127  0016F6  5026               	movf	___lwdiv@divisor,w,c
  5128  0016F8  1027               	iorwf	___lwdiv@divisor+1,w,c
  5129  0016FA  B4D8               	btfsc	status,2,c
  5130  0016FC  D01C               	goto	l857
  5131  0016FE  0E01               	movlw	1
  5132  001700  6E2A               	movwf	___lwdiv@counter,c
  5133  001702  D004               	goto	l2072
  5134  001704                     l2070:
  5135  001704  90D8               	bcf	status,0,c
  5136  001706  3626               	rlcf	___lwdiv@divisor,f,c
  5137  001708  3627               	rlcf	___lwdiv@divisor+1,f,c
  5138  00170A  2A2A               	incf	___lwdiv@counter,f,c
  5139  00170C                     l2072:
  5140  00170C  AE27               	btfss	___lwdiv@divisor+1,7,c
  5141  00170E  D7FA               	goto	l2070
  5142  001710                     l2074:
  5143  001710  90D8               	bcf	status,0,c
  5144  001712  3628               	rlcf	___lwdiv@quotient,f,c
  5145  001714  3629               	rlcf	___lwdiv@quotient+1,f,c
  5146  001716  5026               	movf	___lwdiv@divisor,w,c
  5147  001718  5C24               	subwf	___lwdiv@dividend,w,c
  5148  00171A  5027               	movf	___lwdiv@divisor+1,w,c
  5149  00171C  5825               	subwfb	___lwdiv@dividend+1,w,c
  5150  00171E  A0D8               	btfss	status,0,c
  5151  001720  D005               	goto	l2082
  5152  001722  5026               	movf	___lwdiv@divisor,w,c
  5153  001724  5E24               	subwf	___lwdiv@dividend,f,c
  5154  001726  5027               	movf	___lwdiv@divisor+1,w,c
  5155  001728  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5156  00172A  8028               	bsf	___lwdiv@quotient,0,c
  5157  00172C                     l2082:
  5158  00172C  90D8               	bcf	status,0,c
  5159  00172E  3227               	rrcf	___lwdiv@divisor+1,f,c
  5160  001730  3226               	rrcf	___lwdiv@divisor,f,c
  5161  001732  2E2A               	decfsz	___lwdiv@counter,f,c
  5162  001734  D7ED               	goto	l2074
  5163  001736                     l857:
  5164  001736  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5165  00173A  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5166  00173E  0012               	return		;funcret
  5167  001740                     __end_of___lwdiv:
  5168                           	opt stack 0
  5169                           tblptru	equ	0xFF8
  5170                           tblptrh	equ	0xFF7
  5171                           tblptrl	equ	0xFF6
  5172                           tablat	equ	0xFF5
  5173                           prodh	equ	0xFF4
  5174                           prodl	equ	0xFF3
  5175                           intcon	equ	0xFF2
  5176                           postinc0	equ	0xFEE
  5177                           wreg	equ	0xFE8
  5178                           indf1	equ	0xFE7
  5179                           fsr1h	equ	0xFE2
  5180                           fsr1l	equ	0xFE1
  5181                           indf2	equ	0xFDF
  5182                           postinc2	equ	0xFDE
  5183                           postdec2	equ	0xFDD
  5184                           fsr2h	equ	0xFDA
  5185                           fsr2l	equ	0xFD9
  5186                           status	equ	0xFD8
  5187                           
  5188 ;; *************** function _grabRightIR *****************
  5189 ;; Defined at:
  5190 ;;		line 74 in file "IR_Reading.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;		None
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5195 ;;  i               1   42[COMRAM] unsigned char 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  2   35[COMRAM] unsigned int 
  5198 ;; Registers used:
  5199 ;;		wreg, status,2, status,0
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5205 ;;      Params:         2       0       0       0
  5206 ;;      Locals:         3       0       0       0
  5207 ;;      Temps:          3       0       0       0
  5208 ;;      Totals:         8       0       0       0
  5209 ;;Total ram usage:        8 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:    3
  5212 ;; This function calls:
  5213 ;;		Nothing
  5214 ;; This function is called by:
  5215 ;;		_ScanIR
  5216 ;;		_ScanWithRange
  5217 ;;		_main
  5218 ;; This function uses a non-reentrant model
  5219 ;;
  5220                           
  5221                           	psect	text22
  5222  001508                     __ptext22:
  5223                           	opt stack 0
  5224  001508                     _grabRightIR:
  5225                           	opt stack 27
  5226                           
  5227                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5228                           
  5229                           ;incstack = 0
  5230  001508  0E00               	movlw	0
  5231  00150A  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5232  00150C  0E00               	movlw	0
  5233  00150E  6E29               	movwf	grabRightIR@IR_signal,c
  5234                           
  5235                           ;IR_Reading.c: 77: unsigned char i=0;
  5236  001510  0E00               	movlw	0
  5237  001512  6E2B               	movwf	grabRightIR@i,c
  5238                           
  5239                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5240  001514  0E00               	movlw	0
  5241  001516  6E2B               	movwf	grabRightIR@i,c
  5242  001518                     l2116:
  5243  001518  0E03               	movlw	3
  5244  00151A  642B               	cpfsgt	grabRightIR@i,c
  5245  00151C  D001               	goto	l2120
  5246  00151E  D01E               	goto	l2126
  5247  001520                     l2120:
  5248                           
  5249                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5250  001520  5069               	movf	3945,w,c	;volatile
  5251  001522  6E26               	movwf	??_grabRightIR& (0+255),c
  5252  001524  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5253  001526  0E07               	movlw	7
  5254  001528                     u1465:
  5255  001528  90D8               	bcf	status,0,c
  5256  00152A  3626               	rlcf	??_grabRightIR,f,c
  5257  00152C  3627               	rlcf	??_grabRightIR+1,f,c
  5258  00152E  2EE8               	decfsz	wreg,f,c
  5259  001530  D7FB               	goto	u1465
  5260  001532  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5261  001536  90D8               	bcf	status,0,c
  5262  001538  3228               	rrcf	??_grabRightIR+2,f,c
  5263  00153A  5028               	movf	??_grabRightIR+2,w,c
  5264  00153C  1226               	iorwf	??_grabRightIR,f,c
  5265  00153E  0E00               	movlw	0
  5266  001540  1227               	iorwf	??_grabRightIR+1,f,c
  5267  001542  5026               	movf	??_grabRightIR,w,c
  5268  001544  2629               	addwf	grabRightIR@IR_signal,f,c
  5269  001546  5027               	movf	??_grabRightIR+1,w,c
  5270  001548  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5271                           
  5272                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5273  00154A  0E82               	movlw	130
  5274  00154C  6E26               	movwf	??_grabRightIR& (0+255),c
  5275  00154E  0EDE               	movlw	222
  5276  001550                     u3057:
  5277  001550  2EE8               	decfsz	wreg,f,c
  5278  001552  D7FE               	goto	u3057
  5279  001554  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5280  001556  D7FC               	goto	u3057
  5281  001558  2A2B               	incf	grabRightIR@i,f,c
  5282  00155A  D7DE               	goto	l2116
  5283  00155C                     l2126:
  5284                           
  5285                           ;IR_Reading.c: 83: }
  5286                           ;IR_Reading.c: 85: return IR_signal>>2;
  5287  00155C  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5288  001560  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5289  001564  90D8               	bcf	status,0,c
  5290  001566  3227               	rrcf	??_grabRightIR+1,f,c
  5291  001568  3226               	rrcf	??_grabRightIR,f,c
  5292  00156A  90D8               	bcf	status,0,c
  5293  00156C  3227               	rrcf	??_grabRightIR+1,f,c
  5294  00156E  3226               	rrcf	??_grabRightIR,f,c
  5295  001570  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5296  001574  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5297  001578  0012               	return	
  5298  00157A                     __end_of_grabRightIR:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           postinc0	equ	0xFEE
  5308                           wreg	equ	0xFE8
  5309                           indf1	equ	0xFE7
  5310                           fsr1h	equ	0xFE2
  5311                           fsr1l	equ	0xFE1
  5312                           indf2	equ	0xFDF
  5313                           postinc2	equ	0xFDE
  5314                           postdec2	equ	0xFDD
  5315                           fsr2h	equ	0xFDA
  5316                           fsr2l	equ	0xFD9
  5317                           status	equ	0xFD8
  5318                           
  5319 ;; *************** function _grabLeftIR *****************
  5320 ;; Defined at:
  5321 ;;		line 90 in file "IR_Reading.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;		None
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5326 ;;  i               1   42[COMRAM] unsigned char 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  2   35[COMRAM] unsigned int 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2, status,0
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5336 ;;      Params:         2       0       0       0
  5337 ;;      Locals:         3       0       0       0
  5338 ;;      Temps:          3       0       0       0
  5339 ;;      Totals:         8       0       0       0
  5340 ;;Total ram usage:        8 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; Hardware stack levels required when called:    3
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		_ScanIR
  5347 ;;		_ScanWithRange
  5348 ;;		_main
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text23
  5353  00157A                     __ptext23:
  5354                           	opt stack 0
  5355  00157A                     _grabLeftIR:
  5356                           	opt stack 27
  5357                           
  5358                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5359                           
  5360                           ;incstack = 0
  5361  00157A  0E00               	movlw	0
  5362  00157C  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5363  00157E  0E00               	movlw	0
  5364  001580  6E29               	movwf	grabLeftIR@IR_signal,c
  5365                           
  5366                           ;IR_Reading.c: 93: unsigned char i=0;
  5367  001582  0E00               	movlw	0
  5368  001584  6E2B               	movwf	grabLeftIR@i,c
  5369                           
  5370                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5371  001586  0E00               	movlw	0
  5372  001588  6E2B               	movwf	grabLeftIR@i,c
  5373  00158A                     l2132:
  5374  00158A  0E03               	movlw	3
  5375  00158C  642B               	cpfsgt	grabLeftIR@i,c
  5376  00158E  D001               	goto	l2136
  5377  001590  D01E               	goto	l2142
  5378  001592                     l2136:
  5379                           
  5380                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5381  001592  5067               	movf	3943,w,c	;volatile
  5382  001594  6E26               	movwf	??_grabLeftIR& (0+255),c
  5383  001596  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5384  001598  0E07               	movlw	7
  5385  00159A                     u1495:
  5386  00159A  90D8               	bcf	status,0,c
  5387  00159C  3626               	rlcf	??_grabLeftIR,f,c
  5388  00159E  3627               	rlcf	??_grabLeftIR+1,f,c
  5389  0015A0  2EE8               	decfsz	wreg,f,c
  5390  0015A2  D7FB               	goto	u1495
  5391  0015A4  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5392  0015A8  90D8               	bcf	status,0,c
  5393  0015AA  3228               	rrcf	??_grabLeftIR+2,f,c
  5394  0015AC  5028               	movf	??_grabLeftIR+2,w,c
  5395  0015AE  1226               	iorwf	??_grabLeftIR,f,c
  5396  0015B0  0E00               	movlw	0
  5397  0015B2  1227               	iorwf	??_grabLeftIR+1,f,c
  5398  0015B4  5026               	movf	??_grabLeftIR,w,c
  5399  0015B6  2629               	addwf	grabLeftIR@IR_signal,f,c
  5400  0015B8  5027               	movf	??_grabLeftIR+1,w,c
  5401  0015BA  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5402                           
  5403                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5404  0015BC  0E82               	movlw	130
  5405  0015BE  6E26               	movwf	??_grabLeftIR& (0+255),c
  5406  0015C0  0EDE               	movlw	222
  5407  0015C2                     u3067:
  5408  0015C2  2EE8               	decfsz	wreg,f,c
  5409  0015C4  D7FE               	goto	u3067
  5410  0015C6  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5411  0015C8  D7FC               	goto	u3067
  5412  0015CA  2A2B               	incf	grabLeftIR@i,f,c
  5413  0015CC  D7DE               	goto	l2132
  5414  0015CE                     l2142:
  5415                           
  5416                           ;IR_Reading.c: 99: }
  5417                           ;IR_Reading.c: 101: return IR_signal>>2;
  5418  0015CE  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5419  0015D2  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5420  0015D6  90D8               	bcf	status,0,c
  5421  0015D8  3227               	rrcf	??_grabLeftIR+1,f,c
  5422  0015DA  3226               	rrcf	??_grabLeftIR,f,c
  5423  0015DC  90D8               	bcf	status,0,c
  5424  0015DE  3227               	rrcf	??_grabLeftIR+1,f,c
  5425  0015E0  3226               	rrcf	??_grabLeftIR,f,c
  5426  0015E2  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5427  0015E6  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5428  0015EA  0012               	return	
  5429  0015EC                     __end_of_grabLeftIR:
  5430                           	opt stack 0
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           prodh	equ	0xFF4
  5436                           prodl	equ	0xFF3
  5437                           intcon	equ	0xFF2
  5438                           postinc0	equ	0xFEE
  5439                           wreg	equ	0xFE8
  5440                           indf1	equ	0xFE7
  5441                           fsr1h	equ	0xFE2
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _SetLine *****************
  5451 ;; Defined at:
  5452 ;;		line 74 in file "LCD.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  line            1    wreg     unsigned char 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  line            1   41[COMRAM] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;		None               void
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5466 ;;      Params:         0       0       0       0
  5467 ;;      Locals:         1       0       0       0
  5468 ;;      Temps:          0       0       0       0
  5469 ;;      Totals:         1       0       0       0
  5470 ;;Total ram usage:        1 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    6
  5473 ;; This function calls:
  5474 ;;		_SendLCD
  5475 ;; This function is called by:
  5476 ;;		_ScanIR
  5477 ;;		_ScanWithRange
  5478 ;;		_main
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text24
  5483  001862                     __ptext24:
  5484                           	opt stack 0
  5485  001862                     _SetLine:
  5486                           	opt stack 24
  5487                           
  5488                           ;incstack = 0
  5489                           ;SetLine@line stored from wreg
  5490  001862  6E2A               	movwf	SetLine@line,c
  5491                           
  5492                           ;LCD.c: 75: if (line==1) {
  5493  001864  042A               	decf	SetLine@line,w,c
  5494  001866  A4D8               	btfss	status,2,c
  5495  001868  D006               	goto	l2150
  5496                           
  5497                           ;LCD.c: 76: SendLCD(0x80,0);
  5498  00186A  0E00               	movlw	0
  5499  00186C  6E28               	movwf	SendLCD@type,c
  5500  00186E  0E80               	movlw	128
  5501  001870  EC49  F00C         	call	_SendLCD
  5502                           
  5503                           ;LCD.c: 77: } else if (line==2) {
  5504  001874  D009               	goto	l2154
  5505  001876                     l2150:
  5506  001876  0E02               	movlw	2
  5507  001878  182A               	xorwf	SetLine@line,w,c
  5508  00187A  A4D8               	btfss	status,2,c
  5509  00187C  D005               	goto	l2154
  5510                           
  5511                           ;LCD.c: 78: SendLCD(0xC0,0);
  5512  00187E  0E00               	movlw	0
  5513  001880  6E28               	movwf	SendLCD@type,c
  5514  001882  0EC0               	movlw	192
  5515  001884  EC49  F00C         	call	_SendLCD
  5516  001888                     l2154:
  5517                           
  5518                           ;LCD.c: 79: }
  5519                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5520  001888  0E21               	movlw	33
  5521  00188A                     u3077:
  5522  00188A  2EE8               	decfsz	wreg,f,c
  5523  00188C  D7FE               	goto	u3077
  5524  00188E  F000               	nop	
  5525  001890  0012               	return		;funcret
  5526  001892                     __end_of_SetLine:
  5527                           	opt stack 0
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           intcon	equ	0xFF2
  5535                           postinc0	equ	0xFEE
  5536                           wreg	equ	0xFE8
  5537                           indf1	equ	0xFE7
  5538                           fsr1h	equ	0xFE2
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _LCD_String *****************
  5548 ;; Defined at:
  5549 ;;		line 83 in file "LCD.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  string          2   41[COMRAM] PTR unsigned char 
  5552 ;;		 -> STR_9(11), STR_8(12), STR_7(10), main@buf(40), 
  5553 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5554 ;;		 -> STR_1(12), 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;		None
  5557 ;; Return value:  Size  Location     Type
  5558 ;;		None               void
  5559 ;; Registers used:
  5560 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5566 ;;      Params:         2       0       0       0
  5567 ;;      Locals:         0       0       0       0
  5568 ;;      Temps:          0       0       0       0
  5569 ;;      Totals:         2       0       0       0
  5570 ;;Total ram usage:        2 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    6
  5573 ;; This function calls:
  5574 ;;		_SendLCD
  5575 ;; This function is called by:
  5576 ;;		_ScanIR
  5577 ;;		_ScanWithRange
  5578 ;;		_main
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text25
  5583  0015EC                     __ptext25:
  5584                           	opt stack 0
  5585  0015EC                     _LCD_String:
  5586                           	opt stack 23
  5587                           
  5588                           ;LCD.c: 85: while(*string != 0){
  5589                           
  5590                           ;incstack = 0
  5591  0015EC  D01A               	goto	l2164
  5592  0015EE                     l2158:
  5593                           
  5594                           ;LCD.c: 88: SendLCD(*string++,1);
  5595  0015EE  0E01               	movlw	1
  5596  0015F0  6E28               	movwf	SendLCD@type,c
  5597  0015F2  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5598  0015F6  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5599  0015FA  6AF8               	clrf	tblptru,c
  5600  0015FC  0E02               	movlw	(high __ramtop+-1)
  5601  0015FE  64F7               	cpfsgt	tblptrh,c
  5602  001600  D003               	bra	u1537
  5603  001602  0008               	tblrd		*
  5604  001604  50F5               	movf	tablat,w,c
  5605  001606  D005               	bra	u1530
  5606  001608                     u1537:
  5607  001608  CFF6 FFE1          	movff	tblptrl,fsr1l
  5608  00160C  CFF7 FFE2          	movff	tblptrh,fsr1h
  5609  001610  50E7               	movf	indf1,w,c
  5610  001612                     u1530:
  5611  001612  EC49  F00C         	call	_SendLCD
  5612  001616  4A2A               	infsnz	LCD_String@string,f,c
  5613  001618  2A2B               	incf	LCD_String@string+1,f,c
  5614                           
  5615                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5616  00161A  0E21               	movlw	33
  5617  00161C                     u3087:
  5618  00161C  2EE8               	decfsz	wreg,f,c
  5619  00161E  D7FE               	goto	u3087
  5620  001620  F000               	nop	
  5621  001622                     l2164:
  5622  001622  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5623  001626  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5624  00162A  6AF8               	clrf	tblptru,c
  5625  00162C  0E02               	movlw	(high __ramtop+-1)
  5626  00162E  64F7               	cpfsgt	tblptrh,c
  5627  001630  D003               	bra	u1547
  5628  001632  0008               	tblrd		*
  5629  001634  50F5               	movf	tablat,w,c
  5630  001636  D005               	bra	u1540
  5631  001638                     u1547:
  5632  001638  CFF6 FFE1          	movff	tblptrl,fsr1l
  5633  00163C  CFF7 FFE2          	movff	tblptrh,fsr1h
  5634  001640  50E7               	movf	indf1,w,c
  5635  001642                     u1540:
  5636  001642  0900               	iorlw	0
  5637  001644  B4D8               	btfsc	status,2,c
  5638  001646  0012               	return	
  5639  001648  D7D2               	goto	l2158
  5640  00164A                     __end_of_LCD_String:
  5641                           	opt stack 0
  5642                           tblptru	equ	0xFF8
  5643                           tblptrh	equ	0xFF7
  5644                           tblptrl	equ	0xFF6
  5645                           tablat	equ	0xFF5
  5646                           prodh	equ	0xFF4
  5647                           prodl	equ	0xFF3
  5648                           intcon	equ	0xFF2
  5649                           postinc0	equ	0xFEE
  5650                           wreg	equ	0xFE8
  5651                           indf1	equ	0xFE7
  5652                           fsr1h	equ	0xFE2
  5653                           fsr1l	equ	0xFE1
  5654                           indf2	equ	0xFDF
  5655                           postinc2	equ	0xFDE
  5656                           postdec2	equ	0xFDD
  5657                           fsr2h	equ	0xFDA
  5658                           fsr2l	equ	0xFD9
  5659                           status	equ	0xFD8
  5660                           
  5661 ;; *************** function _SendLCD *****************
  5662 ;; Defined at:
  5663 ;;		line 27 in file "LCD.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;  Byte            1    wreg     unsigned char 
  5666 ;;  type            1   39[COMRAM] unsigned char 
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;  Byte            1   40[COMRAM] unsigned char 
  5669 ;; Return value:  Size  Location     Type
  5670 ;;		None               void
  5671 ;; Registers used:
  5672 ;;		wreg, status,2, status,0, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5678 ;;      Params:         1       0       0       0
  5679 ;;      Locals:         1       0       0       0
  5680 ;;      Temps:          0       0       0       0
  5681 ;;      Totals:         2       0       0       0
  5682 ;;Total ram usage:        2 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    5
  5685 ;; This function calls:
  5686 ;;		_LCDout
  5687 ;; This function is called by:
  5688 ;;		_initLCD
  5689 ;;		_SetLine
  5690 ;;		_LCD_String
  5691 ;;		_ScanIR
  5692 ;;		_ScanWithRange
  5693 ;;		_main
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text26
  5698  001892                     __ptext26:
  5699                           	opt stack 0
  5700  001892                     _SendLCD:
  5701                           	opt stack 24
  5702                           
  5703                           ;incstack = 0
  5704                           ;SendLCD@Byte stored from wreg
  5705  001892  6E29               	movwf	SendLCD@Byte,c
  5706                           
  5707                           ;LCD.c: 30: LATAbits.LATA6=type;
  5708  001894  B028               	btfsc	SendLCD@type,0,c
  5709  001896  D002               	bra	u1365
  5710  001898  9C89               	bcf	3977,6,c	;volatile
  5711  00189A  D001               	bra	u1366
  5712  00189C                     u1365:
  5713  00189C  8C89               	bsf	3977,6,c	;volatile
  5714  00189E                     u1366:
  5715                           
  5716                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5717  00189E  3829               	swapf	SendLCD@Byte,w,c
  5718  0018A0  0B0F               	andlw	15
  5719  0018A2  0B0F               	andlw	15
  5720  0018A4  EC58  F008         	call	_LCDout
  5721                           
  5722                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5723  0018A8  0E06               	movlw	6
  5724  0018AA                     u3097:
  5725  0018AA  2EE8               	decfsz	wreg,f,c
  5726  0018AC  D7FE               	goto	u3097
  5727  0018AE  D000               	nop2		;nop
  5728                           
  5729                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5730  0018B0  5029               	movf	SendLCD@Byte,w,c
  5731  0018B2  0B0F               	andlw	15
  5732  0018B4  EC58  F008         	call	_LCDout
  5733                           
  5734                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5735  0018B8  0E21               	movlw	33
  5736  0018BA                     u3107:
  5737  0018BA  2EE8               	decfsz	wreg,f,c
  5738  0018BC  D7FE               	goto	u3107
  5739  0018BE  F000               	nop	
  5740  0018C0  0012               	return		;funcret
  5741  0018C2                     __end_of_SendLCD:
  5742                           	opt stack 0
  5743                           tblptru	equ	0xFF8
  5744                           tblptrh	equ	0xFF7
  5745                           tblptrl	equ	0xFF6
  5746                           tablat	equ	0xFF5
  5747                           prodh	equ	0xFF4
  5748                           prodl	equ	0xFF3
  5749                           intcon	equ	0xFF2
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           indf1	equ	0xFE7
  5753                           fsr1h	equ	0xFE2
  5754                           fsr1l	equ	0xFE1
  5755                           indf2	equ	0xFDF
  5756                           postinc2	equ	0xFDE
  5757                           postdec2	equ	0xFDD
  5758                           fsr2h	equ	0xFDA
  5759                           fsr2l	equ	0xFD9
  5760                           status	equ	0xFD8
  5761                           
  5762 ;; *************** function _LCDout *****************
  5763 ;; Defined at:
  5764 ;;		line 14 in file "LCD.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  number          1    wreg     unsigned char 
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;  number          1   38[COMRAM] unsigned char 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;		None               void
  5771 ;; Registers used:
  5772 ;;		wreg, status,2, status,0, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5778 ;;      Params:         0       0       0       0
  5779 ;;      Locals:         1       0       0       0
  5780 ;;      Temps:          3       0       0       0
  5781 ;;      Totals:         4       0       0       0
  5782 ;;Total ram usage:        4 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    4
  5785 ;; This function calls:
  5786 ;;		_E_TOG
  5787 ;; This function is called by:
  5788 ;;		_SendLCD
  5789 ;;		_initLCD
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text27
  5794  0010B0                     __ptext27:
  5795                           	opt stack 0
  5796  0010B0                     _LCDout:
  5797                           	opt stack 24
  5798                           
  5799                           ;incstack = 0
  5800                           ;LCDout@number stored from wreg
  5801  0010B0  6E27               	movwf	LCDout@number,c
  5802                           
  5803                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5804  0010B2  5027               	movf	LCDout@number,w,c
  5805  0010B4  6E24               	movwf	??_LCDout& (0+255),c
  5806  0010B6  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5807  0010B8  0E07               	movlw	7
  5808  0010BA                     u1215:
  5809  0010BA  90D8               	bcf	status,0,c
  5810  0010BC  3624               	rlcf	??_LCDout,f,c
  5811  0010BE  3625               	rlcf	??_LCDout+1,f,c
  5812  0010C0  2EE8               	decfsz	wreg,f,c
  5813  0010C2  D7FB               	goto	u1215
  5814  0010C4  0E07               	movlw	7
  5815  0010C6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5816  0010C8                     u1225:
  5817  0010C8  3425               	rlcf	??_LCDout+1,w,c
  5818  0010CA  3225               	rrcf	??_LCDout+1,f,c
  5819  0010CC  3224               	rrcf	??_LCDout,f,c
  5820  0010CE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5821  0010D0  D7FB               	goto	u1225
  5822  0010D2  4624               	rlncf	??_LCDout,f,c
  5823  0010D4  508B               	movf	3979,w,c	;volatile
  5824  0010D6  1824               	xorwf	??_LCDout,w,c
  5825  0010D8  0BFD               	andlw	-3
  5826  0010DA  1824               	xorwf	??_LCDout,w,c
  5827  0010DC  6E8B               	movwf	3979,c	;volatile
  5828                           
  5829                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5830  0010DE  5027               	movf	LCDout@number,w,c
  5831  0010E0  6E24               	movwf	??_LCDout& (0+255),c
  5832  0010E2  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5833  0010E4  0E06               	movlw	6
  5834  0010E6                     u1235:
  5835  0010E6  90D8               	bcf	status,0,c
  5836  0010E8  3624               	rlcf	??_LCDout,f,c
  5837  0010EA  3625               	rlcf	??_LCDout+1,f,c
  5838  0010EC  2EE8               	decfsz	wreg,f,c
  5839  0010EE  D7FB               	goto	u1235
  5840  0010F0  0E07               	movlw	7
  5841  0010F2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5842  0010F4                     u1245:
  5843  0010F4  3425               	rlcf	??_LCDout+1,w,c
  5844  0010F6  3225               	rrcf	??_LCDout+1,f,c
  5845  0010F8  3224               	rrcf	??_LCDout,f,c
  5846  0010FA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5847  0010FC  D7FB               	goto	u1245
  5848  0010FE  4624               	rlncf	??_LCDout,f,c
  5849  001100  4624               	rlncf	??_LCDout,f,c
  5850  001102  508B               	movf	3979,w,c	;volatile
  5851  001104  1824               	xorwf	??_LCDout,w,c
  5852  001106  0BFB               	andlw	-5
  5853  001108  1824               	xorwf	??_LCDout,w,c
  5854  00110A  6E8B               	movwf	3979,c	;volatile
  5855                           
  5856                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5857  00110C  5027               	movf	LCDout@number,w,c
  5858  00110E  6E24               	movwf	??_LCDout& (0+255),c
  5859  001110  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5860  001112  0E05               	movlw	5
  5861  001114                     u1255:
  5862  001114  90D8               	bcf	status,0,c
  5863  001116  3624               	rlcf	??_LCDout,f,c
  5864  001118  3625               	rlcf	??_LCDout+1,f,c
  5865  00111A  2EE8               	decfsz	wreg,f,c
  5866  00111C  D7FB               	goto	u1255
  5867  00111E  0E07               	movlw	7
  5868  001120  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5869  001122                     u1265:
  5870  001122  3425               	rlcf	??_LCDout+1,w,c
  5871  001124  3225               	rrcf	??_LCDout+1,f,c
  5872  001126  3224               	rrcf	??_LCDout,f,c
  5873  001128  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5874  00112A  D7FB               	goto	u1265
  5875  00112C  508C               	movf	3980,w,c	;volatile
  5876  00112E  1824               	xorwf	??_LCDout,w,c
  5877  001130  0BFE               	andlw	-2
  5878  001132  1824               	xorwf	??_LCDout,w,c
  5879  001134  6E8C               	movwf	3980,c	;volatile
  5880                           
  5881                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  5882  001136  5027               	movf	LCDout@number,w,c
  5883  001138  6E24               	movwf	??_LCDout& (0+255),c
  5884  00113A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5885  00113C  3A24               	swapf	??_LCDout,f,c
  5886  00113E  3A25               	swapf	??_LCDout+1,f,c
  5887  001140  0EF0               	movlw	240
  5888  001142  1625               	andwf	??_LCDout+1,f,c
  5889  001144  5024               	movf	??_LCDout,w,c
  5890  001146  0B0F               	andlw	15
  5891  001148  1225               	iorwf	??_LCDout+1,f,c
  5892  00114A  0EF0               	movlw	240
  5893  00114C  1624               	andwf	??_LCDout,f,c
  5894  00114E  0E07               	movlw	7
  5895  001150  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5896  001152                     u1275:
  5897  001152  3425               	rlcf	??_LCDout+1,w,c
  5898  001154  3225               	rrcf	??_LCDout+1,f,c
  5899  001156  3224               	rrcf	??_LCDout,f,c
  5900  001158  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5901  00115A  D7FB               	goto	u1275
  5902  00115C  4624               	rlncf	??_LCDout,f,c
  5903  00115E  508C               	movf	3980,w,c	;volatile
  5904  001160  1824               	xorwf	??_LCDout,w,c
  5905  001162  0BFD               	andlw	-3
  5906  001164  1824               	xorwf	??_LCDout,w,c
  5907  001166  6E8C               	movwf	3980,c	;volatile
  5908                           
  5909                           ;LCD.c: 21: E_TOG();
  5910  001168  ECCA  F00C         	call	_E_TOG	;wreg free
  5911                           
  5912                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5913  00116C  0E03               	movlw	3
  5914  00116E                     u3117:
  5915  00116E  2EE8               	decfsz	wreg,f,c
  5916  001170  D7FE               	goto	u3117
  5917  001172  F000               	nop	
  5918  001174  0012               	return		;funcret
  5919  001176                     __end_of_LCDout:
  5920                           	opt stack 0
  5921                           tblptru	equ	0xFF8
  5922                           tblptrh	equ	0xFF7
  5923                           tblptrl	equ	0xFF6
  5924                           tablat	equ	0xFF5
  5925                           prodh	equ	0xFF4
  5926                           prodl	equ	0xFF3
  5927                           intcon	equ	0xFF2
  5928                           postinc0	equ	0xFEE
  5929                           wreg	equ	0xFE8
  5930                           indf1	equ	0xFE7
  5931                           fsr1h	equ	0xFE2
  5932                           fsr1l	equ	0xFE1
  5933                           indf2	equ	0xFDF
  5934                           postinc2	equ	0xFDE
  5935                           postdec2	equ	0xFDD
  5936                           fsr2h	equ	0xFDA
  5937                           fsr2l	equ	0xFD9
  5938                           status	equ	0xFD8
  5939                           
  5940 ;; *************** function _E_TOG *****************
  5941 ;; Defined at:
  5942 ;;		line 5 in file "LCD.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;		None               void
  5949 ;; Registers used:
  5950 ;;		wreg
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5956 ;;      Params:         0       0       0       0
  5957 ;;      Locals:         0       0       0       0
  5958 ;;      Temps:          0       0       0       0
  5959 ;;      Totals:         0       0       0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    3
  5963 ;; This function calls:
  5964 ;;		Nothing
  5965 ;; This function is called by:
  5966 ;;		_LCDout
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text28
  5971  001994                     __ptext28:
  5972                           	opt stack 0
  5973  001994                     _E_TOG:
  5974                           	opt stack 24
  5975                           
  5976                           ;LCD.c: 8: LATCbits.LATC0=1;
  5977                           
  5978                           ;incstack = 0
  5979  001994  808B               	bsf	3979,0,c	;volatile
  5980                           
  5981                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5982  001996  0E03               	movlw	3
  5983  001998                     u3127:
  5984  001998  2EE8               	decfsz	wreg,f,c
  5985  00199A  D7FE               	goto	u3127
  5986  00199C  F000               	nop	
  5987                           
  5988                           ;LCD.c: 10: LATCbits.LATC0=0;
  5989  00199E  908B               	bcf	3979,0,c	;volatile
  5990  0019A0  0012               	return		;funcret
  5991  0019A2                     __end_of_E_TOG:
  5992                           	opt stack 0
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           intcon	equ	0xFF2
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           indf1	equ	0xFE7
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _InterruptHandlerLow *****************
  6013 ;; Defined at:
  6014 ;;		line 18 in file "main.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6028 ;;      Params:         0       0       0       0
  6029 ;;      Locals:         0       0       0       0
  6030 ;;      Temps:         17       0       0       0
  6031 ;;      Totals:        17       0       0       0
  6032 ;;Total ram usage:       17 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    2
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		Interrupt level 1
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	intcodelo
  6043  000018                     __pintcodelo:
  6044                           	opt stack 0
  6045  000018                     _InterruptHandlerLow:
  6046                           	opt stack 23
  6047                           
  6048                           ;incstack = 0
  6049  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6050  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6051  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6052  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6053  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6054  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6055  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6056  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6057  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6058  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6059  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6060  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6061  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6062  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6063  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6064  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6065  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6066  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6067                           
  6068                           ;main.c: 20: if (PIR1bits.RCIF) {
  6069  00005E  AA9E               	btfss	3998,5,c	;volatile
  6070  000060  D016               	goto	i1l356
  6071                           
  6072                           ;main.c: 21: ReceivedString[i]=RCREG;
  6073  000062  503A               	movf	_i,w,c	;volatile
  6074  000064  0D01               	mullw	1
  6075  000066  0EC0               	movlw	low _ReceivedString
  6076  000068  24F3               	addwf	prodl,w,c
  6077  00006A  6ED9               	movwf	fsr2l,c
  6078  00006C  0E00               	movlw	high _ReceivedString
  6079  00006E  20F4               	addwfc	prodh,w,c
  6080  000070  6EDA               	movwf	fsr2h,c
  6081  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6082                           
  6083                           ;main.c: 22: RFID_Read=1;
  6084  000076  0E01               	movlw	1
  6085  000078  0101               	movlb	1	; () banked
  6086  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6087                           
  6088                           ; BSR set to: 1
  6089                           ;main.c: 23: if (i==15){
  6090  00007C  0E0F               	movlw	15
  6091  00007E  183A               	xorwf	_i,w,c	;volatile
  6092  000080  A4D8               	btfss	status,2,c
  6093  000082  D003               	goto	i1l2570
  6094                           
  6095                           ; BSR set to: 1
  6096                           ;main.c: 24: i=0;
  6097  000084  0E00               	movlw	0
  6098  000086  6E3A               	movwf	_i,c	;volatile
  6099                           
  6100                           ;main.c: 25: }else{
  6101  000088  D001               	goto	i1l2572
  6102  00008A                     i1l2570:
  6103                           
  6104                           ; BSR set to: 1
  6105                           ;main.c: 26: i++;
  6106  00008A  2A3A               	incf	_i,f,c	;volatile
  6107  00008C                     i1l2572:
  6108                           
  6109                           ; BSR set to: 1
  6110                           ;main.c: 27: }
  6111                           ;main.c: 28: PIR1bits.RCIF=0;
  6112  00008C  9A9E               	bcf	3998,5,c	;volatile
  6113  00008E                     i1l356:
  6114  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6115  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6116  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6117  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6118  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6119  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6120  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6121  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6122  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6123  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6124  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6125  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6126  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6127  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6128  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6129  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6130  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6131  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6132  0000D4  0010               	retfie	
  6133  0000D6                     __end_of_InterruptHandlerLow:
  6134                           	opt stack 0
  6135                           pclatu	equ	0xFFB
  6136                           pclath	equ	0xFFA
  6137                           tblptru	equ	0xFF8
  6138                           tblptrh	equ	0xFF7
  6139                           tblptrl	equ	0xFF6
  6140                           tablat	equ	0xFF5
  6141                           prodh	equ	0xFF4
  6142                           prodl	equ	0xFF3
  6143                           intcon	equ	0xFF2
  6144                           postinc0	equ	0xFEE
  6145                           fsr0h	equ	0xFEA
  6146                           fsr0l	equ	0xFE9
  6147                           wreg	equ	0xFE8
  6148                           indf1	equ	0xFE7
  6149                           fsr1h	equ	0xFE2
  6150                           fsr1l	equ	0xFE1
  6151                           bsr	equ	0xFE0
  6152                           indf2	equ	0xFDF
  6153                           postinc2	equ	0xFDE
  6154                           postdec2	equ	0xFDD
  6155                           fsr2h	equ	0xFDA
  6156                           fsr2l	equ	0xFD9
  6157                           status	equ	0xFD8
  6158                           
  6159 ;; *************** function _InterruptHandlerHigh *****************
  6160 ;; Defined at:
  6161 ;;		line 34 in file "main.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;		None
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;		None               void
  6168 ;; Registers used:
  6169 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6175 ;;      Params:         0       0       0       0
  6176 ;;      Locals:         0       0       0       0
  6177 ;;      Temps:         14       0       0       0
  6178 ;;      Totals:        14       0       0       0
  6179 ;;Total ram usage:       14 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    1
  6182 ;; This function calls:
  6183 ;;		i2_delay_tenth_s
  6184 ;; This function is called by:
  6185 ;;		Interrupt level 2
  6186 ;; This function uses a non-reentrant model
  6187 ;;
  6188                           
  6189                           	psect	intcode
  6190  000008                     __pintcode:
  6191                           	opt stack 0
  6192  000008                     _InterruptHandlerHigh:
  6193                           	opt stack 23
  6194                           
  6195                           ;incstack = 0
  6196  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6197  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6198  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6199  000012  EFBD  F009         	goto	int_func
  6200                           pclatu	equ	0xFFB
  6201                           pclath	equ	0xFFA
  6202                           tblptru	equ	0xFF8
  6203                           tblptrh	equ	0xFF7
  6204                           tblptrl	equ	0xFF6
  6205                           tablat	equ	0xFF5
  6206                           prodh	equ	0xFF4
  6207                           prodl	equ	0xFF3
  6208                           intcon	equ	0xFF2
  6209                           postinc0	equ	0xFEE
  6210                           fsr0h	equ	0xFEA
  6211                           fsr0l	equ	0xFE9
  6212                           wreg	equ	0xFE8
  6213                           indf1	equ	0xFE7
  6214                           fsr1h	equ	0xFE2
  6215                           fsr1l	equ	0xFE1
  6216                           bsr	equ	0xFE0
  6217                           indf2	equ	0xFDF
  6218                           postinc2	equ	0xFDE
  6219                           postdec2	equ	0xFDD
  6220                           fsr2h	equ	0xFDA
  6221                           fsr2l	equ	0xFD9
  6222                           status	equ	0xFD8
  6223                           
  6224                           	psect	intcode_body
  6225  00137A                     __pintcode_body:
  6226                           	opt stack 23
  6227  00137A                     int_func:
  6228                           	opt stack 23
  6229  00137A  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6230  00137E  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6231  001382  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6232  001386  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6233  00138A  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6234  00138E  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6235  001392  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6236  001396  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6237  00139A  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6238  00139E  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6239  0013A2  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6240  0013A6  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6241                           
  6242                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6243  0013AA  A2F2               	btfss	intcon,1,c	;volatile
  6244  0013AC  D00D               	goto	i2l364
  6245                           
  6246                           ;main.c: 36: if (mode==-1) {
  6247  0013AE  283B               	incf	_mode,w,c	;volatile
  6248  0013B0  A4D8               	btfss	status,2,c
  6249  0013B2  D003               	goto	i2l2580
  6250                           
  6251                           ;main.c: 38: mode=1;
  6252  0013B4  0E01               	movlw	1
  6253  0013B6  6E3B               	movwf	_mode,c	;volatile
  6254                           
  6255                           ;main.c: 39: } else if (mode==0) {
  6256  0013B8  D003               	goto	i2l2584
  6257  0013BA                     i2l2580:
  6258  0013BA  503B               	movf	_mode,w,c	;volatile
  6259  0013BC  A4D8               	btfss	status,2,c
  6260                           
  6261                           ;main.c: 43: mode=-1;
  6262                           
  6263                           ;main.c: 41: } else {
  6264  0013BE  683B               	setf	_mode,c	;volatile
  6265  0013C0                     i2l2584:
  6266                           
  6267                           ;main.c: 44: }
  6268                           ;main.c: 46: delay_tenth_s(2);
  6269  0013C0  0E02               	movlw	2
  6270  0013C2  ECFC  F00B         	call	i2_delay_tenth_s
  6271                           
  6272                           ;main.c: 47: INTCONbits.INT0IF=0;
  6273  0013C6  92F2               	bcf	intcon,1,c	;volatile
  6274  0013C8                     i2l364:
  6275  0013C8  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6276  0013CC  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6277  0013D0  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6278  0013D4  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6279  0013D8  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6280  0013DC  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6281  0013E0  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6282  0013E4  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6283  0013E8  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6284  0013EC  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6285  0013F0  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6286  0013F4  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6287  0013F8  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6288  0013FC  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6289  001400  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6290  001402  0011               	retfie		f
  6291  001404                     __end_of_InterruptHandlerHigh:
  6292                           	opt stack 0
  6293                           pclatu	equ	0xFFB
  6294                           pclath	equ	0xFFA
  6295                           tblptru	equ	0xFF8
  6296                           tblptrh	equ	0xFF7
  6297                           tblptrl	equ	0xFF6
  6298                           tablat	equ	0xFF5
  6299                           prodh	equ	0xFF4
  6300                           prodl	equ	0xFF3
  6301                           intcon	equ	0xFF2
  6302                           postinc0	equ	0xFEE
  6303                           fsr0h	equ	0xFEA
  6304                           fsr0l	equ	0xFE9
  6305                           wreg	equ	0xFE8
  6306                           indf1	equ	0xFE7
  6307                           fsr1h	equ	0xFE2
  6308                           fsr1l	equ	0xFE1
  6309                           bsr	equ	0xFE0
  6310                           indf2	equ	0xFDF
  6311                           postinc2	equ	0xFDE
  6312                           postdec2	equ	0xFDD
  6313                           fsr2h	equ	0xFDA
  6314                           fsr2l	equ	0xFD9
  6315                           status	equ	0xFD8
  6316                           
  6317 ;; *************** function i2_delay_tenth_s *****************
  6318 ;; Defined at:
  6319 ;;		line 21 in file "Movement.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;  tenth_second    1    wreg     unsigned char 
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6324 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;		None               void
  6327 ;; Registers used:
  6328 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6334 ;;      Params:         0       0       0       0
  6335 ;;      Locals:         3       0       0       0
  6336 ;;      Temps:          1       0       0       0
  6337 ;;      Totals:         4       0       0       0
  6338 ;;Total ram usage:        4 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; This function calls:
  6341 ;;		Nothing
  6342 ;; This function is called by:
  6343 ;;		_InterruptHandlerHigh
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text31
  6348  0017F8                     __ptext31:
  6349                           	opt stack 0
  6350  0017F8                     i2_delay_tenth_s:
  6351                           	opt stack 23
  6352                           
  6353                           ;incstack = 0
  6354                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6355  0017F8  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6356                           
  6357                           ;Movement.c: 22: unsigned int i=0;
  6358  0017FA  0E00               	movlw	0
  6359  0017FC  6E04               	movwf	i2delay_tenth_s@i+1,c
  6360  0017FE  0E00               	movlw	0
  6361  001800  6E03               	movwf	i2delay_tenth_s@i,c
  6362                           
  6363                           ;Movement.c: 23: for (i=1; i<=tenth_seconds*2; i++) {
  6364  001802  0E00               	movlw	0
  6365  001804  6E04               	movwf	i2delay_tenth_s@i+1,c
  6366  001806  0E01               	movlw	1
  6367  001808  6E03               	movwf	i2delay_tenth_s@i,c
  6368  00180A  D009               	goto	i2l2542
  6369  00180C                     i2l2538:
  6370                           
  6371                           ;Movement.c: 25: _delay((unsigned long)((50)*(8000000/4000.0)));
  6372  00180C  0E82               	movlw	130
  6373  00180E  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6374  001810  0EDE               	movlw	222
  6375  001812                     i2u313_47:
  6376  001812  2EE8               	decfsz	wreg,f,c
  6377  001814  D7FE               	goto	i2u313_47
  6378  001816  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6379  001818  D7FC               	goto	i2u313_47
  6380  00181A  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6381  00181C  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6382  00181E                     i2l2542:
  6383  00181E  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6384  001820  0D02               	mullw	2
  6385  001822  5003               	movf	i2delay_tenth_s@i,w,c
  6386  001824  5CF3               	subwf	prodl,w,c
  6387  001826  5004               	movf	i2delay_tenth_s@i+1,w,c
  6388  001828  58F4               	subwfb	prodh,w,c
  6389  00182A  A0D8               	btfss	status,0,c
  6390  00182C  0012               	return	
  6391  00182E  D7EE               	goto	i2l2538
  6392  001830                     __end_ofi2_delay_tenth_s:
  6393                           	opt stack 0
  6394                           pclatu	equ	0xFFB
  6395                           pclath	equ	0xFFA
  6396                           tblptru	equ	0xFF8
  6397                           tblptrh	equ	0xFF7
  6398                           tblptrl	equ	0xFF6
  6399                           tablat	equ	0xFF5
  6400                           prodh	equ	0xFF4
  6401                           prodl	equ	0xFF3
  6402                           intcon	equ	0xFF2
  6403                           postinc0	equ	0xFEE
  6404                           fsr0h	equ	0xFEA
  6405                           fsr0l	equ	0xFE9
  6406                           wreg	equ	0xFE8
  6407                           indf1	equ	0xFE7
  6408                           fsr1h	equ	0xFE2
  6409                           fsr1l	equ	0xFE1
  6410                           bsr	equ	0xFE0
  6411                           indf2	equ	0xFDF
  6412                           postinc2	equ	0xFDE
  6413                           postdec2	equ	0xFDD
  6414                           fsr2h	equ	0xFDA
  6415                           fsr2l	equ	0xFD9
  6416                           status	equ	0xFD8
  6417                           pclatu	equ	0xFFB
  6418                           pclath	equ	0xFFA
  6419                           tblptru	equ	0xFF8
  6420                           tblptrh	equ	0xFF7
  6421                           tblptrl	equ	0xFF6
  6422                           tablat	equ	0xFF5
  6423                           prodh	equ	0xFF4
  6424                           prodl	equ	0xFF3
  6425                           intcon	equ	0xFF2
  6426                           postinc0	equ	0xFEE
  6427                           fsr0h	equ	0xFEA
  6428                           fsr0l	equ	0xFE9
  6429                           wreg	equ	0xFE8
  6430                           indf1	equ	0xFE7
  6431                           fsr1h	equ	0xFE2
  6432                           fsr1l	equ	0xFE1
  6433                           bsr	equ	0xFE0
  6434                           indf2	equ	0xFDF
  6435                           postinc2	equ	0xFDE
  6436                           postdec2	equ	0xFDD
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8
  6440                           
  6441                           	psect	rparam
  6442  0000                     pclatu	equ	0xFFB
  6443                           pclath	equ	0xFFA
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodh	equ	0xFF4
  6449                           prodl	equ	0xFF3
  6450                           intcon	equ	0xFF2
  6451                           postinc0	equ	0xFEE
  6452                           fsr0h	equ	0xFEA
  6453                           fsr0l	equ	0xFE9
  6454                           wreg	equ	0xFE8
  6455                           indf1	equ	0xFE7
  6456                           fsr1h	equ	0xFE2
  6457                           fsr1l	equ	0xFE1
  6458                           bsr	equ	0xFE0
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466                           	psect	temp
  6467  00003C                     btemp:
  6468                           	opt stack 0
  6469  00003C                     	ds	1
  6470  0000                     int$flags	set	btemp
  6471                           pclatu	equ	0xFFB
  6472                           pclath	equ	0xFFA
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodh	equ	0xFF4
  6478                           prodl	equ	0xFF3
  6479                           intcon	equ	0xFF2
  6480                           postinc0	equ	0xFEE
  6481                           fsr0h	equ	0xFEA
  6482                           fsr0l	equ	0xFE9
  6483                           wreg	equ	0xFE8
  6484                           indf1	equ	0xFE7
  6485                           fsr1h	equ	0xFE2
  6486                           fsr1l	equ	0xFE1
  6487                           bsr	equ	0xFE0
  6488                           indf2	equ	0xFDF
  6489                           postinc2	equ	0xFDE
  6490                           postdec2	equ	0xFDD
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8


Data Sizes:
    Strings     79
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     88     112
    BANK1           256    250     255
    BANK2           256     18      18

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_9(CODE[11]), STR_8(CODE[12]), STR_7(CODE[10]), main@buf(BANK1[40]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               279   279      0   65929
                                             77 BANK0     11    11      0
                                              0 BANK1    250   250      0
                                              0 BANK2     18    18      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       64    55      9   30570
                                             13 BANK0     64    55      9
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    8724
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    8955
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              58    47     11   11946
                                             56 COMRAM     1     1      0
                                             13 BANK0     57    46     11
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1671
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     12      12       9        7.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BC       3        0.0%
DATA                 0      0     1BC      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 15:32:15 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0F58  
                                  l65 14E2                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0E08                                   l216 0D82  
                                 l369 040A                                   l857 1736  
                                 l867 1778                           grabLeftIR@i 002B  
                                 prod 000FF3                                   wreg 000FE8  
                        main@MoveTime 0100                          main@MoveType 0164  
                                l2120 1520                                  l2132 158A  
                                l2116 1518                                  l2060 1970  
                                l3100 0D22                                  l2150 1876  
                                l2142 15CE                                  l2126 155C  
                                l2070 1704                                  l2136 1592  
                                l2072 170C                                  l2154 1888  
                                l2082 172C                                  l2074 1710  
                                l2090 174E                                  l3106 0D3E  
                                l2314 1900                                  l2164 1622  
                                l2092 1756                                  l3036 1098  
                                l2172 17E6                                  l3124 0DC4  
                                l2158 15EE                                  l2094 175A  
                                l3118 0DA6                                  l3302 0710  
                                l2168 17D4                                  l3136 0E2A  
                                l3056 0BFE                                  l2520 128A  
                                l3304 0716                                  l3232 04D2  
                                l2098 176E                                  l3090 0CF4  
                                l3138 0E30                                  l3314 073C  
                                l2532 12E2                                  l2524 1292  
                                l3308 0720                                  l3316 0742  
                                l3324 07AA                                  l3094 0D0E  
                                l3334 0808                                  l3270 05E8  
                                l2800 1446                                  l3344 084E  
                                l3336 080E                                  l3264 059A  
                                l3248 0520                                  l2810 1466  
                                l2802 144A                                  l3098 0D1E  
                                l3282 065E                                  l3274 063A  
                                l3292 06C6                                  l3348 0850  
                                l2902 08E6                                  l2814 1470  
                                l3278 0648                                  l3198 0410  
                                l2912 0958                                  l2840 1318  
                                l2832 12E8                                  l3296 06D0  
                                l2914 0980                                  l2818 147E  
                                l2924 09B0                                  l2828 0F30  
                                l2836 1300                                  l2950 0A50  
                                l2926 09B6                                  l2846 1338  
                                l2862 14C2                                  l2854 148A  
                                l2944 0A0E                                  l2792 1428  
                                l2938 09EC                                  l2890 089C  
                                l2786 1418                                  l2858 14A6  
                                l2980 0AE8                                  l2948 0A46  
                                l2892 08AE                                  l2884 0880  
                                l2982 0AEE                                  l2974 0ACA  
                                l2958 0A74                                  l2966 0A9A  
                                l2990 0B50                                  l2798 143E  
                                l2968 0AA6                                  l2992 0B6A  
                                l2896 08B6                                  l2988 0B44  
                                STR_1 0339                                  STR_2 030C  
                                STR_3 0339                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0350                                  STR_8 032D  
                                STR_9 0345                                  u1215 10BA  
                                u1225 10C8                                  u1235 10E6  
                                u1245 10F4                                  _LATB 000F8A  
                                u1255 1114                                  u3007 14DC  
                                u1265 1122                                  u3017 17DA  
                                u1530 1612                                  u1275 1152  
                                u3107 18BA                                  u3027 1004  
                                u1540 1642                                  u2244 0EF0  
                                u3117 116E                                  u1365 189C  
                                u2245 0EEC                                  u3037 101A  
                                u1366 189E                                  u2254 0F4C  
                                u3127 1998                                  u2255 0F48  
                                u3047 1332                                  u1537 1608  
                                u3057 1550                                  u1465 1528  
                                u2265 0FA6                                  u1547 1638  
                                u3067 15C2                                  u3077 188A  
                                u3087 161C                                  u1495 159A  
                                u3097 18AA                                  u2750 0690  
                                u1775 18FC                                  u1776 18FE  
                                u2760 06A4                                  u2752 0692  
                                u2762 06A6                                  u1795 190E  
                                u2907 11DC                                  u1796 1910  
                                u2917 11EE                                  u2837 0466  
                                u2927 1204                                  u2847 047E  
                                u2937 1218                                  u2857 1188  
                                u2947 122A                                  u2867 119E  
                                u2957 0C32                                  u2877 11AE  
                                u2967 0C4A                                  u2887 11BC  
                                u2977 0CBE                                  u2897 11CA  
                                u2987 0D60                                  u2997 0DE6  
                          ScanIR@Move 0072                                  _main 035C  
                                _mode 003B                         main@ScanAngle 00AF  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 12E6  
                                pclat 000FFA                   fullSpeedAhead@power 0066  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00D6                          ___param_bank 000010  
                     i2_delay_tenth_s 17F8                       __end_of_SendLCD 18C2  
                     __end_of_SetLine 1892                    ScanWithRange@F3893 00BC  
                         ScanIR@F3882 00B8                                 ?_main 0001  
                     __end_of___awdiv 1488                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1740  
                     __end_of___lwmod 1782                                 i1l356 008E  
                               i2l364 13C8                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1994  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1232  
                     __end_of_dpowers 030B                       __end_of_isdigit 1978  
                               main@i 00B7                                 tablat 000FF5  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 0B78                __size_of_ScanWithRange 0304  
                     __initialization 18C2                          __end_of_main 0872  
                        __end_of_stop 137A                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 00A0                  __end_of_enableSensor 1912  
                 VerifySignal@hexByte 002D                                ??_main 00AD  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
          ScanWithRange@TurnDirection 0073                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2570 008A                                i1l2572 008C  
                              i2l2542 181E                        __CFG_WDTEN$OFF 000000  
                              i2l2538 180C                                i2l2580 13BA  
                              i2l2584 13C0                 __end_of_delay_tenth_s 17F8  
                              _LCDout 10B0                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1830                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 0FB6  
                           ??_SetLine 002A                                ___wmul 1912  
                           ??___awdiv 002E                      __end_of_initRFID 1994  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1938                  __size_of_grabRightIR 0072  
                              clear_0 18D4                      ___awdiv@quotient 0030  
                              main@mL 0200                                main@mR 0209  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0B78                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
                    __end_of_turnLeft 16EE                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 18DE                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 19A2  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1782  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002C                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 13FC           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00B8                            __pbssBANK1 01FA  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __end_of_LCD_String 164A                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 157A                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                   ScanIR@TurnDirection 0071  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 18EC  
                  __size_of_turnRight 0052                  __end_of_initMotorPWM 1862  
                             _SendLCD 1892                               __Hparam 0000  
                             _SetLine 1862                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 1404  
                     __size_of___wmul 0026                               ___lwdiv 16EE  
                             ___lwmod 1740                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 18C2  
                     ??_ScanWithRange 0076                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 035C  
                             __ptext1 1978                               __ptext2 1830  
                             __ptext3 1176                               __ptext4 1938  
                             __ptext5 1782                               __ptext6 18EC  
                             __ptext7 1232                               __ptext8 0B78  
                             __ptext9 164A                               _initLCD 1176  
                             _dpowers 0301                               _isdigit 195A  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0872  
                      __pintcode_body 137A                  end_of_initialization 18DE  
                      ScanWithRange@i 00A0                        ScanWithRange@n 00A9  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 137A  
                  ScanIR@SensorResult 00A2                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 169C                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00AC                        __end_of_LCDout 1176  
                           _TXSTAbits 000FAC                             ScanIR@buf 0078  
          ScanWithRange@MoveTimeEntry 0074                         ??_grabRightIR 0026  
                      __end_of_ScanIR 10B0                        _fullSpeedAhead 1488  
                      _ReceivedString 00C0                        __end_of___wmul 1938  
                         _BAUDCONbits 000FAA                        __end_of_initIR 195A  
              __size_of_delay_tenth_s 0038                   start_initialization 18C2  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1404  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 1508  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 157A  
                        _initMotorPWM 1830                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1878 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 17C0  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 12E6                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B0  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 0052  
                       ??_setMotorPWM 0034                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u313_47 1812  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3897 01FA                           _grabRightIR 1508  
               ScanWithRange@LeftFlag 00AB                  grabRightIR@IR_signal 0029  
           ScanWithRange@milliseconds 0071                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 0E7C                          setMotorPWM@m 0032  
                _InterruptHandlerHigh 0008                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                           _turnRight 164A                        ScanIR@MoveTime 0074  
                      ScanIR@MoveType 0076                      ScanWithRange@buf 0078  
                 __end_of_setMotorPWM 0FB6                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 17C0                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 15EC                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 169C  
                            __ptext11 1488                              __ptext20 1740  
                            __ptext12 17C0                              __ptext21 16EE  
                            __ptext13 0FB6                              __ptext22 1508  
                            __ptext14 12E6                              __ptext31 17F8  
                            __ptext23 157A                              __ptext15 0E7C  
                            __ptext24 1862                              __ptext16 1404  
                            __ptext25 15EC                              __ptext17 0872  
                            __ptext26 1892                              __ptext18 195A  
                            __ptext27 10B0                              __ptext19 1912  
                            __ptext28 1994                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                     main@TurnDirection 00B4  
                            _initRFID 1978             ScanWithRange@SensorResult 00A5  
            ScanWithRange@FlagCounter 00A4                        turnRight@power 006B  
                       __size_of_main 0516                    main@DirectionFound 00B5  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 00B4                              int$flags 003C  
                            main@Move 00B6                   _InterruptHandlerLow 0018  
                          _LCD_String 15EC                              _turnLeft 169C  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002F                            _INTCONbits 000FF2  
                            isdigit@c 0026                           _setMotorPWM 0E7C  
                        _VerifySignal 1232                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A2                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
