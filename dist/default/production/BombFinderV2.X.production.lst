

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 18 23:12:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4331 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	smallconst
    87  000300                     __psmallconst:
    88                           	opt stack 0
    89  000300  00                 	db	0
    90  000301                     _dpowers:
    91                           	opt stack 0
    92  000301  0001               	dw	1
    93  000303  000A               	dw	10
    94  000305  0064               	dw	100
    95  000307  03E8               	dw	1000
    96  000309  2710               	dw	10000
    97  00030B                     __end_of_dpowers:
    98                           	opt stack 0
    99  0000                     _OSCCONbits	set	4051
   100  0000                     _OSCCON	set	4051
   101  0000                     _PIE1bits	set	3997
   102  0000                     _IPR1bits	set	3999
   103  0000                     _RCONbits	set	4048
   104  0000                     _RCREG	set	4014
   105  0000                     _TXREG	set	4013
   106  0000                     _PIR1bits	set	3998
   107  0000                     _RCSTAbits	set	4011
   108  0000                     _TXSTAbits	set	4012
   109  0000                     _BAUDCONbits	set	4010
   110  0000                     _SPBRGH	set	4016
   111  0000                     _SPBRG	set	4015
   112  0000                     _TRISC	set	3988
   113  0000                     _TMR0H	set	4055
   114  0000                     _TMR0L	set	4054
   115  0000                     _INTCONbits	set	4082
   116  0000                     _T0CONbits	set	4053
   117  0000                     _TRISDbits	set	3989
   118  0000                     _TRISCbits	set	3988
   119  0000                     _LATDbits	set	3980
   120  0000                     _LATCbits	set	3979
   121  0000                     _LATEbits	set	3981
   122  0000                     _CAP2BUFL	set	3942
   123  0000                     _CAP2BUFH	set	3943
   124  0000                     _CAP1BUFL	set	3944
   125  0000                     _CAP1BUFH	set	3945
   126  0000                     _T5CON	set	4023
   127  0000                     _TRISEbits	set	3990
   128  0000                     _CAP2CON	set	3938
   129  0000                     _CAP1CON	set	3939
   130  0000                     _ANSEL0bits	set	4024
   131  0000                     _TRISAbits	set	3986
   132  0000                     _LATAbits	set	3977
   133  0000                     _LATB	set	3978
   134  0000                     _TRISBbits	set	3987
   135  0000                     _PTPERH	set	3962
   136  0000                     _PTPERL	set	3963
   137  0000                     _PWMCON1	set	3950
   138  0000                     _PWMCON0	set	3951
   139  0000                     _PTCON1	set	3966
   140  0000                     _PTCON0	set	3967
   141  0000                     _PDC1H	set	3958
   142  0000                     _PDC1L	set	3959
   143  0000                     _PDC0H	set	3960
   144  0000                     _PDC0L	set	3961
   145  00030B                     STR_6:
   146  00030B  20                 	db	32
   147  00030C  20                 	db	32
   148  00030D  20                 	db	32
   149  00030E  20                 	db	32
   150  00030F  20                 	db	32
   151  000310  20                 	db	32
   152  000311  25                 	db	37
   153  000312  30                 	db	48	;'0'
   154  000313  34                 	db	52	;'4'
   155  000314  64                 	db	100	;'d'
   156  000315  2C                 	db	44
   157  000316  20                 	db	32
   158  000317  25                 	db	37
   159  000318  30                 	db	48	;'0'
   160  000319  34                 	db	52	;'4'
   161  00031A  64                 	db	100	;'d'
   162  00031B  00                 	db	0
   163  00031C                     STR_5:
   164  00031C  20                 	db	32
   165  00031D  20                 	db	32
   166  00031E  20                 	db	32
   167  00031F  20                 	db	32
   168  000320  20                 	db	32
   169  000321  20                 	db	32
   170  000322  49                 	db	73	;'I'
   171  000323  6E                 	db	110	;'n'
   172  000324  65                 	db	101	;'e'
   173  000325  72                 	db	114	;'r'
   174  000326  74                 	db	116	;'t'
   175  000327  20                 	db	32
   176  000328  4D                 	db	77	;'M'
   177  000329  6F                 	db	111	;'o'
   178  00032A  64                 	db	100	;'d'
   179  00032B  65                 	db	101	;'e'
   180  00032C  00                 	db	0
   181  00032D                     STR_1:
   182  00032D  20                 	db	32
   183  00032E  20                 	db	32
   184  00032F  20                 	db	32
   185  000330  20                 	db	32
   186  000331  20                 	db	32
   187  000332  53                 	db	83	;'S'
   188  000333  63                 	db	99	;'c'
   189  000334  61                 	db	97	;'a'
   190  000335  6E                 	db	110	;'n'
   191  000336  49                 	db	73	;'I'
   192  000337  52                 	db	82	;'R'
   193  000338  00                 	db	0
   194  000339                     STR_8:
   195  000339  47                 	db	71	;'G'
   196  00033A  6F                 	db	111	;'o'
   197  00033B  69                 	db	105	;'i'
   198  00033C  6E                 	db	110	;'n'
   199  00033D  67                 	db	103	;'g'
   200  00033E  20                 	db	32
   201  00033F  48                 	db	72	;'H'
   202  000340  6F                 	db	111	;'o'
   203  000341  6D                 	db	109	;'m'
   204  000342  65                 	db	101	;'e'
   205  000343  00                 	db	0
   206  000344                     STR_7:
   207  000344  53                 	db	83	;'S'
   208  000345  65                 	db	101	;'e'
   209  000346  61                 	db	97	;'a'
   210  000347  72                 	db	114	;'r'
   211  000348  63                 	db	99	;'c'
   212  000349  68                 	db	104	;'h'
   213  00034A  69                 	db	105	;'i'
   214  00034B  6E                 	db	110	;'n'
   215  00034C  67                 	db	103	;'g'
   216  00034D  00                 	db	0
   217  0000                     
   218                           ; #config settings
   219  00034E  00                 	db	0	; dummy byte at the end
   220  0000                     
   221                           	psect	cinit
   222  001A26                     __pcinit:
   223                           	opt stack 0
   224  001A26                     start_initialization:
   225                           	opt stack 0
   226  001A26                     __initialization:
   227                           	opt stack 0
   228                           
   229                           ; Clear objects allocated to BANK1 (21 bytes)
   230  001A26  EE01  F0E5         	lfsr	0,__pbssBANK1
   231  001A2A  0E15               	movlw	21
   232  001A2C                     clear_0:
   233  001A2C  6AEE               	clrf	postinc0,c
   234  001A2E  06E8               	decf	wreg,f,c
   235  001A30  E1FD               	bnz	clear_0
   236                           
   237                           ; Clear objects allocated to COMRAM (10 bytes)
   238  001A32  EE00  F02C         	lfsr	0,__pbssCOMRAM
   239  001A36  0E0A               	movlw	10
   240  001A38                     clear_1:
   241  001A38  6AEE               	clrf	postinc0,c
   242  001A3A  06E8               	decf	wreg,f,c
   243  001A3C  E1FD               	bnz	clear_1
   244  001A3E                     end_of_initialization:
   245                           	opt stack 0
   246  001A3E                     __end_of__initialization:
   247                           	opt stack 0
   248  001A3E  9036               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   249  001A40  9236               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   250  001A42  0E00               	movlw	low (__Lmediumconst shr (0+16))
   251  001A44  6EF8               	movwf	tblptru,c
   252  001A46  0100               	movlb	0
   253  001A48  EFA8  F001         	goto	_main	;jump to C main() function
   254                           tblptru	equ	0xFF8
   255                           postinc0	equ	0xFEE
   256                           wreg	equ	0xFE8
   257                           
   258                           	psect	bssCOMRAM
   259  00002C                     __pbssCOMRAM:
   260                           	opt stack 0
   261  00002C                     ScanWithRange@F3553:
   262                           	opt stack 0
   263  00002C                     	ds	4
   264  000030                     ScanIR@F3540:
   265                           	opt stack 0
   266  000030                     	ds	4
   267  000034                     _mode:
   268                           	opt stack 0
   269  000034                     	ds	1
   270  000035                     _i:
   271                           	opt stack 0
   272  000035                     	ds	1
   273                           tblptru	equ	0xFF8
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           
   277                           	psect	bssBANK1
   278  0001E5                     __pbssBANK1:
   279                           	opt stack 0
   280  0001E5                     main@F3557:
   281                           	opt stack 0
   282  0001E5                     	ds	4
   283  0001E9                     _ReceivedString:
   284                           	opt stack 0
   285  0001E9                     	ds	16
   286  0001F9                     _RFID_Read:
   287                           	opt stack 0
   288  0001F9                     	ds	1
   289                           tblptru	equ	0xFF8
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	cstackBANK2
   294  000200                     __pcstackBANK2:
   295                           	opt stack 0
   296  000200                     main@MoveType:
   297                           	opt stack 0
   298                           
   299                           ; 100 bytes @ 0x0
   300  000200                     	ds	100
   301                           tblptru	equ	0xFF8
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           
   305                           	psect	cstackBANK1
   306  000100                     __pcstackBANK1:
   307                           	opt stack 0
   308  000100                     main@MoveTime:
   309                           	opt stack 0
   310                           
   311                           ; 200 bytes @ 0x0
   312  000100                     	ds	200
   313  0001C8                     main@Message:
   314                           	opt stack 0
   315                           
   316                           ; 10 bytes @ 0xC8
   317  0001C8                     	ds	10
   318  0001D2                     main@Move:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0xD2
   322  0001D2                     	ds	1
   323  0001D3                     main@mL:
   324                           	opt stack 0
   325                           
   326                           ; 9 bytes @ 0xD3
   327  0001D3                     	ds	9
   328  0001DC                     main@mR:
   329                           	opt stack 0
   330                           
   331                           ; 9 bytes @ 0xDC
   332  0001DC                     	ds	9
   333                           tblptru	equ	0xFF8
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           	psect	cstackBANK0
   338  000060                     __pcstackBANK0:
   339                           	opt stack 0
   340  000060                     ??_isdigit:
   341  000060                     ??_LCDout:
   342  000060                     ??_delay_tenth_s:
   343  000060                     ?_grabRightIR:
   344                           	opt stack 0
   345  000060                     ?_grabLeftIR:
   346                           	opt stack 0
   347  000060                     ?___wmul:
   348                           	opt stack 0
   349  000060                     ?___lwdiv:
   350                           	opt stack 0
   351  000060                     enableSensor@status:
   352                           	opt stack 0
   353  000060                     VerifySignal@Signal:
   354                           	opt stack 0
   355  000060                     ___wmul@multiplier:
   356                           	opt stack 0
   357  000060                     ___lwdiv@dividend:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x0
   361  000060                     	ds	1
   362  000061                     enableSensor@sensor:
   363                           	opt stack 0
   364  000061                     delay_tenth_s@tenth_seconds:
   365                           	opt stack 0
   366  000061                     _isdigit$1693:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x1
   370  000061                     	ds	1
   371  000062                     ??_grabRightIR:
   372  000062                     ??_grabLeftIR:
   373  000062                     ??_VerifySignal:
   374  000062                     isdigit@c:
   375                           	opt stack 0
   376  000062                     delay_tenth_s@i:
   377                           	opt stack 0
   378  000062                     ___wmul@multiplicand:
   379                           	opt stack 0
   380  000062                     ___lwdiv@divisor:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x2
   384  000062                     	ds	1
   385  000063                     LCDout@number:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x3
   389  000063                     	ds	1
   390  000064                     SendLCD@type:
   391                           	opt stack 0
   392  000064                     ___lwdiv@counter:
   393                           	opt stack 0
   394  000064                     ___wmul@product:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x4
   398  000064                     	ds	1
   399  000065                     SendLCD@Byte:
   400                           	opt stack 0
   401  000065                     grabRightIR@IR_signal:
   402                           	opt stack 0
   403  000065                     grabLeftIR@IR_signal:
   404                           	opt stack 0
   405  000065                     ___lwdiv@quotient:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x5
   409  000065                     	ds	1
   410  000066                     ??_initLCD:
   411  000066                     ?___awdiv:
   412                           	opt stack 0
   413  000066                     SetLine@line:
   414                           	opt stack 0
   415  000066                     LCD_String@string:
   416                           	opt stack 0
   417  000066                     ___awdiv@dividend:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x6
   421  000066                     	ds	1
   422  000067                     ?___lwmod:
   423                           	opt stack 0
   424  000067                     grabRightIR@i:
   425                           	opt stack 0
   426  000067                     grabLeftIR@i:
   427                           	opt stack 0
   428  000067                     ___lwmod@dividend:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x7
   432  000067                     	ds	1
   433  000068                     VerifySignal@hexByte:
   434                           	opt stack 0
   435  000068                     ___awdiv@divisor:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x8
   439  000068                     	ds	1
   440  000069                     ___lwmod@divisor:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x9
   444  000069                     	ds	1
   445  00006A                     VerifySignal@checksum:
   446                           	opt stack 0
   447  00006A                     ___awdiv@counter:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0xA
   451  00006A                     	ds	1
   452  00006B                     VerifySignal@i:
   453                           	opt stack 0
   454  00006B                     ___awdiv@sign:
   455                           	opt stack 0
   456  00006B                     ___lwmod@counter:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0xB
   460  00006B                     	ds	1
   461  00006C                     ?_sprintf:
   462                           	opt stack 0
   463  00006C                     sprintf@sp:
   464                           	opt stack 0
   465  00006C                     ___awdiv@quotient:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0xC
   469  00006C                     	ds	2
   470  00006E                     setMotorPWM@m:
   471                           	opt stack 0
   472  00006E                     sprintf@f:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0xE
   476  00006E                     	ds	2
   477  000070                     ??_setMotorPWM:
   478                           
   479                           ; 1 bytes @ 0x10
   480  000070                     	ds	4
   481  000074                     ??_sprintf:
   482                           
   483                           ; 1 bytes @ 0x14
   484  000074                     	ds	1
   485  000075                     setMotorPWM@PWMduty:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x15
   489  000075                     	ds	2
   490  000077                     stop@mL:
   491                           	opt stack 0
   492  000077                     fullSpeedAhead@mL:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x17
   496  000077                     	ds	1
   497  000078                     sprintf@ap:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x18
   501  000078                     	ds	1
   502  000079                     stop@mR:
   503                           	opt stack 0
   504  000079                     fullSpeedAhead@mR:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x19
   508  000079                     	ds	1
   509  00007A                     sprintf@prec:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x1A
   513  00007A                     	ds	1
   514  00007B                     fullSpeedAhead@power:
   515                           	opt stack 0
   516  00007B                     sprintf@val:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x1B
   520  00007B                     	ds	1
   521  00007C                     
   522                           ; 1 bytes @ 0x1C
   523  00007C                     	ds	1
   524  00007D                     sprintf@flag:
   525                           	opt stack 0
   526  00007D                     turnLeft@mL:
   527                           	opt stack 0
   528  00007D                     turnRight@mL:
   529                           	opt stack 0
   530  00007D                     fullSpeedBack@mL:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x1D
   534  00007D                     	ds	1
   535  00007E                     sprintf@width:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x1E
   539  00007E                     	ds	1
   540  00007F                     turnLeft@mR:
   541                           	opt stack 0
   542  00007F                     turnRight@mR:
   543                           	opt stack 0
   544  00007F                     fullSpeedBack@mR:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x1F
   548  00007F                     	ds	1
   549  000080                     sprintf@c:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x20
   553  000080                     	ds	1
   554  000081                     turnLeft@power:
   555                           	opt stack 0
   556  000081                     turnRight@power:
   557                           	opt stack 0
   558  000081                     fullSpeedBack@power:
   559                           	opt stack 0
   560  000081                     ScanIR@mL:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x21
   564  000081                     	ds	1
   565  000082                     ScanWithRange@mL:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x22
   569  000082                     	ds	1
   570  000083                     ScanIR@mR:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x23
   574  000083                     	ds	1
   575  000084                     ScanWithRange@mR:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x24
   579  000084                     	ds	1
   580  000085                     ??_ScanIR:
   581                           
   582                           ; 1 bytes @ 0x25
   583  000085                     	ds	1
   584  000086                     ScanWithRange@loops:
   585                           	opt stack 0
   586  000086                     ScanIR@buf:
   587                           	opt stack 0
   588                           
   589                           ; 40 bytes @ 0x26
   590  000086                     	ds	2
   591  000088                     ScanWithRange@MoveTime:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x28
   595  000088                     	ds	2
   596  00008A                     ScanWithRange@Move:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x2A
   600  00008A                     	ds	2
   601  00008C                     ScanWithRange@MoveType:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x2C
   605  00008C                     	ds	2
   606  00008E                     ScanWithRange@RFID_Read:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x2E
   610  00008E                     	ds	2
   611  000090                     ??_ScanWithRange:
   612                           
   613                           ; 1 bytes @ 0x30
   614  000090                     	ds	5
   615  000095                     ScanWithRange@buf:
   616                           	opt stack 0
   617                           
   618                           ; 40 bytes @ 0x35
   619  000095                     	ds	25
   620  0000AE                     ScanIR@DirectionMoveThreshold:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x4E
   624  0000AE                     	ds	2
   625  0000B0                     ScanIR@SensorResult:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x50
   629  0000B0                     	ds	13
   630  0000BD                     ScanWithRange@n:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x5D
   634  0000BD                     	ds	2
   635  0000BF                     ScanWithRange@i:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x5F
   639  0000BF                     	ds	2
   640  0000C1                     ScanWithRange@DirectionFoundThreshold:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x61
   644  0000C1                     	ds	2
   645  0000C3                     ScanWithRange@power:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x63
   649  0000C3                     	ds	1
   650  0000C4                     ScanWithRange@LeftFlag:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x64
   654  0000C4                     	ds	2
   655  0000C6                     ScanWithRange@TimeAboveThreshold:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x66
   659  0000C6                     	ds	1
   660  0000C7                     ScanWithRange@SensorResult:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x67
   664  0000C7                     	ds	4
   665  0000CB                     ScanWithRange@RightFlag:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x6B
   669  0000CB                     	ds	2
   670  0000CD                     ??_main:
   671                           
   672                           ; 1 bytes @ 0x6D
   673  0000CD                     	ds	2
   674  0000CF                     main@buf:
   675                           	opt stack 0
   676                           
   677                           ; 40 bytes @ 0x6F
   678  0000CF                     	ds	40
   679  0000F7                     main@ScanAngle:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x97
   683  0000F7                     	ds	1
   684  0000F8                     main@SensorResult:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0x98
   688  0000F8                     	ds	4
   689  0000FC                     main@DirectionFound:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x9C
   693  0000FC                     	ds	1
   694  0000FD                     main@i:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x9D
   698  0000FD                     	ds	1
   699                           tblptru	equ	0xFF8
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           
   703                           	psect	cstackCOMRAM
   704  000001                     __pcstackCOMRAM:
   705                           	opt stack 0
   706  000001                     ??i2_delay_tenth_s:
   707                           
   708                           ; 1 bytes @ 0x0
   709  000001                     	ds	1
   710  000002                     i2delay_tenth_s@tenth_seconds:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x1
   714  000002                     	ds	1
   715  000003                     i2delay_tenth_s@i:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x2
   719  000003                     	ds	2
   720  000005                     ??_InterruptHandlerHigh:
   721                           
   722                           ; 1 bytes @ 0x4
   723  000005                     	ds	18
   724  000017                     ??_InterruptHandlerLow:
   725                           
   726                           ; 1 bytes @ 0x16
   727  000017                     	ds	21
   728                           tblptru	equ	0xFF8
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           
   732 ;;
   733 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   734 ;;
   735 ;; *************** function _main *****************
   736 ;; Defined at:
   737 ;;		line 51 in file "main.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  MoveTime      200    0[BANK1 ] int [100]
   742 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   743 ;;  buf            40  111[BANK0 ] unsigned char [40]
   744 ;;  Message        10  200[BANK1 ] unsigned char [10]
   745 ;;  mR              9  220[BANK1 ] struct DC_motor
   746 ;;  mL              9  211[BANK1 ] struct DC_motor
   747 ;;  SensorResult    4  152[BANK0 ] unsigned int [2]
   748 ;;  Move            1  210[BANK1 ] unsigned char 
   749 ;;  i               1  157[BANK0 ] unsigned char 
   750 ;;  DirectionFou    1  156[BANK0 ] char 
   751 ;;  ScanAngle       1  151[BANK0 ] unsigned char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   761 ;;      Params:         0       0       0       0
   762 ;;      Locals:         0      47     229     100
   763 ;;      Temps:          0       2       0       0
   764 ;;      Totals:         0      49     229     100
   765 ;;Total ram usage:      378 bytes
   766 ;; Hardware stack levels required when called:    8
   767 ;; This function calls:
   768 ;;		_LCD_String
   769 ;;		_ScanIR
   770 ;;		_ScanWithRange
   771 ;;		_SendLCD
   772 ;;		_SetLine
   773 ;;		_VerifySignal
   774 ;;		_delay_tenth_s
   775 ;;		_enableSensor
   776 ;;		_fullSpeedAhead
   777 ;;		_fullSpeedBack
   778 ;;		_grabLeftIR
   779 ;;		_grabRightIR
   780 ;;		_initIR
   781 ;;		_initLCD
   782 ;;		_initMotorPWM
   783 ;;		_initRFID
   784 ;;		_initTimer
   785 ;;		_sprintf
   786 ;;		_stop
   787 ;;		_turnLeft
   788 ;;		_turnRight
   789 ;; This function is called by:
   790 ;;		Startup code after reset
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text0
   795  000350                     __ptext0:
   796                           	opt stack 0
   797  000350                     _main:
   798                           	opt stack 23
   799                           
   800                           ;main.c: 54: unsigned char Message[10];
   801                           ;main.c: 55: unsigned char i=0;
   802                           
   803                           ;incstack = 0
   804  000350  0E00               	movlw	0
   805  000352  0100               	movlb	0	; () banked
   806  000354  6FFD               	movwf	main@i& (0+255),b
   807                           
   808                           ;main.c: 56: signed char DirectionFound=0;
   809  000356  0E00               	movlw	0
   810  000358  6FFC               	movwf	main@DirectionFound& (0+255),b
   811                           
   812                           ;main.c: 57: int MoveTime[100];
   813                           ;main.c: 60: char MoveType[100];
   814                           ;main.c: 63: char Move=0;
   815  00035A  0E00               	movlw	0
   816  00035C  0101               	movlb	1	; () banked
   817  00035E  6FD2               	movwf	main@Move& (0+255),b
   818                           
   819                           ; BSR set to: 1
   820                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   821  000360  C1E5  F0F8         	movff	main@F3557,main@SensorResult
   822  000364  C1E6  F0F9         	movff	main@F3557+1,main@SensorResult+1
   823  000368  C1E7  F0FA         	movff	main@F3557+2,main@SensorResult+2
   824  00036C  C1E8  F0FB         	movff	main@F3557+3,main@SensorResult+3
   825                           
   826                           ;main.c: 65: char buf[40];
   827                           ;main.c: 67: unsigned char ScanAngle=60;
   828  000370  0E3C               	movlw	60
   829  000372  0100               	movlb	0	; () banked
   830  000374  6FF7               	movwf	main@ScanAngle& (0+255),b
   831                           
   832                           ; BSR set to: 0
   833                           ;main.c: 76: INTCONbits.GIEH=1;
   834  000376  8EF2               	bsf	intcon,7,c	;volatile
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 77: INTCONbits.GIEL=1;
   838  000378  8CF2               	bsf	intcon,6,c	;volatile
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 78: INTCONbits.PEIE=1;
   842  00037A  8CF2               	bsf	intcon,6,c	;volatile
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 79: RCONbits.IPEN=1;
   846  00037C  8ED0               	bsf	4048,7,c	;volatile
   847                           
   848                           ; BSR set to: 0
   849                           ;main.c: 82: IPR1bits.RCIP=0;
   850  00037E  9A9F               	bcf	3999,5,c	;volatile
   851                           
   852                           ; BSR set to: 0
   853                           ;main.c: 83: PIE1bits.RCIE=1;
   854  000380  8A9D               	bsf	3997,5,c	;volatile
   855                           
   856                           ; BSR set to: 0
   857                           ;main.c: 86: TRISCbits.RC3=1;
   858  000382  8694               	bsf	3988,3,c	;volatile
   859                           
   860                           ; BSR set to: 0
   861                           ;main.c: 87: INTCONbits.INT0IE=1;
   862  000384  88F2               	bsf	intcon,4,c	;volatile
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 90: PIR1bits.RC1IF=0;
   866  000386  9A9E               	bcf	3998,5,c	;volatile
   867                           
   868                           ; BSR set to: 0
   869                           ;main.c: 91: INTCONbits.INT0IF=0;
   870  000388  92F2               	bcf	intcon,1,c	;volatile
   871                           
   872                           ;main.c: 94: struct DC_motor mL, mR;
   873                           ;main.c: 95: mL.power=0;
   874  00038A  0E00               	movlw	0
   875  00038C  0101               	movlb	1	; () banked
   876  00038E  6FD3               	movwf	main@mL& (0+255),b
   877                           
   878                           ;main.c: 96: mL.direction=1;
   879  000390  0E01               	movlw	1
   880  000392  6FD4               	movwf	(main@mL+1)& (0+255),b
   881                           
   882                           ; BSR set to: 1
   883                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   884  000394  0E79               	movlw	121
   885  000396  6FD5               	movwf	(main@mL+2)& (0+255),b
   886  000398  0E0F               	movlw	15
   887  00039A  6FD6               	movwf	(main@mL+3)& (0+255),b
   888                           
   889                           ; BSR set to: 1
   890                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   891  00039C  0E78               	movlw	120
   892  00039E  6FD7               	movwf	(main@mL+4)& (0+255),b
   893  0003A0  0E0F               	movlw	15
   894  0003A2  6FD8               	movwf	(main@mL+5)& (0+255),b
   895                           
   896                           ;main.c: 99: mL.dir_pin=0;
   897  0003A4  0E00               	movlw	0
   898  0003A6  6FD9               	movwf	(main@mL+6)& (0+255),b
   899                           
   900                           ;main.c: 100: mL.PWMperiod=199;
   901  0003A8  0E00               	movlw	0
   902  0003AA  6FDB               	movwf	(main@mL+8)& (0+255),b
   903  0003AC  0EC7               	movlw	199
   904  0003AE  6FDA               	movwf	(main@mL+7)& (0+255),b
   905                           
   906                           ;main.c: 102: mR.power=0;
   907  0003B0  0E00               	movlw	0
   908  0003B2  6FDC               	movwf	main@mR& (0+255),b
   909                           
   910                           ;main.c: 103: mR.direction=1;
   911  0003B4  0E01               	movlw	1
   912  0003B6  6FDD               	movwf	(main@mR+1)& (0+255),b
   913                           
   914                           ; BSR set to: 1
   915                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   916  0003B8  0E77               	movlw	119
   917  0003BA  6FDE               	movwf	(main@mR+2)& (0+255),b
   918  0003BC  0E0F               	movlw	15
   919  0003BE  6FDF               	movwf	(main@mR+3)& (0+255),b
   920                           
   921                           ; BSR set to: 1
   922                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   923  0003C0  0E76               	movlw	118
   924  0003C2  6FE0               	movwf	(main@mR+4)& (0+255),b
   925  0003C4  0E0F               	movlw	15
   926  0003C6  6FE1               	movwf	(main@mR+5)& (0+255),b
   927                           
   928                           ;main.c: 106: mR.dir_pin=2;
   929  0003C8  0E02               	movlw	2
   930  0003CA  6FE2               	movwf	(main@mR+6)& (0+255),b
   931                           
   932                           ;main.c: 107: mR.PWMperiod=199;
   933  0003CC  0E00               	movlw	0
   934  0003CE  6FE4               	movwf	(main@mR+8)& (0+255),b
   935  0003D0  0EC7               	movlw	199
   936  0003D2  6FE3               	movwf	(main@mR+7)& (0+255),b
   937                           
   938                           ;main.c: 109: OSCCON = 0x72;
   939  0003D4  0E72               	movlw	114
   940  0003D6  6ED3               	movwf	4051,c	;volatile
   941  0003D8                     
   942                           ; BSR set to: 1
   943  0003D8  B4D3               	btfsc	4051,2,c	;volatile
   944  0003DA  D271               	goto	l3716
   945  0003DC  D7FD               	goto	l391
   946  0003DE                     
   947                           ;main.c: 122: stop(&mL, &mR);
   948  0003DE  0ED3               	movlw	low main@mL
   949  0003E0  0100               	movlb	0	; () banked
   950  0003E2  6F77               	movwf	stop@mL& (0+255),b
   951  0003E4  0E01               	movlw	high main@mL
   952  0003E6  6F78               	movwf	(stop@mL+1)& (0+255),b
   953  0003E8  0EDC               	movlw	low main@mR
   954  0003EA  6F79               	movwf	stop@mR& (0+255),b
   955  0003EC  0E01               	movlw	high main@mR
   956  0003EE  6F7A               	movwf	(stop@mR+1)& (0+255),b
   957  0003F0  EC41  F00A         	call	_stop	;wreg free
   958                           
   959                           ;main.c: 123: RFID_Read=0;
   960  0003F4  0E00               	movlw	0
   961  0003F6  0101               	movlb	1	; () banked
   962  0003F8  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
   963                           
   964                           ; BSR set to: 1
   965                           ;main.c: 126: SensorResult[0]=grabLeftIR();
   966  0003FA  EC48  F00B         	call	_grabLeftIR	;wreg free
   967  0003FE  C060  F0F8         	movff	?_grabLeftIR,main@SensorResult
   968  000402  C061  F0F9         	movff	?_grabLeftIR+1,main@SensorResult+1
   969                           
   970                           ;main.c: 127: SensorResult[1]=grabRightIR();
   971  000406  EC0B  F00B         	call	_grabRightIR	;wreg free
   972  00040A  C060  F0FA         	movff	?_grabRightIR,main@SensorResult+2
   973  00040E  C061  F0FB         	movff	?_grabRightIR+1,main@SensorResult+3
   974                           
   975                           ;main.c: 131: CAP1BUFH=0;
   976  000412  0E00               	movlw	0
   977  000414  6E69               	movwf	3945,c	;volatile
   978                           
   979                           ;main.c: 132: CAP1BUFL=0;
   980  000416  0E00               	movlw	0
   981  000418  6E68               	movwf	3944,c	;volatile
   982                           
   983                           ;main.c: 133: CAP2BUFH=0;
   984  00041A  0E00               	movlw	0
   985  00041C  6E67               	movwf	3943,c	;volatile
   986                           
   987                           ;main.c: 134: CAP2BUFL=0;
   988  00041E  0E00               	movlw	0
   989  000420  6E66               	movwf	3942,c	;volatile
   990                           
   991                           ;main.c: 137: SendLCD(0b00000001,0);
   992  000422  0E00               	movlw	0
   993  000424  0100               	movlb	0	; () banked
   994  000426  6F64               	movwf	SendLCD@type& (0+255),b
   995  000428  0E01               	movlw	1
   996  00042A  EC7D  F00C         	call	_SendLCD
   997                           
   998                           ;main.c: 138: _delay((unsigned long)((50)*(8000000/4000000.0)));
   999  00042E  0E21               	movlw	33
  1000  000430                     u3207:
  1001  000430  2EE8               	decfsz	wreg,f,c
  1002  000432  D7FE               	bra	u3207
  1003  000434  F000               	nop	
  1004                           
  1005                           ;main.c: 139: SendLCD(0b00000010,0);
  1006  000436  0E00               	movlw	0
  1007  000438  0100               	movlb	0	; () banked
  1008  00043A  6F64               	movwf	SendLCD@type& (0+255),b
  1009  00043C  0E02               	movlw	2
  1010  00043E  EC7D  F00C         	call	_SendLCD
  1011                           
  1012                           ;main.c: 140: _delay((unsigned long)((2)*(8000000/4000.0)));
  1013  000442  0E06               	movlw	6
  1014  000444  0100               	movlb	0	; () banked
  1015  000446  6FCD               	movwf	??_main& (0+255),b
  1016  000448  0E30               	movlw	48
  1017  00044A                     u3217:
  1018  00044A  2EE8               	decfsz	wreg,f,c
  1019  00044C  D7FE               	bra	u3217
  1020  00044E  2FCD               	decfsz	??_main& (0+255),f,b
  1021  000450  D7FC               	bra	u3217
  1022  000452  F000               	nop	
  1023                           
  1024                           ;main.c: 141: SetLine(1);
  1025  000454  0E01               	movlw	1
  1026  000456  ECB5  F00C         	call	_SetLine
  1027                           
  1028                           ;main.c: 142: LCD_String("      Inert Mode");
  1029  00045A  0E1C               	movlw	low STR_5
  1030  00045C  0100               	movlb	0	; () banked
  1031  00045E  6F66               	movwf	LCD_String@string& (0+255),b
  1032  000460  0E03               	movlw	high STR_5
  1033  000462  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1034  000464  EC85  F00B         	call	_LCD_String	;wreg free
  1035                           
  1036                           ;main.c: 143: SetLine(2);
  1037  000468  0E02               	movlw	2
  1038  00046A  ECB5  F00C         	call	_SetLine
  1039                           
  1040                           ;main.c: 144: if (RFID_Read) {
  1041  00046E  0101               	movlb	1	; () banked
  1042  000470  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1043  000472  B4D8               	btfsc	status,2,c
  1044  000474  D008               	goto	l396
  1045                           
  1046                           ; BSR set to: 1
  1047                           ;main.c: 145: LCD_String(Message);
  1048  000476  0EC8               	movlw	low main@Message
  1049  000478  0100               	movlb	0	; () banked
  1050  00047A  6F66               	movwf	LCD_String@string& (0+255),b
  1051  00047C  0E01               	movlw	high main@Message
  1052  00047E  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1053  000480  EC85  F00B         	call	_LCD_String	;wreg free
  1054                           
  1055                           ;main.c: 146: } else {
  1056  000484  D21C               	goto	l3716
  1057  000486                     l396:
  1058                           
  1059                           ;main.c: 147: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1060  000486  0ECF               	movlw	low main@buf
  1061  000488  0100               	movlb	0	; () banked
  1062  00048A  6F6C               	movwf	sprintf@sp& (0+255),b
  1063  00048C  0E00               	movlw	high main@buf
  1064  00048E  6F6D               	movwf	(sprintf@sp+1)& (0+255),b
  1065  000490  0E0B               	movlw	low STR_6
  1066  000492  6F6E               	movwf	sprintf@f& (0+255),b
  1067  000494  0E03               	movlw	high STR_6
  1068  000496  6F6F               	movwf	(sprintf@f+1)& (0+255),b
  1069  000498  C0F8  F070         	movff	main@SensorResult,?_sprintf+4
  1070  00049C  C0F9  F071         	movff	main@SensorResult+1,?_sprintf+5
  1071  0004A0  C0FA  F072         	movff	main@SensorResult+2,?_sprintf+6
  1072  0004A4  C0FB  F073         	movff	main@SensorResult+3,?_sprintf+7
  1073  0004A8  EC32  F006         	call	_sprintf	;wreg free
  1074                           
  1075                           ;main.c: 148: LCD_String(buf);
  1076  0004AC  0ECF               	movlw	low main@buf
  1077  0004AE  0100               	movlb	0	; () banked
  1078  0004B0  6F66               	movwf	LCD_String@string& (0+255),b
  1079  0004B2  0E00               	movlw	high main@buf
  1080  0004B4  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1081  0004B6  EC85  F00B         	call	_LCD_String	;wreg free
  1082                           
  1083                           ;main.c: 149: }
  1084                           ;main.c: 152: break;
  1085  0004BA  D201               	goto	l3716
  1086  0004BC                     
  1087                           ;main.c: 157: initMotorPWM();
  1088  0004BC  ECD0  F00C         	call	_initMotorPWM	;wreg free
  1089                           
  1090                           ;main.c: 158: initTimer();
  1091  0004C0  EC56  F00D         	call	_initTimer	;wreg free
  1092                           
  1093                           ;main.c: 159: initRFID();
  1094  0004C4  EC48  F00D         	call	_initRFID	;wreg free
  1095                           
  1096                           ;main.c: 160: initLCD();
  1097  0004C8  EC1C  F009         	call	_initLCD	;wreg free
  1098                           
  1099                           ;main.c: 161: initIR();
  1100  0004CC  EC26  F00D         	call	_initIR	;wreg free
  1101                           
  1102                           ;main.c: 163: enableSensor(0, 1);
  1103  0004D0  0E01               	movlw	1
  1104  0004D2  0100               	movlb	0	; () banked
  1105  0004D4  6F60               	movwf	enableSensor@status& (0+255),b
  1106  0004D6  0E00               	movlw	0
  1107  0004D8  ECE9  F00C         	call	_enableSensor
  1108                           
  1109                           ;main.c: 164: enableSensor(1, 1);
  1110  0004DC  0E01               	movlw	1
  1111  0004DE  0100               	movlb	0	; () banked
  1112  0004E0  6F60               	movwf	enableSensor@status& (0+255),b
  1113  0004E2  0E01               	movlw	1
  1114  0004E4  ECE9  F00C         	call	_enableSensor
  1115                           
  1116                           ;main.c: 167: fullSpeedAhead(&mL, &mR, 100);
  1117  0004E8  0ED3               	movlw	low main@mL
  1118  0004EA  0100               	movlb	0	; () banked
  1119  0004EC  6F77               	movwf	fullSpeedAhead@mL& (0+255),b
  1120  0004EE  0E01               	movlw	high main@mL
  1121  0004F0  6F78               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1122  0004F2  0EDC               	movlw	low main@mR
  1123  0004F4  6F79               	movwf	fullSpeedAhead@mR& (0+255),b
  1124  0004F6  0E01               	movlw	high main@mR
  1125  0004F8  6F7A               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1126  0004FA  0E64               	movlw	100
  1127  0004FC  6F7B               	movwf	fullSpeedAhead@power& (0+255),b
  1128  0004FE  ECCD  F00A         	call	_fullSpeedAhead	;wreg free
  1129                           
  1130                           ;main.c: 168: delay_tenth_s(1);
  1131  000502  0E01               	movlw	1
  1132  000504  EC02  F00C         	call	_delay_tenth_s
  1133  000508  D1D9               	goto	l420
  1134  00050A                     
  1135                           ;main.c: 180: SetLine(1);
  1136  00050A  0E01               	movlw	1
  1137  00050C  ECB5  F00C         	call	_SetLine
  1138                           
  1139                           ;main.c: 181: LCD_String("Searching");
  1140  000510  0E44               	movlw	low STR_7
  1141  000512  0100               	movlb	0	; () banked
  1142  000514  6F66               	movwf	LCD_String@string& (0+255),b
  1143  000516  0E03               	movlw	high STR_7
  1144  000518  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1145  00051A  EC85  F00B         	call	_LCD_String	;wreg free
  1146                           
  1147                           ;main.c: 183: if (DirectionFound==-1) {
  1148  00051E  0100               	movlb	0	; () banked
  1149  000520  29FC               	incf	main@DirectionFound& (0+255),w,b
  1150  000522  A4D8               	btfss	status,2,c
  1151  000524  D035               	goto	l401
  1152                           
  1153                           ; BSR set to: 0
  1154                           ;main.c: 188: Move++;
  1155  000526  0101               	movlb	1	; () banked
  1156  000528  2BD2               	incf	main@Move& (0+255),f,b
  1157                           
  1158                           ; BSR set to: 1
  1159                           ;main.c: 189: MoveType[Move]=0;
  1160  00052A  51D2               	movf	main@Move& (0+255),w,b
  1161  00052C  0D01               	mullw	1
  1162  00052E  0E00               	movlw	low main@MoveType
  1163  000530  24F3               	addwf	prodl,w,c
  1164  000532  6ED9               	movwf	fsr2l,c
  1165  000534  0E02               	movlw	high main@MoveType
  1166  000536  20F4               	addwfc	prodh,w,c
  1167  000538  6EDA               	movwf	fsr2h,c
  1168  00053A  0E00               	movlw	0
  1169  00053C  6EDF               	movwf	indf2,c
  1170                           
  1171                           ; BSR set to: 1
  1172                           ;main.c: 190: MoveTime[Move]=6;
  1173  00053E  51D2               	movf	main@Move& (0+255),w,b
  1174  000540  0D02               	mullw	2
  1175  000542  0E00               	movlw	low main@MoveTime
  1176  000544  24F3               	addwf	prodl,w,c
  1177  000546  6ED9               	movwf	fsr2l,c
  1178  000548  0E01               	movlw	high main@MoveTime
  1179  00054A  20F4               	addwfc	prodh,w,c
  1180  00054C  6EDA               	movwf	fsr2h,c
  1181  00054E  0E06               	movlw	6
  1182  000550  6EDE               	movwf	postinc2,c
  1183  000552  0E00               	movlw	0
  1184  000554  6EDD               	movwf	postdec2,c
  1185                           
  1186                           ; BSR set to: 1
  1187                           ;main.c: 191: fullSpeedAhead(&mL, &mR, 100);
  1188  000556  0ED3               	movlw	low main@mL
  1189  000558  0100               	movlb	0	; () banked
  1190  00055A  6F77               	movwf	fullSpeedAhead@mL& (0+255),b
  1191  00055C  0E01               	movlw	high main@mL
  1192  00055E  6F78               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1193  000560  0EDC               	movlw	low main@mR
  1194  000562  6F79               	movwf	fullSpeedAhead@mR& (0+255),b
  1195  000564  0E01               	movlw	high main@mR
  1196  000566  6F7A               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1197  000568  0E64               	movlw	100
  1198  00056A  6F7B               	movwf	fullSpeedAhead@power& (0+255),b
  1199  00056C  ECCD  F00A         	call	_fullSpeedAhead	;wreg free
  1200                           
  1201                           ;main.c: 192: delay_tenth_s(6);
  1202  000570  0E06               	movlw	6
  1203  000572  EC02  F00C         	call	_delay_tenth_s
  1204                           
  1205                           ;main.c: 193: stop(&mL,&mR);
  1206  000576  0ED3               	movlw	low main@mL
  1207  000578  0100               	movlb	0	; () banked
  1208  00057A  6F77               	movwf	stop@mL& (0+255),b
  1209  00057C  0E01               	movlw	high main@mL
  1210  00057E  6F78               	movwf	(stop@mL+1)& (0+255),b
  1211  000580  0EDC               	movlw	low main@mR
  1212  000582  6F79               	movwf	stop@mR& (0+255),b
  1213  000584  0E01               	movlw	high main@mR
  1214  000586  6F7A               	movwf	(stop@mR+1)& (0+255),b
  1215  000588  EC41  F00A         	call	_stop	;wreg free
  1216                           
  1217                           ;main.c: 194: DirectionFound=0;
  1218  00058C  0E00               	movlw	0
  1219  00058E  D031               	goto	L1
  1220  000590                     l401:
  1221                           
  1222                           ; BSR set to: 0
  1223                           
  1224                           ; BSR set to: 0
  1225  000590  51FC               	movf	main@DirectionFound& (0+255),w,b
  1226  000592  A4D8               	btfss	status,2,c
  1227  000594  D020               	goto	l403
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 197: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1231                           ;main.c: 198: &MoveTime, &Move, &MoveType, &RFID_Read);
  1232  000596  0ED3               	movlw	low main@mL
  1233  000598  6F82               	movwf	ScanWithRange@mL& (0+255),b
  1234  00059A  0E01               	movlw	high main@mL
  1235  00059C  6F83               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1236  00059E  0EDC               	movlw	low main@mR
  1237  0005A0  6F84               	movwf	ScanWithRange@mR& (0+255),b
  1238  0005A2  0E01               	movlw	high main@mR
  1239  0005A4  6F85               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1240  0005A6  C0F7  F086         	movff	main@ScanAngle,ScanWithRange@loops
  1241  0005AA  6B87               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1242  0005AC  0E00               	movlw	low main@MoveTime
  1243  0005AE  6F88               	movwf	ScanWithRange@MoveTime& (0+255),b
  1244  0005B0  0E01               	movlw	high main@MoveTime
  1245  0005B2  6F89               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1246  0005B4  0ED2               	movlw	low main@Move
  1247  0005B6  6F8A               	movwf	ScanWithRange@Move& (0+255),b
  1248  0005B8  0E01               	movlw	high main@Move
  1249  0005BA  6F8B               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1250  0005BC  0E00               	movlw	low main@MoveType
  1251  0005BE  6F8C               	movwf	ScanWithRange@MoveType& (0+255),b
  1252  0005C0  0E02               	movlw	high main@MoveType
  1253  0005C2  6F8D               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1254  0005C4  0EF9               	movlw	low _RFID_Read
  1255  0005C6  6F8E               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1256  0005C8  0E01               	movlw	high _RFID_Read
  1257  0005CA  6F8F               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1258  0005CC  EC70  F004         	call	_ScanWithRange	;wreg free
  1259  0005D0  0100               	movlb	0	; () banked
  1260  0005D2  6FFC               	movwf	main@DirectionFound& (0+255),b
  1261  0005D4  D017               	goto	l3638
  1262  0005D6                     l403:
  1263                           
  1264                           ; BSR set to: 1
  1265  0005D6  0100               	movlb	0	; () banked
  1266  0005D8  05FC               	decf	main@DirectionFound& (0+255),w,b
  1267  0005DA  A4D8               	btfss	status,2,c
  1268  0005DC  D00D               	goto	l405
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;main.c: 202: DirectionFound=ScanIR(&mL, &mR);
  1272  0005DE  0ED3               	movlw	low main@mL
  1273  0005E0  6F81               	movwf	ScanIR@mL& (0+255),b
  1274  0005E2  0E01               	movlw	high main@mL
  1275  0005E4  6F82               	movwf	(ScanIR@mL+1)& (0+255),b
  1276  0005E6  0EDC               	movlw	low main@mR
  1277  0005E8  6F83               	movwf	ScanIR@mR& (0+255),b
  1278  0005EA  0E01               	movlw	high main@mR
  1279  0005EC  6F84               	movwf	(ScanIR@mR+1)& (0+255),b
  1280  0005EE  ECA0  F008         	call	_ScanIR	;wreg free
  1281  0005F2                     L1:
  1282  0005F2  0100               	movlb	0	; () banked
  1283  0005F4  6FFC               	movwf	main@DirectionFound& (0+255),b
  1284                           
  1285                           ;main.c: 203: } else if (DirectionFound==2) {
  1286  0005F6  D163               	goto	l3716
  1287  0005F8                     l405:
  1288                           
  1289                           ; BSR set to: 0
  1290                           
  1291                           ; BSR set to: 0
  1292  0005F8  0E02               	movlw	2
  1293  0005FA  19FC               	xorwf	main@DirectionFound& (0+255),w,b
  1294  0005FC  A4D8               	btfss	status,2,c
  1295  0005FE  D15F               	goto	l3716
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;main.c: 205: mode=2;
  1299  000600  0E02               	movlw	2
  1300  000602  6E34               	movwf	_mode,c	;volatile
  1301  000604                     l3638:
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;main.c: 206: MoveType[Move]=1;
  1305  000604  0101               	movlb	1	; () banked
  1306  000606  51D2               	movf	main@Move& (0+255),w,b
  1307  000608  0D01               	mullw	1
  1308  00060A  0E00               	movlw	low main@MoveType
  1309  00060C  24F3               	addwf	prodl,w,c
  1310  00060E  6ED9               	movwf	fsr2l,c
  1311  000610  0E02               	movlw	high main@MoveType
  1312  000612  20F4               	addwfc	prodh,w,c
  1313  000614  6EDA               	movwf	fsr2h,c
  1314  000616  0E01               	movlw	1
  1315  000618  6EDF               	movwf	indf2,c
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;main.c: 207: }
  1319                           ;main.c: 209: break;
  1320                           
  1321                           ; BSR set to: 1
  1322                           
  1323                           ; BSR set to: 1
  1324                           
  1325                           ; BSR set to: 1
  1326  00061A  D151               	goto	l3716
  1327  00061C                     
  1328                           ;main.c: 216: if (RFID_Read) {
  1329                           
  1330                           ; BSR set to: 1
  1331  00061C  0101               	movlb	1	; () banked
  1332  00061E  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1333  000620  B4D8               	btfsc	status,2,c
  1334  000622  D088               	goto	l409
  1335                           
  1336                           ; BSR set to: 1
  1337                           ;main.c: 217: stop(&mL, &mR);
  1338  000624  0ED3               	movlw	low main@mL
  1339  000626  0100               	movlb	0	; () banked
  1340  000628  6F77               	movwf	stop@mL& (0+255),b
  1341  00062A  0E01               	movlw	high main@mL
  1342  00062C  6F78               	movwf	(stop@mL+1)& (0+255),b
  1343  00062E  0EDC               	movlw	low main@mR
  1344  000630  6F79               	movwf	stop@mR& (0+255),b
  1345  000632  0E01               	movlw	high main@mR
  1346  000634  6F7A               	movwf	(stop@mR+1)& (0+255),b
  1347  000636  EC41  F00A         	call	_stop	;wreg free
  1348                           
  1349                           ;main.c: 218: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1350  00063A  0E03               	movlw	3
  1351  00063C  0101               	movlb	1	; () banked
  1352  00063E  19F8               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1353  000640  A4D8               	btfss	status,2,c
  1354  000642  D002               	goto	u3090
  1355  000644  0E01               	movlw	1
  1356  000646  D001               	goto	u3092
  1357  000648                     u3090:
  1358  000648  0E00               	movlw	0
  1359  00064A                     u3092:
  1360  00064A  0100               	movlb	0	; () banked
  1361  00064C  6FCD               	movwf	??_main& (0+255),b
  1362  00064E  0E02               	movlw	2
  1363  000650  0101               	movlb	1	; () banked
  1364  000652  19E9               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1365  000654  A4D8               	btfss	status,2,c
  1366  000656  D002               	goto	u3100
  1367  000658  0E01               	movlw	1
  1368  00065A  D001               	goto	u3102
  1369  00065C                     u3100:
  1370  00065C  0E00               	movlw	0
  1371  00065E                     u3102:
  1372  00065E  0100               	movlb	0	; () banked
  1373  000660  15CD               	andwf	??_main& (0+255),w,b
  1374  000662  A0E8               	btfss	wreg,0,c
  1375  000664  D12C               	goto	l3716
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 219: if (VerifySignal(ReceivedString)){
  1379  000666  0EE9               	movlw	low _ReceivedString
  1380  000668  6F60               	movwf	VerifySignal@Signal& (0+255),b
  1381  00066A  0E01               	movlw	high _ReceivedString
  1382  00066C  6F61               	movwf	(VerifySignal@Signal+1)& (0+255),b
  1383  00066E  EC22  F008         	call	_VerifySignal	;wreg free
  1384  000672  0900               	iorlw	0
  1385  000674  B4D8               	btfsc	status,2,c
  1386  000676  D035               	goto	l411
  1387                           
  1388                           ;main.c: 221: for (i=0; i<10; i++){
  1389  000678  0E00               	movlw	0
  1390  00067A  0100               	movlb	0	; () banked
  1391  00067C  6FFD               	movwf	main@i& (0+255),b
  1392  00067E                     l3650:
  1393                           
  1394                           ; BSR set to: 0
  1395  00067E  0E09               	movlw	9
  1396  000680  65FD               	cpfsgt	main@i& (0+255),b
  1397  000682  D001               	goto	l412
  1398  000684  D019               	goto	u3140
  1399  000686                     l412:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 222: Message[i] = ReceivedString[i+1];
  1403                           
  1404                           ; BSR set to: 0
  1405  000686  51FD               	movf	main@i& (0+255),w,b
  1406  000688  6FCD               	movwf	??_main& (0+255),b
  1407  00068A  6BCE               	clrf	(??_main+1)& (0+255),b
  1408  00068C  0E01               	movlw	1
  1409  00068E  27CD               	addwf	??_main& (0+255),f,b
  1410  000690  0E00               	movlw	0
  1411  000692  23CE               	addwfc	(??_main+1)& (0+255),f,b
  1412  000694  0EE9               	movlw	low _ReceivedString
  1413  000696  25CD               	addwf	??_main& (0+255),w,b
  1414  000698  6ED9               	movwf	fsr2l,c
  1415  00069A  0E01               	movlw	high _ReceivedString
  1416  00069C  21CE               	addwfc	(??_main+1)& (0+255),w,b
  1417  00069E  6EDA               	movwf	fsr2h,c
  1418  0006A0  51FD               	movf	main@i& (0+255),w,b
  1419  0006A2  0D01               	mullw	1
  1420  0006A4  0EC8               	movlw	low main@Message
  1421  0006A6  24F3               	addwf	prodl,w,c
  1422  0006A8  6EE1               	movwf	fsr1l,c
  1423  0006AA  0E01               	movlw	high main@Message
  1424  0006AC  20F4               	addwfc	prodh,w,c
  1425  0006AE  6EE2               	movwf	fsr1h,c
  1426  0006B0  CFDF FFE7          	movff	indf2,indf1
  1427                           
  1428                           ; BSR set to: 0
  1429  0006B4  2BFD               	incf	main@i& (0+255),f,b
  1430  0006B6  D7E3               	goto	l3650
  1431  0006B8                     u3140:
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;main.c: 223: }
  1435                           ;main.c: 226: for (i=0; i<16; i++) {
  1436                           
  1437                           ; BSR set to: 0
  1438  0006B8  0E00               	movlw	0
  1439  0006BA  6FFD               	movwf	main@i& (0+255),b
  1440  0006BC                     l3662:
  1441                           
  1442                           ; BSR set to: 0
  1443  0006BC  0E0F               	movlw	15
  1444  0006BE  65FD               	cpfsgt	main@i& (0+255),b
  1445  0006C0  D001               	goto	l414
  1446  0006C2  D00C               	goto	u3160
  1447  0006C4                     l414:
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 227: ReceivedString[i]=0;
  1451                           
  1452                           ; BSR set to: 0
  1453  0006C4  51FD               	movf	main@i& (0+255),w,b
  1454  0006C6  0D01               	mullw	1
  1455  0006C8  0EE9               	movlw	low _ReceivedString
  1456  0006CA  24F3               	addwf	prodl,w,c
  1457  0006CC  6ED9               	movwf	fsr2l,c
  1458  0006CE  0E01               	movlw	high _ReceivedString
  1459  0006D0  20F4               	addwfc	prodh,w,c
  1460  0006D2  6EDA               	movwf	fsr2h,c
  1461  0006D4  0E00               	movlw	0
  1462  0006D6  6EDF               	movwf	indf2,c
  1463                           
  1464                           ; BSR set to: 0
  1465  0006D8  2BFD               	incf	main@i& (0+255),f,b
  1466  0006DA  D7F0               	goto	l3662
  1467  0006DC                     u3160:
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;main.c: 228: }
  1471                           ;main.c: 229: mode=3;
  1472                           
  1473                           ; BSR set to: 0
  1474  0006DC  0E03               	movlw	3
  1475  0006DE  6E34               	movwf	_mode,c	;volatile
  1476                           
  1477                           ;main.c: 231: } else {
  1478  0006E0  D0EE               	goto	l3716
  1479  0006E2                     l411:
  1480                           
  1481                           ;main.c: 232: fullSpeedBack(&mL,&mR, 100);
  1482                           
  1483                           ; BSR set to: 0
  1484  0006E2  0ED3               	movlw	low main@mL
  1485  0006E4  0100               	movlb	0	; () banked
  1486  0006E6  6F7D               	movwf	fullSpeedBack@mL& (0+255),b
  1487  0006E8  0E01               	movlw	high main@mL
  1488  0006EA  6F7E               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1489  0006EC  0EDC               	movlw	low main@mR
  1490  0006EE  6F7F               	movwf	fullSpeedBack@mR& (0+255),b
  1491  0006F0  0E01               	movlw	high main@mR
  1492  0006F2  6F80               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1493  0006F4  0E64               	movlw	100
  1494  0006F6  6F81               	movwf	fullSpeedBack@power& (0+255),b
  1495  0006F8  EC23  F00C         	call	_fullSpeedBack	;wreg free
  1496                           
  1497                           ;main.c: 233: delay_tenth_s(5);
  1498  0006FC  0E05               	movlw	5
  1499  0006FE  EC02  F00C         	call	_delay_tenth_s
  1500                           
  1501                           ;main.c: 234: stop(&mL,&mR);
  1502  000702  0ED3               	movlw	low main@mL
  1503  000704  0100               	movlb	0	; () banked
  1504  000706  6F77               	movwf	stop@mL& (0+255),b
  1505  000708  0E01               	movlw	high main@mL
  1506  00070A  6F78               	movwf	(stop@mL+1)& (0+255),b
  1507  00070C  0EDC               	movlw	low main@mR
  1508  00070E  6F79               	movwf	stop@mR& (0+255),b
  1509  000710  0E01               	movlw	high main@mR
  1510  000712  6F7A               	movwf	(stop@mR+1)& (0+255),b
  1511  000714  EC41  F00A         	call	_stop	;wreg free
  1512                           
  1513                           ;main.c: 235: fullSpeedAhead(&mL,&mR, 100);
  1514  000718  0ED3               	movlw	low main@mL
  1515  00071A  0100               	movlb	0	; () banked
  1516  00071C  6F77               	movwf	fullSpeedAhead@mL& (0+255),b
  1517  00071E  0E01               	movlw	high main@mL
  1518  000720  6F78               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1519  000722  0EDC               	movlw	low main@mR
  1520  000724  6F79               	movwf	fullSpeedAhead@mR& (0+255),b
  1521  000726  0E01               	movlw	high main@mR
  1522  000728  6F7A               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1523  00072A  0E64               	movlw	100
  1524  00072C  6F7B               	movwf	fullSpeedAhead@power& (0+255),b
  1525  00072E  ECCD  F00A         	call	_fullSpeedAhead	;wreg free
  1526                           
  1527                           ;main.c: 236: }
  1528                           ;main.c: 237: }
  1529                           ;main.c: 238: } else {
  1530  000732  D0C5               	goto	l3716
  1531  000734                     l409:
  1532                           
  1533                           ;main.c: 239: DirectionFound=1;
  1534  000734  0E01               	movlw	1
  1535  000736  0100               	movlb	0	; () banked
  1536  000738  6FFC               	movwf	main@DirectionFound& (0+255),b
  1537                           
  1538                           ;main.c: 240: mode=1;
  1539  00073A  0E01               	movlw	1
  1540  00073C  6E34               	movwf	_mode,c	;volatile
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;main.c: 242: fullSpeedAhead(&mL,&mR, 100);
  1544  00073E  0ED3               	movlw	low main@mL
  1545  000740  6F77               	movwf	fullSpeedAhead@mL& (0+255),b
  1546  000742  0E01               	movlw	high main@mL
  1547  000744  6F78               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1548  000746  0EDC               	movlw	low main@mR
  1549  000748  6F79               	movwf	fullSpeedAhead@mR& (0+255),b
  1550  00074A  0E01               	movlw	high main@mR
  1551  00074C  6F7A               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1552  00074E  0E64               	movlw	100
  1553  000750  6F7B               	movwf	fullSpeedAhead@power& (0+255),b
  1554  000752  ECCD  F00A         	call	_fullSpeedAhead	;wreg free
  1555                           
  1556                           ;main.c: 243: delay_tenth_s(5);
  1557  000756  0E05               	movlw	5
  1558  000758  EC02  F00C         	call	_delay_tenth_s
  1559                           
  1560                           ;main.c: 244: MoveType[Move] = 0;
  1561  00075C  0101               	movlb	1	; () banked
  1562  00075E  51D2               	movf	main@Move& (0+255),w,b
  1563  000760  0D01               	mullw	1
  1564  000762  0E00               	movlw	low main@MoveType
  1565  000764  24F3               	addwf	prodl,w,c
  1566  000766  6ED9               	movwf	fsr2l,c
  1567  000768  0E02               	movlw	high main@MoveType
  1568  00076A  20F4               	addwfc	prodh,w,c
  1569  00076C  6EDA               	movwf	fsr2h,c
  1570  00076E  0E00               	movlw	0
  1571  000770  6EDF               	movwf	indf2,c
  1572                           
  1573                           ; BSR set to: 1
  1574                           ;main.c: 245: MoveTime[Move] = 5;
  1575  000772  51D2               	movf	main@Move& (0+255),w,b
  1576  000774  0D02               	mullw	2
  1577  000776  0E00               	movlw	low main@MoveTime
  1578  000778  24F3               	addwf	prodl,w,c
  1579  00077A  6ED9               	movwf	fsr2l,c
  1580  00077C  0E01               	movlw	high main@MoveTime
  1581  00077E  20F4               	addwfc	prodh,w,c
  1582  000780  6EDA               	movwf	fsr2h,c
  1583  000782  0E05               	movlw	5
  1584  000784  6EDE               	movwf	postinc2,c
  1585  000786  0E00               	movlw	0
  1586  000788  6EDD               	movwf	postdec2,c
  1587                           
  1588                           ; BSR set to: 1
  1589                           ;main.c: 246: }
  1590                           ;main.c: 248: break;
  1591  00078A  D099               	goto	l3716
  1592  00078C                     
  1593                           ;main.c: 253: SetLine(1);
  1594                           
  1595                           ; BSR set to: 1
  1596  00078C  0E01               	movlw	1
  1597  00078E  ECB5  F00C         	call	_SetLine
  1598                           
  1599                           ;main.c: 254: LCD_String(Message);
  1600  000792  0EC8               	movlw	low main@Message
  1601  000794  0100               	movlb	0	; () banked
  1602  000796  6F66               	movwf	LCD_String@string& (0+255),b
  1603  000798  0E01               	movlw	high main@Message
  1604  00079A  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1605  00079C  EC85  F00B         	call	_LCD_String	;wreg free
  1606                           
  1607                           ;main.c: 255: SetLine(2);
  1608  0007A0  0E02               	movlw	2
  1609  0007A2  ECB5  F00C         	call	_SetLine
  1610                           
  1611                           ;main.c: 256: LCD_String("Going Home");
  1612  0007A6  0E39               	movlw	low STR_8
  1613  0007A8  0100               	movlb	0	; () banked
  1614  0007AA  6F66               	movwf	LCD_String@string& (0+255),b
  1615  0007AC  0E03               	movlw	high STR_8
  1616  0007AE  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1617  0007B0  EC85  F00B         	call	_LCD_String	;wreg free
  1618                           
  1619                           ;main.c: 257: stop(&mL,&mR);
  1620  0007B4  0ED3               	movlw	low main@mL
  1621  0007B6  0100               	movlb	0	; () banked
  1622  0007B8  6F77               	movwf	stop@mL& (0+255),b
  1623  0007BA  0E01               	movlw	high main@mL
  1624  0007BC  6F78               	movwf	(stop@mL+1)& (0+255),b
  1625  0007BE  0EDC               	movlw	low main@mR
  1626  0007C0  6F79               	movwf	stop@mR& (0+255),b
  1627  0007C2  0E01               	movlw	high main@mR
  1628  0007C4  6F7A               	movwf	(stop@mR+1)& (0+255),b
  1629  0007C6  EC41  F00A         	call	_stop	;wreg free
  1630  0007CA                     
  1631                           ;main.c: 260: if (MoveType[Move]==0) {
  1632  0007CA  0101               	movlb	1	; () banked
  1633  0007CC  51D2               	movf	main@Move& (0+255),w,b
  1634  0007CE  0D01               	mullw	1
  1635  0007D0  0E00               	movlw	low main@MoveType
  1636  0007D2  24F3               	addwf	prodl,w,c
  1637  0007D4  6ED9               	movwf	fsr2l,c
  1638  0007D6  0E02               	movlw	high main@MoveType
  1639  0007D8  20F4               	addwfc	prodh,w,c
  1640  0007DA  6EDA               	movwf	fsr2h,c
  1641  0007DC  50DF               	movf	indf2,w,c
  1642  0007DE  A4D8               	btfss	status,2,c
  1643  0007E0  D01A               	goto	l421
  1644                           
  1645                           ; BSR set to: 1
  1646                           ;main.c: 261: fullSpeedBack(&mL,&mR,100);
  1647  0007E2  0ED3               	movlw	low main@mL
  1648  0007E4  0100               	movlb	0	; () banked
  1649  0007E6  6F7D               	movwf	fullSpeedBack@mL& (0+255),b
  1650  0007E8  0E01               	movlw	high main@mL
  1651  0007EA  6F7E               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1652  0007EC  0EDC               	movlw	low main@mR
  1653  0007EE  6F7F               	movwf	fullSpeedBack@mR& (0+255),b
  1654  0007F0  0E01               	movlw	high main@mR
  1655  0007F2  6F80               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1656  0007F4  0E64               	movlw	100
  1657  0007F6  6F81               	movwf	fullSpeedBack@power& (0+255),b
  1658  0007F8  EC23  F00C         	call	_fullSpeedBack	;wreg free
  1659                           
  1660                           ;main.c: 262: delay_tenth_s(MoveTime[Move]);
  1661  0007FC  0101               	movlb	1	; () banked
  1662  0007FE  51D2               	movf	main@Move& (0+255),w,b
  1663  000800  0D02               	mullw	2
  1664  000802  0E00               	movlw	low main@MoveTime
  1665  000804  24F3               	addwf	prodl,w,c
  1666  000806  6ED9               	movwf	fsr2l,c
  1667  000808  0E01               	movlw	high main@MoveTime
  1668  00080A  20F4               	addwfc	prodh,w,c
  1669  00080C  6EDA               	movwf	fsr2h,c
  1670  00080E  50DF               	movf	indf2,w,c
  1671  000810  EC02  F00C         	call	_delay_tenth_s
  1672                           
  1673                           ;main.c: 263: } else if (MoveType[Move]==1) {
  1674  000814  D050               	goto	l425
  1675  000816                     l421:
  1676  000816  0101               	movlb	1	; () banked
  1677  000818  51D2               	movf	main@Move& (0+255),w,b
  1678  00081A  0D01               	mullw	1
  1679  00081C  0E00               	movlw	low main@MoveType
  1680  00081E  24F3               	addwf	prodl,w,c
  1681  000820  6ED9               	movwf	fsr2l,c
  1682  000822  0E02               	movlw	high main@MoveType
  1683  000824  20F4               	addwfc	prodh,w,c
  1684  000826  6EDA               	movwf	fsr2h,c
  1685  000828  04DE               	decf	postinc2,w,c
  1686  00082A  A4D8               	btfss	status,2,c
  1687  00082C  D044               	goto	l425
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;main.c: 264: if (MoveTime[Move]>0) {
  1691  00082E  51D2               	movf	main@Move& (0+255),w,b
  1692  000830  0D02               	mullw	2
  1693  000832  0E00               	movlw	low main@MoveTime
  1694  000834  24F3               	addwf	prodl,w,c
  1695  000836  6ED9               	movwf	fsr2l,c
  1696  000838  0E01               	movlw	high main@MoveTime
  1697  00083A  20F4               	addwfc	prodh,w,c
  1698  00083C  6EDA               	movwf	fsr2h,c
  1699  00083E  0E01               	movlw	1
  1700  000840  BEDB               	btfsc	plusw2,7,c
  1701  000842  D020               	goto	l424
  1702  000844  0E01               	movlw	1
  1703  000846  50DB               	movf	plusw2,w,c
  1704  000848  E103               	bnz	u3190
  1705  00084A  04DE               	decf	postinc2,w,c
  1706  00084C  A0D8               	btfss	status,0,c
  1707  00084E  D01A               	goto	l424
  1708  000850                     u3190:
  1709                           
  1710                           ; BSR set to: 1
  1711                           ;main.c: 265: turnRight(&mL,&mR,100);
  1712  000850  0ED3               	movlw	low main@mL
  1713  000852  0100               	movlb	0	; () banked
  1714  000854  6F7D               	movwf	turnRight@mL& (0+255),b
  1715  000856  0E01               	movlw	high main@mL
  1716  000858  6F7E               	movwf	(turnRight@mL+1)& (0+255),b
  1717  00085A  0EDC               	movlw	low main@mR
  1718  00085C  6F7F               	movwf	turnRight@mR& (0+255),b
  1719  00085E  0E01               	movlw	high main@mR
  1720  000860  6F80               	movwf	(turnRight@mR+1)& (0+255),b
  1721  000862  0E64               	movlw	100
  1722  000864  6F81               	movwf	turnRight@power& (0+255),b
  1723  000866  EC41  F00C         	call	_turnRight	;wreg free
  1724                           
  1725                           ;main.c: 266: delay_tenth_s(MoveTime[Move]);
  1726  00086A  0101               	movlb	1	; () banked
  1727  00086C  51D2               	movf	main@Move& (0+255),w,b
  1728  00086E  0D02               	mullw	2
  1729  000870  0E00               	movlw	low main@MoveTime
  1730  000872  24F3               	addwf	prodl,w,c
  1731  000874  6ED9               	movwf	fsr2l,c
  1732  000876  0E01               	movlw	high main@MoveTime
  1733  000878  20F4               	addwfc	prodh,w,c
  1734  00087A  6EDA               	movwf	fsr2h,c
  1735  00087C  50DF               	movf	indf2,w,c
  1736  00087E  EC02  F00C         	call	_delay_tenth_s
  1737                           
  1738                           ;main.c: 267: } else {
  1739  000882  D019               	goto	l425
  1740  000884                     l424:
  1741                           
  1742                           ;main.c: 268: turnLeft(&mL,&mR,100);
  1743  000884  0ED3               	movlw	low main@mL
  1744  000886  0100               	movlb	0	; () banked
  1745  000888  6F7D               	movwf	turnLeft@mL& (0+255),b
  1746  00088A  0E01               	movlw	high main@mL
  1747  00088C  6F7E               	movwf	(turnLeft@mL+1)& (0+255),b
  1748  00088E  0EDC               	movlw	low main@mR
  1749  000890  6F7F               	movwf	turnLeft@mR& (0+255),b
  1750  000892  0E01               	movlw	high main@mR
  1751  000894  6F80               	movwf	(turnLeft@mR+1)& (0+255),b
  1752  000896  0E64               	movlw	100
  1753  000898  6F81               	movwf	turnLeft@power& (0+255),b
  1754  00089A  EC5F  F00C         	call	_turnLeft	;wreg free
  1755                           
  1756                           ;main.c: 269: delay_tenth_s(MoveTime[Move]);
  1757  00089E  0101               	movlb	1	; () banked
  1758  0008A0  51D2               	movf	main@Move& (0+255),w,b
  1759  0008A2  0D02               	mullw	2
  1760  0008A4  0E00               	movlw	low main@MoveTime
  1761  0008A6  24F3               	addwf	prodl,w,c
  1762  0008A8  6ED9               	movwf	fsr2l,c
  1763  0008AA  0E01               	movlw	high main@MoveTime
  1764  0008AC  20F4               	addwfc	prodh,w,c
  1765  0008AE  6EDA               	movwf	fsr2h,c
  1766  0008B0  50DF               	movf	indf2,w,c
  1767  0008B2  EC02  F00C         	call	_delay_tenth_s
  1768  0008B6                     l425:
  1769  0008B6  0101               	movlb	1	; () banked
  1770  0008B8  07D2               	decf	main@Move& (0+255),f,b
  1771  0008BA  D787               	goto	l419
  1772  0008BC                     l420:
  1773                           
  1774                           ;main.c: 270: }
  1775                           ;main.c: 271: }
  1776                           ;main.c: 272: }
  1777                           ;main.c: 273: mode=-1;
  1778  0008BC  6834               	setf	_mode,c	;volatile
  1779  0008BE                     l3716:
  1780                           
  1781                           ;main.c: 276: }
  1782  0008BE  5034               	movf	_mode,w,c	;volatile
  1783                           
  1784                           ; Switch size 1, requested type "space"
  1785                           ; Number of cases is 5, Range of values is 0 to 255
  1786                           ; switch strategies available:
  1787                           ; Name         Instructions Cycles
  1788                           ; simple_byte           16     9 (average)
  1789                           ;	Chosen strategy is simple_byte
  1790  0008C0  0A00               	xorlw	0	; case 0
  1791  0008C2  B4D8               	btfsc	status,2,c
  1792  0008C4  D5FB               	goto	l399
  1793  0008C6  0A01               	xorlw	1	; case 1
  1794  0008C8  B4D8               	btfsc	status,2,c
  1795  0008CA  D61F               	goto	l400
  1796  0008CC  0A03               	xorlw	3	; case 2
  1797  0008CE  B4D8               	btfsc	status,2,c
  1798  0008D0  D6A5               	goto	l408
  1799  0008D2  0A01               	xorlw	1	; case 3
  1800  0008D4  B4D8               	btfsc	status,2,c
  1801  0008D6  D75A               	goto	l418
  1802  0008D8  0AFC               	xorlw	252	; case 255
  1803  0008DA  B4D8               	btfsc	status,2,c
  1804  0008DC  D580               	goto	l395
  1805  0008DE  D7EF               	goto	l3716
  1806  0008E0                     __end_of_main:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           prodh	equ	0xFF4
  1810                           prodl	equ	0xFF3
  1811                           intcon	equ	0xFF2
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           indf1	equ	0xFE7
  1815                           fsr1h	equ	0xFE2
  1816                           fsr1l	equ	0xFE1
  1817                           indf2	equ	0xFDF
  1818                           postinc2	equ	0xFDE
  1819                           postdec2	equ	0xFDD
  1820                           plusw2	equ	0xFDB
  1821                           fsr2h	equ	0xFDA
  1822                           fsr2l	equ	0xFD9
  1823                           status	equ	0xFD8
  1824                           
  1825 ;; *************** function _initTimer *****************
  1826 ;; Defined at:
  1827 ;;		line 8 in file "Movement.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		None
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1841 ;;      Params:         0       0       0       0
  1842 ;;      Locals:         0       0       0       0
  1843 ;;      Temps:          0       0       0       0
  1844 ;;      Totals:         0       0       0       0
  1845 ;;Total ram usage:        0 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    3
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text1
  1856  001AAC                     __ptext1:
  1857                           	opt stack 0
  1858  001AAC                     _initTimer:
  1859                           	opt stack 27
  1860                           
  1861                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1862                           
  1863                           ;incstack = 0
  1864  001AAC  9ED5               	bcf	4053,7,c	;volatile
  1865                           
  1866                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1867  001AAE  9CD5               	bcf	4053,6,c	;volatile
  1868                           
  1869                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1870  001AB0  9AD5               	bcf	4053,5,c	;volatile
  1871                           
  1872                           ;Movement.c: 13: T0CONbits.PSA=0;
  1873  001AB2  96D5               	bcf	4053,3,c	;volatile
  1874                           
  1875                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1876  001AB4  80D5               	bsf	4053,0,c	;volatile
  1877  001AB6  82D5               	bsf	4053,1,c	;volatile
  1878  001AB8  84D5               	bsf	4053,2,c	;volatile
  1879                           
  1880                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1881  001ABA  9AF2               	bcf	intcon,5,c	;volatile
  1882  001ABC  0012               	return		;funcret
  1883  001ABE                     __end_of_initTimer:
  1884                           	opt stack 0
  1885                           tblptru	equ	0xFF8
  1886                           prodh	equ	0xFF4
  1887                           prodl	equ	0xFF3
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           indf1	equ	0xFE7
  1892                           fsr1h	equ	0xFE2
  1893                           fsr1l	equ	0xFE1
  1894                           indf2	equ	0xFDF
  1895                           postinc2	equ	0xFDE
  1896                           postdec2	equ	0xFDD
  1897                           plusw2	equ	0xFDB
  1898                           fsr2h	equ	0xFDA
  1899                           fsr2l	equ	0xFD9
  1900                           status	equ	0xFD8
  1901                           
  1902 ;; *************** function _initRFID *****************
  1903 ;; Defined at:
  1904 ;;		line 5 in file "RFID_Reader.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, status,2, status,0
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1918 ;;      Params:         0       0       0       0
  1919 ;;      Locals:         0       0       0       0
  1920 ;;      Temps:          0       0       0       0
  1921 ;;      Totals:         0       0       0       0
  1922 ;;Total ram usage:        0 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    3
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text2
  1933  001A90                     __ptext2:
  1934                           	opt stack 0
  1935  001A90                     _initRFID:
  1936                           	opt stack 27
  1937                           
  1938                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1939                           
  1940                           ;incstack = 0
  1941  001A90  5094               	movf	3988,w,c	;volatile
  1942  001A92  09C0               	iorlw	192
  1943  001A94  6E94               	movwf	3988,c	;volatile
  1944                           
  1945                           ;RFID_Reader.c: 10: SPBRG=205;
  1946  001A96  0ECD               	movlw	205
  1947  001A98  6EAF               	movwf	4015,c	;volatile
  1948                           
  1949                           ;RFID_Reader.c: 11: SPBRGH=0;
  1950  001A9A  0E00               	movlw	0
  1951  001A9C  6EB0               	movwf	4016,c	;volatile
  1952                           
  1953                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1954  001A9E  86AA               	bsf	4010,3,c	;volatile
  1955                           
  1956                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1957  001AA0  84AC               	bsf	4012,2,c	;volatile
  1958                           
  1959                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1960  001AA2  88AB               	bsf	4011,4,c	;volatile
  1961                           
  1962                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1963  001AA4  8EAB               	bsf	4011,7,c	;volatile
  1964                           
  1965                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1966  001AA6  98AC               	bcf	4012,4,c	;volatile
  1967                           
  1968                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1969  001AA8  9CAB               	bcf	4011,6,c	;volatile
  1970  001AAA  0012               	return		;funcret
  1971  001AAC                     __end_of_initRFID:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           prodh	equ	0xFF4
  1975                           prodl	equ	0xFF3
  1976                           intcon	equ	0xFF2
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           indf1	equ	0xFE7
  1980                           fsr1h	equ	0xFE2
  1981                           fsr1l	equ	0xFE1
  1982                           indf2	equ	0xFDF
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           plusw2	equ	0xFDB
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _initMotorPWM *****************
  1991 ;; Defined at:
  1992 ;;		line 4 in file "dc_motor.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;		None
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;		None
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2006 ;;      Params:         0       0       0       0
  2007 ;;      Locals:         0       0       0       0
  2008 ;;      Temps:          0       0       0       0
  2009 ;;      Totals:         0       0       0       0
  2010 ;;Total ram usage:        0 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    3
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text3
  2021  0019A0                     __ptext3:
  2022                           	opt stack 0
  2023  0019A0                     _initMotorPWM:
  2024                           	opt stack 27
  2025                           
  2026                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2027                           
  2028                           ;incstack = 0
  2029  0019A0  0E00               	movlw	0
  2030  0019A2  6E7F               	movwf	3967,c	;volatile
  2031                           
  2032                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2033  0019A4  0E80               	movlw	128
  2034  0019A6  6E7E               	movwf	3966,c	;volatile
  2035                           
  2036                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2037  0019A8  0E6F               	movlw	111
  2038  0019AA  6E6F               	movwf	3951,c	;volatile
  2039                           
  2040                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2041  0019AC  0E00               	movlw	0
  2042  0019AE  6E6E               	movwf	3950,c	;volatile
  2043                           
  2044                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2045  0019B0  0EC7               	movlw	199
  2046  0019B2  6E7B               	movwf	3963,c	;volatile
  2047                           
  2048                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2049  0019B4  0E00               	movlw	0
  2050  0019B6  6E7A               	movwf	3962,c	;volatile
  2051                           
  2052                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2053  0019B8  0E00               	movlw	0
  2054  0019BA  6E79               	movwf	3961,c	;volatile
  2055                           
  2056                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2057  0019BC  0E00               	movlw	0
  2058  0019BE  6E78               	movwf	3960,c	;volatile
  2059                           
  2060                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2061  0019C0  0E00               	movlw	0
  2062  0019C2  6E77               	movwf	3959,c	;volatile
  2063                           
  2064                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2065  0019C4  0E00               	movlw	0
  2066  0019C6  6E76               	movwf	3958,c	;volatile
  2067                           
  2068                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2069  0019C8  9093               	bcf	3987,0,c	;volatile
  2070                           
  2071                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2072  0019CA  9293               	bcf	3987,1,c	;volatile
  2073                           
  2074                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2075  0019CC  9493               	bcf	3987,2,c	;volatile
  2076                           
  2077                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2078  0019CE  9693               	bcf	3987,3,c	;volatile
  2079  0019D0  0012               	return		;funcret
  2080  0019D2                     __end_of_initMotorPWM:
  2081                           	opt stack 0
  2082                           tblptru	equ	0xFF8
  2083                           prodh	equ	0xFF4
  2084                           prodl	equ	0xFF3
  2085                           intcon	equ	0xFF2
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           indf1	equ	0xFE7
  2089                           fsr1h	equ	0xFE2
  2090                           fsr1l	equ	0xFE1
  2091                           indf2	equ	0xFDF
  2092                           postinc2	equ	0xFDE
  2093                           postdec2	equ	0xFDD
  2094                           plusw2	equ	0xFDB
  2095                           fsr2h	equ	0xFDA
  2096                           fsr2l	equ	0xFD9
  2097                           status	equ	0xFD8
  2098                           
  2099 ;; *************** function _initLCD *****************
  2100 ;; Defined at:
  2101 ;;		line 38 in file "LCD.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2115 ;;      Params:         0       0       0       0
  2116 ;;      Locals:         0       0       0       0
  2117 ;;      Temps:          0       1       0       0
  2118 ;;      Totals:         0       1       0       0
  2119 ;;Total ram usage:        1 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    6
  2122 ;; This function calls:
  2123 ;;		_LCDout
  2124 ;;		_SendLCD
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text4
  2131  001238                     __ptext4:
  2132                           	opt stack 0
  2133  001238                     _initLCD:
  2134                           	opt stack 24
  2135                           
  2136                           ;LCD.c: 44: TRISAbits.RA6=0;
  2137                           
  2138                           ;incstack = 0
  2139  001238  9C92               	bcf	3986,6,c	;volatile
  2140                           
  2141                           ;LCD.c: 45: TRISCbits.RC0=0;
  2142  00123A  9094               	bcf	3988,0,c	;volatile
  2143                           
  2144                           ;LCD.c: 46: TRISCbits.RC1=0;
  2145  00123C  9294               	bcf	3988,1,c	;volatile
  2146                           
  2147                           ;LCD.c: 47: TRISCbits.RC2=0;
  2148  00123E  9494               	bcf	3988,2,c	;volatile
  2149                           
  2150                           ;LCD.c: 48: TRISDbits.RD0=0;
  2151  001240  9095               	bcf	3989,0,c	;volatile
  2152                           
  2153                           ;LCD.c: 49: TRISDbits.RD1=0;
  2154  001242  9295               	bcf	3989,1,c	;volatile
  2155                           
  2156                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2157  001244  0E27               	movlw	39
  2158  001246  0100               	movlb	0	; () banked
  2159  001248  6F66               	movwf	??_initLCD& (0+255),b
  2160  00124A  0EF5               	movlw	245
  2161  00124C                     u3227:
  2162  00124C  2EE8               	decfsz	wreg,f,c
  2163  00124E  D7FE               	bra	u3227
  2164  001250  2F66               	decfsz	??_initLCD& (0+255),f,b
  2165  001252  D7FC               	bra	u3227
  2166                           
  2167                           ;LCD.c: 52: LCDout(0b0011);
  2168  001254  0E03               	movlw	3
  2169  001256  EC83  F009         	call	_LCDout
  2170                           
  2171                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2172  00125A  0E0D               	movlw	13
  2173  00125C  0100               	movlb	0	; () banked
  2174  00125E  6F66               	movwf	??_initLCD& (0+255),b
  2175  001260  0EFB               	movlw	251
  2176  001262                     u3237:
  2177  001262  2EE8               	decfsz	wreg,f,c
  2178  001264  D7FE               	bra	u3237
  2179  001266  2F66               	decfsz	??_initLCD& (0+255),f,b
  2180  001268  D7FC               	bra	u3237
  2181  00126A  D000               	nop2	
  2182                           
  2183                           ;LCD.c: 54: LCDout(0b0011);
  2184  00126C  0E03               	movlw	3
  2185  00126E  EC83  F009         	call	_LCDout
  2186                           
  2187                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2188  001272  0E85               	movlw	133
  2189  001274                     u3247:
  2190  001274  2EE8               	decfsz	wreg,f,c
  2191  001276  D7FE               	bra	u3247
  2192  001278  F000               	nop	
  2193                           
  2194                           ;LCD.c: 56: LCDout(0b0011);
  2195  00127A  0E03               	movlw	3
  2196  00127C  EC83  F009         	call	_LCDout
  2197                           
  2198                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2199  001280  0E21               	movlw	33
  2200  001282                     u3257:
  2201  001282  2EE8               	decfsz	wreg,f,c
  2202  001284  D7FE               	bra	u3257
  2203  001286  F000               	nop	
  2204                           
  2205                           ;LCD.c: 58: LCDout(0b0010);
  2206  001288  0E02               	movlw	2
  2207  00128A  EC83  F009         	call	_LCDout
  2208                           
  2209                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2210  00128E  0E21               	movlw	33
  2211  001290                     u3267:
  2212  001290  2EE8               	decfsz	wreg,f,c
  2213  001292  D7FE               	bra	u3267
  2214  001294  F000               	nop	
  2215                           
  2216                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2217  001296  0E00               	movlw	0
  2218  001298  0100               	movlb	0	; () banked
  2219  00129A  6F64               	movwf	SendLCD@type& (0+255),b
  2220  00129C  0E28               	movlw	40
  2221  00129E  EC7D  F00C         	call	_SendLCD
  2222                           
  2223                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2224  0012A2  0E21               	movlw	33
  2225  0012A4                     u3277:
  2226  0012A4  2EE8               	decfsz	wreg,f,c
  2227  0012A6  D7FE               	bra	u3277
  2228  0012A8  F000               	nop	
  2229                           
  2230                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2231  0012AA  0E00               	movlw	0
  2232  0012AC  0100               	movlb	0	; () banked
  2233  0012AE  6F64               	movwf	SendLCD@type& (0+255),b
  2234  0012B0  0E08               	movlw	8
  2235  0012B2  EC7D  F00C         	call	_SendLCD
  2236                           
  2237                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2238  0012B6  0E21               	movlw	33
  2239  0012B8                     u3287:
  2240  0012B8  2EE8               	decfsz	wreg,f,c
  2241  0012BA  D7FE               	bra	u3287
  2242  0012BC  F000               	nop	
  2243                           
  2244                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2245  0012BE  0E00               	movlw	0
  2246  0012C0  0100               	movlb	0	; () banked
  2247  0012C2  6F64               	movwf	SendLCD@type& (0+255),b
  2248  0012C4  0E01               	movlw	1
  2249  0012C6  EC7D  F00C         	call	_SendLCD
  2250                           
  2251                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2252  0012CA  0E0D               	movlw	13
  2253  0012CC  0100               	movlb	0	; () banked
  2254  0012CE  6F66               	movwf	??_initLCD& (0+255),b
  2255  0012D0  0EFB               	movlw	251
  2256  0012D2                     u3297:
  2257  0012D2  2EE8               	decfsz	wreg,f,c
  2258  0012D4  D7FE               	bra	u3297
  2259  0012D6  2F66               	decfsz	??_initLCD& (0+255),f,b
  2260  0012D8  D7FC               	bra	u3297
  2261  0012DA  D000               	nop2	
  2262                           
  2263                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2264  0012DC  0E00               	movlw	0
  2265  0012DE  0100               	movlb	0	; () banked
  2266  0012E0  6F64               	movwf	SendLCD@type& (0+255),b
  2267  0012E2  0E06               	movlw	6
  2268  0012E4  EC7D  F00C         	call	_SendLCD
  2269                           
  2270                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2271  0012E8  0E21               	movlw	33
  2272  0012EA                     u3307:
  2273  0012EA  2EE8               	decfsz	wreg,f,c
  2274  0012EC  D7FE               	bra	u3307
  2275  0012EE  F000               	nop	
  2276                           
  2277                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2278  0012F0  0E00               	movlw	0
  2279  0012F2  0100               	movlb	0	; () banked
  2280  0012F4  6F64               	movwf	SendLCD@type& (0+255),b
  2281  0012F6  0E0C               	movlw	12
  2282  0012F8  EC7D  F00C         	call	_SendLCD
  2283                           
  2284                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2285  0012FC  0E21               	movlw	33
  2286  0012FE                     u3317:
  2287  0012FE  2EE8               	decfsz	wreg,f,c
  2288  001300  D7FE               	bra	u3317
  2289  001302  F000               	nop	
  2290  001304  0012               	return		;funcret
  2291  001306                     __end_of_initLCD:
  2292                           	opt stack 0
  2293                           tblptru	equ	0xFF8
  2294                           prodh	equ	0xFF4
  2295                           prodl	equ	0xFF3
  2296                           intcon	equ	0xFF2
  2297                           postinc0	equ	0xFEE
  2298                           wreg	equ	0xFE8
  2299                           indf1	equ	0xFE7
  2300                           fsr1h	equ	0xFE2
  2301                           fsr1l	equ	0xFE1
  2302                           indf2	equ	0xFDF
  2303                           postinc2	equ	0xFDE
  2304                           postdec2	equ	0xFDD
  2305                           plusw2	equ	0xFDB
  2306                           fsr2h	equ	0xFDA
  2307                           fsr2l	equ	0xFD9
  2308                           status	equ	0xFD8
  2309                           
  2310 ;; *************** function _initIR *****************
  2311 ;; Defined at:
  2312 ;;		line 30 in file "IR_Reading.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2326 ;;      Params:         0       0       0       0
  2327 ;;      Locals:         0       0       0       0
  2328 ;;      Temps:          0       0       0       0
  2329 ;;      Totals:         0       0       0       0
  2330 ;;Total ram usage:        0 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    3
  2333 ;; This function calls:
  2334 ;;		Nothing
  2335 ;; This function is called by:
  2336 ;;		_main
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text5
  2341  001A4C                     __ptext5:
  2342                           	opt stack 0
  2343  001A4C                     _initIR:
  2344                           	opt stack 27
  2345                           
  2346                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2347                           
  2348                           ;incstack = 0
  2349  001A4C  9489               	bcf	3977,2,c	;volatile
  2350                           
  2351                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2352  001A4E  9689               	bcf	3977,3,c	;volatile
  2353                           
  2354                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2355  001A50  8492               	bsf	3986,2,c	;volatile
  2356                           
  2357                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2358  001A52  8692               	bsf	3986,3,c	;volatile
  2359                           
  2360                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2361  001A54  94B8               	bcf	4024,2,c	;volatile
  2362                           
  2363                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2364  001A56  96B8               	bcf	4024,3,c	;volatile
  2365                           
  2366                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2367  001A58  9CB8               	bcf	4024,6,c	;volatile
  2368                           
  2369                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2370  001A5A  9EB8               	bcf	4024,7,c	;volatile
  2371                           
  2372                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2373  001A5C  0E06               	movlw	6
  2374  001A5E  6E63               	movwf	3939,c	;volatile
  2375                           
  2376                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2377  001A60  0E06               	movlw	6
  2378  001A62  6E62               	movwf	3938,c	;volatile
  2379                           
  2380                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2381  001A64  9096               	bcf	3990,0,c	;volatile
  2382                           
  2383                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2384  001A66  9296               	bcf	3990,1,c	;volatile
  2385                           
  2386                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2387  001A68  0E59               	movlw	89
  2388  001A6A  6EB7               	movwf	4023,c	;volatile
  2389  001A6C  0012               	return		;funcret
  2390  001A6E                     __end_of_initIR:
  2391                           	opt stack 0
  2392                           tblptru	equ	0xFF8
  2393                           prodh	equ	0xFF4
  2394                           prodl	equ	0xFF3
  2395                           intcon	equ	0xFF2
  2396                           postinc0	equ	0xFEE
  2397                           wreg	equ	0xFE8
  2398                           indf1	equ	0xFE7
  2399                           fsr1h	equ	0xFE2
  2400                           fsr1l	equ	0xFE1
  2401                           indf2	equ	0xFDF
  2402                           postinc2	equ	0xFDE
  2403                           postdec2	equ	0xFDD
  2404                           plusw2	equ	0xFDB
  2405                           fsr2h	equ	0xFDA
  2406                           fsr2l	equ	0xFD9
  2407                           status	equ	0xFD8
  2408                           
  2409 ;; *************** function _fullSpeedBack *****************
  2410 ;; Defined at:
  2411 ;;		line 125 in file "dc_motor.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  mL              2   29[BANK0 ] PTR struct DC_motor
  2414 ;;		 -> main@mL(9), 
  2415 ;;  mR              2   31[BANK0 ] PTR struct DC_motor
  2416 ;;		 -> main@mR(9), 
  2417 ;;  power           1   33[BANK0 ] unsigned char 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  1    wreg      void 
  2422 ;; Registers used:
  2423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2429 ;;      Params:         0       5       0       0
  2430 ;;      Locals:         0       0       0       0
  2431 ;;      Temps:          0       0       0       0
  2432 ;;      Totals:         0       5       0       0
  2433 ;;Total ram usage:        5 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    6
  2436 ;; This function calls:
  2437 ;;		_fullSpeedAhead
  2438 ;; This function is called by:
  2439 ;;		_main
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text6
  2444  001846                     __ptext6:
  2445                           	opt stack 0
  2446  001846                     _fullSpeedBack:
  2447                           	opt stack 24
  2448                           
  2449                           ;dc_motor.c: 128: mL->direction=0;
  2450                           
  2451                           ;incstack = 0
  2452  001846  0100               	movlb	0	; () banked
  2453  001848  EE20 F001          	lfsr	2,1
  2454  00184C  517D               	movf	fullSpeedBack@mL& (0+255),w,b
  2455  00184E  26D9               	addwf	fsr2l,f,c
  2456  001850  517E               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2457  001852  22DA               	addwfc	fsr2h,f,c
  2458  001854  0E00               	movlw	0
  2459  001856  6EDF               	movwf	indf2,c
  2460                           
  2461                           ;dc_motor.c: 129: mR->direction=0;
  2462  001858  EE20 F001          	lfsr	2,1
  2463  00185C  517F               	movf	fullSpeedBack@mR& (0+255),w,b
  2464  00185E  26D9               	addwf	fsr2l,f,c
  2465  001860  5180               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2466  001862  22DA               	addwfc	fsr2h,f,c
  2467  001864  0E00               	movlw	0
  2468  001866  6EDF               	movwf	indf2,c
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2472  001868  C07D  F077         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2473  00186C  C07E  F078         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2474  001870  C07F  F079         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2475  001874  C080  F07A         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2476  001878  C081  F07B         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2477  00187C  ECCD  F00A         	call	_fullSpeedAhead	;wreg free
  2478  001880  0012               	return		;funcret
  2479  001882                     __end_of_fullSpeedBack:
  2480                           	opt stack 0
  2481                           tblptru	equ	0xFF8
  2482                           prodh	equ	0xFF4
  2483                           prodl	equ	0xFF3
  2484                           intcon	equ	0xFF2
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           indf1	equ	0xFE7
  2488                           fsr1h	equ	0xFE2
  2489                           fsr1l	equ	0xFE1
  2490                           indf2	equ	0xFDF
  2491                           postinc2	equ	0xFDE
  2492                           postdec2	equ	0xFDD
  2493                           plusw2	equ	0xFDB
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _enableSensor *****************
  2499 ;; Defined at:
  2500 ;;		line 106 in file "IR_Reading.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  sensor          1    wreg     unsigned char 
  2503 ;;  status          1    0[BANK0 ] unsigned char 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  sensor          1    1[BANK0 ] unsigned char 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2515 ;;      Params:         0       1       0       0
  2516 ;;      Locals:         0       1       0       0
  2517 ;;      Temps:          0       0       0       0
  2518 ;;      Totals:         0       2       0       0
  2519 ;;Total ram usage:        2 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    3
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text7
  2530  0019D2                     __ptext7:
  2531                           	opt stack 0
  2532  0019D2                     _enableSensor:
  2533                           	opt stack 27
  2534                           
  2535                           ;incstack = 0
  2536                           ;enableSensor@sensor stored from wreg
  2537  0019D2  0100               	movlb	0	; () banked
  2538  0019D4  6F61               	movwf	enableSensor@sensor& (0+255),b
  2539                           
  2540                           ;IR_Reading.c: 108: if (sensor==0){
  2541  0019D6  0100               	movlb	0	; () banked
  2542  0019D8  5161               	movf	enableSensor@sensor& (0+255),w,b
  2543  0019DA  A4D8               	btfss	status,2,c
  2544  0019DC  D006               	goto	l115
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2548  0019DE  B160               	btfsc	enableSensor@status& (0+255),0,b
  2549  0019E0  D002               	bra	u2855
  2550  0019E2  908D               	bcf	3981,0,c	;volatile
  2551  0019E4  D001               	bra	u2856
  2552  0019E6                     u2855:
  2553  0019E6  808D               	bsf	3981,0,c	;volatile
  2554  0019E8                     u2856:
  2555                           
  2556                           ;IR_Reading.c: 110: } else if (sensor==1){
  2557  0019E8  0012               	return	
  2558  0019EA                     l115:
  2559  0019EA  0100               	movlb	0	; () banked
  2560  0019EC  0561               	decf	enableSensor@sensor& (0+255),w,b
  2561  0019EE  A4D8               	btfss	status,2,c
  2562  0019F0  0012               	return	
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2566  0019F2  B160               	btfsc	enableSensor@status& (0+255),0,b
  2567  0019F4  D002               	bra	u2875
  2568  0019F6  928D               	bcf	3981,1,c	;volatile
  2569  0019F8  D001               	bra	u2876
  2570  0019FA                     u2875:
  2571  0019FA  828D               	bsf	3981,1,c	;volatile
  2572  0019FC                     u2876:
  2573  0019FC  0012               	return	
  2574  0019FE                     __end_of_enableSensor:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           prodh	equ	0xFF4
  2578                           prodl	equ	0xFF3
  2579                           intcon	equ	0xFF2
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           indf1	equ	0xFE7
  2583                           fsr1h	equ	0xFE2
  2584                           fsr1l	equ	0xFE1
  2585                           indf2	equ	0xFDF
  2586                           postinc2	equ	0xFDE
  2587                           postdec2	equ	0xFDD
  2588                           plusw2	equ	0xFDB
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _VerifySignal *****************
  2594 ;; Defined at:
  2595 ;;		line 55 in file "RFID_Reader.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  Signal          2    0[BANK0 ] PTR unsigned char 
  2598 ;;		 -> ReceivedString(16), 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  hexByte         2    8[BANK0 ] unsigned int 
  2601 ;;  i               1   11[BANK0 ] unsigned char 
  2602 ;;  checksum        1   10[BANK0 ] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      unsigned char 
  2605 ;; Registers used:
  2606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2612 ;;      Params:         0       2       0       0
  2613 ;;      Locals:         0       4       0       0
  2614 ;;      Temps:          0       6       0       0
  2615 ;;      Totals:         0      12       0       0
  2616 ;;Total ram usage:       12 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    3
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text8
  2627  001044                     __ptext8:
  2628                           	opt stack 0
  2629  001044                     _VerifySignal:
  2630                           	opt stack 27
  2631                           
  2632                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2633                           
  2634                           ;incstack = 0
  2635  001044  0E00               	movlw	0
  2636  001046  0100               	movlb	0	; () banked
  2637  001048  6F6A               	movwf	VerifySignal@checksum& (0+255),b
  2638                           
  2639                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2640  00104A  0E00               	movlw	0
  2641  00104C  6F69               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2642  00104E  0E00               	movlw	0
  2643  001050  6F68               	movwf	VerifySignal@hexByte& (0+255),b
  2644                           
  2645                           ;RFID_Reader.c: 58: unsigned char i=0;
  2646  001052  0E00               	movlw	0
  2647  001054  6F6B               	movwf	VerifySignal@i& (0+255),b
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2651  001056  EE20 F004          	lfsr	2,4
  2652  00105A  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2653  00105C  26D9               	addwf	fsr2l,f,c
  2654  00105E  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2655  001060  22DA               	addwfc	fsr2h,f,c
  2656  001062  50DF               	movf	indf2,w,c
  2657  001064  6F62               	movwf	??_VerifySignal& (0+255),b
  2658  001066  EE20 F003          	lfsr	2,3
  2659  00106A  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2660  00106C  26D9               	addwf	fsr2l,f,c
  2661  00106E  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2662  001070  22DA               	addwfc	fsr2h,f,c
  2663  001072  50DF               	movf	indf2,w,c
  2664  001074  6F63               	movwf	(??_VerifySignal+1)& (0+255),b
  2665  001076  5163               	movf	(??_VerifySignal+1)& (0+255),w,b
  2666  001078  6F65               	movwf	(??_VerifySignal+3)& (0+255),b
  2667  00107A  6B64               	clrf	(??_VerifySignal+2)& (0+255),b
  2668  00107C  5162               	movf	??_VerifySignal& (0+255),w,b
  2669  00107E  2564               	addwf	(??_VerifySignal+2)& (0+255),w,b
  2670  001080  6F68               	movwf	VerifySignal@hexByte& (0+255),b
  2671  001082  0E00               	movlw	0
  2672  001084  2165               	addwfc	(??_VerifySignal+3)& (0+255),w,b
  2673  001086  6F69               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2677  001088  EE20 F002          	lfsr	2,2
  2678  00108C  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2679  00108E  26D9               	addwf	fsr2l,f,c
  2680  001090  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2681  001092  22DA               	addwfc	fsr2h,f,c
  2682  001094  50DF               	movf	indf2,w,c
  2683  001096  1968               	xorwf	VerifySignal@hexByte& (0+255),w,b
  2684  001098  6F6A               	movwf	VerifySignal@checksum& (0+255),b
  2685                           
  2686                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2687  00109A  0E05               	movlw	5
  2688  00109C  6F6B               	movwf	VerifySignal@i& (0+255),b
  2689  00109E                     l3474:
  2690                           
  2691                           ; BSR set to: 0
  2692  00109E  0E09               	movlw	9
  2693  0010A0  656B               	cpfsgt	VerifySignal@i& (0+255),b
  2694  0010A2  D001               	goto	l275
  2695  0010A4  D028               	goto	u2980
  2696  0010A6                     l275:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2700                           
  2701                           ; BSR set to: 0
  2702  0010A6  516B               	movf	VerifySignal@i& (0+255),w,b
  2703  0010A8  6F62               	movwf	??_VerifySignal& (0+255),b
  2704  0010AA  6B63               	clrf	(??_VerifySignal+1)& (0+255),b
  2705  0010AC  0E01               	movlw	1
  2706  0010AE  2762               	addwf	??_VerifySignal& (0+255),f,b
  2707  0010B0  0E00               	movlw	0
  2708  0010B2  2363               	addwfc	(??_VerifySignal+1)& (0+255),f,b
  2709  0010B4  5162               	movf	??_VerifySignal& (0+255),w,b
  2710  0010B6  2560               	addwf	VerifySignal@Signal& (0+255),w,b
  2711  0010B8  6ED9               	movwf	fsr2l,c
  2712  0010BA  5163               	movf	(??_VerifySignal+1)& (0+255),w,b
  2713  0010BC  2161               	addwfc	(VerifySignal@Signal+1)& (0+255),w,b
  2714  0010BE  6EDA               	movwf	fsr2h,c
  2715  0010C0  50DF               	movf	indf2,w,c
  2716  0010C2  6F64               	movwf	(??_VerifySignal+2)& (0+255),b
  2717  0010C4  516B               	movf	VerifySignal@i& (0+255),w,b
  2718  0010C6  0D01               	mullw	1
  2719  0010C8  50F3               	movf	prodl,w,c
  2720  0010CA  2560               	addwf	VerifySignal@Signal& (0+255),w,b
  2721  0010CC  6ED9               	movwf	fsr2l,c
  2722  0010CE  50F4               	movf	prodh,w,c
  2723  0010D0  2161               	addwfc	(VerifySignal@Signal+1)& (0+255),w,b
  2724  0010D2  6EDA               	movwf	fsr2h,c
  2725  0010D4  50DF               	movf	indf2,w,c
  2726  0010D6  6F65               	movwf	(??_VerifySignal+3)& (0+255),b
  2727  0010D8  5165               	movf	(??_VerifySignal+3)& (0+255),w,b
  2728  0010DA  6F67               	movwf	(??_VerifySignal+5)& (0+255),b
  2729  0010DC  6B66               	clrf	(??_VerifySignal+4)& (0+255),b
  2730  0010DE  5164               	movf	(??_VerifySignal+2)& (0+255),w,b
  2731  0010E0  2566               	addwf	(??_VerifySignal+4)& (0+255),w,b
  2732  0010E2  6F68               	movwf	VerifySignal@hexByte& (0+255),b
  2733  0010E4  0E00               	movlw	0
  2734  0010E6  2167               	addwfc	(??_VerifySignal+5)& (0+255),w,b
  2735  0010E8  6F69               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2739  0010EA  516A               	movf	VerifySignal@checksum& (0+255),w,b
  2740  0010EC  1968               	xorwf	VerifySignal@hexByte& (0+255),w,b
  2741  0010EE  6F6A               	movwf	VerifySignal@checksum& (0+255),b
  2742                           
  2743                           ; BSR set to: 0
  2744  0010F0  0E02               	movlw	2
  2745  0010F2  276B               	addwf	VerifySignal@i& (0+255),f,b
  2746  0010F4  D7D4               	goto	l3474
  2747  0010F6                     u2980:
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;RFID_Reader.c: 68: }
  2751                           ;RFID_Reader.c: 70: if ((checksum==((Signal[11]<<8)+Signal[12]))){
  2752                           
  2753                           ; BSR set to: 0
  2754  0010F6  516A               	movf	VerifySignal@checksum& (0+255),w,b
  2755  0010F8  6F62               	movwf	??_VerifySignal& (0+255),b
  2756  0010FA  6B63               	clrf	(??_VerifySignal+1)& (0+255),b
  2757  0010FC  EE20 F00B          	lfsr	2,11
  2758  001100  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2759  001102  26D9               	addwf	fsr2l,f,c
  2760  001104  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2761  001106  22DA               	addwfc	fsr2h,f,c
  2762  001108  50DF               	movf	indf2,w,c
  2763  00110A  6F64               	movwf	(??_VerifySignal+2)& (0+255),b
  2764  00110C  5164               	movf	(??_VerifySignal+2)& (0+255),w,b
  2765  00110E  6F66               	movwf	(??_VerifySignal+4)& (0+255),b
  2766  001110  6B65               	clrf	(??_VerifySignal+3)& (0+255),b
  2767  001112  EE20 F00C          	lfsr	2,12
  2768  001116  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2769  001118  26D9               	addwf	fsr2l,f,c
  2770  00111A  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2771  00111C  22DA               	addwfc	fsr2h,f,c
  2772  00111E  50DF               	movf	indf2,w,c
  2773  001120  6F67               	movwf	(??_VerifySignal+5)& (0+255),b
  2774  001122  5167               	movf	(??_VerifySignal+5)& (0+255),w,b
  2775  001124  2765               	addwf	(??_VerifySignal+3)& (0+255),f,b
  2776  001126  0E00               	movlw	0
  2777  001128  2366               	addwfc	(??_VerifySignal+4)& (0+255),f,b
  2778  00112A  5162               	movf	??_VerifySignal& (0+255),w,b
  2779  00112C  1965               	xorwf	(??_VerifySignal+3)& (0+255),w,b
  2780  00112E  E106               	bnz	l3494
  2781  001130  5163               	movf	(??_VerifySignal+1)& (0+255),w,b
  2782  001132  1966               	xorwf	(??_VerifySignal+4)& (0+255),w,b
  2783  001134  A4D8               	btfss	status,2,c
  2784  001136  D002               	goto	l277
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;RFID_Reader.c: 71: return 1;
  2788  001138  0E01               	movlw	1
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;RFID_Reader.c: 72: } else{
  2792                           
  2793                           ; BSR set to: 0
  2794  00113A  0012               	return	
  2795  00113C                     l277:
  2796  00113C                     l3494:
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;RFID_Reader.c: 73: return 0;
  2800  00113C  0E00               	movlw	0
  2801                           
  2802                           ; BSR set to: 0
  2803  00113E  0012               	return	
  2804  001140                     __end_of_VerifySignal:
  2805                           	opt stack 0
  2806                           tblptru	equ	0xFF8
  2807                           prodh	equ	0xFF4
  2808                           prodl	equ	0xFF3
  2809                           intcon	equ	0xFF2
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           indf1	equ	0xFE7
  2813                           fsr1h	equ	0xFE2
  2814                           fsr1l	equ	0xFE1
  2815                           indf2	equ	0xFDF
  2816                           postinc2	equ	0xFDE
  2817                           postdec2	equ	0xFDD
  2818                           plusw2	equ	0xFDB
  2819                           fsr2h	equ	0xFDA
  2820                           fsr2l	equ	0xFD9
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function _ScanWithRange *****************
  2824 ;; Defined at:
  2825 ;;		line 98 in file "Movement.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  mL              2   34[BANK0 ] PTR struct DC_motor
  2828 ;;		 -> main@mL(9), 
  2829 ;;  mR              2   36[BANK0 ] PTR struct DC_motor
  2830 ;;		 -> main@mR(9), 
  2831 ;;  loops           2   38[BANK0 ] int 
  2832 ;;  MoveTime        2   40[BANK0 ] PTR int 
  2833 ;;		 -> main@MoveTime(200), 
  2834 ;;  Move            2   42[BANK0 ] PTR unsigned char 
  2835 ;;		 -> main@Move(1), 
  2836 ;;  MoveType        2   44[BANK0 ] PTR unsigned char 
  2837 ;;		 -> main@MoveType(100), 
  2838 ;;  RFID_Read       2   46[BANK0 ] PTR unsigned char 
  2839 ;;		 -> RFID_Read(1), 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  buf            40   53[BANK0 ] unsigned char [40]
  2842 ;;  SensorResult    4  103[BANK0 ] unsigned int [2]
  2843 ;;  RightFlag       2  107[BANK0 ] unsigned int 
  2844 ;;  LeftFlag        2  100[BANK0 ] unsigned int 
  2845 ;;  DirectionFou    2   97[BANK0 ] const unsigned int 
  2846 ;;  i               2   95[BANK0 ] unsigned int 
  2847 ;;  n               2   93[BANK0 ] unsigned int 
  2848 ;;  TimeAboveThr    1  102[BANK0 ] unsigned char 
  2849 ;;  power           1   99[BANK0 ] const unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      unsigned char 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2859 ;;      Params:         0      14       0       0
  2860 ;;      Locals:         0      56       0       0
  2861 ;;      Temps:          0       5       0       0
  2862 ;;      Totals:         0      75       0       0
  2863 ;;Total ram usage:       75 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    7
  2866 ;; This function calls:
  2867 ;;		_LCD_String
  2868 ;;		_SendLCD
  2869 ;;		_SetLine
  2870 ;;		_delay_tenth_s
  2871 ;;		_grabLeftIR
  2872 ;;		_grabRightIR
  2873 ;;		_sprintf
  2874 ;;		_stop
  2875 ;;		_turnLeft
  2876 ;;		_turnRight
  2877 ;; This function is called by:
  2878 ;;		_main
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text9
  2883  0008E0                     __ptext9:
  2884                           	opt stack 0
  2885  0008E0                     _ScanWithRange:
  2886                           	opt stack 23
  2887                           
  2888                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;incstack = 0
  2892  0008E0  C02C  F0C7         	movff	ScanWithRange@F3553,ScanWithRange@SensorResult
  2893  0008E4  C02D  F0C8         	movff	ScanWithRange@F3553+1,ScanWithRange@SensorResult+1
  2894  0008E8  C02E  F0C9         	movff	ScanWithRange@F3553+2,ScanWithRange@SensorResult+2
  2895  0008EC  C02F  F0CA         	movff	ScanWithRange@F3553+3,ScanWithRange@SensorResult+3
  2896                           
  2897                           ;Movement.c: 103: unsigned int LeftFlag=0;
  2898  0008F0  0E00               	movlw	0
  2899  0008F2  0100               	movlb	0	; () banked
  2900  0008F4  6FC5               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2901  0008F6  0E00               	movlw	0
  2902  0008F8  6FC4               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2903                           
  2904                           ;Movement.c: 104: unsigned int RightFlag=0;
  2905  0008FA  0E00               	movlw	0
  2906  0008FC  6FCC               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2907  0008FE  0E00               	movlw	0
  2908  000900  6FCB               	movwf	ScanWithRange@RightFlag& (0+255),b
  2909                           
  2910                           ;Movement.c: 105: char buf[40];
  2911                           ;Movement.c: 106: unsigned int i=0;
  2912  000902  0E00               	movlw	0
  2913  000904  6FC0               	movwf	(ScanWithRange@i+1)& (0+255),b
  2914  000906  0E00               	movlw	0
  2915  000908  6FBF               	movwf	ScanWithRange@i& (0+255),b
  2916                           
  2917                           ;Movement.c: 107: unsigned int n=0;
  2918  00090A  0E00               	movlw	0
  2919  00090C  6FBE               	movwf	(ScanWithRange@n+1)& (0+255),b
  2920  00090E  0E00               	movlw	0
  2921  000910  6FBD               	movwf	ScanWithRange@n& (0+255),b
  2922                           
  2923                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  2924  000912  0E00               	movlw	0
  2925  000914  6FC6               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2926                           
  2927                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=3000;
  2928  000916  0E0B               	movlw	11
  2929  000918  6FC2               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2930  00091A  0EB8               	movlw	184
  2931  00091C  6FC1               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2932                           
  2933                           ;Movement.c: 112: const unsigned char power=40;
  2934  00091E  0E28               	movlw	40
  2935  000920  6FC3               	movwf	ScanWithRange@power& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;Movement.c: 122: *Move++;
  2939  000922  4B8A               	infsnz	ScanWithRange@Move& (0+255),f,b
  2940  000924  2B8B               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;Movement.c: 123: (MoveType[*Move]) = 2;
  2944  000926  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  2945  00092A  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  2946  00092E  50DF               	movf	indf2,w,c
  2947  000930  6F90               	movwf	??_ScanWithRange& (0+255),b
  2948  000932  5190               	movf	??_ScanWithRange& (0+255),w,b
  2949  000934  0D01               	mullw	1
  2950  000936  50F3               	movf	prodl,w,c
  2951  000938  258C               	addwf	ScanWithRange@MoveType& (0+255),w,b
  2952  00093A  6ED9               	movwf	fsr2l,c
  2953  00093C  50F4               	movf	prodh,w,c
  2954  00093E  218D               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  2955  000940  6EDA               	movwf	fsr2h,c
  2956  000942  0E02               	movlw	2
  2957  000944  6EDF               	movwf	indf2,c
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;Movement.c: 124: (MoveTime[*Move]) = -3;
  2961  000946  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  2962  00094A  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  2963  00094E  50DF               	movf	indf2,w,c
  2964  000950  6F90               	movwf	??_ScanWithRange& (0+255),b
  2965  000952  5190               	movf	??_ScanWithRange& (0+255),w,b
  2966  000954  0D02               	mullw	2
  2967  000956  50F3               	movf	prodl,w,c
  2968  000958  2588               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  2969  00095A  6ED9               	movwf	fsr2l,c
  2970  00095C  50F4               	movf	prodh,w,c
  2971  00095E  2189               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  2972  000960  6EDA               	movwf	fsr2h,c
  2973  000962  0EFD               	movlw	253
  2974  000964  6EDE               	movwf	postinc2,c
  2975  000966  0EFF               	movlw	255
  2976  000968  6EDD               	movwf	postdec2,c
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;Movement.c: 126: turnLeft(mL,mR, 100);
  2980  00096A  C082  F07D         	movff	ScanWithRange@mL,turnLeft@mL
  2981  00096E  C083  F07E         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2982  000972  C084  F07F         	movff	ScanWithRange@mR,turnLeft@mR
  2983  000976  C085  F080         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2984  00097A  0E64               	movlw	100
  2985  00097C  6F81               	movwf	turnLeft@power& (0+255),b
  2986  00097E  EC5F  F00C         	call	_turnLeft	;wreg free
  2987                           
  2988                           ;Movement.c: 127: delay_tenth_s(3);
  2989  000982  0E03               	movlw	3
  2990  000984  EC02  F00C         	call	_delay_tenth_s
  2991                           
  2992                           ;Movement.c: 128: stop(mL,mR);
  2993  000988  C082  F077         	movff	ScanWithRange@mL,stop@mL
  2994  00098C  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  2995  000990  C084  F079         	movff	ScanWithRange@mR,stop@mR
  2996  000994  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  2997  000998  EC41  F00A         	call	_stop	;wreg free
  2998                           
  2999                           ;Movement.c: 131: turnRight(mL,mR, power);
  3000  00099C  C082  F07D         	movff	ScanWithRange@mL,turnRight@mL
  3001  0009A0  C083  F07E         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3002  0009A4  C084  F07F         	movff	ScanWithRange@mR,turnRight@mR
  3003  0009A8  C085  F080         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3004  0009AC  C0C3  F081         	movff	ScanWithRange@power,turnRight@power
  3005  0009B0  EC41  F00C         	call	_turnRight	;wreg free
  3006                           
  3007                           ;Movement.c: 134: TMR0L = 0;
  3008  0009B4  0E00               	movlw	0
  3009  0009B6  6ED6               	movwf	4054,c	;volatile
  3010                           
  3011                           ;Movement.c: 135: TMR0H = 0;
  3012  0009B8  0E00               	movlw	0
  3013  0009BA  6ED7               	movwf	4055,c	;volatile
  3014                           
  3015                           ;Movement.c: 136: T0CONbits.TMR0ON=1;
  3016  0009BC  8ED5               	bsf	4053,7,c	;volatile
  3017                           
  3018                           ;Movement.c: 138: for (i=1; i<=loops; i++) {
  3019  0009BE  0E00               	movlw	0
  3020  0009C0  0100               	movlb	0	; () banked
  3021  0009C2  6FC0               	movwf	(ScanWithRange@i+1)& (0+255),b
  3022  0009C4  0E01               	movlw	1
  3023  0009C6  6FBF               	movwf	ScanWithRange@i& (0+255),b
  3024  0009C8  D108               	goto	l219
  3025  0009CA                     
  3026                           ; BSR set to: 0
  3027                           ;Movement.c: 141: SensorResult[0]=grabLeftIR();
  3028                           
  3029                           ; BSR set to: 0
  3030  0009CA  EC48  F00B         	call	_grabLeftIR	;wreg free
  3031  0009CE  C060  F0C7         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3032  0009D2  C061  F0C8         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3033                           
  3034                           ;Movement.c: 142: SensorResult[1]=grabRightIR();
  3035  0009D6  EC0B  F00B         	call	_grabRightIR	;wreg free
  3036  0009DA  C060  F0C9         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3037  0009DE  C061  F0CA         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3038                           
  3039                           ;Movement.c: 146: CAP1BUFH=0;
  3040  0009E2  0E00               	movlw	0
  3041  0009E4  6E69               	movwf	3945,c	;volatile
  3042                           
  3043                           ;Movement.c: 147: CAP1BUFL=0;
  3044  0009E6  0E00               	movlw	0
  3045  0009E8  6E68               	movwf	3944,c	;volatile
  3046                           
  3047                           ;Movement.c: 148: CAP2BUFH=0;
  3048  0009EA  0E00               	movlw	0
  3049  0009EC  6E67               	movwf	3943,c	;volatile
  3050                           
  3051                           ;Movement.c: 149: CAP2BUFL=0;
  3052  0009EE  0E00               	movlw	0
  3053  0009F0  6E66               	movwf	3942,c	;volatile
  3054                           
  3055                           ;Movement.c: 153: SendLCD(0b00000001,0);
  3056  0009F2  0E00               	movlw	0
  3057  0009F4  0100               	movlb	0	; () banked
  3058  0009F6  6F64               	movwf	SendLCD@type& (0+255),b
  3059  0009F8  0E01               	movlw	1
  3060  0009FA  EC7D  F00C         	call	_SendLCD
  3061                           
  3062                           ;Movement.c: 154: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3063  0009FE  0E21               	movlw	33
  3064  000A00                     u3327:
  3065  000A00  2EE8               	decfsz	wreg,f,c
  3066  000A02  D7FE               	bra	u3327
  3067  000A04  F000               	nop	
  3068                           
  3069                           ;Movement.c: 155: SendLCD(0b00000010,0);
  3070  000A06  0E00               	movlw	0
  3071  000A08  0100               	movlb	0	; () banked
  3072  000A0A  6F64               	movwf	SendLCD@type& (0+255),b
  3073  000A0C  0E02               	movlw	2
  3074  000A0E  EC7D  F00C         	call	_SendLCD
  3075                           
  3076                           ;Movement.c: 156: _delay((unsigned long)((2)*(8000000/4000.0)));
  3077  000A12  0E06               	movlw	6
  3078  000A14  0100               	movlb	0	; () banked
  3079  000A16  6F90               	movwf	??_ScanWithRange& (0+255),b
  3080  000A18  0E30               	movlw	48
  3081  000A1A                     u3337:
  3082  000A1A  2EE8               	decfsz	wreg,f,c
  3083  000A1C  D7FE               	bra	u3337
  3084  000A1E  2F90               	decfsz	??_ScanWithRange& (0+255),f,b
  3085  000A20  D7FC               	bra	u3337
  3086  000A22  F000               	nop	
  3087                           
  3088                           ;Movement.c: 157: SetLine(1);
  3089  000A24  0E01               	movlw	1
  3090  000A26  ECB5  F00C         	call	_SetLine
  3091                           
  3092                           ;Movement.c: 158: LCD_String("     ScanIR");
  3093  000A2A  0E2D               	movlw	low STR_1
  3094  000A2C  0100               	movlb	0	; () banked
  3095  000A2E  6F66               	movwf	LCD_String@string& (0+255),b
  3096  000A30  0E03               	movlw	high STR_1
  3097  000A32  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  3098  000A34  EC85  F00B         	call	_LCD_String	;wreg free
  3099                           
  3100                           ;Movement.c: 159: SetLine(2);
  3101  000A38  0E02               	movlw	2
  3102  000A3A  ECB5  F00C         	call	_SetLine
  3103                           
  3104                           ;Movement.c: 160: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3105  000A3E  0E95               	movlw	low ScanWithRange@buf
  3106  000A40  0100               	movlb	0	; () banked
  3107  000A42  6F6C               	movwf	sprintf@sp& (0+255),b
  3108  000A44  0E00               	movlw	high ScanWithRange@buf
  3109  000A46  6F6D               	movwf	(sprintf@sp+1)& (0+255),b
  3110  000A48  0E0C               	movlw	low (STR_6+1)
  3111  000A4A  6F6E               	movwf	sprintf@f& (0+255),b
  3112  000A4C  0E03               	movlw	high (STR_6+1)
  3113  000A4E  6F6F               	movwf	(sprintf@f+1)& (0+255),b
  3114  000A50  C0C7  F070         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3115  000A54  C0C8  F071         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3116  000A58  C0C9  F072         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3117  000A5C  C0CA  F073         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3118  000A60  EC32  F006         	call	_sprintf	;wreg free
  3119                           
  3120                           ;Movement.c: 161: LCD_String(buf);
  3121  000A64  0E95               	movlw	low ScanWithRange@buf
  3122  000A66  0100               	movlb	0	; () banked
  3123  000A68  6F66               	movwf	LCD_String@string& (0+255),b
  3124  000A6A  0E00               	movlw	high ScanWithRange@buf
  3125  000A6C  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  3126  000A6E  EC85  F00B         	call	_LCD_String	;wreg free
  3127                           
  3128                           ;Movement.c: 163: if (SensorResult[1]>DirectionFoundThreshold) {
  3129  000A72  0100               	movlb	0	; () banked
  3130  000A74  51C9               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3131  000A76  5DC1               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3132  000A78  51CA               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3133  000A7A  59C2               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3134  000A7C  B0D8               	btfsc	status,0,c
  3135  000A7E  D009               	goto	l221
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;Movement.c: 164: RightFlag= (TMR0H<<8)+TMR0L;
  3139  000A80  50D7               	movf	4055,w,c	;volatile
  3140  000A82  6F91               	movwf	(??_ScanWithRange+1)& (0+255),b
  3141  000A84  6B90               	clrf	??_ScanWithRange& (0+255),b
  3142  000A86  50D6               	movf	4054,w,c	;volatile
  3143  000A88  2590               	addwf	??_ScanWithRange& (0+255),w,b
  3144  000A8A  6FCB               	movwf	ScanWithRange@RightFlag& (0+255),b
  3145  000A8C  0E00               	movlw	0
  3146  000A8E  2191               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3147  000A90  6FCC               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3148  000A92                     l221:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;Movement.c: 165: }
  3152                           ;Movement.c: 167: if (SensorResult[0]>DirectionFoundThreshold) {
  3153  000A92  51C7               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3154  000A94  5DC1               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3155  000A96  51C8               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3156  000A98  59C2               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3157  000A9A  B0D8               	btfsc	status,0,c
  3158  000A9C  D009               	goto	l222
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;Movement.c: 168: LeftFlag=(TMR0H<<8)+TMR0L;
  3162  000A9E  50D7               	movf	4055,w,c	;volatile
  3163  000AA0  6F91               	movwf	(??_ScanWithRange+1)& (0+255),b
  3164  000AA2  6B90               	clrf	??_ScanWithRange& (0+255),b
  3165  000AA4  50D6               	movf	4054,w,c	;volatile
  3166  000AA6  2590               	addwf	??_ScanWithRange& (0+255),w,b
  3167  000AA8  6FC4               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3168  000AAA  0E00               	movlw	0
  3169  000AAC  2191               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3170  000AAE  6FC5               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3171  000AB0                     l222:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;Movement.c: 169: }
  3175                           ;Movement.c: 176: if (LeftFlag>0) {
  3176  000AB0  51C4               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3177  000AB2  11C5               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3178  000AB4  B4D8               	btfsc	status,2,c
  3179  000AB6  D085               	goto	l229
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;Movement.c: 179: if (RightFlag>0) {
  3183  000AB8  51CB               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3184  000ABA  11CC               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3185  000ABC  B4D8               	btfsc	status,2,c
  3186  000ABE  D074               	goto	l224
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;Movement.c: 180: TimeAboveThreshold = LeftFlag - RightFlag;
  3190  000AC0  51CB               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3191  000AC2  0800               	sublw	0
  3192  000AC4  25C4               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3193  000AC6  6FC6               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;Movement.c: 181: TMR0L = 0;
  3197  000AC8  0E00               	movlw	0
  3198  000ACA  6ED6               	movwf	4054,c	;volatile
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;Movement.c: 182: TMR0H = 0;
  3202  000ACC  0E00               	movlw	0
  3203  000ACE  6ED7               	movwf	4055,c	;volatile
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;Movement.c: 183: stop(mL,mR);
  3207  000AD0  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3208  000AD4  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3209  000AD8  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3210  000ADC  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3211  000AE0  EC41  F00A         	call	_stop	;wreg free
  3212                           
  3213                           ;Movement.c: 184: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3214  000AE4  D00C               	goto	l225
  3215  000AE6                     
  3216                           ;Movement.c: 185: turnLeft(mL,mR, power);
  3217  000AE6  C082  F07D         	movff	ScanWithRange@mL,turnLeft@mL
  3218  000AEA  C083  F07E         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3219  000AEE  C084  F07F         	movff	ScanWithRange@mR,turnLeft@mR
  3220  000AF2  C085  F080         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3221  000AF6  C0C3  F081         	movff	ScanWithRange@power,turnLeft@power
  3222  000AFA  EC5F  F00C         	call	_turnLeft	;wreg free
  3223  000AFE                     l225:
  3224  000AFE  0100               	movlb	0	; () banked
  3225  000B00  90D8               	bcf	status,0,c
  3226  000B02  31C6               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3227  000B04  6F90               	movwf	??_ScanWithRange& (0+255),b
  3228  000B06  6B91               	clrf	(??_ScanWithRange+1)& (0+255),b
  3229  000B08  50D6               	movf	4054,w,c	;volatile
  3230  000B0A  CFD7 F092          	movff	4055,??_ScanWithRange+2	;volatile
  3231  000B0E  6B93               	clrf	(??_ScanWithRange+3)& (0+255),b
  3232  000B10  C092  F093         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3233  000B14  6B92               	clrf	(??_ScanWithRange+2)& (0+255),b
  3234  000B16  2792               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3235  000B18  0E00               	movlw	0
  3236  000B1A  2393               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3237  000B1C  5190               	movf	??_ScanWithRange& (0+255),w,b
  3238  000B1E  5D92               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3239  000B20  5193               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3240  000B22  0A80               	xorlw	128
  3241  000B24  6F94               	movwf	(??_ScanWithRange+4)& (0+255),b
  3242  000B26  5191               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3243  000B28  0A80               	xorlw	128
  3244  000B2A  5994               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3245  000B2C  A0D8               	btfss	status,0,c
  3246  000B2E  D7DB               	goto	l226
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;Movement.c: 186: }
  3250                           ;Movement.c: 187: T0CONbits.TMR0ON=0;
  3251  000B30  9ED5               	bcf	4053,7,c	;volatile
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;Movement.c: 188: stop(mL,mR);
  3255  000B32  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3256  000B36  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3257  000B3A  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3258  000B3E  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3259  000B42  EC41  F00A         	call	_stop	;wreg free
  3260                           
  3261                           ;Movement.c: 190: *Move++;
  3262  000B46  0100               	movlb	0	; () banked
  3263  000B48  4B8A               	infsnz	ScanWithRange@Move& (0+255),f,b
  3264  000B4A  2B8B               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;Movement.c: 191: (MoveType[*Move]) = 1;
  3268  000B4C  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3269  000B50  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3270  000B54  50DF               	movf	indf2,w,c
  3271  000B56  6F90               	movwf	??_ScanWithRange& (0+255),b
  3272  000B58  5190               	movf	??_ScanWithRange& (0+255),w,b
  3273  000B5A  0D01               	mullw	1
  3274  000B5C  50F3               	movf	prodl,w,c
  3275  000B5E  258C               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3276  000B60  6ED9               	movwf	fsr2l,c
  3277  000B62  50F4               	movf	prodh,w,c
  3278  000B64  218D               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3279  000B66  6EDA               	movwf	fsr2h,c
  3280  000B68  0E01               	movlw	1
  3281  000B6A  6EDF               	movwf	indf2,c
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;Movement.c: 192: (MoveTime[*Move]) = RightFlag + (TimeAboveThreshold>>1);
  3285  000B6C  C0C6  F090         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3286  000B70  90D8               	bcf	status,0,c
  3287  000B72  3390               	rrcf	??_ScanWithRange& (0+255),f,b
  3288  000B74  5190               	movf	??_ScanWithRange& (0+255),w,b
  3289  000B76  25CB               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3290  000B78  6F91               	movwf	(??_ScanWithRange+1)& (0+255),b
  3291  000B7A  0E00               	movlw	0
  3292  000B7C  21CC               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3293  000B7E  6F92               	movwf	(??_ScanWithRange+2)& (0+255),b
  3294  000B80  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3295  000B84  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3296  000B88  50DF               	movf	indf2,w,c
  3297  000B8A  6F93               	movwf	(??_ScanWithRange+3)& (0+255),b
  3298  000B8C  5193               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3299  000B8E  0D02               	mullw	2
  3300  000B90  50F3               	movf	prodl,w,c
  3301  000B92  2588               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3302  000B94  6ED9               	movwf	fsr2l,c
  3303  000B96  50F4               	movf	prodh,w,c
  3304  000B98  2189               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3305  000B9A  6EDA               	movwf	fsr2h,c
  3306  000B9C  C091  FFDE         	movff	??_ScanWithRange+1,postinc2
  3307  000BA0  C092  FFDD         	movff	??_ScanWithRange+2,postdec2
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;Movement.c: 194: return 2;
  3311  000BA4  0E02               	movlw	2
  3312                           
  3313                           ; BSR set to: 0
  3314  000BA6  0012               	return	
  3315  000BA8                     l224:
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;Movement.c: 197: T0CONbits.TMR0ON=0;
  3319  000BA8  9ED5               	bcf	4053,7,c	;volatile
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;Movement.c: 198: stop(mL,mR);
  3323  000BAA  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3324  000BAE  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3325  000BB2  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3326  000BB6  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3327  000BBA  EC41  F00A         	call	_stop	;wreg free
  3328                           
  3329                           ;Movement.c: 199: return 2;
  3330  000BBE  0E02               	movlw	2
  3331  000BC0  0012               	return	
  3332  000BC2                     l229:
  3333                           
  3334                           ;Movement.c: 200: }
  3335                           ;Movement.c: 201: }
  3336                           ;Movement.c: 203: if (*RFID_Read==1) {
  3337  000BC2  C08E  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3338  000BC6  C08F  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3339  000BCA  04DE               	decf	postinc2,w,c
  3340  000BCC  A4D8               	btfss	status,2,c
  3341  000BCE  D002               	goto	l230
  3342                           
  3343                           ;Movement.c: 204: return 2;
  3344  000BD0  0E02               	movlw	2
  3345  000BD2  0012               	return	
  3346  000BD4                     l230:
  3347  000BD4  0100               	movlb	0	; () banked
  3348  000BD6  4BBF               	infsnz	ScanWithRange@i& (0+255),f,b
  3349  000BD8  2BC0               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3350  000BDA                     l219:
  3351                           
  3352                           ; BSR set to: 0
  3353                           
  3354                           ; BSR set to: 0
  3355  000BDA  51BF               	movf	ScanWithRange@i& (0+255),w,b
  3356  000BDC  5D86               	subwf	ScanWithRange@loops& (0+255),w,b
  3357  000BDE  51C0               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3358  000BE0  5987               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3359  000BE2  B0D8               	btfsc	status,0,c
  3360  000BE4  D6F2               	goto	l220
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;Movement.c: 205: }
  3364                           ;Movement.c: 206: }
  3365                           ;Movement.c: 209: *Move++;
  3366                           
  3367                           ; BSR set to: 0
  3368  000BE6  4B8A               	infsnz	ScanWithRange@Move& (0+255),f,b
  3369  000BE8  2B8B               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;Movement.c: 210: (MoveType[*Move]) = 2;
  3373  000BEA  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3374  000BEE  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3375  000BF2  50DF               	movf	indf2,w,c
  3376  000BF4  6F90               	movwf	??_ScanWithRange& (0+255),b
  3377  000BF6  5190               	movf	??_ScanWithRange& (0+255),w,b
  3378  000BF8  0D01               	mullw	1
  3379  000BFA  50F3               	movf	prodl,w,c
  3380  000BFC  258C               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3381  000BFE  6ED9               	movwf	fsr2l,c
  3382  000C00  50F4               	movf	prodh,w,c
  3383  000C02  218D               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3384  000C04  6EDA               	movwf	fsr2h,c
  3385  000C06  0E02               	movlw	2
  3386  000C08  6EDF               	movwf	indf2,c
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;Movement.c: 211: (MoveTime[*Move]) = -2;
  3390  000C0A  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3391  000C0E  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3392  000C12  50DF               	movf	indf2,w,c
  3393  000C14  6F90               	movwf	??_ScanWithRange& (0+255),b
  3394  000C16  5190               	movf	??_ScanWithRange& (0+255),w,b
  3395  000C18  0D02               	mullw	2
  3396  000C1A  50F3               	movf	prodl,w,c
  3397  000C1C  2588               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3398  000C1E  6ED9               	movwf	fsr2l,c
  3399  000C20  50F4               	movf	prodh,w,c
  3400  000C22  2189               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3401  000C24  6EDA               	movwf	fsr2h,c
  3402  000C26  0EFE               	movlw	254
  3403  000C28  6EDE               	movwf	postinc2,c
  3404  000C2A  0EFF               	movlw	255
  3405  000C2C  6EDD               	movwf	postdec2,c
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;Movement.c: 212: turnRight(mL,mR, 100);
  3409  000C2E  C082  F07D         	movff	ScanWithRange@mL,turnRight@mL
  3410  000C32  C083  F07E         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3411  000C36  C084  F07F         	movff	ScanWithRange@mR,turnRight@mR
  3412  000C3A  C085  F080         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3413  000C3E  0E64               	movlw	100
  3414  000C40  6F81               	movwf	turnRight@power& (0+255),b
  3415  000C42  EC41  F00C         	call	_turnRight	;wreg free
  3416                           
  3417                           ;Movement.c: 213: delay_tenth_s(2);
  3418  000C46  0E02               	movlw	2
  3419  000C48  EC02  F00C         	call	_delay_tenth_s
  3420                           
  3421                           ;Movement.c: 214: stop(mL,mR);
  3422  000C4C  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3423  000C50  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3424  000C54  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3425  000C58  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3426  000C5C  EC41  F00A         	call	_stop	;wreg free
  3427                           
  3428                           ;Movement.c: 215: return -1;
  3429  000C60  0EFF               	movlw	255
  3430  000C62  0012               	return	
  3431  000C64                     __end_of_ScanWithRange:
  3432                           	opt stack 0
  3433                           tblptru	equ	0xFF8
  3434                           prodh	equ	0xFF4
  3435                           prodl	equ	0xFF3
  3436                           intcon	equ	0xFF2
  3437                           postinc0	equ	0xFEE
  3438                           wreg	equ	0xFE8
  3439                           indf1	equ	0xFE7
  3440                           fsr1h	equ	0xFE2
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           plusw2	equ	0xFDB
  3446                           fsr2h	equ	0xFDA
  3447                           fsr2l	equ	0xFD9
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function _turnRight *****************
  3451 ;; Defined at:
  3452 ;;		line 98 in file "dc_motor.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;  mL              2   29[BANK0 ] PTR struct DC_motor
  3455 ;;		 -> main@mL(9), 
  3456 ;;  mR              2   31[BANK0 ] PTR struct DC_motor
  3457 ;;		 -> main@mR(9), 
  3458 ;;  power           1   33[BANK0 ] unsigned char 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;		None
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3470 ;;      Params:         0       5       0       0
  3471 ;;      Locals:         0       0       0       0
  3472 ;;      Temps:          0       0       0       0
  3473 ;;      Totals:         0       5       0       0
  3474 ;;Total ram usage:        5 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    6
  3477 ;; This function calls:
  3478 ;;		_fullSpeedAhead
  3479 ;; This function is called by:
  3480 ;;		_ScanWithRange
  3481 ;;		_main
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text10
  3486  001882                     __ptext10:
  3487                           	opt stack 0
  3488  001882                     _turnRight:
  3489                           	opt stack 24
  3490                           
  3491                           ;dc_motor.c: 102: mL->direction=0;
  3492                           
  3493                           ;incstack = 0
  3494  001882  0100               	movlb	0	; () banked
  3495  001884  EE20 F001          	lfsr	2,1
  3496  001888  517D               	movf	turnRight@mL& (0+255),w,b
  3497  00188A  26D9               	addwf	fsr2l,f,c
  3498  00188C  517E               	movf	(turnRight@mL+1)& (0+255),w,b
  3499  00188E  22DA               	addwfc	fsr2h,f,c
  3500  001890  0E00               	movlw	0
  3501  001892  6EDF               	movwf	indf2,c
  3502                           
  3503                           ;dc_motor.c: 103: mR->direction=1;
  3504  001894  EE20 F001          	lfsr	2,1
  3505  001898  517F               	movf	turnRight@mR& (0+255),w,b
  3506  00189A  26D9               	addwf	fsr2l,f,c
  3507  00189C  5180               	movf	(turnRight@mR+1)& (0+255),w,b
  3508  00189E  22DA               	addwfc	fsr2h,f,c
  3509  0018A0  0E01               	movlw	1
  3510  0018A2  6EDF               	movwf	indf2,c
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3514  0018A4  C07D  F077         	movff	turnRight@mL,fullSpeedAhead@mL
  3515  0018A8  C07E  F078         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3516  0018AC  C07F  F079         	movff	turnRight@mR,fullSpeedAhead@mR
  3517  0018B0  C080  F07A         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3518  0018B4  C081  F07B         	movff	turnRight@power,fullSpeedAhead@power
  3519  0018B8  ECCD  F00A         	call	_fullSpeedAhead	;wreg free
  3520  0018BC  0012               	return		;funcret
  3521  0018BE                     __end_of_turnRight:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           prodh	equ	0xFF4
  3525                           prodl	equ	0xFF3
  3526                           intcon	equ	0xFF2
  3527                           postinc0	equ	0xFEE
  3528                           wreg	equ	0xFE8
  3529                           indf1	equ	0xFE7
  3530                           fsr1h	equ	0xFE2
  3531                           fsr1l	equ	0xFE1
  3532                           indf2	equ	0xFDF
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           plusw2	equ	0xFDB
  3536                           fsr2h	equ	0xFDA
  3537                           fsr2l	equ	0xFD9
  3538                           status	equ	0xFD8
  3539                           
  3540 ;; *************** function _turnLeft *****************
  3541 ;; Defined at:
  3542 ;;		line 87 in file "dc_motor.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;  mL              2   29[BANK0 ] PTR struct DC_motor
  3545 ;;		 -> main@mL(9), 
  3546 ;;  mR              2   31[BANK0 ] PTR struct DC_motor
  3547 ;;		 -> main@mR(9), 
  3548 ;;  power           1   33[BANK0 ] unsigned char 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;		None
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3560 ;;      Params:         0       5       0       0
  3561 ;;      Locals:         0       0       0       0
  3562 ;;      Temps:          0       0       0       0
  3563 ;;      Totals:         0       5       0       0
  3564 ;;Total ram usage:        5 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    6
  3567 ;; This function calls:
  3568 ;;		_fullSpeedAhead
  3569 ;; This function is called by:
  3570 ;;		_ScanWithRange
  3571 ;;		_main
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text11
  3576  0018BE                     __ptext11:
  3577                           	opt stack 0
  3578  0018BE                     _turnLeft:
  3579                           	opt stack 24
  3580                           
  3581                           ;dc_motor.c: 91: mL->direction=1;
  3582                           
  3583                           ;incstack = 0
  3584  0018BE  0100               	movlb	0	; () banked
  3585  0018C0  EE20 F001          	lfsr	2,1
  3586  0018C4  517D               	movf	turnLeft@mL& (0+255),w,b
  3587  0018C6  26D9               	addwf	fsr2l,f,c
  3588  0018C8  517E               	movf	(turnLeft@mL+1)& (0+255),w,b
  3589  0018CA  22DA               	addwfc	fsr2h,f,c
  3590  0018CC  0E01               	movlw	1
  3591  0018CE  6EDF               	movwf	indf2,c
  3592                           
  3593                           ;dc_motor.c: 92: mR->direction=0;
  3594  0018D0  EE20 F001          	lfsr	2,1
  3595  0018D4  517F               	movf	turnLeft@mR& (0+255),w,b
  3596  0018D6  26D9               	addwf	fsr2l,f,c
  3597  0018D8  5180               	movf	(turnLeft@mR+1)& (0+255),w,b
  3598  0018DA  22DA               	addwfc	fsr2h,f,c
  3599  0018DC  0E00               	movlw	0
  3600  0018DE  6EDF               	movwf	indf2,c
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3604  0018E0  C07D  F077         	movff	turnLeft@mL,fullSpeedAhead@mL
  3605  0018E4  C07E  F078         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3606  0018E8  C07F  F079         	movff	turnLeft@mR,fullSpeedAhead@mR
  3607  0018EC  C080  F07A         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3608  0018F0  C081  F07B         	movff	turnLeft@power,fullSpeedAhead@power
  3609  0018F4  ECCD  F00A         	call	_fullSpeedAhead	;wreg free
  3610  0018F8  0012               	return		;funcret
  3611  0018FA                     __end_of_turnLeft:
  3612                           	opt stack 0
  3613                           tblptru	equ	0xFF8
  3614                           prodh	equ	0xFF4
  3615                           prodl	equ	0xFF3
  3616                           intcon	equ	0xFF2
  3617                           postinc0	equ	0xFEE
  3618                           wreg	equ	0xFE8
  3619                           indf1	equ	0xFE7
  3620                           fsr1h	equ	0xFE2
  3621                           fsr1l	equ	0xFE1
  3622                           indf2	equ	0xFDF
  3623                           postinc2	equ	0xFDE
  3624                           postdec2	equ	0xFDD
  3625                           plusw2	equ	0xFDB
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _fullSpeedAhead *****************
  3631 ;; Defined at:
  3632 ;;		line 108 in file "dc_motor.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3635 ;;		 -> main@mL(9), 
  3636 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3637 ;;		 -> main@mR(9), 
  3638 ;;  power           1   27[BANK0 ] unsigned char 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3650 ;;      Params:         0       5       0       0
  3651 ;;      Locals:         0       0       0       0
  3652 ;;      Temps:          0       1       0       0
  3653 ;;      Totals:         0       6       0       0
  3654 ;;Total ram usage:        6 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    5
  3657 ;; This function calls:
  3658 ;;		_setMotorPWM
  3659 ;; This function is called by:
  3660 ;;		_turnLeft
  3661 ;;		_turnRight
  3662 ;;		_fullSpeedBack
  3663 ;;		_main
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text12
  3668  00159A                     __ptext12:
  3669                           	opt stack 0
  3670  00159A                     _fullSpeedAhead:
  3671                           	opt stack 24
  3672                           
  3673                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3674                           
  3675                           ;incstack = 0
  3676  00159A  D02B               	goto	l65
  3677  00159C                     
  3678                           ;dc_motor.c: 112: if(mL->power<power){
  3679  00159C  C077  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3680  0015A0  C078  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3681  0015A4  0100               	movlb	0	; () banked
  3682  0015A6  517B               	movf	fullSpeedAhead@power& (0+255),w,b
  3683  0015A8  5CDE               	subwf	postinc2,w,c
  3684  0015AA  B0D8               	btfsc	status,0,c
  3685  0015AC  D005               	goto	l67
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;dc_motor.c: 113: mL->power++;
  3689  0015AE  C077  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3690  0015B2  C078  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3691  0015B6  2ADF               	incf	indf2,f,c
  3692  0015B8                     l67:
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;dc_motor.c: 114: }
  3696                           ;dc_motor.c: 115: if(mR->power<power){
  3697                           
  3698                           ; BSR set to: 0
  3699  0015B8  C079  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3700  0015BC  C07A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3701  0015C0  517B               	movf	fullSpeedAhead@power& (0+255),w,b
  3702  0015C2  5CDE               	subwf	postinc2,w,c
  3703  0015C4  B0D8               	btfsc	status,0,c
  3704  0015C6  D005               	goto	l68
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;dc_motor.c: 116: mR->power++;
  3708  0015C8  C079  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3709  0015CC  C07A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3710  0015D0  2ADF               	incf	indf2,f,c
  3711  0015D2                     l68:
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;dc_motor.c: 117: }
  3715                           ;dc_motor.c: 118: setMotorPWM(mL);
  3716                           
  3717                           ; BSR set to: 0
  3718  0015D2  C077  F06E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3719  0015D6  C078  F06F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3720  0015DA  EC83  F007         	call	_setMotorPWM	;wreg free
  3721                           
  3722                           ;dc_motor.c: 119: setMotorPWM(mR);
  3723  0015DE  C079  F06E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3724  0015E2  C07A  F06F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3725  0015E6  EC83  F007         	call	_setMotorPWM	;wreg free
  3726                           
  3727                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3728  0015EA  0E21               	movlw	33
  3729  0015EC                     u3347:
  3730  0015EC  2EE8               	decfsz	wreg,f,c
  3731  0015EE  D7FE               	bra	u3347
  3732  0015F0  F000               	nop	
  3733  0015F2                     l65:
  3734  0015F2  C077  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3735  0015F6  C078  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3736  0015FA  0100               	movlb	0	; () banked
  3737  0015FC  517B               	movf	fullSpeedAhead@power& (0+255),w,b
  3738  0015FE  5CDE               	subwf	postinc2,w,c
  3739  001600  A0D8               	btfss	status,0,c
  3740  001602  D7CC               	goto	l66
  3741                           
  3742                           ; BSR set to: 0
  3743  001604  C079  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3744  001608  C07A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3745  00160C  517B               	movf	fullSpeedAhead@power& (0+255),w,b
  3746  00160E  5CDE               	subwf	postinc2,w,c
  3747  001610  B0D8               	btfsc	status,0,c
  3748  001612  0012               	return	
  3749  001614  D7C3               	goto	l66
  3750  001616                     __end_of_fullSpeedAhead:
  3751                           	opt stack 0
  3752                           tblptru	equ	0xFF8
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           intcon	equ	0xFF2
  3756                           postinc0	equ	0xFEE
  3757                           wreg	equ	0xFE8
  3758                           indf1	equ	0xFE7
  3759                           fsr1h	equ	0xFE2
  3760                           fsr1l	equ	0xFE1
  3761                           indf2	equ	0xFDF
  3762                           postinc2	equ	0xFDE
  3763                           postdec2	equ	0xFDD
  3764                           plusw2	equ	0xFDB
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _delay_tenth_s *****************
  3770 ;; Defined at:
  3771 ;;		line 32 in file "Movement.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;  tenth_second    1    wreg     unsigned char 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  tenth_second    1    1[BANK0 ] unsigned char 
  3776 ;;  i               2    2[BANK0 ] unsigned int 
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  1    wreg      void 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3786 ;;      Params:         0       0       0       0
  3787 ;;      Locals:         0       3       0       0
  3788 ;;      Temps:          0       1       0       0
  3789 ;;      Totals:         0       4       0       0
  3790 ;;Total ram usage:        4 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    3
  3793 ;; This function calls:
  3794 ;;		Nothing
  3795 ;; This function is called by:
  3796 ;;		_ScanWithRange
  3797 ;;		_main
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text13
  3802  001804                     __ptext13:
  3803                           	opt stack 0
  3804  001804                     _delay_tenth_s:
  3805                           	opt stack 27
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;incstack = 0
  3809                           ;delay_tenth_s@tenth_seconds stored from wreg
  3810  001804  0100               	movlb	0	; () banked
  3811  001806  6F61               	movwf	delay_tenth_s@tenth_seconds& (0+255),b
  3812                           
  3813                           ;Movement.c: 33: unsigned int i=0;
  3814  001808  0E00               	movlw	0
  3815  00180A  0100               	movlb	0	; () banked
  3816  00180C  6F63               	movwf	(delay_tenth_s@i+1)& (0+255),b
  3817  00180E  0E00               	movlw	0
  3818  001810  6F62               	movwf	delay_tenth_s@i& (0+255),b
  3819                           
  3820                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3821  001812  0E00               	movlw	0
  3822  001814  6F63               	movwf	(delay_tenth_s@i+1)& (0+255),b
  3823  001816  0E01               	movlw	1
  3824  001818  6F62               	movwf	delay_tenth_s@i& (0+255),b
  3825  00181A  D00C               	goto	l204
  3826  00181C                     
  3827                           ; BSR set to: 0
  3828                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3829                           
  3830                           ; BSR set to: 0
  3831  00181C  0E82               	movlw	130
  3832  00181E  0100               	movlb	0	; () banked
  3833  001820  6F60               	movwf	??_delay_tenth_s& (0+255),b
  3834  001822  0EDD               	movlw	221
  3835  001824                     u3357:
  3836  001824  2EE8               	decfsz	wreg,f,c
  3837  001826  D7FE               	bra	u3357
  3838  001828  2F60               	decfsz	??_delay_tenth_s& (0+255),f,b
  3839  00182A  D7FC               	bra	u3357
  3840  00182C  D000               	nop2	
  3841  00182E  0100               	movlb	0	; () banked
  3842  001830  4B62               	infsnz	delay_tenth_s@i& (0+255),f,b
  3843  001832  2B63               	incf	(delay_tenth_s@i+1)& (0+255),f,b
  3844  001834                     l204:
  3845                           
  3846                           ; BSR set to: 0
  3847                           
  3848                           ; BSR set to: 0
  3849  001834  5161               	movf	delay_tenth_s@tenth_seconds& (0+255),w,b
  3850  001836  0D02               	mullw	2
  3851  001838  5162               	movf	delay_tenth_s@i& (0+255),w,b
  3852  00183A  5CF3               	subwf	prodl,w,c
  3853  00183C  5163               	movf	(delay_tenth_s@i+1)& (0+255),w,b
  3854  00183E  58F4               	subwfb	prodh,w,c
  3855  001840  A0D8               	btfss	status,0,c
  3856  001842  0012               	return	
  3857  001844  D7EB               	goto	l205
  3858  001846                     __end_of_delay_tenth_s:
  3859                           	opt stack 0
  3860                           tblptru	equ	0xFF8
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           intcon	equ	0xFF2
  3864                           postinc0	equ	0xFEE
  3865                           wreg	equ	0xFE8
  3866                           indf1	equ	0xFE7
  3867                           fsr1h	equ	0xFE2
  3868                           fsr1l	equ	0xFE1
  3869                           indf2	equ	0xFDF
  3870                           postinc2	equ	0xFDE
  3871                           postdec2	equ	0xFDD
  3872                           plusw2	equ	0xFDB
  3873                           fsr2h	equ	0xFDA
  3874                           fsr2l	equ	0xFD9
  3875                           status	equ	0xFD8
  3876                           
  3877 ;; *************** function _ScanIR *****************
  3878 ;; Defined at:
  3879 ;;		line 44 in file "Movement.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;  mL              2   33[BANK0 ] PTR struct DC_motor
  3882 ;;		 -> main@mL(9), 
  3883 ;;  mR              2   35[BANK0 ] PTR struct DC_motor
  3884 ;;		 -> main@mR(9), 
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;  buf            40   38[BANK0 ] unsigned char [40]
  3887 ;;  SensorResult    4   80[BANK0 ] unsigned int [2]
  3888 ;;  DirectionMov    2   78[BANK0 ] const unsigned int 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  1    wreg      unsigned char 
  3891 ;; Registers used:
  3892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3898 ;;      Params:         0       4       0       0
  3899 ;;      Locals:         0      46       0       0
  3900 ;;      Temps:          0       1       0       0
  3901 ;;      Totals:         0      51       0       0
  3902 ;;Total ram usage:       51 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    7
  3905 ;; This function calls:
  3906 ;;		_LCD_String
  3907 ;;		_SendLCD
  3908 ;;		_SetLine
  3909 ;;		_grabLeftIR
  3910 ;;		_grabRightIR
  3911 ;;		_sprintf
  3912 ;;		_stop
  3913 ;; This function is called by:
  3914 ;;		_main
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text14
  3919  001140                     __ptext14:
  3920                           	opt stack 0
  3921  001140                     _ScanIR:
  3922                           	opt stack 23
  3923                           
  3924                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;incstack = 0
  3928  001140  C030  F0B0         	movff	ScanIR@F3540,ScanIR@SensorResult
  3929  001144  C031  F0B1         	movff	ScanIR@F3540+1,ScanIR@SensorResult+1
  3930  001148  C032  F0B2         	movff	ScanIR@F3540+2,ScanIR@SensorResult+2
  3931  00114C  C033  F0B3         	movff	ScanIR@F3540+3,ScanIR@SensorResult+3
  3932                           
  3933                           ;Movement.c: 48: char buf[40];
  3934                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=2500;
  3935  001150  0E09               	movlw	9
  3936  001152  0100               	movlb	0	; () banked
  3937  001154  6FAF               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3938  001156  0EC4               	movlw	196
  3939  001158  6FAE               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  3943  00115A  EC48  F00B         	call	_grabLeftIR	;wreg free
  3944  00115E  C060  F0B0         	movff	?_grabLeftIR,ScanIR@SensorResult
  3945  001162  C061  F0B1         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3946                           
  3947                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  3948  001166  EC0B  F00B         	call	_grabRightIR	;wreg free
  3949  00116A  C060  F0B2         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3950  00116E  C061  F0B3         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3951                           
  3952                           ;Movement.c: 60: CAP1BUFH=0;
  3953  001172  0E00               	movlw	0
  3954  001174  6E69               	movwf	3945,c	;volatile
  3955                           
  3956                           ;Movement.c: 61: CAP1BUFL=0;
  3957  001176  0E00               	movlw	0
  3958  001178  6E68               	movwf	3944,c	;volatile
  3959                           
  3960                           ;Movement.c: 62: CAP2BUFH=0;
  3961  00117A  0E00               	movlw	0
  3962  00117C  6E67               	movwf	3943,c	;volatile
  3963                           
  3964                           ;Movement.c: 63: CAP2BUFL=0;
  3965  00117E  0E00               	movlw	0
  3966  001180  6E66               	movwf	3942,c	;volatile
  3967                           
  3968                           ;Movement.c: 66: SendLCD(0b00000001,0);
  3969  001182  0E00               	movlw	0
  3970  001184  0100               	movlb	0	; () banked
  3971  001186  6F64               	movwf	SendLCD@type& (0+255),b
  3972  001188  0E01               	movlw	1
  3973  00118A  EC7D  F00C         	call	_SendLCD
  3974                           
  3975                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3976  00118E  0E21               	movlw	33
  3977  001190                     u3367:
  3978  001190  2EE8               	decfsz	wreg,f,c
  3979  001192  D7FE               	bra	u3367
  3980  001194  F000               	nop	
  3981                           
  3982                           ;Movement.c: 68: SendLCD(0b00000010,0);
  3983  001196  0E00               	movlw	0
  3984  001198  0100               	movlb	0	; () banked
  3985  00119A  6F64               	movwf	SendLCD@type& (0+255),b
  3986  00119C  0E02               	movlw	2
  3987  00119E  EC7D  F00C         	call	_SendLCD
  3988                           
  3989                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  3990  0011A2  0E06               	movlw	6
  3991  0011A4  0100               	movlb	0	; () banked
  3992  0011A6  6F85               	movwf	??_ScanIR& (0+255),b
  3993  0011A8  0E30               	movlw	48
  3994  0011AA                     u3377:
  3995  0011AA  2EE8               	decfsz	wreg,f,c
  3996  0011AC  D7FE               	bra	u3377
  3997  0011AE  2F85               	decfsz	??_ScanIR& (0+255),f,b
  3998  0011B0  D7FC               	bra	u3377
  3999  0011B2  F000               	nop	
  4000                           
  4001                           ;Movement.c: 70: SetLine(1);
  4002  0011B4  0E01               	movlw	1
  4003  0011B6  ECB5  F00C         	call	_SetLine
  4004                           
  4005                           ;Movement.c: 71: LCD_String("     ScanIR");
  4006  0011BA  0E2D               	movlw	low STR_1
  4007  0011BC  0100               	movlb	0	; () banked
  4008  0011BE  6F66               	movwf	LCD_String@string& (0+255),b
  4009  0011C0  0E03               	movlw	high STR_1
  4010  0011C2  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  4011  0011C4  EC85  F00B         	call	_LCD_String	;wreg free
  4012                           
  4013                           ;Movement.c: 72: SetLine(2);
  4014  0011C8  0E02               	movlw	2
  4015  0011CA  ECB5  F00C         	call	_SetLine
  4016                           
  4017                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4018  0011CE  0E86               	movlw	low ScanIR@buf
  4019  0011D0  0100               	movlb	0	; () banked
  4020  0011D2  6F6C               	movwf	sprintf@sp& (0+255),b
  4021  0011D4  0E00               	movlw	high ScanIR@buf
  4022  0011D6  6F6D               	movwf	(sprintf@sp+1)& (0+255),b
  4023  0011D8  0E0C               	movlw	low (STR_6+1)
  4024  0011DA  6F6E               	movwf	sprintf@f& (0+255),b
  4025  0011DC  0E03               	movlw	high (STR_6+1)
  4026  0011DE  6F6F               	movwf	(sprintf@f+1)& (0+255),b
  4027  0011E0  C0B0  F070         	movff	ScanIR@SensorResult,?_sprintf+4
  4028  0011E4  C0B1  F071         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4029  0011E8  C0B2  F072         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4030  0011EC  C0B3  F073         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4031  0011F0  EC32  F006         	call	_sprintf	;wreg free
  4032                           
  4033                           ;Movement.c: 74: LCD_String(buf);
  4034  0011F4  0E86               	movlw	low ScanIR@buf
  4035  0011F6  0100               	movlb	0	; () banked
  4036  0011F8  6F66               	movwf	LCD_String@string& (0+255),b
  4037  0011FA  0E00               	movlw	high ScanIR@buf
  4038  0011FC  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  4039  0011FE  EC85  F00B         	call	_LCD_String	;wreg free
  4040                           
  4041                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4042                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4043  001202  0100               	movlb	0	; () banked
  4044  001204  51B0               	movf	ScanIR@SensorResult& (0+255),w,b
  4045  001206  5DAE               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4046  001208  51B1               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4047  00120A  59AF               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4048  00120C  B0D8               	btfsc	status,0,c
  4049  00120E  D008               	goto	l212
  4050                           
  4051                           ; BSR set to: 0
  4052  001210  51B2               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4053  001212  5DAE               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4054  001214  51B3               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4055  001216  59AF               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4056  001218  B0D8               	btfsc	status,0,c
  4057  00121A  D002               	goto	l212
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;Movement.c: 80: return 2;
  4061  00121C  0E02               	movlw	2
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;Movement.c: 81: } else {
  4065                           
  4066                           ; BSR set to: 0
  4067  00121E  0012               	return	
  4068  001220                     l212:
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;Movement.c: 82: stop(mL,mR);
  4072                           
  4073                           ; BSR set to: 0
  4074  001220  C081  F077         	movff	ScanIR@mL,stop@mL
  4075  001224  C082  F078         	movff	ScanIR@mL+1,stop@mL+1
  4076  001228  C083  F079         	movff	ScanIR@mR,stop@mR
  4077  00122C  C084  F07A         	movff	ScanIR@mR+1,stop@mR+1
  4078  001230  EC41  F00A         	call	_stop	;wreg free
  4079                           
  4080                           ;Movement.c: 83: return 0;
  4081  001234  0E00               	movlw	0
  4082  001236  0012               	return	
  4083  001238                     __end_of_ScanIR:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           intcon	equ	0xFF2
  4089                           postinc0	equ	0xFEE
  4090                           wreg	equ	0xFE8
  4091                           indf1	equ	0xFE7
  4092                           fsr1h	equ	0xFE2
  4093                           fsr1l	equ	0xFE1
  4094                           indf2	equ	0xFDF
  4095                           postinc2	equ	0xFDE
  4096                           postdec2	equ	0xFDD
  4097                           plusw2	equ	0xFDB
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function _stop *****************
  4103 ;; Defined at:
  4104 ;;		line 67 in file "dc_motor.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  4107 ;;		 -> main@mL(9), 
  4108 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  4109 ;;		 -> main@mR(9), 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;		None
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      void 
  4114 ;; Registers used:
  4115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4121 ;;      Params:         0       4       0       0
  4122 ;;      Locals:         0       0       0       0
  4123 ;;      Temps:          0       0       0       0
  4124 ;;      Totals:         0       4       0       0
  4125 ;;Total ram usage:        4 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    5
  4128 ;; This function calls:
  4129 ;;		_setMotorPWM
  4130 ;; This function is called by:
  4131 ;;		_ScanIR
  4132 ;;		_ScanWithRange
  4133 ;;		_main
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text15
  4138  001482                     __ptext15:
  4139                           	opt stack 0
  4140  001482                     _stop:
  4141                           	opt stack 25
  4142                           
  4143                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4144                           
  4145                           ;incstack = 0
  4146  001482  D028               	goto	l51
  4147  001484                     
  4148                           ;dc_motor.c: 71: if(mL->power>0){
  4149  001484  C077  FFD9         	movff	stop@mL,fsr2l
  4150  001488  C078  FFDA         	movff	stop@mL+1,fsr2h
  4151  00148C  50DF               	movf	indf2,w,c
  4152  00148E  B4D8               	btfsc	status,2,c
  4153  001490  D005               	goto	l53
  4154                           
  4155                           ;dc_motor.c: 72: mL->power--;
  4156  001492  C077  FFD9         	movff	stop@mL,fsr2l
  4157  001496  C078  FFDA         	movff	stop@mL+1,fsr2h
  4158  00149A  06DF               	decf	indf2,f,c
  4159  00149C                     l53:
  4160                           
  4161                           ;dc_motor.c: 73: }
  4162                           ;dc_motor.c: 74: if(mR->power>0){
  4163  00149C  C079  FFD9         	movff	stop@mR,fsr2l
  4164  0014A0  C07A  FFDA         	movff	stop@mR+1,fsr2h
  4165  0014A4  50DF               	movf	indf2,w,c
  4166  0014A6  B4D8               	btfsc	status,2,c
  4167  0014A8  D005               	goto	l54
  4168                           
  4169                           ;dc_motor.c: 75: mR->power--;
  4170  0014AA  C079  FFD9         	movff	stop@mR,fsr2l
  4171  0014AE  C07A  FFDA         	movff	stop@mR+1,fsr2h
  4172  0014B2  06DF               	decf	indf2,f,c
  4173  0014B4                     l54:
  4174                           
  4175                           ;dc_motor.c: 76: }
  4176                           ;dc_motor.c: 77: setMotorPWM(mL);
  4177  0014B4  C077  F06E         	movff	stop@mL,setMotorPWM@m
  4178  0014B8  C078  F06F         	movff	stop@mL+1,setMotorPWM@m+1
  4179  0014BC  EC83  F007         	call	_setMotorPWM	;wreg free
  4180                           
  4181                           ;dc_motor.c: 78: setMotorPWM(mR);
  4182  0014C0  C079  F06E         	movff	stop@mR,setMotorPWM@m
  4183  0014C4  C07A  F06F         	movff	stop@mR+1,setMotorPWM@m+1
  4184  0014C8  EC83  F007         	call	_setMotorPWM	;wreg free
  4185                           
  4186                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4187  0014CC  0E21               	movlw	33
  4188  0014CE                     u3387:
  4189  0014CE  2EE8               	decfsz	wreg,f,c
  4190  0014D0  D7FE               	bra	u3387
  4191  0014D2  F000               	nop	
  4192  0014D4                     l51:
  4193  0014D4  C077  FFD9         	movff	stop@mL,fsr2l
  4194  0014D8  C078  FFDA         	movff	stop@mL+1,fsr2h
  4195  0014DC  50DF               	movf	indf2,w,c
  4196  0014DE  A4D8               	btfss	status,2,c
  4197  0014E0  D7D1               	goto	l52
  4198  0014E2  C079  FFD9         	movff	stop@mR,fsr2l
  4199  0014E6  C07A  FFDA         	movff	stop@mR+1,fsr2h
  4200  0014EA  50DF               	movf	indf2,w,c
  4201  0014EC  A4D8               	btfss	status,2,c
  4202  0014EE  D7CA               	goto	l52
  4203                           
  4204                           ;dc_motor.c: 80: }
  4205                           ;dc_motor.c: 81: mL->direction=1;
  4206  0014F0  0100               	movlb	0	; () banked
  4207  0014F2  EE20 F001          	lfsr	2,1
  4208  0014F6  5177               	movf	stop@mL& (0+255),w,b
  4209  0014F8  26D9               	addwf	fsr2l,f,c
  4210  0014FA  5178               	movf	(stop@mL+1)& (0+255),w,b
  4211  0014FC  22DA               	addwfc	fsr2h,f,c
  4212  0014FE  0E01               	movlw	1
  4213  001500  6EDF               	movwf	indf2,c
  4214                           
  4215                           ;dc_motor.c: 82: mR->direction=1;
  4216  001502  EE20 F001          	lfsr	2,1
  4217  001506  5179               	movf	stop@mR& (0+255),w,b
  4218  001508  26D9               	addwf	fsr2l,f,c
  4219  00150A  517A               	movf	(stop@mR+1)& (0+255),w,b
  4220  00150C  22DA               	addwfc	fsr2h,f,c
  4221  00150E  0E01               	movlw	1
  4222  001510  6EDF               	movwf	indf2,c
  4223                           
  4224                           ; BSR set to: 0
  4225  001512  0012               	return		;funcret
  4226  001514                     __end_of_stop:
  4227                           	opt stack 0
  4228                           tblptru	equ	0xFF8
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           postinc0	equ	0xFEE
  4233                           wreg	equ	0xFE8
  4234                           indf1	equ	0xFE7
  4235                           fsr1h	equ	0xFE2
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           plusw2	equ	0xFDB
  4241                           fsr2h	equ	0xFDA
  4242                           fsr2l	equ	0xFD9
  4243                           status	equ	0xFD8
  4244                           
  4245 ;; *************** function _setMotorPWM *****************
  4246 ;; Defined at:
  4247 ;;		line 26 in file "dc_motor.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  m               2   14[BANK0 ] PTR struct DC_motor
  4250 ;;		 -> main@mR(9), main@mL(9), 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  PWMduty         2   21[BANK0 ] int 
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      void 
  4255 ;; Registers used:
  4256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4262 ;;      Params:         0       2       0       0
  4263 ;;      Locals:         0       2       0       0
  4264 ;;      Temps:          0       5       0       0
  4265 ;;      Totals:         0       9       0       0
  4266 ;;Total ram usage:        9 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    4
  4269 ;; This function calls:
  4270 ;;		___awdiv
  4271 ;;		___wmul
  4272 ;; This function is called by:
  4273 ;;		_stop
  4274 ;;		_fullSpeedAhead
  4275 ;;		_setMotorFullSpeed
  4276 ;;		_stopMotor
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           	psect	text16
  4281  000F06                     __ptext16:
  4282                           	opt stack 0
  4283  000F06                     _setMotorPWM:
  4284                           	opt stack 24
  4285                           
  4286                           ;dc_motor.c: 28: int PWMduty;
  4287                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;incstack = 0
  4291  000F06  C06E  FFD9         	movff	setMotorPWM@m,fsr2l
  4292  000F0A  C06F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4293  000F0E  50DF               	movf	indf2,w,c
  4294  000F10  0100               	movlb	0	; () banked
  4295  000F12  6F70               	movwf	??_setMotorPWM& (0+255),b
  4296  000F14  5170               	movf	??_setMotorPWM& (0+255),w,b
  4297  000F16  6F60               	movwf	___wmul@multiplier& (0+255),b
  4298  000F18  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  4299  000F1A  EE20 F007          	lfsr	2,7
  4300  000F1E  516E               	movf	setMotorPWM@m& (0+255),w,b
  4301  000F20  26D9               	addwf	fsr2l,f,c
  4302  000F22  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4303  000F24  22DA               	addwfc	fsr2h,f,c
  4304  000F26  CFDE F062          	movff	postinc2,___wmul@multiplicand
  4305  000F2A  CFDD F063          	movff	postdec2,___wmul@multiplicand+1
  4306  000F2E  ECFF  F00C         	call	___wmul	;wreg free
  4307  000F32  C060  F066         	movff	?___wmul,___awdiv@dividend
  4308  000F36  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
  4309  000F3A  0E00               	movlw	0
  4310  000F3C  0100               	movlb	0	; () banked
  4311  000F3E  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4312  000F40  0E64               	movlw	100
  4313  000F42  6F68               	movwf	___awdiv@divisor& (0+255),b
  4314  000F44  EC8A  F00A         	call	___awdiv	;wreg free
  4315  000F48  C066  F075         	movff	?___awdiv,setMotorPWM@PWMduty
  4316  000F4C  C067  F076         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4317                           
  4318                           ;dc_motor.c: 32: if (m->direction)
  4319  000F50  0100               	movlb	0	; () banked
  4320  000F52  EE20 F001          	lfsr	2,1
  4321  000F56  516E               	movf	setMotorPWM@m& (0+255),w,b
  4322  000F58  26D9               	addwf	fsr2l,f,c
  4323  000F5A  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4324  000F5C  22DA               	addwfc	fsr2h,f,c
  4325  000F5E  50DF               	movf	indf2,w,c
  4326  000F60  B4D8               	btfsc	status,2,c
  4327  000F62  D02D               	goto	l34
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;dc_motor.c: 33: {
  4331                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4332  000F64  EE20 F006          	lfsr	2,6
  4333  000F68  516E               	movf	setMotorPWM@m& (0+255),w,b
  4334  000F6A  26D9               	addwf	fsr2l,f,c
  4335  000F6C  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4336  000F6E  22DA               	addwfc	fsr2h,f,c
  4337  000F70  50DF               	movf	indf2,w,c
  4338  000F72  6F70               	movwf	??_setMotorPWM& (0+255),b
  4339  000F74  0E01               	movlw	1
  4340  000F76  6F71               	movwf	(??_setMotorPWM+1)& (0+255),b
  4341  000F78  2B70               	incf	??_setMotorPWM& (0+255),f,b
  4342  000F7A  D002               	goto	u2264
  4343  000F7C                     u2265:
  4344  000F7C  90D8               	bcf	status,0,c
  4345  000F7E  3771               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4346  000F80                     u2264:
  4347  000F80  2F70               	decfsz	??_setMotorPWM& (0+255),f,b
  4348  000F82  D7FC               	goto	u2265
  4349  000F84  0100               	movlb	0	; () banked
  4350  000F86  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4351  000F88  108A               	iorwf	3978,w,c	;volatile
  4352  000F8A  6E8A               	movwf	3978,c	;volatile
  4353                           
  4354                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4355  000F8C  EE20 F007          	lfsr	2,7
  4356  000F90  516E               	movf	setMotorPWM@m& (0+255),w,b
  4357  000F92  26D9               	addwf	fsr2l,f,c
  4358  000F94  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4359  000F96  22DA               	addwfc	fsr2h,f,c
  4360  000F98  CFDE F070          	movff	postinc2,??_setMotorPWM
  4361  000F9C  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  4362  000FA0  C075  F072         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4363  000FA4  C076  F073         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4364  000FA8  1F72               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4365  000FAA  1F73               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4366  000FAC  4B72               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4367  000FAE  2B73               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4368  000FB0  5170               	movf	??_setMotorPWM& (0+255),w,b
  4369  000FB2  2572               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4370  000FB4  6F75               	movwf	setMotorPWM@PWMduty& (0+255),b
  4371  000FB6  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4372  000FB8  2173               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4373  000FBA  6F76               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4374                           
  4375                           ;dc_motor.c: 36: }
  4376  000FBC  D015               	goto	l35
  4377  000FBE                     l34:
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;dc_motor.c: 37: else
  4381                           ;dc_motor.c: 38: {
  4382                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4383                           
  4384                           ; BSR set to: 0
  4385  000FBE  EE20 F006          	lfsr	2,6
  4386  000FC2  516E               	movf	setMotorPWM@m& (0+255),w,b
  4387  000FC4  26D9               	addwf	fsr2l,f,c
  4388  000FC6  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4389  000FC8  22DA               	addwfc	fsr2h,f,c
  4390  000FCA  50DF               	movf	indf2,w,c
  4391  000FCC  6F70               	movwf	??_setMotorPWM& (0+255),b
  4392  000FCE  0E01               	movlw	1
  4393  000FD0  6F71               	movwf	(??_setMotorPWM+1)& (0+255),b
  4394  000FD2  2B70               	incf	??_setMotorPWM& (0+255),f,b
  4395  000FD4  D002               	goto	u2274
  4396  000FD6                     u2275:
  4397  000FD6  90D8               	bcf	status,0,c
  4398  000FD8  3771               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4399  000FDA                     u2274:
  4400  000FDA  2F70               	decfsz	??_setMotorPWM& (0+255),f,b
  4401  000FDC  D7FC               	goto	u2275
  4402  000FDE  0100               	movlb	0	; () banked
  4403  000FE0  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4404  000FE2  0AFF               	xorlw	255
  4405  000FE4  148A               	andwf	3978,w,c	;volatile
  4406  000FE6  6E8A               	movwf	3978,c	;volatile
  4407  000FE8                     l35:
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;dc_motor.c: 40: }
  4411                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4412  000FE8  EE20 F002          	lfsr	2,2
  4413  000FEC  516E               	movf	setMotorPWM@m& (0+255),w,b
  4414  000FEE  26D9               	addwf	fsr2l,f,c
  4415  000FF0  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4416  000FF2  22DA               	addwfc	fsr2h,f,c
  4417  000FF4  CFDE F070          	movff	postinc2,??_setMotorPWM
  4418  000FF8  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  4419  000FFC  C070  FFD9         	movff	??_setMotorPWM,fsr2l
  4420  001000  C071  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4421  001004  4575               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4422  001006  46E8               	rlncf	wreg,f,c
  4423  001008  0BFC               	andlw	252
  4424  00100A  6EDF               	movwf	indf2,c
  4425                           
  4426                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4427  00100C  EE20 F004          	lfsr	2,4
  4428  001010  516E               	movf	setMotorPWM@m& (0+255),w,b
  4429  001012  26D9               	addwf	fsr2l,f,c
  4430  001014  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4431  001016  22DA               	addwfc	fsr2h,f,c
  4432  001018  CFDE F070          	movff	postinc2,??_setMotorPWM
  4433  00101C  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  4434  001020  C070  FFD9         	movff	??_setMotorPWM,fsr2l
  4435  001024  C071  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4436  001028  C075  F072         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4437  00102C  C076  F073         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4438  001030  0E06               	movlw	6
  4439  001032  6F74               	movwf	(??_setMotorPWM+4)& (0+255),b
  4440  001034                     u2285:
  4441  001034  3573               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  4442  001036  3373               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  4443  001038  3372               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  4444  00103A  2F74               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  4445  00103C  D7FB               	goto	u2285
  4446  00103E  5172               	movf	(??_setMotorPWM+2)& (0+255),w,b
  4447  001040  6EDF               	movwf	indf2,c
  4448                           
  4449                           ; BSR set to: 0
  4450  001042  0012               	return		;funcret
  4451  001044                     __end_of_setMotorPWM:
  4452                           	opt stack 0
  4453                           tblptru	equ	0xFF8
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           intcon	equ	0xFF2
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           indf1	equ	0xFE7
  4460                           fsr1h	equ	0xFE2
  4461                           fsr1l	equ	0xFE1
  4462                           indf2	equ	0xFDF
  4463                           postinc2	equ	0xFDE
  4464                           postdec2	equ	0xFDD
  4465                           plusw2	equ	0xFDB
  4466                           fsr2h	equ	0xFDA
  4467                           fsr2l	equ	0xFD9
  4468                           status	equ	0xFD8
  4469                           
  4470 ;; *************** function ___awdiv *****************
  4471 ;; Defined at:
  4472 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  dividend        2    6[BANK0 ] int 
  4475 ;;  divisor         2    8[BANK0 ] int 
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  quotient        2   12[BANK0 ] int 
  4478 ;;  sign            1   11[BANK0 ] unsigned char 
  4479 ;;  counter         1   10[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  2    6[BANK0 ] int 
  4482 ;; Registers used:
  4483 ;;		wreg, status,2, status,0
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4489 ;;      Params:         0       4       0       0
  4490 ;;      Locals:         0       4       0       0
  4491 ;;      Temps:          0       0       0       0
  4492 ;;      Totals:         0       8       0       0
  4493 ;;Total ram usage:        8 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    3
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_setMotorPWM
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           	psect	text17
  4504  001514                     __ptext17:
  4505                           	opt stack 0
  4506  001514                     ___awdiv:
  4507                           	opt stack 24
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;incstack = 0
  4511  001514  0E00               	movlw	0
  4512  001516  0100               	movlb	0	; () banked
  4513  001518  6F6B               	movwf	___awdiv@sign& (0+255),b
  4514                           
  4515                           ; BSR set to: 0
  4516  00151A  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4517  00151C  D006               	goto	l647
  4518                           
  4519                           ; BSR set to: 0
  4520  00151E  6D68               	negf	___awdiv@divisor& (0+255),b
  4521  001520  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4522  001522  B0D8               	btfsc	status,0,c
  4523  001524  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4524                           
  4525                           ; BSR set to: 0
  4526  001526  0E01               	movlw	1
  4527  001528  6F6B               	movwf	___awdiv@sign& (0+255),b
  4528  00152A                     l647:
  4529                           
  4530                           ; BSR set to: 0
  4531                           
  4532                           ; BSR set to: 0
  4533  00152A  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4534  00152C  D006               	goto	l648
  4535                           
  4536                           ; BSR set to: 0
  4537  00152E  6D66               	negf	___awdiv@dividend& (0+255),b
  4538  001530  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4539  001532  B0D8               	btfsc	status,0,c
  4540  001534  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4541                           
  4542                           ; BSR set to: 0
  4543  001536  0E01               	movlw	1
  4544  001538  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  4545  00153A                     l648:
  4546                           
  4547                           ; BSR set to: 0
  4548                           
  4549                           ; BSR set to: 0
  4550  00153A  0E00               	movlw	0
  4551  00153C  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  4552  00153E  0E00               	movlw	0
  4553  001540  6F6C               	movwf	___awdiv@quotient& (0+255),b
  4554                           
  4555                           ; BSR set to: 0
  4556  001542  5168               	movf	___awdiv@divisor& (0+255),w,b
  4557  001544  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4558  001546  B4D8               	btfsc	status,2,c
  4559  001548  D01C               	goto	l655
  4560                           
  4561                           ; BSR set to: 0
  4562  00154A  0E01               	movlw	1
  4563  00154C  6F6A               	movwf	___awdiv@counter& (0+255),b
  4564  00154E  D004               	goto	l650
  4565  001550                     
  4566                           ; BSR set to: 0
  4567                           
  4568                           ; BSR set to: 0
  4569  001550  90D8               	bcf	status,0,c
  4570  001552  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  4571  001554  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4572  001556  2B6A               	incf	___awdiv@counter& (0+255),f,b
  4573  001558                     l650:
  4574                           
  4575                           ; BSR set to: 0
  4576                           
  4577                           ; BSR set to: 0
  4578  001558  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4579  00155A  D7FA               	goto	l651
  4580  00155C                     u2220:
  4581                           
  4582                           ; BSR set to: 0
  4583                           
  4584                           ; BSR set to: 0
  4585                           
  4586                           ; BSR set to: 0
  4587  00155C  90D8               	bcf	status,0,c
  4588  00155E  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  4589  001560  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4590                           
  4591                           ; BSR set to: 0
  4592  001562  5168               	movf	___awdiv@divisor& (0+255),w,b
  4593  001564  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  4594  001566  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4595  001568  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4596  00156A  A0D8               	btfss	status,0,c
  4597  00156C  D005               	goto	l654
  4598                           
  4599                           ; BSR set to: 0
  4600  00156E  5168               	movf	___awdiv@divisor& (0+255),w,b
  4601  001570  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  4602  001572  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4603  001574  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4604                           
  4605                           ; BSR set to: 0
  4606  001576  816C               	bsf	___awdiv@quotient& (0+255),0,b
  4607  001578                     l654:
  4608                           
  4609                           ; BSR set to: 0
  4610                           
  4611                           ; BSR set to: 0
  4612  001578  90D8               	bcf	status,0,c
  4613  00157A  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4614  00157C  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  4615                           
  4616                           ; BSR set to: 0
  4617  00157E  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  4618  001580  D7ED               	goto	u2220
  4619  001582                     l655:
  4620                           
  4621                           ; BSR set to: 0
  4622                           
  4623                           ; BSR set to: 0
  4624                           
  4625                           ; BSR set to: 0
  4626  001582  516B               	movf	___awdiv@sign& (0+255),w,b
  4627  001584  B4D8               	btfsc	status,2,c
  4628  001586  D004               	goto	l656
  4629                           
  4630                           ; BSR set to: 0
  4631  001588  6D6C               	negf	___awdiv@quotient& (0+255),b
  4632  00158A  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4633  00158C  B0D8               	btfsc	status,0,c
  4634  00158E  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4635  001590                     l656:
  4636                           
  4637                           ; BSR set to: 0
  4638                           
  4639                           ; BSR set to: 0
  4640  001590  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  4641  001594  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  4642  001598  0012               	return	
  4643  00159A                     __end_of___awdiv:
  4644                           	opt stack 0
  4645                           tblptru	equ	0xFF8
  4646                           prodh	equ	0xFF4
  4647                           prodl	equ	0xFF3
  4648                           intcon	equ	0xFF2
  4649                           postinc0	equ	0xFEE
  4650                           wreg	equ	0xFE8
  4651                           indf1	equ	0xFE7
  4652                           fsr1h	equ	0xFE2
  4653                           fsr1l	equ	0xFE1
  4654                           indf2	equ	0xFDF
  4655                           postinc2	equ	0xFDE
  4656                           postdec2	equ	0xFDD
  4657                           plusw2	equ	0xFDB
  4658                           fsr2h	equ	0xFDA
  4659                           fsr2l	equ	0xFD9
  4660                           status	equ	0xFD8
  4661                           
  4662 ;; *************** function _sprintf *****************
  4663 ;; Defined at:
  4664 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;  sp              2   12[BANK0 ] PTR unsigned char 
  4667 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4668 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4669 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;  tmpval          4    0        struct .
  4672 ;;  cp              3    0        PTR const unsigned char 
  4673 ;;  width           2   30[BANK0 ] int 
  4674 ;;  val             2   27[BANK0 ] unsigned int 
  4675 ;;  ap              2   24[BANK0 ] PTR void [1]
  4676 ;;		 -> ?_sprintf(2), 
  4677 ;;  len             2    0        unsigned int 
  4678 ;;  c               1   32[BANK0 ] char 
  4679 ;;  flag            1   29[BANK0 ] unsigned char 
  4680 ;;  prec            1   26[BANK0 ] char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  2   12[BANK0 ] int 
  4683 ;; Registers used:
  4684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4690 ;;      Params:         0       8       0       0
  4691 ;;      Locals:         0       9       0       0
  4692 ;;      Temps:          0       4       0       0
  4693 ;;      Totals:         0      21       0       0
  4694 ;;Total ram usage:       21 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    4
  4697 ;; This function calls:
  4698 ;;		___lwdiv
  4699 ;;		___lwmod
  4700 ;;		___wmul
  4701 ;;		_isdigit
  4702 ;; This function is called by:
  4703 ;;		_ScanIR
  4704 ;;		_ScanWithRange
  4705 ;;		_main
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text18
  4710  000C64                     __ptext18:
  4711                           	opt stack 0
  4712  000C64                     _sprintf:
  4713                           	opt stack 26
  4714                           
  4715                           ;doprnt.c: 494: va_list ap;
  4716                           ;doprnt.c: 499: signed char c;
  4717                           ;doprnt.c: 501: int width;
  4718                           ;doprnt.c: 506: signed char prec;
  4719                           ;doprnt.c: 508: unsigned char flag;
  4720                           ;doprnt.c: 523: union {
  4721                           ;doprnt.c: 524: unsigned long vd;
  4722                           ;doprnt.c: 525: double integ;
  4723                           ;doprnt.c: 526: } tmpval;
  4724                           ;doprnt.c: 528: unsigned int val;
  4725                           ;doprnt.c: 529: unsigned len;
  4726                           ;doprnt.c: 530: const char * cp;
  4727                           ;doprnt.c: 533: *ap = __va_start();
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;incstack = 0
  4731  000C64  0E70               	movlw	low (?_sprintf+4)
  4732  000C66  0100               	movlb	0	; () banked
  4733  000C68  6F78               	movwf	sprintf@ap& (0+255),b
  4734  000C6A  0E00               	movlw	high (?_sprintf+4)
  4735  000C6C  6F79               	movwf	(sprintf@ap+1)& (0+255),b
  4736                           
  4737                           ;doprnt.c: 536: while(c = *f++) {
  4738  000C6E  D137               	goto	u2820
  4739  000C70                     
  4740                           ; BSR set to: 0
  4741                           ;doprnt.c: 538: if(c != '%')
  4742                           
  4743                           ; BSR set to: 0
  4744  000C70  0E25               	movlw	37
  4745  000C72  1980               	xorwf	sprintf@c& (0+255),w,b
  4746  000C74  B4D8               	btfsc	status,2,c
  4747  000C76  D009               	goto	l441
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;doprnt.c: 540: {
  4751                           ;doprnt.c: 541: ((*sp++ = (c)));
  4752  000C78  C06C  FFD9         	movff	sprintf@sp,fsr2l
  4753  000C7C  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  4754  000C80  C080  FFDF         	movff	sprintf@c,indf2
  4755                           
  4756                           ; BSR set to: 0
  4757  000C84  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  4758  000C86  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  4759                           
  4760                           ;doprnt.c: 542: continue;
  4761  000C88  D12A               	goto	u2820
  4762  000C8A                     l441:
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;doprnt.c: 543: }
  4766                           ;doprnt.c: 546: width = 0;
  4767                           
  4768                           ; BSR set to: 0
  4769  000C8A  0E00               	movlw	0
  4770  000C8C  6F7F               	movwf	(sprintf@width+1)& (0+255),b
  4771  000C8E  0E00               	movlw	0
  4772  000C90  6F7E               	movwf	sprintf@width& (0+255),b
  4773                           
  4774                           ;doprnt.c: 548: flag = 0;
  4775  000C92  0E00               	movlw	0
  4776  000C94  6F7D               	movwf	sprintf@flag& (0+255),b
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;doprnt.c: 551: switch(*f) {
  4780                           
  4781                           ;doprnt.c: 550: for(;;) {
  4782  000C96  D004               	goto	l443
  4783  000C98                     
  4784                           ;doprnt.c: 580: flag |= 0x04;
  4785                           
  4786                           ; BSR set to: 0
  4787  000C98  0100               	movlb	0	; () banked
  4788  000C9A  857D               	bsf	sprintf@flag& (0+255),2,b
  4789                           
  4790                           ;doprnt.c: 581: f++;
  4791  000C9C  4B6E               	infsnz	sprintf@f& (0+255),f,b
  4792  000C9E  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  4793  000CA0                     l443:
  4794                           
  4795                           ; BSR set to: 0
  4796  000CA0  C06E  FFF6         	movff	sprintf@f,tblptrl
  4797  000CA4  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4798  000CA8                     	if	0	;tblptru may be non-zero
  4799  000CA8                     	endif
  4800  000CA8                     	if	0	;tblptru may be non-zero
  4801  000CA8                     	endif
  4802  000CA8  0008               	tblrd		*
  4803  000CAA  50F5               	movf	tablat,w,c
  4804                           
  4805                           ; Switch size 1, requested type "space"
  4806                           ; Number of cases is 1, Range of values is 48 to 48
  4807                           ; switch strategies available:
  4808                           ; Name         Instructions Cycles
  4809                           ; simple_byte            4     3 (average)
  4810                           ;	Chosen strategy is simple_byte
  4811  000CAC  0A30               	xorlw	48	; case 48
  4812  000CAE  B4D8               	btfsc	status,2,c
  4813  000CB0  D7F3               	goto	l444
  4814                           
  4815                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4816                           
  4817                           ;doprnt.c: 586: }
  4818                           
  4819                           ;doprnt.c: 585: break;
  4820  000CB2  C06E  FFF6         	movff	sprintf@f,tblptrl
  4821  000CB6  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4822  000CBA                     	if	0	;tblptru may be non-zero
  4823  000CBA                     	endif
  4824  000CBA                     	if	0	;tblptru may be non-zero
  4825  000CBA                     	endif
  4826  000CBA  0008               	tblrd		*
  4827  000CBC  50F5               	movf	tablat,w,c
  4828  000CBE  EC37  F00D         	call	_isdigit
  4829  000CC2  A0D8               	btfss	status,0,c
  4830  000CC4  D035               	goto	l451
  4831                           
  4832                           ;doprnt.c: 598: width = 0;
  4833  000CC6  0E00               	movlw	0
  4834  000CC8  0100               	movlb	0	; () banked
  4835  000CCA  6F7F               	movwf	(sprintf@width+1)& (0+255),b
  4836  000CCC  0E00               	movlw	0
  4837  000CCE  6F7E               	movwf	sprintf@width& (0+255),b
  4838  000CD0                     
  4839                           ;doprnt.c: 600: width *= 10;
  4840                           
  4841                           ; BSR set to: 0
  4842  000CD0  C07E  F060         	movff	sprintf@width,___wmul@multiplier
  4843  000CD4  C07F  F061         	movff	sprintf@width+1,___wmul@multiplier+1
  4844  000CD8  0E00               	movlw	0
  4845  000CDA  0100               	movlb	0	; () banked
  4846  000CDC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4847  000CDE  0E0A               	movlw	10
  4848  000CE0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4849  000CE2  ECFF  F00C         	call	___wmul	;wreg free
  4850  000CE6  C060  F07E         	movff	?___wmul,sprintf@width
  4851  000CEA  C061  F07F         	movff	?___wmul+1,sprintf@width+1
  4852                           
  4853                           ;doprnt.c: 601: width += *f++ - '0';
  4854  000CEE  0ED0               	movlw	208
  4855  000CF0  0100               	movlb	0	; () banked
  4856  000CF2  6F74               	movwf	??_sprintf& (0+255),b
  4857  000CF4  0EFF               	movlw	255
  4858  000CF6  6F75               	movwf	(??_sprintf+1)& (0+255),b
  4859  000CF8  C06E  FFF6         	movff	sprintf@f,tblptrl
  4860  000CFC  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4861  000D00                     	if	0	;tblptru may be non-zero
  4862  000D00                     	endif
  4863  000D00                     	if	0	;tblptru may be non-zero
  4864  000D00                     	endif
  4865  000D00  0008               	tblrd		*
  4866  000D02  50F5               	movf	tablat,w,c
  4867  000D04  6F76               	movwf	(??_sprintf+2)& (0+255),b
  4868  000D06  6B77               	clrf	(??_sprintf+3)& (0+255),b
  4869  000D08  5174               	movf	??_sprintf& (0+255),w,b
  4870  000D0A  2776               	addwf	(??_sprintf+2)& (0+255),f,b
  4871  000D0C  5175               	movf	(??_sprintf+1)& (0+255),w,b
  4872  000D0E  2377               	addwfc	(??_sprintf+3)& (0+255),f,b
  4873  000D10  5176               	movf	(??_sprintf+2)& (0+255),w,b
  4874  000D12  277E               	addwf	sprintf@width& (0+255),f,b
  4875  000D14  5177               	movf	(??_sprintf+3)& (0+255),w,b
  4876  000D16  237F               	addwfc	(sprintf@width+1)& (0+255),f,b
  4877                           
  4878                           ; BSR set to: 0
  4879  000D18  4B6E               	infsnz	sprintf@f& (0+255),f,b
  4880  000D1A  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4884  000D1C  C06E  FFF6         	movff	sprintf@f,tblptrl
  4885  000D20  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4886  000D24                     	if	0	;tblptru may be non-zero
  4887  000D24                     	endif
  4888  000D24                     	if	0	;tblptru may be non-zero
  4889  000D24                     	endif
  4890  000D24  0008               	tblrd		*
  4891  000D26  50F5               	movf	tablat,w,c
  4892  000D28  EC37  F00D         	call	_isdigit
  4893  000D2C  B0D8               	btfsc	status,0,c
  4894  000D2E  D7D0               	goto	l449
  4895  000D30                     l451:
  4896  000D30  C06E  FFF6         	movff	sprintf@f,tblptrl
  4897  000D34  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4898  000D38  0100               	movlb	0	; () banked
  4899  000D3A  4B6E               	infsnz	sprintf@f& (0+255),f,b
  4900  000D3C  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  4901  000D3E                     	if	0	;tblptru may be non-zero
  4902  000D3E                     	endif
  4903  000D3E                     	if	0	;tblptru may be non-zero
  4904  000D3E                     	endif
  4905  000D3E  0008               	tblrd		*
  4906  000D40  CFF5 F080          	movff	tablat,sprintf@c
  4907  000D44  5180               	movf	sprintf@c& (0+255),w,b
  4908                           
  4909                           ; Switch size 1, requested type "space"
  4910                           ; Number of cases is 3, Range of values is 0 to 105
  4911                           ; switch strategies available:
  4912                           ; Name         Instructions Cycles
  4913                           ; simple_byte           10     6 (average)
  4914                           ;	Chosen strategy is simple_byte
  4915  000D46  0A00               	xorlw	0	; case 0
  4916  000D48  B4D8               	btfsc	status,2,c
  4917  000D4A  D0D6               	goto	u2830
  4918  000D4C  0A64               	xorlw	100	; case 100
  4919  000D4E  B4D8               	btfsc	status,2,c
  4920  000D50  D003               	goto	l456
  4921  000D52  0A0D               	xorlw	13	; case 105
  4922  000D54  A4D8               	btfss	status,2,c
  4923  000D56  D0C3               	goto	u2820
  4924  000D58                     l456:
  4925                           
  4926                           ;doprnt.c: 1253: {
  4927                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4928                           
  4929                           ; BSR set to: 0
  4930  000D58  C078  FFD9         	movff	sprintf@ap,fsr2l
  4931  000D5C  C079  FFDA         	movff	sprintf@ap+1,fsr2h
  4932  000D60  CFDE F07B          	movff	postinc2,sprintf@val
  4933  000D64  CFDD F07C          	movff	postdec2,sprintf@val+1
  4934  000D68  0E02               	movlw	2
  4935  000D6A  0100               	movlb	0	; () banked
  4936  000D6C  2778               	addwf	sprintf@ap& (0+255),f,b
  4937  000D6E  0E00               	movlw	0
  4938  000D70  2379               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;doprnt.c: 1261: if((int)val < 0) {
  4942  000D72  AF7C               	btfss	(sprintf@val+1)& (0+255),7,b
  4943  000D74  D006               	goto	l458
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;doprnt.c: 1262: flag |= 0x03;
  4947  000D76  0E03               	movlw	3
  4948  000D78  137D               	iorwf	sprintf@flag& (0+255),f,b
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;doprnt.c: 1263: val = -val;
  4952  000D7A  6D7B               	negf	sprintf@val& (0+255),b
  4953  000D7C  1F7C               	comf	(sprintf@val+1)& (0+255),f,b
  4954  000D7E  B0D8               	btfsc	status,0,c
  4955  000D80  2B7C               	incf	(sprintf@val+1)& (0+255),f,b
  4956  000D82                     l458:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;doprnt.c: 1264: }
  4960                           ;doprnt.c: 1266: }
  4961                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4962                           
  4963                           ; BSR set to: 0
  4964  000D82  0E01               	movlw	1
  4965  000D84  6F80               	movwf	sprintf@c& (0+255),b
  4966  000D86                     l3162:
  4967                           
  4968                           ; BSR set to: 0
  4969  000D86  0E05               	movlw	5
  4970  000D88  1980               	xorwf	sprintf@c& (0+255),w,b
  4971  000D8A  B4D8               	btfsc	status,2,c
  4972  000D8C  D012               	goto	u2710
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;doprnt.c: 1306: if(val < dpowers[c])
  4976                           
  4977                           ; BSR set to: 0
  4978                           
  4979                           ; BSR set to: 0
  4980  000D8E  5180               	movf	sprintf@c& (0+255),w,b
  4981  000D90  0D02               	mullw	2
  4982  000D92  0E01               	movlw	low _dpowers
  4983  000D94  24F3               	addwf	prodl,w,c
  4984  000D96  6EF6               	movwf	tblptrl,c
  4985  000D98  0E03               	movlw	high _dpowers
  4986  000D9A  20F4               	addwfc	prodh,w,c
  4987  000D9C  6EF7               	movwf	tblptrh,c
  4988  000D9E                     	if	0	;There are less than 3 active tblptr bytes
  4989  000D9E                     	endif
  4990  000D9E  0009               	tblrd		*+
  4991  000DA0  50F5               	movf	tablat,w,c
  4992  000DA2  5D7B               	subwf	sprintf@val& (0+255),w,b
  4993  000DA4  0009               	tblrd		*+
  4994  000DA6  50F5               	movf	tablat,w,c
  4995  000DA8  597C               	subwfb	(sprintf@val+1)& (0+255),w,b
  4996  000DAA  A0D8               	btfss	status,0,c
  4997  000DAC  D002               	goto	u2710
  4998                           
  4999                           ; BSR set to: 0
  5000                           
  5001                           ; BSR set to: 0
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;doprnt.c: 1307: break;
  5005  000DAE  2B80               	incf	sprintf@c& (0+255),f,b
  5006  000DB0  D7EA               	goto	l3162
  5007  000DB2                     u2710:
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5011                           
  5012                           ; BSR set to: 0
  5013  000DB2  517E               	movf	sprintf@width& (0+255),w,b
  5014  000DB4  117F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5015  000DB6  B4D8               	btfsc	status,2,c
  5016  000DB8  D009               	goto	l462
  5017                           
  5018                           ; BSR set to: 0
  5019  000DBA  C07D  F074         	movff	sprintf@flag,??_sprintf
  5020  000DBE  0E03               	movlw	3
  5021  000DC0  1774               	andwf	??_sprintf& (0+255),f,b
  5022  000DC2  B4D8               	btfsc	status,2,c
  5023  000DC4  D003               	goto	l462
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;doprnt.c: 1346: width--;
  5027  000DC6  077E               	decf	sprintf@width& (0+255),f,b
  5028  000DC8  A0D8               	btfss	status,0,c
  5029  000DCA  077F               	decf	(sprintf@width+1)& (0+255),f,b
  5030  000DCC                     l462:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;doprnt.c: 1381: if(width > c)
  5034                           
  5035                           ; BSR set to: 0
  5036  000DCC  0E80               	movlw	128
  5037  000DCE  BF80               	btfsc	sprintf@c& (0+255),7,b
  5038  000DD0  0E7F               	movlw	127
  5039  000DD2  6F74               	movwf	??_sprintf& (0+255),b
  5040  000DD4  517E               	movf	sprintf@width& (0+255),w,b
  5041  000DD6  5D80               	subwf	sprintf@c& (0+255),w,b
  5042  000DD8  517F               	movf	(sprintf@width+1)& (0+255),w,b
  5043  000DDA  0A80               	xorlw	128
  5044  000DDC  5974               	subwfb	??_sprintf& (0+255),w,b
  5045  000DDE  B0D8               	btfsc	status,0,c
  5046  000DE0  D007               	goto	l463
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;doprnt.c: 1382: width -= c;
  5050  000DE2  5180               	movf	sprintf@c& (0+255),w,b
  5051  000DE4  5F7E               	subwf	sprintf@width& (0+255),f,b
  5052  000DE6  0E00               	movlw	0
  5053  000DE8  BF80               	btfsc	sprintf@c& (0+255),7,b
  5054  000DEA  0EFF               	movlw	255
  5055  000DEC  5B7F               	subwfb	(sprintf@width+1)& (0+255),f,b
  5056  000DEE  D004               	goto	l464
  5057  000DF0                     l463:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;doprnt.c: 1383: else
  5061                           ;doprnt.c: 1384: width = 0;
  5062                           
  5063                           ; BSR set to: 0
  5064  000DF0  0E00               	movlw	0
  5065  000DF2  6F7F               	movwf	(sprintf@width+1)& (0+255),b
  5066  000DF4  0E00               	movlw	0
  5067  000DF6  6F7E               	movwf	sprintf@width& (0+255),b
  5068  000DF8                     l464:
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;doprnt.c: 1387: if(flag & 0x04) {
  5072                           
  5073                           ; BSR set to: 0
  5074  000DF8  A57D               	btfss	sprintf@flag& (0+255),2,b
  5075  000DFA  D01E               	goto	l465
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;doprnt.c: 1392: if(flag & 0x03)
  5079  000DFC  C07D  F074         	movff	sprintf@flag,??_sprintf
  5080  000E00  0E03               	movlw	3
  5081  000E02  1774               	andwf	??_sprintf& (0+255),f,b
  5082  000E04  B4D8               	btfsc	status,2,c
  5083  000E06  D008               	goto	l466
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5087  000E08  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5088  000E0C  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5089  000E10  0E2D               	movlw	45
  5090  000E12  6EDF               	movwf	indf2,c
  5091                           
  5092                           ; BSR set to: 0
  5093  000E14  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5094  000E16  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5095  000E18                     l466:
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;doprnt.c: 1415: if(width)
  5099                           
  5100                           ; BSR set to: 0
  5101  000E18  517E               	movf	sprintf@width& (0+255),w,b
  5102  000E1A  117F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5103  000E1C  B4D8               	btfsc	status,2,c
  5104  000E1E  D02D               	goto	l474
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5108                           
  5109                           ; BSR set to: 0
  5110                           
  5111                           ;doprnt.c: 1416: do
  5112  000E20  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5113  000E24  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5114  000E28  0E30               	movlw	48
  5115  000E2A  6EDF               	movwf	indf2,c
  5116                           
  5117                           ; BSR set to: 0
  5118  000E2C  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5119  000E2E  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;doprnt.c: 1418: while(--width);
  5123  000E30  077E               	decf	sprintf@width& (0+255),f,b
  5124  000E32  A0D8               	btfss	status,0,c
  5125  000E34  077F               	decf	(sprintf@width+1)& (0+255),f,b
  5126  000E36  D7F0               	goto	l466
  5127  000E38                     l465:
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;doprnt.c: 1422: {
  5131                           ;doprnt.c: 1424: if(width
  5132                           ;doprnt.c: 1428: )
  5133                           
  5134                           ; BSR set to: 0
  5135  000E38  517E               	movf	sprintf@width& (0+255),w,b
  5136  000E3A  117F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5137  000E3C  B4D8               	btfsc	status,2,c
  5138  000E3E  D00F               	goto	u2800
  5139  000E40                     u2790:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5143                           
  5144                           ; BSR set to: 0
  5145                           
  5146                           ;doprnt.c: 1429: do
  5147  000E40  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5148  000E44  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5149  000E48  0E20               	movlw	32
  5150  000E4A  6EDF               	movwf	indf2,c
  5151                           
  5152                           ; BSR set to: 0
  5153  000E4C  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5154  000E4E  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;doprnt.c: 1431: while(--width);
  5158  000E50  077E               	decf	sprintf@width& (0+255),f,b
  5159  000E52  A0D8               	btfss	status,0,c
  5160  000E54  077F               	decf	(sprintf@width+1)& (0+255),f,b
  5161  000E56  517E               	movf	sprintf@width& (0+255),w,b
  5162  000E58  117F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5163  000E5A  A4D8               	btfss	status,2,c
  5164  000E5C  D7F1               	goto	u2790
  5165  000E5E                     u2800:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;doprnt.c: 1438: if(flag & 0x03)
  5169                           
  5170                           ; BSR set to: 0
  5171                           
  5172                           ; BSR set to: 0
  5173  000E5E  C07D  F074         	movff	sprintf@flag,??_sprintf
  5174  000E62  0E03               	movlw	3
  5175  000E64  1774               	andwf	??_sprintf& (0+255),f,b
  5176  000E66  B4D8               	btfsc	status,2,c
  5177  000E68  D008               	goto	l474
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5181  000E6A  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5182  000E6E  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5183  000E72  0E2D               	movlw	45
  5184  000E74  6EDF               	movwf	indf2,c
  5185                           
  5186                           ; BSR set to: 0
  5187  000E76  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5188  000E78  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5189  000E7A                     l474:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;doprnt.c: 1469: }
  5193                           ;doprnt.c: 1472: prec = c;
  5194                           
  5195                           ; BSR set to: 0
  5196                           
  5197                           ; BSR set to: 0
  5198  000E7A  C080  F07A         	movff	sprintf@c,sprintf@prec
  5199                           
  5200                           ;doprnt.c: 1474: while(prec--) {
  5201  000E7E  D02B               	goto	l475
  5202  000E80                     
  5203                           ; BSR set to: 0
  5204                           ;doprnt.c: 1478: {
  5205                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5206                           
  5207                           ; BSR set to: 0
  5208  000E80  517A               	movf	sprintf@prec& (0+255),w,b
  5209  000E82  0D02               	mullw	2
  5210  000E84  0E01               	movlw	low _dpowers
  5211  000E86  24F3               	addwf	prodl,w,c
  5212  000E88  6EF6               	movwf	tblptrl,c
  5213  000E8A  0E03               	movlw	high _dpowers
  5214  000E8C  20F4               	addwfc	prodh,w,c
  5215  000E8E  6EF7               	movwf	tblptrh,c
  5216  000E90                     	if	0	;There are less than 3 active tblptr bytes
  5217  000E90                     	endif
  5218  000E90  0009               	tblrd		*+
  5219  000E92  CFF5 F062          	movff	tablat,___lwdiv@divisor
  5220  000E96  000A               	tblrd		*-
  5221  000E98  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  5222  000E9C  C07B  F060         	movff	sprintf@val,___lwdiv@dividend
  5223  000EA0  C07C  F061         	movff	sprintf@val+1,___lwdiv@dividend+1
  5224  000EA4  ECB6  F00B         	call	___lwdiv	;wreg free
  5225  000EA8  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  5226  000EAC  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  5227  000EB0  0E00               	movlw	0
  5228  000EB2  0100               	movlb	0	; () banked
  5229  000EB4  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5230  000EB6  0E0A               	movlw	10
  5231  000EB8  6F69               	movwf	___lwmod@divisor& (0+255),b
  5232  000EBA  ECE0  F00B         	call	___lwmod	;wreg free
  5233  000EBE  0100               	movlb	0	; () banked
  5234  000EC0  5167               	movf	?___lwmod& (0+255),w,b
  5235  000EC2  0F30               	addlw	48
  5236  000EC4  6F80               	movwf	sprintf@c& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;doprnt.c: 1523: }
  5240                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5241  000EC6  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5242  000ECA  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5243  000ECE  C080  FFDF         	movff	sprintf@c,indf2
  5244                           
  5245                           ; BSR set to: 0
  5246  000ED2  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5247  000ED4  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5248  000ED6                     l475:
  5249                           
  5250                           ; BSR set to: 0
  5251                           
  5252                           ; BSR set to: 0
  5253  000ED6  077A               	decf	sprintf@prec& (0+255),f,b
  5254  000ED8  297A               	incf	sprintf@prec& (0+255),w,b
  5255  000EDA  A4D8               	btfss	status,2,c
  5256  000EDC  D7D1               	goto	l476
  5257  000EDE                     u2820:
  5258                           
  5259                           ; BSR set to: 0
  5260                           
  5261                           ; BSR set to: 0
  5262  000EDE  C06E  FFF6         	movff	sprintf@f,tblptrl
  5263  000EE2  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  5264  000EE6  0100               	movlb	0	; () banked
  5265  000EE8  4B6E               	infsnz	sprintf@f& (0+255),f,b
  5266  000EEA  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  5267  000EEC                     	if	0	;tblptru may be non-zero
  5268  000EEC                     	endif
  5269  000EEC                     	if	0	;tblptru may be non-zero
  5270  000EEC                     	endif
  5271  000EEC  0008               	tblrd		*
  5272  000EEE  CFF5 F080          	movff	tablat,sprintf@c
  5273  000EF2  5180               	movf	sprintf@c& (0+255),w,b
  5274  000EF4  A4D8               	btfss	status,2,c
  5275  000EF6  D6BC               	goto	l440
  5276  000EF8                     u2830:
  5277                           
  5278                           ;doprnt.c: 1538: *sp = 0;
  5279                           
  5280                           ; BSR set to: 0
  5281                           
  5282                           ;doprnt.c: 1525: }
  5283                           ;doprnt.c: 1533: }
  5284                           ;doprnt.c: 1535: alldone:
  5285                           
  5286                           ; BSR set to: 0
  5287  000EF8  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5288  000EFC  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5289  000F00  0E00               	movlw	0
  5290  000F02  6EDF               	movwf	indf2,c
  5291  000F04  0012               	return	
  5292  000F06                     __end_of_sprintf:
  5293                           	opt stack 0
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon	equ	0xFF2
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           indf1	equ	0xFE7
  5304                           fsr1h	equ	0xFE2
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           plusw2	equ	0xFDB
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _isdigit *****************
  5315 ;; Defined at:
  5316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  c               1    wreg     unsigned char 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  c               1    2[BANK0 ] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;		None               void
  5323 ;; Registers used:
  5324 ;;		wreg, status,2, status,0
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5330 ;;      Params:         0       0       0       0
  5331 ;;      Locals:         0       2       0       0
  5332 ;;      Temps:          0       1       0       0
  5333 ;;      Totals:         0       3       0       0
  5334 ;;Total ram usage:        3 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    3
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_sprintf
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text19
  5345  001A6E                     __ptext19:
  5346                           	opt stack 0
  5347  001A6E                     _isdigit:
  5348                           	opt stack 26
  5349                           
  5350                           ;incstack = 0
  5351                           ;isdigit@c stored from wreg
  5352  001A6E  0100               	movlb	0	; () banked
  5353  001A70  6F62               	movwf	isdigit@c& (0+255),b
  5354  001A72  0E00               	movlw	0
  5355  001A74  0100               	movlb	0	; () banked
  5356  001A76  6F61               	movwf	_isdigit$1693& (0+255),b
  5357                           
  5358                           ; BSR set to: 0
  5359  001A78  0E3A               	movlw	58
  5360  001A7A  6162               	cpfslt	isdigit@c& (0+255),b
  5361  001A7C  D005               	goto	l809
  5362                           
  5363                           ; BSR set to: 0
  5364  001A7E  0E2F               	movlw	47
  5365  001A80  6562               	cpfsgt	isdigit@c& (0+255),b
  5366  001A82  D002               	goto	l809
  5367                           
  5368                           ; BSR set to: 0
  5369  001A84  0E01               	movlw	1
  5370  001A86  6F61               	movwf	_isdigit$1693& (0+255),b
  5371  001A88                     l809:
  5372                           
  5373                           ; BSR set to: 0
  5374                           
  5375                           ; BSR set to: 0
  5376  001A88  C061  F060         	movff	_isdigit$1693,??_isdigit
  5377  001A8C  3160               	rrcf	??_isdigit& (0+255),w,b
  5378  001A8E  0012               	return	
  5379  001A90                     __end_of_isdigit:
  5380                           	opt stack 0
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodh	equ	0xFF4
  5386                           prodl	equ	0xFF3
  5387                           intcon	equ	0xFF2
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           indf1	equ	0xFE7
  5391                           fsr1h	equ	0xFE2
  5392                           fsr1l	equ	0xFE1
  5393                           indf2	equ	0xFDF
  5394                           postinc2	equ	0xFDE
  5395                           postdec2	equ	0xFDD
  5396                           plusw2	equ	0xFDB
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function ___wmul *****************
  5402 ;; Defined at:
  5403 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5406 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;  product         2    4[BANK0 ] unsigned int 
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  2    0[BANK0 ] unsigned int 
  5411 ;; Registers used:
  5412 ;;		wreg, status,2, status,0, prodl, prodh
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5418 ;;      Params:         0       4       0       0
  5419 ;;      Locals:         0       2       0       0
  5420 ;;      Temps:          0       0       0       0
  5421 ;;      Totals:         0       6       0       0
  5422 ;;Total ram usage:        6 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    3
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		_setMotorPWM
  5429 ;;		_sprintf
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           	psect	text20
  5434  0019FE                     __ptext20:
  5435                           	opt stack 0
  5436  0019FE                     ___wmul:
  5437                           	opt stack 24
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;incstack = 0
  5441  0019FE  0100               	movlb	0	; () banked
  5442  001A00  5160               	movf	___wmul@multiplier& (0+255),w,b
  5443  001A02  0362               	mulwf	___wmul@multiplicand& (0+255),b
  5444  001A04  CFF3 F064          	movff	prodl,___wmul@product
  5445  001A08  CFF4 F065          	movff	prodh,___wmul@product+1
  5446  001A0C  5160               	movf	___wmul@multiplier& (0+255),w,b
  5447  001A0E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5448  001A10  50F3               	movf	prodl,w,c
  5449  001A12  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  5450  001A14  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5451  001A16  0362               	mulwf	___wmul@multiplicand& (0+255),b
  5452  001A18  50F3               	movf	prodl,w,c
  5453  001A1A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  5454                           
  5455                           ; BSR set to: 0
  5456  001A1C  C064  F060         	movff	___wmul@product,?___wmul
  5457  001A20  C065  F061         	movff	___wmul@product+1,?___wmul+1
  5458  001A24  0012               	return	
  5459  001A26                     __end_of___wmul:
  5460                           	opt stack 0
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           postinc0	equ	0xFEE
  5469                           wreg	equ	0xFE8
  5470                           indf1	equ	0xFE7
  5471                           fsr1h	equ	0xFE2
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           plusw2	equ	0xFDB
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function ___lwmod *****************
  5482 ;; Defined at:
  5483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  dividend        2    7[BANK0 ] unsigned int 
  5486 ;;  divisor         2    9[BANK0 ] unsigned int 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  counter         1   11[BANK0 ] unsigned char 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  2    7[BANK0 ] unsigned int 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5498 ;;      Params:         0       4       0       0
  5499 ;;      Locals:         0       1       0       0
  5500 ;;      Temps:          0       0       0       0
  5501 ;;      Totals:         0       5       0       0
  5502 ;;Total ram usage:        5 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    3
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_sprintf
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text21
  5513  0017C0                     __ptext21:
  5514                           	opt stack 0
  5515  0017C0                     ___lwmod:
  5516                           	opt stack 26
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;incstack = 0
  5520  0017C0  0100               	movlb	0	; () banked
  5521  0017C2  5169               	movf	___lwmod@divisor& (0+255),w,b
  5522  0017C4  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5523  0017C6  B4D8               	btfsc	status,2,c
  5524  0017C8  D018               	goto	l903
  5525                           
  5526                           ; BSR set to: 0
  5527  0017CA  0E01               	movlw	1
  5528  0017CC  6F6B               	movwf	___lwmod@counter& (0+255),b
  5529  0017CE  D004               	goto	l898
  5530  0017D0                     
  5531                           ; BSR set to: 0
  5532                           
  5533                           ; BSR set to: 0
  5534  0017D0  90D8               	bcf	status,0,c
  5535  0017D2  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  5536  0017D4  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5537  0017D6  2B6B               	incf	___lwmod@counter& (0+255),f,b
  5538  0017D8                     l898:
  5539                           
  5540                           ; BSR set to: 0
  5541                           
  5542                           ; BSR set to: 0
  5543  0017D8  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5544  0017DA  D7FA               	goto	l899
  5545  0017DC                     u2470:
  5546                           
  5547                           ; BSR set to: 0
  5548                           
  5549                           ; BSR set to: 0
  5550                           
  5551                           ; BSR set to: 0
  5552  0017DC  5169               	movf	___lwmod@divisor& (0+255),w,b
  5553  0017DE  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  5554  0017E0  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5555  0017E2  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5556  0017E4  A0D8               	btfss	status,0,c
  5557  0017E6  D004               	goto	l902
  5558                           
  5559                           ; BSR set to: 0
  5560  0017E8  5169               	movf	___lwmod@divisor& (0+255),w,b
  5561  0017EA  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  5562  0017EC  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5563  0017EE  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5564  0017F0                     l902:
  5565                           
  5566                           ; BSR set to: 0
  5567                           
  5568                           ; BSR set to: 0
  5569  0017F0  90D8               	bcf	status,0,c
  5570  0017F2  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5571  0017F4  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  5572                           
  5573                           ; BSR set to: 0
  5574  0017F6  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  5575  0017F8  D7F1               	goto	u2470
  5576  0017FA                     l903:
  5577                           
  5578                           ; BSR set to: 0
  5579                           
  5580                           ; BSR set to: 0
  5581  0017FA  C067  F067         	movff	___lwmod@dividend,?___lwmod
  5582  0017FE  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  5583                           
  5584                           ; BSR set to: 0
  5585  001802  0012               	return		;funcret
  5586  001804                     __end_of___lwmod:
  5587                           	opt stack 0
  5588                           tblptru	equ	0xFF8
  5589                           tblptrh	equ	0xFF7
  5590                           tblptrl	equ	0xFF6
  5591                           tablat	equ	0xFF5
  5592                           prodh	equ	0xFF4
  5593                           prodl	equ	0xFF3
  5594                           intcon	equ	0xFF2
  5595                           postinc0	equ	0xFEE
  5596                           wreg	equ	0xFE8
  5597                           indf1	equ	0xFE7
  5598                           fsr1h	equ	0xFE2
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           plusw2	equ	0xFDB
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function ___lwdiv *****************
  5609 ;; Defined at:
  5610 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  dividend        2    0[BANK0 ] unsigned int 
  5613 ;;  divisor         2    2[BANK0 ] unsigned int 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  quotient        2    5[BANK0 ] unsigned int 
  5616 ;;  counter         1    4[BANK0 ] unsigned char 
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  2    0[BANK0 ] unsigned int 
  5619 ;; Registers used:
  5620 ;;		wreg, status,2, status,0
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5626 ;;      Params:         0       4       0       0
  5627 ;;      Locals:         0       3       0       0
  5628 ;;      Temps:          0       0       0       0
  5629 ;;      Totals:         0       7       0       0
  5630 ;;Total ram usage:        7 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; Hardware stack levels required when called:    3
  5633 ;; This function calls:
  5634 ;;		Nothing
  5635 ;; This function is called by:
  5636 ;;		_sprintf
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           	psect	text22
  5641  00176C                     __ptext22:
  5642                           	opt stack 0
  5643  00176C                     ___lwdiv:
  5644                           	opt stack 26
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;incstack = 0
  5648  00176C  0E00               	movlw	0
  5649  00176E  0100               	movlb	0	; () banked
  5650  001770  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5651  001772  0E00               	movlw	0
  5652  001774  6F65               	movwf	___lwdiv@quotient& (0+255),b
  5653                           
  5654                           ; BSR set to: 0
  5655  001776  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5656  001778  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5657  00177A  B4D8               	btfsc	status,2,c
  5658  00177C  D01C               	goto	l893
  5659                           
  5660                           ; BSR set to: 0
  5661  00177E  0E01               	movlw	1
  5662  001780  6F64               	movwf	___lwdiv@counter& (0+255),b
  5663  001782  D004               	goto	l888
  5664  001784                     
  5665                           ; BSR set to: 0
  5666                           
  5667                           ; BSR set to: 0
  5668  001784  90D8               	bcf	status,0,c
  5669  001786  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  5670  001788  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5671  00178A  2B64               	incf	___lwdiv@counter& (0+255),f,b
  5672  00178C                     l888:
  5673                           
  5674                           ; BSR set to: 0
  5675                           
  5676                           ; BSR set to: 0
  5677  00178C  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5678  00178E  D7FA               	goto	l889
  5679  001790                     u2440:
  5680                           
  5681                           ; BSR set to: 0
  5682                           
  5683                           ; BSR set to: 0
  5684                           
  5685                           ; BSR set to: 0
  5686  001790  90D8               	bcf	status,0,c
  5687  001792  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  5688  001794  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5689                           
  5690                           ; BSR set to: 0
  5691  001796  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5692  001798  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  5693  00179A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5694  00179C  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5695  00179E  A0D8               	btfss	status,0,c
  5696  0017A0  D005               	goto	l892
  5697                           
  5698                           ; BSR set to: 0
  5699  0017A2  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5700  0017A4  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  5701  0017A6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5702  0017A8  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5703                           
  5704                           ; BSR set to: 0
  5705  0017AA  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  5706  0017AC                     l892:
  5707                           
  5708                           ; BSR set to: 0
  5709                           
  5710                           ; BSR set to: 0
  5711  0017AC  90D8               	bcf	status,0,c
  5712  0017AE  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5713  0017B0  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  5714                           
  5715                           ; BSR set to: 0
  5716  0017B2  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  5717  0017B4  D7ED               	goto	u2440
  5718  0017B6                     l893:
  5719                           
  5720                           ; BSR set to: 0
  5721                           
  5722                           ; BSR set to: 0
  5723  0017B6  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  5724  0017BA  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5725                           
  5726                           ; BSR set to: 0
  5727  0017BE  0012               	return		;funcret
  5728  0017C0                     __end_of___lwdiv:
  5729                           	opt stack 0
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           intcon	equ	0xFF2
  5737                           postinc0	equ	0xFEE
  5738                           wreg	equ	0xFE8
  5739                           indf1	equ	0xFE7
  5740                           fsr1h	equ	0xFE2
  5741                           fsr1l	equ	0xFE1
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           plusw2	equ	0xFDB
  5746                           fsr2h	equ	0xFDA
  5747                           fsr2l	equ	0xFD9
  5748                           status	equ	0xFD8
  5749                           
  5750 ;; *************** function _grabRightIR *****************
  5751 ;; Defined at:
  5752 ;;		line 74 in file "IR_Reading.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  IR_signal       2    5[BANK0 ] unsigned int 
  5757 ;;  i               1    7[BANK0 ] unsigned char 
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  2    0[BANK0 ] unsigned int 
  5760 ;; Registers used:
  5761 ;;		wreg, status,2, status,0
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5767 ;;      Params:         0       2       0       0
  5768 ;;      Locals:         0       3       0       0
  5769 ;;      Temps:          0       3       0       0
  5770 ;;      Totals:         0       8       0       0
  5771 ;;Total ram usage:        8 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    3
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_ScanIR
  5778 ;;		_ScanWithRange
  5779 ;;		_main
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text23
  5784  001616                     __ptext23:
  5785                           	opt stack 0
  5786  001616                     _grabRightIR:
  5787                           	opt stack 27
  5788                           
  5789                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;incstack = 0
  5793  001616  0E00               	movlw	0
  5794  001618  0100               	movlb	0	; () banked
  5795  00161A  6F66               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  5796  00161C  0E00               	movlw	0
  5797  00161E  6F65               	movwf	grabRightIR@IR_signal& (0+255),b
  5798                           
  5799                           ;IR_Reading.c: 77: unsigned char i=0;
  5800  001620  0E00               	movlw	0
  5801  001622  6F67               	movwf	grabRightIR@i& (0+255),b
  5802                           
  5803                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5804  001624  0E00               	movlw	0
  5805  001626  6F67               	movwf	grabRightIR@i& (0+255),b
  5806  001628                     l3060:
  5807                           
  5808                           ; BSR set to: 0
  5809  001628  0E03               	movlw	3
  5810  00162A  6567               	cpfsgt	grabRightIR@i& (0+255),b
  5811  00162C  D001               	goto	l105
  5812  00162E  D021               	goto	u2550
  5813  001630                     l105:
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5817                           
  5818                           ; BSR set to: 0
  5819  001630  5069               	movf	3945,w,c	;volatile
  5820  001632  6F62               	movwf	??_grabRightIR& (0+255),b
  5821  001634  6B63               	clrf	(??_grabRightIR+1)& (0+255),b
  5822  001636  0E07               	movlw	7
  5823  001638                     u2545:
  5824  001638  90D8               	bcf	status,0,c
  5825  00163A  3762               	rlcf	??_grabRightIR& (0+255),f,b
  5826  00163C  3763               	rlcf	(??_grabRightIR+1)& (0+255),f,b
  5827  00163E  2EE8               	decfsz	wreg,f,c
  5828  001640  D7FB               	goto	u2545
  5829  001642  CF68 F064          	movff	3944,??_grabRightIR+2	;volatile
  5830  001646  90D8               	bcf	status,0,c
  5831  001648  3364               	rrcf	(??_grabRightIR+2)& (0+255),f,b
  5832  00164A  5164               	movf	(??_grabRightIR+2)& (0+255),w,b
  5833  00164C  1362               	iorwf	??_grabRightIR& (0+255),f,b
  5834  00164E  0E00               	movlw	0
  5835  001650  1363               	iorwf	(??_grabRightIR+1)& (0+255),f,b
  5836  001652  5162               	movf	??_grabRightIR& (0+255),w,b
  5837  001654  2765               	addwf	grabRightIR@IR_signal& (0+255),f,b
  5838  001656  5163               	movf	(??_grabRightIR+1)& (0+255),w,b
  5839  001658  2366               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5843  00165A  0E82               	movlw	130
  5844  00165C  0100               	movlb	0	; () banked
  5845  00165E  6F62               	movwf	??_grabRightIR& (0+255),b
  5846  001660  0EDD               	movlw	221
  5847  001662                     u3397:
  5848  001662  2EE8               	decfsz	wreg,f,c
  5849  001664  D7FE               	bra	u3397
  5850  001666  2F62               	decfsz	??_grabRightIR& (0+255),f,b
  5851  001668  D7FC               	bra	u3397
  5852  00166A  D000               	nop2	
  5853  00166C  0100               	movlb	0	; () banked
  5854  00166E  2B67               	incf	grabRightIR@i& (0+255),f,b
  5855  001670  D7DB               	goto	l3060
  5856  001672                     u2550:
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;IR_Reading.c: 83: }
  5860                           ;IR_Reading.c: 85: return IR_signal>>2;
  5861                           
  5862                           ; BSR set to: 0
  5863  001672  C065  F062         	movff	grabRightIR@IR_signal,??_grabRightIR
  5864  001676  C066  F063         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5865  00167A  90D8               	bcf	status,0,c
  5866  00167C  3363               	rrcf	(??_grabRightIR+1)& (0+255),f,b
  5867  00167E  3362               	rrcf	??_grabRightIR& (0+255),f,b
  5868  001680  90D8               	bcf	status,0,c
  5869  001682  3363               	rrcf	(??_grabRightIR+1)& (0+255),f,b
  5870  001684  3362               	rrcf	??_grabRightIR& (0+255),f,b
  5871  001686  C062  F060         	movff	??_grabRightIR,?_grabRightIR
  5872  00168A  C063  F061         	movff	??_grabRightIR+1,?_grabRightIR+1
  5873  00168E  0012               	return	
  5874  001690                     __end_of_grabRightIR:
  5875                           	opt stack 0
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           indf1	equ	0xFE7
  5886                           fsr1h	equ	0xFE2
  5887                           fsr1l	equ	0xFE1
  5888                           indf2	equ	0xFDF
  5889                           postinc2	equ	0xFDE
  5890                           postdec2	equ	0xFDD
  5891                           plusw2	equ	0xFDB
  5892                           fsr2h	equ	0xFDA
  5893                           fsr2l	equ	0xFD9
  5894                           status	equ	0xFD8
  5895                           
  5896 ;; *************** function _grabLeftIR *****************
  5897 ;; Defined at:
  5898 ;;		line 90 in file "IR_Reading.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;		None
  5901 ;; Auto vars:     Size  Location     Type
  5902 ;;  IR_signal       2    5[BANK0 ] unsigned int 
  5903 ;;  i               1    7[BANK0 ] unsigned char 
  5904 ;; Return value:  Size  Location     Type
  5905 ;;                  2    0[BANK0 ] unsigned int 
  5906 ;; Registers used:
  5907 ;;		wreg, status,2, status,0
  5908 ;; Tracked objects:
  5909 ;;		On entry : 0/0
  5910 ;;		On exit  : 0/0
  5911 ;;		Unchanged: 0/0
  5912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5913 ;;      Params:         0       2       0       0
  5914 ;;      Locals:         0       3       0       0
  5915 ;;      Temps:          0       3       0       0
  5916 ;;      Totals:         0       8       0       0
  5917 ;;Total ram usage:        8 bytes
  5918 ;; Hardware stack levels used:    1
  5919 ;; Hardware stack levels required when called:    3
  5920 ;; This function calls:
  5921 ;;		Nothing
  5922 ;; This function is called by:
  5923 ;;		_ScanIR
  5924 ;;		_ScanWithRange
  5925 ;;		_main
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text24
  5930  001690                     __ptext24:
  5931                           	opt stack 0
  5932  001690                     _grabLeftIR:
  5933                           	opt stack 27
  5934                           
  5935                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;incstack = 0
  5939  001690  0E00               	movlw	0
  5940  001692  0100               	movlb	0	; () banked
  5941  001694  6F66               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  5942  001696  0E00               	movlw	0
  5943  001698  6F65               	movwf	grabLeftIR@IR_signal& (0+255),b
  5944                           
  5945                           ;IR_Reading.c: 93: unsigned char i=0;
  5946  00169A  0E00               	movlw	0
  5947  00169C  6F67               	movwf	grabLeftIR@i& (0+255),b
  5948                           
  5949                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5950  00169E  0E00               	movlw	0
  5951  0016A0  6F67               	movwf	grabLeftIR@i& (0+255),b
  5952  0016A2                     l3076:
  5953                           
  5954                           ; BSR set to: 0
  5955  0016A2  0E03               	movlw	3
  5956  0016A4  6567               	cpfsgt	grabLeftIR@i& (0+255),b
  5957  0016A6  D001               	goto	l110
  5958  0016A8  D021               	goto	u2580
  5959  0016AA                     l110:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5963                           
  5964                           ; BSR set to: 0
  5965  0016AA  5067               	movf	3943,w,c	;volatile
  5966  0016AC  6F62               	movwf	??_grabLeftIR& (0+255),b
  5967  0016AE  6B63               	clrf	(??_grabLeftIR+1)& (0+255),b
  5968  0016B0  0E07               	movlw	7
  5969  0016B2                     u2575:
  5970  0016B2  90D8               	bcf	status,0,c
  5971  0016B4  3762               	rlcf	??_grabLeftIR& (0+255),f,b
  5972  0016B6  3763               	rlcf	(??_grabLeftIR+1)& (0+255),f,b
  5973  0016B8  2EE8               	decfsz	wreg,f,c
  5974  0016BA  D7FB               	goto	u2575
  5975  0016BC  CF66 F064          	movff	3942,??_grabLeftIR+2	;volatile
  5976  0016C0  90D8               	bcf	status,0,c
  5977  0016C2  3364               	rrcf	(??_grabLeftIR+2)& (0+255),f,b
  5978  0016C4  5164               	movf	(??_grabLeftIR+2)& (0+255),w,b
  5979  0016C6  1362               	iorwf	??_grabLeftIR& (0+255),f,b
  5980  0016C8  0E00               	movlw	0
  5981  0016CA  1363               	iorwf	(??_grabLeftIR+1)& (0+255),f,b
  5982  0016CC  5162               	movf	??_grabLeftIR& (0+255),w,b
  5983  0016CE  2765               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  5984  0016D0  5163               	movf	(??_grabLeftIR+1)& (0+255),w,b
  5985  0016D2  2366               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5989  0016D4  0E82               	movlw	130
  5990  0016D6  0100               	movlb	0	; () banked
  5991  0016D8  6F62               	movwf	??_grabLeftIR& (0+255),b
  5992  0016DA  0EDD               	movlw	221
  5993  0016DC                     u3407:
  5994  0016DC  2EE8               	decfsz	wreg,f,c
  5995  0016DE  D7FE               	bra	u3407
  5996  0016E0  2F62               	decfsz	??_grabLeftIR& (0+255),f,b
  5997  0016E2  D7FC               	bra	u3407
  5998  0016E4  D000               	nop2	
  5999  0016E6  0100               	movlb	0	; () banked
  6000  0016E8  2B67               	incf	grabLeftIR@i& (0+255),f,b
  6001  0016EA  D7DB               	goto	l3076
  6002  0016EC                     u2580:
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;IR_Reading.c: 99: }
  6006                           ;IR_Reading.c: 101: return IR_signal>>2;
  6007                           
  6008                           ; BSR set to: 0
  6009  0016EC  C065  F062         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6010  0016F0  C066  F063         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6011  0016F4  90D8               	bcf	status,0,c
  6012  0016F6  3363               	rrcf	(??_grabLeftIR+1)& (0+255),f,b
  6013  0016F8  3362               	rrcf	??_grabLeftIR& (0+255),f,b
  6014  0016FA  90D8               	bcf	status,0,c
  6015  0016FC  3363               	rrcf	(??_grabLeftIR+1)& (0+255),f,b
  6016  0016FE  3362               	rrcf	??_grabLeftIR& (0+255),f,b
  6017  001700  C062  F060         	movff	??_grabLeftIR,?_grabLeftIR
  6018  001704  C063  F061         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6019  001708  0012               	return	
  6020  00170A                     __end_of_grabLeftIR:
  6021                           	opt stack 0
  6022                           tblptru	equ	0xFF8
  6023                           tblptrh	equ	0xFF7
  6024                           tblptrl	equ	0xFF6
  6025                           tablat	equ	0xFF5
  6026                           prodh	equ	0xFF4
  6027                           prodl	equ	0xFF3
  6028                           intcon	equ	0xFF2
  6029                           postinc0	equ	0xFEE
  6030                           wreg	equ	0xFE8
  6031                           indf1	equ	0xFE7
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           plusw2	equ	0xFDB
  6038                           fsr2h	equ	0xFDA
  6039                           fsr2l	equ	0xFD9
  6040                           status	equ	0xFD8
  6041                           
  6042 ;; *************** function _SetLine *****************
  6043 ;; Defined at:
  6044 ;;		line 74 in file "LCD.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  line            1    wreg     unsigned char 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  line            1    6[BANK0 ] unsigned char 
  6049 ;; Return value:  Size  Location     Type
  6050 ;;                  1    wreg      void 
  6051 ;; Registers used:
  6052 ;;		wreg, status,2, status,0, cstack
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6058 ;;      Params:         0       0       0       0
  6059 ;;      Locals:         0       1       0       0
  6060 ;;      Temps:          0       0       0       0
  6061 ;;      Totals:         0       1       0       0
  6062 ;;Total ram usage:        1 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    6
  6065 ;; This function calls:
  6066 ;;		_SendLCD
  6067 ;; This function is called by:
  6068 ;;		_ScanIR
  6069 ;;		_ScanWithRange
  6070 ;;		_main
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text25
  6075  00196A                     __ptext25:
  6076                           	opt stack 0
  6077  00196A                     _SetLine:
  6078                           	opt stack 24
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;incstack = 0
  6082                           ;SetLine@line stored from wreg
  6083  00196A  0100               	movlb	0	; () banked
  6084  00196C  6F66               	movwf	SetLine@line& (0+255),b
  6085                           
  6086                           ;LCD.c: 75: if (line==1) {
  6087  00196E  0100               	movlb	0	; () banked
  6088  001970  0566               	decf	SetLine@line& (0+255),w,b
  6089  001972  A4D8               	btfss	status,2,c
  6090  001974  D006               	goto	l147
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;LCD.c: 76: SendLCD(0x80,0);
  6094  001976  0E00               	movlw	0
  6095  001978  6F64               	movwf	SendLCD@type& (0+255),b
  6096  00197A  0E80               	movlw	128
  6097  00197C  EC7D  F00C         	call	_SendLCD
  6098                           
  6099                           ;LCD.c: 77: } else if (line==2) {
  6100  001980  D00A               	goto	l149
  6101  001982                     l147:
  6102  001982  0E02               	movlw	2
  6103  001984  0100               	movlb	0	; () banked
  6104  001986  1966               	xorwf	SetLine@line& (0+255),w,b
  6105  001988  A4D8               	btfss	status,2,c
  6106  00198A  D005               	goto	l149
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;LCD.c: 78: SendLCD(0xC0,0);
  6110  00198C  0E00               	movlw	0
  6111  00198E  6F64               	movwf	SendLCD@type& (0+255),b
  6112  001990  0EC0               	movlw	192
  6113  001992  EC7D  F00C         	call	_SendLCD
  6114  001996                     l149:
  6115                           
  6116                           ;LCD.c: 79: }
  6117                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6118  001996  0E21               	movlw	33
  6119  001998                     u3417:
  6120  001998  2EE8               	decfsz	wreg,f,c
  6121  00199A  D7FE               	bra	u3417
  6122  00199C  F000               	nop	
  6123  00199E  0012               	return		;funcret
  6124  0019A0                     __end_of_SetLine:
  6125                           	opt stack 0
  6126                           tblptru	equ	0xFF8
  6127                           tblptrh	equ	0xFF7
  6128                           tblptrl	equ	0xFF6
  6129                           tablat	equ	0xFF5
  6130                           prodh	equ	0xFF4
  6131                           prodl	equ	0xFF3
  6132                           intcon	equ	0xFF2
  6133                           postinc0	equ	0xFEE
  6134                           wreg	equ	0xFE8
  6135                           indf1	equ	0xFE7
  6136                           fsr1h	equ	0xFE2
  6137                           fsr1l	equ	0xFE1
  6138                           indf2	equ	0xFDF
  6139                           postinc2	equ	0xFDE
  6140                           postdec2	equ	0xFDD
  6141                           plusw2	equ	0xFDB
  6142                           fsr2h	equ	0xFDA
  6143                           fsr2l	equ	0xFD9
  6144                           status	equ	0xFD8
  6145                           
  6146 ;; *************** function _LCD_String *****************
  6147 ;; Defined at:
  6148 ;;		line 83 in file "LCD.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;  string          2    6[BANK0 ] PTR unsigned char 
  6151 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6152 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6153 ;;		 -> STR_1(12), 
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;		None
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  1    wreg      void 
  6158 ;; Registers used:
  6159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6165 ;;      Params:         0       2       0       0
  6166 ;;      Locals:         0       0       0       0
  6167 ;;      Temps:          0       0       0       0
  6168 ;;      Totals:         0       2       0       0
  6169 ;;Total ram usage:        2 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    6
  6172 ;; This function calls:
  6173 ;;		_SendLCD
  6174 ;; This function is called by:
  6175 ;;		_ScanIR
  6176 ;;		_ScanWithRange
  6177 ;;		_main
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           	psect	text26
  6182  00170A                     __ptext26:
  6183                           	opt stack 0
  6184  00170A                     _LCD_String:
  6185                           	opt stack 23
  6186                           
  6187                           ;LCD.c: 85: while(*string != 0){
  6188                           
  6189                           ;incstack = 0
  6190  00170A  D01C               	goto	l153
  6191  00170C                     
  6192                           ;LCD.c: 88: SendLCD(*string++,1);
  6193  00170C  0E01               	movlw	1
  6194  00170E  0100               	movlb	0	; () banked
  6195  001710  6F64               	movwf	SendLCD@type& (0+255),b
  6196  001712  C066  FFF6         	movff	LCD_String@string,tblptrl
  6197  001716  C067  FFF7         	movff	LCD_String@string+1,tblptrh
  6198  00171A  6AF8               	clrf	tblptru,c
  6199  00171C  0E02               	movlw	(high __ramtop+-1)
  6200  00171E  64F7               	cpfsgt	tblptrh,c
  6201  001720  D003               	bra	u2617
  6202  001722  0008               	tblrd		*
  6203  001724  50F5               	movf	tablat,w,c
  6204  001726  D005               	bra	u2610
  6205  001728                     u2617:
  6206  001728  CFF6 FFE1          	movff	tblptrl,fsr1l
  6207  00172C  CFF7 FFE2          	movff	tblptrh,fsr1h
  6208  001730  50E7               	movf	indf1,w,c
  6209  001732                     u2610:
  6210  001732  EC7D  F00C         	call	_SendLCD
  6211  001736  0100               	movlb	0	; () banked
  6212  001738  4B66               	infsnz	LCD_String@string& (0+255),f,b
  6213  00173A  2B67               	incf	(LCD_String@string+1)& (0+255),f,b
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6217  00173C  0E21               	movlw	33
  6218  00173E                     u3427:
  6219  00173E  2EE8               	decfsz	wreg,f,c
  6220  001740  D7FE               	bra	u3427
  6221  001742  F000               	nop	
  6222  001744                     l153:
  6223  001744  C066  FFF6         	movff	LCD_String@string,tblptrl
  6224  001748  C067  FFF7         	movff	LCD_String@string+1,tblptrh
  6225  00174C  6AF8               	clrf	tblptru,c
  6226  00174E  0E02               	movlw	(high __ramtop+-1)
  6227  001750  64F7               	cpfsgt	tblptrh,c
  6228  001752  D003               	bra	u2627
  6229  001754  0008               	tblrd		*
  6230  001756  50F5               	movf	tablat,w,c
  6231  001758  D005               	bra	u2620
  6232  00175A                     u2627:
  6233  00175A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6234  00175E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6235  001762  50E7               	movf	indf1,w,c
  6236  001764                     u2620:
  6237  001764  0900               	iorlw	0
  6238  001766  B4D8               	btfsc	status,2,c
  6239  001768  0012               	return	
  6240  00176A  D7D0               	goto	l154
  6241  00176C                     __end_of_LCD_String:
  6242                           	opt stack 0
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           prodh	equ	0xFF4
  6248                           prodl	equ	0xFF3
  6249                           intcon	equ	0xFF2
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           indf1	equ	0xFE7
  6253                           fsr1h	equ	0xFE2
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           plusw2	equ	0xFDB
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           
  6263 ;; *************** function _SendLCD *****************
  6264 ;; Defined at:
  6265 ;;		line 27 in file "LCD.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  Byte            1    wreg     unsigned char 
  6268 ;;  type            1    4[BANK0 ] unsigned char 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;  Byte            1    5[BANK0 ] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6280 ;;      Params:         0       1       0       0
  6281 ;;      Locals:         0       1       0       0
  6282 ;;      Temps:          0       0       0       0
  6283 ;;      Totals:         0       2       0       0
  6284 ;;Total ram usage:        2 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    5
  6287 ;; This function calls:
  6288 ;;		_LCDout
  6289 ;; This function is called by:
  6290 ;;		_initLCD
  6291 ;;		_SetLine
  6292 ;;		_LCD_String
  6293 ;;		_ScanIR
  6294 ;;		_ScanWithRange
  6295 ;;		_main
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text27
  6300  0018FA                     __ptext27:
  6301                           	opt stack 0
  6302  0018FA                     _SendLCD:
  6303                           	opt stack 24
  6304                           
  6305                           ;incstack = 0
  6306                           ;SendLCD@Byte stored from wreg
  6307  0018FA  0100               	movlb	0	; () banked
  6308  0018FC  6F65               	movwf	SendLCD@Byte& (0+255),b
  6309                           
  6310                           ;LCD.c: 30: LATAbits.LATA6=type;
  6311  0018FE  0100               	movlb	0	; () banked
  6312  001900  B164               	btfsc	SendLCD@type& (0+255),0,b
  6313  001902  D002               	bra	u2405
  6314  001904  9C89               	bcf	3977,6,c	;volatile
  6315  001906  D001               	bra	u2406
  6316  001908                     u2405:
  6317  001908  8C89               	bsf	3977,6,c	;volatile
  6318  00190A                     u2406:
  6319                           
  6320                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6321  00190A  0100               	movlb	0	; () banked
  6322  00190C  3965               	swapf	SendLCD@Byte& (0+255),w,b
  6323  00190E  0B0F               	andlw	15
  6324  001910  0B0F               	andlw	15
  6325  001912  EC83  F009         	call	_LCDout
  6326                           
  6327                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6328  001916  0E06               	movlw	6
  6329  001918                     u3437:
  6330  001918  2EE8               	decfsz	wreg,f,c
  6331  00191A  D7FE               	bra	u3437
  6332  00191C  D000               	nop2	
  6333                           
  6334                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6335  00191E  0100               	movlb	0	; () banked
  6336  001920  5165               	movf	SendLCD@Byte& (0+255),w,b
  6337  001922  0B0F               	andlw	15
  6338  001924  EC83  F009         	call	_LCDout
  6339                           
  6340                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6341  001928  0E21               	movlw	33
  6342  00192A                     u3447:
  6343  00192A  2EE8               	decfsz	wreg,f,c
  6344  00192C  D7FE               	bra	u3447
  6345  00192E  F000               	nop	
  6346  001930  0012               	return		;funcret
  6347  001932                     __end_of_SendLCD:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           intcon	equ	0xFF2
  6356                           postinc0	equ	0xFEE
  6357                           wreg	equ	0xFE8
  6358                           indf1	equ	0xFE7
  6359                           fsr1h	equ	0xFE2
  6360                           fsr1l	equ	0xFE1
  6361                           indf2	equ	0xFDF
  6362                           postinc2	equ	0xFDE
  6363                           postdec2	equ	0xFDD
  6364                           plusw2	equ	0xFDB
  6365                           fsr2h	equ	0xFDA
  6366                           fsr2l	equ	0xFD9
  6367                           status	equ	0xFD8
  6368                           
  6369 ;; *************** function _LCDout *****************
  6370 ;; Defined at:
  6371 ;;		line 14 in file "LCD.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;  number          1    wreg     unsigned char 
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;  number          1    3[BANK0 ] unsigned char 
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  1    wreg      void 
  6378 ;; Registers used:
  6379 ;;		wreg, status,2, status,0, cstack
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6385 ;;      Params:         0       0       0       0
  6386 ;;      Locals:         0       1       0       0
  6387 ;;      Temps:          0       3       0       0
  6388 ;;      Totals:         0       4       0       0
  6389 ;;Total ram usage:        4 bytes
  6390 ;; Hardware stack levels used:    1
  6391 ;; Hardware stack levels required when called:    4
  6392 ;; This function calls:
  6393 ;;		_E_TOG
  6394 ;; This function is called by:
  6395 ;;		_SendLCD
  6396 ;;		_initLCD
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	text28
  6401  001306                     __ptext28:
  6402                           	opt stack 0
  6403  001306                     _LCDout:
  6404                           	opt stack 24
  6405                           
  6406                           ;incstack = 0
  6407                           ;LCDout@number stored from wreg
  6408  001306  0100               	movlb	0	; () banked
  6409  001308  6F63               	movwf	LCDout@number& (0+255),b
  6410                           
  6411                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6412  00130A  0100               	movlb	0	; () banked
  6413  00130C  5163               	movf	LCDout@number& (0+255),w,b
  6414  00130E  6F60               	movwf	??_LCDout& (0+255),b
  6415  001310  6B61               	clrf	(??_LCDout+1)& (0+255),b
  6416  001312  0E07               	movlw	7
  6417  001314                     u2295:
  6418  001314  90D8               	bcf	status,0,c
  6419  001316  3760               	rlcf	??_LCDout& (0+255),f,b
  6420  001318  3761               	rlcf	(??_LCDout+1)& (0+255),f,b
  6421  00131A  2EE8               	decfsz	wreg,f,c
  6422  00131C  D7FB               	goto	u2295
  6423  00131E  0E07               	movlw	7
  6424  001320  6F62               	movwf	(??_LCDout+2)& (0+255),b
  6425  001322                     u2305:
  6426  001322  3561               	rlcf	(??_LCDout+1)& (0+255),w,b
  6427  001324  3361               	rrcf	(??_LCDout+1)& (0+255),f,b
  6428  001326  3360               	rrcf	??_LCDout& (0+255),f,b
  6429  001328  2F62               	decfsz	(??_LCDout+2)& (0+255),f,b
  6430  00132A  D7FB               	goto	u2305
  6431  00132C  4760               	rlncf	??_LCDout& (0+255),f,b
  6432  00132E  508B               	movf	3979,w,c	;volatile
  6433  001330  1960               	xorwf	??_LCDout& (0+255),w,b
  6434  001332  0BFD               	andlw	-3
  6435  001334  1960               	xorwf	??_LCDout& (0+255),w,b
  6436  001336  6E8B               	movwf	3979,c	;volatile
  6437                           
  6438                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6439  001338  5163               	movf	LCDout@number& (0+255),w,b
  6440  00133A  6F60               	movwf	??_LCDout& (0+255),b
  6441  00133C  6B61               	clrf	(??_LCDout+1)& (0+255),b
  6442  00133E  0E06               	movlw	6
  6443  001340                     u2315:
  6444  001340  90D8               	bcf	status,0,c
  6445  001342  3760               	rlcf	??_LCDout& (0+255),f,b
  6446  001344  3761               	rlcf	(??_LCDout+1)& (0+255),f,b
  6447  001346  2EE8               	decfsz	wreg,f,c
  6448  001348  D7FB               	goto	u2315
  6449  00134A  0E07               	movlw	7
  6450  00134C  6F62               	movwf	(??_LCDout+2)& (0+255),b
  6451  00134E                     u2325:
  6452  00134E  3561               	rlcf	(??_LCDout+1)& (0+255),w,b
  6453  001350  3361               	rrcf	(??_LCDout+1)& (0+255),f,b
  6454  001352  3360               	rrcf	??_LCDout& (0+255),f,b
  6455  001354  2F62               	decfsz	(??_LCDout+2)& (0+255),f,b
  6456  001356  D7FB               	goto	u2325
  6457  001358  4760               	rlncf	??_LCDout& (0+255),f,b
  6458  00135A  4760               	rlncf	??_LCDout& (0+255),f,b
  6459  00135C  508B               	movf	3979,w,c	;volatile
  6460  00135E  1960               	xorwf	??_LCDout& (0+255),w,b
  6461  001360  0BFB               	andlw	-5
  6462  001362  1960               	xorwf	??_LCDout& (0+255),w,b
  6463  001364  6E8B               	movwf	3979,c	;volatile
  6464                           
  6465                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6466  001366  5163               	movf	LCDout@number& (0+255),w,b
  6467  001368  6F60               	movwf	??_LCDout& (0+255),b
  6468  00136A  6B61               	clrf	(??_LCDout+1)& (0+255),b
  6469  00136C  0E05               	movlw	5
  6470  00136E                     u2335:
  6471  00136E  90D8               	bcf	status,0,c
  6472  001370  3760               	rlcf	??_LCDout& (0+255),f,b
  6473  001372  3761               	rlcf	(??_LCDout+1)& (0+255),f,b
  6474  001374  2EE8               	decfsz	wreg,f,c
  6475  001376  D7FB               	goto	u2335
  6476  001378  0E07               	movlw	7
  6477  00137A  6F62               	movwf	(??_LCDout+2)& (0+255),b
  6478  00137C                     u2345:
  6479  00137C  3561               	rlcf	(??_LCDout+1)& (0+255),w,b
  6480  00137E  3361               	rrcf	(??_LCDout+1)& (0+255),f,b
  6481  001380  3360               	rrcf	??_LCDout& (0+255),f,b
  6482  001382  2F62               	decfsz	(??_LCDout+2)& (0+255),f,b
  6483  001384  D7FB               	goto	u2345
  6484  001386  508C               	movf	3980,w,c	;volatile
  6485  001388  1960               	xorwf	??_LCDout& (0+255),w,b
  6486  00138A  0BFE               	andlw	-2
  6487  00138C  1960               	xorwf	??_LCDout& (0+255),w,b
  6488  00138E  6E8C               	movwf	3980,c	;volatile
  6489                           
  6490                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6491  001390  5163               	movf	LCDout@number& (0+255),w,b
  6492  001392  6F60               	movwf	??_LCDout& (0+255),b
  6493  001394  6B61               	clrf	(??_LCDout+1)& (0+255),b
  6494  001396  3B60               	swapf	??_LCDout& (0+255),f,b
  6495  001398  3B61               	swapf	(??_LCDout+1)& (0+255),f,b
  6496  00139A  0EF0               	movlw	240
  6497  00139C  1761               	andwf	(??_LCDout+1)& (0+255),f,b
  6498  00139E  5160               	movf	??_LCDout& (0+255),w,b
  6499  0013A0  0B0F               	andlw	15
  6500  0013A2  1361               	iorwf	(??_LCDout+1)& (0+255),f,b
  6501  0013A4  0EF0               	movlw	240
  6502  0013A6  1760               	andwf	??_LCDout& (0+255),f,b
  6503  0013A8  0E07               	movlw	7
  6504  0013AA  6F62               	movwf	(??_LCDout+2)& (0+255),b
  6505  0013AC                     u2355:
  6506  0013AC  3561               	rlcf	(??_LCDout+1)& (0+255),w,b
  6507  0013AE  3361               	rrcf	(??_LCDout+1)& (0+255),f,b
  6508  0013B0  3360               	rrcf	??_LCDout& (0+255),f,b
  6509  0013B2  2F62               	decfsz	(??_LCDout+2)& (0+255),f,b
  6510  0013B4  D7FB               	goto	u2355
  6511  0013B6  4760               	rlncf	??_LCDout& (0+255),f,b
  6512  0013B8  508C               	movf	3980,w,c	;volatile
  6513  0013BA  1960               	xorwf	??_LCDout& (0+255),w,b
  6514  0013BC  0BFD               	andlw	-3
  6515  0013BE  1960               	xorwf	??_LCDout& (0+255),w,b
  6516  0013C0  6E8C               	movwf	3980,c	;volatile
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;LCD.c: 21: E_TOG();
  6520  0013C2  EC5F  F00D         	call	_E_TOG	;wreg free
  6521                           
  6522                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6523  0013C6  0E03               	movlw	3
  6524  0013C8                     u3457:
  6525  0013C8  2EE8               	decfsz	wreg,f,c
  6526  0013CA  D7FE               	bra	u3457
  6527  0013CC  F000               	nop	
  6528  0013CE  0012               	return		;funcret
  6529  0013D0                     __end_of_LCDout:
  6530                           	opt stack 0
  6531                           tblptru	equ	0xFF8
  6532                           tblptrh	equ	0xFF7
  6533                           tblptrl	equ	0xFF6
  6534                           tablat	equ	0xFF5
  6535                           prodh	equ	0xFF4
  6536                           prodl	equ	0xFF3
  6537                           intcon	equ	0xFF2
  6538                           postinc0	equ	0xFEE
  6539                           wreg	equ	0xFE8
  6540                           indf1	equ	0xFE7
  6541                           fsr1h	equ	0xFE2
  6542                           fsr1l	equ	0xFE1
  6543                           indf2	equ	0xFDF
  6544                           postinc2	equ	0xFDE
  6545                           postdec2	equ	0xFDD
  6546                           plusw2	equ	0xFDB
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function _E_TOG *****************
  6552 ;; Defined at:
  6553 ;;		line 5 in file "LCD.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;		None
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      void 
  6560 ;; Registers used:
  6561 ;;		wreg
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6567 ;;      Params:         0       0       0       0
  6568 ;;      Locals:         0       0       0       0
  6569 ;;      Temps:          0       0       0       0
  6570 ;;      Totals:         0       0       0       0
  6571 ;;Total ram usage:        0 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    3
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_LCDout
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text29
  6582  001ABE                     __ptext29:
  6583                           	opt stack 0
  6584  001ABE                     _E_TOG:
  6585                           	opt stack 24
  6586                           
  6587                           ;LCD.c: 8: LATCbits.LATC0=1;
  6588                           
  6589                           ;incstack = 0
  6590  001ABE  808B               	bsf	3979,0,c	;volatile
  6591                           
  6592                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6593  001AC0  0E03               	movlw	3
  6594  001AC2                     u3467:
  6595  001AC2  2EE8               	decfsz	wreg,f,c
  6596  001AC4  D7FE               	bra	u3467
  6597  001AC6  F000               	nop	
  6598                           
  6599                           ;LCD.c: 10: LATCbits.LATC0=0;
  6600  001AC8  908B               	bcf	3979,0,c	;volatile
  6601  001ACA  0012               	return		;funcret
  6602  001ACC                     __end_of_E_TOG:
  6603                           	opt stack 0
  6604                           tblptru	equ	0xFF8
  6605                           tblptrh	equ	0xFF7
  6606                           tblptrl	equ	0xFF6
  6607                           tablat	equ	0xFF5
  6608                           prodh	equ	0xFF4
  6609                           prodl	equ	0xFF3
  6610                           intcon	equ	0xFF2
  6611                           postinc0	equ	0xFEE
  6612                           wreg	equ	0xFE8
  6613                           indf1	equ	0xFE7
  6614                           fsr1h	equ	0xFE2
  6615                           fsr1l	equ	0xFE1
  6616                           indf2	equ	0xFDF
  6617                           postinc2	equ	0xFDE
  6618                           postdec2	equ	0xFDD
  6619                           plusw2	equ	0xFDB
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function _InterruptHandlerLow *****************
  6625 ;; Defined at:
  6626 ;;		line 18 in file "main.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      void 
  6633 ;; Registers used:
  6634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6640 ;;      Params:         0       0       0       0
  6641 ;;      Locals:         0       0       0       0
  6642 ;;      Temps:         21       0       0       0
  6643 ;;      Totals:        21       0       0       0
  6644 ;;Total ram usage:       21 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    2
  6647 ;; This function calls:
  6648 ;;		Nothing
  6649 ;; This function is called by:
  6650 ;;		Interrupt level 1
  6651 ;; This function uses a non-reentrant model
  6652 ;;
  6653                           
  6654                           	psect	intcodelo
  6655  000018                     __pintcodelo:
  6656                           	opt stack 0
  6657  000018                     _InterruptHandlerLow:
  6658                           	opt stack 23
  6659                           
  6660                           ;incstack = 0
  6661  000018  8036               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6662  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  6663  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  6664  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  6665  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  6666  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  6667  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  6668  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  6669  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  6670  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  6671  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  6672  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  6673  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  6674  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  6675  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  6676  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  6677  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  6678  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  6679  00005E  C036  F028         	movff	btemp,??_InterruptHandlerLow+17
  6680  000062  C037  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  6681  000066  C038  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  6682  00006A  C039  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  6683                           
  6684                           ;main.c: 20: if (PIR1bits.RCIF) {
  6685  00006E  AA9E               	btfss	3998,5,c	;volatile
  6686  000070  D016               	goto	i1l370
  6687                           
  6688                           ;main.c: 21: ReceivedString[i]=RCREG;
  6689  000072  5035               	movf	_i,w,c	;volatile
  6690  000074  0D01               	mullw	1
  6691  000076  0EE9               	movlw	low _ReceivedString
  6692  000078  24F3               	addwf	prodl,w,c
  6693  00007A  6ED9               	movwf	fsr2l,c
  6694  00007C  0E01               	movlw	high _ReceivedString
  6695  00007E  20F4               	addwfc	prodh,w,c
  6696  000080  6EDA               	movwf	fsr2h,c
  6697  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  6698                           
  6699                           ;main.c: 22: RFID_Read=1;
  6700  000086  0E01               	movlw	1
  6701  000088  0101               	movlb	1	; () banked
  6702  00008A  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
  6703                           
  6704                           ; BSR set to: 1
  6705                           ;main.c: 23: if (i==15){
  6706  00008C  0E0F               	movlw	15
  6707  00008E  1835               	xorwf	_i,w,c	;volatile
  6708  000090  A4D8               	btfss	status,2,c
  6709  000092  D003               	goto	i1l371
  6710                           
  6711                           ; BSR set to: 1
  6712                           ;main.c: 24: i=0;
  6713  000094  0E00               	movlw	0
  6714  000096  6E35               	movwf	_i,c	;volatile
  6715                           
  6716                           ;main.c: 25: }else{
  6717  000098  D001               	goto	i1l372
  6718  00009A                     i1l371:
  6719                           
  6720                           ; BSR set to: 1
  6721                           ;main.c: 26: i++;
  6722                           
  6723                           ; BSR set to: 1
  6724  00009A  2A35               	incf	_i,f,c	;volatile
  6725  00009C                     i1l372:
  6726                           
  6727                           ; BSR set to: 1
  6728                           ;main.c: 27: }
  6729                           ;main.c: 28: PIR1bits.RCIF=0;
  6730                           
  6731                           ; BSR set to: 1
  6732  00009C  9A9E               	bcf	3998,5,c	;volatile
  6733  00009E                     i1l370:
  6734                           
  6735                           ; BSR set to: 1
  6736  00009E  C02B  F039         	movff	??_InterruptHandlerLow+20,btemp+3
  6737  0000A2  C02A  F038         	movff	??_InterruptHandlerLow+19,btemp+2
  6738  0000A6  C029  F037         	movff	??_InterruptHandlerLow+18,btemp+1
  6739  0000AA  C028  F036         	movff	??_InterruptHandlerLow+17,btemp
  6740  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6741  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6742  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6743  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6744  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6745  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6746  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6747  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6748  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6749  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6750  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6751  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6752  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6753  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6754  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6755  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6756  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  6757  0000F2  9036               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6758  0000F4  0010               	retfie	
  6759  0000F6                     __end_of_InterruptHandlerLow:
  6760                           	opt stack 0
  6761                           pclatu	equ	0xFFB
  6762                           pclath	equ	0xFFA
  6763                           tblptru	equ	0xFF8
  6764                           tblptrh	equ	0xFF7
  6765                           tblptrl	equ	0xFF6
  6766                           tablat	equ	0xFF5
  6767                           prodh	equ	0xFF4
  6768                           prodl	equ	0xFF3
  6769                           intcon	equ	0xFF2
  6770                           postinc0	equ	0xFEE
  6771                           fsr0h	equ	0xFEA
  6772                           fsr0l	equ	0xFE9
  6773                           wreg	equ	0xFE8
  6774                           indf1	equ	0xFE7
  6775                           fsr1h	equ	0xFE2
  6776                           fsr1l	equ	0xFE1
  6777                           bsr	equ	0xFE0
  6778                           indf2	equ	0xFDF
  6779                           postinc2	equ	0xFDE
  6780                           postdec2	equ	0xFDD
  6781                           plusw2	equ	0xFDB
  6782                           fsr2h	equ	0xFDA
  6783                           fsr2l	equ	0xFD9
  6784                           status	equ	0xFD8
  6785                           
  6786 ;; *************** function _InterruptHandlerHigh *****************
  6787 ;; Defined at:
  6788 ;;		line 34 in file "main.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;		None
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;		None
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      void 
  6795 ;; Registers used:
  6796 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6802 ;;      Params:         0       0       0       0
  6803 ;;      Locals:         0       0       0       0
  6804 ;;      Temps:         18       0       0       0
  6805 ;;      Totals:        18       0       0       0
  6806 ;;Total ram usage:       18 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    1
  6809 ;; This function calls:
  6810 ;;		i2_delay_tenth_s
  6811 ;; This function is called by:
  6812 ;;		Interrupt level 2
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	intcode
  6817  000008                     __pintcode:
  6818                           	opt stack 0
  6819  000008                     _InterruptHandlerHigh:
  6820                           	opt stack 23
  6821                           
  6822                           ;incstack = 0
  6823  000008  8236               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6824  00000A  EFE8  F009         	goto	int_func
  6825                           pclatu	equ	0xFFB
  6826                           pclath	equ	0xFFA
  6827                           tblptru	equ	0xFF8
  6828                           tblptrh	equ	0xFF7
  6829                           tblptrl	equ	0xFF6
  6830                           tablat	equ	0xFF5
  6831                           prodh	equ	0xFF4
  6832                           prodl	equ	0xFF3
  6833                           intcon	equ	0xFF2
  6834                           postinc0	equ	0xFEE
  6835                           fsr0h	equ	0xFEA
  6836                           fsr0l	equ	0xFE9
  6837                           wreg	equ	0xFE8
  6838                           indf1	equ	0xFE7
  6839                           fsr1h	equ	0xFE2
  6840                           fsr1l	equ	0xFE1
  6841                           bsr	equ	0xFE0
  6842                           indf2	equ	0xFDF
  6843                           postinc2	equ	0xFDE
  6844                           postdec2	equ	0xFDD
  6845                           plusw2	equ	0xFDB
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850                           	psect	intcode_body
  6851  0013D0                     __pintcode_body:
  6852                           	opt stack 23
  6853  0013D0                     int_func:
  6854                           	opt stack 23
  6855  0013D0  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6856  0013D4  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6857  0013D8  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6858  0013DC  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6859  0013E0  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6860  0013E4  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6861  0013E8  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6862  0013EC  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6863  0013F0  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6864  0013F4  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6865  0013F8  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6866  0013FC  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6867  001400  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6868  001404  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6869  001408  C036  F013         	movff	btemp,??_InterruptHandlerHigh+14
  6870  00140C  C037  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  6871  001410  C038  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  6872  001414  C039  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  6873                           
  6874                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6875  001418  A2F2               	btfss	intcon,1,c	;volatile
  6876  00141A  D00D               	goto	i2l378
  6877                           
  6878                           ;main.c: 36: if (mode==-1) {
  6879  00141C  2834               	incf	_mode,w,c	;volatile
  6880  00141E  A4D8               	btfss	status,2,c
  6881  001420  D003               	goto	i2l379
  6882                           
  6883                           ;main.c: 38: mode=1;
  6884  001422  0E01               	movlw	1
  6885  001424  6E34               	movwf	_mode,c	;volatile
  6886                           
  6887                           ;main.c: 39: } else if (mode==0) {
  6888  001426  D003               	goto	i2l382
  6889  001428                     i2l379:
  6890  001428  5034               	movf	_mode,w,c	;volatile
  6891  00142A  A4D8               	btfss	status,2,c
  6892                           
  6893                           ;main.c: 43: mode=-1;
  6894                           
  6895                           ;main.c: 41: } else {
  6896  00142C  6834               	setf	_mode,c	;volatile
  6897  00142E                     i2l382:
  6898                           
  6899                           ;main.c: 44: }
  6900                           ;main.c: 46: delay_tenth_s(2);
  6901  00142E  0E02               	movlw	2
  6902  001430  EC99  F00C         	call	i2_delay_tenth_s
  6903                           
  6904                           ;main.c: 47: INTCONbits.INT0IF=0;
  6905  001434  92F2               	bcf	intcon,1,c	;volatile
  6906  001436                     i2l378:
  6907  001436  C016  F039         	movff	??_InterruptHandlerHigh+17,btemp+3
  6908  00143A  C015  F038         	movff	??_InterruptHandlerHigh+16,btemp+2
  6909  00143E  C014  F037         	movff	??_InterruptHandlerHigh+15,btemp+1
  6910  001442  C013  F036         	movff	??_InterruptHandlerHigh+14,btemp
  6911  001446  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6912  00144A  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6913  00144E  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6914  001452  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6915  001456  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6916  00145A  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6917  00145E  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6918  001462  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6919  001466  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6920  00146A  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6921  00146E  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6922  001472  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6923  001476  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6924  00147A  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6925  00147E  9236               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6926  001480  0011               	retfie		f
  6927  001482                     __end_of_InterruptHandlerHigh:
  6928                           	opt stack 0
  6929                           pclatu	equ	0xFFB
  6930                           pclath	equ	0xFFA
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           intcon	equ	0xFF2
  6938                           postinc0	equ	0xFEE
  6939                           fsr0h	equ	0xFEA
  6940                           fsr0l	equ	0xFE9
  6941                           wreg	equ	0xFE8
  6942                           indf1	equ	0xFE7
  6943                           fsr1h	equ	0xFE2
  6944                           fsr1l	equ	0xFE1
  6945                           bsr	equ	0xFE0
  6946                           indf2	equ	0xFDF
  6947                           postinc2	equ	0xFDE
  6948                           postdec2	equ	0xFDD
  6949                           plusw2	equ	0xFDB
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954 ;; *************** function i2_delay_tenth_s *****************
  6955 ;; Defined at:
  6956 ;;		line 32 in file "Movement.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  tenth_second    1    wreg     unsigned char 
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6961 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6962 ;; Return value:  Size  Location     Type
  6963 ;;                  1    wreg      void 
  6964 ;; Registers used:
  6965 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6971 ;;      Params:         0       0       0       0
  6972 ;;      Locals:         3       0       0       0
  6973 ;;      Temps:          1       0       0       0
  6974 ;;      Totals:         4       0       0       0
  6975 ;;Total ram usage:        4 bytes
  6976 ;; Hardware stack levels used:    1
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_InterruptHandlerHigh
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text32
  6985  001932                     __ptext32:
  6986                           	opt stack 0
  6987  001932                     i2_delay_tenth_s:
  6988                           	opt stack 23
  6989                           
  6990                           ;incstack = 0
  6991                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6992  001932  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6993                           
  6994                           ;Movement.c: 33: unsigned int i=0;
  6995  001934  0E00               	movlw	0
  6996  001936  6E04               	movwf	i2delay_tenth_s@i+1,c
  6997  001938  0E00               	movlw	0
  6998  00193A  6E03               	movwf	i2delay_tenth_s@i,c
  6999                           
  7000                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7001  00193C  0E00               	movlw	0
  7002  00193E  6E04               	movwf	i2delay_tenth_s@i+1,c
  7003  001940  0E01               	movlw	1
  7004  001942  6E03               	movwf	i2delay_tenth_s@i,c
  7005  001944  D009               	goto	i2l204
  7006  001946                     
  7007                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7008  001946  0E82               	movlw	130
  7009  001948  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7010  00194A  0EDE               	movlw	222
  7011  00194C                     i2u347_47:
  7012  00194C  2EE8               	decfsz	wreg,f,c
  7013  00194E  D7FE               	bra	i2u347_47
  7014  001950  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7015  001952  D7FC               	bra	i2u347_47
  7016  001954  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7017  001956  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7018  001958                     i2l204:
  7019  001958  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7020  00195A  0D02               	mullw	2
  7021  00195C  5003               	movf	i2delay_tenth_s@i,w,c
  7022  00195E  5CF3               	subwf	prodl,w,c
  7023  001960  5004               	movf	i2delay_tenth_s@i+1,w,c
  7024  001962  58F4               	subwfb	prodh,w,c
  7025  001964  A0D8               	btfss	status,0,c
  7026  001966  0012               	return	
  7027  001968  D7EE               	goto	i2l205
  7028  00196A                     __end_ofi2_delay_tenth_s:
  7029                           	opt stack 0
  7030                           pclatu	equ	0xFFB
  7031                           pclath	equ	0xFFA
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           postinc0	equ	0xFEE
  7040                           fsr0h	equ	0xFEA
  7041                           fsr0l	equ	0xFE9
  7042                           wreg	equ	0xFE8
  7043                           indf1	equ	0xFE7
  7044                           fsr1h	equ	0xFE2
  7045                           fsr1l	equ	0xFE1
  7046                           bsr	equ	0xFE0
  7047                           indf2	equ	0xFDF
  7048                           postinc2	equ	0xFDE
  7049                           postdec2	equ	0xFDD
  7050                           plusw2	equ	0xFDB
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           pclatu	equ	0xFFB
  7055                           pclath	equ	0xFFA
  7056                           tblptru	equ	0xFF8
  7057                           tblptrh	equ	0xFF7
  7058                           tblptrl	equ	0xFF6
  7059                           tablat	equ	0xFF5
  7060                           prodh	equ	0xFF4
  7061                           prodl	equ	0xFF3
  7062                           intcon	equ	0xFF2
  7063                           postinc0	equ	0xFEE
  7064                           fsr0h	equ	0xFEA
  7065                           fsr0l	equ	0xFE9
  7066                           wreg	equ	0xFE8
  7067                           indf1	equ	0xFE7
  7068                           fsr1h	equ	0xFE2
  7069                           fsr1l	equ	0xFE1
  7070                           bsr	equ	0xFE0
  7071                           indf2	equ	0xFDF
  7072                           postinc2	equ	0xFDE
  7073                           postdec2	equ	0xFDD
  7074                           plusw2	equ	0xFDB
  7075                           fsr2h	equ	0xFDA
  7076                           fsr2l	equ	0xFD9
  7077                           status	equ	0xFD8
  7078                           
  7079                           	psect	rparam
  7080  0000                     pclatu	equ	0xFFB
  7081                           pclath	equ	0xFFA
  7082                           tblptru	equ	0xFF8
  7083                           tblptrh	equ	0xFF7
  7084                           tblptrl	equ	0xFF6
  7085                           tablat	equ	0xFF5
  7086                           prodh	equ	0xFF4
  7087                           prodl	equ	0xFF3
  7088                           intcon	equ	0xFF2
  7089                           postinc0	equ	0xFEE
  7090                           fsr0h	equ	0xFEA
  7091                           fsr0l	equ	0xFE9
  7092                           wreg	equ	0xFE8
  7093                           indf1	equ	0xFE7
  7094                           fsr1h	equ	0xFE2
  7095                           fsr1l	equ	0xFE1
  7096                           bsr	equ	0xFE0
  7097                           indf2	equ	0xFDF
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           plusw2	equ	0xFDB
  7101                           fsr2h	equ	0xFDA
  7102                           fsr2l	equ	0xFD9
  7103                           status	equ	0xFD8
  7104                           
  7105                           	psect	temp
  7106  000036                     btemp:
  7107                           	opt stack 0
  7108  000036                     	ds	1
  7109  0000                     int$flags	set	btemp
  7110  0000                     wtemp6	set	btemp+1
  7111                           pclatu	equ	0xFFB
  7112                           pclath	equ	0xFFA
  7113                           tblptru	equ	0xFF8
  7114                           tblptrh	equ	0xFF7
  7115                           tblptrl	equ	0xFF6
  7116                           tablat	equ	0xFF5
  7117                           prodh	equ	0xFF4
  7118                           prodl	equ	0xFF3
  7119                           intcon	equ	0xFF2
  7120                           postinc0	equ	0xFEE
  7121                           fsr0h	equ	0xFEA
  7122                           fsr0l	equ	0xFE9
  7123                           wreg	equ	0xFE8
  7124                           indf1	equ	0xFE7
  7125                           fsr1h	equ	0xFE2
  7126                           fsr1l	equ	0xFE1
  7127                           bsr	equ	0xFE0
  7128                           indf2	equ	0xFDF
  7129                           postinc2	equ	0xFDE
  7130                           postdec2	equ	0xFDD
  7131                           plusw2	equ	0xFDB
  7132                           fsr2h	equ	0xFDA
  7133                           fsr2l	equ	0xFD9
  7134                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      53
    BANK0           160    158     158
    BANK1           256    229     250
    BANK2           256    100     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK0[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK0[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   78532
                                            109 BANK0     49    49      0
                                              0 BANK1    229   229      0
                                              0 BANK2    100   100      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              6 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4941
                                             29 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     304
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     582
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       75    61     14   26091
                                             34 BANK0     75    61     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5211
                                             29 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5211
                                             29 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    4246
                                             23 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      71
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   13866
                                             33 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4274
                                             23 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1984
                                             14 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3328
                                             12 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     532
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              6 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2442
                                              6 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                              4 BANK0      2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                              0 BANK0      4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     64      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E5      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9E      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      35       1       56.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     231       3        0.0%
DATA                 0      0     231      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 18 23:12:21 2018

                        ?_grabRightIR 0060                                     _i 0035  
                  fullSpeedBack@power 0081                                    l34 0FBE  
                                  l35 0FE8                                    l51 14D4  
                                  l52 1484                                    l53 149C  
                                  l54 14B4                                    l65 15F2  
                                  l66 159C                                    l67 15B8  
                                  l68 15D2                          ___awdiv@sign 006B  
                                  bsr 000FE0                   ___wmul@multiplicand 0062  
                         main@Message 01C8                           ?_LCD_String 0066  
                                 l110 16AA                                   l105 1630  
                                 l115 19EA                                   l212 1220  
                                 l204 1834                                   l220 09CA  
                                 l205 181C                                   l221 0A92  
                                 l230 0BD4                                   l222 0AB0  
                                 l224 0BA8                                   l400 050A  
                                 l153 1744                                   l225 0AFE  
                                 l401 0590                                   l154 170C  
                                 l226 0AE6                                   l147 1982  
                                 l219 0BDA                                   l411 06E2  
                                 l403 05D6                                   l420 08BC  
                                 l412 0686                                   l149 1996  
                                 l229 0BC2                                   l421 0816  
                                 l405 05F8                                   l414 06C4  
                                 l440 0C70                                   l424 0884  
                                 l408 061C                                   l441 0C8A  
                                 l425 08B6                                   l409 0734  
                                 l418 078C                                   l451 0D30  
                                 l443 0CA0                                   l275 10A6  
                                 l419 07CA                                   l444 0C98  
                                 l277 113C                                   l462 0DCC  
                                 l463 0DF0                                   l391 03D8  
                                 l464 0DF8                                   l456 0D58  
                                 l465 0E38                                   l449 0CD0  
                                 l474 0E7A                                   l466 0E18  
                                 l458 0D82                                   l650 1558  
                                 l475 0ED6                                   l651 1550  
                                 l395 03DE                                   l476 0E80  
                                 l396 0486                                   l902 17F0  
                                 l654 1578                                   l903 17FA  
                                 l655 1582                                   l647 152A  
                                 l399 04BC                                   l656 1590  
                                 l648 153A                                   l809 1A88  
                                 l892 17AC                                   l893 17B6  
                                 l888 178C                                   l889 1784  
                                 l898 17D8                                   l899 17D0  
                         grabLeftIR@i 0067                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l3060 1628                                  l3162 0D86  
                                l3076 16A2                                  l3474 109E  
                                l3650 067E                                  l3716 08BE  
                                l3494 113C                                  l3662 06BC  
                                l3638 0604                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u2220 155C  
                                u3100 065C                                  u3102 065E  
                                _LATB 000F8A                                  u2305 1322  
                                u2315 1340                                  u3140 06B8  
                                u2325 134E                                  u2405 1908  
                                u2406 190A                                  u2335 136E  
                                u3207 0430                                  u2440 1790  
                                u2264 0F80                                  u3160 06DC  
                                u2345 137C                                  u2265 0F7C  
                                u3217 044A                                  u2610 1732  
                                u2274 0FDA                                  u3090 0648  
                                u2355 13AC                                  u2275 0FD6  
                                u3307 12EA                                  u3227 124C  
                                u2620 1764                                  u3092 064A  
                                u2285 1034                                  u3317 12FE  
                                u3237 1262                                  u2550 1672  
                                u2470 17DC                                  u2710 0DB2  
                                u3190 0850                                  u2295 1314  
                                u3407 16DC                                  u3327 0A00  
                                u3247 1274                                  u2800 0E5E  
                                u2617 1728                                  u3417 1998  
                                u2545 1638                                  u3337 0A1A  
                                u3257 1282                                  u2627 175A  
                                u3427 173E                                  u3347 15EC  
                                u3267 1290                                  u2580 16EC  
                                u2820 0EDE                                  u3437 1918  
                                u3357 1824                                  u3277 12A4  
                                u2830 0EF8                                  u3447 192A  
                                u2575 16B2                                  u3367 1190  
                                u3287 12B8                                  u3457 13C8  
                                u3377 11AA                                  u3297 12D2  
                                u3467 1AC2                                  u3387 14CE  
                                u3397 1662                                  u2790 0E40  
                                u2855 19E6                                  u2856 19E8  
                                u2875 19FA                                  u2980 10F6  
                                u2876 19FC                                  _main 0350  
                                _mode 0034                         main@ScanAngle 00F7  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0036                                  _stop 1482  
                 fullSpeedAhead@power 007B                                  prodh 000FF4  
                                prodl 000FF3                                  start 00F6  
                        ___param_bank 000000                       i2_delay_tenth_s 1932  
                     __end_of_SendLCD 1932                       __end_of_SetLine 19A0  
                  ScanWithRange@F3553 002C                           ScanIR@F3540 0030  
                               ?_main 0001                       __end_of___awdiv 159A  
                               ?_stop 0077                       ___awdiv@divisor 0068  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0067  
                     __end_of___lwdiv 17C0                       __end_of___lwmod 1804  
                               i1l370 009E                                 i1l371 009A  
                               i2l204 1958                                 i1l372 009C  
                               i2l205 1946                                 i2l382 142E  
                               i2l378 1436                                 i2l379 1428  
                     ___awdiv@counter 006A                                 _RCREG 000FAE  
                               _E_TOG 1ABE                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 1306                    ScanWithRange@loops 0086  
                  ScanWithRange@power 00C3                       __end_of_dpowers 030B  
                     __end_of_isdigit 1A90                                 main@i 00FD  
                               pclath 000FFA                                 tablat 000FF5  
                               plusw2 000FDB                                 status 000FD8  
                               wtemp6 0037                   __size_of_LCD_String 0062  
                     __end_of_sprintf 0F06                __size_of_ScanWithRange 0384  
                      __CFG_MCLRE$OFF 000000                       __initialization 1A26  
                        __end_of_main 08E0                          __end_of_stop 1514  
                      delay_tenth_s@i 0062                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 0066          ScanIR@DirectionMoveThreshold 00AE  
                __end_of_enableSensor 19FE                   VerifySignal@hexByte 0068  
                              ??_main 00CD                                ??_stop 007B  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 006E  
              __size_of_fullSpeedBack 003C                      ___awdiv@dividend 0066  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 1846  
                              _LCDout 1306                           SendLCD@Byte 0065  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 196A                           SendLCD@type 0064  
                           ??_SendLCD 0065                                _ScanIR 1140  
                           ??_SetLine 0066                                ___wmul 19FE  
                           ??___awdiv 006A                      __end_of_initRFID 1AAC  
                           ??___lwdiv 0064                             ??___lwmod 006B  
                              _initIR 1A4C                  __size_of_grabRightIR 007A  
                              clear_0 1A2C                                clear_1 1A38  
                    ___awdiv@quotient 006C                                main@mL 01D3  
                              main@mR 01DC                        ??_initMotorPWM 0060  
                           ??_initLCD 0066                         _ScanWithRange 08E0  
                           ??_isdigit 0060          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0077                                stop@mR 0079  
                           ??_sprintf 0074       ScanWithRange@TimeAboveThreshold 00C6  
                    __end_of_turnLeft 18FA                       fullSpeedBack@mL 007D  
                     fullSpeedBack@mR 007F                            __accesstop 0060  
             __end_of__initialization 1A3E                         ___rparam_used 000001  
                         SetLine@line 0066                         __end_of_E_TOG 1ACC  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1846  
                        ??_LCD_String 0068                        ?_ScanWithRange 0082  
                VerifySignal@checksum 006A                               ??_E_TOG 0060  
       __size_of_InterruptHandlerHigh 147A           __end_of_InterruptHandlerLow 00F6  
          delay_tenth_s@tenth_seconds 0061                          sprintf@width 007E  
                          __pbssBANK1 01E5                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 176C                               ?_ScanIR 0081  
                      ?_fullSpeedBack 007D                 __size_of_enableSensor 002C  
                             ?___wmul 0060                   grabLeftIR@IR_signal 0065  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 007C  
                          _grabLeftIR 1690                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013E                       __size_of_LCDout 00CA  
                        _enableSensor 19D2                    __size_of_turnRight 003C  
                __end_of_initMotorPWM 19D2                ScanWithRange@RFID_Read 008E  
                             _SendLCD 18FA                               __Hparam 0000  
                             _SetLine 196A                               __Lparam 0000  
                     __size_of_ScanIR 00F8                               ___awdiv 1514  
                     __size_of___wmul 0028                               ___lwdiv 176C  
                             ___lwmod 17C0                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1A26  
                     ??_ScanWithRange 0090                               __ramtop 0300  
                           ?_turnLeft 007D                               __ptext0 0350  
                             __ptext1 1AAC                               __ptext2 1A90  
                             __ptext3 19A0                               __ptext4 1238  
                             __ptext5 1A4C                               __ptext6 1846  
                             __ptext7 19D2                               __ptext8 1044  
                             __ptext9 08E0                             _T0CONbits 000FD5  
                             _initLCD 1238                     __end_of_initTimer 1ABE  
                             _dpowers 0301                               _isdigit 1A6E  
                        LCDout@number 0063                         ?_VerifySignal 0060  
                             main@buf 00CF                               _sprintf 0C64  
                      __pintcode_body 13D0                  end_of_initialization 1A3E  
                      ScanWithRange@i 00BF                        ScanWithRange@n 00BD  
                  setMotorPWM@PWMduty 0075                            ??_initRFID 0060  
                       __Lmediumconst 0000                               int_func 13D0  
                  ScanIR@SensorResult 00B0                       ??_fullSpeedBack 0082  
                           _RFID_Read 01F9                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 0082  
                   __end_of_turnRight 18BE                           ?_grabLeftIR 0060  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0062  
                    fullSpeedAhead@mL 0077                      fullSpeedAhead@mR 0079  
              ScanWithRange@RightFlag 00CB                        __end_of_LCDout 13D0  
                           _TXSTAbits 000FAC                             ScanIR@buf 0086  
                       ??_grabRightIR 0062                        __end_of_ScanIR 1238  
                      _fullSpeedAhead 159A                        _ReceivedString 01E9  
                      __end_of___wmul 1A26                     ScanWithRange@Move 008A  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1A6E  
              __size_of_delay_tenth_s 0042                   start_initialization 1A26  
                  VerifySignal@Signal 0060                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0060          __end_of_InterruptHandlerHigh 1482  
                            ??_ScanIR 0085                __end_of_fullSpeedAhead 1616  
                 __size_of_grabLeftIR 007A                              ??___wmul 0064  
                            ??_initIR 0060                   __end_of_grabRightIR 1690  
                        _initMotorPWM 19A0                           __pbssCOMRAM 002C  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1693 0061  
        __size_of_InterruptHandlerLow 00DE                         _delay_tenth_s 1804  
                         sprintf@flag 007D                           sprintf@prec 007A  
                   __size_of_initRFID 001C                              ?_SendLCD 0064  
                            ?_SetLine 0001                      ___lwdiv@dividend 0060  
                     ?_fullSpeedAhead 0077                             __pintcode 0008  
                __end_of_VerifySignal 1140                              ?___awdiv 0066  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0060  
                            ?___lwmod 0067                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00F8  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003C  
                       ??_setMotorPWM 0070                             _initTimer 1AAC  
                    ___lwdiv@quotient 0065                              ?_sprintf 006C  
                      ?_delay_tenth_s 0001                        ___wmul@product 0064  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 007D                           turnRight@mR 007F  
                            _PIR1bits 000F9E                              i2u347_47 194C  
                            _RCONbits 000FD0                             main@F3557 01E5  
                         _grabRightIR 1616                 ScanWithRange@LeftFlag 00C4  
                grabRightIR@IR_signal 0065                     ___wmul@multiplier 0060  
               __end_of_ScanWithRange 0C64                          setMotorPWM@m 006E  
               ScanWithRange@MoveTime 0088                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 008C                              ScanIR@mL 0081  
                            ScanIR@mR 0083                          ??_grabLeftIR 0062  
                          ?_initTimer 0001                             _turnRight 1882  
                    ScanWithRange@buf 0095                   __end_of_setMotorPWM 1044  
                            __Hrparam 0000                      __size_of_SendLCD 0038  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1882  
                    __size_of_SetLine 0036                    __end_of_grabLeftIR 170A  
                    __size_of___awdiv 0086                      __size_of___lwdiv 0054  
                    __size_of___lwmod 0044                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 007B                      __size_of_initLCD 00CE  
                    __size_of_isdigit 0022                       ___lwdiv@divisor 0062  
                     ___lwdiv@counter 0064                            ?_turnRight 007D  
                            __ptext10 1882                              __ptext11 18BE  
                            __ptext20 19FE                              __ptext12 159A  
                            __ptext21 17C0                              __ptext13 1804  
                            __ptext22 176C                              __ptext14 1140  
                            __ptext23 1616                              __ptext15 1482  
                            __ptext32 1932                              __ptext24 1690  
                            __ptext16 0F06                              __ptext25 196A  
                            __ptext17 1514                              __ptext26 170A  
                            __ptext18 0C64                              __ptext27 18FA  
                            __ptext19 1A6E                              __ptext28 1306  
                            __ptext29 1ABE                       ??_delay_tenth_s 0060  
                    __size_of_sprintf 02A2                              _initRFID 1A90  
           ScanWithRange@SensorResult 00C7                        turnRight@power 0081  
                       __size_of_main 0590                    main@DirectionFound 00FC  
                       turnLeft@power 0081                         __size_of_stop 0092  
                          turnLeft@mL 007D                            turnLeft@mR 007F  
               __size_of_VerifySignal 00FC                              int$flags 0036  
                            main@Move 01D2                   _InterruptHandlerLow 0018  
                          _LCD_String 170A                              _turnLeft 18BE  
                     ScanWithRange@mL 0082                       ScanWithRange@mR 0084  
                  enableSensor@sensor 0061                    enableSensor@status 0060  
                       VerifySignal@i 006B                            _INTCONbits 000FF2  
                         ??_initTimer 0060                              isdigit@c 0062  
                         _setMotorPWM 0F06                          _VerifySignal 1044  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0078                             sprintf@sp 006C  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0060  
                    ___lwmod@dividend 0067                      ??_fullSpeedAhead 007C  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00C1  
              ??_InterruptHandlerHigh 0005                              sprintf@c 0080  
                            sprintf@f 006E                       ___lwmod@divisor 0069  
                     ___lwmod@counter 006B                           ??_turnRight 0082  
               ??_InterruptHandlerLow 0017                        ??_enableSensor 0061  
                    i2delay_tenth_s@i 0003  
