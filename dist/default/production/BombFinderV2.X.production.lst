

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 20 14:21:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.45
    54                           ; Generated 16/11/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F4331 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	smallconst
    89  000300                     __psmallconst:
    90                           	opt stack 0
    91  000300  00                 	db	0
    92  000301                     _dpowers:
    93                           	opt stack 0
    94  000301  0001               	dw	1
    95  000303  000A               	dw	10
    96  000305  0064               	dw	100
    97  000307  03E8               	dw	1000
    98  000309  2710               	dw	10000
    99  00030B                     __end_of_dpowers:
   100                           	opt stack 0
   101  0000                     _OSCCONbits	set	4051
   102  0000                     _OSCCON	set	4051
   103  0000                     _PIE1bits	set	3997
   104  0000                     _IPR1bits	set	3999
   105  0000                     _RCONbits	set	4048
   106  0000                     _RCREG	set	4014
   107  0000                     _PIR1bits	set	3998
   108  0000                     _RCSTAbits	set	4011
   109  0000                     _TXSTAbits	set	4012
   110  0000                     _BAUDCONbits	set	4010
   111  0000                     _SPBRGH	set	4016
   112  0000                     _SPBRG	set	4015
   113  0000                     _TRISC	set	3988
   114  0000                     _TMR0H	set	4055
   115  0000                     _TMR0L	set	4054
   116  0000                     _INTCONbits	set	4082
   117  0000                     _T0CONbits	set	4053
   118  0000                     _TRISDbits	set	3989
   119  0000                     _TRISCbits	set	3988
   120  0000                     _LATDbits	set	3980
   121  0000                     _LATCbits	set	3979
   122  0000                     _LATEbits	set	3981
   123  0000                     _CAP2BUFL	set	3942
   124  0000                     _CAP2BUFH	set	3943
   125  0000                     _CAP1BUFL	set	3944
   126  0000                     _CAP1BUFH	set	3945
   127  0000                     _T5CON	set	4023
   128  0000                     _TRISEbits	set	3990
   129  0000                     _CAP2CON	set	3938
   130  0000                     _CAP1CON	set	3939
   131  0000                     _ANSEL0bits	set	4024
   132  0000                     _TRISAbits	set	3986
   133  0000                     _LATAbits	set	3977
   134  0000                     _LATB	set	3978
   135  0000                     _LATBbits	set	3978
   136  0000                     _TRISBbits	set	3987
   137  0000                     _PTPERH	set	3962
   138  0000                     _PTPERL	set	3963
   139  0000                     _PWMCON1	set	3950
   140  0000                     _PWMCON0	set	3951
   141  0000                     _PTCON1	set	3966
   142  0000                     _PTCON0	set	3967
   143  0000                     _PDC1H	set	3958
   144  0000                     _PDC1L	set	3959
   145  0000                     _PDC0H	set	3960
   146  0000                     _PDC0L	set	3961
   147  00030B                     STR_6:
   148  00030B  20                 	db	32
   149  00030C  20                 	db	32
   150  00030D  20                 	db	32
   151  00030E  20                 	db	32
   152  00030F  20                 	db	32
   153  000310  20                 	db	32
   154  000311  25                 	db	37
   155  000312  30                 	db	48	;'0'
   156  000313  34                 	db	52	;'4'
   157  000314  64                 	db	100	;'d'
   158  000315  2C                 	db	44
   159  000316  20                 	db	32
   160  000317  25                 	db	37
   161  000318  30                 	db	48	;'0'
   162  000319  34                 	db	52	;'4'
   163  00031A  64                 	db	100	;'d'
   164  00031B  00                 	db	0
   165  00031C                     STR_5:
   166  00031C  20                 	db	32
   167  00031D  20                 	db	32
   168  00031E  20                 	db	32
   169  00031F  20                 	db	32
   170  000320  20                 	db	32
   171  000321  20                 	db	32
   172  000322  49                 	db	73	;'I'
   173  000323  6E                 	db	110	;'n'
   174  000324  65                 	db	101	;'e'
   175  000325  72                 	db	114	;'r'
   176  000326  74                 	db	116	;'t'
   177  000327  20                 	db	32
   178  000328  4D                 	db	77	;'M'
   179  000329  6F                 	db	111	;'o'
   180  00032A  64                 	db	100	;'d'
   181  00032B  65                 	db	101	;'e'
   182  00032C  00                 	db	0
   183  00032D                     STR_1:
   184  00032D  20                 	db	32
   185  00032E  20                 	db	32
   186  00032F  20                 	db	32
   187  000330  20                 	db	32
   188  000331  20                 	db	32
   189  000332  53                 	db	83	;'S'
   190  000333  63                 	db	99	;'c'
   191  000334  61                 	db	97	;'a'
   192  000335  6E                 	db	110	;'n'
   193  000336  49                 	db	73	;'I'
   194  000337  52                 	db	82	;'R'
   195  000338  00                 	db	0
   196  000339                     STR_8:
   197  000339  47                 	db	71	;'G'
   198  00033A  6F                 	db	111	;'o'
   199  00033B  69                 	db	105	;'i'
   200  00033C  6E                 	db	110	;'n'
   201  00033D  67                 	db	103	;'g'
   202  00033E  20                 	db	32
   203  00033F  48                 	db	72	;'H'
   204  000340  6F                 	db	111	;'o'
   205  000341  6D                 	db	109	;'m'
   206  000342  65                 	db	101	;'e'
   207  000343  00                 	db	0
   208  000344                     STR_7:
   209  000344  53                 	db	83	;'S'
   210  000345  65                 	db	101	;'e'
   211  000346  61                 	db	97	;'a'
   212  000347  72                 	db	114	;'r'
   213  000348  63                 	db	99	;'c'
   214  000349  68                 	db	104	;'h'
   215  00034A  69                 	db	105	;'i'
   216  00034B  6E                 	db	110	;'n'
   217  00034C  67                 	db	103	;'g'
   218  00034D  00                 	db	0
   219  0000                     
   220                           ; #config settings
   221  00034E  00                 	db	0	; dummy byte at the end
   222  0000                     
   223                           	psect	cinit
   224  001C2C                     __pcinit:
   225                           	opt stack 0
   226  001C2C                     start_initialization:
   227                           	opt stack 0
   228  001C2C                     __initialization:
   229                           	opt stack 0
   230                           
   231                           ; Clear objects allocated to BANK2 (150 bytes)
   232  001C2C  EE02  F000         	lfsr	0,__pbssBANK2
   233  001C30  0E96               	movlw	150
   234  001C32                     clear_0:
   235  001C32  6AEE               	clrf	postinc0,c
   236  001C34  06E8               	decf	wreg,f,c
   237  001C36  E1FD               	bnz	clear_0
   238                           
   239                           ; Clear objects allocated to BANK1 (23 bytes)
   240  001C38  EE01  F0E3         	lfsr	0,__pbssBANK1
   241  001C3C  0E17               	movlw	23
   242  001C3E                     clear_1:
   243  001C3E  6AEE               	clrf	postinc0,c
   244  001C40  06E8               	decf	wreg,f,c
   245  001C42  E1FD               	bnz	clear_1
   246                           
   247                           ; Clear objects allocated to BANK0 (8 bytes)
   248  001C44  EE00  F0CB         	lfsr	0,__pbssBANK0
   249  001C48  0E08               	movlw	8
   250  001C4A                     clear_2:
   251  001C4A  6AEE               	clrf	postinc0,c
   252  001C4C  06E8               	decf	wreg,f,c
   253  001C4E  E1FD               	bnz	clear_2
   254                           
   255                           ; Clear objects allocated to COMRAM (2 bytes)
   256  001C50  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   257  001C52  6A32               	clrf	__pbssCOMRAM& (0+255),c
   258  001C54                     end_of_initialization:
   259                           	opt stack 0
   260  001C54                     __end_of__initialization:
   261                           	opt stack 0
   262  001C54  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   263  001C56  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   264  001C58  0E00               	movlw	low (__Lmediumconst shr (0+16))
   265  001C5A  6EF8               	movwf	tblptru,c
   266  001C5C  0100               	movlb	0
   267  001C5E  EFA8  F001         	goto	_main	;jump to C main() function
   268                           tblptru	equ	0xFF8
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           
   272                           	psect	bssCOMRAM
   273  000032                     __pbssCOMRAM:
   274                           	opt stack 0
   275  000032                     _mode:
   276                           	opt stack 0
   277  000032                     	ds	1
   278  000033                     _i:
   279                           	opt stack 0
   280  000033                     	ds	1
   281                           tblptru	equ	0xFF8
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	bssBANK0
   286  0000CB                     __pbssBANK0:
   287                           	opt stack 0
   288  0000CB                     ScanWithRange@F3555:
   289                           	opt stack 0
   290  0000CB                     	ds	4
   291  0000CF                     ScanIR@F3541:
   292                           	opt stack 0
   293  0000CF                     	ds	4
   294                           tblptru	equ	0xFF8
   295                           postinc0	equ	0xFEE
   296                           wreg	equ	0xFE8
   297                           
   298                           	psect	bssBANK1
   299  0001E3                     __pbssBANK1:
   300                           	opt stack 0
   301  0001E3                     main@F3557:
   302                           	opt stack 0
   303  0001E3                     	ds	4
   304  0001E7                     _ReceivedString:
   305                           	opt stack 0
   306  0001E7                     	ds	16
   307  0001F7                     _millis:
   308                           	opt stack 0
   309  0001F7                     	ds	2
   310  0001F9                     _RFID_Read:
   311                           	opt stack 0
   312  0001F9                     	ds	1
   313                           tblptru	equ	0xFF8
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           
   317                           	psect	bssBANK2
   318  000200                     __pbssBANK2:
   319                           	opt stack 0
   320  000200                     main@F3552:
   321                           	opt stack 0
   322  000200                     	ds	100
   323  000264                     main@F3554:
   324                           	opt stack 0
   325  000264                     	ds	50
   326                           tblptru	equ	0xFF8
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           
   330                           	psect	cstackBANK1
   331  000100                     __pcstackBANK1:
   332                           	opt stack 0
   333  000100                     main@buf:
   334                           	opt stack 0
   335                           
   336                           ; 40 bytes @ 0x0
   337  000100                     	ds	40
   338  000128                     main@MoveType:
   339                           	opt stack 0
   340                           
   341                           ; 50 bytes @ 0x28
   342  000128                     	ds	50
   343  00015A                     main@MoveTime:
   344                           	opt stack 0
   345                           
   346                           ; 100 bytes @ 0x5A
   347  00015A                     	ds	100
   348  0001BE                     main@Message:
   349                           	opt stack 0
   350                           
   351                           ; 10 bytes @ 0xBE
   352  0001BE                     	ds	10
   353  0001C8                     main@ScanAngle:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0xC8
   357  0001C8                     	ds	1
   358  0001C9                     main@SensorResult:
   359                           	opt stack 0
   360                           
   361                           ; 4 bytes @ 0xC9
   362  0001C9                     	ds	4
   363  0001CD                     main@MotorPower:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0xCD
   367  0001CD                     	ds	1
   368  0001CE                     main@DirectionFound:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0xCE
   372  0001CE                     	ds	1
   373  0001CF                     main@i:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0xCF
   377  0001CF                     	ds	1
   378  0001D0                     main@Move:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0xD0
   382  0001D0                     	ds	1
   383  0001D1                     main@mL:
   384                           	opt stack 0
   385                           
   386                           ; 9 bytes @ 0xD1
   387  0001D1                     	ds	9
   388  0001DA                     main@mR:
   389                           	opt stack 0
   390                           
   391                           ; 9 bytes @ 0xDA
   392  0001DA                     	ds	9
   393                           tblptru	equ	0xFF8
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           
   397                           	psect	cstackBANK0
   398  000060                     __pcstackBANK0:
   399                           	opt stack 0
   400  000060                     ??_initLCD:
   401  000060                     ?___awdiv:
   402                           	opt stack 0
   403  000060                     SetLine@line:
   404                           	opt stack 0
   405  000060                     ___lwdiv@counter:
   406                           	opt stack 0
   407  000060                     grabRightIR@IR_signal:
   408                           	opt stack 0
   409  000060                     grabLeftIR@IR_signal:
   410                           	opt stack 0
   411  000060                     LCD_String@string:
   412                           	opt stack 0
   413  000060                     ___awdiv@dividend:
   414                           	opt stack 0
   415  000060                     memset@p:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x0
   419  000060                     	ds	1
   420  000061                     ___lwdiv@quotient:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x1
   424  000061                     	ds	1
   425  000062                     grabRightIR@i:
   426                           	opt stack 0
   427  000062                     grabLeftIR@i:
   428                           	opt stack 0
   429  000062                     VerifySignal@ReceivedString:
   430                           	opt stack 0
   431  000062                     ___awdiv@divisor:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2
   435  000062                     	ds	1
   436  000063                     ?___lwmod:
   437                           	opt stack 0
   438  000063                     ___lwmod@dividend:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x3
   442  000063                     	ds	1
   443  000064                     ??_VerifySignal:
   444  000064                     ___awdiv@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x4
   448  000064                     	ds	1
   449  000065                     ___awdiv@sign:
   450                           	opt stack 0
   451  000065                     ___lwmod@divisor:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x5
   455  000065                     	ds	1
   456  000066                     ___awdiv@quotient:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x6
   460  000066                     	ds	1
   461  000067                     ?_sprintf:
   462                           	opt stack 0
   463  000067                     sprintf@sp:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x7
   467  000067                     	ds	1
   468  000068                     setMotorPWM@m:
   469                           	opt stack 0
   470  000068                     VerifySignal@translation:
   471                           	opt stack 0
   472                           
   473                           ; 12 bytes @ 0x8
   474  000068                     	ds	1
   475  000069                     sprintf@f:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x9
   479  000069                     	ds	1
   480  00006A                     ??_setMotorPWM:
   481                           
   482                           ; 1 bytes @ 0xA
   483  00006A                     	ds	5
   484  00006F                     ??_sprintf:
   485  00006F                     setMotorPWM@PWMduty:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0xF
   489  00006F                     	ds	2
   490  000071                     stop@mL:
   491                           	opt stack 0
   492  000071                     fullSpeed@mL:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x11
   496  000071                     	ds	2
   497  000073                     stop@mR:
   498                           	opt stack 0
   499  000073                     fullSpeed@mR:
   500                           	opt stack 0
   501  000073                     sprintf@ap:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x13
   505  000073                     	ds	1
   506  000074                     VerifySignal@xorOutput:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x14
   510  000074                     	ds	1
   511  000075                     fullSpeed@power:
   512                           	opt stack 0
   513  000075                     VerifySignal@ASCIICheckSum:
   514                           	opt stack 0
   515  000075                     sprintf@prec:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x15
   519  000075                     	ds	1
   520  000076                     VerifySignal@i:
   521                           	opt stack 0
   522  000076                     sprintf@val:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0x16
   526  000076                     	ds	1
   527  000077                     turnLeft@mL:
   528                           	opt stack 0
   529  000077                     turnRight@mL:
   530                           	opt stack 0
   531  000077                     fullSpeedBack@mL:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x17
   535  000077                     	ds	1
   536  000078                     sprintf@flag:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x18
   540  000078                     	ds	1
   541  000079                     turnLeft@mR:
   542                           	opt stack 0
   543  000079                     turnRight@mR:
   544                           	opt stack 0
   545  000079                     fullSpeedBack@mR:
   546                           	opt stack 0
   547  000079                     sprintf@width:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x19
   551  000079                     	ds	2
   552  00007B                     turnLeft@power:
   553                           	opt stack 0
   554  00007B                     turnRight@power:
   555                           	opt stack 0
   556  00007B                     fullSpeedBack@power:
   557                           	opt stack 0
   558  00007B                     sprintf@c:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x1B
   562  00007B                     	ds	1
   563  00007C                     ScanIR@mL:
   564                           	opt stack 0
   565  00007C                     ScanWithRange@mL:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x1C
   569  00007C                     	ds	2
   570  00007E                     ScanIR@mR:
   571                           	opt stack 0
   572  00007E                     ScanWithRange@mR:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x1E
   576  00007E                     	ds	2
   577  000080                     ??_ScanIR:
   578  000080                     ScanWithRange@loops:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x20
   582  000080                     	ds	1
   583  000081                     ScanIR@buf:
   584                           	opt stack 0
   585                           
   586                           ; 40 bytes @ 0x21
   587  000081                     	ds	1
   588  000082                     ScanWithRange@MoveTime:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x22
   592  000082                     	ds	2
   593  000084                     ScanWithRange@Move:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x24
   597  000084                     	ds	2
   598  000086                     ScanWithRange@MoveType:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x26
   602  000086                     	ds	2
   603  000088                     ScanWithRange@RFID_Read:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x28
   607  000088                     	ds	2
   608  00008A                     ScanWithRange@millis:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x2A
   612  00008A                     	ds	2
   613  00008C                     ??_ScanWithRange:
   614                           
   615                           ; 1 bytes @ 0x2C
   616  00008C                     	ds	4
   617  000090                     ScanWithRange@buf:
   618                           	opt stack 0
   619                           
   620                           ; 40 bytes @ 0x30
   621  000090                     	ds	25
   622  0000A9                     ScanIR@DirectionMoveThreshold:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x49
   626  0000A9                     	ds	2
   627  0000AB                     ScanIR@SensorResult:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0x4B
   631  0000AB                     	ds	13
   632  0000B8                     ScanWithRange@i:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x58
   636  0000B8                     	ds	2
   637  0000BA                     ScanWithRange@DirectionFoundThreshold:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x5A
   641  0000BA                     	ds	2
   642  0000BC                     ScanWithRange@MotorPower:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x5C
   646  0000BC                     	ds	1
   647  0000BD                     ScanWithRange@MiniLeftFlick:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x5D
   651  0000BD                     	ds	1
   652  0000BE                     ScanWithRange@LeftFlag:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x5E
   656  0000BE                     	ds	2
   657  0000C0                     ScanWithRange@TimeAboveThreshold:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x60
   661  0000C0                     	ds	2
   662  0000C2                     ScanWithRange@SensorResult:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x62
   666  0000C2                     	ds	4
   667  0000C6                     ScanWithRange@LeftFlick:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x66
   671  0000C6                     	ds	1
   672  0000C7                     ScanWithRange@RightFlag:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x67
   676  0000C7                     	ds	2
   677  0000C9                     ??_main:
   678                           
   679                           ; 1 bytes @ 0x69
   680  0000C9                     	ds	2
   681                           tblptru	equ	0xFF8
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           
   685                           	psect	cstackCOMRAM
   686  000001                     __pcstackCOMRAM:
   687                           	opt stack 0
   688  000001                     ??i2_delay_tenth_s:
   689                           
   690                           ; 1 bytes @ 0x0
   691  000001                     	ds	1
   692  000002                     i2delay_tenth_s@tenth_seconds:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x1
   696  000002                     	ds	1
   697  000003                     i2delay_tenth_s@i:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x2
   701  000003                     	ds	2
   702  000005                     ??_InterruptHandlerHigh:
   703                           
   704                           ; 1 bytes @ 0x4
   705  000005                     	ds	18
   706  000017                     ??_InterruptHandlerLow:
   707                           
   708                           ; 1 bytes @ 0x16
   709  000017                     	ds	21
   710  00002C                     ??_isdigit:
   711  00002C                     ??_LCDout:
   712  00002C                     ??_delay_tenth_s:
   713  00002C                     ?_grabRightIR:
   714                           	opt stack 0
   715  00002C                     ?_grabLeftIR:
   716                           	opt stack 0
   717  00002C                     ?___wmul:
   718                           	opt stack 0
   719  00002C                     ?___lwdiv:
   720                           	opt stack 0
   721  00002C                     enableSensor@status:
   722                           	opt stack 0
   723  00002C                     ___wmul@multiplier:
   724                           	opt stack 0
   725  00002C                     ___lwdiv@dividend:
   726                           	opt stack 0
   727  00002C                     memset@p1:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x2B
   731  00002C                     	ds	1
   732  00002D                     enableSensor@sensor:
   733                           	opt stack 0
   734  00002D                     delay_tenth_s@tenth_seconds:
   735                           	opt stack 0
   736  00002D                     _isdigit$1765:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x2C
   740  00002D                     	ds	1
   741  00002E                     ??_grabRightIR:
   742  00002E                     ??_grabLeftIR:
   743  00002E                     isdigit@c:
   744                           	opt stack 0
   745  00002E                     delay_tenth_s@i:
   746                           	opt stack 0
   747  00002E                     ___wmul@multiplicand:
   748                           	opt stack 0
   749  00002E                     ___lwdiv@divisor:
   750                           	opt stack 0
   751  00002E                     memset@c:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x2D
   755  00002E                     	ds	1
   756  00002F                     LCDout@number:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x2E
   760  00002F                     	ds	1
   761  000030                     SendLCD@type:
   762                           	opt stack 0
   763  000030                     ___lwmod@counter:
   764                           	opt stack 0
   765  000030                     ___wmul@product:
   766                           	opt stack 0
   767  000030                     memset@n:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x2F
   771  000030                     	ds	1
   772  000031                     SendLCD@Byte:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x30
   776  000031                     	ds	1
   777  000032                     tblptru	equ	0xFF8
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           
   781                           ; 1 bytes @ 0x31
   782 ;;
   783 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   784 ;;
   785 ;; *************** function _main *****************
   786 ;; Defined at:
   787 ;;		line 58 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  MoveTime      100   90[BANK1 ] int [50]
   792 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   793 ;;  buf            40    0[BANK1 ] unsigned char [40]
   794 ;;  Message        10  190[BANK1 ] unsigned char [10]
   795 ;;  mR              9  218[BANK1 ] struct DC_motor
   796 ;;  mL              9  209[BANK1 ] struct DC_motor
   797 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   798 ;;  Move            1  208[BANK1 ] char 
   799 ;;  i               1  207[BANK1 ] unsigned char 
   800 ;;  DirectionFou    1  206[BANK1 ] char 
   801 ;;  MotorPower      1  205[BANK1 ] const unsigned char 
   802 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   812 ;;      Params:         0       0       0       0
   813 ;;      Locals:         0       0     227       0
   814 ;;      Temps:          0       2       0       0
   815 ;;      Totals:         0       2     227       0
   816 ;;Total ram usage:      229 bytes
   817 ;; Hardware stack levels required when called:    8
   818 ;; This function calls:
   819 ;;		_LCD_String
   820 ;;		_ScanIR
   821 ;;		_ScanWithRange
   822 ;;		_SendLCD
   823 ;;		_SetLine
   824 ;;		_VerifySignal
   825 ;;		_delay_tenth_s
   826 ;;		_enableSensor
   827 ;;		_fullSpeed
   828 ;;		_fullSpeedBack
   829 ;;		_grabLeftIR
   830 ;;		_grabRightIR
   831 ;;		_initIR
   832 ;;		_initLCD
   833 ;;		_initMotorPWM
   834 ;;		_initRFID
   835 ;;		_initTimer
   836 ;;		_sprintf
   837 ;;		_stop
   838 ;;		_turnLeft
   839 ;;		_turnRight
   840 ;; This function is called by:
   841 ;;		Startup code after reset
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text0
   846  000350                     __ptext0:
   847                           	opt stack 0
   848  000350                     _main:
   849                           	opt stack 23
   850                           
   851                           ;main.c: 61: unsigned char Message[10];
   852                           ;main.c: 62: unsigned char i=0;
   853                           
   854                           ;incstack = 0
   855  000350  0E00               	movlw	0
   856  000352  0101               	movlb	1	; () banked
   857  000354  6FCF               	movwf	main@i& (0+255),b
   858                           
   859                           ;main.c: 63: signed char DirectionFound=0;
   860  000356  0E00               	movlw	0
   861  000358  6FCE               	movwf	main@DirectionFound& (0+255),b
   862                           
   863                           ; BSR set to: 1
   864                           ;main.c: 64: signed int MoveTime[50] = { 0 };
   865  00035A  EE22  F000         	lfsr	2,main@F3552
   866  00035E  EE11  F05A         	lfsr	1,main@MoveTime
   867  000362  0E63               	movlw	99
   868  000364                     u3221:
   869  000364  CFDB FFE3          	movff	plusw2,plusw1
   870  000368  06E8               	decf	wreg,f,c
   871  00036A  E2FC               	bc	u3221
   872                           
   873                           ; BSR set to: 1
   874                           ;main.c: 68: unsigned char MoveType[50] = { 0 };
   875  00036C  EE22  F064         	lfsr	2,main@F3554
   876  000370  EE11  F028         	lfsr	1,main@MoveType
   877  000374  0E31               	movlw	49
   878  000376                     u3231:
   879  000376  CFDB FFE3          	movff	plusw2,plusw1
   880  00037A  06E8               	decf	wreg,f,c
   881  00037C  E2FC               	bc	u3231
   882                           
   883                           ;main.c: 71: signed char Move=0;
   884  00037E  0E00               	movlw	0
   885  000380  6FD0               	movwf	main@Move& (0+255),b
   886                           
   887                           ; BSR set to: 1
   888                           ;main.c: 72: unsigned int SensorResult[2]={0,0};
   889  000382  C1E3  F1C9         	movff	main@F3557,main@SensorResult
   890  000386  C1E4  F1CA         	movff	main@F3557+1,main@SensorResult+1
   891  00038A  C1E5  F1CB         	movff	main@F3557+2,main@SensorResult+2
   892  00038E  C1E6  F1CC         	movff	main@F3557+3,main@SensorResult+3
   893                           
   894                           ;main.c: 73: char buf[40];
   895                           ;main.c: 75: unsigned char ScanAngle=60;
   896  000392  0E3C               	movlw	60
   897  000394  6FC8               	movwf	main@ScanAngle& (0+255),b
   898                           
   899                           ;main.c: 82: const unsigned char MotorPower=40;
   900  000396  0E28               	movlw	40
   901  000398  6FCD               	movwf	main@MotorPower& (0+255),b
   902                           
   903                           ; BSR set to: 1
   904                           ;main.c: 86: INTCONbits.GIEH=1;
   905  00039A  8EF2               	bsf	intcon,7,c	;volatile
   906                           
   907                           ; BSR set to: 1
   908                           ;main.c: 87: INTCONbits.GIEL=1;
   909  00039C  8CF2               	bsf	intcon,6,c	;volatile
   910                           
   911                           ; BSR set to: 1
   912                           ;main.c: 88: INTCONbits.PEIE=1;
   913  00039E  8CF2               	bsf	intcon,6,c	;volatile
   914                           
   915                           ; BSR set to: 1
   916                           ;main.c: 89: RCONbits.IPEN=1;
   917  0003A0  8ED0               	bsf	4048,7,c	;volatile
   918                           
   919                           ; BSR set to: 1
   920                           ;main.c: 92: IPR1bits.RCIP=0;
   921  0003A2  9A9F               	bcf	3999,5,c	;volatile
   922                           
   923                           ; BSR set to: 1
   924                           ;main.c: 93: PIE1bits.RCIE=1;
   925  0003A4  8A9D               	bsf	3997,5,c	;volatile
   926                           
   927                           ; BSR set to: 1
   928                           ;main.c: 96: TRISCbits.RC3=1;
   929  0003A6  8694               	bsf	3988,3,c	;volatile
   930                           
   931                           ; BSR set to: 1
   932                           ;main.c: 97: INTCONbits.INT0IE=1;
   933  0003A8  88F2               	bsf	intcon,4,c	;volatile
   934                           
   935                           ; BSR set to: 1
   936                           ;main.c: 100: PIR1bits.RC1IF=0;
   937  0003AA  9A9E               	bcf	3998,5,c	;volatile
   938                           
   939                           ; BSR set to: 1
   940                           ;main.c: 101: INTCONbits.INT0IF=0;
   941  0003AC  92F2               	bcf	intcon,1,c	;volatile
   942                           
   943                           ;main.c: 104: struct DC_motor mL, mR;
   944                           ;main.c: 105: mL.power=0;
   945  0003AE  0E00               	movlw	0
   946  0003B0  6FD1               	movwf	main@mL& (0+255),b
   947                           
   948                           ;main.c: 106: mL.direction=1;
   949  0003B2  0E01               	movlw	1
   950  0003B4  6FD2               	movwf	(main@mL+1)& (0+255),b
   951                           
   952                           ; BSR set to: 1
   953                           ;main.c: 107: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   954  0003B6  0E79               	movlw	121
   955  0003B8  6FD3               	movwf	(main@mL+2)& (0+255),b
   956  0003BA  0E0F               	movlw	15
   957  0003BC  6FD4               	movwf	(main@mL+3)& (0+255),b
   958                           
   959                           ; BSR set to: 1
   960                           ;main.c: 108: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   961  0003BE  0E78               	movlw	120
   962  0003C0  6FD5               	movwf	(main@mL+4)& (0+255),b
   963  0003C2  0E0F               	movlw	15
   964  0003C4  6FD6               	movwf	(main@mL+5)& (0+255),b
   965                           
   966                           ;main.c: 109: mL.dir_pin=0;
   967  0003C6  0E00               	movlw	0
   968  0003C8  6FD7               	movwf	(main@mL+6)& (0+255),b
   969                           
   970                           ;main.c: 110: mL.PWMperiod=199;
   971  0003CA  0E00               	movlw	0
   972  0003CC  6FD9               	movwf	(main@mL+8)& (0+255),b
   973  0003CE  0EC7               	movlw	199
   974  0003D0  6FD8               	movwf	(main@mL+7)& (0+255),b
   975                           
   976                           ;main.c: 112: mR.power=0;
   977  0003D2  0E00               	movlw	0
   978  0003D4  6FDA               	movwf	main@mR& (0+255),b
   979                           
   980                           ;main.c: 113: mR.direction=1;
   981  0003D6  0E01               	movlw	1
   982  0003D8  6FDB               	movwf	(main@mR+1)& (0+255),b
   983                           
   984                           ; BSR set to: 1
   985                           ;main.c: 114: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   986  0003DA  0E77               	movlw	119
   987  0003DC  6FDC               	movwf	(main@mR+2)& (0+255),b
   988  0003DE  0E0F               	movlw	15
   989  0003E0  6FDD               	movwf	(main@mR+3)& (0+255),b
   990                           
   991                           ; BSR set to: 1
   992                           ;main.c: 115: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   993  0003E2  0E76               	movlw	118
   994  0003E4  6FDE               	movwf	(main@mR+4)& (0+255),b
   995  0003E6  0E0F               	movlw	15
   996  0003E8  6FDF               	movwf	(main@mR+5)& (0+255),b
   997                           
   998                           ;main.c: 116: mR.dir_pin=2;
   999  0003EA  0E02               	movlw	2
  1000  0003EC  6FE0               	movwf	(main@mR+6)& (0+255),b
  1001                           
  1002                           ;main.c: 117: mR.PWMperiod=199;
  1003  0003EE  0E00               	movlw	0
  1004  0003F0  6FE2               	movwf	(main@mR+8)& (0+255),b
  1005  0003F2  0EC7               	movlw	199
  1006  0003F4  6FE1               	movwf	(main@mR+7)& (0+255),b
  1007                           
  1008                           ;main.c: 119: OSCCON = 0b1110010;
  1009  0003F6  0E72               	movlw	114
  1010  0003F8  6ED3               	movwf	4051,c	;volatile
  1011  0003FA                     
  1012                           ; BSR set to: 1
  1013  0003FA  B4D3               	btfsc	4051,2,c	;volatile
  1014  0003FC  D2F0               	goto	l3870
  1015  0003FE  D7FD               	goto	l398
  1016  000400                     
  1017                           ;main.c: 131: stop(&mL, &mR);
  1018  000400  0ED1               	movlw	low main@mL
  1019  000402  0100               	movlb	0	; () banked
  1020  000404  6F71               	movwf	stop@mL& (0+255),b
  1021  000406  0E01               	movlw	high main@mL
  1022  000408  6F72               	movwf	(stop@mL+1)& (0+255),b
  1023  00040A  0EDA               	movlw	low main@mR
  1024  00040C  6F73               	movwf	stop@mR& (0+255),b
  1025  00040E  0E01               	movlw	high main@mR
  1026  000410  6F74               	movwf	(stop@mR+1)& (0+255),b
  1027  000412  ECAB  F00B         	call	_stop	;wreg free
  1028                           
  1029                           ;main.c: 134: RFID_Read=0;
  1030  000416  0E00               	movlw	0
  1031  000418  0101               	movlb	1	; () banked
  1032  00041A  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
  1033                           
  1034                           ; BSR set to: 1
  1035                           ;main.c: 135: Move=0;
  1036  00041C  0E00               	movlw	0
  1037  00041E  6FD0               	movwf	main@Move& (0+255),b
  1038                           
  1039                           ; BSR set to: 1
  1040                           ;main.c: 138: SensorResult[0]=grabLeftIR();
  1041  000420  ECB0  F00C         	call	_grabLeftIR	;wreg free
  1042  000424  C02C  F1C9         	movff	?_grabLeftIR,main@SensorResult
  1043  000428  C02D  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1044                           
  1045                           ;main.c: 139: SensorResult[1]=grabRightIR();
  1046  00042C  EC75  F00C         	call	_grabRightIR	;wreg free
  1047  000430  C02C  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1048  000434  C02D  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1049                           
  1050                           ;main.c: 143: CAP1BUFH=0;
  1051  000438  0E00               	movlw	0
  1052  00043A  6E69               	movwf	3945,c	;volatile
  1053                           
  1054                           ;main.c: 144: CAP1BUFL=0;
  1055  00043C  0E00               	movlw	0
  1056  00043E  6E68               	movwf	3944,c	;volatile
  1057                           
  1058                           ;main.c: 145: CAP2BUFH=0;
  1059  000440  0E00               	movlw	0
  1060  000442  6E67               	movwf	3943,c	;volatile
  1061                           
  1062                           ;main.c: 146: CAP2BUFL=0;
  1063  000444  0E00               	movlw	0
  1064  000446  6E66               	movwf	3942,c	;volatile
  1065                           
  1066                           ;main.c: 149: SendLCD(0b00000001,0);
  1067  000448  0E00               	movlw	0
  1068  00044A  6E30               	movwf	SendLCD@type,c
  1069  00044C  0E01               	movlw	1
  1070  00044E  EC4C  F00E         	call	_SendLCD
  1071                           
  1072                           ;main.c: 150: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1073  000452  0E21               	movlw	33
  1074  000454                     u3497:
  1075  000454  2EE8               	decfsz	wreg,f,c
  1076  000456  D7FE               	bra	u3497
  1077  000458  F000               	nop	
  1078                           
  1079                           ;main.c: 151: SendLCD(0b00000010,0);
  1080  00045A  0E00               	movlw	0
  1081  00045C  6E30               	movwf	SendLCD@type,c
  1082  00045E  0E02               	movlw	2
  1083  000460  EC4C  F00E         	call	_SendLCD
  1084                           
  1085                           ;main.c: 152: _delay((unsigned long)((2)*(8000000/4000.0)));
  1086  000464  0E06               	movlw	6
  1087  000466  0100               	movlb	0	; () banked
  1088  000468  6FC9               	movwf	??_main& (0+255),b
  1089  00046A  0E30               	movlw	48
  1090  00046C                     u3507:
  1091  00046C  2EE8               	decfsz	wreg,f,c
  1092  00046E  D7FE               	bra	u3507
  1093  000470  2FC9               	decfsz	??_main& (0+255),f,b
  1094  000472  D7FC               	bra	u3507
  1095  000474  F000               	nop	
  1096                           
  1097                           ;main.c: 153: SetLine(1);
  1098  000476  0E01               	movlw	1
  1099  000478  EC31  F00E         	call	_SetLine
  1100                           
  1101                           ;main.c: 154: if (Message[0]==0) {
  1102  00047C  0101               	movlb	1	; () banked
  1103  00047E  51BE               	movf	main@Message& (0+255),w,b
  1104  000480  A4D8               	btfss	status,2,c
  1105  000482  D008               	goto	l403
  1106                           
  1107                           ; BSR set to: 1
  1108                           ;main.c: 155: LCD_String("      Inert Mode");
  1109  000484  0E1C               	movlw	low STR_5
  1110  000486  0100               	movlb	0	; () banked
  1111  000488  6F60               	movwf	LCD_String@string& (0+255),b
  1112  00048A  0E03               	movlw	high STR_5
  1113  00048C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1114  00048E  ECEB  F00C         	call	_LCD_String	;wreg free
  1115                           
  1116                           ;main.c: 156: } else {
  1117  000492  D007               	goto	l404
  1118  000494                     l403:
  1119                           
  1120                           ;main.c: 157: LCD_String(Message);
  1121  000494  0EBE               	movlw	low main@Message
  1122  000496  0100               	movlb	0	; () banked
  1123  000498  6F60               	movwf	LCD_String@string& (0+255),b
  1124  00049A  0E01               	movlw	high main@Message
  1125  00049C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1126  00049E  ECEB  F00C         	call	_LCD_String	;wreg free
  1127  0004A2                     l404:
  1128                           
  1129                           ;main.c: 158: }
  1130                           ;main.c: 161: SetLine(2);
  1131  0004A2  0E02               	movlw	2
  1132  0004A4  EC31  F00E         	call	_SetLine
  1133                           
  1134                           ;main.c: 162: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1135  0004A8  0E00               	movlw	low main@buf
  1136  0004AA  0100               	movlb	0	; () banked
  1137  0004AC  6F67               	movwf	sprintf@sp& (0+255),b
  1138  0004AE  0E01               	movlw	high main@buf
  1139  0004B0  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  1140  0004B2  0E0B               	movlw	low STR_6
  1141  0004B4  6F69               	movwf	sprintf@f& (0+255),b
  1142  0004B6  0E03               	movlw	high STR_6
  1143  0004B8  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  1144  0004BA  C1C9  F06B         	movff	main@SensorResult,?_sprintf+4
  1145  0004BE  C1CA  F06C         	movff	main@SensorResult+1,?_sprintf+5
  1146  0004C2  C1CB  F06D         	movff	main@SensorResult+2,?_sprintf+6
  1147  0004C6  C1CC  F06E         	movff	main@SensorResult+3,?_sprintf+7
  1148  0004CA  EC7F  F007         	call	_sprintf	;wreg free
  1149                           
  1150                           ;main.c: 164: break;
  1151  0004CE  D287               	goto	l3870
  1152  0004D0                     
  1153                           ;main.c: 168: initMotorPWM();
  1154  0004D0  ECC1  F00D         	call	_initMotorPWM	;wreg free
  1155                           
  1156                           ;main.c: 169: initTimer();
  1157  0004D4  ECCF  F00E         	call	_initTimer	;wreg free
  1158                           
  1159                           ;main.c: 170: initRFID();
  1160  0004D8  ECC1  F00E         	call	_initRFID	;wreg free
  1161                           
  1162                           ;main.c: 171: initLCD();
  1163  0004DC  ECEA  F00A         	call	_initLCD	;wreg free
  1164                           
  1165                           ;main.c: 172: initIR();
  1166  0004E0  ECA1  F00E         	call	_initIR	;wreg free
  1167                           
  1168                           ;main.c: 174: enableSensor(0, 1);
  1169  0004E4  0E01               	movlw	1
  1170  0004E6  6E2C               	movwf	enableSensor@status,c
  1171  0004E8  0E00               	movlw	0
  1172  0004EA  EC7B  F00E         	call	_enableSensor
  1173                           
  1174                           ;main.c: 175: enableSensor(1, 1);
  1175  0004EE  0E01               	movlw	1
  1176  0004F0  6E2C               	movwf	enableSensor@status,c
  1177  0004F2  0E01               	movlw	1
  1178  0004F4  EC7B  F00E         	call	_enableSensor
  1179                           
  1180                           ;main.c: 178: fullSpeed(&mL, &mR, 100);
  1181  0004F8  0ED1               	movlw	low main@mL
  1182  0004FA  0100               	movlb	0	; () banked
  1183  0004FC  6F71               	movwf	fullSpeed@mL& (0+255),b
  1184  0004FE  0E01               	movlw	high main@mL
  1185  000500  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1186  000502  0EDA               	movlw	low main@mR
  1187  000504  6F73               	movwf	fullSpeed@mR& (0+255),b
  1188  000506  0E01               	movlw	high main@mR
  1189  000508  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1190  00050A  0E64               	movlw	100
  1191  00050C  6F75               	movwf	fullSpeed@power& (0+255),b
  1192  00050E  EC37  F00C         	call	_fullSpeed	;wreg free
  1193                           
  1194                           ;main.c: 179: delay_tenth_s(1);
  1195  000512  0E01               	movlw	1
  1196  000514  ECDE  F00D         	call	_delay_tenth_s
  1197  000518  D261               	goto	l3868
  1198  00051A                     
  1199                           ;main.c: 187: SetLine(1);
  1200  00051A  0E01               	movlw	1
  1201  00051C  EC31  F00E         	call	_SetLine
  1202                           
  1203                           ;main.c: 188: LCD_String("Searching");
  1204  000520  0E44               	movlw	low STR_7
  1205  000522  0100               	movlb	0	; () banked
  1206  000524  6F60               	movwf	LCD_String@string& (0+255),b
  1207  000526  0E03               	movlw	high STR_7
  1208  000528  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1209  00052A  ECEB  F00C         	call	_LCD_String	;wreg free
  1210                           
  1211                           ;main.c: 195: if (DirectionFound==-1) {
  1212  00052E  0101               	movlb	1	; () banked
  1213  000530  29CE               	incf	main@DirectionFound& (0+255),w,b
  1214  000532  A4D8               	btfss	status,2,c
  1215  000534  D034               	goto	l408
  1216                           
  1217                           ; BSR set to: 1
  1218                           ;main.c: 200: MoveType[Move]=0;
  1219  000536  51D0               	movf	main@Move& (0+255),w,b
  1220  000538  0D01               	mullw	1
  1221  00053A  0E28               	movlw	low main@MoveType
  1222  00053C  24F3               	addwf	prodl,w,c
  1223  00053E  6ED9               	movwf	fsr2l,c
  1224  000540  0E01               	movlw	high main@MoveType
  1225  000542  20F4               	addwfc	prodh,w,c
  1226  000544  6EDA               	movwf	fsr2h,c
  1227  000546  0E00               	movlw	0
  1228  000548  6EDF               	movwf	indf2,c
  1229                           
  1230                           ;main.c: 201: MoveTime[Move]=6;
  1231  00054A  51D0               	movf	main@Move& (0+255),w,b
  1232  00054C  0D02               	mullw	2
  1233  00054E  0E5A               	movlw	low main@MoveTime
  1234  000550  24F3               	addwf	prodl,w,c
  1235  000552  6ED9               	movwf	fsr2l,c
  1236  000554  0E01               	movlw	high main@MoveTime
  1237  000556  20F4               	addwfc	prodh,w,c
  1238  000558  6EDA               	movwf	fsr2h,c
  1239  00055A  0E06               	movlw	6
  1240  00055C  6EDE               	movwf	postinc2,c
  1241  00055E  0E00               	movlw	0
  1242  000560  6EDD               	movwf	postdec2,c
  1243                           
  1244                           ; BSR set to: 1
  1245                           ;main.c: 202: Move++;
  1246  000562  2BD0               	incf	main@Move& (0+255),f,b
  1247                           
  1248                           ; BSR set to: 1
  1249                           ;main.c: 203: fullSpeed(&mL, &mR, 100);
  1250  000564  0ED1               	movlw	low main@mL
  1251  000566  0100               	movlb	0	; () banked
  1252  000568  6F71               	movwf	fullSpeed@mL& (0+255),b
  1253  00056A  0E01               	movlw	high main@mL
  1254  00056C  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1255  00056E  0EDA               	movlw	low main@mR
  1256  000570  6F73               	movwf	fullSpeed@mR& (0+255),b
  1257  000572  0E01               	movlw	high main@mR
  1258  000574  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1259  000576  0E64               	movlw	100
  1260  000578  6F75               	movwf	fullSpeed@power& (0+255),b
  1261  00057A  EC37  F00C         	call	_fullSpeed	;wreg free
  1262                           
  1263                           ;main.c: 204: delay_tenth_s(6);
  1264  00057E  0E06               	movlw	6
  1265  000580  ECDE  F00D         	call	_delay_tenth_s
  1266                           
  1267                           ;main.c: 205: stop(&mL,&mR);
  1268  000584  0ED1               	movlw	low main@mL
  1269  000586  0100               	movlb	0	; () banked
  1270  000588  6F71               	movwf	stop@mL& (0+255),b
  1271  00058A  0E01               	movlw	high main@mL
  1272  00058C  6F72               	movwf	(stop@mL+1)& (0+255),b
  1273  00058E  0EDA               	movlw	low main@mR
  1274  000590  6F73               	movwf	stop@mR& (0+255),b
  1275  000592  0E01               	movlw	high main@mR
  1276  000594  6F74               	movwf	(stop@mR+1)& (0+255),b
  1277  000596  ECAB  F00B         	call	_stop	;wreg free
  1278                           
  1279                           ;main.c: 206: DirectionFound=0;
  1280  00059A  0E00               	movlw	0
  1281  00059C  D034               	goto	L2
  1282  00059E                     l408:
  1283                           
  1284                           ; BSR set to: 1
  1285                           
  1286                           ; BSR set to: 1
  1287  00059E  51CE               	movf	main@DirectionFound& (0+255),w,b
  1288  0005A0  A4D8               	btfss	status,2,c
  1289  0005A2  D023               	goto	l410
  1290                           
  1291                           ; BSR set to: 1
  1292                           ;main.c: 209: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1293                           ;main.c: 210: &MoveTime, &Move, &MoveType, &RFID_Read, &millis);
  1294  0005A4  0ED1               	movlw	low main@mL
  1295  0005A6  0100               	movlb	0	; () banked
  1296  0005A8  6F7C               	movwf	ScanWithRange@mL& (0+255),b
  1297  0005AA  0E01               	movlw	high main@mL
  1298  0005AC  6F7D               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1299  0005AE  0EDA               	movlw	low main@mR
  1300  0005B0  6F7E               	movwf	ScanWithRange@mR& (0+255),b
  1301  0005B2  0E01               	movlw	high main@mR
  1302  0005B4  6F7F               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1303  0005B6  C1C8  F080         	movff	main@ScanAngle,ScanWithRange@loops
  1304  0005BA  6B81               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1305  0005BC  0E5A               	movlw	low main@MoveTime
  1306  0005BE  6F82               	movwf	ScanWithRange@MoveTime& (0+255),b
  1307  0005C0  0E01               	movlw	high main@MoveTime
  1308  0005C2  6F83               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1309  0005C4  0ED0               	movlw	low main@Move
  1310  0005C6  6F84               	movwf	ScanWithRange@Move& (0+255),b
  1311  0005C8  0E01               	movlw	high main@Move
  1312  0005CA  6F85               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1313  0005CC  0E28               	movlw	low main@MoveType
  1314  0005CE  6F86               	movwf	ScanWithRange@MoveType& (0+255),b
  1315  0005D0  0E01               	movlw	high main@MoveType
  1316  0005D2  6F87               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1317  0005D4  0EF9               	movlw	low _RFID_Read
  1318  0005D6  6F88               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1319  0005D8  0E01               	movlw	high _RFID_Read
  1320  0005DA  6F89               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1321  0005DC  0EF7               	movlw	low _millis
  1322  0005DE  6F8A               	movwf	ScanWithRange@millis& (0+255),b
  1323  0005E0  0E01               	movlw	high _millis
  1324  0005E2  6F8B               	movwf	(ScanWithRange@millis+1)& (0+255),b
  1325  0005E4  EC00  F005         	call	_ScanWithRange	;wreg free
  1326  0005E8  D00E               	goto	L2
  1327  0005EA                     l410:
  1328                           
  1329                           ; BSR set to: 1
  1330                           
  1331                           ; BSR set to: 1
  1332  0005EA  05CE               	decf	main@DirectionFound& (0+255),w,b
  1333  0005EC  A4D8               	btfss	status,2,c
  1334  0005EE  D00E               	goto	l412
  1335                           
  1336                           ; BSR set to: 1
  1337                           ;main.c: 213: DirectionFound=ScanIR(&mL, &mR);
  1338  0005F0  0ED1               	movlw	low main@mL
  1339  0005F2  0100               	movlb	0	; () banked
  1340  0005F4  6F7C               	movwf	ScanIR@mL& (0+255),b
  1341  0005F6  0E01               	movlw	high main@mL
  1342  0005F8  6F7D               	movwf	(ScanIR@mL+1)& (0+255),b
  1343  0005FA  0EDA               	movlw	low main@mR
  1344  0005FC  6F7E               	movwf	ScanIR@mR& (0+255),b
  1345  0005FE  0E01               	movlw	high main@mR
  1346  000600  6F7F               	movwf	(ScanIR@mR+1)& (0+255),b
  1347  000602  EC0D  F00A         	call	_ScanIR	;wreg free
  1348  000606                     L2:
  1349  000606  0101               	movlb	1	; () banked
  1350  000608  6FCE               	movwf	main@DirectionFound& (0+255),b
  1351                           
  1352                           ;main.c: 214: } else if (DirectionFound==2) {
  1353  00060A  D1E9               	goto	l3870
  1354  00060C                     l412:
  1355                           
  1356                           ; BSR set to: 1
  1357                           
  1358                           ; BSR set to: 1
  1359  00060C  0E02               	movlw	2
  1360  00060E  19CE               	xorwf	main@DirectionFound& (0+255),w,b
  1361  000610  A4D8               	btfss	status,2,c
  1362  000612  D1E5               	goto	l3870
  1363                           
  1364                           ; BSR set to: 1
  1365                           ;main.c: 216: mode=2;
  1366  000614  0E02               	movlw	2
  1367  000616  D063               	goto	L3
  1368  000618                     
  1369                           ;main.c: 226: if (RFID_Read) {
  1370                           
  1371                           ; BSR set to: 1
  1372  000618  0101               	movlb	1	; () banked
  1373  00061A  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1374  00061C  B4D8               	btfsc	status,2,c
  1375  00061E  D098               	goto	l416
  1376                           
  1377                           ; BSR set to: 1
  1378                           ;main.c: 227: stop(&mL, &mR);
  1379  000620  0ED1               	movlw	low main@mL
  1380  000622  0100               	movlb	0	; () banked
  1381  000624  6F71               	movwf	stop@mL& (0+255),b
  1382  000626  0E01               	movlw	high main@mL
  1383  000628  6F72               	movwf	(stop@mL+1)& (0+255),b
  1384  00062A  0EDA               	movlw	low main@mR
  1385  00062C  6F73               	movwf	stop@mR& (0+255),b
  1386  00062E  0E01               	movlw	high main@mR
  1387  000630  6F74               	movwf	(stop@mR+1)& (0+255),b
  1388  000632  ECAB  F00B         	call	_stop	;wreg free
  1389                           
  1390                           ;main.c: 228: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1391  000636  0E03               	movlw	3
  1392  000638  0101               	movlb	1	; () banked
  1393  00063A  19F6               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1394  00063C  A4D8               	btfss	status,2,c
  1395  00063E  D002               	goto	u3310
  1396  000640  0E01               	movlw	1
  1397  000642  D001               	goto	u3312
  1398  000644                     u3310:
  1399  000644  0E00               	movlw	0
  1400  000646                     u3312:
  1401  000646  0100               	movlb	0	; () banked
  1402  000648  6FC9               	movwf	??_main& (0+255),b
  1403  00064A  0E02               	movlw	2
  1404  00064C  0101               	movlb	1	; () banked
  1405  00064E  19E7               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1406  000650  A4D8               	btfss	status,2,c
  1407  000652  D002               	goto	u3320
  1408  000654  0E01               	movlw	1
  1409  000656  D001               	goto	u3322
  1410  000658                     u3320:
  1411  000658  0E00               	movlw	0
  1412  00065A                     u3322:
  1413  00065A  0100               	movlb	0	; () banked
  1414  00065C  15C9               	andwf	??_main& (0+255),w,b
  1415  00065E  A0E8               	btfss	wreg,0,c
  1416  000660  D1BE               	goto	l3870
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;main.c: 229: if (VerifySignal(&ReceivedString)){
  1420  000662  0EE7               	movlw	low _ReceivedString
  1421  000664  6F62               	movwf	VerifySignal@ReceivedString& (0+255),b
  1422  000666  0E01               	movlw	high _ReceivedString
  1423  000668  6F63               	movwf	(VerifySignal@ReceivedString+1)& (0+255),b
  1424  00066A  ECCF  F008         	call	_VerifySignal	;wreg free
  1425  00066E  0900               	iorlw	0
  1426  000670  B4D8               	btfsc	status,2,c
  1427  000672  D037               	goto	l418
  1428                           
  1429                           ;main.c: 231: for (i=0; i<10; i++){
  1430  000674  0E00               	movlw	0
  1431  000676  0101               	movlb	1	; () banked
  1432  000678  6FCF               	movwf	main@i& (0+255),b
  1433  00067A                     l3770:
  1434                           
  1435                           ; BSR set to: 1
  1436  00067A  0E09               	movlw	9
  1437  00067C  65CF               	cpfsgt	main@i& (0+255),b
  1438  00067E  D001               	goto	l419
  1439  000680  D01B               	goto	u3360
  1440  000682                     l419:
  1441                           
  1442                           ; BSR set to: 1
  1443                           ;main.c: 232: Message[i] = ReceivedString[i+1];
  1444                           
  1445                           ; BSR set to: 1
  1446  000682  51CF               	movf	main@i& (0+255),w,b
  1447  000684  0100               	movlb	0	; () banked
  1448  000686  6FC9               	movwf	??_main& (0+255),b
  1449  000688  6BCA               	clrf	(??_main+1)& (0+255),b
  1450  00068A  0E01               	movlw	1
  1451  00068C  27C9               	addwf	??_main& (0+255),f,b
  1452  00068E  0E00               	movlw	0
  1453  000690  23CA               	addwfc	(??_main+1)& (0+255),f,b
  1454  000692  0EE7               	movlw	low _ReceivedString
  1455  000694  25C9               	addwf	??_main& (0+255),w,b
  1456  000696  6ED9               	movwf	fsr2l,c
  1457  000698  0E01               	movlw	high _ReceivedString
  1458  00069A  21CA               	addwfc	(??_main+1)& (0+255),w,b
  1459  00069C  6EDA               	movwf	fsr2h,c
  1460  00069E  0101               	movlb	1	; () banked
  1461  0006A0  51CF               	movf	main@i& (0+255),w,b
  1462  0006A2  0D01               	mullw	1
  1463  0006A4  0EBE               	movlw	low main@Message
  1464  0006A6  24F3               	addwf	prodl,w,c
  1465  0006A8  6EE1               	movwf	fsr1l,c
  1466  0006AA  0E01               	movlw	high main@Message
  1467  0006AC  20F4               	addwfc	prodh,w,c
  1468  0006AE  6EE2               	movwf	fsr1h,c
  1469  0006B0  CFDF FFE7          	movff	indf2,indf1
  1470                           
  1471                           ; BSR set to: 1
  1472  0006B4  2BCF               	incf	main@i& (0+255),f,b
  1473  0006B6  D7E1               	goto	l3770
  1474  0006B8                     u3360:
  1475                           
  1476                           ; BSR set to: 1
  1477                           ;main.c: 233: }
  1478                           ;main.c: 235: for (i=0; i<16; i++) {
  1479                           
  1480                           ; BSR set to: 1
  1481  0006B8  0E00               	movlw	0
  1482  0006BA  6FCF               	movwf	main@i& (0+255),b
  1483  0006BC                     l3782:
  1484                           
  1485                           ; BSR set to: 1
  1486  0006BC  0E0F               	movlw	15
  1487  0006BE  65CF               	cpfsgt	main@i& (0+255),b
  1488  0006C0  D001               	goto	l421
  1489  0006C2  D00C               	goto	u3380
  1490  0006C4                     l421:
  1491                           
  1492                           ; BSR set to: 1
  1493                           ;main.c: 236: ReceivedString[i]=0;
  1494                           
  1495                           ; BSR set to: 1
  1496  0006C4  51CF               	movf	main@i& (0+255),w,b
  1497  0006C6  0D01               	mullw	1
  1498  0006C8  0EE7               	movlw	low _ReceivedString
  1499  0006CA  24F3               	addwf	prodl,w,c
  1500  0006CC  6ED9               	movwf	fsr2l,c
  1501  0006CE  0E01               	movlw	high _ReceivedString
  1502  0006D0  20F4               	addwfc	prodh,w,c
  1503  0006D2  6EDA               	movwf	fsr2h,c
  1504  0006D4  0E00               	movlw	0
  1505  0006D6  6EDF               	movwf	indf2,c
  1506                           
  1507                           ; BSR set to: 1
  1508  0006D8  2BCF               	incf	main@i& (0+255),f,b
  1509  0006DA  D7F0               	goto	l3782
  1510  0006DC                     u3380:
  1511                           
  1512                           ; BSR set to: 1
  1513                           ;main.c: 237: }
  1514                           ;main.c: 238: mode=3;
  1515                           
  1516                           ; BSR set to: 1
  1517  0006DC  0E03               	movlw	3
  1518  0006DE                     L3:
  1519  0006DE  6E32               	movwf	_mode,c	;volatile
  1520                           
  1521                           ;main.c: 240: } else {
  1522  0006E0  D17E               	goto	l3870
  1523  0006E2                     l418:
  1524                           
  1525                           ;main.c: 241: fullSpeedBack(&mL,&mR, 100);
  1526                           
  1527                           ; BSR set to: 1
  1528  0006E2  0ED1               	movlw	low main@mL
  1529  0006E4  0100               	movlb	0	; () banked
  1530  0006E6  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1531  0006E8  0E01               	movlw	high main@mL
  1532  0006EA  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1533  0006EC  0EDA               	movlw	low main@mR
  1534  0006EE  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1535  0006F0  0E01               	movlw	high main@mR
  1536  0006F2  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1537  0006F4  0E64               	movlw	100
  1538  0006F6  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1539  0006F8  EC67  F00D         	call	_fullSpeedBack	;wreg free
  1540                           
  1541                           ;main.c: 242: delay_tenth_s(5);
  1542  0006FC  0E05               	movlw	5
  1543  0006FE  ECDE  F00D         	call	_delay_tenth_s
  1544                           
  1545                           ;main.c: 243: stop(&mL,&mR);
  1546  000702  0ED1               	movlw	low main@mL
  1547  000704  0100               	movlb	0	; () banked
  1548  000706  6F71               	movwf	stop@mL& (0+255),b
  1549  000708  0E01               	movlw	high main@mL
  1550  00070A  6F72               	movwf	(stop@mL+1)& (0+255),b
  1551  00070C  0EDA               	movlw	low main@mR
  1552  00070E  6F73               	movwf	stop@mR& (0+255),b
  1553  000710  0E01               	movlw	high main@mR
  1554  000712  6F74               	movwf	(stop@mR+1)& (0+255),b
  1555  000714  ECAB  F00B         	call	_stop	;wreg free
  1556                           
  1557                           ;main.c: 244: fullSpeed(&mL,&mR, 100);
  1558  000718  0ED1               	movlw	low main@mL
  1559  00071A  0100               	movlb	0	; () banked
  1560  00071C  6F71               	movwf	fullSpeed@mL& (0+255),b
  1561  00071E  0E01               	movlw	high main@mL
  1562  000720  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1563  000722  0EDA               	movlw	low main@mR
  1564  000724  6F73               	movwf	fullSpeed@mR& (0+255),b
  1565  000726  0E01               	movlw	high main@mR
  1566  000728  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1567  00072A  0E64               	movlw	100
  1568  00072C  6F75               	movwf	fullSpeed@power& (0+255),b
  1569  00072E  EC37  F00C         	call	_fullSpeed	;wreg free
  1570                           
  1571                           ;main.c: 245: delay_tenth_s(5);
  1572  000732  0E05               	movlw	5
  1573  000734  ECDE  F00D         	call	_delay_tenth_s
  1574                           
  1575                           ;main.c: 246: stop(&mL,&mR);
  1576  000738  0ED1               	movlw	low main@mL
  1577  00073A  0100               	movlb	0	; () banked
  1578  00073C  6F71               	movwf	stop@mL& (0+255),b
  1579  00073E  0E01               	movlw	high main@mL
  1580  000740  6F72               	movwf	(stop@mL+1)& (0+255),b
  1581  000742  0EDA               	movlw	low main@mR
  1582  000744  6F73               	movwf	stop@mR& (0+255),b
  1583  000746  0E01               	movlw	high main@mR
  1584  000748  6F74               	movwf	(stop@mR+1)& (0+255),b
  1585  00074A  ECAB  F00B         	call	_stop	;wreg free
  1586                           
  1587                           ;main.c: 247: }
  1588                           ;main.c: 248: }
  1589                           ;main.c: 249: } else {
  1590  00074E  D147               	goto	l3870
  1591  000750                     l416:
  1592                           
  1593                           ;main.c: 250: DirectionFound=1;
  1594  000750  0E01               	movlw	1
  1595  000752  0101               	movlb	1	; () banked
  1596  000754  6FCE               	movwf	main@DirectionFound& (0+255),b
  1597                           
  1598                           ;main.c: 251: mode=1;
  1599  000756  0E01               	movlw	1
  1600  000758  6E32               	movwf	_mode,c	;volatile
  1601                           
  1602                           ; BSR set to: 1
  1603                           ;main.c: 253: fullSpeed(&mL,&mR, 100);
  1604  00075A  0ED1               	movlw	low main@mL
  1605  00075C  0100               	movlb	0	; () banked
  1606  00075E  6F71               	movwf	fullSpeed@mL& (0+255),b
  1607  000760  0E01               	movlw	high main@mL
  1608  000762  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1609  000764  0EDA               	movlw	low main@mR
  1610  000766  6F73               	movwf	fullSpeed@mR& (0+255),b
  1611  000768  0E01               	movlw	high main@mR
  1612  00076A  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1613  00076C  0E64               	movlw	100
  1614  00076E  6F75               	movwf	fullSpeed@power& (0+255),b
  1615  000770  EC37  F00C         	call	_fullSpeed	;wreg free
  1616                           
  1617                           ;main.c: 254: delay_tenth_s(1);
  1618  000774  0E01               	movlw	1
  1619  000776  ECDE  F00D         	call	_delay_tenth_s
  1620                           
  1621                           ;main.c: 255: MoveType[Move] = 0;
  1622  00077A  0101               	movlb	1	; () banked
  1623  00077C  51D0               	movf	main@Move& (0+255),w,b
  1624  00077E  0D01               	mullw	1
  1625  000780  0E28               	movlw	low main@MoveType
  1626  000782  24F3               	addwf	prodl,w,c
  1627  000784  6ED9               	movwf	fsr2l,c
  1628  000786  0E01               	movlw	high main@MoveType
  1629  000788  20F4               	addwfc	prodh,w,c
  1630  00078A  6EDA               	movwf	fsr2h,c
  1631  00078C  0E00               	movlw	0
  1632  00078E  6EDF               	movwf	indf2,c
  1633                           
  1634                           ; BSR set to: 1
  1635                           ;main.c: 256: MoveTime[Move] = 5;
  1636  000790  51D0               	movf	main@Move& (0+255),w,b
  1637  000792  0D02               	mullw	2
  1638  000794  0E5A               	movlw	low main@MoveTime
  1639  000796  24F3               	addwf	prodl,w,c
  1640  000798  6ED9               	movwf	fsr2l,c
  1641  00079A  0E01               	movlw	high main@MoveTime
  1642  00079C  20F4               	addwfc	prodh,w,c
  1643  00079E  6EDA               	movwf	fsr2h,c
  1644  0007A0  0E05               	movlw	5
  1645  0007A2  6EDE               	movwf	postinc2,c
  1646  0007A4  0E00               	movlw	0
  1647  0007A6  6EDD               	movwf	postdec2,c
  1648                           
  1649                           ; BSR set to: 1
  1650                           ;main.c: 257: Move++;
  1651  0007A8  2BD0               	incf	main@Move& (0+255),f,b
  1652                           
  1653                           ; BSR set to: 1
  1654                           ;main.c: 258: }
  1655                           ;main.c: 260: break;
  1656  0007AA  D119               	goto	l3870
  1657  0007AC                     
  1658                           ;main.c: 265: SetLine(1);
  1659                           
  1660                           ; BSR set to: 1
  1661  0007AC  0E01               	movlw	1
  1662  0007AE  EC31  F00E         	call	_SetLine
  1663                           
  1664                           ;main.c: 266: LCD_String(Message);
  1665  0007B2  0EBE               	movlw	low main@Message
  1666  0007B4  0100               	movlb	0	; () banked
  1667  0007B6  6F60               	movwf	LCD_String@string& (0+255),b
  1668  0007B8  0E01               	movlw	high main@Message
  1669  0007BA  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1670  0007BC  ECEB  F00C         	call	_LCD_String	;wreg free
  1671                           
  1672                           ;main.c: 267: SetLine(2);
  1673  0007C0  0E02               	movlw	2
  1674  0007C2  EC31  F00E         	call	_SetLine
  1675                           
  1676                           ;main.c: 268: LCD_String("Going Home");
  1677  0007C6  0E39               	movlw	low STR_8
  1678  0007C8  0100               	movlb	0	; () banked
  1679  0007CA  6F60               	movwf	LCD_String@string& (0+255),b
  1680  0007CC  0E03               	movlw	high STR_8
  1681  0007CE  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1682  0007D0  ECEB  F00C         	call	_LCD_String	;wreg free
  1683  0007D4  0101               	movlb	1	; () banked
  1684  0007D6  BFD0               	btfsc	main@Move& (0+255),7,b
  1685  0007D8  D0F6               	goto	u3480
  1686                           
  1687                           ; BSR set to: 1
  1688                           ;main.c: 271: stop(&mL,&mR);
  1689                           
  1690                           ; BSR set to: 1
  1691                           
  1692                           ; BSR set to: 1
  1693  0007DA  0ED1               	movlw	low main@mL
  1694  0007DC  0100               	movlb	0	; () banked
  1695  0007DE  6F71               	movwf	stop@mL& (0+255),b
  1696  0007E0  0E01               	movlw	high main@mL
  1697  0007E2  6F72               	movwf	(stop@mL+1)& (0+255),b
  1698  0007E4  0EDA               	movlw	low main@mR
  1699  0007E6  6F73               	movwf	stop@mR& (0+255),b
  1700  0007E8  0E01               	movlw	high main@mR
  1701  0007EA  6F74               	movwf	(stop@mR+1)& (0+255),b
  1702  0007EC  ECAB  F00B         	call	_stop	;wreg free
  1703                           
  1704                           ;main.c: 272: if (MoveType[Move]==0) {
  1705  0007F0  0101               	movlb	1	; () banked
  1706  0007F2  51D0               	movf	main@Move& (0+255),w,b
  1707  0007F4  0D01               	mullw	1
  1708  0007F6  0E28               	movlw	low main@MoveType
  1709  0007F8  24F3               	addwf	prodl,w,c
  1710  0007FA  6ED9               	movwf	fsr2l,c
  1711  0007FC  0E01               	movlw	high main@MoveType
  1712  0007FE  20F4               	addwfc	prodh,w,c
  1713  000800  6EDA               	movwf	fsr2h,c
  1714  000802  50DF               	movf	indf2,w,c
  1715  000804  A4D8               	btfss	status,2,c
  1716  000806  D01A               	goto	l428
  1717                           
  1718                           ; BSR set to: 1
  1719                           ;main.c: 273: fullSpeedBack(&mL,&mR,100);
  1720  000808  0ED1               	movlw	low main@mL
  1721  00080A  0100               	movlb	0	; () banked
  1722  00080C  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1723  00080E  0E01               	movlw	high main@mL
  1724  000810  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1725  000812  0EDA               	movlw	low main@mR
  1726  000814  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1727  000816  0E01               	movlw	high main@mR
  1728  000818  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1729  00081A  0E64               	movlw	100
  1730  00081C  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1731  00081E  EC67  F00D         	call	_fullSpeedBack	;wreg free
  1732                           
  1733                           ;main.c: 274: delay_tenth_s(MoveTime[Move]);
  1734  000822  0101               	movlb	1	; () banked
  1735  000824  51D0               	movf	main@Move& (0+255),w,b
  1736  000826  0D02               	mullw	2
  1737  000828  0E5A               	movlw	low main@MoveTime
  1738  00082A  24F3               	addwf	prodl,w,c
  1739  00082C  6ED9               	movwf	fsr2l,c
  1740  00082E  0E01               	movlw	high main@MoveTime
  1741  000830  20F4               	addwfc	prodh,w,c
  1742  000832  6EDA               	movwf	fsr2h,c
  1743  000834  50DF               	movf	indf2,w,c
  1744  000836  ECDE  F00D         	call	_delay_tenth_s
  1745                           
  1746                           ;main.c: 275: } else if (MoveType[Move]==1) {
  1747  00083A  D0BF               	goto	l442
  1748  00083C                     l428:
  1749  00083C  0101               	movlb	1	; () banked
  1750  00083E  51D0               	movf	main@Move& (0+255),w,b
  1751  000840  0D01               	mullw	1
  1752  000842  0E28               	movlw	low main@MoveType
  1753  000844  24F3               	addwf	prodl,w,c
  1754  000846  6ED9               	movwf	fsr2l,c
  1755  000848  0E01               	movlw	high main@MoveType
  1756  00084A  20F4               	addwfc	prodh,w,c
  1757  00084C  6EDA               	movwf	fsr2h,c
  1758  00084E  04DE               	decf	postinc2,w,c
  1759  000850  A4D8               	btfss	status,2,c
  1760  000852  D063               	goto	l430
  1761                           
  1762                           ; BSR set to: 1
  1763                           ;main.c: 276: T0CONbits.TMR0ON=0;
  1764  000854  9ED5               	bcf	4053,7,c	;volatile
  1765                           
  1766                           ; BSR set to: 1
  1767                           ;main.c: 277: TMR0L = 0;
  1768  000856  0E00               	movlw	0
  1769  000858  6ED6               	movwf	4054,c	;volatile
  1770                           
  1771                           ;main.c: 278: TMR0H = 0;
  1772  00085A  0E00               	movlw	0
  1773  00085C  6ED7               	movwf	4055,c	;volatile
  1774                           
  1775                           ;main.c: 279: millis = 0;
  1776  00085E  0E00               	movlw	0
  1777  000860  6FF8               	movwf	(_millis+1)& (0+255),b	;volatile
  1778  000862  0E00               	movlw	0
  1779  000864  6FF7               	movwf	_millis& (0+255),b	;volatile
  1780                           
  1781                           ; BSR set to: 1
  1782                           ;main.c: 280: if (MoveTime[Move]>0) {
  1783  000866  51D0               	movf	main@Move& (0+255),w,b
  1784  000868  0D02               	mullw	2
  1785  00086A  0E5A               	movlw	low main@MoveTime
  1786  00086C  24F3               	addwf	prodl,w,c
  1787  00086E  6ED9               	movwf	fsr2l,c
  1788  000870  0E01               	movlw	high main@MoveTime
  1789  000872  20F4               	addwfc	prodh,w,c
  1790  000874  6EDA               	movwf	fsr2h,c
  1791  000876  0E01               	movlw	1
  1792  000878  BEDB               	btfsc	plusw2,7,c
  1793  00087A  D024               	goto	l431
  1794  00087C  0E01               	movlw	1
  1795  00087E  50DB               	movf	plusw2,w,c
  1796  000880  E103               	bnz	u3420
  1797  000882  04DE               	decf	postinc2,w,c
  1798  000884  A0D8               	btfss	status,0,c
  1799  000886  D01E               	goto	l431
  1800  000888                     u3420:
  1801                           
  1802                           ; BSR set to: 1
  1803                           ;main.c: 281: T0CONbits.TMR0ON=1;
  1804  000888  8ED5               	bsf	4053,7,c	;volatile
  1805                           
  1806                           ; BSR set to: 1
  1807                           ;main.c: 282: turnRight(&mL,&mR,MotorPower);
  1808  00088A  0ED1               	movlw	low main@mL
  1809  00088C  0100               	movlb	0	; () banked
  1810  00088E  6F77               	movwf	turnRight@mL& (0+255),b
  1811  000890  0E01               	movlw	high main@mL
  1812  000892  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1813  000894  0EDA               	movlw	low main@mR
  1814  000896  6F79               	movwf	turnRight@mR& (0+255),b
  1815  000898  0E01               	movlw	high main@mR
  1816  00089A  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1817  00089C  C1CD  F07B         	movff	main@MotorPower,turnRight@power
  1818  0008A0  EC85  F00D         	call	_turnRight	;wreg free
  1819  0008A4  0101               	movlb	1	; () banked
  1820  0008A6  51D0               	movf	main@Move& (0+255),w,b
  1821  0008A8  0D02               	mullw	2
  1822  0008AA  0E5A               	movlw	low main@MoveTime
  1823  0008AC  24F3               	addwf	prodl,w,c
  1824  0008AE  6ED9               	movwf	fsr2l,c
  1825  0008B0  0E01               	movlw	high main@MoveTime
  1826  0008B2  20F4               	addwfc	prodh,w,c
  1827  0008B4  6EDA               	movwf	fsr2h,c
  1828  0008B6  50DE               	movf	postinc2,w,c
  1829  0008B8  5DF7               	subwf	_millis& (0+255),w,b	;volatile
  1830  0008BA  50DE               	movf	postinc2,w,c
  1831  0008BC  59F8               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1832  0008BE  A0D8               	btfss	status,0,c
  1833  0008C0  D7F1               	goto	l433
  1834  0008C2  D029               	goto	u3440
  1835  0008C4                     l431:
  1836                           
  1837                           ; BSR set to: 1
  1838                           ;main.c: 287: T0CONbits.TMR0ON=1;
  1839  0008C4  8ED5               	bsf	4053,7,c	;volatile
  1840                           
  1841                           ; BSR set to: 1
  1842                           ;main.c: 288: turnLeft(&mL,&mR,MotorPower);
  1843  0008C6  0ED1               	movlw	low main@mL
  1844  0008C8  0100               	movlb	0	; () banked
  1845  0008CA  6F77               	movwf	turnLeft@mL& (0+255),b
  1846  0008CC  0E01               	movlw	high main@mL
  1847  0008CE  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1848  0008D0  0EDA               	movlw	low main@mR
  1849  0008D2  6F79               	movwf	turnLeft@mR& (0+255),b
  1850  0008D4  0E01               	movlw	high main@mR
  1851  0008D6  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1852  0008D8  C1CD  F07B         	movff	main@MotorPower,turnLeft@power
  1853  0008DC  ECA3  F00D         	call	_turnLeft	;wreg free
  1854  0008E0  0101               	movlb	1	; () banked
  1855  0008E2  51D0               	movf	main@Move& (0+255),w,b
  1856  0008E4  0D02               	mullw	2
  1857  0008E6  0E5A               	movlw	low main@MoveTime
  1858  0008E8  24F3               	addwf	prodl,w,c
  1859  0008EA  6ED9               	movwf	fsr2l,c
  1860  0008EC  0E01               	movlw	high main@MoveTime
  1861  0008EE  20F4               	addwfc	prodh,w,c
  1862  0008F0  6EDA               	movwf	fsr2h,c
  1863  0008F2  CFDE F0C9          	movff	postinc2,??_main
  1864  0008F6  CFDD F0CA          	movff	postdec2,??_main+1
  1865  0008FA  0100               	movlb	0	; () banked
  1866  0008FC  1FC9               	comf	??_main& (0+255),f,b
  1867  0008FE  1FCA               	comf	(??_main+1)& (0+255),f,b
  1868  000900  4BC9               	infsnz	??_main& (0+255),f,b
  1869  000902  2BCA               	incf	(??_main+1)& (0+255),f,b
  1870  000904  51C9               	movf	??_main& (0+255),w,b
  1871  000906  0101               	movlb	1	; () banked
  1872  000908  5DF7               	subwf	_millis& (0+255),w,b	;volatile
  1873  00090A  0100               	movlb	0	; () banked
  1874  00090C  51CA               	movf	(??_main+1)& (0+255),w,b
  1875  00090E  0101               	movlb	1	; () banked
  1876  000910  59F8               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1877  000912  A0D8               	btfss	status,0,c
  1878  000914  D7E5               	goto	l437
  1879  000916                     u3440:
  1880                           
  1881                           ; BSR set to: 1
  1882                           ;main.c: 291: T0CONbits.TMR0ON=0;
  1883  000916  9ED5               	bcf	4053,7,c	;volatile
  1884                           
  1885                           ; BSR set to: 1
  1886                           ;main.c: 292: }
  1887                           ;main.c: 293: } else if (MoveType[Move]==2) {
  1888  000918  D050               	goto	l442
  1889  00091A                     l430:
  1890                           
  1891                           ; BSR set to: 1
  1892                           
  1893                           ; BSR set to: 1
  1894  00091A  51D0               	movf	main@Move& (0+255),w,b
  1895  00091C  0D01               	mullw	1
  1896  00091E  0E28               	movlw	low main@MoveType
  1897  000920  24F3               	addwf	prodl,w,c
  1898  000922  6ED9               	movwf	fsr2l,c
  1899  000924  0E01               	movlw	high main@MoveType
  1900  000926  20F4               	addwfc	prodh,w,c
  1901  000928  6EDA               	movwf	fsr2h,c
  1902  00092A  0E02               	movlw	2
  1903  00092C  18DE               	xorwf	postinc2,w,c
  1904  00092E  A4D8               	btfss	status,2,c
  1905  000930  D044               	goto	l442
  1906                           
  1907                           ; BSR set to: 1
  1908                           ;main.c: 294: if (MoveTime[Move]>0) {
  1909  000932  51D0               	movf	main@Move& (0+255),w,b
  1910  000934  0D02               	mullw	2
  1911  000936  0E5A               	movlw	low main@MoveTime
  1912  000938  24F3               	addwf	prodl,w,c
  1913  00093A  6ED9               	movwf	fsr2l,c
  1914  00093C  0E01               	movlw	high main@MoveTime
  1915  00093E  20F4               	addwfc	prodh,w,c
  1916  000940  6EDA               	movwf	fsr2h,c
  1917  000942  0E01               	movlw	1
  1918  000944  BEDB               	btfsc	plusw2,7,c
  1919  000946  D020               	goto	l441
  1920  000948  0E01               	movlw	1
  1921  00094A  50DB               	movf	plusw2,w,c
  1922  00094C  E103               	bnz	u3460
  1923  00094E  04DE               	decf	postinc2,w,c
  1924  000950  A0D8               	btfss	status,0,c
  1925  000952  D01A               	goto	l441
  1926  000954                     u3460:
  1927                           
  1928                           ; BSR set to: 1
  1929                           ;main.c: 295: turnRight(&mL,&mR,78);
  1930  000954  0ED1               	movlw	low main@mL
  1931  000956  0100               	movlb	0	; () banked
  1932  000958  6F77               	movwf	turnRight@mL& (0+255),b
  1933  00095A  0E01               	movlw	high main@mL
  1934  00095C  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1935  00095E  0EDA               	movlw	low main@mR
  1936  000960  6F79               	movwf	turnRight@mR& (0+255),b
  1937  000962  0E01               	movlw	high main@mR
  1938  000964  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1939  000966  0E4E               	movlw	78
  1940  000968  6F7B               	movwf	turnRight@power& (0+255),b
  1941  00096A  EC85  F00D         	call	_turnRight	;wreg free
  1942                           
  1943                           ;main.c: 299: delay_tenth_s(MoveTime[Move]);
  1944  00096E  0101               	movlb	1	; () banked
  1945  000970  51D0               	movf	main@Move& (0+255),w,b
  1946  000972  0D02               	mullw	2
  1947  000974  0E5A               	movlw	low main@MoveTime
  1948  000976  24F3               	addwf	prodl,w,c
  1949  000978  6ED9               	movwf	fsr2l,c
  1950  00097A  0E01               	movlw	high main@MoveTime
  1951  00097C  20F4               	addwfc	prodh,w,c
  1952  00097E  6EDA               	movwf	fsr2h,c
  1953  000980  50DF               	movf	indf2,w,c
  1954  000982  ECDE  F00D         	call	_delay_tenth_s
  1955                           
  1956                           ;main.c: 300: } else {
  1957  000986  D019               	goto	l442
  1958  000988                     l441:
  1959                           
  1960                           ;main.c: 301: turnLeft(&mL,&mR,100);
  1961  000988  0ED1               	movlw	low main@mL
  1962  00098A  0100               	movlb	0	; () banked
  1963  00098C  6F77               	movwf	turnLeft@mL& (0+255),b
  1964  00098E  0E01               	movlw	high main@mL
  1965  000990  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1966  000992  0EDA               	movlw	low main@mR
  1967  000994  6F79               	movwf	turnLeft@mR& (0+255),b
  1968  000996  0E01               	movlw	high main@mR
  1969  000998  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1970  00099A  0E64               	movlw	100
  1971  00099C  6F7B               	movwf	turnLeft@power& (0+255),b
  1972  00099E  ECA3  F00D         	call	_turnLeft	;wreg free
  1973                           
  1974                           ;main.c: 302: delay_tenth_s(MoveTime[Move]);
  1975  0009A2  0101               	movlb	1	; () banked
  1976  0009A4  51D0               	movf	main@Move& (0+255),w,b
  1977  0009A6  0D02               	mullw	2
  1978  0009A8  0E5A               	movlw	low main@MoveTime
  1979  0009AA  24F3               	addwf	prodl,w,c
  1980  0009AC  6ED9               	movwf	fsr2l,c
  1981  0009AE  0E01               	movlw	high main@MoveTime
  1982  0009B0  20F4               	addwfc	prodh,w,c
  1983  0009B2  6EDA               	movwf	fsr2h,c
  1984  0009B4  50DF               	movf	indf2,w,c
  1985  0009B6  ECDE  F00D         	call	_delay_tenth_s
  1986  0009BA                     l442:
  1987                           
  1988                           ;main.c: 303: }
  1989                           ;main.c: 304: }
  1990                           ;main.c: 305: if (mode==-1) {
  1991  0009BA  2832               	incf	_mode,w,c	;volatile
  1992  0009BC  B4D8               	btfsc	status,2,c
  1993  0009BE  D003               	goto	u3480
  1994                           
  1995                           ;main.c: 306: break;
  1996  0009C0  0101               	movlb	1	; () banked
  1997  0009C2  07D0               	decf	main@Move& (0+255),f,b
  1998  0009C4  D708               	goto	L4
  1999  0009C6                     u3480:
  2000                           
  2001                           ;main.c: 307: }
  2002                           ;main.c: 308: }
  2003                           ;main.c: 309: stop(&mL,&mR);
  2004                           
  2005                           ; BSR set to: 1
  2006  0009C6  0ED1               	movlw	low main@mL
  2007  0009C8  0100               	movlb	0	; () banked
  2008  0009CA  6F71               	movwf	stop@mL& (0+255),b
  2009  0009CC  0E01               	movlw	high main@mL
  2010  0009CE  6F72               	movwf	(stop@mL+1)& (0+255),b
  2011  0009D0  0EDA               	movlw	low main@mR
  2012  0009D2  6F73               	movwf	stop@mR& (0+255),b
  2013  0009D4  0E01               	movlw	high main@mR
  2014  0009D6  6F74               	movwf	(stop@mR+1)& (0+255),b
  2015  0009D8  ECAB  F00B         	call	_stop	;wreg free
  2016  0009DC                     l3868:
  2017                           
  2018                           ;main.c: 310: mode=-1;
  2019  0009DC  6832               	setf	_mode,c	;volatile
  2020  0009DE                     l3870:
  2021                           
  2022                           ;main.c: 313: }
  2023  0009DE  5032               	movf	_mode,w,c	;volatile
  2024                           
  2025                           ; Switch size 1, requested type "space"
  2026                           ; Number of cases is 5, Range of values is 0 to 255
  2027                           ; switch strategies available:
  2028                           ; Name         Instructions Cycles
  2029                           ; simple_byte           16     9 (average)
  2030                           ;	Chosen strategy is simple_byte
  2031  0009E0  0A00               	xorlw	0	; case 0
  2032  0009E2  B4D8               	btfsc	status,2,c
  2033  0009E4  D575               	goto	l406
  2034  0009E6  0A01               	xorlw	1	; case 1
  2035  0009E8  B4D8               	btfsc	status,2,c
  2036  0009EA  D597               	goto	l407
  2037  0009EC  0A03               	xorlw	3	; case 2
  2038  0009EE  B4D8               	btfsc	status,2,c
  2039  0009F0  D613               	goto	l415
  2040  0009F2  0A01               	xorlw	1	; case 3
  2041  0009F4  B4D8               	btfsc	status,2,c
  2042  0009F6  D6DA               	goto	l425
  2043  0009F8  0AFC               	xorlw	252	; case 255
  2044  0009FA  B4D8               	btfsc	status,2,c
  2045  0009FC  D501               	goto	l402
  2046  0009FE  D7EF               	goto	l3870
  2047  000A00                     __end_of_main:
  2048                           	opt stack 0
  2049                           tblptru	equ	0xFF8
  2050                           prodh	equ	0xFF4
  2051                           prodl	equ	0xFF3
  2052                           intcon	equ	0xFF2
  2053                           postinc0	equ	0xFEE
  2054                           wreg	equ	0xFE8
  2055                           indf1	equ	0xFE7
  2056                           plusw1	equ	0xFE3
  2057                           fsr1h	equ	0xFE2
  2058                           fsr1l	equ	0xFE1
  2059                           indf2	equ	0xFDF
  2060                           postinc2	equ	0xFDE
  2061                           postdec2	equ	0xFDD
  2062                           plusw2	equ	0xFDB
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _initTimer *****************
  2068 ;; Defined at:
  2069 ;;		line 8 in file "Movement.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2083 ;;      Params:         0       0       0       0
  2084 ;;      Locals:         0       0       0       0
  2085 ;;      Temps:          0       0       0       0
  2086 ;;      Totals:         0       0       0       0
  2087 ;;Total ram usage:        0 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    3
  2090 ;; This function calls:
  2091 ;;		Nothing
  2092 ;; This function is called by:
  2093 ;;		_main
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text1
  2098  001D9E                     __ptext1:
  2099                           	opt stack 0
  2100  001D9E                     _initTimer:
  2101                           	opt stack 27
  2102                           
  2103                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2104                           
  2105                           ;incstack = 0
  2106  001D9E  9ED5               	bcf	4053,7,c	;volatile
  2107                           
  2108                           ;Movement.c: 11: T0CONbits.T016BIT=1;
  2109  001DA0  8CD5               	bsf	4053,6,c	;volatile
  2110                           
  2111                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2112  001DA2  9AD5               	bcf	4053,5,c	;volatile
  2113                           
  2114                           ;Movement.c: 13: T0CONbits.PSA=0;
  2115  001DA4  96D5               	bcf	4053,3,c	;volatile
  2116                           
  2117                           ;Movement.c: 14: T0CONbits.T0PS=0b010;
  2118  001DA6  50D5               	movf	4053,w,c	;volatile
  2119  001DA8  0BF8               	andlw	-8
  2120  001DAA  0902               	iorlw	2
  2121  001DAC  6ED5               	movwf	4053,c	;volatile
  2122                           
  2123                           ;Movement.c: 17: INTCONbits.TMR0IE=1;
  2124  001DAE  8AF2               	bsf	intcon,5,c	;volatile
  2125  001DB0  0012               	return		;funcret
  2126  001DB2                     __end_of_initTimer:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           prodh	equ	0xFF4
  2130                           prodl	equ	0xFF3
  2131                           intcon	equ	0xFF2
  2132                           postinc0	equ	0xFEE
  2133                           wreg	equ	0xFE8
  2134                           indf1	equ	0xFE7
  2135                           plusw1	equ	0xFE3
  2136                           fsr1h	equ	0xFE2
  2137                           fsr1l	equ	0xFE1
  2138                           indf2	equ	0xFDF
  2139                           postinc2	equ	0xFDE
  2140                           postdec2	equ	0xFDD
  2141                           plusw2	equ	0xFDB
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _initRFID *****************
  2147 ;; Defined at:
  2148 ;;		line 7 in file "RFID_Reader.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      void 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2162 ;;      Params:         0       0       0       0
  2163 ;;      Locals:         0       0       0       0
  2164 ;;      Temps:          0       0       0       0
  2165 ;;      Totals:         0       0       0       0
  2166 ;;Total ram usage:        0 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text2
  2177  001D82                     __ptext2:
  2178                           	opt stack 0
  2179  001D82                     _initRFID:
  2180                           	opt stack 27
  2181                           
  2182                           ;RFID_Reader.c: 8: TRISC = TRISC | 0b11000000;
  2183                           
  2184                           ;incstack = 0
  2185  001D82  5094               	movf	3988,w,c	;volatile
  2186  001D84  09C0               	iorlw	192
  2187  001D86  6E94               	movwf	3988,c	;volatile
  2188                           
  2189                           ;RFID_Reader.c: 12: SPBRG=205;
  2190  001D88  0ECD               	movlw	205
  2191  001D8A  6EAF               	movwf	4015,c	;volatile
  2192                           
  2193                           ;RFID_Reader.c: 13: SPBRGH=0;
  2194  001D8C  0E00               	movlw	0
  2195  001D8E  6EB0               	movwf	4016,c	;volatile
  2196                           
  2197                           ;RFID_Reader.c: 14: BAUDCONbits.BRG16=1;
  2198  001D90  86AA               	bsf	4010,3,c	;volatile
  2199                           
  2200                           ;RFID_Reader.c: 15: TXSTAbits.BRGH=1;
  2201  001D92  84AC               	bsf	4012,2,c	;volatile
  2202                           
  2203                           ;RFID_Reader.c: 16: RCSTAbits.CREN=1;
  2204  001D94  88AB               	bsf	4011,4,c	;volatile
  2205                           
  2206                           ;RFID_Reader.c: 17: RCSTAbits.SPEN=1;
  2207  001D96  8EAB               	bsf	4011,7,c	;volatile
  2208                           
  2209                           ;RFID_Reader.c: 18: TXSTAbits.SYNC=0;
  2210  001D98  98AC               	bcf	4012,4,c	;volatile
  2211                           
  2212                           ;RFID_Reader.c: 19: RCSTAbits.RX9=0;
  2213  001D9A  9CAB               	bcf	4011,6,c	;volatile
  2214  001D9C  0012               	return		;funcret
  2215  001D9E                     __end_of_initRFID:
  2216                           	opt stack 0
  2217                           tblptru	equ	0xFF8
  2218                           prodh	equ	0xFF4
  2219                           prodl	equ	0xFF3
  2220                           intcon	equ	0xFF2
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           indf1	equ	0xFE7
  2224                           plusw1	equ	0xFE3
  2225                           fsr1h	equ	0xFE2
  2226                           fsr1l	equ	0xFE1
  2227                           indf2	equ	0xFDF
  2228                           postinc2	equ	0xFDE
  2229                           postdec2	equ	0xFDD
  2230                           plusw2	equ	0xFDB
  2231                           fsr2h	equ	0xFDA
  2232                           fsr2l	equ	0xFD9
  2233                           status	equ	0xFD8
  2234                           
  2235 ;; *************** function _initMotorPWM *****************
  2236 ;; Defined at:
  2237 ;;		line 4 in file "dc_motor.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2251 ;;      Params:         0       0       0       0
  2252 ;;      Locals:         0       0       0       0
  2253 ;;      Temps:          0       0       0       0
  2254 ;;      Totals:         0       0       0       0
  2255 ;;Total ram usage:        0 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    3
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text3
  2266  001B82                     __ptext3:
  2267                           	opt stack 0
  2268  001B82                     _initMotorPWM:
  2269                           	opt stack 27
  2270                           
  2271                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2272                           
  2273                           ;incstack = 0
  2274  001B82  0E00               	movlw	0
  2275  001B84  6E7F               	movwf	3967,c	;volatile
  2276                           
  2277                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2278  001B86  0E80               	movlw	128
  2279  001B88  6E7E               	movwf	3966,c	;volatile
  2280                           
  2281                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2282  001B8A  0E6F               	movlw	111
  2283  001B8C  6E6F               	movwf	3951,c	;volatile
  2284                           
  2285                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2286  001B8E  0E00               	movlw	0
  2287  001B90  6E6E               	movwf	3950,c	;volatile
  2288                           
  2289                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2290  001B92  0EC7               	movlw	199
  2291  001B94  6E7B               	movwf	3963,c	;volatile
  2292                           
  2293                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2294  001B96  0E00               	movlw	0
  2295  001B98  6E7A               	movwf	3962,c	;volatile
  2296                           
  2297                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2298  001B9A  0E00               	movlw	0
  2299  001B9C  6E79               	movwf	3961,c	;volatile
  2300                           
  2301                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2302  001B9E  0E00               	movlw	0
  2303  001BA0  6E78               	movwf	3960,c	;volatile
  2304                           
  2305                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2306  001BA2  0E00               	movlw	0
  2307  001BA4  6E77               	movwf	3959,c	;volatile
  2308                           
  2309                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2310  001BA6  0E00               	movlw	0
  2311  001BA8  6E76               	movwf	3958,c	;volatile
  2312                           
  2313                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2314  001BAA  9093               	bcf	3987,0,c	;volatile
  2315                           
  2316                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2317  001BAC  9293               	bcf	3987,1,c	;volatile
  2318                           
  2319                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2320  001BAE  9493               	bcf	3987,2,c	;volatile
  2321                           
  2322                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2323  001BB0  9693               	bcf	3987,3,c	;volatile
  2324                           
  2325                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2326  001BB2  908A               	bcf	3978,0,c	;volatile
  2327                           
  2328                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2329  001BB4  928A               	bcf	3978,1,c	;volatile
  2330                           
  2331                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2332  001BB6  948A               	bcf	3978,2,c	;volatile
  2333                           
  2334                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2335  001BB8  968A               	bcf	3978,3,c	;volatile
  2336  001BBA  0012               	return		;funcret
  2337  001BBC                     __end_of_initMotorPWM:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           prodh	equ	0xFF4
  2341                           prodl	equ	0xFF3
  2342                           intcon	equ	0xFF2
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           indf1	equ	0xFE7
  2346                           plusw1	equ	0xFE3
  2347                           fsr1h	equ	0xFE2
  2348                           fsr1l	equ	0xFE1
  2349                           indf2	equ	0xFDF
  2350                           postinc2	equ	0xFDE
  2351                           postdec2	equ	0xFDD
  2352                           plusw2	equ	0xFDB
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _initLCD *****************
  2358 ;; Defined at:
  2359 ;;		line 38 in file "LCD.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2373 ;;      Params:         0       0       0       0
  2374 ;;      Locals:         0       0       0       0
  2375 ;;      Temps:          0       1       0       0
  2376 ;;      Totals:         0       1       0       0
  2377 ;;Total ram usage:        1 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    6
  2380 ;; This function calls:
  2381 ;;		_LCDout
  2382 ;;		_SendLCD
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text4
  2389  0015D4                     __ptext4:
  2390                           	opt stack 0
  2391  0015D4                     _initLCD:
  2392                           	opt stack 24
  2393                           
  2394                           ;LCD.c: 44: TRISAbits.RA6=0;
  2395                           
  2396                           ;incstack = 0
  2397  0015D4  9C92               	bcf	3986,6,c	;volatile
  2398                           
  2399                           ;LCD.c: 45: TRISCbits.RC0=0;
  2400  0015D6  9094               	bcf	3988,0,c	;volatile
  2401                           
  2402                           ;LCD.c: 46: TRISCbits.RC1=0;
  2403  0015D8  9294               	bcf	3988,1,c	;volatile
  2404                           
  2405                           ;LCD.c: 47: TRISCbits.RC2=0;
  2406  0015DA  9494               	bcf	3988,2,c	;volatile
  2407                           
  2408                           ;LCD.c: 48: TRISDbits.RD0=0;
  2409  0015DC  9095               	bcf	3989,0,c	;volatile
  2410                           
  2411                           ;LCD.c: 49: TRISDbits.RD1=0;
  2412  0015DE  9295               	bcf	3989,1,c	;volatile
  2413                           
  2414                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2415  0015E0  0E27               	movlw	39
  2416  0015E2  0100               	movlb	0	; () banked
  2417  0015E4  6F60               	movwf	??_initLCD& (0+255),b
  2418  0015E6  0EF5               	movlw	245
  2419  0015E8                     u3517:
  2420  0015E8  2EE8               	decfsz	wreg,f,c
  2421  0015EA  D7FE               	bra	u3517
  2422  0015EC  2F60               	decfsz	??_initLCD& (0+255),f,b
  2423  0015EE  D7FC               	bra	u3517
  2424                           
  2425                           ;LCD.c: 52: LCDout(0b0011);
  2426  0015F0  0E03               	movlw	3
  2427  0015F2  EC87  F00A         	call	_LCDout
  2428                           
  2429                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2430  0015F6  0E0D               	movlw	13
  2431  0015F8  0100               	movlb	0	; () banked
  2432  0015FA  6F60               	movwf	??_initLCD& (0+255),b
  2433  0015FC  0EFB               	movlw	251
  2434  0015FE                     u3527:
  2435  0015FE  2EE8               	decfsz	wreg,f,c
  2436  001600  D7FE               	bra	u3527
  2437  001602  2F60               	decfsz	??_initLCD& (0+255),f,b
  2438  001604  D7FC               	bra	u3527
  2439  001606  D000               	nop2	
  2440                           
  2441                           ;LCD.c: 54: LCDout(0b0011);
  2442  001608  0E03               	movlw	3
  2443  00160A  EC87  F00A         	call	_LCDout
  2444                           
  2445                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2446  00160E  0E85               	movlw	133
  2447  001610                     u3537:
  2448  001610  2EE8               	decfsz	wreg,f,c
  2449  001612  D7FE               	bra	u3537
  2450  001614  F000               	nop	
  2451                           
  2452                           ;LCD.c: 56: LCDout(0b0011);
  2453  001616  0E03               	movlw	3
  2454  001618  EC87  F00A         	call	_LCDout
  2455                           
  2456                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2457  00161C  0E21               	movlw	33
  2458  00161E                     u3547:
  2459  00161E  2EE8               	decfsz	wreg,f,c
  2460  001620  D7FE               	bra	u3547
  2461  001622  F000               	nop	
  2462                           
  2463                           ;LCD.c: 58: LCDout(0b0010);
  2464  001624  0E02               	movlw	2
  2465  001626  EC87  F00A         	call	_LCDout
  2466                           
  2467                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2468  00162A  0E21               	movlw	33
  2469  00162C                     u3557:
  2470  00162C  2EE8               	decfsz	wreg,f,c
  2471  00162E  D7FE               	bra	u3557
  2472  001630  F000               	nop	
  2473                           
  2474                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2475  001632  0E00               	movlw	0
  2476  001634  6E30               	movwf	SendLCD@type,c
  2477  001636  0E28               	movlw	40
  2478  001638  EC4C  F00E         	call	_SendLCD
  2479                           
  2480                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2481  00163C  0E21               	movlw	33
  2482  00163E                     u3567:
  2483  00163E  2EE8               	decfsz	wreg,f,c
  2484  001640  D7FE               	bra	u3567
  2485  001642  F000               	nop	
  2486                           
  2487                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2488  001644  0E00               	movlw	0
  2489  001646  6E30               	movwf	SendLCD@type,c
  2490  001648  0E08               	movlw	8
  2491  00164A  EC4C  F00E         	call	_SendLCD
  2492                           
  2493                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2494  00164E  0E21               	movlw	33
  2495  001650                     u3577:
  2496  001650  2EE8               	decfsz	wreg,f,c
  2497  001652  D7FE               	bra	u3577
  2498  001654  F000               	nop	
  2499                           
  2500                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2501  001656  0E00               	movlw	0
  2502  001658  6E30               	movwf	SendLCD@type,c
  2503  00165A  0E01               	movlw	1
  2504  00165C  EC4C  F00E         	call	_SendLCD
  2505                           
  2506                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2507  001660  0E0D               	movlw	13
  2508  001662  0100               	movlb	0	; () banked
  2509  001664  6F60               	movwf	??_initLCD& (0+255),b
  2510  001666  0EFB               	movlw	251
  2511  001668                     u3587:
  2512  001668  2EE8               	decfsz	wreg,f,c
  2513  00166A  D7FE               	bra	u3587
  2514  00166C  2F60               	decfsz	??_initLCD& (0+255),f,b
  2515  00166E  D7FC               	bra	u3587
  2516  001670  D000               	nop2	
  2517                           
  2518                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2519  001672  0E00               	movlw	0
  2520  001674  6E30               	movwf	SendLCD@type,c
  2521  001676  0E06               	movlw	6
  2522  001678  EC4C  F00E         	call	_SendLCD
  2523                           
  2524                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2525  00167C  0E21               	movlw	33
  2526  00167E                     u3597:
  2527  00167E  2EE8               	decfsz	wreg,f,c
  2528  001680  D7FE               	bra	u3597
  2529  001682  F000               	nop	
  2530                           
  2531                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2532  001684  0E00               	movlw	0
  2533  001686  6E30               	movwf	SendLCD@type,c
  2534  001688  0E0C               	movlw	12
  2535  00168A  EC4C  F00E         	call	_SendLCD
  2536                           
  2537                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2538  00168E  0E21               	movlw	33
  2539  001690                     u3607:
  2540  001690  2EE8               	decfsz	wreg,f,c
  2541  001692  D7FE               	bra	u3607
  2542  001694  F000               	nop	
  2543  001696  0012               	return		;funcret
  2544  001698                     __end_of_initLCD:
  2545                           	opt stack 0
  2546                           tblptru	equ	0xFF8
  2547                           prodh	equ	0xFF4
  2548                           prodl	equ	0xFF3
  2549                           intcon	equ	0xFF2
  2550                           postinc0	equ	0xFEE
  2551                           wreg	equ	0xFE8
  2552                           indf1	equ	0xFE7
  2553                           plusw1	equ	0xFE3
  2554                           fsr1h	equ	0xFE2
  2555                           fsr1l	equ	0xFE1
  2556                           indf2	equ	0xFDF
  2557                           postinc2	equ	0xFDE
  2558                           postdec2	equ	0xFDD
  2559                           plusw2	equ	0xFDB
  2560                           fsr2h	equ	0xFDA
  2561                           fsr2l	equ	0xFD9
  2562                           status	equ	0xFD8
  2563                           
  2564 ;; *************** function _initIR *****************
  2565 ;; Defined at:
  2566 ;;		line 7 in file "IR_Reading.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;		None
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, status,2
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2580 ;;      Params:         0       0       0       0
  2581 ;;      Locals:         0       0       0       0
  2582 ;;      Temps:          0       0       0       0
  2583 ;;      Totals:         0       0       0       0
  2584 ;;Total ram usage:        0 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    3
  2587 ;; This function calls:
  2588 ;;		Nothing
  2589 ;; This function is called by:
  2590 ;;		_main
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           	psect	text5
  2595  001D42                     __ptext5:
  2596                           	opt stack 0
  2597  001D42                     _initIR:
  2598                           	opt stack 27
  2599                           
  2600                           ;IR_Reading.c: 13: LATAbits.LA2=0;
  2601                           
  2602                           ;incstack = 0
  2603  001D42  9489               	bcf	3977,2,c	;volatile
  2604                           
  2605                           ;IR_Reading.c: 14: LATAbits.LA3=0;
  2606  001D44  9689               	bcf	3977,3,c	;volatile
  2607                           
  2608                           ;IR_Reading.c: 16: TRISAbits.RA2=1;
  2609  001D46  8492               	bsf	3986,2,c	;volatile
  2610                           
  2611                           ;IR_Reading.c: 17: TRISAbits.RA3=1;
  2612  001D48  8692               	bsf	3986,3,c	;volatile
  2613                           
  2614                           ;IR_Reading.c: 19: ANSEL0bits.ANS2=0;
  2615  001D4A  94B8               	bcf	4024,2,c	;volatile
  2616                           
  2617                           ;IR_Reading.c: 20: ANSEL0bits.ANS3=0;
  2618  001D4C  96B8               	bcf	4024,3,c	;volatile
  2619                           
  2620                           ;IR_Reading.c: 23: ANSEL0bits.ANS6=0;
  2621  001D4E  9CB8               	bcf	4024,6,c	;volatile
  2622                           
  2623                           ;IR_Reading.c: 24: ANSEL0bits.ANS7=0;
  2624  001D50  9EB8               	bcf	4024,7,c	;volatile
  2625                           
  2626                           ;IR_Reading.c: 29: CAP1CON=0b00000110;
  2627  001D52  0E06               	movlw	6
  2628  001D54  6E63               	movwf	3939,c	;volatile
  2629                           
  2630                           ;IR_Reading.c: 30: CAP2CON=0b00000110;
  2631  001D56  0E06               	movlw	6
  2632  001D58  6E62               	movwf	3938,c	;volatile
  2633                           
  2634                           ;IR_Reading.c: 33: TRISEbits.RE0=0;
  2635  001D5A  9096               	bcf	3990,0,c	;volatile
  2636                           
  2637                           ;IR_Reading.c: 36: TRISEbits.RE1=0;
  2638  001D5C  9296               	bcf	3990,1,c	;volatile
  2639                           
  2640                           ;IR_Reading.c: 46: T5CON=0b01011001;
  2641  001D5E  0E59               	movlw	89
  2642  001D60  6EB7               	movwf	4023,c	;volatile
  2643  001D62  0012               	return		;funcret
  2644  001D64                     __end_of_initIR:
  2645                           	opt stack 0
  2646                           tblptru	equ	0xFF8
  2647                           prodh	equ	0xFF4
  2648                           prodl	equ	0xFF3
  2649                           intcon	equ	0xFF2
  2650                           postinc0	equ	0xFEE
  2651                           wreg	equ	0xFE8
  2652                           indf1	equ	0xFE7
  2653                           plusw1	equ	0xFE3
  2654                           fsr1h	equ	0xFE2
  2655                           fsr1l	equ	0xFE1
  2656                           indf2	equ	0xFDF
  2657                           postinc2	equ	0xFDE
  2658                           postdec2	equ	0xFDD
  2659                           plusw2	equ	0xFDB
  2660                           fsr2h	equ	0xFDA
  2661                           fsr2l	equ	0xFD9
  2662                           status	equ	0xFD8
  2663                           
  2664 ;; *************** function _fullSpeedBack *****************
  2665 ;; Defined at:
  2666 ;;		line 130 in file "dc_motor.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  2669 ;;		 -> main@mL(9), 
  2670 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  2671 ;;		 -> main@mR(9), 
  2672 ;;  power           1   27[BANK0 ] unsigned char 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2684 ;;      Params:         0       5       0       0
  2685 ;;      Locals:         0       0       0       0
  2686 ;;      Temps:          0       0       0       0
  2687 ;;      Totals:         0       5       0       0
  2688 ;;Total ram usage:        5 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    6
  2691 ;; This function calls:
  2692 ;;		_fullSpeed
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text6
  2699  001ACE                     __ptext6:
  2700                           	opt stack 0
  2701  001ACE                     _fullSpeedBack:
  2702                           	opt stack 24
  2703                           
  2704                           ;dc_motor.c: 133: mL->direction=0;
  2705                           
  2706                           ;incstack = 0
  2707  001ACE  0100               	movlb	0	; () banked
  2708  001AD0  EE20 F001          	lfsr	2,1
  2709  001AD4  5177               	movf	fullSpeedBack@mL& (0+255),w,b
  2710  001AD6  26D9               	addwf	fsr2l,f,c
  2711  001AD8  5178               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2712  001ADA  22DA               	addwfc	fsr2h,f,c
  2713  001ADC  0E00               	movlw	0
  2714  001ADE  6EDF               	movwf	indf2,c
  2715                           
  2716                           ;dc_motor.c: 134: mR->direction=0;
  2717  001AE0  EE20 F001          	lfsr	2,1
  2718  001AE4  5179               	movf	fullSpeedBack@mR& (0+255),w,b
  2719  001AE6  26D9               	addwf	fsr2l,f,c
  2720  001AE8  517A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2721  001AEA  22DA               	addwfc	fsr2h,f,c
  2722  001AEC  0E00               	movlw	0
  2723  001AEE  6EDF               	movwf	indf2,c
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;dc_motor.c: 135: fullSpeed(mL, mR, power);
  2727  001AF0  C077  F071         	movff	fullSpeedBack@mL,fullSpeed@mL
  2728  001AF4  C078  F072         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2729  001AF8  C079  F073         	movff	fullSpeedBack@mR,fullSpeed@mR
  2730  001AFC  C07A  F074         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2731  001B00  C07B  F075         	movff	fullSpeedBack@power,fullSpeed@power
  2732  001B04  EC37  F00C         	call	_fullSpeed	;wreg free
  2733  001B08  0012               	return		;funcret
  2734  001B0A                     __end_of_fullSpeedBack:
  2735                           	opt stack 0
  2736                           tblptru	equ	0xFF8
  2737                           prodh	equ	0xFF4
  2738                           prodl	equ	0xFF3
  2739                           intcon	equ	0xFF2
  2740                           postinc0	equ	0xFEE
  2741                           wreg	equ	0xFE8
  2742                           indf1	equ	0xFE7
  2743                           plusw1	equ	0xFE3
  2744                           fsr1h	equ	0xFE2
  2745                           fsr1l	equ	0xFE1
  2746                           indf2	equ	0xFDF
  2747                           postinc2	equ	0xFDE
  2748                           postdec2	equ	0xFDD
  2749                           plusw2	equ	0xFDB
  2750                           fsr2h	equ	0xFDA
  2751                           fsr2l	equ	0xFD9
  2752                           status	equ	0xFD8
  2753                           
  2754 ;; *************** function _enableSensor *****************
  2755 ;; Defined at:
  2756 ;;		line 83 in file "IR_Reading.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  sensor          1    wreg     unsigned char 
  2759 ;;  status          1   43[COMRAM] unsigned char 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  sensor          1   44[COMRAM] unsigned char 
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  1    wreg      void 
  2764 ;; Registers used:
  2765 ;;		wreg, status,2, status,0
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2771 ;;      Params:         1       0       0       0
  2772 ;;      Locals:         1       0       0       0
  2773 ;;      Temps:          0       0       0       0
  2774 ;;      Totals:         2       0       0       0
  2775 ;;Total ram usage:        2 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:    3
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_main
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text7
  2786  001CF6                     __ptext7:
  2787                           	opt stack 0
  2788  001CF6                     _enableSensor:
  2789                           	opt stack 27
  2790                           
  2791                           ;incstack = 0
  2792                           ;enableSensor@sensor stored from wreg
  2793  001CF6  6E2D               	movwf	enableSensor@sensor,c
  2794                           
  2795                           ;IR_Reading.c: 85: if (sensor==0){
  2796  001CF8  502D               	movf	enableSensor@sensor,w,c
  2797  001CFA  A4D8               	btfss	status,2,c
  2798  001CFC  D006               	goto	l117
  2799                           
  2800                           ;IR_Reading.c: 86: LATEbits.LATE0 = status;
  2801  001CFE  B02C               	btfsc	enableSensor@status,0,c
  2802  001D00  D002               	bra	u1935
  2803  001D02  908D               	bcf	3981,0,c	;volatile
  2804  001D04  D001               	bra	u1936
  2805  001D06                     u1935:
  2806  001D06  808D               	bsf	3981,0,c	;volatile
  2807  001D08                     u1936:
  2808                           
  2809                           ;IR_Reading.c: 87: } else if (sensor==1){
  2810  001D08  0012               	return	
  2811  001D0A                     l117:
  2812  001D0A  042D               	decf	enableSensor@sensor,w,c
  2813  001D0C  A4D8               	btfss	status,2,c
  2814  001D0E  0012               	return	
  2815                           
  2816                           ;IR_Reading.c: 88: LATEbits.LATE1 = status;
  2817  001D10  B02C               	btfsc	enableSensor@status,0,c
  2818  001D12  D002               	bra	u1955
  2819  001D14  928D               	bcf	3981,1,c	;volatile
  2820  001D16  D001               	bra	u1956
  2821  001D18                     u1955:
  2822  001D18  828D               	bsf	3981,1,c	;volatile
  2823  001D1A                     u1956:
  2824  001D1A  0012               	return	
  2825  001D1C                     __end_of_enableSensor:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           prodh	equ	0xFF4
  2829                           prodl	equ	0xFF3
  2830                           intcon	equ	0xFF2
  2831                           postinc0	equ	0xFEE
  2832                           wreg	equ	0xFE8
  2833                           indf1	equ	0xFE7
  2834                           plusw1	equ	0xFE3
  2835                           fsr1h	equ	0xFE2
  2836                           fsr1l	equ	0xFE1
  2837                           indf2	equ	0xFDF
  2838                           postinc2	equ	0xFDE
  2839                           postdec2	equ	0xFDD
  2840                           plusw2	equ	0xFDB
  2841                           fsr2h	equ	0xFDA
  2842                           fsr2l	equ	0xFD9
  2843                           status	equ	0xFD8
  2844                           
  2845 ;; *************** function _VerifySignal *****************
  2846 ;; Defined at:
  2847 ;;		line 39 in file "RFID_Reader.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  ReceivedStri    2    2[BANK0 ] PTR unsigned char 
  2850 ;;		 -> ReceivedString(16), 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  translation    12    8[BANK0 ] unsigned char [12]
  2853 ;;  i               1   22[BANK0 ] unsigned char 
  2854 ;;  ASCIICheckSu    1   21[BANK0 ] unsigned char 
  2855 ;;  xorOutput       1   20[BANK0 ] unsigned char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      unsigned char 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2865 ;;      Params:         0       2       0       0
  2866 ;;      Locals:         0      15       0       0
  2867 ;;      Temps:          0       4       0       0
  2868 ;;      Totals:         0      21       0       0
  2869 ;;Total ram usage:       21 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    4
  2872 ;; This function calls:
  2873 ;;		_memset
  2874 ;; This function is called by:
  2875 ;;		_main
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text8
  2880  00119E                     __ptext8:
  2881                           	opt stack 0
  2882  00119E                     _VerifySignal:
  2883                           	opt stack 26
  2884                           
  2885                           ;RFID_Reader.c: 40: unsigned char i=0;
  2886                           
  2887                           ;incstack = 0
  2888  00119E  0E00               	movlw	0
  2889  0011A0  0100               	movlb	0	; () banked
  2890  0011A2  6F76               	movwf	VerifySignal@i& (0+255),b
  2891                           
  2892                           ;RFID_Reader.c: 41: unsigned char xorOutput=0;
  2893  0011A4  0E00               	movlw	0
  2894  0011A6  6F74               	movwf	VerifySignal@xorOutput& (0+255),b
  2895                           
  2896                           ;RFID_Reader.c: 42: unsigned char translation[12];
  2897                           ;RFID_Reader.c: 43: unsigned char ASCIICheckSum=0;
  2898  0011A8  0E00               	movlw	0
  2899  0011AA  6F75               	movwf	VerifySignal@ASCIICheckSum& (0+255),b
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;RFID_Reader.c: 44: memset(translation,0,12);
  2903  0011AC  0E68               	movlw	low VerifySignal@translation
  2904  0011AE  6E2C               	movwf	memset@p1,c
  2905  0011B0  0E00               	movlw	high VerifySignal@translation
  2906  0011B2  6E2D               	movwf	memset@p1+1,c
  2907  0011B4  0E00               	movlw	0
  2908  0011B6  6E2F               	movwf	memset@c+1,c
  2909  0011B8  0E00               	movlw	0
  2910  0011BA  6E2E               	movwf	memset@c,c
  2911  0011BC  0E00               	movlw	0
  2912  0011BE  6E31               	movwf	memset@n+1,c
  2913  0011C0  0E0C               	movlw	12
  2914  0011C2  6E30               	movwf	memset@n,c
  2915  0011C4  EC64  F00E         	call	_memset	;wreg free
  2916                           
  2917                           ;RFID_Reader.c: 47: for(i=0;i<12;i++){
  2918  0011C8  0E00               	movlw	0
  2919  0011CA  0100               	movlb	0	; () banked
  2920  0011CC  6F76               	movwf	VerifySignal@i& (0+255),b
  2921  0011CE                     l3578:
  2922                           
  2923                           ; BSR set to: 0
  2924  0011CE  0E0B               	movlw	11
  2925  0011D0  6576               	cpfsgt	VerifySignal@i& (0+255),b
  2926  0011D2  D001               	goto	l263
  2927  0011D4  D04B               	goto	u3160
  2928  0011D6                     l263:
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;RFID_Reader.c: 48: if(ReceivedString[i]>'F'){
  2932                           
  2933                           ; BSR set to: 0
  2934  0011D6  5176               	movf	VerifySignal@i& (0+255),w,b
  2935  0011D8  0D01               	mullw	1
  2936  0011DA  50F3               	movf	prodl,w,c
  2937  0011DC  2562               	addwf	VerifySignal@ReceivedString& (0+255),w,b
  2938  0011DE  6ED9               	movwf	fsr2l,c
  2939  0011E0  50F4               	movf	prodh,w,c
  2940  0011E2  2163               	addwfc	(VerifySignal@ReceivedString+1)& (0+255),w,b
  2941  0011E4  6EDA               	movwf	fsr2h,c
  2942  0011E6  0E46               	movlw	70
  2943  0011E8  64DF               	cpfsgt	indf2,c
  2944  0011EA  D002               	goto	l265
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;RFID_Reader.c: 50: return 0;
  2948  0011EC  0E00               	movlw	0
  2949                           
  2950                           ; BSR set to: 0
  2951  0011EE  0012               	return	
  2952  0011F0                     l265:
  2953                           
  2954                           ; BSR set to: 0
  2955                           
  2956                           ; BSR set to: 0
  2957  0011F0  5176               	movf	VerifySignal@i& (0+255),w,b
  2958  0011F2  0D01               	mullw	1
  2959  0011F4  50F3               	movf	prodl,w,c
  2960  0011F6  2562               	addwf	VerifySignal@ReceivedString& (0+255),w,b
  2961  0011F8  6ED9               	movwf	fsr2l,c
  2962  0011FA  50F4               	movf	prodh,w,c
  2963  0011FC  2163               	addwfc	(VerifySignal@ReceivedString+1)& (0+255),w,b
  2964  0011FE  6EDA               	movwf	fsr2h,c
  2965  001200  0E40               	movlw	64
  2966  001202  64DF               	cpfsgt	indf2,c
  2967  001204  D013               	goto	l268
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;RFID_Reader.c: 52: translation[i]=ReceivedString[i]-'A'+10;
  2971  001206  5176               	movf	VerifySignal@i& (0+255),w,b
  2972  001208  0D01               	mullw	1
  2973  00120A  0E68               	movlw	low VerifySignal@translation
  2974  00120C  24F3               	addwf	prodl,w,c
  2975  00120E  6ED9               	movwf	fsr2l,c
  2976  001210  0E00               	movlw	high VerifySignal@translation
  2977  001212  20F4               	addwfc	prodh,w,c
  2978  001214  6EDA               	movwf	fsr2h,c
  2979  001216  5176               	movf	VerifySignal@i& (0+255),w,b
  2980  001218  0D01               	mullw	1
  2981  00121A  50F3               	movf	prodl,w,c
  2982  00121C  2562               	addwf	VerifySignal@ReceivedString& (0+255),w,b
  2983  00121E  6EE1               	movwf	fsr1l,c
  2984  001220  50F4               	movf	prodh,w,c
  2985  001222  2163               	addwfc	(VerifySignal@ReceivedString+1)& (0+255),w,b
  2986  001224  6EE2               	movwf	fsr1h,c
  2987  001226  50E7               	movf	indf1,w,c
  2988  001228  0FC9               	addlw	201
  2989  00122A  D01D               	goto	L5
  2990  00122C                     l268:
  2991                           
  2992                           ; BSR set to: 0
  2993                           
  2994                           ; BSR set to: 0
  2995  00122C  5176               	movf	VerifySignal@i& (0+255),w,b
  2996  00122E  0D01               	mullw	1
  2997  001230  50F3               	movf	prodl,w,c
  2998  001232  2562               	addwf	VerifySignal@ReceivedString& (0+255),w,b
  2999  001234  6ED9               	movwf	fsr2l,c
  3000  001236  50F4               	movf	prodh,w,c
  3001  001238  2163               	addwfc	(VerifySignal@ReceivedString+1)& (0+255),w,b
  3002  00123A  6EDA               	movwf	fsr2h,c
  3003  00123C  0E2F               	movlw	47
  3004  00123E  64DF               	cpfsgt	indf2,c
  3005  001240  D013               	goto	l270
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;RFID_Reader.c: 55: translation[i]=ReceivedString[i]-'0';
  3009  001242  5176               	movf	VerifySignal@i& (0+255),w,b
  3010  001244  0D01               	mullw	1
  3011  001246  0E68               	movlw	low VerifySignal@translation
  3012  001248  24F3               	addwf	prodl,w,c
  3013  00124A  6ED9               	movwf	fsr2l,c
  3014  00124C  0E00               	movlw	high VerifySignal@translation
  3015  00124E  20F4               	addwfc	prodh,w,c
  3016  001250  6EDA               	movwf	fsr2h,c
  3017  001252  5176               	movf	VerifySignal@i& (0+255),w,b
  3018  001254  0D01               	mullw	1
  3019  001256  50F3               	movf	prodl,w,c
  3020  001258  2562               	addwf	VerifySignal@ReceivedString& (0+255),w,b
  3021  00125A  6EE1               	movwf	fsr1l,c
  3022  00125C  50F4               	movf	prodh,w,c
  3023  00125E  2163               	addwfc	(VerifySignal@ReceivedString+1)& (0+255),w,b
  3024  001260  6EE2               	movwf	fsr1h,c
  3025  001262  50E7               	movf	indf1,w,c
  3026  001264  0FD0               	addlw	208
  3027  001266                     L5:
  3028  001266  6EDF               	movwf	indf2,c
  3029  001268                     l270:
  3030                           
  3031                           ; BSR set to: 0
  3032                           
  3033                           ; BSR set to: 0
  3034                           
  3035                           ; BSR set to: 0
  3036                           
  3037                           ; BSR set to: 0
  3038  001268  2B76               	incf	VerifySignal@i& (0+255),f,b
  3039  00126A  D7B1               	goto	l3578
  3040  00126C                     u3160:
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;RFID_Reader.c: 56: }
  3044                           ;RFID_Reader.c: 57: }
  3045                           ;RFID_Reader.c: 60: for (i=0;i<5;i++) {
  3046                           
  3047                           ; BSR set to: 0
  3048  00126C  0E00               	movlw	0
  3049  00126E  6F76               	movwf	VerifySignal@i& (0+255),b
  3050  001270                     l3604:
  3051                           
  3052                           ; BSR set to: 0
  3053  001270  0E04               	movlw	4
  3054  001272  6576               	cpfsgt	VerifySignal@i& (0+255),b
  3055  001274  D001               	goto	l271
  3056  001276  D022               	goto	u3180
  3057  001278                     l271:
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;RFID_Reader.c: 61: xorOutput^=(translation[2*i]<<4)+translation[2*i+1];
  3061                           
  3062                           ; BSR set to: 0
  3063  001278  5176               	movf	VerifySignal@i& (0+255),w,b
  3064  00127A  6F64               	movwf	??_VerifySignal& (0+255),b
  3065  00127C  6B65               	clrf	(??_VerifySignal+1)& (0+255),b
  3066  00127E  90D8               	bcf	status,0,c
  3067  001280  3764               	rlcf	??_VerifySignal& (0+255),f,b
  3068  001282  3765               	rlcf	(??_VerifySignal+1)& (0+255),f,b
  3069  001284  0E01               	movlw	1
  3070  001286  2764               	addwf	??_VerifySignal& (0+255),f,b
  3071  001288  0E00               	movlw	0
  3072  00128A  2365               	addwfc	(??_VerifySignal+1)& (0+255),f,b
  3073  00128C  0E68               	movlw	low VerifySignal@translation
  3074  00128E  2564               	addwf	??_VerifySignal& (0+255),w,b
  3075  001290  6ED9               	movwf	fsr2l,c
  3076  001292  0E00               	movlw	high VerifySignal@translation
  3077  001294  2165               	addwfc	(??_VerifySignal+1)& (0+255),w,b
  3078  001296  6EDA               	movwf	fsr2h,c
  3079  001298  50DF               	movf	indf2,w,c
  3080  00129A  6F66               	movwf	(??_VerifySignal+2)& (0+255),b
  3081  00129C  5176               	movf	VerifySignal@i& (0+255),w,b
  3082  00129E  0D02               	mullw	2
  3083  0012A0  0E68               	movlw	low VerifySignal@translation
  3084  0012A2  24F3               	addwf	prodl,w,c
  3085  0012A4  6ED9               	movwf	fsr2l,c
  3086  0012A6  0E00               	movlw	high VerifySignal@translation
  3087  0012A8  20F4               	addwfc	prodh,w,c
  3088  0012AA  6EDA               	movwf	fsr2h,c
  3089  0012AC  50DF               	movf	indf2,w,c
  3090  0012AE  6F67               	movwf	(??_VerifySignal+3)& (0+255),b
  3091  0012B0  3967               	swapf	(??_VerifySignal+3)& (0+255),w,b
  3092  0012B2  0BF0               	andlw	240
  3093  0012B4  2566               	addwf	(??_VerifySignal+2)& (0+255),w,b
  3094  0012B6  1B74               	xorwf	VerifySignal@xorOutput& (0+255),f,b
  3095                           
  3096                           ; BSR set to: 0
  3097  0012B8  2B76               	incf	VerifySignal@i& (0+255),f,b
  3098  0012BA  D7DA               	goto	l3604
  3099  0012BC                     u3180:
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;RFID_Reader.c: 62: }
  3103                           ;RFID_Reader.c: 65: ASCIICheckSum=(translation[10]<<4)+(translation[11]&0xF);
  3104                           
  3105                           ; BSR set to: 0
  3106  0012BC  C073  F064         	movff	VerifySignal@translation+11,??_VerifySignal
  3107  0012C0  0E0F               	movlw	15
  3108  0012C2  1764               	andwf	??_VerifySignal& (0+255),f,b
  3109  0012C4  3972               	swapf	(VerifySignal@translation+10)& (0+255),w,b
  3110  0012C6  0BF0               	andlw	240
  3111  0012C8  2564               	addwf	??_VerifySignal& (0+255),w,b
  3112  0012CA  6F75               	movwf	VerifySignal@ASCIICheckSum& (0+255),b
  3113                           
  3114                           ;RFID_Reader.c: 67: if (ASCIICheckSum==xorOutput){
  3115  0012CC  5174               	movf	VerifySignal@xorOutput& (0+255),w,b
  3116  0012CE  1975               	xorwf	VerifySignal@ASCIICheckSum& (0+255),w,b
  3117  0012D0  A4D8               	btfss	status,2,c
  3118  0012D2  D002               	goto	l273
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;RFID_Reader.c: 68: return 1;
  3122  0012D4  0E01               	movlw	1
  3123                           
  3124                           ; BSR set to: 0
  3125  0012D6  0012               	return	
  3126  0012D8                     l273:
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;RFID_Reader.c: 69: }
  3130                           ;RFID_Reader.c: 71: return 0;
  3131                           
  3132                           ; BSR set to: 0
  3133  0012D8  0E00               	movlw	0
  3134  0012DA  0012               	return	
  3135  0012DC                     __end_of_VerifySignal:
  3136                           	opt stack 0
  3137                           tblptru	equ	0xFF8
  3138                           prodh	equ	0xFF4
  3139                           prodl	equ	0xFF3
  3140                           intcon	equ	0xFF2
  3141                           postinc0	equ	0xFEE
  3142                           wreg	equ	0xFE8
  3143                           indf1	equ	0xFE7
  3144                           plusw1	equ	0xFE3
  3145                           fsr1h	equ	0xFE2
  3146                           fsr1l	equ	0xFE1
  3147                           indf2	equ	0xFDF
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           plusw2	equ	0xFDB
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155 ;; *************** function _memset *****************
  3156 ;; Defined at:
  3157 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  p1              2   43[COMRAM] PTR void 
  3160 ;;		 -> VerifySignal@translation(12), 
  3161 ;;  c               2   45[COMRAM] int 
  3162 ;;  n               2   47[COMRAM] unsigned int 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  p               2    0[BANK0 ] PTR unsigned char 
  3165 ;;		 -> VerifySignal@translation(12), 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  2   43[COMRAM] PTR void 
  3168 ;; Registers used:
  3169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3175 ;;      Params:         6       0       0       0
  3176 ;;      Locals:         0       2       0       0
  3177 ;;      Temps:          0       0       0       0
  3178 ;;      Totals:         6       2       0       0
  3179 ;;Total ram usage:        8 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    3
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_VerifySignal
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text9
  3190  001CC8                     __ptext9:
  3191                           	opt stack 0
  3192  001CC8                     _memset:
  3193                           	opt stack 26
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;incstack = 0
  3197  001CC8  C02C  F060         	movff	memset@p1,memset@p
  3198  001CCC  C02D  F061         	movff	memset@p1+1,memset@p+1
  3199  001CD0  D009               	goto	l930
  3200  001CD2                     l3354:
  3201  001CD2  C060  FFD9         	movff	memset@p,fsr2l
  3202  001CD6  C061  FFDA         	movff	memset@p+1,fsr2h
  3203  001CDA  C02E  FFDF         	movff	memset@c,indf2
  3204  001CDE  0100               	movlb	0	; () banked
  3205  001CE0  4B60               	infsnz	memset@p& (0+255),f,b
  3206  001CE2  2B61               	incf	(memset@p+1)& (0+255),f,b
  3207  001CE4                     l930:
  3208                           
  3209                           ; BSR set to: 0
  3210  001CE4  0630               	decf	memset@n,f,c
  3211  001CE6  A0D8               	btfss	status,0,c
  3212  001CE8  0631               	decf	memset@n+1,f,c
  3213  001CEA  2830               	incf	memset@n,w,c
  3214  001CEC  E1F2               	bnz	l3354
  3215  001CEE  2831               	incf	memset@n+1,w,c
  3216  001CF0  B4D8               	btfsc	status,2,c
  3217  001CF2  0012               	return	
  3218  001CF4  D7EE               	goto	l931
  3219  001CF6                     __end_of_memset:
  3220                           	opt stack 0
  3221                           tblptru	equ	0xFF8
  3222                           prodh	equ	0xFF4
  3223                           prodl	equ	0xFF3
  3224                           intcon	equ	0xFF2
  3225                           postinc0	equ	0xFEE
  3226                           wreg	equ	0xFE8
  3227                           indf1	equ	0xFE7
  3228                           plusw1	equ	0xFE3
  3229                           fsr1h	equ	0xFE2
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           plusw2	equ	0xFDB
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _ScanWithRange *****************
  3240 ;; Defined at:
  3241 ;;		line 98 in file "Movement.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  3244 ;;		 -> main@mL(9), 
  3245 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  3246 ;;		 -> main@mR(9), 
  3247 ;;  loops           2   32[BANK0 ] int 
  3248 ;;  MoveTime        2   34[BANK0 ] PTR int 
  3249 ;;		 -> main@MoveTime(100), 
  3250 ;;  Move            2   36[BANK0 ] PTR unsigned char 
  3251 ;;		 -> main@Move(1), 
  3252 ;;  MoveType        2   38[BANK0 ] PTR unsigned char 
  3253 ;;		 -> main@MoveType(50), 
  3254 ;;  RFID_Read       2   40[BANK0 ] PTR unsigned char 
  3255 ;;		 -> RFID_Read(1), 
  3256 ;;  millis          2   42[BANK0 ] PTR unsigned int 
  3257 ;;		 -> millis(2), 
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;  buf            40   48[BANK0 ] unsigned char [40]
  3260 ;;  SensorResult    4   98[BANK0 ] unsigned int [2]
  3261 ;;  RightFlag       2  103[BANK0 ] unsigned int 
  3262 ;;  TimeAboveThr    2   96[BANK0 ] unsigned int 
  3263 ;;  LeftFlag        2   94[BANK0 ] unsigned int 
  3264 ;;  DirectionFou    2   90[BANK0 ] const unsigned int 
  3265 ;;  i               2   88[BANK0 ] unsigned int 
  3266 ;;  LeftFlick       1  102[BANK0 ] const char 
  3267 ;;  MiniLeftFlic    1   93[BANK0 ] const unsigned char 
  3268 ;;  MotorPower      1   92[BANK0 ] const unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      unsigned char 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3278 ;;      Params:         0      16       0       0
  3279 ;;      Locals:         0      57       0       0
  3280 ;;      Temps:          0       4       0       0
  3281 ;;      Totals:         0      77       0       0
  3282 ;;Total ram usage:       77 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    7
  3285 ;; This function calls:
  3286 ;;		_LCD_String
  3287 ;;		_SendLCD
  3288 ;;		_SetLine
  3289 ;;		_delay_tenth_s
  3290 ;;		_grabLeftIR
  3291 ;;		_grabRightIR
  3292 ;;		_sprintf
  3293 ;;		_stop
  3294 ;;		_turnLeft
  3295 ;;		_turnRight
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text10
  3302  000A00                     __ptext10:
  3303                           	opt stack 0
  3304  000A00                     _ScanWithRange:
  3305                           	opt stack 23
  3306                           
  3307                           ;Movement.c: 103: unsigned int SensorResult[2]={0,0};
  3308                           
  3309                           ;incstack = 0
  3310  000A00  C0CB  F0C2         	movff	ScanWithRange@F3555,ScanWithRange@SensorResult
  3311  000A04  C0CC  F0C3         	movff	ScanWithRange@F3555+1,ScanWithRange@SensorResult+1
  3312  000A08  C0CD  F0C4         	movff	ScanWithRange@F3555+2,ScanWithRange@SensorResult+2
  3313  000A0C  C0CE  F0C5         	movff	ScanWithRange@F3555+3,ScanWithRange@SensorResult+3
  3314                           
  3315                           ;Movement.c: 104: unsigned int LeftFlag=0;
  3316  000A10  0E00               	movlw	0
  3317  000A12  0100               	movlb	0	; () banked
  3318  000A14  6FBF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3319  000A16  0E00               	movlw	0
  3320  000A18  6FBE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3321                           
  3322                           ;Movement.c: 105: unsigned int RightFlag=0;
  3323  000A1A  0E00               	movlw	0
  3324  000A1C  6FC8               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3325  000A1E  0E00               	movlw	0
  3326  000A20  6FC7               	movwf	ScanWithRange@RightFlag& (0+255),b
  3327                           
  3328                           ;Movement.c: 106: char buf[40];
  3329                           ;Movement.c: 107: unsigned int i=0;
  3330  000A22  0E00               	movlw	0
  3331  000A24  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3332  000A26  0E00               	movlw	0
  3333  000A28  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3334                           
  3335                           ;Movement.c: 108: unsigned int TimeAboveThreshold=0;
  3336  000A2A  0E00               	movlw	0
  3337  000A2C  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3338  000A2E  0E00               	movlw	0
  3339  000A30  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3340                           
  3341                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=500;
  3342  000A32  0E01               	movlw	1
  3343  000A34  6FBB               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3344  000A36  0EF4               	movlw	244
  3345  000A38  6FBA               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3346                           
  3347                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3348  000A3A  0E28               	movlw	40
  3349  000A3C  6FBC               	movwf	ScanWithRange@MotorPower& (0+255),b
  3350                           
  3351                           ;Movement.c: 114: const signed char LeftFlick=2;
  3352  000A3E  0E02               	movlw	2
  3353  000A40  6FC6               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3354                           
  3355                           ;Movement.c: 118: const unsigned char MiniLeftFlick=1;
  3356  000A42  0E01               	movlw	1
  3357  000A44  6FBD               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;Movement.c: 124: (MoveType[*Move]) = 2;
  3361  000A46  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3362  000A4A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3363  000A4E  50DF               	movf	indf2,w,c
  3364  000A50  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3365  000A52  518C               	movf	??_ScanWithRange& (0+255),w,b
  3366  000A54  0D01               	mullw	1
  3367  000A56  50F3               	movf	prodl,w,c
  3368  000A58  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3369  000A5A  6ED9               	movwf	fsr2l,c
  3370  000A5C  50F4               	movf	prodh,w,c
  3371  000A5E  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3372  000A60  6EDA               	movwf	fsr2h,c
  3373  000A62  0E02               	movlw	2
  3374  000A64  6EDF               	movwf	indf2,c
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;Movement.c: 125: (MoveTime[*Move]) = LeftFlick;
  3378  000A66  C0C6  F08C         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3379  000A6A  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3380  000A6C  BF8C               	btfsc	??_ScanWithRange& (0+255),7,b
  3381  000A6E  078D               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3382  000A70  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3383  000A74  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3384  000A78  50DF               	movf	indf2,w,c
  3385  000A7A  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3386  000A7C  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3387  000A7E  0D02               	mullw	2
  3388  000A80  50F3               	movf	prodl,w,c
  3389  000A82  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3390  000A84  6ED9               	movwf	fsr2l,c
  3391  000A86  50F4               	movf	prodh,w,c
  3392  000A88  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3393  000A8A  6EDA               	movwf	fsr2h,c
  3394  000A8C  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3395  000A90  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;Movement.c: 126: *Move = *Move+1;
  3399  000A94  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3400  000A98  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3401  000A9C  50DF               	movf	indf2,w,c
  3402  000A9E  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3403  000AA0  298C               	incf	??_ScanWithRange& (0+255),w,b
  3404  000AA2  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3405  000AA6  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3406  000AAA  6EDF               	movwf	indf2,c
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;Movement.c: 127: turnLeft(mL,mR, 100);
  3410  000AAC  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3411  000AB0  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3412  000AB4  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3413  000AB8  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3414  000ABC  0E64               	movlw	100
  3415  000ABE  6F7B               	movwf	turnLeft@power& (0+255),b
  3416  000AC0  ECA3  F00D         	call	_turnLeft	;wreg free
  3417                           
  3418                           ;Movement.c: 128: delay_tenth_s(LeftFlick);
  3419  000AC4  0100               	movlb	0	; () banked
  3420  000AC6  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3421  000AC8  ECDE  F00D         	call	_delay_tenth_s
  3422                           
  3423                           ;Movement.c: 129: stop(mL,mR);
  3424  000ACC  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3425  000AD0  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3426  000AD4  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3427  000AD8  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3428  000ADC  ECAB  F00B         	call	_stop	;wreg free
  3429                           
  3430                           ;Movement.c: 132: turnRight(mL,mR, MotorPower);
  3431  000AE0  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3432  000AE4  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3433  000AE8  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3434  000AEC  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3435  000AF0  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnRight@power
  3436  000AF4  EC85  F00D         	call	_turnRight	;wreg free
  3437                           
  3438                           ;Movement.c: 135: TMR0L = 0;
  3439  000AF8  0E00               	movlw	0
  3440  000AFA  6ED6               	movwf	4054,c	;volatile
  3441                           
  3442                           ;Movement.c: 136: TMR0H = 0;
  3443  000AFC  0E00               	movlw	0
  3444  000AFE  6ED7               	movwf	4055,c	;volatile
  3445                           
  3446                           ;Movement.c: 137: *millis = 0;
  3447  000B00  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3448  000B04  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3449  000B08  0E00               	movlw	0
  3450  000B0A  6EDE               	movwf	postinc2,c
  3451  000B0C  0E00               	movlw	0
  3452  000B0E  6EDD               	movwf	postdec2,c
  3453                           
  3454                           ;Movement.c: 138: T0CONbits.TMR0ON=1;
  3455  000B10  8ED5               	bsf	4053,7,c	;volatile
  3456                           
  3457                           ;Movement.c: 140: for (i=1; i<=loops; i++) {
  3458  000B12  0E00               	movlw	0
  3459  000B14  0100               	movlb	0	; () banked
  3460  000B16  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3461  000B18  0E01               	movlw	1
  3462  000B1A  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3463  000B1C  D1A0               	goto	l221
  3464  000B1E                     
  3465                           ; BSR set to: 0
  3466                           ;Movement.c: 143: SensorResult[0]=grabLeftIR();
  3467                           
  3468                           ; BSR set to: 0
  3469  000B1E  ECB0  F00C         	call	_grabLeftIR	;wreg free
  3470  000B22  C02C  F0C2         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3471  000B26  C02D  F0C3         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3472                           
  3473                           ;Movement.c: 144: SensorResult[1]=grabRightIR();
  3474  000B2A  EC75  F00C         	call	_grabRightIR	;wreg free
  3475  000B2E  C02C  F0C4         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3476  000B32  C02D  F0C5         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3477                           
  3478                           ;Movement.c: 148: CAP1BUFH=0;
  3479  000B36  0E00               	movlw	0
  3480  000B38  6E69               	movwf	3945,c	;volatile
  3481                           
  3482                           ;Movement.c: 149: CAP1BUFL=0;
  3483  000B3A  0E00               	movlw	0
  3484  000B3C  6E68               	movwf	3944,c	;volatile
  3485                           
  3486                           ;Movement.c: 150: CAP2BUFH=0;
  3487  000B3E  0E00               	movlw	0
  3488  000B40  6E67               	movwf	3943,c	;volatile
  3489                           
  3490                           ;Movement.c: 151: CAP2BUFL=0;
  3491  000B42  0E00               	movlw	0
  3492  000B44  6E66               	movwf	3942,c	;volatile
  3493                           
  3494                           ;Movement.c: 155: SendLCD(0b00000001,0);
  3495  000B46  0E00               	movlw	0
  3496  000B48  6E30               	movwf	SendLCD@type,c
  3497  000B4A  0E01               	movlw	1
  3498  000B4C  EC4C  F00E         	call	_SendLCD
  3499                           
  3500                           ;Movement.c: 156: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3501  000B50  0E21               	movlw	33
  3502  000B52                     u3617:
  3503  000B52  2EE8               	decfsz	wreg,f,c
  3504  000B54  D7FE               	bra	u3617
  3505  000B56  F000               	nop	
  3506                           
  3507                           ;Movement.c: 157: SendLCD(0b00000010,0);
  3508  000B58  0E00               	movlw	0
  3509  000B5A  6E30               	movwf	SendLCD@type,c
  3510  000B5C  0E02               	movlw	2
  3511  000B5E  EC4C  F00E         	call	_SendLCD
  3512                           
  3513                           ;Movement.c: 158: _delay((unsigned long)((2)*(8000000/4000.0)));
  3514  000B62  0E06               	movlw	6
  3515  000B64  0100               	movlb	0	; () banked
  3516  000B66  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3517  000B68  0E30               	movlw	48
  3518  000B6A                     u3627:
  3519  000B6A  2EE8               	decfsz	wreg,f,c
  3520  000B6C  D7FE               	bra	u3627
  3521  000B6E  2F8C               	decfsz	??_ScanWithRange& (0+255),f,b
  3522  000B70  D7FC               	bra	u3627
  3523  000B72  F000               	nop	
  3524                           
  3525                           ;Movement.c: 159: SetLine(1);
  3526  000B74  0E01               	movlw	1
  3527  000B76  EC31  F00E         	call	_SetLine
  3528                           
  3529                           ;Movement.c: 160: LCD_String("     ScanIR");
  3530  000B7A  0E2D               	movlw	low STR_1
  3531  000B7C  0100               	movlb	0	; () banked
  3532  000B7E  6F60               	movwf	LCD_String@string& (0+255),b
  3533  000B80  0E03               	movlw	high STR_1
  3534  000B82  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3535  000B84  ECEB  F00C         	call	_LCD_String	;wreg free
  3536                           
  3537                           ;Movement.c: 161: SetLine(2);
  3538  000B88  0E02               	movlw	2
  3539  000B8A  EC31  F00E         	call	_SetLine
  3540                           
  3541                           ;Movement.c: 162: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3542  000B8E  0E90               	movlw	low ScanWithRange@buf
  3543  000B90  0100               	movlb	0	; () banked
  3544  000B92  6F67               	movwf	sprintf@sp& (0+255),b
  3545  000B94  0E00               	movlw	high ScanWithRange@buf
  3546  000B96  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  3547  000B98  0E0C               	movlw	low (STR_6+1)
  3548  000B9A  6F69               	movwf	sprintf@f& (0+255),b
  3549  000B9C  0E03               	movlw	high (STR_6+1)
  3550  000B9E  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  3551  000BA0  C0C2  F06B         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3552  000BA4  C0C3  F06C         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3553  000BA8  C0C4  F06D         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3554  000BAC  C0C5  F06E         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3555  000BB0  EC7F  F007         	call	_sprintf	;wreg free
  3556                           
  3557                           ;Movement.c: 163: LCD_String(buf);
  3558  000BB4  0E90               	movlw	low ScanWithRange@buf
  3559  000BB6  0100               	movlb	0	; () banked
  3560  000BB8  6F60               	movwf	LCD_String@string& (0+255),b
  3561  000BBA  0E00               	movlw	high ScanWithRange@buf
  3562  000BBC  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3563  000BBE  ECEB  F00C         	call	_LCD_String	;wreg free
  3564                           
  3565                           ;Movement.c: 167: if (SensorResult[1]>DirectionFoundThreshold) {
  3566  000BC2  0100               	movlb	0	; () banked
  3567  000BC4  51C4               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3568  000BC6  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3569  000BC8  51C5               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3570  000BCA  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3571  000BCC  B0D8               	btfsc	status,0,c
  3572  000BCE  D008               	goto	l223
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;Movement.c: 168: RightFlag=*millis;
  3576  000BD0  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3577  000BD4  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3578  000BD8  CFDE F0C7          	movff	postinc2,ScanWithRange@RightFlag
  3579  000BDC  CFDD F0C8          	movff	postdec2,ScanWithRange@RightFlag+1
  3580  000BE0                     l223:
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;Movement.c: 169: }
  3584                           ;Movement.c: 171: if (SensorResult[0]>DirectionFoundThreshold) {
  3585                           
  3586                           ; BSR set to: 0
  3587  000BE0  51C2               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3588  000BE2  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3589  000BE4  51C3               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3590  000BE6  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3591  000BE8  B0D8               	btfsc	status,0,c
  3592  000BEA  D008               	goto	l224
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;Movement.c: 172: LeftFlag=*millis;
  3596  000BEC  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3597  000BF0  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3598  000BF4  CFDE F0BE          	movff	postinc2,ScanWithRange@LeftFlag
  3599  000BF8  CFDD F0BF          	movff	postdec2,ScanWithRange@LeftFlag+1
  3600  000BFC                     l224:
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;Movement.c: 173: }
  3604                           ;Movement.c: 180: if (LeftFlag>0) {
  3605                           
  3606                           ; BSR set to: 0
  3607  000BFC  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3608  000BFE  11BF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3609  000C00  B4D8               	btfsc	status,2,c
  3610  000C02  D122               	goto	l231
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;Movement.c: 183: if (RightFlag>0) {
  3614  000C04  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3615  000C06  11C8               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3616  000C08  B4D8               	btfsc	status,2,c
  3617  000C0A  D08A               	goto	l226
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;Movement.c: 184: TimeAboveThreshold=LeftFlag-RightFlag;
  3621  000C0C  C0C7  F08C         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3622  000C10  C0C8  F08D         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3623  000C14  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3624  000C16  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3625  000C18  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3626  000C1A  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3627  000C1C  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3628  000C1E  258C               	addwf	??_ScanWithRange& (0+255),w,b
  3629  000C20  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3630  000C22  51BF               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3631  000C24  218D               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3632  000C26  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;Movement.c: 185: TMR0L = 0;
  3636  000C28  0E00               	movlw	0
  3637  000C2A  6ED6               	movwf	4054,c	;volatile
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;Movement.c: 186: TMR0H = 0;
  3641  000C2C  0E00               	movlw	0
  3642  000C2E  6ED7               	movwf	4055,c	;volatile
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;Movement.c: 187: *millis = 0;
  3646  000C30  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3647  000C34  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3648  000C38  0E00               	movlw	0
  3649  000C3A  6EDE               	movwf	postinc2,c
  3650  000C3C  0E00               	movlw	0
  3651  000C3E  6EDD               	movwf	postdec2,c
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;Movement.c: 188: stop(mL,mR);
  3655  000C40  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3656  000C44  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3657  000C48  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3658  000C4C  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3659  000C50  ECAB  F00B         	call	_stop	;wreg free
  3660                           
  3661                           ;Movement.c: 189: while (*millis<(TimeAboveThreshold>>1)) {
  3662  000C54  D00C               	goto	l227
  3663  000C56                     
  3664                           ;Movement.c: 192: turnLeft(mL,mR, MotorPower);
  3665  000C56  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3666  000C5A  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3667  000C5E  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3668  000C62  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3669  000C66  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3670  000C6A  ECA3  F00D         	call	_turnLeft	;wreg free
  3671  000C6E                     l227:
  3672  000C6E  90D8               	bcf	status,0,c
  3673  000C70  0100               	movlb	0	; () banked
  3674  000C72  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3675  000C74  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3676  000C76  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3677  000C78  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3678  000C7A  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3679  000C7E  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3680  000C82  518C               	movf	??_ScanWithRange& (0+255),w,b
  3681  000C84  5CDE               	subwf	postinc2,w,c
  3682  000C86  518D               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3683  000C88  58DE               	subwfb	postinc2,w,c
  3684  000C8A  A0D8               	btfss	status,0,c
  3685  000C8C  D7E4               	goto	l228
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;Movement.c: 193: }
  3689                           ;Movement.c: 194: T0CONbits.TMR0ON=0;
  3690  000C8E  9ED5               	bcf	4053,7,c	;volatile
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;Movement.c: 195: stop(mL,mR);
  3694  000C90  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3695  000C94  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3696  000C98  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3697  000C9C  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3698  000CA0  ECAB  F00B         	call	_stop	;wreg free
  3699                           
  3700                           ;Movement.c: 197: (MoveType[*Move]) = 1;
  3701  000CA4  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3702  000CA8  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3703  000CAC  50DF               	movf	indf2,w,c
  3704  000CAE  0100               	movlb	0	; () banked
  3705  000CB0  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3706  000CB2  518C               	movf	??_ScanWithRange& (0+255),w,b
  3707  000CB4  0D01               	mullw	1
  3708  000CB6  50F3               	movf	prodl,w,c
  3709  000CB8  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3710  000CBA  6ED9               	movwf	fsr2l,c
  3711  000CBC  50F4               	movf	prodh,w,c
  3712  000CBE  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3713  000CC0  6EDA               	movwf	fsr2h,c
  3714  000CC2  0E01               	movlw	1
  3715  000CC4  6EDF               	movwf	indf2,c
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;Movement.c: 198: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3719  000CC6  90D8               	bcf	status,0,c
  3720  000CC8  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3721  000CCA  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3722  000CCC  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3723  000CCE  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3724  000CD0  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3725  000CD2  278C               	addwf	??_ScanWithRange& (0+255),f,b
  3726  000CD4  51C8               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3727  000CD6  238D               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3728  000CD8  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3729  000CDA  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3730  000CDC  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3731  000CDE  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3732  000CE0  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3733  000CE4  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3734  000CE8  50DF               	movf	indf2,w,c
  3735  000CEA  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3736  000CEC  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3737  000CEE  0D02               	mullw	2
  3738  000CF0  50F3               	movf	prodl,w,c
  3739  000CF2  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3740  000CF4  6ED9               	movwf	fsr2l,c
  3741  000CF6  50F4               	movf	prodh,w,c
  3742  000CF8  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3743  000CFA  6EDA               	movwf	fsr2h,c
  3744  000CFC  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3745  000D00  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;Movement.c: 199: *Move = *Move+1;
  3749  000D04  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3750  000D08  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3751  000D0C  50DF               	movf	indf2,w,c
  3752  000D0E  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3753  000D10  298C               	incf	??_ScanWithRange& (0+255),w,b
  3754  000D12  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3755  000D16  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3756  000D1A  6EDF               	movwf	indf2,c
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;Movement.c: 201: return 2;
  3760  000D1C  0E02               	movlw	2
  3761                           
  3762                           ; BSR set to: 0
  3763  000D1E  0012               	return	
  3764  000D20                     l226:
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;Movement.c: 203: T0CONbits.TMR0ON=0;
  3768  000D20  9ED5               	bcf	4053,7,c	;volatile
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;Movement.c: 207: (MoveType[*Move]) = 1;
  3772  000D22  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3773  000D26  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3774  000D2A  50DF               	movf	indf2,w,c
  3775  000D2C  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3776  000D2E  518C               	movf	??_ScanWithRange& (0+255),w,b
  3777  000D30  0D01               	mullw	1
  3778  000D32  50F3               	movf	prodl,w,c
  3779  000D34  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3780  000D36  6ED9               	movwf	fsr2l,c
  3781  000D38  50F4               	movf	prodh,w,c
  3782  000D3A  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3783  000D3C  6EDA               	movwf	fsr2h,c
  3784  000D3E  0E01               	movlw	1
  3785  000D40  6EDF               	movwf	indf2,c
  3786                           
  3787                           ;Movement.c: 208: (MoveTime[*Move]) = -(*millis);
  3788  000D42  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3789  000D46  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3790  000D4A  CFDE F08C          	movff	postinc2,??_ScanWithRange
  3791  000D4E  CFDD F08D          	movff	postdec2,??_ScanWithRange+1
  3792  000D52  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3793  000D54  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3794  000D56  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3795  000D58  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3796  000D5A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3797  000D5E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3798  000D62  50DF               	movf	indf2,w,c
  3799  000D64  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3800  000D66  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3801  000D68  0D02               	mullw	2
  3802  000D6A  50F3               	movf	prodl,w,c
  3803  000D6C  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3804  000D6E  6ED9               	movwf	fsr2l,c
  3805  000D70  50F4               	movf	prodh,w,c
  3806  000D72  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3807  000D74  6EDA               	movwf	fsr2h,c
  3808  000D76  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3809  000D7A  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;Movement.c: 209: *Move = *Move+1;
  3813  000D7E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3814  000D82  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3815  000D86  50DF               	movf	indf2,w,c
  3816  000D88  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3817  000D8A  298C               	incf	??_ScanWithRange& (0+255),w,b
  3818  000D8C  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3819  000D90  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3820  000D94  6EDF               	movwf	indf2,c
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;Movement.c: 210: stop(mL,mR);
  3824  000D96  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3825  000D9A  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3826  000D9E  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3827  000DA2  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3828  000DA6  ECAB  F00B         	call	_stop	;wreg free
  3829                           
  3830                           ;Movement.c: 213: turnLeft(mL,mR,100);
  3831  000DAA  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3832  000DAE  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3833  000DB2  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3834  000DB6  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3835  000DBA  0E64               	movlw	100
  3836  000DBC  0100               	movlb	0	; () banked
  3837  000DBE  6F7B               	movwf	turnLeft@power& (0+255),b
  3838  000DC0  ECA3  F00D         	call	_turnLeft	;wreg free
  3839                           
  3840                           ;Movement.c: 214: delay_tenth_s(MiniLeftFlick);
  3841  000DC4  0100               	movlb	0	; () banked
  3842  000DC6  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3843  000DC8  ECDE  F00D         	call	_delay_tenth_s
  3844                           
  3845                           ;Movement.c: 215: stop(mL,mR);
  3846  000DCC  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3847  000DD0  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3848  000DD4  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3849  000DD8  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3850  000DDC  ECAB  F00B         	call	_stop	;wreg free
  3851                           
  3852                           ;Movement.c: 216: (MoveType[*Move]) = 2;
  3853  000DE0  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3854  000DE4  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3855  000DE8  50DF               	movf	indf2,w,c
  3856  000DEA  0100               	movlb	0	; () banked
  3857  000DEC  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3858  000DEE  518C               	movf	??_ScanWithRange& (0+255),w,b
  3859  000DF0  0D01               	mullw	1
  3860  000DF2  50F3               	movf	prodl,w,c
  3861  000DF4  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3862  000DF6  6ED9               	movwf	fsr2l,c
  3863  000DF8  50F4               	movf	prodh,w,c
  3864  000DFA  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3865  000DFC  6EDA               	movwf	fsr2h,c
  3866  000DFE  0E02               	movlw	2
  3867  000E00  6EDF               	movwf	indf2,c
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;Movement.c: 217: (MoveTime[*Move]) = MiniLeftFlick;
  3871  000E02  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3872  000E04  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3873  000E06  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3874  000E08  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3875  000E0C  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3876  000E10  50DF               	movf	indf2,w,c
  3877  000E12  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3878  000E14  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3879  000E16  0D02               	mullw	2
  3880  000E18  50F3               	movf	prodl,w,c
  3881  000E1A  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3882  000E1C  6ED9               	movwf	fsr2l,c
  3883  000E1E  50F4               	movf	prodh,w,c
  3884  000E20  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3885  000E22  6EDA               	movwf	fsr2h,c
  3886  000E24  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3887  000E28  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;Movement.c: 218: *Move = *Move+1;
  3891  000E2C  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3892  000E30  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3893  000E34  50DF               	movf	indf2,w,c
  3894  000E36  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3895  000E38  298C               	incf	??_ScanWithRange& (0+255),w,b
  3896  000E3A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3897  000E3E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3898  000E42  6EDF               	movwf	indf2,c
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;Movement.c: 221: return 2;
  3902  000E44  0E02               	movlw	2
  3903                           
  3904                           ; BSR set to: 0
  3905  000E46  0012               	return	
  3906  000E48                     l231:
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;Movement.c: 222: }
  3910                           ;Movement.c: 223: }
  3911                           ;Movement.c: 225: if (*RFID_Read==1) {
  3912                           
  3913                           ; BSR set to: 0
  3914                           
  3915                           ; BSR set to: 0
  3916  000E48  C088  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3917  000E4C  C089  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3918  000E50  04DE               	decf	postinc2,w,c
  3919  000E52  A4D8               	btfss	status,2,c
  3920  000E54  D002               	goto	l232
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;Movement.c: 226: return 2;
  3924  000E56  0E02               	movlw	2
  3925                           
  3926                           ; BSR set to: 0
  3927  000E58  0012               	return	
  3928  000E5A                     l232:
  3929                           
  3930                           ; BSR set to: 0
  3931                           
  3932                           ; BSR set to: 0
  3933  000E5A  4BB8               	infsnz	ScanWithRange@i& (0+255),f,b
  3934  000E5C  2BB9               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3935  000E5E                     l221:
  3936                           
  3937                           ; BSR set to: 0
  3938                           
  3939                           ; BSR set to: 0
  3940  000E5E  51B8               	movf	ScanWithRange@i& (0+255),w,b
  3941  000E60  5D80               	subwf	ScanWithRange@loops& (0+255),w,b
  3942  000E62  51B9               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3943  000E64  5981               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3944  000E66  B0D8               	btfsc	status,0,c
  3945  000E68  D65A               	goto	l222
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;Movement.c: 227: }
  3949                           ;Movement.c: 228: }
  3950                           ;Movement.c: 233: (MoveType[*Move]) = 2;
  3951                           
  3952                           ; BSR set to: 0
  3953  000E6A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3954  000E6E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3955  000E72  50DF               	movf	indf2,w,c
  3956  000E74  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3957  000E76  518C               	movf	??_ScanWithRange& (0+255),w,b
  3958  000E78  0D01               	mullw	1
  3959  000E7A  50F3               	movf	prodl,w,c
  3960  000E7C  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3961  000E7E  6ED9               	movwf	fsr2l,c
  3962  000E80  50F4               	movf	prodh,w,c
  3963  000E82  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3964  000E84  6EDA               	movwf	fsr2h,c
  3965  000E86  0E02               	movlw	2
  3966  000E88  6EDF               	movwf	indf2,c
  3967                           
  3968                           ;Movement.c: 234: (MoveTime[*Move]) = -2;
  3969  000E8A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3970  000E8E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3971  000E92  50DF               	movf	indf2,w,c
  3972  000E94  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3973  000E96  518C               	movf	??_ScanWithRange& (0+255),w,b
  3974  000E98  0D02               	mullw	2
  3975  000E9A  50F3               	movf	prodl,w,c
  3976  000E9C  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3977  000E9E  6ED9               	movwf	fsr2l,c
  3978  000EA0  50F4               	movf	prodh,w,c
  3979  000EA2  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3980  000EA4  6EDA               	movwf	fsr2h,c
  3981  000EA6  0EFE               	movlw	254
  3982  000EA8  6EDE               	movwf	postinc2,c
  3983  000EAA  0EFF               	movlw	255
  3984  000EAC  6EDD               	movwf	postdec2,c
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;Movement.c: 235: *Move = *Move+1;
  3988  000EAE  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3989  000EB2  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3990  000EB6  50DF               	movf	indf2,w,c
  3991  000EB8  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3992  000EBA  298C               	incf	??_ScanWithRange& (0+255),w,b
  3993  000EBC  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3994  000EC0  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3995  000EC4  6EDF               	movwf	indf2,c
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;Movement.c: 236: turnRight(mL,mR, 100);
  3999  000EC6  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  4000  000ECA  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  4001  000ECE  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  4002  000ED2  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  4003  000ED6  0E64               	movlw	100
  4004  000ED8  6F7B               	movwf	turnRight@power& (0+255),b
  4005  000EDA  EC85  F00D         	call	_turnRight	;wreg free
  4006                           
  4007                           ;Movement.c: 237: delay_tenth_s(LeftFlick);
  4008  000EDE  0100               	movlb	0	; () banked
  4009  000EE0  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  4010  000EE2  ECDE  F00D         	call	_delay_tenth_s
  4011                           
  4012                           ;Movement.c: 238: stop(mL,mR);
  4013  000EE6  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  4014  000EEA  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  4015  000EEE  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  4016  000EF2  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  4017  000EF6  ECAB  F00B         	call	_stop	;wreg free
  4018                           
  4019                           ;Movement.c: 239: return -1;
  4020  000EFA  0EFF               	movlw	255
  4021  000EFC  0012               	return	
  4022  000EFE                     __end_of_ScanWithRange:
  4023                           	opt stack 0
  4024                           tblptru	equ	0xFF8
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           intcon	equ	0xFF2
  4028                           postinc0	equ	0xFEE
  4029                           wreg	equ	0xFE8
  4030                           indf1	equ	0xFE7
  4031                           plusw1	equ	0xFE3
  4032                           fsr1h	equ	0xFE2
  4033                           fsr1l	equ	0xFE1
  4034                           indf2	equ	0xFDF
  4035                           postinc2	equ	0xFDE
  4036                           postdec2	equ	0xFDD
  4037                           plusw2	equ	0xFDB
  4038                           fsr2h	equ	0xFDA
  4039                           fsr2l	equ	0xFD9
  4040                           status	equ	0xFD8
  4041                           
  4042 ;; *************** function _turnRight *****************
  4043 ;; Defined at:
  4044 ;;		line 102 in file "dc_motor.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  4047 ;;		 -> main@mL(9), 
  4048 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  4049 ;;		 -> main@mR(9), 
  4050 ;;  power           1   27[BANK0 ] unsigned char 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;		None
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      void 
  4055 ;; Registers used:
  4056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4062 ;;      Params:         0       5       0       0
  4063 ;;      Locals:         0       0       0       0
  4064 ;;      Temps:          0       0       0       0
  4065 ;;      Totals:         0       5       0       0
  4066 ;;Total ram usage:        5 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    6
  4069 ;; This function calls:
  4070 ;;		_fullSpeed
  4071 ;; This function is called by:
  4072 ;;		_ScanWithRange
  4073 ;;		_main
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text11
  4078  001B0A                     __ptext11:
  4079                           	opt stack 0
  4080  001B0A                     _turnRight:
  4081                           	opt stack 24
  4082                           
  4083                           ;dc_motor.c: 106: mL->direction=0;
  4084                           
  4085                           ;incstack = 0
  4086  001B0A  0100               	movlb	0	; () banked
  4087  001B0C  EE20 F001          	lfsr	2,1
  4088  001B10  5177               	movf	turnRight@mL& (0+255),w,b
  4089  001B12  26D9               	addwf	fsr2l,f,c
  4090  001B14  5178               	movf	(turnRight@mL+1)& (0+255),w,b
  4091  001B16  22DA               	addwfc	fsr2h,f,c
  4092  001B18  0E00               	movlw	0
  4093  001B1A  6EDF               	movwf	indf2,c
  4094                           
  4095                           ;dc_motor.c: 107: mR->direction=1;
  4096  001B1C  EE20 F001          	lfsr	2,1
  4097  001B20  5179               	movf	turnRight@mR& (0+255),w,b
  4098  001B22  26D9               	addwf	fsr2l,f,c
  4099  001B24  517A               	movf	(turnRight@mR+1)& (0+255),w,b
  4100  001B26  22DA               	addwfc	fsr2h,f,c
  4101  001B28  0E01               	movlw	1
  4102  001B2A  6EDF               	movwf	indf2,c
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;dc_motor.c: 108: fullSpeed(mL, mR, power);
  4106  001B2C  C077  F071         	movff	turnRight@mL,fullSpeed@mL
  4107  001B30  C078  F072         	movff	turnRight@mL+1,fullSpeed@mL+1
  4108  001B34  C079  F073         	movff	turnRight@mR,fullSpeed@mR
  4109  001B38  C07A  F074         	movff	turnRight@mR+1,fullSpeed@mR+1
  4110  001B3C  C07B  F075         	movff	turnRight@power,fullSpeed@power
  4111  001B40  EC37  F00C         	call	_fullSpeed	;wreg free
  4112  001B44  0012               	return		;funcret
  4113  001B46                     __end_of_turnRight:
  4114                           	opt stack 0
  4115                           tblptru	equ	0xFF8
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           postinc0	equ	0xFEE
  4120                           wreg	equ	0xFE8
  4121                           indf1	equ	0xFE7
  4122                           plusw1	equ	0xFE3
  4123                           fsr1h	equ	0xFE2
  4124                           fsr1l	equ	0xFE1
  4125                           indf2	equ	0xFDF
  4126                           postinc2	equ	0xFDE
  4127                           postdec2	equ	0xFDD
  4128                           plusw2	equ	0xFDB
  4129                           fsr2h	equ	0xFDA
  4130                           fsr2l	equ	0xFD9
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function _turnLeft *****************
  4134 ;; Defined at:
  4135 ;;		line 92 in file "dc_motor.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  4138 ;;		 -> main@mL(9), 
  4139 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  4140 ;;		 -> main@mR(9), 
  4141 ;;  power           1   27[BANK0 ] unsigned char 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4153 ;;      Params:         0       5       0       0
  4154 ;;      Locals:         0       0       0       0
  4155 ;;      Temps:          0       0       0       0
  4156 ;;      Totals:         0       5       0       0
  4157 ;;Total ram usage:        5 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    6
  4160 ;; This function calls:
  4161 ;;		_fullSpeed
  4162 ;; This function is called by:
  4163 ;;		_ScanWithRange
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text12
  4169  001B46                     __ptext12:
  4170                           	opt stack 0
  4171  001B46                     _turnLeft:
  4172                           	opt stack 24
  4173                           
  4174                           ;dc_motor.c: 96: mL->direction=1;
  4175                           
  4176                           ;incstack = 0
  4177  001B46  0100               	movlb	0	; () banked
  4178  001B48  EE20 F001          	lfsr	2,1
  4179  001B4C  5177               	movf	turnLeft@mL& (0+255),w,b
  4180  001B4E  26D9               	addwf	fsr2l,f,c
  4181  001B50  5178               	movf	(turnLeft@mL+1)& (0+255),w,b
  4182  001B52  22DA               	addwfc	fsr2h,f,c
  4183  001B54  0E01               	movlw	1
  4184  001B56  6EDF               	movwf	indf2,c
  4185                           
  4186                           ;dc_motor.c: 97: mR->direction=0;
  4187  001B58  EE20 F001          	lfsr	2,1
  4188  001B5C  5179               	movf	turnLeft@mR& (0+255),w,b
  4189  001B5E  26D9               	addwf	fsr2l,f,c
  4190  001B60  517A               	movf	(turnLeft@mR+1)& (0+255),w,b
  4191  001B62  22DA               	addwfc	fsr2h,f,c
  4192  001B64  0E00               	movlw	0
  4193  001B66  6EDF               	movwf	indf2,c
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  4197  001B68  C077  F071         	movff	turnLeft@mL,fullSpeed@mL
  4198  001B6C  C078  F072         	movff	turnLeft@mL+1,fullSpeed@mL+1
  4199  001B70  C079  F073         	movff	turnLeft@mR,fullSpeed@mR
  4200  001B74  C07A  F074         	movff	turnLeft@mR+1,fullSpeed@mR+1
  4201  001B78  C07B  F075         	movff	turnLeft@power,fullSpeed@power
  4202  001B7C  EC37  F00C         	call	_fullSpeed	;wreg free
  4203  001B80  0012               	return		;funcret
  4204  001B82                     __end_of_turnLeft:
  4205                           	opt stack 0
  4206                           tblptru	equ	0xFF8
  4207                           prodh	equ	0xFF4
  4208                           prodl	equ	0xFF3
  4209                           intcon	equ	0xFF2
  4210                           postinc0	equ	0xFEE
  4211                           wreg	equ	0xFE8
  4212                           indf1	equ	0xFE7
  4213                           plusw1	equ	0xFE3
  4214                           fsr1h	equ	0xFE2
  4215                           fsr1l	equ	0xFE1
  4216                           indf2	equ	0xFDF
  4217                           postinc2	equ	0xFDE
  4218                           postdec2	equ	0xFDD
  4219                           plusw2	equ	0xFDB
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function _fullSpeed *****************
  4225 ;; Defined at:
  4226 ;;		line 113 in file "dc_motor.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  4229 ;;		 -> main@mL(9), 
  4230 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  4231 ;;		 -> main@mR(9), 
  4232 ;;  power           1   21[BANK0 ] unsigned char 
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      void 
  4237 ;; Registers used:
  4238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4244 ;;      Params:         0       5       0       0
  4245 ;;      Locals:         0       0       0       0
  4246 ;;      Temps:          0       1       0       0
  4247 ;;      Totals:         0       6       0       0
  4248 ;;Total ram usage:        6 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    5
  4251 ;; This function calls:
  4252 ;;		_setMotorPWM
  4253 ;; This function is called by:
  4254 ;;		_turnLeft
  4255 ;;		_turnRight
  4256 ;;		_fullSpeedBack
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text13
  4262  00186E                     __ptext13:
  4263                           	opt stack 0
  4264  00186E                     _fullSpeed:
  4265                           	opt stack 24
  4266                           
  4267                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4268                           
  4269                           ;incstack = 0
  4270  00186E  D02B               	goto	l67
  4271  001870                     
  4272                           ;dc_motor.c: 117: if(mL->power<power){
  4273  001870  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4274  001874  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4275  001878  0100               	movlb	0	; () banked
  4276  00187A  5175               	movf	fullSpeed@power& (0+255),w,b
  4277  00187C  5CDE               	subwf	postinc2,w,c
  4278  00187E  B0D8               	btfsc	status,0,c
  4279  001880  D005               	goto	l69
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;dc_motor.c: 118: mL->power++;
  4283  001882  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4284  001886  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4285  00188A  2ADF               	incf	indf2,f,c
  4286  00188C                     l69:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;dc_motor.c: 119: }
  4290                           ;dc_motor.c: 120: if(mR->power<power){
  4291                           
  4292                           ; BSR set to: 0
  4293  00188C  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4294  001890  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4295  001894  5175               	movf	fullSpeed@power& (0+255),w,b
  4296  001896  5CDE               	subwf	postinc2,w,c
  4297  001898  B0D8               	btfsc	status,0,c
  4298  00189A  D005               	goto	l70
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;dc_motor.c: 121: mR->power++;
  4302  00189C  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4303  0018A0  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4304  0018A4  2ADF               	incf	indf2,f,c
  4305  0018A6                     l70:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;dc_motor.c: 122: }
  4309                           ;dc_motor.c: 123: setMotorPWM(mL);
  4310                           
  4311                           ; BSR set to: 0
  4312  0018A6  C071  F068         	movff	fullSpeed@mL,setMotorPWM@m
  4313  0018AA  C072  F069         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4314  0018AE  EC6E  F009         	call	_setMotorPWM	;wreg free
  4315                           
  4316                           ;dc_motor.c: 124: setMotorPWM(mR);
  4317  0018B2  C073  F068         	movff	fullSpeed@mR,setMotorPWM@m
  4318  0018B6  C074  F069         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4319  0018BA  EC6E  F009         	call	_setMotorPWM	;wreg free
  4320                           
  4321                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4322  0018BE  0E21               	movlw	33
  4323  0018C0                     u3637:
  4324  0018C0  2EE8               	decfsz	wreg,f,c
  4325  0018C2  D7FE               	bra	u3637
  4326  0018C4  F000               	nop	
  4327  0018C6                     l67:
  4328  0018C6  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4329  0018CA  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4330  0018CE  0100               	movlb	0	; () banked
  4331  0018D0  5175               	movf	fullSpeed@power& (0+255),w,b
  4332  0018D2  5CDE               	subwf	postinc2,w,c
  4333  0018D4  A0D8               	btfss	status,0,c
  4334  0018D6  D7CC               	goto	l68
  4335                           
  4336                           ; BSR set to: 0
  4337  0018D8  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4338  0018DC  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4339  0018E0  5175               	movf	fullSpeed@power& (0+255),w,b
  4340  0018E2  5CDE               	subwf	postinc2,w,c
  4341  0018E4  B0D8               	btfsc	status,0,c
  4342  0018E6  0012               	return	
  4343  0018E8  D7C3               	goto	l68
  4344  0018EA                     __end_of_fullSpeed:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           prodh	equ	0xFF4
  4348                           prodl	equ	0xFF3
  4349                           intcon	equ	0xFF2
  4350                           postinc0	equ	0xFEE
  4351                           wreg	equ	0xFE8
  4352                           indf1	equ	0xFE7
  4353                           plusw1	equ	0xFE3
  4354                           fsr1h	equ	0xFE2
  4355                           fsr1l	equ	0xFE1
  4356                           indf2	equ	0xFDF
  4357                           postinc2	equ	0xFDE
  4358                           postdec2	equ	0xFDD
  4359                           plusw2	equ	0xFDB
  4360                           fsr2h	equ	0xFDA
  4361                           fsr2l	equ	0xFD9
  4362                           status	equ	0xFD8
  4363                           
  4364 ;; *************** function _delay_tenth_s *****************
  4365 ;; Defined at:
  4366 ;;		line 32 in file "Movement.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  tenth_second    1    wreg     unsigned char 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;  tenth_second    1   44[COMRAM] unsigned char 
  4371 ;;  i               2   45[COMRAM] unsigned int 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  1    wreg      void 
  4374 ;; Registers used:
  4375 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4381 ;;      Params:         0       0       0       0
  4382 ;;      Locals:         3       0       0       0
  4383 ;;      Temps:          1       0       0       0
  4384 ;;      Totals:         4       0       0       0
  4385 ;;Total ram usage:        4 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    3
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_ScanWithRange
  4392 ;;		_main
  4393 ;; This function uses a non-reentrant model
  4394 ;;
  4395                           
  4396                           	psect	text14
  4397  001BBC                     __ptext14:
  4398                           	opt stack 0
  4399  001BBC                     _delay_tenth_s:
  4400                           	opt stack 27
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;incstack = 0
  4404                           ;delay_tenth_s@tenth_seconds stored from wreg
  4405  001BBC  6E2D               	movwf	delay_tenth_s@tenth_seconds,c
  4406                           
  4407                           ;Movement.c: 33: unsigned int i=0;
  4408  001BBE  0E00               	movlw	0
  4409  001BC0  6E2F               	movwf	delay_tenth_s@i+1,c
  4410  001BC2  0E00               	movlw	0
  4411  001BC4  6E2E               	movwf	delay_tenth_s@i,c
  4412                           
  4413                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4414  001BC6  0E00               	movlw	0
  4415  001BC8  6E2F               	movwf	delay_tenth_s@i+1,c
  4416  001BCA  0E01               	movlw	1
  4417  001BCC  6E2E               	movwf	delay_tenth_s@i,c
  4418  001BCE  D009               	goto	l206
  4419  001BD0                     
  4420                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4421  001BD0  0E82               	movlw	130
  4422  001BD2  6E2C               	movwf	??_delay_tenth_s& (0+255),c
  4423  001BD4  0EDE               	movlw	222
  4424  001BD6                     u3647:
  4425  001BD6  2EE8               	decfsz	wreg,f,c
  4426  001BD8  D7FE               	bra	u3647
  4427  001BDA  2E2C               	decfsz	??_delay_tenth_s& (0+255),f,c
  4428  001BDC  D7FC               	bra	u3647
  4429  001BDE  4A2E               	infsnz	delay_tenth_s@i,f,c
  4430  001BE0  2A2F               	incf	delay_tenth_s@i+1,f,c
  4431  001BE2                     l206:
  4432  001BE2  502D               	movf	delay_tenth_s@tenth_seconds,w,c
  4433  001BE4  0D02               	mullw	2
  4434  001BE6  502E               	movf	delay_tenth_s@i,w,c
  4435  001BE8  5CF3               	subwf	prodl,w,c
  4436  001BEA  502F               	movf	delay_tenth_s@i+1,w,c
  4437  001BEC  58F4               	subwfb	prodh,w,c
  4438  001BEE  A0D8               	btfss	status,0,c
  4439  001BF0  0012               	return	
  4440  001BF2  D7EE               	goto	l207
  4441  001BF4                     __end_of_delay_tenth_s:
  4442                           	opt stack 0
  4443                           tblptru	equ	0xFF8
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           intcon	equ	0xFF2
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           indf1	equ	0xFE7
  4450                           plusw1	equ	0xFE3
  4451                           fsr1h	equ	0xFE2
  4452                           fsr1l	equ	0xFE1
  4453                           indf2	equ	0xFDF
  4454                           postinc2	equ	0xFDE
  4455                           postdec2	equ	0xFDD
  4456                           plusw2	equ	0xFDB
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _ScanIR *****************
  4462 ;; Defined at:
  4463 ;;		line 44 in file "Movement.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  4466 ;;		 -> main@mL(9), 
  4467 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  4468 ;;		 -> main@mR(9), 
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  buf            40   33[BANK0 ] unsigned char [40]
  4471 ;;  SensorResult    4   75[BANK0 ] unsigned int [2]
  4472 ;;  DirectionMov    2   73[BANK0 ] const unsigned int 
  4473 ;; Return value:  Size  Location     Type
  4474 ;;                  1    wreg      unsigned char 
  4475 ;; Registers used:
  4476 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4477 ;; Tracked objects:
  4478 ;;		On entry : 0/0
  4479 ;;		On exit  : 0/0
  4480 ;;		Unchanged: 0/0
  4481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4482 ;;      Params:         0       4       0       0
  4483 ;;      Locals:         0      46       0       0
  4484 ;;      Temps:          0       1       0       0
  4485 ;;      Totals:         0      51       0       0
  4486 ;;Total ram usage:       51 bytes
  4487 ;; Hardware stack levels used:    1
  4488 ;; Hardware stack levels required when called:    7
  4489 ;; This function calls:
  4490 ;;		_LCD_String
  4491 ;;		_SendLCD
  4492 ;;		_SetLine
  4493 ;;		_grabLeftIR
  4494 ;;		_grabRightIR
  4495 ;;		_sprintf
  4496 ;;		_stop
  4497 ;; This function is called by:
  4498 ;;		_main
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text15
  4503  00141A                     __ptext15:
  4504                           	opt stack 0
  4505  00141A                     _ScanIR:
  4506                           	opt stack 23
  4507                           
  4508                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4509                           
  4510                           ;incstack = 0
  4511  00141A  C0CF  F0AB         	movff	ScanIR@F3541,ScanIR@SensorResult
  4512  00141E  C0D0  F0AC         	movff	ScanIR@F3541+1,ScanIR@SensorResult+1
  4513  001422  C0D1  F0AD         	movff	ScanIR@F3541+2,ScanIR@SensorResult+2
  4514  001426  C0D2  F0AE         	movff	ScanIR@F3541+3,ScanIR@SensorResult+3
  4515                           
  4516                           ;Movement.c: 48: char buf[40];
  4517                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=500;
  4518  00142A  0E01               	movlw	1
  4519  00142C  0100               	movlb	0	; () banked
  4520  00142E  6FAA               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4521  001430  0EF4               	movlw	244
  4522  001432  6FA9               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4526  001434  ECB0  F00C         	call	_grabLeftIR	;wreg free
  4527  001438  C02C  F0AB         	movff	?_grabLeftIR,ScanIR@SensorResult
  4528  00143C  C02D  F0AC         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4529                           
  4530                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4531  001440  EC75  F00C         	call	_grabRightIR	;wreg free
  4532  001444  C02C  F0AD         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4533  001448  C02D  F0AE         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4534                           
  4535                           ;Movement.c: 60: CAP1BUFH=0;
  4536  00144C  0E00               	movlw	0
  4537  00144E  6E69               	movwf	3945,c	;volatile
  4538                           
  4539                           ;Movement.c: 61: CAP1BUFL=0;
  4540  001450  0E00               	movlw	0
  4541  001452  6E68               	movwf	3944,c	;volatile
  4542                           
  4543                           ;Movement.c: 62: CAP2BUFH=0;
  4544  001454  0E00               	movlw	0
  4545  001456  6E67               	movwf	3943,c	;volatile
  4546                           
  4547                           ;Movement.c: 63: CAP2BUFL=0;
  4548  001458  0E00               	movlw	0
  4549  00145A  6E66               	movwf	3942,c	;volatile
  4550                           
  4551                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4552  00145C  0E00               	movlw	0
  4553  00145E  6E30               	movwf	SendLCD@type,c
  4554  001460  0E01               	movlw	1
  4555  001462  EC4C  F00E         	call	_SendLCD
  4556                           
  4557                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4558  001466  0E21               	movlw	33
  4559  001468                     u3657:
  4560  001468  2EE8               	decfsz	wreg,f,c
  4561  00146A  D7FE               	bra	u3657
  4562  00146C  F000               	nop	
  4563                           
  4564                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4565  00146E  0E00               	movlw	0
  4566  001470  6E30               	movwf	SendLCD@type,c
  4567  001472  0E02               	movlw	2
  4568  001474  EC4C  F00E         	call	_SendLCD
  4569                           
  4570                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4571  001478  0E06               	movlw	6
  4572  00147A  0100               	movlb	0	; () banked
  4573  00147C  6F80               	movwf	??_ScanIR& (0+255),b
  4574  00147E  0E30               	movlw	48
  4575  001480                     u3667:
  4576  001480  2EE8               	decfsz	wreg,f,c
  4577  001482  D7FE               	bra	u3667
  4578  001484  2F80               	decfsz	??_ScanIR& (0+255),f,b
  4579  001486  D7FC               	bra	u3667
  4580  001488  F000               	nop	
  4581                           
  4582                           ;Movement.c: 70: SetLine(1);
  4583  00148A  0E01               	movlw	1
  4584  00148C  EC31  F00E         	call	_SetLine
  4585                           
  4586                           ;Movement.c: 71: LCD_String("     ScanIR");
  4587  001490  0E2D               	movlw	low STR_1
  4588  001492  0100               	movlb	0	; () banked
  4589  001494  6F60               	movwf	LCD_String@string& (0+255),b
  4590  001496  0E03               	movlw	high STR_1
  4591  001498  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4592  00149A  ECEB  F00C         	call	_LCD_String	;wreg free
  4593                           
  4594                           ;Movement.c: 72: SetLine(2);
  4595  00149E  0E02               	movlw	2
  4596  0014A0  EC31  F00E         	call	_SetLine
  4597                           
  4598                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4599  0014A4  0E81               	movlw	low ScanIR@buf
  4600  0014A6  0100               	movlb	0	; () banked
  4601  0014A8  6F67               	movwf	sprintf@sp& (0+255),b
  4602  0014AA  0E00               	movlw	high ScanIR@buf
  4603  0014AC  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  4604  0014AE  0E0C               	movlw	low (STR_6+1)
  4605  0014B0  6F69               	movwf	sprintf@f& (0+255),b
  4606  0014B2  0E03               	movlw	high (STR_6+1)
  4607  0014B4  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  4608  0014B6  C0AB  F06B         	movff	ScanIR@SensorResult,?_sprintf+4
  4609  0014BA  C0AC  F06C         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4610  0014BE  C0AD  F06D         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4611  0014C2  C0AE  F06E         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4612  0014C6  EC7F  F007         	call	_sprintf	;wreg free
  4613                           
  4614                           ;Movement.c: 74: LCD_String(buf);
  4615  0014CA  0E81               	movlw	low ScanIR@buf
  4616  0014CC  0100               	movlb	0	; () banked
  4617  0014CE  6F60               	movwf	LCD_String@string& (0+255),b
  4618  0014D0  0E00               	movlw	high ScanIR@buf
  4619  0014D2  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4620  0014D4  ECEB  F00C         	call	_LCD_String	;wreg free
  4621                           
  4622                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4623                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4624  0014D8  0100               	movlb	0	; () banked
  4625  0014DA  51AB               	movf	ScanIR@SensorResult& (0+255),w,b
  4626  0014DC  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4627  0014DE  51AC               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4628  0014E0  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4629  0014E2  B0D8               	btfsc	status,0,c
  4630  0014E4  D008               	goto	l214
  4631                           
  4632                           ; BSR set to: 0
  4633  0014E6  51AD               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4634  0014E8  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4635  0014EA  51AE               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4636  0014EC  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4637  0014EE  B0D8               	btfsc	status,0,c
  4638  0014F0  D002               	goto	l214
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;Movement.c: 80: return 2;
  4642  0014F2  0E02               	movlw	2
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;Movement.c: 81: } else {
  4646                           
  4647                           ; BSR set to: 0
  4648  0014F4  0012               	return	
  4649  0014F6                     l214:
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;Movement.c: 82: stop(mL,mR);
  4653                           
  4654                           ; BSR set to: 0
  4655  0014F6  C07C  F071         	movff	ScanIR@mL,stop@mL
  4656  0014FA  C07D  F072         	movff	ScanIR@mL+1,stop@mL+1
  4657  0014FE  C07E  F073         	movff	ScanIR@mR,stop@mR
  4658  001502  C07F  F074         	movff	ScanIR@mR+1,stop@mR+1
  4659  001506  ECAB  F00B         	call	_stop	;wreg free
  4660                           
  4661                           ;Movement.c: 83: return 0;
  4662  00150A  0E00               	movlw	0
  4663  00150C  0012               	return	
  4664  00150E                     __end_of_ScanIR:
  4665                           	opt stack 0
  4666                           tblptru	equ	0xFF8
  4667                           prodh	equ	0xFF4
  4668                           prodl	equ	0xFF3
  4669                           intcon	equ	0xFF2
  4670                           postinc0	equ	0xFEE
  4671                           wreg	equ	0xFE8
  4672                           indf1	equ	0xFE7
  4673                           plusw1	equ	0xFE3
  4674                           fsr1h	equ	0xFE2
  4675                           fsr1l	equ	0xFE1
  4676                           indf2	equ	0xFDF
  4677                           postinc2	equ	0xFDE
  4678                           postdec2	equ	0xFDD
  4679                           plusw2	equ	0xFDB
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function _stop *****************
  4685 ;; Defined at:
  4686 ;;		line 72 in file "dc_motor.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  4689 ;;		 -> main@mL(9), 
  4690 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  4691 ;;		 -> main@mR(9), 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4703 ;;      Params:         0       4       0       0
  4704 ;;      Locals:         0       0       0       0
  4705 ;;      Temps:          0       0       0       0
  4706 ;;      Totals:         0       4       0       0
  4707 ;;Total ram usage:        4 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    5
  4710 ;; This function calls:
  4711 ;;		_setMotorPWM
  4712 ;; This function is called by:
  4713 ;;		_ScanIR
  4714 ;;		_ScanWithRange
  4715 ;;		_main
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text16
  4720  001756                     __ptext16:
  4721                           	opt stack 0
  4722  001756                     _stop:
  4723                           	opt stack 25
  4724                           
  4725                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4726                           
  4727                           ;incstack = 0
  4728  001756  D028               	goto	l53
  4729  001758                     
  4730                           ;dc_motor.c: 77: if(mL->power>0){
  4731  001758  C071  FFD9         	movff	stop@mL,fsr2l
  4732  00175C  C072  FFDA         	movff	stop@mL+1,fsr2h
  4733  001760  50DF               	movf	indf2,w,c
  4734  001762  B4D8               	btfsc	status,2,c
  4735  001764  D005               	goto	l55
  4736                           
  4737                           ;dc_motor.c: 78: mL->power--;
  4738  001766  C071  FFD9         	movff	stop@mL,fsr2l
  4739  00176A  C072  FFDA         	movff	stop@mL+1,fsr2h
  4740  00176E  06DF               	decf	indf2,f,c
  4741  001770                     l55:
  4742                           
  4743                           ;dc_motor.c: 79: }
  4744                           ;dc_motor.c: 80: if(mR->power>0){
  4745  001770  C073  FFD9         	movff	stop@mR,fsr2l
  4746  001774  C074  FFDA         	movff	stop@mR+1,fsr2h
  4747  001778  50DF               	movf	indf2,w,c
  4748  00177A  B4D8               	btfsc	status,2,c
  4749  00177C  D005               	goto	l56
  4750                           
  4751                           ;dc_motor.c: 81: mR->power--;
  4752  00177E  C073  FFD9         	movff	stop@mR,fsr2l
  4753  001782  C074  FFDA         	movff	stop@mR+1,fsr2h
  4754  001786  06DF               	decf	indf2,f,c
  4755  001788                     l56:
  4756                           
  4757                           ;dc_motor.c: 82: }
  4758                           ;dc_motor.c: 83: setMotorPWM(mL);
  4759  001788  C071  F068         	movff	stop@mL,setMotorPWM@m
  4760  00178C  C072  F069         	movff	stop@mL+1,setMotorPWM@m+1
  4761  001790  EC6E  F009         	call	_setMotorPWM	;wreg free
  4762                           
  4763                           ;dc_motor.c: 84: setMotorPWM(mR);
  4764  001794  C073  F068         	movff	stop@mR,setMotorPWM@m
  4765  001798  C074  F069         	movff	stop@mR+1,setMotorPWM@m+1
  4766  00179C  EC6E  F009         	call	_setMotorPWM	;wreg free
  4767                           
  4768                           ;dc_motor.c: 85: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4769  0017A0  0E21               	movlw	33
  4770  0017A2                     u3677:
  4771  0017A2  2EE8               	decfsz	wreg,f,c
  4772  0017A4  D7FE               	bra	u3677
  4773  0017A6  F000               	nop	
  4774  0017A8                     l53:
  4775  0017A8  C071  FFD9         	movff	stop@mL,fsr2l
  4776  0017AC  C072  FFDA         	movff	stop@mL+1,fsr2h
  4777  0017B0  50DF               	movf	indf2,w,c
  4778  0017B2  A4D8               	btfss	status,2,c
  4779  0017B4  D7D1               	goto	l54
  4780  0017B6  C073  FFD9         	movff	stop@mR,fsr2l
  4781  0017BA  C074  FFDA         	movff	stop@mR+1,fsr2h
  4782  0017BE  50DF               	movf	indf2,w,c
  4783  0017C0  A4D8               	btfss	status,2,c
  4784  0017C2  D7CA               	goto	l54
  4785                           
  4786                           ;dc_motor.c: 86: }
  4787                           ;dc_motor.c: 87: mL->direction=1;
  4788  0017C4  0100               	movlb	0	; () banked
  4789  0017C6  EE20 F001          	lfsr	2,1
  4790  0017CA  5171               	movf	stop@mL& (0+255),w,b
  4791  0017CC  26D9               	addwf	fsr2l,f,c
  4792  0017CE  5172               	movf	(stop@mL+1)& (0+255),w,b
  4793  0017D0  22DA               	addwfc	fsr2h,f,c
  4794  0017D2  0E01               	movlw	1
  4795  0017D4  6EDF               	movwf	indf2,c
  4796                           
  4797                           ;dc_motor.c: 88: mR->direction=1;
  4798  0017D6  EE20 F001          	lfsr	2,1
  4799  0017DA  5173               	movf	stop@mR& (0+255),w,b
  4800  0017DC  26D9               	addwf	fsr2l,f,c
  4801  0017DE  5174               	movf	(stop@mR+1)& (0+255),w,b
  4802  0017E0  22DA               	addwfc	fsr2h,f,c
  4803  0017E2  0E01               	movlw	1
  4804  0017E4  6EDF               	movwf	indf2,c
  4805                           
  4806                           ; BSR set to: 0
  4807  0017E6  0012               	return		;funcret
  4808  0017E8                     __end_of_stop:
  4809                           	opt stack 0
  4810                           tblptru	equ	0xFF8
  4811                           prodh	equ	0xFF4
  4812                           prodl	equ	0xFF3
  4813                           intcon	equ	0xFF2
  4814                           postinc0	equ	0xFEE
  4815                           wreg	equ	0xFE8
  4816                           indf1	equ	0xFE7
  4817                           plusw1	equ	0xFE3
  4818                           fsr1h	equ	0xFE2
  4819                           fsr1l	equ	0xFE1
  4820                           indf2	equ	0xFDF
  4821                           postinc2	equ	0xFDE
  4822                           postdec2	equ	0xFDD
  4823                           plusw2	equ	0xFDB
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8
  4827                           
  4828 ;; *************** function _setMotorPWM *****************
  4829 ;; Defined at:
  4830 ;;		line 31 in file "dc_motor.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  m               2    8[BANK0 ] PTR struct DC_motor
  4833 ;;		 -> main@mR(9), main@mL(9), 
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;  PWMduty         2   15[BANK0 ] int 
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      void 
  4838 ;; Registers used:
  4839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4845 ;;      Params:         0       2       0       0
  4846 ;;      Locals:         0       2       0       0
  4847 ;;      Temps:          0       5       0       0
  4848 ;;      Totals:         0       9       0       0
  4849 ;;Total ram usage:        9 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    4
  4852 ;; This function calls:
  4853 ;;		___awdiv
  4854 ;;		___wmul
  4855 ;; This function is called by:
  4856 ;;		_stop
  4857 ;;		_fullSpeed
  4858 ;;		_setMotorFullSpeed
  4859 ;;		_stopMotor
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text17
  4864  0012DC                     __ptext17:
  4865                           	opt stack 0
  4866  0012DC                     _setMotorPWM:
  4867                           	opt stack 24
  4868                           
  4869                           ;dc_motor.c: 33: int PWMduty;
  4870                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;incstack = 0
  4874  0012DC  C068  FFD9         	movff	setMotorPWM@m,fsr2l
  4875  0012E0  C069  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4876  0012E4  50DF               	movf	indf2,w,c
  4877  0012E6  0100               	movlb	0	; () banked
  4878  0012E8  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4879  0012EA  516A               	movf	??_setMotorPWM& (0+255),w,b
  4880  0012EC  6E2C               	movwf	___wmul@multiplier,c
  4881  0012EE  6A2D               	clrf	___wmul@multiplier+1,c
  4882  0012F0  EE20 F007          	lfsr	2,7
  4883  0012F4  5168               	movf	setMotorPWM@m& (0+255),w,b
  4884  0012F6  26D9               	addwf	fsr2l,f,c
  4885  0012F8  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4886  0012FA  22DA               	addwfc	fsr2h,f,c
  4887  0012FC  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  4888  001300  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  4889  001304  EC8E  F00E         	call	___wmul	;wreg free
  4890  001308  C02C  F060         	movff	?___wmul,___awdiv@dividend
  4891  00130C  C02D  F061         	movff	?___wmul+1,___awdiv@dividend+1
  4892  001310  0E00               	movlw	0
  4893  001312  0100               	movlb	0	; () banked
  4894  001314  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4895  001316  0E64               	movlw	100
  4896  001318  6F62               	movwf	___awdiv@divisor& (0+255),b
  4897  00131A  ECF4  F00B         	call	___awdiv	;wreg free
  4898  00131E  C060  F06F         	movff	?___awdiv,setMotorPWM@PWMduty
  4899  001322  C061  F070         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4900                           
  4901                           ;dc_motor.c: 37: if (m->direction)
  4902  001326  0100               	movlb	0	; () banked
  4903  001328  EE20 F001          	lfsr	2,1
  4904  00132C  5168               	movf	setMotorPWM@m& (0+255),w,b
  4905  00132E  26D9               	addwf	fsr2l,f,c
  4906  001330  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4907  001332  22DA               	addwfc	fsr2h,f,c
  4908  001334  50DF               	movf	indf2,w,c
  4909  001336  B4D8               	btfsc	status,2,c
  4910  001338  D02D               	goto	l36
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;dc_motor.c: 38: {
  4914                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4915  00133A  EE20 F006          	lfsr	2,6
  4916  00133E  5168               	movf	setMotorPWM@m& (0+255),w,b
  4917  001340  26D9               	addwf	fsr2l,f,c
  4918  001342  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4919  001344  22DA               	addwfc	fsr2h,f,c
  4920  001346  50DF               	movf	indf2,w,c
  4921  001348  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4922  00134A  0E01               	movlw	1
  4923  00134C  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4924  00134E  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4925  001350  D002               	goto	u2504
  4926  001352                     u2505:
  4927  001352  90D8               	bcf	status,0,c
  4928  001354  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4929  001356                     u2504:
  4930  001356  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4931  001358  D7FC               	goto	u2505
  4932  00135A  0100               	movlb	0	; () banked
  4933  00135C  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4934  00135E  108A               	iorwf	3978,w,c	;volatile
  4935  001360  6E8A               	movwf	3978,c	;volatile
  4936                           
  4937                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4938  001362  EE20 F007          	lfsr	2,7
  4939  001366  5168               	movf	setMotorPWM@m& (0+255),w,b
  4940  001368  26D9               	addwf	fsr2l,f,c
  4941  00136A  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4942  00136C  22DA               	addwfc	fsr2h,f,c
  4943  00136E  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4944  001372  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4945  001376  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4946  00137A  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4947  00137E  1F6C               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4948  001380  1F6D               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4949  001382  4B6C               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4950  001384  2B6D               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4951  001386  516A               	movf	??_setMotorPWM& (0+255),w,b
  4952  001388  256C               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4953  00138A  6F6F               	movwf	setMotorPWM@PWMduty& (0+255),b
  4954  00138C  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4955  00138E  216D               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4956  001390  6F70               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4957                           
  4958                           ;dc_motor.c: 41: }
  4959  001392  D015               	goto	l37
  4960  001394                     l36:
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;dc_motor.c: 42: else
  4964                           ;dc_motor.c: 43: {
  4965                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4966                           
  4967                           ; BSR set to: 0
  4968  001394  EE20 F006          	lfsr	2,6
  4969  001398  5168               	movf	setMotorPWM@m& (0+255),w,b
  4970  00139A  26D9               	addwf	fsr2l,f,c
  4971  00139C  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4972  00139E  22DA               	addwfc	fsr2h,f,c
  4973  0013A0  50DF               	movf	indf2,w,c
  4974  0013A2  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4975  0013A4  0E01               	movlw	1
  4976  0013A6  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4977  0013A8  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4978  0013AA  D002               	goto	u2514
  4979  0013AC                     u2515:
  4980  0013AC  90D8               	bcf	status,0,c
  4981  0013AE  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4982  0013B0                     u2514:
  4983  0013B0  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4984  0013B2  D7FC               	goto	u2515
  4985  0013B4  0100               	movlb	0	; () banked
  4986  0013B6  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4987  0013B8  0AFF               	xorlw	255
  4988  0013BA  148A               	andwf	3978,w,c	;volatile
  4989  0013BC  6E8A               	movwf	3978,c	;volatile
  4990  0013BE                     l37:
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;dc_motor.c: 45: }
  4994                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4995  0013BE  EE20 F002          	lfsr	2,2
  4996  0013C2  5168               	movf	setMotorPWM@m& (0+255),w,b
  4997  0013C4  26D9               	addwf	fsr2l,f,c
  4998  0013C6  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4999  0013C8  22DA               	addwfc	fsr2h,f,c
  5000  0013CA  CFDE F06A          	movff	postinc2,??_setMotorPWM
  5001  0013CE  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  5002  0013D2  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  5003  0013D6  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5004  0013DA  456F               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  5005  0013DC  46E8               	rlncf	wreg,f,c
  5006  0013DE  0BFC               	andlw	252
  5007  0013E0  6EDF               	movwf	indf2,c
  5008                           
  5009                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  5010  0013E2  EE20 F004          	lfsr	2,4
  5011  0013E6  5168               	movf	setMotorPWM@m& (0+255),w,b
  5012  0013E8  26D9               	addwf	fsr2l,f,c
  5013  0013EA  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  5014  0013EC  22DA               	addwfc	fsr2h,f,c
  5015  0013EE  CFDE F06A          	movff	postinc2,??_setMotorPWM
  5016  0013F2  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  5017  0013F6  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  5018  0013FA  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5019  0013FE  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  5020  001402  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  5021  001406  0E06               	movlw	6
  5022  001408  6F6E               	movwf	(??_setMotorPWM+4)& (0+255),b
  5023  00140A                     u2525:
  5024  00140A  356D               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  5025  00140C  336D               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  5026  00140E  336C               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  5027  001410  2F6E               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  5028  001412  D7FB               	goto	u2525
  5029  001414  516C               	movf	(??_setMotorPWM+2)& (0+255),w,b
  5030  001416  6EDF               	movwf	indf2,c
  5031                           
  5032                           ; BSR set to: 0
  5033  001418  0012               	return		;funcret
  5034  00141A                     __end_of_setMotorPWM:
  5035                           	opt stack 0
  5036                           tblptru	equ	0xFF8
  5037                           prodh	equ	0xFF4
  5038                           prodl	equ	0xFF3
  5039                           intcon	equ	0xFF2
  5040                           postinc0	equ	0xFEE
  5041                           wreg	equ	0xFE8
  5042                           indf1	equ	0xFE7
  5043                           plusw1	equ	0xFE3
  5044                           fsr1h	equ	0xFE2
  5045                           fsr1l	equ	0xFE1
  5046                           indf2	equ	0xFDF
  5047                           postinc2	equ	0xFDE
  5048                           postdec2	equ	0xFDD
  5049                           plusw2	equ	0xFDB
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function ___awdiv *****************
  5055 ;; Defined at:
  5056 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  dividend        2    0[BANK0 ] int 
  5059 ;;  divisor         2    2[BANK0 ] int 
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  quotient        2    6[BANK0 ] int 
  5062 ;;  sign            1    5[BANK0 ] unsigned char 
  5063 ;;  counter         1    4[BANK0 ] unsigned char 
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  2    0[BANK0 ] int 
  5066 ;; Registers used:
  5067 ;;		wreg, status,2, status,0
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5073 ;;      Params:         0       4       0       0
  5074 ;;      Locals:         0       4       0       0
  5075 ;;      Temps:          0       0       0       0
  5076 ;;      Totals:         0       8       0       0
  5077 ;;Total ram usage:        8 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    3
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_setMotorPWM
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087                           	psect	text18
  5088  0017E8                     __ptext18:
  5089                           	opt stack 0
  5090  0017E8                     ___awdiv:
  5091                           	opt stack 24
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;incstack = 0
  5095  0017E8  0E00               	movlw	0
  5096  0017EA  0100               	movlb	0	; () banked
  5097  0017EC  6F65               	movwf	___awdiv@sign& (0+255),b
  5098                           
  5099                           ; BSR set to: 0
  5100  0017EE  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5101  0017F0  D006               	goto	l665
  5102                           
  5103                           ; BSR set to: 0
  5104  0017F2  6D62               	negf	___awdiv@divisor& (0+255),b
  5105  0017F4  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5106  0017F6  B0D8               	btfsc	status,0,c
  5107  0017F8  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5108                           
  5109                           ; BSR set to: 0
  5110  0017FA  0E01               	movlw	1
  5111  0017FC  6F65               	movwf	___awdiv@sign& (0+255),b
  5112  0017FE                     l665:
  5113                           
  5114                           ; BSR set to: 0
  5115                           
  5116                           ; BSR set to: 0
  5117  0017FE  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5118  001800  D006               	goto	l666
  5119                           
  5120                           ; BSR set to: 0
  5121  001802  6D60               	negf	___awdiv@dividend& (0+255),b
  5122  001804  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5123  001806  B0D8               	btfsc	status,0,c
  5124  001808  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5125                           
  5126                           ; BSR set to: 0
  5127  00180A  0E01               	movlw	1
  5128  00180C  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  5129  00180E                     l666:
  5130                           
  5131                           ; BSR set to: 0
  5132                           
  5133                           ; BSR set to: 0
  5134  00180E  0E00               	movlw	0
  5135  001810  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  5136  001812  0E00               	movlw	0
  5137  001814  6F66               	movwf	___awdiv@quotient& (0+255),b
  5138                           
  5139                           ; BSR set to: 0
  5140  001816  5162               	movf	___awdiv@divisor& (0+255),w,b
  5141  001818  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5142  00181A  B4D8               	btfsc	status,2,c
  5143  00181C  D01C               	goto	l673
  5144                           
  5145                           ; BSR set to: 0
  5146  00181E  0E01               	movlw	1
  5147  001820  6F64               	movwf	___awdiv@counter& (0+255),b
  5148  001822  D004               	goto	l668
  5149  001824                     
  5150                           ; BSR set to: 0
  5151                           
  5152                           ; BSR set to: 0
  5153  001824  90D8               	bcf	status,0,c
  5154  001826  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  5155  001828  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5156  00182A  2B64               	incf	___awdiv@counter& (0+255),f,b
  5157  00182C                     l668:
  5158                           
  5159                           ; BSR set to: 0
  5160                           
  5161                           ; BSR set to: 0
  5162  00182C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5163  00182E  D7FA               	goto	l669
  5164  001830                     u1290:
  5165                           
  5166                           ; BSR set to: 0
  5167                           
  5168                           ; BSR set to: 0
  5169                           
  5170                           ; BSR set to: 0
  5171  001830  90D8               	bcf	status,0,c
  5172  001832  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  5173  001834  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5174                           
  5175                           ; BSR set to: 0
  5176  001836  5162               	movf	___awdiv@divisor& (0+255),w,b
  5177  001838  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  5178  00183A  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5179  00183C  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5180  00183E  A0D8               	btfss	status,0,c
  5181  001840  D005               	goto	l672
  5182                           
  5183                           ; BSR set to: 0
  5184  001842  5162               	movf	___awdiv@divisor& (0+255),w,b
  5185  001844  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  5186  001846  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5187  001848  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5188                           
  5189                           ; BSR set to: 0
  5190  00184A  8166               	bsf	___awdiv@quotient& (0+255),0,b
  5191  00184C                     l672:
  5192                           
  5193                           ; BSR set to: 0
  5194                           
  5195                           ; BSR set to: 0
  5196  00184C  90D8               	bcf	status,0,c
  5197  00184E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5198  001850  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  5199                           
  5200                           ; BSR set to: 0
  5201  001852  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  5202  001854  D7ED               	goto	u1290
  5203  001856                     l673:
  5204                           
  5205                           ; BSR set to: 0
  5206                           
  5207                           ; BSR set to: 0
  5208                           
  5209                           ; BSR set to: 0
  5210  001856  5165               	movf	___awdiv@sign& (0+255),w,b
  5211  001858  B4D8               	btfsc	status,2,c
  5212  00185A  D004               	goto	l674
  5213                           
  5214                           ; BSR set to: 0
  5215  00185C  6D66               	negf	___awdiv@quotient& (0+255),b
  5216  00185E  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5217  001860  B0D8               	btfsc	status,0,c
  5218  001862  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5219  001864                     l674:
  5220                           
  5221                           ; BSR set to: 0
  5222                           
  5223                           ; BSR set to: 0
  5224  001864  C066  F060         	movff	___awdiv@quotient,?___awdiv
  5225  001868  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  5226  00186C  0012               	return	
  5227  00186E                     __end_of___awdiv:
  5228                           	opt stack 0
  5229                           tblptru	equ	0xFF8
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           indf1	equ	0xFE7
  5236                           plusw1	equ	0xFE3
  5237                           fsr1h	equ	0xFE2
  5238                           fsr1l	equ	0xFE1
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           plusw2	equ	0xFDB
  5243                           fsr2h	equ	0xFDA
  5244                           fsr2l	equ	0xFD9
  5245                           status	equ	0xFD8
  5246                           
  5247 ;; *************** function _sprintf *****************
  5248 ;; Defined at:
  5249 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  5252 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  5253 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  5254 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  tmpval          4    0        struct .
  5257 ;;  cp              3    0        PTR const unsigned char 
  5258 ;;  width           2   25[BANK0 ] int 
  5259 ;;  val             2   22[BANK0 ] unsigned int 
  5260 ;;  ap              2   19[BANK0 ] PTR void [1]
  5261 ;;		 -> ?_sprintf(2), 
  5262 ;;  len             2    0        unsigned int 
  5263 ;;  c               1   27[BANK0 ] char 
  5264 ;;  flag            1   24[BANK0 ] unsigned char 
  5265 ;;  prec            1   21[BANK0 ] char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  2    7[BANK0 ] int 
  5268 ;; Registers used:
  5269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5275 ;;      Params:         0       8       0       0
  5276 ;;      Locals:         0       9       0       0
  5277 ;;      Temps:          0       4       0       0
  5278 ;;      Totals:         0      21       0       0
  5279 ;;Total ram usage:       21 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    4
  5282 ;; This function calls:
  5283 ;;		___lwdiv
  5284 ;;		___lwmod
  5285 ;;		___wmul
  5286 ;;		_isdigit
  5287 ;; This function is called by:
  5288 ;;		_ScanIR
  5289 ;;		_ScanWithRange
  5290 ;;		_main
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           	psect	text19
  5295  000EFE                     __ptext19:
  5296                           	opt stack 0
  5297  000EFE                     _sprintf:
  5298                           	opt stack 26
  5299                           
  5300                           ;doprnt.c: 494: va_list ap;
  5301                           ;doprnt.c: 499: signed char c;
  5302                           ;doprnt.c: 501: int width;
  5303                           ;doprnt.c: 506: signed char prec;
  5304                           ;doprnt.c: 508: unsigned char flag;
  5305                           ;doprnt.c: 523: union {
  5306                           ;doprnt.c: 524: unsigned long vd;
  5307                           ;doprnt.c: 525: double integ;
  5308                           ;doprnt.c: 526: } tmpval;
  5309                           ;doprnt.c: 528: unsigned int val;
  5310                           ;doprnt.c: 529: unsigned len;
  5311                           ;doprnt.c: 530: const char * cp;
  5312                           ;doprnt.c: 533: *ap = __va_start();
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;incstack = 0
  5316  000EFE  0E6B               	movlw	low (?_sprintf+4)
  5317  000F00  0100               	movlb	0	; () banked
  5318  000F02  6F73               	movwf	sprintf@ap& (0+255),b
  5319  000F04  0E00               	movlw	high (?_sprintf+4)
  5320  000F06  6F74               	movwf	(sprintf@ap+1)& (0+255),b
  5321                           
  5322                           ;doprnt.c: 536: while(c = *f++) {
  5323  000F08  D136               	goto	u3000
  5324  000F0A                     
  5325                           ; BSR set to: 0
  5326                           ;doprnt.c: 538: if(c != '%')
  5327                           
  5328                           ; BSR set to: 0
  5329  000F0A  0E25               	movlw	37
  5330  000F0C  197B               	xorwf	sprintf@c& (0+255),w,b
  5331  000F0E  B4D8               	btfsc	status,2,c
  5332  000F10  D009               	goto	l459
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;doprnt.c: 540: {
  5336                           ;doprnt.c: 541: ((*sp++ = (c)));
  5337  000F12  C067  FFD9         	movff	sprintf@sp,fsr2l
  5338  000F16  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5339  000F1A  C07B  FFDF         	movff	sprintf@c,indf2
  5340                           
  5341                           ; BSR set to: 0
  5342  000F1E  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5343  000F20  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5344                           
  5345                           ;doprnt.c: 542: continue;
  5346  000F22  D129               	goto	u3000
  5347  000F24                     l459:
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;doprnt.c: 543: }
  5351                           ;doprnt.c: 546: width = 0;
  5352                           
  5353                           ; BSR set to: 0
  5354  000F24  0E00               	movlw	0
  5355  000F26  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5356  000F28  0E00               	movlw	0
  5357  000F2A  6F79               	movwf	sprintf@width& (0+255),b
  5358                           
  5359                           ;doprnt.c: 548: flag = 0;
  5360  000F2C  0E00               	movlw	0
  5361  000F2E  6F78               	movwf	sprintf@flag& (0+255),b
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;doprnt.c: 551: switch(*f) {
  5365                           
  5366                           ;doprnt.c: 550: for(;;) {
  5367  000F30  D004               	goto	l461
  5368  000F32                     
  5369                           ;doprnt.c: 580: flag |= 0x04;
  5370                           
  5371                           ; BSR set to: 0
  5372  000F32  0100               	movlb	0	; () banked
  5373  000F34  8578               	bsf	sprintf@flag& (0+255),2,b
  5374                           
  5375                           ;doprnt.c: 581: f++;
  5376  000F36  4B69               	infsnz	sprintf@f& (0+255),f,b
  5377  000F38  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5378  000F3A                     l461:
  5379                           
  5380                           ; BSR set to: 0
  5381  000F3A  C069  FFF6         	movff	sprintf@f,tblptrl
  5382  000F3E  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5383  000F42                     	if	0	;tblptru may be non-zero
  5384  000F42                     	endif
  5385  000F42                     	if	0	;tblptru may be non-zero
  5386  000F42                     	endif
  5387  000F42  0008               	tblrd		*
  5388  000F44  50F5               	movf	tablat,w,c
  5389                           
  5390                           ; Switch size 1, requested type "space"
  5391                           ; Number of cases is 1, Range of values is 48 to 48
  5392                           ; switch strategies available:
  5393                           ; Name         Instructions Cycles
  5394                           ; simple_byte            4     3 (average)
  5395                           ;	Chosen strategy is simple_byte
  5396  000F46  0A30               	xorlw	48	; case 48
  5397  000F48  B4D8               	btfsc	status,2,c
  5398  000F4A  D7F3               	goto	l462
  5399                           
  5400                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5401                           
  5402                           ;doprnt.c: 586: }
  5403                           
  5404                           ;doprnt.c: 585: break;
  5405  000F4C  C069  FFF6         	movff	sprintf@f,tblptrl
  5406  000F50  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5407  000F54                     	if	0	;tblptru may be non-zero
  5408  000F54                     	endif
  5409  000F54                     	if	0	;tblptru may be non-zero
  5410  000F54                     	endif
  5411  000F54  0008               	tblrd		*
  5412  000F56  50F5               	movf	tablat,w,c
  5413  000F58  ECB2  F00E         	call	_isdigit
  5414  000F5C  A0D8               	btfss	status,0,c
  5415  000F5E  D034               	goto	l469
  5416                           
  5417                           ;doprnt.c: 598: width = 0;
  5418  000F60  0E00               	movlw	0
  5419  000F62  0100               	movlb	0	; () banked
  5420  000F64  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5421  000F66  0E00               	movlw	0
  5422  000F68  6F79               	movwf	sprintf@width& (0+255),b
  5423  000F6A                     
  5424                           ;doprnt.c: 600: width *= 10;
  5425                           
  5426                           ; BSR set to: 0
  5427  000F6A  C079  F02C         	movff	sprintf@width,___wmul@multiplier
  5428  000F6E  C07A  F02D         	movff	sprintf@width+1,___wmul@multiplier+1
  5429  000F72  0E00               	movlw	0
  5430  000F74  6E2F               	movwf	___wmul@multiplicand+1,c
  5431  000F76  0E0A               	movlw	10
  5432  000F78  6E2E               	movwf	___wmul@multiplicand,c
  5433  000F7A  EC8E  F00E         	call	___wmul	;wreg free
  5434  000F7E  C02C  F079         	movff	?___wmul,sprintf@width
  5435  000F82  C02D  F07A         	movff	?___wmul+1,sprintf@width+1
  5436                           
  5437                           ;doprnt.c: 601: width += *f++ - '0';
  5438  000F86  0ED0               	movlw	208
  5439  000F88  0100               	movlb	0	; () banked
  5440  000F8A  6F6F               	movwf	??_sprintf& (0+255),b
  5441  000F8C  0EFF               	movlw	255
  5442  000F8E  6F70               	movwf	(??_sprintf+1)& (0+255),b
  5443  000F90  C069  FFF6         	movff	sprintf@f,tblptrl
  5444  000F94  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5445  000F98                     	if	0	;tblptru may be non-zero
  5446  000F98                     	endif
  5447  000F98                     	if	0	;tblptru may be non-zero
  5448  000F98                     	endif
  5449  000F98  0008               	tblrd		*
  5450  000F9A  50F5               	movf	tablat,w,c
  5451  000F9C  6F71               	movwf	(??_sprintf+2)& (0+255),b
  5452  000F9E  6B72               	clrf	(??_sprintf+3)& (0+255),b
  5453  000FA0  516F               	movf	??_sprintf& (0+255),w,b
  5454  000FA2  2771               	addwf	(??_sprintf+2)& (0+255),f,b
  5455  000FA4  5170               	movf	(??_sprintf+1)& (0+255),w,b
  5456  000FA6  2372               	addwfc	(??_sprintf+3)& (0+255),f,b
  5457  000FA8  5171               	movf	(??_sprintf+2)& (0+255),w,b
  5458  000FAA  2779               	addwf	sprintf@width& (0+255),f,b
  5459  000FAC  5172               	movf	(??_sprintf+3)& (0+255),w,b
  5460  000FAE  237A               	addwfc	(sprintf@width+1)& (0+255),f,b
  5461                           
  5462                           ; BSR set to: 0
  5463  000FB0  4B69               	infsnz	sprintf@f& (0+255),f,b
  5464  000FB2  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5468  000FB4  C069  FFF6         	movff	sprintf@f,tblptrl
  5469  000FB8  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5470  000FBC                     	if	0	;tblptru may be non-zero
  5471  000FBC                     	endif
  5472  000FBC                     	if	0	;tblptru may be non-zero
  5473  000FBC                     	endif
  5474  000FBC  0008               	tblrd		*
  5475  000FBE  50F5               	movf	tablat,w,c
  5476  000FC0  ECB2  F00E         	call	_isdigit
  5477  000FC4  B0D8               	btfsc	status,0,c
  5478  000FC6  D7D1               	goto	l467
  5479  000FC8                     l469:
  5480  000FC8  C069  FFF6         	movff	sprintf@f,tblptrl
  5481  000FCC  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5482  000FD0  0100               	movlb	0	; () banked
  5483  000FD2  4B69               	infsnz	sprintf@f& (0+255),f,b
  5484  000FD4  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5485  000FD6                     	if	0	;tblptru may be non-zero
  5486  000FD6                     	endif
  5487  000FD6                     	if	0	;tblptru may be non-zero
  5488  000FD6                     	endif
  5489  000FD6  0008               	tblrd		*
  5490  000FD8  CFF5 F07B          	movff	tablat,sprintf@c
  5491  000FDC  517B               	movf	sprintf@c& (0+255),w,b
  5492                           
  5493                           ; Switch size 1, requested type "space"
  5494                           ; Number of cases is 3, Range of values is 0 to 105
  5495                           ; switch strategies available:
  5496                           ; Name         Instructions Cycles
  5497                           ; simple_byte           10     6 (average)
  5498                           ;	Chosen strategy is simple_byte
  5499  000FDE  0A00               	xorlw	0	; case 0
  5500  000FE0  B4D8               	btfsc	status,2,c
  5501  000FE2  D0D6               	goto	u3010
  5502  000FE4  0A64               	xorlw	100	; case 100
  5503  000FE6  B4D8               	btfsc	status,2,c
  5504  000FE8  D003               	goto	l474
  5505  000FEA  0A0D               	xorlw	13	; case 105
  5506  000FEC  A4D8               	btfss	status,2,c
  5507  000FEE  D0C3               	goto	u3000
  5508  000FF0                     l474:
  5509                           
  5510                           ;doprnt.c: 1253: {
  5511                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5512                           
  5513                           ; BSR set to: 0
  5514  000FF0  C073  FFD9         	movff	sprintf@ap,fsr2l
  5515  000FF4  C074  FFDA         	movff	sprintf@ap+1,fsr2h
  5516  000FF8  CFDE F076          	movff	postinc2,sprintf@val
  5517  000FFC  CFDD F077          	movff	postdec2,sprintf@val+1
  5518  001000  0E02               	movlw	2
  5519  001002  0100               	movlb	0	; () banked
  5520  001004  2773               	addwf	sprintf@ap& (0+255),f,b
  5521  001006  0E00               	movlw	0
  5522  001008  2374               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;doprnt.c: 1261: if((int)val < 0) {
  5526  00100A  AF77               	btfss	(sprintf@val+1)& (0+255),7,b
  5527  00100C  D006               	goto	l476
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;doprnt.c: 1262: flag |= 0x03;
  5531  00100E  0E03               	movlw	3
  5532  001010  1378               	iorwf	sprintf@flag& (0+255),f,b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;doprnt.c: 1263: val = -val;
  5536  001012  6D76               	negf	sprintf@val& (0+255),b
  5537  001014  1F77               	comf	(sprintf@val+1)& (0+255),f,b
  5538  001016  B0D8               	btfsc	status,0,c
  5539  001018  2B77               	incf	(sprintf@val+1)& (0+255),f,b
  5540  00101A                     l476:
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;doprnt.c: 1264: }
  5544                           ;doprnt.c: 1266: }
  5545                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5546                           
  5547                           ; BSR set to: 0
  5548  00101A  0E01               	movlw	1
  5549  00101C  6F7B               	movwf	sprintf@c& (0+255),b
  5550  00101E                     l3282:
  5551                           
  5552                           ; BSR set to: 0
  5553  00101E  0E05               	movlw	5
  5554  001020  197B               	xorwf	sprintf@c& (0+255),w,b
  5555  001022  B4D8               	btfsc	status,2,c
  5556  001024  D012               	goto	u2890
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;doprnt.c: 1306: if(val < dpowers[c])
  5560                           
  5561                           ; BSR set to: 0
  5562                           
  5563                           ; BSR set to: 0
  5564  001026  517B               	movf	sprintf@c& (0+255),w,b
  5565  001028  0D02               	mullw	2
  5566  00102A  0E01               	movlw	low _dpowers
  5567  00102C  24F3               	addwf	prodl,w,c
  5568  00102E  6EF6               	movwf	tblptrl,c
  5569  001030  0E03               	movlw	high _dpowers
  5570  001032  20F4               	addwfc	prodh,w,c
  5571  001034  6EF7               	movwf	tblptrh,c
  5572  001036                     	if	0	;There are less than 3 active tblptr bytes
  5573  001036                     	endif
  5574  001036  0009               	tblrd		*+
  5575  001038  50F5               	movf	tablat,w,c
  5576  00103A  5D76               	subwf	sprintf@val& (0+255),w,b
  5577  00103C  0009               	tblrd		*+
  5578  00103E  50F5               	movf	tablat,w,c
  5579  001040  5977               	subwfb	(sprintf@val+1)& (0+255),w,b
  5580  001042  A0D8               	btfss	status,0,c
  5581  001044  D002               	goto	u2890
  5582                           
  5583                           ; BSR set to: 0
  5584                           
  5585                           ; BSR set to: 0
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;doprnt.c: 1307: break;
  5589  001046  2B7B               	incf	sprintf@c& (0+255),f,b
  5590  001048  D7EA               	goto	l3282
  5591  00104A                     u2890:
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5595                           
  5596                           ; BSR set to: 0
  5597  00104A  5179               	movf	sprintf@width& (0+255),w,b
  5598  00104C  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5599  00104E  B4D8               	btfsc	status,2,c
  5600  001050  D009               	goto	l480
  5601                           
  5602                           ; BSR set to: 0
  5603  001052  C078  F06F         	movff	sprintf@flag,??_sprintf
  5604  001056  0E03               	movlw	3
  5605  001058  176F               	andwf	??_sprintf& (0+255),f,b
  5606  00105A  B4D8               	btfsc	status,2,c
  5607  00105C  D003               	goto	l480
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;doprnt.c: 1346: width--;
  5611  00105E  0779               	decf	sprintf@width& (0+255),f,b
  5612  001060  A0D8               	btfss	status,0,c
  5613  001062  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5614  001064                     l480:
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;doprnt.c: 1381: if(width > c)
  5618                           
  5619                           ; BSR set to: 0
  5620  001064  0E80               	movlw	128
  5621  001066  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5622  001068  0E7F               	movlw	127
  5623  00106A  6F6F               	movwf	??_sprintf& (0+255),b
  5624  00106C  5179               	movf	sprintf@width& (0+255),w,b
  5625  00106E  5D7B               	subwf	sprintf@c& (0+255),w,b
  5626  001070  517A               	movf	(sprintf@width+1)& (0+255),w,b
  5627  001072  0A80               	xorlw	128
  5628  001074  596F               	subwfb	??_sprintf& (0+255),w,b
  5629  001076  B0D8               	btfsc	status,0,c
  5630  001078  D007               	goto	l481
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;doprnt.c: 1382: width -= c;
  5634  00107A  517B               	movf	sprintf@c& (0+255),w,b
  5635  00107C  5F79               	subwf	sprintf@width& (0+255),f,b
  5636  00107E  0E00               	movlw	0
  5637  001080  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5638  001082  0EFF               	movlw	255
  5639  001084  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  5640  001086  D004               	goto	l482
  5641  001088                     l481:
  5642                           
  5643                           ; BSR set to: 0
  5644                           ;doprnt.c: 1383: else
  5645                           ;doprnt.c: 1384: width = 0;
  5646                           
  5647                           ; BSR set to: 0
  5648  001088  0E00               	movlw	0
  5649  00108A  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5650  00108C  0E00               	movlw	0
  5651  00108E  6F79               	movwf	sprintf@width& (0+255),b
  5652  001090                     l482:
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;doprnt.c: 1387: if(flag & 0x04) {
  5656                           
  5657                           ; BSR set to: 0
  5658  001090  A578               	btfss	sprintf@flag& (0+255),2,b
  5659  001092  D01E               	goto	l483
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;doprnt.c: 1392: if(flag & 0x03)
  5663  001094  C078  F06F         	movff	sprintf@flag,??_sprintf
  5664  001098  0E03               	movlw	3
  5665  00109A  176F               	andwf	??_sprintf& (0+255),f,b
  5666  00109C  B4D8               	btfsc	status,2,c
  5667  00109E  D008               	goto	l484
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5671  0010A0  C067  FFD9         	movff	sprintf@sp,fsr2l
  5672  0010A4  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5673  0010A8  0E2D               	movlw	45
  5674  0010AA  6EDF               	movwf	indf2,c
  5675                           
  5676                           ; BSR set to: 0
  5677  0010AC  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5678  0010AE  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5679  0010B0                     l484:
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;doprnt.c: 1415: if(width)
  5683                           
  5684                           ; BSR set to: 0
  5685  0010B0  5179               	movf	sprintf@width& (0+255),w,b
  5686  0010B2  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5687  0010B4  B4D8               	btfsc	status,2,c
  5688  0010B6  D02D               	goto	l492
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5692                           
  5693                           ; BSR set to: 0
  5694                           
  5695                           ;doprnt.c: 1416: do
  5696  0010B8  C067  FFD9         	movff	sprintf@sp,fsr2l
  5697  0010BC  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5698  0010C0  0E30               	movlw	48
  5699  0010C2  6EDF               	movwf	indf2,c
  5700                           
  5701                           ; BSR set to: 0
  5702  0010C4  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5703  0010C6  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;doprnt.c: 1418: while(--width);
  5707  0010C8  0779               	decf	sprintf@width& (0+255),f,b
  5708  0010CA  A0D8               	btfss	status,0,c
  5709  0010CC  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5710  0010CE  D7F0               	goto	l484
  5711  0010D0                     l483:
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;doprnt.c: 1422: {
  5715                           ;doprnt.c: 1424: if(width
  5716                           ;doprnt.c: 1428: )
  5717                           
  5718                           ; BSR set to: 0
  5719  0010D0  5179               	movf	sprintf@width& (0+255),w,b
  5720  0010D2  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5721  0010D4  B4D8               	btfsc	status,2,c
  5722  0010D6  D00F               	goto	u2980
  5723  0010D8                     u2970:
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5727                           
  5728                           ; BSR set to: 0
  5729                           
  5730                           ;doprnt.c: 1429: do
  5731  0010D8  C067  FFD9         	movff	sprintf@sp,fsr2l
  5732  0010DC  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5733  0010E0  0E20               	movlw	32
  5734  0010E2  6EDF               	movwf	indf2,c
  5735                           
  5736                           ; BSR set to: 0
  5737  0010E4  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5738  0010E6  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;doprnt.c: 1431: while(--width);
  5742  0010E8  0779               	decf	sprintf@width& (0+255),f,b
  5743  0010EA  A0D8               	btfss	status,0,c
  5744  0010EC  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5745  0010EE  5179               	movf	sprintf@width& (0+255),w,b
  5746  0010F0  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5747  0010F2  A4D8               	btfss	status,2,c
  5748  0010F4  D7F1               	goto	u2970
  5749  0010F6                     u2980:
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;doprnt.c: 1438: if(flag & 0x03)
  5753                           
  5754                           ; BSR set to: 0
  5755                           
  5756                           ; BSR set to: 0
  5757  0010F6  C078  F06F         	movff	sprintf@flag,??_sprintf
  5758  0010FA  0E03               	movlw	3
  5759  0010FC  176F               	andwf	??_sprintf& (0+255),f,b
  5760  0010FE  B4D8               	btfsc	status,2,c
  5761  001100  D008               	goto	l492
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5765  001102  C067  FFD9         	movff	sprintf@sp,fsr2l
  5766  001106  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5767  00110A  0E2D               	movlw	45
  5768  00110C  6EDF               	movwf	indf2,c
  5769                           
  5770                           ; BSR set to: 0
  5771  00110E  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5772  001110  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5773  001112                     l492:
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;doprnt.c: 1469: }
  5777                           ;doprnt.c: 1472: prec = c;
  5778                           
  5779                           ; BSR set to: 0
  5780                           
  5781                           ; BSR set to: 0
  5782  001112  C07B  F075         	movff	sprintf@c,sprintf@prec
  5783                           
  5784                           ;doprnt.c: 1474: while(prec--) {
  5785  001116  D02B               	goto	l493
  5786  001118                     
  5787                           ; BSR set to: 0
  5788                           ;doprnt.c: 1478: {
  5789                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5790                           
  5791                           ; BSR set to: 0
  5792  001118  5175               	movf	sprintf@prec& (0+255),w,b
  5793  00111A  0D02               	mullw	2
  5794  00111C  0E01               	movlw	low _dpowers
  5795  00111E  24F3               	addwf	prodl,w,c
  5796  001120  6EF6               	movwf	tblptrl,c
  5797  001122  0E03               	movlw	high _dpowers
  5798  001124  20F4               	addwfc	prodh,w,c
  5799  001126  6EF7               	movwf	tblptrh,c
  5800  001128                     	if	0	;There are less than 3 active tblptr bytes
  5801  001128                     	endif
  5802  001128  0009               	tblrd		*+
  5803  00112A  CFF5 F02E          	movff	tablat,___lwdiv@divisor
  5804  00112E  000A               	tblrd		*-
  5805  001130  CFF5 F02F          	movff	tablat,___lwdiv@divisor+1
  5806  001134  C076  F02C         	movff	sprintf@val,___lwdiv@dividend
  5807  001138  C077  F02D         	movff	sprintf@val+1,___lwdiv@dividend+1
  5808  00113C  EC1B  F00D         	call	___lwdiv	;wreg free
  5809  001140  C02C  F063         	movff	?___lwdiv,___lwmod@dividend
  5810  001144  C02D  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  5811  001148  0E00               	movlw	0
  5812  00114A  0100               	movlb	0	; () banked
  5813  00114C  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  5814  00114E  0E0A               	movlw	10
  5815  001150  6F65               	movwf	___lwmod@divisor& (0+255),b
  5816  001152  EC45  F00D         	call	___lwmod	;wreg free
  5817  001156  0100               	movlb	0	; () banked
  5818  001158  5163               	movf	?___lwmod& (0+255),w,b
  5819  00115A  0F30               	addlw	48
  5820  00115C  6F7B               	movwf	sprintf@c& (0+255),b
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;doprnt.c: 1523: }
  5824                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5825  00115E  C067  FFD9         	movff	sprintf@sp,fsr2l
  5826  001162  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5827  001166  C07B  FFDF         	movff	sprintf@c,indf2
  5828                           
  5829                           ; BSR set to: 0
  5830  00116A  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5831  00116C  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5832  00116E                     l493:
  5833                           
  5834                           ; BSR set to: 0
  5835                           
  5836                           ; BSR set to: 0
  5837  00116E  0775               	decf	sprintf@prec& (0+255),f,b
  5838  001170  2975               	incf	sprintf@prec& (0+255),w,b
  5839  001172  A4D8               	btfss	status,2,c
  5840  001174  D7D1               	goto	l494
  5841  001176                     u3000:
  5842                           
  5843                           ; BSR set to: 0
  5844                           
  5845                           ; BSR set to: 0
  5846  001176  C069  FFF6         	movff	sprintf@f,tblptrl
  5847  00117A  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5848  00117E  0100               	movlb	0	; () banked
  5849  001180  4B69               	infsnz	sprintf@f& (0+255),f,b
  5850  001182  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5851  001184                     	if	0	;tblptru may be non-zero
  5852  001184                     	endif
  5853  001184                     	if	0	;tblptru may be non-zero
  5854  001184                     	endif
  5855  001184  0008               	tblrd		*
  5856  001186  CFF5 F07B          	movff	tablat,sprintf@c
  5857  00118A  517B               	movf	sprintf@c& (0+255),w,b
  5858  00118C  A4D8               	btfss	status,2,c
  5859  00118E  D6BD               	goto	l458
  5860  001190                     u3010:
  5861                           
  5862                           ;doprnt.c: 1538: *sp = 0;
  5863                           
  5864                           ; BSR set to: 0
  5865                           
  5866                           ;doprnt.c: 1525: }
  5867                           ;doprnt.c: 1533: }
  5868                           ;doprnt.c: 1535: alldone:
  5869                           
  5870                           ; BSR set to: 0
  5871  001190  C067  FFD9         	movff	sprintf@sp,fsr2l
  5872  001194  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5873  001198  0E00               	movlw	0
  5874  00119A  6EDF               	movwf	indf2,c
  5875  00119C  0012               	return	
  5876  00119E                     __end_of_sprintf:
  5877                           	opt stack 0
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           intcon	equ	0xFF2
  5885                           postinc0	equ	0xFEE
  5886                           wreg	equ	0xFE8
  5887                           indf1	equ	0xFE7
  5888                           plusw1	equ	0xFE3
  5889                           fsr1h	equ	0xFE2
  5890                           fsr1l	equ	0xFE1
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           plusw2	equ	0xFDB
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _isdigit *****************
  5900 ;; Defined at:
  5901 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  c               1    wreg     unsigned char 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  c               1   45[COMRAM] unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;		None               void
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5915 ;;      Params:         0       0       0       0
  5916 ;;      Locals:         2       0       0       0
  5917 ;;      Temps:          1       0       0       0
  5918 ;;      Totals:         3       0       0       0
  5919 ;;Total ram usage:        3 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    3
  5922 ;; This function calls:
  5923 ;;		Nothing
  5924 ;; This function is called by:
  5925 ;;		_sprintf
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text20
  5930  001D64                     __ptext20:
  5931                           	opt stack 0
  5932  001D64                     _isdigit:
  5933                           	opt stack 26
  5934                           
  5935                           ;incstack = 0
  5936                           ;isdigit@c stored from wreg
  5937  001D64  6E2E               	movwf	isdigit@c,c
  5938  001D66  0E00               	movlw	0
  5939  001D68  6E2D               	movwf	_isdigit$1765,c
  5940  001D6A  0E3A               	movlw	58
  5941  001D6C  602E               	cpfslt	isdigit@c,c
  5942  001D6E  D005               	goto	l827
  5943  001D70  0E2F               	movlw	47
  5944  001D72  642E               	cpfsgt	isdigit@c,c
  5945  001D74  D002               	goto	l827
  5946  001D76  0E01               	movlw	1
  5947  001D78  6E2D               	movwf	_isdigit$1765,c
  5948  001D7A                     l827:
  5949  001D7A  C02D  F02C         	movff	_isdigit$1765,??_isdigit
  5950  001D7E  302C               	rrcf	??_isdigit,w,c
  5951  001D80  0012               	return	
  5952  001D82                     __end_of_isdigit:
  5953                           	opt stack 0
  5954                           tblptru	equ	0xFF8
  5955                           tblptrh	equ	0xFF7
  5956                           tblptrl	equ	0xFF6
  5957                           tablat	equ	0xFF5
  5958                           prodh	equ	0xFF4
  5959                           prodl	equ	0xFF3
  5960                           intcon	equ	0xFF2
  5961                           postinc0	equ	0xFEE
  5962                           wreg	equ	0xFE8
  5963                           indf1	equ	0xFE7
  5964                           plusw1	equ	0xFE3
  5965                           fsr1h	equ	0xFE2
  5966                           fsr1l	equ	0xFE1
  5967                           indf2	equ	0xFDF
  5968                           postinc2	equ	0xFDE
  5969                           postdec2	equ	0xFDD
  5970                           plusw2	equ	0xFDB
  5971                           fsr2h	equ	0xFDA
  5972                           fsr2l	equ	0xFD9
  5973                           status	equ	0xFD8
  5974                           
  5975 ;; *************** function ___wmul *****************
  5976 ;; Defined at:
  5977 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  multiplier      2   43[COMRAM] unsigned int 
  5980 ;;  multiplicand    2   45[COMRAM] unsigned int 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  product         2   47[COMRAM] unsigned int 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  2   43[COMRAM] unsigned int 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, prodl, prodh
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5992 ;;      Params:         4       0       0       0
  5993 ;;      Locals:         2       0       0       0
  5994 ;;      Temps:          0       0       0       0
  5995 ;;      Totals:         6       0       0       0
  5996 ;;Total ram usage:        6 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    3
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		_setMotorPWM
  6003 ;;		_sprintf
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text21
  6008  001D1C                     __ptext21:
  6009                           	opt stack 0
  6010  001D1C                     ___wmul:
  6011                           	opt stack 24
  6012                           
  6013                           ;incstack = 0
  6014  001D1C  502C               	movf	___wmul@multiplier,w,c
  6015  001D1E  022E               	mulwf	___wmul@multiplicand,c
  6016  001D20  CFF3 F030          	movff	prodl,___wmul@product
  6017  001D24  CFF4 F031          	movff	prodh,___wmul@product+1
  6018  001D28  502C               	movf	___wmul@multiplier,w,c
  6019  001D2A  022F               	mulwf	___wmul@multiplicand+1,c
  6020  001D2C  50F3               	movf	prodl,w,c
  6021  001D2E  2631               	addwf	___wmul@product+1,f,c
  6022  001D30  502D               	movf	___wmul@multiplier+1,w,c
  6023  001D32  022E               	mulwf	___wmul@multiplicand,c
  6024  001D34  50F3               	movf	prodl,w,c
  6025  001D36  2631               	addwf	___wmul@product+1,f,c
  6026  001D38  C030  F02C         	movff	___wmul@product,?___wmul
  6027  001D3C  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  6028  001D40  0012               	return	
  6029  001D42                     __end_of___wmul:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           tblptrh	equ	0xFF7
  6033                           tblptrl	equ	0xFF6
  6034                           tablat	equ	0xFF5
  6035                           prodh	equ	0xFF4
  6036                           prodl	equ	0xFF3
  6037                           intcon	equ	0xFF2
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           indf1	equ	0xFE7
  6041                           plusw1	equ	0xFE3
  6042                           fsr1h	equ	0xFE2
  6043                           fsr1l	equ	0xFE1
  6044                           indf2	equ	0xFDF
  6045                           postinc2	equ	0xFDE
  6046                           postdec2	equ	0xFDD
  6047                           plusw2	equ	0xFDB
  6048                           fsr2h	equ	0xFDA
  6049                           fsr2l	equ	0xFD9
  6050                           status	equ	0xFD8
  6051                           
  6052 ;; *************** function ___lwmod *****************
  6053 ;; Defined at:
  6054 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  dividend        2    3[BANK0 ] unsigned int 
  6057 ;;  divisor         2    5[BANK0 ] unsigned int 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  counter         1   47[COMRAM] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  2    3[BANK0 ] unsigned int 
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6069 ;;      Params:         0       4       0       0
  6070 ;;      Locals:         1       0       0       0
  6071 ;;      Temps:          0       0       0       0
  6072 ;;      Totals:         1       4       0       0
  6073 ;;Total ram usage:        5 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    3
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_sprintf
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text22
  6084  001A8A                     __ptext22:
  6085                           	opt stack 0
  6086  001A8A                     ___lwmod:
  6087                           	opt stack 26
  6088                           
  6089                           ;incstack = 0
  6090  001A8A  0100               	movlb	0	; () banked
  6091  001A8C  5165               	movf	___lwmod@divisor& (0+255),w,b
  6092  001A8E  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6093  001A90  B4D8               	btfsc	status,2,c
  6094  001A92  D018               	goto	l921
  6095                           
  6096                           ; BSR set to: 0
  6097  001A94  0E01               	movlw	1
  6098  001A96  6E30               	movwf	___lwmod@counter,c
  6099  001A98  D004               	goto	l916
  6100  001A9A                     
  6101                           ; BSR set to: 0
  6102                           
  6103                           ; BSR set to: 0
  6104  001A9A  90D8               	bcf	status,0,c
  6105  001A9C  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  6106  001A9E  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6107  001AA0  2A30               	incf	___lwmod@counter,f,c
  6108  001AA2                     l916:
  6109                           
  6110                           ; BSR set to: 0
  6111                           
  6112                           ; BSR set to: 0
  6113  001AA2  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6114  001AA4  D7FA               	goto	l917
  6115  001AA6                     u1540:
  6116                           
  6117                           ; BSR set to: 0
  6118                           
  6119                           ; BSR set to: 0
  6120                           
  6121                           ; BSR set to: 0
  6122  001AA6  5165               	movf	___lwmod@divisor& (0+255),w,b
  6123  001AA8  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  6124  001AAA  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6125  001AAC  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6126  001AAE  A0D8               	btfss	status,0,c
  6127  001AB0  D004               	goto	l920
  6128                           
  6129                           ; BSR set to: 0
  6130  001AB2  5165               	movf	___lwmod@divisor& (0+255),w,b
  6131  001AB4  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  6132  001AB6  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6133  001AB8  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6134  001ABA                     l920:
  6135                           
  6136                           ; BSR set to: 0
  6137                           
  6138                           ; BSR set to: 0
  6139  001ABA  90D8               	bcf	status,0,c
  6140  001ABC  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6141  001ABE  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  6142                           
  6143                           ; BSR set to: 0
  6144  001AC0  2E30               	decfsz	___lwmod@counter,f,c
  6145  001AC2  D7F1               	goto	u1540
  6146  001AC4                     l921:
  6147                           
  6148                           ; BSR set to: 0
  6149                           
  6150                           ; BSR set to: 0
  6151  001AC4  C063  F063         	movff	___lwmod@dividend,?___lwmod
  6152  001AC8  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  6153                           
  6154                           ; BSR set to: 0
  6155  001ACC  0012               	return		;funcret
  6156  001ACE                     __end_of___lwmod:
  6157                           	opt stack 0
  6158                           tblptru	equ	0xFF8
  6159                           tblptrh	equ	0xFF7
  6160                           tblptrl	equ	0xFF6
  6161                           tablat	equ	0xFF5
  6162                           prodh	equ	0xFF4
  6163                           prodl	equ	0xFF3
  6164                           intcon	equ	0xFF2
  6165                           postinc0	equ	0xFEE
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           plusw1	equ	0xFE3
  6169                           fsr1h	equ	0xFE2
  6170                           fsr1l	equ	0xFE1
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           plusw2	equ	0xFDB
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function ___lwdiv *****************
  6180 ;; Defined at:
  6181 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  dividend        2   43[COMRAM] unsigned int 
  6184 ;;  divisor         2   45[COMRAM] unsigned int 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;  quotient        2    1[BANK0 ] unsigned int 
  6187 ;;  counter         1    0[BANK0 ] unsigned char 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  2   43[COMRAM] unsigned int 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6197 ;;      Params:         4       0       0       0
  6198 ;;      Locals:         0       3       0       0
  6199 ;;      Temps:          0       0       0       0
  6200 ;;      Totals:         4       3       0       0
  6201 ;;Total ram usage:        7 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    3
  6204 ;; This function calls:
  6205 ;;		Nothing
  6206 ;; This function is called by:
  6207 ;;		_sprintf
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           	psect	text23
  6212  001A36                     __ptext23:
  6213                           	opt stack 0
  6214  001A36                     ___lwdiv:
  6215                           	opt stack 26
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;incstack = 0
  6219  001A36  0E00               	movlw	0
  6220  001A38  0100               	movlb	0	; () banked
  6221  001A3A  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6222  001A3C  0E00               	movlw	0
  6223  001A3E  6F61               	movwf	___lwdiv@quotient& (0+255),b
  6224                           
  6225                           ; BSR set to: 0
  6226  001A40  502E               	movf	___lwdiv@divisor,w,c
  6227  001A42  102F               	iorwf	___lwdiv@divisor+1,w,c
  6228  001A44  B4D8               	btfsc	status,2,c
  6229  001A46  D01C               	goto	l911
  6230                           
  6231                           ; BSR set to: 0
  6232  001A48  0E01               	movlw	1
  6233  001A4A  6F60               	movwf	___lwdiv@counter& (0+255),b
  6234  001A4C  D004               	goto	l906
  6235  001A4E                     
  6236                           ; BSR set to: 0
  6237                           
  6238                           ; BSR set to: 0
  6239  001A4E  90D8               	bcf	status,0,c
  6240  001A50  362E               	rlcf	___lwdiv@divisor,f,c
  6241  001A52  362F               	rlcf	___lwdiv@divisor+1,f,c
  6242  001A54  2B60               	incf	___lwdiv@counter& (0+255),f,b
  6243  001A56                     l906:
  6244                           
  6245                           ; BSR set to: 0
  6246                           
  6247                           ; BSR set to: 0
  6248  001A56  AE2F               	btfss	___lwdiv@divisor+1,7,c
  6249  001A58  D7FA               	goto	l907
  6250  001A5A                     u2660:
  6251                           
  6252                           ; BSR set to: 0
  6253                           
  6254                           ; BSR set to: 0
  6255                           
  6256                           ; BSR set to: 0
  6257  001A5A  90D8               	bcf	status,0,c
  6258  001A5C  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  6259  001A5E  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6260                           
  6261                           ; BSR set to: 0
  6262  001A60  502E               	movf	___lwdiv@divisor,w,c
  6263  001A62  5C2C               	subwf	___lwdiv@dividend,w,c
  6264  001A64  502F               	movf	___lwdiv@divisor+1,w,c
  6265  001A66  582D               	subwfb	___lwdiv@dividend+1,w,c
  6266  001A68  A0D8               	btfss	status,0,c
  6267  001A6A  D005               	goto	l910
  6268                           
  6269                           ; BSR set to: 0
  6270  001A6C  502E               	movf	___lwdiv@divisor,w,c
  6271  001A6E  5E2C               	subwf	___lwdiv@dividend,f,c
  6272  001A70  502F               	movf	___lwdiv@divisor+1,w,c
  6273  001A72  5A2D               	subwfb	___lwdiv@dividend+1,f,c
  6274                           
  6275                           ; BSR set to: 0
  6276  001A74  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  6277  001A76                     l910:
  6278                           
  6279                           ; BSR set to: 0
  6280                           
  6281                           ; BSR set to: 0
  6282  001A76  90D8               	bcf	status,0,c
  6283  001A78  322F               	rrcf	___lwdiv@divisor+1,f,c
  6284  001A7A  322E               	rrcf	___lwdiv@divisor,f,c
  6285                           
  6286                           ; BSR set to: 0
  6287  001A7C  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  6288  001A7E  D7ED               	goto	u2660
  6289  001A80                     l911:
  6290                           
  6291                           ; BSR set to: 0
  6292                           
  6293                           ; BSR set to: 0
  6294  001A80  C061  F02C         	movff	___lwdiv@quotient,?___lwdiv
  6295  001A84  C062  F02D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6296                           
  6297                           ; BSR set to: 0
  6298  001A88  0012               	return		;funcret
  6299  001A8A                     __end_of___lwdiv:
  6300                           	opt stack 0
  6301                           tblptru	equ	0xFF8
  6302                           tblptrh	equ	0xFF7
  6303                           tblptrl	equ	0xFF6
  6304                           tablat	equ	0xFF5
  6305                           prodh	equ	0xFF4
  6306                           prodl	equ	0xFF3
  6307                           intcon	equ	0xFF2
  6308                           postinc0	equ	0xFEE
  6309                           wreg	equ	0xFE8
  6310                           indf1	equ	0xFE7
  6311                           plusw1	equ	0xFE3
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           postdec2	equ	0xFDD
  6317                           plusw2	equ	0xFDB
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _grabRightIR *****************
  6323 ;; Defined at:
  6324 ;;		line 51 in file "IR_Reading.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6329 ;;  i               1    2[BANK0 ] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  2   43[COMRAM] unsigned int 
  6332 ;; Registers used:
  6333 ;;		wreg, status,2, status,0
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6339 ;;      Params:         2       0       0       0
  6340 ;;      Locals:         0       3       0       0
  6341 ;;      Temps:          3       0       0       0
  6342 ;;      Totals:         5       3       0       0
  6343 ;;Total ram usage:        8 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    3
  6346 ;; This function calls:
  6347 ;;		Nothing
  6348 ;; This function is called by:
  6349 ;;		_ScanIR
  6350 ;;		_ScanWithRange
  6351 ;;		_main
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text24
  6356  0018EA                     __ptext24:
  6357                           	opt stack 0
  6358  0018EA                     _grabRightIR:
  6359                           	opt stack 27
  6360                           
  6361                           ;IR_Reading.c: 53: unsigned int IR_signal=0;
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;incstack = 0
  6365  0018EA  0E00               	movlw	0
  6366  0018EC  0100               	movlb	0	; () banked
  6367  0018EE  6F61               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  6368  0018F0  0E00               	movlw	0
  6369  0018F2  6F60               	movwf	grabRightIR@IR_signal& (0+255),b
  6370                           
  6371                           ;IR_Reading.c: 54: unsigned char i=0;
  6372  0018F4  0E00               	movlw	0
  6373  0018F6  6F62               	movwf	grabRightIR@i& (0+255),b
  6374                           
  6375                           ;IR_Reading.c: 56: for (i=0; i<4; i++) {
  6376  0018F8  0E00               	movlw	0
  6377  0018FA  6F62               	movwf	grabRightIR@i& (0+255),b
  6378  0018FC                     l3188:
  6379                           
  6380                           ; BSR set to: 0
  6381  0018FC  0E03               	movlw	3
  6382  0018FE  6562               	cpfsgt	grabRightIR@i& (0+255),b
  6383  001900  D001               	goto	l107
  6384  001902  D01F               	goto	u2740
  6385  001904                     l107:
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;IR_Reading.c: 58: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6389                           
  6390                           ; BSR set to: 0
  6391  001904  5069               	movf	3945,w,c	;volatile
  6392  001906  6E2E               	movwf	??_grabRightIR& (0+255),c
  6393  001908  6A2F               	clrf	(??_grabRightIR+1)& (0+255),c
  6394  00190A  0E07               	movlw	7
  6395  00190C                     u2735:
  6396  00190C  90D8               	bcf	status,0,c
  6397  00190E  362E               	rlcf	??_grabRightIR,f,c
  6398  001910  362F               	rlcf	??_grabRightIR+1,f,c
  6399  001912  2EE8               	decfsz	wreg,f,c
  6400  001914  D7FB               	goto	u2735
  6401  001916  CF68 F030          	movff	3944,??_grabRightIR+2	;volatile
  6402  00191A  90D8               	bcf	status,0,c
  6403  00191C  3230               	rrcf	??_grabRightIR+2,f,c
  6404  00191E  5030               	movf	??_grabRightIR+2,w,c
  6405  001920  122E               	iorwf	??_grabRightIR,f,c
  6406  001922  0E00               	movlw	0
  6407  001924  122F               	iorwf	??_grabRightIR+1,f,c
  6408  001926  502E               	movf	??_grabRightIR,w,c
  6409  001928  2760               	addwf	grabRightIR@IR_signal& (0+255),f,b
  6410  00192A  502F               	movf	??_grabRightIR+1,w,c
  6411  00192C  2361               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;IR_Reading.c: 59: _delay((unsigned long)((50)*(8000000/4000.0)));
  6415  00192E  0E82               	movlw	130
  6416  001930  6E2E               	movwf	??_grabRightIR& (0+255),c
  6417  001932  0EDE               	movlw	222
  6418  001934                     u3687:
  6419  001934  2EE8               	decfsz	wreg,f,c
  6420  001936  D7FE               	bra	u3687
  6421  001938  2E2E               	decfsz	??_grabRightIR& (0+255),f,c
  6422  00193A  D7FC               	bra	u3687
  6423  00193C  0100               	movlb	0	; () banked
  6424  00193E  2B62               	incf	grabRightIR@i& (0+255),f,b
  6425  001940  D7DD               	goto	l3188
  6426  001942                     u2740:
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;IR_Reading.c: 60: }
  6430                           ;IR_Reading.c: 62: return IR_signal>>2;
  6431                           
  6432                           ; BSR set to: 0
  6433  001942  C060  F02E         	movff	grabRightIR@IR_signal,??_grabRightIR
  6434  001946  C061  F02F         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6435  00194A  90D8               	bcf	status,0,c
  6436  00194C  322F               	rrcf	??_grabRightIR+1,f,c
  6437  00194E  322E               	rrcf	??_grabRightIR,f,c
  6438  001950  90D8               	bcf	status,0,c
  6439  001952  322F               	rrcf	??_grabRightIR+1,f,c
  6440  001954  322E               	rrcf	??_grabRightIR,f,c
  6441  001956  C02E  F02C         	movff	??_grabRightIR,?_grabRightIR
  6442  00195A  C02F  F02D         	movff	??_grabRightIR+1,?_grabRightIR+1
  6443  00195E  0012               	return	
  6444  001960                     __end_of_grabRightIR:
  6445                           	opt stack 0
  6446                           tblptru	equ	0xFF8
  6447                           tblptrh	equ	0xFF7
  6448                           tblptrl	equ	0xFF6
  6449                           tablat	equ	0xFF5
  6450                           prodh	equ	0xFF4
  6451                           prodl	equ	0xFF3
  6452                           intcon	equ	0xFF2
  6453                           postinc0	equ	0xFEE
  6454                           wreg	equ	0xFE8
  6455                           indf1	equ	0xFE7
  6456                           plusw1	equ	0xFE3
  6457                           fsr1h	equ	0xFE2
  6458                           fsr1l	equ	0xFE1
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           plusw2	equ	0xFDB
  6463                           fsr2h	equ	0xFDA
  6464                           fsr2l	equ	0xFD9
  6465                           status	equ	0xFD8
  6466                           
  6467 ;; *************** function _grabLeftIR *****************
  6468 ;; Defined at:
  6469 ;;		line 67 in file "IR_Reading.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;		None
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6474 ;;  i               1    2[BANK0 ] unsigned char 
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  2   43[COMRAM] unsigned int 
  6477 ;; Registers used:
  6478 ;;		wreg, status,2, status,0
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6484 ;;      Params:         2       0       0       0
  6485 ;;      Locals:         0       3       0       0
  6486 ;;      Temps:          3       0       0       0
  6487 ;;      Totals:         5       3       0       0
  6488 ;;Total ram usage:        8 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    3
  6491 ;; This function calls:
  6492 ;;		Nothing
  6493 ;; This function is called by:
  6494 ;;		_ScanIR
  6495 ;;		_ScanWithRange
  6496 ;;		_main
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text25
  6501  001960                     __ptext25:
  6502                           	opt stack 0
  6503  001960                     _grabLeftIR:
  6504                           	opt stack 27
  6505                           
  6506                           ;IR_Reading.c: 69: unsigned int IR_signal=0;
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;incstack = 0
  6510  001960  0E00               	movlw	0
  6511  001962  0100               	movlb	0	; () banked
  6512  001964  6F61               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  6513  001966  0E00               	movlw	0
  6514  001968  6F60               	movwf	grabLeftIR@IR_signal& (0+255),b
  6515                           
  6516                           ;IR_Reading.c: 70: unsigned char i=0;
  6517  00196A  0E00               	movlw	0
  6518  00196C  6F62               	movwf	grabLeftIR@i& (0+255),b
  6519                           
  6520                           ;IR_Reading.c: 72: for (i=0; i<4; i++) {
  6521  00196E  0E00               	movlw	0
  6522  001970  6F62               	movwf	grabLeftIR@i& (0+255),b
  6523  001972                     l3204:
  6524                           
  6525                           ; BSR set to: 0
  6526  001972  0E03               	movlw	3
  6527  001974  6562               	cpfsgt	grabLeftIR@i& (0+255),b
  6528  001976  D001               	goto	l112
  6529  001978  D01F               	goto	u2770
  6530  00197A                     l112:
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;IR_Reading.c: 74: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6534                           
  6535                           ; BSR set to: 0
  6536  00197A  5067               	movf	3943,w,c	;volatile
  6537  00197C  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6538  00197E  6A2F               	clrf	(??_grabLeftIR+1)& (0+255),c
  6539  001980  0E07               	movlw	7
  6540  001982                     u2765:
  6541  001982  90D8               	bcf	status,0,c
  6542  001984  362E               	rlcf	??_grabLeftIR,f,c
  6543  001986  362F               	rlcf	??_grabLeftIR+1,f,c
  6544  001988  2EE8               	decfsz	wreg,f,c
  6545  00198A  D7FB               	goto	u2765
  6546  00198C  CF66 F030          	movff	3942,??_grabLeftIR+2	;volatile
  6547  001990  90D8               	bcf	status,0,c
  6548  001992  3230               	rrcf	??_grabLeftIR+2,f,c
  6549  001994  5030               	movf	??_grabLeftIR+2,w,c
  6550  001996  122E               	iorwf	??_grabLeftIR,f,c
  6551  001998  0E00               	movlw	0
  6552  00199A  122F               	iorwf	??_grabLeftIR+1,f,c
  6553  00199C  502E               	movf	??_grabLeftIR,w,c
  6554  00199E  2760               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  6555  0019A0  502F               	movf	??_grabLeftIR+1,w,c
  6556  0019A2  2361               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;IR_Reading.c: 75: _delay((unsigned long)((50)*(8000000/4000.0)));
  6560  0019A4  0E82               	movlw	130
  6561  0019A6  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6562  0019A8  0EDE               	movlw	222
  6563  0019AA                     u3697:
  6564  0019AA  2EE8               	decfsz	wreg,f,c
  6565  0019AC  D7FE               	bra	u3697
  6566  0019AE  2E2E               	decfsz	??_grabLeftIR& (0+255),f,c
  6567  0019B0  D7FC               	bra	u3697
  6568  0019B2  0100               	movlb	0	; () banked
  6569  0019B4  2B62               	incf	grabLeftIR@i& (0+255),f,b
  6570  0019B6  D7DD               	goto	l3204
  6571  0019B8                     u2770:
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;IR_Reading.c: 76: }
  6575                           ;IR_Reading.c: 78: return IR_signal>>2;
  6576                           
  6577                           ; BSR set to: 0
  6578  0019B8  C060  F02E         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6579  0019BC  C061  F02F         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6580  0019C0  90D8               	bcf	status,0,c
  6581  0019C2  322F               	rrcf	??_grabLeftIR+1,f,c
  6582  0019C4  322E               	rrcf	??_grabLeftIR,f,c
  6583  0019C6  90D8               	bcf	status,0,c
  6584  0019C8  322F               	rrcf	??_grabLeftIR+1,f,c
  6585  0019CA  322E               	rrcf	??_grabLeftIR,f,c
  6586  0019CC  C02E  F02C         	movff	??_grabLeftIR,?_grabLeftIR
  6587  0019D0  C02F  F02D         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6588  0019D4  0012               	return	
  6589  0019D6                     __end_of_grabLeftIR:
  6590                           	opt stack 0
  6591                           tblptru	equ	0xFF8
  6592                           tblptrh	equ	0xFF7
  6593                           tblptrl	equ	0xFF6
  6594                           tablat	equ	0xFF5
  6595                           prodh	equ	0xFF4
  6596                           prodl	equ	0xFF3
  6597                           intcon	equ	0xFF2
  6598                           postinc0	equ	0xFEE
  6599                           wreg	equ	0xFE8
  6600                           indf1	equ	0xFE7
  6601                           plusw1	equ	0xFE3
  6602                           fsr1h	equ	0xFE2
  6603                           fsr1l	equ	0xFE1
  6604                           indf2	equ	0xFDF
  6605                           postinc2	equ	0xFDE
  6606                           postdec2	equ	0xFDD
  6607                           plusw2	equ	0xFDB
  6608                           fsr2h	equ	0xFDA
  6609                           fsr2l	equ	0xFD9
  6610                           status	equ	0xFD8
  6611                           
  6612 ;; *************** function _SetLine *****************
  6613 ;; Defined at:
  6614 ;;		line 74 in file "LCD.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  line            1    wreg     unsigned char 
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;  line            1    0[BANK0 ] unsigned char 
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      void 
  6621 ;; Registers used:
  6622 ;;		wreg, status,2, status,0, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6628 ;;      Params:         0       0       0       0
  6629 ;;      Locals:         0       1       0       0
  6630 ;;      Temps:          0       0       0       0
  6631 ;;      Totals:         0       1       0       0
  6632 ;;Total ram usage:        1 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    6
  6635 ;; This function calls:
  6636 ;;		_SendLCD
  6637 ;; This function is called by:
  6638 ;;		_ScanIR
  6639 ;;		_ScanWithRange
  6640 ;;		_main
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text26
  6645  001C62                     __ptext26:
  6646                           	opt stack 0
  6647  001C62                     _SetLine:
  6648                           	opt stack 24
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;incstack = 0
  6652                           ;SetLine@line stored from wreg
  6653  001C62  0100               	movlb	0	; () banked
  6654  001C64  6F60               	movwf	SetLine@line& (0+255),b
  6655                           
  6656                           ;LCD.c: 75: if (line==1) {
  6657  001C66  0100               	movlb	0	; () banked
  6658  001C68  0560               	decf	SetLine@line& (0+255),w,b
  6659  001C6A  A4D8               	btfss	status,2,c
  6660  001C6C  D006               	goto	l149
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;LCD.c: 76: SendLCD(0x80,0);
  6664  001C6E  0E00               	movlw	0
  6665  001C70  6E30               	movwf	SendLCD@type,c
  6666  001C72  0E80               	movlw	128
  6667  001C74  EC4C  F00E         	call	_SendLCD
  6668                           
  6669                           ;LCD.c: 77: } else if (line==2) {
  6670  001C78  D00A               	goto	l151
  6671  001C7A                     l149:
  6672  001C7A  0E02               	movlw	2
  6673  001C7C  0100               	movlb	0	; () banked
  6674  001C7E  1960               	xorwf	SetLine@line& (0+255),w,b
  6675  001C80  A4D8               	btfss	status,2,c
  6676  001C82  D005               	goto	l151
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;LCD.c: 78: SendLCD(0xC0,0);
  6680  001C84  0E00               	movlw	0
  6681  001C86  6E30               	movwf	SendLCD@type,c
  6682  001C88  0EC0               	movlw	192
  6683  001C8A  EC4C  F00E         	call	_SendLCD
  6684  001C8E                     l151:
  6685                           
  6686                           ;LCD.c: 79: }
  6687                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6688  001C8E  0E21               	movlw	33
  6689  001C90                     u3707:
  6690  001C90  2EE8               	decfsz	wreg,f,c
  6691  001C92  D7FE               	bra	u3707
  6692  001C94  F000               	nop	
  6693  001C96  0012               	return		;funcret
  6694  001C98                     __end_of_SetLine:
  6695                           	opt stack 0
  6696                           tblptru	equ	0xFF8
  6697                           tblptrh	equ	0xFF7
  6698                           tblptrl	equ	0xFF6
  6699                           tablat	equ	0xFF5
  6700                           prodh	equ	0xFF4
  6701                           prodl	equ	0xFF3
  6702                           intcon	equ	0xFF2
  6703                           postinc0	equ	0xFEE
  6704                           wreg	equ	0xFE8
  6705                           indf1	equ	0xFE7
  6706                           plusw1	equ	0xFE3
  6707                           fsr1h	equ	0xFE2
  6708                           fsr1l	equ	0xFE1
  6709                           indf2	equ	0xFDF
  6710                           postinc2	equ	0xFDE
  6711                           postdec2	equ	0xFDD
  6712                           plusw2	equ	0xFDB
  6713                           fsr2h	equ	0xFDA
  6714                           fsr2l	equ	0xFD9
  6715                           status	equ	0xFD8
  6716                           
  6717 ;; *************** function _LCD_String *****************
  6718 ;; Defined at:
  6719 ;;		line 83 in file "LCD.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  string          2    0[BANK0 ] PTR unsigned char 
  6722 ;;		 -> STR_8(11), STR_7(10), STR_5(17), main@Message(10), 
  6723 ;;		 -> ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), STR_1(12), 
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6735 ;;      Params:         0       2       0       0
  6736 ;;      Locals:         0       0       0       0
  6737 ;;      Temps:          0       0       0       0
  6738 ;;      Totals:         0       2       0       0
  6739 ;;Total ram usage:        2 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    6
  6742 ;; This function calls:
  6743 ;;		_SendLCD
  6744 ;; This function is called by:
  6745 ;;		_ScanIR
  6746 ;;		_ScanWithRange
  6747 ;;		_main
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           	psect	text27
  6752  0019D6                     __ptext27:
  6753                           	opt stack 0
  6754  0019D6                     _LCD_String:
  6755                           	opt stack 23
  6756                           
  6757                           ;LCD.c: 85: while(*string != 0){
  6758                           
  6759                           ;incstack = 0
  6760  0019D6  D01B               	goto	l155
  6761  0019D8                     
  6762                           ;LCD.c: 88: SendLCD(*string++,1);
  6763  0019D8  0E01               	movlw	1
  6764  0019DA  6E30               	movwf	SendLCD@type,c
  6765  0019DC  C060  FFF6         	movff	LCD_String@string,tblptrl
  6766  0019E0  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6767  0019E4  6AF8               	clrf	tblptru,c
  6768  0019E6  0E02               	movlw	(high __ramtop+-1)
  6769  0019E8  64F7               	cpfsgt	tblptrh,c
  6770  0019EA  D003               	bra	u2807
  6771  0019EC  0008               	tblrd		*
  6772  0019EE  50F5               	movf	tablat,w,c
  6773  0019F0  D005               	bra	u2800
  6774  0019F2                     u2807:
  6775  0019F2  CFF6 FFE1          	movff	tblptrl,fsr1l
  6776  0019F6  CFF7 FFE2          	movff	tblptrh,fsr1h
  6777  0019FA  50E7               	movf	indf1,w,c
  6778  0019FC                     u2800:
  6779  0019FC  EC4C  F00E         	call	_SendLCD
  6780  001A00  0100               	movlb	0	; () banked
  6781  001A02  4B60               	infsnz	LCD_String@string& (0+255),f,b
  6782  001A04  2B61               	incf	(LCD_String@string+1)& (0+255),f,b
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6786  001A06  0E21               	movlw	33
  6787  001A08                     u3717:
  6788  001A08  2EE8               	decfsz	wreg,f,c
  6789  001A0A  D7FE               	bra	u3717
  6790  001A0C  F000               	nop	
  6791  001A0E                     l155:
  6792  001A0E  C060  FFF6         	movff	LCD_String@string,tblptrl
  6793  001A12  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6794  001A16  6AF8               	clrf	tblptru,c
  6795  001A18  0E02               	movlw	(high __ramtop+-1)
  6796  001A1A  64F7               	cpfsgt	tblptrh,c
  6797  001A1C  D003               	bra	u2817
  6798  001A1E  0008               	tblrd		*
  6799  001A20  50F5               	movf	tablat,w,c
  6800  001A22  D005               	bra	u2810
  6801  001A24                     u2817:
  6802  001A24  CFF6 FFE1          	movff	tblptrl,fsr1l
  6803  001A28  CFF7 FFE2          	movff	tblptrh,fsr1h
  6804  001A2C  50E7               	movf	indf1,w,c
  6805  001A2E                     u2810:
  6806  001A2E  0900               	iorlw	0
  6807  001A30  B4D8               	btfsc	status,2,c
  6808  001A32  0012               	return	
  6809  001A34  D7D1               	goto	l156
  6810  001A36                     __end_of_LCD_String:
  6811                           	opt stack 0
  6812                           tblptru	equ	0xFF8
  6813                           tblptrh	equ	0xFF7
  6814                           tblptrl	equ	0xFF6
  6815                           tablat	equ	0xFF5
  6816                           prodh	equ	0xFF4
  6817                           prodl	equ	0xFF3
  6818                           intcon	equ	0xFF2
  6819                           postinc0	equ	0xFEE
  6820                           wreg	equ	0xFE8
  6821                           indf1	equ	0xFE7
  6822                           plusw1	equ	0xFE3
  6823                           fsr1h	equ	0xFE2
  6824                           fsr1l	equ	0xFE1
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           postdec2	equ	0xFDD
  6828                           plusw2	equ	0xFDB
  6829                           fsr2h	equ	0xFDA
  6830                           fsr2l	equ	0xFD9
  6831                           status	equ	0xFD8
  6832                           
  6833 ;; *************** function _SendLCD *****************
  6834 ;; Defined at:
  6835 ;;		line 27 in file "LCD.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;  Byte            1    wreg     unsigned char 
  6838 ;;  type            1   47[COMRAM] unsigned char 
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;  Byte            1   48[COMRAM] unsigned char 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  1    wreg      void 
  6843 ;; Registers used:
  6844 ;;		wreg, status,2, status,0, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6850 ;;      Params:         1       0       0       0
  6851 ;;      Locals:         1       0       0       0
  6852 ;;      Temps:          0       0       0       0
  6853 ;;      Totals:         2       0       0       0
  6854 ;;Total ram usage:        2 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    5
  6857 ;; This function calls:
  6858 ;;		_LCDout
  6859 ;; This function is called by:
  6860 ;;		_initLCD
  6861 ;;		_SetLine
  6862 ;;		_LCD_String
  6863 ;;		_ScanIR
  6864 ;;		_ScanWithRange
  6865 ;;		_main
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text28
  6870  001C98                     __ptext28:
  6871                           	opt stack 0
  6872  001C98                     _SendLCD:
  6873                           	opt stack 24
  6874                           
  6875                           ;incstack = 0
  6876                           ;SendLCD@Byte stored from wreg
  6877  001C98  6E31               	movwf	SendLCD@Byte,c
  6878                           
  6879                           ;LCD.c: 30: LATAbits.LATA6=type;
  6880  001C9A  B030               	btfsc	SendLCD@type,0,c
  6881  001C9C  D002               	bra	u2645
  6882  001C9E  9C89               	bcf	3977,6,c	;volatile
  6883  001CA0  D001               	bra	u2646
  6884  001CA2                     u2645:
  6885  001CA2  8C89               	bsf	3977,6,c	;volatile
  6886  001CA4                     u2646:
  6887                           
  6888                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6889  001CA4  3831               	swapf	SendLCD@Byte,w,c
  6890  001CA6  0B0F               	andlw	15
  6891  001CA8  0B0F               	andlw	15
  6892  001CAA  EC87  F00A         	call	_LCDout
  6893                           
  6894                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6895  001CAE  0E06               	movlw	6
  6896  001CB0                     u3727:
  6897  001CB0  2EE8               	decfsz	wreg,f,c
  6898  001CB2  D7FE               	bra	u3727
  6899  001CB4  D000               	nop2	
  6900                           
  6901                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6902  001CB6  5031               	movf	SendLCD@Byte,w,c
  6903  001CB8  0B0F               	andlw	15
  6904  001CBA  EC87  F00A         	call	_LCDout
  6905                           
  6906                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6907  001CBE  0E21               	movlw	33
  6908  001CC0                     u3737:
  6909  001CC0  2EE8               	decfsz	wreg,f,c
  6910  001CC2  D7FE               	bra	u3737
  6911  001CC4  F000               	nop	
  6912  001CC6  0012               	return		;funcret
  6913  001CC8                     __end_of_SendLCD:
  6914                           	opt stack 0
  6915                           tblptru	equ	0xFF8
  6916                           tblptrh	equ	0xFF7
  6917                           tblptrl	equ	0xFF6
  6918                           tablat	equ	0xFF5
  6919                           prodh	equ	0xFF4
  6920                           prodl	equ	0xFF3
  6921                           intcon	equ	0xFF2
  6922                           postinc0	equ	0xFEE
  6923                           wreg	equ	0xFE8
  6924                           indf1	equ	0xFE7
  6925                           plusw1	equ	0xFE3
  6926                           fsr1h	equ	0xFE2
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           plusw2	equ	0xFDB
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function _LCDout *****************
  6937 ;; Defined at:
  6938 ;;		line 14 in file "LCD.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  number          1    wreg     unsigned char 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;  number          1   46[COMRAM] unsigned char 
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, status,2, status,0, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6952 ;;      Params:         0       0       0       0
  6953 ;;      Locals:         1       0       0       0
  6954 ;;      Temps:          3       0       0       0
  6955 ;;      Totals:         4       0       0       0
  6956 ;;Total ram usage:        4 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    4
  6959 ;; This function calls:
  6960 ;;		_E_TOG
  6961 ;; This function is called by:
  6962 ;;		_SendLCD
  6963 ;;		_initLCD
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	text29
  6968  00150E                     __ptext29:
  6969                           	opt stack 0
  6970  00150E                     _LCDout:
  6971                           	opt stack 24
  6972                           
  6973                           ;incstack = 0
  6974                           ;LCDout@number stored from wreg
  6975  00150E  6E2F               	movwf	LCDout@number,c
  6976                           
  6977                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6978  001510  502F               	movf	LCDout@number,w,c
  6979  001512  6E2C               	movwf	??_LCDout& (0+255),c
  6980  001514  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6981  001516  0E07               	movlw	7
  6982  001518                     u2535:
  6983  001518  90D8               	bcf	status,0,c
  6984  00151A  362C               	rlcf	??_LCDout,f,c
  6985  00151C  362D               	rlcf	??_LCDout+1,f,c
  6986  00151E  2EE8               	decfsz	wreg,f,c
  6987  001520  D7FB               	goto	u2535
  6988  001522  0E07               	movlw	7
  6989  001524  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6990  001526                     u2545:
  6991  001526  342D               	rlcf	??_LCDout+1,w,c
  6992  001528  322D               	rrcf	??_LCDout+1,f,c
  6993  00152A  322C               	rrcf	??_LCDout,f,c
  6994  00152C  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6995  00152E  D7FB               	goto	u2545
  6996  001530  462C               	rlncf	??_LCDout,f,c
  6997  001532  508B               	movf	3979,w,c	;volatile
  6998  001534  182C               	xorwf	??_LCDout,w,c
  6999  001536  0BFD               	andlw	-3
  7000  001538  182C               	xorwf	??_LCDout,w,c
  7001  00153A  6E8B               	movwf	3979,c	;volatile
  7002                           
  7003                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  7004  00153C  502F               	movf	LCDout@number,w,c
  7005  00153E  6E2C               	movwf	??_LCDout& (0+255),c
  7006  001540  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  7007  001542  0E06               	movlw	6
  7008  001544                     u2555:
  7009  001544  90D8               	bcf	status,0,c
  7010  001546  362C               	rlcf	??_LCDout,f,c
  7011  001548  362D               	rlcf	??_LCDout+1,f,c
  7012  00154A  2EE8               	decfsz	wreg,f,c
  7013  00154C  D7FB               	goto	u2555
  7014  00154E  0E07               	movlw	7
  7015  001550  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  7016  001552                     u2565:
  7017  001552  342D               	rlcf	??_LCDout+1,w,c
  7018  001554  322D               	rrcf	??_LCDout+1,f,c
  7019  001556  322C               	rrcf	??_LCDout,f,c
  7020  001558  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  7021  00155A  D7FB               	goto	u2565
  7022  00155C  462C               	rlncf	??_LCDout,f,c
  7023  00155E  462C               	rlncf	??_LCDout,f,c
  7024  001560  508B               	movf	3979,w,c	;volatile
  7025  001562  182C               	xorwf	??_LCDout,w,c
  7026  001564  0BFB               	andlw	-5
  7027  001566  182C               	xorwf	??_LCDout,w,c
  7028  001568  6E8B               	movwf	3979,c	;volatile
  7029                           
  7030                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  7031  00156A  502F               	movf	LCDout@number,w,c
  7032  00156C  6E2C               	movwf	??_LCDout& (0+255),c
  7033  00156E  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  7034  001570  0E05               	movlw	5
  7035  001572                     u2575:
  7036  001572  90D8               	bcf	status,0,c
  7037  001574  362C               	rlcf	??_LCDout,f,c
  7038  001576  362D               	rlcf	??_LCDout+1,f,c
  7039  001578  2EE8               	decfsz	wreg,f,c
  7040  00157A  D7FB               	goto	u2575
  7041  00157C  0E07               	movlw	7
  7042  00157E  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  7043  001580                     u2585:
  7044  001580  342D               	rlcf	??_LCDout+1,w,c
  7045  001582  322D               	rrcf	??_LCDout+1,f,c
  7046  001584  322C               	rrcf	??_LCDout,f,c
  7047  001586  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  7048  001588  D7FB               	goto	u2585
  7049  00158A  508C               	movf	3980,w,c	;volatile
  7050  00158C  182C               	xorwf	??_LCDout,w,c
  7051  00158E  0BFE               	andlw	-2
  7052  001590  182C               	xorwf	??_LCDout,w,c
  7053  001592  6E8C               	movwf	3980,c	;volatile
  7054                           
  7055                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  7056  001594  502F               	movf	LCDout@number,w,c
  7057  001596  6E2C               	movwf	??_LCDout& (0+255),c
  7058  001598  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  7059  00159A  3A2C               	swapf	??_LCDout,f,c
  7060  00159C  3A2D               	swapf	??_LCDout+1,f,c
  7061  00159E  0EF0               	movlw	240
  7062  0015A0  162D               	andwf	??_LCDout+1,f,c
  7063  0015A2  502C               	movf	??_LCDout,w,c
  7064  0015A4  0B0F               	andlw	15
  7065  0015A6  122D               	iorwf	??_LCDout+1,f,c
  7066  0015A8  0EF0               	movlw	240
  7067  0015AA  162C               	andwf	??_LCDout,f,c
  7068  0015AC  0E07               	movlw	7
  7069  0015AE  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  7070  0015B0                     u2595:
  7071  0015B0  342D               	rlcf	??_LCDout+1,w,c
  7072  0015B2  322D               	rrcf	??_LCDout+1,f,c
  7073  0015B4  322C               	rrcf	??_LCDout,f,c
  7074  0015B6  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  7075  0015B8  D7FB               	goto	u2595
  7076  0015BA  462C               	rlncf	??_LCDout,f,c
  7077  0015BC  508C               	movf	3980,w,c	;volatile
  7078  0015BE  182C               	xorwf	??_LCDout,w,c
  7079  0015C0  0BFD               	andlw	-3
  7080  0015C2  182C               	xorwf	??_LCDout,w,c
  7081  0015C4  6E8C               	movwf	3980,c	;volatile
  7082                           
  7083                           ;LCD.c: 21: E_TOG();
  7084  0015C6  ECD9  F00E         	call	_E_TOG	;wreg free
  7085                           
  7086                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  7087  0015CA  0E03               	movlw	3
  7088  0015CC                     u3747:
  7089  0015CC  2EE8               	decfsz	wreg,f,c
  7090  0015CE  D7FE               	bra	u3747
  7091  0015D0  F000               	nop	
  7092  0015D2  0012               	return		;funcret
  7093  0015D4                     __end_of_LCDout:
  7094                           	opt stack 0
  7095                           tblptru	equ	0xFF8
  7096                           tblptrh	equ	0xFF7
  7097                           tblptrl	equ	0xFF6
  7098                           tablat	equ	0xFF5
  7099                           prodh	equ	0xFF4
  7100                           prodl	equ	0xFF3
  7101                           intcon	equ	0xFF2
  7102                           postinc0	equ	0xFEE
  7103                           wreg	equ	0xFE8
  7104                           indf1	equ	0xFE7
  7105                           plusw1	equ	0xFE3
  7106                           fsr1h	equ	0xFE2
  7107                           fsr1l	equ	0xFE1
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           plusw2	equ	0xFDB
  7112                           fsr2h	equ	0xFDA
  7113                           fsr2l	equ	0xFD9
  7114                           status	equ	0xFD8
  7115                           
  7116 ;; *************** function _E_TOG *****************
  7117 ;; Defined at:
  7118 ;;		line 5 in file "LCD.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      void 
  7125 ;; Registers used:
  7126 ;;		wreg
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7132 ;;      Params:         0       0       0       0
  7133 ;;      Locals:         0       0       0       0
  7134 ;;      Temps:          0       0       0       0
  7135 ;;      Totals:         0       0       0       0
  7136 ;;Total ram usage:        0 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    3
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_LCDout
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text30
  7147  001DB2                     __ptext30:
  7148                           	opt stack 0
  7149  001DB2                     _E_TOG:
  7150                           	opt stack 24
  7151                           
  7152                           ;LCD.c: 8: LATCbits.LATC0=1;
  7153                           
  7154                           ;incstack = 0
  7155  001DB2  808B               	bsf	3979,0,c	;volatile
  7156                           
  7157                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  7158  001DB4  0E03               	movlw	3
  7159  001DB6                     u3757:
  7160  001DB6  2EE8               	decfsz	wreg,f,c
  7161  001DB8  D7FE               	bra	u3757
  7162  001DBA  F000               	nop	
  7163                           
  7164                           ;LCD.c: 10: LATCbits.LATC0=0;
  7165  001DBC  908B               	bcf	3979,0,c	;volatile
  7166  001DBE  0012               	return		;funcret
  7167  001DC0                     __end_of_E_TOG:
  7168                           	opt stack 0
  7169                           tblptru	equ	0xFF8
  7170                           tblptrh	equ	0xFF7
  7171                           tblptrl	equ	0xFF6
  7172                           tablat	equ	0xFF5
  7173                           prodh	equ	0xFF4
  7174                           prodl	equ	0xFF3
  7175                           intcon	equ	0xFF2
  7176                           postinc0	equ	0xFEE
  7177                           wreg	equ	0xFE8
  7178                           indf1	equ	0xFE7
  7179                           plusw1	equ	0xFE3
  7180                           fsr1h	equ	0xFE2
  7181                           fsr1l	equ	0xFE1
  7182                           indf2	equ	0xFDF
  7183                           postinc2	equ	0xFDE
  7184                           postdec2	equ	0xFDD
  7185                           plusw2	equ	0xFDB
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _InterruptHandlerLow *****************
  7191 ;; Defined at:
  7192 ;;		line 20 in file "main.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  1    wreg      void 
  7199 ;; Registers used:
  7200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7206 ;;      Params:         0       0       0       0
  7207 ;;      Locals:         0       0       0       0
  7208 ;;      Temps:         21       0       0       0
  7209 ;;      Totals:        21       0       0       0
  7210 ;;Total ram usage:       21 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    2
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		Interrupt level 1
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           	psect	intcodelo
  7221  000018                     __pintcodelo:
  7222                           	opt stack 0
  7223  000018                     _InterruptHandlerLow:
  7224                           	opt stack 23
  7225                           
  7226                           ;incstack = 0
  7227  000018  8034               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7228  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  7229  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  7230  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  7231  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  7232  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  7233  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  7234  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  7235  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  7236  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  7237  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  7238  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  7239  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  7240  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  7241  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  7242  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  7243  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  7244  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  7245  00005E  C034  F028         	movff	btemp,??_InterruptHandlerLow+17
  7246  000062  C035  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  7247  000066  C036  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  7248  00006A  C037  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  7249                           
  7250                           ;main.c: 22: if (PIR1bits.RCIF) {
  7251  00006E  AA9E               	btfss	3998,5,c	;volatile
  7252  000070  D016               	goto	i1l372
  7253                           
  7254                           ;main.c: 23: ReceivedString[i]=RCREG;
  7255  000072  5033               	movf	_i,w,c	;volatile
  7256  000074  0D01               	mullw	1
  7257  000076  0EE7               	movlw	low _ReceivedString
  7258  000078  24F3               	addwf	prodl,w,c
  7259  00007A  6ED9               	movwf	fsr2l,c
  7260  00007C  0E01               	movlw	high _ReceivedString
  7261  00007E  20F4               	addwfc	prodh,w,c
  7262  000080  6EDA               	movwf	fsr2h,c
  7263  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  7264                           
  7265                           ;main.c: 24: RFID_Read=1;
  7266  000086  0E01               	movlw	1
  7267  000088  0101               	movlb	1	; () banked
  7268  00008A  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
  7269                           
  7270                           ; BSR set to: 1
  7271                           ;main.c: 25: if (i==15){
  7272  00008C  0E0F               	movlw	15
  7273  00008E  1833               	xorwf	_i,w,c	;volatile
  7274  000090  A4D8               	btfss	status,2,c
  7275  000092  D003               	goto	i1l373
  7276                           
  7277                           ; BSR set to: 1
  7278                           ;main.c: 26: i=0;
  7279  000094  0E00               	movlw	0
  7280  000096  6E33               	movwf	_i,c	;volatile
  7281                           
  7282                           ;main.c: 27: }else{
  7283  000098  D001               	goto	i1l374
  7284  00009A                     i1l373:
  7285                           
  7286                           ; BSR set to: 1
  7287                           ;main.c: 28: i++;
  7288                           
  7289                           ; BSR set to: 1
  7290  00009A  2A33               	incf	_i,f,c	;volatile
  7291  00009C                     i1l374:
  7292                           
  7293                           ; BSR set to: 1
  7294                           ;main.c: 29: }
  7295                           ;main.c: 30: PIR1bits.RCIF=0;
  7296                           
  7297                           ; BSR set to: 1
  7298  00009C  9A9E               	bcf	3998,5,c	;volatile
  7299  00009E                     i1l372:
  7300                           
  7301                           ; BSR set to: 1
  7302  00009E  C02B  F037         	movff	??_InterruptHandlerLow+20,btemp+3
  7303  0000A2  C02A  F036         	movff	??_InterruptHandlerLow+19,btemp+2
  7304  0000A6  C029  F035         	movff	??_InterruptHandlerLow+18,btemp+1
  7305  0000AA  C028  F034         	movff	??_InterruptHandlerLow+17,btemp
  7306  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  7307  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  7308  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  7309  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  7310  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  7311  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  7312  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  7313  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  7314  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  7315  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  7316  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  7317  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  7318  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7319  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7320  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7321  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7322  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  7323  0000F2  9034               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7324  0000F4  0010               	retfie	
  7325  0000F6                     __end_of_InterruptHandlerLow:
  7326                           	opt stack 0
  7327                           pclatu	equ	0xFFB
  7328                           pclath	equ	0xFFA
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           postinc0	equ	0xFEE
  7337                           fsr0h	equ	0xFEA
  7338                           fsr0l	equ	0xFE9
  7339                           wreg	equ	0xFE8
  7340                           indf1	equ	0xFE7
  7341                           plusw1	equ	0xFE3
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           bsr	equ	0xFE0
  7345                           indf2	equ	0xFDF
  7346                           postinc2	equ	0xFDE
  7347                           postdec2	equ	0xFDD
  7348                           plusw2	equ	0xFDB
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _InterruptHandlerHigh *****************
  7354 ;; Defined at:
  7355 ;;		line 36 in file "main.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7369 ;;      Params:         0       0       0       0
  7370 ;;      Locals:         0       0       0       0
  7371 ;;      Temps:         18       0       0       0
  7372 ;;      Totals:        18       0       0       0
  7373 ;;Total ram usage:       18 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    1
  7376 ;; This function calls:
  7377 ;;		i2_delay_tenth_s
  7378 ;; This function is called by:
  7379 ;;		Interrupt level 2
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	intcode
  7384  000008                     __pintcode:
  7385                           	opt stack 0
  7386  000008                     _InterruptHandlerHigh:
  7387                           	opt stack 23
  7388                           
  7389                           ;incstack = 0
  7390  000008  8234               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7391  00000A  EF4C  F00B         	goto	int_func
  7392                           pclatu	equ	0xFFB
  7393                           pclath	equ	0xFFA
  7394                           tblptru	equ	0xFF8
  7395                           tblptrh	equ	0xFF7
  7396                           tblptrl	equ	0xFF6
  7397                           tablat	equ	0xFF5
  7398                           prodh	equ	0xFF4
  7399                           prodl	equ	0xFF3
  7400                           intcon	equ	0xFF2
  7401                           postinc0	equ	0xFEE
  7402                           fsr0h	equ	0xFEA
  7403                           fsr0l	equ	0xFE9
  7404                           wreg	equ	0xFE8
  7405                           indf1	equ	0xFE7
  7406                           plusw1	equ	0xFE3
  7407                           fsr1h	equ	0xFE2
  7408                           fsr1l	equ	0xFE1
  7409                           bsr	equ	0xFE0
  7410                           indf2	equ	0xFDF
  7411                           postinc2	equ	0xFDE
  7412                           postdec2	equ	0xFDD
  7413                           plusw2	equ	0xFDB
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418                           	psect	intcode_body
  7419  001698                     __pintcode_body:
  7420                           	opt stack 23
  7421  001698                     int_func:
  7422                           	opt stack 23
  7423  001698  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7424  00169C  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7425  0016A0  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7426  0016A4  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7427  0016A8  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7428  0016AC  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7429  0016B0  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7430  0016B4  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7431  0016B8  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7432  0016BC  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7433  0016C0  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7434  0016C4  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7435  0016C8  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7436  0016CC  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7437  0016D0  C034  F013         	movff	btemp,??_InterruptHandlerHigh+14
  7438  0016D4  C035  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  7439  0016D8  C036  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  7440  0016DC  C037  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  7441                           
  7442                           ;main.c: 37: if (INTCONbits.INT0IF) {
  7443  0016E0  A2F2               	btfss	intcon,1,c	;volatile
  7444  0016E2  D00D               	goto	i2l380
  7445                           
  7446                           ;main.c: 38: if (mode==-1) {
  7447  0016E4  2832               	incf	_mode,w,c	;volatile
  7448  0016E6  A4D8               	btfss	status,2,c
  7449  0016E8  D003               	goto	i2l381
  7450                           
  7451                           ;main.c: 40: mode=1;
  7452  0016EA  0E01               	movlw	1
  7453  0016EC  6E32               	movwf	_mode,c	;volatile
  7454                           
  7455                           ;main.c: 41: } else if (mode==0) {
  7456  0016EE  D003               	goto	i2l384
  7457  0016F0                     i2l381:
  7458  0016F0  5032               	movf	_mode,w,c	;volatile
  7459  0016F2  A4D8               	btfss	status,2,c
  7460                           
  7461                           ;main.c: 45: mode=-1;
  7462                           
  7463                           ;main.c: 43: } else {
  7464  0016F4  6832               	setf	_mode,c	;volatile
  7465  0016F6                     i2l384:
  7466                           
  7467                           ;main.c: 46: }
  7468                           ;main.c: 48: delay_tenth_s(2);
  7469  0016F6  0E02               	movlw	2
  7470  0016F8  ECFA  F00D         	call	i2_delay_tenth_s
  7471                           
  7472                           ;main.c: 49: INTCONbits.INT0IF=0;
  7473  0016FC  92F2               	bcf	intcon,1,c	;volatile
  7474  0016FE                     i2l380:
  7475                           
  7476                           ;main.c: 50: }
  7477                           ;main.c: 52: if (INTCONbits.TMR0IF) {
  7478  0016FE  A4F2               	btfss	intcon,2,c	;volatile
  7479  001700  D004               	goto	i2l385
  7480                           
  7481                           ;main.c: 53: millis++;
  7482  001702  0101               	movlb	1	; () banked
  7483  001704  4BF7               	infsnz	_millis& (0+255),f,b	;volatile
  7484  001706  2BF8               	incf	(_millis+1)& (0+255),f,b	;volatile
  7485                           
  7486                           ; BSR set to: 1
  7487                           ;main.c: 54: INTCONbits.TMR0IF = 0;
  7488  001708  94F2               	bcf	intcon,2,c	;volatile
  7489  00170A                     i2l385:
  7490                           
  7491                           ; BSR set to: 1
  7492  00170A  C016  F037         	movff	??_InterruptHandlerHigh+17,btemp+3
  7493  00170E  C015  F036         	movff	??_InterruptHandlerHigh+16,btemp+2
  7494  001712  C014  F035         	movff	??_InterruptHandlerHigh+15,btemp+1
  7495  001716  C013  F034         	movff	??_InterruptHandlerHigh+14,btemp
  7496  00171A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7497  00171E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7498  001722  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7499  001726  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7500  00172A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7501  00172E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7502  001732  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7503  001736  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7504  00173A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7505  00173E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7506  001742  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7507  001746  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7508  00174A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7509  00174E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7510  001752  9234               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7511  001754  0011               	retfie		f
  7512  001756                     __end_of_InterruptHandlerHigh:
  7513                           	opt stack 0
  7514                           pclatu	equ	0xFFB
  7515                           pclath	equ	0xFFA
  7516                           tblptru	equ	0xFF8
  7517                           tblptrh	equ	0xFF7
  7518                           tblptrl	equ	0xFF6
  7519                           tablat	equ	0xFF5
  7520                           prodh	equ	0xFF4
  7521                           prodl	equ	0xFF3
  7522                           intcon	equ	0xFF2
  7523                           postinc0	equ	0xFEE
  7524                           fsr0h	equ	0xFEA
  7525                           fsr0l	equ	0xFE9
  7526                           wreg	equ	0xFE8
  7527                           indf1	equ	0xFE7
  7528                           plusw1	equ	0xFE3
  7529                           fsr1h	equ	0xFE2
  7530                           fsr1l	equ	0xFE1
  7531                           bsr	equ	0xFE0
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           plusw2	equ	0xFDB
  7536                           fsr2h	equ	0xFDA
  7537                           fsr2l	equ	0xFD9
  7538                           status	equ	0xFD8
  7539                           
  7540 ;; *************** function i2_delay_tenth_s *****************
  7541 ;; Defined at:
  7542 ;;		line 32 in file "Movement.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  tenth_second    1    wreg     unsigned char 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7547 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  1    wreg      void 
  7550 ;; Registers used:
  7551 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7557 ;;      Params:         0       0       0       0
  7558 ;;      Locals:         3       0       0       0
  7559 ;;      Temps:          1       0       0       0
  7560 ;;      Totals:         4       0       0       0
  7561 ;;Total ram usage:        4 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; This function calls:
  7564 ;;		Nothing
  7565 ;; This function is called by:
  7566 ;;		_InterruptHandlerHigh
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           	psect	text33
  7571  001BF4                     __ptext33:
  7572                           	opt stack 0
  7573  001BF4                     i2_delay_tenth_s:
  7574                           	opt stack 23
  7575                           
  7576                           ;incstack = 0
  7577                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7578  001BF4  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7579                           
  7580                           ;Movement.c: 33: unsigned int i=0;
  7581  001BF6  0E00               	movlw	0
  7582  001BF8  6E04               	movwf	i2delay_tenth_s@i+1,c
  7583  001BFA  0E00               	movlw	0
  7584  001BFC  6E03               	movwf	i2delay_tenth_s@i,c
  7585                           
  7586                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7587  001BFE  0E00               	movlw	0
  7588  001C00  6E04               	movwf	i2delay_tenth_s@i+1,c
  7589  001C02  0E01               	movlw	1
  7590  001C04  6E03               	movwf	i2delay_tenth_s@i,c
  7591  001C06  D009               	goto	i2l206
  7592  001C08                     
  7593                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7594  001C08  0E82               	movlw	130
  7595  001C0A  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7596  001C0C  0EDE               	movlw	222
  7597  001C0E                     i2u376_47:
  7598  001C0E  2EE8               	decfsz	wreg,f,c
  7599  001C10  D7FE               	bra	i2u376_47
  7600  001C12  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7601  001C14  D7FC               	bra	i2u376_47
  7602  001C16  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7603  001C18  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7604  001C1A                     i2l206:
  7605  001C1A  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7606  001C1C  0D02               	mullw	2
  7607  001C1E  5003               	movf	i2delay_tenth_s@i,w,c
  7608  001C20  5CF3               	subwf	prodl,w,c
  7609  001C22  5004               	movf	i2delay_tenth_s@i+1,w,c
  7610  001C24  58F4               	subwfb	prodh,w,c
  7611  001C26  A0D8               	btfss	status,0,c
  7612  001C28  0012               	return	
  7613  001C2A  D7EE               	goto	i2l207
  7614  001C2C                     __end_ofi2_delay_tenth_s:
  7615                           	opt stack 0
  7616                           pclatu	equ	0xFFB
  7617                           pclath	equ	0xFFA
  7618                           tblptru	equ	0xFF8
  7619                           tblptrh	equ	0xFF7
  7620                           tblptrl	equ	0xFF6
  7621                           tablat	equ	0xFF5
  7622                           prodh	equ	0xFF4
  7623                           prodl	equ	0xFF3
  7624                           intcon	equ	0xFF2
  7625                           postinc0	equ	0xFEE
  7626                           fsr0h	equ	0xFEA
  7627                           fsr0l	equ	0xFE9
  7628                           wreg	equ	0xFE8
  7629                           indf1	equ	0xFE7
  7630                           plusw1	equ	0xFE3
  7631                           fsr1h	equ	0xFE2
  7632                           fsr1l	equ	0xFE1
  7633                           bsr	equ	0xFE0
  7634                           indf2	equ	0xFDF
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           plusw2	equ	0xFDB
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           pclatu	equ	0xFFB
  7642                           pclath	equ	0xFFA
  7643                           tblptru	equ	0xFF8
  7644                           tblptrh	equ	0xFF7
  7645                           tblptrl	equ	0xFF6
  7646                           tablat	equ	0xFF5
  7647                           prodh	equ	0xFF4
  7648                           prodl	equ	0xFF3
  7649                           intcon	equ	0xFF2
  7650                           postinc0	equ	0xFEE
  7651                           fsr0h	equ	0xFEA
  7652                           fsr0l	equ	0xFE9
  7653                           wreg	equ	0xFE8
  7654                           indf1	equ	0xFE7
  7655                           plusw1	equ	0xFE3
  7656                           fsr1h	equ	0xFE2
  7657                           fsr1l	equ	0xFE1
  7658                           bsr	equ	0xFE0
  7659                           indf2	equ	0xFDF
  7660                           postinc2	equ	0xFDE
  7661                           postdec2	equ	0xFDD
  7662                           plusw2	equ	0xFDB
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667                           	psect	rparam
  7668  0000                     pclatu	equ	0xFFB
  7669                           pclath	equ	0xFFA
  7670                           tblptru	equ	0xFF8
  7671                           tblptrh	equ	0xFF7
  7672                           tblptrl	equ	0xFF6
  7673                           tablat	equ	0xFF5
  7674                           prodh	equ	0xFF4
  7675                           prodl	equ	0xFF3
  7676                           intcon	equ	0xFF2
  7677                           postinc0	equ	0xFEE
  7678                           fsr0h	equ	0xFEA
  7679                           fsr0l	equ	0xFE9
  7680                           wreg	equ	0xFE8
  7681                           indf1	equ	0xFE7
  7682                           plusw1	equ	0xFE3
  7683                           fsr1h	equ	0xFE2
  7684                           fsr1l	equ	0xFE1
  7685                           bsr	equ	0xFE0
  7686                           indf2	equ	0xFDF
  7687                           postinc2	equ	0xFDE
  7688                           postdec2	equ	0xFDD
  7689                           plusw2	equ	0xFDB
  7690                           fsr2h	equ	0xFDA
  7691                           fsr2l	equ	0xFD9
  7692                           status	equ	0xFD8
  7693                           
  7694                           	psect	temp
  7695  000034                     btemp:
  7696                           	opt stack 0
  7697  000034                     	ds	1
  7698  0000                     int$flags	set	btemp
  7699  0000                     wtemp6	set	btemp+1
  7700                           pclatu	equ	0xFFB
  7701                           pclath	equ	0xFFA
  7702                           tblptru	equ	0xFF8
  7703                           tblptrh	equ	0xFF7
  7704                           tblptrl	equ	0xFF6
  7705                           tablat	equ	0xFF5
  7706                           prodh	equ	0xFF4
  7707                           prodl	equ	0xFF3
  7708                           intcon	equ	0xFF2
  7709                           postinc0	equ	0xFEE
  7710                           fsr0h	equ	0xFEA
  7711                           fsr0l	equ	0xFE9
  7712                           wreg	equ	0xFE8
  7713                           indf1	equ	0xFE7
  7714                           plusw1	equ	0xFE3
  7715                           fsr1h	equ	0xFE2
  7716                           fsr1l	equ	0xFE1
  7717                           bsr	equ	0xFE0
  7718                           indf2	equ	0xFDF
  7719                           postinc2	equ	0xFDE
  7720                           postdec2	equ	0xFDD
  7721                           plusw2	equ	0xFDB
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         183
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      51
    BANK0           160    107     115
    BANK1           256    227     250
    BANK2           256      0     150

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 12
		 -> VerifySignal@translation(BANK0[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 12
		 -> VerifySignal@translation(BANK0[12]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@ReceivedString	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    sp__memset	PTR void  size(2) Largest target is 12
		 -> VerifySignal@translation(BANK0[12]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@millis	PTR unsigned int  size(2) Largest target is 2
		 -> millis(BANK1[2]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_5(CODE[17]), main@Message(BANK1[10]), 
		 -> ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S111DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S111DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_SendLCD
    _initLCD->_SendLCD
    _VerifySignal->_memset
    _ScanWithRange->_SendLCD
    _ScanIR->_SendLCD
    _setMotorPWM->___wmul
    ___awdiv->___wmul
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _VerifySignal->_memset
    _ScanWithRange->_sprintf
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               229   229      0   80517
                                            105 BANK0      2     2      0
                                              0 BANK1    227   227      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              0 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4651
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     240
                                             43 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        21    19      2    1391
                                              2 BANK0     21    19      2
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     407
                                             43 COMRAM     6     0      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    61     16   27309
                                             28 BANK0     77    61     16
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5191
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5461
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    3956
                                             17 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             43 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   13771
                                             28 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4524
                                             17 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1694
                                              8 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3073
                                              7 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             43 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     409
                                             43 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             43 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              0 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2352
                                              0 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                             47 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                             43 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
     _memset
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E3      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6B      73       5       71.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      33       1       54.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     236       3        0.0%
DATA                 0      0     236      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 20 14:21:01 2018

                        ?_grabRightIR 002C                                     _i 0033  
                  fullSpeedBack@power 007B                                    l36 1394  
                                  l37 13BE                                    l53 17A8  
                                  l54 1758                                    l70 18A6  
                                  l55 1770                                    l56 1788  
                                  l67 18C6                                    l68 1870  
                                  l69 188C                          ___awdiv@sign 0065  
                                  bsr 000FE0                   ___wmul@multiplicand 002E  
                         main@Message 01BE                           ?_LCD_String 0060  
                                 l112 197A                                   l107 1904  
                                 l221 0E5E                                   l117 1D0A  
                                 l214 14F6                                   l206 1BE2  
                                 l222 0B1E                                   l151 1C8E  
                                 l207 1BD0                                   l231 0E48  
                                 l223 0BE0                                   l232 0E5A  
                                 l224 0BFC                                   l226 0D20  
                                 l410 05EA                                   l402 0400  
                                 l155 1A0E                                   l227 0C6E  
                                 l403 0494                                   l156 19D8  
                                 l228 0C56                                   l412 060C  
                                 l404 04A2                                   l149 1C7A  
                                 l421 06C4                                   l270 1268  
                                 l430 091A                                   l406 04D0  
                                 l271 1278                                   l263 11D6  
                                 l431 08C4                                   l415 0618  
                                 l407 051A                                   l416 0750  
                                 l408 059E                                   l273 12D8  
                                 l265 11F0                                   l441 0988  
                                 l433 08A4                                   l425 07AC  
                                 l442 09BA                                   l418 06E2  
                                 l419 0682                                   l268 122C  
                                 l428 083C                                   l461 0F3A  
                                 l437 08E0                                   l462 0F32  
                                 l480 1064                                   l481 1088  
                                 l482 1090                                   l474 0FF0  
                                 l458 0F0A                                   l483 10D0  
                                 l467 0F6A                                   l459 0F24  
                                 l492 1112                                   l484 10B0  
                                 l476 101A                                   l493 116E  
                                 l469 0FC8                                   l910 1A76  
                                 l494 1118                                   l398 03FA  
                                 l911 1A80                                   l920 1ABA  
                                 l672 184C                                   l921 1AC4  
                                 l673 1856                                   l665 17FE  
                                 l906 1A56                                   l674 1864  
                                 l666 180E                                   l930 1CE4  
                                 l907 1A4E                                   l827 1D7A  
                                 l931 1CD2                                   l916 1AA2  
                                 l668 182C                                   l917 1A9A  
                                 l669 1824                           grabLeftIR@i 0062  
                                 prod 000FF3                                   wreg 000FE8  
                        main@MoveTime 015A                          __CFG_LVP$OFF 000000  
                        main@MoveType 0128                                  l3204 1972  
                                l3282 101E                                  l3354 1CD2  
                                l3188 18FC                                  l3604 1270  
                                l3578 11CE                                  l3770 067A  
                                l3870 09DE                                  l3782 06BC  
                                l3868 09DC                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u3000 1176  
                                u3010 1190                                  _LATB 000F8A  
                                u1290 1830                                  u1540 1AA6  
                                u3221 0364                                  u3310 0644  
                                u3231 0376                                  u2504 1356  
                                u3160 126C                                  u3320 0658  
                                u3312 0646                                  u2505 1352  
                                u2514 13B0                                  u3322 065A  
                                u2515 13AC                                  u3180 12BC  
                                u3420 0888                                  u2525 140A  
                                u2535 1518                                  u2800 19FC  
                                u3440 0916                                  u3360 06B8  
                                u2545 1526                                  u2810 1A2E  
                                u2555 1544                                  u3507 046C  
                                u2740 1942                                  u2660 1A5A  
                                u3460 0954                                  u3380 06DC  
                                u2565 1552                                  u2645 1CA2  
                                u3517 15E8                                  u2646 1CA4  
                                u2575 1572                                  u2807 19F2  
                                u2735 190C                                  u1935 1D06  
                                u3607 1690                                  u3527 15FE  
                                u1936 1D08                                  u3480 09C6  
                                u2585 1580                                  u2817 1A24  
                                u3617 0B52                                  u3537 1610  
                                u2770 19B8                                  u2595 15B0  
                                u3707 1C90                                  u3627 0B6A  
                                u1955 1D18                                  u3547 161E  
                                u1956 1D1A                                  u3717 1A08  
                                u2765 1982                                  u3637 18C0  
                                u3557 162C                                  u3727 1CB0  
                                u3647 1BD6                                  u3567 163E  
                                u3737 1CC0                                  u3657 1468  
                                u3577 1650                                  u3497 0454  
                                u2970 10D8                                  u2890 104A  
                                u3747 15CC                                  u3667 1480  
                                u3587 1668                                  u2980 10F6  
                                u3757 1DB6                                  u3677 17A2  
                                u3597 167E                                  u3687 1934  
                                u3697 19AA                                  _main 0350  
                                _mode 0032                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0034                                  _stop 1756  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00F6               ScanWithRange@MotorPower 00BC  
                        ___param_bank 000000                       i2_delay_tenth_s 1BF4  
                     __end_of_SendLCD 1CC8                       __end_of_SetLine 1C98  
                  ScanWithRange@F3555 00CB                           ScanIR@F3541 00CF  
                               ?_main 0001                       __end_of___awdiv 186E  
                               ?_stop 0071                       ___awdiv@divisor 0062  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0062  
                     __end_of___lwdiv 1A8A                       __end_of___lwmod 1ACE  
                               i1l372 009E                                 i1l373 009A  
                               i2l206 1C1A                                 i1l374 009C  
                               i2l207 1C08                                 i2l380 16FE  
                               i2l381 16F0                                 i2l384 16F6  
                               i2l385 170A                       ___awdiv@counter 0064  
                               _RCREG 000FAE                                 _E_TOG 1DB2  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                     __end_of_initLCD 1698                    ScanWithRange@loops 0080  
                     __end_of_dpowers 030B                       __end_of_isdigit 1D82  
                               main@i 01CF                                 pclath 000FFA  
                               tablat 000FF5            VerifySignal@ReceivedString 0062  
                               plusw1 000FE3                                 plusw2 000FDB  
                               status 000FD8                                 wtemp6 0035  
                 __size_of_LCD_String 0060                       __end_of_sprintf 119E  
              __size_of_ScanWithRange 04FE                        __CFG_MCLRE$OFF 000000  
                     __initialization 1C2C                          __end_of_main 0A00  
                        __end_of_stop 17E8                        delay_tenth_s@i 002E  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 0060  
        ScanIR@DirectionMoveThreshold 00A9                  __end_of_enableSensor 1D1C  
                              ??_main 00C9                                ??_stop 0032  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                        main@MotorPower 01CD  
                        ?_setMotorPWM 0068                __size_of_fullSpeedBack 003C  
                    ___awdiv@dividend 0060                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 1BF4                                _LCDout 150E  
                         SendLCD@Byte 0031                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00BD  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1C2C                           SendLCD@type 0030  
                           ??_SendLCD 0031                                _ScanIR 141A  
                           ??_SetLine 0032                           fullSpeed@mL 0071  
                         fullSpeed@mR 0073                   ScanWithRange@millis 008A  
                              ___wmul 1D1C                             ??___awdiv 0032  
                    __end_of_initRFID 1D9E                             ??___lwdiv 0030  
                           ??___lwmod 0030                                _initIR 1D42  
                              _memset 1CC8                  __size_of_grabRightIR 0076  
                              _millis 01F7                                clear_0 1C32  
                              clear_1 1C3E                                clear_2 1C4A  
                    ___awdiv@quotient 0066                                main@mL 01D1  
                              main@mR 01DA                        ??_initMotorPWM 002C  
                           ??_initLCD 0060                         _ScanWithRange 0A00  
                           ??_isdigit 002C          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0071                                stop@mR 0073  
                           ??_sprintf 006F       ScanWithRange@TimeAboveThreshold 00C0  
                    __end_of_turnLeft 1B82                       fullSpeedBack@mL 0077  
                     fullSpeedBack@mR 0079                            __accesstop 0060  
             __end_of__initialization 1C54                         ___rparam_used 000001  
                         SetLine@line 0060                         __end_of_E_TOG 1DC0  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1ACE  
                        ??_LCD_String 0032                        ?_ScanWithRange 007C  
                             ??_E_TOG 002C         __size_of_InterruptHandlerHigh 174E  
         __end_of_InterruptHandlerLow 00F6            delay_tenth_s@tenth_seconds 002D  
                        sprintf@width 0079                            __pbssBANK0 00CB  
                          __pbssBANK1 01E3                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0014                    __size_of_fullSpeed 007C  
                  __end_of_LCD_String 1A36                               ?_ScanIR 007C  
                      ?_fullSpeedBack 0077                 __size_of_enableSensor 0026  
                             ?___wmul 002C                   grabLeftIR@IR_signal 0060  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                               ?_memset 002C  
                          _grabLeftIR 1960                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013E                       __size_of_LCDout 00C6  
                        _enableSensor 1CF6                    __size_of_turnRight 003C  
                __end_of_initMotorPWM 1BBC                ScanWithRange@RFID_Read 0088  
                             _SendLCD 1C98                               __Hparam 0000  
                             _SetLine 1C62                               __Lparam 0000  
                     __size_of_ScanIR 00F4                               ___awdiv 17E8  
                     __size_of___wmul 0026                               ___lwdiv 1A36  
                             ___lwmod 1A8A                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1C2C  
                     ??_ScanWithRange 008C                       __size_of_memset 002E  
                             __ramtop 0300                             ?_turnLeft 0077  
                             __ptext0 0350                               __ptext1 1D9E  
                             __ptext2 1D82                               __ptext3 1B82  
                             __ptext4 15D4                               __ptext5 1D42  
                             __ptext6 1ACE                               __ptext7 1CF6  
                             __ptext8 119E                               __ptext9 1CC8  
                           _T0CONbits 000FD5                               _initLCD 15D4  
                   __end_of_initTimer 1DB2                               _dpowers 0301  
                   __end_of_fullSpeed 18EA                               _isdigit 1D64  
                        LCDout@number 002F                         ?_VerifySignal 0062  
                             main@buf 0100                               _sprintf 0EFE  
                      __pintcode_body 1698                  end_of_initialization 1C54  
                      ScanWithRange@i 00B8                    setMotorPWM@PWMduty 006F  
                          ??_initRFID 002C                               memset@c 002E  
                             memset@n 0030                               memset@p 0060  
                       __Lmediumconst 0000                               int_func 1698  
                  ScanIR@SensorResult 00AB                       ??_fullSpeedBack 0032  
                           _RFID_Read 01F9                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 0032  
              ScanWithRange@LeftFlick 00C6                     __end_of_turnRight 1B46  
                         ?_grabLeftIR 002C                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0064                ScanWithRange@RightFlag 00C7  
                      __end_of_LCDout 15D4                             _TXSTAbits 000FAC  
                           ScanIR@buf 0081                         ??_grabRightIR 002E  
                      __end_of_ScanIR 150E                        _ReceivedString 01E7  
                      __end_of___wmul 1D42                     ScanWithRange@Move 0084  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1D64  
              __size_of_delay_tenth_s 0038                        __end_of_memset 1CF6  
                 start_initialization 1C2C                 __size_of_initMotorPWM 003A  
                            ??_LCDout 002C          __end_of_InterruptHandlerHigh 1756  
                            ??_ScanIR 0080                   __size_of_grabLeftIR 0076  
                            ??___wmul 0030                              ??_initIR 002C  
                            ??_memset 0032                   __end_of_grabRightIR 1960  
                        _initMotorPWM 1B82                           __pbssCOMRAM 0032  
                      fullSpeed@power 0075                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                          _isdigit$1765 002D  
        __size_of_InterruptHandlerLow 00DE                         _delay_tenth_s 1BBC  
                         sprintf@flag 0078                           sprintf@prec 0075  
                   __size_of_initRFID 001C                              ?_SendLCD 0030  
                            ?_SetLine 0001                      ___lwdiv@dividend 002C  
                           __pintcode 0008                  __end_of_VerifySignal 12DC  
                            ?___awdiv 0060              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 002C                              ?___lwmod 0063  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                 VerifySignal@xorOutput 0074  
                            ?_initLCD 0001                      main@SensorResult 01C9  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003C  
             VerifySignal@translation 0068                         ??_setMotorPWM 006A  
                           _initTimer 1D9E                             _fullSpeed 186E  
                    ___lwdiv@quotient 0061                              ?_sprintf 0067  
                      ?_delay_tenth_s 0001                        ___wmul@product 0030  
                            _LATAbits 000F89                              _LATBbits 000F8A  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0077  
                         turnRight@mR 0079                              _PIR1bits 000F9E  
                            i2u376_47 1C0E                              _RCONbits 000FD0  
                           main@F3552 0200                             main@F3554 0264  
                           main@F3557 01E3                           _grabRightIR 18EA  
               ScanWithRange@LeftFlag 00BE                  grabRightIR@IR_signal 0060  
                   ___wmul@multiplier 002C                 __end_of_ScanWithRange 0EFE  
                        setMotorPWM@m 0068                 ScanWithRange@MoveTime 0082  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0086  
                            ScanIR@mL 007C                              ScanIR@mR 007E  
                        ??_grabLeftIR 002E                            ?_initTimer 0001  
                           _turnRight 1B0A                            ?_fullSpeed 0071  
                    ScanWithRange@buf 0090             VerifySignal@ASCIICheckSum 0075  
                 __end_of_setMotorPWM 141A                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1B0A                      __size_of_SetLine 0036  
                  __end_of_grabLeftIR 19D6                      __size_of___awdiv 0086  
                    __size_of___lwdiv 0054                      __size_of___lwmod 0044  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0076  
                    __size_of_initLCD 00C4                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 002E                       ___lwdiv@counter 0060  
                          ?_turnRight 0077                              __ptext10 0A00  
                            __ptext11 1B0A                              __ptext20 1D64  
                            __ptext12 1B46                              __ptext21 1D1C  
                            __ptext13 186E                              __ptext30 1DB2  
                            __ptext22 1A8A                              __ptext14 1BBC  
                            __ptext23 1A36                              __ptext15 141A  
                            __ptext24 18EA                              __ptext16 1756  
                            __ptext33 1BF4                              __ptext25 1960  
                            __ptext17 12DC                              __ptext26 1C62  
                            __ptext18 17E8                              __ptext27 19D6  
                            __ptext19 0EFE                              __ptext28 1C98  
                            __ptext29 150E                       ??_delay_tenth_s 002C  
                    __size_of_sprintf 02A0                              _initRFID 1D82  
           ScanWithRange@SensorResult 00C2                        turnRight@power 007B  
                       __size_of_main 06B0                    main@DirectionFound 01CE  
                       turnLeft@power 007B                         __size_of_stop 0092  
                          turnLeft@mL 0077                            turnLeft@mR 0079  
               __size_of_VerifySignal 013E                              int$flags 0034  
                            main@Move 01D0                   _InterruptHandlerLow 0018  
                          _LCD_String 19D6                              _turnLeft 1B46  
                     ScanWithRange@mL 007C                       ScanWithRange@mR 007E  
                  enableSensor@sensor 002D                    enableSensor@status 002C  
                       VerifySignal@i 0076                            _INTCONbits 000FF2  
                         ??_initTimer 002C                              isdigit@c 002E  
                            memset@p1 002C                           ??_fullSpeed 0076  
                         _setMotorPWM 12DC                          _VerifySignal 119E  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0073                             sprintf@sp 0067  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 002C  
                    ___lwmod@dividend 0063                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00BA                ??_InterruptHandlerHigh 0005  
                            sprintf@c 007B                              sprintf@f 0069  
                     ___lwmod@divisor 0065                       ___lwmod@counter 0030  
                         ??_turnRight 0032                 ??_InterruptHandlerLow 0017  
                      ??_enableSensor 002D                      i2delay_tenth_s@i 0003  
