

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 19 16:59:14 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4331 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	smallconst
    88  000300                     __psmallconst:
    89                           	opt stack 0
    90  000300  00                 	db	0
    91  000301                     _dpowers:
    92                           	opt stack 0
    93  000301  0001               	dw	1
    94  000303  000A               	dw	10
    95  000305  0064               	dw	100
    96  000307  03E8               	dw	1000
    97  000309  2710               	dw	10000
    98  00030B                     __end_of_dpowers:
    99                           	opt stack 0
   100  0000                     _OSCCONbits	set	4051
   101  0000                     _OSCCON	set	4051
   102  0000                     _PIE1bits	set	3997
   103  0000                     _IPR1bits	set	3999
   104  0000                     _RCONbits	set	4048
   105  0000                     _RCREG	set	4014
   106  0000                     _TXREG	set	4013
   107  0000                     _PIR1bits	set	3998
   108  0000                     _RCSTAbits	set	4011
   109  0000                     _TXSTAbits	set	4012
   110  0000                     _BAUDCONbits	set	4010
   111  0000                     _SPBRGH	set	4016
   112  0000                     _SPBRG	set	4015
   113  0000                     _TRISC	set	3988
   114  0000                     _TMR0H	set	4055
   115  0000                     _TMR0L	set	4054
   116  0000                     _INTCONbits	set	4082
   117  0000                     _T0CONbits	set	4053
   118  0000                     _TRISDbits	set	3989
   119  0000                     _TRISCbits	set	3988
   120  0000                     _LATDbits	set	3980
   121  0000                     _LATCbits	set	3979
   122  0000                     _LATEbits	set	3981
   123  0000                     _CAP2BUFL	set	3942
   124  0000                     _CAP2BUFH	set	3943
   125  0000                     _CAP1BUFL	set	3944
   126  0000                     _CAP1BUFH	set	3945
   127  0000                     _T5CON	set	4023
   128  0000                     _TRISEbits	set	3990
   129  0000                     _CAP2CON	set	3938
   130  0000                     _CAP1CON	set	3939
   131  0000                     _ANSEL0bits	set	4024
   132  0000                     _TRISAbits	set	3986
   133  0000                     _LATAbits	set	3977
   134  0000                     _LATB	set	3978
   135  0000                     _TRISBbits	set	3987
   136  0000                     _PTPERH	set	3962
   137  0000                     _PTPERL	set	3963
   138  0000                     _PWMCON1	set	3950
   139  0000                     _PWMCON0	set	3951
   140  0000                     _PTCON1	set	3966
   141  0000                     _PTCON0	set	3967
   142  0000                     _PDC1H	set	3958
   143  0000                     _PDC1L	set	3959
   144  0000                     _PDC0H	set	3960
   145  0000                     _PDC0L	set	3961
   146  00030B                     STR_6:
   147  00030B  20                 	db	32
   148  00030C  20                 	db	32
   149  00030D  20                 	db	32
   150  00030E  20                 	db	32
   151  00030F  20                 	db	32
   152  000310  20                 	db	32
   153  000311  25                 	db	37
   154  000312  30                 	db	48	;'0'
   155  000313  34                 	db	52	;'4'
   156  000314  64                 	db	100	;'d'
   157  000315  2C                 	db	44
   158  000316  20                 	db	32
   159  000317  25                 	db	37
   160  000318  30                 	db	48	;'0'
   161  000319  34                 	db	52	;'4'
   162  00031A  64                 	db	100	;'d'
   163  00031B  00                 	db	0
   164  00031C                     STR_5:
   165  00031C  20                 	db	32
   166  00031D  20                 	db	32
   167  00031E  20                 	db	32
   168  00031F  20                 	db	32
   169  000320  20                 	db	32
   170  000321  20                 	db	32
   171  000322  49                 	db	73	;'I'
   172  000323  6E                 	db	110	;'n'
   173  000324  65                 	db	101	;'e'
   174  000325  72                 	db	114	;'r'
   175  000326  74                 	db	116	;'t'
   176  000327  20                 	db	32
   177  000328  4D                 	db	77	;'M'
   178  000329  6F                 	db	111	;'o'
   179  00032A  64                 	db	100	;'d'
   180  00032B  65                 	db	101	;'e'
   181  00032C  00                 	db	0
   182  00032D                     STR_1:
   183  00032D  20                 	db	32
   184  00032E  20                 	db	32
   185  00032F  20                 	db	32
   186  000330  20                 	db	32
   187  000331  20                 	db	32
   188  000332  53                 	db	83	;'S'
   189  000333  63                 	db	99	;'c'
   190  000334  61                 	db	97	;'a'
   191  000335  6E                 	db	110	;'n'
   192  000336  49                 	db	73	;'I'
   193  000337  52                 	db	82	;'R'
   194  000338  00                 	db	0
   195  000339                     STR_8:
   196  000339  47                 	db	71	;'G'
   197  00033A  6F                 	db	111	;'o'
   198  00033B  69                 	db	105	;'i'
   199  00033C  6E                 	db	110	;'n'
   200  00033D  67                 	db	103	;'g'
   201  00033E  20                 	db	32
   202  00033F  48                 	db	72	;'H'
   203  000340  6F                 	db	111	;'o'
   204  000341  6D                 	db	109	;'m'
   205  000342  65                 	db	101	;'e'
   206  000343  00                 	db	0
   207  000344                     STR_7:
   208  000344  53                 	db	83	;'S'
   209  000345  65                 	db	101	;'e'
   210  000346  61                 	db	97	;'a'
   211  000347  72                 	db	114	;'r'
   212  000348  63                 	db	99	;'c'
   213  000349  68                 	db	104	;'h'
   214  00034A  69                 	db	105	;'i'
   215  00034B  6E                 	db	110	;'n'
   216  00034C  67                 	db	103	;'g'
   217  00034D  00                 	db	0
   218  0000                     
   219                           ; #config settings
   220  00034E  00                 	db	0	; dummy byte at the end
   221  0000                     
   222                           	psect	cinit
   223  001B0C                     __pcinit:
   224                           	opt stack 0
   225  001B0C                     start_initialization:
   226                           	opt stack 0
   227  001B0C                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Clear objects allocated to BANK2 (150 bytes)
   231  001B0C  EE02  F000         	lfsr	0,__pbssBANK2
   232  001B10  0E96               	movlw	150
   233  001B12                     clear_0:
   234  001B12  6AEE               	clrf	postinc0,c
   235  001B14  06E8               	decf	wreg,f,c
   236  001B16  E1FD               	bnz	clear_0
   237                           
   238                           ; Clear objects allocated to BANK1 (21 bytes)
   239  001B18  EE01  F0E2         	lfsr	0,__pbssBANK1
   240  001B1C  0E15               	movlw	21
   241  001B1E                     clear_1:
   242  001B1E  6AEE               	clrf	postinc0,c
   243  001B20  06E8               	decf	wreg,f,c
   244  001B22  E1FD               	bnz	clear_1
   245                           
   246                           ; Clear objects allocated to BANK0 (8 bytes)
   247  001B24  EE00  F0CE         	lfsr	0,__pbssBANK0
   248  001B28  0E08               	movlw	8
   249  001B2A                     clear_2:
   250  001B2A  6AEE               	clrf	postinc0,c
   251  001B2C  06E8               	decf	wreg,f,c
   252  001B2E  E1FD               	bnz	clear_2
   253                           
   254                           ; Clear objects allocated to COMRAM (2 bytes)
   255  001B30  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   256  001B32  6A32               	clrf	__pbssCOMRAM& (0+255),c
   257  001B34                     end_of_initialization:
   258                           	opt stack 0
   259  001B34                     __end_of__initialization:
   260                           	opt stack 0
   261  001B34  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   262  001B36  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   263  001B38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   264  001B3A  6EF8               	movwf	tblptru,c
   265  001B3C  0100               	movlb	0
   266  001B3E  EFA8  F001         	goto	_main	;jump to C main() function
   267                           tblptru	equ	0xFF8
   268                           postinc0	equ	0xFEE
   269                           wreg	equ	0xFE8
   270                           
   271                           	psect	bssCOMRAM
   272  000032                     __pbssCOMRAM:
   273                           	opt stack 0
   274  000032                     _mode:
   275                           	opt stack 0
   276  000032                     	ds	1
   277  000033                     _i:
   278                           	opt stack 0
   279  000033                     	ds	1
   280                           tblptru	equ	0xFF8
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284                           	psect	bssBANK0
   285  0000CE                     __pbssBANK0:
   286                           	opt stack 0
   287  0000CE                     ScanWithRange@F3553:
   288                           	opt stack 0
   289  0000CE                     	ds	4
   290  0000D2                     ScanIR@F3540:
   291                           	opt stack 0
   292  0000D2                     	ds	4
   293                           tblptru	equ	0xFF8
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssBANK1
   298  0001E2                     __pbssBANK1:
   299                           	opt stack 0
   300  0001E2                     main@F3559:
   301                           	opt stack 0
   302  0001E2                     	ds	4
   303  0001E6                     _ReceivedString:
   304                           	opt stack 0
   305  0001E6                     	ds	16
   306  0001F6                     _RFID_Read:
   307                           	opt stack 0
   308  0001F6                     	ds	1
   309                           tblptru	equ	0xFF8
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           
   313                           	psect	bssBANK2
   314  000200                     __pbssBANK2:
   315                           	opt stack 0
   316  000200                     main@F3554:
   317                           	opt stack 0
   318  000200                     	ds	100
   319  000264                     main@F3556:
   320                           	opt stack 0
   321  000264                     	ds	50
   322                           tblptru	equ	0xFF8
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326                           	psect	cstackBANK1
   327  000100                     __pcstackBANK1:
   328                           	opt stack 0
   329  000100                     main@buf:
   330                           	opt stack 0
   331                           
   332                           ; 40 bytes @ 0x0
   333  000100                     	ds	40
   334  000128                     main@MoveType:
   335                           	opt stack 0
   336                           
   337                           ; 50 bytes @ 0x28
   338  000128                     	ds	50
   339  00015A                     main@MoveTime:
   340                           	opt stack 0
   341                           
   342                           ; 100 bytes @ 0x5A
   343  00015A                     	ds	100
   344  0001BE                     main@Message:
   345                           	opt stack 0
   346                           
   347                           ; 10 bytes @ 0xBE
   348  0001BE                     	ds	10
   349  0001C8                     main@ScanAngle:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0xC8
   353  0001C8                     	ds	1
   354  0001C9                     main@SensorResult:
   355                           	opt stack 0
   356                           
   357                           ; 4 bytes @ 0xC9
   358  0001C9                     	ds	4
   359  0001CD                     main@DirectionFound:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0xCD
   363  0001CD                     	ds	1
   364  0001CE                     main@i:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0xCE
   368  0001CE                     	ds	1
   369  0001CF                     main@Move:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0xCF
   373  0001CF                     	ds	1
   374  0001D0                     main@mL:
   375                           	opt stack 0
   376                           
   377                           ; 9 bytes @ 0xD0
   378  0001D0                     	ds	9
   379  0001D9                     main@mR:
   380                           	opt stack 0
   381                           
   382                           ; 9 bytes @ 0xD9
   383  0001D9                     	ds	9
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	cstackBANK0
   389  000060                     __pcstackBANK0:
   390                           	opt stack 0
   391  000060                     ??_initLCD:
   392  000060                     ?___awdiv:
   393                           	opt stack 0
   394  000060                     SetLine@line:
   395                           	opt stack 0
   396  000060                     VerifySignal@i:
   397                           	opt stack 0
   398  000060                     ___lwdiv@counter:
   399                           	opt stack 0
   400  000060                     grabRightIR@IR_signal:
   401                           	opt stack 0
   402  000060                     grabLeftIR@IR_signal:
   403                           	opt stack 0
   404  000060                     LCD_String@string:
   405                           	opt stack 0
   406  000060                     ___awdiv@dividend:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x0
   410  000060                     	ds	1
   411  000061                     VerifySignal@checksum:
   412                           	opt stack 0
   413  000061                     ___lwdiv@quotient:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x1
   417  000061                     	ds	1
   418  000062                     grabRightIR@i:
   419                           	opt stack 0
   420  000062                     grabLeftIR@i:
   421                           	opt stack 0
   422  000062                     VerifySignal@hexByte:
   423                           	opt stack 0
   424  000062                     ___awdiv@divisor:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x2
   428  000062                     	ds	1
   429  000063                     ?___lwmod:
   430                           	opt stack 0
   431  000063                     ___lwmod@dividend:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x3
   435  000063                     	ds	1
   436  000064                     ___awdiv@counter:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x4
   440  000064                     	ds	1
   441  000065                     ___awdiv@sign:
   442                           	opt stack 0
   443  000065                     ___lwmod@divisor:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x5
   447  000065                     	ds	1
   448  000066                     ___awdiv@quotient:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x6
   452  000066                     	ds	1
   453  000067                     ?_sprintf:
   454                           	opt stack 0
   455  000067                     sprintf@sp:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x7
   459  000067                     	ds	1
   460  000068                     setMotorPWM@m:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x8
   464  000068                     	ds	1
   465  000069                     sprintf@f:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x9
   469  000069                     	ds	1
   470  00006A                     ??_setMotorPWM:
   471                           
   472                           ; 1 bytes @ 0xA
   473  00006A                     	ds	5
   474  00006F                     ??_sprintf:
   475  00006F                     setMotorPWM@PWMduty:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0xF
   479  00006F                     	ds	2
   480  000071                     stop@mL:
   481                           	opt stack 0
   482  000071                     fullSpeedAhead@mL:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x11
   486  000071                     	ds	2
   487  000073                     stop@mR:
   488                           	opt stack 0
   489  000073                     fullSpeedAhead@mR:
   490                           	opt stack 0
   491  000073                     sprintf@ap:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x13
   495  000073                     	ds	2
   496  000075                     fullSpeedAhead@power:
   497                           	opt stack 0
   498  000075                     sprintf@prec:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x15
   502  000075                     	ds	1
   503  000076                     sprintf@val:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x16
   507  000076                     	ds	1
   508  000077                     turnLeft@mL:
   509                           	opt stack 0
   510  000077                     turnRight@mL:
   511                           	opt stack 0
   512  000077                     fullSpeedBack@mL:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x17
   516  000077                     	ds	1
   517  000078                     sprintf@flag:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x18
   521  000078                     	ds	1
   522  000079                     turnLeft@mR:
   523                           	opt stack 0
   524  000079                     turnRight@mR:
   525                           	opt stack 0
   526  000079                     fullSpeedBack@mR:
   527                           	opt stack 0
   528  000079                     sprintf@width:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x19
   532  000079                     	ds	2
   533  00007B                     turnLeft@power:
   534                           	opt stack 0
   535  00007B                     turnRight@power:
   536                           	opt stack 0
   537  00007B                     fullSpeedBack@power:
   538                           	opt stack 0
   539  00007B                     sprintf@c:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x1B
   543  00007B                     	ds	1
   544  00007C                     ScanIR@mL:
   545                           	opt stack 0
   546  00007C                     ScanWithRange@mL:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x1C
   550  00007C                     	ds	2
   551  00007E                     ScanIR@mR:
   552                           	opt stack 0
   553  00007E                     ScanWithRange@mR:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x1E
   557  00007E                     	ds	2
   558  000080                     ??_ScanIR:
   559  000080                     ScanWithRange@loops:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x20
   563  000080                     	ds	1
   564  000081                     ScanIR@buf:
   565                           	opt stack 0
   566                           
   567                           ; 40 bytes @ 0x21
   568  000081                     	ds	1
   569  000082                     ScanWithRange@MoveTime:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x22
   573  000082                     	ds	2
   574  000084                     ScanWithRange@Move:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x24
   578  000084                     	ds	2
   579  000086                     ScanWithRange@MoveType:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x26
   583  000086                     	ds	2
   584  000088                     ScanWithRange@RFID_Read:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x28
   588  000088                     	ds	2
   589  00008A                     ??_ScanWithRange:
   590                           
   591                           ; 1 bytes @ 0x2A
   592  00008A                     	ds	5
   593  00008F                     ScanWithRange@buf:
   594                           	opt stack 0
   595                           
   596                           ; 40 bytes @ 0x2F
   597  00008F                     	ds	26
   598  0000A9                     ScanIR@DirectionMoveThreshold:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0x49
   602  0000A9                     	ds	2
   603  0000AB                     ScanIR@SensorResult:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x4B
   607  0000AB                     	ds	12
   608  0000B7                     ScanWithRange@n:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x57
   612  0000B7                     	ds	2
   613  0000B9                     ScanWithRange@i:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x59
   617  0000B9                     	ds	2
   618  0000BB                     ScanWithRange@DirectionFoundThreshold:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x5B
   622  0000BB                     	ds	2
   623  0000BD                     ScanWithRange@MotorPower:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x5D
   627  0000BD                     	ds	1
   628  0000BE                     ScanWithRange@LeftFlick:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x5E
   632  0000BE                     	ds	1
   633  0000BF                     ScanWithRange@MiniLeftFlick:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x5F
   637  0000BF                     	ds	1
   638  0000C0                     ScanWithRange@LeftFlag:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x60
   642  0000C0                     	ds	2
   643  0000C2                     ScanWithRange@TimeAboveThreshold:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x62
   647  0000C2                     	ds	1
   648  0000C3                     ScanWithRange@SensorResult:
   649                           	opt stack 0
   650                           
   651                           ; 4 bytes @ 0x63
   652  0000C3                     	ds	4
   653  0000C7                     ScanWithRange@RightFlag:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x67
   657  0000C7                     	ds	2
   658  0000C9                     ??_main:
   659                           
   660                           ; 1 bytes @ 0x69
   661  0000C9                     	ds	5
   662                           tblptru	equ	0xFF8
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           
   666                           	psect	cstackCOMRAM
   667  000001                     __pcstackCOMRAM:
   668                           	opt stack 0
   669  000001                     ??i2_delay_tenth_s:
   670                           
   671                           ; 1 bytes @ 0x0
   672  000001                     	ds	1
   673  000002                     i2delay_tenth_s@tenth_seconds:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x1
   677  000002                     	ds	1
   678  000003                     i2delay_tenth_s@i:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x2
   682  000003                     	ds	2
   683  000005                     ??_InterruptHandlerHigh:
   684                           
   685                           ; 1 bytes @ 0x4
   686  000005                     	ds	18
   687  000017                     ??_InterruptHandlerLow:
   688                           
   689                           ; 1 bytes @ 0x16
   690  000017                     	ds	21
   691  00002C                     ??_isdigit:
   692  00002C                     ??_LCDout:
   693  00002C                     ??_delay_tenth_s:
   694  00002C                     ?_grabRightIR:
   695                           	opt stack 0
   696  00002C                     ?_grabLeftIR:
   697                           	opt stack 0
   698  00002C                     ?___wmul:
   699                           	opt stack 0
   700  00002C                     ?___lwdiv:
   701                           	opt stack 0
   702  00002C                     enableSensor@status:
   703                           	opt stack 0
   704  00002C                     VerifySignal@Signal:
   705                           	opt stack 0
   706  00002C                     ___wmul@multiplier:
   707                           	opt stack 0
   708  00002C                     ___lwdiv@dividend:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x2B
   712  00002C                     	ds	1
   713  00002D                     enableSensor@sensor:
   714                           	opt stack 0
   715  00002D                     delay_tenth_s@tenth_seconds:
   716                           	opt stack 0
   717  00002D                     _isdigit$1716:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x2C
   721  00002D                     	ds	1
   722  00002E                     ??_grabRightIR:
   723  00002E                     ??_grabLeftIR:
   724  00002E                     ??_VerifySignal:
   725  00002E                     isdigit@c:
   726                           	opt stack 0
   727  00002E                     delay_tenth_s@i:
   728                           	opt stack 0
   729  00002E                     ___wmul@multiplicand:
   730                           	opt stack 0
   731  00002E                     ___lwdiv@divisor:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x2D
   735  00002E                     	ds	1
   736  00002F                     LCDout@number:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x2E
   740  00002F                     	ds	1
   741  000030                     SendLCD@type:
   742                           	opt stack 0
   743  000030                     ___lwmod@counter:
   744                           	opt stack 0
   745  000030                     ___wmul@product:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x2F
   749  000030                     	ds	1
   750  000031                     SendLCD@Byte:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x30
   754  000031                     	ds	1
   755  000032                     tblptru	equ	0xFF8
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           
   759                           ; 1 bytes @ 0x31
   760 ;;
   761 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   762 ;;
   763 ;; *************** function _main *****************
   764 ;; Defined at:
   765 ;;		line 51 in file "main.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;  MoveTime      100   90[BANK1 ] int [50]
   770 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   771 ;;  buf            40    0[BANK1 ] unsigned char [40]
   772 ;;  Message        10  190[BANK1 ] unsigned char [10]
   773 ;;  mR              9  217[BANK1 ] struct DC_motor
   774 ;;  mL              9  208[BANK1 ] struct DC_motor
   775 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   776 ;;  Move            1  207[BANK1 ] char 
   777 ;;  i               1  206[BANK1 ] unsigned char 
   778 ;;  DirectionFou    1  205[BANK1 ] char 
   779 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   780 ;; Return value:  Size  Location     Type
   781 ;;                  1    wreg      void 
   782 ;; Registers used:
   783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   789 ;;      Params:         0       0       0       0
   790 ;;      Locals:         0       0     226       0
   791 ;;      Temps:          0       5       0       0
   792 ;;      Totals:         0       5     226       0
   793 ;;Total ram usage:      231 bytes
   794 ;; Hardware stack levels required when called:    8
   795 ;; This function calls:
   796 ;;		_LCD_String
   797 ;;		_ScanIR
   798 ;;		_ScanWithRange
   799 ;;		_SendLCD
   800 ;;		_SetLine
   801 ;;		_VerifySignal
   802 ;;		_delay_tenth_s
   803 ;;		_enableSensor
   804 ;;		_fullSpeedAhead
   805 ;;		_fullSpeedBack
   806 ;;		_grabLeftIR
   807 ;;		_grabRightIR
   808 ;;		_initIR
   809 ;;		_initLCD
   810 ;;		_initMotorPWM
   811 ;;		_initRFID
   812 ;;		_initTimer
   813 ;;		_sprintf
   814 ;;		_stop
   815 ;;		_turnLeft
   816 ;;		_turnRight
   817 ;; This function is called by:
   818 ;;		Startup code after reset
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text0
   823  000350                     __ptext0:
   824                           	opt stack 0
   825  000350                     _main:
   826                           	opt stack 23
   827                           
   828                           ;main.c: 54: unsigned char Message[10];
   829                           ;main.c: 55: unsigned char i=0;
   830                           
   831                           ;incstack = 0
   832  000350  0E00               	movlw	0
   833  000352  0101               	movlb	1	; () banked
   834  000354  6FCE               	movwf	main@i& (0+255),b
   835                           
   836                           ;main.c: 56: signed char DirectionFound=0;
   837  000356  0E00               	movlw	0
   838  000358  6FCD               	movwf	main@DirectionFound& (0+255),b
   839                           
   840                           ; BSR set to: 1
   841                           ;main.c: 57: int MoveTime[50] = { 0 };
   842  00035A  EE22  F000         	lfsr	2,main@F3554
   843  00035E  EE11  F05A         	lfsr	1,main@MoveTime
   844  000362  0E63               	movlw	99
   845  000364                     u2931:
   846  000364  CFDB FFE3          	movff	plusw2,plusw1
   847  000368  06E8               	decf	wreg,f,c
   848  00036A  E2FC               	bc	u2931
   849                           
   850                           ; BSR set to: 1
   851                           ;main.c: 60: char MoveType[50] = { 0 };
   852  00036C  EE22  F064         	lfsr	2,main@F3556
   853  000370  EE11  F028         	lfsr	1,main@MoveType
   854  000374  0E31               	movlw	49
   855  000376                     u2941:
   856  000376  CFDB FFE3          	movff	plusw2,plusw1
   857  00037A  06E8               	decf	wreg,f,c
   858  00037C  E2FC               	bc	u2941
   859                           
   860                           ;main.c: 63: signed char Move=0;
   861  00037E  0E00               	movlw	0
   862  000380  6FCF               	movwf	main@Move& (0+255),b
   863                           
   864                           ; BSR set to: 1
   865                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   866  000382  C1E2  F1C9         	movff	main@F3559,main@SensorResult
   867  000386  C1E3  F1CA         	movff	main@F3559+1,main@SensorResult+1
   868  00038A  C1E4  F1CB         	movff	main@F3559+2,main@SensorResult+2
   869  00038E  C1E5  F1CC         	movff	main@F3559+3,main@SensorResult+3
   870                           
   871                           ;main.c: 65: char buf[40];
   872                           ;main.c: 67: unsigned char ScanAngle=60;
   873  000392  0E3C               	movlw	60
   874  000394  6FC8               	movwf	main@ScanAngle& (0+255),b
   875                           
   876                           ; BSR set to: 1
   877                           ;main.c: 76: INTCONbits.GIEH=1;
   878  000396  8EF2               	bsf	intcon,7,c	;volatile
   879                           
   880                           ; BSR set to: 1
   881                           ;main.c: 77: INTCONbits.GIEL=1;
   882  000398  8CF2               	bsf	intcon,6,c	;volatile
   883                           
   884                           ; BSR set to: 1
   885                           ;main.c: 78: INTCONbits.PEIE=1;
   886  00039A  8CF2               	bsf	intcon,6,c	;volatile
   887                           
   888                           ; BSR set to: 1
   889                           ;main.c: 79: RCONbits.IPEN=1;
   890  00039C  8ED0               	bsf	4048,7,c	;volatile
   891                           
   892                           ; BSR set to: 1
   893                           ;main.c: 82: IPR1bits.RCIP=0;
   894  00039E  9A9F               	bcf	3999,5,c	;volatile
   895                           
   896                           ; BSR set to: 1
   897                           ;main.c: 83: PIE1bits.RCIE=1;
   898  0003A0  8A9D               	bsf	3997,5,c	;volatile
   899                           
   900                           ; BSR set to: 1
   901                           ;main.c: 86: TRISCbits.RC3=1;
   902  0003A2  8694               	bsf	3988,3,c	;volatile
   903                           
   904                           ; BSR set to: 1
   905                           ;main.c: 87: INTCONbits.INT0IE=1;
   906  0003A4  88F2               	bsf	intcon,4,c	;volatile
   907                           
   908                           ; BSR set to: 1
   909                           ;main.c: 90: PIR1bits.RC1IF=0;
   910  0003A6  9A9E               	bcf	3998,5,c	;volatile
   911                           
   912                           ; BSR set to: 1
   913                           ;main.c: 91: INTCONbits.INT0IF=0;
   914  0003A8  92F2               	bcf	intcon,1,c	;volatile
   915                           
   916                           ;main.c: 94: struct DC_motor mL, mR;
   917                           ;main.c: 95: mL.power=0;
   918  0003AA  0E00               	movlw	0
   919  0003AC  6FD0               	movwf	main@mL& (0+255),b
   920                           
   921                           ;main.c: 96: mL.direction=1;
   922  0003AE  0E01               	movlw	1
   923  0003B0  6FD1               	movwf	(main@mL+1)& (0+255),b
   924                           
   925                           ; BSR set to: 1
   926                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   927  0003B2  0E79               	movlw	121
   928  0003B4  6FD2               	movwf	(main@mL+2)& (0+255),b
   929  0003B6  0E0F               	movlw	15
   930  0003B8  6FD3               	movwf	(main@mL+3)& (0+255),b
   931                           
   932                           ; BSR set to: 1
   933                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   934  0003BA  0E78               	movlw	120
   935  0003BC  6FD4               	movwf	(main@mL+4)& (0+255),b
   936  0003BE  0E0F               	movlw	15
   937  0003C0  6FD5               	movwf	(main@mL+5)& (0+255),b
   938                           
   939                           ;main.c: 99: mL.dir_pin=0;
   940  0003C2  0E00               	movlw	0
   941  0003C4  6FD6               	movwf	(main@mL+6)& (0+255),b
   942                           
   943                           ;main.c: 100: mL.PWMperiod=199;
   944  0003C6  0E00               	movlw	0
   945  0003C8  6FD8               	movwf	(main@mL+8)& (0+255),b
   946  0003CA  0EC7               	movlw	199
   947  0003CC  6FD7               	movwf	(main@mL+7)& (0+255),b
   948                           
   949                           ;main.c: 102: mR.power=0;
   950  0003CE  0E00               	movlw	0
   951  0003D0  6FD9               	movwf	main@mR& (0+255),b
   952                           
   953                           ;main.c: 103: mR.direction=1;
   954  0003D2  0E01               	movlw	1
   955  0003D4  6FDA               	movwf	(main@mR+1)& (0+255),b
   956                           
   957                           ; BSR set to: 1
   958                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   959  0003D6  0E77               	movlw	119
   960  0003D8  6FDB               	movwf	(main@mR+2)& (0+255),b
   961  0003DA  0E0F               	movlw	15
   962  0003DC  6FDC               	movwf	(main@mR+3)& (0+255),b
   963                           
   964                           ; BSR set to: 1
   965                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   966  0003DE  0E76               	movlw	118
   967  0003E0  6FDD               	movwf	(main@mR+4)& (0+255),b
   968  0003E2  0E0F               	movlw	15
   969  0003E4  6FDE               	movwf	(main@mR+5)& (0+255),b
   970                           
   971                           ;main.c: 106: mR.dir_pin=2;
   972  0003E6  0E02               	movlw	2
   973  0003E8  6FDF               	movwf	(main@mR+6)& (0+255),b
   974                           
   975                           ;main.c: 107: mR.PWMperiod=199;
   976  0003EA  0E00               	movlw	0
   977  0003EC  6FE1               	movwf	(main@mR+8)& (0+255),b
   978  0003EE  0EC7               	movlw	199
   979  0003F0  6FE0               	movwf	(main@mR+7)& (0+255),b
   980                           
   981                           ;main.c: 109: OSCCON = 0x72;
   982  0003F2  0E72               	movlw	114
   983  0003F4  6ED3               	movwf	4051,c	;volatile
   984  0003F6                     
   985                           ; BSR set to: 1
   986  0003F6  B4D3               	btfsc	4051,2,c	;volatile
   987  0003F8  D304               	goto	l3662
   988  0003FA  D7FD               	goto	l397
   989  0003FC                     
   990                           ;main.c: 121: stop(&mL, &mR);
   991  0003FC  0ED0               	movlw	low main@mL
   992  0003FE  0100               	movlb	0	; () banked
   993  000400  6F71               	movwf	stop@mL& (0+255),b
   994  000402  0E01               	movlw	high main@mL
   995  000404  6F72               	movwf	(stop@mL+1)& (0+255),b
   996  000406  0ED9               	movlw	low main@mR
   997  000408  6F73               	movwf	stop@mR& (0+255),b
   998  00040A  0E01               	movlw	high main@mR
   999  00040C  6F74               	movwf	(stop@mR+1)& (0+255),b
  1000  00040E  EC0B  F00B         	call	_stop	;wreg free
  1001                           
  1002                           ;main.c: 124: RFID_Read=0;
  1003  000412  0E00               	movlw	0
  1004  000414  0101               	movlb	1	; () banked
  1005  000416  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  1006                           
  1007                           ; BSR set to: 1
  1008                           ;main.c: 125: Move=0;
  1009  000418  0E00               	movlw	0
  1010  00041A  6FCF               	movwf	main@Move& (0+255),b
  1011                           
  1012                           ; BSR set to: 1
  1013                           ;main.c: 128: SensorResult[0]=grabLeftIR();
  1014  00041C  EC10  F00C         	call	_grabLeftIR	;wreg free
  1015  000420  C02C  F1C9         	movff	?_grabLeftIR,main@SensorResult
  1016  000424  C02D  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1017                           
  1018                           ;main.c: 129: SensorResult[1]=grabRightIR();
  1019  000428  ECD5  F00B         	call	_grabRightIR	;wreg free
  1020  00042C  C02C  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1021  000430  C02D  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1022                           
  1023                           ;main.c: 133: CAP1BUFH=0;
  1024  000434  0E00               	movlw	0
  1025  000436  6E69               	movwf	3945,c	;volatile
  1026                           
  1027                           ;main.c: 134: CAP1BUFL=0;
  1028  000438  0E00               	movlw	0
  1029  00043A  6E68               	movwf	3944,c	;volatile
  1030                           
  1031                           ;main.c: 135: CAP2BUFH=0;
  1032  00043C  0E00               	movlw	0
  1033  00043E  6E67               	movwf	3943,c	;volatile
  1034                           
  1035                           ;main.c: 136: CAP2BUFL=0;
  1036  000440  0E00               	movlw	0
  1037  000442  6E66               	movwf	3942,c	;volatile
  1038                           
  1039                           ;main.c: 139: SendLCD(0b00000001,0);
  1040  000444  0E00               	movlw	0
  1041  000446  6E30               	movwf	SendLCD@type,c
  1042  000448  0E01               	movlw	1
  1043  00044A  ECD5  F00D         	call	_SendLCD
  1044                           
  1045                           ;main.c: 140: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1046  00044E  0E21               	movlw	33
  1047  000450                     u3197:
  1048  000450  2EE8               	decfsz	wreg,f,c
  1049  000452  D7FE               	bra	u3197
  1050  000454  F000               	nop	
  1051                           
  1052                           ;main.c: 141: SendLCD(0b00000010,0);
  1053  000456  0E00               	movlw	0
  1054  000458  6E30               	movwf	SendLCD@type,c
  1055  00045A  0E02               	movlw	2
  1056  00045C  ECD5  F00D         	call	_SendLCD
  1057                           
  1058                           ;main.c: 142: _delay((unsigned long)((2)*(8000000/4000.0)));
  1059  000460  0E06               	movlw	6
  1060  000462  0100               	movlb	0	; () banked
  1061  000464  6FC9               	movwf	??_main& (0+255),b
  1062  000466  0E30               	movlw	48
  1063  000468                     u3207:
  1064  000468  2EE8               	decfsz	wreg,f,c
  1065  00046A  D7FE               	bra	u3207
  1066  00046C  2FC9               	decfsz	??_main& (0+255),f,b
  1067  00046E  D7FC               	bra	u3207
  1068  000470  F000               	nop	
  1069                           
  1070                           ;main.c: 143: SetLine(1);
  1071  000472  0E01               	movlw	1
  1072  000474  ECA1  F00D         	call	_SetLine
  1073                           
  1074                           ;main.c: 144: LCD_String("      Inert Mode");
  1075  000478  0E1C               	movlw	low STR_5
  1076  00047A  0100               	movlb	0	; () banked
  1077  00047C  6F60               	movwf	LCD_String@string& (0+255),b
  1078  00047E  0E03               	movlw	high STR_5
  1079  000480  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1080  000482  EC4B  F00C         	call	_LCD_String	;wreg free
  1081                           
  1082                           ;main.c: 145: SetLine(2);
  1083  000486  0E02               	movlw	2
  1084  000488  ECA1  F00D         	call	_SetLine
  1085                           
  1086                           ;main.c: 146: if (RFID_Read) {
  1087  00048C  0101               	movlb	1	; () banked
  1088  00048E  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1089  000490  B4D8               	btfsc	status,2,c
  1090  000492  D008               	goto	l402
  1091                           
  1092                           ; BSR set to: 1
  1093                           ;main.c: 147: LCD_String(Message);
  1094  000494  0EBE               	movlw	low main@Message
  1095  000496  0100               	movlb	0	; () banked
  1096  000498  6F60               	movwf	LCD_String@string& (0+255),b
  1097  00049A  0E01               	movlw	high main@Message
  1098  00049C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1099  00049E  EC4B  F00C         	call	_LCD_String	;wreg free
  1100                           
  1101                           ;main.c: 148: } else {
  1102  0004A2  D2AF               	goto	l3662
  1103  0004A4                     l402:
  1104                           
  1105                           ;main.c: 149: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1106  0004A4  0E00               	movlw	low main@buf
  1107  0004A6  0100               	movlb	0	; () banked
  1108  0004A8  6F67               	movwf	sprintf@sp& (0+255),b
  1109  0004AA  0E01               	movlw	high main@buf
  1110  0004AC  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  1111  0004AE  0E0B               	movlw	low STR_6
  1112  0004B0  6F69               	movwf	sprintf@f& (0+255),b
  1113  0004B2  0E03               	movlw	high STR_6
  1114  0004B4  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  1115  0004B6  C1C9  F06B         	movff	main@SensorResult,?_sprintf+4
  1116  0004BA  C1CA  F06C         	movff	main@SensorResult+1,?_sprintf+5
  1117  0004BE  C1CB  F06D         	movff	main@SensorResult+2,?_sprintf+6
  1118  0004C2  C1CC  F06E         	movff	main@SensorResult+3,?_sprintf+7
  1119  0004C6  EC84  F007         	call	_sprintf	;wreg free
  1120                           
  1121                           ;main.c: 150: LCD_String(buf);
  1122  0004CA  0E00               	movlw	low main@buf
  1123  0004CC  0100               	movlb	0	; () banked
  1124  0004CE  6F60               	movwf	LCD_String@string& (0+255),b
  1125  0004D0  0E01               	movlw	high main@buf
  1126  0004D2  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1127  0004D4  EC4B  F00C         	call	_LCD_String	;wreg free
  1128                           
  1129                           ;main.c: 151: }
  1130                           ;main.c: 153: break;
  1131  0004D8  D294               	goto	l3662
  1132  0004DA                     
  1133                           ;main.c: 157: initMotorPWM();
  1134  0004DA  ECBC  F00D         	call	_initMotorPWM	;wreg free
  1135                           
  1136                           ;main.c: 158: initTimer();
  1137  0004DE  EC41  F00E         	call	_initTimer	;wreg free
  1138                           
  1139                           ;main.c: 159: initRFID();
  1140  0004E2  EC33  F00E         	call	_initRFID	;wreg free
  1141                           
  1142                           ;main.c: 160: initLCD();
  1143  0004E6  EC50  F00A         	call	_initLCD	;wreg free
  1144                           
  1145                           ;main.c: 161: initIR();
  1146  0004EA  EC13  F00E         	call	_initIR	;wreg free
  1147                           
  1148                           ;main.c: 163: enableSensor(0, 1);
  1149  0004EE  0E01               	movlw	1
  1150  0004F0  6E2C               	movwf	enableSensor@status,c
  1151  0004F2  0E00               	movlw	0
  1152  0004F4  ECED  F00D         	call	_enableSensor
  1153                           
  1154                           ;main.c: 164: enableSensor(1, 1);
  1155  0004F8  0E01               	movlw	1
  1156  0004FA  6E2C               	movwf	enableSensor@status,c
  1157  0004FC  0E01               	movlw	1
  1158  0004FE  ECED  F00D         	call	_enableSensor
  1159                           
  1160                           ;main.c: 167: fullSpeedAhead(&mL, &mR, 100);
  1161  000502  0ED0               	movlw	low main@mL
  1162  000504  0100               	movlb	0	; () banked
  1163  000506  6F71               	movwf	fullSpeedAhead@mL& (0+255),b
  1164  000508  0E01               	movlw	high main@mL
  1165  00050A  6F72               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1166  00050C  0ED9               	movlw	low main@mR
  1167  00050E  6F73               	movwf	fullSpeedAhead@mR& (0+255),b
  1168  000510  0E01               	movlw	high main@mR
  1169  000512  6F74               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1170  000514  0E64               	movlw	100
  1171  000516  6F75               	movwf	fullSpeedAhead@power& (0+255),b
  1172  000518  EC97  F00B         	call	_fullSpeedAhead	;wreg free
  1173                           
  1174                           ;main.c: 168: delay_tenth_s(1);
  1175  00051C  0E01               	movlw	1
  1176  00051E  EC4E  F00D         	call	_delay_tenth_s
  1177  000522  D26E               	goto	l3660
  1178  000524                     
  1179                           ;main.c: 176: SetLine(1);
  1180  000524  0E01               	movlw	1
  1181  000526  ECA1  F00D         	call	_SetLine
  1182                           
  1183                           ;main.c: 177: LCD_String("Searching");
  1184  00052A  0E44               	movlw	low STR_7
  1185  00052C  0100               	movlb	0	; () banked
  1186  00052E  6F60               	movwf	LCD_String@string& (0+255),b
  1187  000530  0E03               	movlw	high STR_7
  1188  000532  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1189  000534  EC4B  F00C         	call	_LCD_String	;wreg free
  1190                           
  1191                           ;main.c: 179: if (DirectionFound==-1) {
  1192  000538  0101               	movlb	1	; () banked
  1193  00053A  29CD               	incf	main@DirectionFound& (0+255),w,b
  1194  00053C  A4D8               	btfss	status,2,c
  1195  00053E  D034               	goto	l407
  1196                           
  1197                           ; BSR set to: 1
  1198                           ;main.c: 184: MoveType[Move]=0;
  1199  000540  51CF               	movf	main@Move& (0+255),w,b
  1200  000542  0D01               	mullw	1
  1201  000544  0E28               	movlw	low main@MoveType
  1202  000546  24F3               	addwf	prodl,w,c
  1203  000548  6ED9               	movwf	fsr2l,c
  1204  00054A  0E01               	movlw	high main@MoveType
  1205  00054C  20F4               	addwfc	prodh,w,c
  1206  00054E  6EDA               	movwf	fsr2h,c
  1207  000550  0E00               	movlw	0
  1208  000552  6EDF               	movwf	indf2,c
  1209                           
  1210                           ;main.c: 185: MoveTime[Move]=6;
  1211  000554  51CF               	movf	main@Move& (0+255),w,b
  1212  000556  0D02               	mullw	2
  1213  000558  0E5A               	movlw	low main@MoveTime
  1214  00055A  24F3               	addwf	prodl,w,c
  1215  00055C  6ED9               	movwf	fsr2l,c
  1216  00055E  0E01               	movlw	high main@MoveTime
  1217  000560  20F4               	addwfc	prodh,w,c
  1218  000562  6EDA               	movwf	fsr2h,c
  1219  000564  0E06               	movlw	6
  1220  000566  6EDE               	movwf	postinc2,c
  1221  000568  0E00               	movlw	0
  1222  00056A  6EDD               	movwf	postdec2,c
  1223                           
  1224                           ; BSR set to: 1
  1225                           ;main.c: 186: Move++;
  1226  00056C  2BCF               	incf	main@Move& (0+255),f,b
  1227                           
  1228                           ; BSR set to: 1
  1229                           ;main.c: 187: fullSpeedAhead(&mL, &mR, 100);
  1230  00056E  0ED0               	movlw	low main@mL
  1231  000570  0100               	movlb	0	; () banked
  1232  000572  6F71               	movwf	fullSpeedAhead@mL& (0+255),b
  1233  000574  0E01               	movlw	high main@mL
  1234  000576  6F72               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1235  000578  0ED9               	movlw	low main@mR
  1236  00057A  6F73               	movwf	fullSpeedAhead@mR& (0+255),b
  1237  00057C  0E01               	movlw	high main@mR
  1238  00057E  6F74               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1239  000580  0E64               	movlw	100
  1240  000582  6F75               	movwf	fullSpeedAhead@power& (0+255),b
  1241  000584  EC97  F00B         	call	_fullSpeedAhead	;wreg free
  1242                           
  1243                           ;main.c: 188: delay_tenth_s(6);
  1244  000588  0E06               	movlw	6
  1245  00058A  EC4E  F00D         	call	_delay_tenth_s
  1246                           
  1247                           ;main.c: 189: stop(&mL,&mR);
  1248  00058E  0ED0               	movlw	low main@mL
  1249  000590  0100               	movlb	0	; () banked
  1250  000592  6F71               	movwf	stop@mL& (0+255),b
  1251  000594  0E01               	movlw	high main@mL
  1252  000596  6F72               	movwf	(stop@mL+1)& (0+255),b
  1253  000598  0ED9               	movlw	low main@mR
  1254  00059A  6F73               	movwf	stop@mR& (0+255),b
  1255  00059C  0E01               	movlw	high main@mR
  1256  00059E  6F74               	movwf	(stop@mR+1)& (0+255),b
  1257  0005A0  EC0B  F00B         	call	_stop	;wreg free
  1258                           
  1259                           ;main.c: 190: DirectionFound=0;
  1260  0005A4  0E00               	movlw	0
  1261  0005A6  D030               	goto	L2
  1262  0005A8                     l407:
  1263                           
  1264                           ; BSR set to: 1
  1265                           
  1266                           ; BSR set to: 1
  1267  0005A8  51CD               	movf	main@DirectionFound& (0+255),w,b
  1268  0005AA  A4D8               	btfss	status,2,c
  1269  0005AC  D01F               	goto	l409
  1270                           
  1271                           ; BSR set to: 1
  1272                           ;main.c: 193: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1273                           ;main.c: 194: &MoveTime, &Move, &MoveType, &RFID_Read);
  1274  0005AE  0ED0               	movlw	low main@mL
  1275  0005B0  0100               	movlb	0	; () banked
  1276  0005B2  6F7C               	movwf	ScanWithRange@mL& (0+255),b
  1277  0005B4  0E01               	movlw	high main@mL
  1278  0005B6  6F7D               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1279  0005B8  0ED9               	movlw	low main@mR
  1280  0005BA  6F7E               	movwf	ScanWithRange@mR& (0+255),b
  1281  0005BC  0E01               	movlw	high main@mR
  1282  0005BE  6F7F               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1283  0005C0  C1C8  F080         	movff	main@ScanAngle,ScanWithRange@loops
  1284  0005C4  6B81               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1285  0005C6  0E5A               	movlw	low main@MoveTime
  1286  0005C8  6F82               	movwf	ScanWithRange@MoveTime& (0+255),b
  1287  0005CA  0E01               	movlw	high main@MoveTime
  1288  0005CC  6F83               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1289  0005CE  0ECF               	movlw	low main@Move
  1290  0005D0  6F84               	movwf	ScanWithRange@Move& (0+255),b
  1291  0005D2  0E01               	movlw	high main@Move
  1292  0005D4  6F85               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1293  0005D6  0E28               	movlw	low main@MoveType
  1294  0005D8  6F86               	movwf	ScanWithRange@MoveType& (0+255),b
  1295  0005DA  0E01               	movlw	high main@MoveType
  1296  0005DC  6F87               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1297  0005DE  0EF6               	movlw	low _RFID_Read
  1298  0005E0  6F88               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1299  0005E2  0E01               	movlw	high _RFID_Read
  1300  0005E4  6F89               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1301  0005E6  EC12  F005         	call	_ScanWithRange	;wreg free
  1302  0005EA  D00E               	goto	L2
  1303  0005EC                     l409:
  1304                           
  1305                           ; BSR set to: 1
  1306                           
  1307                           ; BSR set to: 1
  1308  0005EC  05CD               	decf	main@DirectionFound& (0+255),w,b
  1309  0005EE  A4D8               	btfss	status,2,c
  1310  0005F0  D00E               	goto	l411
  1311                           
  1312                           ; BSR set to: 1
  1313                           ;main.c: 197: DirectionFound=ScanIR(&mL, &mR);
  1314  0005F2  0ED0               	movlw	low main@mL
  1315  0005F4  0100               	movlb	0	; () banked
  1316  0005F6  6F7C               	movwf	ScanIR@mL& (0+255),b
  1317  0005F8  0E01               	movlw	high main@mL
  1318  0005FA  6F7D               	movwf	(ScanIR@mL+1)& (0+255),b
  1319  0005FC  0ED9               	movlw	low main@mR
  1320  0005FE  6F7E               	movwf	ScanIR@mR& (0+255),b
  1321  000600  0E01               	movlw	high main@mR
  1322  000602  6F7F               	movwf	(ScanIR@mR+1)& (0+255),b
  1323  000604  EC73  F009         	call	_ScanIR	;wreg free
  1324  000608                     L2:
  1325  000608  0101               	movlb	1	; () banked
  1326  00060A  6FCD               	movwf	main@DirectionFound& (0+255),b
  1327                           
  1328                           ;main.c: 198: } else if (DirectionFound==2) {
  1329  00060C  D1FA               	goto	l3662
  1330  00060E                     l411:
  1331                           
  1332                           ; BSR set to: 1
  1333                           
  1334                           ; BSR set to: 1
  1335  00060E  0E02               	movlw	2
  1336  000610  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1337  000612  A4D8               	btfss	status,2,c
  1338  000614  D1F6               	goto	l3662
  1339                           
  1340                           ; BSR set to: 1
  1341                           ;main.c: 200: mode=2;
  1342  000616  0E02               	movlw	2
  1343  000618  6E32               	movwf	_mode,c	;volatile
  1344                           
  1345                           ; BSR set to: 1
  1346                           ;main.c: 201: MoveType[Move]=1;
  1347  00061A  51CF               	movf	main@Move& (0+255),w,b
  1348  00061C  0D01               	mullw	1
  1349  00061E  0E28               	movlw	low main@MoveType
  1350  000620  24F3               	addwf	prodl,w,c
  1351  000622  6ED9               	movwf	fsr2l,c
  1352  000624  0E01               	movlw	high main@MoveType
  1353  000626  20F4               	addwfc	prodh,w,c
  1354  000628  6EDA               	movwf	fsr2h,c
  1355  00062A  0E01               	movlw	1
  1356  00062C  6EDF               	movwf	indf2,c
  1357                           
  1358                           ; BSR set to: 1
  1359                           ;main.c: 202: }
  1360                           ;main.c: 204: break;
  1361                           
  1362                           ; BSR set to: 1
  1363                           
  1364                           ; BSR set to: 1
  1365                           
  1366                           ; BSR set to: 1
  1367  00062E  D1E9               	goto	l3662
  1368  000630                     
  1369                           ;main.c: 211: if (RFID_Read) {
  1370                           
  1371                           ; BSR set to: 1
  1372  000630  0101               	movlb	1	; () banked
  1373  000632  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1374  000634  B4D8               	btfsc	status,2,c
  1375  000636  D08A               	goto	l415
  1376                           
  1377                           ; BSR set to: 1
  1378                           ;main.c: 212: stop(&mL, &mR);
  1379  000638  0ED0               	movlw	low main@mL
  1380  00063A  0100               	movlb	0	; () banked
  1381  00063C  6F71               	movwf	stop@mL& (0+255),b
  1382  00063E  0E01               	movlw	high main@mL
  1383  000640  6F72               	movwf	(stop@mL+1)& (0+255),b
  1384  000642  0ED9               	movlw	low main@mR
  1385  000644  6F73               	movwf	stop@mR& (0+255),b
  1386  000646  0E01               	movlw	high main@mR
  1387  000648  6F74               	movwf	(stop@mR+1)& (0+255),b
  1388  00064A  EC0B  F00B         	call	_stop	;wreg free
  1389                           
  1390                           ;main.c: 213: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1391  00064E  0E03               	movlw	3
  1392  000650  0101               	movlb	1	; () banked
  1393  000652  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1394  000654  A4D8               	btfss	status,2,c
  1395  000656  D002               	goto	u3020
  1396  000658  0E01               	movlw	1
  1397  00065A  D001               	goto	u3022
  1398  00065C                     u3020:
  1399  00065C  0E00               	movlw	0
  1400  00065E                     u3022:
  1401  00065E  0100               	movlb	0	; () banked
  1402  000660  6FC9               	movwf	??_main& (0+255),b
  1403  000662  0E02               	movlw	2
  1404  000664  0101               	movlb	1	; () banked
  1405  000666  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1406  000668  A4D8               	btfss	status,2,c
  1407  00066A  D002               	goto	u3030
  1408  00066C  0E01               	movlw	1
  1409  00066E  D001               	goto	u3032
  1410  000670                     u3030:
  1411  000670  0E00               	movlw	0
  1412  000672                     u3032:
  1413  000672  0100               	movlb	0	; () banked
  1414  000674  15C9               	andwf	??_main& (0+255),w,b
  1415  000676  A0E8               	btfss	wreg,0,c
  1416  000678  D1C4               	goto	l3662
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;main.c: 214: if (VerifySignal(&ReceivedString)){
  1420  00067A  0EE6               	movlw	low _ReceivedString
  1421  00067C  6E2C               	movwf	VerifySignal@Signal,c
  1422  00067E  0E01               	movlw	high _ReceivedString
  1423  000680  6E2D               	movwf	VerifySignal@Signal+1,c
  1424  000682  EC7B  F00C         	call	_VerifySignal	;wreg free
  1425  000686  0900               	iorlw	0
  1426  000688  B4D8               	btfsc	status,2,c
  1427  00068A  D037               	goto	l417
  1428                           
  1429                           ;main.c: 216: for (i=0; i<10; i++){
  1430  00068C  0E00               	movlw	0
  1431  00068E  0101               	movlb	1	; () banked
  1432  000690  6FCE               	movwf	main@i& (0+255),b
  1433  000692                     l3568:
  1434                           
  1435                           ; BSR set to: 1
  1436  000692  0E09               	movlw	9
  1437  000694  65CE               	cpfsgt	main@i& (0+255),b
  1438  000696  D001               	goto	l418
  1439  000698  D01B               	goto	u3070
  1440  00069A                     l418:
  1441                           
  1442                           ; BSR set to: 1
  1443                           ;main.c: 217: Message[i] = ReceivedString[i+1];
  1444                           
  1445                           ; BSR set to: 1
  1446  00069A  51CE               	movf	main@i& (0+255),w,b
  1447  00069C  0100               	movlb	0	; () banked
  1448  00069E  6FC9               	movwf	??_main& (0+255),b
  1449  0006A0  6BCA               	clrf	(??_main+1)& (0+255),b
  1450  0006A2  0E01               	movlw	1
  1451  0006A4  27C9               	addwf	??_main& (0+255),f,b
  1452  0006A6  0E00               	movlw	0
  1453  0006A8  23CA               	addwfc	(??_main+1)& (0+255),f,b
  1454  0006AA  0EE6               	movlw	low _ReceivedString
  1455  0006AC  25C9               	addwf	??_main& (0+255),w,b
  1456  0006AE  6ED9               	movwf	fsr2l,c
  1457  0006B0  0E01               	movlw	high _ReceivedString
  1458  0006B2  21CA               	addwfc	(??_main+1)& (0+255),w,b
  1459  0006B4  6EDA               	movwf	fsr2h,c
  1460  0006B6  0101               	movlb	1	; () banked
  1461  0006B8  51CE               	movf	main@i& (0+255),w,b
  1462  0006BA  0D01               	mullw	1
  1463  0006BC  0EBE               	movlw	low main@Message
  1464  0006BE  24F3               	addwf	prodl,w,c
  1465  0006C0  6EE1               	movwf	fsr1l,c
  1466  0006C2  0E01               	movlw	high main@Message
  1467  0006C4  20F4               	addwfc	prodh,w,c
  1468  0006C6  6EE2               	movwf	fsr1h,c
  1469  0006C8  CFDF FFE7          	movff	indf2,indf1
  1470                           
  1471                           ; BSR set to: 1
  1472  0006CC  2BCE               	incf	main@i& (0+255),f,b
  1473  0006CE  D7E1               	goto	l3568
  1474  0006D0                     u3070:
  1475                           
  1476                           ; BSR set to: 1
  1477                           ;main.c: 218: }
  1478                           ;main.c: 221: for (i=0; i<16; i++) {
  1479                           
  1480                           ; BSR set to: 1
  1481  0006D0  0E00               	movlw	0
  1482  0006D2  6FCE               	movwf	main@i& (0+255),b
  1483  0006D4                     l3580:
  1484                           
  1485                           ; BSR set to: 1
  1486  0006D4  0E0F               	movlw	15
  1487  0006D6  65CE               	cpfsgt	main@i& (0+255),b
  1488  0006D8  D001               	goto	l420
  1489  0006DA  D00C               	goto	u3090
  1490  0006DC                     l420:
  1491                           
  1492                           ; BSR set to: 1
  1493                           ;main.c: 222: ReceivedString[i]=0;
  1494                           
  1495                           ; BSR set to: 1
  1496  0006DC  51CE               	movf	main@i& (0+255),w,b
  1497  0006DE  0D01               	mullw	1
  1498  0006E0  0EE6               	movlw	low _ReceivedString
  1499  0006E2  24F3               	addwf	prodl,w,c
  1500  0006E4  6ED9               	movwf	fsr2l,c
  1501  0006E6  0E01               	movlw	high _ReceivedString
  1502  0006E8  20F4               	addwfc	prodh,w,c
  1503  0006EA  6EDA               	movwf	fsr2h,c
  1504  0006EC  0E00               	movlw	0
  1505  0006EE  6EDF               	movwf	indf2,c
  1506                           
  1507                           ; BSR set to: 1
  1508  0006F0  2BCE               	incf	main@i& (0+255),f,b
  1509  0006F2  D7F0               	goto	l3580
  1510  0006F4                     u3090:
  1511                           
  1512                           ; BSR set to: 1
  1513                           ;main.c: 223: }
  1514                           ;main.c: 224: mode=3;
  1515                           
  1516                           ; BSR set to: 1
  1517  0006F4  0E03               	movlw	3
  1518  0006F6  6E32               	movwf	_mode,c	;volatile
  1519                           
  1520                           ;main.c: 226: } else {
  1521  0006F8  D184               	goto	l3662
  1522  0006FA                     l417:
  1523                           
  1524                           ;main.c: 227: fullSpeedBack(&mL,&mR, 100);
  1525                           
  1526                           ; BSR set to: 1
  1527  0006FA  0ED0               	movlw	low main@mL
  1528  0006FC  0100               	movlb	0	; () banked
  1529  0006FE  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1530  000700  0E01               	movlw	high main@mL
  1531  000702  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1532  000704  0ED9               	movlw	low main@mR
  1533  000706  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1534  000708  0E01               	movlw	high main@mR
  1535  00070A  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1536  00070C  0E64               	movlw	100
  1537  00070E  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1538  000710  ECF4  F00C         	call	_fullSpeedBack	;wreg free
  1539                           
  1540                           ;main.c: 228: delay_tenth_s(5);
  1541  000714  0E05               	movlw	5
  1542  000716  EC4E  F00D         	call	_delay_tenth_s
  1543                           
  1544                           ;main.c: 229: stop(&mL,&mR);
  1545  00071A  0ED0               	movlw	low main@mL
  1546  00071C  0100               	movlb	0	; () banked
  1547  00071E  6F71               	movwf	stop@mL& (0+255),b
  1548  000720  0E01               	movlw	high main@mL
  1549  000722  6F72               	movwf	(stop@mL+1)& (0+255),b
  1550  000724  0ED9               	movlw	low main@mR
  1551  000726  6F73               	movwf	stop@mR& (0+255),b
  1552  000728  0E01               	movlw	high main@mR
  1553  00072A  6F74               	movwf	(stop@mR+1)& (0+255),b
  1554  00072C  EC0B  F00B         	call	_stop	;wreg free
  1555                           
  1556                           ;main.c: 230: fullSpeedAhead(&mL,&mR, 100);
  1557  000730  0ED0               	movlw	low main@mL
  1558  000732  0100               	movlb	0	; () banked
  1559  000734  6F71               	movwf	fullSpeedAhead@mL& (0+255),b
  1560  000736  0E01               	movlw	high main@mL
  1561  000738  6F72               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1562  00073A  0ED9               	movlw	low main@mR
  1563  00073C  6F73               	movwf	fullSpeedAhead@mR& (0+255),b
  1564  00073E  0E01               	movlw	high main@mR
  1565  000740  6F74               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1566  000742  0E64               	movlw	100
  1567  000744  6F75               	movwf	fullSpeedAhead@power& (0+255),b
  1568  000746  EC97  F00B         	call	_fullSpeedAhead	;wreg free
  1569                           
  1570                           ;main.c: 231: }
  1571                           ;main.c: 232: }
  1572                           ;main.c: 233: } else {
  1573  00074A  D15B               	goto	l3662
  1574  00074C                     l415:
  1575                           
  1576                           ;main.c: 234: DirectionFound=1;
  1577  00074C  0E01               	movlw	1
  1578  00074E  0101               	movlb	1	; () banked
  1579  000750  6FCD               	movwf	main@DirectionFound& (0+255),b
  1580                           
  1581                           ;main.c: 235: mode=1;
  1582  000752  0E01               	movlw	1
  1583  000754  6E32               	movwf	_mode,c	;volatile
  1584                           
  1585                           ; BSR set to: 1
  1586                           ;main.c: 237: fullSpeedAhead(&mL,&mR, 100);
  1587  000756  0ED0               	movlw	low main@mL
  1588  000758  0100               	movlb	0	; () banked
  1589  00075A  6F71               	movwf	fullSpeedAhead@mL& (0+255),b
  1590  00075C  0E01               	movlw	high main@mL
  1591  00075E  6F72               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1592  000760  0ED9               	movlw	low main@mR
  1593  000762  6F73               	movwf	fullSpeedAhead@mR& (0+255),b
  1594  000764  0E01               	movlw	high main@mR
  1595  000766  6F74               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1596  000768  0E64               	movlw	100
  1597  00076A  6F75               	movwf	fullSpeedAhead@power& (0+255),b
  1598  00076C  EC97  F00B         	call	_fullSpeedAhead	;wreg free
  1599                           
  1600                           ;main.c: 238: delay_tenth_s(1);
  1601  000770  0E01               	movlw	1
  1602  000772  EC4E  F00D         	call	_delay_tenth_s
  1603                           
  1604                           ;main.c: 239: MoveType[Move] = 0;
  1605  000776  0101               	movlb	1	; () banked
  1606  000778  51CF               	movf	main@Move& (0+255),w,b
  1607  00077A  0D01               	mullw	1
  1608  00077C  0E28               	movlw	low main@MoveType
  1609  00077E  24F3               	addwf	prodl,w,c
  1610  000780  6ED9               	movwf	fsr2l,c
  1611  000782  0E01               	movlw	high main@MoveType
  1612  000784  20F4               	addwfc	prodh,w,c
  1613  000786  6EDA               	movwf	fsr2h,c
  1614  000788  0E00               	movlw	0
  1615  00078A  6EDF               	movwf	indf2,c
  1616                           
  1617                           ; BSR set to: 1
  1618                           ;main.c: 240: MoveTime[Move] = 5;
  1619  00078C  51CF               	movf	main@Move& (0+255),w,b
  1620  00078E  0D02               	mullw	2
  1621  000790  0E5A               	movlw	low main@MoveTime
  1622  000792  24F3               	addwf	prodl,w,c
  1623  000794  6ED9               	movwf	fsr2l,c
  1624  000796  0E01               	movlw	high main@MoveTime
  1625  000798  20F4               	addwfc	prodh,w,c
  1626  00079A  6EDA               	movwf	fsr2h,c
  1627  00079C  0E05               	movlw	5
  1628  00079E  6EDE               	movwf	postinc2,c
  1629  0007A0  0E00               	movlw	0
  1630  0007A2  6EDD               	movwf	postdec2,c
  1631                           
  1632                           ; BSR set to: 1
  1633                           ;main.c: 241: Move++;
  1634  0007A4  2BCF               	incf	main@Move& (0+255),f,b
  1635                           
  1636                           ; BSR set to: 1
  1637                           ;main.c: 242: }
  1638                           ;main.c: 244: break;
  1639  0007A6  D12D               	goto	l3662
  1640  0007A8                     
  1641                           ;main.c: 249: SetLine(1);
  1642                           
  1643                           ; BSR set to: 1
  1644  0007A8  0E01               	movlw	1
  1645  0007AA  ECA1  F00D         	call	_SetLine
  1646                           
  1647                           ;main.c: 250: LCD_String(Message);
  1648  0007AE  0EBE               	movlw	low main@Message
  1649  0007B0  0100               	movlb	0	; () banked
  1650  0007B2  6F60               	movwf	LCD_String@string& (0+255),b
  1651  0007B4  0E01               	movlw	high main@Message
  1652  0007B6  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1653  0007B8  EC4B  F00C         	call	_LCD_String	;wreg free
  1654                           
  1655                           ;main.c: 251: SetLine(2);
  1656  0007BC  0E02               	movlw	2
  1657  0007BE  ECA1  F00D         	call	_SetLine
  1658                           
  1659                           ;main.c: 252: LCD_String("Going Home");
  1660  0007C2  0E39               	movlw	low STR_8
  1661  0007C4  0100               	movlb	0	; () banked
  1662  0007C6  6F60               	movwf	LCD_String@string& (0+255),b
  1663  0007C8  0E03               	movlw	high STR_8
  1664  0007CA  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1665  0007CC  EC4B  F00C         	call	_LCD_String	;wreg free
  1666  0007D0  0101               	movlb	1	; () banked
  1667  0007D2  BFCF               	btfsc	main@Move& (0+255),7,b
  1668  0007D4  D10A               	goto	u3180
  1669                           
  1670                           ; BSR set to: 1
  1671                           ;main.c: 255: stop(&mL,&mR);
  1672                           
  1673                           ; BSR set to: 1
  1674                           
  1675                           ; BSR set to: 1
  1676  0007D6  0ED0               	movlw	low main@mL
  1677  0007D8  0100               	movlb	0	; () banked
  1678  0007DA  6F71               	movwf	stop@mL& (0+255),b
  1679  0007DC  0E01               	movlw	high main@mL
  1680  0007DE  6F72               	movwf	(stop@mL+1)& (0+255),b
  1681  0007E0  0ED9               	movlw	low main@mR
  1682  0007E2  6F73               	movwf	stop@mR& (0+255),b
  1683  0007E4  0E01               	movlw	high main@mR
  1684  0007E6  6F74               	movwf	(stop@mR+1)& (0+255),b
  1685  0007E8  EC0B  F00B         	call	_stop	;wreg free
  1686                           
  1687                           ;main.c: 256: if (MoveType[Move]==0) {
  1688  0007EC  0101               	movlb	1	; () banked
  1689  0007EE  51CF               	movf	main@Move& (0+255),w,b
  1690  0007F0  0D01               	mullw	1
  1691  0007F2  0E28               	movlw	low main@MoveType
  1692  0007F4  24F3               	addwf	prodl,w,c
  1693  0007F6  6ED9               	movwf	fsr2l,c
  1694  0007F8  0E01               	movlw	high main@MoveType
  1695  0007FA  20F4               	addwfc	prodh,w,c
  1696  0007FC  6EDA               	movwf	fsr2h,c
  1697  0007FE  50DF               	movf	indf2,w,c
  1698  000800  A4D8               	btfss	status,2,c
  1699  000802  D01A               	goto	l427
  1700                           
  1701                           ; BSR set to: 1
  1702                           ;main.c: 257: fullSpeedBack(&mL,&mR,100);
  1703  000804  0ED0               	movlw	low main@mL
  1704  000806  0100               	movlb	0	; () banked
  1705  000808  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1706  00080A  0E01               	movlw	high main@mL
  1707  00080C  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1708  00080E  0ED9               	movlw	low main@mR
  1709  000810  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1710  000812  0E01               	movlw	high main@mR
  1711  000814  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1712  000816  0E64               	movlw	100
  1713  000818  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1714  00081A  ECF4  F00C         	call	_fullSpeedBack	;wreg free
  1715                           
  1716                           ;main.c: 258: delay_tenth_s(MoveTime[Move]);
  1717  00081E  0101               	movlb	1	; () banked
  1718  000820  51CF               	movf	main@Move& (0+255),w,b
  1719  000822  0D02               	mullw	2
  1720  000824  0E5A               	movlw	low main@MoveTime
  1721  000826  24F3               	addwf	prodl,w,c
  1722  000828  6ED9               	movwf	fsr2l,c
  1723  00082A  0E01               	movlw	high main@MoveTime
  1724  00082C  20F4               	addwfc	prodh,w,c
  1725  00082E  6EDA               	movwf	fsr2h,c
  1726  000830  50DF               	movf	indf2,w,c
  1727  000832  EC4E  F00D         	call	_delay_tenth_s
  1728                           
  1729                           ;main.c: 259: } else if (MoveType[Move]==1) {
  1730  000836  D0D6               	goto	l441
  1731  000838                     l427:
  1732  000838  0101               	movlb	1	; () banked
  1733  00083A  51CF               	movf	main@Move& (0+255),w,b
  1734  00083C  0D01               	mullw	1
  1735  00083E  0E28               	movlw	low main@MoveType
  1736  000840  24F3               	addwf	prodl,w,c
  1737  000842  6ED9               	movwf	fsr2l,c
  1738  000844  0E01               	movlw	high main@MoveType
  1739  000846  20F4               	addwfc	prodh,w,c
  1740  000848  6EDA               	movwf	fsr2h,c
  1741  00084A  04DE               	decf	postinc2,w,c
  1742  00084C  A4D8               	btfss	status,2,c
  1743  00084E  D079               	goto	l429
  1744                           
  1745                           ; BSR set to: 1
  1746                           ;main.c: 260: T0CONbits.TMR0ON=0;
  1747  000850  9ED5               	bcf	4053,7,c	;volatile
  1748                           
  1749                           ; BSR set to: 1
  1750                           ;main.c: 261: TMR0L = 0;
  1751  000852  0E00               	movlw	0
  1752  000854  6ED6               	movwf	4054,c	;volatile
  1753                           
  1754                           ;main.c: 262: TMR0H = 0;
  1755  000856  0E00               	movlw	0
  1756  000858  6ED7               	movwf	4055,c	;volatile
  1757                           
  1758                           ; BSR set to: 1
  1759                           ;main.c: 263: if (MoveTime[Move]>0) {
  1760  00085A  51CF               	movf	main@Move& (0+255),w,b
  1761  00085C  0D02               	mullw	2
  1762  00085E  0E5A               	movlw	low main@MoveTime
  1763  000860  24F3               	addwf	prodl,w,c
  1764  000862  6ED9               	movwf	fsr2l,c
  1765  000864  0E01               	movlw	high main@MoveTime
  1766  000866  20F4               	addwfc	prodh,w,c
  1767  000868  6EDA               	movwf	fsr2h,c
  1768  00086A  0E01               	movlw	1
  1769  00086C  BEDB               	btfsc	plusw2,7,c
  1770  00086E  D033               	goto	l430
  1771  000870  0E01               	movlw	1
  1772  000872  50DB               	movf	plusw2,w,c
  1773  000874  E103               	bnz	u3130
  1774  000876  04DE               	decf	postinc2,w,c
  1775  000878  A0D8               	btfss	status,0,c
  1776  00087A  D02D               	goto	l430
  1777  00087C                     u3130:
  1778                           
  1779                           ; BSR set to: 1
  1780                           ;main.c: 264: T0CONbits.TMR0ON=1;
  1781  00087C  8ED5               	bsf	4053,7,c	;volatile
  1782                           
  1783                           ; BSR set to: 1
  1784                           ;main.c: 265: turnRight(&mL,&mR,40);
  1785  00087E  0ED0               	movlw	low main@mL
  1786  000880  0100               	movlb	0	; () banked
  1787  000882  6F77               	movwf	turnRight@mL& (0+255),b
  1788  000884  0E01               	movlw	high main@mL
  1789  000886  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1790  000888  0ED9               	movlw	low main@mR
  1791  00088A  6F79               	movwf	turnRight@mR& (0+255),b
  1792  00088C  0E01               	movlw	high main@mR
  1793  00088E  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1794  000890  0E28               	movlw	40
  1795  000892  6F7B               	movwf	turnRight@power& (0+255),b
  1796  000894  EC12  F00D         	call	_turnRight	;wreg free
  1797  000898  0101               	movlb	1	; () banked
  1798  00089A  51CF               	movf	main@Move& (0+255),w,b
  1799  00089C  0D02               	mullw	2
  1800  00089E  0E5A               	movlw	low main@MoveTime
  1801  0008A0  24F3               	addwf	prodl,w,c
  1802  0008A2  6ED9               	movwf	fsr2l,c
  1803  0008A4  0E01               	movlw	high main@MoveTime
  1804  0008A6  20F4               	addwfc	prodh,w,c
  1805  0008A8  6EDA               	movwf	fsr2h,c
  1806  0008AA  50D6               	movf	4054,w,c	;volatile
  1807  0008AC  CFD7 F0CB          	movff	4055,??_main+2	;volatile
  1808  0008B0  0100               	movlb	0	; () banked
  1809  0008B2  6BCC               	clrf	(??_main+3)& (0+255),b
  1810  0008B4  C0CB  F0CC         	movff	??_main+2,??_main+3
  1811  0008B8  6BCB               	clrf	(??_main+2)& (0+255),b
  1812  0008BA  27CB               	addwf	(??_main+2)& (0+255),f,b
  1813  0008BC  0E00               	movlw	0
  1814  0008BE  23CC               	addwfc	(??_main+3)& (0+255),f,b
  1815  0008C0  50DE               	movf	postinc2,w,c
  1816  0008C2  5DCB               	subwf	(??_main+2)& (0+255),w,b
  1817  0008C4  51CC               	movf	(??_main+3)& (0+255),w,b
  1818  0008C6  0A80               	xorlw	128
  1819  0008C8  6FCD               	movwf	(??_main+4)& (0+255),b
  1820  0008CA  50DE               	movf	postinc2,w,c
  1821  0008CC  0A80               	xorlw	128
  1822  0008CE  59CD               	subwfb	(??_main+4)& (0+255),w,b
  1823  0008D0  A0D8               	btfss	status,0,c
  1824  0008D2  D7E2               	goto	l432
  1825  0008D4  D034               	goto	u3150
  1826  0008D6                     l430:
  1827                           
  1828                           ; BSR set to: 1
  1829                           ;main.c: 270: T0CONbits.TMR0ON=1;
  1830  0008D6  8ED5               	bsf	4053,7,c	;volatile
  1831                           
  1832                           ; BSR set to: 1
  1833                           ;main.c: 271: turnLeft(&mL,&mR,40);
  1834  0008D8  0ED0               	movlw	low main@mL
  1835  0008DA  0100               	movlb	0	; () banked
  1836  0008DC  6F77               	movwf	turnLeft@mL& (0+255),b
  1837  0008DE  0E01               	movlw	high main@mL
  1838  0008E0  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1839  0008E2  0ED9               	movlw	low main@mR
  1840  0008E4  6F79               	movwf	turnLeft@mR& (0+255),b
  1841  0008E6  0E01               	movlw	high main@mR
  1842  0008E8  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1843  0008EA  0E28               	movlw	40
  1844  0008EC  6F7B               	movwf	turnLeft@power& (0+255),b
  1845  0008EE  EC30  F00D         	call	_turnLeft	;wreg free
  1846  0008F2  0101               	movlb	1	; () banked
  1847  0008F4  51CF               	movf	main@Move& (0+255),w,b
  1848  0008F6  0D02               	mullw	2
  1849  0008F8  0E5A               	movlw	low main@MoveTime
  1850  0008FA  24F3               	addwf	prodl,w,c
  1851  0008FC  6ED9               	movwf	fsr2l,c
  1852  0008FE  0E01               	movlw	high main@MoveTime
  1853  000900  20F4               	addwfc	prodh,w,c
  1854  000902  6EDA               	movwf	fsr2h,c
  1855  000904  CFDE F0C9          	movff	postinc2,??_main
  1856  000908  CFDD F0CA          	movff	postdec2,??_main+1
  1857  00090C  0100               	movlb	0	; () banked
  1858  00090E  1FC9               	comf	??_main& (0+255),f,b
  1859  000910  1FCA               	comf	(??_main+1)& (0+255),f,b
  1860  000912  4BC9               	infsnz	??_main& (0+255),f,b
  1861  000914  2BCA               	incf	(??_main+1)& (0+255),f,b
  1862  000916  50D6               	movf	4054,w,c	;volatile
  1863  000918  CFD7 F0CB          	movff	4055,??_main+2	;volatile
  1864  00091C  6BCC               	clrf	(??_main+3)& (0+255),b
  1865  00091E  C0CB  F0CC         	movff	??_main+2,??_main+3
  1866  000922  6BCB               	clrf	(??_main+2)& (0+255),b
  1867  000924  27CB               	addwf	(??_main+2)& (0+255),f,b
  1868  000926  0E00               	movlw	0
  1869  000928  23CC               	addwfc	(??_main+3)& (0+255),f,b
  1870  00092A  51C9               	movf	??_main& (0+255),w,b
  1871  00092C  5DCB               	subwf	(??_main+2)& (0+255),w,b
  1872  00092E  51CC               	movf	(??_main+3)& (0+255),w,b
  1873  000930  0A80               	xorlw	128
  1874  000932  6FCD               	movwf	(??_main+4)& (0+255),b
  1875  000934  51CA               	movf	(??_main+1)& (0+255),w,b
  1876  000936  0A80               	xorlw	128
  1877  000938  59CD               	subwfb	(??_main+4)& (0+255),w,b
  1878  00093A  A0D8               	btfss	status,0,c
  1879  00093C  D7DA               	goto	l436
  1880  00093E                     u3150:
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 274: T0CONbits.TMR0ON=0;
  1884  00093E  9ED5               	bcf	4053,7,c	;volatile
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 275: }
  1888                           ;main.c: 276: } else if (MoveType[Move]==2) {
  1889  000940  D051               	goto	l441
  1890  000942                     l429:
  1891                           
  1892                           ; BSR set to: 0
  1893  000942  0101               	movlb	1	; () banked
  1894  000944  51CF               	movf	main@Move& (0+255),w,b
  1895  000946  0D01               	mullw	1
  1896  000948  0E28               	movlw	low main@MoveType
  1897  00094A  24F3               	addwf	prodl,w,c
  1898  00094C  6ED9               	movwf	fsr2l,c
  1899  00094E  0E01               	movlw	high main@MoveType
  1900  000950  20F4               	addwfc	prodh,w,c
  1901  000952  6EDA               	movwf	fsr2h,c
  1902  000954  0E02               	movlw	2
  1903  000956  18DE               	xorwf	postinc2,w,c
  1904  000958  A4D8               	btfss	status,2,c
  1905  00095A  D044               	goto	l441
  1906                           
  1907                           ; BSR set to: 1
  1908                           ;main.c: 277: if (MoveTime[Move]>0) {
  1909  00095C  51CF               	movf	main@Move& (0+255),w,b
  1910  00095E  0D02               	mullw	2
  1911  000960  0E5A               	movlw	low main@MoveTime
  1912  000962  24F3               	addwf	prodl,w,c
  1913  000964  6ED9               	movwf	fsr2l,c
  1914  000966  0E01               	movlw	high main@MoveTime
  1915  000968  20F4               	addwfc	prodh,w,c
  1916  00096A  6EDA               	movwf	fsr2h,c
  1917  00096C  0E01               	movlw	1
  1918  00096E  BEDB               	btfsc	plusw2,7,c
  1919  000970  D020               	goto	l440
  1920  000972  0E01               	movlw	1
  1921  000974  50DB               	movf	plusw2,w,c
  1922  000976  E103               	bnz	u3170
  1923  000978  04DE               	decf	postinc2,w,c
  1924  00097A  A0D8               	btfss	status,0,c
  1925  00097C  D01A               	goto	l440
  1926  00097E                     u3170:
  1927                           
  1928                           ; BSR set to: 1
  1929                           ;main.c: 278: turnRight(&mL,&mR,100);
  1930  00097E  0ED0               	movlw	low main@mL
  1931  000980  0100               	movlb	0	; () banked
  1932  000982  6F77               	movwf	turnRight@mL& (0+255),b
  1933  000984  0E01               	movlw	high main@mL
  1934  000986  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1935  000988  0ED9               	movlw	low main@mR
  1936  00098A  6F79               	movwf	turnRight@mR& (0+255),b
  1937  00098C  0E01               	movlw	high main@mR
  1938  00098E  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1939  000990  0E64               	movlw	100
  1940  000992  6F7B               	movwf	turnRight@power& (0+255),b
  1941  000994  EC12  F00D         	call	_turnRight	;wreg free
  1942                           
  1943                           ;main.c: 279: delay_tenth_s(MoveTime[Move]);
  1944  000998  0101               	movlb	1	; () banked
  1945  00099A  51CF               	movf	main@Move& (0+255),w,b
  1946  00099C  0D02               	mullw	2
  1947  00099E  0E5A               	movlw	low main@MoveTime
  1948  0009A0  24F3               	addwf	prodl,w,c
  1949  0009A2  6ED9               	movwf	fsr2l,c
  1950  0009A4  0E01               	movlw	high main@MoveTime
  1951  0009A6  20F4               	addwfc	prodh,w,c
  1952  0009A8  6EDA               	movwf	fsr2h,c
  1953  0009AA  50DF               	movf	indf2,w,c
  1954  0009AC  EC4E  F00D         	call	_delay_tenth_s
  1955                           
  1956                           ;main.c: 280: } else {
  1957  0009B0  D019               	goto	l441
  1958  0009B2                     l440:
  1959                           
  1960                           ;main.c: 281: turnLeft(&mL,&mR,100);
  1961  0009B2  0ED0               	movlw	low main@mL
  1962  0009B4  0100               	movlb	0	; () banked
  1963  0009B6  6F77               	movwf	turnLeft@mL& (0+255),b
  1964  0009B8  0E01               	movlw	high main@mL
  1965  0009BA  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1966  0009BC  0ED9               	movlw	low main@mR
  1967  0009BE  6F79               	movwf	turnLeft@mR& (0+255),b
  1968  0009C0  0E01               	movlw	high main@mR
  1969  0009C2  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1970  0009C4  0E64               	movlw	100
  1971  0009C6  6F7B               	movwf	turnLeft@power& (0+255),b
  1972  0009C8  EC30  F00D         	call	_turnLeft	;wreg free
  1973                           
  1974                           ;main.c: 282: delay_tenth_s(MoveTime[Move]);
  1975  0009CC  0101               	movlb	1	; () banked
  1976  0009CE  51CF               	movf	main@Move& (0+255),w,b
  1977  0009D0  0D02               	mullw	2
  1978  0009D2  0E5A               	movlw	low main@MoveTime
  1979  0009D4  24F3               	addwf	prodl,w,c
  1980  0009D6  6ED9               	movwf	fsr2l,c
  1981  0009D8  0E01               	movlw	high main@MoveTime
  1982  0009DA  20F4               	addwfc	prodh,w,c
  1983  0009DC  6EDA               	movwf	fsr2h,c
  1984  0009DE  50DF               	movf	indf2,w,c
  1985  0009E0  EC4E  F00D         	call	_delay_tenth_s
  1986  0009E4                     l441:
  1987  0009E4  0101               	movlb	1	; () banked
  1988  0009E6  07CF               	decf	main@Move& (0+255),f,b
  1989  0009E8  D6F4               	goto	L3
  1990  0009EA                     u3180:
  1991                           
  1992                           ; BSR set to: 1
  1993                           ;main.c: 283: }
  1994                           ;main.c: 284: }
  1995                           ;main.c: 285: }
  1996                           ;main.c: 286: stop(&mL,&mR);
  1997                           
  1998                           ; BSR set to: 1
  1999  0009EA  0ED0               	movlw	low main@mL
  2000  0009EC  0100               	movlb	0	; () banked
  2001  0009EE  6F71               	movwf	stop@mL& (0+255),b
  2002  0009F0  0E01               	movlw	high main@mL
  2003  0009F2  6F72               	movwf	(stop@mL+1)& (0+255),b
  2004  0009F4  0ED9               	movlw	low main@mR
  2005  0009F6  6F73               	movwf	stop@mR& (0+255),b
  2006  0009F8  0E01               	movlw	high main@mR
  2007  0009FA  6F74               	movwf	(stop@mR+1)& (0+255),b
  2008  0009FC  EC0B  F00B         	call	_stop	;wreg free
  2009  000A00                     l3660:
  2010                           
  2011                           ;main.c: 287: mode=-1;
  2012  000A00  6832               	setf	_mode,c	;volatile
  2013  000A02                     l3662:
  2014                           
  2015                           ;main.c: 290: }
  2016  000A02  5032               	movf	_mode,w,c	;volatile
  2017                           
  2018                           ; Switch size 1, requested type "space"
  2019                           ; Number of cases is 5, Range of values is 0 to 255
  2020                           ; switch strategies available:
  2021                           ; Name         Instructions Cycles
  2022                           ; simple_byte           16     9 (average)
  2023                           ;	Chosen strategy is simple_byte
  2024  000A04  0A00               	xorlw	0	; case 0
  2025  000A06  B4D8               	btfsc	status,2,c
  2026  000A08  D568               	goto	l405
  2027  000A0A  0A01               	xorlw	1	; case 1
  2028  000A0C  B4D8               	btfsc	status,2,c
  2029  000A0E  D58A               	goto	l406
  2030  000A10  0A03               	xorlw	3	; case 2
  2031  000A12  B4D8               	btfsc	status,2,c
  2032  000A14  D60D               	goto	l414
  2033  000A16  0A01               	xorlw	1	; case 3
  2034  000A18  B4D8               	btfsc	status,2,c
  2035  000A1A  D6C6               	goto	l424
  2036  000A1C  0AFC               	xorlw	252	; case 255
  2037  000A1E  B4D8               	btfsc	status,2,c
  2038  000A20  D4ED               	goto	l401
  2039  000A22  D7EF               	goto	l3662
  2040  000A24                     __end_of_main:
  2041                           	opt stack 0
  2042                           tblptru	equ	0xFF8
  2043                           prodh	equ	0xFF4
  2044                           prodl	equ	0xFF3
  2045                           intcon	equ	0xFF2
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           indf1	equ	0xFE7
  2049                           plusw1	equ	0xFE3
  2050                           fsr1h	equ	0xFE2
  2051                           fsr1l	equ	0xFE1
  2052                           indf2	equ	0xFDF
  2053                           postinc2	equ	0xFDE
  2054                           postdec2	equ	0xFDD
  2055                           plusw2	equ	0xFDB
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _initTimer *****************
  2061 ;; Defined at:
  2062 ;;		line 8 in file "Movement.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;		None
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;		None
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  1    wreg      void 
  2069 ;; Registers used:
  2070 ;;		None
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2076 ;;      Params:         0       0       0       0
  2077 ;;      Locals:         0       0       0       0
  2078 ;;      Temps:          0       0       0       0
  2079 ;;      Totals:         0       0       0       0
  2080 ;;Total ram usage:        0 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    3
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_main
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text1
  2091  001C82                     __ptext1:
  2092                           	opt stack 0
  2093  001C82                     _initTimer:
  2094                           	opt stack 27
  2095                           
  2096                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2097                           
  2098                           ;incstack = 0
  2099  001C82  9ED5               	bcf	4053,7,c	;volatile
  2100                           
  2101                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2102  001C84  9CD5               	bcf	4053,6,c	;volatile
  2103                           
  2104                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2105  001C86  9AD5               	bcf	4053,5,c	;volatile
  2106                           
  2107                           ;Movement.c: 13: T0CONbits.PSA=0;
  2108  001C88  96D5               	bcf	4053,3,c	;volatile
  2109                           
  2110                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2111  001C8A  80D5               	bsf	4053,0,c	;volatile
  2112  001C8C  82D5               	bsf	4053,1,c	;volatile
  2113  001C8E  84D5               	bsf	4053,2,c	;volatile
  2114                           
  2115                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2116  001C90  9AF2               	bcf	intcon,5,c	;volatile
  2117  001C92  0012               	return		;funcret
  2118  001C94                     __end_of_initTimer:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf1	equ	0xFE7
  2127                           plusw1	equ	0xFE3
  2128                           fsr1h	equ	0xFE2
  2129                           fsr1l	equ	0xFE1
  2130                           indf2	equ	0xFDF
  2131                           postinc2	equ	0xFDE
  2132                           postdec2	equ	0xFDD
  2133                           plusw2	equ	0xFDB
  2134                           fsr2h	equ	0xFDA
  2135                           fsr2l	equ	0xFD9
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _initRFID *****************
  2139 ;; Defined at:
  2140 ;;		line 8 in file "RFID_Reader.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;		None
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;		None
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      void 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2154 ;;      Params:         0       0       0       0
  2155 ;;      Locals:         0       0       0       0
  2156 ;;      Temps:          0       0       0       0
  2157 ;;      Totals:         0       0       0       0
  2158 ;;Total ram usage:        0 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    3
  2161 ;; This function calls:
  2162 ;;		Nothing
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text2
  2169  001C66                     __ptext2:
  2170                           	opt stack 0
  2171  001C66                     _initRFID:
  2172                           	opt stack 27
  2173                           
  2174                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2175                           
  2176                           ;incstack = 0
  2177  001C66  5094               	movf	3988,w,c	;volatile
  2178  001C68  09C0               	iorlw	192
  2179  001C6A  6E94               	movwf	3988,c	;volatile
  2180                           
  2181                           ;RFID_Reader.c: 13: SPBRG=205;
  2182  001C6C  0ECD               	movlw	205
  2183  001C6E  6EAF               	movwf	4015,c	;volatile
  2184                           
  2185                           ;RFID_Reader.c: 14: SPBRGH=0;
  2186  001C70  0E00               	movlw	0
  2187  001C72  6EB0               	movwf	4016,c	;volatile
  2188                           
  2189                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2190  001C74  86AA               	bsf	4010,3,c	;volatile
  2191                           
  2192                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2193  001C76  84AC               	bsf	4012,2,c	;volatile
  2194                           
  2195                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2196  001C78  88AB               	bsf	4011,4,c	;volatile
  2197                           
  2198                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2199  001C7A  8EAB               	bsf	4011,7,c	;volatile
  2200                           
  2201                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2202  001C7C  98AC               	bcf	4012,4,c	;volatile
  2203                           
  2204                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2205  001C7E  9CAB               	bcf	4011,6,c	;volatile
  2206  001C80  0012               	return		;funcret
  2207  001C82                     __end_of_initRFID:
  2208                           	opt stack 0
  2209                           tblptru	equ	0xFF8
  2210                           prodh	equ	0xFF4
  2211                           prodl	equ	0xFF3
  2212                           intcon	equ	0xFF2
  2213                           postinc0	equ	0xFEE
  2214                           wreg	equ	0xFE8
  2215                           indf1	equ	0xFE7
  2216                           plusw1	equ	0xFE3
  2217                           fsr1h	equ	0xFE2
  2218                           fsr1l	equ	0xFE1
  2219                           indf2	equ	0xFDF
  2220                           postinc2	equ	0xFDE
  2221                           postdec2	equ	0xFDD
  2222                           plusw2	equ	0xFDB
  2223                           fsr2h	equ	0xFDA
  2224                           fsr2l	equ	0xFD9
  2225                           status	equ	0xFD8
  2226                           
  2227 ;; *************** function _initMotorPWM *****************
  2228 ;; Defined at:
  2229 ;;		line 4 in file "dc_motor.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;		None
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, status,2
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2243 ;;      Params:         0       0       0       0
  2244 ;;      Locals:         0       0       0       0
  2245 ;;      Temps:          0       0       0       0
  2246 ;;      Totals:         0       0       0       0
  2247 ;;Total ram usage:        0 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; Hardware stack levels required when called:    3
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text3
  2258  001B78                     __ptext3:
  2259                           	opt stack 0
  2260  001B78                     _initMotorPWM:
  2261                           	opt stack 27
  2262                           
  2263                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2264                           
  2265                           ;incstack = 0
  2266  001B78  0E00               	movlw	0
  2267  001B7A  6E7F               	movwf	3967,c	;volatile
  2268                           
  2269                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2270  001B7C  0E80               	movlw	128
  2271  001B7E  6E7E               	movwf	3966,c	;volatile
  2272                           
  2273                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2274  001B80  0E6F               	movlw	111
  2275  001B82  6E6F               	movwf	3951,c	;volatile
  2276                           
  2277                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2278  001B84  0E00               	movlw	0
  2279  001B86  6E6E               	movwf	3950,c	;volatile
  2280                           
  2281                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2282  001B88  0EC7               	movlw	199
  2283  001B8A  6E7B               	movwf	3963,c	;volatile
  2284                           
  2285                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2286  001B8C  0E00               	movlw	0
  2287  001B8E  6E7A               	movwf	3962,c	;volatile
  2288                           
  2289                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2290  001B90  0E00               	movlw	0
  2291  001B92  6E79               	movwf	3961,c	;volatile
  2292                           
  2293                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2294  001B94  0E00               	movlw	0
  2295  001B96  6E78               	movwf	3960,c	;volatile
  2296                           
  2297                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2298  001B98  0E00               	movlw	0
  2299  001B9A  6E77               	movwf	3959,c	;volatile
  2300                           
  2301                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2302  001B9C  0E00               	movlw	0
  2303  001B9E  6E76               	movwf	3958,c	;volatile
  2304                           
  2305                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2306  001BA0  9093               	bcf	3987,0,c	;volatile
  2307                           
  2308                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2309  001BA2  9293               	bcf	3987,1,c	;volatile
  2310                           
  2311                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2312  001BA4  9493               	bcf	3987,2,c	;volatile
  2313                           
  2314                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2315  001BA6  9693               	bcf	3987,3,c	;volatile
  2316  001BA8  0012               	return		;funcret
  2317  001BAA                     __end_of_initMotorPWM:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           prodh	equ	0xFF4
  2321                           prodl	equ	0xFF3
  2322                           intcon	equ	0xFF2
  2323                           postinc0	equ	0xFEE
  2324                           wreg	equ	0xFE8
  2325                           indf1	equ	0xFE7
  2326                           plusw1	equ	0xFE3
  2327                           fsr1h	equ	0xFE2
  2328                           fsr1l	equ	0xFE1
  2329                           indf2	equ	0xFDF
  2330                           postinc2	equ	0xFDE
  2331                           postdec2	equ	0xFDD
  2332                           plusw2	equ	0xFDB
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _initLCD *****************
  2338 ;; Defined at:
  2339 ;;		line 38 in file "LCD.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;		None
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, status,2, status,0, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2353 ;;      Params:         0       0       0       0
  2354 ;;      Locals:         0       0       0       0
  2355 ;;      Temps:          0       1       0       0
  2356 ;;      Totals:         0       1       0       0
  2357 ;;Total ram usage:        1 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    6
  2360 ;; This function calls:
  2361 ;;		_LCDout
  2362 ;;		_SendLCD
  2363 ;; This function is called by:
  2364 ;;		_main
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text4
  2369  0014A0                     __ptext4:
  2370                           	opt stack 0
  2371  0014A0                     _initLCD:
  2372                           	opt stack 24
  2373                           
  2374                           ;LCD.c: 44: TRISAbits.RA6=0;
  2375                           
  2376                           ;incstack = 0
  2377  0014A0  9C92               	bcf	3986,6,c	;volatile
  2378                           
  2379                           ;LCD.c: 45: TRISCbits.RC0=0;
  2380  0014A2  9094               	bcf	3988,0,c	;volatile
  2381                           
  2382                           ;LCD.c: 46: TRISCbits.RC1=0;
  2383  0014A4  9294               	bcf	3988,1,c	;volatile
  2384                           
  2385                           ;LCD.c: 47: TRISCbits.RC2=0;
  2386  0014A6  9494               	bcf	3988,2,c	;volatile
  2387                           
  2388                           ;LCD.c: 48: TRISDbits.RD0=0;
  2389  0014A8  9095               	bcf	3989,0,c	;volatile
  2390                           
  2391                           ;LCD.c: 49: TRISDbits.RD1=0;
  2392  0014AA  9295               	bcf	3989,1,c	;volatile
  2393                           
  2394                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2395  0014AC  0E27               	movlw	39
  2396  0014AE  0100               	movlb	0	; () banked
  2397  0014B0  6F60               	movwf	??_initLCD& (0+255),b
  2398  0014B2  0EF5               	movlw	245
  2399  0014B4                     u3217:
  2400  0014B4  2EE8               	decfsz	wreg,f,c
  2401  0014B6  D7FE               	bra	u3217
  2402  0014B8  2F60               	decfsz	??_initLCD& (0+255),f,b
  2403  0014BA  D7FC               	bra	u3217
  2404                           
  2405                           ;LCD.c: 52: LCDout(0b0011);
  2406  0014BC  0E03               	movlw	3
  2407  0014BE  ECED  F009         	call	_LCDout
  2408                           
  2409                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2410  0014C2  0E0D               	movlw	13
  2411  0014C4  0100               	movlb	0	; () banked
  2412  0014C6  6F60               	movwf	??_initLCD& (0+255),b
  2413  0014C8  0EFB               	movlw	251
  2414  0014CA                     u3227:
  2415  0014CA  2EE8               	decfsz	wreg,f,c
  2416  0014CC  D7FE               	bra	u3227
  2417  0014CE  2F60               	decfsz	??_initLCD& (0+255),f,b
  2418  0014D0  D7FC               	bra	u3227
  2419  0014D2  D000               	nop2	
  2420                           
  2421                           ;LCD.c: 54: LCDout(0b0011);
  2422  0014D4  0E03               	movlw	3
  2423  0014D6  ECED  F009         	call	_LCDout
  2424                           
  2425                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2426  0014DA  0E85               	movlw	133
  2427  0014DC                     u3237:
  2428  0014DC  2EE8               	decfsz	wreg,f,c
  2429  0014DE  D7FE               	bra	u3237
  2430  0014E0  F000               	nop	
  2431                           
  2432                           ;LCD.c: 56: LCDout(0b0011);
  2433  0014E2  0E03               	movlw	3
  2434  0014E4  ECED  F009         	call	_LCDout
  2435                           
  2436                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2437  0014E8  0E21               	movlw	33
  2438  0014EA                     u3247:
  2439  0014EA  2EE8               	decfsz	wreg,f,c
  2440  0014EC  D7FE               	bra	u3247
  2441  0014EE  F000               	nop	
  2442                           
  2443                           ;LCD.c: 58: LCDout(0b0010);
  2444  0014F0  0E02               	movlw	2
  2445  0014F2  ECED  F009         	call	_LCDout
  2446                           
  2447                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2448  0014F6  0E21               	movlw	33
  2449  0014F8                     u3257:
  2450  0014F8  2EE8               	decfsz	wreg,f,c
  2451  0014FA  D7FE               	bra	u3257
  2452  0014FC  F000               	nop	
  2453                           
  2454                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2455  0014FE  0E00               	movlw	0
  2456  001500  6E30               	movwf	SendLCD@type,c
  2457  001502  0E28               	movlw	40
  2458  001504  ECD5  F00D         	call	_SendLCD
  2459                           
  2460                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2461  001508  0E21               	movlw	33
  2462  00150A                     u3267:
  2463  00150A  2EE8               	decfsz	wreg,f,c
  2464  00150C  D7FE               	bra	u3267
  2465  00150E  F000               	nop	
  2466                           
  2467                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2468  001510  0E00               	movlw	0
  2469  001512  6E30               	movwf	SendLCD@type,c
  2470  001514  0E08               	movlw	8
  2471  001516  ECD5  F00D         	call	_SendLCD
  2472                           
  2473                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2474  00151A  0E21               	movlw	33
  2475  00151C                     u3277:
  2476  00151C  2EE8               	decfsz	wreg,f,c
  2477  00151E  D7FE               	bra	u3277
  2478  001520  F000               	nop	
  2479                           
  2480                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2481  001522  0E00               	movlw	0
  2482  001524  6E30               	movwf	SendLCD@type,c
  2483  001526  0E01               	movlw	1
  2484  001528  ECD5  F00D         	call	_SendLCD
  2485                           
  2486                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2487  00152C  0E0D               	movlw	13
  2488  00152E  0100               	movlb	0	; () banked
  2489  001530  6F60               	movwf	??_initLCD& (0+255),b
  2490  001532  0EFB               	movlw	251
  2491  001534                     u3287:
  2492  001534  2EE8               	decfsz	wreg,f,c
  2493  001536  D7FE               	bra	u3287
  2494  001538  2F60               	decfsz	??_initLCD& (0+255),f,b
  2495  00153A  D7FC               	bra	u3287
  2496  00153C  D000               	nop2	
  2497                           
  2498                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2499  00153E  0E00               	movlw	0
  2500  001540  6E30               	movwf	SendLCD@type,c
  2501  001542  0E06               	movlw	6
  2502  001544  ECD5  F00D         	call	_SendLCD
  2503                           
  2504                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2505  001548  0E21               	movlw	33
  2506  00154A                     u3297:
  2507  00154A  2EE8               	decfsz	wreg,f,c
  2508  00154C  D7FE               	bra	u3297
  2509  00154E  F000               	nop	
  2510                           
  2511                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2512  001550  0E00               	movlw	0
  2513  001552  6E30               	movwf	SendLCD@type,c
  2514  001554  0E0C               	movlw	12
  2515  001556  ECD5  F00D         	call	_SendLCD
  2516                           
  2517                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2518  00155A  0E21               	movlw	33
  2519  00155C                     u3307:
  2520  00155C  2EE8               	decfsz	wreg,f,c
  2521  00155E  D7FE               	bra	u3307
  2522  001560  F000               	nop	
  2523  001562  0012               	return		;funcret
  2524  001564                     __end_of_initLCD:
  2525                           	opt stack 0
  2526                           tblptru	equ	0xFF8
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon	equ	0xFF2
  2530                           postinc0	equ	0xFEE
  2531                           wreg	equ	0xFE8
  2532                           indf1	equ	0xFE7
  2533                           plusw1	equ	0xFE3
  2534                           fsr1h	equ	0xFE2
  2535                           fsr1l	equ	0xFE1
  2536                           indf2	equ	0xFDF
  2537                           postinc2	equ	0xFDE
  2538                           postdec2	equ	0xFDD
  2539                           plusw2	equ	0xFDB
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _initIR *****************
  2545 ;; Defined at:
  2546 ;;		line 30 in file "IR_Reading.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;		None
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;		None
  2551 ;; Return value:  Size  Location     Type
  2552 ;;                  1    wreg      void 
  2553 ;; Registers used:
  2554 ;;		wreg, status,2
  2555 ;; Tracked objects:
  2556 ;;		On entry : 0/0
  2557 ;;		On exit  : 0/0
  2558 ;;		Unchanged: 0/0
  2559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2560 ;;      Params:         0       0       0       0
  2561 ;;      Locals:         0       0       0       0
  2562 ;;      Temps:          0       0       0       0
  2563 ;;      Totals:         0       0       0       0
  2564 ;;Total ram usage:        0 bytes
  2565 ;; Hardware stack levels used:    1
  2566 ;; Hardware stack levels required when called:    3
  2567 ;; This function calls:
  2568 ;;		Nothing
  2569 ;; This function is called by:
  2570 ;;		_main
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text5
  2575  001C26                     __ptext5:
  2576                           	opt stack 0
  2577  001C26                     _initIR:
  2578                           	opt stack 27
  2579                           
  2580                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2581                           
  2582                           ;incstack = 0
  2583  001C26  9489               	bcf	3977,2,c	;volatile
  2584                           
  2585                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2586  001C28  9689               	bcf	3977,3,c	;volatile
  2587                           
  2588                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2589  001C2A  8492               	bsf	3986,2,c	;volatile
  2590                           
  2591                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2592  001C2C  8692               	bsf	3986,3,c	;volatile
  2593                           
  2594                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2595  001C2E  94B8               	bcf	4024,2,c	;volatile
  2596                           
  2597                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2598  001C30  96B8               	bcf	4024,3,c	;volatile
  2599                           
  2600                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2601  001C32  9CB8               	bcf	4024,6,c	;volatile
  2602                           
  2603                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2604  001C34  9EB8               	bcf	4024,7,c	;volatile
  2605                           
  2606                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2607  001C36  0E06               	movlw	6
  2608  001C38  6E63               	movwf	3939,c	;volatile
  2609                           
  2610                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2611  001C3A  0E06               	movlw	6
  2612  001C3C  6E62               	movwf	3938,c	;volatile
  2613                           
  2614                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2615  001C3E  9096               	bcf	3990,0,c	;volatile
  2616                           
  2617                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2618  001C40  9296               	bcf	3990,1,c	;volatile
  2619                           
  2620                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2621  001C42  0E59               	movlw	89
  2622  001C44  6EB7               	movwf	4023,c	;volatile
  2623  001C46  0012               	return		;funcret
  2624  001C48                     __end_of_initIR:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           prodh	equ	0xFF4
  2628                           prodl	equ	0xFF3
  2629                           intcon	equ	0xFF2
  2630                           postinc0	equ	0xFEE
  2631                           wreg	equ	0xFE8
  2632                           indf1	equ	0xFE7
  2633                           plusw1	equ	0xFE3
  2634                           fsr1h	equ	0xFE2
  2635                           fsr1l	equ	0xFE1
  2636                           indf2	equ	0xFDF
  2637                           postinc2	equ	0xFDE
  2638                           postdec2	equ	0xFDD
  2639                           plusw2	equ	0xFDB
  2640                           fsr2h	equ	0xFDA
  2641                           fsr2l	equ	0xFD9
  2642                           status	equ	0xFD8
  2643                           
  2644 ;; *************** function _fullSpeedBack *****************
  2645 ;; Defined at:
  2646 ;;		line 125 in file "dc_motor.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  2649 ;;		 -> main@mL(9), 
  2650 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  2651 ;;		 -> main@mR(9), 
  2652 ;;  power           1   27[BANK0 ] unsigned char 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2664 ;;      Params:         0       5       0       0
  2665 ;;      Locals:         0       0       0       0
  2666 ;;      Temps:          0       0       0       0
  2667 ;;      Totals:         0       5       0       0
  2668 ;;Total ram usage:        5 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    6
  2671 ;; This function calls:
  2672 ;;		_fullSpeedAhead
  2673 ;; This function is called by:
  2674 ;;		_main
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text6
  2679  0019E8                     __ptext6:
  2680                           	opt stack 0
  2681  0019E8                     _fullSpeedBack:
  2682                           	opt stack 24
  2683                           
  2684                           ;dc_motor.c: 128: mL->direction=0;
  2685                           
  2686                           ;incstack = 0
  2687  0019E8  0100               	movlb	0	; () banked
  2688  0019EA  EE20 F001          	lfsr	2,1
  2689  0019EE  5177               	movf	fullSpeedBack@mL& (0+255),w,b
  2690  0019F0  26D9               	addwf	fsr2l,f,c
  2691  0019F2  5178               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2692  0019F4  22DA               	addwfc	fsr2h,f,c
  2693  0019F6  0E00               	movlw	0
  2694  0019F8  6EDF               	movwf	indf2,c
  2695                           
  2696                           ;dc_motor.c: 129: mR->direction=0;
  2697  0019FA  EE20 F001          	lfsr	2,1
  2698  0019FE  5179               	movf	fullSpeedBack@mR& (0+255),w,b
  2699  001A00  26D9               	addwf	fsr2l,f,c
  2700  001A02  517A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2701  001A04  22DA               	addwfc	fsr2h,f,c
  2702  001A06  0E00               	movlw	0
  2703  001A08  6EDF               	movwf	indf2,c
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2707  001A0A  C077  F071         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2708  001A0E  C078  F072         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2709  001A12  C079  F073         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2710  001A16  C07A  F074         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2711  001A1A  C07B  F075         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2712  001A1E  EC97  F00B         	call	_fullSpeedAhead	;wreg free
  2713  001A22  0012               	return		;funcret
  2714  001A24                     __end_of_fullSpeedBack:
  2715                           	opt stack 0
  2716                           tblptru	equ	0xFF8
  2717                           prodh	equ	0xFF4
  2718                           prodl	equ	0xFF3
  2719                           intcon	equ	0xFF2
  2720                           postinc0	equ	0xFEE
  2721                           wreg	equ	0xFE8
  2722                           indf1	equ	0xFE7
  2723                           plusw1	equ	0xFE3
  2724                           fsr1h	equ	0xFE2
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           postdec2	equ	0xFDD
  2729                           plusw2	equ	0xFDB
  2730                           fsr2h	equ	0xFDA
  2731                           fsr2l	equ	0xFD9
  2732                           status	equ	0xFD8
  2733                           
  2734 ;; *************** function _enableSensor *****************
  2735 ;; Defined at:
  2736 ;;		line 106 in file "IR_Reading.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  sensor          1    wreg     unsigned char 
  2739 ;;  status          1   43[COMRAM] unsigned char 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  sensor          1   44[COMRAM] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      void 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2751 ;;      Params:         1       0       0       0
  2752 ;;      Locals:         1       0       0       0
  2753 ;;      Temps:          0       0       0       0
  2754 ;;      Totals:         2       0       0       0
  2755 ;;Total ram usage:        2 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    3
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_main
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           	psect	text7
  2766  001BDA                     __ptext7:
  2767                           	opt stack 0
  2768  001BDA                     _enableSensor:
  2769                           	opt stack 27
  2770                           
  2771                           ;incstack = 0
  2772                           ;enableSensor@sensor stored from wreg
  2773  001BDA  6E2D               	movwf	enableSensor@sensor,c
  2774                           
  2775                           ;IR_Reading.c: 108: if (sensor==0){
  2776  001BDC  502D               	movf	enableSensor@sensor,w,c
  2777  001BDE  A4D8               	btfss	status,2,c
  2778  001BE0  D006               	goto	l115
  2779                           
  2780                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2781  001BE2  B02C               	btfsc	enableSensor@status,0,c
  2782  001BE4  D002               	bra	u1835
  2783  001BE6  908D               	bcf	3981,0,c	;volatile
  2784  001BE8  D001               	bra	u1836
  2785  001BEA                     u1835:
  2786  001BEA  808D               	bsf	3981,0,c	;volatile
  2787  001BEC                     u1836:
  2788                           
  2789                           ;IR_Reading.c: 110: } else if (sensor==1){
  2790  001BEC  0012               	return	
  2791  001BEE                     l115:
  2792  001BEE  042D               	decf	enableSensor@sensor,w,c
  2793  001BF0  A4D8               	btfss	status,2,c
  2794  001BF2  0012               	return	
  2795                           
  2796                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2797  001BF4  B02C               	btfsc	enableSensor@status,0,c
  2798  001BF6  D002               	bra	u1855
  2799  001BF8  928D               	bcf	3981,1,c	;volatile
  2800  001BFA  D001               	bra	u1856
  2801  001BFC                     u1855:
  2802  001BFC  828D               	bsf	3981,1,c	;volatile
  2803  001BFE                     u1856:
  2804  001BFE  0012               	return	
  2805  001C00                     __end_of_enableSensor:
  2806                           	opt stack 0
  2807                           tblptru	equ	0xFF8
  2808                           prodh	equ	0xFF4
  2809                           prodl	equ	0xFF3
  2810                           intcon	equ	0xFF2
  2811                           postinc0	equ	0xFEE
  2812                           wreg	equ	0xFE8
  2813                           indf1	equ	0xFE7
  2814                           plusw1	equ	0xFE3
  2815                           fsr1h	equ	0xFE2
  2816                           fsr1l	equ	0xFE1
  2817                           indf2	equ	0xFDF
  2818                           postinc2	equ	0xFDE
  2819                           postdec2	equ	0xFDD
  2820                           plusw2	equ	0xFDB
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _VerifySignal *****************
  2826 ;; Defined at:
  2827 ;;		line 58 in file "RFID_Reader.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  Signal          2   43[COMRAM] PTR unsigned char 
  2830 ;;		 -> ReceivedString(16), 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  ptr             3    0        PTR unsigned char 
  2833 ;;  hexByte         2    2[BANK0 ] unsigned int 
  2834 ;;  checksum        1    1[BANK0 ] unsigned char 
  2835 ;;  i               1    0[BANK0 ] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      unsigned char 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2845 ;;      Params:         2       0       0       0
  2846 ;;      Locals:         0       4       0       0
  2847 ;;      Temps:          4       0       0       0
  2848 ;;      Totals:         6       4       0       0
  2849 ;;Total ram usage:       10 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    3
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_main
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text8
  2860  0018F6                     __ptext8:
  2861                           	opt stack 0
  2862  0018F6                     _VerifySignal:
  2863                           	opt stack 27
  2864                           
  2865                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2866                           
  2867                           ;incstack = 0
  2868  0018F6  0E00               	movlw	0
  2869  0018F8  0100               	movlb	0	; () banked
  2870  0018FA  6F61               	movwf	VerifySignal@checksum& (0+255),b
  2871                           
  2872                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2873  0018FC  0E00               	movlw	0
  2874  0018FE  6F63               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2875  001900  0E00               	movlw	0
  2876  001902  6F62               	movwf	VerifySignal@hexByte& (0+255),b
  2877                           
  2878                           ;RFID_Reader.c: 61: unsigned char i=0;
  2879  001904  0E00               	movlw	0
  2880  001906  6F60               	movwf	VerifySignal@i& (0+255),b
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2884                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2885  001908  EE20 F004          	lfsr	2,4
  2886  00190C  502C               	movf	VerifySignal@Signal,w,c
  2887  00190E  26D9               	addwf	fsr2l,f,c
  2888  001910  502D               	movf	VerifySignal@Signal+1,w,c
  2889  001912  22DA               	addwfc	fsr2h,f,c
  2890  001914  50DF               	movf	indf2,w,c
  2891  001916  6E2E               	movwf	??_VerifySignal& (0+255),c
  2892  001918  EE20 F003          	lfsr	2,3
  2893  00191C  502C               	movf	VerifySignal@Signal,w,c
  2894  00191E  26D9               	addwf	fsr2l,f,c
  2895  001920  502D               	movf	VerifySignal@Signal+1,w,c
  2896  001922  22DA               	addwfc	fsr2h,f,c
  2897  001924  50DF               	movf	indf2,w,c
  2898  001926  6E2F               	movwf	(??_VerifySignal+1)& (0+255),c
  2899  001928  502F               	movf	??_VerifySignal+1,w,c
  2900  00192A  6E31               	movwf	(??_VerifySignal+3)& (0+255),c
  2901  00192C  6A30               	clrf	(??_VerifySignal+2)& (0+255),c
  2902  00192E  502E               	movf	??_VerifySignal,w,c
  2903  001930  2430               	addwf	??_VerifySignal+2,w,c
  2904  001932  6F62               	movwf	VerifySignal@hexByte& (0+255),b
  2905  001934  0E00               	movlw	0
  2906  001936  2031               	addwfc	??_VerifySignal+3,w,c
  2907  001938  6F63               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2911  00193A  EE20 F002          	lfsr	2,2
  2912  00193E  502C               	movf	VerifySignal@Signal,w,c
  2913  001940  26D9               	addwf	fsr2l,f,c
  2914  001942  502D               	movf	VerifySignal@Signal+1,w,c
  2915  001944  22DA               	addwfc	fsr2h,f,c
  2916  001946  50DF               	movf	indf2,w,c
  2917  001948  1962               	xorwf	VerifySignal@hexByte& (0+255),w,b
  2918  00194A  6F61               	movwf	VerifySignal@checksum& (0+255),b
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;RFID_Reader.c: 75: return 1;
  2922  00194C  0E01               	movlw	1
  2923  00194E  0012               	return	
  2924  001950                     __end_of_VerifySignal:
  2925                           	opt stack 0
  2926                           tblptru	equ	0xFF8
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           postinc0	equ	0xFEE
  2931                           wreg	equ	0xFE8
  2932                           indf1	equ	0xFE7
  2933                           plusw1	equ	0xFE3
  2934                           fsr1h	equ	0xFE2
  2935                           fsr1l	equ	0xFE1
  2936                           indf2	equ	0xFDF
  2937                           postinc2	equ	0xFDE
  2938                           postdec2	equ	0xFDD
  2939                           plusw2	equ	0xFDB
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _ScanWithRange *****************
  2945 ;; Defined at:
  2946 ;;		line 98 in file "Movement.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  2949 ;;		 -> main@mL(9), 
  2950 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  2951 ;;		 -> main@mR(9), 
  2952 ;;  loops           2   32[BANK0 ] int 
  2953 ;;  MoveTime        2   34[BANK0 ] PTR int 
  2954 ;;		 -> main@MoveTime(100), 
  2955 ;;  Move            2   36[BANK0 ] PTR unsigned char 
  2956 ;;		 -> main@Move(1), 
  2957 ;;  MoveType        2   38[BANK0 ] PTR unsigned char 
  2958 ;;		 -> main@MoveType(50), 
  2959 ;;  RFID_Read       2   40[BANK0 ] PTR unsigned char 
  2960 ;;		 -> RFID_Read(1), 
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  buf            40   47[BANK0 ] unsigned char [40]
  2963 ;;  SensorResult    4   99[BANK0 ] unsigned int [2]
  2964 ;;  RightFlag       2  103[BANK0 ] unsigned int 
  2965 ;;  LeftFlag        2   96[BANK0 ] unsigned int 
  2966 ;;  DirectionFou    2   91[BANK0 ] const unsigned int 
  2967 ;;  i               2   89[BANK0 ] unsigned int 
  2968 ;;  n               2   87[BANK0 ] unsigned int 
  2969 ;;  TimeAboveThr    1   98[BANK0 ] unsigned char 
  2970 ;;  MiniLeftFlic    1   95[BANK0 ] const unsigned char 
  2971 ;;  LeftFlick       1   94[BANK0 ] const unsigned char 
  2972 ;;  MotorPower      1   93[BANK0 ] const unsigned char 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  1    wreg      unsigned char 
  2975 ;; Registers used:
  2976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2982 ;;      Params:         0      14       0       0
  2983 ;;      Locals:         0      58       0       0
  2984 ;;      Temps:          0       5       0       0
  2985 ;;      Totals:         0      77       0       0
  2986 ;;Total ram usage:       77 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    7
  2989 ;; This function calls:
  2990 ;;		_LCD_String
  2991 ;;		_SendLCD
  2992 ;;		_SetLine
  2993 ;;		_delay_tenth_s
  2994 ;;		_grabLeftIR
  2995 ;;		_grabRightIR
  2996 ;;		_sprintf
  2997 ;;		_stop
  2998 ;;		_turnLeft
  2999 ;;		_turnRight
  3000 ;; This function is called by:
  3001 ;;		_main
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text9
  3006  000A24                     __ptext9:
  3007                           	opt stack 0
  3008  000A24                     _ScanWithRange:
  3009                           	opt stack 23
  3010                           
  3011                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;incstack = 0
  3015  000A24  C0CE  F0C3         	movff	ScanWithRange@F3553,ScanWithRange@SensorResult
  3016  000A28  C0CF  F0C4         	movff	ScanWithRange@F3553+1,ScanWithRange@SensorResult+1
  3017  000A2C  C0D0  F0C5         	movff	ScanWithRange@F3553+2,ScanWithRange@SensorResult+2
  3018  000A30  C0D1  F0C6         	movff	ScanWithRange@F3553+3,ScanWithRange@SensorResult+3
  3019                           
  3020                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3021  000A34  0E00               	movlw	0
  3022  000A36  0100               	movlb	0	; () banked
  3023  000A38  6FC1               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3024  000A3A  0E00               	movlw	0
  3025  000A3C  6FC0               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3026                           
  3027                           ;Movement.c: 104: unsigned int RightFlag=0;
  3028  000A3E  0E00               	movlw	0
  3029  000A40  6FC8               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3030  000A42  0E00               	movlw	0
  3031  000A44  6FC7               	movwf	ScanWithRange@RightFlag& (0+255),b
  3032                           
  3033                           ;Movement.c: 105: char buf[40];
  3034                           ;Movement.c: 106: unsigned int i=0;
  3035  000A46  0E00               	movlw	0
  3036  000A48  6FBA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3037  000A4A  0E00               	movlw	0
  3038  000A4C  6FB9               	movwf	ScanWithRange@i& (0+255),b
  3039                           
  3040                           ;Movement.c: 107: unsigned int n=0;
  3041  000A4E  0E00               	movlw	0
  3042  000A50  6FB8               	movwf	(ScanWithRange@n+1)& (0+255),b
  3043  000A52  0E00               	movlw	0
  3044  000A54  6FB7               	movwf	ScanWithRange@n& (0+255),b
  3045                           
  3046                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  3047  000A56  0E00               	movlw	0
  3048  000A58  6FC2               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3049                           
  3050                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3051  000A5A  0E03               	movlw	3
  3052  000A5C  6FBC               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3053  000A5E  0EE8               	movlw	232
  3054  000A60  6FBB               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3055                           
  3056                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3057  000A62  0E28               	movlw	40
  3058  000A64  6FBD               	movwf	ScanWithRange@MotorPower& (0+255),b
  3059                           
  3060                           ;Movement.c: 114: const unsigned char LeftFlick=2;
  3061  000A66  0E02               	movlw	2
  3062  000A68  6FBE               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3063                           
  3064                           ;Movement.c: 116: const unsigned char MiniLeftFlick=1;
  3065  000A6A  0E01               	movlw	1
  3066  000A6C  6FBF               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;Movement.c: 121: (MoveType[*Move]) = 2;
  3070  000A6E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3071  000A72  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3072  000A76  50DF               	movf	indf2,w,c
  3073  000A78  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3074  000A7A  518A               	movf	??_ScanWithRange& (0+255),w,b
  3075  000A7C  0D01               	mullw	1
  3076  000A7E  50F3               	movf	prodl,w,c
  3077  000A80  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3078  000A82  6ED9               	movwf	fsr2l,c
  3079  000A84  50F4               	movf	prodh,w,c
  3080  000A86  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3081  000A88  6EDA               	movwf	fsr2h,c
  3082  000A8A  0E02               	movlw	2
  3083  000A8C  6EDF               	movwf	indf2,c
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;Movement.c: 122: (MoveTime[*Move]) = LeftFlick;
  3087  000A8E  51BE               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3088  000A90  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3089  000A92  6B8B               	clrf	(??_ScanWithRange+1)& (0+255),b
  3090  000A94  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3091  000A98  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3092  000A9C  50DF               	movf	indf2,w,c
  3093  000A9E  6F8C               	movwf	(??_ScanWithRange+2)& (0+255),b
  3094  000AA0  518C               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3095  000AA2  0D02               	mullw	2
  3096  000AA4  50F3               	movf	prodl,w,c
  3097  000AA6  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3098  000AA8  6ED9               	movwf	fsr2l,c
  3099  000AAA  50F4               	movf	prodh,w,c
  3100  000AAC  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3101  000AAE  6EDA               	movwf	fsr2h,c
  3102  000AB0  C08A  FFDE         	movff	??_ScanWithRange,postinc2
  3103  000AB4  C08B  FFDD         	movff	??_ScanWithRange+1,postdec2
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;Movement.c: 123: *Move = *Move+1;
  3107  000AB8  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3108  000ABC  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3109  000AC0  50DF               	movf	indf2,w,c
  3110  000AC2  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3111  000AC4  298A               	incf	??_ScanWithRange& (0+255),w,b
  3112  000AC6  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3113  000ACA  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3114  000ACE  6EDF               	movwf	indf2,c
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;Movement.c: 124: turnLeft(mL,mR, 100);
  3118  000AD0  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3119  000AD4  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3120  000AD8  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3121  000ADC  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3122  000AE0  0E64               	movlw	100
  3123  000AE2  6F7B               	movwf	turnLeft@power& (0+255),b
  3124  000AE4  EC30  F00D         	call	_turnLeft	;wreg free
  3125                           
  3126                           ;Movement.c: 125: delay_tenth_s(LeftFlick);
  3127  000AE8  0100               	movlb	0	; () banked
  3128  000AEA  51BE               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3129  000AEC  EC4E  F00D         	call	_delay_tenth_s
  3130                           
  3131                           ;Movement.c: 126: stop(mL,mR);
  3132  000AF0  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3133  000AF4  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3134  000AF8  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3135  000AFC  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3136  000B00  EC0B  F00B         	call	_stop	;wreg free
  3137                           
  3138                           ;Movement.c: 129: turnRight(mL,mR, MotorPower);
  3139  000B04  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3140  000B08  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3141  000B0C  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3142  000B10  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3143  000B14  C0BD  F07B         	movff	ScanWithRange@MotorPower,turnRight@power
  3144  000B18  EC12  F00D         	call	_turnRight	;wreg free
  3145                           
  3146                           ;Movement.c: 132: TMR0L = 0;
  3147  000B1C  0E00               	movlw	0
  3148  000B1E  6ED6               	movwf	4054,c	;volatile
  3149                           
  3150                           ;Movement.c: 133: TMR0H = 0;
  3151  000B20  0E00               	movlw	0
  3152  000B22  6ED7               	movwf	4055,c	;volatile
  3153                           
  3154                           ;Movement.c: 134: T0CONbits.TMR0ON=1;
  3155  000B24  8ED5               	bsf	4053,7,c	;volatile
  3156                           
  3157                           ;Movement.c: 136: for (i=1; i<=loops; i++) {
  3158  000B26  0E00               	movlw	0
  3159  000B28  0100               	movlb	0	; () banked
  3160  000B2A  6FBA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3161  000B2C  0E01               	movlw	1
  3162  000B2E  6FB9               	movwf	ScanWithRange@i& (0+255),b
  3163  000B30  D19C               	goto	l219
  3164  000B32                     
  3165                           ; BSR set to: 0
  3166                           ;Movement.c: 139: SensorResult[0]=grabLeftIR();
  3167                           
  3168                           ; BSR set to: 0
  3169  000B32  EC10  F00C         	call	_grabLeftIR	;wreg free
  3170  000B36  C02C  F0C3         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3171  000B3A  C02D  F0C4         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3172                           
  3173                           ;Movement.c: 140: SensorResult[1]=grabRightIR();
  3174  000B3E  ECD5  F00B         	call	_grabRightIR	;wreg free
  3175  000B42  C02C  F0C5         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3176  000B46  C02D  F0C6         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3177                           
  3178                           ;Movement.c: 144: CAP1BUFH=0;
  3179  000B4A  0E00               	movlw	0
  3180  000B4C  6E69               	movwf	3945,c	;volatile
  3181                           
  3182                           ;Movement.c: 145: CAP1BUFL=0;
  3183  000B4E  0E00               	movlw	0
  3184  000B50  6E68               	movwf	3944,c	;volatile
  3185                           
  3186                           ;Movement.c: 146: CAP2BUFH=0;
  3187  000B52  0E00               	movlw	0
  3188  000B54  6E67               	movwf	3943,c	;volatile
  3189                           
  3190                           ;Movement.c: 147: CAP2BUFL=0;
  3191  000B56  0E00               	movlw	0
  3192  000B58  6E66               	movwf	3942,c	;volatile
  3193                           
  3194                           ;Movement.c: 151: SendLCD(0b00000001,0);
  3195  000B5A  0E00               	movlw	0
  3196  000B5C  6E30               	movwf	SendLCD@type,c
  3197  000B5E  0E01               	movlw	1
  3198  000B60  ECD5  F00D         	call	_SendLCD
  3199                           
  3200                           ;Movement.c: 152: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3201  000B64  0E21               	movlw	33
  3202  000B66                     u3317:
  3203  000B66  2EE8               	decfsz	wreg,f,c
  3204  000B68  D7FE               	bra	u3317
  3205  000B6A  F000               	nop	
  3206                           
  3207                           ;Movement.c: 153: SendLCD(0b00000010,0);
  3208  000B6C  0E00               	movlw	0
  3209  000B6E  6E30               	movwf	SendLCD@type,c
  3210  000B70  0E02               	movlw	2
  3211  000B72  ECD5  F00D         	call	_SendLCD
  3212                           
  3213                           ;Movement.c: 154: _delay((unsigned long)((2)*(8000000/4000.0)));
  3214  000B76  0E06               	movlw	6
  3215  000B78  0100               	movlb	0	; () banked
  3216  000B7A  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3217  000B7C  0E30               	movlw	48
  3218  000B7E                     u3327:
  3219  000B7E  2EE8               	decfsz	wreg,f,c
  3220  000B80  D7FE               	bra	u3327
  3221  000B82  2F8A               	decfsz	??_ScanWithRange& (0+255),f,b
  3222  000B84  D7FC               	bra	u3327
  3223  000B86  F000               	nop	
  3224                           
  3225                           ;Movement.c: 155: SetLine(1);
  3226  000B88  0E01               	movlw	1
  3227  000B8A  ECA1  F00D         	call	_SetLine
  3228                           
  3229                           ;Movement.c: 156: LCD_String("     ScanIR");
  3230  000B8E  0E2D               	movlw	low STR_1
  3231  000B90  0100               	movlb	0	; () banked
  3232  000B92  6F60               	movwf	LCD_String@string& (0+255),b
  3233  000B94  0E03               	movlw	high STR_1
  3234  000B96  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3235  000B98  EC4B  F00C         	call	_LCD_String	;wreg free
  3236                           
  3237                           ;Movement.c: 157: SetLine(2);
  3238  000B9C  0E02               	movlw	2
  3239  000B9E  ECA1  F00D         	call	_SetLine
  3240                           
  3241                           ;Movement.c: 158: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3242  000BA2  0E8F               	movlw	low ScanWithRange@buf
  3243  000BA4  0100               	movlb	0	; () banked
  3244  000BA6  6F67               	movwf	sprintf@sp& (0+255),b
  3245  000BA8  0E00               	movlw	high ScanWithRange@buf
  3246  000BAA  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  3247  000BAC  0E0C               	movlw	low (STR_6+1)
  3248  000BAE  6F69               	movwf	sprintf@f& (0+255),b
  3249  000BB0  0E03               	movlw	high (STR_6+1)
  3250  000BB2  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  3251  000BB4  C0C3  F06B         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3252  000BB8  C0C4  F06C         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3253  000BBC  C0C5  F06D         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3254  000BC0  C0C6  F06E         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3255  000BC4  EC84  F007         	call	_sprintf	;wreg free
  3256                           
  3257                           ;Movement.c: 159: LCD_String(buf);
  3258  000BC8  0E8F               	movlw	low ScanWithRange@buf
  3259  000BCA  0100               	movlb	0	; () banked
  3260  000BCC  6F60               	movwf	LCD_String@string& (0+255),b
  3261  000BCE  0E00               	movlw	high ScanWithRange@buf
  3262  000BD0  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3263  000BD2  EC4B  F00C         	call	_LCD_String	;wreg free
  3264                           
  3265                           ;Movement.c: 163: if (SensorResult[1]>DirectionFoundThreshold) {
  3266  000BD6  0100               	movlb	0	; () banked
  3267  000BD8  51C5               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3268  000BDA  5DBB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3269  000BDC  51C6               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3270  000BDE  59BC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3271  000BE0  B0D8               	btfsc	status,0,c
  3272  000BE2  D009               	goto	l221
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;Movement.c: 164: RightFlag= (TMR0H<<8)+TMR0L;
  3276  000BE4  50D7               	movf	4055,w,c	;volatile
  3277  000BE6  6F8B               	movwf	(??_ScanWithRange+1)& (0+255),b
  3278  000BE8  6B8A               	clrf	??_ScanWithRange& (0+255),b
  3279  000BEA  50D6               	movf	4054,w,c	;volatile
  3280  000BEC  258A               	addwf	??_ScanWithRange& (0+255),w,b
  3281  000BEE  6FC7               	movwf	ScanWithRange@RightFlag& (0+255),b
  3282  000BF0  0E00               	movlw	0
  3283  000BF2  218B               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3284  000BF4  6FC8               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3285  000BF6                     l221:
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;Movement.c: 165: }
  3289                           ;Movement.c: 167: if (SensorResult[0]>DirectionFoundThreshold) {
  3290  000BF6  51C3               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3291  000BF8  5DBB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3292  000BFA  51C4               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3293  000BFC  59BC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3294  000BFE  B0D8               	btfsc	status,0,c
  3295  000C00  D009               	goto	l222
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;Movement.c: 168: LeftFlag=(TMR0H<<8)+TMR0L;
  3299  000C02  50D7               	movf	4055,w,c	;volatile
  3300  000C04  6F8B               	movwf	(??_ScanWithRange+1)& (0+255),b
  3301  000C06  6B8A               	clrf	??_ScanWithRange& (0+255),b
  3302  000C08  50D6               	movf	4054,w,c	;volatile
  3303  000C0A  258A               	addwf	??_ScanWithRange& (0+255),w,b
  3304  000C0C  6FC0               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3305  000C0E  0E00               	movlw	0
  3306  000C10  218B               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3307  000C12  6FC1               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3308  000C14                     l222:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;Movement.c: 169: }
  3312                           ;Movement.c: 176: if (LeftFlag>0) {
  3313  000C14  51C0               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3314  000C16  11C1               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3315  000C18  B4D8               	btfsc	status,2,c
  3316  000C1A  D11C               	goto	l229
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;Movement.c: 179: if (RightFlag>0) {
  3320  000C1C  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3321  000C1E  11C8               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3322  000C20  B4D8               	btfsc	status,2,c
  3323  000C22  D082               	goto	l224
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;Movement.c: 180: TimeAboveThreshold = LeftFlag - RightFlag;
  3327  000C24  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3328  000C26  0800               	sublw	0
  3329  000C28  25C0               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3330  000C2A  6FC2               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;Movement.c: 181: TMR0L = 0;
  3334  000C2C  0E00               	movlw	0
  3335  000C2E  6ED6               	movwf	4054,c	;volatile
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;Movement.c: 182: TMR0H = 0;
  3339  000C30  0E00               	movlw	0
  3340  000C32  6ED7               	movwf	4055,c	;volatile
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;Movement.c: 183: stop(mL,mR);
  3344  000C34  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3345  000C38  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3346  000C3C  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3347  000C40  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3348  000C44  EC0B  F00B         	call	_stop	;wreg free
  3349                           
  3350                           ;Movement.c: 184: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3351  000C48  D00C               	goto	l225
  3352  000C4A                     
  3353                           ;Movement.c: 185: turnLeft(mL,mR, MotorPower);
  3354  000C4A  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3355  000C4E  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3356  000C52  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3357  000C56  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3358  000C5A  C0BD  F07B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3359  000C5E  EC30  F00D         	call	_turnLeft	;wreg free
  3360  000C62                     l225:
  3361  000C62  0100               	movlb	0	; () banked
  3362  000C64  90D8               	bcf	status,0,c
  3363  000C66  31C2               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3364  000C68  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3365  000C6A  6B8B               	clrf	(??_ScanWithRange+1)& (0+255),b
  3366  000C6C  50D6               	movf	4054,w,c	;volatile
  3367  000C6E  CFD7 F08C          	movff	4055,??_ScanWithRange+2	;volatile
  3368  000C72  6B8D               	clrf	(??_ScanWithRange+3)& (0+255),b
  3369  000C74  C08C  F08D         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3370  000C78  6B8C               	clrf	(??_ScanWithRange+2)& (0+255),b
  3371  000C7A  278C               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3372  000C7C  0E00               	movlw	0
  3373  000C7E  238D               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3374  000C80  518A               	movf	??_ScanWithRange& (0+255),w,b
  3375  000C82  5D8C               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3376  000C84  518D               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3377  000C86  0A80               	xorlw	128
  3378  000C88  6F8E               	movwf	(??_ScanWithRange+4)& (0+255),b
  3379  000C8A  518B               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3380  000C8C  0A80               	xorlw	128
  3381  000C8E  598E               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3382  000C90  A0D8               	btfss	status,0,c
  3383  000C92  D7DB               	goto	l226
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;Movement.c: 186: }
  3387                           ;Movement.c: 187: T0CONbits.TMR0ON=0;
  3388  000C94  9ED5               	bcf	4053,7,c	;volatile
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;Movement.c: 188: stop(mL,mR);
  3392  000C96  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3393  000C9A  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3394  000C9E  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3395  000CA2  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3396  000CA6  EC0B  F00B         	call	_stop	;wreg free
  3397                           
  3398                           ;Movement.c: 190: (MoveType[*Move]) = 1;
  3399  000CAA  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3400  000CAE  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3401  000CB2  50DF               	movf	indf2,w,c
  3402  000CB4  0100               	movlb	0	; () banked
  3403  000CB6  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3404  000CB8  518A               	movf	??_ScanWithRange& (0+255),w,b
  3405  000CBA  0D01               	mullw	1
  3406  000CBC  50F3               	movf	prodl,w,c
  3407  000CBE  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3408  000CC0  6ED9               	movwf	fsr2l,c
  3409  000CC2  50F4               	movf	prodh,w,c
  3410  000CC4  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3411  000CC6  6EDA               	movwf	fsr2h,c
  3412  000CC8  0E01               	movlw	1
  3413  000CCA  6EDF               	movwf	indf2,c
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;Movement.c: 191: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3417  000CCC  C0C2  F08A         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3418  000CD0  90D8               	bcf	status,0,c
  3419  000CD2  338A               	rrcf	??_ScanWithRange& (0+255),f,b
  3420  000CD4  518A               	movf	??_ScanWithRange& (0+255),w,b
  3421  000CD6  25C7               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3422  000CD8  6F8B               	movwf	(??_ScanWithRange+1)& (0+255),b
  3423  000CDA  0E00               	movlw	0
  3424  000CDC  21C8               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3425  000CDE  6F8C               	movwf	(??_ScanWithRange+2)& (0+255),b
  3426  000CE0  1F8B               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3427  000CE2  1F8C               	comf	(??_ScanWithRange+2)& (0+255),f,b
  3428  000CE4  4B8B               	infsnz	(??_ScanWithRange+1)& (0+255),f,b
  3429  000CE6  2B8C               	incf	(??_ScanWithRange+2)& (0+255),f,b
  3430  000CE8  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3431  000CEC  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3432  000CF0  50DF               	movf	indf2,w,c
  3433  000CF2  6F8D               	movwf	(??_ScanWithRange+3)& (0+255),b
  3434  000CF4  518D               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3435  000CF6  0D02               	mullw	2
  3436  000CF8  50F3               	movf	prodl,w,c
  3437  000CFA  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3438  000CFC  6ED9               	movwf	fsr2l,c
  3439  000CFE  50F4               	movf	prodh,w,c
  3440  000D00  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3441  000D02  6EDA               	movwf	fsr2h,c
  3442  000D04  C08B  FFDE         	movff	??_ScanWithRange+1,postinc2
  3443  000D08  C08C  FFDD         	movff	??_ScanWithRange+2,postdec2
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;Movement.c: 192: *Move = *Move+1;
  3447  000D0C  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3448  000D10  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3449  000D14  50DF               	movf	indf2,w,c
  3450  000D16  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3451  000D18  298A               	incf	??_ScanWithRange& (0+255),w,b
  3452  000D1A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3453  000D1E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3454  000D22  6EDF               	movwf	indf2,c
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;Movement.c: 194: return 2;
  3458  000D24  0E02               	movlw	2
  3459                           
  3460                           ; BSR set to: 0
  3461  000D26  0012               	return	
  3462  000D28                     l224:
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;Movement.c: 196: T0CONbits.TMR0ON=0;
  3466  000D28  9ED5               	bcf	4053,7,c	;volatile
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;Movement.c: 200: (MoveType[*Move]) = 1;
  3470  000D2A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3471  000D2E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3472  000D32  50DF               	movf	indf2,w,c
  3473  000D34  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3474  000D36  518A               	movf	??_ScanWithRange& (0+255),w,b
  3475  000D38  0D01               	mullw	1
  3476  000D3A  50F3               	movf	prodl,w,c
  3477  000D3C  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3478  000D3E  6ED9               	movwf	fsr2l,c
  3479  000D40  50F4               	movf	prodh,w,c
  3480  000D42  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3481  000D44  6EDA               	movwf	fsr2h,c
  3482  000D46  0E01               	movlw	1
  3483  000D48  6EDF               	movwf	indf2,c
  3484                           
  3485                           ;Movement.c: 201: (MoveTime[*Move]) = -((TMR0H<<8)+TMR0L);
  3486  000D4A  50D6               	movf	4054,w,c	;volatile
  3487  000D4C  CFD7 F08A          	movff	4055,??_ScanWithRange	;volatile
  3488  000D50  6B8B               	clrf	(??_ScanWithRange+1)& (0+255),b
  3489  000D52  C08A  F08B         	movff	??_ScanWithRange,??_ScanWithRange+1
  3490  000D56  6B8A               	clrf	??_ScanWithRange& (0+255),b
  3491  000D58  278A               	addwf	??_ScanWithRange& (0+255),f,b
  3492  000D5A  0E00               	movlw	0
  3493  000D5C  238B               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3494  000D5E  1F8A               	comf	??_ScanWithRange& (0+255),f,b
  3495  000D60  1F8B               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3496  000D62  4B8A               	infsnz	??_ScanWithRange& (0+255),f,b
  3497  000D64  2B8B               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3498  000D66  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3499  000D6A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3500  000D6E  50DF               	movf	indf2,w,c
  3501  000D70  6F8C               	movwf	(??_ScanWithRange+2)& (0+255),b
  3502  000D72  518C               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3503  000D74  0D02               	mullw	2
  3504  000D76  50F3               	movf	prodl,w,c
  3505  000D78  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3506  000D7A  6ED9               	movwf	fsr2l,c
  3507  000D7C  50F4               	movf	prodh,w,c
  3508  000D7E  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3509  000D80  6EDA               	movwf	fsr2h,c
  3510  000D82  C08A  FFDE         	movff	??_ScanWithRange,postinc2
  3511  000D86  C08B  FFDD         	movff	??_ScanWithRange+1,postdec2
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;Movement.c: 202: *Move = *Move+1;
  3515  000D8A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3516  000D8E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3517  000D92  50DF               	movf	indf2,w,c
  3518  000D94  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3519  000D96  298A               	incf	??_ScanWithRange& (0+255),w,b
  3520  000D98  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3521  000D9C  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3522  000DA0  6EDF               	movwf	indf2,c
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;Movement.c: 203: stop(mL,mR);
  3526  000DA2  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3527  000DA6  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3528  000DAA  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3529  000DAE  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3530  000DB2  EC0B  F00B         	call	_stop	;wreg free
  3531                           
  3532                           ;Movement.c: 206: turnLeft(mL,mR,100);
  3533  000DB6  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3534  000DBA  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3535  000DBE  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3536  000DC2  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3537  000DC6  0E64               	movlw	100
  3538  000DC8  0100               	movlb	0	; () banked
  3539  000DCA  6F7B               	movwf	turnLeft@power& (0+255),b
  3540  000DCC  EC30  F00D         	call	_turnLeft	;wreg free
  3541                           
  3542                           ;Movement.c: 207: delay_tenth_s(MiniLeftFlick);
  3543  000DD0  0100               	movlb	0	; () banked
  3544  000DD2  51BF               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3545  000DD4  EC4E  F00D         	call	_delay_tenth_s
  3546                           
  3547                           ;Movement.c: 208: stop(mL,mR);
  3548  000DD8  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3549  000DDC  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3550  000DE0  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3551  000DE4  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3552  000DE8  EC0B  F00B         	call	_stop	;wreg free
  3553                           
  3554                           ;Movement.c: 209: (MoveType[*Move]) = 2;
  3555  000DEC  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3556  000DF0  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3557  000DF4  50DF               	movf	indf2,w,c
  3558  000DF6  0100               	movlb	0	; () banked
  3559  000DF8  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3560  000DFA  518A               	movf	??_ScanWithRange& (0+255),w,b
  3561  000DFC  0D01               	mullw	1
  3562  000DFE  50F3               	movf	prodl,w,c
  3563  000E00  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3564  000E02  6ED9               	movwf	fsr2l,c
  3565  000E04  50F4               	movf	prodh,w,c
  3566  000E06  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3567  000E08  6EDA               	movwf	fsr2h,c
  3568  000E0A  0E02               	movlw	2
  3569  000E0C  6EDF               	movwf	indf2,c
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;Movement.c: 210: (MoveTime[*Move]) = MiniLeftFlick;
  3573  000E0E  51BF               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3574  000E10  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3575  000E12  6B8B               	clrf	(??_ScanWithRange+1)& (0+255),b
  3576  000E14  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3577  000E18  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3578  000E1C  50DF               	movf	indf2,w,c
  3579  000E1E  6F8C               	movwf	(??_ScanWithRange+2)& (0+255),b
  3580  000E20  518C               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3581  000E22  0D02               	mullw	2
  3582  000E24  50F3               	movf	prodl,w,c
  3583  000E26  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3584  000E28  6ED9               	movwf	fsr2l,c
  3585  000E2A  50F4               	movf	prodh,w,c
  3586  000E2C  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3587  000E2E  6EDA               	movwf	fsr2h,c
  3588  000E30  C08A  FFDE         	movff	??_ScanWithRange,postinc2
  3589  000E34  C08B  FFDD         	movff	??_ScanWithRange+1,postdec2
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;Movement.c: 211: *Move = *Move+1;
  3593  000E38  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3594  000E3C  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3595  000E40  50DF               	movf	indf2,w,c
  3596  000E42  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3597  000E44  298A               	incf	??_ScanWithRange& (0+255),w,b
  3598  000E46  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3599  000E4A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3600  000E4E  6EDF               	movwf	indf2,c
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;Movement.c: 214: return 2;
  3604  000E50  0E02               	movlw	2
  3605                           
  3606                           ; BSR set to: 0
  3607  000E52  0012               	return	
  3608  000E54                     l229:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;Movement.c: 215: }
  3612                           ;Movement.c: 216: }
  3613                           ;Movement.c: 218: if (*RFID_Read==1) {
  3614                           
  3615                           ; BSR set to: 0
  3616                           
  3617                           ; BSR set to: 0
  3618  000E54  C088  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3619  000E58  C089  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3620  000E5C  04DE               	decf	postinc2,w,c
  3621  000E5E  A4D8               	btfss	status,2,c
  3622  000E60  D002               	goto	l230
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;Movement.c: 219: return 2;
  3626  000E62  0E02               	movlw	2
  3627                           
  3628                           ; BSR set to: 0
  3629  000E64  0012               	return	
  3630  000E66                     l230:
  3631                           
  3632                           ; BSR set to: 0
  3633                           
  3634                           ; BSR set to: 0
  3635  000E66  4BB9               	infsnz	ScanWithRange@i& (0+255),f,b
  3636  000E68  2BBA               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3637  000E6A                     l219:
  3638                           
  3639                           ; BSR set to: 0
  3640                           
  3641                           ; BSR set to: 0
  3642  000E6A  51B9               	movf	ScanWithRange@i& (0+255),w,b
  3643  000E6C  5D80               	subwf	ScanWithRange@loops& (0+255),w,b
  3644  000E6E  51BA               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3645  000E70  5981               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3646  000E72  B0D8               	btfsc	status,0,c
  3647  000E74  D65E               	goto	l220
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;Movement.c: 220: }
  3651                           ;Movement.c: 221: }
  3652                           ;Movement.c: 224: (MoveType[*Move]) = 2;
  3653                           
  3654                           ; BSR set to: 0
  3655  000E76  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3656  000E7A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3657  000E7E  50DF               	movf	indf2,w,c
  3658  000E80  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3659  000E82  518A               	movf	??_ScanWithRange& (0+255),w,b
  3660  000E84  0D01               	mullw	1
  3661  000E86  50F3               	movf	prodl,w,c
  3662  000E88  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3663  000E8A  6ED9               	movwf	fsr2l,c
  3664  000E8C  50F4               	movf	prodh,w,c
  3665  000E8E  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3666  000E90  6EDA               	movwf	fsr2h,c
  3667  000E92  0E02               	movlw	2
  3668  000E94  6EDF               	movwf	indf2,c
  3669                           
  3670                           ;Movement.c: 225: (MoveTime[*Move]) = -2;
  3671  000E96  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3672  000E9A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3673  000E9E  50DF               	movf	indf2,w,c
  3674  000EA0  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3675  000EA2  518A               	movf	??_ScanWithRange& (0+255),w,b
  3676  000EA4  0D02               	mullw	2
  3677  000EA6  50F3               	movf	prodl,w,c
  3678  000EA8  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3679  000EAA  6ED9               	movwf	fsr2l,c
  3680  000EAC  50F4               	movf	prodh,w,c
  3681  000EAE  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3682  000EB0  6EDA               	movwf	fsr2h,c
  3683  000EB2  0EFE               	movlw	254
  3684  000EB4  6EDE               	movwf	postinc2,c
  3685  000EB6  0EFF               	movlw	255
  3686  000EB8  6EDD               	movwf	postdec2,c
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;Movement.c: 226: *Move = *Move+1;
  3690  000EBA  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3691  000EBE  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3692  000EC2  50DF               	movf	indf2,w,c
  3693  000EC4  6F8A               	movwf	??_ScanWithRange& (0+255),b
  3694  000EC6  298A               	incf	??_ScanWithRange& (0+255),w,b
  3695  000EC8  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3696  000ECC  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3697  000ED0  6EDF               	movwf	indf2,c
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;Movement.c: 227: turnRight(mL,mR, 100);
  3701  000ED2  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3702  000ED6  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3703  000EDA  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3704  000EDE  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3705  000EE2  0E64               	movlw	100
  3706  000EE4  6F7B               	movwf	turnRight@power& (0+255),b
  3707  000EE6  EC12  F00D         	call	_turnRight	;wreg free
  3708                           
  3709                           ;Movement.c: 228: delay_tenth_s(2);
  3710  000EEA  0E02               	movlw	2
  3711  000EEC  EC4E  F00D         	call	_delay_tenth_s
  3712                           
  3713                           ;Movement.c: 229: stop(mL,mR);
  3714  000EF0  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3715  000EF4  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3716  000EF8  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3717  000EFC  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3718  000F00  EC0B  F00B         	call	_stop	;wreg free
  3719                           
  3720                           ;Movement.c: 230: return -1;
  3721  000F04  0EFF               	movlw	255
  3722  000F06  0012               	return	
  3723  000F08                     __end_of_ScanWithRange:
  3724                           	opt stack 0
  3725                           tblptru	equ	0xFF8
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           intcon	equ	0xFF2
  3729                           postinc0	equ	0xFEE
  3730                           wreg	equ	0xFE8
  3731                           indf1	equ	0xFE7
  3732                           plusw1	equ	0xFE3
  3733                           fsr1h	equ	0xFE2
  3734                           fsr1l	equ	0xFE1
  3735                           indf2	equ	0xFDF
  3736                           postinc2	equ	0xFDE
  3737                           postdec2	equ	0xFDD
  3738                           plusw2	equ	0xFDB
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           
  3743 ;; *************** function _turnRight *****************
  3744 ;; Defined at:
  3745 ;;		line 98 in file "dc_motor.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3748 ;;		 -> main@mL(9), 
  3749 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3750 ;;		 -> main@mR(9), 
  3751 ;;  power           1   27[BANK0 ] unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3763 ;;      Params:         0       5       0       0
  3764 ;;      Locals:         0       0       0       0
  3765 ;;      Temps:          0       0       0       0
  3766 ;;      Totals:         0       5       0       0
  3767 ;;Total ram usage:        5 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    6
  3770 ;; This function calls:
  3771 ;;		_fullSpeedAhead
  3772 ;; This function is called by:
  3773 ;;		_ScanWithRange
  3774 ;;		_main
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text10
  3779  001A24                     __ptext10:
  3780                           	opt stack 0
  3781  001A24                     _turnRight:
  3782                           	opt stack 24
  3783                           
  3784                           ;dc_motor.c: 102: mL->direction=0;
  3785                           
  3786                           ;incstack = 0
  3787  001A24  0100               	movlb	0	; () banked
  3788  001A26  EE20 F001          	lfsr	2,1
  3789  001A2A  5177               	movf	turnRight@mL& (0+255),w,b
  3790  001A2C  26D9               	addwf	fsr2l,f,c
  3791  001A2E  5178               	movf	(turnRight@mL+1)& (0+255),w,b
  3792  001A30  22DA               	addwfc	fsr2h,f,c
  3793  001A32  0E00               	movlw	0
  3794  001A34  6EDF               	movwf	indf2,c
  3795                           
  3796                           ;dc_motor.c: 103: mR->direction=1;
  3797  001A36  EE20 F001          	lfsr	2,1
  3798  001A3A  5179               	movf	turnRight@mR& (0+255),w,b
  3799  001A3C  26D9               	addwf	fsr2l,f,c
  3800  001A3E  517A               	movf	(turnRight@mR+1)& (0+255),w,b
  3801  001A40  22DA               	addwfc	fsr2h,f,c
  3802  001A42  0E01               	movlw	1
  3803  001A44  6EDF               	movwf	indf2,c
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3807  001A46  C077  F071         	movff	turnRight@mL,fullSpeedAhead@mL
  3808  001A4A  C078  F072         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3809  001A4E  C079  F073         	movff	turnRight@mR,fullSpeedAhead@mR
  3810  001A52  C07A  F074         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3811  001A56  C07B  F075         	movff	turnRight@power,fullSpeedAhead@power
  3812  001A5A  EC97  F00B         	call	_fullSpeedAhead	;wreg free
  3813  001A5E  0012               	return		;funcret
  3814  001A60                     __end_of_turnRight:
  3815                           	opt stack 0
  3816                           tblptru	equ	0xFF8
  3817                           prodh	equ	0xFF4
  3818                           prodl	equ	0xFF3
  3819                           intcon	equ	0xFF2
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           indf1	equ	0xFE7
  3823                           plusw1	equ	0xFE3
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           plusw2	equ	0xFDB
  3830                           fsr2h	equ	0xFDA
  3831                           fsr2l	equ	0xFD9
  3832                           status	equ	0xFD8
  3833                           
  3834 ;; *************** function _turnLeft *****************
  3835 ;; Defined at:
  3836 ;;		line 87 in file "dc_motor.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3839 ;;		 -> main@mL(9), 
  3840 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3841 ;;		 -> main@mR(9), 
  3842 ;;  power           1   27[BANK0 ] unsigned char 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      void 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3854 ;;      Params:         0       5       0       0
  3855 ;;      Locals:         0       0       0       0
  3856 ;;      Temps:          0       0       0       0
  3857 ;;      Totals:         0       5       0       0
  3858 ;;Total ram usage:        5 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    6
  3861 ;; This function calls:
  3862 ;;		_fullSpeedAhead
  3863 ;; This function is called by:
  3864 ;;		_ScanWithRange
  3865 ;;		_main
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text11
  3870  001A60                     __ptext11:
  3871                           	opt stack 0
  3872  001A60                     _turnLeft:
  3873                           	opt stack 24
  3874                           
  3875                           ;dc_motor.c: 91: mL->direction=1;
  3876                           
  3877                           ;incstack = 0
  3878  001A60  0100               	movlb	0	; () banked
  3879  001A62  EE20 F001          	lfsr	2,1
  3880  001A66  5177               	movf	turnLeft@mL& (0+255),w,b
  3881  001A68  26D9               	addwf	fsr2l,f,c
  3882  001A6A  5178               	movf	(turnLeft@mL+1)& (0+255),w,b
  3883  001A6C  22DA               	addwfc	fsr2h,f,c
  3884  001A6E  0E01               	movlw	1
  3885  001A70  6EDF               	movwf	indf2,c
  3886                           
  3887                           ;dc_motor.c: 92: mR->direction=0;
  3888  001A72  EE20 F001          	lfsr	2,1
  3889  001A76  5179               	movf	turnLeft@mR& (0+255),w,b
  3890  001A78  26D9               	addwf	fsr2l,f,c
  3891  001A7A  517A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3892  001A7C  22DA               	addwfc	fsr2h,f,c
  3893  001A7E  0E00               	movlw	0
  3894  001A80  6EDF               	movwf	indf2,c
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3898  001A82  C077  F071         	movff	turnLeft@mL,fullSpeedAhead@mL
  3899  001A86  C078  F072         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3900  001A8A  C079  F073         	movff	turnLeft@mR,fullSpeedAhead@mR
  3901  001A8E  C07A  F074         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3902  001A92  C07B  F075         	movff	turnLeft@power,fullSpeedAhead@power
  3903  001A96  EC97  F00B         	call	_fullSpeedAhead	;wreg free
  3904  001A9A  0012               	return		;funcret
  3905  001A9C                     __end_of_turnLeft:
  3906                           	opt stack 0
  3907                           tblptru	equ	0xFF8
  3908                           prodh	equ	0xFF4
  3909                           prodl	equ	0xFF3
  3910                           intcon	equ	0xFF2
  3911                           postinc0	equ	0xFEE
  3912                           wreg	equ	0xFE8
  3913                           indf1	equ	0xFE7
  3914                           plusw1	equ	0xFE3
  3915                           fsr1h	equ	0xFE2
  3916                           fsr1l	equ	0xFE1
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           plusw2	equ	0xFDB
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925 ;; *************** function _fullSpeedAhead *****************
  3926 ;; Defined at:
  3927 ;;		line 108 in file "dc_motor.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  3930 ;;		 -> main@mL(9), 
  3931 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  3932 ;;		 -> main@mR(9), 
  3933 ;;  power           1   21[BANK0 ] unsigned char 
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;		None
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      void 
  3938 ;; Registers used:
  3939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3945 ;;      Params:         0       5       0       0
  3946 ;;      Locals:         0       0       0       0
  3947 ;;      Temps:          0       1       0       0
  3948 ;;      Totals:         0       6       0       0
  3949 ;;Total ram usage:        6 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    5
  3952 ;; This function calls:
  3953 ;;		_setMotorPWM
  3954 ;; This function is called by:
  3955 ;;		_turnLeft
  3956 ;;		_turnRight
  3957 ;;		_fullSpeedBack
  3958 ;;		_main
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text12
  3963  00172E                     __ptext12:
  3964                           	opt stack 0
  3965  00172E                     _fullSpeedAhead:
  3966                           	opt stack 24
  3967                           
  3968                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3969                           
  3970                           ;incstack = 0
  3971  00172E  D02B               	goto	l65
  3972  001730                     
  3973                           ;dc_motor.c: 112: if(mL->power<power){
  3974  001730  C071  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3975  001734  C072  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3976  001738  0100               	movlb	0	; () banked
  3977  00173A  5175               	movf	fullSpeedAhead@power& (0+255),w,b
  3978  00173C  5CDE               	subwf	postinc2,w,c
  3979  00173E  B0D8               	btfsc	status,0,c
  3980  001740  D005               	goto	l67
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;dc_motor.c: 113: mL->power++;
  3984  001742  C071  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3985  001746  C072  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3986  00174A  2ADF               	incf	indf2,f,c
  3987  00174C                     l67:
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;dc_motor.c: 114: }
  3991                           ;dc_motor.c: 115: if(mR->power<power){
  3992                           
  3993                           ; BSR set to: 0
  3994  00174C  C073  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3995  001750  C074  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3996  001754  5175               	movf	fullSpeedAhead@power& (0+255),w,b
  3997  001756  5CDE               	subwf	postinc2,w,c
  3998  001758  B0D8               	btfsc	status,0,c
  3999  00175A  D005               	goto	l68
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;dc_motor.c: 116: mR->power++;
  4003  00175C  C073  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4004  001760  C074  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4005  001764  2ADF               	incf	indf2,f,c
  4006  001766                     l68:
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;dc_motor.c: 117: }
  4010                           ;dc_motor.c: 118: setMotorPWM(mL);
  4011                           
  4012                           ; BSR set to: 0
  4013  001766  C071  F068         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4014  00176A  C072  F069         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4015  00176E  ECD4  F008         	call	_setMotorPWM	;wreg free
  4016                           
  4017                           ;dc_motor.c: 119: setMotorPWM(mR);
  4018  001772  C073  F068         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4019  001776  C074  F069         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4020  00177A  ECD4  F008         	call	_setMotorPWM	;wreg free
  4021                           
  4022                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4023  00177E  0E21               	movlw	33
  4024  001780                     u3337:
  4025  001780  2EE8               	decfsz	wreg,f,c
  4026  001782  D7FE               	bra	u3337
  4027  001784  F000               	nop	
  4028  001786                     l65:
  4029  001786  C071  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4030  00178A  C072  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4031  00178E  0100               	movlb	0	; () banked
  4032  001790  5175               	movf	fullSpeedAhead@power& (0+255),w,b
  4033  001792  5CDE               	subwf	postinc2,w,c
  4034  001794  A0D8               	btfss	status,0,c
  4035  001796  D7CC               	goto	l66
  4036                           
  4037                           ; BSR set to: 0
  4038  001798  C073  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4039  00179C  C074  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4040  0017A0  5175               	movf	fullSpeedAhead@power& (0+255),w,b
  4041  0017A2  5CDE               	subwf	postinc2,w,c
  4042  0017A4  B0D8               	btfsc	status,0,c
  4043  0017A6  0012               	return	
  4044  0017A8  D7C3               	goto	l66
  4045  0017AA                     __end_of_fullSpeedAhead:
  4046                           	opt stack 0
  4047                           tblptru	equ	0xFF8
  4048                           prodh	equ	0xFF4
  4049                           prodl	equ	0xFF3
  4050                           intcon	equ	0xFF2
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           indf1	equ	0xFE7
  4054                           plusw1	equ	0xFE3
  4055                           fsr1h	equ	0xFE2
  4056                           fsr1l	equ	0xFE1
  4057                           indf2	equ	0xFDF
  4058                           postinc2	equ	0xFDE
  4059                           postdec2	equ	0xFDD
  4060                           plusw2	equ	0xFDB
  4061                           fsr2h	equ	0xFDA
  4062                           fsr2l	equ	0xFD9
  4063                           status	equ	0xFD8
  4064                           
  4065 ;; *************** function _delay_tenth_s *****************
  4066 ;; Defined at:
  4067 ;;		line 32 in file "Movement.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;  tenth_second    1    wreg     unsigned char 
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;  tenth_second    1   44[COMRAM] unsigned char 
  4072 ;;  i               2   45[COMRAM] unsigned int 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  1    wreg      void 
  4075 ;; Registers used:
  4076 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4082 ;;      Params:         0       0       0       0
  4083 ;;      Locals:         3       0       0       0
  4084 ;;      Temps:          1       0       0       0
  4085 ;;      Totals:         4       0       0       0
  4086 ;;Total ram usage:        4 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    3
  4089 ;; This function calls:
  4090 ;;		Nothing
  4091 ;; This function is called by:
  4092 ;;		_ScanWithRange
  4093 ;;		_main
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text13
  4098  001A9C                     __ptext13:
  4099                           	opt stack 0
  4100  001A9C                     _delay_tenth_s:
  4101                           	opt stack 27
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;incstack = 0
  4105                           ;delay_tenth_s@tenth_seconds stored from wreg
  4106  001A9C  6E2D               	movwf	delay_tenth_s@tenth_seconds,c
  4107                           
  4108                           ;Movement.c: 33: unsigned int i=0;
  4109  001A9E  0E00               	movlw	0
  4110  001AA0  6E2F               	movwf	delay_tenth_s@i+1,c
  4111  001AA2  0E00               	movlw	0
  4112  001AA4  6E2E               	movwf	delay_tenth_s@i,c
  4113                           
  4114                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4115  001AA6  0E00               	movlw	0
  4116  001AA8  6E2F               	movwf	delay_tenth_s@i+1,c
  4117  001AAA  0E01               	movlw	1
  4118  001AAC  6E2E               	movwf	delay_tenth_s@i,c
  4119  001AAE  D009               	goto	l204
  4120  001AB0                     
  4121                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4122  001AB0  0E82               	movlw	130
  4123  001AB2  6E2C               	movwf	??_delay_tenth_s& (0+255),c
  4124  001AB4  0EDE               	movlw	222
  4125  001AB6                     u3347:
  4126  001AB6  2EE8               	decfsz	wreg,f,c
  4127  001AB8  D7FE               	bra	u3347
  4128  001ABA  2E2C               	decfsz	??_delay_tenth_s& (0+255),f,c
  4129  001ABC  D7FC               	bra	u3347
  4130  001ABE  4A2E               	infsnz	delay_tenth_s@i,f,c
  4131  001AC0  2A2F               	incf	delay_tenth_s@i+1,f,c
  4132  001AC2                     l204:
  4133  001AC2  502D               	movf	delay_tenth_s@tenth_seconds,w,c
  4134  001AC4  0D02               	mullw	2
  4135  001AC6  502E               	movf	delay_tenth_s@i,w,c
  4136  001AC8  5CF3               	subwf	prodl,w,c
  4137  001ACA  502F               	movf	delay_tenth_s@i+1,w,c
  4138  001ACC  58F4               	subwfb	prodh,w,c
  4139  001ACE  A0D8               	btfss	status,0,c
  4140  001AD0  0012               	return	
  4141  001AD2  D7EE               	goto	l205
  4142  001AD4                     __end_of_delay_tenth_s:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           prodh	equ	0xFF4
  4146                           prodl	equ	0xFF3
  4147                           intcon	equ	0xFF2
  4148                           postinc0	equ	0xFEE
  4149                           wreg	equ	0xFE8
  4150                           indf1	equ	0xFE7
  4151                           plusw1	equ	0xFE3
  4152                           fsr1h	equ	0xFE2
  4153                           fsr1l	equ	0xFE1
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           plusw2	equ	0xFDB
  4158                           fsr2h	equ	0xFDA
  4159                           fsr2l	equ	0xFD9
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function _ScanIR *****************
  4163 ;; Defined at:
  4164 ;;		line 44 in file "Movement.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  4167 ;;		 -> main@mL(9), 
  4168 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  4169 ;;		 -> main@mR(9), 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  buf            40   33[BANK0 ] unsigned char [40]
  4172 ;;  SensorResult    4   75[BANK0 ] unsigned int [2]
  4173 ;;  DirectionMov    2   73[BANK0 ] const unsigned int 
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  1    wreg      unsigned char 
  4176 ;; Registers used:
  4177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4183 ;;      Params:         0       4       0       0
  4184 ;;      Locals:         0      46       0       0
  4185 ;;      Temps:          0       1       0       0
  4186 ;;      Totals:         0      51       0       0
  4187 ;;Total ram usage:       51 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; Hardware stack levels required when called:    7
  4190 ;; This function calls:
  4191 ;;		_LCD_String
  4192 ;;		_SendLCD
  4193 ;;		_SetLine
  4194 ;;		_grabLeftIR
  4195 ;;		_grabRightIR
  4196 ;;		_sprintf
  4197 ;;		_stop
  4198 ;; This function is called by:
  4199 ;;		_main
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text14
  4204  0012E6                     __ptext14:
  4205                           	opt stack 0
  4206  0012E6                     _ScanIR:
  4207                           	opt stack 23
  4208                           
  4209                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4210                           
  4211                           ;incstack = 0
  4212  0012E6  C0D2  F0AB         	movff	ScanIR@F3540,ScanIR@SensorResult
  4213  0012EA  C0D3  F0AC         	movff	ScanIR@F3540+1,ScanIR@SensorResult+1
  4214  0012EE  C0D4  F0AD         	movff	ScanIR@F3540+2,ScanIR@SensorResult+2
  4215  0012F2  C0D5  F0AE         	movff	ScanIR@F3540+3,ScanIR@SensorResult+3
  4216                           
  4217                           ;Movement.c: 48: char buf[40];
  4218                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4219  0012F6  0E03               	movlw	3
  4220  0012F8  0100               	movlb	0	; () banked
  4221  0012FA  6FAA               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4222  0012FC  0EE8               	movlw	232
  4223  0012FE  6FA9               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4227  001300  EC10  F00C         	call	_grabLeftIR	;wreg free
  4228  001304  C02C  F0AB         	movff	?_grabLeftIR,ScanIR@SensorResult
  4229  001308  C02D  F0AC         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4230                           
  4231                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4232  00130C  ECD5  F00B         	call	_grabRightIR	;wreg free
  4233  001310  C02C  F0AD         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4234  001314  C02D  F0AE         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4235                           
  4236                           ;Movement.c: 60: CAP1BUFH=0;
  4237  001318  0E00               	movlw	0
  4238  00131A  6E69               	movwf	3945,c	;volatile
  4239                           
  4240                           ;Movement.c: 61: CAP1BUFL=0;
  4241  00131C  0E00               	movlw	0
  4242  00131E  6E68               	movwf	3944,c	;volatile
  4243                           
  4244                           ;Movement.c: 62: CAP2BUFH=0;
  4245  001320  0E00               	movlw	0
  4246  001322  6E67               	movwf	3943,c	;volatile
  4247                           
  4248                           ;Movement.c: 63: CAP2BUFL=0;
  4249  001324  0E00               	movlw	0
  4250  001326  6E66               	movwf	3942,c	;volatile
  4251                           
  4252                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4253  001328  0E00               	movlw	0
  4254  00132A  6E30               	movwf	SendLCD@type,c
  4255  00132C  0E01               	movlw	1
  4256  00132E  ECD5  F00D         	call	_SendLCD
  4257                           
  4258                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4259  001332  0E21               	movlw	33
  4260  001334                     u3357:
  4261  001334  2EE8               	decfsz	wreg,f,c
  4262  001336  D7FE               	bra	u3357
  4263  001338  F000               	nop	
  4264                           
  4265                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4266  00133A  0E00               	movlw	0
  4267  00133C  6E30               	movwf	SendLCD@type,c
  4268  00133E  0E02               	movlw	2
  4269  001340  ECD5  F00D         	call	_SendLCD
  4270                           
  4271                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4272  001344  0E06               	movlw	6
  4273  001346  0100               	movlb	0	; () banked
  4274  001348  6F80               	movwf	??_ScanIR& (0+255),b
  4275  00134A  0E30               	movlw	48
  4276  00134C                     u3367:
  4277  00134C  2EE8               	decfsz	wreg,f,c
  4278  00134E  D7FE               	bra	u3367
  4279  001350  2F80               	decfsz	??_ScanIR& (0+255),f,b
  4280  001352  D7FC               	bra	u3367
  4281  001354  F000               	nop	
  4282                           
  4283                           ;Movement.c: 70: SetLine(1);
  4284  001356  0E01               	movlw	1
  4285  001358  ECA1  F00D         	call	_SetLine
  4286                           
  4287                           ;Movement.c: 71: LCD_String("     ScanIR");
  4288  00135C  0E2D               	movlw	low STR_1
  4289  00135E  0100               	movlb	0	; () banked
  4290  001360  6F60               	movwf	LCD_String@string& (0+255),b
  4291  001362  0E03               	movlw	high STR_1
  4292  001364  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4293  001366  EC4B  F00C         	call	_LCD_String	;wreg free
  4294                           
  4295                           ;Movement.c: 72: SetLine(2);
  4296  00136A  0E02               	movlw	2
  4297  00136C  ECA1  F00D         	call	_SetLine
  4298                           
  4299                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4300  001370  0E81               	movlw	low ScanIR@buf
  4301  001372  0100               	movlb	0	; () banked
  4302  001374  6F67               	movwf	sprintf@sp& (0+255),b
  4303  001376  0E00               	movlw	high ScanIR@buf
  4304  001378  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  4305  00137A  0E0C               	movlw	low (STR_6+1)
  4306  00137C  6F69               	movwf	sprintf@f& (0+255),b
  4307  00137E  0E03               	movlw	high (STR_6+1)
  4308  001380  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  4309  001382  C0AB  F06B         	movff	ScanIR@SensorResult,?_sprintf+4
  4310  001386  C0AC  F06C         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4311  00138A  C0AD  F06D         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4312  00138E  C0AE  F06E         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4313  001392  EC84  F007         	call	_sprintf	;wreg free
  4314                           
  4315                           ;Movement.c: 74: LCD_String(buf);
  4316  001396  0E81               	movlw	low ScanIR@buf
  4317  001398  0100               	movlb	0	; () banked
  4318  00139A  6F60               	movwf	LCD_String@string& (0+255),b
  4319  00139C  0E00               	movlw	high ScanIR@buf
  4320  00139E  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4321  0013A0  EC4B  F00C         	call	_LCD_String	;wreg free
  4322                           
  4323                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4324                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4325  0013A4  0100               	movlb	0	; () banked
  4326  0013A6  51AB               	movf	ScanIR@SensorResult& (0+255),w,b
  4327  0013A8  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4328  0013AA  51AC               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4329  0013AC  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4330  0013AE  B0D8               	btfsc	status,0,c
  4331  0013B0  D008               	goto	l212
  4332                           
  4333                           ; BSR set to: 0
  4334  0013B2  51AD               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4335  0013B4  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4336  0013B6  51AE               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4337  0013B8  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4338  0013BA  B0D8               	btfsc	status,0,c
  4339  0013BC  D002               	goto	l212
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;Movement.c: 80: return 2;
  4343  0013BE  0E02               	movlw	2
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;Movement.c: 81: } else {
  4347                           
  4348                           ; BSR set to: 0
  4349  0013C0  0012               	return	
  4350  0013C2                     l212:
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;Movement.c: 82: stop(mL,mR);
  4354                           
  4355                           ; BSR set to: 0
  4356  0013C2  C07C  F071         	movff	ScanIR@mL,stop@mL
  4357  0013C6  C07D  F072         	movff	ScanIR@mL+1,stop@mL+1
  4358  0013CA  C07E  F073         	movff	ScanIR@mR,stop@mR
  4359  0013CE  C07F  F074         	movff	ScanIR@mR+1,stop@mR+1
  4360  0013D2  EC0B  F00B         	call	_stop	;wreg free
  4361                           
  4362                           ;Movement.c: 83: return 0;
  4363  0013D6  0E00               	movlw	0
  4364  0013D8  0012               	return	
  4365  0013DA                     __end_of_ScanIR:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           prodh	equ	0xFF4
  4369                           prodl	equ	0xFF3
  4370                           intcon	equ	0xFF2
  4371                           postinc0	equ	0xFEE
  4372                           wreg	equ	0xFE8
  4373                           indf1	equ	0xFE7
  4374                           plusw1	equ	0xFE3
  4375                           fsr1h	equ	0xFE2
  4376                           fsr1l	equ	0xFE1
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           postdec2	equ	0xFDD
  4380                           plusw2	equ	0xFDB
  4381                           fsr2h	equ	0xFDA
  4382                           fsr2l	equ	0xFD9
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function _stop *****************
  4386 ;; Defined at:
  4387 ;;		line 67 in file "dc_motor.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  4390 ;;		 -> main@mL(9), 
  4391 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  4392 ;;		 -> main@mR(9), 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;		None
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4404 ;;      Params:         0       4       0       0
  4405 ;;      Locals:         0       0       0       0
  4406 ;;      Temps:          0       0       0       0
  4407 ;;      Totals:         0       4       0       0
  4408 ;;Total ram usage:        4 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    5
  4411 ;; This function calls:
  4412 ;;		_setMotorPWM
  4413 ;; This function is called by:
  4414 ;;		_ScanIR
  4415 ;;		_ScanWithRange
  4416 ;;		_main
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           	psect	text15
  4421  001616                     __ptext15:
  4422                           	opt stack 0
  4423  001616                     _stop:
  4424                           	opt stack 25
  4425                           
  4426                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4427                           
  4428                           ;incstack = 0
  4429  001616  D028               	goto	l51
  4430  001618                     
  4431                           ;dc_motor.c: 71: if(mL->power>0){
  4432  001618  C071  FFD9         	movff	stop@mL,fsr2l
  4433  00161C  C072  FFDA         	movff	stop@mL+1,fsr2h
  4434  001620  50DF               	movf	indf2,w,c
  4435  001622  B4D8               	btfsc	status,2,c
  4436  001624  D005               	goto	l53
  4437                           
  4438                           ;dc_motor.c: 72: mL->power--;
  4439  001626  C071  FFD9         	movff	stop@mL,fsr2l
  4440  00162A  C072  FFDA         	movff	stop@mL+1,fsr2h
  4441  00162E  06DF               	decf	indf2,f,c
  4442  001630                     l53:
  4443                           
  4444                           ;dc_motor.c: 73: }
  4445                           ;dc_motor.c: 74: if(mR->power>0){
  4446  001630  C073  FFD9         	movff	stop@mR,fsr2l
  4447  001634  C074  FFDA         	movff	stop@mR+1,fsr2h
  4448  001638  50DF               	movf	indf2,w,c
  4449  00163A  B4D8               	btfsc	status,2,c
  4450  00163C  D005               	goto	l54
  4451                           
  4452                           ;dc_motor.c: 75: mR->power--;
  4453  00163E  C073  FFD9         	movff	stop@mR,fsr2l
  4454  001642  C074  FFDA         	movff	stop@mR+1,fsr2h
  4455  001646  06DF               	decf	indf2,f,c
  4456  001648                     l54:
  4457                           
  4458                           ;dc_motor.c: 76: }
  4459                           ;dc_motor.c: 77: setMotorPWM(mL);
  4460  001648  C071  F068         	movff	stop@mL,setMotorPWM@m
  4461  00164C  C072  F069         	movff	stop@mL+1,setMotorPWM@m+1
  4462  001650  ECD4  F008         	call	_setMotorPWM	;wreg free
  4463                           
  4464                           ;dc_motor.c: 78: setMotorPWM(mR);
  4465  001654  C073  F068         	movff	stop@mR,setMotorPWM@m
  4466  001658  C074  F069         	movff	stop@mR+1,setMotorPWM@m+1
  4467  00165C  ECD4  F008         	call	_setMotorPWM	;wreg free
  4468                           
  4469                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4470  001660  0E21               	movlw	33
  4471  001662                     u3377:
  4472  001662  2EE8               	decfsz	wreg,f,c
  4473  001664  D7FE               	bra	u3377
  4474  001666  F000               	nop	
  4475  001668                     l51:
  4476  001668  C071  FFD9         	movff	stop@mL,fsr2l
  4477  00166C  C072  FFDA         	movff	stop@mL+1,fsr2h
  4478  001670  50DF               	movf	indf2,w,c
  4479  001672  A4D8               	btfss	status,2,c
  4480  001674  D7D1               	goto	l52
  4481  001676  C073  FFD9         	movff	stop@mR,fsr2l
  4482  00167A  C074  FFDA         	movff	stop@mR+1,fsr2h
  4483  00167E  50DF               	movf	indf2,w,c
  4484  001680  A4D8               	btfss	status,2,c
  4485  001682  D7CA               	goto	l52
  4486                           
  4487                           ;dc_motor.c: 80: }
  4488                           ;dc_motor.c: 81: mL->direction=1;
  4489  001684  0100               	movlb	0	; () banked
  4490  001686  EE20 F001          	lfsr	2,1
  4491  00168A  5171               	movf	stop@mL& (0+255),w,b
  4492  00168C  26D9               	addwf	fsr2l,f,c
  4493  00168E  5172               	movf	(stop@mL+1)& (0+255),w,b
  4494  001690  22DA               	addwfc	fsr2h,f,c
  4495  001692  0E01               	movlw	1
  4496  001694  6EDF               	movwf	indf2,c
  4497                           
  4498                           ;dc_motor.c: 82: mR->direction=1;
  4499  001696  EE20 F001          	lfsr	2,1
  4500  00169A  5173               	movf	stop@mR& (0+255),w,b
  4501  00169C  26D9               	addwf	fsr2l,f,c
  4502  00169E  5174               	movf	(stop@mR+1)& (0+255),w,b
  4503  0016A0  22DA               	addwfc	fsr2h,f,c
  4504  0016A2  0E01               	movlw	1
  4505  0016A4  6EDF               	movwf	indf2,c
  4506                           
  4507                           ; BSR set to: 0
  4508  0016A6  0012               	return		;funcret
  4509  0016A8                     __end_of_stop:
  4510                           	opt stack 0
  4511                           tblptru	equ	0xFF8
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           intcon	equ	0xFF2
  4515                           postinc0	equ	0xFEE
  4516                           wreg	equ	0xFE8
  4517                           indf1	equ	0xFE7
  4518                           plusw1	equ	0xFE3
  4519                           fsr1h	equ	0xFE2
  4520                           fsr1l	equ	0xFE1
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           plusw2	equ	0xFDB
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function _setMotorPWM *****************
  4530 ;; Defined at:
  4531 ;;		line 26 in file "dc_motor.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  m               2    8[BANK0 ] PTR struct DC_motor
  4534 ;;		 -> main@mR(9), main@mL(9), 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  PWMduty         2   15[BANK0 ] int 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4546 ;;      Params:         0       2       0       0
  4547 ;;      Locals:         0       2       0       0
  4548 ;;      Temps:          0       5       0       0
  4549 ;;      Totals:         0       9       0       0
  4550 ;;Total ram usage:        9 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    4
  4553 ;; This function calls:
  4554 ;;		___awdiv
  4555 ;;		___wmul
  4556 ;; This function is called by:
  4557 ;;		_stop
  4558 ;;		_fullSpeedAhead
  4559 ;;		_setMotorFullSpeed
  4560 ;;		_stopMotor
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text16
  4565  0011A8                     __ptext16:
  4566                           	opt stack 0
  4567  0011A8                     _setMotorPWM:
  4568                           	opt stack 24
  4569                           
  4570                           ;dc_motor.c: 28: int PWMduty;
  4571                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;incstack = 0
  4575  0011A8  C068  FFD9         	movff	setMotorPWM@m,fsr2l
  4576  0011AC  C069  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4577  0011B0  50DF               	movf	indf2,w,c
  4578  0011B2  0100               	movlb	0	; () banked
  4579  0011B4  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4580  0011B6  516A               	movf	??_setMotorPWM& (0+255),w,b
  4581  0011B8  6E2C               	movwf	___wmul@multiplier,c
  4582  0011BA  6A2D               	clrf	___wmul@multiplier+1,c
  4583  0011BC  EE20 F007          	lfsr	2,7
  4584  0011C0  5168               	movf	setMotorPWM@m& (0+255),w,b
  4585  0011C2  26D9               	addwf	fsr2l,f,c
  4586  0011C4  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4587  0011C6  22DA               	addwfc	fsr2h,f,c
  4588  0011C8  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  4589  0011CC  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  4590  0011D0  EC00  F00E         	call	___wmul	;wreg free
  4591  0011D4  C02C  F060         	movff	?___wmul,___awdiv@dividend
  4592  0011D8  C02D  F061         	movff	?___wmul+1,___awdiv@dividend+1
  4593  0011DC  0E00               	movlw	0
  4594  0011DE  0100               	movlb	0	; () banked
  4595  0011E0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4596  0011E2  0E64               	movlw	100
  4597  0011E4  6F62               	movwf	___awdiv@divisor& (0+255),b
  4598  0011E6  EC54  F00B         	call	___awdiv	;wreg free
  4599  0011EA  C060  F06F         	movff	?___awdiv,setMotorPWM@PWMduty
  4600  0011EE  C061  F070         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4601                           
  4602                           ;dc_motor.c: 32: if (m->direction)
  4603  0011F2  0100               	movlb	0	; () banked
  4604  0011F4  EE20 F001          	lfsr	2,1
  4605  0011F8  5168               	movf	setMotorPWM@m& (0+255),w,b
  4606  0011FA  26D9               	addwf	fsr2l,f,c
  4607  0011FC  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4608  0011FE  22DA               	addwfc	fsr2h,f,c
  4609  001200  50DF               	movf	indf2,w,c
  4610  001202  B4D8               	btfsc	status,2,c
  4611  001204  D02D               	goto	l34
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;dc_motor.c: 33: {
  4615                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4616  001206  EE20 F006          	lfsr	2,6
  4617  00120A  5168               	movf	setMotorPWM@m& (0+255),w,b
  4618  00120C  26D9               	addwf	fsr2l,f,c
  4619  00120E  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4620  001210  22DA               	addwfc	fsr2h,f,c
  4621  001212  50DF               	movf	indf2,w,c
  4622  001214  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4623  001216  0E01               	movlw	1
  4624  001218  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4625  00121A  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4626  00121C  D002               	goto	u2304
  4627  00121E                     u2305:
  4628  00121E  90D8               	bcf	status,0,c
  4629  001220  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4630  001222                     u2304:
  4631  001222  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4632  001224  D7FC               	goto	u2305
  4633  001226  0100               	movlb	0	; () banked
  4634  001228  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4635  00122A  108A               	iorwf	3978,w,c	;volatile
  4636  00122C  6E8A               	movwf	3978,c	;volatile
  4637                           
  4638                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4639  00122E  EE20 F007          	lfsr	2,7
  4640  001232  5168               	movf	setMotorPWM@m& (0+255),w,b
  4641  001234  26D9               	addwf	fsr2l,f,c
  4642  001236  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4643  001238  22DA               	addwfc	fsr2h,f,c
  4644  00123A  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4645  00123E  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4646  001242  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4647  001246  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4648  00124A  1F6C               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4649  00124C  1F6D               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4650  00124E  4B6C               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4651  001250  2B6D               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4652  001252  516A               	movf	??_setMotorPWM& (0+255),w,b
  4653  001254  256C               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4654  001256  6F6F               	movwf	setMotorPWM@PWMduty& (0+255),b
  4655  001258  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4656  00125A  216D               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4657  00125C  6F70               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4658                           
  4659                           ;dc_motor.c: 36: }
  4660  00125E  D015               	goto	l35
  4661  001260                     l34:
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;dc_motor.c: 37: else
  4665                           ;dc_motor.c: 38: {
  4666                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4667                           
  4668                           ; BSR set to: 0
  4669  001260  EE20 F006          	lfsr	2,6
  4670  001264  5168               	movf	setMotorPWM@m& (0+255),w,b
  4671  001266  26D9               	addwf	fsr2l,f,c
  4672  001268  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4673  00126A  22DA               	addwfc	fsr2h,f,c
  4674  00126C  50DF               	movf	indf2,w,c
  4675  00126E  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4676  001270  0E01               	movlw	1
  4677  001272  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4678  001274  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4679  001276  D002               	goto	u2314
  4680  001278                     u2315:
  4681  001278  90D8               	bcf	status,0,c
  4682  00127A  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4683  00127C                     u2314:
  4684  00127C  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4685  00127E  D7FC               	goto	u2315
  4686  001280  0100               	movlb	0	; () banked
  4687  001282  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4688  001284  0AFF               	xorlw	255
  4689  001286  148A               	andwf	3978,w,c	;volatile
  4690  001288  6E8A               	movwf	3978,c	;volatile
  4691  00128A                     l35:
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;dc_motor.c: 40: }
  4695                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4696  00128A  EE20 F002          	lfsr	2,2
  4697  00128E  5168               	movf	setMotorPWM@m& (0+255),w,b
  4698  001290  26D9               	addwf	fsr2l,f,c
  4699  001292  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4700  001294  22DA               	addwfc	fsr2h,f,c
  4701  001296  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4702  00129A  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4703  00129E  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4704  0012A2  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4705  0012A6  456F               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4706  0012A8  46E8               	rlncf	wreg,f,c
  4707  0012AA  0BFC               	andlw	252
  4708  0012AC  6EDF               	movwf	indf2,c
  4709                           
  4710                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4711  0012AE  EE20 F004          	lfsr	2,4
  4712  0012B2  5168               	movf	setMotorPWM@m& (0+255),w,b
  4713  0012B4  26D9               	addwf	fsr2l,f,c
  4714  0012B6  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4715  0012B8  22DA               	addwfc	fsr2h,f,c
  4716  0012BA  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4717  0012BE  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4718  0012C2  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4719  0012C6  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4720  0012CA  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4721  0012CE  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4722  0012D2  0E06               	movlw	6
  4723  0012D4  6F6E               	movwf	(??_setMotorPWM+4)& (0+255),b
  4724  0012D6                     u2325:
  4725  0012D6  356D               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  4726  0012D8  336D               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  4727  0012DA  336C               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  4728  0012DC  2F6E               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  4729  0012DE  D7FB               	goto	u2325
  4730  0012E0  516C               	movf	(??_setMotorPWM+2)& (0+255),w,b
  4731  0012E2  6EDF               	movwf	indf2,c
  4732                           
  4733                           ; BSR set to: 0
  4734  0012E4  0012               	return		;funcret
  4735  0012E6                     __end_of_setMotorPWM:
  4736                           	opt stack 0
  4737                           tblptru	equ	0xFF8
  4738                           prodh	equ	0xFF4
  4739                           prodl	equ	0xFF3
  4740                           intcon	equ	0xFF2
  4741                           postinc0	equ	0xFEE
  4742                           wreg	equ	0xFE8
  4743                           indf1	equ	0xFE7
  4744                           plusw1	equ	0xFE3
  4745                           fsr1h	equ	0xFE2
  4746                           fsr1l	equ	0xFE1
  4747                           indf2	equ	0xFDF
  4748                           postinc2	equ	0xFDE
  4749                           postdec2	equ	0xFDD
  4750                           plusw2	equ	0xFDB
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function ___awdiv *****************
  4756 ;; Defined at:
  4757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  dividend        2    0[BANK0 ] int 
  4760 ;;  divisor         2    2[BANK0 ] int 
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;  quotient        2    6[BANK0 ] int 
  4763 ;;  sign            1    5[BANK0 ] unsigned char 
  4764 ;;  counter         1    4[BANK0 ] unsigned char 
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  2    0[BANK0 ] int 
  4767 ;; Registers used:
  4768 ;;		wreg, status,2, status,0
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4774 ;;      Params:         0       4       0       0
  4775 ;;      Locals:         0       4       0       0
  4776 ;;      Temps:          0       0       0       0
  4777 ;;      Totals:         0       8       0       0
  4778 ;;Total ram usage:        8 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:    3
  4781 ;; This function calls:
  4782 ;;		Nothing
  4783 ;; This function is called by:
  4784 ;;		_setMotorPWM
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           	psect	text17
  4789  0016A8                     __ptext17:
  4790                           	opt stack 0
  4791  0016A8                     ___awdiv:
  4792                           	opt stack 24
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;incstack = 0
  4796  0016A8  0E00               	movlw	0
  4797  0016AA  0100               	movlb	0	; () banked
  4798  0016AC  6F65               	movwf	___awdiv@sign& (0+255),b
  4799                           
  4800                           ; BSR set to: 0
  4801  0016AE  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4802  0016B0  D006               	goto	l663
  4803                           
  4804                           ; BSR set to: 0
  4805  0016B2  6D62               	negf	___awdiv@divisor& (0+255),b
  4806  0016B4  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4807  0016B6  B0D8               	btfsc	status,0,c
  4808  0016B8  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4809                           
  4810                           ; BSR set to: 0
  4811  0016BA  0E01               	movlw	1
  4812  0016BC  6F65               	movwf	___awdiv@sign& (0+255),b
  4813  0016BE                     l663:
  4814                           
  4815                           ; BSR set to: 0
  4816                           
  4817                           ; BSR set to: 0
  4818  0016BE  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4819  0016C0  D006               	goto	l664
  4820                           
  4821                           ; BSR set to: 0
  4822  0016C2  6D60               	negf	___awdiv@dividend& (0+255),b
  4823  0016C4  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4824  0016C6  B0D8               	btfsc	status,0,c
  4825  0016C8  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4826                           
  4827                           ; BSR set to: 0
  4828  0016CA  0E01               	movlw	1
  4829  0016CC  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  4830  0016CE                     l664:
  4831                           
  4832                           ; BSR set to: 0
  4833                           
  4834                           ; BSR set to: 0
  4835  0016CE  0E00               	movlw	0
  4836  0016D0  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  4837  0016D2  0E00               	movlw	0
  4838  0016D4  6F66               	movwf	___awdiv@quotient& (0+255),b
  4839                           
  4840                           ; BSR set to: 0
  4841  0016D6  5162               	movf	___awdiv@divisor& (0+255),w,b
  4842  0016D8  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4843  0016DA  B4D8               	btfsc	status,2,c
  4844  0016DC  D01C               	goto	l671
  4845                           
  4846                           ; BSR set to: 0
  4847  0016DE  0E01               	movlw	1
  4848  0016E0  6F64               	movwf	___awdiv@counter& (0+255),b
  4849  0016E2  D004               	goto	l666
  4850  0016E4                     
  4851                           ; BSR set to: 0
  4852                           
  4853                           ; BSR set to: 0
  4854  0016E4  90D8               	bcf	status,0,c
  4855  0016E6  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  4856  0016E8  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4857  0016EA  2B64               	incf	___awdiv@counter& (0+255),f,b
  4858  0016EC                     l666:
  4859                           
  4860                           ; BSR set to: 0
  4861                           
  4862                           ; BSR set to: 0
  4863  0016EC  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4864  0016EE  D7FA               	goto	l667
  4865  0016F0                     u1200:
  4866                           
  4867                           ; BSR set to: 0
  4868                           
  4869                           ; BSR set to: 0
  4870                           
  4871                           ; BSR set to: 0
  4872  0016F0  90D8               	bcf	status,0,c
  4873  0016F2  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  4874  0016F4  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4875                           
  4876                           ; BSR set to: 0
  4877  0016F6  5162               	movf	___awdiv@divisor& (0+255),w,b
  4878  0016F8  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  4879  0016FA  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4880  0016FC  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4881  0016FE  A0D8               	btfss	status,0,c
  4882  001700  D005               	goto	l670
  4883                           
  4884                           ; BSR set to: 0
  4885  001702  5162               	movf	___awdiv@divisor& (0+255),w,b
  4886  001704  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  4887  001706  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4888  001708  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4889                           
  4890                           ; BSR set to: 0
  4891  00170A  8166               	bsf	___awdiv@quotient& (0+255),0,b
  4892  00170C                     l670:
  4893                           
  4894                           ; BSR set to: 0
  4895                           
  4896                           ; BSR set to: 0
  4897  00170C  90D8               	bcf	status,0,c
  4898  00170E  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4899  001710  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  4900                           
  4901                           ; BSR set to: 0
  4902  001712  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  4903  001714  D7ED               	goto	u1200
  4904  001716                     l671:
  4905                           
  4906                           ; BSR set to: 0
  4907                           
  4908                           ; BSR set to: 0
  4909                           
  4910                           ; BSR set to: 0
  4911  001716  5165               	movf	___awdiv@sign& (0+255),w,b
  4912  001718  B4D8               	btfsc	status,2,c
  4913  00171A  D004               	goto	l672
  4914                           
  4915                           ; BSR set to: 0
  4916  00171C  6D66               	negf	___awdiv@quotient& (0+255),b
  4917  00171E  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4918  001720  B0D8               	btfsc	status,0,c
  4919  001722  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4920  001724                     l672:
  4921                           
  4922                           ; BSR set to: 0
  4923                           
  4924                           ; BSR set to: 0
  4925  001724  C066  F060         	movff	___awdiv@quotient,?___awdiv
  4926  001728  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  4927  00172C  0012               	return	
  4928  00172E                     __end_of___awdiv:
  4929                           	opt stack 0
  4930                           tblptru	equ	0xFF8
  4931                           prodh	equ	0xFF4
  4932                           prodl	equ	0xFF3
  4933                           intcon	equ	0xFF2
  4934                           postinc0	equ	0xFEE
  4935                           wreg	equ	0xFE8
  4936                           indf1	equ	0xFE7
  4937                           plusw1	equ	0xFE3
  4938                           fsr1h	equ	0xFE2
  4939                           fsr1l	equ	0xFE1
  4940                           indf2	equ	0xFDF
  4941                           postinc2	equ	0xFDE
  4942                           postdec2	equ	0xFDD
  4943                           plusw2	equ	0xFDB
  4944                           fsr2h	equ	0xFDA
  4945                           fsr2l	equ	0xFD9
  4946                           status	equ	0xFD8
  4947                           
  4948 ;; *************** function _sprintf *****************
  4949 ;; Defined at:
  4950 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  4953 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4954 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  4955 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;  tmpval          4    0        struct .
  4958 ;;  cp              3    0        PTR const unsigned char 
  4959 ;;  width           2   25[BANK0 ] int 
  4960 ;;  val             2   22[BANK0 ] unsigned int 
  4961 ;;  ap              2   19[BANK0 ] PTR void [1]
  4962 ;;		 -> ?_sprintf(2), 
  4963 ;;  len             2    0        unsigned int 
  4964 ;;  c               1   27[BANK0 ] char 
  4965 ;;  flag            1   24[BANK0 ] unsigned char 
  4966 ;;  prec            1   21[BANK0 ] char 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  2    7[BANK0 ] int 
  4969 ;; Registers used:
  4970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4976 ;;      Params:         0       8       0       0
  4977 ;;      Locals:         0       9       0       0
  4978 ;;      Temps:          0       4       0       0
  4979 ;;      Totals:         0      21       0       0
  4980 ;;Total ram usage:       21 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    4
  4983 ;; This function calls:
  4984 ;;		___lwdiv
  4985 ;;		___lwmod
  4986 ;;		___wmul
  4987 ;;		_isdigit
  4988 ;; This function is called by:
  4989 ;;		_ScanIR
  4990 ;;		_ScanWithRange
  4991 ;;		_main
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text18
  4996  000F08                     __ptext18:
  4997                           	opt stack 0
  4998  000F08                     _sprintf:
  4999                           	opt stack 26
  5000                           
  5001                           ;doprnt.c: 494: va_list ap;
  5002                           ;doprnt.c: 499: signed char c;
  5003                           ;doprnt.c: 501: int width;
  5004                           ;doprnt.c: 506: signed char prec;
  5005                           ;doprnt.c: 508: unsigned char flag;
  5006                           ;doprnt.c: 523: union {
  5007                           ;doprnt.c: 524: unsigned long vd;
  5008                           ;doprnt.c: 525: double integ;
  5009                           ;doprnt.c: 526: } tmpval;
  5010                           ;doprnt.c: 528: unsigned int val;
  5011                           ;doprnt.c: 529: unsigned len;
  5012                           ;doprnt.c: 530: const char * cp;
  5013                           ;doprnt.c: 533: *ap = __va_start();
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;incstack = 0
  5017  000F08  0E6B               	movlw	low (?_sprintf+4)
  5018  000F0A  0100               	movlb	0	; () banked
  5019  000F0C  6F73               	movwf	sprintf@ap& (0+255),b
  5020  000F0E  0E00               	movlw	high (?_sprintf+4)
  5021  000F10  6F74               	movwf	(sprintf@ap+1)& (0+255),b
  5022                           
  5023                           ;doprnt.c: 536: while(c = *f++) {
  5024  000F12  D136               	goto	u2800
  5025  000F14                     
  5026                           ; BSR set to: 0
  5027                           ;doprnt.c: 538: if(c != '%')
  5028                           
  5029                           ; BSR set to: 0
  5030  000F14  0E25               	movlw	37
  5031  000F16  197B               	xorwf	sprintf@c& (0+255),w,b
  5032  000F18  B4D8               	btfsc	status,2,c
  5033  000F1A  D009               	goto	l457
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;doprnt.c: 540: {
  5037                           ;doprnt.c: 541: ((*sp++ = (c)));
  5038  000F1C  C067  FFD9         	movff	sprintf@sp,fsr2l
  5039  000F20  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5040  000F24  C07B  FFDF         	movff	sprintf@c,indf2
  5041                           
  5042                           ; BSR set to: 0
  5043  000F28  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5044  000F2A  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5045                           
  5046                           ;doprnt.c: 542: continue;
  5047  000F2C  D129               	goto	u2800
  5048  000F2E                     l457:
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;doprnt.c: 543: }
  5052                           ;doprnt.c: 546: width = 0;
  5053                           
  5054                           ; BSR set to: 0
  5055  000F2E  0E00               	movlw	0
  5056  000F30  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5057  000F32  0E00               	movlw	0
  5058  000F34  6F79               	movwf	sprintf@width& (0+255),b
  5059                           
  5060                           ;doprnt.c: 548: flag = 0;
  5061  000F36  0E00               	movlw	0
  5062  000F38  6F78               	movwf	sprintf@flag& (0+255),b
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;doprnt.c: 551: switch(*f) {
  5066                           
  5067                           ;doprnt.c: 550: for(;;) {
  5068  000F3A  D004               	goto	l459
  5069  000F3C                     
  5070                           ;doprnt.c: 580: flag |= 0x04;
  5071                           
  5072                           ; BSR set to: 0
  5073  000F3C  0100               	movlb	0	; () banked
  5074  000F3E  8578               	bsf	sprintf@flag& (0+255),2,b
  5075                           
  5076                           ;doprnt.c: 581: f++;
  5077  000F40  4B69               	infsnz	sprintf@f& (0+255),f,b
  5078  000F42  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5079  000F44                     l459:
  5080                           
  5081                           ; BSR set to: 0
  5082  000F44  C069  FFF6         	movff	sprintf@f,tblptrl
  5083  000F48  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5084  000F4C                     	if	0	;tblptru may be non-zero
  5085  000F4C                     	endif
  5086  000F4C                     	if	0	;tblptru may be non-zero
  5087  000F4C                     	endif
  5088  000F4C  0008               	tblrd		*
  5089  000F4E  50F5               	movf	tablat,w,c
  5090                           
  5091                           ; Switch size 1, requested type "space"
  5092                           ; Number of cases is 1, Range of values is 48 to 48
  5093                           ; switch strategies available:
  5094                           ; Name         Instructions Cycles
  5095                           ; simple_byte            4     3 (average)
  5096                           ;	Chosen strategy is simple_byte
  5097  000F50  0A30               	xorlw	48	; case 48
  5098  000F52  B4D8               	btfsc	status,2,c
  5099  000F54  D7F3               	goto	l460
  5100                           
  5101                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5102                           
  5103                           ;doprnt.c: 586: }
  5104                           
  5105                           ;doprnt.c: 585: break;
  5106  000F56  C069  FFF6         	movff	sprintf@f,tblptrl
  5107  000F5A  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5108  000F5E                     	if	0	;tblptru may be non-zero
  5109  000F5E                     	endif
  5110  000F5E                     	if	0	;tblptru may be non-zero
  5111  000F5E                     	endif
  5112  000F5E  0008               	tblrd		*
  5113  000F60  50F5               	movf	tablat,w,c
  5114  000F62  EC24  F00E         	call	_isdigit
  5115  000F66  A0D8               	btfss	status,0,c
  5116  000F68  D034               	goto	l467
  5117                           
  5118                           ;doprnt.c: 598: width = 0;
  5119  000F6A  0E00               	movlw	0
  5120  000F6C  0100               	movlb	0	; () banked
  5121  000F6E  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5122  000F70  0E00               	movlw	0
  5123  000F72  6F79               	movwf	sprintf@width& (0+255),b
  5124  000F74                     
  5125                           ;doprnt.c: 600: width *= 10;
  5126                           
  5127                           ; BSR set to: 0
  5128  000F74  C079  F02C         	movff	sprintf@width,___wmul@multiplier
  5129  000F78  C07A  F02D         	movff	sprintf@width+1,___wmul@multiplier+1
  5130  000F7C  0E00               	movlw	0
  5131  000F7E  6E2F               	movwf	___wmul@multiplicand+1,c
  5132  000F80  0E0A               	movlw	10
  5133  000F82  6E2E               	movwf	___wmul@multiplicand,c
  5134  000F84  EC00  F00E         	call	___wmul	;wreg free
  5135  000F88  C02C  F079         	movff	?___wmul,sprintf@width
  5136  000F8C  C02D  F07A         	movff	?___wmul+1,sprintf@width+1
  5137                           
  5138                           ;doprnt.c: 601: width += *f++ - '0';
  5139  000F90  0ED0               	movlw	208
  5140  000F92  0100               	movlb	0	; () banked
  5141  000F94  6F6F               	movwf	??_sprintf& (0+255),b
  5142  000F96  0EFF               	movlw	255
  5143  000F98  6F70               	movwf	(??_sprintf+1)& (0+255),b
  5144  000F9A  C069  FFF6         	movff	sprintf@f,tblptrl
  5145  000F9E  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5146  000FA2                     	if	0	;tblptru may be non-zero
  5147  000FA2                     	endif
  5148  000FA2                     	if	0	;tblptru may be non-zero
  5149  000FA2                     	endif
  5150  000FA2  0008               	tblrd		*
  5151  000FA4  50F5               	movf	tablat,w,c
  5152  000FA6  6F71               	movwf	(??_sprintf+2)& (0+255),b
  5153  000FA8  6B72               	clrf	(??_sprintf+3)& (0+255),b
  5154  000FAA  516F               	movf	??_sprintf& (0+255),w,b
  5155  000FAC  2771               	addwf	(??_sprintf+2)& (0+255),f,b
  5156  000FAE  5170               	movf	(??_sprintf+1)& (0+255),w,b
  5157  000FB0  2372               	addwfc	(??_sprintf+3)& (0+255),f,b
  5158  000FB2  5171               	movf	(??_sprintf+2)& (0+255),w,b
  5159  000FB4  2779               	addwf	sprintf@width& (0+255),f,b
  5160  000FB6  5172               	movf	(??_sprintf+3)& (0+255),w,b
  5161  000FB8  237A               	addwfc	(sprintf@width+1)& (0+255),f,b
  5162                           
  5163                           ; BSR set to: 0
  5164  000FBA  4B69               	infsnz	sprintf@f& (0+255),f,b
  5165  000FBC  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5169  000FBE  C069  FFF6         	movff	sprintf@f,tblptrl
  5170  000FC2  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5171  000FC6                     	if	0	;tblptru may be non-zero
  5172  000FC6                     	endif
  5173  000FC6                     	if	0	;tblptru may be non-zero
  5174  000FC6                     	endif
  5175  000FC6  0008               	tblrd		*
  5176  000FC8  50F5               	movf	tablat,w,c
  5177  000FCA  EC24  F00E         	call	_isdigit
  5178  000FCE  B0D8               	btfsc	status,0,c
  5179  000FD0  D7D1               	goto	l465
  5180  000FD2                     l467:
  5181  000FD2  C069  FFF6         	movff	sprintf@f,tblptrl
  5182  000FD6  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5183  000FDA  0100               	movlb	0	; () banked
  5184  000FDC  4B69               	infsnz	sprintf@f& (0+255),f,b
  5185  000FDE  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5186  000FE0                     	if	0	;tblptru may be non-zero
  5187  000FE0                     	endif
  5188  000FE0                     	if	0	;tblptru may be non-zero
  5189  000FE0                     	endif
  5190  000FE0  0008               	tblrd		*
  5191  000FE2  CFF5 F07B          	movff	tablat,sprintf@c
  5192  000FE6  517B               	movf	sprintf@c& (0+255),w,b
  5193                           
  5194                           ; Switch size 1, requested type "space"
  5195                           ; Number of cases is 3, Range of values is 0 to 105
  5196                           ; switch strategies available:
  5197                           ; Name         Instructions Cycles
  5198                           ; simple_byte           10     6 (average)
  5199                           ;	Chosen strategy is simple_byte
  5200  000FE8  0A00               	xorlw	0	; case 0
  5201  000FEA  B4D8               	btfsc	status,2,c
  5202  000FEC  D0D6               	goto	u2810
  5203  000FEE  0A64               	xorlw	100	; case 100
  5204  000FF0  B4D8               	btfsc	status,2,c
  5205  000FF2  D003               	goto	l472
  5206  000FF4  0A0D               	xorlw	13	; case 105
  5207  000FF6  A4D8               	btfss	status,2,c
  5208  000FF8  D0C3               	goto	u2800
  5209  000FFA                     l472:
  5210                           
  5211                           ;doprnt.c: 1253: {
  5212                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5213                           
  5214                           ; BSR set to: 0
  5215  000FFA  C073  FFD9         	movff	sprintf@ap,fsr2l
  5216  000FFE  C074  FFDA         	movff	sprintf@ap+1,fsr2h
  5217  001002  CFDE F076          	movff	postinc2,sprintf@val
  5218  001006  CFDD F077          	movff	postdec2,sprintf@val+1
  5219  00100A  0E02               	movlw	2
  5220  00100C  0100               	movlb	0	; () banked
  5221  00100E  2773               	addwf	sprintf@ap& (0+255),f,b
  5222  001010  0E00               	movlw	0
  5223  001012  2374               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;doprnt.c: 1261: if((int)val < 0) {
  5227  001014  AF77               	btfss	(sprintf@val+1)& (0+255),7,b
  5228  001016  D006               	goto	l474
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;doprnt.c: 1262: flag |= 0x03;
  5232  001018  0E03               	movlw	3
  5233  00101A  1378               	iorwf	sprintf@flag& (0+255),f,b
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;doprnt.c: 1263: val = -val;
  5237  00101C  6D76               	negf	sprintf@val& (0+255),b
  5238  00101E  1F77               	comf	(sprintf@val+1)& (0+255),f,b
  5239  001020  B0D8               	btfsc	status,0,c
  5240  001022  2B77               	incf	(sprintf@val+1)& (0+255),f,b
  5241  001024                     l474:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;doprnt.c: 1264: }
  5245                           ;doprnt.c: 1266: }
  5246                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5247                           
  5248                           ; BSR set to: 0
  5249  001024  0E01               	movlw	1
  5250  001026  6F7B               	movwf	sprintf@c& (0+255),b
  5251  001028                     l3140:
  5252                           
  5253                           ; BSR set to: 0
  5254  001028  0E05               	movlw	5
  5255  00102A  197B               	xorwf	sprintf@c& (0+255),w,b
  5256  00102C  B4D8               	btfsc	status,2,c
  5257  00102E  D012               	goto	u2690
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;doprnt.c: 1306: if(val < dpowers[c])
  5261                           
  5262                           ; BSR set to: 0
  5263                           
  5264                           ; BSR set to: 0
  5265  001030  517B               	movf	sprintf@c& (0+255),w,b
  5266  001032  0D02               	mullw	2
  5267  001034  0E01               	movlw	low _dpowers
  5268  001036  24F3               	addwf	prodl,w,c
  5269  001038  6EF6               	movwf	tblptrl,c
  5270  00103A  0E03               	movlw	high _dpowers
  5271  00103C  20F4               	addwfc	prodh,w,c
  5272  00103E  6EF7               	movwf	tblptrh,c
  5273  001040                     	if	0	;There are less than 3 active tblptr bytes
  5274  001040                     	endif
  5275  001040  0009               	tblrd		*+
  5276  001042  50F5               	movf	tablat,w,c
  5277  001044  5D76               	subwf	sprintf@val& (0+255),w,b
  5278  001046  0009               	tblrd		*+
  5279  001048  50F5               	movf	tablat,w,c
  5280  00104A  5977               	subwfb	(sprintf@val+1)& (0+255),w,b
  5281  00104C  A0D8               	btfss	status,0,c
  5282  00104E  D002               	goto	u2690
  5283                           
  5284                           ; BSR set to: 0
  5285                           
  5286                           ; BSR set to: 0
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;doprnt.c: 1307: break;
  5290  001050  2B7B               	incf	sprintf@c& (0+255),f,b
  5291  001052  D7EA               	goto	l3140
  5292  001054                     u2690:
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5296                           
  5297                           ; BSR set to: 0
  5298  001054  5179               	movf	sprintf@width& (0+255),w,b
  5299  001056  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5300  001058  B4D8               	btfsc	status,2,c
  5301  00105A  D009               	goto	l478
  5302                           
  5303                           ; BSR set to: 0
  5304  00105C  C078  F06F         	movff	sprintf@flag,??_sprintf
  5305  001060  0E03               	movlw	3
  5306  001062  176F               	andwf	??_sprintf& (0+255),f,b
  5307  001064  B4D8               	btfsc	status,2,c
  5308  001066  D003               	goto	l478
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;doprnt.c: 1346: width--;
  5312  001068  0779               	decf	sprintf@width& (0+255),f,b
  5313  00106A  A0D8               	btfss	status,0,c
  5314  00106C  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5315  00106E                     l478:
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;doprnt.c: 1381: if(width > c)
  5319                           
  5320                           ; BSR set to: 0
  5321  00106E  0E80               	movlw	128
  5322  001070  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5323  001072  0E7F               	movlw	127
  5324  001074  6F6F               	movwf	??_sprintf& (0+255),b
  5325  001076  5179               	movf	sprintf@width& (0+255),w,b
  5326  001078  5D7B               	subwf	sprintf@c& (0+255),w,b
  5327  00107A  517A               	movf	(sprintf@width+1)& (0+255),w,b
  5328  00107C  0A80               	xorlw	128
  5329  00107E  596F               	subwfb	??_sprintf& (0+255),w,b
  5330  001080  B0D8               	btfsc	status,0,c
  5331  001082  D007               	goto	l479
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;doprnt.c: 1382: width -= c;
  5335  001084  517B               	movf	sprintf@c& (0+255),w,b
  5336  001086  5F79               	subwf	sprintf@width& (0+255),f,b
  5337  001088  0E00               	movlw	0
  5338  00108A  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5339  00108C  0EFF               	movlw	255
  5340  00108E  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  5341  001090  D004               	goto	l480
  5342  001092                     l479:
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;doprnt.c: 1383: else
  5346                           ;doprnt.c: 1384: width = 0;
  5347                           
  5348                           ; BSR set to: 0
  5349  001092  0E00               	movlw	0
  5350  001094  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5351  001096  0E00               	movlw	0
  5352  001098  6F79               	movwf	sprintf@width& (0+255),b
  5353  00109A                     l480:
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;doprnt.c: 1387: if(flag & 0x04) {
  5357                           
  5358                           ; BSR set to: 0
  5359  00109A  A578               	btfss	sprintf@flag& (0+255),2,b
  5360  00109C  D01E               	goto	l481
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;doprnt.c: 1392: if(flag & 0x03)
  5364  00109E  C078  F06F         	movff	sprintf@flag,??_sprintf
  5365  0010A2  0E03               	movlw	3
  5366  0010A4  176F               	andwf	??_sprintf& (0+255),f,b
  5367  0010A6  B4D8               	btfsc	status,2,c
  5368  0010A8  D008               	goto	l482
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5372  0010AA  C067  FFD9         	movff	sprintf@sp,fsr2l
  5373  0010AE  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5374  0010B2  0E2D               	movlw	45
  5375  0010B4  6EDF               	movwf	indf2,c
  5376                           
  5377                           ; BSR set to: 0
  5378  0010B6  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5379  0010B8  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5380  0010BA                     l482:
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;doprnt.c: 1415: if(width)
  5384                           
  5385                           ; BSR set to: 0
  5386  0010BA  5179               	movf	sprintf@width& (0+255),w,b
  5387  0010BC  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5388  0010BE  B4D8               	btfsc	status,2,c
  5389  0010C0  D02D               	goto	l490
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5393                           
  5394                           ; BSR set to: 0
  5395                           
  5396                           ;doprnt.c: 1416: do
  5397  0010C2  C067  FFD9         	movff	sprintf@sp,fsr2l
  5398  0010C6  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5399  0010CA  0E30               	movlw	48
  5400  0010CC  6EDF               	movwf	indf2,c
  5401                           
  5402                           ; BSR set to: 0
  5403  0010CE  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5404  0010D0  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;doprnt.c: 1418: while(--width);
  5408  0010D2  0779               	decf	sprintf@width& (0+255),f,b
  5409  0010D4  A0D8               	btfss	status,0,c
  5410  0010D6  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5411  0010D8  D7F0               	goto	l482
  5412  0010DA                     l481:
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;doprnt.c: 1422: {
  5416                           ;doprnt.c: 1424: if(width
  5417                           ;doprnt.c: 1428: )
  5418                           
  5419                           ; BSR set to: 0
  5420  0010DA  5179               	movf	sprintf@width& (0+255),w,b
  5421  0010DC  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5422  0010DE  B4D8               	btfsc	status,2,c
  5423  0010E0  D00F               	goto	u2780
  5424  0010E2                     u2770:
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5428                           
  5429                           ; BSR set to: 0
  5430                           
  5431                           ;doprnt.c: 1429: do
  5432  0010E2  C067  FFD9         	movff	sprintf@sp,fsr2l
  5433  0010E6  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5434  0010EA  0E20               	movlw	32
  5435  0010EC  6EDF               	movwf	indf2,c
  5436                           
  5437                           ; BSR set to: 0
  5438  0010EE  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5439  0010F0  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;doprnt.c: 1431: while(--width);
  5443  0010F2  0779               	decf	sprintf@width& (0+255),f,b
  5444  0010F4  A0D8               	btfss	status,0,c
  5445  0010F6  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5446  0010F8  5179               	movf	sprintf@width& (0+255),w,b
  5447  0010FA  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5448  0010FC  A4D8               	btfss	status,2,c
  5449  0010FE  D7F1               	goto	u2770
  5450  001100                     u2780:
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;doprnt.c: 1438: if(flag & 0x03)
  5454                           
  5455                           ; BSR set to: 0
  5456                           
  5457                           ; BSR set to: 0
  5458  001100  C078  F06F         	movff	sprintf@flag,??_sprintf
  5459  001104  0E03               	movlw	3
  5460  001106  176F               	andwf	??_sprintf& (0+255),f,b
  5461  001108  B4D8               	btfsc	status,2,c
  5462  00110A  D008               	goto	l490
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5466  00110C  C067  FFD9         	movff	sprintf@sp,fsr2l
  5467  001110  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5468  001114  0E2D               	movlw	45
  5469  001116  6EDF               	movwf	indf2,c
  5470                           
  5471                           ; BSR set to: 0
  5472  001118  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5473  00111A  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5474  00111C                     l490:
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;doprnt.c: 1469: }
  5478                           ;doprnt.c: 1472: prec = c;
  5479                           
  5480                           ; BSR set to: 0
  5481                           
  5482                           ; BSR set to: 0
  5483  00111C  C07B  F075         	movff	sprintf@c,sprintf@prec
  5484                           
  5485                           ;doprnt.c: 1474: while(prec--) {
  5486  001120  D02B               	goto	l491
  5487  001122                     
  5488                           ; BSR set to: 0
  5489                           ;doprnt.c: 1478: {
  5490                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5491                           
  5492                           ; BSR set to: 0
  5493  001122  5175               	movf	sprintf@prec& (0+255),w,b
  5494  001124  0D02               	mullw	2
  5495  001126  0E01               	movlw	low _dpowers
  5496  001128  24F3               	addwf	prodl,w,c
  5497  00112A  6EF6               	movwf	tblptrl,c
  5498  00112C  0E03               	movlw	high _dpowers
  5499  00112E  20F4               	addwfc	prodh,w,c
  5500  001130  6EF7               	movwf	tblptrh,c
  5501  001132                     	if	0	;There are less than 3 active tblptr bytes
  5502  001132                     	endif
  5503  001132  0009               	tblrd		*+
  5504  001134  CFF5 F02E          	movff	tablat,___lwdiv@divisor
  5505  001138  000A               	tblrd		*-
  5506  00113A  CFF5 F02F          	movff	tablat,___lwdiv@divisor+1
  5507  00113E  C076  F02C         	movff	sprintf@val,___lwdiv@dividend
  5508  001142  C077  F02D         	movff	sprintf@val+1,___lwdiv@dividend+1
  5509  001146  ECA8  F00C         	call	___lwdiv	;wreg free
  5510  00114A  C02C  F063         	movff	?___lwdiv,___lwmod@dividend
  5511  00114E  C02D  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  5512  001152  0E00               	movlw	0
  5513  001154  0100               	movlb	0	; () banked
  5514  001156  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  5515  001158  0E0A               	movlw	10
  5516  00115A  6F65               	movwf	___lwmod@divisor& (0+255),b
  5517  00115C  ECD2  F00C         	call	___lwmod	;wreg free
  5518  001160  0100               	movlb	0	; () banked
  5519  001162  5163               	movf	?___lwmod& (0+255),w,b
  5520  001164  0F30               	addlw	48
  5521  001166  6F7B               	movwf	sprintf@c& (0+255),b
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;doprnt.c: 1523: }
  5525                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5526  001168  C067  FFD9         	movff	sprintf@sp,fsr2l
  5527  00116C  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5528  001170  C07B  FFDF         	movff	sprintf@c,indf2
  5529                           
  5530                           ; BSR set to: 0
  5531  001174  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5532  001176  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5533  001178                     l491:
  5534                           
  5535                           ; BSR set to: 0
  5536                           
  5537                           ; BSR set to: 0
  5538  001178  0775               	decf	sprintf@prec& (0+255),f,b
  5539  00117A  2975               	incf	sprintf@prec& (0+255),w,b
  5540  00117C  A4D8               	btfss	status,2,c
  5541  00117E  D7D1               	goto	l492
  5542  001180                     u2800:
  5543                           
  5544                           ; BSR set to: 0
  5545                           
  5546                           ; BSR set to: 0
  5547  001180  C069  FFF6         	movff	sprintf@f,tblptrl
  5548  001184  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5549  001188  0100               	movlb	0	; () banked
  5550  00118A  4B69               	infsnz	sprintf@f& (0+255),f,b
  5551  00118C  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5552  00118E                     	if	0	;tblptru may be non-zero
  5553  00118E                     	endif
  5554  00118E                     	if	0	;tblptru may be non-zero
  5555  00118E                     	endif
  5556  00118E  0008               	tblrd		*
  5557  001190  CFF5 F07B          	movff	tablat,sprintf@c
  5558  001194  517B               	movf	sprintf@c& (0+255),w,b
  5559  001196  A4D8               	btfss	status,2,c
  5560  001198  D6BD               	goto	l456
  5561  00119A                     u2810:
  5562                           
  5563                           ;doprnt.c: 1538: *sp = 0;
  5564                           
  5565                           ; BSR set to: 0
  5566                           
  5567                           ;doprnt.c: 1525: }
  5568                           ;doprnt.c: 1533: }
  5569                           ;doprnt.c: 1535: alldone:
  5570                           
  5571                           ; BSR set to: 0
  5572  00119A  C067  FFD9         	movff	sprintf@sp,fsr2l
  5573  00119E  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5574  0011A2  0E00               	movlw	0
  5575  0011A4  6EDF               	movwf	indf2,c
  5576  0011A6  0012               	return	
  5577  0011A8                     __end_of_sprintf:
  5578                           	opt stack 0
  5579                           tblptru	equ	0xFF8
  5580                           tblptrh	equ	0xFF7
  5581                           tblptrl	equ	0xFF6
  5582                           tablat	equ	0xFF5
  5583                           prodh	equ	0xFF4
  5584                           prodl	equ	0xFF3
  5585                           intcon	equ	0xFF2
  5586                           postinc0	equ	0xFEE
  5587                           wreg	equ	0xFE8
  5588                           indf1	equ	0xFE7
  5589                           plusw1	equ	0xFE3
  5590                           fsr1h	equ	0xFE2
  5591                           fsr1l	equ	0xFE1
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           plusw2	equ	0xFDB
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function _isdigit *****************
  5601 ;; Defined at:
  5602 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  c               1    wreg     unsigned char 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  c               1   45[COMRAM] unsigned char 
  5607 ;; Return value:  Size  Location     Type
  5608 ;;		None               void
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5616 ;;      Params:         0       0       0       0
  5617 ;;      Locals:         2       0       0       0
  5618 ;;      Temps:          1       0       0       0
  5619 ;;      Totals:         3       0       0       0
  5620 ;;Total ram usage:        3 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    3
  5623 ;; This function calls:
  5624 ;;		Nothing
  5625 ;; This function is called by:
  5626 ;;		_sprintf
  5627 ;; This function uses a non-reentrant model
  5628 ;;
  5629                           
  5630                           	psect	text19
  5631  001C48                     __ptext19:
  5632                           	opt stack 0
  5633  001C48                     _isdigit:
  5634                           	opt stack 26
  5635                           
  5636                           ;incstack = 0
  5637                           ;isdigit@c stored from wreg
  5638  001C48  6E2E               	movwf	isdigit@c,c
  5639  001C4A  0E00               	movlw	0
  5640  001C4C  6E2D               	movwf	_isdigit$1716,c
  5641  001C4E  0E3A               	movlw	58
  5642  001C50  602E               	cpfslt	isdigit@c,c
  5643  001C52  D005               	goto	l825
  5644  001C54  0E2F               	movlw	47
  5645  001C56  642E               	cpfsgt	isdigit@c,c
  5646  001C58  D002               	goto	l825
  5647  001C5A  0E01               	movlw	1
  5648  001C5C  6E2D               	movwf	_isdigit$1716,c
  5649  001C5E                     l825:
  5650  001C5E  C02D  F02C         	movff	_isdigit$1716,??_isdigit
  5651  001C62  302C               	rrcf	??_isdigit,w,c
  5652  001C64  0012               	return	
  5653  001C66                     __end_of_isdigit:
  5654                           	opt stack 0
  5655                           tblptru	equ	0xFF8
  5656                           tblptrh	equ	0xFF7
  5657                           tblptrl	equ	0xFF6
  5658                           tablat	equ	0xFF5
  5659                           prodh	equ	0xFF4
  5660                           prodl	equ	0xFF3
  5661                           intcon	equ	0xFF2
  5662                           postinc0	equ	0xFEE
  5663                           wreg	equ	0xFE8
  5664                           indf1	equ	0xFE7
  5665                           plusw1	equ	0xFE3
  5666                           fsr1h	equ	0xFE2
  5667                           fsr1l	equ	0xFE1
  5668                           indf2	equ	0xFDF
  5669                           postinc2	equ	0xFDE
  5670                           postdec2	equ	0xFDD
  5671                           plusw2	equ	0xFDB
  5672                           fsr2h	equ	0xFDA
  5673                           fsr2l	equ	0xFD9
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function ___wmul *****************
  5677 ;; Defined at:
  5678 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  multiplier      2   43[COMRAM] unsigned int 
  5681 ;;  multiplicand    2   45[COMRAM] unsigned int 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  product         2   47[COMRAM] unsigned int 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  2   43[COMRAM] unsigned int 
  5686 ;; Registers used:
  5687 ;;		wreg, status,2, status,0, prodl, prodh
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5693 ;;      Params:         4       0       0       0
  5694 ;;      Locals:         2       0       0       0
  5695 ;;      Temps:          0       0       0       0
  5696 ;;      Totals:         6       0       0       0
  5697 ;;Total ram usage:        6 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    3
  5700 ;; This function calls:
  5701 ;;		Nothing
  5702 ;; This function is called by:
  5703 ;;		_setMotorPWM
  5704 ;;		_sprintf
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text20
  5709  001C00                     __ptext20:
  5710                           	opt stack 0
  5711  001C00                     ___wmul:
  5712                           	opt stack 24
  5713                           
  5714                           ;incstack = 0
  5715  001C00  502C               	movf	___wmul@multiplier,w,c
  5716  001C02  022E               	mulwf	___wmul@multiplicand,c
  5717  001C04  CFF3 F030          	movff	prodl,___wmul@product
  5718  001C08  CFF4 F031          	movff	prodh,___wmul@product+1
  5719  001C0C  502C               	movf	___wmul@multiplier,w,c
  5720  001C0E  022F               	mulwf	___wmul@multiplicand+1,c
  5721  001C10  50F3               	movf	prodl,w,c
  5722  001C12  2631               	addwf	___wmul@product+1,f,c
  5723  001C14  502D               	movf	___wmul@multiplier+1,w,c
  5724  001C16  022E               	mulwf	___wmul@multiplicand,c
  5725  001C18  50F3               	movf	prodl,w,c
  5726  001C1A  2631               	addwf	___wmul@product+1,f,c
  5727  001C1C  C030  F02C         	movff	___wmul@product,?___wmul
  5728  001C20  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  5729  001C24  0012               	return	
  5730  001C26                     __end_of___wmul:
  5731                           	opt stack 0
  5732                           tblptru	equ	0xFF8
  5733                           tblptrh	equ	0xFF7
  5734                           tblptrl	equ	0xFF6
  5735                           tablat	equ	0xFF5
  5736                           prodh	equ	0xFF4
  5737                           prodl	equ	0xFF3
  5738                           intcon	equ	0xFF2
  5739                           postinc0	equ	0xFEE
  5740                           wreg	equ	0xFE8
  5741                           indf1	equ	0xFE7
  5742                           plusw1	equ	0xFE3
  5743                           fsr1h	equ	0xFE2
  5744                           fsr1l	equ	0xFE1
  5745                           indf2	equ	0xFDF
  5746                           postinc2	equ	0xFDE
  5747                           postdec2	equ	0xFDD
  5748                           plusw2	equ	0xFDB
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function ___lwmod *****************
  5754 ;; Defined at:
  5755 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  dividend        2    3[BANK0 ] unsigned int 
  5758 ;;  divisor         2    5[BANK0 ] unsigned int 
  5759 ;; Auto vars:     Size  Location     Type
  5760 ;;  counter         1   47[COMRAM] unsigned char 
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  2    3[BANK0 ] unsigned int 
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5770 ;;      Params:         0       4       0       0
  5771 ;;      Locals:         1       0       0       0
  5772 ;;      Temps:          0       0       0       0
  5773 ;;      Totals:         1       4       0       0
  5774 ;;Total ram usage:        5 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    3
  5777 ;; This function calls:
  5778 ;;		Nothing
  5779 ;; This function is called by:
  5780 ;;		_sprintf
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           	psect	text21
  5785  0019A4                     __ptext21:
  5786                           	opt stack 0
  5787  0019A4                     ___lwmod:
  5788                           	opt stack 26
  5789                           
  5790                           ;incstack = 0
  5791  0019A4  0100               	movlb	0	; () banked
  5792  0019A6  5165               	movf	___lwmod@divisor& (0+255),w,b
  5793  0019A8  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5794  0019AA  B4D8               	btfsc	status,2,c
  5795  0019AC  D018               	goto	l919
  5796                           
  5797                           ; BSR set to: 0
  5798  0019AE  0E01               	movlw	1
  5799  0019B0  6E30               	movwf	___lwmod@counter,c
  5800  0019B2  D004               	goto	l914
  5801  0019B4                     
  5802                           ; BSR set to: 0
  5803                           
  5804                           ; BSR set to: 0
  5805  0019B4  90D8               	bcf	status,0,c
  5806  0019B6  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  5807  0019B8  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5808  0019BA  2A30               	incf	___lwmod@counter,f,c
  5809  0019BC                     l914:
  5810                           
  5811                           ; BSR set to: 0
  5812                           
  5813                           ; BSR set to: 0
  5814  0019BC  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5815  0019BE  D7FA               	goto	l915
  5816  0019C0                     u1450:
  5817                           
  5818                           ; BSR set to: 0
  5819                           
  5820                           ; BSR set to: 0
  5821                           
  5822                           ; BSR set to: 0
  5823  0019C0  5165               	movf	___lwmod@divisor& (0+255),w,b
  5824  0019C2  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  5825  0019C4  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5826  0019C6  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5827  0019C8  A0D8               	btfss	status,0,c
  5828  0019CA  D004               	goto	l918
  5829                           
  5830                           ; BSR set to: 0
  5831  0019CC  5165               	movf	___lwmod@divisor& (0+255),w,b
  5832  0019CE  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  5833  0019D0  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5834  0019D2  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5835  0019D4                     l918:
  5836                           
  5837                           ; BSR set to: 0
  5838                           
  5839                           ; BSR set to: 0
  5840  0019D4  90D8               	bcf	status,0,c
  5841  0019D6  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5842  0019D8  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  5843                           
  5844                           ; BSR set to: 0
  5845  0019DA  2E30               	decfsz	___lwmod@counter,f,c
  5846  0019DC  D7F1               	goto	u1450
  5847  0019DE                     l919:
  5848                           
  5849                           ; BSR set to: 0
  5850                           
  5851                           ; BSR set to: 0
  5852  0019DE  C063  F063         	movff	___lwmod@dividend,?___lwmod
  5853  0019E2  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  5854                           
  5855                           ; BSR set to: 0
  5856  0019E6  0012               	return		;funcret
  5857  0019E8                     __end_of___lwmod:
  5858                           	opt stack 0
  5859                           tblptru	equ	0xFF8
  5860                           tblptrh	equ	0xFF7
  5861                           tblptrl	equ	0xFF6
  5862                           tablat	equ	0xFF5
  5863                           prodh	equ	0xFF4
  5864                           prodl	equ	0xFF3
  5865                           intcon	equ	0xFF2
  5866                           postinc0	equ	0xFEE
  5867                           wreg	equ	0xFE8
  5868                           indf1	equ	0xFE7
  5869                           plusw1	equ	0xFE3
  5870                           fsr1h	equ	0xFE2
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           postinc2	equ	0xFDE
  5874                           postdec2	equ	0xFDD
  5875                           plusw2	equ	0xFDB
  5876                           fsr2h	equ	0xFDA
  5877                           fsr2l	equ	0xFD9
  5878                           status	equ	0xFD8
  5879                           
  5880 ;; *************** function ___lwdiv *****************
  5881 ;; Defined at:
  5882 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;  dividend        2   43[COMRAM] unsigned int 
  5885 ;;  divisor         2   45[COMRAM] unsigned int 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  quotient        2    1[BANK0 ] unsigned int 
  5888 ;;  counter         1    0[BANK0 ] unsigned char 
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  2   43[COMRAM] unsigned int 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, status,0
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5898 ;;      Params:         4       0       0       0
  5899 ;;      Locals:         0       3       0       0
  5900 ;;      Temps:          0       0       0       0
  5901 ;;      Totals:         4       3       0       0
  5902 ;;Total ram usage:        7 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    3
  5905 ;; This function calls:
  5906 ;;		Nothing
  5907 ;; This function is called by:
  5908 ;;		_sprintf
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text22
  5913  001950                     __ptext22:
  5914                           	opt stack 0
  5915  001950                     ___lwdiv:
  5916                           	opt stack 26
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;incstack = 0
  5920  001950  0E00               	movlw	0
  5921  001952  0100               	movlb	0	; () banked
  5922  001954  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5923  001956  0E00               	movlw	0
  5924  001958  6F61               	movwf	___lwdiv@quotient& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927  00195A  502E               	movf	___lwdiv@divisor,w,c
  5928  00195C  102F               	iorwf	___lwdiv@divisor+1,w,c
  5929  00195E  B4D8               	btfsc	status,2,c
  5930  001960  D01C               	goto	l909
  5931                           
  5932                           ; BSR set to: 0
  5933  001962  0E01               	movlw	1
  5934  001964  6F60               	movwf	___lwdiv@counter& (0+255),b
  5935  001966  D004               	goto	l904
  5936  001968                     
  5937                           ; BSR set to: 0
  5938                           
  5939                           ; BSR set to: 0
  5940  001968  90D8               	bcf	status,0,c
  5941  00196A  362E               	rlcf	___lwdiv@divisor,f,c
  5942  00196C  362F               	rlcf	___lwdiv@divisor+1,f,c
  5943  00196E  2B60               	incf	___lwdiv@counter& (0+255),f,b
  5944  001970                     l904:
  5945                           
  5946                           ; BSR set to: 0
  5947                           
  5948                           ; BSR set to: 0
  5949  001970  AE2F               	btfss	___lwdiv@divisor+1,7,c
  5950  001972  D7FA               	goto	l905
  5951  001974                     u2460:
  5952                           
  5953                           ; BSR set to: 0
  5954                           
  5955                           ; BSR set to: 0
  5956                           
  5957                           ; BSR set to: 0
  5958  001974  90D8               	bcf	status,0,c
  5959  001976  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  5960  001978  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5961                           
  5962                           ; BSR set to: 0
  5963  00197A  502E               	movf	___lwdiv@divisor,w,c
  5964  00197C  5C2C               	subwf	___lwdiv@dividend,w,c
  5965  00197E  502F               	movf	___lwdiv@divisor+1,w,c
  5966  001980  582D               	subwfb	___lwdiv@dividend+1,w,c
  5967  001982  A0D8               	btfss	status,0,c
  5968  001984  D005               	goto	l908
  5969                           
  5970                           ; BSR set to: 0
  5971  001986  502E               	movf	___lwdiv@divisor,w,c
  5972  001988  5E2C               	subwf	___lwdiv@dividend,f,c
  5973  00198A  502F               	movf	___lwdiv@divisor+1,w,c
  5974  00198C  5A2D               	subwfb	___lwdiv@dividend+1,f,c
  5975                           
  5976                           ; BSR set to: 0
  5977  00198E  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  5978  001990                     l908:
  5979                           
  5980                           ; BSR set to: 0
  5981                           
  5982                           ; BSR set to: 0
  5983  001990  90D8               	bcf	status,0,c
  5984  001992  322F               	rrcf	___lwdiv@divisor+1,f,c
  5985  001994  322E               	rrcf	___lwdiv@divisor,f,c
  5986                           
  5987                           ; BSR set to: 0
  5988  001996  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  5989  001998  D7ED               	goto	u2460
  5990  00199A                     l909:
  5991                           
  5992                           ; BSR set to: 0
  5993                           
  5994                           ; BSR set to: 0
  5995  00199A  C061  F02C         	movff	___lwdiv@quotient,?___lwdiv
  5996  00199E  C062  F02D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5997                           
  5998                           ; BSR set to: 0
  5999  0019A2  0012               	return		;funcret
  6000  0019A4                     __end_of___lwdiv:
  6001                           	opt stack 0
  6002                           tblptru	equ	0xFF8
  6003                           tblptrh	equ	0xFF7
  6004                           tblptrl	equ	0xFF6
  6005                           tablat	equ	0xFF5
  6006                           prodh	equ	0xFF4
  6007                           prodl	equ	0xFF3
  6008                           intcon	equ	0xFF2
  6009                           postinc0	equ	0xFEE
  6010                           wreg	equ	0xFE8
  6011                           indf1	equ	0xFE7
  6012                           plusw1	equ	0xFE3
  6013                           fsr1h	equ	0xFE2
  6014                           fsr1l	equ	0xFE1
  6015                           indf2	equ	0xFDF
  6016                           postinc2	equ	0xFDE
  6017                           postdec2	equ	0xFDD
  6018                           plusw2	equ	0xFDB
  6019                           fsr2h	equ	0xFDA
  6020                           fsr2l	equ	0xFD9
  6021                           status	equ	0xFD8
  6022                           
  6023 ;; *************** function _grabRightIR *****************
  6024 ;; Defined at:
  6025 ;;		line 74 in file "IR_Reading.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6030 ;;  i               1    2[BANK0 ] unsigned char 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;                  2   43[COMRAM] unsigned int 
  6033 ;; Registers used:
  6034 ;;		wreg, status,2, status,0
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6040 ;;      Params:         2       0       0       0
  6041 ;;      Locals:         0       3       0       0
  6042 ;;      Temps:          3       0       0       0
  6043 ;;      Totals:         5       3       0       0
  6044 ;;Total ram usage:        8 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    3
  6047 ;; This function calls:
  6048 ;;		Nothing
  6049 ;; This function is called by:
  6050 ;;		_ScanIR
  6051 ;;		_ScanWithRange
  6052 ;;		_main
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text23
  6057  0017AA                     __ptext23:
  6058                           	opt stack 0
  6059  0017AA                     _grabRightIR:
  6060                           	opt stack 27
  6061                           
  6062                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;incstack = 0
  6066  0017AA  0E00               	movlw	0
  6067  0017AC  0100               	movlb	0	; () banked
  6068  0017AE  6F61               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  6069  0017B0  0E00               	movlw	0
  6070  0017B2  6F60               	movwf	grabRightIR@IR_signal& (0+255),b
  6071                           
  6072                           ;IR_Reading.c: 77: unsigned char i=0;
  6073  0017B4  0E00               	movlw	0
  6074  0017B6  6F62               	movwf	grabRightIR@i& (0+255),b
  6075                           
  6076                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6077  0017B8  0E00               	movlw	0
  6078  0017BA  6F62               	movwf	grabRightIR@i& (0+255),b
  6079  0017BC                     l3046:
  6080                           
  6081                           ; BSR set to: 0
  6082  0017BC  0E03               	movlw	3
  6083  0017BE  6562               	cpfsgt	grabRightIR@i& (0+255),b
  6084  0017C0  D001               	goto	l105
  6085  0017C2  D01F               	goto	u2540
  6086  0017C4                     l105:
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6090                           
  6091                           ; BSR set to: 0
  6092  0017C4  5069               	movf	3945,w,c	;volatile
  6093  0017C6  6E2E               	movwf	??_grabRightIR& (0+255),c
  6094  0017C8  6A2F               	clrf	(??_grabRightIR+1)& (0+255),c
  6095  0017CA  0E07               	movlw	7
  6096  0017CC                     u2535:
  6097  0017CC  90D8               	bcf	status,0,c
  6098  0017CE  362E               	rlcf	??_grabRightIR,f,c
  6099  0017D0  362F               	rlcf	??_grabRightIR+1,f,c
  6100  0017D2  2EE8               	decfsz	wreg,f,c
  6101  0017D4  D7FB               	goto	u2535
  6102  0017D6  CF68 F030          	movff	3944,??_grabRightIR+2	;volatile
  6103  0017DA  90D8               	bcf	status,0,c
  6104  0017DC  3230               	rrcf	??_grabRightIR+2,f,c
  6105  0017DE  5030               	movf	??_grabRightIR+2,w,c
  6106  0017E0  122E               	iorwf	??_grabRightIR,f,c
  6107  0017E2  0E00               	movlw	0
  6108  0017E4  122F               	iorwf	??_grabRightIR+1,f,c
  6109  0017E6  502E               	movf	??_grabRightIR,w,c
  6110  0017E8  2760               	addwf	grabRightIR@IR_signal& (0+255),f,b
  6111  0017EA  502F               	movf	??_grabRightIR+1,w,c
  6112  0017EC  2361               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6116  0017EE  0E82               	movlw	130
  6117  0017F0  6E2E               	movwf	??_grabRightIR& (0+255),c
  6118  0017F2  0EDE               	movlw	222
  6119  0017F4                     u3387:
  6120  0017F4  2EE8               	decfsz	wreg,f,c
  6121  0017F6  D7FE               	bra	u3387
  6122  0017F8  2E2E               	decfsz	??_grabRightIR& (0+255),f,c
  6123  0017FA  D7FC               	bra	u3387
  6124  0017FC  0100               	movlb	0	; () banked
  6125  0017FE  2B62               	incf	grabRightIR@i& (0+255),f,b
  6126  001800  D7DD               	goto	l3046
  6127  001802                     u2540:
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;IR_Reading.c: 83: }
  6131                           ;IR_Reading.c: 85: return IR_signal>>2;
  6132                           
  6133                           ; BSR set to: 0
  6134  001802  C060  F02E         	movff	grabRightIR@IR_signal,??_grabRightIR
  6135  001806  C061  F02F         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6136  00180A  90D8               	bcf	status,0,c
  6137  00180C  322F               	rrcf	??_grabRightIR+1,f,c
  6138  00180E  322E               	rrcf	??_grabRightIR,f,c
  6139  001810  90D8               	bcf	status,0,c
  6140  001812  322F               	rrcf	??_grabRightIR+1,f,c
  6141  001814  322E               	rrcf	??_grabRightIR,f,c
  6142  001816  C02E  F02C         	movff	??_grabRightIR,?_grabRightIR
  6143  00181A  C02F  F02D         	movff	??_grabRightIR+1,?_grabRightIR+1
  6144  00181E  0012               	return	
  6145  001820                     __end_of_grabRightIR:
  6146                           	opt stack 0
  6147                           tblptru	equ	0xFF8
  6148                           tblptrh	equ	0xFF7
  6149                           tblptrl	equ	0xFF6
  6150                           tablat	equ	0xFF5
  6151                           prodh	equ	0xFF4
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           postinc0	equ	0xFEE
  6155                           wreg	equ	0xFE8
  6156                           indf1	equ	0xFE7
  6157                           plusw1	equ	0xFE3
  6158                           fsr1h	equ	0xFE2
  6159                           fsr1l	equ	0xFE1
  6160                           indf2	equ	0xFDF
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           plusw2	equ	0xFDB
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function _grabLeftIR *****************
  6169 ;; Defined at:
  6170 ;;		line 90 in file "IR_Reading.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;		None
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6175 ;;  i               1    2[BANK0 ] unsigned char 
  6176 ;; Return value:  Size  Location     Type
  6177 ;;                  2   43[COMRAM] unsigned int 
  6178 ;; Registers used:
  6179 ;;		wreg, status,2, status,0
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6185 ;;      Params:         2       0       0       0
  6186 ;;      Locals:         0       3       0       0
  6187 ;;      Temps:          3       0       0       0
  6188 ;;      Totals:         5       3       0       0
  6189 ;;Total ram usage:        8 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; Hardware stack levels required when called:    3
  6192 ;; This function calls:
  6193 ;;		Nothing
  6194 ;; This function is called by:
  6195 ;;		_ScanIR
  6196 ;;		_ScanWithRange
  6197 ;;		_main
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text24
  6202  001820                     __ptext24:
  6203                           	opt stack 0
  6204  001820                     _grabLeftIR:
  6205                           	opt stack 27
  6206                           
  6207                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;incstack = 0
  6211  001820  0E00               	movlw	0
  6212  001822  0100               	movlb	0	; () banked
  6213  001824  6F61               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  6214  001826  0E00               	movlw	0
  6215  001828  6F60               	movwf	grabLeftIR@IR_signal& (0+255),b
  6216                           
  6217                           ;IR_Reading.c: 93: unsigned char i=0;
  6218  00182A  0E00               	movlw	0
  6219  00182C  6F62               	movwf	grabLeftIR@i& (0+255),b
  6220                           
  6221                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6222  00182E  0E00               	movlw	0
  6223  001830  6F62               	movwf	grabLeftIR@i& (0+255),b
  6224  001832                     l3062:
  6225                           
  6226                           ; BSR set to: 0
  6227  001832  0E03               	movlw	3
  6228  001834  6562               	cpfsgt	grabLeftIR@i& (0+255),b
  6229  001836  D001               	goto	l110
  6230  001838  D01F               	goto	u2570
  6231  00183A                     l110:
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6235                           
  6236                           ; BSR set to: 0
  6237  00183A  5067               	movf	3943,w,c	;volatile
  6238  00183C  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6239  00183E  6A2F               	clrf	(??_grabLeftIR+1)& (0+255),c
  6240  001840  0E07               	movlw	7
  6241  001842                     u2565:
  6242  001842  90D8               	bcf	status,0,c
  6243  001844  362E               	rlcf	??_grabLeftIR,f,c
  6244  001846  362F               	rlcf	??_grabLeftIR+1,f,c
  6245  001848  2EE8               	decfsz	wreg,f,c
  6246  00184A  D7FB               	goto	u2565
  6247  00184C  CF66 F030          	movff	3942,??_grabLeftIR+2	;volatile
  6248  001850  90D8               	bcf	status,0,c
  6249  001852  3230               	rrcf	??_grabLeftIR+2,f,c
  6250  001854  5030               	movf	??_grabLeftIR+2,w,c
  6251  001856  122E               	iorwf	??_grabLeftIR,f,c
  6252  001858  0E00               	movlw	0
  6253  00185A  122F               	iorwf	??_grabLeftIR+1,f,c
  6254  00185C  502E               	movf	??_grabLeftIR,w,c
  6255  00185E  2760               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  6256  001860  502F               	movf	??_grabLeftIR+1,w,c
  6257  001862  2361               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6261  001864  0E82               	movlw	130
  6262  001866  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6263  001868  0EDE               	movlw	222
  6264  00186A                     u3397:
  6265  00186A  2EE8               	decfsz	wreg,f,c
  6266  00186C  D7FE               	bra	u3397
  6267  00186E  2E2E               	decfsz	??_grabLeftIR& (0+255),f,c
  6268  001870  D7FC               	bra	u3397
  6269  001872  0100               	movlb	0	; () banked
  6270  001874  2B62               	incf	grabLeftIR@i& (0+255),f,b
  6271  001876  D7DD               	goto	l3062
  6272  001878                     u2570:
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;IR_Reading.c: 99: }
  6276                           ;IR_Reading.c: 101: return IR_signal>>2;
  6277                           
  6278                           ; BSR set to: 0
  6279  001878  C060  F02E         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6280  00187C  C061  F02F         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6281  001880  90D8               	bcf	status,0,c
  6282  001882  322F               	rrcf	??_grabLeftIR+1,f,c
  6283  001884  322E               	rrcf	??_grabLeftIR,f,c
  6284  001886  90D8               	bcf	status,0,c
  6285  001888  322F               	rrcf	??_grabLeftIR+1,f,c
  6286  00188A  322E               	rrcf	??_grabLeftIR,f,c
  6287  00188C  C02E  F02C         	movff	??_grabLeftIR,?_grabLeftIR
  6288  001890  C02F  F02D         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6289  001894  0012               	return	
  6290  001896                     __end_of_grabLeftIR:
  6291                           	opt stack 0
  6292                           tblptru	equ	0xFF8
  6293                           tblptrh	equ	0xFF7
  6294                           tblptrl	equ	0xFF6
  6295                           tablat	equ	0xFF5
  6296                           prodh	equ	0xFF4
  6297                           prodl	equ	0xFF3
  6298                           intcon	equ	0xFF2
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           indf1	equ	0xFE7
  6302                           plusw1	equ	0xFE3
  6303                           fsr1h	equ	0xFE2
  6304                           fsr1l	equ	0xFE1
  6305                           indf2	equ	0xFDF
  6306                           postinc2	equ	0xFDE
  6307                           postdec2	equ	0xFDD
  6308                           plusw2	equ	0xFDB
  6309                           fsr2h	equ	0xFDA
  6310                           fsr2l	equ	0xFD9
  6311                           status	equ	0xFD8
  6312                           
  6313 ;; *************** function _SetLine *****************
  6314 ;; Defined at:
  6315 ;;		line 74 in file "LCD.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  line            1    wreg     unsigned char 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  line            1    0[BANK0 ] unsigned char 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  1    wreg      void 
  6322 ;; Registers used:
  6323 ;;		wreg, status,2, status,0, cstack
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6329 ;;      Params:         0       0       0       0
  6330 ;;      Locals:         0       1       0       0
  6331 ;;      Temps:          0       0       0       0
  6332 ;;      Totals:         0       1       0       0
  6333 ;;Total ram usage:        1 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; Hardware stack levels required when called:    6
  6336 ;; This function calls:
  6337 ;;		_SendLCD
  6338 ;; This function is called by:
  6339 ;;		_ScanIR
  6340 ;;		_ScanWithRange
  6341 ;;		_main
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           	psect	text25
  6346  001B42                     __ptext25:
  6347                           	opt stack 0
  6348  001B42                     _SetLine:
  6349                           	opt stack 24
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;incstack = 0
  6353                           ;SetLine@line stored from wreg
  6354  001B42  0100               	movlb	0	; () banked
  6355  001B44  6F60               	movwf	SetLine@line& (0+255),b
  6356                           
  6357                           ;LCD.c: 75: if (line==1) {
  6358  001B46  0100               	movlb	0	; () banked
  6359  001B48  0560               	decf	SetLine@line& (0+255),w,b
  6360  001B4A  A4D8               	btfss	status,2,c
  6361  001B4C  D006               	goto	l147
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;LCD.c: 76: SendLCD(0x80,0);
  6365  001B4E  0E00               	movlw	0
  6366  001B50  6E30               	movwf	SendLCD@type,c
  6367  001B52  0E80               	movlw	128
  6368  001B54  ECD5  F00D         	call	_SendLCD
  6369                           
  6370                           ;LCD.c: 77: } else if (line==2) {
  6371  001B58  D00A               	goto	l149
  6372  001B5A                     l147:
  6373  001B5A  0E02               	movlw	2
  6374  001B5C  0100               	movlb	0	; () banked
  6375  001B5E  1960               	xorwf	SetLine@line& (0+255),w,b
  6376  001B60  A4D8               	btfss	status,2,c
  6377  001B62  D005               	goto	l149
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;LCD.c: 78: SendLCD(0xC0,0);
  6381  001B64  0E00               	movlw	0
  6382  001B66  6E30               	movwf	SendLCD@type,c
  6383  001B68  0EC0               	movlw	192
  6384  001B6A  ECD5  F00D         	call	_SendLCD
  6385  001B6E                     l149:
  6386                           
  6387                           ;LCD.c: 79: }
  6388                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6389  001B6E  0E21               	movlw	33
  6390  001B70                     u3407:
  6391  001B70  2EE8               	decfsz	wreg,f,c
  6392  001B72  D7FE               	bra	u3407
  6393  001B74  F000               	nop	
  6394  001B76  0012               	return		;funcret
  6395  001B78                     __end_of_SetLine:
  6396                           	opt stack 0
  6397                           tblptru	equ	0xFF8
  6398                           tblptrh	equ	0xFF7
  6399                           tblptrl	equ	0xFF6
  6400                           tablat	equ	0xFF5
  6401                           prodh	equ	0xFF4
  6402                           prodl	equ	0xFF3
  6403                           intcon	equ	0xFF2
  6404                           postinc0	equ	0xFEE
  6405                           wreg	equ	0xFE8
  6406                           indf1	equ	0xFE7
  6407                           plusw1	equ	0xFE3
  6408                           fsr1h	equ	0xFE2
  6409                           fsr1l	equ	0xFE1
  6410                           indf2	equ	0xFDF
  6411                           postinc2	equ	0xFDE
  6412                           postdec2	equ	0xFDD
  6413                           plusw2	equ	0xFDB
  6414                           fsr2h	equ	0xFDA
  6415                           fsr2l	equ	0xFD9
  6416                           status	equ	0xFD8
  6417                           
  6418 ;; *************** function _LCD_String *****************
  6419 ;; Defined at:
  6420 ;;		line 83 in file "LCD.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;  string          2    0[BANK0 ] PTR unsigned char 
  6423 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6424 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6425 ;;		 -> STR_1(12), 
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  1    wreg      void 
  6430 ;; Registers used:
  6431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6437 ;;      Params:         0       2       0       0
  6438 ;;      Locals:         0       0       0       0
  6439 ;;      Temps:          0       0       0       0
  6440 ;;      Totals:         0       2       0       0
  6441 ;;Total ram usage:        2 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    6
  6444 ;; This function calls:
  6445 ;;		_SendLCD
  6446 ;; This function is called by:
  6447 ;;		_ScanIR
  6448 ;;		_ScanWithRange
  6449 ;;		_main
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text26
  6454  001896                     __ptext26:
  6455                           	opt stack 0
  6456  001896                     _LCD_String:
  6457                           	opt stack 23
  6458                           
  6459                           ;LCD.c: 85: while(*string != 0){
  6460                           
  6461                           ;incstack = 0
  6462  001896  D01B               	goto	l153
  6463  001898                     
  6464                           ;LCD.c: 88: SendLCD(*string++,1);
  6465  001898  0E01               	movlw	1
  6466  00189A  6E30               	movwf	SendLCD@type,c
  6467  00189C  C060  FFF6         	movff	LCD_String@string,tblptrl
  6468  0018A0  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6469  0018A4  6AF8               	clrf	tblptru,c
  6470  0018A6  0E02               	movlw	(high __ramtop+-1)
  6471  0018A8  64F7               	cpfsgt	tblptrh,c
  6472  0018AA  D003               	bra	u2607
  6473  0018AC  0008               	tblrd		*
  6474  0018AE  50F5               	movf	tablat,w,c
  6475  0018B0  D005               	bra	u2600
  6476  0018B2                     u2607:
  6477  0018B2  CFF6 FFE1          	movff	tblptrl,fsr1l
  6478  0018B6  CFF7 FFE2          	movff	tblptrh,fsr1h
  6479  0018BA  50E7               	movf	indf1,w,c
  6480  0018BC                     u2600:
  6481  0018BC  ECD5  F00D         	call	_SendLCD
  6482  0018C0  0100               	movlb	0	; () banked
  6483  0018C2  4B60               	infsnz	LCD_String@string& (0+255),f,b
  6484  0018C4  2B61               	incf	(LCD_String@string+1)& (0+255),f,b
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6488  0018C6  0E21               	movlw	33
  6489  0018C8                     u3417:
  6490  0018C8  2EE8               	decfsz	wreg,f,c
  6491  0018CA  D7FE               	bra	u3417
  6492  0018CC  F000               	nop	
  6493  0018CE                     l153:
  6494  0018CE  C060  FFF6         	movff	LCD_String@string,tblptrl
  6495  0018D2  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6496  0018D6  6AF8               	clrf	tblptru,c
  6497  0018D8  0E02               	movlw	(high __ramtop+-1)
  6498  0018DA  64F7               	cpfsgt	tblptrh,c
  6499  0018DC  D003               	bra	u2617
  6500  0018DE  0008               	tblrd		*
  6501  0018E0  50F5               	movf	tablat,w,c
  6502  0018E2  D005               	bra	u2610
  6503  0018E4                     u2617:
  6504  0018E4  CFF6 FFE1          	movff	tblptrl,fsr1l
  6505  0018E8  CFF7 FFE2          	movff	tblptrh,fsr1h
  6506  0018EC  50E7               	movf	indf1,w,c
  6507  0018EE                     u2610:
  6508  0018EE  0900               	iorlw	0
  6509  0018F0  B4D8               	btfsc	status,2,c
  6510  0018F2  0012               	return	
  6511  0018F4  D7D1               	goto	l154
  6512  0018F6                     __end_of_LCD_String:
  6513                           	opt stack 0
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           intcon	equ	0xFF2
  6521                           postinc0	equ	0xFEE
  6522                           wreg	equ	0xFE8
  6523                           indf1	equ	0xFE7
  6524                           plusw1	equ	0xFE3
  6525                           fsr1h	equ	0xFE2
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           plusw2	equ	0xFDB
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function _SendLCD *****************
  6536 ;; Defined at:
  6537 ;;		line 27 in file "LCD.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  Byte            1    wreg     unsigned char 
  6540 ;;  type            1   47[COMRAM] unsigned char 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  Byte            1   48[COMRAM] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2, status,0, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6552 ;;      Params:         1       0       0       0
  6553 ;;      Locals:         1       0       0       0
  6554 ;;      Temps:          0       0       0       0
  6555 ;;      Totals:         2       0       0       0
  6556 ;;Total ram usage:        2 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    5
  6559 ;; This function calls:
  6560 ;;		_LCDout
  6561 ;; This function is called by:
  6562 ;;		_initLCD
  6563 ;;		_SetLine
  6564 ;;		_LCD_String
  6565 ;;		_ScanIR
  6566 ;;		_ScanWithRange
  6567 ;;		_main
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text27
  6572  001BAA                     __ptext27:
  6573                           	opt stack 0
  6574  001BAA                     _SendLCD:
  6575                           	opt stack 24
  6576                           
  6577                           ;incstack = 0
  6578                           ;SendLCD@Byte stored from wreg
  6579  001BAA  6E31               	movwf	SendLCD@Byte,c
  6580                           
  6581                           ;LCD.c: 30: LATAbits.LATA6=type;
  6582  001BAC  B030               	btfsc	SendLCD@type,0,c
  6583  001BAE  D002               	bra	u2445
  6584  001BB0  9C89               	bcf	3977,6,c	;volatile
  6585  001BB2  D001               	bra	u2446
  6586  001BB4                     u2445:
  6587  001BB4  8C89               	bsf	3977,6,c	;volatile
  6588  001BB6                     u2446:
  6589                           
  6590                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6591  001BB6  3831               	swapf	SendLCD@Byte,w,c
  6592  001BB8  0B0F               	andlw	15
  6593  001BBA  0B0F               	andlw	15
  6594  001BBC  ECED  F009         	call	_LCDout
  6595                           
  6596                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6597  001BC0  0E06               	movlw	6
  6598  001BC2                     u3427:
  6599  001BC2  2EE8               	decfsz	wreg,f,c
  6600  001BC4  D7FE               	bra	u3427
  6601  001BC6  D000               	nop2	
  6602                           
  6603                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6604  001BC8  5031               	movf	SendLCD@Byte,w,c
  6605  001BCA  0B0F               	andlw	15
  6606  001BCC  ECED  F009         	call	_LCDout
  6607                           
  6608                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6609  001BD0  0E21               	movlw	33
  6610  001BD2                     u3437:
  6611  001BD2  2EE8               	decfsz	wreg,f,c
  6612  001BD4  D7FE               	bra	u3437
  6613  001BD6  F000               	nop	
  6614  001BD8  0012               	return		;funcret
  6615  001BDA                     __end_of_SendLCD:
  6616                           	opt stack 0
  6617                           tblptru	equ	0xFF8
  6618                           tblptrh	equ	0xFF7
  6619                           tblptrl	equ	0xFF6
  6620                           tablat	equ	0xFF5
  6621                           prodh	equ	0xFF4
  6622                           prodl	equ	0xFF3
  6623                           intcon	equ	0xFF2
  6624                           postinc0	equ	0xFEE
  6625                           wreg	equ	0xFE8
  6626                           indf1	equ	0xFE7
  6627                           plusw1	equ	0xFE3
  6628                           fsr1h	equ	0xFE2
  6629                           fsr1l	equ	0xFE1
  6630                           indf2	equ	0xFDF
  6631                           postinc2	equ	0xFDE
  6632                           postdec2	equ	0xFDD
  6633                           plusw2	equ	0xFDB
  6634                           fsr2h	equ	0xFDA
  6635                           fsr2l	equ	0xFD9
  6636                           status	equ	0xFD8
  6637                           
  6638 ;; *************** function _LCDout *****************
  6639 ;; Defined at:
  6640 ;;		line 14 in file "LCD.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;  number          1    wreg     unsigned char 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  number          1   46[COMRAM] unsigned char 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  1    wreg      void 
  6647 ;; Registers used:
  6648 ;;		wreg, status,2, status,0, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6654 ;;      Params:         0       0       0       0
  6655 ;;      Locals:         1       0       0       0
  6656 ;;      Temps:          3       0       0       0
  6657 ;;      Totals:         4       0       0       0
  6658 ;;Total ram usage:        4 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    4
  6661 ;; This function calls:
  6662 ;;		_E_TOG
  6663 ;; This function is called by:
  6664 ;;		_SendLCD
  6665 ;;		_initLCD
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           	psect	text28
  6670  0013DA                     __ptext28:
  6671                           	opt stack 0
  6672  0013DA                     _LCDout:
  6673                           	opt stack 24
  6674                           
  6675                           ;incstack = 0
  6676                           ;LCDout@number stored from wreg
  6677  0013DA  6E2F               	movwf	LCDout@number,c
  6678                           
  6679                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6680  0013DC  502F               	movf	LCDout@number,w,c
  6681  0013DE  6E2C               	movwf	??_LCDout& (0+255),c
  6682  0013E0  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6683  0013E2  0E07               	movlw	7
  6684  0013E4                     u2335:
  6685  0013E4  90D8               	bcf	status,0,c
  6686  0013E6  362C               	rlcf	??_LCDout,f,c
  6687  0013E8  362D               	rlcf	??_LCDout+1,f,c
  6688  0013EA  2EE8               	decfsz	wreg,f,c
  6689  0013EC  D7FB               	goto	u2335
  6690  0013EE  0E07               	movlw	7
  6691  0013F0  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6692  0013F2                     u2345:
  6693  0013F2  342D               	rlcf	??_LCDout+1,w,c
  6694  0013F4  322D               	rrcf	??_LCDout+1,f,c
  6695  0013F6  322C               	rrcf	??_LCDout,f,c
  6696  0013F8  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6697  0013FA  D7FB               	goto	u2345
  6698  0013FC  462C               	rlncf	??_LCDout,f,c
  6699  0013FE  508B               	movf	3979,w,c	;volatile
  6700  001400  182C               	xorwf	??_LCDout,w,c
  6701  001402  0BFD               	andlw	-3
  6702  001404  182C               	xorwf	??_LCDout,w,c
  6703  001406  6E8B               	movwf	3979,c	;volatile
  6704                           
  6705                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6706  001408  502F               	movf	LCDout@number,w,c
  6707  00140A  6E2C               	movwf	??_LCDout& (0+255),c
  6708  00140C  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6709  00140E  0E06               	movlw	6
  6710  001410                     u2355:
  6711  001410  90D8               	bcf	status,0,c
  6712  001412  362C               	rlcf	??_LCDout,f,c
  6713  001414  362D               	rlcf	??_LCDout+1,f,c
  6714  001416  2EE8               	decfsz	wreg,f,c
  6715  001418  D7FB               	goto	u2355
  6716  00141A  0E07               	movlw	7
  6717  00141C  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6718  00141E                     u2365:
  6719  00141E  342D               	rlcf	??_LCDout+1,w,c
  6720  001420  322D               	rrcf	??_LCDout+1,f,c
  6721  001422  322C               	rrcf	??_LCDout,f,c
  6722  001424  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6723  001426  D7FB               	goto	u2365
  6724  001428  462C               	rlncf	??_LCDout,f,c
  6725  00142A  462C               	rlncf	??_LCDout,f,c
  6726  00142C  508B               	movf	3979,w,c	;volatile
  6727  00142E  182C               	xorwf	??_LCDout,w,c
  6728  001430  0BFB               	andlw	-5
  6729  001432  182C               	xorwf	??_LCDout,w,c
  6730  001434  6E8B               	movwf	3979,c	;volatile
  6731                           
  6732                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6733  001436  502F               	movf	LCDout@number,w,c
  6734  001438  6E2C               	movwf	??_LCDout& (0+255),c
  6735  00143A  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6736  00143C  0E05               	movlw	5
  6737  00143E                     u2375:
  6738  00143E  90D8               	bcf	status,0,c
  6739  001440  362C               	rlcf	??_LCDout,f,c
  6740  001442  362D               	rlcf	??_LCDout+1,f,c
  6741  001444  2EE8               	decfsz	wreg,f,c
  6742  001446  D7FB               	goto	u2375
  6743  001448  0E07               	movlw	7
  6744  00144A  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6745  00144C                     u2385:
  6746  00144C  342D               	rlcf	??_LCDout+1,w,c
  6747  00144E  322D               	rrcf	??_LCDout+1,f,c
  6748  001450  322C               	rrcf	??_LCDout,f,c
  6749  001452  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6750  001454  D7FB               	goto	u2385
  6751  001456  508C               	movf	3980,w,c	;volatile
  6752  001458  182C               	xorwf	??_LCDout,w,c
  6753  00145A  0BFE               	andlw	-2
  6754  00145C  182C               	xorwf	??_LCDout,w,c
  6755  00145E  6E8C               	movwf	3980,c	;volatile
  6756                           
  6757                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6758  001460  502F               	movf	LCDout@number,w,c
  6759  001462  6E2C               	movwf	??_LCDout& (0+255),c
  6760  001464  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6761  001466  3A2C               	swapf	??_LCDout,f,c
  6762  001468  3A2D               	swapf	??_LCDout+1,f,c
  6763  00146A  0EF0               	movlw	240
  6764  00146C  162D               	andwf	??_LCDout+1,f,c
  6765  00146E  502C               	movf	??_LCDout,w,c
  6766  001470  0B0F               	andlw	15
  6767  001472  122D               	iorwf	??_LCDout+1,f,c
  6768  001474  0EF0               	movlw	240
  6769  001476  162C               	andwf	??_LCDout,f,c
  6770  001478  0E07               	movlw	7
  6771  00147A  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6772  00147C                     u2395:
  6773  00147C  342D               	rlcf	??_LCDout+1,w,c
  6774  00147E  322D               	rrcf	??_LCDout+1,f,c
  6775  001480  322C               	rrcf	??_LCDout,f,c
  6776  001482  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6777  001484  D7FB               	goto	u2395
  6778  001486  462C               	rlncf	??_LCDout,f,c
  6779  001488  508C               	movf	3980,w,c	;volatile
  6780  00148A  182C               	xorwf	??_LCDout,w,c
  6781  00148C  0BFD               	andlw	-3
  6782  00148E  182C               	xorwf	??_LCDout,w,c
  6783  001490  6E8C               	movwf	3980,c	;volatile
  6784                           
  6785                           ;LCD.c: 21: E_TOG();
  6786  001492  EC4A  F00E         	call	_E_TOG	;wreg free
  6787                           
  6788                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6789  001496  0E03               	movlw	3
  6790  001498                     u3447:
  6791  001498  2EE8               	decfsz	wreg,f,c
  6792  00149A  D7FE               	bra	u3447
  6793  00149C  F000               	nop	
  6794  00149E  0012               	return		;funcret
  6795  0014A0                     __end_of_LCDout:
  6796                           	opt stack 0
  6797                           tblptru	equ	0xFF8
  6798                           tblptrh	equ	0xFF7
  6799                           tblptrl	equ	0xFF6
  6800                           tablat	equ	0xFF5
  6801                           prodh	equ	0xFF4
  6802                           prodl	equ	0xFF3
  6803                           intcon	equ	0xFF2
  6804                           postinc0	equ	0xFEE
  6805                           wreg	equ	0xFE8
  6806                           indf1	equ	0xFE7
  6807                           plusw1	equ	0xFE3
  6808                           fsr1h	equ	0xFE2
  6809                           fsr1l	equ	0xFE1
  6810                           indf2	equ	0xFDF
  6811                           postinc2	equ	0xFDE
  6812                           postdec2	equ	0xFDD
  6813                           plusw2	equ	0xFDB
  6814                           fsr2h	equ	0xFDA
  6815                           fsr2l	equ	0xFD9
  6816                           status	equ	0xFD8
  6817                           
  6818 ;; *************** function _E_TOG *****************
  6819 ;; Defined at:
  6820 ;;		line 5 in file "LCD.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;		None
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;		None
  6825 ;; Return value:  Size  Location     Type
  6826 ;;                  1    wreg      void 
  6827 ;; Registers used:
  6828 ;;		wreg
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6834 ;;      Params:         0       0       0       0
  6835 ;;      Locals:         0       0       0       0
  6836 ;;      Temps:          0       0       0       0
  6837 ;;      Totals:         0       0       0       0
  6838 ;;Total ram usage:        0 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:    3
  6841 ;; This function calls:
  6842 ;;		Nothing
  6843 ;; This function is called by:
  6844 ;;		_LCDout
  6845 ;; This function uses a non-reentrant model
  6846 ;;
  6847                           
  6848                           	psect	text29
  6849  001C94                     __ptext29:
  6850                           	opt stack 0
  6851  001C94                     _E_TOG:
  6852                           	opt stack 24
  6853                           
  6854                           ;LCD.c: 8: LATCbits.LATC0=1;
  6855                           
  6856                           ;incstack = 0
  6857  001C94  808B               	bsf	3979,0,c	;volatile
  6858                           
  6859                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6860  001C96  0E03               	movlw	3
  6861  001C98                     u3457:
  6862  001C98  2EE8               	decfsz	wreg,f,c
  6863  001C9A  D7FE               	bra	u3457
  6864  001C9C  F000               	nop	
  6865                           
  6866                           ;LCD.c: 10: LATCbits.LATC0=0;
  6867  001C9E  908B               	bcf	3979,0,c	;volatile
  6868  001CA0  0012               	return		;funcret
  6869  001CA2                     __end_of_E_TOG:
  6870                           	opt stack 0
  6871                           tblptru	equ	0xFF8
  6872                           tblptrh	equ	0xFF7
  6873                           tblptrl	equ	0xFF6
  6874                           tablat	equ	0xFF5
  6875                           prodh	equ	0xFF4
  6876                           prodl	equ	0xFF3
  6877                           intcon	equ	0xFF2
  6878                           postinc0	equ	0xFEE
  6879                           wreg	equ	0xFE8
  6880                           indf1	equ	0xFE7
  6881                           plusw1	equ	0xFE3
  6882                           fsr1h	equ	0xFE2
  6883                           fsr1l	equ	0xFE1
  6884                           indf2	equ	0xFDF
  6885                           postinc2	equ	0xFDE
  6886                           postdec2	equ	0xFDD
  6887                           plusw2	equ	0xFDB
  6888                           fsr2h	equ	0xFDA
  6889                           fsr2l	equ	0xFD9
  6890                           status	equ	0xFD8
  6891                           
  6892 ;; *************** function _InterruptHandlerLow *****************
  6893 ;; Defined at:
  6894 ;;		line 18 in file "main.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6908 ;;      Params:         0       0       0       0
  6909 ;;      Locals:         0       0       0       0
  6910 ;;      Temps:         21       0       0       0
  6911 ;;      Totals:        21       0       0       0
  6912 ;;Total ram usage:       21 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    2
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		Interrupt level 1
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	intcodelo
  6923  000018                     __pintcodelo:
  6924                           	opt stack 0
  6925  000018                     _InterruptHandlerLow:
  6926                           	opt stack 23
  6927                           
  6928                           ;incstack = 0
  6929  000018  8034               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6930  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  6931  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  6932  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  6933  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  6934  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  6935  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  6936  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  6937  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  6938  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  6939  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  6940  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  6941  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  6942  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  6943  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  6944  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  6945  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  6946  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  6947  00005E  C034  F028         	movff	btemp,??_InterruptHandlerLow+17
  6948  000062  C035  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  6949  000066  C036  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  6950  00006A  C037  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  6951                           
  6952                           ;main.c: 20: if (PIR1bits.RCIF) {
  6953  00006E  AA9E               	btfss	3998,5,c	;volatile
  6954  000070  D016               	goto	i1l372
  6955                           
  6956                           ;main.c: 21: ReceivedString[i]=RCREG;
  6957  000072  5033               	movf	_i,w,c	;volatile
  6958  000074  0D01               	mullw	1
  6959  000076  0EE6               	movlw	low _ReceivedString
  6960  000078  24F3               	addwf	prodl,w,c
  6961  00007A  6ED9               	movwf	fsr2l,c
  6962  00007C  0E01               	movlw	high _ReceivedString
  6963  00007E  20F4               	addwfc	prodh,w,c
  6964  000080  6EDA               	movwf	fsr2h,c
  6965  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  6966                           
  6967                           ;main.c: 22: RFID_Read=1;
  6968  000086  0E01               	movlw	1
  6969  000088  0101               	movlb	1	; () banked
  6970  00008A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6971                           
  6972                           ; BSR set to: 1
  6973                           ;main.c: 23: if (i==15){
  6974  00008C  0E0F               	movlw	15
  6975  00008E  1833               	xorwf	_i,w,c	;volatile
  6976  000090  A4D8               	btfss	status,2,c
  6977  000092  D003               	goto	i1l373
  6978                           
  6979                           ; BSR set to: 1
  6980                           ;main.c: 24: i=0;
  6981  000094  0E00               	movlw	0
  6982  000096  6E33               	movwf	_i,c	;volatile
  6983                           
  6984                           ;main.c: 25: }else{
  6985  000098  D001               	goto	i1l374
  6986  00009A                     i1l373:
  6987                           
  6988                           ; BSR set to: 1
  6989                           ;main.c: 26: i++;
  6990                           
  6991                           ; BSR set to: 1
  6992  00009A  2A33               	incf	_i,f,c	;volatile
  6993  00009C                     i1l374:
  6994                           
  6995                           ; BSR set to: 1
  6996                           ;main.c: 27: }
  6997                           ;main.c: 28: PIR1bits.RCIF=0;
  6998                           
  6999                           ; BSR set to: 1
  7000  00009C  9A9E               	bcf	3998,5,c	;volatile
  7001  00009E                     i1l372:
  7002                           
  7003                           ; BSR set to: 1
  7004  00009E  C02B  F037         	movff	??_InterruptHandlerLow+20,btemp+3
  7005  0000A2  C02A  F036         	movff	??_InterruptHandlerLow+19,btemp+2
  7006  0000A6  C029  F035         	movff	??_InterruptHandlerLow+18,btemp+1
  7007  0000AA  C028  F034         	movff	??_InterruptHandlerLow+17,btemp
  7008  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  7009  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  7010  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  7011  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  7012  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  7013  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  7014  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  7015  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  7016  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  7017  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  7018  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  7019  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  7020  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7021  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7022  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7023  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7024  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  7025  0000F2  9034               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7026  0000F4  0010               	retfie	
  7027  0000F6                     __end_of_InterruptHandlerLow:
  7028                           	opt stack 0
  7029                           pclatu	equ	0xFFB
  7030                           pclath	equ	0xFFA
  7031                           tblptru	equ	0xFF8
  7032                           tblptrh	equ	0xFF7
  7033                           tblptrl	equ	0xFF6
  7034                           tablat	equ	0xFF5
  7035                           prodh	equ	0xFF4
  7036                           prodl	equ	0xFF3
  7037                           intcon	equ	0xFF2
  7038                           postinc0	equ	0xFEE
  7039                           fsr0h	equ	0xFEA
  7040                           fsr0l	equ	0xFE9
  7041                           wreg	equ	0xFE8
  7042                           indf1	equ	0xFE7
  7043                           plusw1	equ	0xFE3
  7044                           fsr1h	equ	0xFE2
  7045                           fsr1l	equ	0xFE1
  7046                           bsr	equ	0xFE0
  7047                           indf2	equ	0xFDF
  7048                           postinc2	equ	0xFDE
  7049                           postdec2	equ	0xFDD
  7050                           plusw2	equ	0xFDB
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           
  7055 ;; *************** function _InterruptHandlerHigh *****************
  7056 ;; Defined at:
  7057 ;;		line 34 in file "main.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;		None
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;		None
  7062 ;; Return value:  Size  Location     Type
  7063 ;;                  1    wreg      void 
  7064 ;; Registers used:
  7065 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7066 ;; Tracked objects:
  7067 ;;		On entry : 0/0
  7068 ;;		On exit  : 0/0
  7069 ;;		Unchanged: 0/0
  7070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7071 ;;      Params:         0       0       0       0
  7072 ;;      Locals:         0       0       0       0
  7073 ;;      Temps:         18       0       0       0
  7074 ;;      Totals:        18       0       0       0
  7075 ;;Total ram usage:       18 bytes
  7076 ;; Hardware stack levels used:    1
  7077 ;; Hardware stack levels required when called:    1
  7078 ;; This function calls:
  7079 ;;		i2_delay_tenth_s
  7080 ;; This function is called by:
  7081 ;;		Interrupt level 2
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	intcode
  7086  000008                     __pintcode:
  7087                           	opt stack 0
  7088  000008                     _InterruptHandlerHigh:
  7089                           	opt stack 23
  7090                           
  7091                           ;incstack = 0
  7092  000008  8234               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7093  00000A  EFB2  F00A         	goto	int_func
  7094                           pclatu	equ	0xFFB
  7095                           pclath	equ	0xFFA
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           postinc0	equ	0xFEE
  7104                           fsr0h	equ	0xFEA
  7105                           fsr0l	equ	0xFE9
  7106                           wreg	equ	0xFE8
  7107                           indf1	equ	0xFE7
  7108                           plusw1	equ	0xFE3
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           bsr	equ	0xFE0
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           plusw2	equ	0xFDB
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120                           	psect	intcode_body
  7121  001564                     __pintcode_body:
  7122                           	opt stack 23
  7123  001564                     int_func:
  7124                           	opt stack 23
  7125  001564  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7126  001568  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7127  00156C  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7128  001570  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7129  001574  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7130  001578  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7131  00157C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7132  001580  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7133  001584  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7134  001588  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7135  00158C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7136  001590  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7137  001594  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7138  001598  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7139  00159C  C034  F013         	movff	btemp,??_InterruptHandlerHigh+14
  7140  0015A0  C035  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  7141  0015A4  C036  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  7142  0015A8  C037  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  7143                           
  7144                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7145  0015AC  A2F2               	btfss	intcon,1,c	;volatile
  7146  0015AE  D00D               	goto	i2l380
  7147                           
  7148                           ;main.c: 36: if (mode==-1) {
  7149  0015B0  2832               	incf	_mode,w,c	;volatile
  7150  0015B2  A4D8               	btfss	status,2,c
  7151  0015B4  D003               	goto	i2l381
  7152                           
  7153                           ;main.c: 38: mode=1;
  7154  0015B6  0E01               	movlw	1
  7155  0015B8  6E32               	movwf	_mode,c	;volatile
  7156                           
  7157                           ;main.c: 39: } else if (mode==0) {
  7158  0015BA  D003               	goto	i2l384
  7159  0015BC                     i2l381:
  7160  0015BC  5032               	movf	_mode,w,c	;volatile
  7161  0015BE  A4D8               	btfss	status,2,c
  7162                           
  7163                           ;main.c: 43: mode=-1;
  7164                           
  7165                           ;main.c: 41: } else {
  7166  0015C0  6832               	setf	_mode,c	;volatile
  7167  0015C2                     i2l384:
  7168                           
  7169                           ;main.c: 44: }
  7170                           ;main.c: 46: delay_tenth_s(2);
  7171  0015C2  0E02               	movlw	2
  7172  0015C4  EC6A  F00D         	call	i2_delay_tenth_s
  7173                           
  7174                           ;main.c: 47: INTCONbits.INT0IF=0;
  7175  0015C8  92F2               	bcf	intcon,1,c	;volatile
  7176  0015CA                     i2l380:
  7177  0015CA  C016  F037         	movff	??_InterruptHandlerHigh+17,btemp+3
  7178  0015CE  C015  F036         	movff	??_InterruptHandlerHigh+16,btemp+2
  7179  0015D2  C014  F035         	movff	??_InterruptHandlerHigh+15,btemp+1
  7180  0015D6  C013  F034         	movff	??_InterruptHandlerHigh+14,btemp
  7181  0015DA  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7182  0015DE  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7183  0015E2  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7184  0015E6  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7185  0015EA  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7186  0015EE  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7187  0015F2  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7188  0015F6  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7189  0015FA  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7190  0015FE  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7191  001602  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7192  001606  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7193  00160A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7194  00160E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7195  001612  9234               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7196  001614  0011               	retfie		f
  7197  001616                     __end_of_InterruptHandlerHigh:
  7198                           	opt stack 0
  7199                           pclatu	equ	0xFFB
  7200                           pclath	equ	0xFFA
  7201                           tblptru	equ	0xFF8
  7202                           tblptrh	equ	0xFF7
  7203                           tblptrl	equ	0xFF6
  7204                           tablat	equ	0xFF5
  7205                           prodh	equ	0xFF4
  7206                           prodl	equ	0xFF3
  7207                           intcon	equ	0xFF2
  7208                           postinc0	equ	0xFEE
  7209                           fsr0h	equ	0xFEA
  7210                           fsr0l	equ	0xFE9
  7211                           wreg	equ	0xFE8
  7212                           indf1	equ	0xFE7
  7213                           plusw1	equ	0xFE3
  7214                           fsr1h	equ	0xFE2
  7215                           fsr1l	equ	0xFE1
  7216                           bsr	equ	0xFE0
  7217                           indf2	equ	0xFDF
  7218                           postinc2	equ	0xFDE
  7219                           postdec2	equ	0xFDD
  7220                           plusw2	equ	0xFDB
  7221                           fsr2h	equ	0xFDA
  7222                           fsr2l	equ	0xFD9
  7223                           status	equ	0xFD8
  7224                           
  7225 ;; *************** function i2_delay_tenth_s *****************
  7226 ;; Defined at:
  7227 ;;		line 32 in file "Movement.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  tenth_second    1    wreg     unsigned char 
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7232 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  1    wreg      void 
  7235 ;; Registers used:
  7236 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7237 ;; Tracked objects:
  7238 ;;		On entry : 0/0
  7239 ;;		On exit  : 0/0
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7242 ;;      Params:         0       0       0       0
  7243 ;;      Locals:         3       0       0       0
  7244 ;;      Temps:          1       0       0       0
  7245 ;;      Totals:         4       0       0       0
  7246 ;;Total ram usage:        4 bytes
  7247 ;; Hardware stack levels used:    1
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_InterruptHandlerHigh
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           	psect	text32
  7256  001AD4                     __ptext32:
  7257                           	opt stack 0
  7258  001AD4                     i2_delay_tenth_s:
  7259                           	opt stack 23
  7260                           
  7261                           ;incstack = 0
  7262                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7263  001AD4  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7264                           
  7265                           ;Movement.c: 33: unsigned int i=0;
  7266  001AD6  0E00               	movlw	0
  7267  001AD8  6E04               	movwf	i2delay_tenth_s@i+1,c
  7268  001ADA  0E00               	movlw	0
  7269  001ADC  6E03               	movwf	i2delay_tenth_s@i,c
  7270                           
  7271                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7272  001ADE  0E00               	movlw	0
  7273  001AE0  6E04               	movwf	i2delay_tenth_s@i+1,c
  7274  001AE2  0E01               	movlw	1
  7275  001AE4  6E03               	movwf	i2delay_tenth_s@i,c
  7276  001AE6  D009               	goto	i2l204
  7277  001AE8                     
  7278                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7279  001AE8  0E82               	movlw	130
  7280  001AEA  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7281  001AEC  0EDE               	movlw	222
  7282  001AEE                     i2u346_47:
  7283  001AEE  2EE8               	decfsz	wreg,f,c
  7284  001AF0  D7FE               	bra	i2u346_47
  7285  001AF2  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7286  001AF4  D7FC               	bra	i2u346_47
  7287  001AF6  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7288  001AF8  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7289  001AFA                     i2l204:
  7290  001AFA  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7291  001AFC  0D02               	mullw	2
  7292  001AFE  5003               	movf	i2delay_tenth_s@i,w,c
  7293  001B00  5CF3               	subwf	prodl,w,c
  7294  001B02  5004               	movf	i2delay_tenth_s@i+1,w,c
  7295  001B04  58F4               	subwfb	prodh,w,c
  7296  001B06  A0D8               	btfss	status,0,c
  7297  001B08  0012               	return	
  7298  001B0A  D7EE               	goto	i2l205
  7299  001B0C                     __end_ofi2_delay_tenth_s:
  7300                           	opt stack 0
  7301                           pclatu	equ	0xFFB
  7302                           pclath	equ	0xFFA
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           postinc0	equ	0xFEE
  7311                           fsr0h	equ	0xFEA
  7312                           fsr0l	equ	0xFE9
  7313                           wreg	equ	0xFE8
  7314                           indf1	equ	0xFE7
  7315                           plusw1	equ	0xFE3
  7316                           fsr1h	equ	0xFE2
  7317                           fsr1l	equ	0xFE1
  7318                           bsr	equ	0xFE0
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           plusw2	equ	0xFDB
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           pclatu	equ	0xFFB
  7327                           pclath	equ	0xFFA
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           prodh	equ	0xFF4
  7333                           prodl	equ	0xFF3
  7334                           intcon	equ	0xFF2
  7335                           postinc0	equ	0xFEE
  7336                           fsr0h	equ	0xFEA
  7337                           fsr0l	equ	0xFE9
  7338                           wreg	equ	0xFE8
  7339                           indf1	equ	0xFE7
  7340                           plusw1	equ	0xFE3
  7341                           fsr1h	equ	0xFE2
  7342                           fsr1l	equ	0xFE1
  7343                           bsr	equ	0xFE0
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           plusw2	equ	0xFDB
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352                           	psect	rparam
  7353  0000                     pclatu	equ	0xFFB
  7354                           pclath	equ	0xFFA
  7355                           tblptru	equ	0xFF8
  7356                           tblptrh	equ	0xFF7
  7357                           tblptrl	equ	0xFF6
  7358                           tablat	equ	0xFF5
  7359                           prodh	equ	0xFF4
  7360                           prodl	equ	0xFF3
  7361                           intcon	equ	0xFF2
  7362                           postinc0	equ	0xFEE
  7363                           fsr0h	equ	0xFEA
  7364                           fsr0l	equ	0xFE9
  7365                           wreg	equ	0xFE8
  7366                           indf1	equ	0xFE7
  7367                           plusw1	equ	0xFE3
  7368                           fsr1h	equ	0xFE2
  7369                           fsr1l	equ	0xFE1
  7370                           bsr	equ	0xFE0
  7371                           indf2	equ	0xFDF
  7372                           postinc2	equ	0xFDE
  7373                           postdec2	equ	0xFDD
  7374                           plusw2	equ	0xFDB
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379                           	psect	temp
  7380  000034                     btemp:
  7381                           	opt stack 0
  7382  000034                     	ds	1
  7383  0000                     int$flags	set	btemp
  7384  0000                     wtemp6	set	btemp+1
  7385                           pclatu	equ	0xFFB
  7386                           pclath	equ	0xFFA
  7387                           tblptru	equ	0xFF8
  7388                           tblptrh	equ	0xFF7
  7389                           tblptrl	equ	0xFF6
  7390                           tablat	equ	0xFF5
  7391                           prodh	equ	0xFF4
  7392                           prodl	equ	0xFF3
  7393                           intcon	equ	0xFF2
  7394                           postinc0	equ	0xFEE
  7395                           fsr0h	equ	0xFEA
  7396                           fsr0l	equ	0xFE9
  7397                           wreg	equ	0xFE8
  7398                           indf1	equ	0xFE7
  7399                           plusw1	equ	0xFE3
  7400                           fsr1h	equ	0xFE2
  7401                           fsr1l	equ	0xFE1
  7402                           bsr	equ	0xFE0
  7403                           indf2	equ	0xFDF
  7404                           postinc2	equ	0xFDE
  7405                           postdec2	equ	0xFDD
  7406                           plusw2	equ	0xFDB
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      51
    BANK0           160    110     118
    BANK1           256    226     247
    BANK2           256      0     150

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_SendLCD
    _main->_VerifySignal
    _initLCD->_SendLCD
    _ScanWithRange->_SendLCD
    _ScanIR->_SendLCD
    _setMotorPWM->___wmul
    ___awdiv->___wmul
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   78668
                                            105 BANK0      5     5      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              0 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4651
                                             23 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     240
                                             43 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     169
                                             43 COMRAM     6     4      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   26915
                                             28 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5191
                                             23 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5461
                                             23 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3956
                                             17 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             43 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   13681
                                             28 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4344
                                             17 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1694
                                              8 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3073
                                              7 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             43 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     409
                                             43 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             43 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              0 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2442
                                              0 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                             47 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                             43 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6E      76       5       73.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      33       1       54.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     236       3        0.0%
DATA                 0      0     236      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 19 16:59:14 2018

                        ?_grabRightIR 002C                                     _i 0033  
                  fullSpeedBack@power 007B                                    l34 1260  
                                  l35 128A                                    l51 1668  
                                  l52 1618                                    l53 1630  
                                  l54 1648                                    l65 1786  
                                  l66 1730                                    l67 174C  
                                  l68 1766                          ___awdiv@sign 0065  
                                  bsr 000FE0                   ___wmul@multiplicand 002E  
                         main@Message 01BE                           ?_LCD_String 0060  
                                 l110 183A                                   l105 17C4  
                                 l115 1BEE                                   l212 13C2  
                                 l204 1AC2                                   l220 0B32  
                                 l205 1AB0                                   l221 0BF6  
                                 l230 0E66                                   l222 0C14  
                                 l224 0D28                                   l153 18CE  
                                 l225 0C62                                   l401 03FC  
                                 l154 1898                                   l226 0C4A  
                                 l402 04A4                                   l147 1B5A  
                                 l219 0E6A                                   l411 060E  
                                 l420 06DC                                   l149 1B6E  
                                 l229 0E54                                   l405 04DA  
                                 l430 08D6                                   l414 0630  
                                 l406 0524                                   l415 074C  
                                 l407 05A8                                   l440 09B2  
                                 l432 0898                                   l424 07A8  
                                 l441 09E4                                   l417 06FA  
                                 l409 05EC                                   l418 069A  
                                 l427 0838                                   l460 0F3C  
                                 l436 08F2                                   l429 0942  
                                 l480 109A                                   l472 0FFA  
                                 l456 0F14                                   l481 10DA  
                                 l465 0F74                                   l457 0F2E  
                                 l490 111C                                   l482 10BA  
                                 l474 1024                                   l491 1178  
                                 l467 0FD2                                   l459 0F44  
                                 l492 1122                                   l397 03F6  
                                 l478 106E                                   l670 170C  
                                 l479 1092                                   l671 1716  
                                 l663 16BE                                   l904 1970  
                                 l672 1724                                   l664 16CE  
                                 l905 1968                                   l825 1C5E  
                                 l914 19BC                                   l666 16EC  
                                 l915 19B4                                   l667 16E4  
                                 l908 1990                                   l909 199A  
                                 l918 19D4                                   l919 19DE  
                         grabLeftIR@i 0062                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3140 1028                                  l3062 1832  
                                l3046 17BC                                  l3660 0A00  
                                l3580 06D4                                  l3662 0A02  
                                l3568 0692                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1200 16F0  
                                u3020 065C                                  u3030 0670  
                                u3022 065E                                  _LATB 000F8A  
                                u2304 1222                                  u3032 0672  
                                u2305 121E                                  u1450 19C0  
                                u2314 127C                                  u3130 087C  
                                u2315 1278                                  u2325 12D6  
                                u3150 093E                                  u3070 06D0  
                                u2335 13E4                                  u3207 0468  
                                u2600 18BC                                  u2345 13F2  
                                u3217 14B4                                  u2610 18EE  
                                u3170 097E                                  u3090 06F4  
                                u2355 1410                                  u3307 155C  
                                u3227 14CA                                  u2540 1802  
                                u2460 1974                                  u3180 09EA  
                                u2365 141E                                  u2445 1BB4  
                                u3317 0B66                                  u3237 14DC  
                                u2446 1BB6                                  u2375 143E  
                                u2607 18B2                                  u3407 1B70  
                                u2535 17CC                                  u3327 0B7E  
                                u3247 14EA                                  u2800 1180  
                                u2385 144C                                  u2617 18E4  
                                u3417 18C8                                  u3337 1780  
                                u3257 14F8                                  u2570 1878  
                                u2810 119A                                  u2395 147C  
                                u3427 1BC2                                  u3347 1AB6  
                                u1835 1BEA                                  u3267 150A  
                                u1836 1BEC                                  u3437 1BD2  
                                u2565 1842                                  u3357 1334  
                                u3277 151C                                  u3197 0450  
                                u3447 1498                                  u3367 134C  
                                u1855 1BFC                                  u3287 1534  
                                u1856 1BFE                                  u3457 1C98  
                                u3377 1662                                  u3297 154A  
                                u2770 10E2                                  u2690 1054  
                                u3387 17F4                                  u2931 0364  
                                u2780 1100                                  u3397 186A  
                                u2941 0376                                  _main 0350  
                                _mode 0032                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0034                                  _stop 1616  
                 fullSpeedAhead@power 0075                                  prodh 000FF4  
                                prodl 000FF3                                  start 00F6  
             ScanWithRange@MotorPower 00BD                          ___param_bank 000000  
                     i2_delay_tenth_s 1AD4                       __end_of_SendLCD 1BDA  
                     __end_of_SetLine 1B78                    ScanWithRange@F3553 00CE  
                         ScanIR@F3540 00D2                                 ?_main 0001  
                     __end_of___awdiv 172E                                 ?_stop 0071  
                     ___awdiv@divisor 0062                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0062                       __end_of___lwdiv 19A4  
                     __end_of___lwmod 19E8                                 i2l204 1AFA  
                               i1l372 009E                                 i2l205 1AE8  
                               i1l373 009A                                 i1l374 009C  
                               i2l380 15CA                                 i2l381 15BC  
                               i2l384 15C2                       ___awdiv@counter 0064  
                               _RCREG 000FAE                                 _E_TOG 1C94  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1564  
                  ScanWithRange@loops 0080                       __end_of_dpowers 030B  
                     __end_of_isdigit 1C66                                 main@i 01CE  
                               pclath 000FFA                                 tablat 000FF5  
                               plusw1 000FE3                                 plusw2 000FDB  
                               status 000FD8                                 wtemp6 0035  
                 __size_of_LCD_String 0060                       __end_of_sprintf 11A8  
              __size_of_ScanWithRange 04E4                        __CFG_MCLRE$OFF 000000  
                     __initialization 1B0C                          __end_of_main 0A24  
                        __end_of_stop 16A8                        delay_tenth_s@i 002E  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 0060  
        ScanIR@DirectionMoveThreshold 00A9                  __end_of_enableSensor 1C00  
                 VerifySignal@hexByte 0062                                ??_main 00C9  
                              ??_stop 0032                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0068                __size_of_fullSpeedBack 003C  
                    ___awdiv@dividend 0060                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 1AD4                                _LCDout 13DA  
                         SendLCD@Byte 0031                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00BF  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1B0C                           SendLCD@type 0030  
                           ??_SendLCD 0031                                _ScanIR 12E6  
                           ??_SetLine 0032                                ___wmul 1C00  
                           ??___awdiv 0032                      __end_of_initRFID 1C82  
                           ??___lwdiv 0030                             ??___lwmod 0030  
                              _initIR 1C26                  __size_of_grabRightIR 0076  
                              clear_0 1B12                                clear_1 1B1E  
                              clear_2 1B2A                      ___awdiv@quotient 0066  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 002C                             ??_initLCD 0060  
                       _ScanWithRange 0A24                             ??_isdigit 002C  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0071  
                              stop@mR 0073                             ??_sprintf 006F  
     ScanWithRange@TimeAboveThreshold 00C2                      __end_of_turnLeft 1A9C  
                     fullSpeedBack@mL 0077                       fullSpeedBack@mR 0079  
                          __accesstop 0060               __end_of__initialization 1B34  
                       ___rparam_used 000001                           SetLine@line 0060  
                       __end_of_E_TOG 1CA2                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 19E8                          ??_LCD_String 0032  
                      ?_ScanWithRange 007C                  VerifySignal@checksum 0061  
                             ??_E_TOG 002C         __size_of_InterruptHandlerHigh 160E  
         __end_of_InterruptHandlerLow 00F6            delay_tenth_s@tenth_seconds 002D  
                        sprintf@width 0079                            __pbssBANK0 00CE  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 18F6  
                             ?_ScanIR 007C                        ?_fullSpeedBack 0077  
               __size_of_enableSensor 0026                               ?___wmul 002C  
                 grabLeftIR@IR_signal 0060                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 007C                            _grabLeftIR 1820  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013E  
                     __size_of_LCDout 00C6                          _enableSensor 1BDA  
                  __size_of_turnRight 003C                  __end_of_initMotorPWM 1BAA  
              ScanWithRange@RFID_Read 0088                               _SendLCD 1BAA  
                             __Hparam 0000                               _SetLine 1B42  
                             __Lparam 0000                       __size_of_ScanIR 00F4  
                             ___awdiv 16A8                       __size_of___wmul 0026  
                             ___lwdiv 1950                               ___lwmod 19A4  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1B0C                       ??_ScanWithRange 008A  
                             __ramtop 0300                             ?_turnLeft 0077  
                             __ptext0 0350                               __ptext1 1C82  
                             __ptext2 1C66                               __ptext3 1B78  
                             __ptext4 14A0                               __ptext5 1C26  
                             __ptext6 19E8                               __ptext7 1BDA  
                             __ptext8 18F6                               __ptext9 0A24  
                           _T0CONbits 000FD5                               _initLCD 14A0  
                   __end_of_initTimer 1C94                               _dpowers 0301  
                             _isdigit 1C48                          LCDout@number 002F  
                       ?_VerifySignal 002C                               main@buf 0100  
                             _sprintf 0F08                        __pintcode_body 1564  
                end_of_initialization 1B34                        ScanWithRange@i 00B9  
                      ScanWithRange@n 00B7                    setMotorPWM@PWMduty 006F  
                          ??_initRFID 002C                         __Lmediumconst 0000  
                             int_func 1564                    ScanIR@SensorResult 00AB  
                     ??_fullSpeedBack 0032                             _RFID_Read 01F6  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 0032                ScanWithRange@LeftFlick 00BE  
                   __end_of_turnRight 1A60                           ?_grabLeftIR 002C  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 002E  
                    fullSpeedAhead@mL 0071                      fullSpeedAhead@mR 0073  
              ScanWithRange@RightFlag 00C7                        __end_of_LCDout 14A0  
                           _TXSTAbits 000FAC                             ScanIR@buf 0081  
                       ??_grabRightIR 002E                        __end_of_ScanIR 13DA  
                      _fullSpeedAhead 172E                        _ReceivedString 01E6  
                      __end_of___wmul 1C26                     ScanWithRange@Move 0084  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1C48  
              __size_of_delay_tenth_s 0038                   start_initialization 1B0C  
                  VerifySignal@Signal 002C                 __size_of_initMotorPWM 0032  
                            ??_LCDout 002C          __end_of_InterruptHandlerHigh 1616  
                            ??_ScanIR 0080                __end_of_fullSpeedAhead 17AA  
                 __size_of_grabLeftIR 0076                              ??___wmul 0030  
                            ??_initIR 002C                   __end_of_grabRightIR 1820  
                        _initMotorPWM 1B78                           __pbssCOMRAM 0032  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$1716 002D          __size_of_InterruptHandlerLow 00DE  
                       _delay_tenth_s 1A9C                           sprintf@flag 0078  
                         sprintf@prec 0075                     __size_of_initRFID 001C  
                            ?_SendLCD 0030                              ?_SetLine 0001  
                    ___lwdiv@dividend 002C                       ?_fullSpeedAhead 0071  
                           __pintcode 0008                  __end_of_VerifySignal 1950  
                            ?___awdiv 0060              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 002C                              ?___lwmod 0063  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 01C9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003C                         ??_setMotorPWM 006A  
                           _initTimer 1C82                      ___lwdiv@quotient 0061  
                            ?_sprintf 0067                        ?_delay_tenth_s 0001  
                      ___wmul@product 0030                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0077  
                         turnRight@mR 0079                              _PIR1bits 000F9E  
                            i2u346_47 1AEE                              _RCONbits 000FD0  
                           main@F3554 0200                             main@F3556 0264  
                           main@F3559 01E2                           _grabRightIR 17AA  
               ScanWithRange@LeftFlag 00C0                  grabRightIR@IR_signal 0060  
                   ___wmul@multiplier 002C                 __end_of_ScanWithRange 0F08  
                        setMotorPWM@m 0068                 ScanWithRange@MoveTime 0082  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0086  
                            ScanIR@mL 007C                              ScanIR@mR 007E  
                        ??_grabLeftIR 002E                            ?_initTimer 0001  
                           _turnRight 1A24                      ScanWithRange@buf 008F  
                 __end_of_setMotorPWM 12E6                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1A24                      __size_of_SetLine 0036  
                  __end_of_grabLeftIR 1896                      __size_of___awdiv 0086  
                    __size_of___lwdiv 0054                      __size_of___lwmod 0044  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0076  
                    __size_of_initLCD 00C4                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 002E                       ___lwdiv@counter 0060  
                          ?_turnRight 0077                              __ptext10 1A24  
                            __ptext11 1A60                              __ptext20 1C00  
                            __ptext12 172E                              __ptext21 19A4  
                            __ptext13 1A9C                              __ptext22 1950  
                            __ptext14 12E6                              __ptext23 17AA  
                            __ptext15 1616                              __ptext32 1AD4  
                            __ptext24 1820                              __ptext16 11A8  
                            __ptext25 1B42                              __ptext17 16A8  
                            __ptext26 1896                              __ptext18 0F08  
                            __ptext27 1BAA                              __ptext19 1C48  
                            __ptext28 13DA                              __ptext29 1C94  
                     ??_delay_tenth_s 002C                      __size_of_sprintf 02A0  
                            _initRFID 1C66             ScanWithRange@SensorResult 00C3  
                      turnRight@power 007B                         __size_of_main 06D4  
                  main@DirectionFound 01CD                         turnLeft@power 007B  
                       __size_of_stop 0092                            turnLeft@mL 0077  
                          turnLeft@mR 0079                 __size_of_VerifySignal 005A  
                            int$flags 0034                              main@Move 01CF  
                 _InterruptHandlerLow 0018                            _LCD_String 1896  
                            _turnLeft 1A60                       ScanWithRange@mL 007C  
                     ScanWithRange@mR 007E                    enableSensor@sensor 002D  
                  enableSensor@status 002C                         VerifySignal@i 0060  
                          _INTCONbits 000FF2                           ??_initTimer 002C  
                            isdigit@c 002E                           _setMotorPWM 11A8  
                        _VerifySignal 18F6                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0073  
                           sprintf@sp 0067                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 002C                      ___lwmod@dividend 0063  
                    ??_fullSpeedAhead 0076                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00BB                ??_InterruptHandlerHigh 0005  
                            sprintf@c 007B                              sprintf@f 0069  
                     ___lwmod@divisor 0065                       ___lwmod@counter 0030  
                         ??_turnRight 0032                 ??_InterruptHandlerLow 0017  
                      ??_enableSensor 002D                      i2delay_tenth_s@i 0003  
