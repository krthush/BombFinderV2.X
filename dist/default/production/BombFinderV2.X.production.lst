

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 21:36:53 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _dpowers:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  000A               	dw	10
    59  000305  0064               	dw	100
    60  000307  03E8               	dw	1000
    61  000309  2710               	dw	10000
    62  00030B                     __end_of_dpowers:
    63                           	opt stack 0
    64  0000                     _ANSEL0bits	set	4024
    65  0000                     _BAUDCONbits	set	4010
    66  0000                     _CAP1BUFH	set	3945
    67  0000                     _CAP1BUFL	set	3944
    68  0000                     _CAP1CON	set	3939
    69  0000                     _CAP2BUFH	set	3943
    70  0000                     _CAP2BUFL	set	3942
    71  0000                     _CAP2CON	set	3938
    72  0000                     _INTCONbits	set	4082
    73  0000                     _IPR1bits	set	3999
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATB	set	3978
    76  0000                     _LATBbits	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISEbits	set	3990
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001D6E                     __pcinit:
   189                           	opt stack 0
   190  001D6E                     start_initialization:
   191                           	opt stack 0
   192  001D6E                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (96 bytes)
   196  001D6E  EE01  F097         	lfsr	0,__pbssBANK1
   197  001D72  0E60               	movlw	96
   198  001D74                     clear_0:
   199  001D74  6AEE               	clrf	postinc0,c
   200  001D76  06E8               	decf	wreg,f,c
   201  001D78  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK0 (8 bytes)
   204  001D7A  EE00  F0BF         	lfsr	0,__pbssBANK0
   205  001D7E  0E08               	movlw	8
   206  001D80                     clear_1:
   207  001D80  6AEE               	clrf	postinc0,c
   208  001D82  06E8               	decf	wreg,f,c
   209  001D84  E1FD               	bnz	clear_1
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  001D86  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  001D88  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  001D8A                     end_of_initialization:
   215                           	opt stack 0
   216  001D8A                     __end_of__initialization:
   217                           	opt stack 0
   218  001D8A  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  001D8C  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  001D8E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  001D90  6EF8               	movwf	tblptru,c
   222  001D92  0100               	movlb	0
   223  001D94  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000BF                     __pbssBANK0:
   243                           	opt stack 0
   244  0000BF                     ScanIR@F3879:
   245                           	opt stack 0
   246  0000BF                     	ds	4
   247  0000C3                     ScanWithRange@F3892:
   248                           	opt stack 0
   249  0000C3                     	ds	4
   250                           tblptru	equ	0xFF8
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           
   254                           	psect	bssBANK1
   255  000197                     __pbssBANK1:
   256                           	opt stack 0
   257  000197                     main@F3893:
   258                           	opt stack 0
   259  000197                     	ds	50
   260  0001C9                     main@F3895:
   261                           	opt stack 0
   262  0001C9                     	ds	25
   263  0001E2                     main@F3898:
   264                           	opt stack 0
   265  0001E2                     	ds	4
   266  0001E6                     _ReceivedString:
   267                           	opt stack 0
   268  0001E6                     	ds	16
   269  0001F6                     _RFID_Read:
   270                           	opt stack 0
   271  0001F6                     	ds	1
   272                           tblptru	equ	0xFF8
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
   275                           
   276                           	psect	cstackBANK1
   277  000100                     __pcstackBANK1:
   278                           	opt stack 0
   279  000100                     main@buf:
   280                           	opt stack 0
   281                           
   282                           ; 40 bytes @ 0x0
   283  000100                     	ds	40
   284  000128                     main@Message:
   285                           	opt stack 0
   286                           
   287                           ; 10 bytes @ 0x28
   288  000128                     	ds	10
   289  000132                     main@MoveType:
   290                           	opt stack 0
   291                           
   292                           ; 25 bytes @ 0x32
   293  000132                     	ds	25
   294  00014B                     main@MoveTime:
   295                           	opt stack 0
   296                           
   297                           ; 50 bytes @ 0x4B
   298  00014B                     	ds	50
   299  00017D                     main@ScanAngle:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x7D
   303  00017D                     	ds	1
   304  00017E                     main@SensorResult:
   305                           	opt stack 0
   306                           
   307                           ; 4 bytes @ 0x7E
   308  00017E                     	ds	4
   309  000182                     main@DirectionFound:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x82
   313  000182                     	ds	1
   314  000183                     main@i:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0x83
   318  000183                     	ds	1
   319  000184                     main@Move:
   320                           	opt stack 0
   321                           
   322                           ; 1 bytes @ 0x84
   323  000184                     	ds	1
   324  000185                     main@mL:
   325                           	opt stack 0
   326                           
   327                           ; 9 bytes @ 0x85
   328  000185                     	ds	9
   329  00018E                     main@mR:
   330                           	opt stack 0
   331                           
   332                           ; 9 bytes @ 0x8E
   333  00018E                     	ds	9
   334                           tblptru	equ	0xFF8
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           
   338                           	psect	cstackBANK0
   339  000060                     __pcstackBANK0:
   340                           	opt stack 0
   341  000060                     ??_sprintf:
   342  000060                     setMotorPWM@PWMduty:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x0
   346  000060                     	ds	2
   347  000062                     stop@mL:
   348                           	opt stack 0
   349  000062                     fullSpeed@mL:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x2
   353  000062                     	ds	2
   354  000064                     stop@mR:
   355                           	opt stack 0
   356  000064                     fullSpeed@mR:
   357                           	opt stack 0
   358  000064                     sprintf@ap:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x4
   362  000064                     	ds	2
   363  000066                     fullSpeed@power:
   364                           	opt stack 0
   365  000066                     sprintf@prec:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x6
   369  000066                     	ds	1
   370  000067                     turnLeft@mL:
   371                           	opt stack 0
   372  000067                     turnRight@mL:
   373                           	opt stack 0
   374  000067                     fullSpeedBack@mL:
   375                           	opt stack 0
   376  000067                     sprintf@val:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x7
   380  000067                     	ds	2
   381  000069                     sprintf@flag:
   382                           	opt stack 0
   383  000069                     turnLeft@mR:
   384                           	opt stack 0
   385  000069                     turnRight@mR:
   386                           	opt stack 0
   387  000069                     fullSpeedBack@mR:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x9
   391  000069                     	ds	1
   392  00006A                     sprintf@width:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0xA
   396  00006A                     	ds	1
   397  00006B                     turnLeft@power:
   398                           	opt stack 0
   399  00006B                     turnRight@power:
   400                           	opt stack 0
   401  00006B                     fullSpeedBack@power:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0xB
   405  00006B                     	ds	1
   406  00006C                     sprintf@c:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0xC
   410  00006C                     	ds	1
   411  00006D                     ScanIR@mL:
   412                           	opt stack 0
   413  00006D                     ScanWithRange@mL:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0xD
   417  00006D                     	ds	2
   418  00006F                     ScanIR@mR:
   419                           	opt stack 0
   420  00006F                     ScanWithRange@mR:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0xF
   424  00006F                     	ds	2
   425  000071                     ScanWithRange@loops:
   426                           	opt stack 0
   427  000071                     ScanIR@buf:
   428                           	opt stack 0
   429                           
   430                           ; 40 bytes @ 0x11
   431  000071                     	ds	2
   432  000073                     ScanWithRange@MoveTime:
   433                           	opt stack 0
   434                           
   435                           ; 2 bytes @ 0x13
   436  000073                     	ds	2
   437  000075                     ScanWithRange@Move:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x15
   441  000075                     	ds	2
   442  000077                     ScanWithRange@MoveType:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x17
   446  000077                     	ds	2
   447  000079                     ScanWithRange@RFID_Read:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x19
   451  000079                     	ds	2
   452  00007B                     ??_ScanWithRange:
   453                           
   454                           ; 0 bytes @ 0x1B
   455  00007B                     	ds	6
   456  000081                     ScanWithRange@buf:
   457                           	opt stack 0
   458                           
   459                           ; 40 bytes @ 0x21
   460  000081                     	ds	24
   461  000099                     ScanIR@DirectionMoveThreshold:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x39
   465  000099                     	ds	2
   466  00009B                     ScanIR@SensorResult:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x3B
   470  00009B                     	ds	14
   471  0000A9                     ScanWithRange@i:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x49
   475  0000A9                     	ds	2
   476  0000AB                     ScanWithRange@DirectionFoundThreshold:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x4B
   480  0000AB                     	ds	2
   481  0000AD                     ScanWithRange@MotorPower:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x4D
   485  0000AD                     	ds	1
   486  0000AE                     ScanWithRange@MiniLeftFlick:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x4E
   490  0000AE                     	ds	1
   491  0000AF                     ScanWithRange@LeftFlag:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x4F
   495  0000AF                     	ds	2
   496  0000B1                     ScanWithRange@TimeAboveThreshold:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x51
   500  0000B1                     	ds	2
   501  0000B3                     ScanWithRange@SensorResult:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x53
   505  0000B3                     	ds	4
   506  0000B7                     ScanWithRange@LeftFlick:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x57
   510  0000B7                     	ds	1
   511  0000B8                     ScanWithRange@RightFlag:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x58
   515  0000B8                     	ds	2
   516  0000BA                     ??_main:
   517                           
   518                           ; 0 bytes @ 0x5A
   519  0000BA                     	ds	5
   520                           tblptru	equ	0xFF8
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           
   524                           	psect	cstackCOMRAM
   525  000001                     __pcstackCOMRAM:
   526                           	opt stack 0
   527  000001                     ??i2_delay_tenth_s:
   528                           
   529                           ; 0 bytes @ 0x0
   530  000001                     	ds	1
   531  000002                     i2delay_tenth_s@tenth_seconds:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1
   535  000002                     	ds	1
   536  000003                     i2delay_tenth_s@i:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x2
   540  000003                     	ds	2
   541  000005                     ??_InterruptHandlerHigh:
   542                           
   543                           ; 0 bytes @ 0x4
   544  000005                     	ds	14
   545  000013                     ??_InterruptHandlerLow:
   546                           
   547                           ; 0 bytes @ 0x12
   548  000013                     	ds	17
   549  000024                     ??_isdigit:
   550  000024                     ??_LCDout:
   551  000024                     ??_delay_tenth_s:
   552  000024                     ?_grabRightIR:
   553                           	opt stack 0
   554  000024                     ?_grabLeftIR:
   555                           	opt stack 0
   556  000024                     ?___wmul:
   557                           	opt stack 0
   558  000024                     ?___lwdiv:
   559                           	opt stack 0
   560  000024                     enableSensor@status:
   561                           	opt stack 0
   562  000024                     VerifySignal@Signal:
   563                           	opt stack 0
   564  000024                     ___wmul@multiplier:
   565                           	opt stack 0
   566  000024                     ___lwdiv@dividend:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x23
   570  000024                     	ds	1
   571  000025                     enableSensor@sensor:
   572                           	opt stack 0
   573  000025                     delay_tenth_s@tenth_seconds:
   574                           	opt stack 0
   575  000025                     _isdigit$2084:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x24
   579  000025                     	ds	1
   580  000026                     ??_grabRightIR:
   581  000026                     ??_grabLeftIR:
   582  000026                     ??_VerifySignal:
   583  000026                     isdigit@c:
   584                           	opt stack 0
   585  000026                     delay_tenth_s@i:
   586                           	opt stack 0
   587  000026                     ___wmul@multiplicand:
   588                           	opt stack 0
   589  000026                     ___lwdiv@divisor:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x25
   593  000026                     	ds	1
   594  000027                     LCDout@number:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x26
   598  000027                     	ds	1
   599  000028                     SendLCD@type:
   600                           	opt stack 0
   601  000028                     ___wmul@product:
   602                           	opt stack 0
   603  000028                     ___lwdiv@quotient:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x27
   607  000028                     	ds	1
   608  000029                     SendLCD@Byte:
   609                           	opt stack 0
   610  000029                     grabRightIR@IR_signal:
   611                           	opt stack 0
   612  000029                     grabLeftIR@IR_signal:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x28
   616  000029                     	ds	1
   617  00002A                     ??_initLCD:
   618  00002A                     ?___awdiv:
   619                           	opt stack 0
   620  00002A                     SetLine@line:
   621                           	opt stack 0
   622  00002A                     VerifySignal@i:
   623                           	opt stack 0
   624  00002A                     ___lwdiv@counter:
   625                           	opt stack 0
   626  00002A                     LCD_String@string:
   627                           	opt stack 0
   628  00002A                     ___awdiv@dividend:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x29
   632  00002A                     	ds	1
   633  00002B                     ?___lwmod:
   634                           	opt stack 0
   635  00002B                     grabRightIR@i:
   636                           	opt stack 0
   637  00002B                     grabLeftIR@i:
   638                           	opt stack 0
   639  00002B                     VerifySignal@checksum:
   640                           	opt stack 0
   641  00002B                     ___lwmod@dividend:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2A
   645  00002B                     	ds	1
   646  00002C                     VerifySignal@hexByte:
   647                           	opt stack 0
   648  00002C                     ___awdiv@divisor:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x2B
   652  00002C                     	ds	1
   653  00002D                     ___lwmod@divisor:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x2C
   657  00002D                     	ds	1
   658  00002E                     ___awdiv@counter:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x2D
   662  00002E                     	ds	1
   663  00002F                     ___awdiv@sign:
   664                           	opt stack 0
   665  00002F                     ___lwmod@counter:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x2E
   669  00002F                     	ds	1
   670  000030                     ?_sprintf:
   671                           	opt stack 0
   672  000030                     sprintf@sp:
   673                           	opt stack 0
   674  000030                     ___awdiv@quotient:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2F
   678  000030                     	ds	2
   679  000032                     setMotorPWM@m:
   680                           	opt stack 0
   681  000032                     sprintf@f:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x31
   685  000032                     	ds	2
   686  000034                     ??_setMotorPWM:
   687                           
   688                           ; 0 bytes @ 0x33
   689  000034                     	ds	5
   690  000039                     
   691                           ; 0 bytes @ 0x38
   692  000039                     	ds	1
   693  00003A                     tblptru	equ	0xFF8
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           
   697                           ; 0 bytes @ 0x39
   698 ;;
   699 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   700 ;;
   701 ;; *************** function _main *****************
   702 ;; Defined at:
   703 ;;		line 51 in file "main.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;  MoveTime       50   75[BANK1 ] int [25]
   708 ;;  buf            40    0[BANK1 ] unsigned char [40]
   709 ;;  MoveType       25   50[BANK1 ] unsigned char [25]
   710 ;;  Message        10   40[BANK1 ] unsigned char [10]
   711 ;;  mR              9  142[BANK1 ] struct DC_motor
   712 ;;  mL              9  133[BANK1 ] struct DC_motor
   713 ;;  SensorResult    4  126[BANK1 ] unsigned int [2]
   714 ;;  Move            1  132[BANK1 ] char 
   715 ;;  i               1  131[BANK1 ] unsigned char 
   716 ;;  DirectionFou    1  130[BANK1 ] char 
   717 ;;  ScanAngle       1  125[BANK1 ] unsigned char 
   718 ;; Return value:  Size  Location     Type
   719 ;;		None               void
   720 ;; Registers used:
   721 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   727 ;;      Params:         0       0       0       0
   728 ;;      Locals:         0       0     151       0
   729 ;;      Temps:          0       5       0       0
   730 ;;      Totals:         0       5     151       0
   731 ;;Total ram usage:      156 bytes
   732 ;; Hardware stack levels required when called:    8
   733 ;; This function calls:
   734 ;;		_LCD_String
   735 ;;		_ScanIR
   736 ;;		_ScanWithRange
   737 ;;		_SendLCD
   738 ;;		_SetLine
   739 ;;		_VerifySignal
   740 ;;		_delay_tenth_s
   741 ;;		_enableSensor
   742 ;;		_fullSpeed
   743 ;;		_fullSpeedBack
   744 ;;		_grabLeftIR
   745 ;;		_grabRightIR
   746 ;;		_initIR
   747 ;;		_initLCD
   748 ;;		_initMotorPWM
   749 ;;		_initRFID
   750 ;;		_initTimer
   751 ;;		_sprintf
   752 ;;		_stop
   753 ;;		_turnLeft
   754 ;;		_turnRight
   755 ;; This function is called by:
   756 ;;		Startup code after reset
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text0
   761  000350                     __ptext0:
   762                           	opt stack 0
   763  000350                     _main:
   764                           	opt stack 23
   765                           
   766                           ;main.c: 54: unsigned char Message[10];
   767                           ;main.c: 55: unsigned char i=0;
   768                           
   769                           ;incstack = 0
   770  000350  0E00               	movlw	0
   771  000352  0101               	movlb	1	; () banked
   772  000354  6F83               	movwf	main@i& (0+255),b
   773                           
   774                           ;main.c: 56: signed char DirectionFound=0;
   775  000356  0E00               	movlw	0
   776  000358  0101               	movlb	1	; () banked
   777  00035A  6F82               	movwf	main@DirectionFound& (0+255),b
   778                           
   779                           ; BSR set to: 1
   780                           ;main.c: 57: signed int MoveTime[25] = { 0 };
   781  00035C  EE21  F097         	lfsr	2,main@F3893
   782  000360  EE11  F04B         	lfsr	1,main@MoveTime
   783  000364  0E31               	movlw	49
   784  000366                     u2791:
   785  000366  CFDB FFE3          	movff	plusw2,plusw1
   786  00036A  06E8               	decf	wreg,f,c
   787  00036C  E2FC               	bc	u2791
   788                           
   789                           ; BSR set to: 1
   790                           ;main.c: 60: unsigned char MoveType[25] = { 0 };
   791  00036E  EE21  F0C9         	lfsr	2,main@F3895
   792  000372  EE11  F032         	lfsr	1,main@MoveType
   793  000376  0E18               	movlw	24
   794  000378                     u2801:
   795  000378  CFDB FFE3          	movff	plusw2,plusw1
   796  00037C  06E8               	decf	wreg,f,c
   797  00037E  E2FC               	bc	u2801
   798                           
   799                           ;main.c: 63: signed char Move=0;
   800  000380  0E00               	movlw	0
   801  000382  0101               	movlb	1	; () banked
   802  000384  6F84               	movwf	main@Move& (0+255),b
   803                           
   804                           ; BSR set to: 1
   805                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   806  000386  C1E2  F17E         	movff	main@F3898,main@SensorResult
   807  00038A  C1E3  F17F         	movff	main@F3898+1,main@SensorResult+1
   808  00038E  C1E4  F180         	movff	main@F3898+2,main@SensorResult+2
   809  000392  C1E5  F181         	movff	main@F3898+3,main@SensorResult+3
   810                           
   811                           ;main.c: 65: char buf[40];
   812                           ;main.c: 67: unsigned char ScanAngle=60;
   813  000396  0E3C               	movlw	60
   814  000398  0101               	movlb	1	; () banked
   815  00039A  6F7D               	movwf	main@ScanAngle& (0+255),b
   816                           
   817                           ; BSR set to: 1
   818                           ;main.c: 76: INTCONbits.GIEH=1;
   819  00039C  8EF2               	bsf	intcon,7,c	;volatile
   820                           
   821                           ; BSR set to: 1
   822                           ;main.c: 77: INTCONbits.GIEL=1;
   823  00039E  8CF2               	bsf	intcon,6,c	;volatile
   824                           
   825                           ; BSR set to: 1
   826                           ;main.c: 78: INTCONbits.PEIE=1;
   827  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   828                           
   829                           ; BSR set to: 1
   830                           ;main.c: 79: RCONbits.IPEN=1;
   831  0003A2  8ED0               	bsf	4048,7,c	;volatile
   832                           
   833                           ; BSR set to: 1
   834                           ;main.c: 82: IPR1bits.RCIP=0;
   835  0003A4  9A9F               	bcf	3999,5,c	;volatile
   836                           
   837                           ; BSR set to: 1
   838                           ;main.c: 83: PIE1bits.RCIE=1;
   839  0003A6  8A9D               	bsf	3997,5,c	;volatile
   840                           
   841                           ; BSR set to: 1
   842                           ;main.c: 86: TRISCbits.RC3=1;
   843  0003A8  8694               	bsf	3988,3,c	;volatile
   844                           
   845                           ; BSR set to: 1
   846                           ;main.c: 87: INTCONbits.INT0IE=1;
   847  0003AA  88F2               	bsf	intcon,4,c	;volatile
   848                           
   849                           ; BSR set to: 1
   850                           ;main.c: 90: PIR1bits.RC1IF=0;
   851  0003AC  9A9E               	bcf	3998,5,c	;volatile
   852                           
   853                           ; BSR set to: 1
   854                           ;main.c: 91: INTCONbits.INT0IF=0;
   855  0003AE  92F2               	bcf	intcon,1,c	;volatile
   856                           
   857                           ;main.c: 94: struct DC_motor mL, mR;
   858                           ;main.c: 95: mL.power=0;
   859  0003B0  0E00               	movlw	0
   860  0003B2  0101               	movlb	1	; () banked
   861  0003B4  6F85               	movwf	main@mL& (0+255),b
   862                           
   863                           ;main.c: 96: mL.direction=1;
   864  0003B6  0E01               	movlw	1
   865  0003B8  0101               	movlb	1	; () banked
   866  0003BA  6F86               	movwf	(main@mL+1)& (0+255),b
   867                           
   868                           ; BSR set to: 1
   869                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   870  0003BC  0E79               	movlw	121
   871  0003BE  0101               	movlb	1	; () banked
   872  0003C0  6F87               	movwf	(main@mL+2)& (0+255),b
   873  0003C2  0E0F               	movlw	15
   874  0003C4  0101               	movlb	1	; () banked
   875  0003C6  6F88               	movwf	(main@mL+3)& (0+255),b
   876                           
   877                           ; BSR set to: 1
   878                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   879  0003C8  0E78               	movlw	120
   880  0003CA  0101               	movlb	1	; () banked
   881  0003CC  6F89               	movwf	(main@mL+4)& (0+255),b
   882  0003CE  0E0F               	movlw	15
   883  0003D0  0101               	movlb	1	; () banked
   884  0003D2  6F8A               	movwf	(main@mL+5)& (0+255),b
   885                           
   886                           ;main.c: 99: mL.dir_pin=0;
   887  0003D4  0E00               	movlw	0
   888  0003D6  0101               	movlb	1	; () banked
   889  0003D8  6F8B               	movwf	(main@mL+6)& (0+255),b
   890                           
   891                           ;main.c: 100: mL.PWMperiod=199;
   892  0003DA  0E00               	movlw	0
   893  0003DC  0101               	movlb	1	; () banked
   894  0003DE  6F8D               	movwf	(main@mL+8)& (0+255),b
   895  0003E0  0EC7               	movlw	199
   896  0003E2  6F8C               	movwf	(main@mL+7)& (0+255),b
   897                           
   898                           ;main.c: 102: mR.power=0;
   899  0003E4  0E00               	movlw	0
   900  0003E6  0101               	movlb	1	; () banked
   901  0003E8  6F8E               	movwf	main@mR& (0+255),b
   902                           
   903                           ;main.c: 103: mR.direction=1;
   904  0003EA  0E01               	movlw	1
   905  0003EC  0101               	movlb	1	; () banked
   906  0003EE  6F8F               	movwf	(main@mR+1)& (0+255),b
   907                           
   908                           ; BSR set to: 1
   909                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   910  0003F0  0E77               	movlw	119
   911  0003F2  0101               	movlb	1	; () banked
   912  0003F4  6F90               	movwf	(main@mR+2)& (0+255),b
   913  0003F6  0E0F               	movlw	15
   914  0003F8  0101               	movlb	1	; () banked
   915  0003FA  6F91               	movwf	(main@mR+3)& (0+255),b
   916                           
   917                           ; BSR set to: 1
   918                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   919  0003FC  0E76               	movlw	118
   920  0003FE  0101               	movlb	1	; () banked
   921  000400  6F92               	movwf	(main@mR+4)& (0+255),b
   922  000402  0E0F               	movlw	15
   923  000404  0101               	movlb	1	; () banked
   924  000406  6F93               	movwf	(main@mR+5)& (0+255),b
   925                           
   926                           ;main.c: 106: mR.dir_pin=2;
   927  000408  0E02               	movlw	2
   928  00040A  0101               	movlb	1	; () banked
   929  00040C  6F94               	movwf	(main@mR+6)& (0+255),b
   930                           
   931                           ;main.c: 107: mR.PWMperiod=199;
   932  00040E  0E00               	movlw	0
   933  000410  0101               	movlb	1	; () banked
   934  000412  6F96               	movwf	(main@mR+8)& (0+255),b
   935  000414  0EC7               	movlw	199
   936  000416  6F95               	movwf	(main@mR+7)& (0+255),b
   937                           
   938                           ;main.c: 109: OSCCON = 0b1010010;
   939  000418  0E52               	movlw	82
   940  00041A  6ED3               	movwf	4051,c	;volatile
   941  00041C                     l395:
   942  00041C  B4D3               	btfsc	4051,2,c	;volatile
   943  00041E  D36A               	goto	l3610
   944  000420  D7FD               	goto	l395
   945  000422                     l3408:
   946                           
   947                           ;main.c: 121: stop(&mL, &mR);
   948  000422  0E85               	movlw	low main@mL
   949  000424  0100               	movlb	0	; () banked
   950  000426  6F62               	movwf	stop@mL& (0+255),b
   951  000428  0E01               	movlw	high main@mL
   952  00042A  0100               	movlb	0	; () banked
   953  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   954  00042E  0E8E               	movlw	low main@mR
   955  000430  0100               	movlb	0	; () banked
   956  000432  6F64               	movwf	stop@mR& (0+255),b
   957  000434  0E01               	movlw	high main@mR
   958  000436  0100               	movlb	0	; () banked
   959  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   960  00043A  ECAA  F00B         	call	_stop	;wreg free
   961                           
   962                           ;main.c: 124: RFID_Read=0;
   963  00043E  0E00               	movlw	0
   964  000440  0101               	movlb	1	; () banked
   965  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   966                           
   967                           ; BSR set to: 1
   968                           ;main.c: 125: Move=0;
   969  000444  0E00               	movlw	0
   970  000446  0101               	movlb	1	; () banked
   971  000448  6F84               	movwf	main@Move& (0+255),b
   972                           
   973                           ; BSR set to: 1
   974                           ;main.c: 128: SensorResult[0]=grabLeftIR();
   975  00044A  ECF5  F00C         	call	_grabLeftIR	;wreg free
   976  00044E  C024  F17E         	movff	?_grabLeftIR,main@SensorResult
   977  000452  C025  F17F         	movff	?_grabLeftIR+1,main@SensorResult+1
   978                           
   979                           ;main.c: 129: SensorResult[1]=grabRightIR();
   980  000456  ECBB  F00C         	call	_grabRightIR	;wreg free
   981  00045A  C024  F180         	movff	?_grabRightIR,main@SensorResult+2
   982  00045E  C025  F181         	movff	?_grabRightIR+1,main@SensorResult+3
   983                           
   984                           ;main.c: 133: CAP1BUFH=0;
   985  000462  0E00               	movlw	0
   986  000464  6E69               	movwf	3945,c	;volatile
   987                           
   988                           ;main.c: 134: CAP1BUFL=0;
   989  000466  0E00               	movlw	0
   990  000468  6E68               	movwf	3944,c	;volatile
   991                           
   992                           ;main.c: 135: CAP2BUFH=0;
   993  00046A  0E00               	movlw	0
   994  00046C  6E67               	movwf	3943,c	;volatile
   995                           
   996                           ;main.c: 136: CAP2BUFL=0;
   997  00046E  0E00               	movlw	0
   998  000470  6E66               	movwf	3942,c	;volatile
   999                           
  1000                           ;main.c: 139: SendLCD(0b00000001,0);
  1001  000472  0E00               	movlw	0
  1002  000474  6E28               	movwf	SendLCD@type,c
  1003  000476  0E01               	movlw	1
  1004  000478  ECA0  F00E         	call	_SendLCD
  1005                           
  1006                           ;main.c: 140: _delay((unsigned long)((50)*(2000000/4000000.0)));
  1007  00047C  0E08               	movlw	8
  1008  00047E                     u3067:
  1009  00047E  2EE8               	decfsz	wreg,f,c
  1010  000480  D7FE               	goto	u3067
  1011  000482  F000               	nop	
  1012                           
  1013                           ;main.c: 141: SendLCD(0b00000010,0);
  1014  000484  0E00               	movlw	0
  1015  000486  6E28               	movwf	SendLCD@type,c
  1016  000488  0E02               	movlw	2
  1017  00048A  ECA0  F00E         	call	_SendLCD
  1018                           
  1019                           ;main.c: 142: _delay((unsigned long)((2)*(2000000/4000.0)));
  1020  00048E  0EFA               	movlw	250
  1021  000490                     u3077:
  1022  000490  F000               	nop	
  1023  000492  2EE8               	decfsz	wreg,f,c
  1024  000494  D7FD               	goto	u3077
  1025                           
  1026                           ;main.c: 143: SetLine(1);
  1027  000496  0E01               	movlw	1
  1028  000498  EC88  F00E         	call	_SetLine
  1029                           
  1030                           ;main.c: 144: LCD_String("      Inert Mode");
  1031  00049C  0E1C               	movlw	low STR_5
  1032  00049E  6E2A               	movwf	LCD_String@string,c
  1033  0004A0  0E03               	movlw	high STR_5
  1034  0004A2  6E2B               	movwf	LCD_String@string+1,c
  1035  0004A4  EC2F  F00D         	call	_LCD_String	;wreg free
  1036                           
  1037                           ;main.c: 145: SetLine(2);
  1038  0004A8  0E02               	movlw	2
  1039  0004AA  EC88  F00E         	call	_SetLine
  1040                           
  1041                           ;main.c: 146: if (RFID_Read) {
  1042  0004AE  0101               	movlb	1	; () banked
  1043  0004B0  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1044  0004B2  B4D8               	btfsc	status,2,c
  1045  0004B4  D007               	goto	l3444
  1046                           
  1047                           ; BSR set to: 1
  1048                           ;main.c: 147: LCD_String(Message);
  1049  0004B6  0E28               	movlw	low main@Message
  1050  0004B8  6E2A               	movwf	LCD_String@string,c
  1051  0004BA  0E01               	movlw	high main@Message
  1052  0004BC  6E2B               	movwf	LCD_String@string+1,c
  1053  0004BE  EC2F  F00D         	call	_LCD_String	;wreg free
  1054                           
  1055                           ;main.c: 148: } else {
  1056  0004C2  D318               	goto	l3610
  1057  0004C4                     l3444:
  1058                           
  1059                           ;main.c: 149: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1060  0004C4  0E00               	movlw	low main@buf
  1061  0004C6  6E30               	movwf	sprintf@sp,c
  1062  0004C8  0E01               	movlw	high main@buf
  1063  0004CA  6E31               	movwf	sprintf@sp+1,c
  1064  0004CC  0E0B               	movlw	low STR_6
  1065  0004CE  6E32               	movwf	sprintf@f,c
  1066  0004D0  0E03               	movlw	high STR_6
  1067  0004D2  6E33               	movwf	sprintf@f+1,c
  1068  0004D4  C17E  F034         	movff	main@SensorResult,?_sprintf+4
  1069  0004D8  C17F  F035         	movff	main@SensorResult+1,?_sprintf+5
  1070  0004DC  C180  F036         	movff	main@SensorResult+2,?_sprintf+6
  1071  0004E0  C181  F037         	movff	main@SensorResult+3,?_sprintf+7
  1072  0004E4  EC53  F008         	call	_sprintf	;wreg free
  1073                           
  1074                           ;main.c: 150: LCD_String(buf);
  1075  0004E8  0E00               	movlw	low main@buf
  1076  0004EA  6E2A               	movwf	LCD_String@string,c
  1077  0004EC  0E01               	movlw	high main@buf
  1078  0004EE  6E2B               	movwf	LCD_String@string+1,c
  1079  0004F0  EC2F  F00D         	call	_LCD_String	;wreg free
  1080                           
  1081                           ;main.c: 151: }
  1082                           ;main.c: 153: break;
  1083  0004F4  D2FF               	goto	l3610
  1084  0004F6                     l3448:
  1085                           
  1086                           ;main.c: 157: initMotorPWM();
  1087  0004F6  EC31  F00E         	call	_initMotorPWM	;wreg free
  1088                           
  1089                           ;main.c: 158: initTimer();
  1090  0004FA  EC20  F00F         	call	_initTimer	;wreg free
  1091                           
  1092                           ;main.c: 159: initRFID();
  1093  0004FE  EC12  F00F         	call	_initRFID	;wreg free
  1094                           
  1095                           ;main.c: 160: initLCD();
  1096  000502  EC4C  F00B         	call	_initLCD	;wreg free
  1097                           
  1098                           ;main.c: 161: initIR();
  1099  000506  ECF2  F00E         	call	_initIR	;wreg free
  1100                           
  1101                           ;main.c: 163: enableSensor(0, 1);
  1102  00050A  0E01               	movlw	1
  1103  00050C  6E24               	movwf	enableSensor@status,c
  1104  00050E  0E00               	movlw	0
  1105  000510  ECCC  F00E         	call	_enableSensor
  1106                           
  1107                           ;main.c: 164: enableSensor(1, 1);
  1108  000514  0E01               	movlw	1
  1109  000516  6E24               	movwf	enableSensor@status,c
  1110  000518  0E01               	movlw	1
  1111  00051A  ECCC  F00E         	call	_enableSensor
  1112                           
  1113                           ;main.c: 167: fullSpeed(&mL, &mR, 100);
  1114  00051E  0E85               	movlw	low main@mL
  1115  000520  0100               	movlb	0	; () banked
  1116  000522  6F62               	movwf	fullSpeed@mL& (0+255),b
  1117  000524  0E01               	movlw	high main@mL
  1118  000526  0100               	movlb	0	; () banked
  1119  000528  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1120  00052A  0E8E               	movlw	low main@mR
  1121  00052C  0100               	movlb	0	; () banked
  1122  00052E  6F64               	movwf	fullSpeed@mR& (0+255),b
  1123  000530  0E01               	movlw	high main@mR
  1124  000532  0100               	movlb	0	; () banked
  1125  000534  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1126  000536  0E64               	movlw	100
  1127  000538  0100               	movlb	0	; () banked
  1128  00053A  6F66               	movwf	fullSpeed@power& (0+255),b
  1129  00053C  EC7B  F00C         	call	_fullSpeed	;wreg free
  1130                           
  1131                           ;main.c: 168: delay_tenth_s(1);
  1132  000540  0E01               	movlw	1
  1133  000542  EC4E  F00E         	call	_delay_tenth_s
  1134  000546  D2D5               	goto	l3606
  1135  000548                     l3468:
  1136                           
  1137                           ;main.c: 176: SetLine(1);
  1138  000548  0E01               	movlw	1
  1139  00054A  EC88  F00E         	call	_SetLine
  1140                           
  1141                           ;main.c: 177: LCD_String("Searching");
  1142  00054E  0E44               	movlw	low STR_7
  1143  000550  6E2A               	movwf	LCD_String@string,c
  1144  000552  0E03               	movlw	high STR_7
  1145  000554  6E2B               	movwf	LCD_String@string+1,c
  1146  000556  EC2F  F00D         	call	_LCD_String	;wreg free
  1147                           
  1148                           ;main.c: 179: if (DirectionFound==-1) {
  1149  00055A  0101               	movlb	1	; () banked
  1150  00055C  2982               	incf	main@DirectionFound& (0+255),w,b
  1151  00055E  A4D8               	btfss	status,2,c
  1152  000560  D03E               	goto	l3486
  1153                           
  1154                           ; BSR set to: 1
  1155                           ;main.c: 184: MoveType[Move]=0;
  1156  000562  0101               	movlb	1	; () banked
  1157  000564  5184               	movf	main@Move& (0+255),w,b
  1158  000566  0D01               	mullw	1
  1159  000568  0E32               	movlw	low main@MoveType
  1160  00056A  24F3               	addwf	prodl,w,c
  1161  00056C  6ED9               	movwf	fsr2l,c
  1162  00056E  0E01               	movlw	high main@MoveType
  1163  000570  20F4               	addwfc	prodh,w,c
  1164  000572  6EDA               	movwf	fsr2h,c
  1165  000574  0E00               	movlw	0
  1166  000576  6EDF               	movwf	indf2,c
  1167                           
  1168                           ;main.c: 185: MoveTime[Move]=6;
  1169  000578  0101               	movlb	1	; () banked
  1170  00057A  5184               	movf	main@Move& (0+255),w,b
  1171  00057C  0D02               	mullw	2
  1172  00057E  0E4B               	movlw	low main@MoveTime
  1173  000580  24F3               	addwf	prodl,w,c
  1174  000582  6ED9               	movwf	fsr2l,c
  1175  000584  0E01               	movlw	high main@MoveTime
  1176  000586  20F4               	addwfc	prodh,w,c
  1177  000588  6EDA               	movwf	fsr2h,c
  1178  00058A  0E06               	movlw	6
  1179  00058C  6EDE               	movwf	postinc2,c
  1180  00058E  0E00               	movlw	0
  1181  000590  6EDD               	movwf	postdec2,c
  1182                           
  1183                           ; BSR set to: 1
  1184                           ;main.c: 186: Move++;
  1185  000592  0101               	movlb	1	; () banked
  1186  000594  2B84               	incf	main@Move& (0+255),f,b
  1187                           
  1188                           ; BSR set to: 1
  1189                           ;main.c: 187: fullSpeed(&mL, &mR, 100);
  1190  000596  0E85               	movlw	low main@mL
  1191  000598  0100               	movlb	0	; () banked
  1192  00059A  6F62               	movwf	fullSpeed@mL& (0+255),b
  1193  00059C  0E01               	movlw	high main@mL
  1194  00059E  0100               	movlb	0	; () banked
  1195  0005A0  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1196  0005A2  0E8E               	movlw	low main@mR
  1197  0005A4  0100               	movlb	0	; () banked
  1198  0005A6  6F64               	movwf	fullSpeed@mR& (0+255),b
  1199  0005A8  0E01               	movlw	high main@mR
  1200  0005AA  0100               	movlb	0	; () banked
  1201  0005AC  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1202  0005AE  0E64               	movlw	100
  1203  0005B0  0100               	movlb	0	; () banked
  1204  0005B2  6F66               	movwf	fullSpeed@power& (0+255),b
  1205  0005B4  EC7B  F00C         	call	_fullSpeed	;wreg free
  1206                           
  1207                           ;main.c: 188: delay_tenth_s(6);
  1208  0005B8  0E06               	movlw	6
  1209  0005BA  EC4E  F00E         	call	_delay_tenth_s
  1210                           
  1211                           ;main.c: 189: stop(&mL,&mR);
  1212  0005BE  0E85               	movlw	low main@mL
  1213  0005C0  0100               	movlb	0	; () banked
  1214  0005C2  6F62               	movwf	stop@mL& (0+255),b
  1215  0005C4  0E01               	movlw	high main@mL
  1216  0005C6  0100               	movlb	0	; () banked
  1217  0005C8  6F63               	movwf	(stop@mL+1)& (0+255),b
  1218  0005CA  0E8E               	movlw	low main@mR
  1219  0005CC  0100               	movlb	0	; () banked
  1220  0005CE  6F64               	movwf	stop@mR& (0+255),b
  1221  0005D0  0E01               	movlw	high main@mR
  1222  0005D2  0100               	movlb	0	; () banked
  1223  0005D4  6F65               	movwf	(stop@mR+1)& (0+255),b
  1224  0005D6  ECAA  F00B         	call	_stop	;wreg free
  1225                           
  1226                           ;main.c: 190: DirectionFound=0;
  1227  0005DA  0E00               	movlw	0
  1228  0005DC  D042               	goto	L2
  1229  0005DE                     l3486:
  1230                           
  1231                           ; BSR set to: 1
  1232  0005DE  0101               	movlb	1	; () banked
  1233  0005E0  5182               	movf	main@DirectionFound& (0+255),w,b
  1234  0005E2  0101               	movlb	1	; () banked
  1235  0005E4  A4D8               	btfss	status,2,c
  1236  0005E6  D02B               	goto	l3490
  1237                           
  1238                           ; BSR set to: 1
  1239                           ;main.c: 193: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1240                           ;main.c: 194: &MoveTime, &Move, &MoveType, &RFID_Read);
  1241  0005E8  0E85               	movlw	low main@mL
  1242  0005EA  0100               	movlb	0	; () banked
  1243  0005EC  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1244  0005EE  0E01               	movlw	high main@mL
  1245  0005F0  0100               	movlb	0	; () banked
  1246  0005F2  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1247  0005F4  0E8E               	movlw	low main@mR
  1248  0005F6  0100               	movlb	0	; () banked
  1249  0005F8  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1250  0005FA  0E01               	movlw	high main@mR
  1251  0005FC  0100               	movlb	0	; () banked
  1252  0005FE  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1253  000600  C17D  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1254  000604  0100               	movlb	0	; () banked
  1255  000606  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1256  000608  0E4B               	movlw	low main@MoveTime
  1257  00060A  0100               	movlb	0	; () banked
  1258  00060C  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1259  00060E  0E01               	movlw	high main@MoveTime
  1260  000610  0100               	movlb	0	; () banked
  1261  000612  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1262  000614  0E84               	movlw	low main@Move
  1263  000616  0100               	movlb	0	; () banked
  1264  000618  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1265  00061A  0E01               	movlw	high main@Move
  1266  00061C  0100               	movlb	0	; () banked
  1267  00061E  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1268  000620  0E32               	movlw	low main@MoveType
  1269  000622  0100               	movlb	0	; () banked
  1270  000624  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1271  000626  0E01               	movlw	high main@MoveType
  1272  000628  0100               	movlb	0	; () banked
  1273  00062A  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1274  00062C  0EF6               	movlw	low _RFID_Read
  1275  00062E  0100               	movlb	0	; () banked
  1276  000630  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1277  000632  0E01               	movlw	high _RFID_Read
  1278  000634  0100               	movlb	0	; () banked
  1279  000636  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1280  000638  EC8B  F005         	call	_ScanWithRange	;wreg free
  1281  00063C  D012               	goto	L2
  1282  00063E                     l3490:
  1283                           
  1284                           ; BSR set to: 1
  1285  00063E  0101               	movlb	1	; () banked
  1286  000640  0582               	decf	main@DirectionFound& (0+255),w,b
  1287  000642  A4D8               	btfss	status,2,c
  1288  000644  D011               	goto	l3494
  1289                           
  1290                           ; BSR set to: 1
  1291                           ;main.c: 197: DirectionFound=ScanIR(&mL, &mR);
  1292  000646  0E85               	movlw	low main@mL
  1293  000648  0100               	movlb	0	; () banked
  1294  00064A  6F6D               	movwf	ScanIR@mL& (0+255),b
  1295  00064C  0E01               	movlw	high main@mL
  1296  00064E  0100               	movlb	0	; () banked
  1297  000650  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1298  000652  0E8E               	movlw	low main@mR
  1299  000654  0100               	movlb	0	; () banked
  1300  000656  6F6F               	movwf	ScanIR@mR& (0+255),b
  1301  000658  0E01               	movlw	high main@mR
  1302  00065A  0100               	movlb	0	; () banked
  1303  00065C  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1304  00065E  EC73  F00A         	call	_ScanIR	;wreg free
  1305  000662                     L2:
  1306  000662  0101               	movlb	1	; () banked
  1307  000664  6F82               	movwf	main@DirectionFound& (0+255),b
  1308                           
  1309                           ;main.c: 198: } else if (DirectionFound==2) {
  1310  000666  D246               	goto	l3610
  1311  000668                     l3494:
  1312                           
  1313                           ; BSR set to: 1
  1314  000668  0E02               	movlw	2
  1315  00066A  0101               	movlb	1	; () banked
  1316  00066C  1982               	xorwf	main@DirectionFound& (0+255),w,b
  1317  00066E  A4D8               	btfss	status,2,c
  1318  000670  D241               	goto	l3610
  1319                           
  1320                           ; BSR set to: 1
  1321                           ;main.c: 200: mode=2;
  1322  000672  0E02               	movlw	2
  1323  000674  6E3B               	movwf	_mode,c	;volatile
  1324                           
  1325                           ; BSR set to: 1
  1326                           ;main.c: 201: MoveType[Move]=1;
  1327  000676  0101               	movlb	1	; () banked
  1328  000678  5184               	movf	main@Move& (0+255),w,b
  1329  00067A  0D01               	mullw	1
  1330  00067C  0E32               	movlw	low main@MoveType
  1331  00067E  24F3               	addwf	prodl,w,c
  1332  000680  6ED9               	movwf	fsr2l,c
  1333  000682  0E01               	movlw	high main@MoveType
  1334  000684  20F4               	addwfc	prodh,w,c
  1335  000686  6EDA               	movwf	fsr2h,c
  1336  000688  0E01               	movlw	1
  1337  00068A  6EDF               	movwf	indf2,c
  1338                           
  1339                           ; BSR set to: 1
  1340                           ;main.c: 202: }
  1341                           ;main.c: 204: break;
  1342                           
  1343                           ; BSR set to: 1
  1344                           
  1345                           ; BSR set to: 1
  1346                           
  1347                           ; BSR set to: 1
  1348  00068C  D233               	goto	l3610
  1349  00068E                     l3500:
  1350                           
  1351                           ;main.c: 211: if (RFID_Read) {
  1352  00068E  0101               	movlb	1	; () banked
  1353  000690  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1354  000692  B4D8               	btfsc	status,2,c
  1355  000694  D0A2               	goto	l3542
  1356                           
  1357                           ; BSR set to: 1
  1358                           ;main.c: 212: stop(&mL, &mR);
  1359  000696  0E85               	movlw	low main@mL
  1360  000698  0100               	movlb	0	; () banked
  1361  00069A  6F62               	movwf	stop@mL& (0+255),b
  1362  00069C  0E01               	movlw	high main@mL
  1363  00069E  0100               	movlb	0	; () banked
  1364  0006A0  6F63               	movwf	(stop@mL+1)& (0+255),b
  1365  0006A2  0E8E               	movlw	low main@mR
  1366  0006A4  0100               	movlb	0	; () banked
  1367  0006A6  6F64               	movwf	stop@mR& (0+255),b
  1368  0006A8  0E01               	movlw	high main@mR
  1369  0006AA  0100               	movlb	0	; () banked
  1370  0006AC  6F65               	movwf	(stop@mR+1)& (0+255),b
  1371  0006AE  ECAA  F00B         	call	_stop	;wreg free
  1372                           
  1373                           ;main.c: 213: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1374  0006B2  0E03               	movlw	3
  1375  0006B4  0101               	movlb	1	; () banked
  1376  0006B6  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1377  0006B8  A4D8               	btfss	status,2,c
  1378  0006BA  D002               	goto	u2880
  1379  0006BC  0E01               	movlw	1
  1380  0006BE  D001               	goto	u2882
  1381  0006C0                     u2880:
  1382  0006C0  0E00               	movlw	0
  1383  0006C2                     u2882:
  1384  0006C2  0100               	movlb	0	; () banked
  1385  0006C4  6FBA               	movwf	??_main& (0+255),b
  1386  0006C6  0E02               	movlw	2
  1387  0006C8  0101               	movlb	1	; () banked
  1388  0006CA  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1389  0006CC  A4D8               	btfss	status,2,c
  1390  0006CE  D002               	goto	u2890
  1391  0006D0  0E01               	movlw	1
  1392  0006D2  D001               	goto	u2892
  1393  0006D4                     u2890:
  1394  0006D4  0E00               	movlw	0
  1395  0006D6                     u2892:
  1396  0006D6  0100               	movlb	0	; () banked
  1397  0006D8  15BA               	andwf	??_main& (0+255),w,b
  1398  0006DA  A0E8               	btfss	wreg,0,c
  1399  0006DC  D20B               	goto	l3610
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 214: if (VerifySignal(&ReceivedString)){
  1403  0006DE  0EE6               	movlw	low _ReceivedString
  1404  0006E0  6E24               	movwf	VerifySignal@Signal,c
  1405  0006E2  0E01               	movlw	high _ReceivedString
  1406  0006E4  6E25               	movwf	VerifySignal@Signal+1,c
  1407  0006E6  EC5E  F00D         	call	_VerifySignal	;wreg free
  1408  0006EA  0900               	iorlw	0
  1409  0006EC  B4D8               	btfsc	status,2,c
  1410  0006EE  D041               	goto	l3534
  1411                           
  1412                           ;main.c: 216: for (i=0; i<10; i++){
  1413  0006F0  0E00               	movlw	0
  1414  0006F2  0101               	movlb	1	; () banked
  1415  0006F4  6F83               	movwf	main@i& (0+255),b
  1416  0006F6                     l3510:
  1417                           
  1418                           ; BSR set to: 1
  1419  0006F6  0E09               	movlw	9
  1420  0006F8  0101               	movlb	1	; () banked
  1421  0006FA  6583               	cpfsgt	main@i& (0+255),b
  1422  0006FC  D001               	goto	l3514
  1423  0006FE  D020               	goto	l3520
  1424  000700                     l3514:
  1425                           
  1426                           ; BSR set to: 1
  1427                           ;main.c: 217: Message[i] = ReceivedString[i+1];
  1428  000700  0101               	movlb	1	; () banked
  1429  000702  5183               	movf	main@i& (0+255),w,b
  1430  000704  0100               	movlb	0	; () banked
  1431  000706  6FBA               	movwf	??_main& (0+255),b
  1432  000708  6BBB               	clrf	(??_main+1)& (0+255),b
  1433  00070A  0E01               	movlw	1
  1434  00070C  0100               	movlb	0	; () banked
  1435  00070E  27BA               	addwf	??_main& (0+255),f,b
  1436  000710  0E00               	movlw	0
  1437  000712  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1438  000714  0EE6               	movlw	low _ReceivedString
  1439  000716  0100               	movlb	0	; () banked
  1440  000718  25BA               	addwf	??_main& (0+255),w,b
  1441  00071A  6ED9               	movwf	fsr2l,c
  1442  00071C  0E01               	movlw	high _ReceivedString
  1443  00071E  0100               	movlb	0	; () banked
  1444  000720  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1445  000722  6EDA               	movwf	fsr2h,c
  1446  000724  0101               	movlb	1	; () banked
  1447  000726  5183               	movf	main@i& (0+255),w,b
  1448  000728  0D01               	mullw	1
  1449  00072A  0E28               	movlw	low main@Message
  1450  00072C  24F3               	addwf	prodl,w,c
  1451  00072E  6EE1               	movwf	fsr1l,c
  1452  000730  0E01               	movlw	high main@Message
  1453  000732  20F4               	addwfc	prodh,w,c
  1454  000734  6EE2               	movwf	fsr1h,c
  1455  000736  CFDF FFE7          	movff	indf2,indf1
  1456                           
  1457                           ; BSR set to: 1
  1458  00073A  0101               	movlb	1	; () banked
  1459  00073C  2B83               	incf	main@i& (0+255),f,b
  1460  00073E  D7DB               	goto	l3510
  1461  000740                     l3520:
  1462                           
  1463                           ; BSR set to: 1
  1464                           ;main.c: 218: }
  1465                           ;main.c: 221: for (i=0; i<16; i++) {
  1466  000740  0E00               	movlw	0
  1467  000742  0101               	movlb	1	; () banked
  1468  000744  6F83               	movwf	main@i& (0+255),b
  1469  000746                     l3522:
  1470                           
  1471                           ; BSR set to: 1
  1472  000746  0E0F               	movlw	15
  1473  000748  0101               	movlb	1	; () banked
  1474  00074A  6583               	cpfsgt	main@i& (0+255),b
  1475  00074C  D001               	goto	l3526
  1476  00074E  D00E               	goto	l3532
  1477  000750                     l3526:
  1478                           
  1479                           ; BSR set to: 1
  1480                           ;main.c: 222: ReceivedString[i]=0;
  1481  000750  0101               	movlb	1	; () banked
  1482  000752  5183               	movf	main@i& (0+255),w,b
  1483  000754  0D01               	mullw	1
  1484  000756  0EE6               	movlw	low _ReceivedString
  1485  000758  24F3               	addwf	prodl,w,c
  1486  00075A  6ED9               	movwf	fsr2l,c
  1487  00075C  0E01               	movlw	high _ReceivedString
  1488  00075E  20F4               	addwfc	prodh,w,c
  1489  000760  6EDA               	movwf	fsr2h,c
  1490  000762  0E00               	movlw	0
  1491  000764  6EDF               	movwf	indf2,c
  1492                           
  1493                           ; BSR set to: 1
  1494  000766  0101               	movlb	1	; () banked
  1495  000768  2B83               	incf	main@i& (0+255),f,b
  1496  00076A  D7ED               	goto	l3522
  1497  00076C                     l3532:
  1498                           
  1499                           ; BSR set to: 1
  1500                           ;main.c: 223: }
  1501                           ;main.c: 224: mode=3;
  1502  00076C  0E03               	movlw	3
  1503  00076E  6E3B               	movwf	_mode,c	;volatile
  1504                           
  1505                           ;main.c: 226: } else {
  1506  000770  D1C1               	goto	l3610
  1507  000772                     l3534:
  1508                           
  1509                           ;main.c: 227: fullSpeedBack(&mL,&mR, 100);
  1510  000772  0E85               	movlw	low main@mL
  1511  000774  0100               	movlb	0	; () banked
  1512  000776  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1513  000778  0E01               	movlw	high main@mL
  1514  00077A  0100               	movlb	0	; () banked
  1515  00077C  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1516  00077E  0E8E               	movlw	low main@mR
  1517  000780  0100               	movlb	0	; () banked
  1518  000782  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1519  000784  0E01               	movlw	high main@mR
  1520  000786  0100               	movlb	0	; () banked
  1521  000788  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1522  00078A  0E64               	movlw	100
  1523  00078C  0100               	movlb	0	; () banked
  1524  00078E  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1525  000790  ECD4  F00D         	call	_fullSpeedBack	;wreg free
  1526                           
  1527                           ;main.c: 228: delay_tenth_s(5);
  1528  000794  0E05               	movlw	5
  1529  000796  EC4E  F00E         	call	_delay_tenth_s
  1530                           
  1531                           ;main.c: 229: stop(&mL,&mR);
  1532  00079A  0E85               	movlw	low main@mL
  1533  00079C  0100               	movlb	0	; () banked
  1534  00079E  6F62               	movwf	stop@mL& (0+255),b
  1535  0007A0  0E01               	movlw	high main@mL
  1536  0007A2  0100               	movlb	0	; () banked
  1537  0007A4  6F63               	movwf	(stop@mL+1)& (0+255),b
  1538  0007A6  0E8E               	movlw	low main@mR
  1539  0007A8  0100               	movlb	0	; () banked
  1540  0007AA  6F64               	movwf	stop@mR& (0+255),b
  1541  0007AC  0E01               	movlw	high main@mR
  1542  0007AE  0100               	movlb	0	; () banked
  1543  0007B0  6F65               	movwf	(stop@mR+1)& (0+255),b
  1544  0007B2  ECAA  F00B         	call	_stop	;wreg free
  1545                           
  1546                           ;main.c: 230: fullSpeed(&mL,&mR, 100);
  1547  0007B6  0E85               	movlw	low main@mL
  1548  0007B8  0100               	movlb	0	; () banked
  1549  0007BA  6F62               	movwf	fullSpeed@mL& (0+255),b
  1550  0007BC  0E01               	movlw	high main@mL
  1551  0007BE  0100               	movlb	0	; () banked
  1552  0007C0  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1553  0007C2  0E8E               	movlw	low main@mR
  1554  0007C4  0100               	movlb	0	; () banked
  1555  0007C6  6F64               	movwf	fullSpeed@mR& (0+255),b
  1556  0007C8  0E01               	movlw	high main@mR
  1557  0007CA  0100               	movlb	0	; () banked
  1558  0007CC  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1559  0007CE  0E64               	movlw	100
  1560  0007D0  0100               	movlb	0	; () banked
  1561  0007D2  6F66               	movwf	fullSpeed@power& (0+255),b
  1562  0007D4  EC7B  F00C         	call	_fullSpeed	;wreg free
  1563                           
  1564                           ;main.c: 231: }
  1565                           ;main.c: 232: }
  1566                           ;main.c: 233: } else {
  1567  0007D8  D18D               	goto	l3610
  1568  0007DA                     l3542:
  1569                           
  1570                           ;main.c: 234: DirectionFound=1;
  1571  0007DA  0E01               	movlw	1
  1572  0007DC  0101               	movlb	1	; () banked
  1573  0007DE  6F82               	movwf	main@DirectionFound& (0+255),b
  1574                           
  1575                           ;main.c: 235: mode=1;
  1576  0007E0  0E01               	movlw	1
  1577  0007E2  6E3B               	movwf	_mode,c	;volatile
  1578                           
  1579                           ; BSR set to: 1
  1580                           ;main.c: 237: fullSpeed(&mL,&mR, 100);
  1581  0007E4  0E85               	movlw	low main@mL
  1582  0007E6  0100               	movlb	0	; () banked
  1583  0007E8  6F62               	movwf	fullSpeed@mL& (0+255),b
  1584  0007EA  0E01               	movlw	high main@mL
  1585  0007EC  0100               	movlb	0	; () banked
  1586  0007EE  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1587  0007F0  0E8E               	movlw	low main@mR
  1588  0007F2  0100               	movlb	0	; () banked
  1589  0007F4  6F64               	movwf	fullSpeed@mR& (0+255),b
  1590  0007F6  0E01               	movlw	high main@mR
  1591  0007F8  0100               	movlb	0	; () banked
  1592  0007FA  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1593  0007FC  0E64               	movlw	100
  1594  0007FE  0100               	movlb	0	; () banked
  1595  000800  6F66               	movwf	fullSpeed@power& (0+255),b
  1596  000802  EC7B  F00C         	call	_fullSpeed	;wreg free
  1597                           
  1598                           ;main.c: 238: delay_tenth_s(1);
  1599  000806  0E01               	movlw	1
  1600  000808  EC4E  F00E         	call	_delay_tenth_s
  1601                           
  1602                           ;main.c: 239: MoveType[Move] = 0;
  1603  00080C  0101               	movlb	1	; () banked
  1604  00080E  5184               	movf	main@Move& (0+255),w,b
  1605  000810  0D01               	mullw	1
  1606  000812  0E32               	movlw	low main@MoveType
  1607  000814  24F3               	addwf	prodl,w,c
  1608  000816  6ED9               	movwf	fsr2l,c
  1609  000818  0E01               	movlw	high main@MoveType
  1610  00081A  20F4               	addwfc	prodh,w,c
  1611  00081C  6EDA               	movwf	fsr2h,c
  1612  00081E  0E00               	movlw	0
  1613  000820  6EDF               	movwf	indf2,c
  1614                           
  1615                           ; BSR set to: 1
  1616                           ;main.c: 240: MoveTime[Move] = 5;
  1617  000822  0101               	movlb	1	; () banked
  1618  000824  5184               	movf	main@Move& (0+255),w,b
  1619  000826  0D02               	mullw	2
  1620  000828  0E4B               	movlw	low main@MoveTime
  1621  00082A  24F3               	addwf	prodl,w,c
  1622  00082C  6ED9               	movwf	fsr2l,c
  1623  00082E  0E01               	movlw	high main@MoveTime
  1624  000830  20F4               	addwfc	prodh,w,c
  1625  000832  6EDA               	movwf	fsr2h,c
  1626  000834  0E05               	movlw	5
  1627  000836  6EDE               	movwf	postinc2,c
  1628  000838  0E00               	movlw	0
  1629  00083A  6EDD               	movwf	postdec2,c
  1630                           
  1631                           ; BSR set to: 1
  1632                           ;main.c: 241: Move++;
  1633  00083C  0101               	movlb	1	; () banked
  1634  00083E  2B84               	incf	main@Move& (0+255),f,b
  1635                           
  1636                           ; BSR set to: 1
  1637                           ;main.c: 242: }
  1638                           ;main.c: 244: break;
  1639  000840  D159               	goto	l3610
  1640  000842                     l3554:
  1641                           
  1642                           ;main.c: 249: SetLine(1);
  1643  000842  0E01               	movlw	1
  1644  000844  EC88  F00E         	call	_SetLine
  1645                           
  1646                           ;main.c: 250: LCD_String(Message);
  1647  000848  0E28               	movlw	low main@Message
  1648  00084A  6E2A               	movwf	LCD_String@string,c
  1649  00084C  0E01               	movlw	high main@Message
  1650  00084E  6E2B               	movwf	LCD_String@string+1,c
  1651  000850  EC2F  F00D         	call	_LCD_String	;wreg free
  1652                           
  1653                           ;main.c: 251: SetLine(2);
  1654  000854  0E02               	movlw	2
  1655  000856  EC88  F00E         	call	_SetLine
  1656                           
  1657                           ;main.c: 252: LCD_String("Going Home");
  1658  00085A  0E39               	movlw	low STR_8
  1659  00085C  6E2A               	movwf	LCD_String@string,c
  1660  00085E  0E03               	movlw	high STR_8
  1661  000860  6E2B               	movwf	LCD_String@string+1,c
  1662  000862  EC2F  F00D         	call	_LCD_String	;wreg free
  1663  000866                     l3560:
  1664  000866  0101               	movlb	1	; () banked
  1665  000868  BF84               	btfsc	main@Move& (0+255),7,b
  1666  00086A  D135               	goto	l3604
  1667                           
  1668                           ; BSR set to: 1
  1669                           ;main.c: 255: stop(&mL,&mR);
  1670                           
  1671                           ; BSR set to: 1
  1672                           
  1673                           ; BSR set to: 1
  1674  00086C  0E85               	movlw	low main@mL
  1675  00086E  0100               	movlb	0	; () banked
  1676  000870  6F62               	movwf	stop@mL& (0+255),b
  1677  000872  0E01               	movlw	high main@mL
  1678  000874  0100               	movlb	0	; () banked
  1679  000876  6F63               	movwf	(stop@mL+1)& (0+255),b
  1680  000878  0E8E               	movlw	low main@mR
  1681  00087A  0100               	movlb	0	; () banked
  1682  00087C  6F64               	movwf	stop@mR& (0+255),b
  1683  00087E  0E01               	movlw	high main@mR
  1684  000880  0100               	movlb	0	; () banked
  1685  000882  6F65               	movwf	(stop@mR+1)& (0+255),b
  1686  000884  ECAA  F00B         	call	_stop	;wreg free
  1687                           
  1688                           ;main.c: 256: if (MoveType[Move]==0) {
  1689  000888  0101               	movlb	1	; () banked
  1690  00088A  5184               	movf	main@Move& (0+255),w,b
  1691  00088C  0D01               	mullw	1
  1692  00088E  0E32               	movlw	low main@MoveType
  1693  000890  24F3               	addwf	prodl,w,c
  1694  000892  6ED9               	movwf	fsr2l,c
  1695  000894  0E01               	movlw	high main@MoveType
  1696  000896  20F4               	addwfc	prodh,w,c
  1697  000898  6EDA               	movwf	fsr2h,c
  1698  00089A  50DF               	movf	indf2,w,c
  1699  00089C  A4D8               	btfss	status,2,c
  1700  00089E  D01E               	goto	l3570
  1701                           
  1702                           ; BSR set to: 1
  1703                           ;main.c: 257: fullSpeedBack(&mL,&mR,100);
  1704  0008A0  0E85               	movlw	low main@mL
  1705  0008A2  0100               	movlb	0	; () banked
  1706  0008A4  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1707  0008A6  0E01               	movlw	high main@mL
  1708  0008A8  0100               	movlb	0	; () banked
  1709  0008AA  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1710  0008AC  0E8E               	movlw	low main@mR
  1711  0008AE  0100               	movlb	0	; () banked
  1712  0008B0  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1713  0008B2  0E01               	movlw	high main@mR
  1714  0008B4  0100               	movlb	0	; () banked
  1715  0008B6  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1716  0008B8  0E64               	movlw	100
  1717  0008BA  0100               	movlb	0	; () banked
  1718  0008BC  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1719  0008BE  ECD4  F00D         	call	_fullSpeedBack	;wreg free
  1720                           
  1721                           ;main.c: 258: delay_tenth_s(MoveTime[Move]);
  1722  0008C2  0101               	movlb	1	; () banked
  1723  0008C4  5184               	movf	main@Move& (0+255),w,b
  1724  0008C6  0D02               	mullw	2
  1725  0008C8  0E4B               	movlw	low main@MoveTime
  1726  0008CA  24F3               	addwf	prodl,w,c
  1727  0008CC  6ED9               	movwf	fsr2l,c
  1728  0008CE  0E01               	movlw	high main@MoveTime
  1729  0008D0  20F4               	addwfc	prodh,w,c
  1730  0008D2  6EDA               	movwf	fsr2h,c
  1731  0008D4  50DF               	movf	indf2,w,c
  1732  0008D6  EC4E  F00E         	call	_delay_tenth_s
  1733                           
  1734                           ;main.c: 259: } else if (MoveType[Move]==1) {
  1735  0008DA  D0F7               	goto	l3596
  1736  0008DC                     l3570:
  1737  0008DC  0101               	movlb	1	; () banked
  1738  0008DE  5184               	movf	main@Move& (0+255),w,b
  1739  0008E0  0D01               	mullw	1
  1740  0008E2  0E32               	movlw	low main@MoveType
  1741  0008E4  24F3               	addwf	prodl,w,c
  1742  0008E6  6ED9               	movwf	fsr2l,c
  1743  0008E8  0E01               	movlw	high main@MoveType
  1744  0008EA  20F4               	addwfc	prodh,w,c
  1745  0008EC  6EDA               	movwf	fsr2h,c
  1746  0008EE  04DE               	decf	postinc2,w,c
  1747  0008F0  A4D8               	btfss	status,2,c
  1748  0008F2  D091               	goto	l3588
  1749                           
  1750                           ; BSR set to: 1
  1751                           ;main.c: 260: T0CONbits.TMR0ON=0;
  1752  0008F4  9ED5               	bcf	4053,7,c	;volatile
  1753                           
  1754                           ; BSR set to: 1
  1755                           ;main.c: 261: TMR0L = 0;
  1756  0008F6  0E00               	movlw	0
  1757  0008F8  6ED6               	movwf	4054,c	;volatile
  1758                           
  1759                           ;main.c: 262: TMR0H = 0;
  1760  0008FA  0E00               	movlw	0
  1761  0008FC  6ED7               	movwf	4055,c	;volatile
  1762                           
  1763                           ; BSR set to: 1
  1764                           ;main.c: 263: if (MoveTime[Move]>0) {
  1765  0008FE  0101               	movlb	1	; () banked
  1766  000900  5184               	movf	main@Move& (0+255),w,b
  1767  000902  0D02               	mullw	2
  1768  000904  0E4B               	movlw	low main@MoveTime
  1769  000906  24F3               	addwf	prodl,w,c
  1770  000908  6ED9               	movwf	fsr2l,c
  1771  00090A  0E01               	movlw	high main@MoveTime
  1772  00090C  20F4               	addwfc	prodh,w,c
  1773  00090E  6EDA               	movwf	fsr2h,c
  1774  000910  0E01               	movlw	1
  1775  000912  BEDB               	btfsc	plusw2,7,c
  1776  000914  D03D               	goto	l429
  1777  000916  0E01               	movlw	1
  1778  000918  50DB               	movf	plusw2,w,c
  1779  00091A  E103               	bnz	u2990
  1780  00091C  04DE               	decf	postinc2,w,c
  1781  00091E  A0D8               	btfss	status,0,c
  1782  000920  D037               	goto	l429
  1783  000922                     u2990:
  1784                           
  1785                           ; BSR set to: 1
  1786                           ;main.c: 264: T0CONbits.TMR0ON=1;
  1787  000922  8ED5               	bsf	4053,7,c	;volatile
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;main.c: 265: turnRight(&mL,&mR,40);
  1791  000924  0E85               	movlw	low main@mL
  1792  000926  0100               	movlb	0	; () banked
  1793  000928  6F67               	movwf	turnRight@mL& (0+255),b
  1794  00092A  0E01               	movlw	high main@mL
  1795  00092C  0100               	movlb	0	; () banked
  1796  00092E  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1797  000930  0E8E               	movlw	low main@mR
  1798  000932  0100               	movlb	0	; () banked
  1799  000934  6F69               	movwf	turnRight@mR& (0+255),b
  1800  000936  0E01               	movlw	high main@mR
  1801  000938  0100               	movlb	0	; () banked
  1802  00093A  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1803  00093C  0E28               	movlw	40
  1804  00093E  0100               	movlb	0	; () banked
  1805  000940  6F6B               	movwf	turnRight@power& (0+255),b
  1806  000942  ECF3  F00D         	call	_turnRight	;wreg free
  1807  000946                     l3582:
  1808  000946  0101               	movlb	1	; () banked
  1809  000948  5184               	movf	main@Move& (0+255),w,b
  1810  00094A  0D02               	mullw	2
  1811  00094C  0E4B               	movlw	low main@MoveTime
  1812  00094E  24F3               	addwf	prodl,w,c
  1813  000950  6ED9               	movwf	fsr2l,c
  1814  000952  0E01               	movlw	high main@MoveTime
  1815  000954  20F4               	addwfc	prodh,w,c
  1816  000956  6EDA               	movwf	fsr2h,c
  1817  000958  50D6               	movf	4054,w,c	;volatile
  1818  00095A  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1819  00095E  0100               	movlb	0	; () banked
  1820  000960  6BBD               	clrf	(??_main+3)& (0+255),b
  1821  000962  C0BC  F0BD         	movff	??_main+2,??_main+3
  1822  000966  0100               	movlb	0	; () banked
  1823  000968  6BBC               	clrf	(??_main+2)& (0+255),b
  1824  00096A  0100               	movlb	0	; () banked
  1825  00096C  27BC               	addwf	(??_main+2)& (0+255),f,b
  1826  00096E  0E00               	movlw	0
  1827  000970  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1828  000972  50DE               	movf	postinc2,w,c
  1829  000974  0100               	movlb	0	; () banked
  1830  000976  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1831  000978  0100               	movlb	0	; () banked
  1832  00097A  51BD               	movf	(??_main+3)& (0+255),w,b
  1833  00097C  0A80               	xorlw	128
  1834  00097E  0100               	movlb	0	; () banked
  1835  000980  6FBE               	movwf	(??_main+4)& (0+255),b
  1836  000982  50DE               	movf	postinc2,w,c
  1837  000984  0A80               	xorlw	128
  1838  000986  0100               	movlb	0	; () banked
  1839  000988  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1840  00098A  A0D8               	btfss	status,0,c
  1841  00098C  D7DC               	goto	l3582
  1842  00098E  D041               	goto	l436
  1843  000990                     l429:
  1844                           
  1845                           ; BSR set to: 1
  1846                           ;main.c: 270: T0CONbits.TMR0ON=1;
  1847  000990  8ED5               	bsf	4053,7,c	;volatile
  1848                           
  1849                           ; BSR set to: 1
  1850                           ;main.c: 271: turnLeft(&mL,&mR,40);
  1851  000992  0E85               	movlw	low main@mL
  1852  000994  0100               	movlb	0	; () banked
  1853  000996  6F67               	movwf	turnLeft@mL& (0+255),b
  1854  000998  0E01               	movlw	high main@mL
  1855  00099A  0100               	movlb	0	; () banked
  1856  00099C  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1857  00099E  0E8E               	movlw	low main@mR
  1858  0009A0  0100               	movlb	0	; () banked
  1859  0009A2  6F69               	movwf	turnLeft@mR& (0+255),b
  1860  0009A4  0E01               	movlw	high main@mR
  1861  0009A6  0100               	movlb	0	; () banked
  1862  0009A8  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1863  0009AA  0E28               	movlw	40
  1864  0009AC  0100               	movlb	0	; () banked
  1865  0009AE  6F6B               	movwf	turnLeft@power& (0+255),b
  1866  0009B0  EC12  F00E         	call	_turnLeft	;wreg free
  1867  0009B4                     l3586:
  1868  0009B4  0101               	movlb	1	; () banked
  1869  0009B6  5184               	movf	main@Move& (0+255),w,b
  1870  0009B8  0D02               	mullw	2
  1871  0009BA  0E4B               	movlw	low main@MoveTime
  1872  0009BC  24F3               	addwf	prodl,w,c
  1873  0009BE  6ED9               	movwf	fsr2l,c
  1874  0009C0  0E01               	movlw	high main@MoveTime
  1875  0009C2  20F4               	addwfc	prodh,w,c
  1876  0009C4  6EDA               	movwf	fsr2h,c
  1877  0009C6  CFDE F0BA          	movff	postinc2,??_main
  1878  0009CA  CFDD F0BB          	movff	postdec2,??_main+1
  1879  0009CE  0100               	movlb	0	; () banked
  1880  0009D0  1FBA               	comf	??_main& (0+255),f,b
  1881  0009D2  1FBB               	comf	(??_main+1)& (0+255),f,b
  1882  0009D4  4BBA               	infsnz	??_main& (0+255),f,b
  1883  0009D6  2BBB               	incf	(??_main+1)& (0+255),f,b
  1884  0009D8  50D6               	movf	4054,w,c	;volatile
  1885  0009DA  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1886  0009DE  0100               	movlb	0	; () banked
  1887  0009E0  6BBD               	clrf	(??_main+3)& (0+255),b
  1888  0009E2  C0BC  F0BD         	movff	??_main+2,??_main+3
  1889  0009E6  0100               	movlb	0	; () banked
  1890  0009E8  6BBC               	clrf	(??_main+2)& (0+255),b
  1891  0009EA  0100               	movlb	0	; () banked
  1892  0009EC  27BC               	addwf	(??_main+2)& (0+255),f,b
  1893  0009EE  0E00               	movlw	0
  1894  0009F0  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1895  0009F2  0100               	movlb	0	; () banked
  1896  0009F4  51BA               	movf	??_main& (0+255),w,b
  1897  0009F6  0100               	movlb	0	; () banked
  1898  0009F8  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1899  0009FA  0100               	movlb	0	; () banked
  1900  0009FC  51BD               	movf	(??_main+3)& (0+255),w,b
  1901  0009FE  0A80               	xorlw	128
  1902  000A00  0100               	movlb	0	; () banked
  1903  000A02  6FBE               	movwf	(??_main+4)& (0+255),b
  1904  000A04  0100               	movlb	0	; () banked
  1905  000A06  51BB               	movf	(??_main+1)& (0+255),w,b
  1906  000A08  0A80               	xorlw	128
  1907  000A0A  0100               	movlb	0	; () banked
  1908  000A0C  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1909  000A0E  A0D8               	btfss	status,0,c
  1910  000A10  D7D1               	goto	l3586
  1911  000A12                     l436:
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;main.c: 274: T0CONbits.TMR0ON=0;
  1915  000A12  9ED5               	bcf	4053,7,c	;volatile
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;main.c: 275: }
  1919                           ;main.c: 276: } else if (MoveType[Move]==2) {
  1920  000A14  D05A               	goto	l3596
  1921  000A16                     l3588:
  1922  000A16  0101               	movlb	1	; () banked
  1923  000A18  5184               	movf	main@Move& (0+255),w,b
  1924  000A1A  0D01               	mullw	1
  1925  000A1C  0E32               	movlw	low main@MoveType
  1926  000A1E  24F3               	addwf	prodl,w,c
  1927  000A20  6ED9               	movwf	fsr2l,c
  1928  000A22  0E01               	movlw	high main@MoveType
  1929  000A24  20F4               	addwfc	prodh,w,c
  1930  000A26  6EDA               	movwf	fsr2h,c
  1931  000A28  0E02               	movlw	2
  1932  000A2A  18DE               	xorwf	postinc2,w,c
  1933  000A2C  A4D8               	btfss	status,2,c
  1934  000A2E  D04D               	goto	l3596
  1935                           
  1936                           ; BSR set to: 1
  1937                           ;main.c: 277: if (MoveTime[Move]>0) {
  1938  000A30  0101               	movlb	1	; () banked
  1939  000A32  5184               	movf	main@Move& (0+255),w,b
  1940  000A34  0D02               	mullw	2
  1941  000A36  0E4B               	movlw	low main@MoveTime
  1942  000A38  24F3               	addwf	prodl,w,c
  1943  000A3A  6ED9               	movwf	fsr2l,c
  1944  000A3C  0E01               	movlw	high main@MoveTime
  1945  000A3E  20F4               	addwfc	prodh,w,c
  1946  000A40  6EDA               	movwf	fsr2h,c
  1947  000A42  0E01               	movlw	1
  1948  000A44  BEDB               	btfsc	plusw2,7,c
  1949  000A46  D024               	goto	l3594
  1950  000A48  0E01               	movlw	1
  1951  000A4A  50DB               	movf	plusw2,w,c
  1952  000A4C  E103               	bnz	u3030
  1953  000A4E  04DE               	decf	postinc2,w,c
  1954  000A50  A0D8               	btfss	status,0,c
  1955  000A52  D01E               	goto	l3594
  1956  000A54                     u3030:
  1957                           
  1958                           ; BSR set to: 1
  1959                           ;main.c: 278: turnRight(&mL,&mR,100);
  1960  000A54  0E85               	movlw	low main@mL
  1961  000A56  0100               	movlb	0	; () banked
  1962  000A58  6F67               	movwf	turnRight@mL& (0+255),b
  1963  000A5A  0E01               	movlw	high main@mL
  1964  000A5C  0100               	movlb	0	; () banked
  1965  000A5E  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1966  000A60  0E8E               	movlw	low main@mR
  1967  000A62  0100               	movlb	0	; () banked
  1968  000A64  6F69               	movwf	turnRight@mR& (0+255),b
  1969  000A66  0E01               	movlw	high main@mR
  1970  000A68  0100               	movlb	0	; () banked
  1971  000A6A  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1972  000A6C  0E64               	movlw	100
  1973  000A6E  0100               	movlb	0	; () banked
  1974  000A70  6F6B               	movwf	turnRight@power& (0+255),b
  1975  000A72  ECF3  F00D         	call	_turnRight	;wreg free
  1976                           
  1977                           ;main.c: 279: delay_tenth_s(MoveTime[Move]);
  1978  000A76  0101               	movlb	1	; () banked
  1979  000A78  5184               	movf	main@Move& (0+255),w,b
  1980  000A7A  0D02               	mullw	2
  1981  000A7C  0E4B               	movlw	low main@MoveTime
  1982  000A7E  24F3               	addwf	prodl,w,c
  1983  000A80  6ED9               	movwf	fsr2l,c
  1984  000A82  0E01               	movlw	high main@MoveTime
  1985  000A84  20F4               	addwfc	prodh,w,c
  1986  000A86  6EDA               	movwf	fsr2h,c
  1987  000A88  50DF               	movf	indf2,w,c
  1988  000A8A  EC4E  F00E         	call	_delay_tenth_s
  1989                           
  1990                           ;main.c: 280: } else {
  1991  000A8E  D01D               	goto	l3596
  1992  000A90                     l3594:
  1993                           
  1994                           ;main.c: 281: turnLeft(&mL,&mR,100);
  1995  000A90  0E85               	movlw	low main@mL
  1996  000A92  0100               	movlb	0	; () banked
  1997  000A94  6F67               	movwf	turnLeft@mL& (0+255),b
  1998  000A96  0E01               	movlw	high main@mL
  1999  000A98  0100               	movlb	0	; () banked
  2000  000A9A  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2001  000A9C  0E8E               	movlw	low main@mR
  2002  000A9E  0100               	movlb	0	; () banked
  2003  000AA0  6F69               	movwf	turnLeft@mR& (0+255),b
  2004  000AA2  0E01               	movlw	high main@mR
  2005  000AA4  0100               	movlb	0	; () banked
  2006  000AA6  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2007  000AA8  0E64               	movlw	100
  2008  000AAA  0100               	movlb	0	; () banked
  2009  000AAC  6F6B               	movwf	turnLeft@power& (0+255),b
  2010  000AAE  EC12  F00E         	call	_turnLeft	;wreg free
  2011                           
  2012                           ;main.c: 282: delay_tenth_s(MoveTime[Move]);
  2013  000AB2  0101               	movlb	1	; () banked
  2014  000AB4  5184               	movf	main@Move& (0+255),w,b
  2015  000AB6  0D02               	mullw	2
  2016  000AB8  0E4B               	movlw	low main@MoveTime
  2017  000ABA  24F3               	addwf	prodl,w,c
  2018  000ABC  6ED9               	movwf	fsr2l,c
  2019  000ABE  0E01               	movlw	high main@MoveTime
  2020  000AC0  20F4               	addwfc	prodh,w,c
  2021  000AC2  6EDA               	movwf	fsr2h,c
  2022  000AC4  50DF               	movf	indf2,w,c
  2023  000AC6  EC4E  F00E         	call	_delay_tenth_s
  2024  000ACA                     l3596:
  2025                           
  2026                           ;main.c: 283: }
  2027                           ;main.c: 284: }
  2028                           ;main.c: 285: if (mode==-1) {
  2029  000ACA  283B               	incf	_mode,w,c	;volatile
  2030  000ACC  B4D8               	btfsc	status,2,c
  2031  000ACE  D003               	goto	l3604
  2032                           
  2033                           ;main.c: 286: break;
  2034  000AD0  0101               	movlb	1	; () banked
  2035  000AD2  0784               	decf	main@Move& (0+255),f,b
  2036  000AD4  D6C8               	goto	l3560
  2037  000AD6                     l3604:
  2038                           
  2039                           ;main.c: 287: }
  2040                           ;main.c: 288: }
  2041                           ;main.c: 289: stop(&mL,&mR);
  2042  000AD6  0E85               	movlw	low main@mL
  2043  000AD8  0100               	movlb	0	; () banked
  2044  000ADA  6F62               	movwf	stop@mL& (0+255),b
  2045  000ADC  0E01               	movlw	high main@mL
  2046  000ADE  0100               	movlb	0	; () banked
  2047  000AE0  6F63               	movwf	(stop@mL+1)& (0+255),b
  2048  000AE2  0E8E               	movlw	low main@mR
  2049  000AE4  0100               	movlb	0	; () banked
  2050  000AE6  6F64               	movwf	stop@mR& (0+255),b
  2051  000AE8  0E01               	movlw	high main@mR
  2052  000AEA  0100               	movlb	0	; () banked
  2053  000AEC  6F65               	movwf	(stop@mR+1)& (0+255),b
  2054  000AEE  ECAA  F00B         	call	_stop	;wreg free
  2055  000AF2                     l3606:
  2056                           
  2057                           ;main.c: 290: mode=-1;
  2058  000AF2  683B               	setf	_mode,c	;volatile
  2059  000AF4                     l3610:
  2060  000AF4  503B               	movf	_mode,w,c	;volatile
  2061                           
  2062                           ; Switch size 1, requested type "space"
  2063                           ; Number of cases is 5, Range of values is 0 to 255
  2064                           ; switch strategies available:
  2065                           ; Name         Instructions Cycles
  2066                           ; simple_byte           16     9 (average)
  2067                           ;	Chosen strategy is simple_byte
  2068  000AF6  0A00               	xorlw	0	; case 0
  2069  000AF8  B4D8               	btfsc	status,2,c
  2070  000AFA  D4FD               	goto	l3448
  2071  000AFC  0A01               	xorlw	1	; case 1
  2072  000AFE  B4D8               	btfsc	status,2,c
  2073  000B00  D523               	goto	l3468
  2074  000B02  0A03               	xorlw	3	; case 2
  2075  000B04  B4D8               	btfsc	status,2,c
  2076  000B06  D5C3               	goto	l3500
  2077  000B08  0A01               	xorlw	1	; case 3
  2078  000B0A  B4D8               	btfsc	status,2,c
  2079  000B0C  D69A               	goto	l3554
  2080  000B0E  0AFC               	xorlw	252	; case 255
  2081  000B10  B4D8               	btfsc	status,2,c
  2082  000B12  D487               	goto	l3408
  2083  000B14  D7EF               	goto	l3610
  2084  000B16                     __end_of_main:
  2085                           	opt stack 0
  2086                           tblptru	equ	0xFF8
  2087                           prodh	equ	0xFF4
  2088                           prodl	equ	0xFF3
  2089                           intcon	equ	0xFF2
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           indf1	equ	0xFE7
  2093                           plusw1	equ	0xFE3
  2094                           fsr1h	equ	0xFE2
  2095                           fsr1l	equ	0xFE1
  2096                           indf2	equ	0xFDF
  2097                           postinc2	equ	0xFDE
  2098                           postdec2	equ	0xFDD
  2099                           plusw2	equ	0xFDB
  2100                           fsr2h	equ	0xFDA
  2101                           fsr2l	equ	0xFD9
  2102                           status	equ	0xFD8
  2103                           
  2104 ;; *************** function _initTimer *****************
  2105 ;; Defined at:
  2106 ;;		line 8 in file "Movement.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;		None
  2111 ;; Return value:  Size  Location     Type
  2112 ;;		None               void
  2113 ;; Registers used:
  2114 ;;		None
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2120 ;;      Params:         0       0       0       0
  2121 ;;      Locals:         0       0       0       0
  2122 ;;      Temps:          0       0       0       0
  2123 ;;      Totals:         0       0       0       0
  2124 ;;Total ram usage:        0 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    3
  2127 ;; This function calls:
  2128 ;;		Nothing
  2129 ;; This function is called by:
  2130 ;;		_main
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           	psect	text1
  2135  001E40                     __ptext1:
  2136                           	opt stack 0
  2137  001E40                     _initTimer:
  2138                           	opt stack 27
  2139                           
  2140                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2141                           
  2142                           ;incstack = 0
  2143  001E40  9ED5               	bcf	4053,7,c	;volatile
  2144                           
  2145                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2146  001E42  9CD5               	bcf	4053,6,c	;volatile
  2147                           
  2148                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2149  001E44  9AD5               	bcf	4053,5,c	;volatile
  2150                           
  2151                           ;Movement.c: 13: T0CONbits.PSA=0;
  2152  001E46  96D5               	bcf	4053,3,c	;volatile
  2153                           
  2154                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2155  001E48  80D5               	bsf	4053,0,c	;volatile
  2156  001E4A  82D5               	bsf	4053,1,c	;volatile
  2157  001E4C  84D5               	bsf	4053,2,c	;volatile
  2158                           
  2159                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2160  001E4E  9AF2               	bcf	intcon,5,c	;volatile
  2161  001E50  0012               	return		;funcret
  2162  001E52                     __end_of_initTimer:
  2163                           	opt stack 0
  2164                           tblptru	equ	0xFF8
  2165                           prodh	equ	0xFF4
  2166                           prodl	equ	0xFF3
  2167                           intcon	equ	0xFF2
  2168                           postinc0	equ	0xFEE
  2169                           wreg	equ	0xFE8
  2170                           indf1	equ	0xFE7
  2171                           plusw1	equ	0xFE3
  2172                           fsr1h	equ	0xFE2
  2173                           fsr1l	equ	0xFE1
  2174                           indf2	equ	0xFDF
  2175                           postinc2	equ	0xFDE
  2176                           postdec2	equ	0xFDD
  2177                           plusw2	equ	0xFDB
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _initRFID *****************
  2183 ;; Defined at:
  2184 ;;		line 8 in file "RFID_Reader.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;		None
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;		None               void
  2191 ;; Registers used:
  2192 ;;		wreg, status,2, status,0
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2198 ;;      Params:         0       0       0       0
  2199 ;;      Locals:         0       0       0       0
  2200 ;;      Temps:          0       0       0       0
  2201 ;;      Totals:         0       0       0       0
  2202 ;;Total ram usage:        0 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    3
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_main
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text2
  2213  001E24                     __ptext2:
  2214                           	opt stack 0
  2215  001E24                     _initRFID:
  2216                           	opt stack 27
  2217                           
  2218                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2219                           
  2220                           ;incstack = 0
  2221  001E24  5094               	movf	3988,w,c	;volatile
  2222  001E26  09C0               	iorlw	192
  2223  001E28  6E94               	movwf	3988,c	;volatile
  2224                           
  2225                           ;RFID_Reader.c: 13: SPBRG=205;
  2226  001E2A  0ECD               	movlw	205
  2227  001E2C  6EAF               	movwf	4015,c	;volatile
  2228                           
  2229                           ;RFID_Reader.c: 14: SPBRGH=0;
  2230  001E2E  0E00               	movlw	0
  2231  001E30  6EB0               	movwf	4016,c	;volatile
  2232                           
  2233                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2234  001E32  86AA               	bsf	4010,3,c	;volatile
  2235                           
  2236                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2237  001E34  84AC               	bsf	4012,2,c	;volatile
  2238                           
  2239                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2240  001E36  88AB               	bsf	4011,4,c	;volatile
  2241                           
  2242                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2243  001E38  8EAB               	bsf	4011,7,c	;volatile
  2244                           
  2245                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2246  001E3A  98AC               	bcf	4012,4,c	;volatile
  2247                           
  2248                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2249  001E3C  9CAB               	bcf	4011,6,c	;volatile
  2250  001E3E  0012               	return		;funcret
  2251  001E40                     __end_of_initRFID:
  2252                           	opt stack 0
  2253                           tblptru	equ	0xFF8
  2254                           prodh	equ	0xFF4
  2255                           prodl	equ	0xFF3
  2256                           intcon	equ	0xFF2
  2257                           postinc0	equ	0xFEE
  2258                           wreg	equ	0xFE8
  2259                           indf1	equ	0xFE7
  2260                           plusw1	equ	0xFE3
  2261                           fsr1h	equ	0xFE2
  2262                           fsr1l	equ	0xFE1
  2263                           indf2	equ	0xFDF
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           plusw2	equ	0xFDB
  2267                           fsr2h	equ	0xFDA
  2268                           fsr2l	equ	0xFD9
  2269                           status	equ	0xFD8
  2270                           
  2271 ;; *************** function _initMotorPWM *****************
  2272 ;; Defined at:
  2273 ;;		line 4 in file "dc_motor.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;		None
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;		None               void
  2280 ;; Registers used:
  2281 ;;		wreg, status,2
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2287 ;;      Params:         0       0       0       0
  2288 ;;      Locals:         0       0       0       0
  2289 ;;      Temps:          0       0       0       0
  2290 ;;      Totals:         0       0       0       0
  2291 ;;Total ram usage:        0 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    3
  2294 ;; This function calls:
  2295 ;;		Nothing
  2296 ;; This function is called by:
  2297 ;;		_main
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text3
  2302  001C62                     __ptext3:
  2303                           	opt stack 0
  2304  001C62                     _initMotorPWM:
  2305                           	opt stack 27
  2306                           
  2307                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2308                           
  2309                           ;incstack = 0
  2310  001C62  0E00               	movlw	0
  2311  001C64  6E7F               	movwf	3967,c	;volatile
  2312                           
  2313                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2314  001C66  0E80               	movlw	128
  2315  001C68  6E7E               	movwf	3966,c	;volatile
  2316                           
  2317                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2318  001C6A  0E6F               	movlw	111
  2319  001C6C  6E6F               	movwf	3951,c	;volatile
  2320                           
  2321                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2322  001C6E  0E00               	movlw	0
  2323  001C70  6E6E               	movwf	3950,c	;volatile
  2324                           
  2325                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2326  001C72  0EC7               	movlw	199
  2327  001C74  6E7B               	movwf	3963,c	;volatile
  2328                           
  2329                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2330  001C76  0E00               	movlw	0
  2331  001C78  6E7A               	movwf	3962,c	;volatile
  2332                           
  2333                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2334  001C7A  0E00               	movlw	0
  2335  001C7C  6E79               	movwf	3961,c	;volatile
  2336                           
  2337                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2338  001C7E  0E00               	movlw	0
  2339  001C80  6E78               	movwf	3960,c	;volatile
  2340                           
  2341                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2342  001C82  0E00               	movlw	0
  2343  001C84  6E77               	movwf	3959,c	;volatile
  2344                           
  2345                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2346  001C86  0E00               	movlw	0
  2347  001C88  6E76               	movwf	3958,c	;volatile
  2348                           
  2349                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2350  001C8A  9093               	bcf	3987,0,c	;volatile
  2351                           
  2352                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2353  001C8C  9293               	bcf	3987,1,c	;volatile
  2354                           
  2355                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2356  001C8E  9493               	bcf	3987,2,c	;volatile
  2357                           
  2358                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2359  001C90  9693               	bcf	3987,3,c	;volatile
  2360                           
  2361                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2362  001C92  908A               	bcf	3978,0,c	;volatile
  2363                           
  2364                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2365  001C94  928A               	bcf	3978,1,c	;volatile
  2366                           
  2367                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2368  001C96  948A               	bcf	3978,2,c	;volatile
  2369                           
  2370                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2371  001C98  968A               	bcf	3978,3,c	;volatile
  2372  001C9A  0012               	return		;funcret
  2373  001C9C                     __end_of_initMotorPWM:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           prodh	equ	0xFF4
  2377                           prodl	equ	0xFF3
  2378                           intcon	equ	0xFF2
  2379                           postinc0	equ	0xFEE
  2380                           wreg	equ	0xFE8
  2381                           indf1	equ	0xFE7
  2382                           plusw1	equ	0xFE3
  2383                           fsr1h	equ	0xFE2
  2384                           fsr1l	equ	0xFE1
  2385                           indf2	equ	0xFDF
  2386                           postinc2	equ	0xFDE
  2387                           postdec2	equ	0xFDD
  2388                           plusw2	equ	0xFDB
  2389                           fsr2h	equ	0xFDA
  2390                           fsr2l	equ	0xFD9
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function _initLCD *****************
  2394 ;; Defined at:
  2395 ;;		line 38 in file "LCD.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;		None               void
  2402 ;; Registers used:
  2403 ;;		wreg, status,2, status,0, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2409 ;;      Params:         0       0       0       0
  2410 ;;      Locals:         0       0       0       0
  2411 ;;      Temps:          1       0       0       0
  2412 ;;      Totals:         1       0       0       0
  2413 ;;Total ram usage:        1 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    6
  2416 ;; This function calls:
  2417 ;;		_LCDout
  2418 ;;		_SendLCD
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text4
  2425  001698                     __ptext4:
  2426                           	opt stack 0
  2427  001698                     _initLCD:
  2428                           	opt stack 24
  2429                           
  2430                           ;LCD.c: 44: TRISAbits.RA6=0;
  2431                           
  2432                           ;incstack = 0
  2433  001698  9C92               	bcf	3986,6,c	;volatile
  2434                           
  2435                           ;LCD.c: 45: TRISCbits.RC0=0;
  2436  00169A  9094               	bcf	3988,0,c	;volatile
  2437                           
  2438                           ;LCD.c: 46: TRISCbits.RC1=0;
  2439  00169C  9294               	bcf	3988,1,c	;volatile
  2440                           
  2441                           ;LCD.c: 47: TRISCbits.RC2=0;
  2442  00169E  9494               	bcf	3988,2,c	;volatile
  2443                           
  2444                           ;LCD.c: 48: TRISDbits.RD0=0;
  2445  0016A0  9095               	bcf	3989,0,c	;volatile
  2446                           
  2447                           ;LCD.c: 49: TRISDbits.RD1=0;
  2448  0016A2  9295               	bcf	3989,1,c	;volatile
  2449                           
  2450                           ;LCD.c: 51: _delay((unsigned long)((15)*(2000000/4000.0)));
  2451  0016A4  0E0A               	movlw	10
  2452  0016A6  6E2A               	movwf	??_initLCD& (0+255),c
  2453  0016A8  0EBC               	movlw	188
  2454  0016AA                     u3087:
  2455  0016AA  2EE8               	decfsz	wreg,f,c
  2456  0016AC  D7FE               	goto	u3087
  2457  0016AE  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2458  0016B0  D7FC               	goto	u3087
  2459  0016B2  D000               	nop2	
  2460                           
  2461                           ;LCD.c: 52: LCDout(0b0011);
  2462  0016B4  0E03               	movlw	3
  2463  0016B6  ECEC  F00A         	call	_LCDout
  2464                           
  2465                           ;LCD.c: 53: _delay((unsigned long)((5)*(2000000/4000.0)));
  2466  0016BA  0E04               	movlw	4
  2467  0016BC  6E2A               	movwf	??_initLCD& (0+255),c
  2468  0016BE  0E3E               	movlw	62
  2469  0016C0                     u3097:
  2470  0016C0  2EE8               	decfsz	wreg,f,c
  2471  0016C2  D7FE               	goto	u3097
  2472  0016C4  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2473  0016C6  D7FC               	goto	u3097
  2474                           
  2475                           ;LCD.c: 54: LCDout(0b0011);
  2476  0016C8  0E03               	movlw	3
  2477  0016CA  ECEC  F00A         	call	_LCDout
  2478                           
  2479                           ;LCD.c: 55: _delay((unsigned long)((200)*(2000000/4000000.0)));
  2480  0016CE  0E21               	movlw	33
  2481  0016D0                     u3107:
  2482  0016D0  2EE8               	decfsz	wreg,f,c
  2483  0016D2  D7FE               	goto	u3107
  2484  0016D4  F000               	nop	
  2485                           
  2486                           ;LCD.c: 56: LCDout(0b0011);
  2487  0016D6  0E03               	movlw	3
  2488  0016D8  ECEC  F00A         	call	_LCDout
  2489                           
  2490                           ;LCD.c: 57: _delay((unsigned long)((50)*(2000000/4000000.0)));
  2491  0016DC  0E08               	movlw	8
  2492  0016DE                     u3117:
  2493  0016DE  2EE8               	decfsz	wreg,f,c
  2494  0016E0  D7FE               	goto	u3117
  2495  0016E2  F000               	nop	
  2496                           
  2497                           ;LCD.c: 58: LCDout(0b0010);
  2498  0016E4  0E02               	movlw	2
  2499  0016E6  ECEC  F00A         	call	_LCDout
  2500                           
  2501                           ;LCD.c: 59: _delay((unsigned long)((50)*(2000000/4000000.0)));
  2502  0016EA  0E08               	movlw	8
  2503  0016EC                     u3127:
  2504  0016EC  2EE8               	decfsz	wreg,f,c
  2505  0016EE  D7FE               	goto	u3127
  2506  0016F0  F000               	nop	
  2507                           
  2508                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2509  0016F2  0E00               	movlw	0
  2510  0016F4  6E28               	movwf	SendLCD@type,c
  2511  0016F6  0E28               	movlw	40
  2512  0016F8  ECA0  F00E         	call	_SendLCD
  2513                           
  2514                           ;LCD.c: 63: _delay((unsigned long)((50)*(2000000/4000000.0)));
  2515  0016FC  0E08               	movlw	8
  2516  0016FE                     u3137:
  2517  0016FE  2EE8               	decfsz	wreg,f,c
  2518  001700  D7FE               	goto	u3137
  2519  001702  F000               	nop	
  2520                           
  2521                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2522  001704  0E00               	movlw	0
  2523  001706  6E28               	movwf	SendLCD@type,c
  2524  001708  0E08               	movlw	8
  2525  00170A  ECA0  F00E         	call	_SendLCD
  2526                           
  2527                           ;LCD.c: 65: _delay((unsigned long)((50)*(2000000/4000000.0)));
  2528  00170E  0E08               	movlw	8
  2529  001710                     u3147:
  2530  001710  2EE8               	decfsz	wreg,f,c
  2531  001712  D7FE               	goto	u3147
  2532  001714  F000               	nop	
  2533                           
  2534                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2535  001716  0E00               	movlw	0
  2536  001718  6E28               	movwf	SendLCD@type,c
  2537  00171A  0E01               	movlw	1
  2538  00171C  ECA0  F00E         	call	_SendLCD
  2539                           
  2540                           ;LCD.c: 67: _delay((unsigned long)((5)*(2000000/4000.0)));
  2541  001720  0E04               	movlw	4
  2542  001722  6E2A               	movwf	??_initLCD& (0+255),c
  2543  001724  0E3E               	movlw	62
  2544  001726                     u3157:
  2545  001726  2EE8               	decfsz	wreg,f,c
  2546  001728  D7FE               	goto	u3157
  2547  00172A  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2548  00172C  D7FC               	goto	u3157
  2549                           
  2550                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2551  00172E  0E00               	movlw	0
  2552  001730  6E28               	movwf	SendLCD@type,c
  2553  001732  0E06               	movlw	6
  2554  001734  ECA0  F00E         	call	_SendLCD
  2555                           
  2556                           ;LCD.c: 69: _delay((unsigned long)((50)*(2000000/4000000.0)));
  2557  001738  0E08               	movlw	8
  2558  00173A                     u3167:
  2559  00173A  2EE8               	decfsz	wreg,f,c
  2560  00173C  D7FE               	goto	u3167
  2561  00173E  F000               	nop	
  2562                           
  2563                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2564  001740  0E00               	movlw	0
  2565  001742  6E28               	movwf	SendLCD@type,c
  2566  001744  0E0C               	movlw	12
  2567  001746  ECA0  F00E         	call	_SendLCD
  2568                           
  2569                           ;LCD.c: 71: _delay((unsigned long)((50)*(2000000/4000000.0)));
  2570  00174A  0E08               	movlw	8
  2571  00174C                     u3177:
  2572  00174C  2EE8               	decfsz	wreg,f,c
  2573  00174E  D7FE               	goto	u3177
  2574  001750  F000               	nop	
  2575  001752  0012               	return		;funcret
  2576  001754                     __end_of_initLCD:
  2577                           	opt stack 0
  2578                           tblptru	equ	0xFF8
  2579                           prodh	equ	0xFF4
  2580                           prodl	equ	0xFF3
  2581                           intcon	equ	0xFF2
  2582                           postinc0	equ	0xFEE
  2583                           wreg	equ	0xFE8
  2584                           indf1	equ	0xFE7
  2585                           plusw1	equ	0xFE3
  2586                           fsr1h	equ	0xFE2
  2587                           fsr1l	equ	0xFE1
  2588                           indf2	equ	0xFDF
  2589                           postinc2	equ	0xFDE
  2590                           postdec2	equ	0xFDD
  2591                           plusw2	equ	0xFDB
  2592                           fsr2h	equ	0xFDA
  2593                           fsr2l	equ	0xFD9
  2594                           status	equ	0xFD8
  2595                           
  2596 ;; *************** function _initIR *****************
  2597 ;; Defined at:
  2598 ;;		line 30 in file "IR_Reading.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;		None
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;		None
  2603 ;; Return value:  Size  Location     Type
  2604 ;;		None               void
  2605 ;; Registers used:
  2606 ;;		wreg, status,2
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2612 ;;      Params:         0       0       0       0
  2613 ;;      Locals:         0       0       0       0
  2614 ;;      Temps:          0       0       0       0
  2615 ;;      Totals:         0       0       0       0
  2616 ;;Total ram usage:        0 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    3
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text5
  2627  001DE4                     __ptext5:
  2628                           	opt stack 0
  2629  001DE4                     _initIR:
  2630                           	opt stack 27
  2631                           
  2632                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2633                           
  2634                           ;incstack = 0
  2635  001DE4  9489               	bcf	3977,2,c	;volatile
  2636                           
  2637                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2638  001DE6  9689               	bcf	3977,3,c	;volatile
  2639                           
  2640                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2641  001DE8  8492               	bsf	3986,2,c	;volatile
  2642                           
  2643                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2644  001DEA  8692               	bsf	3986,3,c	;volatile
  2645                           
  2646                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2647  001DEC  94B8               	bcf	4024,2,c	;volatile
  2648                           
  2649                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2650  001DEE  96B8               	bcf	4024,3,c	;volatile
  2651                           
  2652                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2653  001DF0  9CB8               	bcf	4024,6,c	;volatile
  2654                           
  2655                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2656  001DF2  9EB8               	bcf	4024,7,c	;volatile
  2657                           
  2658                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2659  001DF4  0E06               	movlw	6
  2660  001DF6  6E63               	movwf	3939,c	;volatile
  2661                           
  2662                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2663  001DF8  0E06               	movlw	6
  2664  001DFA  6E62               	movwf	3938,c	;volatile
  2665                           
  2666                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2667  001DFC  9096               	bcf	3990,0,c	;volatile
  2668                           
  2669                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2670  001DFE  9296               	bcf	3990,1,c	;volatile
  2671                           
  2672                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2673  001E00  0E59               	movlw	89
  2674  001E02  6EB7               	movwf	4023,c	;volatile
  2675  001E04  0012               	return		;funcret
  2676  001E06                     __end_of_initIR:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           prodh	equ	0xFF4
  2680                           prodl	equ	0xFF3
  2681                           intcon	equ	0xFF2
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           indf1	equ	0xFE7
  2685                           plusw1	equ	0xFE3
  2686                           fsr1h	equ	0xFE2
  2687                           fsr1l	equ	0xFE1
  2688                           indf2	equ	0xFDF
  2689                           postinc2	equ	0xFDE
  2690                           postdec2	equ	0xFDD
  2691                           plusw2	equ	0xFDB
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function _fullSpeedBack *****************
  2697 ;; Defined at:
  2698 ;;		line 138 in file "dc_motor.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2701 ;;		 -> main@mL(9), 
  2702 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2703 ;;		 -> main@mR(9), 
  2704 ;;  power           1   11[BANK0 ] unsigned char 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;		None               void
  2709 ;; Registers used:
  2710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2716 ;;      Params:         0       5       0       0
  2717 ;;      Locals:         0       0       0       0
  2718 ;;      Temps:          0       0       0       0
  2719 ;;      Totals:         0       5       0       0
  2720 ;;Total ram usage:        5 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    6
  2723 ;; This function calls:
  2724 ;;		_fullSpeed
  2725 ;; This function is called by:
  2726 ;;		_main
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           	psect	text6
  2731  001BA8                     __ptext6:
  2732                           	opt stack 0
  2733  001BA8                     _fullSpeedBack:
  2734                           	opt stack 24
  2735                           
  2736                           ;dc_motor.c: 141: mL->direction=0;
  2737                           
  2738                           ;incstack = 0
  2739  001BA8  0100               	movlb	0	; () banked
  2740  001BAA  EE20 F001          	lfsr	2,1
  2741  001BAE  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2742  001BB0  26D9               	addwf	fsr2l,f,c
  2743  001BB2  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2744  001BB4  22DA               	addwfc	fsr2h,f,c
  2745  001BB6  0E00               	movlw	0
  2746  001BB8  6EDF               	movwf	indf2,c
  2747                           
  2748                           ;dc_motor.c: 142: mR->direction=0;
  2749  001BBA  0100               	movlb	0	; () banked
  2750  001BBC  EE20 F001          	lfsr	2,1
  2751  001BC0  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2752  001BC2  26D9               	addwf	fsr2l,f,c
  2753  001BC4  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2754  001BC6  22DA               	addwfc	fsr2h,f,c
  2755  001BC8  0E00               	movlw	0
  2756  001BCA  6EDF               	movwf	indf2,c
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2760  001BCC  C067  F062         	movff	fullSpeedBack@mL,fullSpeed@mL
  2761  001BD0  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2762  001BD4  C069  F064         	movff	fullSpeedBack@mR,fullSpeed@mR
  2763  001BD8  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2764  001BDC  C06B  F066         	movff	fullSpeedBack@power,fullSpeed@power
  2765  001BE0  EC7B  F00C         	call	_fullSpeed	;wreg free
  2766  001BE4  0012               	return		;funcret
  2767  001BE6                     __end_of_fullSpeedBack:
  2768                           	opt stack 0
  2769                           tblptru	equ	0xFF8
  2770                           prodh	equ	0xFF4
  2771                           prodl	equ	0xFF3
  2772                           intcon	equ	0xFF2
  2773                           postinc0	equ	0xFEE
  2774                           wreg	equ	0xFE8
  2775                           indf1	equ	0xFE7
  2776                           plusw1	equ	0xFE3
  2777                           fsr1h	equ	0xFE2
  2778                           fsr1l	equ	0xFE1
  2779                           indf2	equ	0xFDF
  2780                           postinc2	equ	0xFDE
  2781                           postdec2	equ	0xFDD
  2782                           plusw2	equ	0xFDB
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _enableSensor *****************
  2788 ;; Defined at:
  2789 ;;		line 106 in file "IR_Reading.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  sensor          1    wreg     unsigned char 
  2792 ;;  status          1   35[COMRAM] unsigned char 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  sensor          1   36[COMRAM] unsigned char 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;		None               void
  2797 ;; Registers used:
  2798 ;;		wreg, status,2, status,0
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2804 ;;      Params:         1       0       0       0
  2805 ;;      Locals:         1       0       0       0
  2806 ;;      Temps:          0       0       0       0
  2807 ;;      Totals:         2       0       0       0
  2808 ;;Total ram usage:        2 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    3
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text7
  2819  001D98                     __ptext7:
  2820                           	opt stack 0
  2821  001D98                     _enableSensor:
  2822                           	opt stack 27
  2823                           
  2824                           ;incstack = 0
  2825                           ;enableSensor@sensor stored from wreg
  2826  001D98  6E25               	movwf	enableSensor@sensor,c
  2827                           
  2828                           ;IR_Reading.c: 108: if (sensor==0){
  2829  001D9A  5025               	movf	enableSensor@sensor,w,c
  2830  001D9C  A4D8               	btfss	status,2,c
  2831  001D9E  D006               	goto	l2430
  2832                           
  2833                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2834  001DA0  B024               	btfsc	enableSensor@status,0,c
  2835  001DA2  D002               	bra	u1845
  2836  001DA4  908D               	bcf	3981,0,c	;volatile
  2837  001DA6  D001               	bra	u1846
  2838  001DA8                     u1845:
  2839  001DA8  808D               	bsf	3981,0,c	;volatile
  2840  001DAA                     u1846:
  2841                           
  2842                           ;IR_Reading.c: 110: } else if (sensor==1){
  2843  001DAA  0012               	return	
  2844  001DAC                     l2430:
  2845  001DAC  0425               	decf	enableSensor@sensor,w,c
  2846  001DAE  A4D8               	btfss	status,2,c
  2847  001DB0  0012               	return	
  2848                           
  2849                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2850  001DB2  B024               	btfsc	enableSensor@status,0,c
  2851  001DB4  D002               	bra	u1865
  2852  001DB6  928D               	bcf	3981,1,c	;volatile
  2853  001DB8  D001               	bra	u1866
  2854  001DBA                     u1865:
  2855  001DBA  828D               	bsf	3981,1,c	;volatile
  2856  001DBC                     u1866:
  2857  001DBC  0012               	return	
  2858  001DBE                     __end_of_enableSensor:
  2859                           	opt stack 0
  2860                           tblptru	equ	0xFF8
  2861                           prodh	equ	0xFF4
  2862                           prodl	equ	0xFF3
  2863                           intcon	equ	0xFF2
  2864                           postinc0	equ	0xFEE
  2865                           wreg	equ	0xFE8
  2866                           indf1	equ	0xFE7
  2867                           plusw1	equ	0xFE3
  2868                           fsr1h	equ	0xFE2
  2869                           fsr1l	equ	0xFE1
  2870                           indf2	equ	0xFDF
  2871                           postinc2	equ	0xFDE
  2872                           postdec2	equ	0xFDD
  2873                           plusw2	equ	0xFDB
  2874                           fsr2h	equ	0xFDA
  2875                           fsr2l	equ	0xFD9
  2876                           status	equ	0xFD8
  2877                           
  2878 ;; *************** function _VerifySignal *****************
  2879 ;; Defined at:
  2880 ;;		line 58 in file "RFID_Reader.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2883 ;;		 -> ReceivedString(16), 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  ptr             3    0        PTR unsigned char 
  2886 ;;  hexByte         2   43[COMRAM] unsigned int 
  2887 ;;  checksum        1   42[COMRAM] unsigned char 
  2888 ;;  i               1   41[COMRAM] unsigned char 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      unsigned char 
  2891 ;; Registers used:
  2892 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2898 ;;      Params:         2       0       0       0
  2899 ;;      Locals:         4       0       0       0
  2900 ;;      Temps:          4       0       0       0
  2901 ;;      Totals:        10       0       0       0
  2902 ;;Total ram usage:       10 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    3
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		_main
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           	psect	text8
  2913  001ABC                     __ptext8:
  2914                           	opt stack 0
  2915  001ABC                     _VerifySignal:
  2916                           	opt stack 27
  2917                           
  2918                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2919                           
  2920                           ;incstack = 0
  2921  001ABC  0E00               	movlw	0
  2922  001ABE  6E2B               	movwf	VerifySignal@checksum,c
  2923                           
  2924                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2925  001AC0  0E00               	movlw	0
  2926  001AC2  6E2D               	movwf	VerifySignal@hexByte+1,c
  2927  001AC4  0E00               	movlw	0
  2928  001AC6  6E2C               	movwf	VerifySignal@hexByte,c
  2929                           
  2930                           ;RFID_Reader.c: 61: unsigned char i=0;
  2931  001AC8  0E00               	movlw	0
  2932  001ACA  6E2A               	movwf	VerifySignal@i,c
  2933                           
  2934                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2935                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2936  001ACC  EE20 F004          	lfsr	2,4
  2937  001AD0  5024               	movf	VerifySignal@Signal,w,c
  2938  001AD2  26D9               	addwf	fsr2l,f,c
  2939  001AD4  5025               	movf	VerifySignal@Signal+1,w,c
  2940  001AD6  22DA               	addwfc	fsr2h,f,c
  2941  001AD8  50DF               	movf	indf2,w,c
  2942  001ADA  6E26               	movwf	??_VerifySignal& (0+255),c
  2943  001ADC  EE20 F003          	lfsr	2,3
  2944  001AE0  5024               	movf	VerifySignal@Signal,w,c
  2945  001AE2  26D9               	addwf	fsr2l,f,c
  2946  001AE4  5025               	movf	VerifySignal@Signal+1,w,c
  2947  001AE6  22DA               	addwfc	fsr2h,f,c
  2948  001AE8  50DF               	movf	indf2,w,c
  2949  001AEA  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2950  001AEC  5027               	movf	??_VerifySignal+1,w,c
  2951  001AEE  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2952  001AF0  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2953  001AF2  5026               	movf	??_VerifySignal,w,c
  2954  001AF4  2428               	addwf	??_VerifySignal+2,w,c
  2955  001AF6  6E2C               	movwf	VerifySignal@hexByte,c
  2956  001AF8  0E00               	movlw	0
  2957  001AFA  2029               	addwfc	??_VerifySignal+3,w,c
  2958  001AFC  6E2D               	movwf	VerifySignal@hexByte+1,c
  2959                           
  2960                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2961  001AFE  EE20 F002          	lfsr	2,2
  2962  001B02  5024               	movf	VerifySignal@Signal,w,c
  2963  001B04  26D9               	addwf	fsr2l,f,c
  2964  001B06  5025               	movf	VerifySignal@Signal+1,w,c
  2965  001B08  22DA               	addwfc	fsr2h,f,c
  2966  001B0A  50DF               	movf	indf2,w,c
  2967  001B0C  182C               	xorwf	VerifySignal@hexByte,w,c
  2968  001B0E  6E2B               	movwf	VerifySignal@checksum,c
  2969                           
  2970                           ;RFID_Reader.c: 75: return 1;
  2971  001B10  0E01               	movlw	1
  2972  001B12  0012               	return	
  2973  001B14                     __end_of_VerifySignal:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           prodh	equ	0xFF4
  2977                           prodl	equ	0xFF3
  2978                           intcon	equ	0xFF2
  2979                           postinc0	equ	0xFEE
  2980                           wreg	equ	0xFE8
  2981                           indf1	equ	0xFE7
  2982                           plusw1	equ	0xFE3
  2983                           fsr1h	equ	0xFE2
  2984                           fsr1l	equ	0xFE1
  2985                           indf2	equ	0xFDF
  2986                           postinc2	equ	0xFDE
  2987                           postdec2	equ	0xFDD
  2988                           plusw2	equ	0xFDB
  2989                           fsr2h	equ	0xFDA
  2990                           fsr2l	equ	0xFD9
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function _ScanWithRange *****************
  2994 ;; Defined at:
  2995 ;;		line 98 in file "Movement.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2998 ;;		 -> main@mL(9), 
  2999 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3000 ;;		 -> main@mR(9), 
  3001 ;;  loops           2   17[BANK0 ] int 
  3002 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3003 ;;		 -> main@MoveTime(50), 
  3004 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  3005 ;;		 -> main@Move(1), 
  3006 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  3007 ;;		 -> main@MoveType(25), 
  3008 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  3009 ;;		 -> RFID_Read(1), 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  buf            40   33[BANK0 ] unsigned char [40]
  3012 ;;  SensorResult    4   83[BANK0 ] unsigned int [2]
  3013 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  3014 ;;  TimeAboveThr    2   81[BANK0 ] unsigned int 
  3015 ;;  LeftFlag        2   79[BANK0 ] unsigned int 
  3016 ;;  DirectionFou    2   75[BANK0 ] const unsigned int 
  3017 ;;  i               2   73[BANK0 ] unsigned int 
  3018 ;;  LeftFlick       1   87[BANK0 ] const char 
  3019 ;;  MiniLeftFlic    1   78[BANK0 ] const unsigned char 
  3020 ;;  MotorPower      1   77[BANK0 ] const unsigned char 
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      unsigned char 
  3023 ;; Registers used:
  3024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3030 ;;      Params:         0      14       0       0
  3031 ;;      Locals:         0      57       0       0
  3032 ;;      Temps:          0       6       0       0
  3033 ;;      Totals:         0      77       0       0
  3034 ;;Total ram usage:       77 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    7
  3037 ;; This function calls:
  3038 ;;		_LCD_String
  3039 ;;		_SendLCD
  3040 ;;		_SetLine
  3041 ;;		_delay_tenth_s
  3042 ;;		_grabLeftIR
  3043 ;;		_grabRightIR
  3044 ;;		_sprintf
  3045 ;;		_stop
  3046 ;;		_turnLeft
  3047 ;;		_turnRight
  3048 ;; This function is called by:
  3049 ;;		_main
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           	psect	text9
  3054  000B16                     __ptext9:
  3055                           	opt stack 0
  3056  000B16                     _ScanWithRange:
  3057                           	opt stack 23
  3058                           
  3059                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3060                           
  3061                           ;incstack = 0
  3062  000B16  C0C3  F0B3         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3063  000B1A  C0C4  F0B4         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3064  000B1E  C0C5  F0B5         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3065  000B22  C0C6  F0B6         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3066                           
  3067                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3068  000B26  0E00               	movlw	0
  3069  000B28  0100               	movlb	0	; () banked
  3070  000B2A  6FB0               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3071  000B2C  0E00               	movlw	0
  3072  000B2E  6FAF               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3073                           
  3074                           ;Movement.c: 104: unsigned int RightFlag=0;
  3075  000B30  0E00               	movlw	0
  3076  000B32  0100               	movlb	0	; () banked
  3077  000B34  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3078  000B36  0E00               	movlw	0
  3079  000B38  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3080                           
  3081                           ;Movement.c: 105: char buf[40];
  3082                           ;Movement.c: 106: unsigned int i=0;
  3083  000B3A  0E00               	movlw	0
  3084  000B3C  0100               	movlb	0	; () banked
  3085  000B3E  6FAA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3086  000B40  0E00               	movlw	0
  3087  000B42  6FA9               	movwf	ScanWithRange@i& (0+255),b
  3088                           
  3089                           ;Movement.c: 107: unsigned int TimeAboveThreshold=0;
  3090  000B44  0E00               	movlw	0
  3091  000B46  0100               	movlb	0	; () banked
  3092  000B48  6FB2               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3093  000B4A  0E00               	movlw	0
  3094  000B4C  6FB1               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3095                           
  3096                           ;Movement.c: 109: const unsigned int DirectionFoundThreshold=1000;
  3097  000B4E  0E03               	movlw	3
  3098  000B50  0100               	movlb	0	; () banked
  3099  000B52  6FAC               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3100  000B54  0EE8               	movlw	232
  3101  000B56  6FAB               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3102                           
  3103                           ;Movement.c: 111: const unsigned char MotorPower=40;
  3104  000B58  0E28               	movlw	40
  3105  000B5A  0100               	movlb	0	; () banked
  3106  000B5C  6FAD               	movwf	ScanWithRange@MotorPower& (0+255),b
  3107                           
  3108                           ;Movement.c: 113: const signed char LeftFlick=2;
  3109  000B5E  0E02               	movlw	2
  3110  000B60  0100               	movlb	0	; () banked
  3111  000B62  6FB7               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3112                           
  3113                           ;Movement.c: 117: const unsigned char MiniLeftFlick=1;
  3114  000B64  0E01               	movlw	1
  3115  000B66  0100               	movlb	0	; () banked
  3116  000B68  6FAE               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;Movement.c: 123: (MoveType[*Move]) = 2;
  3120  000B6A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3121  000B6E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3122  000B72  50DF               	movf	indf2,w,c
  3123  000B74  0100               	movlb	0	; () banked
  3124  000B76  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3125  000B78  0100               	movlb	0	; () banked
  3126  000B7A  517B               	movf	??_ScanWithRange& (0+255),w,b
  3127  000B7C  0D01               	mullw	1
  3128  000B7E  50F3               	movf	prodl,w,c
  3129  000B80  0100               	movlb	0	; () banked
  3130  000B82  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3131  000B84  6ED9               	movwf	fsr2l,c
  3132  000B86  50F4               	movf	prodh,w,c
  3133  000B88  0100               	movlb	0	; () banked
  3134  000B8A  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3135  000B8C  6EDA               	movwf	fsr2h,c
  3136  000B8E  0E02               	movlw	2
  3137  000B90  6EDF               	movwf	indf2,c
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;Movement.c: 124: (MoveTime[*Move]) = LeftFlick;
  3141  000B92  C0B7  F07B         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3142  000B96  0100               	movlb	0	; () banked
  3143  000B98  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3144  000B9A  BF7B               	btfsc	??_ScanWithRange& (0+255),7,b
  3145  000B9C  077C               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3146  000B9E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3147  000BA2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3148  000BA6  50DF               	movf	indf2,w,c
  3149  000BA8  0100               	movlb	0	; () banked
  3150  000BAA  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3151  000BAC  0100               	movlb	0	; () banked
  3152  000BAE  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3153  000BB0  0D02               	mullw	2
  3154  000BB2  50F3               	movf	prodl,w,c
  3155  000BB4  0100               	movlb	0	; () banked
  3156  000BB6  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3157  000BB8  6ED9               	movwf	fsr2l,c
  3158  000BBA  50F4               	movf	prodh,w,c
  3159  000BBC  0100               	movlb	0	; () banked
  3160  000BBE  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3161  000BC0  6EDA               	movwf	fsr2h,c
  3162  000BC2  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3163  000BC6  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;Movement.c: 125: *Move = *Move+1;
  3167  000BCA  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3168  000BCE  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3169  000BD2  50DF               	movf	indf2,w,c
  3170  000BD4  0100               	movlb	0	; () banked
  3171  000BD6  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3172  000BD8  0100               	movlb	0	; () banked
  3173  000BDA  297B               	incf	??_ScanWithRange& (0+255),w,b
  3174  000BDC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3175  000BE0  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3176  000BE4  6EDF               	movwf	indf2,c
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;Movement.c: 126: turnLeft(mL,mR, 100);
  3180  000BE6  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3181  000BEA  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3182  000BEE  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3183  000BF2  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3184  000BF6  0E64               	movlw	100
  3185  000BF8  0100               	movlb	0	; () banked
  3186  000BFA  6F6B               	movwf	turnLeft@power& (0+255),b
  3187  000BFC  EC12  F00E         	call	_turnLeft	;wreg free
  3188                           
  3189                           ;Movement.c: 127: delay_tenth_s(LeftFlick);
  3190  000C00  0100               	movlb	0	; () banked
  3191  000C02  51B7               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3192  000C04  EC4E  F00E         	call	_delay_tenth_s
  3193                           
  3194                           ;Movement.c: 128: stop(mL,mR);
  3195  000C08  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3196  000C0C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3197  000C10  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3198  000C14  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3199  000C18  ECAA  F00B         	call	_stop	;wreg free
  3200                           
  3201                           ;Movement.c: 131: turnRight(mL,mR, MotorPower);
  3202  000C1C  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3203  000C20  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3204  000C24  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3205  000C28  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3206  000C2C  C0AD  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3207  000C30  ECF3  F00D         	call	_turnRight	;wreg free
  3208                           
  3209                           ;Movement.c: 134: TMR0L = 0;
  3210  000C34  0E00               	movlw	0
  3211  000C36  6ED6               	movwf	4054,c	;volatile
  3212                           
  3213                           ;Movement.c: 135: TMR0H = 0;
  3214  000C38  0E00               	movlw	0
  3215  000C3A  6ED7               	movwf	4055,c	;volatile
  3216                           
  3217                           ;Movement.c: 136: T0CONbits.TMR0ON=1;
  3218  000C3C  8ED5               	bsf	4053,7,c	;volatile
  3219                           
  3220                           ;Movement.c: 138: for (i=1; i<=loops; i++) {
  3221  000C3E  0E00               	movlw	0
  3222  000C40  0100               	movlb	0	; () banked
  3223  000C42  6FAA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3224  000C44  0E01               	movlw	1
  3225  000C46  6FA9               	movwf	ScanWithRange@i& (0+255),b
  3226  000C48  D1CF               	goto	l3338
  3227  000C4A                     l3250:
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;Movement.c: 141: SensorResult[0]=grabLeftIR();
  3231  000C4A  ECF5  F00C         	call	_grabLeftIR	;wreg free
  3232  000C4E  C024  F0B3         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3233  000C52  C025  F0B4         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3234                           
  3235                           ;Movement.c: 142: SensorResult[1]=grabRightIR();
  3236  000C56  ECBB  F00C         	call	_grabRightIR	;wreg free
  3237  000C5A  C024  F0B5         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3238  000C5E  C025  F0B6         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3239                           
  3240                           ;Movement.c: 146: CAP1BUFH=0;
  3241  000C62  0E00               	movlw	0
  3242  000C64  6E69               	movwf	3945,c	;volatile
  3243                           
  3244                           ;Movement.c: 147: CAP1BUFL=0;
  3245  000C66  0E00               	movlw	0
  3246  000C68  6E68               	movwf	3944,c	;volatile
  3247                           
  3248                           ;Movement.c: 148: CAP2BUFH=0;
  3249  000C6A  0E00               	movlw	0
  3250  000C6C  6E67               	movwf	3943,c	;volatile
  3251                           
  3252                           ;Movement.c: 149: CAP2BUFL=0;
  3253  000C6E  0E00               	movlw	0
  3254  000C70  6E66               	movwf	3942,c	;volatile
  3255                           
  3256                           ;Movement.c: 153: SendLCD(0b00000001,0);
  3257  000C72  0E00               	movlw	0
  3258  000C74  6E28               	movwf	SendLCD@type,c
  3259  000C76  0E01               	movlw	1
  3260  000C78  ECA0  F00E         	call	_SendLCD
  3261                           
  3262                           ;Movement.c: 154: _delay((unsigned long)((50)*(2000000/4000000.0)));
  3263  000C7C  0E08               	movlw	8
  3264  000C7E                     u3187:
  3265  000C7E  2EE8               	decfsz	wreg,f,c
  3266  000C80  D7FE               	goto	u3187
  3267  000C82  F000               	nop	
  3268                           
  3269                           ;Movement.c: 155: SendLCD(0b00000010,0);
  3270  000C84  0E00               	movlw	0
  3271  000C86  6E28               	movwf	SendLCD@type,c
  3272  000C88  0E02               	movlw	2
  3273  000C8A  ECA0  F00E         	call	_SendLCD
  3274                           
  3275                           ;Movement.c: 156: _delay((unsigned long)((2)*(2000000/4000.0)));
  3276  000C8E  0EFA               	movlw	250
  3277  000C90                     u3197:
  3278  000C90  F000               	nop	
  3279  000C92  2EE8               	decfsz	wreg,f,c
  3280  000C94  D7FD               	goto	u3197
  3281                           
  3282                           ;Movement.c: 157: SetLine(1);
  3283  000C96  0E01               	movlw	1
  3284  000C98  EC88  F00E         	call	_SetLine
  3285                           
  3286                           ;Movement.c: 158: LCD_String("     ScanIR");
  3287  000C9C  0E2D               	movlw	low STR_1
  3288  000C9E  6E2A               	movwf	LCD_String@string,c
  3289  000CA0  0E03               	movlw	high STR_1
  3290  000CA2  6E2B               	movwf	LCD_String@string+1,c
  3291  000CA4  EC2F  F00D         	call	_LCD_String	;wreg free
  3292                           
  3293                           ;Movement.c: 159: SetLine(2);
  3294  000CA8  0E02               	movlw	2
  3295  000CAA  EC88  F00E         	call	_SetLine
  3296                           
  3297                           ;Movement.c: 160: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3298  000CAE  0E81               	movlw	low ScanWithRange@buf
  3299  000CB0  6E30               	movwf	sprintf@sp,c
  3300  000CB2  0E00               	movlw	high ScanWithRange@buf
  3301  000CB4  6E31               	movwf	sprintf@sp+1,c
  3302  000CB6  0E0C               	movlw	low (STR_6+1)
  3303  000CB8  6E32               	movwf	sprintf@f,c
  3304  000CBA  0E03               	movlw	high (STR_6+1)
  3305  000CBC  6E33               	movwf	sprintf@f+1,c
  3306  000CBE  C0B3  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3307  000CC2  C0B4  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3308  000CC6  C0B5  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3309  000CCA  C0B6  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3310  000CCE  EC53  F008         	call	_sprintf	;wreg free
  3311                           
  3312                           ;Movement.c: 161: LCD_String(buf);
  3313  000CD2  0E81               	movlw	low ScanWithRange@buf
  3314  000CD4  6E2A               	movwf	LCD_String@string,c
  3315  000CD6  0E00               	movlw	high ScanWithRange@buf
  3316  000CD8  6E2B               	movwf	LCD_String@string+1,c
  3317  000CDA  EC2F  F00D         	call	_LCD_String	;wreg free
  3318                           
  3319                           ;Movement.c: 165: if (SensorResult[1]>DirectionFoundThreshold) {
  3320  000CDE  0100               	movlb	0	; () banked
  3321  000CE0  51B5               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3322  000CE2  0100               	movlb	0	; () banked
  3323  000CE4  5DAB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3324  000CE6  0100               	movlb	0	; () banked
  3325  000CE8  51B6               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3326  000CEA  0100               	movlb	0	; () banked
  3327  000CEC  59AC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3328  000CEE  B0D8               	btfsc	status,0,c
  3329  000CF0  D00E               	goto	l226
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;Movement.c: 166: RightFlag=TMR0L+(TMR0H<<8);
  3333  000CF2  50D7               	movf	4055,w,c	;volatile
  3334  000CF4  0100               	movlb	0	; () banked
  3335  000CF6  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3336  000CF8  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3337  000CFA  50D6               	movf	4054,w,c	;volatile
  3338  000CFC  0100               	movlb	0	; () banked
  3339  000CFE  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3340  000D00  0100               	movlb	0	; () banked
  3341  000D02  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3342  000D04  0E00               	movlw	0
  3343  000D06  0100               	movlb	0	; () banked
  3344  000D08  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3345  000D0A  0100               	movlb	0	; () banked
  3346  000D0C  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3347  000D0E                     l226:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;Movement.c: 167: }
  3351                           ;Movement.c: 169: if (SensorResult[0]>DirectionFoundThreshold) {
  3352  000D0E  0100               	movlb	0	; () banked
  3353  000D10  51B3               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3354  000D12  0100               	movlb	0	; () banked
  3355  000D14  5DAB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3356  000D16  0100               	movlb	0	; () banked
  3357  000D18  51B4               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3358  000D1A  0100               	movlb	0	; () banked
  3359  000D1C  59AC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3360  000D1E  B0D8               	btfsc	status,0,c
  3361  000D20  D00E               	goto	l227
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;Movement.c: 170: LeftFlag=TMR0L+(TMR0H<<8);
  3365  000D22  50D7               	movf	4055,w,c	;volatile
  3366  000D24  0100               	movlb	0	; () banked
  3367  000D26  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3368  000D28  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3369  000D2A  50D6               	movf	4054,w,c	;volatile
  3370  000D2C  0100               	movlb	0	; () banked
  3371  000D2E  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3372  000D30  0100               	movlb	0	; () banked
  3373  000D32  6FAF               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3374  000D34  0E00               	movlw	0
  3375  000D36  0100               	movlb	0	; () banked
  3376  000D38  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3377  000D3A  0100               	movlb	0	; () banked
  3378  000D3C  6FB0               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3379  000D3E                     l227:
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;Movement.c: 171: }
  3383                           ;Movement.c: 178: if (LeftFlag>0) {
  3384  000D3E  0100               	movlb	0	; () banked
  3385  000D40  51AF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3386  000D42  0100               	movlb	0	; () banked
  3387  000D44  11B0               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3388  000D46  B4D8               	btfsc	status,2,c
  3389  000D48  D143               	goto	l3330
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;Movement.c: 181: if (RightFlag>0) {
  3393  000D4A  0100               	movlb	0	; () banked
  3394  000D4C  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3395  000D4E  0100               	movlb	0	; () banked
  3396  000D50  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3397  000D52  B4D8               	btfsc	status,2,c
  3398  000D54  D0A1               	goto	l229
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;Movement.c: 182: TimeAboveThreshold=LeftFlag-RightFlag;
  3402  000D56  C0B8  F07B         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3403  000D5A  C0B9  F07C         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3404  000D5E  0100               	movlb	0	; () banked
  3405  000D60  1F7B               	comf	??_ScanWithRange& (0+255),f,b
  3406  000D62  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3407  000D64  4B7B               	infsnz	??_ScanWithRange& (0+255),f,b
  3408  000D66  2B7C               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3409  000D68  0100               	movlb	0	; () banked
  3410  000D6A  51AF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3411  000D6C  0100               	movlb	0	; () banked
  3412  000D6E  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3413  000D70  0100               	movlb	0	; () banked
  3414  000D72  6FB1               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3415  000D74  0100               	movlb	0	; () banked
  3416  000D76  51B0               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3417  000D78  0100               	movlb	0	; () banked
  3418  000D7A  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3419  000D7C  0100               	movlb	0	; () banked
  3420  000D7E  6FB2               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;Movement.c: 183: TMR0L = 0;
  3424  000D80  0E00               	movlw	0
  3425  000D82  6ED6               	movwf	4054,c	;volatile
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;Movement.c: 184: TMR0H = 0;
  3429  000D84  0E00               	movlw	0
  3430  000D86  6ED7               	movwf	4055,c	;volatile
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;Movement.c: 185: stop(mL,mR);
  3434  000D88  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3435  000D8C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3436  000D90  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3437  000D94  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3438  000D98  ECAA  F00B         	call	_stop	;wreg free
  3439                           
  3440                           ;Movement.c: 186: while ((TMR0L+(TMR0H<<8))<(TimeAboveThreshold>>1)) {
  3441  000D9C  D00C               	goto	l3292
  3442  000D9E                     l3290:
  3443                           
  3444                           ;Movement.c: 187: turnLeft(mL,mR, MotorPower);
  3445  000D9E  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3446  000DA2  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3447  000DA6  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3448  000DAA  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3449  000DAE  C0AD  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3450  000DB2  EC12  F00E         	call	_turnLeft	;wreg free
  3451  000DB6                     l3292:
  3452  000DB6  90D8               	bcf	status,0,c
  3453  000DB8  0100               	movlb	0	; () banked
  3454  000DBA  31B2               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3455  000DBC  0100               	movlb	0	; () banked
  3456  000DBE  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3457  000DC0  0100               	movlb	0	; () banked
  3458  000DC2  31B1               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3459  000DC4  0100               	movlb	0	; () banked
  3460  000DC6  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3461  000DC8  50D7               	movf	4055,w,c	;volatile
  3462  000DCA  0100               	movlb	0	; () banked
  3463  000DCC  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3464  000DCE  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3465  000DD0  50D6               	movf	4054,w,c	;volatile
  3466  000DD2  0100               	movlb	0	; () banked
  3467  000DD4  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3468  000DD6  6B80               	clrf	(??_ScanWithRange+5)& (0+255),b
  3469  000DD8  0100               	movlb	0	; () banked
  3470  000DDA  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3471  000DDC  0100               	movlb	0	; () banked
  3472  000DDE  277F               	addwf	(??_ScanWithRange+4)& (0+255),f,b
  3473  000DE0  0100               	movlb	0	; () banked
  3474  000DE2  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3475  000DE4  0100               	movlb	0	; () banked
  3476  000DE6  2380               	addwfc	(??_ScanWithRange+5)& (0+255),f,b
  3477  000DE8  0100               	movlb	0	; () banked
  3478  000DEA  517B               	movf	??_ScanWithRange& (0+255),w,b
  3479  000DEC  0100               	movlb	0	; () banked
  3480  000DEE  5D7F               	subwf	(??_ScanWithRange+4)& (0+255),w,b
  3481  000DF0  0100               	movlb	0	; () banked
  3482  000DF2  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3483  000DF4  0100               	movlb	0	; () banked
  3484  000DF6  5980               	subwfb	(??_ScanWithRange+5)& (0+255),w,b
  3485  000DF8  A0D8               	btfss	status,0,c
  3486  000DFA  D7D1               	goto	l3290
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;Movement.c: 188: }
  3490                           ;Movement.c: 189: T0CONbits.TMR0ON=0;
  3491  000DFC  9ED5               	bcf	4053,7,c	;volatile
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;Movement.c: 190: stop(mL,mR);
  3495  000DFE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3496  000E02  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3497  000E06  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3498  000E0A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3499  000E0E  ECAA  F00B         	call	_stop	;wreg free
  3500                           
  3501                           ;Movement.c: 192: (MoveType[*Move]) = 1;
  3502  000E12  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3503  000E16  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3504  000E1A  50DF               	movf	indf2,w,c
  3505  000E1C  0100               	movlb	0	; () banked
  3506  000E1E  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3507  000E20  0100               	movlb	0	; () banked
  3508  000E22  517B               	movf	??_ScanWithRange& (0+255),w,b
  3509  000E24  0D01               	mullw	1
  3510  000E26  50F3               	movf	prodl,w,c
  3511  000E28  0100               	movlb	0	; () banked
  3512  000E2A  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3513  000E2C  6ED9               	movwf	fsr2l,c
  3514  000E2E  50F4               	movf	prodh,w,c
  3515  000E30  0100               	movlb	0	; () banked
  3516  000E32  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3517  000E34  6EDA               	movwf	fsr2h,c
  3518  000E36  0E01               	movlw	1
  3519  000E38  6EDF               	movwf	indf2,c
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;Movement.c: 193: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3523  000E3A  90D8               	bcf	status,0,c
  3524  000E3C  0100               	movlb	0	; () banked
  3525  000E3E  31B2               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3526  000E40  0100               	movlb	0	; () banked
  3527  000E42  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3528  000E44  0100               	movlb	0	; () banked
  3529  000E46  31B1               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3530  000E48  0100               	movlb	0	; () banked
  3531  000E4A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3532  000E4C  0100               	movlb	0	; () banked
  3533  000E4E  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3534  000E50  0100               	movlb	0	; () banked
  3535  000E52  277B               	addwf	??_ScanWithRange& (0+255),f,b
  3536  000E54  0100               	movlb	0	; () banked
  3537  000E56  51B9               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3538  000E58  0100               	movlb	0	; () banked
  3539  000E5A  237C               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3540  000E5C  0100               	movlb	0	; () banked
  3541  000E5E  1F7B               	comf	??_ScanWithRange& (0+255),f,b
  3542  000E60  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3543  000E62  4B7B               	infsnz	??_ScanWithRange& (0+255),f,b
  3544  000E64  2B7C               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3545  000E66  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3546  000E6A  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3547  000E6E  50DF               	movf	indf2,w,c
  3548  000E70  0100               	movlb	0	; () banked
  3549  000E72  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3550  000E74  0100               	movlb	0	; () banked
  3551  000E76  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3552  000E78  0D02               	mullw	2
  3553  000E7A  50F3               	movf	prodl,w,c
  3554  000E7C  0100               	movlb	0	; () banked
  3555  000E7E  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3556  000E80  6ED9               	movwf	fsr2l,c
  3557  000E82  50F4               	movf	prodh,w,c
  3558  000E84  0100               	movlb	0	; () banked
  3559  000E86  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3560  000E88  6EDA               	movwf	fsr2h,c
  3561  000E8A  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3562  000E8E  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3563  000E92  D08F               	goto	l3324
  3564  000E94                     l3302:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;Movement.c: 196: return 2;
  3568  000E94  0E02               	movlw	2
  3569                           
  3570                           ; BSR set to: 0
  3571  000E96  0012               	return	
  3572  000E98                     l229:
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;Movement.c: 198: T0CONbits.TMR0ON=0;
  3576  000E98  9ED5               	bcf	4053,7,c	;volatile
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;Movement.c: 202: (MoveType[*Move]) = 1;
  3580  000E9A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3581  000E9E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3582  000EA2  50DF               	movf	indf2,w,c
  3583  000EA4  0100               	movlb	0	; () banked
  3584  000EA6  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3585  000EA8  0100               	movlb	0	; () banked
  3586  000EAA  517B               	movf	??_ScanWithRange& (0+255),w,b
  3587  000EAC  0D01               	mullw	1
  3588  000EAE  50F3               	movf	prodl,w,c
  3589  000EB0  0100               	movlb	0	; () banked
  3590  000EB2  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3591  000EB4  6ED9               	movwf	fsr2l,c
  3592  000EB6  50F4               	movf	prodh,w,c
  3593  000EB8  0100               	movlb	0	; () banked
  3594  000EBA  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3595  000EBC  6EDA               	movwf	fsr2h,c
  3596  000EBE  0E01               	movlw	1
  3597  000EC0  6EDF               	movwf	indf2,c
  3598                           
  3599                           ;Movement.c: 203: (MoveTime[*Move]) = -(TMR0L+(TMR0H<<8));
  3600  000EC2  50D7               	movf	4055,w,c	;volatile
  3601  000EC4  0100               	movlb	0	; () banked
  3602  000EC6  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3603  000EC8  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3604  000ECA  50D6               	movf	4054,w,c	;volatile
  3605  000ECC  0100               	movlb	0	; () banked
  3606  000ECE  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3607  000ED0  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3608  000ED2  0100               	movlb	0	; () banked
  3609  000ED4  517B               	movf	??_ScanWithRange& (0+255),w,b
  3610  000ED6  0100               	movlb	0	; () banked
  3611  000ED8  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3612  000EDA  0100               	movlb	0	; () banked
  3613  000EDC  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3614  000EDE  0100               	movlb	0	; () banked
  3615  000EE0  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3616  000EE2  0100               	movlb	0	; () banked
  3617  000EE4  1F7D               	comf	(??_ScanWithRange+2)& (0+255),f,b
  3618  000EE6  1F7E               	comf	(??_ScanWithRange+3)& (0+255),f,b
  3619  000EE8  4B7D               	infsnz	(??_ScanWithRange+2)& (0+255),f,b
  3620  000EEA  2B7E               	incf	(??_ScanWithRange+3)& (0+255),f,b
  3621  000EEC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3622  000EF0  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3623  000EF4  50DF               	movf	indf2,w,c
  3624  000EF6  0100               	movlb	0	; () banked
  3625  000EF8  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3626  000EFA  0100               	movlb	0	; () banked
  3627  000EFC  517F               	movf	(??_ScanWithRange+4)& (0+255),w,b
  3628  000EFE  0D02               	mullw	2
  3629  000F00  50F3               	movf	prodl,w,c
  3630  000F02  0100               	movlb	0	; () banked
  3631  000F04  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3632  000F06  6ED9               	movwf	fsr2l,c
  3633  000F08  50F4               	movf	prodh,w,c
  3634  000F0A  0100               	movlb	0	; () banked
  3635  000F0C  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3636  000F0E  6EDA               	movwf	fsr2h,c
  3637  000F10  C07D  FFDE         	movff	??_ScanWithRange+2,postinc2
  3638  000F14  C07E  FFDD         	movff	??_ScanWithRange+3,postdec2
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;Movement.c: 204: *Move = *Move+1;
  3642  000F18  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3643  000F1C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3644  000F20  50DF               	movf	indf2,w,c
  3645  000F22  0100               	movlb	0	; () banked
  3646  000F24  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3647  000F26  0100               	movlb	0	; () banked
  3648  000F28  297B               	incf	??_ScanWithRange& (0+255),w,b
  3649  000F2A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3650  000F2E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3651  000F32  6EDF               	movwf	indf2,c
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;Movement.c: 205: stop(mL,mR);
  3655  000F34  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3656  000F38  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3657  000F3C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3658  000F40  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3659  000F44  ECAA  F00B         	call	_stop	;wreg free
  3660                           
  3661                           ;Movement.c: 208: turnLeft(mL,mR,100);
  3662  000F48  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3663  000F4C  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3664  000F50  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3665  000F54  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3666  000F58  0E64               	movlw	100
  3667  000F5A  0100               	movlb	0	; () banked
  3668  000F5C  6F6B               	movwf	turnLeft@power& (0+255),b
  3669  000F5E  EC12  F00E         	call	_turnLeft	;wreg free
  3670                           
  3671                           ;Movement.c: 209: delay_tenth_s(MiniLeftFlick);
  3672  000F62  0100               	movlb	0	; () banked
  3673  000F64  51AE               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3674  000F66  EC4E  F00E         	call	_delay_tenth_s
  3675                           
  3676                           ;Movement.c: 210: stop(mL,mR);
  3677  000F6A  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3678  000F6E  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3679  000F72  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3680  000F76  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3681  000F7A  ECAA  F00B         	call	_stop	;wreg free
  3682                           
  3683                           ;Movement.c: 211: (MoveType[*Move]) = 2;
  3684  000F7E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3685  000F82  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3686  000F86  50DF               	movf	indf2,w,c
  3687  000F88  0100               	movlb	0	; () banked
  3688  000F8A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3689  000F8C  0100               	movlb	0	; () banked
  3690  000F8E  517B               	movf	??_ScanWithRange& (0+255),w,b
  3691  000F90  0D01               	mullw	1
  3692  000F92  50F3               	movf	prodl,w,c
  3693  000F94  0100               	movlb	0	; () banked
  3694  000F96  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3695  000F98  6ED9               	movwf	fsr2l,c
  3696  000F9A  50F4               	movf	prodh,w,c
  3697  000F9C  0100               	movlb	0	; () banked
  3698  000F9E  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3699  000FA0  6EDA               	movwf	fsr2h,c
  3700  000FA2  0E02               	movlw	2
  3701  000FA4  6EDF               	movwf	indf2,c
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;Movement.c: 212: (MoveTime[*Move]) = MiniLeftFlick;
  3705  000FA6  0100               	movlb	0	; () banked
  3706  000FA8  51AE               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3707  000FAA  0100               	movlb	0	; () banked
  3708  000FAC  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3709  000FAE  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3710  000FB0  D75A               	goto	L3
  3711  000FB2                     l3324:
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;Movement.c: 213: *Move = *Move+1;
  3715  000FB2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3716  000FB6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3717  000FBA  50DF               	movf	indf2,w,c
  3718  000FBC  0100               	movlb	0	; () banked
  3719  000FBE  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3720  000FC0  0100               	movlb	0	; () banked
  3721  000FC2  297B               	incf	??_ScanWithRange& (0+255),w,b
  3722  000FC4  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3723  000FC8  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3724  000FCC  6EDF               	movwf	indf2,c
  3725  000FCE  D762               	goto	l3302
  3726  000FD0                     l3330:
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;Movement.c: 217: }
  3730                           ;Movement.c: 218: }
  3731                           ;Movement.c: 220: if (*RFID_Read==1) {
  3732  000FD0  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3733  000FD4  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3734  000FD8  04DE               	decf	postinc2,w,c
  3735  000FDA  A4D8               	btfss	status,2,c
  3736  000FDC  D002               	goto	l3336
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;Movement.c: 221: return 2;
  3740  000FDE  0E02               	movlw	2
  3741                           
  3742                           ; BSR set to: 0
  3743  000FE0  0012               	return	
  3744  000FE2                     l3336:
  3745                           
  3746                           ; BSR set to: 0
  3747  000FE2  0100               	movlb	0	; () banked
  3748  000FE4  4BA9               	infsnz	ScanWithRange@i& (0+255),f,b
  3749  000FE6  2BAA               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3750  000FE8                     l3338:
  3751                           
  3752                           ; BSR set to: 0
  3753  000FE8  0100               	movlb	0	; () banked
  3754  000FEA  51A9               	movf	ScanWithRange@i& (0+255),w,b
  3755  000FEC  0100               	movlb	0	; () banked
  3756  000FEE  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3757  000FF0  0100               	movlb	0	; () banked
  3758  000FF2  51AA               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3759  000FF4  0100               	movlb	0	; () banked
  3760  000FF6  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3761  000FF8  B0D8               	btfsc	status,0,c
  3762  000FFA  D627               	goto	l3250
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;Movement.c: 222: }
  3766                           ;Movement.c: 223: }
  3767                           ;Movement.c: 228: (MoveType[*Move]) = 2;
  3768                           
  3769                           ; BSR set to: 0
  3770  000FFC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3771  001000  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3772  001004  50DF               	movf	indf2,w,c
  3773  001006  0100               	movlb	0	; () banked
  3774  001008  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3775  00100A  0100               	movlb	0	; () banked
  3776  00100C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3777  00100E  0D01               	mullw	1
  3778  001010  50F3               	movf	prodl,w,c
  3779  001012  0100               	movlb	0	; () banked
  3780  001014  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3781  001016  6ED9               	movwf	fsr2l,c
  3782  001018  50F4               	movf	prodh,w,c
  3783  00101A  0100               	movlb	0	; () banked
  3784  00101C  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3785  00101E  6EDA               	movwf	fsr2h,c
  3786  001020  0E02               	movlw	2
  3787  001022  6EDF               	movwf	indf2,c
  3788                           
  3789                           ;Movement.c: 229: (MoveTime[*Move]) = -2;
  3790  001024  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3791  001028  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3792  00102C  50DF               	movf	indf2,w,c
  3793  00102E  0100               	movlb	0	; () banked
  3794  001030  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3795  001032  0100               	movlb	0	; () banked
  3796  001034  517B               	movf	??_ScanWithRange& (0+255),w,b
  3797  001036  0D02               	mullw	2
  3798  001038  50F3               	movf	prodl,w,c
  3799  00103A  0100               	movlb	0	; () banked
  3800  00103C  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3801  00103E  6ED9               	movwf	fsr2l,c
  3802  001040  50F4               	movf	prodh,w,c
  3803  001042  0100               	movlb	0	; () banked
  3804  001044  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3805  001046  6EDA               	movwf	fsr2h,c
  3806  001048  0EFE               	movlw	254
  3807  00104A  6EDE               	movwf	postinc2,c
  3808  00104C  0EFF               	movlw	255
  3809  00104E  6EDD               	movwf	postdec2,c
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;Movement.c: 230: *Move = *Move+1;
  3813  001050  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3814  001054  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3815  001058  50DF               	movf	indf2,w,c
  3816  00105A  0100               	movlb	0	; () banked
  3817  00105C  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3818  00105E  0100               	movlb	0	; () banked
  3819  001060  297B               	incf	??_ScanWithRange& (0+255),w,b
  3820  001062  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3821  001066  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3822  00106A  6EDF               	movwf	indf2,c
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;Movement.c: 231: turnRight(mL,mR, 100);
  3826  00106C  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3827  001070  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3828  001074  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3829  001078  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3830  00107C  0E64               	movlw	100
  3831  00107E  0100               	movlb	0	; () banked
  3832  001080  6F6B               	movwf	turnRight@power& (0+255),b
  3833  001082  ECF3  F00D         	call	_turnRight	;wreg free
  3834                           
  3835                           ;Movement.c: 232: delay_tenth_s(LeftFlick);
  3836  001086  0100               	movlb	0	; () banked
  3837  001088  51B7               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3838  00108A  EC4E  F00E         	call	_delay_tenth_s
  3839                           
  3840                           ;Movement.c: 233: stop(mL,mR);
  3841  00108E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3842  001092  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3843  001096  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3844  00109A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3845  00109E  ECAA  F00B         	call	_stop	;wreg free
  3846                           
  3847                           ;Movement.c: 234: return -1;
  3848  0010A2  0EFF               	movlw	255
  3849  0010A4  0012               	return	
  3850  0010A6                     __end_of_ScanWithRange:
  3851                           	opt stack 0
  3852                           tblptru	equ	0xFF8
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           postinc0	equ	0xFEE
  3857                           wreg	equ	0xFE8
  3858                           indf1	equ	0xFE7
  3859                           plusw1	equ	0xFE3
  3860                           fsr1h	equ	0xFE2
  3861                           fsr1l	equ	0xFE1
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           plusw2	equ	0xFDB
  3866                           fsr2h	equ	0xFDA
  3867                           fsr2l	equ	0xFD9
  3868                           status	equ	0xFD8
  3869                           
  3870 ;; *************** function _turnRight *****************
  3871 ;; Defined at:
  3872 ;;		line 103 in file "dc_motor.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3875 ;;		 -> main@mL(9), 
  3876 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3877 ;;		 -> main@mR(9), 
  3878 ;;  power           1   11[BANK0 ] unsigned char 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;		None
  3881 ;; Return value:  Size  Location     Type
  3882 ;;		None               void
  3883 ;; Registers used:
  3884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3890 ;;      Params:         0       5       0       0
  3891 ;;      Locals:         0       0       0       0
  3892 ;;      Temps:          0       0       0       0
  3893 ;;      Totals:         0       5       0       0
  3894 ;;Total ram usage:        5 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    6
  3897 ;; This function calls:
  3898 ;;		_fullSpeed
  3899 ;; This function is called by:
  3900 ;;		_ScanWithRange
  3901 ;;		_main
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text10
  3906  001BE6                     __ptext10:
  3907                           	opt stack 0
  3908  001BE6                     _turnRight:
  3909                           	opt stack 24
  3910                           
  3911                           ;dc_motor.c: 107: mL->direction=0;
  3912                           
  3913                           ;incstack = 0
  3914  001BE6  0100               	movlb	0	; () banked
  3915  001BE8  EE20 F001          	lfsr	2,1
  3916  001BEC  5167               	movf	turnRight@mL& (0+255),w,b
  3917  001BEE  26D9               	addwf	fsr2l,f,c
  3918  001BF0  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3919  001BF2  22DA               	addwfc	fsr2h,f,c
  3920  001BF4  0E00               	movlw	0
  3921  001BF6  6EDF               	movwf	indf2,c
  3922                           
  3923                           ;dc_motor.c: 108: mR->direction=1;
  3924  001BF8  0100               	movlb	0	; () banked
  3925  001BFA  EE20 F001          	lfsr	2,1
  3926  001BFE  5169               	movf	turnRight@mR& (0+255),w,b
  3927  001C00  26D9               	addwf	fsr2l,f,c
  3928  001C02  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3929  001C04  22DA               	addwfc	fsr2h,f,c
  3930  001C06  0E01               	movlw	1
  3931  001C08  6EDF               	movwf	indf2,c
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3935  001C0A  C067  F062         	movff	turnRight@mL,fullSpeed@mL
  3936  001C0E  C068  F063         	movff	turnRight@mL+1,fullSpeed@mL+1
  3937  001C12  C069  F064         	movff	turnRight@mR,fullSpeed@mR
  3938  001C16  C06A  F065         	movff	turnRight@mR+1,fullSpeed@mR+1
  3939  001C1A  C06B  F066         	movff	turnRight@power,fullSpeed@power
  3940  001C1E  EC7B  F00C         	call	_fullSpeed	;wreg free
  3941  001C22  0012               	return		;funcret
  3942  001C24                     __end_of_turnRight:
  3943                           	opt stack 0
  3944                           tblptru	equ	0xFF8
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           indf1	equ	0xFE7
  3951                           plusw1	equ	0xFE3
  3952                           fsr1h	equ	0xFE2
  3953                           fsr1l	equ	0xFE1
  3954                           indf2	equ	0xFDF
  3955                           postinc2	equ	0xFDE
  3956                           postdec2	equ	0xFDD
  3957                           plusw2	equ	0xFDB
  3958                           fsr2h	equ	0xFDA
  3959                           fsr2l	equ	0xFD9
  3960                           status	equ	0xFD8
  3961                           
  3962 ;; *************** function _turnLeft *****************
  3963 ;; Defined at:
  3964 ;;		line 92 in file "dc_motor.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3967 ;;		 -> main@mL(9), 
  3968 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3969 ;;		 -> main@mR(9), 
  3970 ;;  power           1   11[BANK0 ] unsigned char 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;		None
  3973 ;; Return value:  Size  Location     Type
  3974 ;;		None               void
  3975 ;; Registers used:
  3976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3982 ;;      Params:         0       5       0       0
  3983 ;;      Locals:         0       0       0       0
  3984 ;;      Temps:          0       0       0       0
  3985 ;;      Totals:         0       5       0       0
  3986 ;;Total ram usage:        5 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    6
  3989 ;; This function calls:
  3990 ;;		_fullSpeed
  3991 ;; This function is called by:
  3992 ;;		_ScanWithRange
  3993 ;;		_main
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text11
  3998  001C24                     __ptext11:
  3999                           	opt stack 0
  4000  001C24                     _turnLeft:
  4001                           	opt stack 24
  4002                           
  4003                           ;dc_motor.c: 96: mL->direction=1;
  4004                           
  4005                           ;incstack = 0
  4006  001C24  0100               	movlb	0	; () banked
  4007  001C26  EE20 F001          	lfsr	2,1
  4008  001C2A  5167               	movf	turnLeft@mL& (0+255),w,b
  4009  001C2C  26D9               	addwf	fsr2l,f,c
  4010  001C2E  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  4011  001C30  22DA               	addwfc	fsr2h,f,c
  4012  001C32  0E01               	movlw	1
  4013  001C34  6EDF               	movwf	indf2,c
  4014                           
  4015                           ;dc_motor.c: 97: mR->direction=0;
  4016  001C36  0100               	movlb	0	; () banked
  4017  001C38  EE20 F001          	lfsr	2,1
  4018  001C3C  5169               	movf	turnLeft@mR& (0+255),w,b
  4019  001C3E  26D9               	addwf	fsr2l,f,c
  4020  001C40  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  4021  001C42  22DA               	addwfc	fsr2h,f,c
  4022  001C44  0E00               	movlw	0
  4023  001C46  6EDF               	movwf	indf2,c
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  4027  001C48  C067  F062         	movff	turnLeft@mL,fullSpeed@mL
  4028  001C4C  C068  F063         	movff	turnLeft@mL+1,fullSpeed@mL+1
  4029  001C50  C069  F064         	movff	turnLeft@mR,fullSpeed@mR
  4030  001C54  C06A  F065         	movff	turnLeft@mR+1,fullSpeed@mR+1
  4031  001C58  C06B  F066         	movff	turnLeft@power,fullSpeed@power
  4032  001C5C  EC7B  F00C         	call	_fullSpeed	;wreg free
  4033  001C60  0012               	return		;funcret
  4034  001C62                     __end_of_turnLeft:
  4035                           	opt stack 0
  4036                           tblptru	equ	0xFF8
  4037                           prodh	equ	0xFF4
  4038                           prodl	equ	0xFF3
  4039                           intcon	equ	0xFF2
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           indf1	equ	0xFE7
  4043                           plusw1	equ	0xFE3
  4044                           fsr1h	equ	0xFE2
  4045                           fsr1l	equ	0xFE1
  4046                           indf2	equ	0xFDF
  4047                           postinc2	equ	0xFDE
  4048                           postdec2	equ	0xFDD
  4049                           plusw2	equ	0xFDB
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function _fullSpeed *****************
  4055 ;; Defined at:
  4056 ;;		line 113 in file "dc_motor.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4059 ;;		 -> main@mL(9), 
  4060 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4061 ;;		 -> main@mR(9), 
  4062 ;;  power           1    6[BANK0 ] unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;		None
  4065 ;; Return value:  Size  Location     Type
  4066 ;;		None               void
  4067 ;; Registers used:
  4068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4074 ;;      Params:         0       5       0       0
  4075 ;;      Locals:         0       0       0       0
  4076 ;;      Temps:          1       0       0       0
  4077 ;;      Totals:         1       5       0       0
  4078 ;;Total ram usage:        6 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    5
  4081 ;; This function calls:
  4082 ;;		_setMotorPWM
  4083 ;; This function is called by:
  4084 ;;		_turnLeft
  4085 ;;		_turnRight
  4086 ;;		_fullSpeedBack
  4087 ;;		_main
  4088 ;;		_fullSpeedForward
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text12
  4093  0018F6                     __ptext12:
  4094                           	opt stack 0
  4095  0018F6                     _fullSpeed:
  4096                           	opt stack 24
  4097                           
  4098                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4099                           
  4100                           ;incstack = 0
  4101  0018F6  D02C               	goto	l67
  4102  0018F8                     l3018:
  4103                           
  4104                           ;dc_motor.c: 117: if(mL->power<power){
  4105  0018F8  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4106  0018FC  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4107  001900  0100               	movlb	0	; () banked
  4108  001902  5166               	movf	fullSpeed@power& (0+255),w,b
  4109  001904  5CDE               	subwf	postinc2,w,c
  4110  001906  B0D8               	btfsc	status,0,c
  4111  001908  D005               	goto	l3022
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;dc_motor.c: 118: mL->power++;
  4115  00190A  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4116  00190E  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4117  001912  2ADF               	incf	indf2,f,c
  4118  001914                     l3022:
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;dc_motor.c: 119: }
  4122                           ;dc_motor.c: 120: if(mR->power<power){
  4123  001914  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4124  001918  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4125  00191C  0100               	movlb	0	; () banked
  4126  00191E  5166               	movf	fullSpeed@power& (0+255),w,b
  4127  001920  5CDE               	subwf	postinc2,w,c
  4128  001922  B0D8               	btfsc	status,0,c
  4129  001924  D005               	goto	l3026
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;dc_motor.c: 121: mR->power++;
  4133  001926  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4134  00192A  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4135  00192E  2ADF               	incf	indf2,f,c
  4136  001930                     l3026:
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;dc_motor.c: 122: }
  4140                           ;dc_motor.c: 123: setMotorPWM(mL);
  4141  001930  C062  F032         	movff	fullSpeed@mL,setMotorPWM@m
  4142  001934  C063  F033         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4143  001938  ECD6  F009         	call	_setMotorPWM	;wreg free
  4144                           
  4145                           ;dc_motor.c: 124: setMotorPWM(mR);
  4146  00193C  C064  F032         	movff	fullSpeed@mR,setMotorPWM@m
  4147  001940  C065  F033         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4148  001944  ECD6  F009         	call	_setMotorPWM	;wreg free
  4149                           
  4150                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(2000000/4000000.0)));
  4151  001948  0E08               	movlw	8
  4152  00194A                     u3207:
  4153  00194A  2EE8               	decfsz	wreg,f,c
  4154  00194C  D7FE               	goto	u3207
  4155  00194E  F000               	nop	
  4156  001950                     l67:
  4157  001950  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4158  001954  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4159  001958  0100               	movlb	0	; () banked
  4160  00195A  5166               	movf	fullSpeed@power& (0+255),w,b
  4161  00195C  5CDE               	subwf	postinc2,w,c
  4162  00195E  A0D8               	btfss	status,0,c
  4163  001960  D7CB               	goto	l3018
  4164                           
  4165                           ; BSR set to: 0
  4166  001962  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4167  001966  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4168  00196A  0100               	movlb	0	; () banked
  4169  00196C  5166               	movf	fullSpeed@power& (0+255),w,b
  4170  00196E  5CDE               	subwf	postinc2,w,c
  4171  001970  B0D8               	btfsc	status,0,c
  4172  001972  0012               	return	
  4173  001974  D7C1               	goto	l3018
  4174  001976                     __end_of_fullSpeed:
  4175                           	opt stack 0
  4176                           tblptru	equ	0xFF8
  4177                           prodh	equ	0xFF4
  4178                           prodl	equ	0xFF3
  4179                           intcon	equ	0xFF2
  4180                           postinc0	equ	0xFEE
  4181                           wreg	equ	0xFE8
  4182                           indf1	equ	0xFE7
  4183                           plusw1	equ	0xFE3
  4184                           fsr1h	equ	0xFE2
  4185                           fsr1l	equ	0xFE1
  4186                           indf2	equ	0xFDF
  4187                           postinc2	equ	0xFDE
  4188                           postdec2	equ	0xFDD
  4189                           plusw2	equ	0xFDB
  4190                           fsr2h	equ	0xFDA
  4191                           fsr2l	equ	0xFD9
  4192                           status	equ	0xFD8
  4193                           
  4194 ;; *************** function _delay_tenth_s *****************
  4195 ;; Defined at:
  4196 ;;		line 32 in file "Movement.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;  tenth_second    1    wreg     unsigned char 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4201 ;;  i               2   37[COMRAM] unsigned int 
  4202 ;; Return value:  Size  Location     Type
  4203 ;;		None               void
  4204 ;; Registers used:
  4205 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4211 ;;      Params:         0       0       0       0
  4212 ;;      Locals:         3       0       0       0
  4213 ;;      Temps:          1       0       0       0
  4214 ;;      Totals:         4       0       0       0
  4215 ;;Total ram usage:        4 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    3
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_ScanWithRange
  4222 ;;		_main
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           	psect	text13
  4227  001C9C                     __ptext13:
  4228                           	opt stack 0
  4229  001C9C                     _delay_tenth_s:
  4230                           	opt stack 27
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;incstack = 0
  4234                           ;delay_tenth_s@tenth_seconds stored from wreg
  4235  001C9C  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4236                           
  4237                           ;Movement.c: 33: unsigned int i=0;
  4238  001C9E  0E00               	movlw	0
  4239  001CA0  6E27               	movwf	delay_tenth_s@i+1,c
  4240  001CA2  0E00               	movlw	0
  4241  001CA4  6E26               	movwf	delay_tenth_s@i,c
  4242                           
  4243                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4244  001CA6  0E00               	movlw	0
  4245  001CA8  6E27               	movwf	delay_tenth_s@i+1,c
  4246  001CAA  0E01               	movlw	1
  4247  001CAC  6E26               	movwf	delay_tenth_s@i,c
  4248  001CAE  D00A               	goto	l2280
  4249  001CB0                     l2276:
  4250                           
  4251                           ;Movement.c: 36: _delay((unsigned long)((50)*(2000000/4000.0)));
  4252  001CB0  0E21               	movlw	33
  4253  001CB2  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4254  001CB4  0E76               	movlw	118
  4255  001CB6                     u3217:
  4256  001CB6  2EE8               	decfsz	wreg,f,c
  4257  001CB8  D7FE               	goto	u3217
  4258  001CBA  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4259  001CBC  D7FC               	goto	u3217
  4260  001CBE  D000               	nop2	
  4261  001CC0  4A26               	infsnz	delay_tenth_s@i,f,c
  4262  001CC2  2A27               	incf	delay_tenth_s@i+1,f,c
  4263  001CC4                     l2280:
  4264  001CC4  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4265  001CC6  0D02               	mullw	2
  4266  001CC8  5026               	movf	delay_tenth_s@i,w,c
  4267  001CCA  5CF3               	subwf	prodl,w,c
  4268  001CCC  5027               	movf	delay_tenth_s@i+1,w,c
  4269  001CCE  58F4               	subwfb	prodh,w,c
  4270  001CD0  A0D8               	btfss	status,0,c
  4271  001CD2  0012               	return	
  4272  001CD4  D7ED               	goto	l2276
  4273  001CD6                     __end_of_delay_tenth_s:
  4274                           	opt stack 0
  4275                           tblptru	equ	0xFF8
  4276                           prodh	equ	0xFF4
  4277                           prodl	equ	0xFF3
  4278                           intcon	equ	0xFF2
  4279                           postinc0	equ	0xFEE
  4280                           wreg	equ	0xFE8
  4281                           indf1	equ	0xFE7
  4282                           plusw1	equ	0xFE3
  4283                           fsr1h	equ	0xFE2
  4284                           fsr1l	equ	0xFE1
  4285                           indf2	equ	0xFDF
  4286                           postinc2	equ	0xFDE
  4287                           postdec2	equ	0xFDD
  4288                           plusw2	equ	0xFDB
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function _ScanIR *****************
  4294 ;; Defined at:
  4295 ;;		line 44 in file "Movement.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4298 ;;		 -> main@mL(9), 
  4299 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4300 ;;		 -> main@mR(9), 
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4303 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4304 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  1    wreg      unsigned char 
  4307 ;; Registers used:
  4308 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4314 ;;      Params:         0       4       0       0
  4315 ;;      Locals:         0      46       0       0
  4316 ;;      Temps:          0       0       0       0
  4317 ;;      Totals:         0      50       0       0
  4318 ;;Total ram usage:       50 bytes
  4319 ;; Hardware stack levels used:    1
  4320 ;; Hardware stack levels required when called:    7
  4321 ;; This function calls:
  4322 ;;		_LCD_String
  4323 ;;		_SendLCD
  4324 ;;		_SetLine
  4325 ;;		_grabLeftIR
  4326 ;;		_grabRightIR
  4327 ;;		_sprintf
  4328 ;;		_stop
  4329 ;; This function is called by:
  4330 ;;		_main
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text14
  4335  0014E6                     __ptext14:
  4336                           	opt stack 0
  4337  0014E6                     _ScanIR:
  4338                           	opt stack 23
  4339                           
  4340                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4341                           
  4342                           ;incstack = 0
  4343  0014E6  C0BF  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4344  0014EA  C0C0  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4345  0014EE  C0C1  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4346  0014F2  C0C2  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4347                           
  4348                           ;Movement.c: 48: char buf[40];
  4349                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4350  0014F6  0E03               	movlw	3
  4351  0014F8  0100               	movlb	0	; () banked
  4352  0014FA  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4353  0014FC  0EE8               	movlw	232
  4354  0014FE  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4358  001500  ECF5  F00C         	call	_grabLeftIR	;wreg free
  4359  001504  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4360  001508  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4361                           
  4362                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4363  00150C  ECBB  F00C         	call	_grabRightIR	;wreg free
  4364  001510  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4365  001514  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4366                           
  4367                           ;Movement.c: 60: CAP1BUFH=0;
  4368  001518  0E00               	movlw	0
  4369  00151A  6E69               	movwf	3945,c	;volatile
  4370                           
  4371                           ;Movement.c: 61: CAP1BUFL=0;
  4372  00151C  0E00               	movlw	0
  4373  00151E  6E68               	movwf	3944,c	;volatile
  4374                           
  4375                           ;Movement.c: 62: CAP2BUFH=0;
  4376  001520  0E00               	movlw	0
  4377  001522  6E67               	movwf	3943,c	;volatile
  4378                           
  4379                           ;Movement.c: 63: CAP2BUFL=0;
  4380  001524  0E00               	movlw	0
  4381  001526  6E66               	movwf	3942,c	;volatile
  4382                           
  4383                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4384  001528  0E00               	movlw	0
  4385  00152A  6E28               	movwf	SendLCD@type,c
  4386  00152C  0E01               	movlw	1
  4387  00152E  ECA0  F00E         	call	_SendLCD
  4388                           
  4389                           ;Movement.c: 67: _delay((unsigned long)((50)*(2000000/4000000.0)));
  4390  001532  0E08               	movlw	8
  4391  001534                     u3227:
  4392  001534  2EE8               	decfsz	wreg,f,c
  4393  001536  D7FE               	goto	u3227
  4394  001538  F000               	nop	
  4395                           
  4396                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4397  00153A  0E00               	movlw	0
  4398  00153C  6E28               	movwf	SendLCD@type,c
  4399  00153E  0E02               	movlw	2
  4400  001540  ECA0  F00E         	call	_SendLCD
  4401                           
  4402                           ;Movement.c: 69: _delay((unsigned long)((2)*(2000000/4000.0)));
  4403  001544  0EFA               	movlw	250
  4404  001546                     u3237:
  4405  001546  F000               	nop	
  4406  001548  2EE8               	decfsz	wreg,f,c
  4407  00154A  D7FD               	goto	u3237
  4408                           
  4409                           ;Movement.c: 70: SetLine(1);
  4410  00154C  0E01               	movlw	1
  4411  00154E  EC88  F00E         	call	_SetLine
  4412                           
  4413                           ;Movement.c: 71: LCD_String("     ScanIR");
  4414  001552  0E2D               	movlw	low STR_1
  4415  001554  6E2A               	movwf	LCD_String@string,c
  4416  001556  0E03               	movlw	high STR_1
  4417  001558  6E2B               	movwf	LCD_String@string+1,c
  4418  00155A  EC2F  F00D         	call	_LCD_String	;wreg free
  4419                           
  4420                           ;Movement.c: 72: SetLine(2);
  4421  00155E  0E02               	movlw	2
  4422  001560  EC88  F00E         	call	_SetLine
  4423                           
  4424                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4425  001564  0E71               	movlw	low ScanIR@buf
  4426  001566  6E30               	movwf	sprintf@sp,c
  4427  001568  0E00               	movlw	high ScanIR@buf
  4428  00156A  6E31               	movwf	sprintf@sp+1,c
  4429  00156C  0E0C               	movlw	low (STR_6+1)
  4430  00156E  6E32               	movwf	sprintf@f,c
  4431  001570  0E03               	movlw	high (STR_6+1)
  4432  001572  6E33               	movwf	sprintf@f+1,c
  4433  001574  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4434  001578  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4435  00157C  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4436  001580  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4437  001584  EC53  F008         	call	_sprintf	;wreg free
  4438                           
  4439                           ;Movement.c: 74: LCD_String(buf);
  4440  001588  0E71               	movlw	low ScanIR@buf
  4441  00158A  6E2A               	movwf	LCD_String@string,c
  4442  00158C  0E00               	movlw	high ScanIR@buf
  4443  00158E  6E2B               	movwf	LCD_String@string+1,c
  4444  001590  EC2F  F00D         	call	_LCD_String	;wreg free
  4445                           
  4446                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4447                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4448  001594  0100               	movlb	0	; () banked
  4449  001596  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4450  001598  0100               	movlb	0	; () banked
  4451  00159A  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4452  00159C  0100               	movlb	0	; () banked
  4453  00159E  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4454  0015A0  0100               	movlb	0	; () banked
  4455  0015A2  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4456  0015A4  B0D8               	btfsc	status,0,c
  4457  0015A6  D00C               	goto	l3218
  4458                           
  4459                           ; BSR set to: 0
  4460  0015A8  0100               	movlb	0	; () banked
  4461  0015AA  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4462  0015AC  0100               	movlb	0	; () banked
  4463  0015AE  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4464  0015B0  0100               	movlb	0	; () banked
  4465  0015B2  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4466  0015B4  0100               	movlb	0	; () banked
  4467  0015B6  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4468  0015B8  B0D8               	btfsc	status,0,c
  4469  0015BA  D002               	goto	l3218
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;Movement.c: 80: return 2;
  4473  0015BC  0E02               	movlw	2
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;Movement.c: 81: } else {
  4477                           
  4478                           ; BSR set to: 0
  4479  0015BE  0012               	return	
  4480  0015C0                     l3218:
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;Movement.c: 82: stop(mL,mR);
  4484  0015C0  C06D  F062         	movff	ScanIR@mL,stop@mL
  4485  0015C4  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4486  0015C8  C06F  F064         	movff	ScanIR@mR,stop@mR
  4487  0015CC  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4488  0015D0  ECAA  F00B         	call	_stop	;wreg free
  4489                           
  4490                           ;Movement.c: 83: return 0;
  4491  0015D4  0E00               	movlw	0
  4492  0015D6  0012               	return	
  4493  0015D8                     __end_of_ScanIR:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           prodh	equ	0xFF4
  4497                           prodl	equ	0xFF3
  4498                           intcon	equ	0xFF2
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           indf1	equ	0xFE7
  4502                           plusw1	equ	0xFE3
  4503                           fsr1h	equ	0xFE2
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           postdec2	equ	0xFDD
  4508                           plusw2	equ	0xFDB
  4509                           fsr2h	equ	0xFDA
  4510                           fsr2l	equ	0xFD9
  4511                           status	equ	0xFD8
  4512                           
  4513 ;; *************** function _stop *****************
  4514 ;; Defined at:
  4515 ;;		line 72 in file "dc_motor.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4518 ;;		 -> main@mL(9), 
  4519 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4520 ;;		 -> main@mR(9), 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;		None
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4532 ;;      Params:         0       4       0       0
  4533 ;;      Locals:         0       0       0       0
  4534 ;;      Temps:          0       0       0       0
  4535 ;;      Totals:         0       4       0       0
  4536 ;;Total ram usage:        4 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    5
  4539 ;; This function calls:
  4540 ;;		_setMotorPWM
  4541 ;; This function is called by:
  4542 ;;		_ScanIR
  4543 ;;		_ScanWithRange
  4544 ;;		_main
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           	psect	text15
  4549  001754                     __ptext15:
  4550                           	opt stack 0
  4551  001754                     _stop:
  4552                           	opt stack 25
  4553                           
  4554                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4555                           
  4556                           ;incstack = 0
  4557  001754  D028               	goto	l3050
  4558  001756                     l3036:
  4559                           
  4560                           ;dc_motor.c: 76: if(mL->power>0){
  4561  001756  C062  FFD9         	movff	stop@mL,fsr2l
  4562  00175A  C063  FFDA         	movff	stop@mL+1,fsr2h
  4563  00175E  50DF               	movf	indf2,w,c
  4564  001760  B4D8               	btfsc	status,2,c
  4565  001762  D005               	goto	l3040
  4566                           
  4567                           ;dc_motor.c: 77: mL->power--;
  4568  001764  C062  FFD9         	movff	stop@mL,fsr2l
  4569  001768  C063  FFDA         	movff	stop@mL+1,fsr2h
  4570  00176C  06DF               	decf	indf2,f,c
  4571  00176E                     l3040:
  4572                           
  4573                           ;dc_motor.c: 78: }
  4574                           ;dc_motor.c: 79: if(mR->power>0){
  4575  00176E  C064  FFD9         	movff	stop@mR,fsr2l
  4576  001772  C065  FFDA         	movff	stop@mR+1,fsr2h
  4577  001776  50DF               	movf	indf2,w,c
  4578  001778  B4D8               	btfsc	status,2,c
  4579  00177A  D005               	goto	l3044
  4580                           
  4581                           ;dc_motor.c: 80: mR->power--;
  4582  00177C  C064  FFD9         	movff	stop@mR,fsr2l
  4583  001780  C065  FFDA         	movff	stop@mR+1,fsr2h
  4584  001784  06DF               	decf	indf2,f,c
  4585  001786                     l3044:
  4586                           
  4587                           ;dc_motor.c: 81: }
  4588                           ;dc_motor.c: 82: setMotorPWM(mL);
  4589  001786  C062  F032         	movff	stop@mL,setMotorPWM@m
  4590  00178A  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4591  00178E  ECD6  F009         	call	_setMotorPWM	;wreg free
  4592                           
  4593                           ;dc_motor.c: 83: setMotorPWM(mR);
  4594  001792  C064  F032         	movff	stop@mR,setMotorPWM@m
  4595  001796  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4596  00179A  ECD6  F009         	call	_setMotorPWM	;wreg free
  4597                           
  4598                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(2000000/4000000.0)));
  4599  00179E  0E08               	movlw	8
  4600  0017A0                     u3247:
  4601  0017A0  2EE8               	decfsz	wreg,f,c
  4602  0017A2  D7FE               	goto	u3247
  4603  0017A4  F000               	nop	
  4604  0017A6                     l3050:
  4605  0017A6  C062  FFD9         	movff	stop@mL,fsr2l
  4606  0017AA  C063  FFDA         	movff	stop@mL+1,fsr2h
  4607  0017AE  50DF               	movf	indf2,w,c
  4608  0017B0  A4D8               	btfss	status,2,c
  4609  0017B2  D7D1               	goto	l3036
  4610  0017B4  C064  FFD9         	movff	stop@mR,fsr2l
  4611  0017B8  C065  FFDA         	movff	stop@mR+1,fsr2h
  4612  0017BC  50DF               	movf	indf2,w,c
  4613  0017BE  A4D8               	btfss	status,2,c
  4614  0017C0  D7CA               	goto	l3036
  4615                           
  4616                           ;dc_motor.c: 85: }
  4617                           ;dc_motor.c: 86: mL->direction=1;
  4618  0017C2  0100               	movlb	0	; () banked
  4619  0017C4  EE20 F001          	lfsr	2,1
  4620  0017C8  5162               	movf	stop@mL& (0+255),w,b
  4621  0017CA  26D9               	addwf	fsr2l,f,c
  4622  0017CC  5163               	movf	(stop@mL+1)& (0+255),w,b
  4623  0017CE  22DA               	addwfc	fsr2h,f,c
  4624  0017D0  0E01               	movlw	1
  4625  0017D2  6EDF               	movwf	indf2,c
  4626                           
  4627                           ;dc_motor.c: 87: mR->direction=1;
  4628  0017D4  0100               	movlb	0	; () banked
  4629  0017D6  EE20 F001          	lfsr	2,1
  4630  0017DA  5164               	movf	stop@mR& (0+255),w,b
  4631  0017DC  26D9               	addwf	fsr2l,f,c
  4632  0017DE  5165               	movf	(stop@mR+1)& (0+255),w,b
  4633  0017E0  22DA               	addwfc	fsr2h,f,c
  4634  0017E2  0E01               	movlw	1
  4635  0017E4  6EDF               	movwf	indf2,c
  4636                           
  4637                           ; BSR set to: 0
  4638  0017E6  0012               	return		;funcret
  4639  0017E8                     __end_of_stop:
  4640                           	opt stack 0
  4641                           tblptru	equ	0xFF8
  4642                           prodh	equ	0xFF4
  4643                           prodl	equ	0xFF3
  4644                           intcon	equ	0xFF2
  4645                           postinc0	equ	0xFEE
  4646                           wreg	equ	0xFE8
  4647                           indf1	equ	0xFE7
  4648                           plusw1	equ	0xFE3
  4649                           fsr1h	equ	0xFE2
  4650                           fsr1l	equ	0xFE1
  4651                           indf2	equ	0xFDF
  4652                           postinc2	equ	0xFDE
  4653                           postdec2	equ	0xFDD
  4654                           plusw2	equ	0xFDB
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _setMotorPWM *****************
  4660 ;; Defined at:
  4661 ;;		line 31 in file "dc_motor.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4664 ;;		 -> main@mR(9), main@mL(9), 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  PWMduty         2    0[BANK0 ] int 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;		None               void
  4669 ;; Registers used:
  4670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4676 ;;      Params:         2       0       0       0
  4677 ;;      Locals:         0       2       0       0
  4678 ;;      Temps:          5       0       0       0
  4679 ;;      Totals:         7       2       0       0
  4680 ;;Total ram usage:        9 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    4
  4683 ;; This function calls:
  4684 ;;		___awdiv
  4685 ;;		___wmul
  4686 ;; This function is called by:
  4687 ;;		_stop
  4688 ;;		_fullSpeed
  4689 ;;		_setMotorFullSpeed
  4690 ;;		_stopMotor
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           	psect	text16
  4695  0013AC                     __ptext16:
  4696                           	opt stack 0
  4697  0013AC                     _setMotorPWM:
  4698                           	opt stack 24
  4699                           
  4700                           ;dc_motor.c: 33: int PWMduty;
  4701                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;incstack = 0
  4705  0013AC  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4706  0013B0  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4707  0013B4  50DF               	movf	indf2,w,c
  4708  0013B6  6E34               	movwf	??_setMotorPWM& (0+255),c
  4709  0013B8  5034               	movf	??_setMotorPWM,w,c
  4710  0013BA  6E24               	movwf	___wmul@multiplier,c
  4711  0013BC  6A25               	clrf	___wmul@multiplier+1,c
  4712  0013BE  EE20 F007          	lfsr	2,7
  4713  0013C2  5032               	movf	setMotorPWM@m,w,c
  4714  0013C4  26D9               	addwf	fsr2l,f,c
  4715  0013C6  5033               	movf	setMotorPWM@m+1,w,c
  4716  0013C8  22DA               	addwfc	fsr2h,f,c
  4717  0013CA  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4718  0013CE  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4719  0013D2  ECDF  F00E         	call	___wmul	;wreg free
  4720  0013D6  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4721  0013DA  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4722  0013DE  0E00               	movlw	0
  4723  0013E0  6E2D               	movwf	___awdiv@divisor+1,c
  4724  0013E2  0E64               	movlw	100
  4725  0013E4  6E2C               	movwf	___awdiv@divisor,c
  4726  0013E6  EC39  F00C         	call	___awdiv	;wreg free
  4727  0013EA  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4728  0013EE  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4729                           
  4730                           ;dc_motor.c: 37: if (m->direction)
  4731  0013F2  EE20 F001          	lfsr	2,1
  4732  0013F6  5032               	movf	setMotorPWM@m,w,c
  4733  0013F8  26D9               	addwf	fsr2l,f,c
  4734  0013FA  5033               	movf	setMotorPWM@m+1,w,c
  4735  0013FC  22DA               	addwfc	fsr2h,f,c
  4736  0013FE  50DF               	movf	indf2,w,c
  4737  001400  B4D8               	btfsc	status,2,c
  4738  001402  D02E               	goto	l3014
  4739                           
  4740                           ;dc_motor.c: 38: {
  4741                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4742  001404  EE20 F006          	lfsr	2,6
  4743  001408  5032               	movf	setMotorPWM@m,w,c
  4744  00140A  26D9               	addwf	fsr2l,f,c
  4745  00140C  5033               	movf	setMotorPWM@m+1,w,c
  4746  00140E  22DA               	addwfc	fsr2h,f,c
  4747  001410  50DF               	movf	indf2,w,c
  4748  001412  6E34               	movwf	??_setMotorPWM& (0+255),c
  4749  001414  0E01               	movlw	1
  4750  001416  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4751  001418  2A34               	incf	??_setMotorPWM,f,c
  4752  00141A  D002               	goto	u2384
  4753  00141C                     u2385:
  4754  00141C  90D8               	bcf	status,0,c
  4755  00141E  3635               	rlcf	??_setMotorPWM+1,f,c
  4756  001420                     u2384:
  4757  001420  2E34               	decfsz	??_setMotorPWM,f,c
  4758  001422  D7FC               	goto	u2385
  4759  001424  5035               	movf	??_setMotorPWM+1,w,c
  4760  001426  108A               	iorwf	3978,w,c	;volatile
  4761  001428  6E8A               	movwf	3978,c	;volatile
  4762                           
  4763                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4764  00142A  EE20 F007          	lfsr	2,7
  4765  00142E  5032               	movf	setMotorPWM@m,w,c
  4766  001430  26D9               	addwf	fsr2l,f,c
  4767  001432  5033               	movf	setMotorPWM@m+1,w,c
  4768  001434  22DA               	addwfc	fsr2h,f,c
  4769  001436  CFDE F034          	movff	postinc2,??_setMotorPWM
  4770  00143A  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4771  00143E  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4772  001442  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4773  001446  1E36               	comf	??_setMotorPWM+2,f,c
  4774  001448  1E37               	comf	??_setMotorPWM+3,f,c
  4775  00144A  4A36               	infsnz	??_setMotorPWM+2,f,c
  4776  00144C  2A37               	incf	??_setMotorPWM+3,f,c
  4777  00144E  5034               	movf	??_setMotorPWM,w,c
  4778  001450  2436               	addwf	??_setMotorPWM+2,w,c
  4779  001452  0100               	movlb	0	; () banked
  4780  001454  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4781  001456  5035               	movf	??_setMotorPWM+1,w,c
  4782  001458  2037               	addwfc	??_setMotorPWM+3,w,c
  4783  00145A  0100               	movlb	0	; () banked
  4784  00145C  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4785                           
  4786                           ;dc_motor.c: 41: }
  4787  00145E  D014               	goto	l37
  4788  001460                     l3014:
  4789                           
  4790                           ;dc_motor.c: 42: else
  4791                           ;dc_motor.c: 43: {
  4792                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4793  001460  EE20 F006          	lfsr	2,6
  4794  001464  5032               	movf	setMotorPWM@m,w,c
  4795  001466  26D9               	addwf	fsr2l,f,c
  4796  001468  5033               	movf	setMotorPWM@m+1,w,c
  4797  00146A  22DA               	addwfc	fsr2h,f,c
  4798  00146C  50DF               	movf	indf2,w,c
  4799  00146E  6E34               	movwf	??_setMotorPWM& (0+255),c
  4800  001470  0E01               	movlw	1
  4801  001472  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4802  001474  2A34               	incf	??_setMotorPWM,f,c
  4803  001476  D002               	goto	u2394
  4804  001478                     u2395:
  4805  001478  90D8               	bcf	status,0,c
  4806  00147A  3635               	rlcf	??_setMotorPWM+1,f,c
  4807  00147C                     u2394:
  4808  00147C  2E34               	decfsz	??_setMotorPWM,f,c
  4809  00147E  D7FC               	goto	u2395
  4810  001480  5035               	movf	??_setMotorPWM+1,w,c
  4811  001482  0AFF               	xorlw	255
  4812  001484  148A               	andwf	3978,w,c	;volatile
  4813  001486  6E8A               	movwf	3978,c	;volatile
  4814  001488                     l37:
  4815                           
  4816                           ;dc_motor.c: 45: }
  4817                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4818  001488  EE20 F002          	lfsr	2,2
  4819  00148C  5032               	movf	setMotorPWM@m,w,c
  4820  00148E  26D9               	addwf	fsr2l,f,c
  4821  001490  5033               	movf	setMotorPWM@m+1,w,c
  4822  001492  22DA               	addwfc	fsr2h,f,c
  4823  001494  CFDE F034          	movff	postinc2,??_setMotorPWM
  4824  001498  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4825  00149C  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4826  0014A0  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4827  0014A4  0100               	movlb	0	; () banked
  4828  0014A6  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4829  0014A8  46E8               	rlncf	wreg,f,c
  4830  0014AA  0BFC               	andlw	252
  4831  0014AC  6EDF               	movwf	indf2,c
  4832                           
  4833                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4834  0014AE  EE20 F004          	lfsr	2,4
  4835  0014B2  5032               	movf	setMotorPWM@m,w,c
  4836  0014B4  26D9               	addwf	fsr2l,f,c
  4837  0014B6  5033               	movf	setMotorPWM@m+1,w,c
  4838  0014B8  22DA               	addwfc	fsr2h,f,c
  4839  0014BA  CFDE F034          	movff	postinc2,??_setMotorPWM
  4840  0014BE  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4841  0014C2  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4842  0014C6  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4843  0014CA  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4844  0014CE  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4845  0014D2  0E06               	movlw	6
  4846  0014D4  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4847  0014D6                     u2405:
  4848  0014D6  3437               	rlcf	??_setMotorPWM+3,w,c
  4849  0014D8  3237               	rrcf	??_setMotorPWM+3,f,c
  4850  0014DA  3236               	rrcf	??_setMotorPWM+2,f,c
  4851  0014DC  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4852  0014DE  D7FB               	goto	u2405
  4853  0014E0  5036               	movf	??_setMotorPWM+2,w,c
  4854  0014E2  6EDF               	movwf	indf2,c
  4855                           
  4856                           ; BSR set to: 0
  4857  0014E4  0012               	return		;funcret
  4858  0014E6                     __end_of_setMotorPWM:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           prodh	equ	0xFF4
  4862                           prodl	equ	0xFF3
  4863                           intcon	equ	0xFF2
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           indf1	equ	0xFE7
  4867                           plusw1	equ	0xFE3
  4868                           fsr1h	equ	0xFE2
  4869                           fsr1l	equ	0xFE1
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           plusw2	equ	0xFDB
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function ___awdiv *****************
  4879 ;; Defined at:
  4880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  dividend        2   41[COMRAM] int 
  4883 ;;  divisor         2   43[COMRAM] int 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  quotient        2   47[COMRAM] int 
  4886 ;;  sign            1   46[COMRAM] unsigned char 
  4887 ;;  counter         1   45[COMRAM] unsigned char 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  2   41[COMRAM] int 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4897 ;;      Params:         4       0       0       0
  4898 ;;      Locals:         4       0       0       0
  4899 ;;      Temps:          0       0       0       0
  4900 ;;      Totals:         8       0       0       0
  4901 ;;Total ram usage:        8 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    3
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_setMotorPWM
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text17
  4912  001872                     __ptext17:
  4913                           	opt stack 0
  4914  001872                     ___awdiv:
  4915                           	opt stack 24
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;incstack = 0
  4919  001872  0E00               	movlw	0
  4920  001874  6E2F               	movwf	___awdiv@sign,c
  4921  001876  AE2D               	btfss	___awdiv@divisor+1,7,c
  4922  001878  D006               	goto	l2972
  4923  00187A  6C2C               	negf	___awdiv@divisor,c
  4924  00187C  1E2D               	comf	___awdiv@divisor+1,f,c
  4925  00187E  B0D8               	btfsc	status,0,c
  4926  001880  2A2D               	incf	___awdiv@divisor+1,f,c
  4927  001882  0E01               	movlw	1
  4928  001884  6E2F               	movwf	___awdiv@sign,c
  4929  001886                     l2972:
  4930  001886  AE2B               	btfss	___awdiv@dividend+1,7,c
  4931  001888  D006               	goto	l2978
  4932  00188A  6C2A               	negf	___awdiv@dividend,c
  4933  00188C  1E2B               	comf	___awdiv@dividend+1,f,c
  4934  00188E  B0D8               	btfsc	status,0,c
  4935  001890  2A2B               	incf	___awdiv@dividend+1,f,c
  4936  001892  0E01               	movlw	1
  4937  001894  1A2F               	xorwf	___awdiv@sign,f,c
  4938  001896                     l2978:
  4939  001896  0E00               	movlw	0
  4940  001898  6E31               	movwf	___awdiv@quotient+1,c
  4941  00189A  0E00               	movlw	0
  4942  00189C  6E30               	movwf	___awdiv@quotient,c
  4943  00189E  502C               	movf	___awdiv@divisor,w,c
  4944  0018A0  102D               	iorwf	___awdiv@divisor+1,w,c
  4945  0018A2  B4D8               	btfsc	status,2,c
  4946  0018A4  D01C               	goto	l3000
  4947  0018A6  0E01               	movlw	1
  4948  0018A8  6E2E               	movwf	___awdiv@counter,c
  4949  0018AA  D004               	goto	l2986
  4950  0018AC                     l2984:
  4951  0018AC  90D8               	bcf	status,0,c
  4952  0018AE  362C               	rlcf	___awdiv@divisor,f,c
  4953  0018B0  362D               	rlcf	___awdiv@divisor+1,f,c
  4954  0018B2  2A2E               	incf	___awdiv@counter,f,c
  4955  0018B4                     l2986:
  4956  0018B4  AE2D               	btfss	___awdiv@divisor+1,7,c
  4957  0018B6  D7FA               	goto	l2984
  4958  0018B8                     l2988:
  4959  0018B8  90D8               	bcf	status,0,c
  4960  0018BA  3630               	rlcf	___awdiv@quotient,f,c
  4961  0018BC  3631               	rlcf	___awdiv@quotient+1,f,c
  4962  0018BE  502C               	movf	___awdiv@divisor,w,c
  4963  0018C0  5C2A               	subwf	___awdiv@dividend,w,c
  4964  0018C2  502D               	movf	___awdiv@divisor+1,w,c
  4965  0018C4  582B               	subwfb	___awdiv@dividend+1,w,c
  4966  0018C6  A0D8               	btfss	status,0,c
  4967  0018C8  D005               	goto	l2996
  4968  0018CA  502C               	movf	___awdiv@divisor,w,c
  4969  0018CC  5E2A               	subwf	___awdiv@dividend,f,c
  4970  0018CE  502D               	movf	___awdiv@divisor+1,w,c
  4971  0018D0  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4972  0018D2  8030               	bsf	___awdiv@quotient,0,c
  4973  0018D4                     l2996:
  4974  0018D4  90D8               	bcf	status,0,c
  4975  0018D6  322D               	rrcf	___awdiv@divisor+1,f,c
  4976  0018D8  322C               	rrcf	___awdiv@divisor,f,c
  4977  0018DA  2E2E               	decfsz	___awdiv@counter,f,c
  4978  0018DC  D7ED               	goto	l2988
  4979  0018DE                     l3000:
  4980  0018DE  502F               	movf	___awdiv@sign,w,c
  4981  0018E0  B4D8               	btfsc	status,2,c
  4982  0018E2  D004               	goto	l3004
  4983  0018E4  6C30               	negf	___awdiv@quotient,c
  4984  0018E6  1E31               	comf	___awdiv@quotient+1,f,c
  4985  0018E8  B0D8               	btfsc	status,0,c
  4986  0018EA  2A31               	incf	___awdiv@quotient+1,f,c
  4987  0018EC                     l3004:
  4988  0018EC  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4989  0018F0  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4990  0018F4  0012               	return	
  4991  0018F6                     __end_of___awdiv:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           postinc0	equ	0xFEE
  4998                           wreg	equ	0xFE8
  4999                           indf1	equ	0xFE7
  5000                           plusw1	equ	0xFE3
  5001                           fsr1h	equ	0xFE2
  5002                           fsr1l	equ	0xFE1
  5003                           indf2	equ	0xFDF
  5004                           postinc2	equ	0xFDE
  5005                           postdec2	equ	0xFDD
  5006                           plusw2	equ	0xFDB
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function _sprintf *****************
  5012 ;; Defined at:
  5013 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5016 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  5017 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5018 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;  tmpval          4    0        struct .
  5021 ;;  cp              3    0        PTR const unsigned char 
  5022 ;;  width           2   10[BANK0 ] int 
  5023 ;;  val             2    7[BANK0 ] unsigned int 
  5024 ;;  ap              2    4[BANK0 ] PTR void [1]
  5025 ;;		 -> ?_sprintf(2), 
  5026 ;;  len             2    0        unsigned int 
  5027 ;;  c               1   12[BANK0 ] char 
  5028 ;;  flag            1    9[BANK0 ] unsigned char 
  5029 ;;  prec            1    6[BANK0 ] char 
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  2   47[COMRAM] int 
  5032 ;; Registers used:
  5033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5039 ;;      Params:         8       0       0       0
  5040 ;;      Locals:         0       9       0       0
  5041 ;;      Temps:          0       4       0       0
  5042 ;;      Totals:         8      13       0       0
  5043 ;;Total ram usage:       21 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    4
  5046 ;; This function calls:
  5047 ;;		___lwdiv
  5048 ;;		___lwmod
  5049 ;;		___wmul
  5050 ;;		_isdigit
  5051 ;; This function is called by:
  5052 ;;		_ScanIR
  5053 ;;		_ScanWithRange
  5054 ;;		_main
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text18
  5059  0010A6                     __ptext18:
  5060                           	opt stack 0
  5061  0010A6                     _sprintf:
  5062                           	opt stack 26
  5063                           
  5064                           ;doprnt.c: 494: va_list ap;
  5065                           ;doprnt.c: 499: signed char c;
  5066                           ;doprnt.c: 501: int width;
  5067                           ;doprnt.c: 506: signed char prec;
  5068                           ;doprnt.c: 508: unsigned char flag;
  5069                           ;doprnt.c: 523: union {
  5070                           ;doprnt.c: 524: unsigned long vd;
  5071                           ;doprnt.c: 525: double integ;
  5072                           ;doprnt.c: 526: } tmpval;
  5073                           ;doprnt.c: 528: unsigned int val;
  5074                           ;doprnt.c: 529: unsigned len;
  5075                           ;doprnt.c: 530: const char * cp;
  5076                           ;doprnt.c: 533: *ap = __va_start();
  5077                           
  5078                           ;incstack = 0
  5079  0010A6  0E34               	movlw	low (?_sprintf+4)
  5080  0010A8  0100               	movlb	0	; () banked
  5081  0010AA  6F64               	movwf	sprintf@ap& (0+255),b
  5082  0010AC  0E00               	movlw	high (?_sprintf+4)
  5083  0010AE  0100               	movlb	0	; () banked
  5084  0010B0  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  5085                           
  5086                           ;doprnt.c: 536: while(c = *f++) {
  5087  0010B2  D168               	goto	l3172
  5088  0010B4                     l3066:
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;doprnt.c: 538: if(c != '%')
  5092  0010B4  0E25               	movlw	37
  5093  0010B6  0100               	movlb	0	; () banked
  5094  0010B8  196C               	xorwf	sprintf@c& (0+255),w,b
  5095  0010BA  B4D8               	btfsc	status,2,c
  5096  0010BC  D009               	goto	l3072
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;doprnt.c: 540: {
  5100                           ;doprnt.c: 541: ((*sp++ = (c)));
  5101  0010BE  C030  FFD9         	movff	sprintf@sp,fsr2l
  5102  0010C2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5103  0010C6  C06C  FFDF         	movff	sprintf@c,indf2
  5104                           
  5105                           ; BSR set to: 0
  5106  0010CA  4A30               	infsnz	sprintf@sp,f,c
  5107  0010CC  2A31               	incf	sprintf@sp+1,f,c
  5108                           
  5109                           ;doprnt.c: 542: continue;
  5110  0010CE  D15A               	goto	l3172
  5111  0010D0                     l3072:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;doprnt.c: 543: }
  5115                           ;doprnt.c: 546: width = 0;
  5116  0010D0  0E00               	movlw	0
  5117  0010D2  0100               	movlb	0	; () banked
  5118  0010D4  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5119  0010D6  0E00               	movlw	0
  5120  0010D8  6F6A               	movwf	sprintf@width& (0+255),b
  5121                           
  5122                           ;doprnt.c: 548: flag = 0;
  5123  0010DA  0E00               	movlw	0
  5124  0010DC  0100               	movlb	0	; () banked
  5125  0010DE  6F69               	movwf	sprintf@flag& (0+255),b
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;doprnt.c: 551: switch(*f) {
  5129                           
  5130                           ;doprnt.c: 550: for(;;) {
  5131  0010E0  D004               	goto	l3078
  5132  0010E2                     l3074:
  5133                           
  5134                           ;doprnt.c: 580: flag |= 0x04;
  5135  0010E2  0100               	movlb	0	; () banked
  5136  0010E4  8569               	bsf	sprintf@flag& (0+255),2,b
  5137                           
  5138                           ;doprnt.c: 581: f++;
  5139  0010E6  4A32               	infsnz	sprintf@f,f,c
  5140  0010E8  2A33               	incf	sprintf@f+1,f,c
  5141  0010EA                     l3078:
  5142  0010EA  C032  FFF6         	movff	sprintf@f,tblptrl
  5143  0010EE  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5144  0010F2                     	if	0	;tblptru may be non-zero
  5145  0010F2                     	endif
  5146  0010F2                     	if	0	;tblptru may be non-zero
  5147  0010F2                     	endif
  5148  0010F2  0008               	tblrd		*
  5149  0010F4  50F5               	movf	tablat,w,c
  5150                           
  5151                           ; Switch size 1, requested type "space"
  5152                           ; Number of cases is 1, Range of values is 48 to 48
  5153                           ; switch strategies available:
  5154                           ; Name         Instructions Cycles
  5155                           ; simple_byte            4     3 (average)
  5156                           ;	Chosen strategy is simple_byte
  5157  0010F6  0A30               	xorlw	48	; case 48
  5158  0010F8  B4D8               	btfsc	status,2,c
  5159  0010FA  D7F3               	goto	l3074
  5160                           
  5161                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5162                           
  5163                           ;doprnt.c: 586: }
  5164                           
  5165                           ;doprnt.c: 585: break;
  5166  0010FC  C032  FFF6         	movff	sprintf@f,tblptrl
  5167  001100  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5168  001104                     	if	0	;tblptru may be non-zero
  5169  001104                     	endif
  5170  001104                     	if	0	;tblptru may be non-zero
  5171  001104                     	endif
  5172  001104  0008               	tblrd		*
  5173  001106  50F5               	movf	tablat,w,c
  5174  001108  EC03  F00F         	call	_isdigit
  5175  00110C  A0D8               	btfss	status,0,c
  5176  00110E  D03E               	goto	l3094
  5177                           
  5178                           ;doprnt.c: 598: width = 0;
  5179  001110  0E00               	movlw	0
  5180  001112  0100               	movlb	0	; () banked
  5181  001114  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5182  001116  0E00               	movlw	0
  5183  001118  6F6A               	movwf	sprintf@width& (0+255),b
  5184  00111A                     l3084:
  5185                           
  5186                           ;doprnt.c: 600: width *= 10;
  5187  00111A  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5188  00111E  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5189  001122  0E00               	movlw	0
  5190  001124  6E27               	movwf	___wmul@multiplicand+1,c
  5191  001126  0E0A               	movlw	10
  5192  001128  6E26               	movwf	___wmul@multiplicand,c
  5193  00112A  ECDF  F00E         	call	___wmul	;wreg free
  5194  00112E  C024  F06A         	movff	?___wmul,sprintf@width
  5195  001132  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5196                           
  5197                           ;doprnt.c: 601: width += *f++ - '0';
  5198  001136  0ED0               	movlw	208
  5199  001138  0100               	movlb	0	; () banked
  5200  00113A  6F60               	movwf	??_sprintf& (0+255),b
  5201  00113C  0EFF               	movlw	255
  5202  00113E  0100               	movlb	0	; () banked
  5203  001140  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5204  001142  C032  FFF6         	movff	sprintf@f,tblptrl
  5205  001146  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5206  00114A                     	if	0	;tblptru may be non-zero
  5207  00114A                     	endif
  5208  00114A                     	if	0	;tblptru may be non-zero
  5209  00114A                     	endif
  5210  00114A  0008               	tblrd		*
  5211  00114C  50F5               	movf	tablat,w,c
  5212  00114E  0100               	movlb	0	; () banked
  5213  001150  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5214  001152  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5215  001154  0100               	movlb	0	; () banked
  5216  001156  5160               	movf	??_sprintf& (0+255),w,b
  5217  001158  0100               	movlb	0	; () banked
  5218  00115A  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5219  00115C  0100               	movlb	0	; () banked
  5220  00115E  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5221  001160  0100               	movlb	0	; () banked
  5222  001162  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5223  001164  0100               	movlb	0	; () banked
  5224  001166  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5225  001168  0100               	movlb	0	; () banked
  5226  00116A  276A               	addwf	sprintf@width& (0+255),f,b
  5227  00116C  0100               	movlb	0	; () banked
  5228  00116E  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5229  001170  0100               	movlb	0	; () banked
  5230  001172  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5231                           
  5232                           ; BSR set to: 0
  5233  001174  4A32               	infsnz	sprintf@f,f,c
  5234  001176  2A33               	incf	sprintf@f+1,f,c
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5238  001178  C032  FFF6         	movff	sprintf@f,tblptrl
  5239  00117C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5240  001180                     	if	0	;tblptru may be non-zero
  5241  001180                     	endif
  5242  001180                     	if	0	;tblptru may be non-zero
  5243  001180                     	endif
  5244  001180  0008               	tblrd		*
  5245  001182  50F5               	movf	tablat,w,c
  5246  001184  EC03  F00F         	call	_isdigit
  5247  001188  B0D8               	btfsc	status,0,c
  5248  00118A  D7C7               	goto	l3084
  5249  00118C                     l3094:
  5250  00118C  C032  FFF6         	movff	sprintf@f,tblptrl
  5251  001190  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5252  001194  4A32               	infsnz	sprintf@f,f,c
  5253  001196  2A33               	incf	sprintf@f+1,f,c
  5254  001198                     	if	0	;tblptru may be non-zero
  5255  001198                     	endif
  5256  001198                     	if	0	;tblptru may be non-zero
  5257  001198                     	endif
  5258  001198  0008               	tblrd		*
  5259  00119A  CFF5 F06C          	movff	tablat,sprintf@c
  5260  00119E  0100               	movlb	0	; () banked
  5261  0011A0  516C               	movf	sprintf@c& (0+255),w,b
  5262                           
  5263                           ; Switch size 1, requested type "space"
  5264                           ; Number of cases is 3, Range of values is 0 to 105
  5265                           ; switch strategies available:
  5266                           ; Name         Instructions Cycles
  5267                           ; simple_byte           10     6 (average)
  5268                           ;	Chosen strategy is simple_byte
  5269  0011A2  0A00               	xorlw	0	; case 0
  5270  0011A4  B4D8               	btfsc	status,2,c
  5271  0011A6  D0FB               	goto	l3174
  5272  0011A8  0A64               	xorlw	100	; case 100
  5273  0011AA  B4D8               	btfsc	status,2,c
  5274  0011AC  D003               	goto	l3096
  5275  0011AE  0A0D               	xorlw	13	; case 105
  5276  0011B0  A4D8               	btfss	status,2,c
  5277  0011B2  D0E8               	goto	l3172
  5278  0011B4                     l3096:
  5279                           
  5280                           ;doprnt.c: 1253: {
  5281                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5282  0011B4  C064  FFD9         	movff	sprintf@ap,fsr2l
  5283  0011B8  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5284  0011BC  CFDE F067          	movff	postinc2,sprintf@val
  5285  0011C0  CFDD F068          	movff	postdec2,sprintf@val+1
  5286  0011C4  0E02               	movlw	2
  5287  0011C6  0100               	movlb	0	; () banked
  5288  0011C8  2764               	addwf	sprintf@ap& (0+255),f,b
  5289  0011CA  0E00               	movlw	0
  5290  0011CC  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;doprnt.c: 1261: if((int)val < 0) {
  5294  0011CE  0100               	movlb	0	; () banked
  5295  0011D0  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5296  0011D2  D008               	goto	l3106
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;doprnt.c: 1262: flag |= 0x03;
  5300  0011D4  0E03               	movlw	3
  5301  0011D6  0100               	movlb	0	; () banked
  5302  0011D8  1369               	iorwf	sprintf@flag& (0+255),f,b
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;doprnt.c: 1263: val = -val;
  5306  0011DA  0100               	movlb	0	; () banked
  5307  0011DC  6D67               	negf	sprintf@val& (0+255),b
  5308  0011DE  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5309  0011E0  B0D8               	btfsc	status,0,c
  5310  0011E2  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5311  0011E4                     l3106:
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;doprnt.c: 1264: }
  5315                           ;doprnt.c: 1266: }
  5316                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5317  0011E4  0E01               	movlw	1
  5318  0011E6  0100               	movlb	0	; () banked
  5319  0011E8  6F6C               	movwf	sprintf@c& (0+255),b
  5320  0011EA                     l3108:
  5321                           
  5322                           ; BSR set to: 0
  5323  0011EA  0E05               	movlw	5
  5324  0011EC  0100               	movlb	0	; () banked
  5325  0011EE  196C               	xorwf	sprintf@c& (0+255),w,b
  5326  0011F0  B4D8               	btfsc	status,2,c
  5327  0011F2  D016               	goto	l3120
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;doprnt.c: 1306: if(val < dpowers[c])
  5331                           
  5332                           ; BSR set to: 0
  5333                           
  5334                           ; BSR set to: 0
  5335  0011F4  0100               	movlb	0	; () banked
  5336  0011F6  516C               	movf	sprintf@c& (0+255),w,b
  5337  0011F8  0D02               	mullw	2
  5338  0011FA  0E01               	movlw	low _dpowers
  5339  0011FC  24F3               	addwf	prodl,w,c
  5340  0011FE  6EF6               	movwf	tblptrl,c
  5341  001200  0E03               	movlw	high _dpowers
  5342  001202  20F4               	addwfc	prodh,w,c
  5343  001204  6EF7               	movwf	tblptrh,c
  5344  001206                     	if	0	;There are less than 3 active tblptr bytes
  5345  001206                     	endif
  5346  001206  0009               	tblrd		*+
  5347  001208  50F5               	movf	tablat,w,c
  5348  00120A  0100               	movlb	0	; () banked
  5349  00120C  5D67               	subwf	sprintf@val& (0+255),w,b
  5350  00120E  0009               	tblrd		*+
  5351  001210  50F5               	movf	tablat,w,c
  5352  001212  0100               	movlb	0	; () banked
  5353  001214  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5354  001216  A0D8               	btfss	status,0,c
  5355  001218  D003               	goto	l3120
  5356                           
  5357                           ; BSR set to: 0
  5358                           
  5359                           ; BSR set to: 0
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;doprnt.c: 1307: break;
  5363  00121A  0100               	movlb	0	; () banked
  5364  00121C  2B6C               	incf	sprintf@c& (0+255),f,b
  5365  00121E  D7E5               	goto	l3108
  5366  001220                     l3120:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5370  001220  0100               	movlb	0	; () banked
  5371  001222  516A               	movf	sprintf@width& (0+255),w,b
  5372  001224  0100               	movlb	0	; () banked
  5373  001226  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5374  001228  B4D8               	btfsc	status,2,c
  5375  00122A  D00B               	goto	l3126
  5376                           
  5377                           ; BSR set to: 0
  5378  00122C  C069  F060         	movff	sprintf@flag,??_sprintf
  5379  001230  0E03               	movlw	3
  5380  001232  0100               	movlb	0	; () banked
  5381  001234  1760               	andwf	??_sprintf& (0+255),f,b
  5382  001236  B4D8               	btfsc	status,2,c
  5383  001238  D004               	goto	l3126
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;doprnt.c: 1346: width--;
  5387  00123A  0100               	movlb	0	; () banked
  5388  00123C  076A               	decf	sprintf@width& (0+255),f,b
  5389  00123E  A0D8               	btfss	status,0,c
  5390  001240  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5391  001242                     l3126:
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;doprnt.c: 1381: if(width > c)
  5395  001242  0E80               	movlw	128
  5396  001244  0100               	movlb	0	; () banked
  5397  001246  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5398  001248  0E7F               	movlw	127
  5399  00124A  0100               	movlb	0	; () banked
  5400  00124C  6F60               	movwf	??_sprintf& (0+255),b
  5401  00124E  0100               	movlb	0	; () banked
  5402  001250  516A               	movf	sprintf@width& (0+255),w,b
  5403  001252  0100               	movlb	0	; () banked
  5404  001254  5D6C               	subwf	sprintf@c& (0+255),w,b
  5405  001256  0100               	movlb	0	; () banked
  5406  001258  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5407  00125A  0A80               	xorlw	128
  5408  00125C  0100               	movlb	0	; () banked
  5409  00125E  5960               	subwfb	??_sprintf& (0+255),w,b
  5410  001260  B0D8               	btfsc	status,0,c
  5411  001262  D00B               	goto	l3130
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;doprnt.c: 1382: width -= c;
  5415  001264  0100               	movlb	0	; () banked
  5416  001266  516C               	movf	sprintf@c& (0+255),w,b
  5417  001268  0100               	movlb	0	; () banked
  5418  00126A  5F6A               	subwf	sprintf@width& (0+255),f,b
  5419  00126C  0E00               	movlw	0
  5420  00126E  0100               	movlb	0	; () banked
  5421  001270  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5422  001272  0EFF               	movlw	255
  5423  001274  0100               	movlb	0	; () banked
  5424  001276  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5425  001278  D005               	goto	l3132
  5426  00127A                     l3130:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 1383: else
  5430                           ;doprnt.c: 1384: width = 0;
  5431  00127A  0E00               	movlw	0
  5432  00127C  0100               	movlb	0	; () banked
  5433  00127E  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5434  001280  0E00               	movlw	0
  5435  001282  6F6A               	movwf	sprintf@width& (0+255),b
  5436  001284                     l3132:
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;doprnt.c: 1387: if(flag & 0x04) {
  5440  001284  0100               	movlb	0	; () banked
  5441  001286  A569               	btfss	sprintf@flag& (0+255),2,b
  5442  001288  D022               	goto	l3148
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;doprnt.c: 1392: if(flag & 0x03)
  5446  00128A  C069  F060         	movff	sprintf@flag,??_sprintf
  5447  00128E  0E03               	movlw	3
  5448  001290  0100               	movlb	0	; () banked
  5449  001292  1760               	andwf	??_sprintf& (0+255),f,b
  5450  001294  B4D8               	btfsc	status,2,c
  5451  001296  D008               	goto	l3140
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5455  001298  C030  FFD9         	movff	sprintf@sp,fsr2l
  5456  00129C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5457  0012A0  0E2D               	movlw	45
  5458  0012A2  6EDF               	movwf	indf2,c
  5459                           
  5460                           ; BSR set to: 0
  5461  0012A4  4A30               	infsnz	sprintf@sp,f,c
  5462  0012A6  2A31               	incf	sprintf@sp+1,f,c
  5463  0012A8                     l3140:
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;doprnt.c: 1415: if(width)
  5467  0012A8  0100               	movlb	0	; () banked
  5468  0012AA  516A               	movf	sprintf@width& (0+255),w,b
  5469  0012AC  0100               	movlb	0	; () banked
  5470  0012AE  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5471  0012B0  B4D8               	btfsc	status,2,c
  5472  0012B2  D034               	goto	l3162
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5476                           
  5477                           ; BSR set to: 0
  5478                           
  5479                           ;doprnt.c: 1416: do
  5480  0012B4  C030  FFD9         	movff	sprintf@sp,fsr2l
  5481  0012B8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5482  0012BC  0E30               	movlw	48
  5483  0012BE  6EDF               	movwf	indf2,c
  5484                           
  5485                           ; BSR set to: 0
  5486  0012C0  4A30               	infsnz	sprintf@sp,f,c
  5487  0012C2  2A31               	incf	sprintf@sp+1,f,c
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 1418: while(--width);
  5491  0012C4  0100               	movlb	0	; () banked
  5492  0012C6  076A               	decf	sprintf@width& (0+255),f,b
  5493  0012C8  A0D8               	btfss	status,0,c
  5494  0012CA  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5495  0012CC  D7ED               	goto	l3140
  5496  0012CE                     l3148:
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;doprnt.c: 1422: {
  5500                           ;doprnt.c: 1424: if(width
  5501                           ;doprnt.c: 1428: )
  5502  0012CE  0100               	movlb	0	; () banked
  5503  0012D0  516A               	movf	sprintf@width& (0+255),w,b
  5504  0012D2  0100               	movlb	0	; () banked
  5505  0012D4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5506  0012D6  B4D8               	btfsc	status,2,c
  5507  0012D8  D012               	goto	l3156
  5508  0012DA                     l3150:
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5512  0012DA  C030  FFD9         	movff	sprintf@sp,fsr2l
  5513  0012DE  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5514  0012E2  0E20               	movlw	32
  5515  0012E4  6EDF               	movwf	indf2,c
  5516                           
  5517                           ; BSR set to: 0
  5518  0012E6  4A30               	infsnz	sprintf@sp,f,c
  5519  0012E8  2A31               	incf	sprintf@sp+1,f,c
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;doprnt.c: 1431: while(--width);
  5523  0012EA  0100               	movlb	0	; () banked
  5524  0012EC  076A               	decf	sprintf@width& (0+255),f,b
  5525  0012EE  A0D8               	btfss	status,0,c
  5526  0012F0  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5527  0012F2  0100               	movlb	0	; () banked
  5528  0012F4  516A               	movf	sprintf@width& (0+255),w,b
  5529  0012F6  0100               	movlb	0	; () banked
  5530  0012F8  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5531  0012FA  A4D8               	btfss	status,2,c
  5532  0012FC  D7EE               	goto	l3150
  5533  0012FE                     l3156:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;doprnt.c: 1438: if(flag & 0x03)
  5537  0012FE  C069  F060         	movff	sprintf@flag,??_sprintf
  5538  001302  0E03               	movlw	3
  5539  001304  0100               	movlb	0	; () banked
  5540  001306  1760               	andwf	??_sprintf& (0+255),f,b
  5541  001308  B4D8               	btfsc	status,2,c
  5542  00130A  D008               	goto	l3162
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5546  00130C  C030  FFD9         	movff	sprintf@sp,fsr2l
  5547  001310  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5548  001314  0E2D               	movlw	45
  5549  001316  6EDF               	movwf	indf2,c
  5550                           
  5551                           ; BSR set to: 0
  5552  001318  4A30               	infsnz	sprintf@sp,f,c
  5553  00131A  2A31               	incf	sprintf@sp+1,f,c
  5554  00131C                     l3162:
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;doprnt.c: 1469: }
  5558                           ;doprnt.c: 1472: prec = c;
  5559  00131C  C06C  F066         	movff	sprintf@c,sprintf@prec
  5560                           
  5561                           ;doprnt.c: 1474: while(prec--) {
  5562  001320  D02B               	goto	l3170
  5563  001322                     l3164:
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;doprnt.c: 1478: {
  5567                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5568  001322  0100               	movlb	0	; () banked
  5569  001324  5166               	movf	sprintf@prec& (0+255),w,b
  5570  001326  0D02               	mullw	2
  5571  001328  0E01               	movlw	low _dpowers
  5572  00132A  24F3               	addwf	prodl,w,c
  5573  00132C  6EF6               	movwf	tblptrl,c
  5574  00132E  0E03               	movlw	high _dpowers
  5575  001330  20F4               	addwfc	prodh,w,c
  5576  001332  6EF7               	movwf	tblptrh,c
  5577  001334                     	if	0	;There are less than 3 active tblptr bytes
  5578  001334                     	endif
  5579  001334  0009               	tblrd		*+
  5580  001336  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5581  00133A  000A               	tblrd		*-
  5582  00133C  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5583  001340  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5584  001344  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5585  001348  EC8A  F00D         	call	___lwdiv	;wreg free
  5586  00134C  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5587  001350  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5588  001354  0E00               	movlw	0
  5589  001356  6E2E               	movwf	___lwmod@divisor+1,c
  5590  001358  0E0A               	movlw	10
  5591  00135A  6E2D               	movwf	___lwmod@divisor,c
  5592  00135C  ECB3  F00D         	call	___lwmod	;wreg free
  5593  001360  502B               	movf	?___lwmod,w,c
  5594  001362  0F30               	addlw	48
  5595  001364  0100               	movlb	0	; () banked
  5596  001366  6F6C               	movwf	sprintf@c& (0+255),b
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;doprnt.c: 1523: }
  5600                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5601  001368  C030  FFD9         	movff	sprintf@sp,fsr2l
  5602  00136C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5603  001370  C06C  FFDF         	movff	sprintf@c,indf2
  5604                           
  5605                           ; BSR set to: 0
  5606  001374  4A30               	infsnz	sprintf@sp,f,c
  5607  001376  2A31               	incf	sprintf@sp+1,f,c
  5608  001378                     l3170:
  5609                           
  5610                           ; BSR set to: 0
  5611  001378  0100               	movlb	0	; () banked
  5612  00137A  0766               	decf	sprintf@prec& (0+255),f,b
  5613  00137C  0100               	movlb	0	; () banked
  5614  00137E  2966               	incf	sprintf@prec& (0+255),w,b
  5615  001380  A4D8               	btfss	status,2,c
  5616  001382  D7CF               	goto	l3164
  5617  001384                     l3172:
  5618  001384  C032  FFF6         	movff	sprintf@f,tblptrl
  5619  001388  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5620  00138C  4A32               	infsnz	sprintf@f,f,c
  5621  00138E  2A33               	incf	sprintf@f+1,f,c
  5622  001390                     	if	0	;tblptru may be non-zero
  5623  001390                     	endif
  5624  001390                     	if	0	;tblptru may be non-zero
  5625  001390                     	endif
  5626  001390  0008               	tblrd		*
  5627  001392  CFF5 F06C          	movff	tablat,sprintf@c
  5628  001396  0100               	movlb	0	; () banked
  5629  001398  516C               	movf	sprintf@c& (0+255),w,b
  5630  00139A  A4D8               	btfss	status,2,c
  5631  00139C  D68B               	goto	l3066
  5632  00139E                     l3174:
  5633                           
  5634                           ;doprnt.c: 1538: *sp = 0;
  5635  00139E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5636  0013A2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5637  0013A6  0E00               	movlw	0
  5638  0013A8  6EDF               	movwf	indf2,c
  5639  0013AA  0012               	return	
  5640  0013AC                     __end_of_sprintf:
  5641                           	opt stack 0
  5642                           tblptru	equ	0xFF8
  5643                           tblptrh	equ	0xFF7
  5644                           tblptrl	equ	0xFF6
  5645                           tablat	equ	0xFF5
  5646                           prodh	equ	0xFF4
  5647                           prodl	equ	0xFF3
  5648                           intcon	equ	0xFF2
  5649                           postinc0	equ	0xFEE
  5650                           wreg	equ	0xFE8
  5651                           indf1	equ	0xFE7
  5652                           plusw1	equ	0xFE3
  5653                           fsr1h	equ	0xFE2
  5654                           fsr1l	equ	0xFE1
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           plusw2	equ	0xFDB
  5659                           fsr2h	equ	0xFDA
  5660                           fsr2l	equ	0xFD9
  5661                           status	equ	0xFD8
  5662                           
  5663 ;; *************** function _isdigit *****************
  5664 ;; Defined at:
  5665 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  c               1    wreg     unsigned char 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  c               1   37[COMRAM] unsigned char 
  5670 ;; Return value:  Size  Location     Type
  5671 ;;		None               void
  5672 ;; Registers used:
  5673 ;;		wreg, status,2, status,0
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5679 ;;      Params:         0       0       0       0
  5680 ;;      Locals:         2       0       0       0
  5681 ;;      Temps:          1       0       0       0
  5682 ;;      Totals:         3       0       0       0
  5683 ;;Total ram usage:        3 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    3
  5686 ;; This function calls:
  5687 ;;		Nothing
  5688 ;; This function is called by:
  5689 ;;		_sprintf
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text19
  5694  001E06                     __ptext19:
  5695                           	opt stack 0
  5696  001E06                     _isdigit:
  5697                           	opt stack 26
  5698                           
  5699                           ;incstack = 0
  5700                           ;isdigit@c stored from wreg
  5701  001E06  6E26               	movwf	isdigit@c,c
  5702  001E08  0E00               	movlw	0
  5703  001E0A  6E25               	movwf	_isdigit$2084,c
  5704  001E0C  0E3A               	movlw	58
  5705  001E0E  6026               	cpfslt	isdigit@c,c
  5706  001E10  D005               	goto	l2150
  5707  001E12  0E2F               	movlw	47
  5708  001E14  6426               	cpfsgt	isdigit@c,c
  5709  001E16  D002               	goto	l2150
  5710  001E18  0E01               	movlw	1
  5711  001E1A  6E25               	movwf	_isdigit$2084,c
  5712  001E1C                     l2150:
  5713  001E1C  C025  F024         	movff	_isdigit$2084,??_isdigit
  5714  001E20  3024               	rrcf	??_isdigit,w,c
  5715  001E22  0012               	return	
  5716  001E24                     __end_of_isdigit:
  5717                           	opt stack 0
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           prodh	equ	0xFF4
  5723                           prodl	equ	0xFF3
  5724                           intcon	equ	0xFF2
  5725                           postinc0	equ	0xFEE
  5726                           wreg	equ	0xFE8
  5727                           indf1	equ	0xFE7
  5728                           plusw1	equ	0xFE3
  5729                           fsr1h	equ	0xFE2
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           plusw2	equ	0xFDB
  5735                           fsr2h	equ	0xFDA
  5736                           fsr2l	equ	0xFD9
  5737                           status	equ	0xFD8
  5738                           
  5739 ;; *************** function ___wmul *****************
  5740 ;; Defined at:
  5741 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;  multiplier      2   35[COMRAM] unsigned int 
  5744 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;  product         2   39[COMRAM] unsigned int 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  2   35[COMRAM] unsigned int 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2, status,0, prodl, prodh
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5756 ;;      Params:         4       0       0       0
  5757 ;;      Locals:         2       0       0       0
  5758 ;;      Temps:          0       0       0       0
  5759 ;;      Totals:         6       0       0       0
  5760 ;;Total ram usage:        6 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    3
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		_setMotorPWM
  5767 ;;		_sprintf
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           	psect	text20
  5772  001DBE                     __ptext20:
  5773                           	opt stack 0
  5774  001DBE                     ___wmul:
  5775                           	opt stack 24
  5776                           
  5777                           ;incstack = 0
  5778  001DBE  5024               	movf	___wmul@multiplier,w,c
  5779  001DC0  0226               	mulwf	___wmul@multiplicand,c
  5780  001DC2  CFF3 F028          	movff	prodl,___wmul@product
  5781  001DC6  CFF4 F029          	movff	prodh,___wmul@product+1
  5782  001DCA  5024               	movf	___wmul@multiplier,w,c
  5783  001DCC  0227               	mulwf	___wmul@multiplicand+1,c
  5784  001DCE  50F3               	movf	prodl,w,c
  5785  001DD0  2629               	addwf	___wmul@product+1,f,c
  5786  001DD2  5025               	movf	___wmul@multiplier+1,w,c
  5787  001DD4  0226               	mulwf	___wmul@multiplicand,c
  5788  001DD6  50F3               	movf	prodl,w,c
  5789  001DD8  2629               	addwf	___wmul@product+1,f,c
  5790  001DDA  C028  F024         	movff	___wmul@product,?___wmul
  5791  001DDE  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5792  001DE2  0012               	return	
  5793  001DE4                     __end_of___wmul:
  5794                           	opt stack 0
  5795                           tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           intcon	equ	0xFF2
  5802                           postinc0	equ	0xFEE
  5803                           wreg	equ	0xFE8
  5804                           indf1	equ	0xFE7
  5805                           plusw1	equ	0xFE3
  5806                           fsr1h	equ	0xFE2
  5807                           fsr1l	equ	0xFE1
  5808                           indf2	equ	0xFDF
  5809                           postinc2	equ	0xFDE
  5810                           postdec2	equ	0xFDD
  5811                           plusw2	equ	0xFDB
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816 ;; *************** function ___lwmod *****************
  5817 ;; Defined at:
  5818 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;  dividend        2   42[COMRAM] unsigned int 
  5821 ;;  divisor         2   44[COMRAM] unsigned int 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  counter         1   46[COMRAM] unsigned char 
  5824 ;; Return value:  Size  Location     Type
  5825 ;;                  2   42[COMRAM] unsigned int 
  5826 ;; Registers used:
  5827 ;;		wreg, status,2, status,0
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5833 ;;      Params:         4       0       0       0
  5834 ;;      Locals:         1       0       0       0
  5835 ;;      Temps:          0       0       0       0
  5836 ;;      Totals:         5       0       0       0
  5837 ;;Total ram usage:        5 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    3
  5840 ;; This function calls:
  5841 ;;		Nothing
  5842 ;; This function is called by:
  5843 ;;		_sprintf
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text21
  5848  001B66                     __ptext21:
  5849                           	opt stack 0
  5850  001B66                     ___lwmod:
  5851                           	opt stack 26
  5852                           
  5853                           ;incstack = 0
  5854  001B66  502D               	movf	___lwmod@divisor,w,c
  5855  001B68  102E               	iorwf	___lwmod@divisor+1,w,c
  5856  001B6A  B4D8               	btfsc	status,2,c
  5857  001B6C  D018               	goto	l913
  5858  001B6E  0E01               	movlw	1
  5859  001B70  6E2F               	movwf	___lwmod@counter,c
  5860  001B72  D004               	goto	l2182
  5861  001B74                     l2180:
  5862  001B74  90D8               	bcf	status,0,c
  5863  001B76  362D               	rlcf	___lwmod@divisor,f,c
  5864  001B78  362E               	rlcf	___lwmod@divisor+1,f,c
  5865  001B7A  2A2F               	incf	___lwmod@counter,f,c
  5866  001B7C                     l2182:
  5867  001B7C  AE2E               	btfss	___lwmod@divisor+1,7,c
  5868  001B7E  D7FA               	goto	l2180
  5869  001B80                     l2184:
  5870  001B80  502D               	movf	___lwmod@divisor,w,c
  5871  001B82  5C2B               	subwf	___lwmod@dividend,w,c
  5872  001B84  502E               	movf	___lwmod@divisor+1,w,c
  5873  001B86  582C               	subwfb	___lwmod@dividend+1,w,c
  5874  001B88  A0D8               	btfss	status,0,c
  5875  001B8A  D004               	goto	l2188
  5876  001B8C  502D               	movf	___lwmod@divisor,w,c
  5877  001B8E  5E2B               	subwf	___lwmod@dividend,f,c
  5878  001B90  502E               	movf	___lwmod@divisor+1,w,c
  5879  001B92  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5880  001B94                     l2188:
  5881  001B94  90D8               	bcf	status,0,c
  5882  001B96  322E               	rrcf	___lwmod@divisor+1,f,c
  5883  001B98  322D               	rrcf	___lwmod@divisor,f,c
  5884  001B9A  2E2F               	decfsz	___lwmod@counter,f,c
  5885  001B9C  D7F1               	goto	l2184
  5886  001B9E                     l913:
  5887  001B9E  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5888  001BA2  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5889  001BA6  0012               	return		;funcret
  5890  001BA8                     __end_of___lwmod:
  5891                           	opt stack 0
  5892                           tblptru	equ	0xFF8
  5893                           tblptrh	equ	0xFF7
  5894                           tblptrl	equ	0xFF6
  5895                           tablat	equ	0xFF5
  5896                           prodh	equ	0xFF4
  5897                           prodl	equ	0xFF3
  5898                           intcon	equ	0xFF2
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           indf1	equ	0xFE7
  5902                           plusw1	equ	0xFE3
  5903                           fsr1h	equ	0xFE2
  5904                           fsr1l	equ	0xFE1
  5905                           indf2	equ	0xFDF
  5906                           postinc2	equ	0xFDE
  5907                           postdec2	equ	0xFDD
  5908                           plusw2	equ	0xFDB
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function ___lwdiv *****************
  5914 ;; Defined at:
  5915 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  dividend        2   35[COMRAM] unsigned int 
  5918 ;;  divisor         2   37[COMRAM] unsigned int 
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  quotient        2   39[COMRAM] unsigned int 
  5921 ;;  counter         1   41[COMRAM] unsigned char 
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  2   35[COMRAM] unsigned int 
  5924 ;; Registers used:
  5925 ;;		wreg, status,2, status,0
  5926 ;; Tracked objects:
  5927 ;;		On entry : 0/0
  5928 ;;		On exit  : 0/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5931 ;;      Params:         4       0       0       0
  5932 ;;      Locals:         3       0       0       0
  5933 ;;      Temps:          0       0       0       0
  5934 ;;      Totals:         7       0       0       0
  5935 ;;Total ram usage:        7 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; Hardware stack levels required when called:    3
  5938 ;; This function calls:
  5939 ;;		Nothing
  5940 ;; This function is called by:
  5941 ;;		_sprintf
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           	psect	text22
  5946  001B14                     __ptext22:
  5947                           	opt stack 0
  5948  001B14                     ___lwdiv:
  5949                           	opt stack 26
  5950                           
  5951                           ;incstack = 0
  5952  001B14  0E00               	movlw	0
  5953  001B16  6E29               	movwf	___lwdiv@quotient+1,c
  5954  001B18  0E00               	movlw	0
  5955  001B1A  6E28               	movwf	___lwdiv@quotient,c
  5956  001B1C  5026               	movf	___lwdiv@divisor,w,c
  5957  001B1E  1027               	iorwf	___lwdiv@divisor+1,w,c
  5958  001B20  B4D8               	btfsc	status,2,c
  5959  001B22  D01C               	goto	l903
  5960  001B24  0E01               	movlw	1
  5961  001B26  6E2A               	movwf	___lwdiv@counter,c
  5962  001B28  D004               	goto	l2162
  5963  001B2A                     l2160:
  5964  001B2A  90D8               	bcf	status,0,c
  5965  001B2C  3626               	rlcf	___lwdiv@divisor,f,c
  5966  001B2E  3627               	rlcf	___lwdiv@divisor+1,f,c
  5967  001B30  2A2A               	incf	___lwdiv@counter,f,c
  5968  001B32                     l2162:
  5969  001B32  AE27               	btfss	___lwdiv@divisor+1,7,c
  5970  001B34  D7FA               	goto	l2160
  5971  001B36                     l2164:
  5972  001B36  90D8               	bcf	status,0,c
  5973  001B38  3628               	rlcf	___lwdiv@quotient,f,c
  5974  001B3A  3629               	rlcf	___lwdiv@quotient+1,f,c
  5975  001B3C  5026               	movf	___lwdiv@divisor,w,c
  5976  001B3E  5C24               	subwf	___lwdiv@dividend,w,c
  5977  001B40  5027               	movf	___lwdiv@divisor+1,w,c
  5978  001B42  5825               	subwfb	___lwdiv@dividend+1,w,c
  5979  001B44  A0D8               	btfss	status,0,c
  5980  001B46  D005               	goto	l2172
  5981  001B48  5026               	movf	___lwdiv@divisor,w,c
  5982  001B4A  5E24               	subwf	___lwdiv@dividend,f,c
  5983  001B4C  5027               	movf	___lwdiv@divisor+1,w,c
  5984  001B4E  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5985  001B50  8028               	bsf	___lwdiv@quotient,0,c
  5986  001B52                     l2172:
  5987  001B52  90D8               	bcf	status,0,c
  5988  001B54  3227               	rrcf	___lwdiv@divisor+1,f,c
  5989  001B56  3226               	rrcf	___lwdiv@divisor,f,c
  5990  001B58  2E2A               	decfsz	___lwdiv@counter,f,c
  5991  001B5A  D7ED               	goto	l2164
  5992  001B5C                     l903:
  5993  001B5C  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5994  001B60  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5995  001B64  0012               	return		;funcret
  5996  001B66                     __end_of___lwdiv:
  5997                           	opt stack 0
  5998                           tblptru	equ	0xFF8
  5999                           tblptrh	equ	0xFF7
  6000                           tblptrl	equ	0xFF6
  6001                           tablat	equ	0xFF5
  6002                           prodh	equ	0xFF4
  6003                           prodl	equ	0xFF3
  6004                           intcon	equ	0xFF2
  6005                           postinc0	equ	0xFEE
  6006                           wreg	equ	0xFE8
  6007                           indf1	equ	0xFE7
  6008                           plusw1	equ	0xFE3
  6009                           fsr1h	equ	0xFE2
  6010                           fsr1l	equ	0xFE1
  6011                           indf2	equ	0xFDF
  6012                           postinc2	equ	0xFDE
  6013                           postdec2	equ	0xFDD
  6014                           plusw2	equ	0xFDB
  6015                           fsr2h	equ	0xFDA
  6016                           fsr2l	equ	0xFD9
  6017                           status	equ	0xFD8
  6018                           
  6019 ;; *************** function _grabRightIR *****************
  6020 ;; Defined at:
  6021 ;;		line 74 in file "IR_Reading.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;		None
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6026 ;;  i               1   42[COMRAM] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  2   35[COMRAM] unsigned int 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6036 ;;      Params:         2       0       0       0
  6037 ;;      Locals:         3       0       0       0
  6038 ;;      Temps:          3       0       0       0
  6039 ;;      Totals:         8       0       0       0
  6040 ;;Total ram usage:        8 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    3
  6043 ;; This function calls:
  6044 ;;		Nothing
  6045 ;; This function is called by:
  6046 ;;		_ScanIR
  6047 ;;		_ScanWithRange
  6048 ;;		_main
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           	psect	text23
  6053  001976                     __ptext23:
  6054                           	opt stack 0
  6055  001976                     _grabRightIR:
  6056                           	opt stack 27
  6057                           
  6058                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6059                           
  6060                           ;incstack = 0
  6061  001976  0E00               	movlw	0
  6062  001978  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6063  00197A  0E00               	movlw	0
  6064  00197C  6E29               	movwf	grabRightIR@IR_signal,c
  6065                           
  6066                           ;IR_Reading.c: 77: unsigned char i=0;
  6067  00197E  0E00               	movlw	0
  6068  001980  6E2B               	movwf	grabRightIR@i,c
  6069                           
  6070                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6071  001982  0E00               	movlw	0
  6072  001984  6E2B               	movwf	grabRightIR@i,c
  6073  001986                     l2224:
  6074  001986  0E03               	movlw	3
  6075  001988  642B               	cpfsgt	grabRightIR@i,c
  6076  00198A  D001               	goto	l2228
  6077  00198C  D01F               	goto	l2234
  6078  00198E                     l2228:
  6079                           
  6080                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6081  00198E  5069               	movf	3945,w,c	;volatile
  6082  001990  6E26               	movwf	??_grabRightIR& (0+255),c
  6083  001992  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6084  001994  0E07               	movlw	7
  6085  001996                     u1535:
  6086  001996  90D8               	bcf	status,0,c
  6087  001998  3626               	rlcf	??_grabRightIR,f,c
  6088  00199A  3627               	rlcf	??_grabRightIR+1,f,c
  6089  00199C  2EE8               	decfsz	wreg,f,c
  6090  00199E  D7FB               	goto	u1535
  6091  0019A0  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6092  0019A4  90D8               	bcf	status,0,c
  6093  0019A6  3228               	rrcf	??_grabRightIR+2,f,c
  6094  0019A8  5028               	movf	??_grabRightIR+2,w,c
  6095  0019AA  1226               	iorwf	??_grabRightIR,f,c
  6096  0019AC  0E00               	movlw	0
  6097  0019AE  1227               	iorwf	??_grabRightIR+1,f,c
  6098  0019B0  5026               	movf	??_grabRightIR,w,c
  6099  0019B2  2629               	addwf	grabRightIR@IR_signal,f,c
  6100  0019B4  5027               	movf	??_grabRightIR+1,w,c
  6101  0019B6  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6102                           
  6103                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(2000000/4000.0)));
  6104  0019B8  0E21               	movlw	33
  6105  0019BA  6E26               	movwf	??_grabRightIR& (0+255),c
  6106  0019BC  0E76               	movlw	118
  6107  0019BE                     u3257:
  6108  0019BE  2EE8               	decfsz	wreg,f,c
  6109  0019C0  D7FE               	goto	u3257
  6110  0019C2  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6111  0019C4  D7FC               	goto	u3257
  6112  0019C6  D000               	nop2	
  6113  0019C8  2A2B               	incf	grabRightIR@i,f,c
  6114  0019CA  D7DD               	goto	l2224
  6115  0019CC                     l2234:
  6116                           
  6117                           ;IR_Reading.c: 83: }
  6118                           ;IR_Reading.c: 85: return IR_signal>>2;
  6119  0019CC  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6120  0019D0  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6121  0019D4  90D8               	bcf	status,0,c
  6122  0019D6  3227               	rrcf	??_grabRightIR+1,f,c
  6123  0019D8  3226               	rrcf	??_grabRightIR,f,c
  6124  0019DA  90D8               	bcf	status,0,c
  6125  0019DC  3227               	rrcf	??_grabRightIR+1,f,c
  6126  0019DE  3226               	rrcf	??_grabRightIR,f,c
  6127  0019E0  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6128  0019E4  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6129  0019E8  0012               	return	
  6130  0019EA                     __end_of_grabRightIR:
  6131                           	opt stack 0
  6132                           tblptru	equ	0xFF8
  6133                           tblptrh	equ	0xFF7
  6134                           tblptrl	equ	0xFF6
  6135                           tablat	equ	0xFF5
  6136                           prodh	equ	0xFF4
  6137                           prodl	equ	0xFF3
  6138                           intcon	equ	0xFF2
  6139                           postinc0	equ	0xFEE
  6140                           wreg	equ	0xFE8
  6141                           indf1	equ	0xFE7
  6142                           plusw1	equ	0xFE3
  6143                           fsr1h	equ	0xFE2
  6144                           fsr1l	equ	0xFE1
  6145                           indf2	equ	0xFDF
  6146                           postinc2	equ	0xFDE
  6147                           postdec2	equ	0xFDD
  6148                           plusw2	equ	0xFDB
  6149                           fsr2h	equ	0xFDA
  6150                           fsr2l	equ	0xFD9
  6151                           status	equ	0xFD8
  6152                           
  6153 ;; *************** function _grabLeftIR *****************
  6154 ;; Defined at:
  6155 ;;		line 90 in file "IR_Reading.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;		None
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6160 ;;  i               1   42[COMRAM] unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  2   35[COMRAM] unsigned int 
  6163 ;; Registers used:
  6164 ;;		wreg, status,2, status,0
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6170 ;;      Params:         2       0       0       0
  6171 ;;      Locals:         3       0       0       0
  6172 ;;      Temps:          3       0       0       0
  6173 ;;      Totals:         8       0       0       0
  6174 ;;Total ram usage:        8 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    3
  6177 ;; This function calls:
  6178 ;;		Nothing
  6179 ;; This function is called by:
  6180 ;;		_ScanIR
  6181 ;;		_ScanWithRange
  6182 ;;		_main
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text24
  6187  0019EA                     __ptext24:
  6188                           	opt stack 0
  6189  0019EA                     _grabLeftIR:
  6190                           	opt stack 27
  6191                           
  6192                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6193                           
  6194                           ;incstack = 0
  6195  0019EA  0E00               	movlw	0
  6196  0019EC  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6197  0019EE  0E00               	movlw	0
  6198  0019F0  6E29               	movwf	grabLeftIR@IR_signal,c
  6199                           
  6200                           ;IR_Reading.c: 93: unsigned char i=0;
  6201  0019F2  0E00               	movlw	0
  6202  0019F4  6E2B               	movwf	grabLeftIR@i,c
  6203                           
  6204                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6205  0019F6  0E00               	movlw	0
  6206  0019F8  6E2B               	movwf	grabLeftIR@i,c
  6207  0019FA                     l2240:
  6208  0019FA  0E03               	movlw	3
  6209  0019FC  642B               	cpfsgt	grabLeftIR@i,c
  6210  0019FE  D001               	goto	l2244
  6211  001A00  D01F               	goto	l2250
  6212  001A02                     l2244:
  6213                           
  6214                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6215  001A02  5067               	movf	3943,w,c	;volatile
  6216  001A04  6E26               	movwf	??_grabLeftIR& (0+255),c
  6217  001A06  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6218  001A08  0E07               	movlw	7
  6219  001A0A                     u1565:
  6220  001A0A  90D8               	bcf	status,0,c
  6221  001A0C  3626               	rlcf	??_grabLeftIR,f,c
  6222  001A0E  3627               	rlcf	??_grabLeftIR+1,f,c
  6223  001A10  2EE8               	decfsz	wreg,f,c
  6224  001A12  D7FB               	goto	u1565
  6225  001A14  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6226  001A18  90D8               	bcf	status,0,c
  6227  001A1A  3228               	rrcf	??_grabLeftIR+2,f,c
  6228  001A1C  5028               	movf	??_grabLeftIR+2,w,c
  6229  001A1E  1226               	iorwf	??_grabLeftIR,f,c
  6230  001A20  0E00               	movlw	0
  6231  001A22  1227               	iorwf	??_grabLeftIR+1,f,c
  6232  001A24  5026               	movf	??_grabLeftIR,w,c
  6233  001A26  2629               	addwf	grabLeftIR@IR_signal,f,c
  6234  001A28  5027               	movf	??_grabLeftIR+1,w,c
  6235  001A2A  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6236                           
  6237                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(2000000/4000.0)));
  6238  001A2C  0E21               	movlw	33
  6239  001A2E  6E26               	movwf	??_grabLeftIR& (0+255),c
  6240  001A30  0E76               	movlw	118
  6241  001A32                     u3267:
  6242  001A32  2EE8               	decfsz	wreg,f,c
  6243  001A34  D7FE               	goto	u3267
  6244  001A36  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6245  001A38  D7FC               	goto	u3267
  6246  001A3A  D000               	nop2	
  6247  001A3C  2A2B               	incf	grabLeftIR@i,f,c
  6248  001A3E  D7DD               	goto	l2240
  6249  001A40                     l2250:
  6250                           
  6251                           ;IR_Reading.c: 99: }
  6252                           ;IR_Reading.c: 101: return IR_signal>>2;
  6253  001A40  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6254  001A44  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6255  001A48  90D8               	bcf	status,0,c
  6256  001A4A  3227               	rrcf	??_grabLeftIR+1,f,c
  6257  001A4C  3226               	rrcf	??_grabLeftIR,f,c
  6258  001A4E  90D8               	bcf	status,0,c
  6259  001A50  3227               	rrcf	??_grabLeftIR+1,f,c
  6260  001A52  3226               	rrcf	??_grabLeftIR,f,c
  6261  001A54  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6262  001A58  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6263  001A5C  0012               	return	
  6264  001A5E                     __end_of_grabLeftIR:
  6265                           	opt stack 0
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           intcon	equ	0xFF2
  6273                           postinc0	equ	0xFEE
  6274                           wreg	equ	0xFE8
  6275                           indf1	equ	0xFE7
  6276                           plusw1	equ	0xFE3
  6277                           fsr1h	equ	0xFE2
  6278                           fsr1l	equ	0xFE1
  6279                           indf2	equ	0xFDF
  6280                           postinc2	equ	0xFDE
  6281                           postdec2	equ	0xFDD
  6282                           plusw2	equ	0xFDB
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _SetLine *****************
  6288 ;; Defined at:
  6289 ;;		line 74 in file "LCD.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  line            1    wreg     unsigned char 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  line            1   41[COMRAM] unsigned char 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;		None               void
  6296 ;; Registers used:
  6297 ;;		wreg, status,2, status,0, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6303 ;;      Params:         0       0       0       0
  6304 ;;      Locals:         1       0       0       0
  6305 ;;      Temps:          0       0       0       0
  6306 ;;      Totals:         1       0       0       0
  6307 ;;Total ram usage:        1 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    6
  6310 ;; This function calls:
  6311 ;;		_SendLCD
  6312 ;; This function is called by:
  6313 ;;		_ScanIR
  6314 ;;		_ScanWithRange
  6315 ;;		_main
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           	psect	text25
  6320  001D10                     __ptext25:
  6321                           	opt stack 0
  6322  001D10                     _SetLine:
  6323                           	opt stack 24
  6324                           
  6325                           ;incstack = 0
  6326                           ;SetLine@line stored from wreg
  6327  001D10  6E2A               	movwf	SetLine@line,c
  6328                           
  6329                           ;LCD.c: 75: if (line==1) {
  6330  001D12  042A               	decf	SetLine@line,w,c
  6331  001D14  A4D8               	btfss	status,2,c
  6332  001D16  D006               	goto	l2258
  6333                           
  6334                           ;LCD.c: 76: SendLCD(0x80,0);
  6335  001D18  0E00               	movlw	0
  6336  001D1A  6E28               	movwf	SendLCD@type,c
  6337  001D1C  0E80               	movlw	128
  6338  001D1E  ECA0  F00E         	call	_SendLCD
  6339                           
  6340                           ;LCD.c: 77: } else if (line==2) {
  6341  001D22  D009               	goto	l2262
  6342  001D24                     l2258:
  6343  001D24  0E02               	movlw	2
  6344  001D26  182A               	xorwf	SetLine@line,w,c
  6345  001D28  A4D8               	btfss	status,2,c
  6346  001D2A  D005               	goto	l2262
  6347                           
  6348                           ;LCD.c: 78: SendLCD(0xC0,0);
  6349  001D2C  0E00               	movlw	0
  6350  001D2E  6E28               	movwf	SendLCD@type,c
  6351  001D30  0EC0               	movlw	192
  6352  001D32  ECA0  F00E         	call	_SendLCD
  6353  001D36                     l2262:
  6354                           
  6355                           ;LCD.c: 79: }
  6356                           ;LCD.c: 80: _delay((unsigned long)((50)*(2000000/4000000.0)));
  6357  001D36  0E08               	movlw	8
  6358  001D38                     u3277:
  6359  001D38  2EE8               	decfsz	wreg,f,c
  6360  001D3A  D7FE               	goto	u3277
  6361  001D3C  F000               	nop	
  6362  001D3E  0012               	return		;funcret
  6363  001D40                     __end_of_SetLine:
  6364                           	opt stack 0
  6365                           tblptru	equ	0xFF8
  6366                           tblptrh	equ	0xFF7
  6367                           tblptrl	equ	0xFF6
  6368                           tablat	equ	0xFF5
  6369                           prodh	equ	0xFF4
  6370                           prodl	equ	0xFF3
  6371                           intcon	equ	0xFF2
  6372                           postinc0	equ	0xFEE
  6373                           wreg	equ	0xFE8
  6374                           indf1	equ	0xFE7
  6375                           plusw1	equ	0xFE3
  6376                           fsr1h	equ	0xFE2
  6377                           fsr1l	equ	0xFE1
  6378                           indf2	equ	0xFDF
  6379                           postinc2	equ	0xFDE
  6380                           postdec2	equ	0xFDD
  6381                           plusw2	equ	0xFDB
  6382                           fsr2h	equ	0xFDA
  6383                           fsr2l	equ	0xFD9
  6384                           status	equ	0xFD8
  6385                           
  6386 ;; *************** function _LCD_String *****************
  6387 ;; Defined at:
  6388 ;;		line 83 in file "LCD.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;  string          2   41[COMRAM] PTR unsigned char 
  6391 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6392 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6393 ;;		 -> STR_1(12), 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;		None
  6396 ;; Return value:  Size  Location     Type
  6397 ;;		None               void
  6398 ;; Registers used:
  6399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6405 ;;      Params:         2       0       0       0
  6406 ;;      Locals:         0       0       0       0
  6407 ;;      Temps:          0       0       0       0
  6408 ;;      Totals:         2       0       0       0
  6409 ;;Total ram usage:        2 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; Hardware stack levels required when called:    6
  6412 ;; This function calls:
  6413 ;;		_SendLCD
  6414 ;; This function is called by:
  6415 ;;		_ScanIR
  6416 ;;		_ScanWithRange
  6417 ;;		_main
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text26
  6422  001A5E                     __ptext26:
  6423                           	opt stack 0
  6424  001A5E                     _LCD_String:
  6425                           	opt stack 23
  6426                           
  6427                           ;LCD.c: 85: while(*string != 0){
  6428                           
  6429                           ;incstack = 0
  6430  001A5E  D01A               	goto	l2272
  6431  001A60                     l2266:
  6432                           
  6433                           ;LCD.c: 88: SendLCD(*string++,1);
  6434  001A60  0E01               	movlw	1
  6435  001A62  6E28               	movwf	SendLCD@type,c
  6436  001A64  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6437  001A68  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6438  001A6C  6AF8               	clrf	tblptru,c
  6439  001A6E  0E02               	movlw	(high __ramtop+-1)
  6440  001A70  64F7               	cpfsgt	tblptrh,c
  6441  001A72  D003               	bra	u1607
  6442  001A74  0008               	tblrd		*
  6443  001A76  50F5               	movf	tablat,w,c
  6444  001A78  D005               	bra	u1600
  6445  001A7A                     u1607:
  6446  001A7A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6447  001A7E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6448  001A82  50E7               	movf	indf1,w,c
  6449  001A84                     u1600:
  6450  001A84  ECA0  F00E         	call	_SendLCD
  6451  001A88  4A2A               	infsnz	LCD_String@string,f,c
  6452  001A8A  2A2B               	incf	LCD_String@string+1,f,c
  6453                           
  6454                           ;LCD.c: 89: _delay((unsigned long)((50)*(2000000/4000000.0)));
  6455  001A8C  0E08               	movlw	8
  6456  001A8E                     u3287:
  6457  001A8E  2EE8               	decfsz	wreg,f,c
  6458  001A90  D7FE               	goto	u3287
  6459  001A92  F000               	nop	
  6460  001A94                     l2272:
  6461  001A94  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6462  001A98  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6463  001A9C  6AF8               	clrf	tblptru,c
  6464  001A9E  0E02               	movlw	(high __ramtop+-1)
  6465  001AA0  64F7               	cpfsgt	tblptrh,c
  6466  001AA2  D003               	bra	u1617
  6467  001AA4  0008               	tblrd		*
  6468  001AA6  50F5               	movf	tablat,w,c
  6469  001AA8  D005               	bra	u1610
  6470  001AAA                     u1617:
  6471  001AAA  CFF6 FFE1          	movff	tblptrl,fsr1l
  6472  001AAE  CFF7 FFE2          	movff	tblptrh,fsr1h
  6473  001AB2  50E7               	movf	indf1,w,c
  6474  001AB4                     u1610:
  6475  001AB4  0900               	iorlw	0
  6476  001AB6  B4D8               	btfsc	status,2,c
  6477  001AB8  0012               	return	
  6478  001ABA  D7D2               	goto	l2266
  6479  001ABC                     __end_of_LCD_String:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           postinc0	equ	0xFEE
  6489                           wreg	equ	0xFE8
  6490                           indf1	equ	0xFE7
  6491                           plusw1	equ	0xFE3
  6492                           fsr1h	equ	0xFE2
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           plusw2	equ	0xFDB
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _SendLCD *****************
  6503 ;; Defined at:
  6504 ;;		line 27 in file "LCD.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  Byte            1    wreg     unsigned char 
  6507 ;;  type            1   39[COMRAM] unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  Byte            1   40[COMRAM] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;		None               void
  6512 ;; Registers used:
  6513 ;;		wreg, status,2, status,0, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6519 ;;      Params:         1       0       0       0
  6520 ;;      Locals:         1       0       0       0
  6521 ;;      Temps:          0       0       0       0
  6522 ;;      Totals:         2       0       0       0
  6523 ;;Total ram usage:        2 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    5
  6526 ;; This function calls:
  6527 ;;		_LCDout
  6528 ;; This function is called by:
  6529 ;;		_initLCD
  6530 ;;		_SetLine
  6531 ;;		_LCD_String
  6532 ;;		_ScanIR
  6533 ;;		_ScanWithRange
  6534 ;;		_main
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           	psect	text27
  6539  001D40                     __ptext27:
  6540                           	opt stack 0
  6541  001D40                     _SendLCD:
  6542                           	opt stack 24
  6543                           
  6544                           ;incstack = 0
  6545                           ;SendLCD@Byte stored from wreg
  6546  001D40  6E29               	movwf	SendLCD@Byte,c
  6547                           
  6548                           ;LCD.c: 30: LATAbits.LATA6=type;
  6549  001D42  B028               	btfsc	SendLCD@type,0,c
  6550  001D44  D002               	bra	u1395
  6551  001D46  9C89               	bcf	3977,6,c	;volatile
  6552  001D48  D001               	bra	u1396
  6553  001D4A                     u1395:
  6554  001D4A  8C89               	bsf	3977,6,c	;volatile
  6555  001D4C                     u1396:
  6556                           
  6557                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6558  001D4C  3829               	swapf	SendLCD@Byte,w,c
  6559  001D4E  0B0F               	andlw	15
  6560  001D50  0B0F               	andlw	15
  6561  001D52  ECEC  F00A         	call	_LCDout
  6562                           
  6563                           ;LCD.c: 33: _delay((unsigned long)((10)*(2000000/4000000.0)));
  6564  001D56  F000               	nop	
  6565  001D58  D000               	nop2		;2 cycle nop
  6566  001D5A  D000               	nop2		;2 cycle nop
  6567                           
  6568                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6569  001D5C  5029               	movf	SendLCD@Byte,w,c
  6570  001D5E  0B0F               	andlw	15
  6571  001D60  ECEC  F00A         	call	_LCDout
  6572                           
  6573                           ;LCD.c: 36: _delay((unsigned long)((50)*(2000000/4000000.0)));
  6574  001D64  0E08               	movlw	8
  6575  001D66                     u3297:
  6576  001D66  2EE8               	decfsz	wreg,f,c
  6577  001D68  D7FE               	goto	u3297
  6578  001D6A  F000               	nop	
  6579  001D6C  0012               	return		;funcret
  6580  001D6E                     __end_of_SendLCD:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           postinc0	equ	0xFEE
  6590                           wreg	equ	0xFE8
  6591                           indf1	equ	0xFE7
  6592                           plusw1	equ	0xFE3
  6593                           fsr1h	equ	0xFE2
  6594                           fsr1l	equ	0xFE1
  6595                           indf2	equ	0xFDF
  6596                           postinc2	equ	0xFDE
  6597                           postdec2	equ	0xFDD
  6598                           plusw2	equ	0xFDB
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function _LCDout *****************
  6604 ;; Defined at:
  6605 ;;		line 14 in file "LCD.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  number          1    wreg     unsigned char 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  number          1   38[COMRAM] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;		None               void
  6612 ;; Registers used:
  6613 ;;		wreg, status,2, status,0, cstack
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6619 ;;      Params:         0       0       0       0
  6620 ;;      Locals:         1       0       0       0
  6621 ;;      Temps:          3       0       0       0
  6622 ;;      Totals:         4       0       0       0
  6623 ;;Total ram usage:        4 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    4
  6626 ;; This function calls:
  6627 ;;		_E_TOG
  6628 ;; This function is called by:
  6629 ;;		_SendLCD
  6630 ;;		_initLCD
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text28
  6635  0015D8                     __ptext28:
  6636                           	opt stack 0
  6637  0015D8                     _LCDout:
  6638                           	opt stack 24
  6639                           
  6640                           ;incstack = 0
  6641                           ;LCDout@number stored from wreg
  6642  0015D8  6E27               	movwf	LCDout@number,c
  6643                           
  6644                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6645  0015DA  5027               	movf	LCDout@number,w,c
  6646  0015DC  6E24               	movwf	??_LCDout& (0+255),c
  6647  0015DE  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6648  0015E0  0E07               	movlw	7
  6649  0015E2                     u1285:
  6650  0015E2  90D8               	bcf	status,0,c
  6651  0015E4  3624               	rlcf	??_LCDout,f,c
  6652  0015E6  3625               	rlcf	??_LCDout+1,f,c
  6653  0015E8  2EE8               	decfsz	wreg,f,c
  6654  0015EA  D7FB               	goto	u1285
  6655  0015EC  0E07               	movlw	7
  6656  0015EE  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6657  0015F0                     u1295:
  6658  0015F0  3425               	rlcf	??_LCDout+1,w,c
  6659  0015F2  3225               	rrcf	??_LCDout+1,f,c
  6660  0015F4  3224               	rrcf	??_LCDout,f,c
  6661  0015F6  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6662  0015F8  D7FB               	goto	u1295
  6663  0015FA  4624               	rlncf	??_LCDout,f,c
  6664  0015FC  508B               	movf	3979,w,c	;volatile
  6665  0015FE  1824               	xorwf	??_LCDout,w,c
  6666  001600  0BFD               	andlw	-3
  6667  001602  1824               	xorwf	??_LCDout,w,c
  6668  001604  6E8B               	movwf	3979,c	;volatile
  6669                           
  6670                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6671  001606  5027               	movf	LCDout@number,w,c
  6672  001608  6E24               	movwf	??_LCDout& (0+255),c
  6673  00160A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6674  00160C  0E06               	movlw	6
  6675  00160E                     u1305:
  6676  00160E  90D8               	bcf	status,0,c
  6677  001610  3624               	rlcf	??_LCDout,f,c
  6678  001612  3625               	rlcf	??_LCDout+1,f,c
  6679  001614  2EE8               	decfsz	wreg,f,c
  6680  001616  D7FB               	goto	u1305
  6681  001618  0E07               	movlw	7
  6682  00161A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6683  00161C                     u1315:
  6684  00161C  3425               	rlcf	??_LCDout+1,w,c
  6685  00161E  3225               	rrcf	??_LCDout+1,f,c
  6686  001620  3224               	rrcf	??_LCDout,f,c
  6687  001622  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6688  001624  D7FB               	goto	u1315
  6689  001626  4624               	rlncf	??_LCDout,f,c
  6690  001628  4624               	rlncf	??_LCDout,f,c
  6691  00162A  508B               	movf	3979,w,c	;volatile
  6692  00162C  1824               	xorwf	??_LCDout,w,c
  6693  00162E  0BFB               	andlw	-5
  6694  001630  1824               	xorwf	??_LCDout,w,c
  6695  001632  6E8B               	movwf	3979,c	;volatile
  6696                           
  6697                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6698  001634  5027               	movf	LCDout@number,w,c
  6699  001636  6E24               	movwf	??_LCDout& (0+255),c
  6700  001638  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6701  00163A  0E05               	movlw	5
  6702  00163C                     u1325:
  6703  00163C  90D8               	bcf	status,0,c
  6704  00163E  3624               	rlcf	??_LCDout,f,c
  6705  001640  3625               	rlcf	??_LCDout+1,f,c
  6706  001642  2EE8               	decfsz	wreg,f,c
  6707  001644  D7FB               	goto	u1325
  6708  001646  0E07               	movlw	7
  6709  001648  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6710  00164A                     u1335:
  6711  00164A  3425               	rlcf	??_LCDout+1,w,c
  6712  00164C  3225               	rrcf	??_LCDout+1,f,c
  6713  00164E  3224               	rrcf	??_LCDout,f,c
  6714  001650  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6715  001652  D7FB               	goto	u1335
  6716  001654  508C               	movf	3980,w,c	;volatile
  6717  001656  1824               	xorwf	??_LCDout,w,c
  6718  001658  0BFE               	andlw	-2
  6719  00165A  1824               	xorwf	??_LCDout,w,c
  6720  00165C  6E8C               	movwf	3980,c	;volatile
  6721                           
  6722                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6723  00165E  5027               	movf	LCDout@number,w,c
  6724  001660  6E24               	movwf	??_LCDout& (0+255),c
  6725  001662  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6726  001664  3A24               	swapf	??_LCDout,f,c
  6727  001666  3A25               	swapf	??_LCDout+1,f,c
  6728  001668  0EF0               	movlw	240
  6729  00166A  1625               	andwf	??_LCDout+1,f,c
  6730  00166C  5024               	movf	??_LCDout,w,c
  6731  00166E  0B0F               	andlw	15
  6732  001670  1225               	iorwf	??_LCDout+1,f,c
  6733  001672  0EF0               	movlw	240
  6734  001674  1624               	andwf	??_LCDout,f,c
  6735  001676  0E07               	movlw	7
  6736  001678  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6737  00167A                     u1345:
  6738  00167A  3425               	rlcf	??_LCDout+1,w,c
  6739  00167C  3225               	rrcf	??_LCDout+1,f,c
  6740  00167E  3224               	rrcf	??_LCDout,f,c
  6741  001680  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6742  001682  D7FB               	goto	u1345
  6743  001684  4624               	rlncf	??_LCDout,f,c
  6744  001686  508C               	movf	3980,w,c	;volatile
  6745  001688  1824               	xorwf	??_LCDout,w,c
  6746  00168A  0BFD               	andlw	-3
  6747  00168C  1824               	xorwf	??_LCDout,w,c
  6748  00168E  6E8C               	movwf	3980,c	;volatile
  6749                           
  6750                           ;LCD.c: 21: E_TOG();
  6751  001690  EC29  F00F         	call	_E_TOG	;wreg free
  6752                           
  6753                           ;LCD.c: 22: _delay((unsigned long)((5)*(2000000/4000000.0)));
  6754  001694  D000               	nop2		;2 cycle nop
  6755  001696  0012               	return		;funcret
  6756  001698                     __end_of_LCDout:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           intcon	equ	0xFF2
  6765                           postinc0	equ	0xFEE
  6766                           wreg	equ	0xFE8
  6767                           indf1	equ	0xFE7
  6768                           plusw1	equ	0xFE3
  6769                           fsr1h	equ	0xFE2
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           plusw2	equ	0xFDB
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _E_TOG *****************
  6780 ;; Defined at:
  6781 ;;		line 5 in file "LCD.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;		None
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;		None
  6786 ;; Return value:  Size  Location     Type
  6787 ;;		None               void
  6788 ;; Registers used:
  6789 ;;		None
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6795 ;;      Params:         0       0       0       0
  6796 ;;      Locals:         0       0       0       0
  6797 ;;      Temps:          0       0       0       0
  6798 ;;      Totals:         0       0       0       0
  6799 ;;Total ram usage:        0 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    3
  6802 ;; This function calls:
  6803 ;;		Nothing
  6804 ;; This function is called by:
  6805 ;;		_LCDout
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text29
  6810  001E52                     __ptext29:
  6811                           	opt stack 0
  6812  001E52                     _E_TOG:
  6813                           	opt stack 24
  6814                           
  6815                           ;LCD.c: 8: LATCbits.LATC0=1;
  6816                           
  6817                           ;incstack = 0
  6818  001E52  808B               	bsf	3979,0,c	;volatile
  6819                           
  6820                           ;LCD.c: 9: _delay((unsigned long)((5)*(2000000/4000000.0)));
  6821  001E54  D000               	nop2		;2 cycle nop
  6822                           
  6823                           ;LCD.c: 10: LATCbits.LATC0=0;
  6824  001E56  908B               	bcf	3979,0,c	;volatile
  6825  001E58  0012               	return		;funcret
  6826  001E5A                     __end_of_E_TOG:
  6827                           	opt stack 0
  6828                           tblptru	equ	0xFF8
  6829                           tblptrh	equ	0xFF7
  6830                           tblptrl	equ	0xFF6
  6831                           tablat	equ	0xFF5
  6832                           prodh	equ	0xFF4
  6833                           prodl	equ	0xFF3
  6834                           intcon	equ	0xFF2
  6835                           postinc0	equ	0xFEE
  6836                           wreg	equ	0xFE8
  6837                           indf1	equ	0xFE7
  6838                           plusw1	equ	0xFE3
  6839                           fsr1h	equ	0xFE2
  6840                           fsr1l	equ	0xFE1
  6841                           indf2	equ	0xFDF
  6842                           postinc2	equ	0xFDE
  6843                           postdec2	equ	0xFDD
  6844                           plusw2	equ	0xFDB
  6845                           fsr2h	equ	0xFDA
  6846                           fsr2l	equ	0xFD9
  6847                           status	equ	0xFD8
  6848                           
  6849 ;; *************** function _InterruptHandlerLow *****************
  6850 ;; Defined at:
  6851 ;;		line 18 in file "main.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;		None               void
  6858 ;; Registers used:
  6859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6865 ;;      Params:         0       0       0       0
  6866 ;;      Locals:         0       0       0       0
  6867 ;;      Temps:         17       0       0       0
  6868 ;;      Totals:        17       0       0       0
  6869 ;;Total ram usage:       17 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    2
  6872 ;; This function calls:
  6873 ;;		Nothing
  6874 ;; This function is called by:
  6875 ;;		Interrupt level 1
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	intcodelo
  6880  000018                     __pintcodelo:
  6881                           	opt stack 0
  6882  000018                     _InterruptHandlerLow:
  6883                           	opt stack 23
  6884                           
  6885                           ;incstack = 0
  6886  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6887  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6888  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6889  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6890  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6891  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6892  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6893  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6894  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6895  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6896  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6897  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6898  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6899  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6900  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6901  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6902  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6903  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6904                           
  6905                           ;main.c: 20: if (PIR1bits.RCIF) {
  6906  00005E  AA9E               	btfss	3998,5,c	;volatile
  6907  000060  D016               	goto	i1l378
  6908                           
  6909                           ;main.c: 21: ReceivedString[i]=RCREG;
  6910  000062  503A               	movf	_i,w,c	;volatile
  6911  000064  0D01               	mullw	1
  6912  000066  0EE6               	movlw	low _ReceivedString
  6913  000068  24F3               	addwf	prodl,w,c
  6914  00006A  6ED9               	movwf	fsr2l,c
  6915  00006C  0E01               	movlw	high _ReceivedString
  6916  00006E  20F4               	addwfc	prodh,w,c
  6917  000070  6EDA               	movwf	fsr2h,c
  6918  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6919                           
  6920                           ;main.c: 22: RFID_Read=1;
  6921  000076  0E01               	movlw	1
  6922  000078  0101               	movlb	1	; () banked
  6923  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6924                           
  6925                           ; BSR set to: 1
  6926                           ;main.c: 23: if (i==15){
  6927  00007C  0E0F               	movlw	15
  6928  00007E  183A               	xorwf	_i,w,c	;volatile
  6929  000080  A4D8               	btfss	status,2,c
  6930  000082  D003               	goto	i1l2700
  6931                           
  6932                           ; BSR set to: 1
  6933                           ;main.c: 24: i=0;
  6934  000084  0E00               	movlw	0
  6935  000086  6E3A               	movwf	_i,c	;volatile
  6936                           
  6937                           ;main.c: 25: }else{
  6938  000088  D001               	goto	i1l2702
  6939  00008A                     i1l2700:
  6940                           
  6941                           ; BSR set to: 1
  6942                           ;main.c: 26: i++;
  6943  00008A  2A3A               	incf	_i,f,c	;volatile
  6944  00008C                     i1l2702:
  6945                           
  6946                           ; BSR set to: 1
  6947                           ;main.c: 27: }
  6948                           ;main.c: 28: PIR1bits.RCIF=0;
  6949  00008C  9A9E               	bcf	3998,5,c	;volatile
  6950  00008E                     i1l378:
  6951  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6952  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6953  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6954  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6955  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6956  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6957  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6958  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6959  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6960  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6961  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6962  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6963  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6964  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6965  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6966  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6967  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6968  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6969  0000D4  0010               	retfie	
  6970  0000D6                     __end_of_InterruptHandlerLow:
  6971                           	opt stack 0
  6972                           pclatu	equ	0xFFB
  6973                           pclath	equ	0xFFA
  6974                           tblptru	equ	0xFF8
  6975                           tblptrh	equ	0xFF7
  6976                           tblptrl	equ	0xFF6
  6977                           tablat	equ	0xFF5
  6978                           prodh	equ	0xFF4
  6979                           prodl	equ	0xFF3
  6980                           intcon	equ	0xFF2
  6981                           postinc0	equ	0xFEE
  6982                           fsr0h	equ	0xFEA
  6983                           fsr0l	equ	0xFE9
  6984                           wreg	equ	0xFE8
  6985                           indf1	equ	0xFE7
  6986                           plusw1	equ	0xFE3
  6987                           fsr1h	equ	0xFE2
  6988                           fsr1l	equ	0xFE1
  6989                           bsr	equ	0xFE0
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           plusw2	equ	0xFDB
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _InterruptHandlerHigh *****************
  6999 ;; Defined at:
  7000 ;;		line 34 in file "main.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;		None               void
  7007 ;; Registers used:
  7008 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7014 ;;      Params:         0       0       0       0
  7015 ;;      Locals:         0       0       0       0
  7016 ;;      Temps:         14       0       0       0
  7017 ;;      Totals:        14       0       0       0
  7018 ;;Total ram usage:       14 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    1
  7021 ;; This function calls:
  7022 ;;		i2_delay_tenth_s
  7023 ;; This function is called by:
  7024 ;;		Interrupt level 2
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	intcode
  7029  000008                     __pintcode:
  7030                           	opt stack 0
  7031  000008                     _InterruptHandlerHigh:
  7032                           	opt stack 23
  7033                           
  7034                           ;incstack = 0
  7035  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7036  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7037  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7038  000012  EFF4  F00B         	goto	int_func
  7039                           pclatu	equ	0xFFB
  7040                           pclath	equ	0xFFA
  7041                           tblptru	equ	0xFF8
  7042                           tblptrh	equ	0xFF7
  7043                           tblptrl	equ	0xFF6
  7044                           tablat	equ	0xFF5
  7045                           prodh	equ	0xFF4
  7046                           prodl	equ	0xFF3
  7047                           intcon	equ	0xFF2
  7048                           postinc0	equ	0xFEE
  7049                           fsr0h	equ	0xFEA
  7050                           fsr0l	equ	0xFE9
  7051                           wreg	equ	0xFE8
  7052                           indf1	equ	0xFE7
  7053                           plusw1	equ	0xFE3
  7054                           fsr1h	equ	0xFE2
  7055                           fsr1l	equ	0xFE1
  7056                           bsr	equ	0xFE0
  7057                           indf2	equ	0xFDF
  7058                           postinc2	equ	0xFDE
  7059                           postdec2	equ	0xFDD
  7060                           plusw2	equ	0xFDB
  7061                           fsr2h	equ	0xFDA
  7062                           fsr2l	equ	0xFD9
  7063                           status	equ	0xFD8
  7064                           
  7065                           	psect	intcode_body
  7066  0017E8                     __pintcode_body:
  7067                           	opt stack 23
  7068  0017E8                     int_func:
  7069                           	opt stack 23
  7070  0017E8  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7071  0017EC  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7072  0017F0  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7073  0017F4  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7074  0017F8  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7075  0017FC  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7076  001800  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7077  001804  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7078  001808  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7079  00180C  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7080  001810  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7081  001814  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7082                           
  7083                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7084  001818  A2F2               	btfss	intcon,1,c	;volatile
  7085  00181A  D00D               	goto	i2l386
  7086                           
  7087                           ;main.c: 36: if (mode==-1) {
  7088  00181C  283B               	incf	_mode,w,c	;volatile
  7089  00181E  A4D8               	btfss	status,2,c
  7090  001820  D003               	goto	i2l2710
  7091                           
  7092                           ;main.c: 38: mode=1;
  7093  001822  0E01               	movlw	1
  7094  001824  6E3B               	movwf	_mode,c	;volatile
  7095                           
  7096                           ;main.c: 39: } else if (mode==0) {
  7097  001826  D003               	goto	i2l2714
  7098  001828                     i2l2710:
  7099  001828  503B               	movf	_mode,w,c	;volatile
  7100  00182A  A4D8               	btfss	status,2,c
  7101                           
  7102                           ;main.c: 43: mode=-1;
  7103                           
  7104                           ;main.c: 41: } else {
  7105  00182C  683B               	setf	_mode,c	;volatile
  7106  00182E                     i2l2714:
  7107                           
  7108                           ;main.c: 44: }
  7109                           ;main.c: 46: delay_tenth_s(2);
  7110  00182E  0E02               	movlw	2
  7111  001830  EC6B  F00E         	call	i2_delay_tenth_s
  7112                           
  7113                           ;main.c: 47: INTCONbits.INT0IF=0;
  7114  001834  92F2               	bcf	intcon,1,c	;volatile
  7115  001836                     i2l386:
  7116  001836  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7117  00183A  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7118  00183E  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7119  001842  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7120  001846  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7121  00184A  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7122  00184E  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7123  001852  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7124  001856  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7125  00185A  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7126  00185E  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7127  001862  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7128  001866  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7129  00186A  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7130  00186E  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7131  001870  0011               	retfie		f
  7132  001872                     __end_of_InterruptHandlerHigh:
  7133                           	opt stack 0
  7134                           pclatu	equ	0xFFB
  7135                           pclath	equ	0xFFA
  7136                           tblptru	equ	0xFF8
  7137                           tblptrh	equ	0xFF7
  7138                           tblptrl	equ	0xFF6
  7139                           tablat	equ	0xFF5
  7140                           prodh	equ	0xFF4
  7141                           prodl	equ	0xFF3
  7142                           intcon	equ	0xFF2
  7143                           postinc0	equ	0xFEE
  7144                           fsr0h	equ	0xFEA
  7145                           fsr0l	equ	0xFE9
  7146                           wreg	equ	0xFE8
  7147                           indf1	equ	0xFE7
  7148                           plusw1	equ	0xFE3
  7149                           fsr1h	equ	0xFE2
  7150                           fsr1l	equ	0xFE1
  7151                           bsr	equ	0xFE0
  7152                           indf2	equ	0xFDF
  7153                           postinc2	equ	0xFDE
  7154                           postdec2	equ	0xFDD
  7155                           plusw2	equ	0xFDB
  7156                           fsr2h	equ	0xFDA
  7157                           fsr2l	equ	0xFD9
  7158                           status	equ	0xFD8
  7159                           
  7160 ;; *************** function i2_delay_tenth_s *****************
  7161 ;; Defined at:
  7162 ;;		line 32 in file "Movement.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  tenth_second    1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7167 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7168 ;; Return value:  Size  Location     Type
  7169 ;;		None               void
  7170 ;; Registers used:
  7171 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7177 ;;      Params:         0       0       0       0
  7178 ;;      Locals:         3       0       0       0
  7179 ;;      Temps:          1       0       0       0
  7180 ;;      Totals:         4       0       0       0
  7181 ;;Total ram usage:        4 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; This function calls:
  7184 ;;		Nothing
  7185 ;; This function is called by:
  7186 ;;		_InterruptHandlerHigh
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           	psect	text32
  7191  001CD6                     __ptext32:
  7192                           	opt stack 0
  7193  001CD6                     i2_delay_tenth_s:
  7194                           	opt stack 23
  7195                           
  7196                           ;incstack = 0
  7197                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7198  001CD6  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7199                           
  7200                           ;Movement.c: 33: unsigned int i=0;
  7201  001CD8  0E00               	movlw	0
  7202  001CDA  6E04               	movwf	i2delay_tenth_s@i+1,c
  7203  001CDC  0E00               	movlw	0
  7204  001CDE  6E03               	movwf	i2delay_tenth_s@i,c
  7205                           
  7206                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7207  001CE0  0E00               	movlw	0
  7208  001CE2  6E04               	movwf	i2delay_tenth_s@i+1,c
  7209  001CE4  0E01               	movlw	1
  7210  001CE6  6E03               	movwf	i2delay_tenth_s@i,c
  7211  001CE8  D00A               	goto	i2l2670
  7212  001CEA                     i2l2666:
  7213                           
  7214                           ;Movement.c: 36: _delay((unsigned long)((50)*(2000000/4000.0)));
  7215  001CEA  0E21               	movlw	33
  7216  001CEC  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7217  001CEE  0E76               	movlw	118
  7218  001CF0                     i2u330_47:
  7219  001CF0  2EE8               	decfsz	wreg,f,c
  7220  001CF2  D7FE               	goto	i2u330_47
  7221  001CF4  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7222  001CF6  D7FC               	goto	i2u330_47
  7223  001CF8  D000               	nop2	
  7224  001CFA  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7225  001CFC  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7226  001CFE                     i2l2670:
  7227  001CFE  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7228  001D00  0D02               	mullw	2
  7229  001D02  5003               	movf	i2delay_tenth_s@i,w,c
  7230  001D04  5CF3               	subwf	prodl,w,c
  7231  001D06  5004               	movf	i2delay_tenth_s@i+1,w,c
  7232  001D08  58F4               	subwfb	prodh,w,c
  7233  001D0A  A0D8               	btfss	status,0,c
  7234  001D0C  0012               	return	
  7235  001D0E  D7ED               	goto	i2l2666
  7236  001D10                     __end_ofi2_delay_tenth_s:
  7237                           	opt stack 0
  7238                           pclatu	equ	0xFFB
  7239                           pclath	equ	0xFFA
  7240                           tblptru	equ	0xFF8
  7241                           tblptrh	equ	0xFF7
  7242                           tblptrl	equ	0xFF6
  7243                           tablat	equ	0xFF5
  7244                           prodh	equ	0xFF4
  7245                           prodl	equ	0xFF3
  7246                           intcon	equ	0xFF2
  7247                           postinc0	equ	0xFEE
  7248                           fsr0h	equ	0xFEA
  7249                           fsr0l	equ	0xFE9
  7250                           wreg	equ	0xFE8
  7251                           indf1	equ	0xFE7
  7252                           plusw1	equ	0xFE3
  7253                           fsr1h	equ	0xFE2
  7254                           fsr1l	equ	0xFE1
  7255                           bsr	equ	0xFE0
  7256                           indf2	equ	0xFDF
  7257                           postinc2	equ	0xFDE
  7258                           postdec2	equ	0xFDD
  7259                           plusw2	equ	0xFDB
  7260                           fsr2h	equ	0xFDA
  7261                           fsr2l	equ	0xFD9
  7262                           status	equ	0xFD8
  7263                           pclatu	equ	0xFFB
  7264                           pclath	equ	0xFFA
  7265                           tblptru	equ	0xFF8
  7266                           tblptrh	equ	0xFF7
  7267                           tblptrl	equ	0xFF6
  7268                           tablat	equ	0xFF5
  7269                           prodh	equ	0xFF4
  7270                           prodl	equ	0xFF3
  7271                           intcon	equ	0xFF2
  7272                           postinc0	equ	0xFEE
  7273                           fsr0h	equ	0xFEA
  7274                           fsr0l	equ	0xFE9
  7275                           wreg	equ	0xFE8
  7276                           indf1	equ	0xFE7
  7277                           plusw1	equ	0xFE3
  7278                           fsr1h	equ	0xFE2
  7279                           fsr1l	equ	0xFE1
  7280                           bsr	equ	0xFE0
  7281                           indf2	equ	0xFDF
  7282                           postinc2	equ	0xFDE
  7283                           postdec2	equ	0xFDD
  7284                           plusw2	equ	0xFDB
  7285                           fsr2h	equ	0xFDA
  7286                           fsr2l	equ	0xFD9
  7287                           status	equ	0xFD8
  7288                           
  7289                           	psect	rparam
  7290  0000                     pclatu	equ	0xFFB
  7291                           pclath	equ	0xFFA
  7292                           tblptru	equ	0xFF8
  7293                           tblptrh	equ	0xFF7
  7294                           tblptrl	equ	0xFF6
  7295                           tablat	equ	0xFF5
  7296                           prodh	equ	0xFF4
  7297                           prodl	equ	0xFF3
  7298                           intcon	equ	0xFF2
  7299                           postinc0	equ	0xFEE
  7300                           fsr0h	equ	0xFEA
  7301                           fsr0l	equ	0xFE9
  7302                           wreg	equ	0xFE8
  7303                           indf1	equ	0xFE7
  7304                           plusw1	equ	0xFE3
  7305                           fsr1h	equ	0xFE2
  7306                           fsr1l	equ	0xFE1
  7307                           bsr	equ	0xFE0
  7308                           indf2	equ	0xFDF
  7309                           postinc2	equ	0xFDE
  7310                           postdec2	equ	0xFDD
  7311                           plusw2	equ	0xFDB
  7312                           fsr2h	equ	0xFDA
  7313                           fsr2l	equ	0xFD9
  7314                           status	equ	0xFD8
  7315                           
  7316                           	psect	temp
  7317  00003C                     btemp:
  7318                           	opt stack 0
  7319  00003C                     	ds	1
  7320  0000                     int$flags	set	btemp
  7321                           pclatu	equ	0xFFB
  7322                           pclath	equ	0xFFA
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           intcon	equ	0xFF2
  7330                           postinc0	equ	0xFEE
  7331                           fsr0h	equ	0xFEA
  7332                           fsr0l	equ	0xFE9
  7333                           wreg	equ	0xFE8
  7334                           indf1	equ	0xFE7
  7335                           plusw1	equ	0xFE3
  7336                           fsr1h	equ	0xFE2
  7337                           fsr1l	equ	0xFE1
  7338                           bsr	equ	0xFE0
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           postdec2	equ	0xFDD
  7342                           plusw2	equ	0xFDB
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         106
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     103
    BANK1           256    151     247
    BANK2           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 50
		 -> main@MoveTime(BANK1[50]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 25
		 -> main@MoveType(BANK1[25]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S146DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S146DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_fullSpeed
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeed
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               156   156      0   72257
                                             90 BANK0      5     5      0
                                              0 BANK1    151   151      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4709
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   24820
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5171
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5402
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4092
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              50    46      4   11702
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     97      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      67       5       64.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     199       3        0.0%
DATA                 0      0     199      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 21:36:53 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l37 1488  
                                  l67 1950                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 0128                           ?_LCD_String 002A  
                                 l226 0D0E                                   l227 0D3E  
                                 l229 0E98                                   l436 0A12  
                                 l429 0990                                   l395 041C  
                                 l903 1B5C                                   l913 1B9E  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 014B  
                        __CFG_LVP$OFF 000000                          main@MoveType 0132  
                                l3000 18DE                                  l3004 18EC  
                                l2150 1E1C                                  l3014 1460  
                                l3022 1914                                  l2240 19FA  
                                l2224 1986                                  l2160 1B2A  
                                l3120 1220                                  l3040 176E  
                                l2250 1A40                                  l2234 19CC  
                                l2162 1B32                                  l3130 127A  
                                l3106 11E4                                  l3050 17A6  
                                l3026 1930                                  l3018 18F8  
                                l2244 1A02                                  l2228 198E  
                                l2172 1B52                                  l2164 1B36  
                                l2180 1B74                                  l3140 12A8  
                                l3132 1284                                  l3108 11EA  
                                l3044 1786                                  l3036 1756  
                                l2262 1D36                                  l2182 1B7C  
                                l3150 12DA                                  l3126 1242  
                                l3302 0E94                                  l2430 1DAC  
                                l2272 1A94                                  l2184 1B80  
                                l3072 10D0                                  l2280 1CC4  
                                l2266 1A60                                  l2258 1D24  
                                l3170 1378                                  l3162 131C  
                                l3074 10E2                                  l3066 10B4  
                                l3218 15C0                                  l3330 0FD0  
                                l3250 0C4A                                  l2188 1B94  
                                l3164 1322                                  l3156 12FE  
                                l3148 12CE                                  l3084 111A  
                                l3172 1384                                  l2276 1CB0  
                                l3324 0FB2                                  l3500 068E  
                                l3174 139E                                  l3094 118C  
                                l3078 10EA                                  l3510 06F6  
                                l3096 11B4                                  l3336 0FE2  
                                l3520 0740                                  l3408 0422  
                                l3290 0D9E                                  l3338 0FE8  
                                l3522 0746                                  l3514 0700  
                                l3610 0AF4                                  l3292 0DB6  
                                l3604 0AD6                                  l3532 076C  
                                l3444 04C4                                  l3606 0AF2  
                                l3526 0750                                  l3534 0772  
                                l3542 07DA                                  l3560 0866  
                                l3448 04F6                                  l3570 08DC  
                                l3554 0842                                  l3490 063E  
                                l3468 0548                                  l3582 0946  
                                l3494 0668                                  l3486 05DE  
                                l3594 0A90                                  l3586 09B4  
                                l2972 1886                                  l3588 0A16  
                                l3596 0ACA                                  l2984 18AC  
                                l2986 18B4                                  l2978 1896  
                                l2996 18D4                                  l2988 18B8  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1305 160E                                  u1315 161C  
                                u1325 163C                                  u3030 0A54  
                                _LATB 000F8A                                  u1335 164A  
                                u1600 1A84                                  u1345 167A  
                                u1610 1AB4                                  u3107 16D0  
                                u1285 15E2                                  u2405 14D6  
                                u3117 16DE                                  u1295 15F0  
                                u1607 1A7A                                  u1535 1996  
                                u3207 194A                                  u3127 16EC  
                                u1617 1AAA                                  u3217 1CB6  
                                u3137 16FE                                  u1395 1D4A  
                                u3227 1534                                  u3147 1710  
                                u3067 047E                                  u1396 1D4C  
                                u1565 1A0A                                  u3237 1546  
                                u3157 1726                                  u3077 0490  
                                u3247 17A0                                  u3167 173A  
                                u3087 16AA                                  u2384 1420  
                                u3257 19BE                                  u2385 141C  
                                u3177 174C                                  u3097 16C0  
                                u2801 0378                                  u2394 147C  
                                u3267 1A32                                  u2395 1478  
                                u3187 0C7E                                  u3277 1D38  
                                u3197 0C90                                  u1845 1DA8  
                                u1846 1DAA                                  u3287 1A8E  
                                u3297 1D66                                  u1865 1DBA  
                                u1866 1DBC                                  u2791 0366  
                                u2880 06C0                                  u2890 06D4  
                                u2882 06C2                                  u2892 06D6  
                                u2990 0922                                  _main 0350  
                                _mode 003B                         main@ScanAngle 017D  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 1754  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00AD                          ___param_bank 000010  
                     i2_delay_tenth_s 1CD6                       __end_of_SendLCD 1D6E  
                     __end_of_SetLine 1D40                    ScanWithRange@F3892 00C3  
                         ScanIR@F3879 00BF                                 ?_main 0001  
                     __end_of___awdiv 18F6                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1B66  
                     __end_of___lwmod 1BA8                                 i1l378 008E  
                               i2l386 1836                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1E52  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1754  
                  ScanWithRange@loops 0071                       __end_of_dpowers 030B  
                     __end_of_isdigit 1E24                                 main@i 0183  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 13AC  
              __size_of_ScanWithRange 0590                        __CFG_MCLRE$OFF 000000  
                     __initialization 1D6E                          __end_of_main 0B16  
                        __end_of_stop 17E8                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 0099                  __end_of_enableSensor 1DBE  
                 VerifySignal@hexByte 002C                                ??_main 00BA  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2700 008A  
                              i1l2702 008C                                i2l2710 1828  
                      __CFG_WDTEN$OFF 000000                                i2l2714 182E  
                              i2l2670 1CFE                                i2l2666 1CEA  
               __end_of_delay_tenth_s 1CD6                                _LCDout 15D8  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00AE  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1D10                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 14E6  
                           ??_SetLine 002A                           fullSpeed@mL 0062  
                         fullSpeed@mR 0064                                ___wmul 1DBE  
                           ??___awdiv 002E                      __end_of_initRFID 1E40  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1DE4                  __size_of_grabRightIR 0074  
                              clear_0 1D74                                clear_1 1D80  
                    ___awdiv@quotient 0030                                main@mL 0185  
                              main@mR 018E                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0B16  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060       ScanWithRange@TimeAboveThreshold 00B1  
                    __end_of_turnLeft 1C62                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 1D8A                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 1E5A  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1BA8  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002B                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 186A           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00BF                            __pbssBANK1 0197  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __size_of_fullSpeed 0080  
                  __end_of_LCD_String 1ABC                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                            _grabLeftIR 19EA  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C0                          _enableSensor 1D98  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1C9C  
              ScanWithRange@RFID_Read 0079                               _SendLCD 1D40  
                             __Hparam 0000                               _SetLine 1D10  
                             __Lparam 0000                       __size_of_ScanIR 00F2  
                             ___awdiv 1872                       __size_of___wmul 0026  
                             ___lwdiv 1B14                               ___lwmod 1B66  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1D6E                       ??_ScanWithRange 007B  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 1E40  
                             __ptext2 1E24                               __ptext3 1C62  
                             __ptext4 1698                               __ptext5 1DE4  
                             __ptext6 1BA8                               __ptext7 1D98  
                             __ptext8 1ABC                               __ptext9 0B16  
                           _T0CONbits 000FD5                               _initLCD 1698  
                   __end_of_initTimer 1E52                               _dpowers 0301  
                   __end_of_fullSpeed 1976                               _isdigit 1E06  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 0100                               _sprintf 10A6  
                      __pintcode_body 17E8                  end_of_initialization 1D8A  
                      ScanWithRange@i 00A9                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 17E8                    ScanIR@SensorResult 009B  
                     ??_fullSpeedBack 003A                             _RFID_Read 01F6  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                ScanWithRange@LeftFlick 00B7  
                   __end_of_turnRight 1C24                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
              ScanWithRange@RightFlag 00B8                        __end_of_LCDout 1698  
                           _TXSTAbits 000FAC                             ScanIR@buf 0071  
                       ??_grabRightIR 0026                        __end_of_ScanIR 15D8  
                      _ReceivedString 01E6                        __end_of___wmul 1DE4  
                   ScanWithRange@Move 0075                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1E06                __size_of_delay_tenth_s 003A  
                 start_initialization 1D6E                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 003A                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 1872                              ??_ScanIR 0039  
                 __size_of_grabLeftIR 0074                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 19EA  
                        _initMotorPWM 1C62                           __pbssCOMRAM 003A  
                      fullSpeed@power 0066                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                          _isdigit$2084 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1C9C  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                           __pintcode 0008                  __end_of_VerifySignal 1B14  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 003A  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 017E                           __smallconst 0300  
                      __size_of_E_TOG 0008                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 1E40                             _fullSpeed 18F6  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATBbits 000F8A  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u330_47 1CF0  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3893 0197                             main@F3895 01C9  
                           main@F3898 01E2                           _grabRightIR 1976  
               ScanWithRange@LeftFlag 00AF                  grabRightIR@IR_signal 0029  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 10A6  
                        setMotorPWM@m 0032                 ScanWithRange@MoveTime 0073  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0077  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1BE6                            ?_fullSpeed 0062  
                    ScanWithRange@buf 0081                   __end_of_setMotorPWM 14E6  
                            __Hrparam 0000                      __size_of_SendLCD 002E  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1BE6  
                    __size_of_SetLine 0030                    __end_of_grabLeftIR 1A5E  
                    __size_of___awdiv 0084                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0067  
                            __ptext10 1BE6                              __ptext11 1C24  
                            __ptext20 1DBE                              __ptext12 18F6  
                            __ptext21 1B66                              __ptext13 1C9C  
                            __ptext22 1B14                              __ptext14 14E6  
                            __ptext23 1976                              __ptext15 1754  
                            __ptext32 1CD6                              __ptext24 19EA  
                            __ptext16 13AC                              __ptext25 1D10  
                            __ptext17 1872                              __ptext26 1A5E  
                            __ptext18 10A6                              __ptext27 1D40  
                            __ptext19 1E06                              __ptext28 15D8  
                            __ptext29 1E52                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                              _initRFID 1E24  
           ScanWithRange@SensorResult 00B3                        turnRight@power 006B  
                       __size_of_main 07C6                    main@DirectionFound 0182  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 0058                              int$flags 003C  
                            main@Move 0184                   _InterruptHandlerLow 0018  
                          _LCD_String 1A5E                              _turnLeft 1C24  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002A                            _INTCONbits 000FF2  
                         ??_initTimer 0024                              isdigit@c 0026  
                         ??_fullSpeed 0039                           _setMotorPWM 13AC  
                        _VerifySignal 1ABC                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00AB  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
