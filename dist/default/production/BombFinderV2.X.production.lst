

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 19:16:40 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISEbits	set	3990
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  0018E4                     __pcinit:
   189                           	opt stack 0
   190  0018E4                     start_initialization:
   191                           	opt stack 0
   192  0018E4                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (5 bytes)
   196  0018E4  0101               	movlb	1
   197  0018E6  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   198  0018E8  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   199  0018EA  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   200  0018EC  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   201  0018EE  6BFA               	clrf	__pbssBANK1& (0+255),b
   202                           
   203                           ; Clear objects allocated to BANK0 (24 bytes)
   204  0018F0  EE00  F0C0         	lfsr	0,__pbssBANK0
   205  0018F4  0E18               	movlw	24
   206  0018F6                     clear_0:
   207  0018F6  6AEE               	clrf	postinc0,c
   208  0018F8  06E8               	decf	wreg,f,c
   209  0018FA  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  0018FC  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  0018FE  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  001900                     end_of_initialization:
   215                           	opt stack 0
   216  001900                     __end_of__initialization:
   217                           	opt stack 0
   218  001900  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  001902  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  001904  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  001906  6EF8               	movwf	tblptru,c
   222  001908  0100               	movlb	0
   223  00190A  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000C0                     __pbssBANK0:
   243                           	opt stack 0
   244  0000C0                     ScanIR@F3884:
   245                           	opt stack 0
   246  0000C0                     	ds	4
   247  0000C4                     ScanWithRange@F3896:
   248                           	opt stack 0
   249  0000C4                     	ds	4
   250  0000C8                     _ReceivedString:
   251                           	opt stack 0
   252  0000C8                     	ds	16
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK1
   258  0001FA                     __pbssBANK1:
   259                           	opt stack 0
   260  0001FA                     main@F3898:
   261                           	opt stack 0
   262  0001FA                     	ds	4
   263  0001FE                     _RFID_Read:
   264                           	opt stack 0
   265  0001FE                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	cstackBANK2
   271  000200                     __pcstackBANK2:
   272                           	opt stack 0
   273  000200                     main@MoveType:
   274                           	opt stack 0
   275                           
   276                           ; 100 bytes @ 0x0
   277  000200                     	ds	100
   278  000264                     main@mL:
   279                           	opt stack 0
   280                           
   281                           ; 9 bytes @ 0x64
   282  000264                     	ds	9
   283  00026D                     main@mR:
   284                           	opt stack 0
   285                           
   286                           ; 9 bytes @ 0x6D
   287  00026D                     	ds	9
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     main@MoveTime:
   296                           	opt stack 0
   297                           
   298                           ; 200 bytes @ 0x0
   299  000100                     	ds	200
   300  0001C8                     main@buf:
   301                           	opt stack 0
   302                           
   303                           ; 40 bytes @ 0xC8
   304  0001C8                     	ds	40
   305  0001F0                     main@Message:
   306                           	opt stack 0
   307                           
   308                           ; 10 bytes @ 0xF0
   309  0001F0                     	ds	10
   310                           tblptru	equ	0xFF8
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     ??_sprintf:
   318  000060                     setMotorPWM@PWMduty:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x0
   322  000060                     	ds	2
   323  000062                     stop@mL:
   324                           	opt stack 0
   325  000062                     fullSpeedAhead@mL:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329  000062                     	ds	2
   330  000064                     stop@mR:
   331                           	opt stack 0
   332  000064                     fullSpeedAhead@mR:
   333                           	opt stack 0
   334  000064                     sprintf@ap:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000064                     	ds	2
   339  000066                     fullSpeedAhead@power:
   340                           	opt stack 0
   341  000066                     sprintf@prec:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x6
   345  000066                     	ds	1
   346  000067                     turnLeft@mL:
   347                           	opt stack 0
   348  000067                     turnRight@mL:
   349                           	opt stack 0
   350  000067                     fullSpeedBack@mL:
   351                           	opt stack 0
   352  000067                     sprintf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x7
   356  000067                     	ds	2
   357  000069                     sprintf@flag:
   358                           	opt stack 0
   359  000069                     turnLeft@mR:
   360                           	opt stack 0
   361  000069                     turnRight@mR:
   362                           	opt stack 0
   363  000069                     fullSpeedBack@mR:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x9
   367  000069                     	ds	1
   368  00006A                     sprintf@width:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xA
   372  00006A                     	ds	1
   373  00006B                     turnLeft@power:
   374                           	opt stack 0
   375  00006B                     turnRight@power:
   376                           	opt stack 0
   377  00006B                     fullSpeedBack@power:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xB
   381  00006B                     	ds	1
   382  00006C                     sprintf@c:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  00006C                     	ds	1
   387  00006D                     ScanIR@mL:
   388                           	opt stack 0
   389  00006D                     ScanWithRange@mL:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0xD
   393  00006D                     	ds	2
   394  00006F                     ScanIR@mR:
   395                           	opt stack 0
   396  00006F                     ScanWithRange@mR:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  00006F                     	ds	2
   401  000071                     ScanIR@Move:
   402                           	opt stack 0
   403  000071                     ScanWithRange@milliseconds:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x11
   407  000071                     	ds	2
   408  000073                     ScanIR@MoveTime:
   409                           	opt stack 0
   410  000073                     ScanWithRange@MoveTimeEntry:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x13
   414  000073                     	ds	2
   415  000075                     ScanIR@MoveType:
   416                           	opt stack 0
   417  000075                     ScanWithRange@RFID_Read:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x15
   421  000075                     	ds	2
   422  000077                     ScanWithRange@mode:
   423                           	opt stack 0
   424  000077                     ScanIR@buf:
   425                           	opt stack 0
   426                           
   427                           ; 40 bytes @ 0x17
   428  000077                     	ds	2
   429  000079                     ??_ScanWithRange:
   430                           
   431                           ; 0 bytes @ 0x19
   432  000079                     	ds	5
   433  00007E                     ScanWithRange@buf:
   434                           	opt stack 0
   435                           
   436                           ; 40 bytes @ 0x1E
   437  00007E                     	ds	33
   438  00009F                     ScanIR@DirectionMoveThreshold:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x3F
   442  00009F                     	ds	2
   443  0000A1                     ScanIR@SensorResult:
   444                           	opt stack 0
   445                           
   446                           ; 4 bytes @ 0x41
   447  0000A1                     	ds	5
   448  0000A6                     ScanWithRange@n:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x46
   452  0000A6                     	ds	2
   453  0000A8                     ScanWithRange@i:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x48
   457  0000A8                     	ds	2
   458  0000AA                     ScanWithRange@DirectionFoundThreshold:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x4A
   462  0000AA                     	ds	2
   463  0000AC                     ScanWithRange@power:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x4C
   467  0000AC                     	ds	1
   468  0000AD                     ScanWithRange@TimeAboveThreshold:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x4D
   472  0000AD                     	ds	1
   473  0000AE                     ScanWithRange@SensorResult:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x4E
   477  0000AE                     	ds	4
   478  0000B2                     ScanWithRange@LeftFlag:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x52
   482  0000B2                     	ds	2
   483  0000B4                     ScanWithRange@RightFlag:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x54
   487  0000B4                     	ds	2
   488  0000B6                     ??_main:
   489                           
   490                           ; 0 bytes @ 0x56
   491  0000B6                     	ds	2
   492  0000B8                     main@ScanAngle:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x58
   496  0000B8                     	ds	1
   497  0000B9                     main@SensorResult:
   498                           	opt stack 0
   499                           
   500                           ; 4 bytes @ 0x59
   501  0000B9                     	ds	4
   502  0000BD                     main@DirectionFound:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x5D
   506  0000BD                     	ds	1
   507  0000BE                     main@Move:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x5E
   511  0000BE                     	ds	1
   512  0000BF                     main@i:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x5F
   516  0000BF                     	ds	1
   517                           tblptru	equ	0xFF8
   518                           postinc0	equ	0xFEE
   519                           wreg	equ	0xFE8
   520                           
   521                           	psect	cstackCOMRAM
   522  000001                     __pcstackCOMRAM:
   523                           	opt stack 0
   524  000001                     ??i2_delay_tenth_s:
   525                           
   526                           ; 0 bytes @ 0x0
   527  000001                     	ds	1
   528  000002                     i2delay_tenth_s@tenth_seconds:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x1
   532  000002                     	ds	1
   533  000003                     i2delay_tenth_s@i:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x2
   537  000003                     	ds	2
   538  000005                     ??_InterruptHandlerHigh:
   539                           
   540                           ; 0 bytes @ 0x4
   541  000005                     	ds	14
   542  000013                     ??_InterruptHandlerLow:
   543                           
   544                           ; 0 bytes @ 0x12
   545  000013                     	ds	17
   546  000024                     ??_isdigit:
   547  000024                     ??_LCDout:
   548  000024                     ??_delay_tenth_s:
   549  000024                     ?_grabRightIR:
   550                           	opt stack 0
   551  000024                     ?_grabLeftIR:
   552                           	opt stack 0
   553  000024                     ?___wmul:
   554                           	opt stack 0
   555  000024                     ?___lwdiv:
   556                           	opt stack 0
   557  000024                     enableSensor@status:
   558                           	opt stack 0
   559  000024                     VerifySignal@Signal:
   560                           	opt stack 0
   561  000024                     ___wmul@multiplier:
   562                           	opt stack 0
   563  000024                     ___lwdiv@dividend:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x23
   567  000024                     	ds	1
   568  000025                     enableSensor@sensor:
   569                           	opt stack 0
   570  000025                     delay_tenth_s@tenth_seconds:
   571                           	opt stack 0
   572  000025                     _isdigit$1963:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x24
   576  000025                     	ds	1
   577  000026                     ??_grabRightIR:
   578  000026                     ??_grabLeftIR:
   579  000026                     ??_VerifySignal:
   580  000026                     isdigit@c:
   581                           	opt stack 0
   582  000026                     delay_tenth_s@i:
   583                           	opt stack 0
   584  000026                     ___wmul@multiplicand:
   585                           	opt stack 0
   586  000026                     ___lwdiv@divisor:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x25
   590  000026                     	ds	1
   591  000027                     LCDout@number:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x26
   595  000027                     	ds	1
   596  000028                     SendLCD@type:
   597                           	opt stack 0
   598  000028                     ___wmul@product:
   599                           	opt stack 0
   600  000028                     ___lwdiv@quotient:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x27
   604  000028                     	ds	1
   605  000029                     SendLCD@Byte:
   606                           	opt stack 0
   607  000029                     grabRightIR@IR_signal:
   608                           	opt stack 0
   609  000029                     grabLeftIR@IR_signal:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x28
   613  000029                     	ds	1
   614  00002A                     ??_initLCD:
   615  00002A                     ?___awdiv:
   616                           	opt stack 0
   617  00002A                     SetLine@line:
   618                           	opt stack 0
   619  00002A                     ___lwdiv@counter:
   620                           	opt stack 0
   621  00002A                     LCD_String@string:
   622                           	opt stack 0
   623  00002A                     ___awdiv@dividend:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x29
   627  00002A                     	ds	1
   628  00002B                     ?___lwmod:
   629                           	opt stack 0
   630  00002B                     grabRightIR@i:
   631                           	opt stack 0
   632  00002B                     grabLeftIR@i:
   633                           	opt stack 0
   634  00002B                     ___lwmod@dividend:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2A
   638  00002B                     	ds	1
   639  00002C                     VerifySignal@checksum:
   640                           	opt stack 0
   641  00002C                     ___awdiv@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2B
   645  00002C                     	ds	1
   646  00002D                     VerifySignal@hexByte:
   647                           	opt stack 0
   648  00002D                     ___lwmod@divisor:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x2C
   652  00002D                     	ds	1
   653  00002E                     ___awdiv@counter:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x2D
   657  00002E                     	ds	1
   658  00002F                     VerifySignal@i:
   659                           	opt stack 0
   660  00002F                     ___awdiv@sign:
   661                           	opt stack 0
   662  00002F                     ___lwmod@counter:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x2E
   666  00002F                     	ds	1
   667  000030                     ?_sprintf:
   668                           	opt stack 0
   669  000030                     sprintf@sp:
   670                           	opt stack 0
   671  000030                     ___awdiv@quotient:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x2F
   675  000030                     	ds	2
   676  000032                     setMotorPWM@m:
   677                           	opt stack 0
   678  000032                     sprintf@f:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x31
   682  000032                     	ds	2
   683  000034                     ??_setMotorPWM:
   684                           
   685                           ; 0 bytes @ 0x33
   686  000034                     	ds	5
   687  000039                     ??_ScanIR:
   688                           
   689                           ; 0 bytes @ 0x38
   690  000039                     	ds	1
   691  00003A                     tblptru	equ	0xFF8
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           
   695                           ; 0 bytes @ 0x39
   696 ;;
   697 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   698 ;;
   699 ;; *************** function _main *****************
   700 ;; Defined at:
   701 ;;		line 51 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  MoveTime      200    0[BANK1 ] int [100]
   706 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   707 ;;  buf            40  200[BANK1 ] unsigned char [40]
   708 ;;  Message        10  240[BANK1 ] unsigned char [10]
   709 ;;  mR              9  109[BANK2 ] struct DC_motor
   710 ;;  mL              9  100[BANK2 ] struct DC_motor
   711 ;;  SensorResult    4   89[BANK0 ] unsigned int [2]
   712 ;;  i               1   95[BANK0 ] unsigned char 
   713 ;;  Move            1   94[BANK0 ] unsigned char 
   714 ;;  DirectionFou    1   93[BANK0 ] char 
   715 ;;  ScanAngle       1   88[BANK0 ] unsigned char 
   716 ;; Return value:  Size  Location     Type
   717 ;;		None               void
   718 ;; Registers used:
   719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   725 ;;      Params:         0       0       0       0
   726 ;;      Locals:         0       8     250     118
   727 ;;      Temps:          0       2       0       0
   728 ;;      Totals:         0      10     250     118
   729 ;;Total ram usage:      378 bytes
   730 ;; Hardware stack levels required when called:    8
   731 ;; This function calls:
   732 ;;		_LCD_String
   733 ;;		_ScanIR
   734 ;;		_ScanWithRange
   735 ;;		_SendLCD
   736 ;;		_SetLine
   737 ;;		_VerifySignal
   738 ;;		_delay_tenth_s
   739 ;;		_enableSensor
   740 ;;		_fullSpeedAhead
   741 ;;		_fullSpeedBack
   742 ;;		_grabLeftIR
   743 ;;		_grabRightIR
   744 ;;		_initIR
   745 ;;		_initLCD
   746 ;;		_initMotorPWM
   747 ;;		_initRFID
   748 ;;		_initTimer
   749 ;;		_sprintf
   750 ;;		_stop
   751 ;; This function is called by:
   752 ;;		Startup code after reset
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           	psect	text0
   757  000350                     __ptext0:
   758                           	opt stack 0
   759  000350                     _main:
   760                           	opt stack 23
   761                           
   762                           ;main.c: 54: unsigned char Message[10];
   763                           ;main.c: 55: unsigned char i=0;
   764                           
   765                           ;incstack = 0
   766  000350  0E00               	movlw	0
   767  000352  0100               	movlb	0	; () banked
   768  000354  6FBF               	movwf	main@i& (0+255),b
   769                           
   770                           ;main.c: 56: signed char DirectionFound=0;
   771  000356  0E00               	movlw	0
   772  000358  0100               	movlb	0	; () banked
   773  00035A  6FBD               	movwf	main@DirectionFound& (0+255),b
   774                           
   775                           ;main.c: 57: int MoveTime[100];
   776                           ;main.c: 58: char MoveType[100];
   777                           ;main.c: 59: char Move=0;
   778  00035C  0E00               	movlw	0
   779  00035E  0100               	movlb	0	; () banked
   780  000360  6FBE               	movwf	main@Move& (0+255),b
   781                           
   782                           ; BSR set to: 0
   783                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   784  000362  C1FA  F0B9         	movff	main@F3898,main@SensorResult
   785  000366  C1FB  F0BA         	movff	main@F3898+1,main@SensorResult+1
   786  00036A  C1FC  F0BB         	movff	main@F3898+2,main@SensorResult+2
   787  00036E  C1FD  F0BC         	movff	main@F3898+3,main@SensorResult+3
   788                           
   789                           ;main.c: 61: char buf[40];
   790                           ;main.c: 63: unsigned char ScanAngle=60;
   791  000372  0E3C               	movlw	60
   792  000374  0100               	movlb	0	; () banked
   793  000376  6FB8               	movwf	main@ScanAngle& (0+255),b
   794                           
   795                           ; BSR set to: 0
   796                           ;main.c: 66: INTCONbits.GIEH=1;
   797  000378  8EF2               	bsf	intcon,7,c	;volatile
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 67: INTCONbits.GIEL=1;
   801  00037A  8CF2               	bsf	intcon,6,c	;volatile
   802                           
   803                           ; BSR set to: 0
   804                           ;main.c: 68: INTCONbits.PEIE=1;
   805  00037C  8CF2               	bsf	intcon,6,c	;volatile
   806                           
   807                           ; BSR set to: 0
   808                           ;main.c: 69: RCONbits.IPEN=1;
   809  00037E  8ED0               	bsf	4048,7,c	;volatile
   810                           
   811                           ; BSR set to: 0
   812                           ;main.c: 72: IPR1bits.RCIP=0;
   813  000380  9A9F               	bcf	3999,5,c	;volatile
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 73: PIE1bits.RCIE=1;
   817  000382  8A9D               	bsf	3997,5,c	;volatile
   818                           
   819                           ; BSR set to: 0
   820                           ;main.c: 76: TRISCbits.RC3=1;
   821  000384  8694               	bsf	3988,3,c	;volatile
   822                           
   823                           ; BSR set to: 0
   824                           ;main.c: 77: INTCONbits.INT0IE=1;
   825  000386  88F2               	bsf	intcon,4,c	;volatile
   826                           
   827                           ; BSR set to: 0
   828                           ;main.c: 80: PIR1bits.RC1IF=0;
   829  000388  9A9E               	bcf	3998,5,c	;volatile
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 81: INTCONbits.INT0IF=0;
   833  00038A  92F2               	bcf	intcon,1,c	;volatile
   834                           
   835                           ;main.c: 84: struct DC_motor mL, mR;
   836                           ;main.c: 85: mL.power=0;
   837  00038C  0E00               	movlw	0
   838  00038E  0102               	movlb	2	; () banked
   839  000390  6F64               	movwf	main@mL& (0+255),b
   840                           
   841                           ;main.c: 86: mL.direction=1;
   842  000392  0E01               	movlw	1
   843  000394  0102               	movlb	2	; () banked
   844  000396  6F65               	movwf	(main@mL+1)& (0+255),b
   845                           
   846                           ; BSR set to: 2
   847                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   848  000398  0E79               	movlw	121
   849  00039A  0102               	movlb	2	; () banked
   850  00039C  6F66               	movwf	(main@mL+2)& (0+255),b
   851  00039E  0E0F               	movlw	15
   852  0003A0  0102               	movlb	2	; () banked
   853  0003A2  6F67               	movwf	(main@mL+3)& (0+255),b
   854                           
   855                           ; BSR set to: 2
   856                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   857  0003A4  0E78               	movlw	120
   858  0003A6  0102               	movlb	2	; () banked
   859  0003A8  6F68               	movwf	(main@mL+4)& (0+255),b
   860  0003AA  0E0F               	movlw	15
   861  0003AC  0102               	movlb	2	; () banked
   862  0003AE  6F69               	movwf	(main@mL+5)& (0+255),b
   863                           
   864                           ;main.c: 89: mL.dir_pin=0;
   865  0003B0  0E00               	movlw	0
   866  0003B2  0102               	movlb	2	; () banked
   867  0003B4  6F6A               	movwf	(main@mL+6)& (0+255),b
   868                           
   869                           ;main.c: 90: mL.PWMperiod=199;
   870  0003B6  0E00               	movlw	0
   871  0003B8  0102               	movlb	2	; () banked
   872  0003BA  6F6C               	movwf	(main@mL+8)& (0+255),b
   873  0003BC  0EC7               	movlw	199
   874  0003BE  6F6B               	movwf	(main@mL+7)& (0+255),b
   875                           
   876                           ;main.c: 92: mR.power=0;
   877  0003C0  0E00               	movlw	0
   878  0003C2  0102               	movlb	2	; () banked
   879  0003C4  6F6D               	movwf	main@mR& (0+255),b
   880                           
   881                           ;main.c: 93: mR.direction=1;
   882  0003C6  0E01               	movlw	1
   883  0003C8  0102               	movlb	2	; () banked
   884  0003CA  6F6E               	movwf	(main@mR+1)& (0+255),b
   885                           
   886                           ; BSR set to: 2
   887                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   888  0003CC  0E77               	movlw	119
   889  0003CE  0102               	movlb	2	; () banked
   890  0003D0  6F6F               	movwf	(main@mR+2)& (0+255),b
   891  0003D2  0E0F               	movlw	15
   892  0003D4  0102               	movlb	2	; () banked
   893  0003D6  6F70               	movwf	(main@mR+3)& (0+255),b
   894                           
   895                           ; BSR set to: 2
   896                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   897  0003D8  0E76               	movlw	118
   898  0003DA  0102               	movlb	2	; () banked
   899  0003DC  6F71               	movwf	(main@mR+4)& (0+255),b
   900  0003DE  0E0F               	movlw	15
   901  0003E0  0102               	movlb	2	; () banked
   902  0003E2  6F72               	movwf	(main@mR+5)& (0+255),b
   903                           
   904                           ;main.c: 96: mR.dir_pin=2;
   905  0003E4  0E02               	movlw	2
   906  0003E6  0102               	movlb	2	; () banked
   907  0003E8  6F73               	movwf	(main@mR+6)& (0+255),b
   908                           
   909                           ;main.c: 97: mR.PWMperiod=199;
   910  0003EA  0E00               	movlw	0
   911  0003EC  0102               	movlb	2	; () banked
   912  0003EE  6F75               	movwf	(main@mR+8)& (0+255),b
   913  0003F0  0EC7               	movlw	199
   914  0003F2  6F74               	movwf	(main@mR+7)& (0+255),b
   915                           
   916                           ;main.c: 99: OSCCON = 0x72;
   917  0003F4  0E72               	movlw	114
   918  0003F6  6ED3               	movwf	4051,c	;volatile
   919  0003F8                     l381:
   920  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   921  0003FA  D23A               	goto	l3372
   922  0003FC  D7FD               	goto	l381
   923  0003FE                     l3216:
   924                           
   925                           ;main.c: 112: stop(&mL, &mR);
   926  0003FE  0E64               	movlw	low main@mL
   927  000400  0100               	movlb	0	; () banked
   928  000402  6F62               	movwf	stop@mL& (0+255),b
   929  000404  0E02               	movlw	high main@mL
   930  000406  0100               	movlb	0	; () banked
   931  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   932  00040A  0E6D               	movlw	low main@mR
   933  00040C  0100               	movlb	0	; () banked
   934  00040E  6F64               	movwf	stop@mR& (0+255),b
   935  000410  0E02               	movlw	high main@mR
   936  000412  0100               	movlb	0	; () banked
   937  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   938  000416  EC98  F009         	call	_stop	;wreg free
   939                           
   940                           ;main.c: 113: RFID_Read=0;
   941  00041A  0E00               	movlw	0
   942  00041C  0101               	movlb	1	; () banked
   943  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   944                           
   945                           ; BSR set to: 1
   946                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   947  000420  ECE2  F00A         	call	_grabLeftIR	;wreg free
   948  000424  C024  F0B9         	movff	?_grabLeftIR,main@SensorResult
   949  000428  C025  F0BA         	movff	?_grabLeftIR+1,main@SensorResult+1
   950                           
   951                           ;main.c: 117: SensorResult[1]=grabRightIR();
   952  00042C  ECA9  F00A         	call	_grabRightIR	;wreg free
   953  000430  C024  F0BB         	movff	?_grabRightIR,main@SensorResult+2
   954  000434  C025  F0BC         	movff	?_grabRightIR+1,main@SensorResult+3
   955                           
   956                           ;main.c: 121: CAP1BUFH=0;
   957  000438  0E00               	movlw	0
   958  00043A  6E69               	movwf	3945,c	;volatile
   959                           
   960                           ;main.c: 122: CAP1BUFL=0;
   961  00043C  0E00               	movlw	0
   962  00043E  6E68               	movwf	3944,c	;volatile
   963                           
   964                           ;main.c: 123: CAP2BUFH=0;
   965  000440  0E00               	movlw	0
   966  000442  6E67               	movwf	3943,c	;volatile
   967                           
   968                           ;main.c: 124: CAP2BUFL=0;
   969  000444  0E00               	movlw	0
   970  000446  6E66               	movwf	3942,c	;volatile
   971                           
   972                           ;main.c: 127: SendLCD(0b00000001,0);
   973  000448  0E00               	movlw	0
   974  00044A  6E28               	movwf	SendLCD@type,c
   975  00044C  0E01               	movlw	1
   976  00044E  EC5A  F00C         	call	_SendLCD
   977                           
   978                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   979  000452  0E21               	movlw	33
   980  000454                     u2807:
   981  000454  2EE8               	decfsz	wreg,f,c
   982  000456  D7FE               	goto	u2807
   983  000458  F000               	nop	
   984                           
   985                           ;main.c: 129: SendLCD(0b00000010,0);
   986  00045A  0E00               	movlw	0
   987  00045C  6E28               	movwf	SendLCD@type,c
   988  00045E  0E02               	movlw	2
   989  000460  EC5A  F00C         	call	_SendLCD
   990                           
   991                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   992  000464  0E06               	movlw	6
   993  000466  0100               	movlb	0	; () banked
   994  000468  6FB6               	movwf	??_main& (0+255),b
   995  00046A  0E30               	movlw	48
   996  00046C                     u2817:
   997  00046C  2EE8               	decfsz	wreg,f,c
   998  00046E  D7FE               	goto	u2817
   999  000470  2FB6               	decfsz	??_main& (0+255),f,b
  1000  000472  D7FC               	goto	u2817
  1001  000474  D000               	nop2	
  1002                           
  1003                           ;main.c: 131: SetLine(1);
  1004  000476  0E01               	movlw	1
  1005  000478  EC42  F00C         	call	_SetLine
  1006                           
  1007                           ;main.c: 132: LCD_String("      Inert Mode");
  1008  00047C  0E1C               	movlw	low STR_5
  1009  00047E  6E2A               	movwf	LCD_String@string,c
  1010  000480  0E03               	movlw	high STR_5
  1011  000482  6E2B               	movwf	LCD_String@string+1,c
  1012  000484  EC1B  F00B         	call	_LCD_String	;wreg free
  1013                           
  1014                           ;main.c: 133: SetLine(2);
  1015  000488  0E02               	movlw	2
  1016  00048A  EC42  F00C         	call	_SetLine
  1017                           
  1018                           ;main.c: 134: if (RFID_Read) {
  1019  00048E  0101               	movlb	1	; () banked
  1020  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1021  000492  B4D8               	btfsc	status,2,c
  1022  000494  D007               	goto	l3250
  1023                           
  1024                           ; BSR set to: 1
  1025                           ;main.c: 135: LCD_String(Message);
  1026  000496  0EF0               	movlw	low main@Message
  1027  000498  6E2A               	movwf	LCD_String@string,c
  1028  00049A  0E01               	movlw	high main@Message
  1029  00049C  6E2B               	movwf	LCD_String@string+1,c
  1030  00049E  EC1B  F00B         	call	_LCD_String	;wreg free
  1031                           
  1032                           ;main.c: 136: } else {
  1033  0004A2  D1E6               	goto	l3372
  1034  0004A4                     l3250:
  1035                           
  1036                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1037  0004A4  0EC8               	movlw	low main@buf
  1038  0004A6  6E30               	movwf	sprintf@sp,c
  1039  0004A8  0E01               	movlw	high main@buf
  1040  0004AA  6E31               	movwf	sprintf@sp+1,c
  1041  0004AC  0E0B               	movlw	low STR_6
  1042  0004AE  6E32               	movwf	sprintf@f,c
  1043  0004B0  0E03               	movlw	high STR_6
  1044  0004B2  6E33               	movwf	sprintf@f+1,c
  1045  0004B4  C0B9  F034         	movff	main@SensorResult,?_sprintf+4
  1046  0004B8  C0BA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1047  0004BC  C0BB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1048  0004C0  C0BC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1049  0004C4  ECE0  F005         	call	_sprintf	;wreg free
  1050                           
  1051                           ;main.c: 138: LCD_String(buf);
  1052  0004C8  0EC8               	movlw	low main@buf
  1053  0004CA  6E2A               	movwf	LCD_String@string,c
  1054  0004CC  0E01               	movlw	high main@buf
  1055  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1056  0004D0  EC1B  F00B         	call	_LCD_String	;wreg free
  1057                           
  1058                           ;main.c: 139: }
  1059                           ;main.c: 142: break;
  1060  0004D4  D1CD               	goto	l3372
  1061  0004D6                     l3254:
  1062                           
  1063                           ;main.c: 147: initMotorPWM();
  1064  0004D6  EC29  F00C         	call	_initMotorPWM	;wreg free
  1065                           
  1066                           ;main.c: 148: initTimer();
  1067  0004DA  ECDB  F00C         	call	_initTimer	;wreg free
  1068                           
  1069                           ;main.c: 149: initRFID();
  1070  0004DE  ECCD  F00C         	call	_initRFID	;wreg free
  1071                           
  1072                           ;main.c: 150: initLCD();
  1073  0004E2  ECE0  F008         	call	_initLCD	;wreg free
  1074                           
  1075                           ;main.c: 151: initIR();
  1076  0004E6  ECAD  F00C         	call	_initIR	;wreg free
  1077                           
  1078                           ;main.c: 153: enableSensor(0, 1);
  1079  0004EA  0E01               	movlw	1
  1080  0004EC  6E24               	movwf	enableSensor@status,c
  1081  0004EE  0E00               	movlw	0
  1082  0004F0  EC87  F00C         	call	_enableSensor
  1083                           
  1084                           ;main.c: 154: enableSensor(1, 1);
  1085  0004F4  0E01               	movlw	1
  1086  0004F6  6E24               	movwf	enableSensor@status,c
  1087  0004F8  0E01               	movlw	1
  1088  0004FA  EC87  F00C         	call	_enableSensor
  1089                           
  1090                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1091  0004FE  0E64               	movlw	low main@mL
  1092  000500  0100               	movlb	0	; () banked
  1093  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1094  000504  0E02               	movlw	high main@mL
  1095  000506  0100               	movlb	0	; () banked
  1096  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1097  00050A  0E6D               	movlw	low main@mR
  1098  00050C  0100               	movlb	0	; () banked
  1099  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1100  000510  0E02               	movlw	high main@mR
  1101  000512  0100               	movlb	0	; () banked
  1102  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1103  000516  0E64               	movlw	100
  1104  000518  0100               	movlb	0	; () banked
  1105  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1106  00051C  EC69  F00A         	call	_fullSpeedAhead	;wreg free
  1107                           
  1108                           ;main.c: 158: delay_tenth_s(1);
  1109  000520  0E01               	movlw	1
  1110  000522  ECF1  F00B         	call	_delay_tenth_s
  1111                           
  1112                           ;main.c: 160: mode=-1;
  1113  000526  683B               	setf	_mode,c	;volatile
  1114                           
  1115                           ;main.c: 162: break;
  1116  000528  D1A3               	goto	l3372
  1117  00052A                     l3274:
  1118                           
  1119                           ;main.c: 170: SetLine(1);
  1120  00052A  0E01               	movlw	1
  1121  00052C  EC42  F00C         	call	_SetLine
  1122                           
  1123                           ;main.c: 171: LCD_String("Searching");
  1124  000530  0E44               	movlw	low STR_7
  1125  000532  6E2A               	movwf	LCD_String@string,c
  1126  000534  0E03               	movlw	high STR_7
  1127  000536  6E2B               	movwf	LCD_String@string+1,c
  1128  000538  EC1B  F00B         	call	_LCD_String	;wreg free
  1129                           
  1130                           ;main.c: 173: if (DirectionFound==-1) {
  1131  00053C  0100               	movlb	0	; () banked
  1132  00053E  29BD               	incf	main@DirectionFound& (0+255),w,b
  1133  000540  A4D8               	btfss	status,2,c
  1134  000542  D030               	goto	l3290
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1138  000544  0E64               	movlw	low main@mL
  1139  000546  0100               	movlb	0	; () banked
  1140  000548  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1141  00054A  0E02               	movlw	high main@mL
  1142  00054C  0100               	movlb	0	; () banked
  1143  00054E  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1144  000550  0E6D               	movlw	low main@mR
  1145  000552  0100               	movlb	0	; () banked
  1146  000554  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1147  000556  0E02               	movlw	high main@mR
  1148  000558  0100               	movlb	0	; () banked
  1149  00055A  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1150  00055C  0E64               	movlw	100
  1151  00055E  0100               	movlb	0	; () banked
  1152  000560  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1153  000562  EC69  F00A         	call	_fullSpeedAhead	;wreg free
  1154                           
  1155                           ;main.c: 179: delay_tenth_s(6);
  1156  000566  0E06               	movlw	6
  1157  000568  ECF1  F00B         	call	_delay_tenth_s
  1158                           
  1159                           ;main.c: 180: stop(&mL,&mR);
  1160  00056C  0E64               	movlw	low main@mL
  1161  00056E  0100               	movlb	0	; () banked
  1162  000570  6F62               	movwf	stop@mL& (0+255),b
  1163  000572  0E02               	movlw	high main@mL
  1164  000574  0100               	movlb	0	; () banked
  1165  000576  6F63               	movwf	(stop@mL+1)& (0+255),b
  1166  000578  0E6D               	movlw	low main@mR
  1167  00057A  0100               	movlb	0	; () banked
  1168  00057C  6F64               	movwf	stop@mR& (0+255),b
  1169  00057E  0E02               	movlw	high main@mR
  1170  000580  0100               	movlb	0	; () banked
  1171  000582  6F65               	movwf	(stop@mR+1)& (0+255),b
  1172  000584  EC98  F009         	call	_stop	;wreg free
  1173                           
  1174                           ;main.c: 181: DirectionFound=0;
  1175  000588  0E00               	movlw	0
  1176  00058A  0100               	movlb	0	; () banked
  1177  00058C  6FBD               	movwf	main@DirectionFound& (0+255),b
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;main.c: 182: MoveType[Move]=0;
  1181  00058E  0100               	movlb	0	; () banked
  1182  000590  51BE               	movf	main@Move& (0+255),w,b
  1183  000592  0D01               	mullw	1
  1184  000594  0E00               	movlw	low main@MoveType
  1185  000596  24F3               	addwf	prodl,w,c
  1186  000598  6ED9               	movwf	fsr2l,c
  1187  00059A  0E02               	movlw	high main@MoveType
  1188  00059C  20F4               	addwfc	prodh,w,c
  1189  00059E  6EDA               	movwf	fsr2h,c
  1190  0005A0  0E00               	movlw	0
  1191  0005A2  D031               	goto	L1
  1192  0005A4                     l3290:
  1193                           
  1194                           ; BSR set to: 0
  1195  0005A4  0100               	movlb	0	; () banked
  1196  0005A6  51BD               	movf	main@DirectionFound& (0+255),w,b
  1197  0005A8  0100               	movlb	0	; () banked
  1198  0005AA  A4D8               	btfss	status,2,c
  1199  0005AC  D02E               	goto	l3296
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1203                           ;main.c: 186: &MoveTime[Move], &RFID_Read, &mode);
  1204  0005AE  0E64               	movlw	low main@mL
  1205  0005B0  0100               	movlb	0	; () banked
  1206  0005B2  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1207  0005B4  0E02               	movlw	high main@mL
  1208  0005B6  0100               	movlb	0	; () banked
  1209  0005B8  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1210  0005BA  0E6D               	movlw	low main@mR
  1211  0005BC  0100               	movlb	0	; () banked
  1212  0005BE  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1213  0005C0  0E02               	movlw	high main@mR
  1214  0005C2  0100               	movlb	0	; () banked
  1215  0005C4  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1216  0005C6  C0B8  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1217  0005CA  0100               	movlb	0	; () banked
  1218  0005CC  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1219  0005CE  0100               	movlb	0	; () banked
  1220  0005D0  51BE               	movf	main@Move& (0+255),w,b
  1221  0005D2  0D02               	mullw	2
  1222  0005D4  0E00               	movlw	low main@MoveTime
  1223  0005D6  24F3               	addwf	prodl,w,c
  1224  0005D8  0100               	movlb	0	; () banked
  1225  0005DA  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1226  0005DC  0E01               	movlw	high main@MoveTime
  1227  0005DE  20F4               	addwfc	prodh,w,c
  1228  0005E0  0100               	movlb	0	; () banked
  1229  0005E2  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1230  0005E4  0EFE               	movlw	low _RFID_Read
  1231  0005E6  0100               	movlb	0	; () banked
  1232  0005E8  6F75               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1233  0005EA  0E01               	movlw	high _RFID_Read
  1234  0005EC  0100               	movlb	0	; () banked
  1235  0005EE  6F76               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1236  0005F0  0E3B               	movlw	low _mode
  1237  0005F2  0100               	movlb	0	; () banked
  1238  0005F4  6F77               	movwf	ScanWithRange@mode& (0+255),b
  1239  0005F6  0E00               	movlw	high _mode
  1240  0005F8  0100               	movlb	0	; () banked
  1241  0005FA  6F78               	movwf	(ScanWithRange@mode+1)& (0+255),b
  1242  0005FC  EC49  F004         	call	_ScanWithRange	;wreg free
  1243  000600  0100               	movlb	0	; () banked
  1244  000602  6FBD               	movwf	main@DirectionFound& (0+255),b
  1245  000604  D030               	goto	l3304
  1246  000606                     L1:
  1247  000606  6EDF               	movwf	indf2,c
  1248                           
  1249                           ;main.c: 188: } else if (DirectionFound==1) {
  1250  000608  D110               	goto	l3360
  1251  00060A                     l3296:
  1252                           
  1253                           ; BSR set to: 0
  1254  00060A  0100               	movlb	0	; () banked
  1255  00060C  05BD               	decf	main@DirectionFound& (0+255),w,b
  1256  00060E  A4D8               	btfss	status,2,c
  1257  000610  D023               	goto	l3300
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;main.c: 190: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1261  000612  0E64               	movlw	low main@mL
  1262  000614  0100               	movlb	0	; () banked
  1263  000616  6F6D               	movwf	ScanIR@mL& (0+255),b
  1264  000618  0E02               	movlw	high main@mL
  1265  00061A  0100               	movlb	0	; () banked
  1266  00061C  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1267  00061E  0E6D               	movlw	low main@mR
  1268  000620  0100               	movlb	0	; () banked
  1269  000622  6F6F               	movwf	ScanIR@mR& (0+255),b
  1270  000624  0E02               	movlw	high main@mR
  1271  000626  0100               	movlb	0	; () banked
  1272  000628  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1273  00062A  0EBE               	movlw	low main@Move
  1274  00062C  0100               	movlb	0	; () banked
  1275  00062E  6F71               	movwf	ScanIR@Move& (0+255),b
  1276  000630  0E00               	movlw	high main@Move
  1277  000632  0100               	movlb	0	; () banked
  1278  000634  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1279  000636  0E00               	movlw	low main@MoveTime
  1280  000638  0100               	movlb	0	; () banked
  1281  00063A  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1282  00063C  0E01               	movlw	high main@MoveTime
  1283  00063E  0100               	movlb	0	; () banked
  1284  000640  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1285  000642  0E00               	movlw	low main@MoveType
  1286  000644  0100               	movlb	0	; () banked
  1287  000646  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1288  000648  0E02               	movlw	high main@MoveType
  1289  00064A  0100               	movlb	0	; () banked
  1290  00064C  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1291  00064E  EC00  F008         	call	_ScanIR	;wreg free
  1292  000652  0100               	movlb	0	; () banked
  1293  000654  6FBD               	movwf	main@DirectionFound& (0+255),b
  1294                           
  1295                           ;main.c: 191: } else if (DirectionFound==2) {
  1296  000656  D0E9               	goto	l3360
  1297  000658                     l3300:
  1298                           
  1299                           ; BSR set to: 0
  1300  000658  0E02               	movlw	2
  1301  00065A  0100               	movlb	0	; () banked
  1302  00065C  19BD               	xorwf	main@DirectionFound& (0+255),w,b
  1303  00065E  A4D8               	btfss	status,2,c
  1304  000660  D0E4               	goto	l3360
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 193: mode=2;
  1308  000662  0E02               	movlw	2
  1309  000664  6E3B               	movwf	_mode,c	;volatile
  1310  000666                     l3304:
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 194: MoveType[Move]=1;
  1314  000666  0100               	movlb	0	; () banked
  1315  000668  51BE               	movf	main@Move& (0+255),w,b
  1316  00066A  0D01               	mullw	1
  1317  00066C  0E00               	movlw	low main@MoveType
  1318  00066E  24F3               	addwf	prodl,w,c
  1319  000670  6ED9               	movwf	fsr2l,c
  1320  000672  0E02               	movlw	high main@MoveType
  1321  000674  20F4               	addwfc	prodh,w,c
  1322  000676  6EDA               	movwf	fsr2h,c
  1323  000678  0E01               	movlw	1
  1324  00067A  D7C5               	goto	L1
  1325  00067C                     l3308:
  1326                           
  1327                           ;main.c: 206: if (RFID_Read) {
  1328  00067C  0101               	movlb	1	; () banked
  1329  00067E  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1330  000680  B4D8               	btfsc	status,2,c
  1331  000682  D0A2               	goto	l3350
  1332                           
  1333                           ; BSR set to: 1
  1334                           ;main.c: 207: stop(&mL, &mR);
  1335  000684  0E64               	movlw	low main@mL
  1336  000686  0100               	movlb	0	; () banked
  1337  000688  6F62               	movwf	stop@mL& (0+255),b
  1338  00068A  0E02               	movlw	high main@mL
  1339  00068C  0100               	movlb	0	; () banked
  1340  00068E  6F63               	movwf	(stop@mL+1)& (0+255),b
  1341  000690  0E6D               	movlw	low main@mR
  1342  000692  0100               	movlb	0	; () banked
  1343  000694  6F64               	movwf	stop@mR& (0+255),b
  1344  000696  0E02               	movlw	high main@mR
  1345  000698  0100               	movlb	0	; () banked
  1346  00069A  6F65               	movwf	(stop@mR+1)& (0+255),b
  1347  00069C  EC98  F009         	call	_stop	;wreg free
  1348                           
  1349                           ;main.c: 208: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1350  0006A0  0E03               	movlw	3
  1351  0006A2  0100               	movlb	0	; () banked
  1352  0006A4  19D7               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1353  0006A6  A4D8               	btfss	status,2,c
  1354  0006A8  D002               	goto	u2720
  1355  0006AA  0E01               	movlw	1
  1356  0006AC  D001               	goto	u2722
  1357  0006AE                     u2720:
  1358  0006AE  0E00               	movlw	0
  1359  0006B0                     u2722:
  1360  0006B0  0100               	movlb	0	; () banked
  1361  0006B2  6FB6               	movwf	??_main& (0+255),b
  1362  0006B4  0E02               	movlw	2
  1363  0006B6  0100               	movlb	0	; () banked
  1364  0006B8  19C8               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1365  0006BA  A4D8               	btfss	status,2,c
  1366  0006BC  D002               	goto	u2730
  1367  0006BE  0E01               	movlw	1
  1368  0006C0  D001               	goto	u2732
  1369  0006C2                     u2730:
  1370  0006C2  0E00               	movlw	0
  1371  0006C4                     u2732:
  1372  0006C4  0100               	movlb	0	; () banked
  1373  0006C6  15B6               	andwf	??_main& (0+255),w,b
  1374  0006C8  A0E8               	btfss	wreg,0,c
  1375  0006CA  D0D2               	goto	l3372
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 209: if (VerifySignal(ReceivedString)){
  1379  0006CC  0EC8               	movlw	low _ReceivedString
  1380  0006CE  6E24               	movwf	VerifySignal@Signal,c
  1381  0006D0  0E00               	movlw	high _ReceivedString
  1382  0006D2  6E25               	movwf	VerifySignal@Signal+1,c
  1383  0006D4  EC3E  F009         	call	_VerifySignal	;wreg free
  1384  0006D8  0900               	iorlw	0
  1385  0006DA  B4D8               	btfsc	status,2,c
  1386  0006DC  D041               	goto	l3342
  1387                           
  1388                           ;main.c: 211: for (i=0; i<10; i++){
  1389  0006DE  0E00               	movlw	0
  1390  0006E0  0100               	movlb	0	; () banked
  1391  0006E2  6FBF               	movwf	main@i& (0+255),b
  1392  0006E4                     l3318:
  1393                           
  1394                           ; BSR set to: 0
  1395  0006E4  0E09               	movlw	9
  1396  0006E6  0100               	movlb	0	; () banked
  1397  0006E8  65BF               	cpfsgt	main@i& (0+255),b
  1398  0006EA  D001               	goto	l3322
  1399  0006EC  D020               	goto	l3328
  1400  0006EE                     l3322:
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;main.c: 212: Message[i] = ReceivedString[i+1];
  1404  0006EE  0100               	movlb	0	; () banked
  1405  0006F0  51BF               	movf	main@i& (0+255),w,b
  1406  0006F2  0100               	movlb	0	; () banked
  1407  0006F4  6FB6               	movwf	??_main& (0+255),b
  1408  0006F6  6BB7               	clrf	(??_main+1)& (0+255),b
  1409  0006F8  0E01               	movlw	1
  1410  0006FA  0100               	movlb	0	; () banked
  1411  0006FC  27B6               	addwf	??_main& (0+255),f,b
  1412  0006FE  0E00               	movlw	0
  1413  000700  23B7               	addwfc	(??_main+1)& (0+255),f,b
  1414  000702  0EC8               	movlw	low _ReceivedString
  1415  000704  0100               	movlb	0	; () banked
  1416  000706  25B6               	addwf	??_main& (0+255),w,b
  1417  000708  6ED9               	movwf	fsr2l,c
  1418  00070A  0E00               	movlw	high _ReceivedString
  1419  00070C  0100               	movlb	0	; () banked
  1420  00070E  21B7               	addwfc	(??_main+1)& (0+255),w,b
  1421  000710  6EDA               	movwf	fsr2h,c
  1422  000712  0100               	movlb	0	; () banked
  1423  000714  51BF               	movf	main@i& (0+255),w,b
  1424  000716  0D01               	mullw	1
  1425  000718  0EF0               	movlw	low main@Message
  1426  00071A  24F3               	addwf	prodl,w,c
  1427  00071C  6EE1               	movwf	fsr1l,c
  1428  00071E  0E01               	movlw	high main@Message
  1429  000720  20F4               	addwfc	prodh,w,c
  1430  000722  6EE2               	movwf	fsr1h,c
  1431  000724  CFDF FFE7          	movff	indf2,indf1
  1432                           
  1433                           ; BSR set to: 0
  1434  000728  0100               	movlb	0	; () banked
  1435  00072A  2BBF               	incf	main@i& (0+255),f,b
  1436  00072C  D7DB               	goto	l3318
  1437  00072E                     l3328:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 213: }
  1441                           ;main.c: 216: for (i=0; i<16; i++) {
  1442  00072E  0E00               	movlw	0
  1443  000730  0100               	movlb	0	; () banked
  1444  000732  6FBF               	movwf	main@i& (0+255),b
  1445  000734                     l3330:
  1446                           
  1447                           ; BSR set to: 0
  1448  000734  0E0F               	movlw	15
  1449  000736  0100               	movlb	0	; () banked
  1450  000738  65BF               	cpfsgt	main@i& (0+255),b
  1451  00073A  D001               	goto	l3334
  1452  00073C  D00E               	goto	l3340
  1453  00073E                     l3334:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;main.c: 217: ReceivedString[i]=0;
  1457  00073E  0100               	movlb	0	; () banked
  1458  000740  51BF               	movf	main@i& (0+255),w,b
  1459  000742  0D01               	mullw	1
  1460  000744  0EC8               	movlw	low _ReceivedString
  1461  000746  24F3               	addwf	prodl,w,c
  1462  000748  6ED9               	movwf	fsr2l,c
  1463  00074A  0E00               	movlw	high _ReceivedString
  1464  00074C  20F4               	addwfc	prodh,w,c
  1465  00074E  6EDA               	movwf	fsr2h,c
  1466  000750  0E00               	movlw	0
  1467  000752  6EDF               	movwf	indf2,c
  1468                           
  1469                           ; BSR set to: 0
  1470  000754  0100               	movlb	0	; () banked
  1471  000756  2BBF               	incf	main@i& (0+255),f,b
  1472  000758  D7ED               	goto	l3330
  1473  00075A                     l3340:
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;main.c: 218: }
  1477                           ;main.c: 219: mode=3;
  1478  00075A  0E03               	movlw	3
  1479  00075C  6E3B               	movwf	_mode,c	;volatile
  1480                           
  1481                           ;main.c: 221: } else {
  1482  00075E  D088               	goto	l3372
  1483  000760                     l3342:
  1484                           
  1485                           ;main.c: 222: fullSpeedBack(&mL,&mR, 100);
  1486  000760  0E64               	movlw	low main@mL
  1487  000762  0100               	movlb	0	; () banked
  1488  000764  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1489  000766  0E02               	movlw	high main@mL
  1490  000768  0100               	movlb	0	; () banked
  1491  00076A  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1492  00076C  0E6D               	movlw	low main@mR
  1493  00076E  0100               	movlb	0	; () banked
  1494  000770  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1495  000772  0E02               	movlw	high main@mR
  1496  000774  0100               	movlb	0	; () banked
  1497  000776  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1498  000778  0E64               	movlw	100
  1499  00077A  0100               	movlb	0	; () banked
  1500  00077C  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1501  00077E  EC94  F00B         	call	_fullSpeedBack	;wreg free
  1502                           
  1503                           ;main.c: 223: delay_tenth_s(5);
  1504  000782  0E05               	movlw	5
  1505  000784  ECF1  F00B         	call	_delay_tenth_s
  1506                           
  1507                           ;main.c: 224: stop(&mL,&mR);
  1508  000788  0E64               	movlw	low main@mL
  1509  00078A  0100               	movlb	0	; () banked
  1510  00078C  6F62               	movwf	stop@mL& (0+255),b
  1511  00078E  0E02               	movlw	high main@mL
  1512  000790  0100               	movlb	0	; () banked
  1513  000792  6F63               	movwf	(stop@mL+1)& (0+255),b
  1514  000794  0E6D               	movlw	low main@mR
  1515  000796  0100               	movlb	0	; () banked
  1516  000798  6F64               	movwf	stop@mR& (0+255),b
  1517  00079A  0E02               	movlw	high main@mR
  1518  00079C  0100               	movlb	0	; () banked
  1519  00079E  6F65               	movwf	(stop@mR+1)& (0+255),b
  1520  0007A0  EC98  F009         	call	_stop	;wreg free
  1521                           
  1522                           ;main.c: 225: fullSpeedAhead(&mL,&mR, 100);
  1523  0007A4  0E64               	movlw	low main@mL
  1524  0007A6  0100               	movlb	0	; () banked
  1525  0007A8  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1526  0007AA  0E02               	movlw	high main@mL
  1527  0007AC  0100               	movlb	0	; () banked
  1528  0007AE  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1529  0007B0  0E6D               	movlw	low main@mR
  1530  0007B2  0100               	movlb	0	; () banked
  1531  0007B4  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1532  0007B6  0E02               	movlw	high main@mR
  1533  0007B8  0100               	movlb	0	; () banked
  1534  0007BA  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1535  0007BC  0E64               	movlw	100
  1536  0007BE  0100               	movlb	0	; () banked
  1537  0007C0  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1538  0007C2  EC69  F00A         	call	_fullSpeedAhead	;wreg free
  1539                           
  1540                           ;main.c: 226: }
  1541                           ;main.c: 227: }
  1542                           ;main.c: 228: } else {
  1543  0007C6  D054               	goto	l3372
  1544  0007C8                     l3350:
  1545                           
  1546                           ;main.c: 229: DirectionFound=1;
  1547  0007C8  0E01               	movlw	1
  1548  0007CA  0100               	movlb	0	; () banked
  1549  0007CC  6FBD               	movwf	main@DirectionFound& (0+255),b
  1550                           
  1551                           ;main.c: 230: mode=1;
  1552  0007CE  0E01               	movlw	1
  1553  0007D0  6E3B               	movwf	_mode,c	;volatile
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 232: fullSpeedAhead(&mL,&mR, 100);
  1557  0007D2  0E64               	movlw	low main@mL
  1558  0007D4  0100               	movlb	0	; () banked
  1559  0007D6  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1560  0007D8  0E02               	movlw	high main@mL
  1561  0007DA  0100               	movlb	0	; () banked
  1562  0007DC  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1563  0007DE  0E6D               	movlw	low main@mR
  1564  0007E0  0100               	movlb	0	; () banked
  1565  0007E2  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1566  0007E4  0E02               	movlw	high main@mR
  1567  0007E6  0100               	movlb	0	; () banked
  1568  0007E8  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1569  0007EA  0E64               	movlw	100
  1570  0007EC  0100               	movlb	0	; () banked
  1571  0007EE  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1572  0007F0  EC69  F00A         	call	_fullSpeedAhead	;wreg free
  1573                           
  1574                           ;main.c: 233: delay_tenth_s(5);
  1575  0007F4  0E05               	movlw	5
  1576  0007F6  ECF1  F00B         	call	_delay_tenth_s
  1577                           
  1578                           ;main.c: 234: MoveType[Move] = 0;
  1579  0007FA  0100               	movlb	0	; () banked
  1580  0007FC  51BE               	movf	main@Move& (0+255),w,b
  1581  0007FE  0D01               	mullw	1
  1582  000800  0E00               	movlw	low main@MoveType
  1583  000802  24F3               	addwf	prodl,w,c
  1584  000804  6ED9               	movwf	fsr2l,c
  1585  000806  0E02               	movlw	high main@MoveType
  1586  000808  20F4               	addwfc	prodh,w,c
  1587  00080A  6EDA               	movwf	fsr2h,c
  1588  00080C  0E00               	movlw	0
  1589  00080E  6EDF               	movwf	indf2,c
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;main.c: 235: MoveTime[Move] = 5;
  1593  000810  0100               	movlb	0	; () banked
  1594  000812  51BE               	movf	main@Move& (0+255),w,b
  1595  000814  0D02               	mullw	2
  1596  000816  0E00               	movlw	low main@MoveTime
  1597  000818  24F3               	addwf	prodl,w,c
  1598  00081A  6ED9               	movwf	fsr2l,c
  1599  00081C  0E01               	movlw	high main@MoveTime
  1600  00081E  20F4               	addwfc	prodh,w,c
  1601  000820  6EDA               	movwf	fsr2h,c
  1602  000822  0E05               	movlw	5
  1603  000824  6EDE               	movwf	postinc2,c
  1604  000826  0E00               	movlw	0
  1605  000828  6EDD               	movwf	postdec2,c
  1606  00082A                     l3360:
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;main.c: 236: Move++;
  1610  00082A  0100               	movlb	0	; () banked
  1611  00082C  2BBE               	incf	main@Move& (0+255),f,b
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;main.c: 237: }
  1615                           ;main.c: 239: break;
  1616  00082E  D020               	goto	l3372
  1617  000830                     l3362:
  1618                           
  1619                           ;main.c: 244: SetLine(1);
  1620  000830  0E01               	movlw	1
  1621  000832  EC42  F00C         	call	_SetLine
  1622                           
  1623                           ;main.c: 245: LCD_String(Message);
  1624  000836  0EF0               	movlw	low main@Message
  1625  000838  6E2A               	movwf	LCD_String@string,c
  1626  00083A  0E01               	movlw	high main@Message
  1627  00083C  6E2B               	movwf	LCD_String@string+1,c
  1628  00083E  EC1B  F00B         	call	_LCD_String	;wreg free
  1629                           
  1630                           ;main.c: 246: SetLine(2);
  1631  000842  0E02               	movlw	2
  1632  000844  EC42  F00C         	call	_SetLine
  1633                           
  1634                           ;main.c: 247: LCD_String("Going Home");
  1635  000848  0E39               	movlw	low STR_8
  1636  00084A  6E2A               	movwf	LCD_String@string,c
  1637  00084C  0E03               	movlw	high STR_8
  1638  00084E  6E2B               	movwf	LCD_String@string+1,c
  1639  000850  EC1B  F00B         	call	_LCD_String	;wreg free
  1640                           
  1641                           ;main.c: 248: stop(&mL,&mR);
  1642  000854  0E64               	movlw	low main@mL
  1643  000856  0100               	movlb	0	; () banked
  1644  000858  6F62               	movwf	stop@mL& (0+255),b
  1645  00085A  0E02               	movlw	high main@mL
  1646  00085C  0100               	movlb	0	; () banked
  1647  00085E  6F63               	movwf	(stop@mL+1)& (0+255),b
  1648  000860  0E6D               	movlw	low main@mR
  1649  000862  0100               	movlb	0	; () banked
  1650  000864  6F64               	movwf	stop@mR& (0+255),b
  1651  000866  0E02               	movlw	high main@mR
  1652  000868  0100               	movlb	0	; () banked
  1653  00086A  6F65               	movwf	(stop@mR+1)& (0+255),b
  1654  00086C  EC98  F009         	call	_stop	;wreg free
  1655  000870                     l3372:
  1656  000870  503B               	movf	_mode,w,c	;volatile
  1657                           
  1658                           ; Switch size 1, requested type "space"
  1659                           ; Number of cases is 5, Range of values is 0 to 255
  1660                           ; switch strategies available:
  1661                           ; Name         Instructions Cycles
  1662                           ; simple_byte           16     9 (average)
  1663                           ;	Chosen strategy is simple_byte
  1664  000872  0A00               	xorlw	0	; case 0
  1665  000874  B4D8               	btfsc	status,2,c
  1666  000876  D62F               	goto	l3254
  1667  000878  0A01               	xorlw	1	; case 1
  1668  00087A  B4D8               	btfsc	status,2,c
  1669  00087C  D656               	goto	l3274
  1670  00087E  0A03               	xorlw	3	; case 2
  1671  000880  B4D8               	btfsc	status,2,c
  1672  000882  D6FC               	goto	l3308
  1673  000884  0A01               	xorlw	1	; case 3
  1674  000886  B4D8               	btfsc	status,2,c
  1675  000888  D7D3               	goto	l3362
  1676  00088A  0AFC               	xorlw	252	; case 255
  1677  00088C  B4D8               	btfsc	status,2,c
  1678  00088E  D5B7               	goto	l3216
  1679  000890  D7EF               	goto	l3372
  1680  000892                     __end_of_main:
  1681                           	opt stack 0
  1682                           tblptru	equ	0xFF8
  1683                           prodh	equ	0xFF4
  1684                           prodl	equ	0xFF3
  1685                           intcon	equ	0xFF2
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           indf1	equ	0xFE7
  1689                           fsr1h	equ	0xFE2
  1690                           fsr1l	equ	0xFE1
  1691                           indf2	equ	0xFDF
  1692                           postinc2	equ	0xFDE
  1693                           postdec2	equ	0xFDD
  1694                           fsr2h	equ	0xFDA
  1695                           fsr2l	equ	0xFD9
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _initTimer *****************
  1699 ;; Defined at:
  1700 ;;		line 8 in file "Movement.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;		None               void
  1707 ;; Registers used:
  1708 ;;		None
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1714 ;;      Params:         0       0       0       0
  1715 ;;      Locals:         0       0       0       0
  1716 ;;      Temps:          0       0       0       0
  1717 ;;      Totals:         0       0       0       0
  1718 ;;Total ram usage:        0 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    3
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_main
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           	psect	text1
  1729  0019B6                     __ptext1:
  1730                           	opt stack 0
  1731  0019B6                     _initTimer:
  1732                           	opt stack 27
  1733                           
  1734                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1735                           
  1736                           ;incstack = 0
  1737  0019B6  9ED5               	bcf	4053,7,c	;volatile
  1738                           
  1739                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1740  0019B8  9CD5               	bcf	4053,6,c	;volatile
  1741                           
  1742                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1743  0019BA  9AD5               	bcf	4053,5,c	;volatile
  1744                           
  1745                           ;Movement.c: 13: T0CONbits.PSA=0;
  1746  0019BC  96D5               	bcf	4053,3,c	;volatile
  1747                           
  1748                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1749  0019BE  80D5               	bsf	4053,0,c	;volatile
  1750  0019C0  82D5               	bsf	4053,1,c	;volatile
  1751  0019C2  84D5               	bsf	4053,2,c	;volatile
  1752                           
  1753                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1754  0019C4  9AF2               	bcf	intcon,5,c	;volatile
  1755  0019C6  0012               	return		;funcret
  1756  0019C8                     __end_of_initTimer:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           prodh	equ	0xFF4
  1760                           prodl	equ	0xFF3
  1761                           intcon	equ	0xFF2
  1762                           postinc0	equ	0xFEE
  1763                           wreg	equ	0xFE8
  1764                           indf1	equ	0xFE7
  1765                           fsr1h	equ	0xFE2
  1766                           fsr1l	equ	0xFE1
  1767                           indf2	equ	0xFDF
  1768                           postinc2	equ	0xFDE
  1769                           postdec2	equ	0xFDD
  1770                           fsr2h	equ	0xFDA
  1771                           fsr2l	equ	0xFD9
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _initRFID *****************
  1775 ;; Defined at:
  1776 ;;		line 5 in file "RFID_Reader.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;		None               void
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1790 ;;      Params:         0       0       0       0
  1791 ;;      Locals:         0       0       0       0
  1792 ;;      Temps:          0       0       0       0
  1793 ;;      Totals:         0       0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    3
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text2
  1805  00199A                     __ptext2:
  1806                           	opt stack 0
  1807  00199A                     _initRFID:
  1808                           	opt stack 27
  1809                           
  1810                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1811                           
  1812                           ;incstack = 0
  1813  00199A  5094               	movf	3988,w,c	;volatile
  1814  00199C  09C0               	iorlw	192
  1815  00199E  6E94               	movwf	3988,c	;volatile
  1816                           
  1817                           ;RFID_Reader.c: 10: SPBRG=205;
  1818  0019A0  0ECD               	movlw	205
  1819  0019A2  6EAF               	movwf	4015,c	;volatile
  1820                           
  1821                           ;RFID_Reader.c: 11: SPBRGH=0;
  1822  0019A4  0E00               	movlw	0
  1823  0019A6  6EB0               	movwf	4016,c	;volatile
  1824                           
  1825                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1826  0019A8  86AA               	bsf	4010,3,c	;volatile
  1827                           
  1828                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1829  0019AA  84AC               	bsf	4012,2,c	;volatile
  1830                           
  1831                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1832  0019AC  88AB               	bsf	4011,4,c	;volatile
  1833                           
  1834                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1835  0019AE  8EAB               	bsf	4011,7,c	;volatile
  1836                           
  1837                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1838  0019B0  98AC               	bcf	4012,4,c	;volatile
  1839                           
  1840                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1841  0019B2  9CAB               	bcf	4011,6,c	;volatile
  1842  0019B4  0012               	return		;funcret
  1843  0019B6                     __end_of_initRFID:
  1844                           	opt stack 0
  1845                           tblptru	equ	0xFF8
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           intcon	equ	0xFF2
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           indf1	equ	0xFE7
  1852                           fsr1h	equ	0xFE2
  1853                           fsr1l	equ	0xFE1
  1854                           indf2	equ	0xFDF
  1855                           postinc2	equ	0xFDE
  1856                           postdec2	equ	0xFDD
  1857                           fsr2h	equ	0xFDA
  1858                           fsr2l	equ	0xFD9
  1859                           status	equ	0xFD8
  1860                           
  1861 ;; *************** function _initMotorPWM *****************
  1862 ;; Defined at:
  1863 ;;		line 4 in file "dc_motor.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;		None
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;		None
  1868 ;; Return value:  Size  Location     Type
  1869 ;;		None               void
  1870 ;; Registers used:
  1871 ;;		wreg, status,2
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1877 ;;      Params:         0       0       0       0
  1878 ;;      Locals:         0       0       0       0
  1879 ;;      Temps:          0       0       0       0
  1880 ;;      Totals:         0       0       0       0
  1881 ;;Total ram usage:        0 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    3
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_main
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text3
  1892  001852                     __ptext3:
  1893                           	opt stack 0
  1894  001852                     _initMotorPWM:
  1895                           	opt stack 27
  1896                           
  1897                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1898                           
  1899                           ;incstack = 0
  1900  001852  0E00               	movlw	0
  1901  001854  6E7F               	movwf	3967,c	;volatile
  1902                           
  1903                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1904  001856  0E80               	movlw	128
  1905  001858  6E7E               	movwf	3966,c	;volatile
  1906                           
  1907                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1908  00185A  0E6F               	movlw	111
  1909  00185C  6E6F               	movwf	3951,c	;volatile
  1910                           
  1911                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1912  00185E  0E00               	movlw	0
  1913  001860  6E6E               	movwf	3950,c	;volatile
  1914                           
  1915                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1916  001862  0EC7               	movlw	199
  1917  001864  6E7B               	movwf	3963,c	;volatile
  1918                           
  1919                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1920  001866  0E00               	movlw	0
  1921  001868  6E7A               	movwf	3962,c	;volatile
  1922                           
  1923                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1924  00186A  0E00               	movlw	0
  1925  00186C  6E79               	movwf	3961,c	;volatile
  1926                           
  1927                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1928  00186E  0E00               	movlw	0
  1929  001870  6E78               	movwf	3960,c	;volatile
  1930                           
  1931                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1932  001872  0E00               	movlw	0
  1933  001874  6E77               	movwf	3959,c	;volatile
  1934                           
  1935                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1936  001876  0E00               	movlw	0
  1937  001878  6E76               	movwf	3958,c	;volatile
  1938                           
  1939                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1940  00187A  9093               	bcf	3987,0,c	;volatile
  1941                           
  1942                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1943  00187C  9293               	bcf	3987,1,c	;volatile
  1944                           
  1945                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1946  00187E  9493               	bcf	3987,2,c	;volatile
  1947                           
  1948                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1949  001880  9693               	bcf	3987,3,c	;volatile
  1950  001882  0012               	return		;funcret
  1951  001884                     __end_of_initMotorPWM:
  1952                           	opt stack 0
  1953                           tblptru	equ	0xFF8
  1954                           prodh	equ	0xFF4
  1955                           prodl	equ	0xFF3
  1956                           intcon	equ	0xFF2
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           indf1	equ	0xFE7
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           indf2	equ	0xFDF
  1963                           postinc2	equ	0xFDE
  1964                           postdec2	equ	0xFDD
  1965                           fsr2h	equ	0xFDA
  1966                           fsr2l	equ	0xFD9
  1967                           status	equ	0xFD8
  1968                           
  1969 ;; *************** function _initLCD *****************
  1970 ;; Defined at:
  1971 ;;		line 38 in file "LCD.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;		None               void
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1985 ;;      Params:         0       0       0       0
  1986 ;;      Locals:         0       0       0       0
  1987 ;;      Temps:          1       0       0       0
  1988 ;;      Totals:         1       0       0       0
  1989 ;;Total ram usage:        1 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    6
  1992 ;; This function calls:
  1993 ;;		_LCDout
  1994 ;;		_SendLCD
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text4
  2001  0011C0                     __ptext4:
  2002                           	opt stack 0
  2003  0011C0                     _initLCD:
  2004                           	opt stack 24
  2005                           
  2006                           ;LCD.c: 44: TRISAbits.RA6=0;
  2007                           
  2008                           ;incstack = 0
  2009  0011C0  9C92               	bcf	3986,6,c	;volatile
  2010                           
  2011                           ;LCD.c: 45: TRISCbits.RC0=0;
  2012  0011C2  9094               	bcf	3988,0,c	;volatile
  2013                           
  2014                           ;LCD.c: 46: TRISCbits.RC1=0;
  2015  0011C4  9294               	bcf	3988,1,c	;volatile
  2016                           
  2017                           ;LCD.c: 47: TRISCbits.RC2=0;
  2018  0011C6  9494               	bcf	3988,2,c	;volatile
  2019                           
  2020                           ;LCD.c: 48: TRISDbits.RD0=0;
  2021  0011C8  9095               	bcf	3989,0,c	;volatile
  2022                           
  2023                           ;LCD.c: 49: TRISDbits.RD1=0;
  2024  0011CA  9295               	bcf	3989,1,c	;volatile
  2025                           
  2026                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2027  0011CC  0E27               	movlw	39
  2028  0011CE  6E2A               	movwf	??_initLCD& (0+255),c
  2029  0011D0  0EF5               	movlw	245
  2030  0011D2                     u2827:
  2031  0011D2  2EE8               	decfsz	wreg,f,c
  2032  0011D4  D7FE               	goto	u2827
  2033  0011D6  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2034  0011D8  D7FC               	goto	u2827
  2035  0011DA  F000               	nop	
  2036                           
  2037                           ;LCD.c: 52: LCDout(0b0011);
  2038  0011DC  0E03               	movlw	3
  2039  0011DE  EC7D  F008         	call	_LCDout
  2040                           
  2041                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2042  0011E2  0E0D               	movlw	13
  2043  0011E4  6E2A               	movwf	??_initLCD& (0+255),c
  2044  0011E6  0EFC               	movlw	252
  2045  0011E8                     u2837:
  2046  0011E8  2EE8               	decfsz	wreg,f,c
  2047  0011EA  D7FE               	goto	u2837
  2048  0011EC  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2049  0011EE  D7FC               	goto	u2837
  2050                           
  2051                           ;LCD.c: 54: LCDout(0b0011);
  2052  0011F0  0E03               	movlw	3
  2053  0011F2  EC7D  F008         	call	_LCDout
  2054                           
  2055                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2056  0011F6  0E85               	movlw	133
  2057  0011F8                     u2847:
  2058  0011F8  2EE8               	decfsz	wreg,f,c
  2059  0011FA  D7FE               	goto	u2847
  2060  0011FC  F000               	nop	
  2061                           
  2062                           ;LCD.c: 56: LCDout(0b0011);
  2063  0011FE  0E03               	movlw	3
  2064  001200  EC7D  F008         	call	_LCDout
  2065                           
  2066                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2067  001204  0E21               	movlw	33
  2068  001206                     u2857:
  2069  001206  2EE8               	decfsz	wreg,f,c
  2070  001208  D7FE               	goto	u2857
  2071  00120A  F000               	nop	
  2072                           
  2073                           ;LCD.c: 58: LCDout(0b0010);
  2074  00120C  0E02               	movlw	2
  2075  00120E  EC7D  F008         	call	_LCDout
  2076                           
  2077                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2078  001212  0E21               	movlw	33
  2079  001214                     u2867:
  2080  001214  2EE8               	decfsz	wreg,f,c
  2081  001216  D7FE               	goto	u2867
  2082  001218  F000               	nop	
  2083                           
  2084                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2085  00121A  0E00               	movlw	0
  2086  00121C  6E28               	movwf	SendLCD@type,c
  2087  00121E  0E28               	movlw	40
  2088  001220  EC5A  F00C         	call	_SendLCD
  2089                           
  2090                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2091  001224  0E21               	movlw	33
  2092  001226                     u2877:
  2093  001226  2EE8               	decfsz	wreg,f,c
  2094  001228  D7FE               	goto	u2877
  2095  00122A  F000               	nop	
  2096                           
  2097                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2098  00122C  0E00               	movlw	0
  2099  00122E  6E28               	movwf	SendLCD@type,c
  2100  001230  0E08               	movlw	8
  2101  001232  EC5A  F00C         	call	_SendLCD
  2102                           
  2103                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2104  001236  0E21               	movlw	33
  2105  001238                     u2887:
  2106  001238  2EE8               	decfsz	wreg,f,c
  2107  00123A  D7FE               	goto	u2887
  2108  00123C  F000               	nop	
  2109                           
  2110                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2111  00123E  0E00               	movlw	0
  2112  001240  6E28               	movwf	SendLCD@type,c
  2113  001242  0E01               	movlw	1
  2114  001244  EC5A  F00C         	call	_SendLCD
  2115                           
  2116                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2117  001248  0E0D               	movlw	13
  2118  00124A  6E2A               	movwf	??_initLCD& (0+255),c
  2119  00124C  0EFC               	movlw	252
  2120  00124E                     u2897:
  2121  00124E  2EE8               	decfsz	wreg,f,c
  2122  001250  D7FE               	goto	u2897
  2123  001252  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2124  001254  D7FC               	goto	u2897
  2125                           
  2126                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2127  001256  0E00               	movlw	0
  2128  001258  6E28               	movwf	SendLCD@type,c
  2129  00125A  0E06               	movlw	6
  2130  00125C  EC5A  F00C         	call	_SendLCD
  2131                           
  2132                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2133  001260  0E21               	movlw	33
  2134  001262                     u2907:
  2135  001262  2EE8               	decfsz	wreg,f,c
  2136  001264  D7FE               	goto	u2907
  2137  001266  F000               	nop	
  2138                           
  2139                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2140  001268  0E00               	movlw	0
  2141  00126A  6E28               	movwf	SendLCD@type,c
  2142  00126C  0E0C               	movlw	12
  2143  00126E  EC5A  F00C         	call	_SendLCD
  2144                           
  2145                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2146  001272  0E21               	movlw	33
  2147  001274                     u2917:
  2148  001274  2EE8               	decfsz	wreg,f,c
  2149  001276  D7FE               	goto	u2917
  2150  001278  F000               	nop	
  2151  00127A  0012               	return		;funcret
  2152  00127C                     __end_of_initLCD:
  2153                           	opt stack 0
  2154                           tblptru	equ	0xFF8
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           intcon	equ	0xFF2
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           indf1	equ	0xFE7
  2161                           fsr1h	equ	0xFE2
  2162                           fsr1l	equ	0xFE1
  2163                           indf2	equ	0xFDF
  2164                           postinc2	equ	0xFDE
  2165                           postdec2	equ	0xFDD
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _initIR *****************
  2171 ;; Defined at:
  2172 ;;		line 30 in file "IR_Reading.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;		None               void
  2179 ;; Registers used:
  2180 ;;		wreg, status,2
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2186 ;;      Params:         0       0       0       0
  2187 ;;      Locals:         0       0       0       0
  2188 ;;      Temps:          0       0       0       0
  2189 ;;      Totals:         0       0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    3
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text5
  2201  00195A                     __ptext5:
  2202                           	opt stack 0
  2203  00195A                     _initIR:
  2204                           	opt stack 27
  2205                           
  2206                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2207                           
  2208                           ;incstack = 0
  2209  00195A  9489               	bcf	3977,2,c	;volatile
  2210                           
  2211                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2212  00195C  9689               	bcf	3977,3,c	;volatile
  2213                           
  2214                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2215  00195E  8492               	bsf	3986,2,c	;volatile
  2216                           
  2217                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2218  001960  8692               	bsf	3986,3,c	;volatile
  2219                           
  2220                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2221  001962  94B8               	bcf	4024,2,c	;volatile
  2222                           
  2223                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2224  001964  96B8               	bcf	4024,3,c	;volatile
  2225                           
  2226                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2227  001966  9CB8               	bcf	4024,6,c	;volatile
  2228                           
  2229                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2230  001968  9EB8               	bcf	4024,7,c	;volatile
  2231                           
  2232                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2233  00196A  0E06               	movlw	6
  2234  00196C  6E63               	movwf	3939,c	;volatile
  2235                           
  2236                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2237  00196E  0E06               	movlw	6
  2238  001970  6E62               	movwf	3938,c	;volatile
  2239                           
  2240                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2241  001972  9096               	bcf	3990,0,c	;volatile
  2242                           
  2243                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2244  001974  9296               	bcf	3990,1,c	;volatile
  2245                           
  2246                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2247  001976  0E59               	movlw	89
  2248  001978  6EB7               	movwf	4023,c	;volatile
  2249  00197A  0012               	return		;funcret
  2250  00197C                     __end_of_initIR:
  2251                           	opt stack 0
  2252                           tblptru	equ	0xFF8
  2253                           prodh	equ	0xFF4
  2254                           prodl	equ	0xFF3
  2255                           intcon	equ	0xFF2
  2256                           postinc0	equ	0xFEE
  2257                           wreg	equ	0xFE8
  2258                           indf1	equ	0xFE7
  2259                           fsr1h	equ	0xFE2
  2260                           fsr1l	equ	0xFE1
  2261                           indf2	equ	0xFDF
  2262                           postinc2	equ	0xFDE
  2263                           postdec2	equ	0xFDD
  2264                           fsr2h	equ	0xFDA
  2265                           fsr2l	equ	0xFD9
  2266                           status	equ	0xFD8
  2267                           
  2268 ;; *************** function _fullSpeedBack *****************
  2269 ;; Defined at:
  2270 ;;		line 125 in file "dc_motor.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2273 ;;		 -> main@mL(9), 
  2274 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2275 ;;		 -> main@mR(9), 
  2276 ;;  power           1   11[BANK0 ] unsigned char 
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;		None               void
  2281 ;; Registers used:
  2282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2288 ;;      Params:         0       5       0       0
  2289 ;;      Locals:         0       0       0       0
  2290 ;;      Temps:          0       0       0       0
  2291 ;;      Totals:         0       5       0       0
  2292 ;;Total ram usage:        5 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    6
  2295 ;; This function calls:
  2296 ;;		_fullSpeedAhead
  2297 ;; This function is called by:
  2298 ;;		_main
  2299 ;; This function uses a non-reentrant model
  2300 ;;
  2301                           
  2302                           	psect	text6
  2303  001728                     __ptext6:
  2304                           	opt stack 0
  2305  001728                     _fullSpeedBack:
  2306                           	opt stack 24
  2307                           
  2308                           ;dc_motor.c: 128: mL->direction=0;
  2309                           
  2310                           ;incstack = 0
  2311  001728  0100               	movlb	0	; () banked
  2312  00172A  EE20 F001          	lfsr	2,1
  2313  00172E  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2314  001730  26D9               	addwf	fsr2l,f,c
  2315  001732  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2316  001734  22DA               	addwfc	fsr2h,f,c
  2317  001736  0E00               	movlw	0
  2318  001738  6EDF               	movwf	indf2,c
  2319                           
  2320                           ;dc_motor.c: 129: mR->direction=0;
  2321  00173A  0100               	movlb	0	; () banked
  2322  00173C  EE20 F001          	lfsr	2,1
  2323  001740  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2324  001742  26D9               	addwf	fsr2l,f,c
  2325  001744  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2326  001746  22DA               	addwfc	fsr2h,f,c
  2327  001748  0E00               	movlw	0
  2328  00174A  6EDF               	movwf	indf2,c
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2332  00174C  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2333  001750  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2334  001754  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2335  001758  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2336  00175C  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2337  001760  EC69  F00A         	call	_fullSpeedAhead	;wreg free
  2338  001764  0012               	return		;funcret
  2339  001766                     __end_of_fullSpeedBack:
  2340                           	opt stack 0
  2341                           tblptru	equ	0xFF8
  2342                           prodh	equ	0xFF4
  2343                           prodl	equ	0xFF3
  2344                           intcon	equ	0xFF2
  2345                           postinc0	equ	0xFEE
  2346                           wreg	equ	0xFE8
  2347                           indf1	equ	0xFE7
  2348                           fsr1h	equ	0xFE2
  2349                           fsr1l	equ	0xFE1
  2350                           indf2	equ	0xFDF
  2351                           postinc2	equ	0xFDE
  2352                           postdec2	equ	0xFDD
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _enableSensor *****************
  2358 ;; Defined at:
  2359 ;;		line 106 in file "IR_Reading.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  sensor          1    wreg     unsigned char 
  2362 ;;  status          1   35[COMRAM] unsigned char 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  sensor          1   36[COMRAM] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;		None               void
  2367 ;; Registers used:
  2368 ;;		wreg, status,2, status,0
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2374 ;;      Params:         1       0       0       0
  2375 ;;      Locals:         1       0       0       0
  2376 ;;      Temps:          0       0       0       0
  2377 ;;      Totals:         2       0       0       0
  2378 ;;Total ram usage:        2 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    3
  2381 ;; This function calls:
  2382 ;;		Nothing
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text7
  2389  00190E                     __ptext7:
  2390                           	opt stack 0
  2391  00190E                     _enableSensor:
  2392                           	opt stack 27
  2393                           
  2394                           ;incstack = 0
  2395                           ;enableSensor@sensor stored from wreg
  2396  00190E  6E25               	movwf	enableSensor@sensor,c
  2397                           
  2398                           ;IR_Reading.c: 108: if (sensor==0){
  2399  001910  5025               	movf	enableSensor@sensor,w,c
  2400  001912  A4D8               	btfss	status,2,c
  2401  001914  D006               	goto	l2328
  2402                           
  2403                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2404  001916  B024               	btfsc	enableSensor@status,0,c
  2405  001918  D002               	bra	u1765
  2406  00191A  908D               	bcf	3981,0,c	;volatile
  2407  00191C  D001               	bra	u1766
  2408  00191E                     u1765:
  2409  00191E  808D               	bsf	3981,0,c	;volatile
  2410  001920                     u1766:
  2411                           
  2412                           ;IR_Reading.c: 110: } else if (sensor==1){
  2413  001920  0012               	return	
  2414  001922                     l2328:
  2415  001922  0425               	decf	enableSensor@sensor,w,c
  2416  001924  A4D8               	btfss	status,2,c
  2417  001926  0012               	return	
  2418                           
  2419                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2420  001928  B024               	btfsc	enableSensor@status,0,c
  2421  00192A  D002               	bra	u1785
  2422  00192C  928D               	bcf	3981,1,c	;volatile
  2423  00192E  D001               	bra	u1786
  2424  001930                     u1785:
  2425  001930  828D               	bsf	3981,1,c	;volatile
  2426  001932                     u1786:
  2427  001932  0012               	return	
  2428  001934                     __end_of_enableSensor:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           intcon	equ	0xFF2
  2434                           postinc0	equ	0xFEE
  2435                           wreg	equ	0xFE8
  2436                           indf1	equ	0xFE7
  2437                           fsr1h	equ	0xFE2
  2438                           fsr1l	equ	0xFE1
  2439                           indf2	equ	0xFDF
  2440                           postinc2	equ	0xFDE
  2441                           postdec2	equ	0xFDD
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _VerifySignal *****************
  2447 ;; Defined at:
  2448 ;;		line 55 in file "RFID_Reader.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2451 ;;		 -> ReceivedString(16), 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  hexByte         2   44[COMRAM] unsigned int 
  2454 ;;  i               1   46[COMRAM] unsigned char 
  2455 ;;  checksum        1   43[COMRAM] unsigned char 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      unsigned char 
  2458 ;; Registers used:
  2459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2465 ;;      Params:         2       0       0       0
  2466 ;;      Locals:         4       0       0       0
  2467 ;;      Temps:          6       0       0       0
  2468 ;;      Totals:        12       0       0       0
  2469 ;;Total ram usage:       12 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    3
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           	psect	text8
  2480  00127C                     __ptext8:
  2481                           	opt stack 0
  2482  00127C                     _VerifySignal:
  2483                           	opt stack 27
  2484                           
  2485                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2486                           
  2487                           ;incstack = 0
  2488  00127C  0E00               	movlw	0
  2489  00127E  6E2C               	movwf	VerifySignal@checksum,c
  2490                           
  2491                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2492  001280  0E00               	movlw	0
  2493  001282  6E2E               	movwf	VerifySignal@hexByte+1,c
  2494  001284  0E00               	movlw	0
  2495  001286  6E2D               	movwf	VerifySignal@hexByte,c
  2496                           
  2497                           ;RFID_Reader.c: 58: unsigned char i=0;
  2498  001288  0E00               	movlw	0
  2499  00128A  6E2F               	movwf	VerifySignal@i,c
  2500                           
  2501                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2502  00128C  EE20 F004          	lfsr	2,4
  2503  001290  5024               	movf	VerifySignal@Signal,w,c
  2504  001292  26D9               	addwf	fsr2l,f,c
  2505  001294  5025               	movf	VerifySignal@Signal+1,w,c
  2506  001296  22DA               	addwfc	fsr2h,f,c
  2507  001298  50DF               	movf	indf2,w,c
  2508  00129A  6E26               	movwf	??_VerifySignal& (0+255),c
  2509  00129C  EE20 F003          	lfsr	2,3
  2510  0012A0  5024               	movf	VerifySignal@Signal,w,c
  2511  0012A2  26D9               	addwf	fsr2l,f,c
  2512  0012A4  5025               	movf	VerifySignal@Signal+1,w,c
  2513  0012A6  22DA               	addwfc	fsr2h,f,c
  2514  0012A8  50DF               	movf	indf2,w,c
  2515  0012AA  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2516  0012AC  5027               	movf	??_VerifySignal+1,w,c
  2517  0012AE  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2518  0012B0  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2519  0012B2  5026               	movf	??_VerifySignal,w,c
  2520  0012B4  2428               	addwf	??_VerifySignal+2,w,c
  2521  0012B6  6E2D               	movwf	VerifySignal@hexByte,c
  2522  0012B8  0E00               	movlw	0
  2523  0012BA  2029               	addwfc	??_VerifySignal+3,w,c
  2524  0012BC  6E2E               	movwf	VerifySignal@hexByte+1,c
  2525                           
  2526                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2527  0012BE  EE20 F002          	lfsr	2,2
  2528  0012C2  5024               	movf	VerifySignal@Signal,w,c
  2529  0012C4  26D9               	addwf	fsr2l,f,c
  2530  0012C6  5025               	movf	VerifySignal@Signal+1,w,c
  2531  0012C8  22DA               	addwfc	fsr2h,f,c
  2532  0012CA  50DF               	movf	indf2,w,c
  2533  0012CC  182D               	xorwf	VerifySignal@hexByte,w,c
  2534  0012CE  6E2C               	movwf	VerifySignal@checksum,c
  2535                           
  2536                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2537  0012D0  0E05               	movlw	5
  2538  0012D2  6E2F               	movwf	VerifySignal@i,c
  2539  0012D4                     l2536:
  2540  0012D4  0E09               	movlw	9
  2541  0012D6  642F               	cpfsgt	VerifySignal@i,c
  2542  0012D8  D001               	goto	l2540
  2543  0012DA  D028               	goto	l2548
  2544  0012DC                     l2540:
  2545                           
  2546                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2547  0012DC  502F               	movf	VerifySignal@i,w,c
  2548  0012DE  6E26               	movwf	??_VerifySignal& (0+255),c
  2549  0012E0  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2550  0012E2  0E01               	movlw	1
  2551  0012E4  2626               	addwf	??_VerifySignal,f,c
  2552  0012E6  0E00               	movlw	0
  2553  0012E8  2227               	addwfc	??_VerifySignal+1,f,c
  2554  0012EA  5026               	movf	??_VerifySignal,w,c
  2555  0012EC  2424               	addwf	VerifySignal@Signal,w,c
  2556  0012EE  6ED9               	movwf	fsr2l,c
  2557  0012F0  5027               	movf	??_VerifySignal+1,w,c
  2558  0012F2  2025               	addwfc	VerifySignal@Signal+1,w,c
  2559  0012F4  6EDA               	movwf	fsr2h,c
  2560  0012F6  50DF               	movf	indf2,w,c
  2561  0012F8  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2562  0012FA  502F               	movf	VerifySignal@i,w,c
  2563  0012FC  0D01               	mullw	1
  2564  0012FE  50F3               	movf	prodl,w,c
  2565  001300  2424               	addwf	VerifySignal@Signal,w,c
  2566  001302  6ED9               	movwf	fsr2l,c
  2567  001304  50F4               	movf	prodh,w,c
  2568  001306  2025               	addwfc	VerifySignal@Signal+1,w,c
  2569  001308  6EDA               	movwf	fsr2h,c
  2570  00130A  50DF               	movf	indf2,w,c
  2571  00130C  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2572  00130E  5029               	movf	??_VerifySignal+3,w,c
  2573  001310  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2574  001312  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2575  001314  5028               	movf	??_VerifySignal+2,w,c
  2576  001316  242A               	addwf	??_VerifySignal+4,w,c
  2577  001318  6E2D               	movwf	VerifySignal@hexByte,c
  2578  00131A  0E00               	movlw	0
  2579  00131C  202B               	addwfc	??_VerifySignal+5,w,c
  2580  00131E  6E2E               	movwf	VerifySignal@hexByte+1,c
  2581                           
  2582                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2583  001320  502C               	movf	VerifySignal@checksum,w,c
  2584  001322  182D               	xorwf	VerifySignal@hexByte,w,c
  2585  001324  6E2C               	movwf	VerifySignal@checksum,c
  2586  001326  0E02               	movlw	2
  2587  001328  262F               	addwf	VerifySignal@i,f,c
  2588  00132A  D7D4               	goto	l2536
  2589  00132C                     l2548:
  2590                           
  2591                           ;RFID_Reader.c: 68: }
  2592                           ;RFID_Reader.c: 71: return 1;
  2593  00132C  0E01               	movlw	1
  2594  00132E  0012               	return	
  2595  001330                     __end_of_VerifySignal:
  2596                           	opt stack 0
  2597                           tblptru	equ	0xFF8
  2598                           prodh	equ	0xFF4
  2599                           prodl	equ	0xFF3
  2600                           intcon	equ	0xFF2
  2601                           postinc0	equ	0xFEE
  2602                           wreg	equ	0xFE8
  2603                           indf1	equ	0xFE7
  2604                           fsr1h	equ	0xFE2
  2605                           fsr1l	equ	0xFE1
  2606                           indf2	equ	0xFDF
  2607                           postinc2	equ	0xFDE
  2608                           postdec2	equ	0xFDD
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function _ScanWithRange *****************
  2614 ;; Defined at:
  2615 ;;		line 91 in file "Movement.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2618 ;;		 -> main@mL(9), 
  2619 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2620 ;;		 -> main@mR(9), 
  2621 ;;  milliseconds    2   17[BANK0 ] int 
  2622 ;;  MoveTimeEntr    2   19[BANK0 ] PTR int 
  2623 ;;		 -> main@MoveTime(200), 
  2624 ;;  RFID_Read       2   21[BANK0 ] PTR unsigned char 
  2625 ;;		 -> RFID_Read(1), 
  2626 ;;  mode            2   23[BANK0 ] PTR unsigned char 
  2627 ;;		 -> mode(1), 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  buf            40   30[BANK0 ] unsigned char [40]
  2630 ;;  SensorResult    4   78[BANK0 ] unsigned int [2]
  2631 ;;  RightFlag       2   84[BANK0 ] unsigned int 
  2632 ;;  LeftFlag        2   82[BANK0 ] unsigned int 
  2633 ;;  DirectionFou    2   74[BANK0 ] const unsigned int 
  2634 ;;  i               2   72[BANK0 ] unsigned int 
  2635 ;;  n               2   70[BANK0 ] unsigned int 
  2636 ;;  TimeAboveThr    1   77[BANK0 ] unsigned char 
  2637 ;;  power           1   76[BANK0 ] const unsigned char 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      unsigned char 
  2640 ;; Registers used:
  2641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2647 ;;      Params:         0      12       0       0
  2648 ;;      Locals:         0      56       0       0
  2649 ;;      Temps:          0       5       0       0
  2650 ;;      Totals:         0      73       0       0
  2651 ;;Total ram usage:       73 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    7
  2654 ;; This function calls:
  2655 ;;		_LCD_String
  2656 ;;		_SendLCD
  2657 ;;		_SetLine
  2658 ;;		_delay_tenth_s
  2659 ;;		_grabLeftIR
  2660 ;;		_grabRightIR
  2661 ;;		_sprintf
  2662 ;;		_stop
  2663 ;;		_turnLeft
  2664 ;;		_turnRight
  2665 ;; This function is called by:
  2666 ;;		_main
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text9
  2671  000892                     __ptext9:
  2672                           	opt stack 0
  2673  000892                     _ScanWithRange:
  2674                           	opt stack 23
  2675                           
  2676                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2677                           
  2678                           ;incstack = 0
  2679  000892  C0C4  F0AE         	movff	ScanWithRange@F3896,ScanWithRange@SensorResult
  2680  000896  C0C5  F0AF         	movff	ScanWithRange@F3896+1,ScanWithRange@SensorResult+1
  2681  00089A  C0C6  F0B0         	movff	ScanWithRange@F3896+2,ScanWithRange@SensorResult+2
  2682  00089E  C0C7  F0B1         	movff	ScanWithRange@F3896+3,ScanWithRange@SensorResult+3
  2683                           
  2684                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2685  0008A2  0E00               	movlw	0
  2686  0008A4  0100               	movlb	0	; () banked
  2687  0008A6  6FB3               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2688  0008A8  0E00               	movlw	0
  2689  0008AA  6FB2               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2690                           
  2691                           ;Movement.c: 97: unsigned int RightFlag=0;
  2692  0008AC  0E00               	movlw	0
  2693  0008AE  0100               	movlb	0	; () banked
  2694  0008B0  6FB5               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2695  0008B2  0E00               	movlw	0
  2696  0008B4  6FB4               	movwf	ScanWithRange@RightFlag& (0+255),b
  2697                           
  2698                           ;Movement.c: 98: char buf[40];
  2699                           ;Movement.c: 99: unsigned int i=0;
  2700  0008B6  0E00               	movlw	0
  2701  0008B8  0100               	movlb	0	; () banked
  2702  0008BA  6FA9               	movwf	(ScanWithRange@i+1)& (0+255),b
  2703  0008BC  0E00               	movlw	0
  2704  0008BE  6FA8               	movwf	ScanWithRange@i& (0+255),b
  2705                           
  2706                           ;Movement.c: 100: unsigned int n=0;
  2707  0008C0  0E00               	movlw	0
  2708  0008C2  0100               	movlb	0	; () banked
  2709  0008C4  6FA7               	movwf	(ScanWithRange@n+1)& (0+255),b
  2710  0008C6  0E00               	movlw	0
  2711  0008C8  6FA6               	movwf	ScanWithRange@n& (0+255),b
  2712                           
  2713                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2714  0008CA  0E00               	movlw	0
  2715  0008CC  0100               	movlb	0	; () banked
  2716  0008CE  6FAD               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2717                           
  2718                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2719  0008D0  0E0B               	movlw	11
  2720  0008D2  0100               	movlb	0	; () banked
  2721  0008D4  6FAB               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2722  0008D6  0EB8               	movlw	184
  2723  0008D8  6FAA               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2724                           
  2725                           ;Movement.c: 105: const unsigned char power=42;
  2726  0008DA  0E2A               	movlw	42
  2727  0008DC  0100               	movlb	0	; () banked
  2728  0008DE  6FAC               	movwf	ScanWithRange@power& (0+255),b
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2732  0008E0  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2733  0008E4  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2734  0008E8  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2735  0008EC  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2736  0008F0  0E64               	movlw	100
  2737  0008F2  0100               	movlb	0	; () banked
  2738  0008F4  6F6B               	movwf	turnLeft@power& (0+255),b
  2739  0008F6  ECD2  F00B         	call	_turnLeft	;wreg free
  2740                           
  2741                           ;Movement.c: 115: delay_tenth_s(3);
  2742  0008FA  0E03               	movlw	3
  2743  0008FC  ECF1  F00B         	call	_delay_tenth_s
  2744                           
  2745                           ;Movement.c: 116: stop(mL,mR);
  2746  000900  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2747  000904  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2748  000908  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2749  00090C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2750  000910  EC98  F009         	call	_stop	;wreg free
  2751                           
  2752                           ;Movement.c: 119: turnRight(mL,mR, power);
  2753  000914  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2754  000918  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2755  00091C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2756  000920  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2757  000924  C0AC  F06B         	movff	ScanWithRange@power,turnRight@power
  2758  000928  ECB3  F00B         	call	_turnRight	;wreg free
  2759                           
  2760                           ;Movement.c: 122: TMR0L = 0;
  2761  00092C  0E00               	movlw	0
  2762  00092E  6ED6               	movwf	4054,c	;volatile
  2763                           
  2764                           ;Movement.c: 123: TMR0H = 0;
  2765  000930  0E00               	movlw	0
  2766  000932  6ED7               	movwf	4055,c	;volatile
  2767                           
  2768                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2769  000934  8ED5               	bsf	4053,7,c	;volatile
  2770                           
  2771                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2772  000936  0E00               	movlw	0
  2773  000938  0100               	movlb	0	; () banked
  2774  00093A  6FA9               	movwf	(ScanWithRange@i+1)& (0+255),b
  2775  00093C  0E01               	movlw	1
  2776  00093E  6FA8               	movwf	ScanWithRange@i& (0+255),b
  2777  000940  D119               	goto	l3156
  2778  000942                     l3080:
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2782  000942  ECE2  F00A         	call	_grabLeftIR	;wreg free
  2783  000946  C024  F0AE         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2784  00094A  C025  F0AF         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2785                           
  2786                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2787  00094E  ECA9  F00A         	call	_grabRightIR	;wreg free
  2788  000952  C024  F0B0         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2789  000956  C025  F0B1         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2790                           
  2791                           ;Movement.c: 134: CAP1BUFH=0;
  2792  00095A  0E00               	movlw	0
  2793  00095C  6E69               	movwf	3945,c	;volatile
  2794                           
  2795                           ;Movement.c: 135: CAP1BUFL=0;
  2796  00095E  0E00               	movlw	0
  2797  000960  6E68               	movwf	3944,c	;volatile
  2798                           
  2799                           ;Movement.c: 136: CAP2BUFH=0;
  2800  000962  0E00               	movlw	0
  2801  000964  6E67               	movwf	3943,c	;volatile
  2802                           
  2803                           ;Movement.c: 137: CAP2BUFL=0;
  2804  000966  0E00               	movlw	0
  2805  000968  6E66               	movwf	3942,c	;volatile
  2806                           
  2807                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2808  00096A  0E00               	movlw	0
  2809  00096C  6E28               	movwf	SendLCD@type,c
  2810  00096E  0E01               	movlw	1
  2811  000970  EC5A  F00C         	call	_SendLCD
  2812                           
  2813                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2814  000974  0E21               	movlw	33
  2815  000976                     u2927:
  2816  000976  2EE8               	decfsz	wreg,f,c
  2817  000978  D7FE               	goto	u2927
  2818  00097A  F000               	nop	
  2819                           
  2820                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2821  00097C  0E00               	movlw	0
  2822  00097E  6E28               	movwf	SendLCD@type,c
  2823  000980  0E02               	movlw	2
  2824  000982  EC5A  F00C         	call	_SendLCD
  2825                           
  2826                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2827  000986  0E06               	movlw	6
  2828  000988  0100               	movlb	0	; () banked
  2829  00098A  6F79               	movwf	??_ScanWithRange& (0+255),b
  2830  00098C  0E30               	movlw	48
  2831  00098E                     u2937:
  2832  00098E  2EE8               	decfsz	wreg,f,c
  2833  000990  D7FE               	goto	u2937
  2834  000992  2F79               	decfsz	??_ScanWithRange& (0+255),f,b
  2835  000994  D7FC               	goto	u2937
  2836  000996  D000               	nop2	
  2837                           
  2838                           ;Movement.c: 145: SetLine(1);
  2839  000998  0E01               	movlw	1
  2840  00099A  EC42  F00C         	call	_SetLine
  2841                           
  2842                           ;Movement.c: 146: LCD_String("     ScanIR");
  2843  00099E  0E2D               	movlw	low STR_1
  2844  0009A0  6E2A               	movwf	LCD_String@string,c
  2845  0009A2  0E03               	movlw	high STR_1
  2846  0009A4  6E2B               	movwf	LCD_String@string+1,c
  2847  0009A6  EC1B  F00B         	call	_LCD_String	;wreg free
  2848                           
  2849                           ;Movement.c: 147: SetLine(2);
  2850  0009AA  0E02               	movlw	2
  2851  0009AC  EC42  F00C         	call	_SetLine
  2852                           
  2853                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2854  0009B0  0E7E               	movlw	low ScanWithRange@buf
  2855  0009B2  6E30               	movwf	sprintf@sp,c
  2856  0009B4  0E00               	movlw	high ScanWithRange@buf
  2857  0009B6  6E31               	movwf	sprintf@sp+1,c
  2858  0009B8  0E0C               	movlw	low (STR_6+1)
  2859  0009BA  6E32               	movwf	sprintf@f,c
  2860  0009BC  0E03               	movlw	high (STR_6+1)
  2861  0009BE  6E33               	movwf	sprintf@f+1,c
  2862  0009C0  C0AE  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2863  0009C4  C0AF  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2864  0009C8  C0B0  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2865  0009CC  C0B1  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2866  0009D0  ECE0  F005         	call	_sprintf	;wreg free
  2867                           
  2868                           ;Movement.c: 149: LCD_String(buf);
  2869  0009D4  0E7E               	movlw	low ScanWithRange@buf
  2870  0009D6  6E2A               	movwf	LCD_String@string,c
  2871  0009D8  0E00               	movlw	high ScanWithRange@buf
  2872  0009DA  6E2B               	movwf	LCD_String@string+1,c
  2873  0009DC  EC1B  F00B         	call	_LCD_String	;wreg free
  2874                           
  2875                           ;Movement.c: 151: if (RightFlag==0){
  2876  0009E0  0100               	movlb	0	; () banked
  2877  0009E2  51B4               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2878  0009E4  0100               	movlb	0	; () banked
  2879  0009E6  11B5               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2880  0009E8  A4D8               	btfss	status,2,c
  2881  0009EA  D018               	goto	l221
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;Movement.c: 152: if (SensorResult[1]>DirectionFoundThreshold) {
  2885  0009EC  0100               	movlb	0	; () banked
  2886  0009EE  51B0               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2887  0009F0  0100               	movlb	0	; () banked
  2888  0009F2  5DAA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2889  0009F4  0100               	movlb	0	; () banked
  2890  0009F6  51B1               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2891  0009F8  0100               	movlb	0	; () banked
  2892  0009FA  59AB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2893  0009FC  B0D8               	btfsc	status,0,c
  2894  0009FE  D00E               	goto	l221
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;Movement.c: 153: RightFlag= (TMR0H<<8)+TMR0L;
  2898  000A00  50D7               	movf	4055,w,c	;volatile
  2899  000A02  0100               	movlb	0	; () banked
  2900  000A04  6F7A               	movwf	(??_ScanWithRange+1)& (0+255),b
  2901  000A06  6B79               	clrf	??_ScanWithRange& (0+255),b
  2902  000A08  50D6               	movf	4054,w,c	;volatile
  2903  000A0A  0100               	movlb	0	; () banked
  2904  000A0C  2579               	addwf	??_ScanWithRange& (0+255),w,b
  2905  000A0E  0100               	movlb	0	; () banked
  2906  000A10  6FB4               	movwf	ScanWithRange@RightFlag& (0+255),b
  2907  000A12  0E00               	movlw	0
  2908  000A14  0100               	movlb	0	; () banked
  2909  000A16  217A               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2910  000A18  0100               	movlb	0	; () banked
  2911  000A1A  6FB5               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2912  000A1C                     l221:
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;Movement.c: 154: }
  2916                           ;Movement.c: 155: }
  2917                           ;Movement.c: 157: if (LeftFlag==0){
  2918  000A1C  0100               	movlb	0	; () banked
  2919  000A1E  51B2               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2920  000A20  0100               	movlb	0	; () banked
  2921  000A22  11B3               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2922  000A24  A4D8               	btfss	status,2,c
  2923  000A26  D018               	goto	l223
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;Movement.c: 158: if (SensorResult[0]>DirectionFoundThreshold) {
  2927  000A28  0100               	movlb	0	; () banked
  2928  000A2A  51AE               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2929  000A2C  0100               	movlb	0	; () banked
  2930  000A2E  5DAA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2931  000A30  0100               	movlb	0	; () banked
  2932  000A32  51AF               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2933  000A34  0100               	movlb	0	; () banked
  2934  000A36  59AB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2935  000A38  B0D8               	btfsc	status,0,c
  2936  000A3A  D00E               	goto	l223
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;Movement.c: 159: LeftFlag=(TMR0H<<8)+TMR0L;
  2940  000A3C  50D7               	movf	4055,w,c	;volatile
  2941  000A3E  0100               	movlb	0	; () banked
  2942  000A40  6F7A               	movwf	(??_ScanWithRange+1)& (0+255),b
  2943  000A42  6B79               	clrf	??_ScanWithRange& (0+255),b
  2944  000A44  50D6               	movf	4054,w,c	;volatile
  2945  000A46  0100               	movlb	0	; () banked
  2946  000A48  2579               	addwf	??_ScanWithRange& (0+255),w,b
  2947  000A4A  0100               	movlb	0	; () banked
  2948  000A4C  6FB2               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2949  000A4E  0E00               	movlw	0
  2950  000A50  0100               	movlb	0	; () banked
  2951  000A52  217A               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2952  000A54  0100               	movlb	0	; () banked
  2953  000A56  6FB3               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2954  000A58                     l223:
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;Movement.c: 160: }
  2958                           ;Movement.c: 161: }
  2959                           ;Movement.c: 168: if (LeftFlag>0) {
  2960  000A58  0100               	movlb	0	; () banked
  2961  000A5A  51B2               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2962  000A5C  0100               	movlb	0	; () banked
  2963  000A5E  11B3               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2964  000A60  B4D8               	btfsc	status,2,c
  2965  000A62  D07C               	goto	l3144
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;Movement.c: 171: if (RightFlag>0) {
  2969  000A64  0100               	movlb	0	; () banked
  2970  000A66  51B4               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2971  000A68  0100               	movlb	0	; () banked
  2972  000A6A  11B5               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2973  000A6C  B4D8               	btfsc	status,2,c
  2974  000A6E  D06A               	goto	l226
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;Movement.c: 172: TimeAboveThreshold = LeftFlag - RightFlag;
  2978  000A70  0100               	movlb	0	; () banked
  2979  000A72  51B4               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2980  000A74  0800               	sublw	0
  2981  000A76  0100               	movlb	0	; () banked
  2982  000A78  25B2               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  2983  000A7A  0100               	movlb	0	; () banked
  2984  000A7C  6FAD               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;Movement.c: 173: TMR0L = 0;
  2988  000A7E  0E00               	movlw	0
  2989  000A80  6ED6               	movwf	4054,c	;volatile
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;Movement.c: 174: TMR0H = 0;
  2993  000A82  0E00               	movlw	0
  2994  000A84  6ED7               	movwf	4055,c	;volatile
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;Movement.c: 175: stop(mL,mR);
  2998  000A86  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2999  000A8A  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3000  000A8E  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3001  000A92  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3002  000A96  EC98  F009         	call	_stop	;wreg free
  3003                           
  3004                           ;Movement.c: 176: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3005  000A9A  D00C               	goto	l3126
  3006  000A9C                     l3124:
  3007                           
  3008                           ;Movement.c: 177: turnLeft(mL,mR, power);
  3009  000A9C  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3010  000AA0  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3011  000AA4  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3012  000AA8  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3013  000AAC  C0AC  F06B         	movff	ScanWithRange@power,turnLeft@power
  3014  000AB0  ECD2  F00B         	call	_turnLeft	;wreg free
  3015  000AB4                     l3126:
  3016  000AB4  0100               	movlb	0	; () banked
  3017  000AB6  90D8               	bcf	status,0,c
  3018  000AB8  31AD               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3019  000ABA  0100               	movlb	0	; () banked
  3020  000ABC  6F79               	movwf	??_ScanWithRange& (0+255),b
  3021  000ABE  6B7A               	clrf	(??_ScanWithRange+1)& (0+255),b
  3022  000AC0  50D6               	movf	4054,w,c	;volatile
  3023  000AC2  CFD7 F07B          	movff	4055,??_ScanWithRange+2	;volatile
  3024  000AC6  0100               	movlb	0	; () banked
  3025  000AC8  6B7C               	clrf	(??_ScanWithRange+3)& (0+255),b
  3026  000ACA  C07B  F07C         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3027  000ACE  0100               	movlb	0	; () banked
  3028  000AD0  6B7B               	clrf	(??_ScanWithRange+2)& (0+255),b
  3029  000AD2  0100               	movlb	0	; () banked
  3030  000AD4  277B               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3031  000AD6  0E00               	movlw	0
  3032  000AD8  237C               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3033  000ADA  0100               	movlb	0	; () banked
  3034  000ADC  5179               	movf	??_ScanWithRange& (0+255),w,b
  3035  000ADE  0100               	movlb	0	; () banked
  3036  000AE0  5D7B               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3037  000AE2  0100               	movlb	0	; () banked
  3038  000AE4  517C               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3039  000AE6  0A80               	xorlw	128
  3040  000AE8  0100               	movlb	0	; () banked
  3041  000AEA  6F7D               	movwf	(??_ScanWithRange+4)& (0+255),b
  3042  000AEC  0100               	movlb	0	; () banked
  3043  000AEE  517A               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3044  000AF0  0A80               	xorlw	128
  3045  000AF2  0100               	movlb	0	; () banked
  3046  000AF4  597D               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3047  000AF6  A0D8               	btfss	status,0,c
  3048  000AF8  D7D1               	goto	l3124
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;Movement.c: 178: }
  3052                           ;Movement.c: 179: T0CONbits.TMR0ON=0;
  3053  000AFA  9ED5               	bcf	4053,7,c	;volatile
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;Movement.c: 180: stop(mL,mR);
  3057  000AFC  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3058  000B00  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3059  000B04  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3060  000B08  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3061  000B0C  EC98  F009         	call	_stop	;wreg free
  3062                           
  3063                           ;Movement.c: 181: *MoveTimeEntry = RightFlag + (TimeAboveThreshold>>1);
  3064  000B10  C0AD  F079         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3065  000B14  0100               	movlb	0	; () banked
  3066  000B16  90D8               	bcf	status,0,c
  3067  000B18  3379               	rrcf	??_ScanWithRange& (0+255),f,b
  3068  000B1A  0100               	movlb	0	; () banked
  3069  000B1C  5179               	movf	??_ScanWithRange& (0+255),w,b
  3070  000B1E  0100               	movlb	0	; () banked
  3071  000B20  25B4               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3072  000B22  0100               	movlb	0	; () banked
  3073  000B24  6F7A               	movwf	(??_ScanWithRange+1)& (0+255),b
  3074  000B26  0E00               	movlw	0
  3075  000B28  0100               	movlb	0	; () banked
  3076  000B2A  21B5               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3077  000B2C  0100               	movlb	0	; () banked
  3078  000B2E  6F7B               	movwf	(??_ScanWithRange+2)& (0+255),b
  3079  000B30  C073  FFD9         	movff	ScanWithRange@MoveTimeEntry,fsr2l
  3080  000B34  C074  FFDA         	movff	ScanWithRange@MoveTimeEntry+1,fsr2h
  3081  000B38  C07A  FFDE         	movff	??_ScanWithRange+1,postinc2
  3082  000B3C  C07B  FFDD         	movff	??_ScanWithRange+2,postdec2
  3083  000B40                     l3132:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;Movement.c: 182: return 2;
  3087  000B40  0E02               	movlw	2
  3088                           
  3089                           ; BSR set to: 0
  3090  000B42  0012               	return	
  3091  000B44                     l226:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;Movement.c: 185: T0CONbits.TMR0ON=0;
  3095  000B44  9ED5               	bcf	4053,7,c	;volatile
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;Movement.c: 186: stop(mL,mR);
  3099  000B46  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3100  000B4A  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3101  000B4E  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3102  000B52  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3103  000B56  EC98  F009         	call	_stop	;wreg free
  3104  000B5A  D7F2               	goto	l3132
  3105  000B5C                     l3144:
  3106                           
  3107                           ;Movement.c: 188: }
  3108                           ;Movement.c: 189: }
  3109                           ;Movement.c: 191: if (*RFID_Read==1) {
  3110  000B5C  C075  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3111  000B60  C076  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3112  000B64  04DE               	decf	postinc2,w,c
  3113  000B66  A4D8               	btfss	status,2,c
  3114  000B68  D002               	goto	l3154
  3115                           
  3116                           ;Movement.c: 192: return 2;
  3117  000B6A  0E02               	movlw	2
  3118  000B6C  0012               	return	
  3119  000B6E                     l3154:
  3120  000B6E  0100               	movlb	0	; () banked
  3121  000B70  4BA8               	infsnz	ScanWithRange@i& (0+255),f,b
  3122  000B72  2BA9               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3123  000B74                     l3156:
  3124                           
  3125                           ; BSR set to: 0
  3126  000B74  0100               	movlb	0	; () banked
  3127  000B76  51A8               	movf	ScanWithRange@i& (0+255),w,b
  3128  000B78  0100               	movlb	0	; () banked
  3129  000B7A  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3130  000B7C  0100               	movlb	0	; () banked
  3131  000B7E  51A9               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3132  000B80  0100               	movlb	0	; () banked
  3133  000B82  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3134  000B84  B0D8               	btfsc	status,0,c
  3135  000B86  D6DD               	goto	l3080
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;Movement.c: 196: }
  3139                           ;Movement.c: 197: }
  3140                           ;Movement.c: 200: turnRight(mL,mR, 100);
  3141                           
  3142                           ; BSR set to: 0
  3143  000B88  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3144  000B8C  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3145  000B90  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3146  000B94  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3147  000B98  0E64               	movlw	100
  3148  000B9A  0100               	movlb	0	; () banked
  3149  000B9C  6F6B               	movwf	turnRight@power& (0+255),b
  3150  000B9E  ECB3  F00B         	call	_turnRight	;wreg free
  3151                           
  3152                           ;Movement.c: 201: delay_tenth_s(2);
  3153  000BA2  0E02               	movlw	2
  3154  000BA4  ECF1  F00B         	call	_delay_tenth_s
  3155                           
  3156                           ;Movement.c: 202: stop(mL,mR);
  3157  000BA8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3158  000BAC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3159  000BB0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3160  000BB4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3161  000BB8  EC98  F009         	call	_stop	;wreg free
  3162                           
  3163                           ;Movement.c: 203: return -1;
  3164  000BBC  0EFF               	movlw	255
  3165  000BBE  0012               	return	
  3166  000BC0                     __end_of_ScanWithRange:
  3167                           	opt stack 0
  3168                           tblptru	equ	0xFF8
  3169                           prodh	equ	0xFF4
  3170                           prodl	equ	0xFF3
  3171                           intcon	equ	0xFF2
  3172                           postinc0	equ	0xFEE
  3173                           wreg	equ	0xFE8
  3174                           indf1	equ	0xFE7
  3175                           fsr1h	equ	0xFE2
  3176                           fsr1l	equ	0xFE1
  3177                           indf2	equ	0xFDF
  3178                           postinc2	equ	0xFDE
  3179                           postdec2	equ	0xFDD
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _turnRight *****************
  3185 ;; Defined at:
  3186 ;;		line 98 in file "dc_motor.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3189 ;;		 -> main@mL(9), 
  3190 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3191 ;;		 -> main@mR(9), 
  3192 ;;  power           1   11[BANK0 ] unsigned char 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;		None
  3195 ;; Return value:  Size  Location     Type
  3196 ;;		None               void
  3197 ;; Registers used:
  3198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : 0/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3204 ;;      Params:         0       5       0       0
  3205 ;;      Locals:         0       0       0       0
  3206 ;;      Temps:          0       0       0       0
  3207 ;;      Totals:         0       5       0       0
  3208 ;;Total ram usage:        5 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    6
  3211 ;; This function calls:
  3212 ;;		_fullSpeedAhead
  3213 ;; This function is called by:
  3214 ;;		_ScanWithRange
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           	psect	text10
  3219  001766                     __ptext10:
  3220                           	opt stack 0
  3221  001766                     _turnRight:
  3222                           	opt stack 23
  3223                           
  3224                           ;dc_motor.c: 102: mL->direction=0;
  3225                           
  3226                           ;incstack = 0
  3227  001766  0100               	movlb	0	; () banked
  3228  001768  EE20 F001          	lfsr	2,1
  3229  00176C  5167               	movf	turnRight@mL& (0+255),w,b
  3230  00176E  26D9               	addwf	fsr2l,f,c
  3231  001770  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3232  001772  22DA               	addwfc	fsr2h,f,c
  3233  001774  0E00               	movlw	0
  3234  001776  6EDF               	movwf	indf2,c
  3235                           
  3236                           ;dc_motor.c: 103: mR->direction=1;
  3237  001778  0100               	movlb	0	; () banked
  3238  00177A  EE20 F001          	lfsr	2,1
  3239  00177E  5169               	movf	turnRight@mR& (0+255),w,b
  3240  001780  26D9               	addwf	fsr2l,f,c
  3241  001782  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3242  001784  22DA               	addwfc	fsr2h,f,c
  3243  001786  0E01               	movlw	1
  3244  001788  6EDF               	movwf	indf2,c
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3248  00178A  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3249  00178E  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3250  001792  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3251  001796  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3252  00179A  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3253  00179E  EC69  F00A         	call	_fullSpeedAhead	;wreg free
  3254  0017A2  0012               	return		;funcret
  3255  0017A4                     __end_of_turnRight:
  3256                           	opt stack 0
  3257                           tblptru	equ	0xFF8
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           postinc0	equ	0xFEE
  3262                           wreg	equ	0xFE8
  3263                           indf1	equ	0xFE7
  3264                           fsr1h	equ	0xFE2
  3265                           fsr1l	equ	0xFE1
  3266                           indf2	equ	0xFDF
  3267                           postinc2	equ	0xFDE
  3268                           postdec2	equ	0xFDD
  3269                           fsr2h	equ	0xFDA
  3270                           fsr2l	equ	0xFD9
  3271                           status	equ	0xFD8
  3272                           
  3273 ;; *************** function _turnLeft *****************
  3274 ;; Defined at:
  3275 ;;		line 87 in file "dc_motor.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3278 ;;		 -> main@mL(9), 
  3279 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3280 ;;		 -> main@mR(9), 
  3281 ;;  power           1   11[BANK0 ] unsigned char 
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;		None
  3284 ;; Return value:  Size  Location     Type
  3285 ;;		None               void
  3286 ;; Registers used:
  3287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3293 ;;      Params:         0       5       0       0
  3294 ;;      Locals:         0       0       0       0
  3295 ;;      Temps:          0       0       0       0
  3296 ;;      Totals:         0       5       0       0
  3297 ;;Total ram usage:        5 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    6
  3300 ;; This function calls:
  3301 ;;		_fullSpeedAhead
  3302 ;; This function is called by:
  3303 ;;		_ScanWithRange
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text11
  3308  0017A4                     __ptext11:
  3309                           	opt stack 0
  3310  0017A4                     _turnLeft:
  3311                           	opt stack 23
  3312                           
  3313                           ;dc_motor.c: 91: mL->direction=1;
  3314                           
  3315                           ;incstack = 0
  3316  0017A4  0100               	movlb	0	; () banked
  3317  0017A6  EE20 F001          	lfsr	2,1
  3318  0017AA  5167               	movf	turnLeft@mL& (0+255),w,b
  3319  0017AC  26D9               	addwf	fsr2l,f,c
  3320  0017AE  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3321  0017B0  22DA               	addwfc	fsr2h,f,c
  3322  0017B2  0E01               	movlw	1
  3323  0017B4  6EDF               	movwf	indf2,c
  3324                           
  3325                           ;dc_motor.c: 92: mR->direction=0;
  3326  0017B6  0100               	movlb	0	; () banked
  3327  0017B8  EE20 F001          	lfsr	2,1
  3328  0017BC  5169               	movf	turnLeft@mR& (0+255),w,b
  3329  0017BE  26D9               	addwf	fsr2l,f,c
  3330  0017C0  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3331  0017C2  22DA               	addwfc	fsr2h,f,c
  3332  0017C4  0E00               	movlw	0
  3333  0017C6  6EDF               	movwf	indf2,c
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3337  0017C8  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3338  0017CC  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3339  0017D0  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3340  0017D4  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3341  0017D8  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3342  0017DC  EC69  F00A         	call	_fullSpeedAhead	;wreg free
  3343  0017E0  0012               	return		;funcret
  3344  0017E2                     __end_of_turnLeft:
  3345                           	opt stack 0
  3346                           tblptru	equ	0xFF8
  3347                           prodh	equ	0xFF4
  3348                           prodl	equ	0xFF3
  3349                           intcon	equ	0xFF2
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           indf1	equ	0xFE7
  3353                           fsr1h	equ	0xFE2
  3354                           fsr1l	equ	0xFE1
  3355                           indf2	equ	0xFDF
  3356                           postinc2	equ	0xFDE
  3357                           postdec2	equ	0xFDD
  3358                           fsr2h	equ	0xFDA
  3359                           fsr2l	equ	0xFD9
  3360                           status	equ	0xFD8
  3361                           
  3362 ;; *************** function _fullSpeedAhead *****************
  3363 ;; Defined at:
  3364 ;;		line 108 in file "dc_motor.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3367 ;;		 -> main@mL(9), 
  3368 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3369 ;;		 -> main@mR(9), 
  3370 ;;  power           1    6[BANK0 ] unsigned char 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;		None
  3373 ;; Return value:  Size  Location     Type
  3374 ;;		None               void
  3375 ;; Registers used:
  3376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3382 ;;      Params:         0       5       0       0
  3383 ;;      Locals:         0       0       0       0
  3384 ;;      Temps:          1       0       0       0
  3385 ;;      Totals:         1       5       0       0
  3386 ;;Total ram usage:        6 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    5
  3389 ;; This function calls:
  3390 ;;		_setMotorPWM
  3391 ;; This function is called by:
  3392 ;;		_turnLeft
  3393 ;;		_turnRight
  3394 ;;		_fullSpeedBack
  3395 ;;		_main
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text12
  3400  0014D2                     __ptext12:
  3401                           	opt stack 0
  3402  0014D2                     _fullSpeedAhead:
  3403                           	opt stack 24
  3404                           
  3405                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3406                           
  3407                           ;incstack = 0
  3408  0014D2  D02C               	goto	l65
  3409  0014D4                     l2854:
  3410                           
  3411                           ;dc_motor.c: 112: if(mL->power<power){
  3412  0014D4  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3413  0014D8  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3414  0014DC  0100               	movlb	0	; () banked
  3415  0014DE  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3416  0014E0  5CDE               	subwf	postinc2,w,c
  3417  0014E2  B0D8               	btfsc	status,0,c
  3418  0014E4  D005               	goto	l2858
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;dc_motor.c: 113: mL->power++;
  3422  0014E6  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3423  0014EA  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3424  0014EE  2ADF               	incf	indf2,f,c
  3425  0014F0                     l2858:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;dc_motor.c: 114: }
  3429                           ;dc_motor.c: 115: if(mR->power<power){
  3430  0014F0  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3431  0014F4  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3432  0014F8  0100               	movlb	0	; () banked
  3433  0014FA  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3434  0014FC  5CDE               	subwf	postinc2,w,c
  3435  0014FE  B0D8               	btfsc	status,0,c
  3436  001500  D005               	goto	l2862
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;dc_motor.c: 116: mR->power++;
  3440  001502  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3441  001506  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3442  00150A  2ADF               	incf	indf2,f,c
  3443  00150C                     l2862:
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;dc_motor.c: 117: }
  3447                           ;dc_motor.c: 118: setMotorPWM(mL);
  3448  00150C  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3449  001510  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3450  001514  EC63  F007         	call	_setMotorPWM	;wreg free
  3451                           
  3452                           ;dc_motor.c: 119: setMotorPWM(mR);
  3453  001518  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3454  00151C  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3455  001520  EC63  F007         	call	_setMotorPWM	;wreg free
  3456                           
  3457                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3458  001524  0E21               	movlw	33
  3459  001526                     u2947:
  3460  001526  2EE8               	decfsz	wreg,f,c
  3461  001528  D7FE               	goto	u2947
  3462  00152A  F000               	nop	
  3463  00152C                     l65:
  3464  00152C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3465  001530  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3466  001534  0100               	movlb	0	; () banked
  3467  001536  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3468  001538  5CDE               	subwf	postinc2,w,c
  3469  00153A  A0D8               	btfss	status,0,c
  3470  00153C  D7CB               	goto	l2854
  3471                           
  3472                           ; BSR set to: 0
  3473  00153E  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3474  001542  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3475  001546  0100               	movlb	0	; () banked
  3476  001548  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3477  00154A  5CDE               	subwf	postinc2,w,c
  3478  00154C  B0D8               	btfsc	status,0,c
  3479  00154E  0012               	return	
  3480  001550  D7C1               	goto	l2854
  3481  001552                     __end_of_fullSpeedAhead:
  3482                           	opt stack 0
  3483                           tblptru	equ	0xFF8
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           intcon	equ	0xFF2
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           indf1	equ	0xFE7
  3490                           fsr1h	equ	0xFE2
  3491                           fsr1l	equ	0xFE1
  3492                           indf2	equ	0xFDF
  3493                           postinc2	equ	0xFDE
  3494                           postdec2	equ	0xFDD
  3495                           fsr2h	equ	0xFDA
  3496                           fsr2l	equ	0xFD9
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function _delay_tenth_s *****************
  3500 ;; Defined at:
  3501 ;;		line 32 in file "Movement.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  tenth_second    1    wreg     unsigned char 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3506 ;;  i               2   37[COMRAM] unsigned int 
  3507 ;; Return value:  Size  Location     Type
  3508 ;;		None               void
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3516 ;;      Params:         0       0       0       0
  3517 ;;      Locals:         3       0       0       0
  3518 ;;      Temps:          1       0       0       0
  3519 ;;      Totals:         4       0       0       0
  3520 ;;Total ram usage:        4 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    3
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_ScanWithRange
  3527 ;;		_main
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text13
  3532  0017E2                     __ptext13:
  3533                           	opt stack 0
  3534  0017E2                     _delay_tenth_s:
  3535                           	opt stack 27
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;incstack = 0
  3539                           ;delay_tenth_s@tenth_seconds stored from wreg
  3540  0017E2  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3541                           
  3542                           ;Movement.c: 33: unsigned int i=0;
  3543  0017E4  0E00               	movlw	0
  3544  0017E6  6E27               	movwf	delay_tenth_s@i+1,c
  3545  0017E8  0E00               	movlw	0
  3546  0017EA  6E26               	movwf	delay_tenth_s@i,c
  3547                           
  3548                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3549  0017EC  0E00               	movlw	0
  3550  0017EE  6E27               	movwf	delay_tenth_s@i+1,c
  3551  0017F0  0E01               	movlw	1
  3552  0017F2  6E26               	movwf	delay_tenth_s@i,c
  3553  0017F4  D009               	goto	l2186
  3554  0017F6                     l2182:
  3555                           
  3556                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3557  0017F6  0E82               	movlw	130
  3558  0017F8  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3559  0017FA  0EDE               	movlw	222
  3560  0017FC                     u2957:
  3561  0017FC  2EE8               	decfsz	wreg,f,c
  3562  0017FE  D7FE               	goto	u2957
  3563  001800  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3564  001802  D7FC               	goto	u2957
  3565  001804  4A26               	infsnz	delay_tenth_s@i,f,c
  3566  001806  2A27               	incf	delay_tenth_s@i+1,f,c
  3567  001808                     l2186:
  3568  001808  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3569  00180A  0D02               	mullw	2
  3570  00180C  5026               	movf	delay_tenth_s@i,w,c
  3571  00180E  5CF3               	subwf	prodl,w,c
  3572  001810  5027               	movf	delay_tenth_s@i+1,w,c
  3573  001812  58F4               	subwfb	prodh,w,c
  3574  001814  A0D8               	btfss	status,0,c
  3575  001816  0012               	return	
  3576  001818  D7EE               	goto	l2182
  3577  00181A                     __end_of_delay_tenth_s:
  3578                           	opt stack 0
  3579                           tblptru	equ	0xFF8
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           intcon	equ	0xFF2
  3583                           postinc0	equ	0xFEE
  3584                           wreg	equ	0xFE8
  3585                           indf1	equ	0xFE7
  3586                           fsr1h	equ	0xFE2
  3587                           fsr1l	equ	0xFE1
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _ScanIR *****************
  3596 ;; Defined at:
  3597 ;;		line 45 in file "Movement.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3600 ;;		 -> main@mL(9), 
  3601 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3602 ;;		 -> main@mR(9), 
  3603 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3604 ;;		 -> main@Move(1), 
  3605 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3606 ;;		 -> main@MoveTime(200), 
  3607 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3608 ;;		 -> main@MoveType(100), 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3611 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3612 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      unsigned char 
  3615 ;; Registers used:
  3616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3622 ;;      Params:         0      10       0       0
  3623 ;;      Locals:         0      46       0       0
  3624 ;;      Temps:          1       0       0       0
  3625 ;;      Totals:         1      56       0       0
  3626 ;;Total ram usage:       57 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    7
  3629 ;; This function calls:
  3630 ;;		_LCD_String
  3631 ;;		_SendLCD
  3632 ;;		_SetLine
  3633 ;;		_grabLeftIR
  3634 ;;		_grabRightIR
  3635 ;;		_sprintf
  3636 ;;		_stop
  3637 ;; This function is called by:
  3638 ;;		_main
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text14
  3643  001000                     __ptext14:
  3644                           	opt stack 0
  3645  001000                     _ScanIR:
  3646                           	opt stack 23
  3647                           
  3648                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3649                           
  3650                           ;incstack = 0
  3651  001000  C0C0  F0A1         	movff	ScanIR@F3884,ScanIR@SensorResult
  3652  001004  C0C1  F0A2         	movff	ScanIR@F3884+1,ScanIR@SensorResult+1
  3653  001008  C0C2  F0A3         	movff	ScanIR@F3884+2,ScanIR@SensorResult+2
  3654  00100C  C0C3  F0A4         	movff	ScanIR@F3884+3,ScanIR@SensorResult+3
  3655                           
  3656                           ;Movement.c: 50: char buf[40];
  3657                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3658  001010  0E09               	movlw	9
  3659  001012  0100               	movlb	0	; () banked
  3660  001014  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3661  001016  0EC4               	movlw	196
  3662  001018  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3666  00101A  ECE2  F00A         	call	_grabLeftIR	;wreg free
  3667  00101E  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3668  001022  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3669                           
  3670                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3671  001026  ECA9  F00A         	call	_grabRightIR	;wreg free
  3672  00102A  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3673  00102E  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3674                           
  3675                           ;Movement.c: 62: CAP1BUFH=0;
  3676  001032  0E00               	movlw	0
  3677  001034  6E69               	movwf	3945,c	;volatile
  3678                           
  3679                           ;Movement.c: 63: CAP1BUFL=0;
  3680  001036  0E00               	movlw	0
  3681  001038  6E68               	movwf	3944,c	;volatile
  3682                           
  3683                           ;Movement.c: 64: CAP2BUFH=0;
  3684  00103A  0E00               	movlw	0
  3685  00103C  6E67               	movwf	3943,c	;volatile
  3686                           
  3687                           ;Movement.c: 65: CAP2BUFL=0;
  3688  00103E  0E00               	movlw	0
  3689  001040  6E66               	movwf	3942,c	;volatile
  3690                           
  3691                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3692  001042  0E00               	movlw	0
  3693  001044  6E28               	movwf	SendLCD@type,c
  3694  001046  0E01               	movlw	1
  3695  001048  EC5A  F00C         	call	_SendLCD
  3696                           
  3697                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3698  00104C  0E21               	movlw	33
  3699  00104E                     u2967:
  3700  00104E  2EE8               	decfsz	wreg,f,c
  3701  001050  D7FE               	goto	u2967
  3702  001052  F000               	nop	
  3703                           
  3704                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3705  001054  0E00               	movlw	0
  3706  001056  6E28               	movwf	SendLCD@type,c
  3707  001058  0E02               	movlw	2
  3708  00105A  EC5A  F00C         	call	_SendLCD
  3709                           
  3710                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3711  00105E  0E06               	movlw	6
  3712  001060  6E39               	movwf	??_ScanIR& (0+255),c
  3713  001062  0E30               	movlw	48
  3714  001064                     u2977:
  3715  001064  2EE8               	decfsz	wreg,f,c
  3716  001066  D7FE               	goto	u2977
  3717  001068  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3718  00106A  D7FC               	goto	u2977
  3719  00106C  D000               	nop2	
  3720                           
  3721                           ;Movement.c: 72: SetLine(1);
  3722  00106E  0E01               	movlw	1
  3723  001070  EC42  F00C         	call	_SetLine
  3724                           
  3725                           ;Movement.c: 73: LCD_String("     ScanIR");
  3726  001074  0E2D               	movlw	low STR_1
  3727  001076  6E2A               	movwf	LCD_String@string,c
  3728  001078  0E03               	movlw	high STR_1
  3729  00107A  6E2B               	movwf	LCD_String@string+1,c
  3730  00107C  EC1B  F00B         	call	_LCD_String	;wreg free
  3731                           
  3732                           ;Movement.c: 74: SetLine(2);
  3733  001080  0E02               	movlw	2
  3734  001082  EC42  F00C         	call	_SetLine
  3735                           
  3736                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3737  001086  0E77               	movlw	low ScanIR@buf
  3738  001088  6E30               	movwf	sprintf@sp,c
  3739  00108A  0E00               	movlw	high ScanIR@buf
  3740  00108C  6E31               	movwf	sprintf@sp+1,c
  3741  00108E  0E0C               	movlw	low (STR_6+1)
  3742  001090  6E32               	movwf	sprintf@f,c
  3743  001092  0E03               	movlw	high (STR_6+1)
  3744  001094  6E33               	movwf	sprintf@f+1,c
  3745  001096  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3746  00109A  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3747  00109E  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3748  0010A2  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3749  0010A6  ECE0  F005         	call	_sprintf	;wreg free
  3750                           
  3751                           ;Movement.c: 76: LCD_String(buf);
  3752  0010AA  0E77               	movlw	low ScanIR@buf
  3753  0010AC  6E2A               	movwf	LCD_String@string,c
  3754  0010AE  0E00               	movlw	high ScanIR@buf
  3755  0010B0  6E2B               	movwf	LCD_String@string+1,c
  3756  0010B2  EC1B  F00B         	call	_LCD_String	;wreg free
  3757                           
  3758                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3759                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3760  0010B6  0100               	movlb	0	; () banked
  3761  0010B8  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3762  0010BA  0100               	movlb	0	; () banked
  3763  0010BC  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3764  0010BE  0100               	movlb	0	; () banked
  3765  0010C0  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3766  0010C2  0100               	movlb	0	; () banked
  3767  0010C4  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3768  0010C6  B0D8               	btfsc	status,0,c
  3769  0010C8  D00C               	goto	l3054
  3770                           
  3771                           ; BSR set to: 0
  3772  0010CA  0100               	movlb	0	; () banked
  3773  0010CC  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3774  0010CE  0100               	movlb	0	; () banked
  3775  0010D0  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3776  0010D2  0100               	movlb	0	; () banked
  3777  0010D4  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3778  0010D6  0100               	movlb	0	; () banked
  3779  0010D8  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3780  0010DA  B0D8               	btfsc	status,0,c
  3781  0010DC  D002               	goto	l3054
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;Movement.c: 82: return 2;
  3785  0010DE  0E02               	movlw	2
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;Movement.c: 83: } else {
  3789                           
  3790                           ; BSR set to: 0
  3791  0010E0  0012               	return	
  3792  0010E2                     l3054:
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;Movement.c: 84: stop(mL,mR);
  3796  0010E2  C06D  F062         	movff	ScanIR@mL,stop@mL
  3797  0010E6  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3798  0010EA  C06F  F064         	movff	ScanIR@mR,stop@mR
  3799  0010EE  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3800  0010F2  EC98  F009         	call	_stop	;wreg free
  3801                           
  3802                           ;Movement.c: 85: return 0;
  3803  0010F6  0E00               	movlw	0
  3804  0010F8  0012               	return	
  3805  0010FA                     __end_of_ScanIR:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           intcon	equ	0xFF2
  3811                           postinc0	equ	0xFEE
  3812                           wreg	equ	0xFE8
  3813                           indf1	equ	0xFE7
  3814                           fsr1h	equ	0xFE2
  3815                           fsr1l	equ	0xFE1
  3816                           indf2	equ	0xFDF
  3817                           postinc2	equ	0xFDE
  3818                           postdec2	equ	0xFDD
  3819                           fsr2h	equ	0xFDA
  3820                           fsr2l	equ	0xFD9
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _stop *****************
  3824 ;; Defined at:
  3825 ;;		line 67 in file "dc_motor.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3828 ;;		 -> main@mL(9), 
  3829 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3830 ;;		 -> main@mR(9), 
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;		None               void
  3835 ;; Registers used:
  3836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3842 ;;      Params:         0       4       0       0
  3843 ;;      Locals:         0       0       0       0
  3844 ;;      Temps:          0       0       0       0
  3845 ;;      Totals:         0       4       0       0
  3846 ;;Total ram usage:        4 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    5
  3849 ;; This function calls:
  3850 ;;		_setMotorPWM
  3851 ;; This function is called by:
  3852 ;;		_ScanIR
  3853 ;;		_ScanWithRange
  3854 ;;		_main
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text15
  3859  001330                     __ptext15:
  3860                           	opt stack 0
  3861  001330                     _stop:
  3862                           	opt stack 25
  3863                           
  3864                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3865                           
  3866                           ;incstack = 0
  3867  001330  D028               	goto	l2886
  3868  001332                     l2872:
  3869                           
  3870                           ;dc_motor.c: 71: if(mL->power>0){
  3871  001332  C062  FFD9         	movff	stop@mL,fsr2l
  3872  001336  C063  FFDA         	movff	stop@mL+1,fsr2h
  3873  00133A  50DF               	movf	indf2,w,c
  3874  00133C  B4D8               	btfsc	status,2,c
  3875  00133E  D005               	goto	l2876
  3876                           
  3877                           ;dc_motor.c: 72: mL->power--;
  3878  001340  C062  FFD9         	movff	stop@mL,fsr2l
  3879  001344  C063  FFDA         	movff	stop@mL+1,fsr2h
  3880  001348  06DF               	decf	indf2,f,c
  3881  00134A                     l2876:
  3882                           
  3883                           ;dc_motor.c: 73: }
  3884                           ;dc_motor.c: 74: if(mR->power>0){
  3885  00134A  C064  FFD9         	movff	stop@mR,fsr2l
  3886  00134E  C065  FFDA         	movff	stop@mR+1,fsr2h
  3887  001352  50DF               	movf	indf2,w,c
  3888  001354  B4D8               	btfsc	status,2,c
  3889  001356  D005               	goto	l2880
  3890                           
  3891                           ;dc_motor.c: 75: mR->power--;
  3892  001358  C064  FFD9         	movff	stop@mR,fsr2l
  3893  00135C  C065  FFDA         	movff	stop@mR+1,fsr2h
  3894  001360  06DF               	decf	indf2,f,c
  3895  001362                     l2880:
  3896                           
  3897                           ;dc_motor.c: 76: }
  3898                           ;dc_motor.c: 77: setMotorPWM(mL);
  3899  001362  C062  F032         	movff	stop@mL,setMotorPWM@m
  3900  001366  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3901  00136A  EC63  F007         	call	_setMotorPWM	;wreg free
  3902                           
  3903                           ;dc_motor.c: 78: setMotorPWM(mR);
  3904  00136E  C064  F032         	movff	stop@mR,setMotorPWM@m
  3905  001372  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3906  001376  EC63  F007         	call	_setMotorPWM	;wreg free
  3907                           
  3908                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3909  00137A  0E21               	movlw	33
  3910  00137C                     u2987:
  3911  00137C  2EE8               	decfsz	wreg,f,c
  3912  00137E  D7FE               	goto	u2987
  3913  001380  F000               	nop	
  3914  001382                     l2886:
  3915  001382  C062  FFD9         	movff	stop@mL,fsr2l
  3916  001386  C063  FFDA         	movff	stop@mL+1,fsr2h
  3917  00138A  50DF               	movf	indf2,w,c
  3918  00138C  A4D8               	btfss	status,2,c
  3919  00138E  D7D1               	goto	l2872
  3920  001390  C064  FFD9         	movff	stop@mR,fsr2l
  3921  001394  C065  FFDA         	movff	stop@mR+1,fsr2h
  3922  001398  50DF               	movf	indf2,w,c
  3923  00139A  A4D8               	btfss	status,2,c
  3924  00139C  D7CA               	goto	l2872
  3925                           
  3926                           ;dc_motor.c: 80: }
  3927                           ;dc_motor.c: 81: mL->direction=1;
  3928  00139E  0100               	movlb	0	; () banked
  3929  0013A0  EE20 F001          	lfsr	2,1
  3930  0013A4  5162               	movf	stop@mL& (0+255),w,b
  3931  0013A6  26D9               	addwf	fsr2l,f,c
  3932  0013A8  5163               	movf	(stop@mL+1)& (0+255),w,b
  3933  0013AA  22DA               	addwfc	fsr2h,f,c
  3934  0013AC  0E01               	movlw	1
  3935  0013AE  6EDF               	movwf	indf2,c
  3936                           
  3937                           ;dc_motor.c: 82: mR->direction=1;
  3938  0013B0  0100               	movlb	0	; () banked
  3939  0013B2  EE20 F001          	lfsr	2,1
  3940  0013B6  5164               	movf	stop@mR& (0+255),w,b
  3941  0013B8  26D9               	addwf	fsr2l,f,c
  3942  0013BA  5165               	movf	(stop@mR+1)& (0+255),w,b
  3943  0013BC  22DA               	addwfc	fsr2h,f,c
  3944  0013BE  0E01               	movlw	1
  3945  0013C0  6EDF               	movwf	indf2,c
  3946                           
  3947                           ; BSR set to: 0
  3948  0013C2  0012               	return		;funcret
  3949  0013C4                     __end_of_stop:
  3950                           	opt stack 0
  3951                           tblptru	equ	0xFF8
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           intcon	equ	0xFF2
  3955                           postinc0	equ	0xFEE
  3956                           wreg	equ	0xFE8
  3957                           indf1	equ	0xFE7
  3958                           fsr1h	equ	0xFE2
  3959                           fsr1l	equ	0xFE1
  3960                           indf2	equ	0xFDF
  3961                           postinc2	equ	0xFDE
  3962                           postdec2	equ	0xFDD
  3963                           fsr2h	equ	0xFDA
  3964                           fsr2l	equ	0xFD9
  3965                           status	equ	0xFD8
  3966                           
  3967 ;; *************** function _setMotorPWM *****************
  3968 ;; Defined at:
  3969 ;;		line 26 in file "dc_motor.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3972 ;;		 -> main@mR(9), main@mL(9), 
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  PWMduty         2    0[BANK0 ] int 
  3975 ;; Return value:  Size  Location     Type
  3976 ;;		None               void
  3977 ;; Registers used:
  3978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3984 ;;      Params:         2       0       0       0
  3985 ;;      Locals:         0       2       0       0
  3986 ;;      Temps:          5       0       0       0
  3987 ;;      Totals:         7       2       0       0
  3988 ;;Total ram usage:        9 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    4
  3991 ;; This function calls:
  3992 ;;		___awdiv
  3993 ;;		___wmul
  3994 ;; This function is called by:
  3995 ;;		_stop
  3996 ;;		_fullSpeedAhead
  3997 ;;		_setMotorFullSpeed
  3998 ;;		_stopMotor
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text16
  4003  000EC6                     __ptext16:
  4004                           	opt stack 0
  4005  000EC6                     _setMotorPWM:
  4006                           	opt stack 25
  4007                           
  4008                           ;dc_motor.c: 28: int PWMduty;
  4009                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;incstack = 0
  4013  000EC6  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4014  000ECA  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4015  000ECE  50DF               	movf	indf2,w,c
  4016  000ED0  6E34               	movwf	??_setMotorPWM& (0+255),c
  4017  000ED2  5034               	movf	??_setMotorPWM,w,c
  4018  000ED4  6E24               	movwf	___wmul@multiplier,c
  4019  000ED6  6A25               	clrf	___wmul@multiplier+1,c
  4020  000ED8  EE20 F007          	lfsr	2,7
  4021  000EDC  5032               	movf	setMotorPWM@m,w,c
  4022  000EDE  26D9               	addwf	fsr2l,f,c
  4023  000EE0  5033               	movf	setMotorPWM@m+1,w,c
  4024  000EE2  22DA               	addwfc	fsr2h,f,c
  4025  000EE4  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4026  000EE8  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4027  000EEC  EC9A  F00C         	call	___wmul	;wreg free
  4028  000EF0  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4029  000EF4  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4030  000EF8  0E00               	movlw	0
  4031  000EFA  6E2D               	movwf	___awdiv@divisor+1,c
  4032  000EFC  0E64               	movlw	100
  4033  000EFE  6E2C               	movwf	___awdiv@divisor,c
  4034  000F00  EC27  F00A         	call	___awdiv	;wreg free
  4035  000F04  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4036  000F08  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4037                           
  4038                           ;dc_motor.c: 32: if (m->direction)
  4039  000F0C  EE20 F001          	lfsr	2,1
  4040  000F10  5032               	movf	setMotorPWM@m,w,c
  4041  000F12  26D9               	addwf	fsr2l,f,c
  4042  000F14  5033               	movf	setMotorPWM@m+1,w,c
  4043  000F16  22DA               	addwfc	fsr2h,f,c
  4044  000F18  50DF               	movf	indf2,w,c
  4045  000F1A  B4D8               	btfsc	status,2,c
  4046  000F1C  D02E               	goto	l2850
  4047                           
  4048                           ;dc_motor.c: 33: {
  4049                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4050  000F1E  EE20 F006          	lfsr	2,6
  4051  000F22  5032               	movf	setMotorPWM@m,w,c
  4052  000F24  26D9               	addwf	fsr2l,f,c
  4053  000F26  5033               	movf	setMotorPWM@m+1,w,c
  4054  000F28  22DA               	addwfc	fsr2h,f,c
  4055  000F2A  50DF               	movf	indf2,w,c
  4056  000F2C  6E34               	movwf	??_setMotorPWM& (0+255),c
  4057  000F2E  0E01               	movlw	1
  4058  000F30  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4059  000F32  2A34               	incf	??_setMotorPWM,f,c
  4060  000F34  D002               	goto	u2224
  4061  000F36                     u2225:
  4062  000F36  90D8               	bcf	status,0,c
  4063  000F38  3635               	rlcf	??_setMotorPWM+1,f,c
  4064  000F3A                     u2224:
  4065  000F3A  2E34               	decfsz	??_setMotorPWM,f,c
  4066  000F3C  D7FC               	goto	u2225
  4067  000F3E  5035               	movf	??_setMotorPWM+1,w,c
  4068  000F40  108A               	iorwf	3978,w,c	;volatile
  4069  000F42  6E8A               	movwf	3978,c	;volatile
  4070                           
  4071                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4072  000F44  EE20 F007          	lfsr	2,7
  4073  000F48  5032               	movf	setMotorPWM@m,w,c
  4074  000F4A  26D9               	addwf	fsr2l,f,c
  4075  000F4C  5033               	movf	setMotorPWM@m+1,w,c
  4076  000F4E  22DA               	addwfc	fsr2h,f,c
  4077  000F50  CFDE F034          	movff	postinc2,??_setMotorPWM
  4078  000F54  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4079  000F58  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4080  000F5C  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4081  000F60  1E36               	comf	??_setMotorPWM+2,f,c
  4082  000F62  1E37               	comf	??_setMotorPWM+3,f,c
  4083  000F64  4A36               	infsnz	??_setMotorPWM+2,f,c
  4084  000F66  2A37               	incf	??_setMotorPWM+3,f,c
  4085  000F68  5034               	movf	??_setMotorPWM,w,c
  4086  000F6A  2436               	addwf	??_setMotorPWM+2,w,c
  4087  000F6C  0100               	movlb	0	; () banked
  4088  000F6E  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4089  000F70  5035               	movf	??_setMotorPWM+1,w,c
  4090  000F72  2037               	addwfc	??_setMotorPWM+3,w,c
  4091  000F74  0100               	movlb	0	; () banked
  4092  000F76  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4093                           
  4094                           ;dc_motor.c: 36: }
  4095  000F78  D014               	goto	l35
  4096  000F7A                     l2850:
  4097                           
  4098                           ;dc_motor.c: 37: else
  4099                           ;dc_motor.c: 38: {
  4100                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4101  000F7A  EE20 F006          	lfsr	2,6
  4102  000F7E  5032               	movf	setMotorPWM@m,w,c
  4103  000F80  26D9               	addwf	fsr2l,f,c
  4104  000F82  5033               	movf	setMotorPWM@m+1,w,c
  4105  000F84  22DA               	addwfc	fsr2h,f,c
  4106  000F86  50DF               	movf	indf2,w,c
  4107  000F88  6E34               	movwf	??_setMotorPWM& (0+255),c
  4108  000F8A  0E01               	movlw	1
  4109  000F8C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4110  000F8E  2A34               	incf	??_setMotorPWM,f,c
  4111  000F90  D002               	goto	u2234
  4112  000F92                     u2235:
  4113  000F92  90D8               	bcf	status,0,c
  4114  000F94  3635               	rlcf	??_setMotorPWM+1,f,c
  4115  000F96                     u2234:
  4116  000F96  2E34               	decfsz	??_setMotorPWM,f,c
  4117  000F98  D7FC               	goto	u2235
  4118  000F9A  5035               	movf	??_setMotorPWM+1,w,c
  4119  000F9C  0AFF               	xorlw	255
  4120  000F9E  148A               	andwf	3978,w,c	;volatile
  4121  000FA0  6E8A               	movwf	3978,c	;volatile
  4122  000FA2                     l35:
  4123                           
  4124                           ;dc_motor.c: 40: }
  4125                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4126  000FA2  EE20 F002          	lfsr	2,2
  4127  000FA6  5032               	movf	setMotorPWM@m,w,c
  4128  000FA8  26D9               	addwf	fsr2l,f,c
  4129  000FAA  5033               	movf	setMotorPWM@m+1,w,c
  4130  000FAC  22DA               	addwfc	fsr2h,f,c
  4131  000FAE  CFDE F034          	movff	postinc2,??_setMotorPWM
  4132  000FB2  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4133  000FB6  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4134  000FBA  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4135  000FBE  0100               	movlb	0	; () banked
  4136  000FC0  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4137  000FC2  46E8               	rlncf	wreg,f,c
  4138  000FC4  0BFC               	andlw	252
  4139  000FC6  6EDF               	movwf	indf2,c
  4140                           
  4141                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4142  000FC8  EE20 F004          	lfsr	2,4
  4143  000FCC  5032               	movf	setMotorPWM@m,w,c
  4144  000FCE  26D9               	addwf	fsr2l,f,c
  4145  000FD0  5033               	movf	setMotorPWM@m+1,w,c
  4146  000FD2  22DA               	addwfc	fsr2h,f,c
  4147  000FD4  CFDE F034          	movff	postinc2,??_setMotorPWM
  4148  000FD8  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4149  000FDC  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4150  000FE0  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4151  000FE4  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4152  000FE8  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4153  000FEC  0E06               	movlw	6
  4154  000FEE  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4155  000FF0                     u2245:
  4156  000FF0  3437               	rlcf	??_setMotorPWM+3,w,c
  4157  000FF2  3237               	rrcf	??_setMotorPWM+3,f,c
  4158  000FF4  3236               	rrcf	??_setMotorPWM+2,f,c
  4159  000FF6  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4160  000FF8  D7FB               	goto	u2245
  4161  000FFA  5036               	movf	??_setMotorPWM+2,w,c
  4162  000FFC  6EDF               	movwf	indf2,c
  4163                           
  4164                           ; BSR set to: 0
  4165  000FFE  0012               	return		;funcret
  4166  001000                     __end_of_setMotorPWM:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           intcon	equ	0xFF2
  4172                           postinc0	equ	0xFEE
  4173                           wreg	equ	0xFE8
  4174                           indf1	equ	0xFE7
  4175                           fsr1h	equ	0xFE2
  4176                           fsr1l	equ	0xFE1
  4177                           indf2	equ	0xFDF
  4178                           postinc2	equ	0xFDE
  4179                           postdec2	equ	0xFDD
  4180                           fsr2h	equ	0xFDA
  4181                           fsr2l	equ	0xFD9
  4182                           status	equ	0xFD8
  4183                           
  4184 ;; *************** function ___awdiv *****************
  4185 ;; Defined at:
  4186 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  dividend        2   41[COMRAM] int 
  4189 ;;  divisor         2   43[COMRAM] int 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  quotient        2   47[COMRAM] int 
  4192 ;;  sign            1   46[COMRAM] unsigned char 
  4193 ;;  counter         1   45[COMRAM] unsigned char 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  2   41[COMRAM] int 
  4196 ;; Registers used:
  4197 ;;		wreg, status,2, status,0
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4203 ;;      Params:         4       0       0       0
  4204 ;;      Locals:         4       0       0       0
  4205 ;;      Temps:          0       0       0       0
  4206 ;;      Totals:         8       0       0       0
  4207 ;;Total ram usage:        8 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    3
  4210 ;; This function calls:
  4211 ;;		Nothing
  4212 ;; This function is called by:
  4213 ;;		_setMotorPWM
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           	psect	text17
  4218  00144E                     __ptext17:
  4219                           	opt stack 0
  4220  00144E                     ___awdiv:
  4221                           	opt stack 25
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;incstack = 0
  4225  00144E  0E00               	movlw	0
  4226  001450  6E2F               	movwf	___awdiv@sign,c
  4227  001452  AE2D               	btfss	___awdiv@divisor+1,7,c
  4228  001454  D006               	goto	l2808
  4229  001456  6C2C               	negf	___awdiv@divisor,c
  4230  001458  1E2D               	comf	___awdiv@divisor+1,f,c
  4231  00145A  B0D8               	btfsc	status,0,c
  4232  00145C  2A2D               	incf	___awdiv@divisor+1,f,c
  4233  00145E  0E01               	movlw	1
  4234  001460  6E2F               	movwf	___awdiv@sign,c
  4235  001462                     l2808:
  4236  001462  AE2B               	btfss	___awdiv@dividend+1,7,c
  4237  001464  D006               	goto	l2814
  4238  001466  6C2A               	negf	___awdiv@dividend,c
  4239  001468  1E2B               	comf	___awdiv@dividend+1,f,c
  4240  00146A  B0D8               	btfsc	status,0,c
  4241  00146C  2A2B               	incf	___awdiv@dividend+1,f,c
  4242  00146E  0E01               	movlw	1
  4243  001470  1A2F               	xorwf	___awdiv@sign,f,c
  4244  001472                     l2814:
  4245  001472  0E00               	movlw	0
  4246  001474  6E31               	movwf	___awdiv@quotient+1,c
  4247  001476  0E00               	movlw	0
  4248  001478  6E30               	movwf	___awdiv@quotient,c
  4249  00147A  502C               	movf	___awdiv@divisor,w,c
  4250  00147C  102D               	iorwf	___awdiv@divisor+1,w,c
  4251  00147E  B4D8               	btfsc	status,2,c
  4252  001480  D01C               	goto	l2836
  4253  001482  0E01               	movlw	1
  4254  001484  6E2E               	movwf	___awdiv@counter,c
  4255  001486  D004               	goto	l2822
  4256  001488                     l2820:
  4257  001488  90D8               	bcf	status,0,c
  4258  00148A  362C               	rlcf	___awdiv@divisor,f,c
  4259  00148C  362D               	rlcf	___awdiv@divisor+1,f,c
  4260  00148E  2A2E               	incf	___awdiv@counter,f,c
  4261  001490                     l2822:
  4262  001490  AE2D               	btfss	___awdiv@divisor+1,7,c
  4263  001492  D7FA               	goto	l2820
  4264  001494                     l2824:
  4265  001494  90D8               	bcf	status,0,c
  4266  001496  3630               	rlcf	___awdiv@quotient,f,c
  4267  001498  3631               	rlcf	___awdiv@quotient+1,f,c
  4268  00149A  502C               	movf	___awdiv@divisor,w,c
  4269  00149C  5C2A               	subwf	___awdiv@dividend,w,c
  4270  00149E  502D               	movf	___awdiv@divisor+1,w,c
  4271  0014A0  582B               	subwfb	___awdiv@dividend+1,w,c
  4272  0014A2  A0D8               	btfss	status,0,c
  4273  0014A4  D005               	goto	l2832
  4274  0014A6  502C               	movf	___awdiv@divisor,w,c
  4275  0014A8  5E2A               	subwf	___awdiv@dividend,f,c
  4276  0014AA  502D               	movf	___awdiv@divisor+1,w,c
  4277  0014AC  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4278  0014AE  8030               	bsf	___awdiv@quotient,0,c
  4279  0014B0                     l2832:
  4280  0014B0  90D8               	bcf	status,0,c
  4281  0014B2  322D               	rrcf	___awdiv@divisor+1,f,c
  4282  0014B4  322C               	rrcf	___awdiv@divisor,f,c
  4283  0014B6  2E2E               	decfsz	___awdiv@counter,f,c
  4284  0014B8  D7ED               	goto	l2824
  4285  0014BA                     l2836:
  4286  0014BA  502F               	movf	___awdiv@sign,w,c
  4287  0014BC  B4D8               	btfsc	status,2,c
  4288  0014BE  D004               	goto	l2840
  4289  0014C0  6C30               	negf	___awdiv@quotient,c
  4290  0014C2  1E31               	comf	___awdiv@quotient+1,f,c
  4291  0014C4  B0D8               	btfsc	status,0,c
  4292  0014C6  2A31               	incf	___awdiv@quotient+1,f,c
  4293  0014C8                     l2840:
  4294  0014C8  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4295  0014CC  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4296  0014D0  0012               	return	
  4297  0014D2                     __end_of___awdiv:
  4298                           	opt stack 0
  4299                           tblptru	equ	0xFF8
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon	equ	0xFF2
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           indf1	equ	0xFE7
  4306                           fsr1h	equ	0xFE2
  4307                           fsr1l	equ	0xFE1
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           postdec2	equ	0xFDD
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _sprintf *****************
  4316 ;; Defined at:
  4317 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4320 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4321 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4322 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  tmpval          4    0        struct .
  4325 ;;  cp              3    0        PTR const unsigned char 
  4326 ;;  width           2   10[BANK0 ] int 
  4327 ;;  val             2    7[BANK0 ] unsigned int 
  4328 ;;  ap              2    4[BANK0 ] PTR void [1]
  4329 ;;		 -> ?_sprintf(2), 
  4330 ;;  len             2    0        unsigned int 
  4331 ;;  c               1   12[BANK0 ] char 
  4332 ;;  flag            1    9[BANK0 ] unsigned char 
  4333 ;;  prec            1    6[BANK0 ] char 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  2   47[COMRAM] int 
  4336 ;; Registers used:
  4337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4343 ;;      Params:         8       0       0       0
  4344 ;;      Locals:         0       9       0       0
  4345 ;;      Temps:          0       4       0       0
  4346 ;;      Totals:         8      13       0       0
  4347 ;;Total ram usage:       21 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    4
  4350 ;; This function calls:
  4351 ;;		___lwdiv
  4352 ;;		___lwmod
  4353 ;;		___wmul
  4354 ;;		_isdigit
  4355 ;; This function is called by:
  4356 ;;		_ScanIR
  4357 ;;		_ScanWithRange
  4358 ;;		_main
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text18
  4363  000BC0                     __ptext18:
  4364                           	opt stack 0
  4365  000BC0                     _sprintf:
  4366                           	opt stack 26
  4367                           
  4368                           ;doprnt.c: 494: va_list ap;
  4369                           ;doprnt.c: 499: signed char c;
  4370                           ;doprnt.c: 501: int width;
  4371                           ;doprnt.c: 506: signed char prec;
  4372                           ;doprnt.c: 508: unsigned char flag;
  4373                           ;doprnt.c: 523: union {
  4374                           ;doprnt.c: 524: unsigned long vd;
  4375                           ;doprnt.c: 525: double integ;
  4376                           ;doprnt.c: 526: } tmpval;
  4377                           ;doprnt.c: 528: unsigned int val;
  4378                           ;doprnt.c: 529: unsigned len;
  4379                           ;doprnt.c: 530: const char * cp;
  4380                           ;doprnt.c: 533: *ap = __va_start();
  4381                           
  4382                           ;incstack = 0
  4383  000BC0  0E34               	movlw	low (?_sprintf+4)
  4384  000BC2  0100               	movlb	0	; () banked
  4385  000BC4  6F64               	movwf	sprintf@ap& (0+255),b
  4386  000BC6  0E00               	movlw	high (?_sprintf+4)
  4387  000BC8  0100               	movlb	0	; () banked
  4388  000BCA  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4389                           
  4390                           ;doprnt.c: 536: while(c = *f++) {
  4391  000BCC  D168               	goto	l3008
  4392  000BCE                     l2902:
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;doprnt.c: 538: if(c != '%')
  4396  000BCE  0E25               	movlw	37
  4397  000BD0  0100               	movlb	0	; () banked
  4398  000BD2  196C               	xorwf	sprintf@c& (0+255),w,b
  4399  000BD4  B4D8               	btfsc	status,2,c
  4400  000BD6  D009               	goto	l2908
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;doprnt.c: 540: {
  4404                           ;doprnt.c: 541: ((*sp++ = (c)));
  4405  000BD8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4406  000BDC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4407  000BE0  C06C  FFDF         	movff	sprintf@c,indf2
  4408                           
  4409                           ; BSR set to: 0
  4410  000BE4  4A30               	infsnz	sprintf@sp,f,c
  4411  000BE6  2A31               	incf	sprintf@sp+1,f,c
  4412                           
  4413                           ;doprnt.c: 542: continue;
  4414  000BE8  D15A               	goto	l3008
  4415  000BEA                     l2908:
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;doprnt.c: 543: }
  4419                           ;doprnt.c: 546: width = 0;
  4420  000BEA  0E00               	movlw	0
  4421  000BEC  0100               	movlb	0	; () banked
  4422  000BEE  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4423  000BF0  0E00               	movlw	0
  4424  000BF2  6F6A               	movwf	sprintf@width& (0+255),b
  4425                           
  4426                           ;doprnt.c: 548: flag = 0;
  4427  000BF4  0E00               	movlw	0
  4428  000BF6  0100               	movlb	0	; () banked
  4429  000BF8  6F69               	movwf	sprintf@flag& (0+255),b
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;doprnt.c: 551: switch(*f) {
  4433                           
  4434                           ;doprnt.c: 550: for(;;) {
  4435  000BFA  D004               	goto	l2914
  4436  000BFC                     l2910:
  4437                           
  4438                           ;doprnt.c: 580: flag |= 0x04;
  4439  000BFC  0100               	movlb	0	; () banked
  4440  000BFE  8569               	bsf	sprintf@flag& (0+255),2,b
  4441                           
  4442                           ;doprnt.c: 581: f++;
  4443  000C00  4A32               	infsnz	sprintf@f,f,c
  4444  000C02  2A33               	incf	sprintf@f+1,f,c
  4445  000C04                     l2914:
  4446  000C04  C032  FFF6         	movff	sprintf@f,tblptrl
  4447  000C08  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4448  000C0C                     	if	0	;tblptru may be non-zero
  4449  000C0C                     	endif
  4450  000C0C                     	if	0	;tblptru may be non-zero
  4451  000C0C                     	endif
  4452  000C0C  0008               	tblrd		*
  4453  000C0E  50F5               	movf	tablat,w,c
  4454                           
  4455                           ; Switch size 1, requested type "space"
  4456                           ; Number of cases is 1, Range of values is 48 to 48
  4457                           ; switch strategies available:
  4458                           ; Name         Instructions Cycles
  4459                           ; simple_byte            4     3 (average)
  4460                           ;	Chosen strategy is simple_byte
  4461  000C10  0A30               	xorlw	48	; case 48
  4462  000C12  B4D8               	btfsc	status,2,c
  4463  000C14  D7F3               	goto	l2910
  4464                           
  4465                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4466                           
  4467                           ;doprnt.c: 586: }
  4468                           
  4469                           ;doprnt.c: 585: break;
  4470  000C16  C032  FFF6         	movff	sprintf@f,tblptrl
  4471  000C1A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4472  000C1E                     	if	0	;tblptru may be non-zero
  4473  000C1E                     	endif
  4474  000C1E                     	if	0	;tblptru may be non-zero
  4475  000C1E                     	endif
  4476  000C1E  0008               	tblrd		*
  4477  000C20  50F5               	movf	tablat,w,c
  4478  000C22  ECBE  F00C         	call	_isdigit
  4479  000C26  A0D8               	btfss	status,0,c
  4480  000C28  D03E               	goto	l2930
  4481                           
  4482                           ;doprnt.c: 598: width = 0;
  4483  000C2A  0E00               	movlw	0
  4484  000C2C  0100               	movlb	0	; () banked
  4485  000C2E  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4486  000C30  0E00               	movlw	0
  4487  000C32  6F6A               	movwf	sprintf@width& (0+255),b
  4488  000C34                     l2920:
  4489                           
  4490                           ;doprnt.c: 600: width *= 10;
  4491  000C34  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4492  000C38  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4493  000C3C  0E00               	movlw	0
  4494  000C3E  6E27               	movwf	___wmul@multiplicand+1,c
  4495  000C40  0E0A               	movlw	10
  4496  000C42  6E26               	movwf	___wmul@multiplicand,c
  4497  000C44  EC9A  F00C         	call	___wmul	;wreg free
  4498  000C48  C024  F06A         	movff	?___wmul,sprintf@width
  4499  000C4C  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4500                           
  4501                           ;doprnt.c: 601: width += *f++ - '0';
  4502  000C50  0ED0               	movlw	208
  4503  000C52  0100               	movlb	0	; () banked
  4504  000C54  6F60               	movwf	??_sprintf& (0+255),b
  4505  000C56  0EFF               	movlw	255
  4506  000C58  0100               	movlb	0	; () banked
  4507  000C5A  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4508  000C5C  C032  FFF6         	movff	sprintf@f,tblptrl
  4509  000C60  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4510  000C64                     	if	0	;tblptru may be non-zero
  4511  000C64                     	endif
  4512  000C64                     	if	0	;tblptru may be non-zero
  4513  000C64                     	endif
  4514  000C64  0008               	tblrd		*
  4515  000C66  50F5               	movf	tablat,w,c
  4516  000C68  0100               	movlb	0	; () banked
  4517  000C6A  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4518  000C6C  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4519  000C6E  0100               	movlb	0	; () banked
  4520  000C70  5160               	movf	??_sprintf& (0+255),w,b
  4521  000C72  0100               	movlb	0	; () banked
  4522  000C74  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4523  000C76  0100               	movlb	0	; () banked
  4524  000C78  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4525  000C7A  0100               	movlb	0	; () banked
  4526  000C7C  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4527  000C7E  0100               	movlb	0	; () banked
  4528  000C80  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4529  000C82  0100               	movlb	0	; () banked
  4530  000C84  276A               	addwf	sprintf@width& (0+255),f,b
  4531  000C86  0100               	movlb	0	; () banked
  4532  000C88  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4533  000C8A  0100               	movlb	0	; () banked
  4534  000C8C  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4535                           
  4536                           ; BSR set to: 0
  4537  000C8E  4A32               	infsnz	sprintf@f,f,c
  4538  000C90  2A33               	incf	sprintf@f+1,f,c
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4542  000C92  C032  FFF6         	movff	sprintf@f,tblptrl
  4543  000C96  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4544  000C9A                     	if	0	;tblptru may be non-zero
  4545  000C9A                     	endif
  4546  000C9A                     	if	0	;tblptru may be non-zero
  4547  000C9A                     	endif
  4548  000C9A  0008               	tblrd		*
  4549  000C9C  50F5               	movf	tablat,w,c
  4550  000C9E  ECBE  F00C         	call	_isdigit
  4551  000CA2  B0D8               	btfsc	status,0,c
  4552  000CA4  D7C7               	goto	l2920
  4553  000CA6                     l2930:
  4554  000CA6  C032  FFF6         	movff	sprintf@f,tblptrl
  4555  000CAA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4556  000CAE  4A32               	infsnz	sprintf@f,f,c
  4557  000CB0  2A33               	incf	sprintf@f+1,f,c
  4558  000CB2                     	if	0	;tblptru may be non-zero
  4559  000CB2                     	endif
  4560  000CB2                     	if	0	;tblptru may be non-zero
  4561  000CB2                     	endif
  4562  000CB2  0008               	tblrd		*
  4563  000CB4  CFF5 F06C          	movff	tablat,sprintf@c
  4564  000CB8  0100               	movlb	0	; () banked
  4565  000CBA  516C               	movf	sprintf@c& (0+255),w,b
  4566                           
  4567                           ; Switch size 1, requested type "space"
  4568                           ; Number of cases is 3, Range of values is 0 to 105
  4569                           ; switch strategies available:
  4570                           ; Name         Instructions Cycles
  4571                           ; simple_byte           10     6 (average)
  4572                           ;	Chosen strategy is simple_byte
  4573  000CBC  0A00               	xorlw	0	; case 0
  4574  000CBE  B4D8               	btfsc	status,2,c
  4575  000CC0  D0FB               	goto	l3010
  4576  000CC2  0A64               	xorlw	100	; case 100
  4577  000CC4  B4D8               	btfsc	status,2,c
  4578  000CC6  D003               	goto	l2932
  4579  000CC8  0A0D               	xorlw	13	; case 105
  4580  000CCA  A4D8               	btfss	status,2,c
  4581  000CCC  D0E8               	goto	l3008
  4582  000CCE                     l2932:
  4583                           
  4584                           ;doprnt.c: 1253: {
  4585                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4586  000CCE  C064  FFD9         	movff	sprintf@ap,fsr2l
  4587  000CD2  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4588  000CD6  CFDE F067          	movff	postinc2,sprintf@val
  4589  000CDA  CFDD F068          	movff	postdec2,sprintf@val+1
  4590  000CDE  0E02               	movlw	2
  4591  000CE0  0100               	movlb	0	; () banked
  4592  000CE2  2764               	addwf	sprintf@ap& (0+255),f,b
  4593  000CE4  0E00               	movlw	0
  4594  000CE6  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;doprnt.c: 1261: if((int)val < 0) {
  4598  000CE8  0100               	movlb	0	; () banked
  4599  000CEA  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4600  000CEC  D008               	goto	l2942
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1262: flag |= 0x03;
  4604  000CEE  0E03               	movlw	3
  4605  000CF0  0100               	movlb	0	; () banked
  4606  000CF2  1369               	iorwf	sprintf@flag& (0+255),f,b
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;doprnt.c: 1263: val = -val;
  4610  000CF4  0100               	movlb	0	; () banked
  4611  000CF6  6D67               	negf	sprintf@val& (0+255),b
  4612  000CF8  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4613  000CFA  B0D8               	btfsc	status,0,c
  4614  000CFC  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4615  000CFE                     l2942:
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;doprnt.c: 1264: }
  4619                           ;doprnt.c: 1266: }
  4620                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4621  000CFE  0E01               	movlw	1
  4622  000D00  0100               	movlb	0	; () banked
  4623  000D02  6F6C               	movwf	sprintf@c& (0+255),b
  4624  000D04                     l2944:
  4625                           
  4626                           ; BSR set to: 0
  4627  000D04  0E05               	movlw	5
  4628  000D06  0100               	movlb	0	; () banked
  4629  000D08  196C               	xorwf	sprintf@c& (0+255),w,b
  4630  000D0A  B4D8               	btfsc	status,2,c
  4631  000D0C  D016               	goto	l2956
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;doprnt.c: 1306: if(val < dpowers[c])
  4635                           
  4636                           ; BSR set to: 0
  4637                           
  4638                           ; BSR set to: 0
  4639  000D0E  0100               	movlb	0	; () banked
  4640  000D10  516C               	movf	sprintf@c& (0+255),w,b
  4641  000D12  0D02               	mullw	2
  4642  000D14  0E01               	movlw	low _dpowers
  4643  000D16  24F3               	addwf	prodl,w,c
  4644  000D18  6EF6               	movwf	tblptrl,c
  4645  000D1A  0E03               	movlw	high _dpowers
  4646  000D1C  20F4               	addwfc	prodh,w,c
  4647  000D1E  6EF7               	movwf	tblptrh,c
  4648  000D20                     	if	0	;There are less than 3 active tblptr bytes
  4649  000D20                     	endif
  4650  000D20  0009               	tblrd		*+
  4651  000D22  50F5               	movf	tablat,w,c
  4652  000D24  0100               	movlb	0	; () banked
  4653  000D26  5D67               	subwf	sprintf@val& (0+255),w,b
  4654  000D28  0009               	tblrd		*+
  4655  000D2A  50F5               	movf	tablat,w,c
  4656  000D2C  0100               	movlb	0	; () banked
  4657  000D2E  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4658  000D30  A0D8               	btfss	status,0,c
  4659  000D32  D003               	goto	l2956
  4660                           
  4661                           ; BSR set to: 0
  4662                           
  4663                           ; BSR set to: 0
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;doprnt.c: 1307: break;
  4667  000D34  0100               	movlb	0	; () banked
  4668  000D36  2B6C               	incf	sprintf@c& (0+255),f,b
  4669  000D38  D7E5               	goto	l2944
  4670  000D3A                     l2956:
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4674  000D3A  0100               	movlb	0	; () banked
  4675  000D3C  516A               	movf	sprintf@width& (0+255),w,b
  4676  000D3E  0100               	movlb	0	; () banked
  4677  000D40  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4678  000D42  B4D8               	btfsc	status,2,c
  4679  000D44  D00B               	goto	l2962
  4680                           
  4681                           ; BSR set to: 0
  4682  000D46  C069  F060         	movff	sprintf@flag,??_sprintf
  4683  000D4A  0E03               	movlw	3
  4684  000D4C  0100               	movlb	0	; () banked
  4685  000D4E  1760               	andwf	??_sprintf& (0+255),f,b
  4686  000D50  B4D8               	btfsc	status,2,c
  4687  000D52  D004               	goto	l2962
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;doprnt.c: 1346: width--;
  4691  000D54  0100               	movlb	0	; () banked
  4692  000D56  076A               	decf	sprintf@width& (0+255),f,b
  4693  000D58  A0D8               	btfss	status,0,c
  4694  000D5A  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4695  000D5C                     l2962:
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;doprnt.c: 1381: if(width > c)
  4699  000D5C  0E80               	movlw	128
  4700  000D5E  0100               	movlb	0	; () banked
  4701  000D60  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4702  000D62  0E7F               	movlw	127
  4703  000D64  0100               	movlb	0	; () banked
  4704  000D66  6F60               	movwf	??_sprintf& (0+255),b
  4705  000D68  0100               	movlb	0	; () banked
  4706  000D6A  516A               	movf	sprintf@width& (0+255),w,b
  4707  000D6C  0100               	movlb	0	; () banked
  4708  000D6E  5D6C               	subwf	sprintf@c& (0+255),w,b
  4709  000D70  0100               	movlb	0	; () banked
  4710  000D72  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4711  000D74  0A80               	xorlw	128
  4712  000D76  0100               	movlb	0	; () banked
  4713  000D78  5960               	subwfb	??_sprintf& (0+255),w,b
  4714  000D7A  B0D8               	btfsc	status,0,c
  4715  000D7C  D00B               	goto	l2966
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 1382: width -= c;
  4719  000D7E  0100               	movlb	0	; () banked
  4720  000D80  516C               	movf	sprintf@c& (0+255),w,b
  4721  000D82  0100               	movlb	0	; () banked
  4722  000D84  5F6A               	subwf	sprintf@width& (0+255),f,b
  4723  000D86  0E00               	movlw	0
  4724  000D88  0100               	movlb	0	; () banked
  4725  000D8A  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4726  000D8C  0EFF               	movlw	255
  4727  000D8E  0100               	movlb	0	; () banked
  4728  000D90  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4729  000D92  D005               	goto	l2968
  4730  000D94                     l2966:
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;doprnt.c: 1383: else
  4734                           ;doprnt.c: 1384: width = 0;
  4735  000D94  0E00               	movlw	0
  4736  000D96  0100               	movlb	0	; () banked
  4737  000D98  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4738  000D9A  0E00               	movlw	0
  4739  000D9C  6F6A               	movwf	sprintf@width& (0+255),b
  4740  000D9E                     l2968:
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;doprnt.c: 1387: if(flag & 0x04) {
  4744  000D9E  0100               	movlb	0	; () banked
  4745  000DA0  A569               	btfss	sprintf@flag& (0+255),2,b
  4746  000DA2  D022               	goto	l2984
  4747                           
  4748                           ; BSR set to: 0
  4749                           ;doprnt.c: 1392: if(flag & 0x03)
  4750  000DA4  C069  F060         	movff	sprintf@flag,??_sprintf
  4751  000DA8  0E03               	movlw	3
  4752  000DAA  0100               	movlb	0	; () banked
  4753  000DAC  1760               	andwf	??_sprintf& (0+255),f,b
  4754  000DAE  B4D8               	btfsc	status,2,c
  4755  000DB0  D008               	goto	l2976
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4759  000DB2  C030  FFD9         	movff	sprintf@sp,fsr2l
  4760  000DB6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4761  000DBA  0E2D               	movlw	45
  4762  000DBC  6EDF               	movwf	indf2,c
  4763                           
  4764                           ; BSR set to: 0
  4765  000DBE  4A30               	infsnz	sprintf@sp,f,c
  4766  000DC0  2A31               	incf	sprintf@sp+1,f,c
  4767  000DC2                     l2976:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;doprnt.c: 1415: if(width)
  4771  000DC2  0100               	movlb	0	; () banked
  4772  000DC4  516A               	movf	sprintf@width& (0+255),w,b
  4773  000DC6  0100               	movlb	0	; () banked
  4774  000DC8  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4775  000DCA  B4D8               	btfsc	status,2,c
  4776  000DCC  D034               	goto	l2998
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4780                           
  4781                           ; BSR set to: 0
  4782                           
  4783                           ;doprnt.c: 1416: do
  4784  000DCE  C030  FFD9         	movff	sprintf@sp,fsr2l
  4785  000DD2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4786  000DD6  0E30               	movlw	48
  4787  000DD8  6EDF               	movwf	indf2,c
  4788                           
  4789                           ; BSR set to: 0
  4790  000DDA  4A30               	infsnz	sprintf@sp,f,c
  4791  000DDC  2A31               	incf	sprintf@sp+1,f,c
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;doprnt.c: 1418: while(--width);
  4795  000DDE  0100               	movlb	0	; () banked
  4796  000DE0  076A               	decf	sprintf@width& (0+255),f,b
  4797  000DE2  A0D8               	btfss	status,0,c
  4798  000DE4  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4799  000DE6  D7ED               	goto	l2976
  4800  000DE8                     l2984:
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;doprnt.c: 1422: {
  4804                           ;doprnt.c: 1424: if(width
  4805                           ;doprnt.c: 1428: )
  4806  000DE8  0100               	movlb	0	; () banked
  4807  000DEA  516A               	movf	sprintf@width& (0+255),w,b
  4808  000DEC  0100               	movlb	0	; () banked
  4809  000DEE  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4810  000DF0  B4D8               	btfsc	status,2,c
  4811  000DF2  D012               	goto	l2992
  4812  000DF4                     l2986:
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4816  000DF4  C030  FFD9         	movff	sprintf@sp,fsr2l
  4817  000DF8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4818  000DFC  0E20               	movlw	32
  4819  000DFE  6EDF               	movwf	indf2,c
  4820                           
  4821                           ; BSR set to: 0
  4822  000E00  4A30               	infsnz	sprintf@sp,f,c
  4823  000E02  2A31               	incf	sprintf@sp+1,f,c
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;doprnt.c: 1431: while(--width);
  4827  000E04  0100               	movlb	0	; () banked
  4828  000E06  076A               	decf	sprintf@width& (0+255),f,b
  4829  000E08  A0D8               	btfss	status,0,c
  4830  000E0A  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4831  000E0C  0100               	movlb	0	; () banked
  4832  000E0E  516A               	movf	sprintf@width& (0+255),w,b
  4833  000E10  0100               	movlb	0	; () banked
  4834  000E12  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4835  000E14  A4D8               	btfss	status,2,c
  4836  000E16  D7EE               	goto	l2986
  4837  000E18                     l2992:
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;doprnt.c: 1438: if(flag & 0x03)
  4841  000E18  C069  F060         	movff	sprintf@flag,??_sprintf
  4842  000E1C  0E03               	movlw	3
  4843  000E1E  0100               	movlb	0	; () banked
  4844  000E20  1760               	andwf	??_sprintf& (0+255),f,b
  4845  000E22  B4D8               	btfsc	status,2,c
  4846  000E24  D008               	goto	l2998
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4850  000E26  C030  FFD9         	movff	sprintf@sp,fsr2l
  4851  000E2A  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4852  000E2E  0E2D               	movlw	45
  4853  000E30  6EDF               	movwf	indf2,c
  4854                           
  4855                           ; BSR set to: 0
  4856  000E32  4A30               	infsnz	sprintf@sp,f,c
  4857  000E34  2A31               	incf	sprintf@sp+1,f,c
  4858  000E36                     l2998:
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;doprnt.c: 1469: }
  4862                           ;doprnt.c: 1472: prec = c;
  4863  000E36  C06C  F066         	movff	sprintf@c,sprintf@prec
  4864                           
  4865                           ;doprnt.c: 1474: while(prec--) {
  4866  000E3A  D02B               	goto	l3006
  4867  000E3C                     l3000:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;doprnt.c: 1478: {
  4871                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4872  000E3C  0100               	movlb	0	; () banked
  4873  000E3E  5166               	movf	sprintf@prec& (0+255),w,b
  4874  000E40  0D02               	mullw	2
  4875  000E42  0E01               	movlw	low _dpowers
  4876  000E44  24F3               	addwf	prodl,w,c
  4877  000E46  6EF6               	movwf	tblptrl,c
  4878  000E48  0E03               	movlw	high _dpowers
  4879  000E4A  20F4               	addwfc	prodh,w,c
  4880  000E4C  6EF7               	movwf	tblptrh,c
  4881  000E4E                     	if	0	;There are less than 3 active tblptr bytes
  4882  000E4E                     	endif
  4883  000E4E  0009               	tblrd		*+
  4884  000E50  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4885  000E54  000A               	tblrd		*-
  4886  000E56  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4887  000E5A  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4888  000E5E  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4889  000E62  EC4A  F00B         	call	___lwdiv	;wreg free
  4890  000E66  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4891  000E6A  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4892  000E6E  0E00               	movlw	0
  4893  000E70  6E2E               	movwf	___lwmod@divisor+1,c
  4894  000E72  0E0A               	movlw	10
  4895  000E74  6E2D               	movwf	___lwmod@divisor,c
  4896  000E76  EC73  F00B         	call	___lwmod	;wreg free
  4897  000E7A  502B               	movf	?___lwmod,w,c
  4898  000E7C  0F30               	addlw	48
  4899  000E7E  0100               	movlb	0	; () banked
  4900  000E80  6F6C               	movwf	sprintf@c& (0+255),b
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;doprnt.c: 1523: }
  4904                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4905  000E82  C030  FFD9         	movff	sprintf@sp,fsr2l
  4906  000E86  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4907  000E8A  C06C  FFDF         	movff	sprintf@c,indf2
  4908                           
  4909                           ; BSR set to: 0
  4910  000E8E  4A30               	infsnz	sprintf@sp,f,c
  4911  000E90  2A31               	incf	sprintf@sp+1,f,c
  4912  000E92                     l3006:
  4913                           
  4914                           ; BSR set to: 0
  4915  000E92  0100               	movlb	0	; () banked
  4916  000E94  0766               	decf	sprintf@prec& (0+255),f,b
  4917  000E96  0100               	movlb	0	; () banked
  4918  000E98  2966               	incf	sprintf@prec& (0+255),w,b
  4919  000E9A  A4D8               	btfss	status,2,c
  4920  000E9C  D7CF               	goto	l3000
  4921  000E9E                     l3008:
  4922  000E9E  C032  FFF6         	movff	sprintf@f,tblptrl
  4923  000EA2  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4924  000EA6  4A32               	infsnz	sprintf@f,f,c
  4925  000EA8  2A33               	incf	sprintf@f+1,f,c
  4926  000EAA                     	if	0	;tblptru may be non-zero
  4927  000EAA                     	endif
  4928  000EAA                     	if	0	;tblptru may be non-zero
  4929  000EAA                     	endif
  4930  000EAA  0008               	tblrd		*
  4931  000EAC  CFF5 F06C          	movff	tablat,sprintf@c
  4932  000EB0  0100               	movlb	0	; () banked
  4933  000EB2  516C               	movf	sprintf@c& (0+255),w,b
  4934  000EB4  A4D8               	btfss	status,2,c
  4935  000EB6  D68B               	goto	l2902
  4936  000EB8                     l3010:
  4937                           
  4938                           ;doprnt.c: 1538: *sp = 0;
  4939  000EB8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4940  000EBC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4941  000EC0  0E00               	movlw	0
  4942  000EC2  6EDF               	movwf	indf2,c
  4943  000EC4  0012               	return	
  4944  000EC6                     __end_of_sprintf:
  4945                           	opt stack 0
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           postinc0	equ	0xFEE
  4954                           wreg	equ	0xFE8
  4955                           indf1	equ	0xFE7
  4956                           fsr1h	equ	0xFE2
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function _isdigit *****************
  4966 ;; Defined at:
  4967 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  c               1    wreg     unsigned char 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  c               1   37[COMRAM] unsigned char 
  4972 ;; Return value:  Size  Location     Type
  4973 ;;		None               void
  4974 ;; Registers used:
  4975 ;;		wreg, status,2, status,0
  4976 ;; Tracked objects:
  4977 ;;		On entry : 0/0
  4978 ;;		On exit  : 0/0
  4979 ;;		Unchanged: 0/0
  4980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4981 ;;      Params:         0       0       0       0
  4982 ;;      Locals:         2       0       0       0
  4983 ;;      Temps:          1       0       0       0
  4984 ;;      Totals:         3       0       0       0
  4985 ;;Total ram usage:        3 bytes
  4986 ;; Hardware stack levels used:    1
  4987 ;; Hardware stack levels required when called:    3
  4988 ;; This function calls:
  4989 ;;		Nothing
  4990 ;; This function is called by:
  4991 ;;		_sprintf
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text19
  4996  00197C                     __ptext19:
  4997                           	opt stack 0
  4998  00197C                     _isdigit:
  4999                           	opt stack 26
  5000                           
  5001                           ;incstack = 0
  5002                           ;isdigit@c stored from wreg
  5003  00197C  6E26               	movwf	isdigit@c,c
  5004  00197E  0E00               	movlw	0
  5005  001980  6E25               	movwf	_isdigit$1963,c
  5006  001982  0E3A               	movlw	58
  5007  001984  6026               	cpfslt	isdigit@c,c
  5008  001986  D005               	goto	l2056
  5009  001988  0E2F               	movlw	47
  5010  00198A  6426               	cpfsgt	isdigit@c,c
  5011  00198C  D002               	goto	l2056
  5012  00198E  0E01               	movlw	1
  5013  001990  6E25               	movwf	_isdigit$1963,c
  5014  001992                     l2056:
  5015  001992  C025  F024         	movff	_isdigit$1963,??_isdigit
  5016  001996  3024               	rrcf	??_isdigit,w,c
  5017  001998  0012               	return	
  5018  00199A                     __end_of_isdigit:
  5019                           	opt stack 0
  5020                           tblptru	equ	0xFF8
  5021                           tblptrh	equ	0xFF7
  5022                           tblptrl	equ	0xFF6
  5023                           tablat	equ	0xFF5
  5024                           prodh	equ	0xFF4
  5025                           prodl	equ	0xFF3
  5026                           intcon	equ	0xFF2
  5027                           postinc0	equ	0xFEE
  5028                           wreg	equ	0xFE8
  5029                           indf1	equ	0xFE7
  5030                           fsr1h	equ	0xFE2
  5031                           fsr1l	equ	0xFE1
  5032                           indf2	equ	0xFDF
  5033                           postinc2	equ	0xFDE
  5034                           postdec2	equ	0xFDD
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function ___wmul *****************
  5040 ;; Defined at:
  5041 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;  multiplier      2   35[COMRAM] unsigned int 
  5044 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  product         2   39[COMRAM] unsigned int 
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  2   35[COMRAM] unsigned int 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2, status,0, prodl, prodh
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/0
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5056 ;;      Params:         4       0       0       0
  5057 ;;      Locals:         2       0       0       0
  5058 ;;      Temps:          0       0       0       0
  5059 ;;      Totals:         6       0       0       0
  5060 ;;Total ram usage:        6 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; Hardware stack levels required when called:    3
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_setMotorPWM
  5067 ;;		_sprintf
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text20
  5072  001934                     __ptext20:
  5073                           	opt stack 0
  5074  001934                     ___wmul:
  5075                           	opt stack 25
  5076                           
  5077                           ;incstack = 0
  5078  001934  5024               	movf	___wmul@multiplier,w,c
  5079  001936  0226               	mulwf	___wmul@multiplicand,c
  5080  001938  CFF3 F028          	movff	prodl,___wmul@product
  5081  00193C  CFF4 F029          	movff	prodh,___wmul@product+1
  5082  001940  5024               	movf	___wmul@multiplier,w,c
  5083  001942  0227               	mulwf	___wmul@multiplicand+1,c
  5084  001944  50F3               	movf	prodl,w,c
  5085  001946  2629               	addwf	___wmul@product+1,f,c
  5086  001948  5025               	movf	___wmul@multiplier+1,w,c
  5087  00194A  0226               	mulwf	___wmul@multiplicand,c
  5088  00194C  50F3               	movf	prodl,w,c
  5089  00194E  2629               	addwf	___wmul@product+1,f,c
  5090  001950  C028  F024         	movff	___wmul@product,?___wmul
  5091  001954  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5092  001958  0012               	return	
  5093  00195A                     __end_of___wmul:
  5094                           	opt stack 0
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf1	equ	0xFE7
  5105                           fsr1h	equ	0xFE2
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function ___lwmod *****************
  5115 ;; Defined at:
  5116 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  dividend        2   42[COMRAM] unsigned int 
  5119 ;;  divisor         2   44[COMRAM] unsigned int 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  counter         1   46[COMRAM] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  2   42[COMRAM] unsigned int 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5131 ;;      Params:         4       0       0       0
  5132 ;;      Locals:         1       0       0       0
  5133 ;;      Temps:          0       0       0       0
  5134 ;;      Totals:         5       0       0       0
  5135 ;;Total ram usage:        5 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    3
  5138 ;; This function calls:
  5139 ;;		Nothing
  5140 ;; This function is called by:
  5141 ;;		_sprintf
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text21
  5146  0016E6                     __ptext21:
  5147                           	opt stack 0
  5148  0016E6                     ___lwmod:
  5149                           	opt stack 26
  5150                           
  5151                           ;incstack = 0
  5152  0016E6  502D               	movf	___lwmod@divisor,w,c
  5153  0016E8  102E               	iorwf	___lwmod@divisor+1,w,c
  5154  0016EA  B4D8               	btfsc	status,2,c
  5155  0016EC  D018               	goto	l881
  5156  0016EE  0E01               	movlw	1
  5157  0016F0  6E2F               	movwf	___lwmod@counter,c
  5158  0016F2  D004               	goto	l2088
  5159  0016F4                     l2086:
  5160  0016F4  90D8               	bcf	status,0,c
  5161  0016F6  362D               	rlcf	___lwmod@divisor,f,c
  5162  0016F8  362E               	rlcf	___lwmod@divisor+1,f,c
  5163  0016FA  2A2F               	incf	___lwmod@counter,f,c
  5164  0016FC                     l2088:
  5165  0016FC  AE2E               	btfss	___lwmod@divisor+1,7,c
  5166  0016FE  D7FA               	goto	l2086
  5167  001700                     l2090:
  5168  001700  502D               	movf	___lwmod@divisor,w,c
  5169  001702  5C2B               	subwf	___lwmod@dividend,w,c
  5170  001704  502E               	movf	___lwmod@divisor+1,w,c
  5171  001706  582C               	subwfb	___lwmod@dividend+1,w,c
  5172  001708  A0D8               	btfss	status,0,c
  5173  00170A  D004               	goto	l2094
  5174  00170C  502D               	movf	___lwmod@divisor,w,c
  5175  00170E  5E2B               	subwf	___lwmod@dividend,f,c
  5176  001710  502E               	movf	___lwmod@divisor+1,w,c
  5177  001712  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5178  001714                     l2094:
  5179  001714  90D8               	bcf	status,0,c
  5180  001716  322E               	rrcf	___lwmod@divisor+1,f,c
  5181  001718  322D               	rrcf	___lwmod@divisor,f,c
  5182  00171A  2E2F               	decfsz	___lwmod@counter,f,c
  5183  00171C  D7F1               	goto	l2090
  5184  00171E                     l881:
  5185  00171E  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5186  001722  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5187  001726  0012               	return		;funcret
  5188  001728                     __end_of___lwmod:
  5189                           	opt stack 0
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           indf1	equ	0xFE7
  5200                           fsr1h	equ	0xFE2
  5201                           fsr1l	equ	0xFE1
  5202                           indf2	equ	0xFDF
  5203                           postinc2	equ	0xFDE
  5204                           postdec2	equ	0xFDD
  5205                           fsr2h	equ	0xFDA
  5206                           fsr2l	equ	0xFD9
  5207                           status	equ	0xFD8
  5208                           
  5209 ;; *************** function ___lwdiv *****************
  5210 ;; Defined at:
  5211 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  dividend        2   35[COMRAM] unsigned int 
  5214 ;;  divisor         2   37[COMRAM] unsigned int 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  quotient        2   39[COMRAM] unsigned int 
  5217 ;;  counter         1   41[COMRAM] unsigned char 
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  2   35[COMRAM] unsigned int 
  5220 ;; Registers used:
  5221 ;;		wreg, status,2, status,0
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5227 ;;      Params:         4       0       0       0
  5228 ;;      Locals:         3       0       0       0
  5229 ;;      Temps:          0       0       0       0
  5230 ;;      Totals:         7       0       0       0
  5231 ;;Total ram usage:        7 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    3
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_sprintf
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           	psect	text22
  5242  001694                     __ptext22:
  5243                           	opt stack 0
  5244  001694                     ___lwdiv:
  5245                           	opt stack 26
  5246                           
  5247                           ;incstack = 0
  5248  001694  0E00               	movlw	0
  5249  001696  6E29               	movwf	___lwdiv@quotient+1,c
  5250  001698  0E00               	movlw	0
  5251  00169A  6E28               	movwf	___lwdiv@quotient,c
  5252  00169C  5026               	movf	___lwdiv@divisor,w,c
  5253  00169E  1027               	iorwf	___lwdiv@divisor+1,w,c
  5254  0016A0  B4D8               	btfsc	status,2,c
  5255  0016A2  D01C               	goto	l871
  5256  0016A4  0E01               	movlw	1
  5257  0016A6  6E2A               	movwf	___lwdiv@counter,c
  5258  0016A8  D004               	goto	l2068
  5259  0016AA                     l2066:
  5260  0016AA  90D8               	bcf	status,0,c
  5261  0016AC  3626               	rlcf	___lwdiv@divisor,f,c
  5262  0016AE  3627               	rlcf	___lwdiv@divisor+1,f,c
  5263  0016B0  2A2A               	incf	___lwdiv@counter,f,c
  5264  0016B2                     l2068:
  5265  0016B2  AE27               	btfss	___lwdiv@divisor+1,7,c
  5266  0016B4  D7FA               	goto	l2066
  5267  0016B6                     l2070:
  5268  0016B6  90D8               	bcf	status,0,c
  5269  0016B8  3628               	rlcf	___lwdiv@quotient,f,c
  5270  0016BA  3629               	rlcf	___lwdiv@quotient+1,f,c
  5271  0016BC  5026               	movf	___lwdiv@divisor,w,c
  5272  0016BE  5C24               	subwf	___lwdiv@dividend,w,c
  5273  0016C0  5027               	movf	___lwdiv@divisor+1,w,c
  5274  0016C2  5825               	subwfb	___lwdiv@dividend+1,w,c
  5275  0016C4  A0D8               	btfss	status,0,c
  5276  0016C6  D005               	goto	l2078
  5277  0016C8  5026               	movf	___lwdiv@divisor,w,c
  5278  0016CA  5E24               	subwf	___lwdiv@dividend,f,c
  5279  0016CC  5027               	movf	___lwdiv@divisor+1,w,c
  5280  0016CE  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5281  0016D0  8028               	bsf	___lwdiv@quotient,0,c
  5282  0016D2                     l2078:
  5283  0016D2  90D8               	bcf	status,0,c
  5284  0016D4  3227               	rrcf	___lwdiv@divisor+1,f,c
  5285  0016D6  3226               	rrcf	___lwdiv@divisor,f,c
  5286  0016D8  2E2A               	decfsz	___lwdiv@counter,f,c
  5287  0016DA  D7ED               	goto	l2070
  5288  0016DC                     l871:
  5289  0016DC  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5290  0016E0  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5291  0016E4  0012               	return		;funcret
  5292  0016E6                     __end_of___lwdiv:
  5293                           	opt stack 0
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon	equ	0xFF2
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           indf1	equ	0xFE7
  5304                           fsr1h	equ	0xFE2
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _grabRightIR *****************
  5314 ;; Defined at:
  5315 ;;		line 74 in file "IR_Reading.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5320 ;;  i               1   42[COMRAM] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;                  2   35[COMRAM] unsigned int 
  5323 ;; Registers used:
  5324 ;;		wreg, status,2, status,0
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5330 ;;      Params:         2       0       0       0
  5331 ;;      Locals:         3       0       0       0
  5332 ;;      Temps:          3       0       0       0
  5333 ;;      Totals:         8       0       0       0
  5334 ;;Total ram usage:        8 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    3
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_ScanIR
  5341 ;;		_ScanWithRange
  5342 ;;		_main
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text23
  5347  001552                     __ptext23:
  5348                           	opt stack 0
  5349  001552                     _grabRightIR:
  5350                           	opt stack 27
  5351                           
  5352                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5353                           
  5354                           ;incstack = 0
  5355  001552  0E00               	movlw	0
  5356  001554  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5357  001556  0E00               	movlw	0
  5358  001558  6E29               	movwf	grabRightIR@IR_signal,c
  5359                           
  5360                           ;IR_Reading.c: 77: unsigned char i=0;
  5361  00155A  0E00               	movlw	0
  5362  00155C  6E2B               	movwf	grabRightIR@i,c
  5363                           
  5364                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5365  00155E  0E00               	movlw	0
  5366  001560  6E2B               	movwf	grabRightIR@i,c
  5367  001562                     l2130:
  5368  001562  0E03               	movlw	3
  5369  001564  642B               	cpfsgt	grabRightIR@i,c
  5370  001566  D001               	goto	l2134
  5371  001568  D01E               	goto	l2140
  5372  00156A                     l2134:
  5373                           
  5374                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5375  00156A  5069               	movf	3945,w,c	;volatile
  5376  00156C  6E26               	movwf	??_grabRightIR& (0+255),c
  5377  00156E  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5378  001570  0E07               	movlw	7
  5379  001572                     u1455:
  5380  001572  90D8               	bcf	status,0,c
  5381  001574  3626               	rlcf	??_grabRightIR,f,c
  5382  001576  3627               	rlcf	??_grabRightIR+1,f,c
  5383  001578  2EE8               	decfsz	wreg,f,c
  5384  00157A  D7FB               	goto	u1455
  5385  00157C  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5386  001580  90D8               	bcf	status,0,c
  5387  001582  3228               	rrcf	??_grabRightIR+2,f,c
  5388  001584  5028               	movf	??_grabRightIR+2,w,c
  5389  001586  1226               	iorwf	??_grabRightIR,f,c
  5390  001588  0E00               	movlw	0
  5391  00158A  1227               	iorwf	??_grabRightIR+1,f,c
  5392  00158C  5026               	movf	??_grabRightIR,w,c
  5393  00158E  2629               	addwf	grabRightIR@IR_signal,f,c
  5394  001590  5027               	movf	??_grabRightIR+1,w,c
  5395  001592  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5396                           
  5397                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5398  001594  0E82               	movlw	130
  5399  001596  6E26               	movwf	??_grabRightIR& (0+255),c
  5400  001598  0EDE               	movlw	222
  5401  00159A                     u2997:
  5402  00159A  2EE8               	decfsz	wreg,f,c
  5403  00159C  D7FE               	goto	u2997
  5404  00159E  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5405  0015A0  D7FC               	goto	u2997
  5406  0015A2  2A2B               	incf	grabRightIR@i,f,c
  5407  0015A4  D7DE               	goto	l2130
  5408  0015A6                     l2140:
  5409                           
  5410                           ;IR_Reading.c: 83: }
  5411                           ;IR_Reading.c: 85: return IR_signal>>2;
  5412  0015A6  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5413  0015AA  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5414  0015AE  90D8               	bcf	status,0,c
  5415  0015B0  3227               	rrcf	??_grabRightIR+1,f,c
  5416  0015B2  3226               	rrcf	??_grabRightIR,f,c
  5417  0015B4  90D8               	bcf	status,0,c
  5418  0015B6  3227               	rrcf	??_grabRightIR+1,f,c
  5419  0015B8  3226               	rrcf	??_grabRightIR,f,c
  5420  0015BA  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5421  0015BE  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5422  0015C2  0012               	return	
  5423  0015C4                     __end_of_grabRightIR:
  5424                           	opt stack 0
  5425                           tblptru	equ	0xFF8
  5426                           tblptrh	equ	0xFF7
  5427                           tblptrl	equ	0xFF6
  5428                           tablat	equ	0xFF5
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           postinc0	equ	0xFEE
  5433                           wreg	equ	0xFE8
  5434                           indf1	equ	0xFE7
  5435                           fsr1h	equ	0xFE2
  5436                           fsr1l	equ	0xFE1
  5437                           indf2	equ	0xFDF
  5438                           postinc2	equ	0xFDE
  5439                           postdec2	equ	0xFDD
  5440                           fsr2h	equ	0xFDA
  5441                           fsr2l	equ	0xFD9
  5442                           status	equ	0xFD8
  5443                           
  5444 ;; *************** function _grabLeftIR *****************
  5445 ;; Defined at:
  5446 ;;		line 90 in file "IR_Reading.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;		None
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5451 ;;  i               1   42[COMRAM] unsigned char 
  5452 ;; Return value:  Size  Location     Type
  5453 ;;                  2   35[COMRAM] unsigned int 
  5454 ;; Registers used:
  5455 ;;		wreg, status,2, status,0
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5461 ;;      Params:         2       0       0       0
  5462 ;;      Locals:         3       0       0       0
  5463 ;;      Temps:          3       0       0       0
  5464 ;;      Totals:         8       0       0       0
  5465 ;;Total ram usage:        8 bytes
  5466 ;; Hardware stack levels used:    1
  5467 ;; Hardware stack levels required when called:    3
  5468 ;; This function calls:
  5469 ;;		Nothing
  5470 ;; This function is called by:
  5471 ;;		_ScanIR
  5472 ;;		_ScanWithRange
  5473 ;;		_main
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text24
  5478  0015C4                     __ptext24:
  5479                           	opt stack 0
  5480  0015C4                     _grabLeftIR:
  5481                           	opt stack 27
  5482                           
  5483                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5484                           
  5485                           ;incstack = 0
  5486  0015C4  0E00               	movlw	0
  5487  0015C6  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5488  0015C8  0E00               	movlw	0
  5489  0015CA  6E29               	movwf	grabLeftIR@IR_signal,c
  5490                           
  5491                           ;IR_Reading.c: 93: unsigned char i=0;
  5492  0015CC  0E00               	movlw	0
  5493  0015CE  6E2B               	movwf	grabLeftIR@i,c
  5494                           
  5495                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5496  0015D0  0E00               	movlw	0
  5497  0015D2  6E2B               	movwf	grabLeftIR@i,c
  5498  0015D4                     l2146:
  5499  0015D4  0E03               	movlw	3
  5500  0015D6  642B               	cpfsgt	grabLeftIR@i,c
  5501  0015D8  D001               	goto	l2150
  5502  0015DA  D01E               	goto	l2156
  5503  0015DC                     l2150:
  5504                           
  5505                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5506  0015DC  5067               	movf	3943,w,c	;volatile
  5507  0015DE  6E26               	movwf	??_grabLeftIR& (0+255),c
  5508  0015E0  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5509  0015E2  0E07               	movlw	7
  5510  0015E4                     u1485:
  5511  0015E4  90D8               	bcf	status,0,c
  5512  0015E6  3626               	rlcf	??_grabLeftIR,f,c
  5513  0015E8  3627               	rlcf	??_grabLeftIR+1,f,c
  5514  0015EA  2EE8               	decfsz	wreg,f,c
  5515  0015EC  D7FB               	goto	u1485
  5516  0015EE  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5517  0015F2  90D8               	bcf	status,0,c
  5518  0015F4  3228               	rrcf	??_grabLeftIR+2,f,c
  5519  0015F6  5028               	movf	??_grabLeftIR+2,w,c
  5520  0015F8  1226               	iorwf	??_grabLeftIR,f,c
  5521  0015FA  0E00               	movlw	0
  5522  0015FC  1227               	iorwf	??_grabLeftIR+1,f,c
  5523  0015FE  5026               	movf	??_grabLeftIR,w,c
  5524  001600  2629               	addwf	grabLeftIR@IR_signal,f,c
  5525  001602  5027               	movf	??_grabLeftIR+1,w,c
  5526  001604  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5527                           
  5528                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5529  001606  0E82               	movlw	130
  5530  001608  6E26               	movwf	??_grabLeftIR& (0+255),c
  5531  00160A  0EDE               	movlw	222
  5532  00160C                     u3007:
  5533  00160C  2EE8               	decfsz	wreg,f,c
  5534  00160E  D7FE               	goto	u3007
  5535  001610  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5536  001612  D7FC               	goto	u3007
  5537  001614  2A2B               	incf	grabLeftIR@i,f,c
  5538  001616  D7DE               	goto	l2146
  5539  001618                     l2156:
  5540                           
  5541                           ;IR_Reading.c: 99: }
  5542                           ;IR_Reading.c: 101: return IR_signal>>2;
  5543  001618  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5544  00161C  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5545  001620  90D8               	bcf	status,0,c
  5546  001622  3227               	rrcf	??_grabLeftIR+1,f,c
  5547  001624  3226               	rrcf	??_grabLeftIR,f,c
  5548  001626  90D8               	bcf	status,0,c
  5549  001628  3227               	rrcf	??_grabLeftIR+1,f,c
  5550  00162A  3226               	rrcf	??_grabLeftIR,f,c
  5551  00162C  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5552  001630  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5553  001634  0012               	return	
  5554  001636                     __end_of_grabLeftIR:
  5555                           	opt stack 0
  5556                           tblptru	equ	0xFF8
  5557                           tblptrh	equ	0xFF7
  5558                           tblptrl	equ	0xFF6
  5559                           tablat	equ	0xFF5
  5560                           prodh	equ	0xFF4
  5561                           prodl	equ	0xFF3
  5562                           intcon	equ	0xFF2
  5563                           postinc0	equ	0xFEE
  5564                           wreg	equ	0xFE8
  5565                           indf1	equ	0xFE7
  5566                           fsr1h	equ	0xFE2
  5567                           fsr1l	equ	0xFE1
  5568                           indf2	equ	0xFDF
  5569                           postinc2	equ	0xFDE
  5570                           postdec2	equ	0xFDD
  5571                           fsr2h	equ	0xFDA
  5572                           fsr2l	equ	0xFD9
  5573                           status	equ	0xFD8
  5574                           
  5575 ;; *************** function _SetLine *****************
  5576 ;; Defined at:
  5577 ;;		line 74 in file "LCD.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  line            1    wreg     unsigned char 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  line            1   41[COMRAM] unsigned char 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;		None               void
  5584 ;; Registers used:
  5585 ;;		wreg, status,2, status,0, cstack
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5591 ;;      Params:         0       0       0       0
  5592 ;;      Locals:         1       0       0       0
  5593 ;;      Temps:          0       0       0       0
  5594 ;;      Totals:         1       0       0       0
  5595 ;;Total ram usage:        1 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    6
  5598 ;; This function calls:
  5599 ;;		_SendLCD
  5600 ;; This function is called by:
  5601 ;;		_ScanIR
  5602 ;;		_ScanWithRange
  5603 ;;		_main
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text25
  5608  001884                     __ptext25:
  5609                           	opt stack 0
  5610  001884                     _SetLine:
  5611                           	opt stack 24
  5612                           
  5613                           ;incstack = 0
  5614                           ;SetLine@line stored from wreg
  5615  001884  6E2A               	movwf	SetLine@line,c
  5616                           
  5617                           ;LCD.c: 75: if (line==1) {
  5618  001886  042A               	decf	SetLine@line,w,c
  5619  001888  A4D8               	btfss	status,2,c
  5620  00188A  D006               	goto	l2164
  5621                           
  5622                           ;LCD.c: 76: SendLCD(0x80,0);
  5623  00188C  0E00               	movlw	0
  5624  00188E  6E28               	movwf	SendLCD@type,c
  5625  001890  0E80               	movlw	128
  5626  001892  EC5A  F00C         	call	_SendLCD
  5627                           
  5628                           ;LCD.c: 77: } else if (line==2) {
  5629  001896  D009               	goto	l2168
  5630  001898                     l2164:
  5631  001898  0E02               	movlw	2
  5632  00189A  182A               	xorwf	SetLine@line,w,c
  5633  00189C  A4D8               	btfss	status,2,c
  5634  00189E  D005               	goto	l2168
  5635                           
  5636                           ;LCD.c: 78: SendLCD(0xC0,0);
  5637  0018A0  0E00               	movlw	0
  5638  0018A2  6E28               	movwf	SendLCD@type,c
  5639  0018A4  0EC0               	movlw	192
  5640  0018A6  EC5A  F00C         	call	_SendLCD
  5641  0018AA                     l2168:
  5642                           
  5643                           ;LCD.c: 79: }
  5644                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5645  0018AA  0E21               	movlw	33
  5646  0018AC                     u3017:
  5647  0018AC  2EE8               	decfsz	wreg,f,c
  5648  0018AE  D7FE               	goto	u3017
  5649  0018B0  F000               	nop	
  5650  0018B2  0012               	return		;funcret
  5651  0018B4                     __end_of_SetLine:
  5652                           	opt stack 0
  5653                           tblptru	equ	0xFF8
  5654                           tblptrh	equ	0xFF7
  5655                           tblptrl	equ	0xFF6
  5656                           tablat	equ	0xFF5
  5657                           prodh	equ	0xFF4
  5658                           prodl	equ	0xFF3
  5659                           intcon	equ	0xFF2
  5660                           postinc0	equ	0xFEE
  5661                           wreg	equ	0xFE8
  5662                           indf1	equ	0xFE7
  5663                           fsr1h	equ	0xFE2
  5664                           fsr1l	equ	0xFE1
  5665                           indf2	equ	0xFDF
  5666                           postinc2	equ	0xFDE
  5667                           postdec2	equ	0xFDD
  5668                           fsr2h	equ	0xFDA
  5669                           fsr2l	equ	0xFD9
  5670                           status	equ	0xFD8
  5671                           
  5672 ;; *************** function _LCD_String *****************
  5673 ;; Defined at:
  5674 ;;		line 83 in file "LCD.c"
  5675 ;; Parameters:    Size  Location     Type
  5676 ;;  string          2   41[COMRAM] PTR unsigned char 
  5677 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5678 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5679 ;;		 -> STR_1(12), 
  5680 ;; Auto vars:     Size  Location     Type
  5681 ;;		None
  5682 ;; Return value:  Size  Location     Type
  5683 ;;		None               void
  5684 ;; Registers used:
  5685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5686 ;; Tracked objects:
  5687 ;;		On entry : 0/0
  5688 ;;		On exit  : 0/0
  5689 ;;		Unchanged: 0/0
  5690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5691 ;;      Params:         2       0       0       0
  5692 ;;      Locals:         0       0       0       0
  5693 ;;      Temps:          0       0       0       0
  5694 ;;      Totals:         2       0       0       0
  5695 ;;Total ram usage:        2 bytes
  5696 ;; Hardware stack levels used:    1
  5697 ;; Hardware stack levels required when called:    6
  5698 ;; This function calls:
  5699 ;;		_SendLCD
  5700 ;; This function is called by:
  5701 ;;		_ScanIR
  5702 ;;		_ScanWithRange
  5703 ;;		_main
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	text26
  5708  001636                     __ptext26:
  5709                           	opt stack 0
  5710  001636                     _LCD_String:
  5711                           	opt stack 23
  5712                           
  5713                           ;LCD.c: 85: while(*string != 0){
  5714                           
  5715                           ;incstack = 0
  5716  001636  D01A               	goto	l2178
  5717  001638                     l2172:
  5718                           
  5719                           ;LCD.c: 88: SendLCD(*string++,1);
  5720  001638  0E01               	movlw	1
  5721  00163A  6E28               	movwf	SendLCD@type,c
  5722  00163C  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5723  001640  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5724  001644  6AF8               	clrf	tblptru,c
  5725  001646  0E02               	movlw	(high __ramtop+-1)
  5726  001648  64F7               	cpfsgt	tblptrh,c
  5727  00164A  D003               	bra	u1527
  5728  00164C  0008               	tblrd		*
  5729  00164E  50F5               	movf	tablat,w,c
  5730  001650  D005               	bra	u1520
  5731  001652                     u1527:
  5732  001652  CFF6 FFE1          	movff	tblptrl,fsr1l
  5733  001656  CFF7 FFE2          	movff	tblptrh,fsr1h
  5734  00165A  50E7               	movf	indf1,w,c
  5735  00165C                     u1520:
  5736  00165C  EC5A  F00C         	call	_SendLCD
  5737  001660  4A2A               	infsnz	LCD_String@string,f,c
  5738  001662  2A2B               	incf	LCD_String@string+1,f,c
  5739                           
  5740                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5741  001664  0E21               	movlw	33
  5742  001666                     u3027:
  5743  001666  2EE8               	decfsz	wreg,f,c
  5744  001668  D7FE               	goto	u3027
  5745  00166A  F000               	nop	
  5746  00166C                     l2178:
  5747  00166C  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5748  001670  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5749  001674  6AF8               	clrf	tblptru,c
  5750  001676  0E02               	movlw	(high __ramtop+-1)
  5751  001678  64F7               	cpfsgt	tblptrh,c
  5752  00167A  D003               	bra	u1537
  5753  00167C  0008               	tblrd		*
  5754  00167E  50F5               	movf	tablat,w,c
  5755  001680  D005               	bra	u1530
  5756  001682                     u1537:
  5757  001682  CFF6 FFE1          	movff	tblptrl,fsr1l
  5758  001686  CFF7 FFE2          	movff	tblptrh,fsr1h
  5759  00168A  50E7               	movf	indf1,w,c
  5760  00168C                     u1530:
  5761  00168C  0900               	iorlw	0
  5762  00168E  B4D8               	btfsc	status,2,c
  5763  001690  0012               	return	
  5764  001692  D7D2               	goto	l2172
  5765  001694                     __end_of_LCD_String:
  5766                           	opt stack 0
  5767                           tblptru	equ	0xFF8
  5768                           tblptrh	equ	0xFF7
  5769                           tblptrl	equ	0xFF6
  5770                           tablat	equ	0xFF5
  5771                           prodh	equ	0xFF4
  5772                           prodl	equ	0xFF3
  5773                           intcon	equ	0xFF2
  5774                           postinc0	equ	0xFEE
  5775                           wreg	equ	0xFE8
  5776                           indf1	equ	0xFE7
  5777                           fsr1h	equ	0xFE2
  5778                           fsr1l	equ	0xFE1
  5779                           indf2	equ	0xFDF
  5780                           postinc2	equ	0xFDE
  5781                           postdec2	equ	0xFDD
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _SendLCD *****************
  5787 ;; Defined at:
  5788 ;;		line 27 in file "LCD.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  Byte            1    wreg     unsigned char 
  5791 ;;  type            1   39[COMRAM] unsigned char 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  Byte            1   40[COMRAM] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;		None               void
  5796 ;; Registers used:
  5797 ;;		wreg, status,2, status,0, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5803 ;;      Params:         1       0       0       0
  5804 ;;      Locals:         1       0       0       0
  5805 ;;      Temps:          0       0       0       0
  5806 ;;      Totals:         2       0       0       0
  5807 ;;Total ram usage:        2 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    5
  5810 ;; This function calls:
  5811 ;;		_LCDout
  5812 ;; This function is called by:
  5813 ;;		_initLCD
  5814 ;;		_SetLine
  5815 ;;		_LCD_String
  5816 ;;		_ScanIR
  5817 ;;		_ScanWithRange
  5818 ;;		_main
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text27
  5823  0018B4                     __ptext27:
  5824                           	opt stack 0
  5825  0018B4                     _SendLCD:
  5826                           	opt stack 24
  5827                           
  5828                           ;incstack = 0
  5829                           ;SendLCD@Byte stored from wreg
  5830  0018B4  6E29               	movwf	SendLCD@Byte,c
  5831                           
  5832                           ;LCD.c: 30: LATAbits.LATA6=type;
  5833  0018B6  B028               	btfsc	SendLCD@type,0,c
  5834  0018B8  D002               	bra	u1315
  5835  0018BA  9C89               	bcf	3977,6,c	;volatile
  5836  0018BC  D001               	bra	u1316
  5837  0018BE                     u1315:
  5838  0018BE  8C89               	bsf	3977,6,c	;volatile
  5839  0018C0                     u1316:
  5840                           
  5841                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5842  0018C0  3829               	swapf	SendLCD@Byte,w,c
  5843  0018C2  0B0F               	andlw	15
  5844  0018C4  0B0F               	andlw	15
  5845  0018C6  EC7D  F008         	call	_LCDout
  5846                           
  5847                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5848  0018CA  0E06               	movlw	6
  5849  0018CC                     u3037:
  5850  0018CC  2EE8               	decfsz	wreg,f,c
  5851  0018CE  D7FE               	goto	u3037
  5852  0018D0  D000               	nop2		;nop
  5853                           
  5854                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5855  0018D2  5029               	movf	SendLCD@Byte,w,c
  5856  0018D4  0B0F               	andlw	15
  5857  0018D6  EC7D  F008         	call	_LCDout
  5858                           
  5859                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5860  0018DA  0E21               	movlw	33
  5861  0018DC                     u3047:
  5862  0018DC  2EE8               	decfsz	wreg,f,c
  5863  0018DE  D7FE               	goto	u3047
  5864  0018E0  F000               	nop	
  5865  0018E2  0012               	return		;funcret
  5866  0018E4                     __end_of_SendLCD:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           postinc0	equ	0xFEE
  5876                           wreg	equ	0xFE8
  5877                           indf1	equ	0xFE7
  5878                           fsr1h	equ	0xFE2
  5879                           fsr1l	equ	0xFE1
  5880                           indf2	equ	0xFDF
  5881                           postinc2	equ	0xFDE
  5882                           postdec2	equ	0xFDD
  5883                           fsr2h	equ	0xFDA
  5884                           fsr2l	equ	0xFD9
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function _LCDout *****************
  5888 ;; Defined at:
  5889 ;;		line 14 in file "LCD.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  number          1    wreg     unsigned char 
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;  number          1   38[COMRAM] unsigned char 
  5894 ;; Return value:  Size  Location     Type
  5895 ;;		None               void
  5896 ;; Registers used:
  5897 ;;		wreg, status,2, status,0, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5903 ;;      Params:         0       0       0       0
  5904 ;;      Locals:         1       0       0       0
  5905 ;;      Temps:          3       0       0       0
  5906 ;;      Totals:         4       0       0       0
  5907 ;;Total ram usage:        4 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    4
  5910 ;; This function calls:
  5911 ;;		_E_TOG
  5912 ;; This function is called by:
  5913 ;;		_SendLCD
  5914 ;;		_initLCD
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text28
  5919  0010FA                     __ptext28:
  5920                           	opt stack 0
  5921  0010FA                     _LCDout:
  5922                           	opt stack 24
  5923                           
  5924                           ;incstack = 0
  5925                           ;LCDout@number stored from wreg
  5926  0010FA  6E27               	movwf	LCDout@number,c
  5927                           
  5928                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5929  0010FC  5027               	movf	LCDout@number,w,c
  5930  0010FE  6E24               	movwf	??_LCDout& (0+255),c
  5931  001100  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5932  001102  0E07               	movlw	7
  5933  001104                     u1205:
  5934  001104  90D8               	bcf	status,0,c
  5935  001106  3624               	rlcf	??_LCDout,f,c
  5936  001108  3625               	rlcf	??_LCDout+1,f,c
  5937  00110A  2EE8               	decfsz	wreg,f,c
  5938  00110C  D7FB               	goto	u1205
  5939  00110E  0E07               	movlw	7
  5940  001110  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5941  001112                     u1215:
  5942  001112  3425               	rlcf	??_LCDout+1,w,c
  5943  001114  3225               	rrcf	??_LCDout+1,f,c
  5944  001116  3224               	rrcf	??_LCDout,f,c
  5945  001118  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5946  00111A  D7FB               	goto	u1215
  5947  00111C  4624               	rlncf	??_LCDout,f,c
  5948  00111E  508B               	movf	3979,w,c	;volatile
  5949  001120  1824               	xorwf	??_LCDout,w,c
  5950  001122  0BFD               	andlw	-3
  5951  001124  1824               	xorwf	??_LCDout,w,c
  5952  001126  6E8B               	movwf	3979,c	;volatile
  5953                           
  5954                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5955  001128  5027               	movf	LCDout@number,w,c
  5956  00112A  6E24               	movwf	??_LCDout& (0+255),c
  5957  00112C  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5958  00112E  0E06               	movlw	6
  5959  001130                     u1225:
  5960  001130  90D8               	bcf	status,0,c
  5961  001132  3624               	rlcf	??_LCDout,f,c
  5962  001134  3625               	rlcf	??_LCDout+1,f,c
  5963  001136  2EE8               	decfsz	wreg,f,c
  5964  001138  D7FB               	goto	u1225
  5965  00113A  0E07               	movlw	7
  5966  00113C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5967  00113E                     u1235:
  5968  00113E  3425               	rlcf	??_LCDout+1,w,c
  5969  001140  3225               	rrcf	??_LCDout+1,f,c
  5970  001142  3224               	rrcf	??_LCDout,f,c
  5971  001144  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5972  001146  D7FB               	goto	u1235
  5973  001148  4624               	rlncf	??_LCDout,f,c
  5974  00114A  4624               	rlncf	??_LCDout,f,c
  5975  00114C  508B               	movf	3979,w,c	;volatile
  5976  00114E  1824               	xorwf	??_LCDout,w,c
  5977  001150  0BFB               	andlw	-5
  5978  001152  1824               	xorwf	??_LCDout,w,c
  5979  001154  6E8B               	movwf	3979,c	;volatile
  5980                           
  5981                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5982  001156  5027               	movf	LCDout@number,w,c
  5983  001158  6E24               	movwf	??_LCDout& (0+255),c
  5984  00115A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5985  00115C  0E05               	movlw	5
  5986  00115E                     u1245:
  5987  00115E  90D8               	bcf	status,0,c
  5988  001160  3624               	rlcf	??_LCDout,f,c
  5989  001162  3625               	rlcf	??_LCDout+1,f,c
  5990  001164  2EE8               	decfsz	wreg,f,c
  5991  001166  D7FB               	goto	u1245
  5992  001168  0E07               	movlw	7
  5993  00116A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5994  00116C                     u1255:
  5995  00116C  3425               	rlcf	??_LCDout+1,w,c
  5996  00116E  3225               	rrcf	??_LCDout+1,f,c
  5997  001170  3224               	rrcf	??_LCDout,f,c
  5998  001172  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5999  001174  D7FB               	goto	u1255
  6000  001176  508C               	movf	3980,w,c	;volatile
  6001  001178  1824               	xorwf	??_LCDout,w,c
  6002  00117A  0BFE               	andlw	-2
  6003  00117C  1824               	xorwf	??_LCDout,w,c
  6004  00117E  6E8C               	movwf	3980,c	;volatile
  6005                           
  6006                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6007  001180  5027               	movf	LCDout@number,w,c
  6008  001182  6E24               	movwf	??_LCDout& (0+255),c
  6009  001184  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6010  001186  3A24               	swapf	??_LCDout,f,c
  6011  001188  3A25               	swapf	??_LCDout+1,f,c
  6012  00118A  0EF0               	movlw	240
  6013  00118C  1625               	andwf	??_LCDout+1,f,c
  6014  00118E  5024               	movf	??_LCDout,w,c
  6015  001190  0B0F               	andlw	15
  6016  001192  1225               	iorwf	??_LCDout+1,f,c
  6017  001194  0EF0               	movlw	240
  6018  001196  1624               	andwf	??_LCDout,f,c
  6019  001198  0E07               	movlw	7
  6020  00119A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6021  00119C                     u1265:
  6022  00119C  3425               	rlcf	??_LCDout+1,w,c
  6023  00119E  3225               	rrcf	??_LCDout+1,f,c
  6024  0011A0  3224               	rrcf	??_LCDout,f,c
  6025  0011A2  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6026  0011A4  D7FB               	goto	u1265
  6027  0011A6  4624               	rlncf	??_LCDout,f,c
  6028  0011A8  508C               	movf	3980,w,c	;volatile
  6029  0011AA  1824               	xorwf	??_LCDout,w,c
  6030  0011AC  0BFD               	andlw	-3
  6031  0011AE  1824               	xorwf	??_LCDout,w,c
  6032  0011B0  6E8C               	movwf	3980,c	;volatile
  6033                           
  6034                           ;LCD.c: 21: E_TOG();
  6035  0011B2  ECE4  F00C         	call	_E_TOG	;wreg free
  6036                           
  6037                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6038  0011B6  0E03               	movlw	3
  6039  0011B8                     u3057:
  6040  0011B8  2EE8               	decfsz	wreg,f,c
  6041  0011BA  D7FE               	goto	u3057
  6042  0011BC  F000               	nop	
  6043  0011BE  0012               	return		;funcret
  6044  0011C0                     __end_of_LCDout:
  6045                           	opt stack 0
  6046                           tblptru	equ	0xFF8
  6047                           tblptrh	equ	0xFF7
  6048                           tblptrl	equ	0xFF6
  6049                           tablat	equ	0xFF5
  6050                           prodh	equ	0xFF4
  6051                           prodl	equ	0xFF3
  6052                           intcon	equ	0xFF2
  6053                           postinc0	equ	0xFEE
  6054                           wreg	equ	0xFE8
  6055                           indf1	equ	0xFE7
  6056                           fsr1h	equ	0xFE2
  6057                           fsr1l	equ	0xFE1
  6058                           indf2	equ	0xFDF
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function _E_TOG *****************
  6066 ;; Defined at:
  6067 ;;		line 5 in file "LCD.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;		None               void
  6074 ;; Registers used:
  6075 ;;		wreg
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6081 ;;      Params:         0       0       0       0
  6082 ;;      Locals:         0       0       0       0
  6083 ;;      Temps:          0       0       0       0
  6084 ;;      Totals:         0       0       0       0
  6085 ;;Total ram usage:        0 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    3
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_LCDout
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text29
  6096  0019C8                     __ptext29:
  6097                           	opt stack 0
  6098  0019C8                     _E_TOG:
  6099                           	opt stack 24
  6100                           
  6101                           ;LCD.c: 8: LATCbits.LATC0=1;
  6102                           
  6103                           ;incstack = 0
  6104  0019C8  808B               	bsf	3979,0,c	;volatile
  6105                           
  6106                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6107  0019CA  0E03               	movlw	3
  6108  0019CC                     u3067:
  6109  0019CC  2EE8               	decfsz	wreg,f,c
  6110  0019CE  D7FE               	goto	u3067
  6111  0019D0  F000               	nop	
  6112                           
  6113                           ;LCD.c: 10: LATCbits.LATC0=0;
  6114  0019D2  908B               	bcf	3979,0,c	;volatile
  6115  0019D4  0012               	return		;funcret
  6116  0019D6                     __end_of_E_TOG:
  6117                           	opt stack 0
  6118                           tblptru	equ	0xFF8
  6119                           tblptrh	equ	0xFF7
  6120                           tblptrl	equ	0xFF6
  6121                           tablat	equ	0xFF5
  6122                           prodh	equ	0xFF4
  6123                           prodl	equ	0xFF3
  6124                           intcon	equ	0xFF2
  6125                           postinc0	equ	0xFEE
  6126                           wreg	equ	0xFE8
  6127                           indf1	equ	0xFE7
  6128                           fsr1h	equ	0xFE2
  6129                           fsr1l	equ	0xFE1
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           fsr2h	equ	0xFDA
  6134                           fsr2l	equ	0xFD9
  6135                           status	equ	0xFD8
  6136                           
  6137 ;; *************** function _InterruptHandlerLow *****************
  6138 ;; Defined at:
  6139 ;;		line 18 in file "main.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;		None
  6142 ;; Auto vars:     Size  Location     Type
  6143 ;;		None
  6144 ;; Return value:  Size  Location     Type
  6145 ;;		None               void
  6146 ;; Registers used:
  6147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6148 ;; Tracked objects:
  6149 ;;		On entry : 0/0
  6150 ;;		On exit  : 0/0
  6151 ;;		Unchanged: 0/0
  6152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6153 ;;      Params:         0       0       0       0
  6154 ;;      Locals:         0       0       0       0
  6155 ;;      Temps:         17       0       0       0
  6156 ;;      Totals:        17       0       0       0
  6157 ;;Total ram usage:       17 bytes
  6158 ;; Hardware stack levels used:    1
  6159 ;; Hardware stack levels required when called:    2
  6160 ;; This function calls:
  6161 ;;		Nothing
  6162 ;; This function is called by:
  6163 ;;		Interrupt level 1
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	intcodelo
  6168  000018                     __pintcodelo:
  6169                           	opt stack 0
  6170  000018                     _InterruptHandlerLow:
  6171                           	opt stack 23
  6172                           
  6173                           ;incstack = 0
  6174  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6175  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6176  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6177  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6178  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6179  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6180  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6181  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6182  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6183  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6184  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6185  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6186  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6187  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6188  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6189  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6190  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6191  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6192                           
  6193                           ;main.c: 20: if (PIR1bits.RCIF) {
  6194  00005E  AA9E               	btfss	3998,5,c	;volatile
  6195  000060  D016               	goto	i1l368
  6196                           
  6197                           ;main.c: 21: ReceivedString[i]=RCREG;
  6198  000062  503A               	movf	_i,w,c	;volatile
  6199  000064  0D01               	mullw	1
  6200  000066  0EC8               	movlw	low _ReceivedString
  6201  000068  24F3               	addwf	prodl,w,c
  6202  00006A  6ED9               	movwf	fsr2l,c
  6203  00006C  0E00               	movlw	high _ReceivedString
  6204  00006E  20F4               	addwfc	prodh,w,c
  6205  000070  6EDA               	movwf	fsr2h,c
  6206  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6207                           
  6208                           ;main.c: 22: RFID_Read=1;
  6209  000076  0E01               	movlw	1
  6210  000078  0101               	movlb	1	; () banked
  6211  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6212                           
  6213                           ; BSR set to: 1
  6214                           ;main.c: 23: if (i==15){
  6215  00007C  0E0F               	movlw	15
  6216  00007E  183A               	xorwf	_i,w,c	;volatile
  6217  000080  A4D8               	btfss	status,2,c
  6218  000082  D003               	goto	i1l2586
  6219                           
  6220                           ; BSR set to: 1
  6221                           ;main.c: 24: i=0;
  6222  000084  0E00               	movlw	0
  6223  000086  6E3A               	movwf	_i,c	;volatile
  6224                           
  6225                           ;main.c: 25: }else{
  6226  000088  D001               	goto	i1l2588
  6227  00008A                     i1l2586:
  6228                           
  6229                           ; BSR set to: 1
  6230                           ;main.c: 26: i++;
  6231  00008A  2A3A               	incf	_i,f,c	;volatile
  6232  00008C                     i1l2588:
  6233                           
  6234                           ; BSR set to: 1
  6235                           ;main.c: 27: }
  6236                           ;main.c: 28: PIR1bits.RCIF=0;
  6237  00008C  9A9E               	bcf	3998,5,c	;volatile
  6238  00008E                     i1l368:
  6239  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6240  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6241  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6242  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6243  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6244  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6245  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6246  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6247  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6248  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6249  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6250  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6251  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6252  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6253  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6254  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6255  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6256  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6257  0000D4  0010               	retfie	
  6258  0000D6                     __end_of_InterruptHandlerLow:
  6259                           	opt stack 0
  6260                           pclatu	equ	0xFFB
  6261                           pclath	equ	0xFFA
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           postinc0	equ	0xFEE
  6270                           fsr0h	equ	0xFEA
  6271                           fsr0l	equ	0xFE9
  6272                           wreg	equ	0xFE8
  6273                           indf1	equ	0xFE7
  6274                           fsr1h	equ	0xFE2
  6275                           fsr1l	equ	0xFE1
  6276                           bsr	equ	0xFE0
  6277                           indf2	equ	0xFDF
  6278                           postinc2	equ	0xFDE
  6279                           postdec2	equ	0xFDD
  6280                           fsr2h	equ	0xFDA
  6281                           fsr2l	equ	0xFD9
  6282                           status	equ	0xFD8
  6283                           
  6284 ;; *************** function _InterruptHandlerHigh *****************
  6285 ;; Defined at:
  6286 ;;		line 34 in file "main.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;		None               void
  6293 ;; Registers used:
  6294 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6300 ;;      Params:         0       0       0       0
  6301 ;;      Locals:         0       0       0       0
  6302 ;;      Temps:         14       0       0       0
  6303 ;;      Totals:        14       0       0       0
  6304 ;;Total ram usage:       14 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    1
  6307 ;; This function calls:
  6308 ;;		i2_delay_tenth_s
  6309 ;; This function is called by:
  6310 ;;		Interrupt level 2
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	intcode
  6315  000008                     __pintcode:
  6316                           	opt stack 0
  6317  000008                     _InterruptHandlerHigh:
  6318                           	opt stack 23
  6319                           
  6320                           ;incstack = 0
  6321  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6322  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6323  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6324  000012  EFE2  F009         	goto	int_func
  6325                           pclatu	equ	0xFFB
  6326                           pclath	equ	0xFFA
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           intcon	equ	0xFF2
  6334                           postinc0	equ	0xFEE
  6335                           fsr0h	equ	0xFEA
  6336                           fsr0l	equ	0xFE9
  6337                           wreg	equ	0xFE8
  6338                           indf1	equ	0xFE7
  6339                           fsr1h	equ	0xFE2
  6340                           fsr1l	equ	0xFE1
  6341                           bsr	equ	0xFE0
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           fsr2h	equ	0xFDA
  6346                           fsr2l	equ	0xFD9
  6347                           status	equ	0xFD8
  6348                           
  6349                           	psect	intcode_body
  6350  0013C4                     __pintcode_body:
  6351                           	opt stack 23
  6352  0013C4                     int_func:
  6353                           	opt stack 23
  6354  0013C4  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6355  0013C8  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6356  0013CC  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6357  0013D0  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6358  0013D4  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6359  0013D8  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6360  0013DC  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6361  0013E0  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6362  0013E4  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6363  0013E8  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6364  0013EC  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6365  0013F0  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6366                           
  6367                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6368  0013F4  A2F2               	btfss	intcon,1,c	;volatile
  6369  0013F6  D00D               	goto	i2l376
  6370                           
  6371                           ;main.c: 36: if (mode==-1) {
  6372  0013F8  283B               	incf	_mode,w,c	;volatile
  6373  0013FA  A4D8               	btfss	status,2,c
  6374  0013FC  D003               	goto	i2l2596
  6375                           
  6376                           ;main.c: 38: mode=1;
  6377  0013FE  0E01               	movlw	1
  6378  001400  6E3B               	movwf	_mode,c	;volatile
  6379                           
  6380                           ;main.c: 39: } else if (mode==0) {
  6381  001402  D003               	goto	i2l2600
  6382  001404                     i2l2596:
  6383  001404  503B               	movf	_mode,w,c	;volatile
  6384  001406  A4D8               	btfss	status,2,c
  6385                           
  6386                           ;main.c: 43: mode=-1;
  6387                           
  6388                           ;main.c: 41: } else {
  6389  001408  683B               	setf	_mode,c	;volatile
  6390  00140A                     i2l2600:
  6391                           
  6392                           ;main.c: 44: }
  6393                           ;main.c: 46: delay_tenth_s(2);
  6394  00140A  0E02               	movlw	2
  6395  00140C  EC0D  F00C         	call	i2_delay_tenth_s
  6396                           
  6397                           ;main.c: 47: INTCONbits.INT0IF=0;
  6398  001410  92F2               	bcf	intcon,1,c	;volatile
  6399  001412                     i2l376:
  6400  001412  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6401  001416  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6402  00141A  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6403  00141E  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6404  001422  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6405  001426  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6406  00142A  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6407  00142E  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6408  001432  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6409  001436  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6410  00143A  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6411  00143E  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6412  001442  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6413  001446  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6414  00144A  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6415  00144C  0011               	retfie		f
  6416  00144E                     __end_of_InterruptHandlerHigh:
  6417                           	opt stack 0
  6418                           pclatu	equ	0xFFB
  6419                           pclath	equ	0xFFA
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodh	equ	0xFF4
  6425                           prodl	equ	0xFF3
  6426                           intcon	equ	0xFF2
  6427                           postinc0	equ	0xFEE
  6428                           fsr0h	equ	0xFEA
  6429                           fsr0l	equ	0xFE9
  6430                           wreg	equ	0xFE8
  6431                           indf1	equ	0xFE7
  6432                           fsr1h	equ	0xFE2
  6433                           fsr1l	equ	0xFE1
  6434                           bsr	equ	0xFE0
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           postdec2	equ	0xFDD
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function i2_delay_tenth_s *****************
  6443 ;; Defined at:
  6444 ;;		line 32 in file "Movement.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;  tenth_second    1    wreg     unsigned char 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6449 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6450 ;; Return value:  Size  Location     Type
  6451 ;;		None               void
  6452 ;; Registers used:
  6453 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6459 ;;      Params:         0       0       0       0
  6460 ;;      Locals:         3       0       0       0
  6461 ;;      Temps:          1       0       0       0
  6462 ;;      Totals:         4       0       0       0
  6463 ;;Total ram usage:        4 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_InterruptHandlerHigh
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text32
  6473  00181A                     __ptext32:
  6474                           	opt stack 0
  6475  00181A                     i2_delay_tenth_s:
  6476                           	opt stack 23
  6477                           
  6478                           ;incstack = 0
  6479                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6480  00181A  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6481                           
  6482                           ;Movement.c: 33: unsigned int i=0;
  6483  00181C  0E00               	movlw	0
  6484  00181E  6E04               	movwf	i2delay_tenth_s@i+1,c
  6485  001820  0E00               	movlw	0
  6486  001822  6E03               	movwf	i2delay_tenth_s@i,c
  6487                           
  6488                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6489  001824  0E00               	movlw	0
  6490  001826  6E04               	movwf	i2delay_tenth_s@i+1,c
  6491  001828  0E01               	movlw	1
  6492  00182A  6E03               	movwf	i2delay_tenth_s@i,c
  6493  00182C  D009               	goto	i2l2558
  6494  00182E                     i2l2554:
  6495                           
  6496                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6497  00182E  0E82               	movlw	130
  6498  001830  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6499  001832  0EDE               	movlw	222
  6500  001834                     i2u307_47:
  6501  001834  2EE8               	decfsz	wreg,f,c
  6502  001836  D7FE               	goto	i2u307_47
  6503  001838  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6504  00183A  D7FC               	goto	i2u307_47
  6505  00183C  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6506  00183E  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6507  001840                     i2l2558:
  6508  001840  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6509  001842  0D02               	mullw	2
  6510  001844  5003               	movf	i2delay_tenth_s@i,w,c
  6511  001846  5CF3               	subwf	prodl,w,c
  6512  001848  5004               	movf	i2delay_tenth_s@i+1,w,c
  6513  00184A  58F4               	subwfb	prodh,w,c
  6514  00184C  A0D8               	btfss	status,0,c
  6515  00184E  0012               	return	
  6516  001850  D7EE               	goto	i2l2554
  6517  001852                     __end_ofi2_delay_tenth_s:
  6518                           	opt stack 0
  6519                           pclatu	equ	0xFFB
  6520                           pclath	equ	0xFFA
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           intcon	equ	0xFF2
  6528                           postinc0	equ	0xFEE
  6529                           fsr0h	equ	0xFEA
  6530                           fsr0l	equ	0xFE9
  6531                           wreg	equ	0xFE8
  6532                           indf1	equ	0xFE7
  6533                           fsr1h	equ	0xFE2
  6534                           fsr1l	equ	0xFE1
  6535                           bsr	equ	0xFE0
  6536                           indf2	equ	0xFDF
  6537                           postinc2	equ	0xFDE
  6538                           postdec2	equ	0xFDD
  6539                           fsr2h	equ	0xFDA
  6540                           fsr2l	equ	0xFD9
  6541                           status	equ	0xFD8
  6542                           pclatu	equ	0xFFB
  6543                           pclath	equ	0xFFA
  6544                           tblptru	equ	0xFF8
  6545                           tblptrh	equ	0xFF7
  6546                           tblptrl	equ	0xFF6
  6547                           tablat	equ	0xFF5
  6548                           prodh	equ	0xFF4
  6549                           prodl	equ	0xFF3
  6550                           intcon	equ	0xFF2
  6551                           postinc0	equ	0xFEE
  6552                           fsr0h	equ	0xFEA
  6553                           fsr0l	equ	0xFE9
  6554                           wreg	equ	0xFE8
  6555                           indf1	equ	0xFE7
  6556                           fsr1h	equ	0xFE2
  6557                           fsr1l	equ	0xFE1
  6558                           bsr	equ	0xFE0
  6559                           indf2	equ	0xFDF
  6560                           postinc2	equ	0xFDE
  6561                           postdec2	equ	0xFDD
  6562                           fsr2h	equ	0xFDA
  6563                           fsr2l	equ	0xFD9
  6564                           status	equ	0xFD8
  6565                           
  6566                           	psect	rparam
  6567  0000                     pclatu	equ	0xFFB
  6568                           pclath	equ	0xFFA
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon	equ	0xFF2
  6576                           postinc0	equ	0xFEE
  6577                           fsr0h	equ	0xFEA
  6578                           fsr0l	equ	0xFE9
  6579                           wreg	equ	0xFE8
  6580                           indf1	equ	0xFE7
  6581                           fsr1h	equ	0xFE2
  6582                           fsr1l	equ	0xFE1
  6583                           bsr	equ	0xFE0
  6584                           indf2	equ	0xFDF
  6585                           postinc2	equ	0xFDE
  6586                           postdec2	equ	0xFDD
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591                           	psect	temp
  6592  00003C                     btemp:
  6593                           	opt stack 0
  6594  00003C                     	ds	1
  6595  0000                     int$flags	set	btemp
  6596                           pclatu	equ	0xFFB
  6597                           pclath	equ	0xFFA
  6598                           tblptru	equ	0xFF8
  6599                           tblptrh	equ	0xFF7
  6600                           tblptrl	equ	0xFF6
  6601                           tablat	equ	0xFF5
  6602                           prodh	equ	0xFF4
  6603                           prodl	equ	0xFF3
  6604                           intcon	equ	0xFF2
  6605                           postinc0	equ	0xFEE
  6606                           fsr0h	equ	0xFEA
  6607                           fsr0l	equ	0xFE9
  6608                           wreg	equ	0xFE8
  6609                           indf1	equ	0xFE7
  6610                           fsr1h	equ	0xFE2
  6611                           fsr1l	equ	0xFE1
  6612                           bsr	equ	0xFE0
  6613                           indf2	equ	0xFDF
  6614                           postinc2	equ	0xFDE
  6615                           postdec2	equ	0xFDD
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     96     120
    BANK1           256    250     255
    BANK2           256    118     118

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanIR@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mode	PTR unsigned char  size(2) Largest target is 1
		 -> mode(COMRAM[1]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@MoveTimeEntry	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   56502
                                             86 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2    118   118      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       73    61     12   21699
                                             13 BANK0     73    61     12
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11625
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     76      76       9       46.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     60      78       5       75.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     228       3        0.0%
DATA                 0      0     228      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 19:16:40 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0FA2  
                                  l65 152C                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0A1C                                   l223 0A58  
                                 l226 0B44                                   l381 03F8  
                                 l871 16DC                                   l881 171E  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l3000 0E3C                                  l2130 1562  
                                l3010 0EB8                                  l2140 15A6  
                                l2150 15DC                                  l2134 156A  
                                l2070 16B6                                  l3006 0E92  
                                l2056 1992                                  l3008 0E9E  
                                l2146 15D4                                  l2066 16AA  
                                l2090 1700                                  l2172 1638  
                                l2164 1898                                  l2156 1618  
                                l2068 16B2                                  l3132 0B40  
                                l3124 0A9C                                  l3300 0658  
                                l2078 16D2                                  l2094 1714  
                                l2086 16F4                                  l3054 10E2  
                                l2182 17F6                                  l3126 0AB4  
                                l2168 18AA                                  l2088 16FC  
                                l3144 0B5C                                  l3080 0942  
                                l2328 1922                                  l3304 0666  
                                l3216 03FE                                  l2178 166C  
                                l2186 1808                                  l3154 0B6E  
                                l3330 0734                                  l3322 06EE  
                                l3250 04A4                                  l3156 0B74  
                                l2540 12DC                                  l3340 075A  
                                l3308 067C                                  l3334 073E  
                                l3318 06E4                                  l3342 0760  
                                l3350 07C8                                  l3254 04D6  
                                l2536 12D4                                  l3360 082A  
                                l3328 072E                                  l3362 0830  
                                l3290 05A4                                  l3274 052A  
                                l2820 1488                                  l2548 132C  
                                l3372 0870                                  l2910 0BFC  
                                l2902 0BCE                                  l2822 1490  
                                l2814 1472                                  l2920 0C34  
                                l2840 14C8                                  l2832 14B0  
                                l2824 1494                                  l2808 1462  
                                l3296 060A                                  l2930 0CA6  
                                l2914 0C04                                  l2850 0F7A  
                                l2932 0CCE                                  l2908 0BEA  
                                l2836 14BA                                  l2942 0CFE  
                                l2862 150C                                  l2854 14D4  
                                l2944 0D04                                  l2880 1362  
                                l2872 1332                                  l2962 0D5C  
                                l2858 14F0                                  l2956 0D3A  
                                l2876 134A                                  l2966 0D94  
                                l2886 1382                                  l2992 0E18  
                                l2976 0DC2                                  l2984 0DE8  
                                l2968 0D9E                                  l2986 0DF4  
                                l2998 0E36                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1205 1104  
                                u1215 1112                                  u1225 1130  
                                u1235 113E                                  u1315 18BE  
                                u1316 18C0                                  u1245 115E  
                                _LATB 000F8A                                  u1255 116C  
                                u3007 160C                                  u1520 165C  
                                u2224 0F3A                                  u1265 119C  
                                u3017 18AC                                  u2225 0F36  
                                u1530 168C                                  u2234 0F96  
                                u3027 1666                                  u2235 0F92  
                                u3037 18CC                                  u2245 0FF0  
                                u3047 18DC                                  u1527 1652  
                                u1455 1572                                  u3057 11B8  
                                u1537 1682                                  u3067 19CC  
                                u1485 15E4                                  u2720 06AE  
                                u2730 06C2                                  u2722 06B0  
                                u2732 06C4                                  u1765 191E  
                                u1766 1920                                  u2807 0454  
                                u1785 1930                                  u2817 046C  
                                u1786 1932                                  u2907 1262  
                                u2827 11D2                                  u2917 1274  
                                u2837 11E8                                  u2927 0976  
                                u2847 11F8                                  u2937 098E  
                                u2857 1206                                  u2947 1526  
                                u2867 1214                                  u2957 17FC  
                                u2877 1226                                  u2967 104E  
                                u2887 1238                                  u2977 1064  
                                u2897 124E                                  u2987 137C  
                                u2997 159A                            ScanIR@Move 0071  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 00B8                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1330                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 181A  
                     __end_of_SendLCD 18E4                       __end_of_SetLine 18B4  
                  ScanWithRange@F3896 00C4                           ScanIR@F3884 00C0  
                               ?_main 0001                       __end_of___awdiv 14D2  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 16E6                       __end_of___lwmod 1728  
                               i1l368 008E                                 i2l376 1412  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 19C8                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 127C                    ScanWithRange@power 00AC  
                     __end_of_dpowers 030B                       __end_of_isdigit 199A  
                               main@i 00BF                                 tablat 000FF5  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 0EC6                __size_of_ScanWithRange 032E  
                      __CFG_MCLRE$OFF 000000                       __initialization 18E4  
                        __end_of_main 0892                          __end_of_stop 13C4  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 009F  
                __end_of_enableSensor 1934                   VerifySignal@hexByte 002D  
                              ??_main 00B6                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2586 008A                                i1l2588 008C  
                              i2l2600 140A                        __CFG_WDTEN$OFF 000000  
                              i2l2554 182E                                i2l2558 1840  
                              i2l2596 1404                 __end_of_delay_tenth_s 181A  
                              _LCDout 10FA                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1852                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 1000  
                           ??_SetLine 002A                                ___wmul 1934  
                           ??___awdiv 002E                      __end_of_initRFID 19B6  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 195A                  __size_of_grabRightIR 0072  
                              clear_0 18F6                      ___awdiv@quotient 0030  
                              main@mL 0264                                main@mR 026D  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0892                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00AD                      __end_of_turnLeft 17E2  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1900  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 19D6                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1728                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002C  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 1446  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00C0  
                          __pbssBANK1 01FA                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 1694                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 15C4                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 190E                    __size_of_turnRight 003E  
                __end_of_initMotorPWM 1884                ScanWithRange@RFID_Read 0075  
                             _SendLCD 18B4                               __Hparam 0000  
                             _SetLine 1884                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 144E  
                     __size_of___wmul 0026                               ___lwdiv 1694  
                             ___lwmod 16E6                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 18E4  
                     ??_ScanWithRange 0079                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 19B6                               __ptext2 199A  
                             __ptext3 1852                               __ptext4 11C0  
                             __ptext5 195A                               __ptext6 1728  
                             __ptext7 190E                               __ptext8 127C  
                             __ptext9 0892                             _T0CONbits 000FD5  
                             _initLCD 11C0                     __end_of_initTimer 19C8  
                             _dpowers 0301                               _isdigit 197C  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0BC0  
                      __pintcode_body 13C4                  end_of_initialization 1900  
                      ScanWithRange@i 00A8                        ScanWithRange@n 00A6  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 13C4  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 17A4                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B4                        __end_of_LCDout 11C0  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 10FA                        _fullSpeedAhead 14D2  
                      _ReceivedString 00C8                        __end_of___wmul 195A  
                         _BAUDCONbits 000FAA                     ScanWithRange@mode 0077  
                      __end_of_initIR 197C                __size_of_delay_tenth_s 0038  
                 start_initialization 18E4                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 0032                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 144E                              ??_ScanIR 0039  
              __end_of_fullSpeedAhead 1552                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 15C4                          _initMotorPWM 1852  
                         __pbssCOMRAM 003A                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                         __pcstackBANK2 0200  
                        _isdigit$1963 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 17E2                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0062  
                           __pintcode 0008                  __end_of_VerifySignal 1330  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 00B9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 19B6                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u307_47 1834  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3898 01FA                           _grabRightIR 1552  
               ScanWithRange@LeftFlag 00B2                  grabRightIR@IR_signal 0029  
           ScanWithRange@milliseconds 0071                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 0BC0                          setMotorPWM@m 0032  
                _InterruptHandlerHigh 0008                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                          ?_initTimer 0001                             _turnRight 1766  
                      ScanIR@MoveTime 0073                        ScanIR@MoveType 0075  
                    ScanWithRange@buf 007E                   __end_of_setMotorPWM 1000  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1766  
                    __size_of_SetLine 0030                    __end_of_grabLeftIR 1636  
                    __size_of___awdiv 0084                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0067  
                            __ptext10 1766                              __ptext11 17A4  
                            __ptext20 1934                              __ptext12 14D2  
                            __ptext21 16E6                              __ptext13 17E2  
                            __ptext22 1694                              __ptext14 1000  
                            __ptext23 1552                              __ptext15 1330  
                            __ptext32 181A                              __ptext24 15C4  
                            __ptext16 0EC6                              __ptext25 1884  
                            __ptext17 144E                              __ptext26 1636  
                            __ptext18 0BC0                              __ptext27 18B4  
                            __ptext19 197C                              __ptext28 10FA  
                            __ptext29 19C8                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                              _initRFID 199A  
           ScanWithRange@SensorResult 00AE                        turnRight@power 006B  
                       __size_of_main 0542                    main@DirectionFound 00BD  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 00B4                              int$flags 003C  
                            main@Move 00BE                   _InterruptHandlerLow 0018  
                          _LCD_String 1636                              _turnLeft 17A4  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002F                            _INTCONbits 000FF2  
                         ??_initTimer 0024                              isdigit@c 0026  
                         _setMotorPWM 0EC6                          _VerifySignal 127C  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                      ??_fullSpeedAhead 0039  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00AA  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
