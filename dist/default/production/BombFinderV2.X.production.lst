

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 13:55:47 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISEbits	set	3990
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001BC2                     __pcinit:
   189                           	opt stack 0
   190  001BC2                     start_initialization:
   191                           	opt stack 0
   192  001BC2                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK2 (100 bytes)
   196  001BC2  EE02  F000         	lfsr	0,__pbssBANK2
   197  001BC6  0E64               	movlw	100
   198  001BC8                     clear_0:
   199  001BC8  6AEE               	clrf	postinc0,c
   200  001BCA  06E8               	decf	wreg,f,c
   201  001BCC  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK1 (21 bytes)
   204  001BCE  EE01  F0E2         	lfsr	0,__pbssBANK1
   205  001BD2  0E15               	movlw	21
   206  001BD4                     clear_1:
   207  001BD4  6AEE               	clrf	postinc0,c
   208  001BD6  06E8               	decf	wreg,f,c
   209  001BD8  E1FD               	bnz	clear_1
   210                           
   211                           ; Clear objects allocated to BANK0 (58 bytes)
   212  001BDA  EE00  F0BF         	lfsr	0,__pbssBANK0
   213  001BDE  0E3A               	movlw	58
   214  001BE0                     clear_2:
   215  001BE0  6AEE               	clrf	postinc0,c
   216  001BE2  06E8               	decf	wreg,f,c
   217  001BE4  E1FD               	bnz	clear_2
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220  001BE6  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221  001BE8  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   222  001BEA                     end_of_initialization:
   223                           	opt stack 0
   224  001BEA                     __end_of__initialization:
   225                           	opt stack 0
   226  001BEA  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227  001BEC  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228  001BEE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   229  001BF0  6EF8               	movwf	tblptru,c
   230  001BF2  0100               	movlb	0
   231  001BF4  EFA8  F001         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  00003A                     __pbssCOMRAM:
   238                           	opt stack 0
   239  00003A                     _i:
   240                           	opt stack 0
   241  00003A                     	ds	1
   242  00003B                     _mode:
   243                           	opt stack 0
   244  00003B                     	ds	1
   245                           tblptru	equ	0xFF8
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           
   249                           	psect	bssBANK0
   250  0000BF                     __pbssBANK0:
   251                           	opt stack 0
   252  0000BF                     main@F3895:
   253                           	opt stack 0
   254  0000BF                     	ds	50
   255  0000F1                     ScanIR@F3879:
   256                           	opt stack 0
   257  0000F1                     	ds	4
   258  0000F5                     ScanWithRange@F3892:
   259                           	opt stack 0
   260  0000F5                     	ds	4
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265                           	psect	bssBANK1
   266  0001E2                     __pbssBANK1:
   267                           	opt stack 0
   268  0001E2                     main@F3898:
   269                           	opt stack 0
   270  0001E2                     	ds	4
   271  0001E6                     _ReceivedString:
   272                           	opt stack 0
   273  0001E6                     	ds	16
   274  0001F6                     _RFID_Read:
   275                           	opt stack 0
   276  0001F6                     	ds	1
   277                           tblptru	equ	0xFF8
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	bssBANK2
   282  000200                     __pbssBANK2:
   283                           	opt stack 0
   284  000200                     main@F3893:
   285                           	opt stack 0
   286  000200                     	ds	100
   287                           tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	cstackBANK1
   292  000100                     __pcstackBANK1:
   293                           	opt stack 0
   294  000100                     main@buf:
   295                           	opt stack 0
   296                           
   297                           ; 40 bytes @ 0x0
   298  000100                     	ds	40
   299  000128                     main@MoveType:
   300                           	opt stack 0
   301                           
   302                           ; 50 bytes @ 0x28
   303  000128                     	ds	50
   304  00015A                     main@MoveTime:
   305                           	opt stack 0
   306                           
   307                           ; 100 bytes @ 0x5A
   308  00015A                     	ds	100
   309  0001BE                     main@Message:
   310                           	opt stack 0
   311                           
   312                           ; 10 bytes @ 0xBE
   313  0001BE                     	ds	10
   314  0001C8                     main@ScanAngle:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0xC8
   318  0001C8                     	ds	1
   319  0001C9                     main@SensorResult:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0xC9
   323  0001C9                     	ds	4
   324  0001CD                     main@DirectionFound:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0xCD
   328  0001CD                     	ds	1
   329  0001CE                     main@i:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0xCE
   333  0001CE                     	ds	1
   334  0001CF                     main@Move:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0xCF
   338  0001CF                     	ds	1
   339  0001D0                     main@mL:
   340                           	opt stack 0
   341                           
   342                           ; 9 bytes @ 0xD0
   343  0001D0                     	ds	9
   344  0001D9                     main@mR:
   345                           	opt stack 0
   346                           
   347                           ; 9 bytes @ 0xD9
   348  0001D9                     	ds	9
   349                           tblptru	equ	0xFF8
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	cstackBANK0
   354  000060                     __pcstackBANK0:
   355                           	opt stack 0
   356  000060                     ??_sprintf:
   357  000060                     setMotorPWM@PWMduty:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x0
   361  000060                     	ds	2
   362  000062                     stop@mL:
   363                           	opt stack 0
   364  000062                     fullSpeedAhead@mL:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x2
   368  000062                     	ds	2
   369  000064                     stop@mR:
   370                           	opt stack 0
   371  000064                     fullSpeedAhead@mR:
   372                           	opt stack 0
   373  000064                     sprintf@ap:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x4
   377  000064                     	ds	2
   378  000066                     fullSpeedAhead@power:
   379                           	opt stack 0
   380  000066                     sprintf@prec:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x6
   384  000066                     	ds	1
   385  000067                     turnLeft@mL:
   386                           	opt stack 0
   387  000067                     turnRight@mL:
   388                           	opt stack 0
   389  000067                     fullSpeedBack@mL:
   390                           	opt stack 0
   391  000067                     sprintf@val:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x7
   395  000067                     	ds	2
   396  000069                     sprintf@flag:
   397                           	opt stack 0
   398  000069                     turnLeft@mR:
   399                           	opt stack 0
   400  000069                     turnRight@mR:
   401                           	opt stack 0
   402  000069                     fullSpeedBack@mR:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x9
   406  000069                     	ds	1
   407  00006A                     sprintf@width:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0xA
   411  00006A                     	ds	1
   412  00006B                     turnLeft@power:
   413                           	opt stack 0
   414  00006B                     turnRight@power:
   415                           	opt stack 0
   416  00006B                     fullSpeedBack@power:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xB
   420  00006B                     	ds	1
   421  00006C                     sprintf@c:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0xC
   425  00006C                     	ds	1
   426  00006D                     ScanIR@mL:
   427                           	opt stack 0
   428  00006D                     ScanWithRange@mL:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0xD
   432  00006D                     	ds	2
   433  00006F                     ScanIR@mR:
   434                           	opt stack 0
   435  00006F                     ScanWithRange@mR:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0xF
   439  00006F                     	ds	2
   440  000071                     ScanWithRange@loops:
   441                           	opt stack 0
   442  000071                     ScanIR@buf:
   443                           	opt stack 0
   444                           
   445                           ; 40 bytes @ 0x11
   446  000071                     	ds	2
   447  000073                     ScanWithRange@MoveTime:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x13
   451  000073                     	ds	2
   452  000075                     ScanWithRange@Move:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x15
   456  000075                     	ds	2
   457  000077                     ScanWithRange@MoveType:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x17
   461  000077                     	ds	2
   462  000079                     ScanWithRange@RFID_Read:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x19
   466  000079                     	ds	2
   467  00007B                     ??_ScanWithRange:
   468                           
   469                           ; 0 bytes @ 0x1B
   470  00007B                     	ds	5
   471  000080                     ScanWithRange@buf:
   472                           	opt stack 0
   473                           
   474                           ; 40 bytes @ 0x20
   475  000080                     	ds	25
   476  000099                     ScanIR@DirectionMoveThreshold:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x39
   480  000099                     	ds	2
   481  00009B                     ScanIR@SensorResult:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x3B
   485  00009B                     	ds	13
   486  0000A8                     ScanWithRange@n:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x48
   490  0000A8                     	ds	2
   491  0000AA                     ScanWithRange@LeftFlick:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x4A
   495  0000AA                     	ds	1
   496  0000AB                     ScanWithRange@MiniLeftFlick:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x4B
   500  0000AB                     	ds	1
   501  0000AC                     ScanWithRange@i:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x4C
   505  0000AC                     	ds	2
   506  0000AE                     ScanWithRange@DirectionFoundThreshold:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x4E
   510  0000AE                     	ds	2
   511  0000B0                     ScanWithRange@MotorPower:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x50
   515  0000B0                     	ds	1
   516  0000B1                     ScanWithRange@LeftFlag:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x51
   520  0000B1                     	ds	2
   521  0000B3                     ScanWithRange@TimeAboveThreshold:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x53
   525  0000B3                     	ds	1
   526  0000B4                     ScanWithRange@SensorResult:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x54
   530  0000B4                     	ds	4
   531  0000B8                     ScanWithRange@RightFlag:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x58
   535  0000B8                     	ds	2
   536  0000BA                     ??_main:
   537                           
   538                           ; 0 bytes @ 0x5A
   539  0000BA                     	ds	5
   540                           tblptru	equ	0xFF8
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           
   544                           	psect	cstackCOMRAM
   545  000001                     __pcstackCOMRAM:
   546                           	opt stack 0
   547  000001                     ??i2_delay_tenth_s:
   548                           
   549                           ; 0 bytes @ 0x0
   550  000001                     	ds	1
   551  000002                     i2delay_tenth_s@tenth_seconds:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x1
   555  000002                     	ds	1
   556  000003                     i2delay_tenth_s@i:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     ??_InterruptHandlerHigh:
   562                           
   563                           ; 0 bytes @ 0x4
   564  000005                     	ds	14
   565  000013                     ??_InterruptHandlerLow:
   566                           
   567                           ; 0 bytes @ 0x12
   568  000013                     	ds	17
   569  000024                     ??_isdigit:
   570  000024                     ??_LCDout:
   571  000024                     ??_delay_tenth_s:
   572  000024                     ?_grabRightIR:
   573                           	opt stack 0
   574  000024                     ?_grabLeftIR:
   575                           	opt stack 0
   576  000024                     ?___wmul:
   577                           	opt stack 0
   578  000024                     ?___lwdiv:
   579                           	opt stack 0
   580  000024                     enableSensor@status:
   581                           	opt stack 0
   582  000024                     VerifySignal@Signal:
   583                           	opt stack 0
   584  000024                     ___wmul@multiplier:
   585                           	opt stack 0
   586  000024                     ___lwdiv@dividend:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x23
   590  000024                     	ds	1
   591  000025                     enableSensor@sensor:
   592                           	opt stack 0
   593  000025                     delay_tenth_s@tenth_seconds:
   594                           	opt stack 0
   595  000025                     _isdigit$1986:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x24
   599  000025                     	ds	1
   600  000026                     ??_grabRightIR:
   601  000026                     ??_grabLeftIR:
   602  000026                     ??_VerifySignal:
   603  000026                     isdigit@c:
   604                           	opt stack 0
   605  000026                     delay_tenth_s@i:
   606                           	opt stack 0
   607  000026                     ___wmul@multiplicand:
   608                           	opt stack 0
   609  000026                     ___lwdiv@divisor:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x25
   613  000026                     	ds	1
   614  000027                     LCDout@number:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x26
   618  000027                     	ds	1
   619  000028                     SendLCD@type:
   620                           	opt stack 0
   621  000028                     ___wmul@product:
   622                           	opt stack 0
   623  000028                     ___lwdiv@quotient:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x27
   627  000028                     	ds	1
   628  000029                     SendLCD@Byte:
   629                           	opt stack 0
   630  000029                     grabRightIR@IR_signal:
   631                           	opt stack 0
   632  000029                     grabLeftIR@IR_signal:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x28
   636  000029                     	ds	1
   637  00002A                     ??_initLCD:
   638  00002A                     ?___awdiv:
   639                           	opt stack 0
   640  00002A                     SetLine@line:
   641                           	opt stack 0
   642  00002A                     VerifySignal@i:
   643                           	opt stack 0
   644  00002A                     ___lwdiv@counter:
   645                           	opt stack 0
   646  00002A                     LCD_String@string:
   647                           	opt stack 0
   648  00002A                     ___awdiv@dividend:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x29
   652  00002A                     	ds	1
   653  00002B                     ?___lwmod:
   654                           	opt stack 0
   655  00002B                     grabRightIR@i:
   656                           	opt stack 0
   657  00002B                     grabLeftIR@i:
   658                           	opt stack 0
   659  00002B                     VerifySignal@checksum:
   660                           	opt stack 0
   661  00002B                     ___lwmod@dividend:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x2A
   665  00002B                     	ds	1
   666  00002C                     VerifySignal@hexByte:
   667                           	opt stack 0
   668  00002C                     ___awdiv@divisor:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x2B
   672  00002C                     	ds	1
   673  00002D                     ___lwmod@divisor:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x2C
   677  00002D                     	ds	1
   678  00002E                     ___awdiv@counter:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x2D
   682  00002E                     	ds	1
   683  00002F                     ___awdiv@sign:
   684                           	opt stack 0
   685  00002F                     ___lwmod@counter:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x2E
   689  00002F                     	ds	1
   690  000030                     ?_sprintf:
   691                           	opt stack 0
   692  000030                     sprintf@sp:
   693                           	opt stack 0
   694  000030                     ___awdiv@quotient:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x2F
   698  000030                     	ds	2
   699  000032                     setMotorPWM@m:
   700                           	opt stack 0
   701  000032                     sprintf@f:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x31
   705  000032                     	ds	2
   706  000034                     ??_setMotorPWM:
   707                           
   708                           ; 0 bytes @ 0x33
   709  000034                     	ds	5
   710  000039                     ??_ScanIR:
   711                           
   712                           ; 0 bytes @ 0x38
   713  000039                     	ds	1
   714  00003A                     tblptru	equ	0xFF8
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           
   718                           ; 0 bytes @ 0x39
   719 ;;
   720 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   721 ;;
   722 ;; *************** function _main *****************
   723 ;; Defined at:
   724 ;;		line 51 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  MoveTime      100   90[BANK1 ] int [50]
   729 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   730 ;;  buf            40    0[BANK1 ] unsigned char [40]
   731 ;;  Message        10  190[BANK1 ] unsigned char [10]
   732 ;;  mR              9  217[BANK1 ] struct DC_motor
   733 ;;  mL              9  208[BANK1 ] struct DC_motor
   734 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   735 ;;  Move            1  207[BANK1 ] unsigned char 
   736 ;;  i               1  206[BANK1 ] unsigned char 
   737 ;;  DirectionFou    1  205[BANK1 ] char 
   738 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;		None               void
   741 ;; Registers used:
   742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   748 ;;      Params:         0       0       0       0
   749 ;;      Locals:         0       0     226       0
   750 ;;      Temps:          0       5       0       0
   751 ;;      Totals:         0       5     226       0
   752 ;;Total ram usage:      231 bytes
   753 ;; Hardware stack levels required when called:    8
   754 ;; This function calls:
   755 ;;		_LCD_String
   756 ;;		_ScanIR
   757 ;;		_ScanWithRange
   758 ;;		_SendLCD
   759 ;;		_SetLine
   760 ;;		_VerifySignal
   761 ;;		_delay_tenth_s
   762 ;;		_enableSensor
   763 ;;		_fullSpeedAhead
   764 ;;		_fullSpeedBack
   765 ;;		_grabLeftIR
   766 ;;		_grabRightIR
   767 ;;		_initIR
   768 ;;		_initLCD
   769 ;;		_initMotorPWM
   770 ;;		_initRFID
   771 ;;		_initTimer
   772 ;;		_sprintf
   773 ;;		_stop
   774 ;;		_turnLeft
   775 ;;		_turnRight
   776 ;; This function is called by:
   777 ;;		Startup code after reset
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text0
   782  000350                     __ptext0:
   783                           	opt stack 0
   784  000350                     _main:
   785                           	opt stack 23
   786                           
   787                           ;main.c: 54: unsigned char Message[10];
   788                           ;main.c: 55: unsigned char i=0;
   789                           
   790                           ;incstack = 0
   791  000350  0E00               	movlw	0
   792  000352  0101               	movlb	1	; () banked
   793  000354  6FCE               	movwf	main@i& (0+255),b
   794                           
   795                           ;main.c: 56: signed char DirectionFound=0;
   796  000356  0E00               	movlw	0
   797  000358  0101               	movlb	1	; () banked
   798  00035A  6FCD               	movwf	main@DirectionFound& (0+255),b
   799                           
   800                           ; BSR set to: 1
   801                           ;main.c: 57: int MoveTime[50] = { 0 };
   802  00035C  EE22  F000         	lfsr	2,main@F3893
   803  000360  EE11  F05A         	lfsr	1,main@MoveTime
   804  000364  0E63               	movlw	99
   805  000366                     u2731:
   806  000366  CFDB FFE3          	movff	plusw2,plusw1
   807  00036A  06E8               	decf	wreg,f,c
   808  00036C  E2FC               	bc	u2731
   809                           
   810                           ; BSR set to: 1
   811                           ;main.c: 60: char MoveType[50] = { 0 };
   812  00036E  EE20  F0BF         	lfsr	2,main@F3895
   813  000372  EE11  F028         	lfsr	1,main@MoveType
   814  000376  0E31               	movlw	49
   815  000378                     u2741:
   816  000378  CFDB FFE3          	movff	plusw2,plusw1
   817  00037C  06E8               	decf	wreg,f,c
   818  00037E  E2FC               	bc	u2741
   819                           
   820                           ;main.c: 63: char Move=0;
   821  000380  0E00               	movlw	0
   822  000382  0101               	movlb	1	; () banked
   823  000384  6FCF               	movwf	main@Move& (0+255),b
   824                           
   825                           ; BSR set to: 1
   826                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   827  000386  C1E2  F1C9         	movff	main@F3898,main@SensorResult
   828  00038A  C1E3  F1CA         	movff	main@F3898+1,main@SensorResult+1
   829  00038E  C1E4  F1CB         	movff	main@F3898+2,main@SensorResult+2
   830  000392  C1E5  F1CC         	movff	main@F3898+3,main@SensorResult+3
   831                           
   832                           ;main.c: 65: char buf[40];
   833                           ;main.c: 67: unsigned char ScanAngle=60;
   834  000396  0E3C               	movlw	60
   835  000398  0101               	movlb	1	; () banked
   836  00039A  6FC8               	movwf	main@ScanAngle& (0+255),b
   837                           
   838                           ; BSR set to: 1
   839                           ;main.c: 76: INTCONbits.GIEH=1;
   840  00039C  8EF2               	bsf	intcon,7,c	;volatile
   841                           
   842                           ; BSR set to: 1
   843                           ;main.c: 77: INTCONbits.GIEL=1;
   844  00039E  8CF2               	bsf	intcon,6,c	;volatile
   845                           
   846                           ; BSR set to: 1
   847                           ;main.c: 78: INTCONbits.PEIE=1;
   848  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   849                           
   850                           ; BSR set to: 1
   851                           ;main.c: 79: RCONbits.IPEN=1;
   852  0003A2  8ED0               	bsf	4048,7,c	;volatile
   853                           
   854                           ; BSR set to: 1
   855                           ;main.c: 82: IPR1bits.RCIP=0;
   856  0003A4  9A9F               	bcf	3999,5,c	;volatile
   857                           
   858                           ; BSR set to: 1
   859                           ;main.c: 83: PIE1bits.RCIE=1;
   860  0003A6  8A9D               	bsf	3997,5,c	;volatile
   861                           
   862                           ; BSR set to: 1
   863                           ;main.c: 86: TRISCbits.RC3=1;
   864  0003A8  8694               	bsf	3988,3,c	;volatile
   865                           
   866                           ; BSR set to: 1
   867                           ;main.c: 87: INTCONbits.INT0IE=1;
   868  0003AA  88F2               	bsf	intcon,4,c	;volatile
   869                           
   870                           ; BSR set to: 1
   871                           ;main.c: 90: PIR1bits.RC1IF=0;
   872  0003AC  9A9E               	bcf	3998,5,c	;volatile
   873                           
   874                           ; BSR set to: 1
   875                           ;main.c: 91: INTCONbits.INT0IF=0;
   876  0003AE  92F2               	bcf	intcon,1,c	;volatile
   877                           
   878                           ;main.c: 94: struct DC_motor mL, mR;
   879                           ;main.c: 95: mL.power=0;
   880  0003B0  0E00               	movlw	0
   881  0003B2  0101               	movlb	1	; () banked
   882  0003B4  6FD0               	movwf	main@mL& (0+255),b
   883                           
   884                           ;main.c: 96: mL.direction=1;
   885  0003B6  0E01               	movlw	1
   886  0003B8  0101               	movlb	1	; () banked
   887  0003BA  6FD1               	movwf	(main@mL+1)& (0+255),b
   888                           
   889                           ; BSR set to: 1
   890                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   891  0003BC  0E79               	movlw	121
   892  0003BE  0101               	movlb	1	; () banked
   893  0003C0  6FD2               	movwf	(main@mL+2)& (0+255),b
   894  0003C2  0E0F               	movlw	15
   895  0003C4  0101               	movlb	1	; () banked
   896  0003C6  6FD3               	movwf	(main@mL+3)& (0+255),b
   897                           
   898                           ; BSR set to: 1
   899                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   900  0003C8  0E78               	movlw	120
   901  0003CA  0101               	movlb	1	; () banked
   902  0003CC  6FD4               	movwf	(main@mL+4)& (0+255),b
   903  0003CE  0E0F               	movlw	15
   904  0003D0  0101               	movlb	1	; () banked
   905  0003D2  6FD5               	movwf	(main@mL+5)& (0+255),b
   906                           
   907                           ;main.c: 99: mL.dir_pin=0;
   908  0003D4  0E00               	movlw	0
   909  0003D6  0101               	movlb	1	; () banked
   910  0003D8  6FD6               	movwf	(main@mL+6)& (0+255),b
   911                           
   912                           ;main.c: 100: mL.PWMperiod=199;
   913  0003DA  0E00               	movlw	0
   914  0003DC  0101               	movlb	1	; () banked
   915  0003DE  6FD8               	movwf	(main@mL+8)& (0+255),b
   916  0003E0  0EC7               	movlw	199
   917  0003E2  6FD7               	movwf	(main@mL+7)& (0+255),b
   918                           
   919                           ;main.c: 102: mR.power=0;
   920  0003E4  0E00               	movlw	0
   921  0003E6  0101               	movlb	1	; () banked
   922  0003E8  6FD9               	movwf	main@mR& (0+255),b
   923                           
   924                           ;main.c: 103: mR.direction=1;
   925  0003EA  0E01               	movlw	1
   926  0003EC  0101               	movlb	1	; () banked
   927  0003EE  6FDA               	movwf	(main@mR+1)& (0+255),b
   928                           
   929                           ; BSR set to: 1
   930                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   931  0003F0  0E77               	movlw	119
   932  0003F2  0101               	movlb	1	; () banked
   933  0003F4  6FDB               	movwf	(main@mR+2)& (0+255),b
   934  0003F6  0E0F               	movlw	15
   935  0003F8  0101               	movlb	1	; () banked
   936  0003FA  6FDC               	movwf	(main@mR+3)& (0+255),b
   937                           
   938                           ; BSR set to: 1
   939                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   940  0003FC  0E76               	movlw	118
   941  0003FE  0101               	movlb	1	; () banked
   942  000400  6FDD               	movwf	(main@mR+4)& (0+255),b
   943  000402  0E0F               	movlw	15
   944  000404  0101               	movlb	1	; () banked
   945  000406  6FDE               	movwf	(main@mR+5)& (0+255),b
   946                           
   947                           ;main.c: 106: mR.dir_pin=2;
   948  000408  0E02               	movlw	2
   949  00040A  0101               	movlb	1	; () banked
   950  00040C  6FDF               	movwf	(main@mR+6)& (0+255),b
   951                           
   952                           ;main.c: 107: mR.PWMperiod=199;
   953  00040E  0E00               	movlw	0
   954  000410  0101               	movlb	1	; () banked
   955  000412  6FE1               	movwf	(main@mR+8)& (0+255),b
   956  000414  0EC7               	movlw	199
   957  000416  6FE0               	movwf	(main@mR+7)& (0+255),b
   958                           
   959                           ;main.c: 109: OSCCON = 0x72;
   960  000418  0E72               	movlw	114
   961  00041A  6ED3               	movwf	4051,c	;volatile
   962  00041C                     l390:
   963  00041C  B4D3               	btfsc	4051,2,c	;volatile
   964  00041E  D34C               	goto	l3554
   965  000420  D7FD               	goto	l390
   966  000422                     l3364:
   967                           
   968                           ;main.c: 122: stop(&mL, &mR);
   969  000422  0ED0               	movlw	low main@mL
   970  000424  0100               	movlb	0	; () banked
   971  000426  6F62               	movwf	stop@mL& (0+255),b
   972  000428  0E01               	movlw	high main@mL
   973  00042A  0100               	movlb	0	; () banked
   974  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   975  00042E  0ED9               	movlw	low main@mR
   976  000430  0100               	movlb	0	; () banked
   977  000432  6F64               	movwf	stop@mR& (0+255),b
   978  000434  0E01               	movlw	high main@mR
   979  000436  0100               	movlb	0	; () banked
   980  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   981  00043A  EC24  F00B         	call	_stop	;wreg free
   982                           
   983                           ;main.c: 123: RFID_Read=0;
   984  00043E  0E00               	movlw	0
   985  000440  0101               	movlb	1	; () banked
   986  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   987                           
   988                           ; BSR set to: 1
   989                           ;main.c: 126: SensorResult[0]=grabLeftIR();
   990  000444  EC6E  F00C         	call	_grabLeftIR	;wreg free
   991  000448  C024  F1C9         	movff	?_grabLeftIR,main@SensorResult
   992  00044C  C025  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
   993                           
   994                           ;main.c: 127: SensorResult[1]=grabRightIR();
   995  000450  EC35  F00C         	call	_grabRightIR	;wreg free
   996  000454  C024  F1CB         	movff	?_grabRightIR,main@SensorResult+2
   997  000458  C025  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
   998                           
   999                           ;main.c: 131: CAP1BUFH=0;
  1000  00045C  0E00               	movlw	0
  1001  00045E  6E69               	movwf	3945,c	;volatile
  1002                           
  1003                           ;main.c: 132: CAP1BUFL=0;
  1004  000460  0E00               	movlw	0
  1005  000462  6E68               	movwf	3944,c	;volatile
  1006                           
  1007                           ;main.c: 133: CAP2BUFH=0;
  1008  000464  0E00               	movlw	0
  1009  000466  6E67               	movwf	3943,c	;volatile
  1010                           
  1011                           ;main.c: 134: CAP2BUFL=0;
  1012  000468  0E00               	movlw	0
  1013  00046A  6E66               	movwf	3942,c	;volatile
  1014                           
  1015                           ;main.c: 137: SendLCD(0b00000001,0);
  1016  00046C  0E00               	movlw	0
  1017  00046E  6E28               	movwf	SendLCD@type,c
  1018  000470  0E01               	movlw	1
  1019  000472  EC2D  F00E         	call	_SendLCD
  1020                           
  1021                           ;main.c: 138: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1022  000476  0E21               	movlw	33
  1023  000478                     u2977:
  1024  000478  2EE8               	decfsz	wreg,f,c
  1025  00047A  D7FE               	goto	u2977
  1026  00047C  F000               	nop	
  1027                           
  1028                           ;main.c: 139: SendLCD(0b00000010,0);
  1029  00047E  0E00               	movlw	0
  1030  000480  6E28               	movwf	SendLCD@type,c
  1031  000482  0E02               	movlw	2
  1032  000484  EC2D  F00E         	call	_SendLCD
  1033                           
  1034                           ;main.c: 140: _delay((unsigned long)((2)*(8000000/4000.0)));
  1035  000488  0E06               	movlw	6
  1036  00048A  0100               	movlb	0	; () banked
  1037  00048C  6FBA               	movwf	??_main& (0+255),b
  1038  00048E  0E30               	movlw	48
  1039  000490                     u2987:
  1040  000490  2EE8               	decfsz	wreg,f,c
  1041  000492  D7FE               	goto	u2987
  1042  000494  2FBA               	decfsz	??_main& (0+255),f,b
  1043  000496  D7FC               	goto	u2987
  1044  000498  D000               	nop2	
  1045                           
  1046                           ;main.c: 141: SetLine(1);
  1047  00049A  0E01               	movlw	1
  1048  00049C  EC15  F00E         	call	_SetLine
  1049                           
  1050                           ;main.c: 142: LCD_String("      Inert Mode");
  1051  0004A0  0E1C               	movlw	low STR_5
  1052  0004A2  6E2A               	movwf	LCD_String@string,c
  1053  0004A4  0E03               	movlw	high STR_5
  1054  0004A6  6E2B               	movwf	LCD_String@string+1,c
  1055  0004A8  ECA7  F00C         	call	_LCD_String	;wreg free
  1056                           
  1057                           ;main.c: 143: SetLine(2);
  1058  0004AC  0E02               	movlw	2
  1059  0004AE  EC15  F00E         	call	_SetLine
  1060                           
  1061                           ;main.c: 144: if (RFID_Read) {
  1062  0004B2  0101               	movlb	1	; () banked
  1063  0004B4  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1064  0004B6  B4D8               	btfsc	status,2,c
  1065  0004B8  D007               	goto	l3398
  1066                           
  1067                           ; BSR set to: 1
  1068                           ;main.c: 145: LCD_String(Message);
  1069  0004BA  0EBE               	movlw	low main@Message
  1070  0004BC  6E2A               	movwf	LCD_String@string,c
  1071  0004BE  0E01               	movlw	high main@Message
  1072  0004C0  6E2B               	movwf	LCD_String@string+1,c
  1073  0004C2  ECA7  F00C         	call	_LCD_String	;wreg free
  1074                           
  1075                           ;main.c: 146: } else {
  1076  0004C6  D2F8               	goto	l3554
  1077  0004C8                     l3398:
  1078                           
  1079                           ;main.c: 147: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1080  0004C8  0E00               	movlw	low main@buf
  1081  0004CA  6E30               	movwf	sprintf@sp,c
  1082  0004CC  0E01               	movlw	high main@buf
  1083  0004CE  6E31               	movwf	sprintf@sp+1,c
  1084  0004D0  0E0B               	movlw	low STR_6
  1085  0004D2  6E32               	movwf	sprintf@f,c
  1086  0004D4  0E03               	movlw	high STR_6
  1087  0004D6  6E33               	movwf	sprintf@f+1,c
  1088  0004D8  C1C9  F034         	movff	main@SensorResult,?_sprintf+4
  1089  0004DC  C1CA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1090  0004E0  C1CB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1091  0004E4  C1CC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1092  0004E8  ECC6  F007         	call	_sprintf	;wreg free
  1093                           
  1094                           ;main.c: 148: LCD_String(buf);
  1095  0004EC  0E00               	movlw	low main@buf
  1096  0004EE  6E2A               	movwf	LCD_String@string,c
  1097  0004F0  0E01               	movlw	high main@buf
  1098  0004F2  6E2B               	movwf	LCD_String@string+1,c
  1099  0004F4  ECA7  F00C         	call	_LCD_String	;wreg free
  1100                           
  1101                           ;main.c: 149: }
  1102                           ;main.c: 152: break;
  1103  0004F8  D2DF               	goto	l3554
  1104  0004FA                     l3402:
  1105                           
  1106                           ;main.c: 157: initMotorPWM();
  1107  0004FA  ECFC  F00D         	call	_initMotorPWM	;wreg free
  1108                           
  1109                           ;main.c: 158: initTimer();
  1110  0004FE  EC99  F00E         	call	_initTimer	;wreg free
  1111                           
  1112                           ;main.c: 159: initRFID();
  1113  000502  EC8B  F00E         	call	_initRFID	;wreg free
  1114                           
  1115                           ;main.c: 160: initLCD();
  1116  000506  ECC6  F00A         	call	_initLCD	;wreg free
  1117                           
  1118                           ;main.c: 161: initIR();
  1119  00050A  EC6B  F00E         	call	_initIR	;wreg free
  1120                           
  1121                           ;main.c: 163: enableSensor(0, 1);
  1122  00050E  0E01               	movlw	1
  1123  000510  6E24               	movwf	enableSensor@status,c
  1124  000512  0E00               	movlw	0
  1125  000514  EC45  F00E         	call	_enableSensor
  1126                           
  1127                           ;main.c: 164: enableSensor(1, 1);
  1128  000518  0E01               	movlw	1
  1129  00051A  6E24               	movwf	enableSensor@status,c
  1130  00051C  0E01               	movlw	1
  1131  00051E  EC45  F00E         	call	_enableSensor
  1132                           
  1133                           ;main.c: 167: fullSpeedAhead(&mL, &mR, 100);
  1134  000522  0ED0               	movlw	low main@mL
  1135  000524  0100               	movlb	0	; () banked
  1136  000526  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1137  000528  0E01               	movlw	high main@mL
  1138  00052A  0100               	movlb	0	; () banked
  1139  00052C  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1140  00052E  0ED9               	movlw	low main@mR
  1141  000530  0100               	movlb	0	; () banked
  1142  000532  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1143  000534  0E01               	movlw	high main@mR
  1144  000536  0100               	movlb	0	; () banked
  1145  000538  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1146  00053A  0E64               	movlw	100
  1147  00053C  0100               	movlb	0	; () banked
  1148  00053E  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1149  000540  ECF5  F00B         	call	_fullSpeedAhead	;wreg free
  1150                           
  1151                           ;main.c: 168: delay_tenth_s(1);
  1152  000544  0E01               	movlw	1
  1153  000546  ECA9  F00D         	call	_delay_tenth_s
  1154  00054A  D2B5               	goto	l420
  1155  00054C                     l3422:
  1156                           
  1157                           ;main.c: 180: SetLine(1);
  1158  00054C  0E01               	movlw	1
  1159  00054E  EC15  F00E         	call	_SetLine
  1160                           
  1161                           ;main.c: 181: LCD_String("Searching");
  1162  000552  0E44               	movlw	low STR_7
  1163  000554  6E2A               	movwf	LCD_String@string,c
  1164  000556  0E03               	movlw	high STR_7
  1165  000558  6E2B               	movwf	LCD_String@string+1,c
  1166  00055A  ECA7  F00C         	call	_LCD_String	;wreg free
  1167                           
  1168                           ;main.c: 183: if (DirectionFound==-1) {
  1169  00055E  0101               	movlb	1	; () banked
  1170  000560  29CD               	incf	main@DirectionFound& (0+255),w,b
  1171  000562  A4D8               	btfss	status,2,c
  1172  000564  D03E               	goto	l3442
  1173                           
  1174                           ; BSR set to: 1
  1175                           ;main.c: 188: Move++;
  1176  000566  0101               	movlb	1	; () banked
  1177  000568  2BCF               	incf	main@Move& (0+255),f,b
  1178                           
  1179                           ; BSR set to: 1
  1180                           ;main.c: 189: MoveType[Move]=0;
  1181  00056A  0101               	movlb	1	; () banked
  1182  00056C  51CF               	movf	main@Move& (0+255),w,b
  1183  00056E  0D01               	mullw	1
  1184  000570  0E28               	movlw	low main@MoveType
  1185  000572  24F3               	addwf	prodl,w,c
  1186  000574  6ED9               	movwf	fsr2l,c
  1187  000576  0E01               	movlw	high main@MoveType
  1188  000578  20F4               	addwfc	prodh,w,c
  1189  00057A  6EDA               	movwf	fsr2h,c
  1190  00057C  0E00               	movlw	0
  1191  00057E  6EDF               	movwf	indf2,c
  1192                           
  1193                           ; BSR set to: 1
  1194                           ;main.c: 190: MoveTime[Move]=6;
  1195  000580  0101               	movlb	1	; () banked
  1196  000582  51CF               	movf	main@Move& (0+255),w,b
  1197  000584  0D02               	mullw	2
  1198  000586  0E5A               	movlw	low main@MoveTime
  1199  000588  24F3               	addwf	prodl,w,c
  1200  00058A  6ED9               	movwf	fsr2l,c
  1201  00058C  0E01               	movlw	high main@MoveTime
  1202  00058E  20F4               	addwfc	prodh,w,c
  1203  000590  6EDA               	movwf	fsr2h,c
  1204  000592  0E06               	movlw	6
  1205  000594  6EDE               	movwf	postinc2,c
  1206  000596  0E00               	movlw	0
  1207  000598  6EDD               	movwf	postdec2,c
  1208                           
  1209                           ; BSR set to: 1
  1210                           ;main.c: 191: fullSpeedAhead(&mL, &mR, 100);
  1211  00059A  0ED0               	movlw	low main@mL
  1212  00059C  0100               	movlb	0	; () banked
  1213  00059E  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1214  0005A0  0E01               	movlw	high main@mL
  1215  0005A2  0100               	movlb	0	; () banked
  1216  0005A4  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1217  0005A6  0ED9               	movlw	low main@mR
  1218  0005A8  0100               	movlb	0	; () banked
  1219  0005AA  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1220  0005AC  0E01               	movlw	high main@mR
  1221  0005AE  0100               	movlb	0	; () banked
  1222  0005B0  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1223  0005B2  0E64               	movlw	100
  1224  0005B4  0100               	movlb	0	; () banked
  1225  0005B6  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1226  0005B8  ECF5  F00B         	call	_fullSpeedAhead	;wreg free
  1227                           
  1228                           ;main.c: 192: delay_tenth_s(6);
  1229  0005BC  0E06               	movlw	6
  1230  0005BE  ECA9  F00D         	call	_delay_tenth_s
  1231                           
  1232                           ;main.c: 193: stop(&mL,&mR);
  1233  0005C2  0ED0               	movlw	low main@mL
  1234  0005C4  0100               	movlb	0	; () banked
  1235  0005C6  6F62               	movwf	stop@mL& (0+255),b
  1236  0005C8  0E01               	movlw	high main@mL
  1237  0005CA  0100               	movlb	0	; () banked
  1238  0005CC  6F63               	movwf	(stop@mL+1)& (0+255),b
  1239  0005CE  0ED9               	movlw	low main@mR
  1240  0005D0  0100               	movlb	0	; () banked
  1241  0005D2  6F64               	movwf	stop@mR& (0+255),b
  1242  0005D4  0E01               	movlw	high main@mR
  1243  0005D6  0100               	movlb	0	; () banked
  1244  0005D8  6F65               	movwf	(stop@mR+1)& (0+255),b
  1245  0005DA  EC24  F00B         	call	_stop	;wreg free
  1246                           
  1247                           ;main.c: 194: DirectionFound=0;
  1248  0005DE  0E00               	movlw	0
  1249  0005E0  D044               	goto	L1
  1250  0005E2                     l3442:
  1251                           
  1252                           ; BSR set to: 1
  1253  0005E2  0101               	movlb	1	; () banked
  1254  0005E4  51CD               	movf	main@DirectionFound& (0+255),w,b
  1255  0005E6  0101               	movlb	1	; () banked
  1256  0005E8  A4D8               	btfss	status,2,c
  1257  0005EA  D02D               	goto	l3448
  1258                           
  1259                           ; BSR set to: 1
  1260                           ;main.c: 197: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1261                           ;main.c: 198: &MoveTime, &Move, &MoveType, &RFID_Read);
  1262  0005EC  0ED0               	movlw	low main@mL
  1263  0005EE  0100               	movlb	0	; () banked
  1264  0005F0  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1265  0005F2  0E01               	movlw	high main@mL
  1266  0005F4  0100               	movlb	0	; () banked
  1267  0005F6  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1268  0005F8  0ED9               	movlw	low main@mR
  1269  0005FA  0100               	movlb	0	; () banked
  1270  0005FC  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1271  0005FE  0E01               	movlw	high main@mR
  1272  000600  0100               	movlb	0	; () banked
  1273  000602  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1274  000604  C1C8  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1275  000608  0100               	movlb	0	; () banked
  1276  00060A  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1277  00060C  0E5A               	movlw	low main@MoveTime
  1278  00060E  0100               	movlb	0	; () banked
  1279  000610  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1280  000612  0E01               	movlw	high main@MoveTime
  1281  000614  0100               	movlb	0	; () banked
  1282  000616  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1283  000618  0ECF               	movlw	low main@Move
  1284  00061A  0100               	movlb	0	; () banked
  1285  00061C  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1286  00061E  0E01               	movlw	high main@Move
  1287  000620  0100               	movlb	0	; () banked
  1288  000622  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1289  000624  0E28               	movlw	low main@MoveType
  1290  000626  0100               	movlb	0	; () banked
  1291  000628  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1292  00062A  0E01               	movlw	high main@MoveType
  1293  00062C  0100               	movlb	0	; () banked
  1294  00062E  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1295  000630  0EF6               	movlw	low _RFID_Read
  1296  000632  0100               	movlb	0	; () banked
  1297  000634  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1298  000636  0E01               	movlw	high _RFID_Read
  1299  000638  0100               	movlb	0	; () banked
  1300  00063A  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1301  00063C  EC6D  F005         	call	_ScanWithRange	;wreg free
  1302  000640  0101               	movlb	1	; () banked
  1303  000642  6FCD               	movwf	main@DirectionFound& (0+255),b
  1304  000644  D01C               	goto	l3456
  1305  000646                     l3448:
  1306                           
  1307                           ; BSR set to: 1
  1308  000646  0101               	movlb	1	; () banked
  1309  000648  05CD               	decf	main@DirectionFound& (0+255),w,b
  1310  00064A  A4D8               	btfss	status,2,c
  1311  00064C  D011               	goto	l3452
  1312                           
  1313                           ; BSR set to: 1
  1314                           ;main.c: 202: DirectionFound=ScanIR(&mL, &mR);
  1315  00064E  0ED0               	movlw	low main@mL
  1316  000650  0100               	movlb	0	; () banked
  1317  000652  6F6D               	movwf	ScanIR@mL& (0+255),b
  1318  000654  0E01               	movlw	high main@mL
  1319  000656  0100               	movlb	0	; () banked
  1320  000658  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1321  00065A  0ED9               	movlw	low main@mR
  1322  00065C  0100               	movlb	0	; () banked
  1323  00065E  6F6F               	movwf	ScanIR@mR& (0+255),b
  1324  000660  0E01               	movlw	high main@mR
  1325  000662  0100               	movlb	0	; () banked
  1326  000664  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1327  000666  ECE6  F009         	call	_ScanIR	;wreg free
  1328  00066A                     L1:
  1329  00066A  0101               	movlb	1	; () banked
  1330  00066C  6FCD               	movwf	main@DirectionFound& (0+255),b
  1331                           
  1332                           ;main.c: 203: } else if (DirectionFound==2) {
  1333  00066E  D224               	goto	l3554
  1334  000670                     l3452:
  1335                           
  1336                           ; BSR set to: 1
  1337  000670  0E02               	movlw	2
  1338  000672  0101               	movlb	1	; () banked
  1339  000674  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1340  000676  A4D8               	btfss	status,2,c
  1341  000678  D21F               	goto	l3554
  1342                           
  1343                           ; BSR set to: 1
  1344                           ;main.c: 205: mode=2;
  1345  00067A  0E02               	movlw	2
  1346  00067C  6E3B               	movwf	_mode,c	;volatile
  1347  00067E                     l3456:
  1348                           
  1349                           ; BSR set to: 1
  1350                           ;main.c: 206: MoveType[Move]=1;
  1351  00067E  0101               	movlb	1	; () banked
  1352  000680  51CF               	movf	main@Move& (0+255),w,b
  1353  000682  0D01               	mullw	1
  1354  000684  0E28               	movlw	low main@MoveType
  1355  000686  24F3               	addwf	prodl,w,c
  1356  000688  6ED9               	movwf	fsr2l,c
  1357  00068A  0E01               	movlw	high main@MoveType
  1358  00068C  20F4               	addwfc	prodh,w,c
  1359  00068E  6EDA               	movwf	fsr2h,c
  1360  000690  0E01               	movlw	1
  1361  000692  6EDF               	movwf	indf2,c
  1362                           
  1363                           ; BSR set to: 1
  1364                           ;main.c: 207: }
  1365                           ;main.c: 209: break;
  1366                           
  1367                           ; BSR set to: 1
  1368                           
  1369                           ; BSR set to: 1
  1370                           
  1371                           ; BSR set to: 1
  1372  000694  D211               	goto	l3554
  1373  000696                     l3458:
  1374                           
  1375                           ;main.c: 216: if (RFID_Read) {
  1376  000696  0101               	movlb	1	; () banked
  1377  000698  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1378  00069A  B4D8               	btfsc	status,2,c
  1379  00069C  D0A2               	goto	l3500
  1380                           
  1381                           ; BSR set to: 1
  1382                           ;main.c: 217: stop(&mL, &mR);
  1383  00069E  0ED0               	movlw	low main@mL
  1384  0006A0  0100               	movlb	0	; () banked
  1385  0006A2  6F62               	movwf	stop@mL& (0+255),b
  1386  0006A4  0E01               	movlw	high main@mL
  1387  0006A6  0100               	movlb	0	; () banked
  1388  0006A8  6F63               	movwf	(stop@mL+1)& (0+255),b
  1389  0006AA  0ED9               	movlw	low main@mR
  1390  0006AC  0100               	movlb	0	; () banked
  1391  0006AE  6F64               	movwf	stop@mR& (0+255),b
  1392  0006B0  0E01               	movlw	high main@mR
  1393  0006B2  0100               	movlb	0	; () banked
  1394  0006B4  6F65               	movwf	(stop@mR+1)& (0+255),b
  1395  0006B6  EC24  F00B         	call	_stop	;wreg free
  1396                           
  1397                           ;main.c: 218: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1398  0006BA  0E03               	movlw	3
  1399  0006BC  0101               	movlb	1	; () banked
  1400  0006BE  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1401  0006C0  A4D8               	btfss	status,2,c
  1402  0006C2  D002               	goto	u2820
  1403  0006C4  0E01               	movlw	1
  1404  0006C6  D001               	goto	u2822
  1405  0006C8                     u2820:
  1406  0006C8  0E00               	movlw	0
  1407  0006CA                     u2822:
  1408  0006CA  0100               	movlb	0	; () banked
  1409  0006CC  6FBA               	movwf	??_main& (0+255),b
  1410  0006CE  0E02               	movlw	2
  1411  0006D0  0101               	movlb	1	; () banked
  1412  0006D2  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1413  0006D4  A4D8               	btfss	status,2,c
  1414  0006D6  D002               	goto	u2830
  1415  0006D8  0E01               	movlw	1
  1416  0006DA  D001               	goto	u2832
  1417  0006DC                     u2830:
  1418  0006DC  0E00               	movlw	0
  1419  0006DE                     u2832:
  1420  0006DE  0100               	movlb	0	; () banked
  1421  0006E0  15BA               	andwf	??_main& (0+255),w,b
  1422  0006E2  A0E8               	btfss	wreg,0,c
  1423  0006E4  D1E9               	goto	l3554
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 219: if (VerifySignal(&ReceivedString)){
  1427  0006E6  0EE6               	movlw	low _ReceivedString
  1428  0006E8  6E24               	movwf	VerifySignal@Signal,c
  1429  0006EA  0E01               	movlw	high _ReceivedString
  1430  0006EC  6E25               	movwf	VerifySignal@Signal+1,c
  1431  0006EE  ECD6  F00C         	call	_VerifySignal	;wreg free
  1432  0006F2  0900               	iorlw	0
  1433  0006F4  B4D8               	btfsc	status,2,c
  1434  0006F6  D041               	goto	l3492
  1435                           
  1436                           ;main.c: 221: for (i=0; i<10; i++){
  1437  0006F8  0E00               	movlw	0
  1438  0006FA  0101               	movlb	1	; () banked
  1439  0006FC  6FCE               	movwf	main@i& (0+255),b
  1440  0006FE                     l3468:
  1441                           
  1442                           ; BSR set to: 1
  1443  0006FE  0E09               	movlw	9
  1444  000700  0101               	movlb	1	; () banked
  1445  000702  65CE               	cpfsgt	main@i& (0+255),b
  1446  000704  D001               	goto	l3472
  1447  000706  D020               	goto	l3478
  1448  000708                     l3472:
  1449                           
  1450                           ; BSR set to: 1
  1451                           ;main.c: 222: Message[i] = ReceivedString[i+1];
  1452  000708  0101               	movlb	1	; () banked
  1453  00070A  51CE               	movf	main@i& (0+255),w,b
  1454  00070C  0100               	movlb	0	; () banked
  1455  00070E  6FBA               	movwf	??_main& (0+255),b
  1456  000710  6BBB               	clrf	(??_main+1)& (0+255),b
  1457  000712  0E01               	movlw	1
  1458  000714  0100               	movlb	0	; () banked
  1459  000716  27BA               	addwf	??_main& (0+255),f,b
  1460  000718  0E00               	movlw	0
  1461  00071A  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1462  00071C  0EE6               	movlw	low _ReceivedString
  1463  00071E  0100               	movlb	0	; () banked
  1464  000720  25BA               	addwf	??_main& (0+255),w,b
  1465  000722  6ED9               	movwf	fsr2l,c
  1466  000724  0E01               	movlw	high _ReceivedString
  1467  000726  0100               	movlb	0	; () banked
  1468  000728  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1469  00072A  6EDA               	movwf	fsr2h,c
  1470  00072C  0101               	movlb	1	; () banked
  1471  00072E  51CE               	movf	main@i& (0+255),w,b
  1472  000730  0D01               	mullw	1
  1473  000732  0EBE               	movlw	low main@Message
  1474  000734  24F3               	addwf	prodl,w,c
  1475  000736  6EE1               	movwf	fsr1l,c
  1476  000738  0E01               	movlw	high main@Message
  1477  00073A  20F4               	addwfc	prodh,w,c
  1478  00073C  6EE2               	movwf	fsr1h,c
  1479  00073E  CFDF FFE7          	movff	indf2,indf1
  1480                           
  1481                           ; BSR set to: 1
  1482  000742  0101               	movlb	1	; () banked
  1483  000744  2BCE               	incf	main@i& (0+255),f,b
  1484  000746  D7DB               	goto	l3468
  1485  000748                     l3478:
  1486                           
  1487                           ; BSR set to: 1
  1488                           ;main.c: 223: }
  1489                           ;main.c: 226: for (i=0; i<16; i++) {
  1490  000748  0E00               	movlw	0
  1491  00074A  0101               	movlb	1	; () banked
  1492  00074C  6FCE               	movwf	main@i& (0+255),b
  1493  00074E                     l3480:
  1494                           
  1495                           ; BSR set to: 1
  1496  00074E  0E0F               	movlw	15
  1497  000750  0101               	movlb	1	; () banked
  1498  000752  65CE               	cpfsgt	main@i& (0+255),b
  1499  000754  D001               	goto	l3484
  1500  000756  D00E               	goto	l3490
  1501  000758                     l3484:
  1502                           
  1503                           ; BSR set to: 1
  1504                           ;main.c: 227: ReceivedString[i]=0;
  1505  000758  0101               	movlb	1	; () banked
  1506  00075A  51CE               	movf	main@i& (0+255),w,b
  1507  00075C  0D01               	mullw	1
  1508  00075E  0EE6               	movlw	low _ReceivedString
  1509  000760  24F3               	addwf	prodl,w,c
  1510  000762  6ED9               	movwf	fsr2l,c
  1511  000764  0E01               	movlw	high _ReceivedString
  1512  000766  20F4               	addwfc	prodh,w,c
  1513  000768  6EDA               	movwf	fsr2h,c
  1514  00076A  0E00               	movlw	0
  1515  00076C  6EDF               	movwf	indf2,c
  1516                           
  1517                           ; BSR set to: 1
  1518  00076E  0101               	movlb	1	; () banked
  1519  000770  2BCE               	incf	main@i& (0+255),f,b
  1520  000772  D7ED               	goto	l3480
  1521  000774                     l3490:
  1522                           
  1523                           ; BSR set to: 1
  1524                           ;main.c: 228: }
  1525                           ;main.c: 229: mode=3;
  1526  000774  0E03               	movlw	3
  1527  000776  6E3B               	movwf	_mode,c	;volatile
  1528                           
  1529                           ;main.c: 231: } else {
  1530  000778  D19F               	goto	l3554
  1531  00077A                     l3492:
  1532                           
  1533                           ;main.c: 232: fullSpeedBack(&mL,&mR, 100);
  1534  00077A  0ED0               	movlw	low main@mL
  1535  00077C  0100               	movlb	0	; () banked
  1536  00077E  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1537  000780  0E01               	movlw	high main@mL
  1538  000782  0100               	movlb	0	; () banked
  1539  000784  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1540  000786  0ED9               	movlw	low main@mR
  1541  000788  0100               	movlb	0	; () banked
  1542  00078A  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1543  00078C  0E01               	movlw	high main@mR
  1544  00078E  0100               	movlb	0	; () banked
  1545  000790  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1546  000792  0E64               	movlw	100
  1547  000794  0100               	movlb	0	; () banked
  1548  000796  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1549  000798  EC4C  F00D         	call	_fullSpeedBack	;wreg free
  1550                           
  1551                           ;main.c: 233: delay_tenth_s(5);
  1552  00079C  0E05               	movlw	5
  1553  00079E  ECA9  F00D         	call	_delay_tenth_s
  1554                           
  1555                           ;main.c: 234: stop(&mL,&mR);
  1556  0007A2  0ED0               	movlw	low main@mL
  1557  0007A4  0100               	movlb	0	; () banked
  1558  0007A6  6F62               	movwf	stop@mL& (0+255),b
  1559  0007A8  0E01               	movlw	high main@mL
  1560  0007AA  0100               	movlb	0	; () banked
  1561  0007AC  6F63               	movwf	(stop@mL+1)& (0+255),b
  1562  0007AE  0ED9               	movlw	low main@mR
  1563  0007B0  0100               	movlb	0	; () banked
  1564  0007B2  6F64               	movwf	stop@mR& (0+255),b
  1565  0007B4  0E01               	movlw	high main@mR
  1566  0007B6  0100               	movlb	0	; () banked
  1567  0007B8  6F65               	movwf	(stop@mR+1)& (0+255),b
  1568  0007BA  EC24  F00B         	call	_stop	;wreg free
  1569                           
  1570                           ;main.c: 235: fullSpeedAhead(&mL,&mR, 100);
  1571  0007BE  0ED0               	movlw	low main@mL
  1572  0007C0  0100               	movlb	0	; () banked
  1573  0007C2  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1574  0007C4  0E01               	movlw	high main@mL
  1575  0007C6  0100               	movlb	0	; () banked
  1576  0007C8  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1577  0007CA  0ED9               	movlw	low main@mR
  1578  0007CC  0100               	movlb	0	; () banked
  1579  0007CE  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1580  0007D0  0E01               	movlw	high main@mR
  1581  0007D2  0100               	movlb	0	; () banked
  1582  0007D4  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1583  0007D6  0E64               	movlw	100
  1584  0007D8  0100               	movlb	0	; () banked
  1585  0007DA  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1586  0007DC  ECF5  F00B         	call	_fullSpeedAhead	;wreg free
  1587                           
  1588                           ;main.c: 236: }
  1589                           ;main.c: 237: }
  1590                           ;main.c: 238: } else {
  1591  0007E0  D16B               	goto	l3554
  1592  0007E2                     l3500:
  1593                           
  1594                           ;main.c: 239: DirectionFound=1;
  1595  0007E2  0E01               	movlw	1
  1596  0007E4  0101               	movlb	1	; () banked
  1597  0007E6  6FCD               	movwf	main@DirectionFound& (0+255),b
  1598                           
  1599                           ;main.c: 240: mode=1;
  1600  0007E8  0E01               	movlw	1
  1601  0007EA  6E3B               	movwf	_mode,c	;volatile
  1602                           
  1603                           ; BSR set to: 1
  1604                           ;main.c: 242: fullSpeedAhead(&mL,&mR, 100);
  1605  0007EC  0ED0               	movlw	low main@mL
  1606  0007EE  0100               	movlb	0	; () banked
  1607  0007F0  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1608  0007F2  0E01               	movlw	high main@mL
  1609  0007F4  0100               	movlb	0	; () banked
  1610  0007F6  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1611  0007F8  0ED9               	movlw	low main@mR
  1612  0007FA  0100               	movlb	0	; () banked
  1613  0007FC  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1614  0007FE  0E01               	movlw	high main@mR
  1615  000800  0100               	movlb	0	; () banked
  1616  000802  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1617  000804  0E64               	movlw	100
  1618  000806  0100               	movlb	0	; () banked
  1619  000808  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1620  00080A  ECF5  F00B         	call	_fullSpeedAhead	;wreg free
  1621                           
  1622                           ;main.c: 243: delay_tenth_s(5);
  1623  00080E  0E05               	movlw	5
  1624  000810  ECA9  F00D         	call	_delay_tenth_s
  1625                           
  1626                           ;main.c: 244: MoveType[Move] = 0;
  1627  000814  0101               	movlb	1	; () banked
  1628  000816  51CF               	movf	main@Move& (0+255),w,b
  1629  000818  0D01               	mullw	1
  1630  00081A  0E28               	movlw	low main@MoveType
  1631  00081C  24F3               	addwf	prodl,w,c
  1632  00081E  6ED9               	movwf	fsr2l,c
  1633  000820  0E01               	movlw	high main@MoveType
  1634  000822  20F4               	addwfc	prodh,w,c
  1635  000824  6EDA               	movwf	fsr2h,c
  1636  000826  0E00               	movlw	0
  1637  000828  6EDF               	movwf	indf2,c
  1638                           
  1639                           ; BSR set to: 1
  1640                           ;main.c: 245: MoveTime[Move] = 5;
  1641  00082A  0101               	movlb	1	; () banked
  1642  00082C  51CF               	movf	main@Move& (0+255),w,b
  1643  00082E  0D02               	mullw	2
  1644  000830  0E5A               	movlw	low main@MoveTime
  1645  000832  24F3               	addwf	prodl,w,c
  1646  000834  6ED9               	movwf	fsr2l,c
  1647  000836  0E01               	movlw	high main@MoveTime
  1648  000838  20F4               	addwfc	prodh,w,c
  1649  00083A  6EDA               	movwf	fsr2h,c
  1650  00083C  0E05               	movlw	5
  1651  00083E  6EDE               	movwf	postinc2,c
  1652  000840  0E00               	movlw	0
  1653  000842  6EDD               	movwf	postdec2,c
  1654                           
  1655                           ; BSR set to: 1
  1656                           ;main.c: 246: }
  1657                           ;main.c: 248: break;
  1658  000844  D139               	goto	l3554
  1659  000846                     l3510:
  1660                           
  1661                           ;main.c: 253: SetLine(1);
  1662  000846  0E01               	movlw	1
  1663  000848  EC15  F00E         	call	_SetLine
  1664                           
  1665                           ;main.c: 254: LCD_String(Message);
  1666  00084C  0EBE               	movlw	low main@Message
  1667  00084E  6E2A               	movwf	LCD_String@string,c
  1668  000850  0E01               	movlw	high main@Message
  1669  000852  6E2B               	movwf	LCD_String@string+1,c
  1670  000854  ECA7  F00C         	call	_LCD_String	;wreg free
  1671                           
  1672                           ;main.c: 255: SetLine(2);
  1673  000858  0E02               	movlw	2
  1674  00085A  EC15  F00E         	call	_SetLine
  1675                           
  1676                           ;main.c: 256: LCD_String("Going Home");
  1677  00085E  0E39               	movlw	low STR_8
  1678  000860  6E2A               	movwf	LCD_String@string,c
  1679  000862  0E03               	movlw	high STR_8
  1680  000864  6E2B               	movwf	LCD_String@string+1,c
  1681  000866  ECA7  F00C         	call	_LCD_String	;wreg free
  1682  00086A                     l3518:
  1683                           
  1684                           ;main.c: 259: stop(&mL,&mR);
  1685  00086A  0ED0               	movlw	low main@mL
  1686  00086C  0100               	movlb	0	; () banked
  1687  00086E  6F62               	movwf	stop@mL& (0+255),b
  1688  000870  0E01               	movlw	high main@mL
  1689  000872  0100               	movlb	0	; () banked
  1690  000874  6F63               	movwf	(stop@mL+1)& (0+255),b
  1691  000876  0ED9               	movlw	low main@mR
  1692  000878  0100               	movlb	0	; () banked
  1693  00087A  6F64               	movwf	stop@mR& (0+255),b
  1694  00087C  0E01               	movlw	high main@mR
  1695  00087E  0100               	movlb	0	; () banked
  1696  000880  6F65               	movwf	(stop@mR+1)& (0+255),b
  1697  000882  EC24  F00B         	call	_stop	;wreg free
  1698                           
  1699                           ;main.c: 260: if (MoveType[Move]==0) {
  1700  000886  0101               	movlb	1	; () banked
  1701  000888  51CF               	movf	main@Move& (0+255),w,b
  1702  00088A  0D01               	mullw	1
  1703  00088C  0E28               	movlw	low main@MoveType
  1704  00088E  24F3               	addwf	prodl,w,c
  1705  000890  6ED9               	movwf	fsr2l,c
  1706  000892  0E01               	movlw	high main@MoveType
  1707  000894  20F4               	addwfc	prodh,w,c
  1708  000896  6EDA               	movwf	fsr2h,c
  1709  000898  50DF               	movf	indf2,w,c
  1710  00089A  A4D8               	btfss	status,2,c
  1711  00089C  D01E               	goto	l3524
  1712                           
  1713                           ; BSR set to: 1
  1714                           ;main.c: 261: fullSpeedBack(&mL,&mR,100);
  1715  00089E  0ED0               	movlw	low main@mL
  1716  0008A0  0100               	movlb	0	; () banked
  1717  0008A2  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1718  0008A4  0E01               	movlw	high main@mL
  1719  0008A6  0100               	movlb	0	; () banked
  1720  0008A8  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1721  0008AA  0ED9               	movlw	low main@mR
  1722  0008AC  0100               	movlb	0	; () banked
  1723  0008AE  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1724  0008B0  0E01               	movlw	high main@mR
  1725  0008B2  0100               	movlb	0	; () banked
  1726  0008B4  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1727  0008B6  0E64               	movlw	100
  1728  0008B8  0100               	movlb	0	; () banked
  1729  0008BA  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1730  0008BC  EC4C  F00D         	call	_fullSpeedBack	;wreg free
  1731                           
  1732                           ;main.c: 262: delay_tenth_s(MoveTime[Move]);
  1733  0008C0  0101               	movlb	1	; () banked
  1734  0008C2  51CF               	movf	main@Move& (0+255),w,b
  1735  0008C4  0D02               	mullw	2
  1736  0008C6  0E5A               	movlw	low main@MoveTime
  1737  0008C8  24F3               	addwf	prodl,w,c
  1738  0008CA  6ED9               	movwf	fsr2l,c
  1739  0008CC  0E01               	movlw	high main@MoveTime
  1740  0008CE  20F4               	addwfc	prodh,w,c
  1741  0008D0  6EDA               	movwf	fsr2h,c
  1742  0008D2  50DF               	movf	indf2,w,c
  1743  0008D4  ECA9  F00D         	call	_delay_tenth_s
  1744                           
  1745                           ;main.c: 263: } else if (MoveType[Move]==1) {
  1746  0008D8  D0EB               	goto	l3550
  1747  0008DA                     l3524:
  1748  0008DA  0101               	movlb	1	; () banked
  1749  0008DC  51CF               	movf	main@Move& (0+255),w,b
  1750  0008DE  0D01               	mullw	1
  1751  0008E0  0E28               	movlw	low main@MoveType
  1752  0008E2  24F3               	addwf	prodl,w,c
  1753  0008E4  6ED9               	movwf	fsr2l,c
  1754  0008E6  0E01               	movlw	high main@MoveType
  1755  0008E8  20F4               	addwfc	prodh,w,c
  1756  0008EA  6EDA               	movwf	fsr2h,c
  1757  0008EC  04DE               	decf	postinc2,w,c
  1758  0008EE  A4D8               	btfss	status,2,c
  1759  0008F0  D085               	goto	l3542
  1760                           
  1761                           ; BSR set to: 1
  1762                           ;main.c: 264: T0CONbits.TMR0ON=0;
  1763  0008F2  9ED5               	bcf	4053,7,c	;volatile
  1764                           
  1765                           ; BSR set to: 1
  1766                           ;main.c: 265: TMR0L = 0;
  1767  0008F4  0E00               	movlw	0
  1768  0008F6  6ED6               	movwf	4054,c	;volatile
  1769                           
  1770                           ;main.c: 266: TMR0H = 0;
  1771  0008F8  0E00               	movlw	0
  1772  0008FA  6ED7               	movwf	4055,c	;volatile
  1773                           
  1774                           ; BSR set to: 1
  1775                           ;main.c: 267: if (MoveTime[Move]>0) {
  1776  0008FC  0101               	movlb	1	; () banked
  1777  0008FE  51CF               	movf	main@Move& (0+255),w,b
  1778  000900  0D02               	mullw	2
  1779  000902  0E5A               	movlw	low main@MoveTime
  1780  000904  24F3               	addwf	prodl,w,c
  1781  000906  6ED9               	movwf	fsr2l,c
  1782  000908  0E01               	movlw	high main@MoveTime
  1783  00090A  20F4               	addwfc	prodh,w,c
  1784  00090C  6EDA               	movwf	fsr2h,c
  1785  00090E  0E01               	movlw	1
  1786  000910  BEDB               	btfsc	plusw2,7,c
  1787  000912  D03D               	goto	l424
  1788  000914  0E01               	movlw	1
  1789  000916  50DB               	movf	plusw2,w,c
  1790  000918  E103               	bnz	u2920
  1791  00091A  04DE               	decf	postinc2,w,c
  1792  00091C  A0D8               	btfss	status,0,c
  1793  00091E  D037               	goto	l424
  1794  000920                     u2920:
  1795                           
  1796                           ; BSR set to: 1
  1797                           ;main.c: 268: T0CONbits.TMR0ON=1;
  1798  000920  8ED5               	bsf	4053,7,c	;volatile
  1799                           
  1800                           ; BSR set to: 1
  1801                           ;main.c: 269: turnRight(&mL,&mR,40);
  1802  000922  0ED0               	movlw	low main@mL
  1803  000924  0100               	movlb	0	; () banked
  1804  000926  6F67               	movwf	turnRight@mL& (0+255),b
  1805  000928  0E01               	movlw	high main@mL
  1806  00092A  0100               	movlb	0	; () banked
  1807  00092C  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1808  00092E  0ED9               	movlw	low main@mR
  1809  000930  0100               	movlb	0	; () banked
  1810  000932  6F69               	movwf	turnRight@mR& (0+255),b
  1811  000934  0E01               	movlw	high main@mR
  1812  000936  0100               	movlb	0	; () banked
  1813  000938  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1814  00093A  0E28               	movlw	40
  1815  00093C  0100               	movlb	0	; () banked
  1816  00093E  6F6B               	movwf	turnRight@power& (0+255),b
  1817  000940  EC6B  F00D         	call	_turnRight	;wreg free
  1818  000944                     l3536:
  1819  000944  0101               	movlb	1	; () banked
  1820  000946  51CF               	movf	main@Move& (0+255),w,b
  1821  000948  0D02               	mullw	2
  1822  00094A  0E5A               	movlw	low main@MoveTime
  1823  00094C  24F3               	addwf	prodl,w,c
  1824  00094E  6ED9               	movwf	fsr2l,c
  1825  000950  0E01               	movlw	high main@MoveTime
  1826  000952  20F4               	addwfc	prodh,w,c
  1827  000954  6EDA               	movwf	fsr2h,c
  1828  000956  50D6               	movf	4054,w,c	;volatile
  1829  000958  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1830  00095C  0100               	movlb	0	; () banked
  1831  00095E  6BBD               	clrf	(??_main+3)& (0+255),b
  1832  000960  C0BC  F0BD         	movff	??_main+2,??_main+3
  1833  000964  0100               	movlb	0	; () banked
  1834  000966  6BBC               	clrf	(??_main+2)& (0+255),b
  1835  000968  0100               	movlb	0	; () banked
  1836  00096A  27BC               	addwf	(??_main+2)& (0+255),f,b
  1837  00096C  0E00               	movlw	0
  1838  00096E  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1839  000970  50DE               	movf	postinc2,w,c
  1840  000972  0100               	movlb	0	; () banked
  1841  000974  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1842  000976  0100               	movlb	0	; () banked
  1843  000978  51BD               	movf	(??_main+3)& (0+255),w,b
  1844  00097A  0A80               	xorlw	128
  1845  00097C  0100               	movlb	0	; () banked
  1846  00097E  6FBE               	movwf	(??_main+4)& (0+255),b
  1847  000980  50DE               	movf	postinc2,w,c
  1848  000982  0A80               	xorlw	128
  1849  000984  0100               	movlb	0	; () banked
  1850  000986  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1851  000988  B0D8               	btfsc	status,0,c
  1852  00098A  D092               	goto	l3550
  1853  00098C  D7DB               	goto	l3536
  1854  00098E                     l424:
  1855                           
  1856                           ; BSR set to: 1
  1857                           ;main.c: 273: T0CONbits.TMR0ON=1;
  1858  00098E  8ED5               	bsf	4053,7,c	;volatile
  1859                           
  1860                           ; BSR set to: 1
  1861                           ;main.c: 274: turnLeft(&mL,&mR,40);
  1862  000990  0ED0               	movlw	low main@mL
  1863  000992  0100               	movlb	0	; () banked
  1864  000994  6F67               	movwf	turnLeft@mL& (0+255),b
  1865  000996  0E01               	movlw	high main@mL
  1866  000998  0100               	movlb	0	; () banked
  1867  00099A  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1868  00099C  0ED9               	movlw	low main@mR
  1869  00099E  0100               	movlb	0	; () banked
  1870  0009A0  6F69               	movwf	turnLeft@mR& (0+255),b
  1871  0009A2  0E01               	movlw	high main@mR
  1872  0009A4  0100               	movlb	0	; () banked
  1873  0009A6  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1874  0009A8  0E28               	movlw	40
  1875  0009AA  0100               	movlb	0	; () banked
  1876  0009AC  6F6B               	movwf	turnLeft@power& (0+255),b
  1877  0009AE  EC8A  F00D         	call	_turnLeft	;wreg free
  1878  0009B2                     l3540:
  1879  0009B2  0101               	movlb	1	; () banked
  1880  0009B4  51CF               	movf	main@Move& (0+255),w,b
  1881  0009B6  0D02               	mullw	2
  1882  0009B8  0E5A               	movlw	low main@MoveTime
  1883  0009BA  24F3               	addwf	prodl,w,c
  1884  0009BC  6ED9               	movwf	fsr2l,c
  1885  0009BE  0E01               	movlw	high main@MoveTime
  1886  0009C0  20F4               	addwfc	prodh,w,c
  1887  0009C2  6EDA               	movwf	fsr2h,c
  1888  0009C4  50D6               	movf	4054,w,c	;volatile
  1889  0009C6  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1890  0009CA  0100               	movlb	0	; () banked
  1891  0009CC  6BBD               	clrf	(??_main+3)& (0+255),b
  1892  0009CE  C0BC  F0BD         	movff	??_main+2,??_main+3
  1893  0009D2  0100               	movlb	0	; () banked
  1894  0009D4  6BBC               	clrf	(??_main+2)& (0+255),b
  1895  0009D6  0100               	movlb	0	; () banked
  1896  0009D8  27BC               	addwf	(??_main+2)& (0+255),f,b
  1897  0009DA  0E00               	movlw	0
  1898  0009DC  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1899  0009DE  50DE               	movf	postinc2,w,c
  1900  0009E0  0100               	movlb	0	; () banked
  1901  0009E2  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1902  0009E4  0100               	movlb	0	; () banked
  1903  0009E6  51BD               	movf	(??_main+3)& (0+255),w,b
  1904  0009E8  0A80               	xorlw	128
  1905  0009EA  0100               	movlb	0	; () banked
  1906  0009EC  6FBE               	movwf	(??_main+4)& (0+255),b
  1907  0009EE  50DE               	movf	postinc2,w,c
  1908  0009F0  0A80               	xorlw	128
  1909  0009F2  0100               	movlb	0	; () banked
  1910  0009F4  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1911  0009F6  B0D8               	btfsc	status,0,c
  1912  0009F8  D05B               	goto	l3550
  1913  0009FA  D7DB               	goto	l3540
  1914  0009FC                     l3542:
  1915  0009FC  0101               	movlb	1	; () banked
  1916  0009FE  51CF               	movf	main@Move& (0+255),w,b
  1917  000A00  0D01               	mullw	1
  1918  000A02  0E28               	movlw	low main@MoveType
  1919  000A04  24F3               	addwf	prodl,w,c
  1920  000A06  6ED9               	movwf	fsr2l,c
  1921  000A08  0E01               	movlw	high main@MoveType
  1922  000A0A  20F4               	addwfc	prodh,w,c
  1923  000A0C  6EDA               	movwf	fsr2h,c
  1924  000A0E  0E02               	movlw	2
  1925  000A10  18DE               	xorwf	postinc2,w,c
  1926  000A12  A4D8               	btfss	status,2,c
  1927  000A14  D04D               	goto	l3550
  1928                           
  1929                           ; BSR set to: 1
  1930                           ;main.c: 279: if (MoveTime[Move]>0) {
  1931  000A16  0101               	movlb	1	; () banked
  1932  000A18  51CF               	movf	main@Move& (0+255),w,b
  1933  000A1A  0D02               	mullw	2
  1934  000A1C  0E5A               	movlw	low main@MoveTime
  1935  000A1E  24F3               	addwf	prodl,w,c
  1936  000A20  6ED9               	movwf	fsr2l,c
  1937  000A22  0E01               	movlw	high main@MoveTime
  1938  000A24  20F4               	addwfc	prodh,w,c
  1939  000A26  6EDA               	movwf	fsr2h,c
  1940  000A28  0E01               	movlw	1
  1941  000A2A  BEDB               	btfsc	plusw2,7,c
  1942  000A2C  D024               	goto	l3548
  1943  000A2E  0E01               	movlw	1
  1944  000A30  50DB               	movf	plusw2,w,c
  1945  000A32  E103               	bnz	u2960
  1946  000A34  04DE               	decf	postinc2,w,c
  1947  000A36  A0D8               	btfss	status,0,c
  1948  000A38  D01E               	goto	l3548
  1949  000A3A                     u2960:
  1950                           
  1951                           ; BSR set to: 1
  1952                           ;main.c: 280: turnRight(&mL,&mR,100);
  1953  000A3A  0ED0               	movlw	low main@mL
  1954  000A3C  0100               	movlb	0	; () banked
  1955  000A3E  6F67               	movwf	turnRight@mL& (0+255),b
  1956  000A40  0E01               	movlw	high main@mL
  1957  000A42  0100               	movlb	0	; () banked
  1958  000A44  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1959  000A46  0ED9               	movlw	low main@mR
  1960  000A48  0100               	movlb	0	; () banked
  1961  000A4A  6F69               	movwf	turnRight@mR& (0+255),b
  1962  000A4C  0E01               	movlw	high main@mR
  1963  000A4E  0100               	movlb	0	; () banked
  1964  000A50  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1965  000A52  0E64               	movlw	100
  1966  000A54  0100               	movlb	0	; () banked
  1967  000A56  6F6B               	movwf	turnRight@power& (0+255),b
  1968  000A58  EC6B  F00D         	call	_turnRight	;wreg free
  1969                           
  1970                           ;main.c: 281: delay_tenth_s(MoveTime[Move]);
  1971  000A5C  0101               	movlb	1	; () banked
  1972  000A5E  51CF               	movf	main@Move& (0+255),w,b
  1973  000A60  0D02               	mullw	2
  1974  000A62  0E5A               	movlw	low main@MoveTime
  1975  000A64  24F3               	addwf	prodl,w,c
  1976  000A66  6ED9               	movwf	fsr2l,c
  1977  000A68  0E01               	movlw	high main@MoveTime
  1978  000A6A  20F4               	addwfc	prodh,w,c
  1979  000A6C  6EDA               	movwf	fsr2h,c
  1980  000A6E  50DF               	movf	indf2,w,c
  1981  000A70  ECA9  F00D         	call	_delay_tenth_s
  1982                           
  1983                           ;main.c: 282: } else {
  1984  000A74  D01D               	goto	l3550
  1985  000A76                     l3548:
  1986                           
  1987                           ;main.c: 283: turnLeft(&mL,&mR,100);
  1988  000A76  0ED0               	movlw	low main@mL
  1989  000A78  0100               	movlb	0	; () banked
  1990  000A7A  6F67               	movwf	turnLeft@mL& (0+255),b
  1991  000A7C  0E01               	movlw	high main@mL
  1992  000A7E  0100               	movlb	0	; () banked
  1993  000A80  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1994  000A82  0ED9               	movlw	low main@mR
  1995  000A84  0100               	movlb	0	; () banked
  1996  000A86  6F69               	movwf	turnLeft@mR& (0+255),b
  1997  000A88  0E01               	movlw	high main@mR
  1998  000A8A  0100               	movlb	0	; () banked
  1999  000A8C  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2000  000A8E  0E64               	movlw	100
  2001  000A90  0100               	movlb	0	; () banked
  2002  000A92  6F6B               	movwf	turnLeft@power& (0+255),b
  2003  000A94  EC8A  F00D         	call	_turnLeft	;wreg free
  2004                           
  2005                           ;main.c: 284: delay_tenth_s(MoveTime[Move]);
  2006  000A98  0101               	movlb	1	; () banked
  2007  000A9A  51CF               	movf	main@Move& (0+255),w,b
  2008  000A9C  0D02               	mullw	2
  2009  000A9E  0E5A               	movlw	low main@MoveTime
  2010  000AA0  24F3               	addwf	prodl,w,c
  2011  000AA2  6ED9               	movwf	fsr2l,c
  2012  000AA4  0E01               	movlw	high main@MoveTime
  2013  000AA6  20F4               	addwfc	prodh,w,c
  2014  000AA8  6EDA               	movwf	fsr2h,c
  2015  000AAA  50DF               	movf	indf2,w,c
  2016  000AAC  ECA9  F00D         	call	_delay_tenth_s
  2017  000AB0                     l3550:
  2018  000AB0  0101               	movlb	1	; () banked
  2019  000AB2  07CF               	decf	main@Move& (0+255),f,b
  2020  000AB4  D6DA               	goto	l3518
  2021  000AB6                     l420:
  2022                           
  2023                           ;main.c: 285: }
  2024                           ;main.c: 286: }
  2025                           ;main.c: 287: }
  2026                           ;main.c: 288: mode=-1;
  2027  000AB6  683B               	setf	_mode,c	;volatile
  2028  000AB8                     l3554:
  2029  000AB8  503B               	movf	_mode,w,c	;volatile
  2030                           
  2031                           ; Switch size 1, requested type "space"
  2032                           ; Number of cases is 5, Range of values is 0 to 255
  2033                           ; switch strategies available:
  2034                           ; Name         Instructions Cycles
  2035                           ; simple_byte           16     9 (average)
  2036                           ;	Chosen strategy is simple_byte
  2037  000ABA  0A00               	xorlw	0	; case 0
  2038  000ABC  B4D8               	btfsc	status,2,c
  2039  000ABE  D51D               	goto	l3402
  2040  000AC0  0A01               	xorlw	1	; case 1
  2041  000AC2  B4D8               	btfsc	status,2,c
  2042  000AC4  D543               	goto	l3422
  2043  000AC6  0A03               	xorlw	3	; case 2
  2044  000AC8  B4D8               	btfsc	status,2,c
  2045  000ACA  D5E5               	goto	l3458
  2046  000ACC  0A01               	xorlw	1	; case 3
  2047  000ACE  B4D8               	btfsc	status,2,c
  2048  000AD0  D6BA               	goto	l3510
  2049  000AD2  0AFC               	xorlw	252	; case 255
  2050  000AD4  B4D8               	btfsc	status,2,c
  2051  000AD6  D4A5               	goto	l3364
  2052  000AD8  D7EF               	goto	l3554
  2053  000ADA                     __end_of_main:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           prodh	equ	0xFF4
  2057                           prodl	equ	0xFF3
  2058                           intcon	equ	0xFF2
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           indf1	equ	0xFE7
  2062                           plusw1	equ	0xFE3
  2063                           fsr1h	equ	0xFE2
  2064                           fsr1l	equ	0xFE1
  2065                           indf2	equ	0xFDF
  2066                           postinc2	equ	0xFDE
  2067                           postdec2	equ	0xFDD
  2068                           plusw2	equ	0xFDB
  2069                           fsr2h	equ	0xFDA
  2070                           fsr2l	equ	0xFD9
  2071                           status	equ	0xFD8
  2072                           
  2073 ;; *************** function _initTimer *****************
  2074 ;; Defined at:
  2075 ;;		line 8 in file "Movement.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;		None
  2078 ;; Auto vars:     Size  Location     Type
  2079 ;;		None
  2080 ;; Return value:  Size  Location     Type
  2081 ;;		None               void
  2082 ;; Registers used:
  2083 ;;		None
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2089 ;;      Params:         0       0       0       0
  2090 ;;      Locals:         0       0       0       0
  2091 ;;      Temps:          0       0       0       0
  2092 ;;      Totals:         0       0       0       0
  2093 ;;Total ram usage:        0 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:    3
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_main
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text1
  2104  001D32                     __ptext1:
  2105                           	opt stack 0
  2106  001D32                     _initTimer:
  2107                           	opt stack 27
  2108                           
  2109                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2110                           
  2111                           ;incstack = 0
  2112  001D32  9ED5               	bcf	4053,7,c	;volatile
  2113                           
  2114                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2115  001D34  9CD5               	bcf	4053,6,c	;volatile
  2116                           
  2117                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2118  001D36  9AD5               	bcf	4053,5,c	;volatile
  2119                           
  2120                           ;Movement.c: 13: T0CONbits.PSA=0;
  2121  001D38  96D5               	bcf	4053,3,c	;volatile
  2122                           
  2123                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2124  001D3A  80D5               	bsf	4053,0,c	;volatile
  2125  001D3C  82D5               	bsf	4053,1,c	;volatile
  2126  001D3E  84D5               	bsf	4053,2,c	;volatile
  2127                           
  2128                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2129  001D40  9AF2               	bcf	intcon,5,c	;volatile
  2130  001D42  0012               	return		;funcret
  2131  001D44                     __end_of_initTimer:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           prodh	equ	0xFF4
  2135                           prodl	equ	0xFF3
  2136                           intcon	equ	0xFF2
  2137                           postinc0	equ	0xFEE
  2138                           wreg	equ	0xFE8
  2139                           indf1	equ	0xFE7
  2140                           plusw1	equ	0xFE3
  2141                           fsr1h	equ	0xFE2
  2142                           fsr1l	equ	0xFE1
  2143                           indf2	equ	0xFDF
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           plusw2	equ	0xFDB
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _initRFID *****************
  2152 ;; Defined at:
  2153 ;;		line 8 in file "RFID_Reader.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, status,2, status,0
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2167 ;;      Params:         0       0       0       0
  2168 ;;      Locals:         0       0       0       0
  2169 ;;      Temps:          0       0       0       0
  2170 ;;      Totals:         0       0       0       0
  2171 ;;Total ram usage:        0 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    3
  2174 ;; This function calls:
  2175 ;;		Nothing
  2176 ;; This function is called by:
  2177 ;;		_main
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text2
  2182  001D16                     __ptext2:
  2183                           	opt stack 0
  2184  001D16                     _initRFID:
  2185                           	opt stack 27
  2186                           
  2187                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2188                           
  2189                           ;incstack = 0
  2190  001D16  5094               	movf	3988,w,c	;volatile
  2191  001D18  09C0               	iorlw	192
  2192  001D1A  6E94               	movwf	3988,c	;volatile
  2193                           
  2194                           ;RFID_Reader.c: 13: SPBRG=205;
  2195  001D1C  0ECD               	movlw	205
  2196  001D1E  6EAF               	movwf	4015,c	;volatile
  2197                           
  2198                           ;RFID_Reader.c: 14: SPBRGH=0;
  2199  001D20  0E00               	movlw	0
  2200  001D22  6EB0               	movwf	4016,c	;volatile
  2201                           
  2202                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2203  001D24  86AA               	bsf	4010,3,c	;volatile
  2204                           
  2205                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2206  001D26  84AC               	bsf	4012,2,c	;volatile
  2207                           
  2208                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2209  001D28  88AB               	bsf	4011,4,c	;volatile
  2210                           
  2211                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2212  001D2A  8EAB               	bsf	4011,7,c	;volatile
  2213                           
  2214                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2215  001D2C  98AC               	bcf	4012,4,c	;volatile
  2216                           
  2217                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2218  001D2E  9CAB               	bcf	4011,6,c	;volatile
  2219  001D30  0012               	return		;funcret
  2220  001D32                     __end_of_initRFID:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           prodh	equ	0xFF4
  2224                           prodl	equ	0xFF3
  2225                           intcon	equ	0xFF2
  2226                           postinc0	equ	0xFEE
  2227                           wreg	equ	0xFE8
  2228                           indf1	equ	0xFE7
  2229                           plusw1	equ	0xFE3
  2230                           fsr1h	equ	0xFE2
  2231                           fsr1l	equ	0xFE1
  2232                           indf2	equ	0xFDF
  2233                           postinc2	equ	0xFDE
  2234                           postdec2	equ	0xFDD
  2235                           plusw2	equ	0xFDB
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _initMotorPWM *****************
  2241 ;; Defined at:
  2242 ;;		line 4 in file "dc_motor.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;		None
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;		None               void
  2249 ;; Registers used:
  2250 ;;		wreg, status,2
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2256 ;;      Params:         0       0       0       0
  2257 ;;      Locals:         0       0       0       0
  2258 ;;      Temps:          0       0       0       0
  2259 ;;      Totals:         0       0       0       0
  2260 ;;Total ram usage:        0 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    3
  2263 ;; This function calls:
  2264 ;;		Nothing
  2265 ;; This function is called by:
  2266 ;;		_main
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text3
  2271  001BF8                     __ptext3:
  2272                           	opt stack 0
  2273  001BF8                     _initMotorPWM:
  2274                           	opt stack 27
  2275                           
  2276                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2277                           
  2278                           ;incstack = 0
  2279  001BF8  0E00               	movlw	0
  2280  001BFA  6E7F               	movwf	3967,c	;volatile
  2281                           
  2282                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2283  001BFC  0E80               	movlw	128
  2284  001BFE  6E7E               	movwf	3966,c	;volatile
  2285                           
  2286                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2287  001C00  0E6F               	movlw	111
  2288  001C02  6E6F               	movwf	3951,c	;volatile
  2289                           
  2290                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2291  001C04  0E00               	movlw	0
  2292  001C06  6E6E               	movwf	3950,c	;volatile
  2293                           
  2294                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2295  001C08  0EC7               	movlw	199
  2296  001C0A  6E7B               	movwf	3963,c	;volatile
  2297                           
  2298                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2299  001C0C  0E00               	movlw	0
  2300  001C0E  6E7A               	movwf	3962,c	;volatile
  2301                           
  2302                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2303  001C10  0E00               	movlw	0
  2304  001C12  6E79               	movwf	3961,c	;volatile
  2305                           
  2306                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2307  001C14  0E00               	movlw	0
  2308  001C16  6E78               	movwf	3960,c	;volatile
  2309                           
  2310                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2311  001C18  0E00               	movlw	0
  2312  001C1A  6E77               	movwf	3959,c	;volatile
  2313                           
  2314                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2315  001C1C  0E00               	movlw	0
  2316  001C1E  6E76               	movwf	3958,c	;volatile
  2317                           
  2318                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2319  001C20  9093               	bcf	3987,0,c	;volatile
  2320                           
  2321                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2322  001C22  9293               	bcf	3987,1,c	;volatile
  2323                           
  2324                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2325  001C24  9493               	bcf	3987,2,c	;volatile
  2326                           
  2327                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2328  001C26  9693               	bcf	3987,3,c	;volatile
  2329  001C28  0012               	return		;funcret
  2330  001C2A                     __end_of_initMotorPWM:
  2331                           	opt stack 0
  2332                           tblptru	equ	0xFF8
  2333                           prodh	equ	0xFF4
  2334                           prodl	equ	0xFF3
  2335                           intcon	equ	0xFF2
  2336                           postinc0	equ	0xFEE
  2337                           wreg	equ	0xFE8
  2338                           indf1	equ	0xFE7
  2339                           plusw1	equ	0xFE3
  2340                           fsr1h	equ	0xFE2
  2341                           fsr1l	equ	0xFE1
  2342                           indf2	equ	0xFDF
  2343                           postinc2	equ	0xFDE
  2344                           postdec2	equ	0xFDD
  2345                           plusw2	equ	0xFDB
  2346                           fsr2h	equ	0xFDA
  2347                           fsr2l	equ	0xFD9
  2348                           status	equ	0xFD8
  2349                           
  2350 ;; *************** function _initLCD *****************
  2351 ;; Defined at:
  2352 ;;		line 38 in file "LCD.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;		None
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;		None
  2357 ;; Return value:  Size  Location     Type
  2358 ;;		None               void
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2366 ;;      Params:         0       0       0       0
  2367 ;;      Locals:         0       0       0       0
  2368 ;;      Temps:          1       0       0       0
  2369 ;;      Totals:         1       0       0       0
  2370 ;;Total ram usage:        1 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    6
  2373 ;; This function calls:
  2374 ;;		_LCDout
  2375 ;;		_SendLCD
  2376 ;; This function is called by:
  2377 ;;		_main
  2378 ;; This function uses a non-reentrant model
  2379 ;;
  2380                           
  2381                           	psect	text4
  2382  00158C                     __ptext4:
  2383                           	opt stack 0
  2384  00158C                     _initLCD:
  2385                           	opt stack 24
  2386                           
  2387                           ;LCD.c: 44: TRISAbits.RA6=0;
  2388                           
  2389                           ;incstack = 0
  2390  00158C  9C92               	bcf	3986,6,c	;volatile
  2391                           
  2392                           ;LCD.c: 45: TRISCbits.RC0=0;
  2393  00158E  9094               	bcf	3988,0,c	;volatile
  2394                           
  2395                           ;LCD.c: 46: TRISCbits.RC1=0;
  2396  001590  9294               	bcf	3988,1,c	;volatile
  2397                           
  2398                           ;LCD.c: 47: TRISCbits.RC2=0;
  2399  001592  9494               	bcf	3988,2,c	;volatile
  2400                           
  2401                           ;LCD.c: 48: TRISDbits.RD0=0;
  2402  001594  9095               	bcf	3989,0,c	;volatile
  2403                           
  2404                           ;LCD.c: 49: TRISDbits.RD1=0;
  2405  001596  9295               	bcf	3989,1,c	;volatile
  2406                           
  2407                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2408  001598  0E27               	movlw	39
  2409  00159A  6E2A               	movwf	??_initLCD& (0+255),c
  2410  00159C  0EF5               	movlw	245
  2411  00159E                     u2997:
  2412  00159E  2EE8               	decfsz	wreg,f,c
  2413  0015A0  D7FE               	goto	u2997
  2414  0015A2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2415  0015A4  D7FC               	goto	u2997
  2416  0015A6  F000               	nop	
  2417                           
  2418                           ;LCD.c: 52: LCDout(0b0011);
  2419  0015A8  0E03               	movlw	3
  2420  0015AA  EC63  F00A         	call	_LCDout
  2421                           
  2422                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2423  0015AE  0E0D               	movlw	13
  2424  0015B0  6E2A               	movwf	??_initLCD& (0+255),c
  2425  0015B2  0EFC               	movlw	252
  2426  0015B4                     u3007:
  2427  0015B4  2EE8               	decfsz	wreg,f,c
  2428  0015B6  D7FE               	goto	u3007
  2429  0015B8  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2430  0015BA  D7FC               	goto	u3007
  2431                           
  2432                           ;LCD.c: 54: LCDout(0b0011);
  2433  0015BC  0E03               	movlw	3
  2434  0015BE  EC63  F00A         	call	_LCDout
  2435                           
  2436                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2437  0015C2  0E85               	movlw	133
  2438  0015C4                     u3017:
  2439  0015C4  2EE8               	decfsz	wreg,f,c
  2440  0015C6  D7FE               	goto	u3017
  2441  0015C8  F000               	nop	
  2442                           
  2443                           ;LCD.c: 56: LCDout(0b0011);
  2444  0015CA  0E03               	movlw	3
  2445  0015CC  EC63  F00A         	call	_LCDout
  2446                           
  2447                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2448  0015D0  0E21               	movlw	33
  2449  0015D2                     u3027:
  2450  0015D2  2EE8               	decfsz	wreg,f,c
  2451  0015D4  D7FE               	goto	u3027
  2452  0015D6  F000               	nop	
  2453                           
  2454                           ;LCD.c: 58: LCDout(0b0010);
  2455  0015D8  0E02               	movlw	2
  2456  0015DA  EC63  F00A         	call	_LCDout
  2457                           
  2458                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2459  0015DE  0E21               	movlw	33
  2460  0015E0                     u3037:
  2461  0015E0  2EE8               	decfsz	wreg,f,c
  2462  0015E2  D7FE               	goto	u3037
  2463  0015E4  F000               	nop	
  2464                           
  2465                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2466  0015E6  0E00               	movlw	0
  2467  0015E8  6E28               	movwf	SendLCD@type,c
  2468  0015EA  0E28               	movlw	40
  2469  0015EC  EC2D  F00E         	call	_SendLCD
  2470                           
  2471                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2472  0015F0  0E21               	movlw	33
  2473  0015F2                     u3047:
  2474  0015F2  2EE8               	decfsz	wreg,f,c
  2475  0015F4  D7FE               	goto	u3047
  2476  0015F6  F000               	nop	
  2477                           
  2478                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2479  0015F8  0E00               	movlw	0
  2480  0015FA  6E28               	movwf	SendLCD@type,c
  2481  0015FC  0E08               	movlw	8
  2482  0015FE  EC2D  F00E         	call	_SendLCD
  2483                           
  2484                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2485  001602  0E21               	movlw	33
  2486  001604                     u3057:
  2487  001604  2EE8               	decfsz	wreg,f,c
  2488  001606  D7FE               	goto	u3057
  2489  001608  F000               	nop	
  2490                           
  2491                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2492  00160A  0E00               	movlw	0
  2493  00160C  6E28               	movwf	SendLCD@type,c
  2494  00160E  0E01               	movlw	1
  2495  001610  EC2D  F00E         	call	_SendLCD
  2496                           
  2497                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2498  001614  0E0D               	movlw	13
  2499  001616  6E2A               	movwf	??_initLCD& (0+255),c
  2500  001618  0EFC               	movlw	252
  2501  00161A                     u3067:
  2502  00161A  2EE8               	decfsz	wreg,f,c
  2503  00161C  D7FE               	goto	u3067
  2504  00161E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2505  001620  D7FC               	goto	u3067
  2506                           
  2507                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2508  001622  0E00               	movlw	0
  2509  001624  6E28               	movwf	SendLCD@type,c
  2510  001626  0E06               	movlw	6
  2511  001628  EC2D  F00E         	call	_SendLCD
  2512                           
  2513                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2514  00162C  0E21               	movlw	33
  2515  00162E                     u3077:
  2516  00162E  2EE8               	decfsz	wreg,f,c
  2517  001630  D7FE               	goto	u3077
  2518  001632  F000               	nop	
  2519                           
  2520                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2521  001634  0E00               	movlw	0
  2522  001636  6E28               	movwf	SendLCD@type,c
  2523  001638  0E0C               	movlw	12
  2524  00163A  EC2D  F00E         	call	_SendLCD
  2525                           
  2526                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2527  00163E  0E21               	movlw	33
  2528  001640                     u3087:
  2529  001640  2EE8               	decfsz	wreg,f,c
  2530  001642  D7FE               	goto	u3087
  2531  001644  F000               	nop	
  2532  001646  0012               	return		;funcret
  2533  001648                     __end_of_initLCD:
  2534                           	opt stack 0
  2535                           tblptru	equ	0xFF8
  2536                           prodh	equ	0xFF4
  2537                           prodl	equ	0xFF3
  2538                           intcon	equ	0xFF2
  2539                           postinc0	equ	0xFEE
  2540                           wreg	equ	0xFE8
  2541                           indf1	equ	0xFE7
  2542                           plusw1	equ	0xFE3
  2543                           fsr1h	equ	0xFE2
  2544                           fsr1l	equ	0xFE1
  2545                           indf2	equ	0xFDF
  2546                           postinc2	equ	0xFDE
  2547                           postdec2	equ	0xFDD
  2548                           plusw2	equ	0xFDB
  2549                           fsr2h	equ	0xFDA
  2550                           fsr2l	equ	0xFD9
  2551                           status	equ	0xFD8
  2552                           
  2553 ;; *************** function _initIR *****************
  2554 ;; Defined at:
  2555 ;;		line 30 in file "IR_Reading.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;		None
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;		None
  2560 ;; Return value:  Size  Location     Type
  2561 ;;		None               void
  2562 ;; Registers used:
  2563 ;;		wreg, status,2
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/0
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2569 ;;      Params:         0       0       0       0
  2570 ;;      Locals:         0       0       0       0
  2571 ;;      Temps:          0       0       0       0
  2572 ;;      Totals:         0       0       0       0
  2573 ;;Total ram usage:        0 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    3
  2576 ;; This function calls:
  2577 ;;		Nothing
  2578 ;; This function is called by:
  2579 ;;		_main
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           	psect	text5
  2584  001CD6                     __ptext5:
  2585                           	opt stack 0
  2586  001CD6                     _initIR:
  2587                           	opt stack 27
  2588                           
  2589                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2590                           
  2591                           ;incstack = 0
  2592  001CD6  9489               	bcf	3977,2,c	;volatile
  2593                           
  2594                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2595  001CD8  9689               	bcf	3977,3,c	;volatile
  2596                           
  2597                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2598  001CDA  8492               	bsf	3986,2,c	;volatile
  2599                           
  2600                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2601  001CDC  8692               	bsf	3986,3,c	;volatile
  2602                           
  2603                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2604  001CDE  94B8               	bcf	4024,2,c	;volatile
  2605                           
  2606                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2607  001CE0  96B8               	bcf	4024,3,c	;volatile
  2608                           
  2609                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2610  001CE2  9CB8               	bcf	4024,6,c	;volatile
  2611                           
  2612                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2613  001CE4  9EB8               	bcf	4024,7,c	;volatile
  2614                           
  2615                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2616  001CE6  0E06               	movlw	6
  2617  001CE8  6E63               	movwf	3939,c	;volatile
  2618                           
  2619                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2620  001CEA  0E06               	movlw	6
  2621  001CEC  6E62               	movwf	3938,c	;volatile
  2622                           
  2623                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2624  001CEE  9096               	bcf	3990,0,c	;volatile
  2625                           
  2626                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2627  001CF0  9296               	bcf	3990,1,c	;volatile
  2628                           
  2629                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2630  001CF2  0E59               	movlw	89
  2631  001CF4  6EB7               	movwf	4023,c	;volatile
  2632  001CF6  0012               	return		;funcret
  2633  001CF8                     __end_of_initIR:
  2634                           	opt stack 0
  2635                           tblptru	equ	0xFF8
  2636                           prodh	equ	0xFF4
  2637                           prodl	equ	0xFF3
  2638                           intcon	equ	0xFF2
  2639                           postinc0	equ	0xFEE
  2640                           wreg	equ	0xFE8
  2641                           indf1	equ	0xFE7
  2642                           plusw1	equ	0xFE3
  2643                           fsr1h	equ	0xFE2
  2644                           fsr1l	equ	0xFE1
  2645                           indf2	equ	0xFDF
  2646                           postinc2	equ	0xFDE
  2647                           postdec2	equ	0xFDD
  2648                           plusw2	equ	0xFDB
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _fullSpeedBack *****************
  2654 ;; Defined at:
  2655 ;;		line 125 in file "dc_motor.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2658 ;;		 -> main@mL(9), 
  2659 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2660 ;;		 -> main@mR(9), 
  2661 ;;  power           1   11[BANK0 ] unsigned char 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;		None               void
  2666 ;; Registers used:
  2667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2673 ;;      Params:         0       5       0       0
  2674 ;;      Locals:         0       0       0       0
  2675 ;;      Temps:          0       0       0       0
  2676 ;;      Totals:         0       5       0       0
  2677 ;;Total ram usage:        5 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    6
  2680 ;; This function calls:
  2681 ;;		_fullSpeedAhead
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text6
  2688  001A98                     __ptext6:
  2689                           	opt stack 0
  2690  001A98                     _fullSpeedBack:
  2691                           	opt stack 24
  2692                           
  2693                           ;dc_motor.c: 128: mL->direction=0;
  2694                           
  2695                           ;incstack = 0
  2696  001A98  0100               	movlb	0	; () banked
  2697  001A9A  EE20 F001          	lfsr	2,1
  2698  001A9E  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2699  001AA0  26D9               	addwf	fsr2l,f,c
  2700  001AA2  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2701  001AA4  22DA               	addwfc	fsr2h,f,c
  2702  001AA6  0E00               	movlw	0
  2703  001AA8  6EDF               	movwf	indf2,c
  2704                           
  2705                           ;dc_motor.c: 129: mR->direction=0;
  2706  001AAA  0100               	movlb	0	; () banked
  2707  001AAC  EE20 F001          	lfsr	2,1
  2708  001AB0  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2709  001AB2  26D9               	addwf	fsr2l,f,c
  2710  001AB4  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2711  001AB6  22DA               	addwfc	fsr2h,f,c
  2712  001AB8  0E00               	movlw	0
  2713  001ABA  6EDF               	movwf	indf2,c
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2717  001ABC  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2718  001AC0  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2719  001AC4  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2720  001AC8  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2721  001ACC  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2722  001AD0  ECF5  F00B         	call	_fullSpeedAhead	;wreg free
  2723  001AD4  0012               	return		;funcret
  2724  001AD6                     __end_of_fullSpeedBack:
  2725                           	opt stack 0
  2726                           tblptru	equ	0xFF8
  2727                           prodh	equ	0xFF4
  2728                           prodl	equ	0xFF3
  2729                           intcon	equ	0xFF2
  2730                           postinc0	equ	0xFEE
  2731                           wreg	equ	0xFE8
  2732                           indf1	equ	0xFE7
  2733                           plusw1	equ	0xFE3
  2734                           fsr1h	equ	0xFE2
  2735                           fsr1l	equ	0xFE1
  2736                           indf2	equ	0xFDF
  2737                           postinc2	equ	0xFDE
  2738                           postdec2	equ	0xFDD
  2739                           plusw2	equ	0xFDB
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _enableSensor *****************
  2745 ;; Defined at:
  2746 ;;		line 106 in file "IR_Reading.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  sensor          1    wreg     unsigned char 
  2749 ;;  status          1   35[COMRAM] unsigned char 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  sensor          1   36[COMRAM] unsigned char 
  2752 ;; Return value:  Size  Location     Type
  2753 ;;		None               void
  2754 ;; Registers used:
  2755 ;;		wreg, status,2, status,0
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2761 ;;      Params:         1       0       0       0
  2762 ;;      Locals:         1       0       0       0
  2763 ;;      Temps:          0       0       0       0
  2764 ;;      Totals:         2       0       0       0
  2765 ;;Total ram usage:        2 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    3
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text7
  2776  001C8A                     __ptext7:
  2777                           	opt stack 0
  2778  001C8A                     _enableSensor:
  2779                           	opt stack 27
  2780                           
  2781                           ;incstack = 0
  2782                           ;enableSensor@sensor stored from wreg
  2783  001C8A  6E25               	movwf	enableSensor@sensor,c
  2784                           
  2785                           ;IR_Reading.c: 108: if (sensor==0){
  2786  001C8C  5025               	movf	enableSensor@sensor,w,c
  2787  001C8E  A4D8               	btfss	status,2,c
  2788  001C90  D006               	goto	l2402
  2789                           
  2790                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2791  001C92  B024               	btfsc	enableSensor@status,0,c
  2792  001C94  D002               	bra	u1815
  2793  001C96  908D               	bcf	3981,0,c	;volatile
  2794  001C98  D001               	bra	u1816
  2795  001C9A                     u1815:
  2796  001C9A  808D               	bsf	3981,0,c	;volatile
  2797  001C9C                     u1816:
  2798                           
  2799                           ;IR_Reading.c: 110: } else if (sensor==1){
  2800  001C9C  0012               	return	
  2801  001C9E                     l2402:
  2802  001C9E  0425               	decf	enableSensor@sensor,w,c
  2803  001CA0  A4D8               	btfss	status,2,c
  2804  001CA2  0012               	return	
  2805                           
  2806                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2807  001CA4  B024               	btfsc	enableSensor@status,0,c
  2808  001CA6  D002               	bra	u1835
  2809  001CA8  928D               	bcf	3981,1,c	;volatile
  2810  001CAA  D001               	bra	u1836
  2811  001CAC                     u1835:
  2812  001CAC  828D               	bsf	3981,1,c	;volatile
  2813  001CAE                     u1836:
  2814  001CAE  0012               	return	
  2815  001CB0                     __end_of_enableSensor:
  2816                           	opt stack 0
  2817                           tblptru	equ	0xFF8
  2818                           prodh	equ	0xFF4
  2819                           prodl	equ	0xFF3
  2820                           intcon	equ	0xFF2
  2821                           postinc0	equ	0xFEE
  2822                           wreg	equ	0xFE8
  2823                           indf1	equ	0xFE7
  2824                           plusw1	equ	0xFE3
  2825                           fsr1h	equ	0xFE2
  2826                           fsr1l	equ	0xFE1
  2827                           indf2	equ	0xFDF
  2828                           postinc2	equ	0xFDE
  2829                           postdec2	equ	0xFDD
  2830                           plusw2	equ	0xFDB
  2831                           fsr2h	equ	0xFDA
  2832                           fsr2l	equ	0xFD9
  2833                           status	equ	0xFD8
  2834                           
  2835 ;; *************** function _VerifySignal *****************
  2836 ;; Defined at:
  2837 ;;		line 58 in file "RFID_Reader.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2840 ;;		 -> ReceivedString(16), 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;  ptr             3    0        PTR unsigned char 
  2843 ;;  hexByte         2   43[COMRAM] unsigned int 
  2844 ;;  checksum        1   42[COMRAM] unsigned char 
  2845 ;;  i               1   41[COMRAM] unsigned char 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      unsigned char 
  2848 ;; Registers used:
  2849 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2855 ;;      Params:         2       0       0       0
  2856 ;;      Locals:         4       0       0       0
  2857 ;;      Temps:          4       0       0       0
  2858 ;;      Totals:        10       0       0       0
  2859 ;;Total ram usage:       10 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    3
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_main
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text8
  2870  0019AC                     __ptext8:
  2871                           	opt stack 0
  2872  0019AC                     _VerifySignal:
  2873                           	opt stack 27
  2874                           
  2875                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2876                           
  2877                           ;incstack = 0
  2878  0019AC  0E00               	movlw	0
  2879  0019AE  6E2B               	movwf	VerifySignal@checksum,c
  2880                           
  2881                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2882  0019B0  0E00               	movlw	0
  2883  0019B2  6E2D               	movwf	VerifySignal@hexByte+1,c
  2884  0019B4  0E00               	movlw	0
  2885  0019B6  6E2C               	movwf	VerifySignal@hexByte,c
  2886                           
  2887                           ;RFID_Reader.c: 61: unsigned char i=0;
  2888  0019B8  0E00               	movlw	0
  2889  0019BA  6E2A               	movwf	VerifySignal@i,c
  2890                           
  2891                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2892                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2893  0019BC  EE20 F004          	lfsr	2,4
  2894  0019C0  5024               	movf	VerifySignal@Signal,w,c
  2895  0019C2  26D9               	addwf	fsr2l,f,c
  2896  0019C4  5025               	movf	VerifySignal@Signal+1,w,c
  2897  0019C6  22DA               	addwfc	fsr2h,f,c
  2898  0019C8  50DF               	movf	indf2,w,c
  2899  0019CA  6E26               	movwf	??_VerifySignal& (0+255),c
  2900  0019CC  EE20 F003          	lfsr	2,3
  2901  0019D0  5024               	movf	VerifySignal@Signal,w,c
  2902  0019D2  26D9               	addwf	fsr2l,f,c
  2903  0019D4  5025               	movf	VerifySignal@Signal+1,w,c
  2904  0019D6  22DA               	addwfc	fsr2h,f,c
  2905  0019D8  50DF               	movf	indf2,w,c
  2906  0019DA  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2907  0019DC  5027               	movf	??_VerifySignal+1,w,c
  2908  0019DE  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2909  0019E0  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2910  0019E2  5026               	movf	??_VerifySignal,w,c
  2911  0019E4  2428               	addwf	??_VerifySignal+2,w,c
  2912  0019E6  6E2C               	movwf	VerifySignal@hexByte,c
  2913  0019E8  0E00               	movlw	0
  2914  0019EA  2029               	addwfc	??_VerifySignal+3,w,c
  2915  0019EC  6E2D               	movwf	VerifySignal@hexByte+1,c
  2916                           
  2917                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2918  0019EE  EE20 F002          	lfsr	2,2
  2919  0019F2  5024               	movf	VerifySignal@Signal,w,c
  2920  0019F4  26D9               	addwf	fsr2l,f,c
  2921  0019F6  5025               	movf	VerifySignal@Signal+1,w,c
  2922  0019F8  22DA               	addwfc	fsr2h,f,c
  2923  0019FA  50DF               	movf	indf2,w,c
  2924  0019FC  182C               	xorwf	VerifySignal@hexByte,w,c
  2925  0019FE  6E2B               	movwf	VerifySignal@checksum,c
  2926                           
  2927                           ;RFID_Reader.c: 75: return 1;
  2928  001A00  0E01               	movlw	1
  2929  001A02  0012               	return	
  2930  001A04                     __end_of_VerifySignal:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon	equ	0xFF2
  2936                           postinc0	equ	0xFEE
  2937                           wreg	equ	0xFE8
  2938                           indf1	equ	0xFE7
  2939                           plusw1	equ	0xFE3
  2940                           fsr1h	equ	0xFE2
  2941                           fsr1l	equ	0xFE1
  2942                           indf2	equ	0xFDF
  2943                           postinc2	equ	0xFDE
  2944                           postdec2	equ	0xFDD
  2945                           plusw2	equ	0xFDB
  2946                           fsr2h	equ	0xFDA
  2947                           fsr2l	equ	0xFD9
  2948                           status	equ	0xFD8
  2949                           
  2950 ;; *************** function _ScanWithRange *****************
  2951 ;; Defined at:
  2952 ;;		line 98 in file "Movement.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2955 ;;		 -> main@mL(9), 
  2956 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2957 ;;		 -> main@mR(9), 
  2958 ;;  loops           2   17[BANK0 ] int 
  2959 ;;  MoveTime        2   19[BANK0 ] PTR int 
  2960 ;;		 -> main@MoveTime(100), 
  2961 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  2962 ;;		 -> main@Move(1), 
  2963 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  2964 ;;		 -> main@MoveType(50), 
  2965 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  2966 ;;		 -> RFID_Read(1), 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  buf            40   32[BANK0 ] unsigned char [40]
  2969 ;;  SensorResult    4   84[BANK0 ] unsigned int [2]
  2970 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  2971 ;;  LeftFlag        2   81[BANK0 ] unsigned int 
  2972 ;;  DirectionFou    2   78[BANK0 ] const unsigned int 
  2973 ;;  i               2   76[BANK0 ] unsigned int 
  2974 ;;  n               2   72[BANK0 ] unsigned int 
  2975 ;;  TimeAboveThr    1   83[BANK0 ] unsigned char 
  2976 ;;  MotorPower      1   80[BANK0 ] const unsigned char 
  2977 ;;  MiniLeftFlic    1   75[BANK0 ] const unsigned char 
  2978 ;;  LeftFlick       1   74[BANK0 ] const unsigned char 
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      unsigned char 
  2981 ;; Registers used:
  2982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2988 ;;      Params:         0      14       0       0
  2989 ;;      Locals:         0      58       0       0
  2990 ;;      Temps:          0       5       0       0
  2991 ;;      Totals:         0      77       0       0
  2992 ;;Total ram usage:       77 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    7
  2995 ;; This function calls:
  2996 ;;		_LCD_String
  2997 ;;		_SendLCD
  2998 ;;		_SetLine
  2999 ;;		_delay_tenth_s
  3000 ;;		_grabLeftIR
  3001 ;;		_grabRightIR
  3002 ;;		_sprintf
  3003 ;;		_stop
  3004 ;;		_turnLeft
  3005 ;;		_turnRight
  3006 ;; This function is called by:
  3007 ;;		_main
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text9
  3012  000ADA                     __ptext9:
  3013                           	opt stack 0
  3014  000ADA                     _ScanWithRange:
  3015                           	opt stack 23
  3016                           
  3017                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3018                           
  3019                           ;incstack = 0
  3020  000ADA  C0F5  F0B4         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3021  000ADE  C0F6  F0B5         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3022  000AE2  C0F7  F0B6         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3023  000AE6  C0F8  F0B7         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3024                           
  3025                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3026  000AEA  0E00               	movlw	0
  3027  000AEC  0100               	movlb	0	; () banked
  3028  000AEE  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3029  000AF0  0E00               	movlw	0
  3030  000AF2  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3031                           
  3032                           ;Movement.c: 104: unsigned int RightFlag=0;
  3033  000AF4  0E00               	movlw	0
  3034  000AF6  0100               	movlb	0	; () banked
  3035  000AF8  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3036  000AFA  0E00               	movlw	0
  3037  000AFC  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3038                           
  3039                           ;Movement.c: 105: char buf[40];
  3040                           ;Movement.c: 106: unsigned int i=0;
  3041  000AFE  0E00               	movlw	0
  3042  000B00  0100               	movlb	0	; () banked
  3043  000B02  6FAD               	movwf	(ScanWithRange@i+1)& (0+255),b
  3044  000B04  0E00               	movlw	0
  3045  000B06  6FAC               	movwf	ScanWithRange@i& (0+255),b
  3046                           
  3047                           ;Movement.c: 107: unsigned int n=0;
  3048  000B08  0E00               	movlw	0
  3049  000B0A  0100               	movlb	0	; () banked
  3050  000B0C  6FA9               	movwf	(ScanWithRange@n+1)& (0+255),b
  3051  000B0E  0E00               	movlw	0
  3052  000B10  6FA8               	movwf	ScanWithRange@n& (0+255),b
  3053                           
  3054                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  3055  000B12  0E00               	movlw	0
  3056  000B14  0100               	movlb	0	; () banked
  3057  000B16  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3058                           
  3059                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3060  000B18  0E03               	movlw	3
  3061  000B1A  0100               	movlb	0	; () banked
  3062  000B1C  6FAF               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3063  000B1E  0EE8               	movlw	232
  3064  000B20  6FAE               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3065                           
  3066                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3067  000B22  0E28               	movlw	40
  3068  000B24  0100               	movlb	0	; () banked
  3069  000B26  6FB0               	movwf	ScanWithRange@MotorPower& (0+255),b
  3070                           
  3071                           ;Movement.c: 114: const unsigned char LeftFlick=2;
  3072  000B28  0E02               	movlw	2
  3073  000B2A  0100               	movlb	0	; () banked
  3074  000B2C  6FAA               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3075                           
  3076                           ;Movement.c: 116: const unsigned char MiniLeftFlick=1;
  3077  000B2E  0E01               	movlw	1
  3078  000B30  0100               	movlb	0	; () banked
  3079  000B32  6FAB               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;Movement.c: 121: *Move++;
  3083  000B34  0100               	movlb	0	; () banked
  3084  000B36  4B75               	infsnz	ScanWithRange@Move& (0+255),f,b
  3085  000B38  2B76               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;Movement.c: 122: (MoveType[*Move]) = 2;
  3089  000B3A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3090  000B3E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3091  000B42  50DF               	movf	indf2,w,c
  3092  000B44  0100               	movlb	0	; () banked
  3093  000B46  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3094  000B48  0100               	movlb	0	; () banked
  3095  000B4A  517B               	movf	??_ScanWithRange& (0+255),w,b
  3096  000B4C  0D01               	mullw	1
  3097  000B4E  50F3               	movf	prodl,w,c
  3098  000B50  0100               	movlb	0	; () banked
  3099  000B52  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3100  000B54  6ED9               	movwf	fsr2l,c
  3101  000B56  50F4               	movf	prodh,w,c
  3102  000B58  0100               	movlb	0	; () banked
  3103  000B5A  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3104  000B5C  6EDA               	movwf	fsr2h,c
  3105  000B5E  0E02               	movlw	2
  3106  000B60  6EDF               	movwf	indf2,c
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;Movement.c: 123: (MoveTime[*Move]) = -3;
  3110  000B62  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3111  000B66  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3112  000B6A  50DF               	movf	indf2,w,c
  3113  000B6C  0100               	movlb	0	; () banked
  3114  000B6E  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3115  000B70  0100               	movlb	0	; () banked
  3116  000B72  517B               	movf	??_ScanWithRange& (0+255),w,b
  3117  000B74  0D02               	mullw	2
  3118  000B76  50F3               	movf	prodl,w,c
  3119  000B78  0100               	movlb	0	; () banked
  3120  000B7A  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3121  000B7C  6ED9               	movwf	fsr2l,c
  3122  000B7E  50F4               	movf	prodh,w,c
  3123  000B80  0100               	movlb	0	; () banked
  3124  000B82  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3125  000B84  6EDA               	movwf	fsr2h,c
  3126  000B86  0EFD               	movlw	253
  3127  000B88  6EDE               	movwf	postinc2,c
  3128  000B8A  0EFF               	movlw	255
  3129  000B8C  6EDD               	movwf	postdec2,c
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;Movement.c: 125: turnLeft(mL,mR, 100);
  3133  000B8E  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3134  000B92  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3135  000B96  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3136  000B9A  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3137  000B9E  0E64               	movlw	100
  3138  000BA0  0100               	movlb	0	; () banked
  3139  000BA2  6F6B               	movwf	turnLeft@power& (0+255),b
  3140  000BA4  EC8A  F00D         	call	_turnLeft	;wreg free
  3141                           
  3142                           ;Movement.c: 126: delay_tenth_s(LeftFlick);
  3143  000BA8  0100               	movlb	0	; () banked
  3144  000BAA  51AA               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3145  000BAC  ECA9  F00D         	call	_delay_tenth_s
  3146                           
  3147                           ;Movement.c: 127: stop(mL,mR);
  3148  000BB0  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3149  000BB4  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3150  000BB8  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3151  000BBC  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3152  000BC0  EC24  F00B         	call	_stop	;wreg free
  3153                           
  3154                           ;Movement.c: 130: turnRight(mL,mR, MotorPower);
  3155  000BC4  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3156  000BC8  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3157  000BCC  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3158  000BD0  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3159  000BD4  C0B0  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3160  000BD8  EC6B  F00D         	call	_turnRight	;wreg free
  3161                           
  3162                           ;Movement.c: 133: TMR0L = 0;
  3163  000BDC  0E00               	movlw	0
  3164  000BDE  6ED6               	movwf	4054,c	;volatile
  3165                           
  3166                           ;Movement.c: 134: TMR0H = 0;
  3167  000BE0  0E00               	movlw	0
  3168  000BE2  6ED7               	movwf	4055,c	;volatile
  3169                           
  3170                           ;Movement.c: 135: T0CONbits.TMR0ON=1;
  3171  000BE4  8ED5               	bsf	4053,7,c	;volatile
  3172                           
  3173                           ;Movement.c: 137: for (i=1; i<=loops; i++) {
  3174  000BE6  0E00               	movlw	0
  3175  000BE8  0100               	movlb	0	; () banked
  3176  000BEA  6FAD               	movwf	(ScanWithRange@i+1)& (0+255),b
  3177  000BEC  0E01               	movlw	1
  3178  000BEE  6FAC               	movwf	ScanWithRange@i& (0+255),b
  3179  000BF0  D17A               	goto	l3294
  3180  000BF2                     l3208:
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;Movement.c: 140: SensorResult[0]=grabLeftIR();
  3184  000BF2  EC6E  F00C         	call	_grabLeftIR	;wreg free
  3185  000BF6  C024  F0B4         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3186  000BFA  C025  F0B5         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3187                           
  3188                           ;Movement.c: 141: SensorResult[1]=grabRightIR();
  3189  000BFE  EC35  F00C         	call	_grabRightIR	;wreg free
  3190  000C02  C024  F0B6         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3191  000C06  C025  F0B7         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3192                           
  3193                           ;Movement.c: 145: CAP1BUFH=0;
  3194  000C0A  0E00               	movlw	0
  3195  000C0C  6E69               	movwf	3945,c	;volatile
  3196                           
  3197                           ;Movement.c: 146: CAP1BUFL=0;
  3198  000C0E  0E00               	movlw	0
  3199  000C10  6E68               	movwf	3944,c	;volatile
  3200                           
  3201                           ;Movement.c: 147: CAP2BUFH=0;
  3202  000C12  0E00               	movlw	0
  3203  000C14  6E67               	movwf	3943,c	;volatile
  3204                           
  3205                           ;Movement.c: 148: CAP2BUFL=0;
  3206  000C16  0E00               	movlw	0
  3207  000C18  6E66               	movwf	3942,c	;volatile
  3208                           
  3209                           ;Movement.c: 152: SendLCD(0b00000001,0);
  3210  000C1A  0E00               	movlw	0
  3211  000C1C  6E28               	movwf	SendLCD@type,c
  3212  000C1E  0E01               	movlw	1
  3213  000C20  EC2D  F00E         	call	_SendLCD
  3214                           
  3215                           ;Movement.c: 153: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3216  000C24  0E21               	movlw	33
  3217  000C26                     u3097:
  3218  000C26  2EE8               	decfsz	wreg,f,c
  3219  000C28  D7FE               	goto	u3097
  3220  000C2A  F000               	nop	
  3221                           
  3222                           ;Movement.c: 154: SendLCD(0b00000010,0);
  3223  000C2C  0E00               	movlw	0
  3224  000C2E  6E28               	movwf	SendLCD@type,c
  3225  000C30  0E02               	movlw	2
  3226  000C32  EC2D  F00E         	call	_SendLCD
  3227                           
  3228                           ;Movement.c: 155: _delay((unsigned long)((2)*(8000000/4000.0)));
  3229  000C36  0E06               	movlw	6
  3230  000C38  0100               	movlb	0	; () banked
  3231  000C3A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3232  000C3C  0E30               	movlw	48
  3233  000C3E                     u3107:
  3234  000C3E  2EE8               	decfsz	wreg,f,c
  3235  000C40  D7FE               	goto	u3107
  3236  000C42  2F7B               	decfsz	??_ScanWithRange& (0+255),f,b
  3237  000C44  D7FC               	goto	u3107
  3238  000C46  D000               	nop2	
  3239                           
  3240                           ;Movement.c: 156: SetLine(1);
  3241  000C48  0E01               	movlw	1
  3242  000C4A  EC15  F00E         	call	_SetLine
  3243                           
  3244                           ;Movement.c: 157: LCD_String("     ScanIR");
  3245  000C4E  0E2D               	movlw	low STR_1
  3246  000C50  6E2A               	movwf	LCD_String@string,c
  3247  000C52  0E03               	movlw	high STR_1
  3248  000C54  6E2B               	movwf	LCD_String@string+1,c
  3249  000C56  ECA7  F00C         	call	_LCD_String	;wreg free
  3250                           
  3251                           ;Movement.c: 158: SetLine(2);
  3252  000C5A  0E02               	movlw	2
  3253  000C5C  EC15  F00E         	call	_SetLine
  3254                           
  3255                           ;Movement.c: 159: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3256  000C60  0E80               	movlw	low ScanWithRange@buf
  3257  000C62  6E30               	movwf	sprintf@sp,c
  3258  000C64  0E00               	movlw	high ScanWithRange@buf
  3259  000C66  6E31               	movwf	sprintf@sp+1,c
  3260  000C68  0E0C               	movlw	low (STR_6+1)
  3261  000C6A  6E32               	movwf	sprintf@f,c
  3262  000C6C  0E03               	movlw	high (STR_6+1)
  3263  000C6E  6E33               	movwf	sprintf@f+1,c
  3264  000C70  C0B4  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3265  000C74  C0B5  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3266  000C78  C0B6  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3267  000C7C  C0B7  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3268  000C80  ECC6  F007         	call	_sprintf	;wreg free
  3269                           
  3270                           ;Movement.c: 160: LCD_String(buf);
  3271  000C84  0E80               	movlw	low ScanWithRange@buf
  3272  000C86  6E2A               	movwf	LCD_String@string,c
  3273  000C88  0E00               	movlw	high ScanWithRange@buf
  3274  000C8A  6E2B               	movwf	LCD_String@string+1,c
  3275  000C8C  ECA7  F00C         	call	_LCD_String	;wreg free
  3276                           
  3277                           ;Movement.c: 162: if (SensorResult[1]>DirectionFoundThreshold) {
  3278  000C90  0100               	movlb	0	; () banked
  3279  000C92  51B6               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3280  000C94  0100               	movlb	0	; () banked
  3281  000C96  5DAE               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3282  000C98  0100               	movlb	0	; () banked
  3283  000C9A  51B7               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3284  000C9C  0100               	movlb	0	; () banked
  3285  000C9E  59AF               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3286  000CA0  B0D8               	btfsc	status,0,c
  3287  000CA2  D00E               	goto	l221
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;Movement.c: 163: RightFlag= (TMR0H<<8)+TMR0L;
  3291  000CA4  50D7               	movf	4055,w,c	;volatile
  3292  000CA6  0100               	movlb	0	; () banked
  3293  000CA8  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3294  000CAA  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3295  000CAC  50D6               	movf	4054,w,c	;volatile
  3296  000CAE  0100               	movlb	0	; () banked
  3297  000CB0  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3298  000CB2  0100               	movlb	0	; () banked
  3299  000CB4  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3300  000CB6  0E00               	movlw	0
  3301  000CB8  0100               	movlb	0	; () banked
  3302  000CBA  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3303  000CBC  0100               	movlb	0	; () banked
  3304  000CBE  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3305  000CC0                     l221:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;Movement.c: 164: }
  3309                           ;Movement.c: 166: if (SensorResult[0]>DirectionFoundThreshold) {
  3310  000CC0  0100               	movlb	0	; () banked
  3311  000CC2  51B4               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3312  000CC4  0100               	movlb	0	; () banked
  3313  000CC6  5DAE               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3314  000CC8  0100               	movlb	0	; () banked
  3315  000CCA  51B5               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3316  000CCC  0100               	movlb	0	; () banked
  3317  000CCE  59AF               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3318  000CD0  B0D8               	btfsc	status,0,c
  3319  000CD2  D00E               	goto	l222
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;Movement.c: 167: LeftFlag=(TMR0H<<8)+TMR0L;
  3323  000CD4  50D7               	movf	4055,w,c	;volatile
  3324  000CD6  0100               	movlb	0	; () banked
  3325  000CD8  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3326  000CDA  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3327  000CDC  50D6               	movf	4054,w,c	;volatile
  3328  000CDE  0100               	movlb	0	; () banked
  3329  000CE0  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3330  000CE2  0100               	movlb	0	; () banked
  3331  000CE4  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3332  000CE6  0E00               	movlw	0
  3333  000CE8  0100               	movlb	0	; () banked
  3334  000CEA  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3335  000CEC  0100               	movlb	0	; () banked
  3336  000CEE  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3337  000CF0                     l222:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;Movement.c: 168: }
  3341                           ;Movement.c: 175: if (LeftFlag>0) {
  3342  000CF0  0100               	movlb	0	; () banked
  3343  000CF2  51B1               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3344  000CF4  0100               	movlb	0	; () banked
  3345  000CF6  11B2               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3346  000CF8  B4D8               	btfsc	status,2,c
  3347  000CFA  D0E9               	goto	l3286
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;Movement.c: 178: if (RightFlag>0) {
  3351  000CFC  0100               	movlb	0	; () banked
  3352  000CFE  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3353  000D00  0100               	movlb	0	; () banked
  3354  000D02  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3355  000D04  B4D8               	btfsc	status,2,c
  3356  000D06  D08F               	goto	l3266
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;Movement.c: 179: TimeAboveThreshold = LeftFlag - RightFlag;
  3360  000D08  0100               	movlb	0	; () banked
  3361  000D0A  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3362  000D0C  0800               	sublw	0
  3363  000D0E  0100               	movlb	0	; () banked
  3364  000D10  25B1               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3365  000D12  0100               	movlb	0	; () banked
  3366  000D14  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;Movement.c: 180: TMR0L = 0;
  3370  000D16  0E00               	movlw	0
  3371  000D18  6ED6               	movwf	4054,c	;volatile
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;Movement.c: 181: TMR0H = 0;
  3375  000D1A  0E00               	movlw	0
  3376  000D1C  6ED7               	movwf	4055,c	;volatile
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;Movement.c: 182: stop(mL,mR);
  3380  000D1E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3381  000D22  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3382  000D26  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3383  000D2A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3384  000D2E  EC24  F00B         	call	_stop	;wreg free
  3385                           
  3386                           ;Movement.c: 183: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3387  000D32  D00C               	goto	l3250
  3388  000D34                     l3248:
  3389                           
  3390                           ;Movement.c: 184: turnLeft(mL,mR, MotorPower);
  3391  000D34  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3392  000D38  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3393  000D3C  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3394  000D40  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3395  000D44  C0B0  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3396  000D48  EC8A  F00D         	call	_turnLeft	;wreg free
  3397  000D4C                     l3250:
  3398  000D4C  0100               	movlb	0	; () banked
  3399  000D4E  90D8               	bcf	status,0,c
  3400  000D50  31B3               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3401  000D52  0100               	movlb	0	; () banked
  3402  000D54  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3403  000D56  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3404  000D58  50D6               	movf	4054,w,c	;volatile
  3405  000D5A  CFD7 F07D          	movff	4055,??_ScanWithRange+2	;volatile
  3406  000D5E  0100               	movlb	0	; () banked
  3407  000D60  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3408  000D62  C07D  F07E         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3409  000D66  0100               	movlb	0	; () banked
  3410  000D68  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3411  000D6A  0100               	movlb	0	; () banked
  3412  000D6C  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3413  000D6E  0E00               	movlw	0
  3414  000D70  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3415  000D72  0100               	movlb	0	; () banked
  3416  000D74  517B               	movf	??_ScanWithRange& (0+255),w,b
  3417  000D76  0100               	movlb	0	; () banked
  3418  000D78  5D7D               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3419  000D7A  0100               	movlb	0	; () banked
  3420  000D7C  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3421  000D7E  0A80               	xorlw	128
  3422  000D80  0100               	movlb	0	; () banked
  3423  000D82  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3424  000D84  0100               	movlb	0	; () banked
  3425  000D86  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3426  000D88  0A80               	xorlw	128
  3427  000D8A  0100               	movlb	0	; () banked
  3428  000D8C  597F               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3429  000D8E  A0D8               	btfss	status,0,c
  3430  000D90  D7D1               	goto	l3248
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;Movement.c: 185: }
  3434                           ;Movement.c: 186: T0CONbits.TMR0ON=0;
  3435  000D92  9ED5               	bcf	4053,7,c	;volatile
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;Movement.c: 187: stop(mL,mR);
  3439  000D94  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3440  000D98  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3441  000D9C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3442  000DA0  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3443  000DA4  EC24  F00B         	call	_stop	;wreg free
  3444                           
  3445                           ;Movement.c: 189: *Move++;
  3446  000DA8  0100               	movlb	0	; () banked
  3447  000DAA  4B75               	infsnz	ScanWithRange@Move& (0+255),f,b
  3448  000DAC  2B76               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;Movement.c: 190: (MoveType[*Move]) = 1;
  3452  000DAE  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3453  000DB2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3454  000DB6  50DF               	movf	indf2,w,c
  3455  000DB8  0100               	movlb	0	; () banked
  3456  000DBA  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3457  000DBC  0100               	movlb	0	; () banked
  3458  000DBE  517B               	movf	??_ScanWithRange& (0+255),w,b
  3459  000DC0  0D01               	mullw	1
  3460  000DC2  50F3               	movf	prodl,w,c
  3461  000DC4  0100               	movlb	0	; () banked
  3462  000DC6  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3463  000DC8  6ED9               	movwf	fsr2l,c
  3464  000DCA  50F4               	movf	prodh,w,c
  3465  000DCC  0100               	movlb	0	; () banked
  3466  000DCE  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3467  000DD0  6EDA               	movwf	fsr2h,c
  3468  000DD2  0E01               	movlw	1
  3469  000DD4  6EDF               	movwf	indf2,c
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;Movement.c: 191: (MoveTime[*Move]) = RightFlag + (TimeAboveThreshold>>1);
  3473  000DD6  C0B3  F07B         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3474  000DDA  0100               	movlb	0	; () banked
  3475  000DDC  90D8               	bcf	status,0,c
  3476  000DDE  337B               	rrcf	??_ScanWithRange& (0+255),f,b
  3477  000DE0  0100               	movlb	0	; () banked
  3478  000DE2  517B               	movf	??_ScanWithRange& (0+255),w,b
  3479  000DE4  0100               	movlb	0	; () banked
  3480  000DE6  25B8               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3481  000DE8  0100               	movlb	0	; () banked
  3482  000DEA  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3483  000DEC  0E00               	movlw	0
  3484  000DEE  0100               	movlb	0	; () banked
  3485  000DF0  21B9               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3486  000DF2  0100               	movlb	0	; () banked
  3487  000DF4  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3488  000DF6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3489  000DFA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3490  000DFE  50DF               	movf	indf2,w,c
  3491  000E00  0100               	movlb	0	; () banked
  3492  000E02  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3493  000E04  0100               	movlb	0	; () banked
  3494  000E06  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3495  000E08  0D02               	mullw	2
  3496  000E0A  50F3               	movf	prodl,w,c
  3497  000E0C  0100               	movlb	0	; () banked
  3498  000E0E  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3499  000E10  6ED9               	movwf	fsr2l,c
  3500  000E12  50F4               	movf	prodh,w,c
  3501  000E14  0100               	movlb	0	; () banked
  3502  000E16  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3503  000E18  6EDA               	movwf	fsr2h,c
  3504  000E1A  C07C  FFDE         	movff	??_ScanWithRange+1,postinc2
  3505  000E1E  C07D  FFDD         	movff	??_ScanWithRange+2,postdec2
  3506  000E22                     l3260:
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;Movement.c: 193: return 2;
  3510  000E22  0E02               	movlw	2
  3511                           
  3512                           ; BSR set to: 0
  3513  000E24  0012               	return	
  3514  000E26                     l3266:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;Movement.c: 196: *Move++;
  3518  000E26  0100               	movlb	0	; () banked
  3519  000E28  4B75               	infsnz	ScanWithRange@Move& (0+255),f,b
  3520  000E2A  2B76               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;Movement.c: 197: (MoveType[*Move]) = 2;
  3524  000E2C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3525  000E30  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3526  000E34  50DF               	movf	indf2,w,c
  3527  000E36  0100               	movlb	0	; () banked
  3528  000E38  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3529  000E3A  0100               	movlb	0	; () banked
  3530  000E3C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3531  000E3E  0D01               	mullw	1
  3532  000E40  50F3               	movf	prodl,w,c
  3533  000E42  0100               	movlb	0	; () banked
  3534  000E44  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3535  000E46  6ED9               	movwf	fsr2l,c
  3536  000E48  50F4               	movf	prodh,w,c
  3537  000E4A  0100               	movlb	0	; () banked
  3538  000E4C  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3539  000E4E  6EDA               	movwf	fsr2h,c
  3540  000E50  0E02               	movlw	2
  3541  000E52  6EDF               	movwf	indf2,c
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;Movement.c: 198: (MoveTime[*Move]) = 1;
  3545  000E54  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3546  000E58  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3547  000E5C  50DF               	movf	indf2,w,c
  3548  000E5E  0100               	movlb	0	; () banked
  3549  000E60  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3550  000E62  0100               	movlb	0	; () banked
  3551  000E64  517B               	movf	??_ScanWithRange& (0+255),w,b
  3552  000E66  0D02               	mullw	2
  3553  000E68  50F3               	movf	prodl,w,c
  3554  000E6A  0100               	movlb	0	; () banked
  3555  000E6C  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3556  000E6E  6ED9               	movwf	fsr2l,c
  3557  000E70  50F4               	movf	prodh,w,c
  3558  000E72  0100               	movlb	0	; () banked
  3559  000E74  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3560  000E76  6EDA               	movwf	fsr2h,c
  3561  000E78  0E01               	movlw	1
  3562  000E7A  6EDE               	movwf	postinc2,c
  3563  000E7C  0E00               	movlw	0
  3564  000E7E  6EDD               	movwf	postdec2,c
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;Movement.c: 199: stop(mL,mR);
  3568  000E80  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3569  000E84  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3570  000E88  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3571  000E8C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3572  000E90  EC24  F00B         	call	_stop	;wreg free
  3573                           
  3574                           ;Movement.c: 200: turnLeft(mL,mR,100);
  3575  000E94  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3576  000E98  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3577  000E9C  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3578  000EA0  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3579  000EA4  0E64               	movlw	100
  3580  000EA6  0100               	movlb	0	; () banked
  3581  000EA8  6F6B               	movwf	turnLeft@power& (0+255),b
  3582  000EAA  EC8A  F00D         	call	_turnLeft	;wreg free
  3583                           
  3584                           ;Movement.c: 201: delay_tenth_s(MiniLeftFlick);
  3585  000EAE  0100               	movlb	0	; () banked
  3586  000EB0  51AB               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3587  000EB2  ECA9  F00D         	call	_delay_tenth_s
  3588                           
  3589                           ;Movement.c: 202: T0CONbits.TMR0ON=0;
  3590  000EB6  9ED5               	bcf	4053,7,c	;volatile
  3591                           
  3592                           ;Movement.c: 203: stop(mL,mR);
  3593  000EB8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3594  000EBC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3595  000EC0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3596  000EC4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3597  000EC8  EC24  F00B         	call	_stop	;wreg free
  3598  000ECC  D7AA               	goto	l3260
  3599  000ECE                     l3286:
  3600                           
  3601                           ;Movement.c: 205: }
  3602                           ;Movement.c: 206: }
  3603                           ;Movement.c: 208: if (*RFID_Read==1) {
  3604  000ECE  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3605  000ED2  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3606  000ED6  04DE               	decf	postinc2,w,c
  3607  000ED8  A4D8               	btfss	status,2,c
  3608  000EDA  D002               	goto	l3292
  3609                           
  3610                           ;Movement.c: 209: return 2;
  3611  000EDC  0E02               	movlw	2
  3612  000EDE  0012               	return	
  3613  000EE0                     l3292:
  3614  000EE0  0100               	movlb	0	; () banked
  3615  000EE2  4BAC               	infsnz	ScanWithRange@i& (0+255),f,b
  3616  000EE4  2BAD               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3617  000EE6                     l3294:
  3618                           
  3619                           ; BSR set to: 0
  3620  000EE6  0100               	movlb	0	; () banked
  3621  000EE8  51AC               	movf	ScanWithRange@i& (0+255),w,b
  3622  000EEA  0100               	movlb	0	; () banked
  3623  000EEC  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3624  000EEE  0100               	movlb	0	; () banked
  3625  000EF0  51AD               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3626  000EF2  0100               	movlb	0	; () banked
  3627  000EF4  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3628  000EF6  B0D8               	btfsc	status,0,c
  3629  000EF8  D67C               	goto	l3208
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;Movement.c: 210: }
  3633                           ;Movement.c: 211: }
  3634                           ;Movement.c: 214: *Move++;
  3635                           
  3636                           ; BSR set to: 0
  3637  000EFA  0100               	movlb	0	; () banked
  3638  000EFC  4B75               	infsnz	ScanWithRange@Move& (0+255),f,b
  3639  000EFE  2B76               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;Movement.c: 215: (MoveType[*Move]) = 2;
  3643  000F00  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3644  000F04  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3645  000F08  50DF               	movf	indf2,w,c
  3646  000F0A  0100               	movlb	0	; () banked
  3647  000F0C  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3648  000F0E  0100               	movlb	0	; () banked
  3649  000F10  517B               	movf	??_ScanWithRange& (0+255),w,b
  3650  000F12  0D01               	mullw	1
  3651  000F14  50F3               	movf	prodl,w,c
  3652  000F16  0100               	movlb	0	; () banked
  3653  000F18  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3654  000F1A  6ED9               	movwf	fsr2l,c
  3655  000F1C  50F4               	movf	prodh,w,c
  3656  000F1E  0100               	movlb	0	; () banked
  3657  000F20  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3658  000F22  6EDA               	movwf	fsr2h,c
  3659  000F24  0E02               	movlw	2
  3660  000F26  6EDF               	movwf	indf2,c
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;Movement.c: 216: (MoveTime[*Move]) = -2;
  3664  000F28  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3665  000F2C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3666  000F30  50DF               	movf	indf2,w,c
  3667  000F32  0100               	movlb	0	; () banked
  3668  000F34  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3669  000F36  0100               	movlb	0	; () banked
  3670  000F38  517B               	movf	??_ScanWithRange& (0+255),w,b
  3671  000F3A  0D02               	mullw	2
  3672  000F3C  50F3               	movf	prodl,w,c
  3673  000F3E  0100               	movlb	0	; () banked
  3674  000F40  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3675  000F42  6ED9               	movwf	fsr2l,c
  3676  000F44  50F4               	movf	prodh,w,c
  3677  000F46  0100               	movlb	0	; () banked
  3678  000F48  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3679  000F4A  6EDA               	movwf	fsr2h,c
  3680  000F4C  0EFE               	movlw	254
  3681  000F4E  6EDE               	movwf	postinc2,c
  3682  000F50  0EFF               	movlw	255
  3683  000F52  6EDD               	movwf	postdec2,c
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;Movement.c: 217: turnRight(mL,mR, 100);
  3687  000F54  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3688  000F58  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3689  000F5C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3690  000F60  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3691  000F64  0E64               	movlw	100
  3692  000F66  0100               	movlb	0	; () banked
  3693  000F68  6F6B               	movwf	turnRight@power& (0+255),b
  3694  000F6A  EC6B  F00D         	call	_turnRight	;wreg free
  3695                           
  3696                           ;Movement.c: 218: delay_tenth_s(2);
  3697  000F6E  0E02               	movlw	2
  3698  000F70  ECA9  F00D         	call	_delay_tenth_s
  3699                           
  3700                           ;Movement.c: 219: stop(mL,mR);
  3701  000F74  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3702  000F78  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3703  000F7C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3704  000F80  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3705  000F84  EC24  F00B         	call	_stop	;wreg free
  3706                           
  3707                           ;Movement.c: 220: return -1;
  3708  000F88  0EFF               	movlw	255
  3709  000F8A  0012               	return	
  3710  000F8C                     __end_of_ScanWithRange:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           postinc0	equ	0xFEE
  3717                           wreg	equ	0xFE8
  3718                           indf1	equ	0xFE7
  3719                           plusw1	equ	0xFE3
  3720                           fsr1h	equ	0xFE2
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           plusw2	equ	0xFDB
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _turnRight *****************
  3731 ;; Defined at:
  3732 ;;		line 98 in file "dc_motor.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3735 ;;		 -> main@mL(9), 
  3736 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3737 ;;		 -> main@mR(9), 
  3738 ;;  power           1   11[BANK0 ] unsigned char 
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;		None               void
  3743 ;; Registers used:
  3744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3750 ;;      Params:         0       5       0       0
  3751 ;;      Locals:         0       0       0       0
  3752 ;;      Temps:          0       0       0       0
  3753 ;;      Totals:         0       5       0       0
  3754 ;;Total ram usage:        5 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:    6
  3757 ;; This function calls:
  3758 ;;		_fullSpeedAhead
  3759 ;; This function is called by:
  3760 ;;		_ScanWithRange
  3761 ;;		_main
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text10
  3766  001AD6                     __ptext10:
  3767                           	opt stack 0
  3768  001AD6                     _turnRight:
  3769                           	opt stack 24
  3770                           
  3771                           ;dc_motor.c: 102: mL->direction=0;
  3772                           
  3773                           ;incstack = 0
  3774  001AD6  0100               	movlb	0	; () banked
  3775  001AD8  EE20 F001          	lfsr	2,1
  3776  001ADC  5167               	movf	turnRight@mL& (0+255),w,b
  3777  001ADE  26D9               	addwf	fsr2l,f,c
  3778  001AE0  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3779  001AE2  22DA               	addwfc	fsr2h,f,c
  3780  001AE4  0E00               	movlw	0
  3781  001AE6  6EDF               	movwf	indf2,c
  3782                           
  3783                           ;dc_motor.c: 103: mR->direction=1;
  3784  001AE8  0100               	movlb	0	; () banked
  3785  001AEA  EE20 F001          	lfsr	2,1
  3786  001AEE  5169               	movf	turnRight@mR& (0+255),w,b
  3787  001AF0  26D9               	addwf	fsr2l,f,c
  3788  001AF2  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3789  001AF4  22DA               	addwfc	fsr2h,f,c
  3790  001AF6  0E01               	movlw	1
  3791  001AF8  6EDF               	movwf	indf2,c
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3795  001AFA  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3796  001AFE  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3797  001B02  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3798  001B06  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3799  001B0A  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3800  001B0E  ECF5  F00B         	call	_fullSpeedAhead	;wreg free
  3801  001B12  0012               	return		;funcret
  3802  001B14                     __end_of_turnRight:
  3803                           	opt stack 0
  3804                           tblptru	equ	0xFF8
  3805                           prodh	equ	0xFF4
  3806                           prodl	equ	0xFF3
  3807                           intcon	equ	0xFF2
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           indf1	equ	0xFE7
  3811                           plusw1	equ	0xFE3
  3812                           fsr1h	equ	0xFE2
  3813                           fsr1l	equ	0xFE1
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           plusw2	equ	0xFDB
  3818                           fsr2h	equ	0xFDA
  3819                           fsr2l	equ	0xFD9
  3820                           status	equ	0xFD8
  3821                           
  3822 ;; *************** function _turnLeft *****************
  3823 ;; Defined at:
  3824 ;;		line 87 in file "dc_motor.c"
  3825 ;; Parameters:    Size  Location     Type
  3826 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3827 ;;		 -> main@mL(9), 
  3828 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3829 ;;		 -> main@mR(9), 
  3830 ;;  power           1   11[BANK0 ] unsigned char 
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;		None               void
  3835 ;; Registers used:
  3836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3842 ;;      Params:         0       5       0       0
  3843 ;;      Locals:         0       0       0       0
  3844 ;;      Temps:          0       0       0       0
  3845 ;;      Totals:         0       5       0       0
  3846 ;;Total ram usage:        5 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    6
  3849 ;; This function calls:
  3850 ;;		_fullSpeedAhead
  3851 ;; This function is called by:
  3852 ;;		_ScanWithRange
  3853 ;;		_main
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text11
  3858  001B14                     __ptext11:
  3859                           	opt stack 0
  3860  001B14                     _turnLeft:
  3861                           	opt stack 24
  3862                           
  3863                           ;dc_motor.c: 91: mL->direction=1;
  3864                           
  3865                           ;incstack = 0
  3866  001B14  0100               	movlb	0	; () banked
  3867  001B16  EE20 F001          	lfsr	2,1
  3868  001B1A  5167               	movf	turnLeft@mL& (0+255),w,b
  3869  001B1C  26D9               	addwf	fsr2l,f,c
  3870  001B1E  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3871  001B20  22DA               	addwfc	fsr2h,f,c
  3872  001B22  0E01               	movlw	1
  3873  001B24  6EDF               	movwf	indf2,c
  3874                           
  3875                           ;dc_motor.c: 92: mR->direction=0;
  3876  001B26  0100               	movlb	0	; () banked
  3877  001B28  EE20 F001          	lfsr	2,1
  3878  001B2C  5169               	movf	turnLeft@mR& (0+255),w,b
  3879  001B2E  26D9               	addwf	fsr2l,f,c
  3880  001B30  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3881  001B32  22DA               	addwfc	fsr2h,f,c
  3882  001B34  0E00               	movlw	0
  3883  001B36  6EDF               	movwf	indf2,c
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3887  001B38  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3888  001B3C  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3889  001B40  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3890  001B44  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3891  001B48  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3892  001B4C  ECF5  F00B         	call	_fullSpeedAhead	;wreg free
  3893  001B50  0012               	return		;funcret
  3894  001B52                     __end_of_turnLeft:
  3895                           	opt stack 0
  3896                           tblptru	equ	0xFF8
  3897                           prodh	equ	0xFF4
  3898                           prodl	equ	0xFF3
  3899                           intcon	equ	0xFF2
  3900                           postinc0	equ	0xFEE
  3901                           wreg	equ	0xFE8
  3902                           indf1	equ	0xFE7
  3903                           plusw1	equ	0xFE3
  3904                           fsr1h	equ	0xFE2
  3905                           fsr1l	equ	0xFE1
  3906                           indf2	equ	0xFDF
  3907                           postinc2	equ	0xFDE
  3908                           postdec2	equ	0xFDD
  3909                           plusw2	equ	0xFDB
  3910                           fsr2h	equ	0xFDA
  3911                           fsr2l	equ	0xFD9
  3912                           status	equ	0xFD8
  3913                           
  3914 ;; *************** function _fullSpeedAhead *****************
  3915 ;; Defined at:
  3916 ;;		line 108 in file "dc_motor.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3919 ;;		 -> main@mL(9), 
  3920 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3921 ;;		 -> main@mR(9), 
  3922 ;;  power           1    6[BANK0 ] unsigned char 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;		None
  3925 ;; Return value:  Size  Location     Type
  3926 ;;		None               void
  3927 ;; Registers used:
  3928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3929 ;; Tracked objects:
  3930 ;;		On entry : 0/0
  3931 ;;		On exit  : 0/0
  3932 ;;		Unchanged: 0/0
  3933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3934 ;;      Params:         0       5       0       0
  3935 ;;      Locals:         0       0       0       0
  3936 ;;      Temps:          1       0       0       0
  3937 ;;      Totals:         1       5       0       0
  3938 ;;Total ram usage:        6 bytes
  3939 ;; Hardware stack levels used:    1
  3940 ;; Hardware stack levels required when called:    5
  3941 ;; This function calls:
  3942 ;;		_setMotorPWM
  3943 ;; This function is called by:
  3944 ;;		_turnLeft
  3945 ;;		_turnRight
  3946 ;;		_fullSpeedBack
  3947 ;;		_main
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           	psect	text12
  3952  0017EA                     __ptext12:
  3953                           	opt stack 0
  3954  0017EA                     _fullSpeedAhead:
  3955                           	opt stack 24
  3956                           
  3957                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3958                           
  3959                           ;incstack = 0
  3960  0017EA  D02C               	goto	l65
  3961  0017EC                     l2976:
  3962                           
  3963                           ;dc_motor.c: 112: if(mL->power<power){
  3964  0017EC  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3965  0017F0  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3966  0017F4  0100               	movlb	0	; () banked
  3967  0017F6  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3968  0017F8  5CDE               	subwf	postinc2,w,c
  3969  0017FA  B0D8               	btfsc	status,0,c
  3970  0017FC  D005               	goto	l2980
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;dc_motor.c: 113: mL->power++;
  3974  0017FE  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3975  001802  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3976  001806  2ADF               	incf	indf2,f,c
  3977  001808                     l2980:
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;dc_motor.c: 114: }
  3981                           ;dc_motor.c: 115: if(mR->power<power){
  3982  001808  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3983  00180C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3984  001810  0100               	movlb	0	; () banked
  3985  001812  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3986  001814  5CDE               	subwf	postinc2,w,c
  3987  001816  B0D8               	btfsc	status,0,c
  3988  001818  D005               	goto	l2984
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;dc_motor.c: 116: mR->power++;
  3992  00181A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3993  00181E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3994  001822  2ADF               	incf	indf2,f,c
  3995  001824                     l2984:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;dc_motor.c: 117: }
  3999                           ;dc_motor.c: 118: setMotorPWM(mL);
  4000  001824  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4001  001828  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4002  00182C  EC49  F009         	call	_setMotorPWM	;wreg free
  4003                           
  4004                           ;dc_motor.c: 119: setMotorPWM(mR);
  4005  001830  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4006  001834  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4007  001838  EC49  F009         	call	_setMotorPWM	;wreg free
  4008                           
  4009                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4010  00183C  0E21               	movlw	33
  4011  00183E                     u3117:
  4012  00183E  2EE8               	decfsz	wreg,f,c
  4013  001840  D7FE               	goto	u3117
  4014  001842  F000               	nop	
  4015  001844                     l65:
  4016  001844  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4017  001848  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4018  00184C  0100               	movlb	0	; () banked
  4019  00184E  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4020  001850  5CDE               	subwf	postinc2,w,c
  4021  001852  A0D8               	btfss	status,0,c
  4022  001854  D7CB               	goto	l2976
  4023                           
  4024                           ; BSR set to: 0
  4025  001856  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4026  00185A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4027  00185E  0100               	movlb	0	; () banked
  4028  001860  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4029  001862  5CDE               	subwf	postinc2,w,c
  4030  001864  B0D8               	btfsc	status,0,c
  4031  001866  0012               	return	
  4032  001868  D7C1               	goto	l2976
  4033  00186A                     __end_of_fullSpeedAhead:
  4034                           	opt stack 0
  4035                           tblptru	equ	0xFF8
  4036                           prodh	equ	0xFF4
  4037                           prodl	equ	0xFF3
  4038                           intcon	equ	0xFF2
  4039                           postinc0	equ	0xFEE
  4040                           wreg	equ	0xFE8
  4041                           indf1	equ	0xFE7
  4042                           plusw1	equ	0xFE3
  4043                           fsr1h	equ	0xFE2
  4044                           fsr1l	equ	0xFE1
  4045                           indf2	equ	0xFDF
  4046                           postinc2	equ	0xFDE
  4047                           postdec2	equ	0xFDD
  4048                           plusw2	equ	0xFDB
  4049                           fsr2h	equ	0xFDA
  4050                           fsr2l	equ	0xFD9
  4051                           status	equ	0xFD8
  4052                           
  4053 ;; *************** function _delay_tenth_s *****************
  4054 ;; Defined at:
  4055 ;;		line 32 in file "Movement.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  tenth_second    1    wreg     unsigned char 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4060 ;;  i               2   37[COMRAM] unsigned int 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;		None               void
  4063 ;; Registers used:
  4064 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4070 ;;      Params:         0       0       0       0
  4071 ;;      Locals:         3       0       0       0
  4072 ;;      Temps:          1       0       0       0
  4073 ;;      Totals:         4       0       0       0
  4074 ;;Total ram usage:        4 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    3
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_ScanWithRange
  4081 ;;		_main
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text13
  4086  001B52                     __ptext13:
  4087                           	opt stack 0
  4088  001B52                     _delay_tenth_s:
  4089                           	opt stack 27
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;incstack = 0
  4093                           ;delay_tenth_s@tenth_seconds stored from wreg
  4094  001B52  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4095                           
  4096                           ;Movement.c: 33: unsigned int i=0;
  4097  001B54  0E00               	movlw	0
  4098  001B56  6E27               	movwf	delay_tenth_s@i+1,c
  4099  001B58  0E00               	movlw	0
  4100  001B5A  6E26               	movwf	delay_tenth_s@i,c
  4101                           
  4102                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4103  001B5C  0E00               	movlw	0
  4104  001B5E  6E27               	movwf	delay_tenth_s@i+1,c
  4105  001B60  0E01               	movlw	1
  4106  001B62  6E26               	movwf	delay_tenth_s@i,c
  4107  001B64  D009               	goto	l2260
  4108  001B66                     l2256:
  4109                           
  4110                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4111  001B66  0E82               	movlw	130
  4112  001B68  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4113  001B6A  0EDE               	movlw	222
  4114  001B6C                     u3127:
  4115  001B6C  2EE8               	decfsz	wreg,f,c
  4116  001B6E  D7FE               	goto	u3127
  4117  001B70  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4118  001B72  D7FC               	goto	u3127
  4119  001B74  4A26               	infsnz	delay_tenth_s@i,f,c
  4120  001B76  2A27               	incf	delay_tenth_s@i+1,f,c
  4121  001B78                     l2260:
  4122  001B78  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4123  001B7A  0D02               	mullw	2
  4124  001B7C  5026               	movf	delay_tenth_s@i,w,c
  4125  001B7E  5CF3               	subwf	prodl,w,c
  4126  001B80  5027               	movf	delay_tenth_s@i+1,w,c
  4127  001B82  58F4               	subwfb	prodh,w,c
  4128  001B84  A0D8               	btfss	status,0,c
  4129  001B86  0012               	return	
  4130  001B88  D7EE               	goto	l2256
  4131  001B8A                     __end_of_delay_tenth_s:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           intcon	equ	0xFF2
  4137                           postinc0	equ	0xFEE
  4138                           wreg	equ	0xFE8
  4139                           indf1	equ	0xFE7
  4140                           plusw1	equ	0xFE3
  4141                           fsr1h	equ	0xFE2
  4142                           fsr1l	equ	0xFE1
  4143                           indf2	equ	0xFDF
  4144                           postinc2	equ	0xFDE
  4145                           postdec2	equ	0xFDD
  4146                           plusw2	equ	0xFDB
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _ScanIR *****************
  4152 ;; Defined at:
  4153 ;;		line 44 in file "Movement.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4156 ;;		 -> main@mL(9), 
  4157 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4158 ;;		 -> main@mR(9), 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4161 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4162 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      unsigned char 
  4165 ;; Registers used:
  4166 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4172 ;;      Params:         0       4       0       0
  4173 ;;      Locals:         0      46       0       0
  4174 ;;      Temps:          1       0       0       0
  4175 ;;      Totals:         1      50       0       0
  4176 ;;Total ram usage:       51 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    7
  4179 ;; This function calls:
  4180 ;;		_LCD_String
  4181 ;;		_SendLCD
  4182 ;;		_SetLine
  4183 ;;		_grabLeftIR
  4184 ;;		_grabRightIR
  4185 ;;		_sprintf
  4186 ;;		_stop
  4187 ;; This function is called by:
  4188 ;;		_main
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           	psect	text14
  4193  0013CC                     __ptext14:
  4194                           	opt stack 0
  4195  0013CC                     _ScanIR:
  4196                           	opt stack 23
  4197                           
  4198                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4199                           
  4200                           ;incstack = 0
  4201  0013CC  C0F1  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4202  0013D0  C0F2  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4203  0013D4  C0F3  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4204  0013D8  C0F4  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4205                           
  4206                           ;Movement.c: 48: char buf[40];
  4207                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4208  0013DC  0E03               	movlw	3
  4209  0013DE  0100               	movlb	0	; () banked
  4210  0013E0  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4211  0013E2  0EE8               	movlw	232
  4212  0013E4  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4216  0013E6  EC6E  F00C         	call	_grabLeftIR	;wreg free
  4217  0013EA  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4218  0013EE  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4219                           
  4220                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4221  0013F2  EC35  F00C         	call	_grabRightIR	;wreg free
  4222  0013F6  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4223  0013FA  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4224                           
  4225                           ;Movement.c: 60: CAP1BUFH=0;
  4226  0013FE  0E00               	movlw	0
  4227  001400  6E69               	movwf	3945,c	;volatile
  4228                           
  4229                           ;Movement.c: 61: CAP1BUFL=0;
  4230  001402  0E00               	movlw	0
  4231  001404  6E68               	movwf	3944,c	;volatile
  4232                           
  4233                           ;Movement.c: 62: CAP2BUFH=0;
  4234  001406  0E00               	movlw	0
  4235  001408  6E67               	movwf	3943,c	;volatile
  4236                           
  4237                           ;Movement.c: 63: CAP2BUFL=0;
  4238  00140A  0E00               	movlw	0
  4239  00140C  6E66               	movwf	3942,c	;volatile
  4240                           
  4241                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4242  00140E  0E00               	movlw	0
  4243  001410  6E28               	movwf	SendLCD@type,c
  4244  001412  0E01               	movlw	1
  4245  001414  EC2D  F00E         	call	_SendLCD
  4246                           
  4247                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4248  001418  0E21               	movlw	33
  4249  00141A                     u3137:
  4250  00141A  2EE8               	decfsz	wreg,f,c
  4251  00141C  D7FE               	goto	u3137
  4252  00141E  F000               	nop	
  4253                           
  4254                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4255  001420  0E00               	movlw	0
  4256  001422  6E28               	movwf	SendLCD@type,c
  4257  001424  0E02               	movlw	2
  4258  001426  EC2D  F00E         	call	_SendLCD
  4259                           
  4260                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4261  00142A  0E06               	movlw	6
  4262  00142C  6E39               	movwf	??_ScanIR& (0+255),c
  4263  00142E  0E30               	movlw	48
  4264  001430                     u3147:
  4265  001430  2EE8               	decfsz	wreg,f,c
  4266  001432  D7FE               	goto	u3147
  4267  001434  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4268  001436  D7FC               	goto	u3147
  4269  001438  D000               	nop2	
  4270                           
  4271                           ;Movement.c: 70: SetLine(1);
  4272  00143A  0E01               	movlw	1
  4273  00143C  EC15  F00E         	call	_SetLine
  4274                           
  4275                           ;Movement.c: 71: LCD_String("     ScanIR");
  4276  001440  0E2D               	movlw	low STR_1
  4277  001442  6E2A               	movwf	LCD_String@string,c
  4278  001444  0E03               	movlw	high STR_1
  4279  001446  6E2B               	movwf	LCD_String@string+1,c
  4280  001448  ECA7  F00C         	call	_LCD_String	;wreg free
  4281                           
  4282                           ;Movement.c: 72: SetLine(2);
  4283  00144C  0E02               	movlw	2
  4284  00144E  EC15  F00E         	call	_SetLine
  4285                           
  4286                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4287  001452  0E71               	movlw	low ScanIR@buf
  4288  001454  6E30               	movwf	sprintf@sp,c
  4289  001456  0E00               	movlw	high ScanIR@buf
  4290  001458  6E31               	movwf	sprintf@sp+1,c
  4291  00145A  0E0C               	movlw	low (STR_6+1)
  4292  00145C  6E32               	movwf	sprintf@f,c
  4293  00145E  0E03               	movlw	high (STR_6+1)
  4294  001460  6E33               	movwf	sprintf@f+1,c
  4295  001462  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4296  001466  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4297  00146A  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4298  00146E  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4299  001472  ECC6  F007         	call	_sprintf	;wreg free
  4300                           
  4301                           ;Movement.c: 74: LCD_String(buf);
  4302  001476  0E71               	movlw	low ScanIR@buf
  4303  001478  6E2A               	movwf	LCD_String@string,c
  4304  00147A  0E00               	movlw	high ScanIR@buf
  4305  00147C  6E2B               	movwf	LCD_String@string+1,c
  4306  00147E  ECA7  F00C         	call	_LCD_String	;wreg free
  4307                           
  4308                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4309                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4310  001482  0100               	movlb	0	; () banked
  4311  001484  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4312  001486  0100               	movlb	0	; () banked
  4313  001488  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4314  00148A  0100               	movlb	0	; () banked
  4315  00148C  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4316  00148E  0100               	movlb	0	; () banked
  4317  001490  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4318  001492  B0D8               	btfsc	status,0,c
  4319  001494  D00C               	goto	l3176
  4320                           
  4321                           ; BSR set to: 0
  4322  001496  0100               	movlb	0	; () banked
  4323  001498  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4324  00149A  0100               	movlb	0	; () banked
  4325  00149C  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4326  00149E  0100               	movlb	0	; () banked
  4327  0014A0  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4328  0014A2  0100               	movlb	0	; () banked
  4329  0014A4  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4330  0014A6  B0D8               	btfsc	status,0,c
  4331  0014A8  D002               	goto	l3176
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;Movement.c: 80: return 2;
  4335  0014AA  0E02               	movlw	2
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;Movement.c: 81: } else {
  4339                           
  4340                           ; BSR set to: 0
  4341  0014AC  0012               	return	
  4342  0014AE                     l3176:
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;Movement.c: 82: stop(mL,mR);
  4346  0014AE  C06D  F062         	movff	ScanIR@mL,stop@mL
  4347  0014B2  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4348  0014B6  C06F  F064         	movff	ScanIR@mR,stop@mR
  4349  0014BA  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4350  0014BE  EC24  F00B         	call	_stop	;wreg free
  4351                           
  4352                           ;Movement.c: 83: return 0;
  4353  0014C2  0E00               	movlw	0
  4354  0014C4  0012               	return	
  4355  0014C6                     __end_of_ScanIR:
  4356                           	opt stack 0
  4357                           tblptru	equ	0xFF8
  4358                           prodh	equ	0xFF4
  4359                           prodl	equ	0xFF3
  4360                           intcon	equ	0xFF2
  4361                           postinc0	equ	0xFEE
  4362                           wreg	equ	0xFE8
  4363                           indf1	equ	0xFE7
  4364                           plusw1	equ	0xFE3
  4365                           fsr1h	equ	0xFE2
  4366                           fsr1l	equ	0xFE1
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           plusw2	equ	0xFDB
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function _stop *****************
  4376 ;; Defined at:
  4377 ;;		line 67 in file "dc_motor.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4380 ;;		 -> main@mL(9), 
  4381 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4382 ;;		 -> main@mR(9), 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;		None               void
  4387 ;; Registers used:
  4388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4394 ;;      Params:         0       4       0       0
  4395 ;;      Locals:         0       0       0       0
  4396 ;;      Temps:          0       0       0       0
  4397 ;;      Totals:         0       4       0       0
  4398 ;;Total ram usage:        4 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; Hardware stack levels required when called:    5
  4401 ;; This function calls:
  4402 ;;		_setMotorPWM
  4403 ;; This function is called by:
  4404 ;;		_ScanIR
  4405 ;;		_ScanWithRange
  4406 ;;		_main
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	text15
  4411  001648                     __ptext15:
  4412                           	opt stack 0
  4413  001648                     _stop:
  4414                           	opt stack 25
  4415                           
  4416                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4417                           
  4418                           ;incstack = 0
  4419  001648  D028               	goto	l3008
  4420  00164A                     l2994:
  4421                           
  4422                           ;dc_motor.c: 71: if(mL->power>0){
  4423  00164A  C062  FFD9         	movff	stop@mL,fsr2l
  4424  00164E  C063  FFDA         	movff	stop@mL+1,fsr2h
  4425  001652  50DF               	movf	indf2,w,c
  4426  001654  B4D8               	btfsc	status,2,c
  4427  001656  D005               	goto	l2998
  4428                           
  4429                           ;dc_motor.c: 72: mL->power--;
  4430  001658  C062  FFD9         	movff	stop@mL,fsr2l
  4431  00165C  C063  FFDA         	movff	stop@mL+1,fsr2h
  4432  001660  06DF               	decf	indf2,f,c
  4433  001662                     l2998:
  4434                           
  4435                           ;dc_motor.c: 73: }
  4436                           ;dc_motor.c: 74: if(mR->power>0){
  4437  001662  C064  FFD9         	movff	stop@mR,fsr2l
  4438  001666  C065  FFDA         	movff	stop@mR+1,fsr2h
  4439  00166A  50DF               	movf	indf2,w,c
  4440  00166C  B4D8               	btfsc	status,2,c
  4441  00166E  D005               	goto	l3002
  4442                           
  4443                           ;dc_motor.c: 75: mR->power--;
  4444  001670  C064  FFD9         	movff	stop@mR,fsr2l
  4445  001674  C065  FFDA         	movff	stop@mR+1,fsr2h
  4446  001678  06DF               	decf	indf2,f,c
  4447  00167A                     l3002:
  4448                           
  4449                           ;dc_motor.c: 76: }
  4450                           ;dc_motor.c: 77: setMotorPWM(mL);
  4451  00167A  C062  F032         	movff	stop@mL,setMotorPWM@m
  4452  00167E  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4453  001682  EC49  F009         	call	_setMotorPWM	;wreg free
  4454                           
  4455                           ;dc_motor.c: 78: setMotorPWM(mR);
  4456  001686  C064  F032         	movff	stop@mR,setMotorPWM@m
  4457  00168A  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4458  00168E  EC49  F009         	call	_setMotorPWM	;wreg free
  4459                           
  4460                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4461  001692  0E21               	movlw	33
  4462  001694                     u3157:
  4463  001694  2EE8               	decfsz	wreg,f,c
  4464  001696  D7FE               	goto	u3157
  4465  001698  F000               	nop	
  4466  00169A                     l3008:
  4467  00169A  C062  FFD9         	movff	stop@mL,fsr2l
  4468  00169E  C063  FFDA         	movff	stop@mL+1,fsr2h
  4469  0016A2  50DF               	movf	indf2,w,c
  4470  0016A4  A4D8               	btfss	status,2,c
  4471  0016A6  D7D1               	goto	l2994
  4472  0016A8  C064  FFD9         	movff	stop@mR,fsr2l
  4473  0016AC  C065  FFDA         	movff	stop@mR+1,fsr2h
  4474  0016B0  50DF               	movf	indf2,w,c
  4475  0016B2  A4D8               	btfss	status,2,c
  4476  0016B4  D7CA               	goto	l2994
  4477                           
  4478                           ;dc_motor.c: 80: }
  4479                           ;dc_motor.c: 81: mL->direction=1;
  4480  0016B6  0100               	movlb	0	; () banked
  4481  0016B8  EE20 F001          	lfsr	2,1
  4482  0016BC  5162               	movf	stop@mL& (0+255),w,b
  4483  0016BE  26D9               	addwf	fsr2l,f,c
  4484  0016C0  5163               	movf	(stop@mL+1)& (0+255),w,b
  4485  0016C2  22DA               	addwfc	fsr2h,f,c
  4486  0016C4  0E01               	movlw	1
  4487  0016C6  6EDF               	movwf	indf2,c
  4488                           
  4489                           ;dc_motor.c: 82: mR->direction=1;
  4490  0016C8  0100               	movlb	0	; () banked
  4491  0016CA  EE20 F001          	lfsr	2,1
  4492  0016CE  5164               	movf	stop@mR& (0+255),w,b
  4493  0016D0  26D9               	addwf	fsr2l,f,c
  4494  0016D2  5165               	movf	(stop@mR+1)& (0+255),w,b
  4495  0016D4  22DA               	addwfc	fsr2h,f,c
  4496  0016D6  0E01               	movlw	1
  4497  0016D8  6EDF               	movwf	indf2,c
  4498                           
  4499                           ; BSR set to: 0
  4500  0016DA  0012               	return		;funcret
  4501  0016DC                     __end_of_stop:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           prodh	equ	0xFF4
  4505                           prodl	equ	0xFF3
  4506                           intcon	equ	0xFF2
  4507                           postinc0	equ	0xFEE
  4508                           wreg	equ	0xFE8
  4509                           indf1	equ	0xFE7
  4510                           plusw1	equ	0xFE3
  4511                           fsr1h	equ	0xFE2
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           plusw2	equ	0xFDB
  4517                           fsr2h	equ	0xFDA
  4518                           fsr2l	equ	0xFD9
  4519                           status	equ	0xFD8
  4520                           
  4521 ;; *************** function _setMotorPWM *****************
  4522 ;; Defined at:
  4523 ;;		line 26 in file "dc_motor.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4526 ;;		 -> main@mR(9), main@mL(9), 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;  PWMduty         2    0[BANK0 ] int 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;		None               void
  4531 ;; Registers used:
  4532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4538 ;;      Params:         2       0       0       0
  4539 ;;      Locals:         0       2       0       0
  4540 ;;      Temps:          5       0       0       0
  4541 ;;      Totals:         7       2       0       0
  4542 ;;Total ram usage:        9 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    4
  4545 ;; This function calls:
  4546 ;;		___awdiv
  4547 ;;		___wmul
  4548 ;; This function is called by:
  4549 ;;		_stop
  4550 ;;		_fullSpeedAhead
  4551 ;;		_setMotorFullSpeed
  4552 ;;		_stopMotor
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text16
  4557  001292                     __ptext16:
  4558                           	opt stack 0
  4559  001292                     _setMotorPWM:
  4560                           	opt stack 24
  4561                           
  4562                           ;dc_motor.c: 28: int PWMduty;
  4563                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;incstack = 0
  4567  001292  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4568  001296  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4569  00129A  50DF               	movf	indf2,w,c
  4570  00129C  6E34               	movwf	??_setMotorPWM& (0+255),c
  4571  00129E  5034               	movf	??_setMotorPWM,w,c
  4572  0012A0  6E24               	movwf	___wmul@multiplier,c
  4573  0012A2  6A25               	clrf	___wmul@multiplier+1,c
  4574  0012A4  EE20 F007          	lfsr	2,7
  4575  0012A8  5032               	movf	setMotorPWM@m,w,c
  4576  0012AA  26D9               	addwf	fsr2l,f,c
  4577  0012AC  5033               	movf	setMotorPWM@m+1,w,c
  4578  0012AE  22DA               	addwfc	fsr2h,f,c
  4579  0012B0  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4580  0012B4  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4581  0012B8  EC58  F00E         	call	___wmul	;wreg free
  4582  0012BC  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4583  0012C0  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4584  0012C4  0E00               	movlw	0
  4585  0012C6  6E2D               	movwf	___awdiv@divisor+1,c
  4586  0012C8  0E64               	movlw	100
  4587  0012CA  6E2C               	movwf	___awdiv@divisor,c
  4588  0012CC  ECB3  F00B         	call	___awdiv	;wreg free
  4589  0012D0  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4590  0012D4  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4591                           
  4592                           ;dc_motor.c: 32: if (m->direction)
  4593  0012D8  EE20 F001          	lfsr	2,1
  4594  0012DC  5032               	movf	setMotorPWM@m,w,c
  4595  0012DE  26D9               	addwf	fsr2l,f,c
  4596  0012E0  5033               	movf	setMotorPWM@m+1,w,c
  4597  0012E2  22DA               	addwfc	fsr2h,f,c
  4598  0012E4  50DF               	movf	indf2,w,c
  4599  0012E6  B4D8               	btfsc	status,2,c
  4600  0012E8  D02E               	goto	l2972
  4601                           
  4602                           ;dc_motor.c: 33: {
  4603                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4604  0012EA  EE20 F006          	lfsr	2,6
  4605  0012EE  5032               	movf	setMotorPWM@m,w,c
  4606  0012F0  26D9               	addwf	fsr2l,f,c
  4607  0012F2  5033               	movf	setMotorPWM@m+1,w,c
  4608  0012F4  22DA               	addwfc	fsr2h,f,c
  4609  0012F6  50DF               	movf	indf2,w,c
  4610  0012F8  6E34               	movwf	??_setMotorPWM& (0+255),c
  4611  0012FA  0E01               	movlw	1
  4612  0012FC  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4613  0012FE  2A34               	incf	??_setMotorPWM,f,c
  4614  001300  D002               	goto	u2324
  4615  001302                     u2325:
  4616  001302  90D8               	bcf	status,0,c
  4617  001304  3635               	rlcf	??_setMotorPWM+1,f,c
  4618  001306                     u2324:
  4619  001306  2E34               	decfsz	??_setMotorPWM,f,c
  4620  001308  D7FC               	goto	u2325
  4621  00130A  5035               	movf	??_setMotorPWM+1,w,c
  4622  00130C  108A               	iorwf	3978,w,c	;volatile
  4623  00130E  6E8A               	movwf	3978,c	;volatile
  4624                           
  4625                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4626  001310  EE20 F007          	lfsr	2,7
  4627  001314  5032               	movf	setMotorPWM@m,w,c
  4628  001316  26D9               	addwf	fsr2l,f,c
  4629  001318  5033               	movf	setMotorPWM@m+1,w,c
  4630  00131A  22DA               	addwfc	fsr2h,f,c
  4631  00131C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4632  001320  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4633  001324  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4634  001328  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4635  00132C  1E36               	comf	??_setMotorPWM+2,f,c
  4636  00132E  1E37               	comf	??_setMotorPWM+3,f,c
  4637  001330  4A36               	infsnz	??_setMotorPWM+2,f,c
  4638  001332  2A37               	incf	??_setMotorPWM+3,f,c
  4639  001334  5034               	movf	??_setMotorPWM,w,c
  4640  001336  2436               	addwf	??_setMotorPWM+2,w,c
  4641  001338  0100               	movlb	0	; () banked
  4642  00133A  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4643  00133C  5035               	movf	??_setMotorPWM+1,w,c
  4644  00133E  2037               	addwfc	??_setMotorPWM+3,w,c
  4645  001340  0100               	movlb	0	; () banked
  4646  001342  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4647                           
  4648                           ;dc_motor.c: 36: }
  4649  001344  D014               	goto	l35
  4650  001346                     l2972:
  4651                           
  4652                           ;dc_motor.c: 37: else
  4653                           ;dc_motor.c: 38: {
  4654                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4655  001346  EE20 F006          	lfsr	2,6
  4656  00134A  5032               	movf	setMotorPWM@m,w,c
  4657  00134C  26D9               	addwf	fsr2l,f,c
  4658  00134E  5033               	movf	setMotorPWM@m+1,w,c
  4659  001350  22DA               	addwfc	fsr2h,f,c
  4660  001352  50DF               	movf	indf2,w,c
  4661  001354  6E34               	movwf	??_setMotorPWM& (0+255),c
  4662  001356  0E01               	movlw	1
  4663  001358  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4664  00135A  2A34               	incf	??_setMotorPWM,f,c
  4665  00135C  D002               	goto	u2334
  4666  00135E                     u2335:
  4667  00135E  90D8               	bcf	status,0,c
  4668  001360  3635               	rlcf	??_setMotorPWM+1,f,c
  4669  001362                     u2334:
  4670  001362  2E34               	decfsz	??_setMotorPWM,f,c
  4671  001364  D7FC               	goto	u2335
  4672  001366  5035               	movf	??_setMotorPWM+1,w,c
  4673  001368  0AFF               	xorlw	255
  4674  00136A  148A               	andwf	3978,w,c	;volatile
  4675  00136C  6E8A               	movwf	3978,c	;volatile
  4676  00136E                     l35:
  4677                           
  4678                           ;dc_motor.c: 40: }
  4679                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4680  00136E  EE20 F002          	lfsr	2,2
  4681  001372  5032               	movf	setMotorPWM@m,w,c
  4682  001374  26D9               	addwf	fsr2l,f,c
  4683  001376  5033               	movf	setMotorPWM@m+1,w,c
  4684  001378  22DA               	addwfc	fsr2h,f,c
  4685  00137A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4686  00137E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4687  001382  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4688  001386  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4689  00138A  0100               	movlb	0	; () banked
  4690  00138C  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4691  00138E  46E8               	rlncf	wreg,f,c
  4692  001390  0BFC               	andlw	252
  4693  001392  6EDF               	movwf	indf2,c
  4694                           
  4695                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4696  001394  EE20 F004          	lfsr	2,4
  4697  001398  5032               	movf	setMotorPWM@m,w,c
  4698  00139A  26D9               	addwf	fsr2l,f,c
  4699  00139C  5033               	movf	setMotorPWM@m+1,w,c
  4700  00139E  22DA               	addwfc	fsr2h,f,c
  4701  0013A0  CFDE F034          	movff	postinc2,??_setMotorPWM
  4702  0013A4  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4703  0013A8  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4704  0013AC  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4705  0013B0  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4706  0013B4  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4707  0013B8  0E06               	movlw	6
  4708  0013BA  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4709  0013BC                     u2345:
  4710  0013BC  3437               	rlcf	??_setMotorPWM+3,w,c
  4711  0013BE  3237               	rrcf	??_setMotorPWM+3,f,c
  4712  0013C0  3236               	rrcf	??_setMotorPWM+2,f,c
  4713  0013C2  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4714  0013C4  D7FB               	goto	u2345
  4715  0013C6  5036               	movf	??_setMotorPWM+2,w,c
  4716  0013C8  6EDF               	movwf	indf2,c
  4717                           
  4718                           ; BSR set to: 0
  4719  0013CA  0012               	return		;funcret
  4720  0013CC                     __end_of_setMotorPWM:
  4721                           	opt stack 0
  4722                           tblptru	equ	0xFF8
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           indf1	equ	0xFE7
  4729                           plusw1	equ	0xFE3
  4730                           fsr1h	equ	0xFE2
  4731                           fsr1l	equ	0xFE1
  4732                           indf2	equ	0xFDF
  4733                           postinc2	equ	0xFDE
  4734                           postdec2	equ	0xFDD
  4735                           plusw2	equ	0xFDB
  4736                           fsr2h	equ	0xFDA
  4737                           fsr2l	equ	0xFD9
  4738                           status	equ	0xFD8
  4739                           
  4740 ;; *************** function ___awdiv *****************
  4741 ;; Defined at:
  4742 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;  dividend        2   41[COMRAM] int 
  4745 ;;  divisor         2   43[COMRAM] int 
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;  quotient        2   47[COMRAM] int 
  4748 ;;  sign            1   46[COMRAM] unsigned char 
  4749 ;;  counter         1   45[COMRAM] unsigned char 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  2   41[COMRAM] int 
  4752 ;; Registers used:
  4753 ;;		wreg, status,2, status,0
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4759 ;;      Params:         4       0       0       0
  4760 ;;      Locals:         4       0       0       0
  4761 ;;      Temps:          0       0       0       0
  4762 ;;      Totals:         8       0       0       0
  4763 ;;Total ram usage:        8 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    3
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		_setMotorPWM
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text17
  4774  001766                     __ptext17:
  4775                           	opt stack 0
  4776  001766                     ___awdiv:
  4777                           	opt stack 24
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;incstack = 0
  4781  001766  0E00               	movlw	0
  4782  001768  6E2F               	movwf	___awdiv@sign,c
  4783  00176A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4784  00176C  D006               	goto	l2930
  4785  00176E  6C2C               	negf	___awdiv@divisor,c
  4786  001770  1E2D               	comf	___awdiv@divisor+1,f,c
  4787  001772  B0D8               	btfsc	status,0,c
  4788  001774  2A2D               	incf	___awdiv@divisor+1,f,c
  4789  001776  0E01               	movlw	1
  4790  001778  6E2F               	movwf	___awdiv@sign,c
  4791  00177A                     l2930:
  4792  00177A  AE2B               	btfss	___awdiv@dividend+1,7,c
  4793  00177C  D006               	goto	l2936
  4794  00177E  6C2A               	negf	___awdiv@dividend,c
  4795  001780  1E2B               	comf	___awdiv@dividend+1,f,c
  4796  001782  B0D8               	btfsc	status,0,c
  4797  001784  2A2B               	incf	___awdiv@dividend+1,f,c
  4798  001786  0E01               	movlw	1
  4799  001788  1A2F               	xorwf	___awdiv@sign,f,c
  4800  00178A                     l2936:
  4801  00178A  0E00               	movlw	0
  4802  00178C  6E31               	movwf	___awdiv@quotient+1,c
  4803  00178E  0E00               	movlw	0
  4804  001790  6E30               	movwf	___awdiv@quotient,c
  4805  001792  502C               	movf	___awdiv@divisor,w,c
  4806  001794  102D               	iorwf	___awdiv@divisor+1,w,c
  4807  001796  B4D8               	btfsc	status,2,c
  4808  001798  D01C               	goto	l2958
  4809  00179A  0E01               	movlw	1
  4810  00179C  6E2E               	movwf	___awdiv@counter,c
  4811  00179E  D004               	goto	l2944
  4812  0017A0                     l2942:
  4813  0017A0  90D8               	bcf	status,0,c
  4814  0017A2  362C               	rlcf	___awdiv@divisor,f,c
  4815  0017A4  362D               	rlcf	___awdiv@divisor+1,f,c
  4816  0017A6  2A2E               	incf	___awdiv@counter,f,c
  4817  0017A8                     l2944:
  4818  0017A8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4819  0017AA  D7FA               	goto	l2942
  4820  0017AC                     l2946:
  4821  0017AC  90D8               	bcf	status,0,c
  4822  0017AE  3630               	rlcf	___awdiv@quotient,f,c
  4823  0017B0  3631               	rlcf	___awdiv@quotient+1,f,c
  4824  0017B2  502C               	movf	___awdiv@divisor,w,c
  4825  0017B4  5C2A               	subwf	___awdiv@dividend,w,c
  4826  0017B6  502D               	movf	___awdiv@divisor+1,w,c
  4827  0017B8  582B               	subwfb	___awdiv@dividend+1,w,c
  4828  0017BA  A0D8               	btfss	status,0,c
  4829  0017BC  D005               	goto	l2954
  4830  0017BE  502C               	movf	___awdiv@divisor,w,c
  4831  0017C0  5E2A               	subwf	___awdiv@dividend,f,c
  4832  0017C2  502D               	movf	___awdiv@divisor+1,w,c
  4833  0017C4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4834  0017C6  8030               	bsf	___awdiv@quotient,0,c
  4835  0017C8                     l2954:
  4836  0017C8  90D8               	bcf	status,0,c
  4837  0017CA  322D               	rrcf	___awdiv@divisor+1,f,c
  4838  0017CC  322C               	rrcf	___awdiv@divisor,f,c
  4839  0017CE  2E2E               	decfsz	___awdiv@counter,f,c
  4840  0017D0  D7ED               	goto	l2946
  4841  0017D2                     l2958:
  4842  0017D2  502F               	movf	___awdiv@sign,w,c
  4843  0017D4  B4D8               	btfsc	status,2,c
  4844  0017D6  D004               	goto	l2962
  4845  0017D8  6C30               	negf	___awdiv@quotient,c
  4846  0017DA  1E31               	comf	___awdiv@quotient+1,f,c
  4847  0017DC  B0D8               	btfsc	status,0,c
  4848  0017DE  2A31               	incf	___awdiv@quotient+1,f,c
  4849  0017E0                     l2962:
  4850  0017E0  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4851  0017E4  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4852  0017E8  0012               	return	
  4853  0017EA                     __end_of___awdiv:
  4854                           	opt stack 0
  4855                           tblptru	equ	0xFF8
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           postinc0	equ	0xFEE
  4860                           wreg	equ	0xFE8
  4861                           indf1	equ	0xFE7
  4862                           plusw1	equ	0xFE3
  4863                           fsr1h	equ	0xFE2
  4864                           fsr1l	equ	0xFE1
  4865                           indf2	equ	0xFDF
  4866                           postinc2	equ	0xFDE
  4867                           postdec2	equ	0xFDD
  4868                           plusw2	equ	0xFDB
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function _sprintf *****************
  4874 ;; Defined at:
  4875 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4878 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4879 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4880 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;  tmpval          4    0        struct .
  4883 ;;  cp              3    0        PTR const unsigned char 
  4884 ;;  width           2   10[BANK0 ] int 
  4885 ;;  val             2    7[BANK0 ] unsigned int 
  4886 ;;  ap              2    4[BANK0 ] PTR void [1]
  4887 ;;		 -> ?_sprintf(2), 
  4888 ;;  len             2    0        unsigned int 
  4889 ;;  c               1   12[BANK0 ] char 
  4890 ;;  flag            1    9[BANK0 ] unsigned char 
  4891 ;;  prec            1    6[BANK0 ] char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  2   47[COMRAM] int 
  4894 ;; Registers used:
  4895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4901 ;;      Params:         8       0       0       0
  4902 ;;      Locals:         0       9       0       0
  4903 ;;      Temps:          0       4       0       0
  4904 ;;      Totals:         8      13       0       0
  4905 ;;Total ram usage:       21 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    4
  4908 ;; This function calls:
  4909 ;;		___lwdiv
  4910 ;;		___lwmod
  4911 ;;		___wmul
  4912 ;;		_isdigit
  4913 ;; This function is called by:
  4914 ;;		_ScanIR
  4915 ;;		_ScanWithRange
  4916 ;;		_main
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text18
  4921  000F8C                     __ptext18:
  4922                           	opt stack 0
  4923  000F8C                     _sprintf:
  4924                           	opt stack 26
  4925                           
  4926                           ;doprnt.c: 494: va_list ap;
  4927                           ;doprnt.c: 499: signed char c;
  4928                           ;doprnt.c: 501: int width;
  4929                           ;doprnt.c: 506: signed char prec;
  4930                           ;doprnt.c: 508: unsigned char flag;
  4931                           ;doprnt.c: 523: union {
  4932                           ;doprnt.c: 524: unsigned long vd;
  4933                           ;doprnt.c: 525: double integ;
  4934                           ;doprnt.c: 526: } tmpval;
  4935                           ;doprnt.c: 528: unsigned int val;
  4936                           ;doprnt.c: 529: unsigned len;
  4937                           ;doprnt.c: 530: const char * cp;
  4938                           ;doprnt.c: 533: *ap = __va_start();
  4939                           
  4940                           ;incstack = 0
  4941  000F8C  0E34               	movlw	low (?_sprintf+4)
  4942  000F8E  0100               	movlb	0	; () banked
  4943  000F90  6F64               	movwf	sprintf@ap& (0+255),b
  4944  000F92  0E00               	movlw	high (?_sprintf+4)
  4945  000F94  0100               	movlb	0	; () banked
  4946  000F96  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4947                           
  4948                           ;doprnt.c: 536: while(c = *f++) {
  4949  000F98  D168               	goto	l3130
  4950  000F9A                     l3024:
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;doprnt.c: 538: if(c != '%')
  4954  000F9A  0E25               	movlw	37
  4955  000F9C  0100               	movlb	0	; () banked
  4956  000F9E  196C               	xorwf	sprintf@c& (0+255),w,b
  4957  000FA0  B4D8               	btfsc	status,2,c
  4958  000FA2  D009               	goto	l3030
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;doprnt.c: 540: {
  4962                           ;doprnt.c: 541: ((*sp++ = (c)));
  4963  000FA4  C030  FFD9         	movff	sprintf@sp,fsr2l
  4964  000FA8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4965  000FAC  C06C  FFDF         	movff	sprintf@c,indf2
  4966                           
  4967                           ; BSR set to: 0
  4968  000FB0  4A30               	infsnz	sprintf@sp,f,c
  4969  000FB2  2A31               	incf	sprintf@sp+1,f,c
  4970                           
  4971                           ;doprnt.c: 542: continue;
  4972  000FB4  D15A               	goto	l3130
  4973  000FB6                     l3030:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;doprnt.c: 543: }
  4977                           ;doprnt.c: 546: width = 0;
  4978  000FB6  0E00               	movlw	0
  4979  000FB8  0100               	movlb	0	; () banked
  4980  000FBA  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4981  000FBC  0E00               	movlw	0
  4982  000FBE  6F6A               	movwf	sprintf@width& (0+255),b
  4983                           
  4984                           ;doprnt.c: 548: flag = 0;
  4985  000FC0  0E00               	movlw	0
  4986  000FC2  0100               	movlb	0	; () banked
  4987  000FC4  6F69               	movwf	sprintf@flag& (0+255),b
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;doprnt.c: 551: switch(*f) {
  4991                           
  4992                           ;doprnt.c: 550: for(;;) {
  4993  000FC6  D004               	goto	l3036
  4994  000FC8                     l3032:
  4995                           
  4996                           ;doprnt.c: 580: flag |= 0x04;
  4997  000FC8  0100               	movlb	0	; () banked
  4998  000FCA  8569               	bsf	sprintf@flag& (0+255),2,b
  4999                           
  5000                           ;doprnt.c: 581: f++;
  5001  000FCC  4A32               	infsnz	sprintf@f,f,c
  5002  000FCE  2A33               	incf	sprintf@f+1,f,c
  5003  000FD0                     l3036:
  5004  000FD0  C032  FFF6         	movff	sprintf@f,tblptrl
  5005  000FD4  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5006  000FD8                     	if	0	;tblptru may be non-zero
  5007  000FD8                     	endif
  5008  000FD8                     	if	0	;tblptru may be non-zero
  5009  000FD8                     	endif
  5010  000FD8  0008               	tblrd		*
  5011  000FDA  50F5               	movf	tablat,w,c
  5012                           
  5013                           ; Switch size 1, requested type "space"
  5014                           ; Number of cases is 1, Range of values is 48 to 48
  5015                           ; switch strategies available:
  5016                           ; Name         Instructions Cycles
  5017                           ; simple_byte            4     3 (average)
  5018                           ;	Chosen strategy is simple_byte
  5019  000FDC  0A30               	xorlw	48	; case 48
  5020  000FDE  B4D8               	btfsc	status,2,c
  5021  000FE0  D7F3               	goto	l3032
  5022                           
  5023                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5024                           
  5025                           ;doprnt.c: 586: }
  5026                           
  5027                           ;doprnt.c: 585: break;
  5028  000FE2  C032  FFF6         	movff	sprintf@f,tblptrl
  5029  000FE6  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5030  000FEA                     	if	0	;tblptru may be non-zero
  5031  000FEA                     	endif
  5032  000FEA                     	if	0	;tblptru may be non-zero
  5033  000FEA                     	endif
  5034  000FEA  0008               	tblrd		*
  5035  000FEC  50F5               	movf	tablat,w,c
  5036  000FEE  EC7C  F00E         	call	_isdigit
  5037  000FF2  A0D8               	btfss	status,0,c
  5038  000FF4  D03E               	goto	l3052
  5039                           
  5040                           ;doprnt.c: 598: width = 0;
  5041  000FF6  0E00               	movlw	0
  5042  000FF8  0100               	movlb	0	; () banked
  5043  000FFA  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5044  000FFC  0E00               	movlw	0
  5045  000FFE  6F6A               	movwf	sprintf@width& (0+255),b
  5046  001000                     l3042:
  5047                           
  5048                           ;doprnt.c: 600: width *= 10;
  5049  001000  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5050  001004  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5051  001008  0E00               	movlw	0
  5052  00100A  6E27               	movwf	___wmul@multiplicand+1,c
  5053  00100C  0E0A               	movlw	10
  5054  00100E  6E26               	movwf	___wmul@multiplicand,c
  5055  001010  EC58  F00E         	call	___wmul	;wreg free
  5056  001014  C024  F06A         	movff	?___wmul,sprintf@width
  5057  001018  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5058                           
  5059                           ;doprnt.c: 601: width += *f++ - '0';
  5060  00101C  0ED0               	movlw	208
  5061  00101E  0100               	movlb	0	; () banked
  5062  001020  6F60               	movwf	??_sprintf& (0+255),b
  5063  001022  0EFF               	movlw	255
  5064  001024  0100               	movlb	0	; () banked
  5065  001026  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5066  001028  C032  FFF6         	movff	sprintf@f,tblptrl
  5067  00102C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5068  001030                     	if	0	;tblptru may be non-zero
  5069  001030                     	endif
  5070  001030                     	if	0	;tblptru may be non-zero
  5071  001030                     	endif
  5072  001030  0008               	tblrd		*
  5073  001032  50F5               	movf	tablat,w,c
  5074  001034  0100               	movlb	0	; () banked
  5075  001036  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5076  001038  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5077  00103A  0100               	movlb	0	; () banked
  5078  00103C  5160               	movf	??_sprintf& (0+255),w,b
  5079  00103E  0100               	movlb	0	; () banked
  5080  001040  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5081  001042  0100               	movlb	0	; () banked
  5082  001044  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5083  001046  0100               	movlb	0	; () banked
  5084  001048  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5085  00104A  0100               	movlb	0	; () banked
  5086  00104C  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5087  00104E  0100               	movlb	0	; () banked
  5088  001050  276A               	addwf	sprintf@width& (0+255),f,b
  5089  001052  0100               	movlb	0	; () banked
  5090  001054  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5091  001056  0100               	movlb	0	; () banked
  5092  001058  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5093                           
  5094                           ; BSR set to: 0
  5095  00105A  4A32               	infsnz	sprintf@f,f,c
  5096  00105C  2A33               	incf	sprintf@f+1,f,c
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5100  00105E  C032  FFF6         	movff	sprintf@f,tblptrl
  5101  001062  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5102  001066                     	if	0	;tblptru may be non-zero
  5103  001066                     	endif
  5104  001066                     	if	0	;tblptru may be non-zero
  5105  001066                     	endif
  5106  001066  0008               	tblrd		*
  5107  001068  50F5               	movf	tablat,w,c
  5108  00106A  EC7C  F00E         	call	_isdigit
  5109  00106E  B0D8               	btfsc	status,0,c
  5110  001070  D7C7               	goto	l3042
  5111  001072                     l3052:
  5112  001072  C032  FFF6         	movff	sprintf@f,tblptrl
  5113  001076  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5114  00107A  4A32               	infsnz	sprintf@f,f,c
  5115  00107C  2A33               	incf	sprintf@f+1,f,c
  5116  00107E                     	if	0	;tblptru may be non-zero
  5117  00107E                     	endif
  5118  00107E                     	if	0	;tblptru may be non-zero
  5119  00107E                     	endif
  5120  00107E  0008               	tblrd		*
  5121  001080  CFF5 F06C          	movff	tablat,sprintf@c
  5122  001084  0100               	movlb	0	; () banked
  5123  001086  516C               	movf	sprintf@c& (0+255),w,b
  5124                           
  5125                           ; Switch size 1, requested type "space"
  5126                           ; Number of cases is 3, Range of values is 0 to 105
  5127                           ; switch strategies available:
  5128                           ; Name         Instructions Cycles
  5129                           ; simple_byte           10     6 (average)
  5130                           ;	Chosen strategy is simple_byte
  5131  001088  0A00               	xorlw	0	; case 0
  5132  00108A  B4D8               	btfsc	status,2,c
  5133  00108C  D0FB               	goto	l3132
  5134  00108E  0A64               	xorlw	100	; case 100
  5135  001090  B4D8               	btfsc	status,2,c
  5136  001092  D003               	goto	l3054
  5137  001094  0A0D               	xorlw	13	; case 105
  5138  001096  A4D8               	btfss	status,2,c
  5139  001098  D0E8               	goto	l3130
  5140  00109A                     l3054:
  5141                           
  5142                           ;doprnt.c: 1253: {
  5143                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5144  00109A  C064  FFD9         	movff	sprintf@ap,fsr2l
  5145  00109E  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5146  0010A2  CFDE F067          	movff	postinc2,sprintf@val
  5147  0010A6  CFDD F068          	movff	postdec2,sprintf@val+1
  5148  0010AA  0E02               	movlw	2
  5149  0010AC  0100               	movlb	0	; () banked
  5150  0010AE  2764               	addwf	sprintf@ap& (0+255),f,b
  5151  0010B0  0E00               	movlw	0
  5152  0010B2  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;doprnt.c: 1261: if((int)val < 0) {
  5156  0010B4  0100               	movlb	0	; () banked
  5157  0010B6  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5158  0010B8  D008               	goto	l3064
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;doprnt.c: 1262: flag |= 0x03;
  5162  0010BA  0E03               	movlw	3
  5163  0010BC  0100               	movlb	0	; () banked
  5164  0010BE  1369               	iorwf	sprintf@flag& (0+255),f,b
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;doprnt.c: 1263: val = -val;
  5168  0010C0  0100               	movlb	0	; () banked
  5169  0010C2  6D67               	negf	sprintf@val& (0+255),b
  5170  0010C4  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5171  0010C6  B0D8               	btfsc	status,0,c
  5172  0010C8  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5173  0010CA                     l3064:
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;doprnt.c: 1264: }
  5177                           ;doprnt.c: 1266: }
  5178                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5179  0010CA  0E01               	movlw	1
  5180  0010CC  0100               	movlb	0	; () banked
  5181  0010CE  6F6C               	movwf	sprintf@c& (0+255),b
  5182  0010D0                     l3066:
  5183                           
  5184                           ; BSR set to: 0
  5185  0010D0  0E05               	movlw	5
  5186  0010D2  0100               	movlb	0	; () banked
  5187  0010D4  196C               	xorwf	sprintf@c& (0+255),w,b
  5188  0010D6  B4D8               	btfsc	status,2,c
  5189  0010D8  D016               	goto	l3078
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;doprnt.c: 1306: if(val < dpowers[c])
  5193                           
  5194                           ; BSR set to: 0
  5195                           
  5196                           ; BSR set to: 0
  5197  0010DA  0100               	movlb	0	; () banked
  5198  0010DC  516C               	movf	sprintf@c& (0+255),w,b
  5199  0010DE  0D02               	mullw	2
  5200  0010E0  0E01               	movlw	low _dpowers
  5201  0010E2  24F3               	addwf	prodl,w,c
  5202  0010E4  6EF6               	movwf	tblptrl,c
  5203  0010E6  0E03               	movlw	high _dpowers
  5204  0010E8  20F4               	addwfc	prodh,w,c
  5205  0010EA  6EF7               	movwf	tblptrh,c
  5206  0010EC                     	if	0	;There are less than 3 active tblptr bytes
  5207  0010EC                     	endif
  5208  0010EC  0009               	tblrd		*+
  5209  0010EE  50F5               	movf	tablat,w,c
  5210  0010F0  0100               	movlb	0	; () banked
  5211  0010F2  5D67               	subwf	sprintf@val& (0+255),w,b
  5212  0010F4  0009               	tblrd		*+
  5213  0010F6  50F5               	movf	tablat,w,c
  5214  0010F8  0100               	movlb	0	; () banked
  5215  0010FA  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5216  0010FC  A0D8               	btfss	status,0,c
  5217  0010FE  D003               	goto	l3078
  5218                           
  5219                           ; BSR set to: 0
  5220                           
  5221                           ; BSR set to: 0
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;doprnt.c: 1307: break;
  5225  001100  0100               	movlb	0	; () banked
  5226  001102  2B6C               	incf	sprintf@c& (0+255),f,b
  5227  001104  D7E5               	goto	l3066
  5228  001106                     l3078:
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5232  001106  0100               	movlb	0	; () banked
  5233  001108  516A               	movf	sprintf@width& (0+255),w,b
  5234  00110A  0100               	movlb	0	; () banked
  5235  00110C  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5236  00110E  B4D8               	btfsc	status,2,c
  5237  001110  D00B               	goto	l3084
  5238                           
  5239                           ; BSR set to: 0
  5240  001112  C069  F060         	movff	sprintf@flag,??_sprintf
  5241  001116  0E03               	movlw	3
  5242  001118  0100               	movlb	0	; () banked
  5243  00111A  1760               	andwf	??_sprintf& (0+255),f,b
  5244  00111C  B4D8               	btfsc	status,2,c
  5245  00111E  D004               	goto	l3084
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;doprnt.c: 1346: width--;
  5249  001120  0100               	movlb	0	; () banked
  5250  001122  076A               	decf	sprintf@width& (0+255),f,b
  5251  001124  A0D8               	btfss	status,0,c
  5252  001126  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5253  001128                     l3084:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;doprnt.c: 1381: if(width > c)
  5257  001128  0E80               	movlw	128
  5258  00112A  0100               	movlb	0	; () banked
  5259  00112C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5260  00112E  0E7F               	movlw	127
  5261  001130  0100               	movlb	0	; () banked
  5262  001132  6F60               	movwf	??_sprintf& (0+255),b
  5263  001134  0100               	movlb	0	; () banked
  5264  001136  516A               	movf	sprintf@width& (0+255),w,b
  5265  001138  0100               	movlb	0	; () banked
  5266  00113A  5D6C               	subwf	sprintf@c& (0+255),w,b
  5267  00113C  0100               	movlb	0	; () banked
  5268  00113E  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5269  001140  0A80               	xorlw	128
  5270  001142  0100               	movlb	0	; () banked
  5271  001144  5960               	subwfb	??_sprintf& (0+255),w,b
  5272  001146  B0D8               	btfsc	status,0,c
  5273  001148  D00B               	goto	l3088
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;doprnt.c: 1382: width -= c;
  5277  00114A  0100               	movlb	0	; () banked
  5278  00114C  516C               	movf	sprintf@c& (0+255),w,b
  5279  00114E  0100               	movlb	0	; () banked
  5280  001150  5F6A               	subwf	sprintf@width& (0+255),f,b
  5281  001152  0E00               	movlw	0
  5282  001154  0100               	movlb	0	; () banked
  5283  001156  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5284  001158  0EFF               	movlw	255
  5285  00115A  0100               	movlb	0	; () banked
  5286  00115C  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5287  00115E  D005               	goto	l3090
  5288  001160                     l3088:
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;doprnt.c: 1383: else
  5292                           ;doprnt.c: 1384: width = 0;
  5293  001160  0E00               	movlw	0
  5294  001162  0100               	movlb	0	; () banked
  5295  001164  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5296  001166  0E00               	movlw	0
  5297  001168  6F6A               	movwf	sprintf@width& (0+255),b
  5298  00116A                     l3090:
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;doprnt.c: 1387: if(flag & 0x04) {
  5302  00116A  0100               	movlb	0	; () banked
  5303  00116C  A569               	btfss	sprintf@flag& (0+255),2,b
  5304  00116E  D022               	goto	l3106
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;doprnt.c: 1392: if(flag & 0x03)
  5308  001170  C069  F060         	movff	sprintf@flag,??_sprintf
  5309  001174  0E03               	movlw	3
  5310  001176  0100               	movlb	0	; () banked
  5311  001178  1760               	andwf	??_sprintf& (0+255),f,b
  5312  00117A  B4D8               	btfsc	status,2,c
  5313  00117C  D008               	goto	l3098
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5317  00117E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5318  001182  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5319  001186  0E2D               	movlw	45
  5320  001188  6EDF               	movwf	indf2,c
  5321                           
  5322                           ; BSR set to: 0
  5323  00118A  4A30               	infsnz	sprintf@sp,f,c
  5324  00118C  2A31               	incf	sprintf@sp+1,f,c
  5325  00118E                     l3098:
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;doprnt.c: 1415: if(width)
  5329  00118E  0100               	movlb	0	; () banked
  5330  001190  516A               	movf	sprintf@width& (0+255),w,b
  5331  001192  0100               	movlb	0	; () banked
  5332  001194  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5333  001196  B4D8               	btfsc	status,2,c
  5334  001198  D034               	goto	l3120
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5338                           
  5339                           ; BSR set to: 0
  5340                           
  5341                           ;doprnt.c: 1416: do
  5342  00119A  C030  FFD9         	movff	sprintf@sp,fsr2l
  5343  00119E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5344  0011A2  0E30               	movlw	48
  5345  0011A4  6EDF               	movwf	indf2,c
  5346                           
  5347                           ; BSR set to: 0
  5348  0011A6  4A30               	infsnz	sprintf@sp,f,c
  5349  0011A8  2A31               	incf	sprintf@sp+1,f,c
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;doprnt.c: 1418: while(--width);
  5353  0011AA  0100               	movlb	0	; () banked
  5354  0011AC  076A               	decf	sprintf@width& (0+255),f,b
  5355  0011AE  A0D8               	btfss	status,0,c
  5356  0011B0  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5357  0011B2  D7ED               	goto	l3098
  5358  0011B4                     l3106:
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;doprnt.c: 1422: {
  5362                           ;doprnt.c: 1424: if(width
  5363                           ;doprnt.c: 1428: )
  5364  0011B4  0100               	movlb	0	; () banked
  5365  0011B6  516A               	movf	sprintf@width& (0+255),w,b
  5366  0011B8  0100               	movlb	0	; () banked
  5367  0011BA  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5368  0011BC  B4D8               	btfsc	status,2,c
  5369  0011BE  D012               	goto	l3114
  5370  0011C0                     l3108:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5374  0011C0  C030  FFD9         	movff	sprintf@sp,fsr2l
  5375  0011C4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5376  0011C8  0E20               	movlw	32
  5377  0011CA  6EDF               	movwf	indf2,c
  5378                           
  5379                           ; BSR set to: 0
  5380  0011CC  4A30               	infsnz	sprintf@sp,f,c
  5381  0011CE  2A31               	incf	sprintf@sp+1,f,c
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;doprnt.c: 1431: while(--width);
  5385  0011D0  0100               	movlb	0	; () banked
  5386  0011D2  076A               	decf	sprintf@width& (0+255),f,b
  5387  0011D4  A0D8               	btfss	status,0,c
  5388  0011D6  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5389  0011D8  0100               	movlb	0	; () banked
  5390  0011DA  516A               	movf	sprintf@width& (0+255),w,b
  5391  0011DC  0100               	movlb	0	; () banked
  5392  0011DE  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5393  0011E0  A4D8               	btfss	status,2,c
  5394  0011E2  D7EE               	goto	l3108
  5395  0011E4                     l3114:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;doprnt.c: 1438: if(flag & 0x03)
  5399  0011E4  C069  F060         	movff	sprintf@flag,??_sprintf
  5400  0011E8  0E03               	movlw	3
  5401  0011EA  0100               	movlb	0	; () banked
  5402  0011EC  1760               	andwf	??_sprintf& (0+255),f,b
  5403  0011EE  B4D8               	btfsc	status,2,c
  5404  0011F0  D008               	goto	l3120
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5408  0011F2  C030  FFD9         	movff	sprintf@sp,fsr2l
  5409  0011F6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5410  0011FA  0E2D               	movlw	45
  5411  0011FC  6EDF               	movwf	indf2,c
  5412                           
  5413                           ; BSR set to: 0
  5414  0011FE  4A30               	infsnz	sprintf@sp,f,c
  5415  001200  2A31               	incf	sprintf@sp+1,f,c
  5416  001202                     l3120:
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;doprnt.c: 1469: }
  5420                           ;doprnt.c: 1472: prec = c;
  5421  001202  C06C  F066         	movff	sprintf@c,sprintf@prec
  5422                           
  5423                           ;doprnt.c: 1474: while(prec--) {
  5424  001206  D02B               	goto	l3128
  5425  001208                     l3122:
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;doprnt.c: 1478: {
  5429                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5430  001208  0100               	movlb	0	; () banked
  5431  00120A  5166               	movf	sprintf@prec& (0+255),w,b
  5432  00120C  0D02               	mullw	2
  5433  00120E  0E01               	movlw	low _dpowers
  5434  001210  24F3               	addwf	prodl,w,c
  5435  001212  6EF6               	movwf	tblptrl,c
  5436  001214  0E03               	movlw	high _dpowers
  5437  001216  20F4               	addwfc	prodh,w,c
  5438  001218  6EF7               	movwf	tblptrh,c
  5439  00121A                     	if	0	;There are less than 3 active tblptr bytes
  5440  00121A                     	endif
  5441  00121A  0009               	tblrd		*+
  5442  00121C  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5443  001220  000A               	tblrd		*-
  5444  001222  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5445  001226  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5446  00122A  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5447  00122E  EC02  F00D         	call	___lwdiv	;wreg free
  5448  001232  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5449  001236  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5450  00123A  0E00               	movlw	0
  5451  00123C  6E2E               	movwf	___lwmod@divisor+1,c
  5452  00123E  0E0A               	movlw	10
  5453  001240  6E2D               	movwf	___lwmod@divisor,c
  5454  001242  EC2B  F00D         	call	___lwmod	;wreg free
  5455  001246  502B               	movf	?___lwmod,w,c
  5456  001248  0F30               	addlw	48
  5457  00124A  0100               	movlb	0	; () banked
  5458  00124C  6F6C               	movwf	sprintf@c& (0+255),b
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;doprnt.c: 1523: }
  5462                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5463  00124E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5464  001252  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5465  001256  C06C  FFDF         	movff	sprintf@c,indf2
  5466                           
  5467                           ; BSR set to: 0
  5468  00125A  4A30               	infsnz	sprintf@sp,f,c
  5469  00125C  2A31               	incf	sprintf@sp+1,f,c
  5470  00125E                     l3128:
  5471                           
  5472                           ; BSR set to: 0
  5473  00125E  0100               	movlb	0	; () banked
  5474  001260  0766               	decf	sprintf@prec& (0+255),f,b
  5475  001262  0100               	movlb	0	; () banked
  5476  001264  2966               	incf	sprintf@prec& (0+255),w,b
  5477  001266  A4D8               	btfss	status,2,c
  5478  001268  D7CF               	goto	l3122
  5479  00126A                     l3130:
  5480  00126A  C032  FFF6         	movff	sprintf@f,tblptrl
  5481  00126E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5482  001272  4A32               	infsnz	sprintf@f,f,c
  5483  001274  2A33               	incf	sprintf@f+1,f,c
  5484  001276                     	if	0	;tblptru may be non-zero
  5485  001276                     	endif
  5486  001276                     	if	0	;tblptru may be non-zero
  5487  001276                     	endif
  5488  001276  0008               	tblrd		*
  5489  001278  CFF5 F06C          	movff	tablat,sprintf@c
  5490  00127C  0100               	movlb	0	; () banked
  5491  00127E  516C               	movf	sprintf@c& (0+255),w,b
  5492  001280  A4D8               	btfss	status,2,c
  5493  001282  D68B               	goto	l3024
  5494  001284                     l3132:
  5495                           
  5496                           ;doprnt.c: 1538: *sp = 0;
  5497  001284  C030  FFD9         	movff	sprintf@sp,fsr2l
  5498  001288  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5499  00128C  0E00               	movlw	0
  5500  00128E  6EDF               	movwf	indf2,c
  5501  001290  0012               	return	
  5502  001292                     __end_of_sprintf:
  5503                           	opt stack 0
  5504                           tblptru	equ	0xFF8
  5505                           tblptrh	equ	0xFF7
  5506                           tblptrl	equ	0xFF6
  5507                           tablat	equ	0xFF5
  5508                           prodh	equ	0xFF4
  5509                           prodl	equ	0xFF3
  5510                           intcon	equ	0xFF2
  5511                           postinc0	equ	0xFEE
  5512                           wreg	equ	0xFE8
  5513                           indf1	equ	0xFE7
  5514                           plusw1	equ	0xFE3
  5515                           fsr1h	equ	0xFE2
  5516                           fsr1l	equ	0xFE1
  5517                           indf2	equ	0xFDF
  5518                           postinc2	equ	0xFDE
  5519                           postdec2	equ	0xFDD
  5520                           plusw2	equ	0xFDB
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8
  5524                           
  5525 ;; *************** function _isdigit *****************
  5526 ;; Defined at:
  5527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  c               1    wreg     unsigned char 
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;  c               1   37[COMRAM] unsigned char 
  5532 ;; Return value:  Size  Location     Type
  5533 ;;		None               void
  5534 ;; Registers used:
  5535 ;;		wreg, status,2, status,0
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5541 ;;      Params:         0       0       0       0
  5542 ;;      Locals:         2       0       0       0
  5543 ;;      Temps:          1       0       0       0
  5544 ;;      Totals:         3       0       0       0
  5545 ;;Total ram usage:        3 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    3
  5548 ;; This function calls:
  5549 ;;		Nothing
  5550 ;; This function is called by:
  5551 ;;		_sprintf
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           	psect	text19
  5556  001CF8                     __ptext19:
  5557                           	opt stack 0
  5558  001CF8                     _isdigit:
  5559                           	opt stack 26
  5560                           
  5561                           ;incstack = 0
  5562                           ;isdigit@c stored from wreg
  5563  001CF8  6E26               	movwf	isdigit@c,c
  5564  001CFA  0E00               	movlw	0
  5565  001CFC  6E25               	movwf	_isdigit$1986,c
  5566  001CFE  0E3A               	movlw	58
  5567  001D00  6026               	cpfslt	isdigit@c,c
  5568  001D02  D005               	goto	l2130
  5569  001D04  0E2F               	movlw	47
  5570  001D06  6426               	cpfsgt	isdigit@c,c
  5571  001D08  D002               	goto	l2130
  5572  001D0A  0E01               	movlw	1
  5573  001D0C  6E25               	movwf	_isdigit$1986,c
  5574  001D0E                     l2130:
  5575  001D0E  C025  F024         	movff	_isdigit$1986,??_isdigit
  5576  001D12  3024               	rrcf	??_isdigit,w,c
  5577  001D14  0012               	return	
  5578  001D16                     __end_of_isdigit:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           indf1	equ	0xFE7
  5590                           plusw1	equ	0xFE3
  5591                           fsr1h	equ	0xFE2
  5592                           fsr1l	equ	0xFE1
  5593                           indf2	equ	0xFDF
  5594                           postinc2	equ	0xFDE
  5595                           postdec2	equ	0xFDD
  5596                           plusw2	equ	0xFDB
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function ___wmul *****************
  5602 ;; Defined at:
  5603 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  multiplier      2   35[COMRAM] unsigned int 
  5606 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;  product         2   39[COMRAM] unsigned int 
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  2   35[COMRAM] unsigned int 
  5611 ;; Registers used:
  5612 ;;		wreg, status,2, status,0, prodl, prodh
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5618 ;;      Params:         4       0       0       0
  5619 ;;      Locals:         2       0       0       0
  5620 ;;      Temps:          0       0       0       0
  5621 ;;      Totals:         6       0       0       0
  5622 ;;Total ram usage:        6 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    3
  5625 ;; This function calls:
  5626 ;;		Nothing
  5627 ;; This function is called by:
  5628 ;;		_setMotorPWM
  5629 ;;		_sprintf
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           	psect	text20
  5634  001CB0                     __ptext20:
  5635                           	opt stack 0
  5636  001CB0                     ___wmul:
  5637                           	opt stack 24
  5638                           
  5639                           ;incstack = 0
  5640  001CB0  5024               	movf	___wmul@multiplier,w,c
  5641  001CB2  0226               	mulwf	___wmul@multiplicand,c
  5642  001CB4  CFF3 F028          	movff	prodl,___wmul@product
  5643  001CB8  CFF4 F029          	movff	prodh,___wmul@product+1
  5644  001CBC  5024               	movf	___wmul@multiplier,w,c
  5645  001CBE  0227               	mulwf	___wmul@multiplicand+1,c
  5646  001CC0  50F3               	movf	prodl,w,c
  5647  001CC2  2629               	addwf	___wmul@product+1,f,c
  5648  001CC4  5025               	movf	___wmul@multiplier+1,w,c
  5649  001CC6  0226               	mulwf	___wmul@multiplicand,c
  5650  001CC8  50F3               	movf	prodl,w,c
  5651  001CCA  2629               	addwf	___wmul@product+1,f,c
  5652  001CCC  C028  F024         	movff	___wmul@product,?___wmul
  5653  001CD0  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5654  001CD4  0012               	return	
  5655  001CD6                     __end_of___wmul:
  5656                           	opt stack 0
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           intcon	equ	0xFF2
  5664                           postinc0	equ	0xFEE
  5665                           wreg	equ	0xFE8
  5666                           indf1	equ	0xFE7
  5667                           plusw1	equ	0xFE3
  5668                           fsr1h	equ	0xFE2
  5669                           fsr1l	equ	0xFE1
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           postdec2	equ	0xFDD
  5673                           plusw2	equ	0xFDB
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function ___lwmod *****************
  5679 ;; Defined at:
  5680 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  dividend        2   42[COMRAM] unsigned int 
  5683 ;;  divisor         2   44[COMRAM] unsigned int 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  counter         1   46[COMRAM] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  2   42[COMRAM] unsigned int 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5695 ;;      Params:         4       0       0       0
  5696 ;;      Locals:         1       0       0       0
  5697 ;;      Temps:          0       0       0       0
  5698 ;;      Totals:         5       0       0       0
  5699 ;;Total ram usage:        5 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    3
  5702 ;; This function calls:
  5703 ;;		Nothing
  5704 ;; This function is called by:
  5705 ;;		_sprintf
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text21
  5710  001A56                     __ptext21:
  5711                           	opt stack 0
  5712  001A56                     ___lwmod:
  5713                           	opt stack 26
  5714                           
  5715                           ;incstack = 0
  5716  001A56  502D               	movf	___lwmod@divisor,w,c
  5717  001A58  102E               	iorwf	___lwmod@divisor+1,w,c
  5718  001A5A  B4D8               	btfsc	status,2,c
  5719  001A5C  D018               	goto	l907
  5720  001A5E  0E01               	movlw	1
  5721  001A60  6E2F               	movwf	___lwmod@counter,c
  5722  001A62  D004               	goto	l2162
  5723  001A64                     l2160:
  5724  001A64  90D8               	bcf	status,0,c
  5725  001A66  362D               	rlcf	___lwmod@divisor,f,c
  5726  001A68  362E               	rlcf	___lwmod@divisor+1,f,c
  5727  001A6A  2A2F               	incf	___lwmod@counter,f,c
  5728  001A6C                     l2162:
  5729  001A6C  AE2E               	btfss	___lwmod@divisor+1,7,c
  5730  001A6E  D7FA               	goto	l2160
  5731  001A70                     l2164:
  5732  001A70  502D               	movf	___lwmod@divisor,w,c
  5733  001A72  5C2B               	subwf	___lwmod@dividend,w,c
  5734  001A74  502E               	movf	___lwmod@divisor+1,w,c
  5735  001A76  582C               	subwfb	___lwmod@dividend+1,w,c
  5736  001A78  A0D8               	btfss	status,0,c
  5737  001A7A  D004               	goto	l2168
  5738  001A7C  502D               	movf	___lwmod@divisor,w,c
  5739  001A7E  5E2B               	subwf	___lwmod@dividend,f,c
  5740  001A80  502E               	movf	___lwmod@divisor+1,w,c
  5741  001A82  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5742  001A84                     l2168:
  5743  001A84  90D8               	bcf	status,0,c
  5744  001A86  322E               	rrcf	___lwmod@divisor+1,f,c
  5745  001A88  322D               	rrcf	___lwmod@divisor,f,c
  5746  001A8A  2E2F               	decfsz	___lwmod@counter,f,c
  5747  001A8C  D7F1               	goto	l2164
  5748  001A8E                     l907:
  5749  001A8E  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5750  001A92  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5751  001A96  0012               	return		;funcret
  5752  001A98                     __end_of___lwmod:
  5753                           	opt stack 0
  5754                           tblptru	equ	0xFF8
  5755                           tblptrh	equ	0xFF7
  5756                           tblptrl	equ	0xFF6
  5757                           tablat	equ	0xFF5
  5758                           prodh	equ	0xFF4
  5759                           prodl	equ	0xFF3
  5760                           intcon	equ	0xFF2
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           indf1	equ	0xFE7
  5764                           plusw1	equ	0xFE3
  5765                           fsr1h	equ	0xFE2
  5766                           fsr1l	equ	0xFE1
  5767                           indf2	equ	0xFDF
  5768                           postinc2	equ	0xFDE
  5769                           postdec2	equ	0xFDD
  5770                           plusw2	equ	0xFDB
  5771                           fsr2h	equ	0xFDA
  5772                           fsr2l	equ	0xFD9
  5773                           status	equ	0xFD8
  5774                           
  5775 ;; *************** function ___lwdiv *****************
  5776 ;; Defined at:
  5777 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  dividend        2   35[COMRAM] unsigned int 
  5780 ;;  divisor         2   37[COMRAM] unsigned int 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  quotient        2   39[COMRAM] unsigned int 
  5783 ;;  counter         1   41[COMRAM] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  2   35[COMRAM] unsigned int 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5793 ;;      Params:         4       0       0       0
  5794 ;;      Locals:         3       0       0       0
  5795 ;;      Temps:          0       0       0       0
  5796 ;;      Totals:         7       0       0       0
  5797 ;;Total ram usage:        7 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    3
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		_sprintf
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text22
  5808  001A04                     __ptext22:
  5809                           	opt stack 0
  5810  001A04                     ___lwdiv:
  5811                           	opt stack 26
  5812                           
  5813                           ;incstack = 0
  5814  001A04  0E00               	movlw	0
  5815  001A06  6E29               	movwf	___lwdiv@quotient+1,c
  5816  001A08  0E00               	movlw	0
  5817  001A0A  6E28               	movwf	___lwdiv@quotient,c
  5818  001A0C  5026               	movf	___lwdiv@divisor,w,c
  5819  001A0E  1027               	iorwf	___lwdiv@divisor+1,w,c
  5820  001A10  B4D8               	btfsc	status,2,c
  5821  001A12  D01C               	goto	l897
  5822  001A14  0E01               	movlw	1
  5823  001A16  6E2A               	movwf	___lwdiv@counter,c
  5824  001A18  D004               	goto	l2142
  5825  001A1A                     l2140:
  5826  001A1A  90D8               	bcf	status,0,c
  5827  001A1C  3626               	rlcf	___lwdiv@divisor,f,c
  5828  001A1E  3627               	rlcf	___lwdiv@divisor+1,f,c
  5829  001A20  2A2A               	incf	___lwdiv@counter,f,c
  5830  001A22                     l2142:
  5831  001A22  AE27               	btfss	___lwdiv@divisor+1,7,c
  5832  001A24  D7FA               	goto	l2140
  5833  001A26                     l2144:
  5834  001A26  90D8               	bcf	status,0,c
  5835  001A28  3628               	rlcf	___lwdiv@quotient,f,c
  5836  001A2A  3629               	rlcf	___lwdiv@quotient+1,f,c
  5837  001A2C  5026               	movf	___lwdiv@divisor,w,c
  5838  001A2E  5C24               	subwf	___lwdiv@dividend,w,c
  5839  001A30  5027               	movf	___lwdiv@divisor+1,w,c
  5840  001A32  5825               	subwfb	___lwdiv@dividend+1,w,c
  5841  001A34  A0D8               	btfss	status,0,c
  5842  001A36  D005               	goto	l2152
  5843  001A38  5026               	movf	___lwdiv@divisor,w,c
  5844  001A3A  5E24               	subwf	___lwdiv@dividend,f,c
  5845  001A3C  5027               	movf	___lwdiv@divisor+1,w,c
  5846  001A3E  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5847  001A40  8028               	bsf	___lwdiv@quotient,0,c
  5848  001A42                     l2152:
  5849  001A42  90D8               	bcf	status,0,c
  5850  001A44  3227               	rrcf	___lwdiv@divisor+1,f,c
  5851  001A46  3226               	rrcf	___lwdiv@divisor,f,c
  5852  001A48  2E2A               	decfsz	___lwdiv@counter,f,c
  5853  001A4A  D7ED               	goto	l2144
  5854  001A4C                     l897:
  5855  001A4C  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5856  001A50  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5857  001A54  0012               	return		;funcret
  5858  001A56                     __end_of___lwdiv:
  5859                           	opt stack 0
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           intcon	equ	0xFF2
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           indf1	equ	0xFE7
  5870                           plusw1	equ	0xFE3
  5871                           fsr1h	equ	0xFE2
  5872                           fsr1l	equ	0xFE1
  5873                           indf2	equ	0xFDF
  5874                           postinc2	equ	0xFDE
  5875                           postdec2	equ	0xFDD
  5876                           plusw2	equ	0xFDB
  5877                           fsr2h	equ	0xFDA
  5878                           fsr2l	equ	0xFD9
  5879                           status	equ	0xFD8
  5880                           
  5881 ;; *************** function _grabRightIR *****************
  5882 ;; Defined at:
  5883 ;;		line 74 in file "IR_Reading.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;		None
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5888 ;;  i               1   42[COMRAM] unsigned char 
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  2   35[COMRAM] unsigned int 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, status,0
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5898 ;;      Params:         2       0       0       0
  5899 ;;      Locals:         3       0       0       0
  5900 ;;      Temps:          3       0       0       0
  5901 ;;      Totals:         8       0       0       0
  5902 ;;Total ram usage:        8 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    3
  5905 ;; This function calls:
  5906 ;;		Nothing
  5907 ;; This function is called by:
  5908 ;;		_ScanIR
  5909 ;;		_ScanWithRange
  5910 ;;		_main
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text23
  5915  00186A                     __ptext23:
  5916                           	opt stack 0
  5917  00186A                     _grabRightIR:
  5918                           	opt stack 27
  5919                           
  5920                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5921                           
  5922                           ;incstack = 0
  5923  00186A  0E00               	movlw	0
  5924  00186C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5925  00186E  0E00               	movlw	0
  5926  001870  6E29               	movwf	grabRightIR@IR_signal,c
  5927                           
  5928                           ;IR_Reading.c: 77: unsigned char i=0;
  5929  001872  0E00               	movlw	0
  5930  001874  6E2B               	movwf	grabRightIR@i,c
  5931                           
  5932                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5933  001876  0E00               	movlw	0
  5934  001878  6E2B               	movwf	grabRightIR@i,c
  5935  00187A                     l2204:
  5936  00187A  0E03               	movlw	3
  5937  00187C  642B               	cpfsgt	grabRightIR@i,c
  5938  00187E  D001               	goto	l2208
  5939  001880  D01E               	goto	l2214
  5940  001882                     l2208:
  5941                           
  5942                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5943  001882  5069               	movf	3945,w,c	;volatile
  5944  001884  6E26               	movwf	??_grabRightIR& (0+255),c
  5945  001886  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5946  001888  0E07               	movlw	7
  5947  00188A                     u1505:
  5948  00188A  90D8               	bcf	status,0,c
  5949  00188C  3626               	rlcf	??_grabRightIR,f,c
  5950  00188E  3627               	rlcf	??_grabRightIR+1,f,c
  5951  001890  2EE8               	decfsz	wreg,f,c
  5952  001892  D7FB               	goto	u1505
  5953  001894  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5954  001898  90D8               	bcf	status,0,c
  5955  00189A  3228               	rrcf	??_grabRightIR+2,f,c
  5956  00189C  5028               	movf	??_grabRightIR+2,w,c
  5957  00189E  1226               	iorwf	??_grabRightIR,f,c
  5958  0018A0  0E00               	movlw	0
  5959  0018A2  1227               	iorwf	??_grabRightIR+1,f,c
  5960  0018A4  5026               	movf	??_grabRightIR,w,c
  5961  0018A6  2629               	addwf	grabRightIR@IR_signal,f,c
  5962  0018A8  5027               	movf	??_grabRightIR+1,w,c
  5963  0018AA  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5964                           
  5965                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5966  0018AC  0E82               	movlw	130
  5967  0018AE  6E26               	movwf	??_grabRightIR& (0+255),c
  5968  0018B0  0EDE               	movlw	222
  5969  0018B2                     u3167:
  5970  0018B2  2EE8               	decfsz	wreg,f,c
  5971  0018B4  D7FE               	goto	u3167
  5972  0018B6  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5973  0018B8  D7FC               	goto	u3167
  5974  0018BA  2A2B               	incf	grabRightIR@i,f,c
  5975  0018BC  D7DE               	goto	l2204
  5976  0018BE                     l2214:
  5977                           
  5978                           ;IR_Reading.c: 83: }
  5979                           ;IR_Reading.c: 85: return IR_signal>>2;
  5980  0018BE  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5981  0018C2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5982  0018C6  90D8               	bcf	status,0,c
  5983  0018C8  3227               	rrcf	??_grabRightIR+1,f,c
  5984  0018CA  3226               	rrcf	??_grabRightIR,f,c
  5985  0018CC  90D8               	bcf	status,0,c
  5986  0018CE  3227               	rrcf	??_grabRightIR+1,f,c
  5987  0018D0  3226               	rrcf	??_grabRightIR,f,c
  5988  0018D2  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5989  0018D6  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5990  0018DA  0012               	return	
  5991  0018DC                     __end_of_grabRightIR:
  5992                           	opt stack 0
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           intcon	equ	0xFF2
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           indf1	equ	0xFE7
  6003                           plusw1	equ	0xFE3
  6004                           fsr1h	equ	0xFE2
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           plusw2	equ	0xFDB
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function _grabLeftIR *****************
  6015 ;; Defined at:
  6016 ;;		line 90 in file "IR_Reading.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;		None
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6021 ;;  i               1   42[COMRAM] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  2   35[COMRAM] unsigned int 
  6024 ;; Registers used:
  6025 ;;		wreg, status,2, status,0
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6031 ;;      Params:         2       0       0       0
  6032 ;;      Locals:         3       0       0       0
  6033 ;;      Temps:          3       0       0       0
  6034 ;;      Totals:         8       0       0       0
  6035 ;;Total ram usage:        8 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    3
  6038 ;; This function calls:
  6039 ;;		Nothing
  6040 ;; This function is called by:
  6041 ;;		_ScanIR
  6042 ;;		_ScanWithRange
  6043 ;;		_main
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text24
  6048  0018DC                     __ptext24:
  6049                           	opt stack 0
  6050  0018DC                     _grabLeftIR:
  6051                           	opt stack 27
  6052                           
  6053                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6054                           
  6055                           ;incstack = 0
  6056  0018DC  0E00               	movlw	0
  6057  0018DE  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6058  0018E0  0E00               	movlw	0
  6059  0018E2  6E29               	movwf	grabLeftIR@IR_signal,c
  6060                           
  6061                           ;IR_Reading.c: 93: unsigned char i=0;
  6062  0018E4  0E00               	movlw	0
  6063  0018E6  6E2B               	movwf	grabLeftIR@i,c
  6064                           
  6065                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6066  0018E8  0E00               	movlw	0
  6067  0018EA  6E2B               	movwf	grabLeftIR@i,c
  6068  0018EC                     l2220:
  6069  0018EC  0E03               	movlw	3
  6070  0018EE  642B               	cpfsgt	grabLeftIR@i,c
  6071  0018F0  D001               	goto	l2224
  6072  0018F2  D01E               	goto	l2230
  6073  0018F4                     l2224:
  6074                           
  6075                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6076  0018F4  5067               	movf	3943,w,c	;volatile
  6077  0018F6  6E26               	movwf	??_grabLeftIR& (0+255),c
  6078  0018F8  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6079  0018FA  0E07               	movlw	7
  6080  0018FC                     u1535:
  6081  0018FC  90D8               	bcf	status,0,c
  6082  0018FE  3626               	rlcf	??_grabLeftIR,f,c
  6083  001900  3627               	rlcf	??_grabLeftIR+1,f,c
  6084  001902  2EE8               	decfsz	wreg,f,c
  6085  001904  D7FB               	goto	u1535
  6086  001906  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6087  00190A  90D8               	bcf	status,0,c
  6088  00190C  3228               	rrcf	??_grabLeftIR+2,f,c
  6089  00190E  5028               	movf	??_grabLeftIR+2,w,c
  6090  001910  1226               	iorwf	??_grabLeftIR,f,c
  6091  001912  0E00               	movlw	0
  6092  001914  1227               	iorwf	??_grabLeftIR+1,f,c
  6093  001916  5026               	movf	??_grabLeftIR,w,c
  6094  001918  2629               	addwf	grabLeftIR@IR_signal,f,c
  6095  00191A  5027               	movf	??_grabLeftIR+1,w,c
  6096  00191C  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6097                           
  6098                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6099  00191E  0E82               	movlw	130
  6100  001920  6E26               	movwf	??_grabLeftIR& (0+255),c
  6101  001922  0EDE               	movlw	222
  6102  001924                     u3177:
  6103  001924  2EE8               	decfsz	wreg,f,c
  6104  001926  D7FE               	goto	u3177
  6105  001928  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6106  00192A  D7FC               	goto	u3177
  6107  00192C  2A2B               	incf	grabLeftIR@i,f,c
  6108  00192E  D7DE               	goto	l2220
  6109  001930                     l2230:
  6110                           
  6111                           ;IR_Reading.c: 99: }
  6112                           ;IR_Reading.c: 101: return IR_signal>>2;
  6113  001930  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6114  001934  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6115  001938  90D8               	bcf	status,0,c
  6116  00193A  3227               	rrcf	??_grabLeftIR+1,f,c
  6117  00193C  3226               	rrcf	??_grabLeftIR,f,c
  6118  00193E  90D8               	bcf	status,0,c
  6119  001940  3227               	rrcf	??_grabLeftIR+1,f,c
  6120  001942  3226               	rrcf	??_grabLeftIR,f,c
  6121  001944  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6122  001948  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6123  00194C  0012               	return	
  6124  00194E                     __end_of_grabLeftIR:
  6125                           	opt stack 0
  6126                           tblptru	equ	0xFF8
  6127                           tblptrh	equ	0xFF7
  6128                           tblptrl	equ	0xFF6
  6129                           tablat	equ	0xFF5
  6130                           prodh	equ	0xFF4
  6131                           prodl	equ	0xFF3
  6132                           intcon	equ	0xFF2
  6133                           postinc0	equ	0xFEE
  6134                           wreg	equ	0xFE8
  6135                           indf1	equ	0xFE7
  6136                           plusw1	equ	0xFE3
  6137                           fsr1h	equ	0xFE2
  6138                           fsr1l	equ	0xFE1
  6139                           indf2	equ	0xFDF
  6140                           postinc2	equ	0xFDE
  6141                           postdec2	equ	0xFDD
  6142                           plusw2	equ	0xFDB
  6143                           fsr2h	equ	0xFDA
  6144                           fsr2l	equ	0xFD9
  6145                           status	equ	0xFD8
  6146                           
  6147 ;; *************** function _SetLine *****************
  6148 ;; Defined at:
  6149 ;;		line 74 in file "LCD.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;  line            1    wreg     unsigned char 
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;  line            1   41[COMRAM] unsigned char 
  6154 ;; Return value:  Size  Location     Type
  6155 ;;		None               void
  6156 ;; Registers used:
  6157 ;;		wreg, status,2, status,0, cstack
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6163 ;;      Params:         0       0       0       0
  6164 ;;      Locals:         1       0       0       0
  6165 ;;      Temps:          0       0       0       0
  6166 ;;      Totals:         1       0       0       0
  6167 ;;Total ram usage:        1 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    6
  6170 ;; This function calls:
  6171 ;;		_SendLCD
  6172 ;; This function is called by:
  6173 ;;		_ScanIR
  6174 ;;		_ScanWithRange
  6175 ;;		_main
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           	psect	text25
  6180  001C2A                     __ptext25:
  6181                           	opt stack 0
  6182  001C2A                     _SetLine:
  6183                           	opt stack 24
  6184                           
  6185                           ;incstack = 0
  6186                           ;SetLine@line stored from wreg
  6187  001C2A  6E2A               	movwf	SetLine@line,c
  6188                           
  6189                           ;LCD.c: 75: if (line==1) {
  6190  001C2C  042A               	decf	SetLine@line,w,c
  6191  001C2E  A4D8               	btfss	status,2,c
  6192  001C30  D006               	goto	l2238
  6193                           
  6194                           ;LCD.c: 76: SendLCD(0x80,0);
  6195  001C32  0E00               	movlw	0
  6196  001C34  6E28               	movwf	SendLCD@type,c
  6197  001C36  0E80               	movlw	128
  6198  001C38  EC2D  F00E         	call	_SendLCD
  6199                           
  6200                           ;LCD.c: 77: } else if (line==2) {
  6201  001C3C  D009               	goto	l2242
  6202  001C3E                     l2238:
  6203  001C3E  0E02               	movlw	2
  6204  001C40  182A               	xorwf	SetLine@line,w,c
  6205  001C42  A4D8               	btfss	status,2,c
  6206  001C44  D005               	goto	l2242
  6207                           
  6208                           ;LCD.c: 78: SendLCD(0xC0,0);
  6209  001C46  0E00               	movlw	0
  6210  001C48  6E28               	movwf	SendLCD@type,c
  6211  001C4A  0EC0               	movlw	192
  6212  001C4C  EC2D  F00E         	call	_SendLCD
  6213  001C50                     l2242:
  6214                           
  6215                           ;LCD.c: 79: }
  6216                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6217  001C50  0E21               	movlw	33
  6218  001C52                     u3187:
  6219  001C52  2EE8               	decfsz	wreg,f,c
  6220  001C54  D7FE               	goto	u3187
  6221  001C56  F000               	nop	
  6222  001C58  0012               	return		;funcret
  6223  001C5A                     __end_of_SetLine:
  6224                           	opt stack 0
  6225                           tblptru	equ	0xFF8
  6226                           tblptrh	equ	0xFF7
  6227                           tblptrl	equ	0xFF6
  6228                           tablat	equ	0xFF5
  6229                           prodh	equ	0xFF4
  6230                           prodl	equ	0xFF3
  6231                           intcon	equ	0xFF2
  6232                           postinc0	equ	0xFEE
  6233                           wreg	equ	0xFE8
  6234                           indf1	equ	0xFE7
  6235                           plusw1	equ	0xFE3
  6236                           fsr1h	equ	0xFE2
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           plusw2	equ	0xFDB
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _LCD_String *****************
  6247 ;; Defined at:
  6248 ;;		line 83 in file "LCD.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  string          2   41[COMRAM] PTR unsigned char 
  6251 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6252 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6253 ;;		 -> STR_1(12), 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;		None
  6256 ;; Return value:  Size  Location     Type
  6257 ;;		None               void
  6258 ;; Registers used:
  6259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6265 ;;      Params:         2       0       0       0
  6266 ;;      Locals:         0       0       0       0
  6267 ;;      Temps:          0       0       0       0
  6268 ;;      Totals:         2       0       0       0
  6269 ;;Total ram usage:        2 bytes
  6270 ;; Hardware stack levels used:    1
  6271 ;; Hardware stack levels required when called:    6
  6272 ;; This function calls:
  6273 ;;		_SendLCD
  6274 ;; This function is called by:
  6275 ;;		_ScanIR
  6276 ;;		_ScanWithRange
  6277 ;;		_main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text26
  6282  00194E                     __ptext26:
  6283                           	opt stack 0
  6284  00194E                     _LCD_String:
  6285                           	opt stack 23
  6286                           
  6287                           ;LCD.c: 85: while(*string != 0){
  6288                           
  6289                           ;incstack = 0
  6290  00194E  D01A               	goto	l2252
  6291  001950                     l2246:
  6292                           
  6293                           ;LCD.c: 88: SendLCD(*string++,1);
  6294  001950  0E01               	movlw	1
  6295  001952  6E28               	movwf	SendLCD@type,c
  6296  001954  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6297  001958  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6298  00195C  6AF8               	clrf	tblptru,c
  6299  00195E  0E02               	movlw	(high __ramtop+-1)
  6300  001960  64F7               	cpfsgt	tblptrh,c
  6301  001962  D003               	bra	u1577
  6302  001964  0008               	tblrd		*
  6303  001966  50F5               	movf	tablat,w,c
  6304  001968  D005               	bra	u1570
  6305  00196A                     u1577:
  6306  00196A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6307  00196E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6308  001972  50E7               	movf	indf1,w,c
  6309  001974                     u1570:
  6310  001974  EC2D  F00E         	call	_SendLCD
  6311  001978  4A2A               	infsnz	LCD_String@string,f,c
  6312  00197A  2A2B               	incf	LCD_String@string+1,f,c
  6313                           
  6314                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6315  00197C  0E21               	movlw	33
  6316  00197E                     u3197:
  6317  00197E  2EE8               	decfsz	wreg,f,c
  6318  001980  D7FE               	goto	u3197
  6319  001982  F000               	nop	
  6320  001984                     l2252:
  6321  001984  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6322  001988  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6323  00198C  6AF8               	clrf	tblptru,c
  6324  00198E  0E02               	movlw	(high __ramtop+-1)
  6325  001990  64F7               	cpfsgt	tblptrh,c
  6326  001992  D003               	bra	u1587
  6327  001994  0008               	tblrd		*
  6328  001996  50F5               	movf	tablat,w,c
  6329  001998  D005               	bra	u1580
  6330  00199A                     u1587:
  6331  00199A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6332  00199E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6333  0019A2  50E7               	movf	indf1,w,c
  6334  0019A4                     u1580:
  6335  0019A4  0900               	iorlw	0
  6336  0019A6  B4D8               	btfsc	status,2,c
  6337  0019A8  0012               	return	
  6338  0019AA  D7D2               	goto	l2246
  6339  0019AC                     __end_of_LCD_String:
  6340                           	opt stack 0
  6341                           tblptru	equ	0xFF8
  6342                           tblptrh	equ	0xFF7
  6343                           tblptrl	equ	0xFF6
  6344                           tablat	equ	0xFF5
  6345                           prodh	equ	0xFF4
  6346                           prodl	equ	0xFF3
  6347                           intcon	equ	0xFF2
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           indf1	equ	0xFE7
  6351                           plusw1	equ	0xFE3
  6352                           fsr1h	equ	0xFE2
  6353                           fsr1l	equ	0xFE1
  6354                           indf2	equ	0xFDF
  6355                           postinc2	equ	0xFDE
  6356                           postdec2	equ	0xFDD
  6357                           plusw2	equ	0xFDB
  6358                           fsr2h	equ	0xFDA
  6359                           fsr2l	equ	0xFD9
  6360                           status	equ	0xFD8
  6361                           
  6362 ;; *************** function _SendLCD *****************
  6363 ;; Defined at:
  6364 ;;		line 27 in file "LCD.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;  Byte            1    wreg     unsigned char 
  6367 ;;  type            1   39[COMRAM] unsigned char 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;  Byte            1   40[COMRAM] unsigned char 
  6370 ;; Return value:  Size  Location     Type
  6371 ;;		None               void
  6372 ;; Registers used:
  6373 ;;		wreg, status,2, status,0, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6379 ;;      Params:         1       0       0       0
  6380 ;;      Locals:         1       0       0       0
  6381 ;;      Temps:          0       0       0       0
  6382 ;;      Totals:         2       0       0       0
  6383 ;;Total ram usage:        2 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    5
  6386 ;; This function calls:
  6387 ;;		_LCDout
  6388 ;; This function is called by:
  6389 ;;		_initLCD
  6390 ;;		_SetLine
  6391 ;;		_LCD_String
  6392 ;;		_ScanIR
  6393 ;;		_ScanWithRange
  6394 ;;		_main
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           	psect	text27
  6399  001C5A                     __ptext27:
  6400                           	opt stack 0
  6401  001C5A                     _SendLCD:
  6402                           	opt stack 24
  6403                           
  6404                           ;incstack = 0
  6405                           ;SendLCD@Byte stored from wreg
  6406  001C5A  6E29               	movwf	SendLCD@Byte,c
  6407                           
  6408                           ;LCD.c: 30: LATAbits.LATA6=type;
  6409  001C5C  B028               	btfsc	SendLCD@type,0,c
  6410  001C5E  D002               	bra	u1365
  6411  001C60  9C89               	bcf	3977,6,c	;volatile
  6412  001C62  D001               	bra	u1366
  6413  001C64                     u1365:
  6414  001C64  8C89               	bsf	3977,6,c	;volatile
  6415  001C66                     u1366:
  6416                           
  6417                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6418  001C66  3829               	swapf	SendLCD@Byte,w,c
  6419  001C68  0B0F               	andlw	15
  6420  001C6A  0B0F               	andlw	15
  6421  001C6C  EC63  F00A         	call	_LCDout
  6422                           
  6423                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6424  001C70  0E06               	movlw	6
  6425  001C72                     u3207:
  6426  001C72  2EE8               	decfsz	wreg,f,c
  6427  001C74  D7FE               	goto	u3207
  6428  001C76  D000               	nop2		;nop
  6429                           
  6430                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6431  001C78  5029               	movf	SendLCD@Byte,w,c
  6432  001C7A  0B0F               	andlw	15
  6433  001C7C  EC63  F00A         	call	_LCDout
  6434                           
  6435                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6436  001C80  0E21               	movlw	33
  6437  001C82                     u3217:
  6438  001C82  2EE8               	decfsz	wreg,f,c
  6439  001C84  D7FE               	goto	u3217
  6440  001C86  F000               	nop	
  6441  001C88  0012               	return		;funcret
  6442  001C8A                     __end_of_SendLCD:
  6443                           	opt stack 0
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodh	equ	0xFF4
  6449                           prodl	equ	0xFF3
  6450                           intcon	equ	0xFF2
  6451                           postinc0	equ	0xFEE
  6452                           wreg	equ	0xFE8
  6453                           indf1	equ	0xFE7
  6454                           plusw1	equ	0xFE3
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           plusw2	equ	0xFDB
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465 ;; *************** function _LCDout *****************
  6466 ;; Defined at:
  6467 ;;		line 14 in file "LCD.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  number          1    wreg     unsigned char 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  number          1   38[COMRAM] unsigned char 
  6472 ;; Return value:  Size  Location     Type
  6473 ;;		None               void
  6474 ;; Registers used:
  6475 ;;		wreg, status,2, status,0, cstack
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6481 ;;      Params:         0       0       0       0
  6482 ;;      Locals:         1       0       0       0
  6483 ;;      Temps:          3       0       0       0
  6484 ;;      Totals:         4       0       0       0
  6485 ;;Total ram usage:        4 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; Hardware stack levels required when called:    4
  6488 ;; This function calls:
  6489 ;;		_E_TOG
  6490 ;; This function is called by:
  6491 ;;		_SendLCD
  6492 ;;		_initLCD
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text28
  6497  0014C6                     __ptext28:
  6498                           	opt stack 0
  6499  0014C6                     _LCDout:
  6500                           	opt stack 24
  6501                           
  6502                           ;incstack = 0
  6503                           ;LCDout@number stored from wreg
  6504  0014C6  6E27               	movwf	LCDout@number,c
  6505                           
  6506                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6507  0014C8  5027               	movf	LCDout@number,w,c
  6508  0014CA  6E24               	movwf	??_LCDout& (0+255),c
  6509  0014CC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6510  0014CE  0E07               	movlw	7
  6511  0014D0                     u1255:
  6512  0014D0  90D8               	bcf	status,0,c
  6513  0014D2  3624               	rlcf	??_LCDout,f,c
  6514  0014D4  3625               	rlcf	??_LCDout+1,f,c
  6515  0014D6  2EE8               	decfsz	wreg,f,c
  6516  0014D8  D7FB               	goto	u1255
  6517  0014DA  0E07               	movlw	7
  6518  0014DC  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6519  0014DE                     u1265:
  6520  0014DE  3425               	rlcf	??_LCDout+1,w,c
  6521  0014E0  3225               	rrcf	??_LCDout+1,f,c
  6522  0014E2  3224               	rrcf	??_LCDout,f,c
  6523  0014E4  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6524  0014E6  D7FB               	goto	u1265
  6525  0014E8  4624               	rlncf	??_LCDout,f,c
  6526  0014EA  508B               	movf	3979,w,c	;volatile
  6527  0014EC  1824               	xorwf	??_LCDout,w,c
  6528  0014EE  0BFD               	andlw	-3
  6529  0014F0  1824               	xorwf	??_LCDout,w,c
  6530  0014F2  6E8B               	movwf	3979,c	;volatile
  6531                           
  6532                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6533  0014F4  5027               	movf	LCDout@number,w,c
  6534  0014F6  6E24               	movwf	??_LCDout& (0+255),c
  6535  0014F8  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6536  0014FA  0E06               	movlw	6
  6537  0014FC                     u1275:
  6538  0014FC  90D8               	bcf	status,0,c
  6539  0014FE  3624               	rlcf	??_LCDout,f,c
  6540  001500  3625               	rlcf	??_LCDout+1,f,c
  6541  001502  2EE8               	decfsz	wreg,f,c
  6542  001504  D7FB               	goto	u1275
  6543  001506  0E07               	movlw	7
  6544  001508  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6545  00150A                     u1285:
  6546  00150A  3425               	rlcf	??_LCDout+1,w,c
  6547  00150C  3225               	rrcf	??_LCDout+1,f,c
  6548  00150E  3224               	rrcf	??_LCDout,f,c
  6549  001510  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6550  001512  D7FB               	goto	u1285
  6551  001514  4624               	rlncf	??_LCDout,f,c
  6552  001516  4624               	rlncf	??_LCDout,f,c
  6553  001518  508B               	movf	3979,w,c	;volatile
  6554  00151A  1824               	xorwf	??_LCDout,w,c
  6555  00151C  0BFB               	andlw	-5
  6556  00151E  1824               	xorwf	??_LCDout,w,c
  6557  001520  6E8B               	movwf	3979,c	;volatile
  6558                           
  6559                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6560  001522  5027               	movf	LCDout@number,w,c
  6561  001524  6E24               	movwf	??_LCDout& (0+255),c
  6562  001526  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6563  001528  0E05               	movlw	5
  6564  00152A                     u1295:
  6565  00152A  90D8               	bcf	status,0,c
  6566  00152C  3624               	rlcf	??_LCDout,f,c
  6567  00152E  3625               	rlcf	??_LCDout+1,f,c
  6568  001530  2EE8               	decfsz	wreg,f,c
  6569  001532  D7FB               	goto	u1295
  6570  001534  0E07               	movlw	7
  6571  001536  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6572  001538                     u1305:
  6573  001538  3425               	rlcf	??_LCDout+1,w,c
  6574  00153A  3225               	rrcf	??_LCDout+1,f,c
  6575  00153C  3224               	rrcf	??_LCDout,f,c
  6576  00153E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6577  001540  D7FB               	goto	u1305
  6578  001542  508C               	movf	3980,w,c	;volatile
  6579  001544  1824               	xorwf	??_LCDout,w,c
  6580  001546  0BFE               	andlw	-2
  6581  001548  1824               	xorwf	??_LCDout,w,c
  6582  00154A  6E8C               	movwf	3980,c	;volatile
  6583                           
  6584                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6585  00154C  5027               	movf	LCDout@number,w,c
  6586  00154E  6E24               	movwf	??_LCDout& (0+255),c
  6587  001550  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6588  001552  3A24               	swapf	??_LCDout,f,c
  6589  001554  3A25               	swapf	??_LCDout+1,f,c
  6590  001556  0EF0               	movlw	240
  6591  001558  1625               	andwf	??_LCDout+1,f,c
  6592  00155A  5024               	movf	??_LCDout,w,c
  6593  00155C  0B0F               	andlw	15
  6594  00155E  1225               	iorwf	??_LCDout+1,f,c
  6595  001560  0EF0               	movlw	240
  6596  001562  1624               	andwf	??_LCDout,f,c
  6597  001564  0E07               	movlw	7
  6598  001566  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6599  001568                     u1315:
  6600  001568  3425               	rlcf	??_LCDout+1,w,c
  6601  00156A  3225               	rrcf	??_LCDout+1,f,c
  6602  00156C  3224               	rrcf	??_LCDout,f,c
  6603  00156E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6604  001570  D7FB               	goto	u1315
  6605  001572  4624               	rlncf	??_LCDout,f,c
  6606  001574  508C               	movf	3980,w,c	;volatile
  6607  001576  1824               	xorwf	??_LCDout,w,c
  6608  001578  0BFD               	andlw	-3
  6609  00157A  1824               	xorwf	??_LCDout,w,c
  6610  00157C  6E8C               	movwf	3980,c	;volatile
  6611                           
  6612                           ;LCD.c: 21: E_TOG();
  6613  00157E  ECA2  F00E         	call	_E_TOG	;wreg free
  6614                           
  6615                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6616  001582  0E03               	movlw	3
  6617  001584                     u3227:
  6618  001584  2EE8               	decfsz	wreg,f,c
  6619  001586  D7FE               	goto	u3227
  6620  001588  F000               	nop	
  6621  00158A  0012               	return		;funcret
  6622  00158C                     __end_of_LCDout:
  6623                           	opt stack 0
  6624                           tblptru	equ	0xFF8
  6625                           tblptrh	equ	0xFF7
  6626                           tblptrl	equ	0xFF6
  6627                           tablat	equ	0xFF5
  6628                           prodh	equ	0xFF4
  6629                           prodl	equ	0xFF3
  6630                           intcon	equ	0xFF2
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           indf1	equ	0xFE7
  6634                           plusw1	equ	0xFE3
  6635                           fsr1h	equ	0xFE2
  6636                           fsr1l	equ	0xFE1
  6637                           indf2	equ	0xFDF
  6638                           postinc2	equ	0xFDE
  6639                           postdec2	equ	0xFDD
  6640                           plusw2	equ	0xFDB
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _E_TOG *****************
  6646 ;; Defined at:
  6647 ;;		line 5 in file "LCD.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;		None               void
  6654 ;; Registers used:
  6655 ;;		wreg
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6661 ;;      Params:         0       0       0       0
  6662 ;;      Locals:         0       0       0       0
  6663 ;;      Temps:          0       0       0       0
  6664 ;;      Totals:         0       0       0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    3
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_LCDout
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text29
  6676  001D44                     __ptext29:
  6677                           	opt stack 0
  6678  001D44                     _E_TOG:
  6679                           	opt stack 24
  6680                           
  6681                           ;LCD.c: 8: LATCbits.LATC0=1;
  6682                           
  6683                           ;incstack = 0
  6684  001D44  808B               	bsf	3979,0,c	;volatile
  6685                           
  6686                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6687  001D46  0E03               	movlw	3
  6688  001D48                     u3237:
  6689  001D48  2EE8               	decfsz	wreg,f,c
  6690  001D4A  D7FE               	goto	u3237
  6691  001D4C  F000               	nop	
  6692                           
  6693                           ;LCD.c: 10: LATCbits.LATC0=0;
  6694  001D4E  908B               	bcf	3979,0,c	;volatile
  6695  001D50  0012               	return		;funcret
  6696  001D52                     __end_of_E_TOG:
  6697                           	opt stack 0
  6698                           tblptru	equ	0xFF8
  6699                           tblptrh	equ	0xFF7
  6700                           tblptrl	equ	0xFF6
  6701                           tablat	equ	0xFF5
  6702                           prodh	equ	0xFF4
  6703                           prodl	equ	0xFF3
  6704                           intcon	equ	0xFF2
  6705                           postinc0	equ	0xFEE
  6706                           wreg	equ	0xFE8
  6707                           indf1	equ	0xFE7
  6708                           plusw1	equ	0xFE3
  6709                           fsr1h	equ	0xFE2
  6710                           fsr1l	equ	0xFE1
  6711                           indf2	equ	0xFDF
  6712                           postinc2	equ	0xFDE
  6713                           postdec2	equ	0xFDD
  6714                           plusw2	equ	0xFDB
  6715                           fsr2h	equ	0xFDA
  6716                           fsr2l	equ	0xFD9
  6717                           status	equ	0xFD8
  6718                           
  6719 ;; *************** function _InterruptHandlerLow *****************
  6720 ;; Defined at:
  6721 ;;		line 18 in file "main.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;		None               void
  6728 ;; Registers used:
  6729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6735 ;;      Params:         0       0       0       0
  6736 ;;      Locals:         0       0       0       0
  6737 ;;      Temps:         17       0       0       0
  6738 ;;      Totals:        17       0       0       0
  6739 ;;Total ram usage:       17 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    2
  6742 ;; This function calls:
  6743 ;;		Nothing
  6744 ;; This function is called by:
  6745 ;;		Interrupt level 1
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	intcodelo
  6750  000018                     __pintcodelo:
  6751                           	opt stack 0
  6752  000018                     _InterruptHandlerLow:
  6753                           	opt stack 23
  6754                           
  6755                           ;incstack = 0
  6756  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6757  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6758  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6759  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6760  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6761  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6762  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6763  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6764  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6765  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6766  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6767  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6768  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6769  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6770  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6771  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6772  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6773  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6774                           
  6775                           ;main.c: 20: if (PIR1bits.RCIF) {
  6776  00005E  AA9E               	btfss	3998,5,c	;volatile
  6777  000060  D016               	goto	i1l373
  6778                           
  6779                           ;main.c: 21: ReceivedString[i]=RCREG;
  6780  000062  503A               	movf	_i,w,c	;volatile
  6781  000064  0D01               	mullw	1
  6782  000066  0EE6               	movlw	low _ReceivedString
  6783  000068  24F3               	addwf	prodl,w,c
  6784  00006A  6ED9               	movwf	fsr2l,c
  6785  00006C  0E01               	movlw	high _ReceivedString
  6786  00006E  20F4               	addwfc	prodh,w,c
  6787  000070  6EDA               	movwf	fsr2h,c
  6788  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6789                           
  6790                           ;main.c: 22: RFID_Read=1;
  6791  000076  0E01               	movlw	1
  6792  000078  0101               	movlb	1	; () banked
  6793  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6794                           
  6795                           ; BSR set to: 1
  6796                           ;main.c: 23: if (i==15){
  6797  00007C  0E0F               	movlw	15
  6798  00007E  183A               	xorwf	_i,w,c	;volatile
  6799  000080  A4D8               	btfss	status,2,c
  6800  000082  D003               	goto	i1l2670
  6801                           
  6802                           ; BSR set to: 1
  6803                           ;main.c: 24: i=0;
  6804  000084  0E00               	movlw	0
  6805  000086  6E3A               	movwf	_i,c	;volatile
  6806                           
  6807                           ;main.c: 25: }else{
  6808  000088  D001               	goto	i1l2672
  6809  00008A                     i1l2670:
  6810                           
  6811                           ; BSR set to: 1
  6812                           ;main.c: 26: i++;
  6813  00008A  2A3A               	incf	_i,f,c	;volatile
  6814  00008C                     i1l2672:
  6815                           
  6816                           ; BSR set to: 1
  6817                           ;main.c: 27: }
  6818                           ;main.c: 28: PIR1bits.RCIF=0;
  6819  00008C  9A9E               	bcf	3998,5,c	;volatile
  6820  00008E                     i1l373:
  6821  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6822  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6823  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6824  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6825  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6826  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6827  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6828  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6829  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6830  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6831  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6832  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6833  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6834  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6835  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6836  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6837  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6838  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6839  0000D4  0010               	retfie	
  6840  0000D6                     __end_of_InterruptHandlerLow:
  6841                           	opt stack 0
  6842                           pclatu	equ	0xFFB
  6843                           pclath	equ	0xFFA
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           postinc0	equ	0xFEE
  6852                           fsr0h	equ	0xFEA
  6853                           fsr0l	equ	0xFE9
  6854                           wreg	equ	0xFE8
  6855                           indf1	equ	0xFE7
  6856                           plusw1	equ	0xFE3
  6857                           fsr1h	equ	0xFE2
  6858                           fsr1l	equ	0xFE1
  6859                           bsr	equ	0xFE0
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           postdec2	equ	0xFDD
  6863                           plusw2	equ	0xFDB
  6864                           fsr2h	equ	0xFDA
  6865                           fsr2l	equ	0xFD9
  6866                           status	equ	0xFD8
  6867                           
  6868 ;; *************** function _InterruptHandlerHigh *****************
  6869 ;; Defined at:
  6870 ;;		line 34 in file "main.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;		None
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;		None
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6884 ;;      Params:         0       0       0       0
  6885 ;;      Locals:         0       0       0       0
  6886 ;;      Temps:         14       0       0       0
  6887 ;;      Totals:        14       0       0       0
  6888 ;;Total ram usage:       14 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    1
  6891 ;; This function calls:
  6892 ;;		i2_delay_tenth_s
  6893 ;; This function is called by:
  6894 ;;		Interrupt level 2
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	intcode
  6899  000008                     __pintcode:
  6900                           	opt stack 0
  6901  000008                     _InterruptHandlerHigh:
  6902                           	opt stack 23
  6903                           
  6904                           ;incstack = 0
  6905  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6906  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6907  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6908  000012  EF6E  F00B         	goto	int_func
  6909                           pclatu	equ	0xFFB
  6910                           pclath	equ	0xFFA
  6911                           tblptru	equ	0xFF8
  6912                           tblptrh	equ	0xFF7
  6913                           tblptrl	equ	0xFF6
  6914                           tablat	equ	0xFF5
  6915                           prodh	equ	0xFF4
  6916                           prodl	equ	0xFF3
  6917                           intcon	equ	0xFF2
  6918                           postinc0	equ	0xFEE
  6919                           fsr0h	equ	0xFEA
  6920                           fsr0l	equ	0xFE9
  6921                           wreg	equ	0xFE8
  6922                           indf1	equ	0xFE7
  6923                           plusw1	equ	0xFE3
  6924                           fsr1h	equ	0xFE2
  6925                           fsr1l	equ	0xFE1
  6926                           bsr	equ	0xFE0
  6927                           indf2	equ	0xFDF
  6928                           postinc2	equ	0xFDE
  6929                           postdec2	equ	0xFDD
  6930                           plusw2	equ	0xFDB
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935                           	psect	intcode_body
  6936  0016DC                     __pintcode_body:
  6937                           	opt stack 23
  6938  0016DC                     int_func:
  6939                           	opt stack 23
  6940  0016DC  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6941  0016E0  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6942  0016E4  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6943  0016E8  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6944  0016EC  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6945  0016F0  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6946  0016F4  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6947  0016F8  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6948  0016FC  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6949  001700  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6950  001704  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6951  001708  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6952                           
  6953                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6954  00170C  A2F2               	btfss	intcon,1,c	;volatile
  6955  00170E  D00D               	goto	i2l381
  6956                           
  6957                           ;main.c: 36: if (mode==-1) {
  6958  001710  283B               	incf	_mode,w,c	;volatile
  6959  001712  A4D8               	btfss	status,2,c
  6960  001714  D003               	goto	i2l2680
  6961                           
  6962                           ;main.c: 38: mode=1;
  6963  001716  0E01               	movlw	1
  6964  001718  6E3B               	movwf	_mode,c	;volatile
  6965                           
  6966                           ;main.c: 39: } else if (mode==0) {
  6967  00171A  D003               	goto	i2l2684
  6968  00171C                     i2l2680:
  6969  00171C  503B               	movf	_mode,w,c	;volatile
  6970  00171E  A4D8               	btfss	status,2,c
  6971                           
  6972                           ;main.c: 43: mode=-1;
  6973                           
  6974                           ;main.c: 41: } else {
  6975  001720  683B               	setf	_mode,c	;volatile
  6976  001722                     i2l2684:
  6977                           
  6978                           ;main.c: 44: }
  6979                           ;main.c: 46: delay_tenth_s(2);
  6980  001722  0E02               	movlw	2
  6981  001724  ECC5  F00D         	call	i2_delay_tenth_s
  6982                           
  6983                           ;main.c: 47: INTCONbits.INT0IF=0;
  6984  001728  92F2               	bcf	intcon,1,c	;volatile
  6985  00172A                     i2l381:
  6986  00172A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6987  00172E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6988  001732  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6989  001736  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6990  00173A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6991  00173E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6992  001742  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6993  001746  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6994  00174A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6995  00174E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6996  001752  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6997  001756  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6998  00175A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6999  00175E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7000  001762  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7001  001764  0011               	retfie		f
  7002  001766                     __end_of_InterruptHandlerHigh:
  7003                           	opt stack 0
  7004                           pclatu	equ	0xFFB
  7005                           pclath	equ	0xFFA
  7006                           tblptru	equ	0xFF8
  7007                           tblptrh	equ	0xFF7
  7008                           tblptrl	equ	0xFF6
  7009                           tablat	equ	0xFF5
  7010                           prodh	equ	0xFF4
  7011                           prodl	equ	0xFF3
  7012                           intcon	equ	0xFF2
  7013                           postinc0	equ	0xFEE
  7014                           fsr0h	equ	0xFEA
  7015                           fsr0l	equ	0xFE9
  7016                           wreg	equ	0xFE8
  7017                           indf1	equ	0xFE7
  7018                           plusw1	equ	0xFE3
  7019                           fsr1h	equ	0xFE2
  7020                           fsr1l	equ	0xFE1
  7021                           bsr	equ	0xFE0
  7022                           indf2	equ	0xFDF
  7023                           postinc2	equ	0xFDE
  7024                           postdec2	equ	0xFDD
  7025                           plusw2	equ	0xFDB
  7026                           fsr2h	equ	0xFDA
  7027                           fsr2l	equ	0xFD9
  7028                           status	equ	0xFD8
  7029                           
  7030 ;; *************** function i2_delay_tenth_s *****************
  7031 ;; Defined at:
  7032 ;;		line 32 in file "Movement.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;  tenth_second    1    wreg     unsigned char 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7037 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;		None               void
  7040 ;; Registers used:
  7041 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7047 ;;      Params:         0       0       0       0
  7048 ;;      Locals:         3       0       0       0
  7049 ;;      Temps:          1       0       0       0
  7050 ;;      Totals:         4       0       0       0
  7051 ;;Total ram usage:        4 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; This function calls:
  7054 ;;		Nothing
  7055 ;; This function is called by:
  7056 ;;		_InterruptHandlerHigh
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           	psect	text32
  7061  001B8A                     __ptext32:
  7062                           	opt stack 0
  7063  001B8A                     i2_delay_tenth_s:
  7064                           	opt stack 23
  7065                           
  7066                           ;incstack = 0
  7067                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7068  001B8A  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7069                           
  7070                           ;Movement.c: 33: unsigned int i=0;
  7071  001B8C  0E00               	movlw	0
  7072  001B8E  6E04               	movwf	i2delay_tenth_s@i+1,c
  7073  001B90  0E00               	movlw	0
  7074  001B92  6E03               	movwf	i2delay_tenth_s@i,c
  7075                           
  7076                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7077  001B94  0E00               	movlw	0
  7078  001B96  6E04               	movwf	i2delay_tenth_s@i+1,c
  7079  001B98  0E01               	movlw	1
  7080  001B9A  6E03               	movwf	i2delay_tenth_s@i,c
  7081  001B9C  D009               	goto	i2l2642
  7082  001B9E                     i2l2638:
  7083                           
  7084                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7085  001B9E  0E82               	movlw	130
  7086  001BA0  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7087  001BA2  0EDE               	movlw	222
  7088  001BA4                     i2u324_47:
  7089  001BA4  2EE8               	decfsz	wreg,f,c
  7090  001BA6  D7FE               	goto	i2u324_47
  7091  001BA8  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7092  001BAA  D7FC               	goto	i2u324_47
  7093  001BAC  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7094  001BAE  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7095  001BB0                     i2l2642:
  7096  001BB0  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7097  001BB2  0D02               	mullw	2
  7098  001BB4  5003               	movf	i2delay_tenth_s@i,w,c
  7099  001BB6  5CF3               	subwf	prodl,w,c
  7100  001BB8  5004               	movf	i2delay_tenth_s@i+1,w,c
  7101  001BBA  58F4               	subwfb	prodh,w,c
  7102  001BBC  A0D8               	btfss	status,0,c
  7103  001BBE  0012               	return	
  7104  001BC0  D7EE               	goto	i2l2638
  7105  001BC2                     __end_ofi2_delay_tenth_s:
  7106                           	opt stack 0
  7107                           pclatu	equ	0xFFB
  7108                           pclath	equ	0xFFA
  7109                           tblptru	equ	0xFF8
  7110                           tblptrh	equ	0xFF7
  7111                           tblptrl	equ	0xFF6
  7112                           tablat	equ	0xFF5
  7113                           prodh	equ	0xFF4
  7114                           prodl	equ	0xFF3
  7115                           intcon	equ	0xFF2
  7116                           postinc0	equ	0xFEE
  7117                           fsr0h	equ	0xFEA
  7118                           fsr0l	equ	0xFE9
  7119                           wreg	equ	0xFE8
  7120                           indf1	equ	0xFE7
  7121                           plusw1	equ	0xFE3
  7122                           fsr1h	equ	0xFE2
  7123                           fsr1l	equ	0xFE1
  7124                           bsr	equ	0xFE0
  7125                           indf2	equ	0xFDF
  7126                           postinc2	equ	0xFDE
  7127                           postdec2	equ	0xFDD
  7128                           plusw2	equ	0xFDB
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           pclatu	equ	0xFFB
  7133                           pclath	equ	0xFFA
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           intcon	equ	0xFF2
  7141                           postinc0	equ	0xFEE
  7142                           fsr0h	equ	0xFEA
  7143                           fsr0l	equ	0xFE9
  7144                           wreg	equ	0xFE8
  7145                           indf1	equ	0xFE7
  7146                           plusw1	equ	0xFE3
  7147                           fsr1h	equ	0xFE2
  7148                           fsr1l	equ	0xFE1
  7149                           bsr	equ	0xFE0
  7150                           indf2	equ	0xFDF
  7151                           postinc2	equ	0xFDE
  7152                           postdec2	equ	0xFDD
  7153                           plusw2	equ	0xFDB
  7154                           fsr2h	equ	0xFDA
  7155                           fsr2l	equ	0xFD9
  7156                           status	equ	0xFD8
  7157                           
  7158                           	psect	rparam
  7159  0000                     pclatu	equ	0xFFB
  7160                           pclath	equ	0xFFA
  7161                           tblptru	equ	0xFF8
  7162                           tblptrh	equ	0xFF7
  7163                           tblptrl	equ	0xFF6
  7164                           tablat	equ	0xFF5
  7165                           prodh	equ	0xFF4
  7166                           prodl	equ	0xFF3
  7167                           intcon	equ	0xFF2
  7168                           postinc0	equ	0xFEE
  7169                           fsr0h	equ	0xFEA
  7170                           fsr0l	equ	0xFE9
  7171                           wreg	equ	0xFE8
  7172                           indf1	equ	0xFE7
  7173                           plusw1	equ	0xFE3
  7174                           fsr1h	equ	0xFE2
  7175                           fsr1l	equ	0xFE1
  7176                           bsr	equ	0xFE0
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           plusw2	equ	0xFDB
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185                           	psect	temp
  7186  00003C                     btemp:
  7187                           	opt stack 0
  7188  00003C                     	ds	1
  7189  0000                     int$flags	set	btemp
  7190                           pclatu	equ	0xFFB
  7191                           pclath	equ	0xFFA
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           postinc0	equ	0xFEE
  7200                           fsr0h	equ	0xFEA
  7201                           fsr0l	equ	0xFE9
  7202                           wreg	equ	0xFE8
  7203                           indf1	equ	0xFE7
  7204                           plusw1	equ	0xFE3
  7205                           fsr1h	equ	0xFE2
  7206                           fsr1l	equ	0xFE1
  7207                           bsr	equ	0xFE0
  7208                           indf2	equ	0xFDF
  7209                           postinc2	equ	0xFDE
  7210                           postdec2	equ	0xFDD
  7211                           plusw2	equ	0xFDB
  7212                           fsr2h	equ	0xFDA
  7213                           fsr2l	equ	0xFD9
  7214                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     153
    BANK1           256    226     247
    BANK2           256      0     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   69772
                                             90 BANK0      5     5      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   23692
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    4940
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5171
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11548
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4030
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F       3        0.0%
DATA                 0      0     22F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 13:55:47 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 136E  
                                  l65 1844                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01BE                           ?_LCD_String 002A  
                                 l221 0CC0                                   l222 0CF0  
                                 l420 0AB6                                   l424 098E  
                                 l390 041C                                   l907 1A8E  
                                 l897 1A4C                           grabLeftIR@i 002B  
                                 prod 000FF3                                   wreg 000FE8  
                        main@MoveTime 015A                          __CFG_LVP$OFF 000000  
                        main@MoveType 0128                                  l2130 1D0E  
                                l3002 167A                                  l2220 18EC  
                                l2204 187A                                  l2140 1A1A  
                                l2230 1930                                  l2214 18BE  
                                l2142 1A22                                  l3030 0FB6  
                                l2224 18F4                                  l2208 1882  
                                l2152 1A42                                  l2144 1A26  
                                l2160 1A64                                  l3120 1202  
                                l3032 0FC8                                  l3024 0F9A  
                                l3008 169A                                  l2242 1C50  
                                l2162 1A6C                                  l3122 1208  
                                l3114 11E4                                  l3106 11B4  
                                l3042 1000                                  l3130 126A  
                                l2402 1C9E                                  l2252 1984  
                                l2164 1A70                                  l3108 11C0  
                                l3132 1284                                  l3052 1072  
                                l3036 0FD0                                  l2260 1B78  
                                l2246 1950                                  l2238 1C3E  
                                l3054 109A                                  l2168 1A84  
                                l3128 125E                                  l3064 10CA  
                                l2256 1B66                                  l3208 0BF2  
                                l3090 116A                                  l3066 10D0  
                                l3250 0D4C                                  l3402 04FA  
                                l3084 1128                                  l3260 0E22  
                                l3500 07E2                                  l3078 1106  
                                l3510 0846                                  l3422 054C  
                                l3088 1160                                  l3176 14AE  
                                l3248 0D34                                  l3098 118E  
                                l3266 0E26                                  l3442 05E2  
                                l3292 0EE0                                  l3540 09B2  
                                l3524 08DA                                  l3452 0670  
                                l3364 0422                                  l3286 0ECE  
                                l3294 0EE6                                  l3542 09FC  
                                l3550 0AB0                                  l3518 086A  
                                l3536 0944                                  l3480 074E  
                                l3472 0708                                  l3456 067E  
                                l3448 0646                                  l2930 177A  
                                l3490 0774                                  l3458 0696  
                                l3554 0AB8                                  l3548 0A76  
                                l3484 0758                                  l3468 06FE  
                                l3492 077A                                  l2942 17A0  
                                l3478 0748                                  l3398 04C8  
                                l2944 17A8                                  l2936 178A  
                                l2962 17E0                                  l2954 17C8  
                                l2946 17AC                                  l2972 1346  
                                l2980 1808                                  l2958 17D2  
                                l2984 1824                                  l2976 17EC  
                                l2994 164A                                  l2998 1662  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1305 1538                                  u1315 1568  
                                _LATB 000F8A                                  u1255 14D0  
                                u3007 15B4                                  u1265 14DE  
                                u1505 188A                                  u3017 15C4  
                                u1275 14FC                                  u3107 0C3E  
                                u3027 15D2                                  u2324 1306  
                                u1285 150A                                  u1365 1C64  
                                u2325 1302                                  u3117 183E  
                                u3037 15E0                                  u1366 1C66  
                                u2334 1362                                  u1295 152A  
                                u3207 1C72                                  u1535 18FC  
                                u2335 135E                                  u3127 1B6C  
                                u3047 15F2                                  u3217 1C82  
                                u2345 13BC                                  u3137 141A  
                                u3057 1604                                  u1570 1974  
                                u3227 1584                                  u3147 1430  
                                u3067 161A                                  u1580 19A4  
                                u3237 1D48                                  u3157 1694  
                                u3077 162E                                  u3167 18B2  
                                u1815 1C9A                                  u3087 1640  
                                u1816 1C9C                                  u1577 196A  
                                u3177 1924                                  u3097 0C26  
                                u1587 199A                                  u3187 1C52  
                                u1835 1CAC                                  u2731 0366  
                                u1836 1CAE                                  u2820 06C8  
                                u3197 197E                                  u2741 0378  
                                u2830 06DC                                  u2822 06CA  
                                u2920 0920                                  u2832 06DE  
                                u2960 0A3A                                  u2977 0478  
                                u2987 0490                                  u2997 159E  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 01C8                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1648                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00B0                          ___param_bank 000010  
                     i2_delay_tenth_s 1B8A                       __end_of_SendLCD 1C8A  
                     __end_of_SetLine 1C5A                    ScanWithRange@F3892 00F5  
                         ScanIR@F3879 00F1                                 ?_main 0001  
                     __end_of___awdiv 17EA                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1A56  
                     __end_of___lwmod 1A98                                 i1l373 008E  
                               i2l381 172A                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1D44  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1648  
                  ScanWithRange@loops 0071                       __end_of_dpowers 030B  
                     __end_of_isdigit 1D16                                 main@i 01CE  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 1292  
              __size_of_ScanWithRange 04B2                        __CFG_MCLRE$OFF 000000  
                     __initialization 1BC2                          __end_of_main 0ADA  
                        __end_of_stop 16DC                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 0099                  __end_of_enableSensor 1CB0  
                 VerifySignal@hexByte 002C                                ??_main 00BA  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2670 008A  
                              i1l2672 008C                        __CFG_WDTEN$OFF 000000  
                              i2l2642 1BB0                                i2l2638 1B9E  
                              i2l2680 171C                                i2l2684 1722  
               __end_of_delay_tenth_s 1B8A                                _LCDout 14C6  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00AB  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1BC2                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 13CC  
                           ??_SetLine 002A                                ___wmul 1CB0  
                           ??___awdiv 002E                      __end_of_initRFID 1D32  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1CD6                  __size_of_grabRightIR 0072  
                              clear_0 1BC8                                clear_1 1BD4  
                              clear_2 1BE0                      ___awdiv@quotient 0030  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0ADA                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00B3                      __end_of_turnLeft 1B52  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1BEA  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1D52                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1A98                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002B  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 175E  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BF  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 19AC  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 18DC  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 1C8A  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1C2A  
              ScanWithRange@RFID_Read 0079                               _SendLCD 1C5A  
                             __Hparam 0000                               _SetLine 1C2A  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 1766                       __size_of___wmul 0026  
                             ___lwdiv 1A04                               ___lwmod 1A56  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1BC2                       ??_ScanWithRange 007B  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 1D32  
                             __ptext2 1D16                               __ptext3 1BF8  
                             __ptext4 158C                               __ptext5 1CD6  
                             __ptext6 1A98                               __ptext7 1C8A  
                             __ptext8 19AC                               __ptext9 0ADA  
                           _T0CONbits 000FD5                               _initLCD 158C  
                   __end_of_initTimer 1D44                               _dpowers 0301  
                             _isdigit 1CF8                          LCDout@number 0027  
                       ?_VerifySignal 0024                               main@buf 0100  
                             _sprintf 0F8C                        __pintcode_body 16DC  
                end_of_initialization 1BEA                        ScanWithRange@i 00AC  
                      ScanWithRange@n 00A8                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 16DC                    ScanIR@SensorResult 009B  
                     ??_fullSpeedBack 003A                             _RFID_Read 01F6  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                ScanWithRange@LeftFlick 00AA  
                   __end_of_turnRight 1B14                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B8                        __end_of_LCDout 158C  
                           _TXSTAbits 000FAC                             ScanIR@buf 0071  
                       ??_grabRightIR 0026                        __end_of_ScanIR 14C6  
                      _fullSpeedAhead 17EA                        _ReceivedString 01E6  
                      __end_of___wmul 1CD6                     ScanWithRange@Move 0075  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1CF8  
              __size_of_delay_tenth_s 0038                   start_initialization 1BC2  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1766  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 186A  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 18DC  
                        _initMotorPWM 1BF8                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$1986 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1B52                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0062  
                           __pintcode 0008                  __end_of_VerifySignal 1A04  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 01C9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 1D32                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u324_47 1BA4  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3893 0200                             main@F3895 00BF  
                           main@F3898 01E2                           _grabRightIR 186A  
               ScanWithRange@LeftFlag 00B1                  grabRightIR@IR_signal 0029  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0F8C  
                        setMotorPWM@m 0032                 ScanWithRange@MoveTime 0073  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0077  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1AD6                      ScanWithRange@buf 0080  
                 __end_of_setMotorPWM 13CC                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1AD6                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 194E                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1AD6  
                            __ptext11 1B14                              __ptext20 1CB0  
                            __ptext12 17EA                              __ptext21 1A56  
                            __ptext13 1B52                              __ptext22 1A04  
                            __ptext14 13CC                              __ptext23 186A  
                            __ptext15 1648                              __ptext32 1B8A  
                            __ptext24 18DC                              __ptext16 1292  
                            __ptext25 1C2A                              __ptext17 1766  
                            __ptext26 194E                              __ptext18 0F8C  
                            __ptext27 1C5A                              __ptext19 1CF8  
                            __ptext28 14C6                              __ptext29 1D44  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 1D16             ScanWithRange@SensorResult 00B4  
                      turnRight@power 006B                         __size_of_main 078A  
                  main@DirectionFound 01CD                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 0058  
                            int$flags 003C                              main@Move 01CF  
                 _InterruptHandlerLow 0018                            _LCD_String 194E  
                            _turnLeft 1B14                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002A  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 1292  
                        _VerifySignal 19AC                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00AE                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
