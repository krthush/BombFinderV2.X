

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 16:04:16 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _dpowers:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  000A               	dw	10
    59  000305  0064               	dw	100
    60  000307  03E8               	dw	1000
    61  000309  2710               	dw	10000
    62  00030B                     __end_of_dpowers:
    63                           	opt stack 0
    64  0000                     _ANSEL0bits	set	4024
    65  0000                     _BAUDCONbits	set	4010
    66  0000                     _CAP1BUFH	set	3945
    67  0000                     _CAP1BUFL	set	3944
    68  0000                     _CAP1CON	set	3939
    69  0000                     _CAP2BUFH	set	3943
    70  0000                     _CAP2BUFL	set	3942
    71  0000                     _CAP2CON	set	3938
    72  0000                     _INTCONbits	set	4082
    73  0000                     _IPR1bits	set	3999
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATB	set	3978
    76  0000                     _LATCbits	set	3979
    77  0000                     _LATDbits	set	3980
    78  0000                     _LATEbits	set	3981
    79  0000                     _OSCCON	set	4051
    80  0000                     _OSCCONbits	set	4051
    81  0000                     _PIE1bits	set	3997
    82  0000                     _PIR1bits	set	3998
    83  0000                     _PTCON0	set	3967
    84  0000                     _PTCON1	set	3966
    85  0000                     _PTPERH	set	3962
    86  0000                     _PTPERL	set	3963
    87  0000                     _PWMCON0	set	3951
    88  0000                     _PWMCON1	set	3950
    89  0000                     _RCONbits	set	4048
    90  0000                     _RCREG	set	4014
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _SPBRG	set	4015
    93  0000                     _SPBRGH	set	4016
    94  0000                     _T5CON	set	4023
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISBbits	set	3987
    97  0000                     _TRISC	set	3988
    98  0000                     _TRISCbits	set	3988
    99  0000                     _TRISDbits	set	3989
   100  0000                     _TRISEbits	set	3990
   101  0000                     _TXREG	set	4013
   102  0000                     _TXSTAbits	set	4012
   103  0000                     _PDC0H	set	3960
   104  0000                     _PDC0L	set	3961
   105  0000                     _PDC1H	set	3958
   106  0000                     _PDC1L	set	3959
   107  00030B                     STR_6:
   108  00030B  20                 	db	32
   109  00030C  20                 	db	32
   110  00030D  20                 	db	32
   111  00030E  20                 	db	32
   112  00030F  20                 	db	32
   113  000310  20                 	db	32
   114  000311  25                 	db	37
   115  000312  30                 	db	48	;'0'
   116  000313  34                 	db	52	;'4'
   117  000314  64                 	db	100	;'d'
   118  000315  2C                 	db	44
   119  000316  20                 	db	32
   120  000317  25                 	db	37
   121  000318  30                 	db	48	;'0'
   122  000319  34                 	db	52	;'4'
   123  00031A  64                 	db	100	;'d'
   124  00031B  00                 	db	0
   125  00031C                     STR_5:
   126  00031C  20                 	db	32
   127  00031D  20                 	db	32
   128  00031E  20                 	db	32
   129  00031F  20                 	db	32
   130  000320  20                 	db	32
   131  000321  20                 	db	32
   132  000322  49                 	db	73	;'I'
   133  000323  6E                 	db	110	;'n'
   134  000324  65                 	db	101	;'e'
   135  000325  72                 	db	114	;'r'
   136  000326  74                 	db	116	;'t'
   137  000327  20                 	db	32
   138  000328  4D                 	db	77	;'M'
   139  000329  6F                 	db	111	;'o'
   140  00032A  64                 	db	100	;'d'
   141  00032B  65                 	db	101	;'e'
   142  00032C  00                 	db	0
   143  00032D                     STR_1:
   144  00032D  20                 	db	32
   145  00032E  20                 	db	32
   146  00032F  20                 	db	32
   147  000330  20                 	db	32
   148  000331  20                 	db	32
   149  000332  53                 	db	83	;'S'
   150  000333  63                 	db	99	;'c'
   151  000334  61                 	db	97	;'a'
   152  000335  6E                 	db	110	;'n'
   153  000336  49                 	db	73	;'I'
   154  000337  52                 	db	82	;'R'
   155  000338  00                 	db	0
   156  000339                     STR_8:
   157  000339  47                 	db	71	;'G'
   158  00033A  6F                 	db	111	;'o'
   159  00033B  69                 	db	105	;'i'
   160  00033C  6E                 	db	110	;'n'
   161  00033D  67                 	db	103	;'g'
   162  00033E  20                 	db	32
   163  00033F  48                 	db	72	;'H'
   164  000340  6F                 	db	111	;'o'
   165  000341  6D                 	db	109	;'m'
   166  000342  65                 	db	101	;'e'
   167  000343  00                 	db	0
   168  000344                     STR_7:
   169  000344  53                 	db	83	;'S'
   170  000345  65                 	db	101	;'e'
   171  000346  61                 	db	97	;'a'
   172  000347  72                 	db	114	;'r'
   173  000348  63                 	db	99	;'c'
   174  000349  68                 	db	104	;'h'
   175  00034A  69                 	db	105	;'i'
   176  00034B  6E                 	db	110	;'n'
   177  00034C  67                 	db	103	;'g'
   178  00034D  00                 	db	0
   179  0000                     
   180                           ; #config settings
   181  00034E  00                 	db	0	; dummy byte at the end
   182  0000                     
   183                           	psect	cinit
   184  001834                     __pcinit:
   185                           	opt stack 0
   186  001834                     start_initialization:
   187                           	opt stack 0
   188  001834                     __initialization:
   189                           	opt stack 0
   190                           
   191                           ; Clear objects allocated to BANK1 (5 bytes)
   192  001834  0101               	movlb	1
   193  001836  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   194  001838  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   195  00183A  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   196  00183C  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   197  00183E  6BFA               	clrf	__pbssBANK1& (0+255),b
   198                           
   199                           ; Clear objects allocated to BANK0 (24 bytes)
   200  001840  EE00  F0B6         	lfsr	0,__pbssBANK0
   201  001844  0E18               	movlw	24
   202  001846                     clear_0:
   203  001846  6AEE               	clrf	postinc0,c
   204  001848  06E8               	decf	wreg,f,c
   205  00184A  E1FD               	bnz	clear_0
   206                           
   207                           ; Clear objects allocated to COMRAM (2 bytes)
   208  00184C  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   209  00184E  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   210  001850                     end_of_initialization:
   211                           	opt stack 0
   212  001850                     __end_of__initialization:
   213                           	opt stack 0
   214  001850  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   215  001852  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   216  001854  0E00               	movlw	low (__Lmediumconst shr (0+16))
   217  001856  6EF8               	movwf	tblptru,c
   218  001858  0100               	movlb	0
   219  00185A  EFA8  F001         	goto	_main	;jump to C main() function
   220                           tblptru	equ	0xFF8
   221                           postinc0	equ	0xFEE
   222                           wreg	equ	0xFE8
   223                           
   224                           	psect	bssCOMRAM
   225  00003A                     __pbssCOMRAM:
   226                           	opt stack 0
   227  00003A                     _i:
   228                           	opt stack 0
   229  00003A                     	ds	1
   230  00003B                     _mode:
   231                           	opt stack 0
   232  00003B                     	ds	1
   233                           tblptru	equ	0xFF8
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	bssBANK0
   238  0000B6                     __pbssBANK0:
   239                           	opt stack 0
   240  0000B6                     ScanIR@F3879:
   241                           	opt stack 0
   242  0000B6                     	ds	4
   243  0000BA                     ScanWithRange@F3889:
   244                           	opt stack 0
   245  0000BA                     	ds	4
   246  0000BE                     _ReceivedString:
   247                           	opt stack 0
   248  0000BE                     	ds	16
   249                           tblptru	equ	0xFF8
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           
   253                           	psect	bssBANK1
   254  0001FA                     __pbssBANK1:
   255                           	opt stack 0
   256  0001FA                     main@F3894:
   257                           	opt stack 0
   258  0001FA                     	ds	4
   259  0001FE                     _RFID_Read:
   260                           	opt stack 0
   261  0001FE                     	ds	1
   262                           tblptru	equ	0xFF8
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	cstackBANK2
   267  000200                     __pcstackBANK2:
   268                           	opt stack 0
   269  000200                     main@mL:
   270                           	opt stack 0
   271                           
   272                           ; 9 bytes @ 0x0
   273  000200                     	ds	9
   274  000209                     main@mR:
   275                           	opt stack 0
   276                           
   277                           ; 9 bytes @ 0x9
   278  000209                     	ds	9
   279                           tblptru	equ	0xFF8
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           
   283                           	psect	cstackBANK1
   284  000100                     __pcstackBANK1:
   285                           	opt stack 0
   286  000100                     main@MoveTime:
   287                           	opt stack 0
   288                           
   289                           ; 100 bytes @ 0x0
   290  000100                     	ds	100
   291  000164                     main@MoveType:
   292                           	opt stack 0
   293                           
   294                           ; 100 bytes @ 0x64
   295  000164                     	ds	100
   296  0001C8                     main@buf:
   297                           	opt stack 0
   298                           
   299                           ; 40 bytes @ 0xC8
   300  0001C8                     	ds	40
   301  0001F0                     main@Message:
   302                           	opt stack 0
   303                           
   304                           ; 10 bytes @ 0xF0
   305  0001F0                     	ds	10
   306                           tblptru	equ	0xFF8
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           
   310                           	psect	cstackBANK0
   311  000060                     __pcstackBANK0:
   312                           	opt stack 0
   313  000060                     ??_sprintf:
   314  000060                     setMotorPWM@PWMduty:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x0
   318  000060                     	ds	2
   319  000062                     stop@mL:
   320                           	opt stack 0
   321  000062                     fullSpeedAhead@mL:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x2
   325  000062                     	ds	2
   326  000064                     stop@mR:
   327                           	opt stack 0
   328  000064                     fullSpeedAhead@mR:
   329                           	opt stack 0
   330  000064                     sprintf@ap:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x4
   334  000064                     	ds	2
   335  000066                     fullSpeedAhead@power:
   336                           	opt stack 0
   337  000066                     sprintf@prec:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x6
   341  000066                     	ds	1
   342  000067                     turnLeft@mL:
   343                           	opt stack 0
   344  000067                     turnRight@mL:
   345                           	opt stack 0
   346  000067                     fullSpeedBack@mL:
   347                           	opt stack 0
   348  000067                     sprintf@val:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x7
   352  000067                     	ds	2
   353  000069                     sprintf@flag:
   354                           	opt stack 0
   355  000069                     turnLeft@mR:
   356                           	opt stack 0
   357  000069                     turnRight@mR:
   358                           	opt stack 0
   359  000069                     fullSpeedBack@mR:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x9
   363  000069                     	ds	1
   364  00006A                     sprintf@width:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0xA
   368  00006A                     	ds	1
   369  00006B                     turnLeft@power:
   370                           	opt stack 0
   371  00006B                     turnRight@power:
   372                           	opt stack 0
   373  00006B                     fullSpeedBack@power:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0xB
   377  00006B                     	ds	1
   378  00006C                     sprintf@c:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0xC
   382  00006C                     	ds	1
   383  00006D                     ScanIR@mL:
   384                           	opt stack 0
   385  00006D                     ScanWithRange@mL:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0xD
   389  00006D                     	ds	2
   390  00006F                     ScanIR@mR:
   391                           	opt stack 0
   392  00006F                     ScanWithRange@mR:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0xF
   396  00006F                     	ds	2
   397  000071                     ScanIR@Move:
   398                           	opt stack 0
   399  000071                     ScanWithRange@milliseconds:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x11
   403  000071                     	ds	2
   404  000073                     ScanIR@MoveTime:
   405                           	opt stack 0
   406  000073                     ScanWithRange@MoveTimeEntry:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x13
   410  000073                     	ds	2
   411  000075                     ??_ScanWithRange:
   412  000075                     ScanIR@MoveType:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x15
   416  000075                     	ds	2
   417  000077                     ScanIR@buf:
   418                           	opt stack 0
   419  000077                     ScanWithRange@buf:
   420                           	opt stack 0
   421                           
   422                           ; 40 bytes @ 0x17
   423  000077                     	ds	40
   424  00009F                     ScanWithRange@TimeAboveThreshold:
   425                           	opt stack 0
   426  00009F                     ScanIR@DirectionMoveThreshold:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x3F
   430  00009F                     	ds	1
   431  0000A0                     ScanWithRange@i:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x40
   435  0000A0                     	ds	1
   436  0000A1                     ScanIR@SensorResult:
   437                           	opt stack 0
   438                           
   439                           ; 4 bytes @ 0x41
   440  0000A1                     	ds	1
   441  0000A2                     ScanWithRange@n:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x42
   445  0000A2                     	ds	2
   446  0000A4                     ScanWithRange@DirectionFoundThreshold:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x44
   450  0000A4                     	ds	2
   451  0000A6                     ScanWithRange@SensorResult:
   452                           	opt stack 0
   453                           
   454                           ; 4 bytes @ 0x46
   455  0000A6                     	ds	4
   456  0000AA                     ScanWithRange@LeftFlag:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x4A
   460  0000AA                     	ds	1
   461  0000AB                     ScanWithRange@RightFlag:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x4B
   465  0000AB                     	ds	1
   466  0000AC                     ??_main:
   467                           
   468                           ; 0 bytes @ 0x4C
   469  0000AC                     	ds	2
   470  0000AE                     main@ScanAngle:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x4E
   474  0000AE                     	ds	1
   475  0000AF                     main@SensorResult:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x4F
   479  0000AF                     	ds	4
   480  0000B3                     main@DirectionFound:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x53
   484  0000B3                     	ds	1
   485  0000B4                     main@Move:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x54
   489  0000B4                     	ds	1
   490  0000B5                     main@i:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x55
   494  0000B5                     	ds	1
   495                           tblptru	equ	0xFF8
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           
   499                           	psect	cstackCOMRAM
   500  000001                     __pcstackCOMRAM:
   501                           	opt stack 0
   502  000001                     ??i2_delay_tenth_s:
   503                           
   504                           ; 0 bytes @ 0x0
   505  000001                     	ds	1
   506  000002                     i2delay_tenth_s@tenth_seconds:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x1
   510  000002                     	ds	1
   511  000003                     i2delay_tenth_s@i:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x2
   515  000003                     	ds	2
   516  000005                     ??_InterruptHandlerHigh:
   517                           
   518                           ; 0 bytes @ 0x4
   519  000005                     	ds	14
   520  000013                     ??_InterruptHandlerLow:
   521                           
   522                           ; 0 bytes @ 0x12
   523  000013                     	ds	17
   524  000024                     ??_isdigit:
   525  000024                     ??_LCDout:
   526  000024                     ??_delay_tenth_s:
   527  000024                     ?_grabRightIR:
   528                           	opt stack 0
   529  000024                     ?_grabLeftIR:
   530                           	opt stack 0
   531  000024                     ?___wmul:
   532                           	opt stack 0
   533  000024                     ?___lwdiv:
   534                           	opt stack 0
   535  000024                     enableSensor@status:
   536                           	opt stack 0
   537  000024                     VerifySignal@Signal:
   538                           	opt stack 0
   539  000024                     ___wmul@multiplier:
   540                           	opt stack 0
   541  000024                     ___lwdiv@dividend:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x23
   545  000024                     	ds	1
   546  000025                     enableSensor@sensor:
   547                           	opt stack 0
   548  000025                     delay_tenth_s@tenth_seconds:
   549                           	opt stack 0
   550  000025                     _isdigit$1874:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x24
   554  000025                     	ds	1
   555  000026                     ??_grabRightIR:
   556  000026                     ??_grabLeftIR:
   557  000026                     ??_VerifySignal:
   558  000026                     isdigit@c:
   559                           	opt stack 0
   560  000026                     delay_tenth_s@i:
   561                           	opt stack 0
   562  000026                     ___wmul@multiplicand:
   563                           	opt stack 0
   564  000026                     ___lwdiv@divisor:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x25
   568  000026                     	ds	1
   569  000027                     LCDout@number:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x26
   573  000027                     	ds	1
   574  000028                     SendLCD@type:
   575                           	opt stack 0
   576  000028                     ___wmul@product:
   577                           	opt stack 0
   578  000028                     ___lwdiv@quotient:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x27
   582  000028                     	ds	1
   583  000029                     SendLCD@Byte:
   584                           	opt stack 0
   585  000029                     grabRightIR@IR_signal:
   586                           	opt stack 0
   587  000029                     grabLeftIR@IR_signal:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x28
   591  000029                     	ds	1
   592  00002A                     ??_initLCD:
   593  00002A                     ?___awdiv:
   594                           	opt stack 0
   595  00002A                     SetLine@line:
   596                           	opt stack 0
   597  00002A                     ___lwdiv@counter:
   598                           	opt stack 0
   599  00002A                     LCD_String@string:
   600                           	opt stack 0
   601  00002A                     ___awdiv@dividend:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x29
   605  00002A                     	ds	1
   606  00002B                     ?___lwmod:
   607                           	opt stack 0
   608  00002B                     grabRightIR@i:
   609                           	opt stack 0
   610  00002B                     grabLeftIR@i:
   611                           	opt stack 0
   612  00002B                     ___lwmod@dividend:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x2A
   616  00002B                     	ds	1
   617  00002C                     VerifySignal@checksum:
   618                           	opt stack 0
   619  00002C                     ___awdiv@divisor:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x2B
   623  00002C                     	ds	1
   624  00002D                     VerifySignal@hexByte:
   625                           	opt stack 0
   626  00002D                     ___lwmod@divisor:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x2C
   630  00002D                     	ds	1
   631  00002E                     ___awdiv@counter:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x2D
   635  00002E                     	ds	1
   636  00002F                     VerifySignal@i:
   637                           	opt stack 0
   638  00002F                     ___awdiv@sign:
   639                           	opt stack 0
   640  00002F                     ___lwmod@counter:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x2E
   644  00002F                     	ds	1
   645  000030                     ?_sprintf:
   646                           	opt stack 0
   647  000030                     sprintf@sp:
   648                           	opt stack 0
   649  000030                     ___awdiv@quotient:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x2F
   653  000030                     	ds	2
   654  000032                     setMotorPWM@m:
   655                           	opt stack 0
   656  000032                     sprintf@f:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x31
   660  000032                     	ds	2
   661  000034                     ??_setMotorPWM:
   662                           
   663                           ; 0 bytes @ 0x33
   664  000034                     	ds	5
   665  000039                     ??_ScanIR:
   666                           
   667                           ; 0 bytes @ 0x38
   668  000039                     	ds	1
   669  00003A                     tblptru	equ	0xFF8
   670                           postinc0	equ	0xFEE
   671                           wreg	equ	0xFE8
   672                           
   673                           ; 0 bytes @ 0x39
   674 ;;
   675 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   676 ;;
   677 ;; *************** function _main *****************
   678 ;; Defined at:
   679 ;;		line 51 in file "main.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  MoveType      100  100[BANK1 ] unsigned char [100]
   684 ;;  MoveTime      100    0[BANK1 ] unsigned char [100]
   685 ;;  buf            40  200[BANK1 ] unsigned char [40]
   686 ;;  Message        10  240[BANK1 ] unsigned char [10]
   687 ;;  mR              9    9[BANK2 ] struct DC_motor
   688 ;;  mL              9    0[BANK2 ] struct DC_motor
   689 ;;  SensorResult    4   79[BANK0 ] unsigned int [2]
   690 ;;  i               1   85[BANK0 ] unsigned char 
   691 ;;  Move            1   84[BANK0 ] unsigned char 
   692 ;;  DirectionFou    1   83[BANK0 ] char 
   693 ;;  ScanAngle       1   78[BANK0 ] unsigned char 
   694 ;; Return value:  Size  Location     Type
   695 ;;		None               void
   696 ;; Registers used:
   697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   703 ;;      Params:         0       0       0       0
   704 ;;      Locals:         0       8     250      18
   705 ;;      Temps:          0       2       0       0
   706 ;;      Totals:         0      10     250      18
   707 ;;Total ram usage:      278 bytes
   708 ;; Hardware stack levels required when called:    8
   709 ;; This function calls:
   710 ;;		_LCD_String
   711 ;;		_ScanIR
   712 ;;		_ScanWithRange
   713 ;;		_SendLCD
   714 ;;		_SetLine
   715 ;;		_VerifySignal
   716 ;;		_delay_tenth_s
   717 ;;		_enableSensor
   718 ;;		_fullSpeedAhead
   719 ;;		_fullSpeedBack
   720 ;;		_grabLeftIR
   721 ;;		_grabRightIR
   722 ;;		_initIR
   723 ;;		_initLCD
   724 ;;		_initMotorPWM
   725 ;;		_initRFID
   726 ;;		_sprintf
   727 ;;		_stop
   728 ;; This function is called by:
   729 ;;		Startup code after reset
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           	psect	text0
   734  000350                     __ptext0:
   735                           	opt stack 0
   736  000350                     _main:
   737                           	opt stack 23
   738                           
   739                           ;main.c: 54: unsigned char Message[10];
   740                           ;main.c: 55: unsigned char i=0;
   741                           
   742                           ;incstack = 0
   743  000350  0E00               	movlw	0
   744  000352  0100               	movlb	0	; () banked
   745  000354  6FB5               	movwf	main@i& (0+255),b
   746                           
   747                           ;main.c: 56: signed char DirectionFound=0;
   748  000356  0E00               	movlw	0
   749  000358  0100               	movlb	0	; () banked
   750  00035A  6FB3               	movwf	main@DirectionFound& (0+255),b
   751                           
   752                           ;main.c: 57: char MoveTime[100];
   753                           ;main.c: 58: char MoveType[100];
   754                           ;main.c: 59: char Move=0;
   755  00035C  0E00               	movlw	0
   756  00035E  0100               	movlb	0	; () banked
   757  000360  6FB4               	movwf	main@Move& (0+255),b
   758                           
   759                           ; BSR set to: 0
   760                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   761  000362  C1FA  F0AF         	movff	main@F3894,main@SensorResult
   762  000366  C1FB  F0B0         	movff	main@F3894+1,main@SensorResult+1
   763  00036A  C1FC  F0B1         	movff	main@F3894+2,main@SensorResult+2
   764  00036E  C1FD  F0B2         	movff	main@F3894+3,main@SensorResult+3
   765                           
   766                           ;main.c: 61: char buf[40];
   767                           ;main.c: 63: unsigned char ScanAngle=60;
   768  000372  0E3C               	movlw	60
   769  000374  0100               	movlb	0	; () banked
   770  000376  6FAE               	movwf	main@ScanAngle& (0+255),b
   771                           
   772                           ; BSR set to: 0
   773                           ;main.c: 66: INTCONbits.GIEH=1;
   774  000378  8EF2               	bsf	intcon,7,c	;volatile
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 67: INTCONbits.GIEL=1;
   778  00037A  8CF2               	bsf	intcon,6,c	;volatile
   779                           
   780                           ; BSR set to: 0
   781                           ;main.c: 68: INTCONbits.PEIE=1;
   782  00037C  8CF2               	bsf	intcon,6,c	;volatile
   783                           
   784                           ; BSR set to: 0
   785                           ;main.c: 69: RCONbits.IPEN=1;
   786  00037E  8ED0               	bsf	4048,7,c	;volatile
   787                           
   788                           ; BSR set to: 0
   789                           ;main.c: 72: IPR1bits.RCIP=0;
   790  000380  9A9F               	bcf	3999,5,c	;volatile
   791                           
   792                           ; BSR set to: 0
   793                           ;main.c: 73: PIE1bits.RCIE=1;
   794  000382  8A9D               	bsf	3997,5,c	;volatile
   795                           
   796                           ; BSR set to: 0
   797                           ;main.c: 76: TRISCbits.RC3=1;
   798  000384  8694               	bsf	3988,3,c	;volatile
   799                           
   800                           ; BSR set to: 0
   801                           ;main.c: 77: INTCONbits.INT0IE=1;
   802  000386  88F2               	bsf	intcon,4,c	;volatile
   803                           
   804                           ; BSR set to: 0
   805                           ;main.c: 80: PIR1bits.RC1IF=0;
   806  000388  9A9E               	bcf	3998,5,c	;volatile
   807                           
   808                           ; BSR set to: 0
   809                           ;main.c: 81: INTCONbits.INT0IF=0;
   810  00038A  92F2               	bcf	intcon,1,c	;volatile
   811                           
   812                           ;main.c: 84: struct DC_motor mL, mR;
   813                           ;main.c: 85: mL.power=0;
   814  00038C  0E00               	movlw	0
   815  00038E  0102               	movlb	2	; () banked
   816  000390  6F00               	movwf	main@mL& (0+255),b
   817                           
   818                           ;main.c: 86: mL.direction=1;
   819  000392  0E01               	movlw	1
   820  000394  0102               	movlb	2	; () banked
   821  000396  6F01               	movwf	(main@mL+1)& (0+255),b
   822                           
   823                           ; BSR set to: 2
   824                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   825  000398  0E79               	movlw	121
   826  00039A  0102               	movlb	2	; () banked
   827  00039C  6F02               	movwf	(main@mL+2)& (0+255),b
   828  00039E  0E0F               	movlw	15
   829  0003A0  0102               	movlb	2	; () banked
   830  0003A2  6F03               	movwf	(main@mL+3)& (0+255),b
   831                           
   832                           ; BSR set to: 2
   833                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   834  0003A4  0E78               	movlw	120
   835  0003A6  0102               	movlb	2	; () banked
   836  0003A8  6F04               	movwf	(main@mL+4)& (0+255),b
   837  0003AA  0E0F               	movlw	15
   838  0003AC  0102               	movlb	2	; () banked
   839  0003AE  6F05               	movwf	(main@mL+5)& (0+255),b
   840                           
   841                           ;main.c: 89: mL.dir_pin=0;
   842  0003B0  0E00               	movlw	0
   843  0003B2  0102               	movlb	2	; () banked
   844  0003B4  6F06               	movwf	(main@mL+6)& (0+255),b
   845                           
   846                           ;main.c: 90: mL.PWMperiod=199;
   847  0003B6  0E00               	movlw	0
   848  0003B8  0102               	movlb	2	; () banked
   849  0003BA  6F08               	movwf	(main@mL+8)& (0+255),b
   850  0003BC  0EC7               	movlw	199
   851  0003BE  6F07               	movwf	(main@mL+7)& (0+255),b
   852                           
   853                           ;main.c: 92: mR.power=0;
   854  0003C0  0E00               	movlw	0
   855  0003C2  0102               	movlb	2	; () banked
   856  0003C4  6F09               	movwf	main@mR& (0+255),b
   857                           
   858                           ;main.c: 93: mR.direction=1;
   859  0003C6  0E01               	movlw	1
   860  0003C8  0102               	movlb	2	; () banked
   861  0003CA  6F0A               	movwf	(main@mR+1)& (0+255),b
   862                           
   863                           ; BSR set to: 2
   864                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   865  0003CC  0E77               	movlw	119
   866  0003CE  0102               	movlb	2	; () banked
   867  0003D0  6F0B               	movwf	(main@mR+2)& (0+255),b
   868  0003D2  0E0F               	movlw	15
   869  0003D4  0102               	movlb	2	; () banked
   870  0003D6  6F0C               	movwf	(main@mR+3)& (0+255),b
   871                           
   872                           ; BSR set to: 2
   873                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   874  0003D8  0E76               	movlw	118
   875  0003DA  0102               	movlb	2	; () banked
   876  0003DC  6F0D               	movwf	(main@mR+4)& (0+255),b
   877  0003DE  0E0F               	movlw	15
   878  0003E0  0102               	movlb	2	; () banked
   879  0003E2  6F0E               	movwf	(main@mR+5)& (0+255),b
   880                           
   881                           ;main.c: 96: mR.dir_pin=2;
   882  0003E4  0E02               	movlw	2
   883  0003E6  0102               	movlb	2	; () banked
   884  0003E8  6F0F               	movwf	(main@mR+6)& (0+255),b
   885                           
   886                           ;main.c: 97: mR.PWMperiod=199;
   887  0003EA  0E00               	movlw	0
   888  0003EC  0102               	movlb	2	; () banked
   889  0003EE  6F11               	movwf	(main@mR+8)& (0+255),b
   890  0003F0  0EC7               	movlw	199
   891  0003F2  6F10               	movwf	(main@mR+7)& (0+255),b
   892                           
   893                           ;main.c: 99: OSCCON = 0x72;
   894  0003F4  0E72               	movlw	114
   895  0003F6  6ED3               	movwf	4051,c	;volatile
   896  0003F8                     l366:
   897  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   898  0003FA  D21D               	goto	l3303
   899  0003FC  D7FD               	goto	l366
   900  0003FE                     l3155:
   901                           
   902                           ;main.c: 112: stop(&mL, &mR);
   903  0003FE  0E00               	movlw	low main@mL
   904  000400  0100               	movlb	0	; () banked
   905  000402  6F62               	movwf	stop@mL& (0+255),b
   906  000404  0E02               	movlw	high main@mL
   907  000406  0100               	movlb	0	; () banked
   908  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   909  00040A  0E09               	movlw	low main@mR
   910  00040C  0100               	movlb	0	; () banked
   911  00040E  6F64               	movwf	stop@mR& (0+255),b
   912  000410  0E02               	movlw	high main@mR
   913  000412  0100               	movlb	0	; () banked
   914  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   915  000416  EC2C  F009         	call	_stop	;wreg free
   916                           
   917                           ;main.c: 113: RFID_Read=0;
   918  00041A  0E00               	movlw	0
   919  00041C  0101               	movlb	1	; () banked
   920  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   921                           
   922                           ; BSR set to: 1
   923                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   924  000420  EC76  F00A         	call	_grabLeftIR	;wreg free
   925  000424  C024  F0AF         	movff	?_grabLeftIR,main@SensorResult
   926  000428  C025  F0B0         	movff	?_grabLeftIR+1,main@SensorResult+1
   927                           
   928                           ;main.c: 117: SensorResult[1]=grabRightIR();
   929  00042C  EC3D  F00A         	call	_grabRightIR	;wreg free
   930  000430  C024  F0B1         	movff	?_grabRightIR,main@SensorResult+2
   931  000434  C025  F0B2         	movff	?_grabRightIR+1,main@SensorResult+3
   932                           
   933                           ;main.c: 121: CAP1BUFH=0;
   934  000438  0E00               	movlw	0
   935  00043A  6E69               	movwf	3945,c	;volatile
   936                           
   937                           ;main.c: 122: CAP1BUFL=0;
   938  00043C  0E00               	movlw	0
   939  00043E  6E68               	movwf	3944,c	;volatile
   940                           
   941                           ;main.c: 123: CAP2BUFH=0;
   942  000440  0E00               	movlw	0
   943  000442  6E67               	movwf	3943,c	;volatile
   944                           
   945                           ;main.c: 124: CAP2BUFL=0;
   946  000444  0E00               	movlw	0
   947  000446  6E66               	movwf	3942,c	;volatile
   948                           
   949                           ;main.c: 127: SendLCD(0b00000001,0);
   950  000448  0E00               	movlw	0
   951  00044A  6E28               	movwf	SendLCD@type,c
   952  00044C  0E01               	movlw	1
   953  00044E  EC02  F00C         	call	_SendLCD
   954                           
   955                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   956  000452  0E21               	movlw	33
   957  000454                     u2807:
   958  000454  2EE8               	decfsz	wreg,f,c
   959  000456  D7FE               	goto	u2807
   960  000458  F000               	nop	
   961                           
   962                           ;main.c: 129: SendLCD(0b00000010,0);
   963  00045A  0E00               	movlw	0
   964  00045C  6E28               	movwf	SendLCD@type,c
   965  00045E  0E02               	movlw	2
   966  000460  EC02  F00C         	call	_SendLCD
   967                           
   968                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   969  000464  0E06               	movlw	6
   970  000466  0100               	movlb	0	; () banked
   971  000468  6FAC               	movwf	??_main& (0+255),b
   972  00046A  0E30               	movlw	48
   973  00046C                     u2817:
   974  00046C  2EE8               	decfsz	wreg,f,c
   975  00046E  D7FE               	goto	u2817
   976  000470  2FAC               	decfsz	??_main& (0+255),f,b
   977  000472  D7FC               	goto	u2817
   978  000474  D000               	nop2	
   979                           
   980                           ;main.c: 131: SetLine(1);
   981  000476  0E01               	movlw	1
   982  000478  ECEA  F00B         	call	_SetLine
   983                           
   984                           ;main.c: 132: LCD_String("      Inert Mode");
   985  00047C  0E1C               	movlw	low STR_5
   986  00047E  6E2A               	movwf	LCD_String@string,c
   987  000480  0E03               	movlw	high STR_5
   988  000482  6E2B               	movwf	LCD_String@string+1,c
   989  000484  ECAF  F00A         	call	_LCD_String	;wreg free
   990                           
   991                           ;main.c: 133: SetLine(2);
   992  000488  0E02               	movlw	2
   993  00048A  ECEA  F00B         	call	_SetLine
   994                           
   995                           ;main.c: 134: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
   996  00048E  0EC8               	movlw	low main@buf
   997  000490  6E30               	movwf	sprintf@sp,c
   998  000492  0E01               	movlw	high main@buf
   999  000494  6E31               	movwf	sprintf@sp+1,c
  1000  000496  0E0B               	movlw	low STR_6
  1001  000498  6E32               	movwf	sprintf@f,c
  1002  00049A  0E03               	movlw	high STR_6
  1003  00049C  6E33               	movwf	sprintf@f+1,c
  1004  00049E  C0AF  F034         	movff	main@SensorResult,?_sprintf+4
  1005  0004A2  C0B0  F035         	movff	main@SensorResult+1,?_sprintf+5
  1006  0004A6  C0B1  F036         	movff	main@SensorResult+2,?_sprintf+6
  1007  0004AA  C0B2  F037         	movff	main@SensorResult+3,?_sprintf+7
  1008  0004AE  EC2C  F004         	call	_sprintf	;wreg free
  1009                           
  1010                           ;main.c: 135: LCD_String(buf);
  1011  0004B2  0EC8               	movlw	low main@buf
  1012  0004B4  6E2A               	movwf	LCD_String@string,c
  1013  0004B6  0E01               	movlw	high main@buf
  1014  0004B8  6E2B               	movwf	LCD_String@string+1,c
  1015  0004BA  ECAF  F00A         	call	_LCD_String	;wreg free
  1016                           
  1017                           ;main.c: 137: break;
  1018  0004BE  D1BB               	goto	l3303
  1019  0004C0                     l3189:
  1020                           
  1021                           ;main.c: 142: initMotorPWM();
  1022  0004C0  ECD1  F00B         	call	_initMotorPWM	;wreg free
  1023                           
  1024                           ;main.c: 143: initRFID();
  1025  0004C4  EC75  F00C         	call	_initRFID	;wreg free
  1026                           
  1027                           ;main.c: 144: initLCD();
  1028  0004C8  EC74  F008         	call	_initLCD	;wreg free
  1029                           
  1030                           ;main.c: 145: initIR();
  1031  0004CC  EC55  F00C         	call	_initIR	;wreg free
  1032                           
  1033                           ;main.c: 147: enableSensor(0, 1);
  1034  0004D0  0E01               	movlw	1
  1035  0004D2  6E24               	movwf	enableSensor@status,c
  1036  0004D4  0E00               	movlw	0
  1037  0004D6  EC2F  F00C         	call	_enableSensor
  1038                           
  1039                           ;main.c: 148: enableSensor(1, 1);
  1040  0004DA  0E01               	movlw	1
  1041  0004DC  6E24               	movwf	enableSensor@status,c
  1042  0004DE  0E01               	movlw	1
  1043  0004E0  EC2F  F00C         	call	_enableSensor
  1044                           
  1045                           ;main.c: 151: fullSpeedAhead(&mL, &mR, 100);
  1046  0004E4  0E00               	movlw	low main@mL
  1047  0004E6  0100               	movlb	0	; () banked
  1048  0004E8  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1049  0004EA  0E02               	movlw	high main@mL
  1050  0004EC  0100               	movlb	0	; () banked
  1051  0004EE  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1052  0004F0  0E09               	movlw	low main@mR
  1053  0004F2  0100               	movlb	0	; () banked
  1054  0004F4  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1055  0004F6  0E02               	movlw	high main@mR
  1056  0004F8  0100               	movlb	0	; () banked
  1057  0004FA  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1058  0004FC  0E64               	movlw	100
  1059  0004FE  0100               	movlb	0	; () banked
  1060  000500  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1061  000502  ECFD  F009         	call	_fullSpeedAhead	;wreg free
  1062                           
  1063                           ;main.c: 152: delay_tenth_s(1);
  1064  000506  0E01               	movlw	1
  1065  000508  EC99  F00B         	call	_delay_tenth_s
  1066                           
  1067                           ;main.c: 154: mode=-1;
  1068  00050C  683B               	setf	_mode,c	;volatile
  1069                           
  1070                           ;main.c: 156: break;
  1071  00050E  D193               	goto	l3303
  1072  000510                     l3205:
  1073                           
  1074                           ;main.c: 164: SetLine(1);
  1075  000510  0E01               	movlw	1
  1076  000512  ECEA  F00B         	call	_SetLine
  1077                           
  1078                           ;main.c: 165: LCD_String("Searching");
  1079  000516  0E44               	movlw	low STR_7
  1080  000518  6E2A               	movwf	LCD_String@string,c
  1081  00051A  0E03               	movlw	high STR_7
  1082  00051C  6E2B               	movwf	LCD_String@string+1,c
  1083  00051E  ECAF  F00A         	call	_LCD_String	;wreg free
  1084                           
  1085                           ;main.c: 167: if (DirectionFound==-1) {
  1086  000522  0100               	movlb	0	; () banked
  1087  000524  29B3               	incf	main@DirectionFound& (0+255),w,b
  1088  000526  A4D8               	btfss	status,2,c
  1089  000528  D030               	goto	l3221
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 172: fullSpeedAhead(&mL, &mR, 100);
  1093  00052A  0E00               	movlw	low main@mL
  1094  00052C  0100               	movlb	0	; () banked
  1095  00052E  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1096  000530  0E02               	movlw	high main@mL
  1097  000532  0100               	movlb	0	; () banked
  1098  000534  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1099  000536  0E09               	movlw	low main@mR
  1100  000538  0100               	movlb	0	; () banked
  1101  00053A  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1102  00053C  0E02               	movlw	high main@mR
  1103  00053E  0100               	movlb	0	; () banked
  1104  000540  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1105  000542  0E64               	movlw	100
  1106  000544  0100               	movlb	0	; () banked
  1107  000546  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1108  000548  ECFD  F009         	call	_fullSpeedAhead	;wreg free
  1109                           
  1110                           ;main.c: 173: delay_tenth_s(6);
  1111  00054C  0E06               	movlw	6
  1112  00054E  EC99  F00B         	call	_delay_tenth_s
  1113                           
  1114                           ;main.c: 174: stop(&mL,&mR);
  1115  000552  0E00               	movlw	low main@mL
  1116  000554  0100               	movlb	0	; () banked
  1117  000556  6F62               	movwf	stop@mL& (0+255),b
  1118  000558  0E02               	movlw	high main@mL
  1119  00055A  0100               	movlb	0	; () banked
  1120  00055C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1121  00055E  0E09               	movlw	low main@mR
  1122  000560  0100               	movlb	0	; () banked
  1123  000562  6F64               	movwf	stop@mR& (0+255),b
  1124  000564  0E02               	movlw	high main@mR
  1125  000566  0100               	movlb	0	; () banked
  1126  000568  6F65               	movwf	(stop@mR+1)& (0+255),b
  1127  00056A  EC2C  F009         	call	_stop	;wreg free
  1128                           
  1129                           ;main.c: 175: DirectionFound=0;
  1130  00056E  0E00               	movlw	0
  1131  000570  0100               	movlb	0	; () banked
  1132  000572  6FB3               	movwf	main@DirectionFound& (0+255),b
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;main.c: 176: MoveType[Move]=0;
  1136  000574  0100               	movlb	0	; () banked
  1137  000576  51B4               	movf	main@Move& (0+255),w,b
  1138  000578  0D01               	mullw	1
  1139  00057A  0E64               	movlw	low main@MoveType
  1140  00057C  24F3               	addwf	prodl,w,c
  1141  00057E  6ED9               	movwf	fsr2l,c
  1142  000580  0E01               	movlw	high main@MoveType
  1143  000582  20F4               	addwfc	prodh,w,c
  1144  000584  6EDA               	movwf	fsr2h,c
  1145  000586  0E00               	movlw	0
  1146  000588  D132               	goto	L2
  1147  00058A                     l3221:
  1148                           
  1149                           ; BSR set to: 0
  1150  00058A  0100               	movlb	0	; () banked
  1151  00058C  51B3               	movf	main@DirectionFound& (0+255),w,b
  1152  00058E  0100               	movlb	0	; () banked
  1153  000590  A4D8               	btfss	status,2,c
  1154  000592  D020               	goto	l3227
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 179: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1158  000594  0E00               	movlw	low main@mL
  1159  000596  0100               	movlb	0	; () banked
  1160  000598  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1161  00059A  0E02               	movlw	high main@mL
  1162  00059C  0100               	movlb	0	; () banked
  1163  00059E  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1164  0005A0  0E09               	movlw	low main@mR
  1165  0005A2  0100               	movlb	0	; () banked
  1166  0005A4  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1167  0005A6  0E02               	movlw	high main@mR
  1168  0005A8  0100               	movlb	0	; () banked
  1169  0005AA  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1170  0005AC  C0AE  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1171  0005B0  0100               	movlb	0	; () banked
  1172  0005B2  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1173  0005B4  0100               	movlb	0	; () banked
  1174  0005B6  51B4               	movf	main@Move& (0+255),w,b
  1175  0005B8  0D01               	mullw	1
  1176  0005BA  0E00               	movlw	low main@MoveTime
  1177  0005BC  24F3               	addwf	prodl,w,c
  1178  0005BE  0100               	movlb	0	; () banked
  1179  0005C0  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1180  0005C2  0E01               	movlw	high main@MoveTime
  1181  0005C4  20F4               	addwfc	prodh,w,c
  1182  0005C6  0100               	movlb	0	; () banked
  1183  0005C8  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1184  0005CA  ECAF  F005         	call	_ScanWithRange	;wreg free
  1185  0005CE  0100               	movlb	0	; () banked
  1186  0005D0  6FB3               	movwf	main@DirectionFound& (0+255),b
  1187  0005D2  D02E               	goto	l3235
  1188  0005D4                     l3227:
  1189                           
  1190                           ; BSR set to: 0
  1191  0005D4  0100               	movlb	0	; () banked
  1192  0005D6  05B3               	decf	main@DirectionFound& (0+255),w,b
  1193  0005D8  A4D8               	btfss	status,2,c
  1194  0005DA  D023               	goto	l3231
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;main.c: 183: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1198  0005DC  0E00               	movlw	low main@mL
  1199  0005DE  0100               	movlb	0	; () banked
  1200  0005E0  6F6D               	movwf	ScanIR@mL& (0+255),b
  1201  0005E2  0E02               	movlw	high main@mL
  1202  0005E4  0100               	movlb	0	; () banked
  1203  0005E6  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1204  0005E8  0E09               	movlw	low main@mR
  1205  0005EA  0100               	movlb	0	; () banked
  1206  0005EC  6F6F               	movwf	ScanIR@mR& (0+255),b
  1207  0005EE  0E02               	movlw	high main@mR
  1208  0005F0  0100               	movlb	0	; () banked
  1209  0005F2  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1210  0005F4  0EB4               	movlw	low main@Move
  1211  0005F6  0100               	movlb	0	; () banked
  1212  0005F8  6F71               	movwf	ScanIR@Move& (0+255),b
  1213  0005FA  0E00               	movlw	high main@Move
  1214  0005FC  0100               	movlb	0	; () banked
  1215  0005FE  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1216  000600  0E00               	movlw	low main@MoveTime
  1217  000602  0100               	movlb	0	; () banked
  1218  000604  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1219  000606  0E01               	movlw	high main@MoveTime
  1220  000608  0100               	movlb	0	; () banked
  1221  00060A  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1222  00060C  0E64               	movlw	low main@MoveType
  1223  00060E  0100               	movlb	0	; () banked
  1224  000610  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1225  000612  0E01               	movlw	high main@MoveType
  1226  000614  0100               	movlb	0	; () banked
  1227  000616  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1228  000618  EC94  F007         	call	_ScanIR	;wreg free
  1229  00061C  0100               	movlb	0	; () banked
  1230  00061E  6FB3               	movwf	main@DirectionFound& (0+255),b
  1231                           
  1232                           ;main.c: 184: } else if (DirectionFound==2) {
  1233  000620  D0E7               	goto	l3291
  1234  000622                     l3231:
  1235                           
  1236                           ; BSR set to: 0
  1237  000622  0E02               	movlw	2
  1238  000624  0100               	movlb	0	; () banked
  1239  000626  19B3               	xorwf	main@DirectionFound& (0+255),w,b
  1240  000628  A4D8               	btfss	status,2,c
  1241  00062A  D0E2               	goto	l3291
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 186: mode=2;
  1245  00062C  0E02               	movlw	2
  1246  00062E  6E3B               	movwf	_mode,c	;volatile
  1247  000630                     l3235:
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;main.c: 187: MoveType[Move]=1;
  1251  000630  0100               	movlb	0	; () banked
  1252  000632  51B4               	movf	main@Move& (0+255),w,b
  1253  000634  0D01               	mullw	1
  1254  000636  0E64               	movlw	low main@MoveType
  1255  000638  24F3               	addwf	prodl,w,c
  1256  00063A  6ED9               	movwf	fsr2l,c
  1257  00063C  0E01               	movlw	high main@MoveType
  1258  00063E  20F4               	addwfc	prodh,w,c
  1259  000640  6EDA               	movwf	fsr2h,c
  1260  000642  0E01               	movlw	1
  1261  000644  D0D4               	goto	L2
  1262  000646                     l3239:
  1263                           
  1264                           ;main.c: 199: if (RFID_Read) {
  1265  000646  0101               	movlb	1	; () banked
  1266  000648  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1267  00064A  B4D8               	btfsc	status,2,c
  1268  00064C  D0A2               	goto	l3281
  1269                           
  1270                           ; BSR set to: 1
  1271                           ;main.c: 200: stop(&mL, &mR);
  1272  00064E  0E00               	movlw	low main@mL
  1273  000650  0100               	movlb	0	; () banked
  1274  000652  6F62               	movwf	stop@mL& (0+255),b
  1275  000654  0E02               	movlw	high main@mL
  1276  000656  0100               	movlb	0	; () banked
  1277  000658  6F63               	movwf	(stop@mL+1)& (0+255),b
  1278  00065A  0E09               	movlw	low main@mR
  1279  00065C  0100               	movlb	0	; () banked
  1280  00065E  6F64               	movwf	stop@mR& (0+255),b
  1281  000660  0E02               	movlw	high main@mR
  1282  000662  0100               	movlb	0	; () banked
  1283  000664  6F65               	movwf	(stop@mR+1)& (0+255),b
  1284  000666  EC2C  F009         	call	_stop	;wreg free
  1285                           
  1286                           ;main.c: 201: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1287  00066A  0E03               	movlw	3
  1288  00066C  0100               	movlb	0	; () banked
  1289  00066E  19CD               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1290  000670  A4D8               	btfss	status,2,c
  1291  000672  D002               	goto	u2720
  1292  000674  0E01               	movlw	1
  1293  000676  D001               	goto	u2722
  1294  000678                     u2720:
  1295  000678  0E00               	movlw	0
  1296  00067A                     u2722:
  1297  00067A  0100               	movlb	0	; () banked
  1298  00067C  6FAC               	movwf	??_main& (0+255),b
  1299  00067E  0E02               	movlw	2
  1300  000680  0100               	movlb	0	; () banked
  1301  000682  19BE               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1302  000684  A4D8               	btfss	status,2,c
  1303  000686  D002               	goto	u2730
  1304  000688  0E01               	movlw	1
  1305  00068A  D001               	goto	u2732
  1306  00068C                     u2730:
  1307  00068C  0E00               	movlw	0
  1308  00068E                     u2732:
  1309  00068E  0100               	movlb	0	; () banked
  1310  000690  15AC               	andwf	??_main& (0+255),w,b
  1311  000692  A0E8               	btfss	wreg,0,c
  1312  000694  D0D0               	goto	l3303
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;main.c: 202: if (VerifySignal(ReceivedString)){
  1316  000696  0EBE               	movlw	low _ReceivedString
  1317  000698  6E24               	movwf	VerifySignal@Signal,c
  1318  00069A  0E00               	movlw	high _ReceivedString
  1319  00069C  6E25               	movwf	VerifySignal@Signal+1,c
  1320  00069E  ECD2  F008         	call	_VerifySignal	;wreg free
  1321  0006A2  0900               	iorlw	0
  1322  0006A4  B4D8               	btfsc	status,2,c
  1323  0006A6  D041               	goto	l3273
  1324                           
  1325                           ;main.c: 204: for (i=0; i<10; i++){
  1326  0006A8  0E00               	movlw	0
  1327  0006AA  0100               	movlb	0	; () banked
  1328  0006AC  6FB5               	movwf	main@i& (0+255),b
  1329  0006AE                     l3249:
  1330                           
  1331                           ; BSR set to: 0
  1332  0006AE  0E09               	movlw	9
  1333  0006B0  0100               	movlb	0	; () banked
  1334  0006B2  65B5               	cpfsgt	main@i& (0+255),b
  1335  0006B4  D001               	goto	l3253
  1336  0006B6  D020               	goto	l3259
  1337  0006B8                     l3253:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;main.c: 205: Message[i] = ReceivedString[i+1];
  1341  0006B8  0100               	movlb	0	; () banked
  1342  0006BA  51B5               	movf	main@i& (0+255),w,b
  1343  0006BC  0100               	movlb	0	; () banked
  1344  0006BE  6FAC               	movwf	??_main& (0+255),b
  1345  0006C0  6BAD               	clrf	(??_main+1)& (0+255),b
  1346  0006C2  0E01               	movlw	1
  1347  0006C4  0100               	movlb	0	; () banked
  1348  0006C6  27AC               	addwf	??_main& (0+255),f,b
  1349  0006C8  0E00               	movlw	0
  1350  0006CA  23AD               	addwfc	(??_main+1)& (0+255),f,b
  1351  0006CC  0EBE               	movlw	low _ReceivedString
  1352  0006CE  0100               	movlb	0	; () banked
  1353  0006D0  25AC               	addwf	??_main& (0+255),w,b
  1354  0006D2  6ED9               	movwf	fsr2l,c
  1355  0006D4  0E00               	movlw	high _ReceivedString
  1356  0006D6  0100               	movlb	0	; () banked
  1357  0006D8  21AD               	addwfc	(??_main+1)& (0+255),w,b
  1358  0006DA  6EDA               	movwf	fsr2h,c
  1359  0006DC  0100               	movlb	0	; () banked
  1360  0006DE  51B5               	movf	main@i& (0+255),w,b
  1361  0006E0  0D01               	mullw	1
  1362  0006E2  0EF0               	movlw	low main@Message
  1363  0006E4  24F3               	addwf	prodl,w,c
  1364  0006E6  6EE1               	movwf	fsr1l,c
  1365  0006E8  0E01               	movlw	high main@Message
  1366  0006EA  20F4               	addwfc	prodh,w,c
  1367  0006EC  6EE2               	movwf	fsr1h,c
  1368  0006EE  CFDF FFE7          	movff	indf2,indf1
  1369                           
  1370                           ; BSR set to: 0
  1371  0006F2  0100               	movlb	0	; () banked
  1372  0006F4  2BB5               	incf	main@i& (0+255),f,b
  1373  0006F6  D7DB               	goto	l3249
  1374  0006F8                     l3259:
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;main.c: 206: }
  1378                           ;main.c: 209: for (i=0; i<16; i++) {
  1379  0006F8  0E00               	movlw	0
  1380  0006FA  0100               	movlb	0	; () banked
  1381  0006FC  6FB5               	movwf	main@i& (0+255),b
  1382  0006FE                     l3261:
  1383                           
  1384                           ; BSR set to: 0
  1385  0006FE  0E0F               	movlw	15
  1386  000700  0100               	movlb	0	; () banked
  1387  000702  65B5               	cpfsgt	main@i& (0+255),b
  1388  000704  D001               	goto	l3265
  1389  000706  D00E               	goto	l3271
  1390  000708                     l3265:
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main.c: 210: ReceivedString[i]=0;
  1394  000708  0100               	movlb	0	; () banked
  1395  00070A  51B5               	movf	main@i& (0+255),w,b
  1396  00070C  0D01               	mullw	1
  1397  00070E  0EBE               	movlw	low _ReceivedString
  1398  000710  24F3               	addwf	prodl,w,c
  1399  000712  6ED9               	movwf	fsr2l,c
  1400  000714  0E00               	movlw	high _ReceivedString
  1401  000716  20F4               	addwfc	prodh,w,c
  1402  000718  6EDA               	movwf	fsr2h,c
  1403  00071A  0E00               	movlw	0
  1404  00071C  6EDF               	movwf	indf2,c
  1405                           
  1406                           ; BSR set to: 0
  1407  00071E  0100               	movlb	0	; () banked
  1408  000720  2BB5               	incf	main@i& (0+255),f,b
  1409  000722  D7ED               	goto	l3261
  1410  000724                     l3271:
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 211: }
  1414                           ;main.c: 212: mode=3;
  1415  000724  0E03               	movlw	3
  1416  000726  6E3B               	movwf	_mode,c	;volatile
  1417                           
  1418                           ;main.c: 214: } else {
  1419  000728  D086               	goto	l3303
  1420  00072A                     l3273:
  1421                           
  1422                           ;main.c: 215: fullSpeedBack(&mL,&mR, 100);
  1423  00072A  0E00               	movlw	low main@mL
  1424  00072C  0100               	movlb	0	; () banked
  1425  00072E  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1426  000730  0E02               	movlw	high main@mL
  1427  000732  0100               	movlb	0	; () banked
  1428  000734  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1429  000736  0E09               	movlw	low main@mR
  1430  000738  0100               	movlb	0	; () banked
  1431  00073A  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1432  00073C  0E02               	movlw	high main@mR
  1433  00073E  0100               	movlb	0	; () banked
  1434  000740  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1435  000742  0E64               	movlw	100
  1436  000744  0100               	movlb	0	; () banked
  1437  000746  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1438  000748  EC7A  F00B         	call	_fullSpeedBack	;wreg free
  1439                           
  1440                           ;main.c: 216: delay_tenth_s(5);
  1441  00074C  0E05               	movlw	5
  1442  00074E  EC99  F00B         	call	_delay_tenth_s
  1443                           
  1444                           ;main.c: 217: stop(&mL,&mR);
  1445  000752  0E00               	movlw	low main@mL
  1446  000754  0100               	movlb	0	; () banked
  1447  000756  6F62               	movwf	stop@mL& (0+255),b
  1448  000758  0E02               	movlw	high main@mL
  1449  00075A  0100               	movlb	0	; () banked
  1450  00075C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1451  00075E  0E09               	movlw	low main@mR
  1452  000760  0100               	movlb	0	; () banked
  1453  000762  6F64               	movwf	stop@mR& (0+255),b
  1454  000764  0E02               	movlw	high main@mR
  1455  000766  0100               	movlb	0	; () banked
  1456  000768  6F65               	movwf	(stop@mR+1)& (0+255),b
  1457  00076A  EC2C  F009         	call	_stop	;wreg free
  1458                           
  1459                           ;main.c: 218: fullSpeedAhead(&mL,&mR, 100);
  1460  00076E  0E00               	movlw	low main@mL
  1461  000770  0100               	movlb	0	; () banked
  1462  000772  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1463  000774  0E02               	movlw	high main@mL
  1464  000776  0100               	movlb	0	; () banked
  1465  000778  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1466  00077A  0E09               	movlw	low main@mR
  1467  00077C  0100               	movlb	0	; () banked
  1468  00077E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1469  000780  0E02               	movlw	high main@mR
  1470  000782  0100               	movlb	0	; () banked
  1471  000784  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1472  000786  0E64               	movlw	100
  1473  000788  0100               	movlb	0	; () banked
  1474  00078A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1475  00078C  ECFD  F009         	call	_fullSpeedAhead	;wreg free
  1476                           
  1477                           ;main.c: 219: }
  1478                           ;main.c: 220: }
  1479                           ;main.c: 221: } else {
  1480  000790  D052               	goto	l3303
  1481  000792                     l3281:
  1482                           
  1483                           ;main.c: 222: DirectionFound=1;
  1484  000792  0E01               	movlw	1
  1485  000794  0100               	movlb	0	; () banked
  1486  000796  6FB3               	movwf	main@DirectionFound& (0+255),b
  1487                           
  1488                           ;main.c: 223: mode=1;
  1489  000798  0E01               	movlw	1
  1490  00079A  6E3B               	movwf	_mode,c	;volatile
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;main.c: 225: fullSpeedAhead(&mL,&mR, 100);
  1494  00079C  0E00               	movlw	low main@mL
  1495  00079E  0100               	movlb	0	; () banked
  1496  0007A0  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1497  0007A2  0E02               	movlw	high main@mL
  1498  0007A4  0100               	movlb	0	; () banked
  1499  0007A6  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1500  0007A8  0E09               	movlw	low main@mR
  1501  0007AA  0100               	movlb	0	; () banked
  1502  0007AC  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1503  0007AE  0E02               	movlw	high main@mR
  1504  0007B0  0100               	movlb	0	; () banked
  1505  0007B2  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1506  0007B4  0E64               	movlw	100
  1507  0007B6  0100               	movlb	0	; () banked
  1508  0007B8  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1509  0007BA  ECFD  F009         	call	_fullSpeedAhead	;wreg free
  1510                           
  1511                           ;main.c: 226: delay_tenth_s(5);
  1512  0007BE  0E05               	movlw	5
  1513  0007C0  EC99  F00B         	call	_delay_tenth_s
  1514                           
  1515                           ;main.c: 227: MoveType[Move] = 0;
  1516  0007C4  0100               	movlb	0	; () banked
  1517  0007C6  51B4               	movf	main@Move& (0+255),w,b
  1518  0007C8  0D01               	mullw	1
  1519  0007CA  0E64               	movlw	low main@MoveType
  1520  0007CC  24F3               	addwf	prodl,w,c
  1521  0007CE  6ED9               	movwf	fsr2l,c
  1522  0007D0  0E01               	movlw	high main@MoveType
  1523  0007D2  20F4               	addwfc	prodh,w,c
  1524  0007D4  6EDA               	movwf	fsr2h,c
  1525  0007D6  0E00               	movlw	0
  1526  0007D8  6EDF               	movwf	indf2,c
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;main.c: 228: MoveTime[Move] = 5;
  1530  0007DA  0100               	movlb	0	; () banked
  1531  0007DC  51B4               	movf	main@Move& (0+255),w,b
  1532  0007DE  0D01               	mullw	1
  1533  0007E0  0E00               	movlw	low main@MoveTime
  1534  0007E2  24F3               	addwf	prodl,w,c
  1535  0007E4  6ED9               	movwf	fsr2l,c
  1536  0007E6  0E01               	movlw	high main@MoveTime
  1537  0007E8  20F4               	addwfc	prodh,w,c
  1538  0007EA  6EDA               	movwf	fsr2h,c
  1539  0007EC  0E05               	movlw	5
  1540  0007EE                     L2:
  1541  0007EE  6EDF               	movwf	indf2,c
  1542  0007F0                     l3291:
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;main.c: 229: Move++;
  1546  0007F0  0100               	movlb	0	; () banked
  1547  0007F2  2BB4               	incf	main@Move& (0+255),f,b
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;main.c: 230: }
  1551                           ;main.c: 232: break;
  1552  0007F4  D020               	goto	l3303
  1553  0007F6                     l3293:
  1554                           
  1555                           ;main.c: 237: SetLine(1);
  1556  0007F6  0E01               	movlw	1
  1557  0007F8  ECEA  F00B         	call	_SetLine
  1558                           
  1559                           ;main.c: 238: LCD_String(Message);
  1560  0007FC  0EF0               	movlw	low main@Message
  1561  0007FE  6E2A               	movwf	LCD_String@string,c
  1562  000800  0E01               	movlw	high main@Message
  1563  000802  6E2B               	movwf	LCD_String@string+1,c
  1564  000804  ECAF  F00A         	call	_LCD_String	;wreg free
  1565                           
  1566                           ;main.c: 239: SetLine(2);
  1567  000808  0E02               	movlw	2
  1568  00080A  ECEA  F00B         	call	_SetLine
  1569                           
  1570                           ;main.c: 240: LCD_String("Going Home");
  1571  00080E  0E39               	movlw	low STR_8
  1572  000810  6E2A               	movwf	LCD_String@string,c
  1573  000812  0E03               	movlw	high STR_8
  1574  000814  6E2B               	movwf	LCD_String@string+1,c
  1575  000816  ECAF  F00A         	call	_LCD_String	;wreg free
  1576                           
  1577                           ;main.c: 241: stop(&mL,&mR);
  1578  00081A  0E00               	movlw	low main@mL
  1579  00081C  0100               	movlb	0	; () banked
  1580  00081E  6F62               	movwf	stop@mL& (0+255),b
  1581  000820  0E02               	movlw	high main@mL
  1582  000822  0100               	movlb	0	; () banked
  1583  000824  6F63               	movwf	(stop@mL+1)& (0+255),b
  1584  000826  0E09               	movlw	low main@mR
  1585  000828  0100               	movlb	0	; () banked
  1586  00082A  6F64               	movwf	stop@mR& (0+255),b
  1587  00082C  0E02               	movlw	high main@mR
  1588  00082E  0100               	movlb	0	; () banked
  1589  000830  6F65               	movwf	(stop@mR+1)& (0+255),b
  1590  000832  EC2C  F009         	call	_stop	;wreg free
  1591  000836                     l3303:
  1592  000836  503B               	movf	_mode,w,c	;volatile
  1593                           
  1594                           ; Switch size 1, requested type "space"
  1595                           ; Number of cases is 5, Range of values is 0 to 255
  1596                           ; switch strategies available:
  1597                           ; Name         Instructions Cycles
  1598                           ; simple_byte           16     9 (average)
  1599                           ;	Chosen strategy is simple_byte
  1600  000838  0A00               	xorlw	0	; case 0
  1601  00083A  B4D8               	btfsc	status,2,c
  1602  00083C  D641               	goto	l3189
  1603  00083E  0A01               	xorlw	1	; case 1
  1604  000840  B4D8               	btfsc	status,2,c
  1605  000842  D666               	goto	l3205
  1606  000844  0A03               	xorlw	3	; case 2
  1607  000846  B4D8               	btfsc	status,2,c
  1608  000848  D6FE               	goto	l3239
  1609  00084A  0A01               	xorlw	1	; case 3
  1610  00084C  B4D8               	btfsc	status,2,c
  1611  00084E  D7D3               	goto	l3293
  1612  000850  0AFC               	xorlw	252	; case 255
  1613  000852  B4D8               	btfsc	status,2,c
  1614  000854  D5D4               	goto	l3155
  1615  000856  D7EF               	goto	l3303
  1616  000858                     __end_of_main:
  1617                           	opt stack 0
  1618                           tblptru	equ	0xFF8
  1619                           prodh	equ	0xFF4
  1620                           prodl	equ	0xFF3
  1621                           intcon	equ	0xFF2
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           indf1	equ	0xFE7
  1625                           fsr1h	equ	0xFE2
  1626                           fsr1l	equ	0xFE1
  1627                           indf2	equ	0xFDF
  1628                           fsr2h	equ	0xFDA
  1629                           fsr2l	equ	0xFD9
  1630                           status	equ	0xFD8
  1631                           
  1632 ;; *************** function _initRFID *****************
  1633 ;; Defined at:
  1634 ;;		line 5 in file "RFID_Reader.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;		None
  1639 ;; Return value:  Size  Location     Type
  1640 ;;		None               void
  1641 ;; Registers used:
  1642 ;;		wreg, status,2, status,0
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1648 ;;      Params:         0       0       0       0
  1649 ;;      Locals:         0       0       0       0
  1650 ;;      Temps:          0       0       0       0
  1651 ;;      Totals:         0       0       0       0
  1652 ;;Total ram usage:        0 bytes
  1653 ;; Hardware stack levels used:    1
  1654 ;; Hardware stack levels required when called:    3
  1655 ;; This function calls:
  1656 ;;		Nothing
  1657 ;; This function is called by:
  1658 ;;		_main
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text1
  1663  0018EA                     __ptext1:
  1664                           	opt stack 0
  1665  0018EA                     _initRFID:
  1666                           	opt stack 27
  1667                           
  1668                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1669                           
  1670                           ;incstack = 0
  1671  0018EA  5094               	movf	3988,w,c	;volatile
  1672  0018EC  09C0               	iorlw	192
  1673  0018EE  6E94               	movwf	3988,c	;volatile
  1674                           
  1675                           ;RFID_Reader.c: 10: SPBRG=205;
  1676  0018F0  0ECD               	movlw	205
  1677  0018F2  6EAF               	movwf	4015,c	;volatile
  1678                           
  1679                           ;RFID_Reader.c: 11: SPBRGH=0;
  1680  0018F4  0E00               	movlw	0
  1681  0018F6  6EB0               	movwf	4016,c	;volatile
  1682                           
  1683                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1684  0018F8  86AA               	bsf	4010,3,c	;volatile
  1685                           
  1686                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1687  0018FA  84AC               	bsf	4012,2,c	;volatile
  1688                           
  1689                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1690  0018FC  88AB               	bsf	4011,4,c	;volatile
  1691                           
  1692                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1693  0018FE  8EAB               	bsf	4011,7,c	;volatile
  1694                           
  1695                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1696  001900  98AC               	bcf	4012,4,c	;volatile
  1697                           
  1698                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1699  001902  9CAB               	bcf	4011,6,c	;volatile
  1700  001904  0012               	return		;funcret
  1701  001906                     __end_of_initRFID:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           prodh	equ	0xFF4
  1705                           prodl	equ	0xFF3
  1706                           intcon	equ	0xFF2
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           indf1	equ	0xFE7
  1710                           fsr1h	equ	0xFE2
  1711                           fsr1l	equ	0xFE1
  1712                           indf2	equ	0xFDF
  1713                           fsr2h	equ	0xFDA
  1714                           fsr2l	equ	0xFD9
  1715                           status	equ	0xFD8
  1716                           
  1717 ;; *************** function _initMotorPWM *****************
  1718 ;; Defined at:
  1719 ;;		line 4 in file "dc_motor.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;		None               void
  1726 ;; Registers used:
  1727 ;;		wreg, status,2
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1733 ;;      Params:         0       0       0       0
  1734 ;;      Locals:         0       0       0       0
  1735 ;;      Temps:          0       0       0       0
  1736 ;;      Totals:         0       0       0       0
  1737 ;;Total ram usage:        0 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    3
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text2
  1748  0017A2                     __ptext2:
  1749                           	opt stack 0
  1750  0017A2                     _initMotorPWM:
  1751                           	opt stack 27
  1752                           
  1753                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1754                           
  1755                           ;incstack = 0
  1756  0017A2  0E00               	movlw	0
  1757  0017A4  6E7F               	movwf	3967,c	;volatile
  1758                           
  1759                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1760  0017A6  0E80               	movlw	128
  1761  0017A8  6E7E               	movwf	3966,c	;volatile
  1762                           
  1763                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1764  0017AA  0E6F               	movlw	111
  1765  0017AC  6E6F               	movwf	3951,c	;volatile
  1766                           
  1767                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1768  0017AE  0E00               	movlw	0
  1769  0017B0  6E6E               	movwf	3950,c	;volatile
  1770                           
  1771                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1772  0017B2  0EC7               	movlw	199
  1773  0017B4  6E7B               	movwf	3963,c	;volatile
  1774                           
  1775                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1776  0017B6  0E00               	movlw	0
  1777  0017B8  6E7A               	movwf	3962,c	;volatile
  1778                           
  1779                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1780  0017BA  0E00               	movlw	0
  1781  0017BC  6E79               	movwf	3961,c	;volatile
  1782                           
  1783                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1784  0017BE  0E00               	movlw	0
  1785  0017C0  6E78               	movwf	3960,c	;volatile
  1786                           
  1787                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1788  0017C2  0E00               	movlw	0
  1789  0017C4  6E77               	movwf	3959,c	;volatile
  1790                           
  1791                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1792  0017C6  0E00               	movlw	0
  1793  0017C8  6E76               	movwf	3958,c	;volatile
  1794                           
  1795                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1796  0017CA  9093               	bcf	3987,0,c	;volatile
  1797                           
  1798                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1799  0017CC  9293               	bcf	3987,1,c	;volatile
  1800                           
  1801                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1802  0017CE  9493               	bcf	3987,2,c	;volatile
  1803                           
  1804                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1805  0017D0  9693               	bcf	3987,3,c	;volatile
  1806  0017D2  0012               	return		;funcret
  1807  0017D4                     __end_of_initMotorPWM:
  1808                           	opt stack 0
  1809                           tblptru	equ	0xFF8
  1810                           prodh	equ	0xFF4
  1811                           prodl	equ	0xFF3
  1812                           intcon	equ	0xFF2
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           indf1	equ	0xFE7
  1816                           fsr1h	equ	0xFE2
  1817                           fsr1l	equ	0xFE1
  1818                           indf2	equ	0xFDF
  1819                           fsr2h	equ	0xFDA
  1820                           fsr2l	equ	0xFD9
  1821                           status	equ	0xFD8
  1822                           
  1823 ;; *************** function _initLCD *****************
  1824 ;; Defined at:
  1825 ;;		line 38 in file "LCD.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;		None
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;		None
  1830 ;; Return value:  Size  Location     Type
  1831 ;;		None               void
  1832 ;; Registers used:
  1833 ;;		wreg, status,2, status,0, cstack
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1839 ;;      Params:         0       0       0       0
  1840 ;;      Locals:         0       0       0       0
  1841 ;;      Temps:          1       0       0       0
  1842 ;;      Totals:         1       0       0       0
  1843 ;;Total ram usage:        1 bytes
  1844 ;; Hardware stack levels used:    1
  1845 ;; Hardware stack levels required when called:    6
  1846 ;; This function calls:
  1847 ;;		_LCDout
  1848 ;;		_SendLCD
  1849 ;; This function is called by:
  1850 ;;		_main
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text3
  1855  0010E8                     __ptext3:
  1856                           	opt stack 0
  1857  0010E8                     _initLCD:
  1858                           	opt stack 24
  1859                           
  1860                           ;LCD.c: 44: TRISAbits.RA6=0;
  1861                           
  1862                           ;incstack = 0
  1863  0010E8  9C92               	bcf	3986,6,c	;volatile
  1864                           
  1865                           ;LCD.c: 45: TRISCbits.RC0=0;
  1866  0010EA  9094               	bcf	3988,0,c	;volatile
  1867                           
  1868                           ;LCD.c: 46: TRISCbits.RC1=0;
  1869  0010EC  9294               	bcf	3988,1,c	;volatile
  1870                           
  1871                           ;LCD.c: 47: TRISCbits.RC2=0;
  1872  0010EE  9494               	bcf	3988,2,c	;volatile
  1873                           
  1874                           ;LCD.c: 48: TRISDbits.RD0=0;
  1875  0010F0  9095               	bcf	3989,0,c	;volatile
  1876                           
  1877                           ;LCD.c: 49: TRISDbits.RD1=0;
  1878  0010F2  9295               	bcf	3989,1,c	;volatile
  1879                           
  1880                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1881  0010F4  0E27               	movlw	39
  1882  0010F6  6E2A               	movwf	??_initLCD& (0+255),c
  1883  0010F8  0EF5               	movlw	245
  1884  0010FA                     u2827:
  1885  0010FA  2EE8               	decfsz	wreg,f,c
  1886  0010FC  D7FE               	goto	u2827
  1887  0010FE  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1888  001100  D7FC               	goto	u2827
  1889  001102  F000               	nop	
  1890                           
  1891                           ;LCD.c: 52: LCDout(0b0011);
  1892  001104  0E03               	movlw	3
  1893  001106  EC11  F008         	call	_LCDout
  1894                           
  1895                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1896  00110A  0E0D               	movlw	13
  1897  00110C  6E2A               	movwf	??_initLCD& (0+255),c
  1898  00110E  0EFC               	movlw	252
  1899  001110                     u2837:
  1900  001110  2EE8               	decfsz	wreg,f,c
  1901  001112  D7FE               	goto	u2837
  1902  001114  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1903  001116  D7FC               	goto	u2837
  1904                           
  1905                           ;LCD.c: 54: LCDout(0b0011);
  1906  001118  0E03               	movlw	3
  1907  00111A  EC11  F008         	call	_LCDout
  1908                           
  1909                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1910  00111E  0E85               	movlw	133
  1911  001120                     u2847:
  1912  001120  2EE8               	decfsz	wreg,f,c
  1913  001122  D7FE               	goto	u2847
  1914  001124  F000               	nop	
  1915                           
  1916                           ;LCD.c: 56: LCDout(0b0011);
  1917  001126  0E03               	movlw	3
  1918  001128  EC11  F008         	call	_LCDout
  1919                           
  1920                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1921  00112C  0E21               	movlw	33
  1922  00112E                     u2857:
  1923  00112E  2EE8               	decfsz	wreg,f,c
  1924  001130  D7FE               	goto	u2857
  1925  001132  F000               	nop	
  1926                           
  1927                           ;LCD.c: 58: LCDout(0b0010);
  1928  001134  0E02               	movlw	2
  1929  001136  EC11  F008         	call	_LCDout
  1930                           
  1931                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1932  00113A  0E21               	movlw	33
  1933  00113C                     u2867:
  1934  00113C  2EE8               	decfsz	wreg,f,c
  1935  00113E  D7FE               	goto	u2867
  1936  001140  F000               	nop	
  1937                           
  1938                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1939  001142  0E00               	movlw	0
  1940  001144  6E28               	movwf	SendLCD@type,c
  1941  001146  0E28               	movlw	40
  1942  001148  EC02  F00C         	call	_SendLCD
  1943                           
  1944                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1945  00114C  0E21               	movlw	33
  1946  00114E                     u2877:
  1947  00114E  2EE8               	decfsz	wreg,f,c
  1948  001150  D7FE               	goto	u2877
  1949  001152  F000               	nop	
  1950                           
  1951                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1952  001154  0E00               	movlw	0
  1953  001156  6E28               	movwf	SendLCD@type,c
  1954  001158  0E08               	movlw	8
  1955  00115A  EC02  F00C         	call	_SendLCD
  1956                           
  1957                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1958  00115E  0E21               	movlw	33
  1959  001160                     u2887:
  1960  001160  2EE8               	decfsz	wreg,f,c
  1961  001162  D7FE               	goto	u2887
  1962  001164  F000               	nop	
  1963                           
  1964                           ;LCD.c: 66: SendLCD(0b00000001,0);
  1965  001166  0E00               	movlw	0
  1966  001168  6E28               	movwf	SendLCD@type,c
  1967  00116A  0E01               	movlw	1
  1968  00116C  EC02  F00C         	call	_SendLCD
  1969                           
  1970                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  1971  001170  0E0D               	movlw	13
  1972  001172  6E2A               	movwf	??_initLCD& (0+255),c
  1973  001174  0EFC               	movlw	252
  1974  001176                     u2897:
  1975  001176  2EE8               	decfsz	wreg,f,c
  1976  001178  D7FE               	goto	u2897
  1977  00117A  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1978  00117C  D7FC               	goto	u2897
  1979                           
  1980                           ;LCD.c: 68: SendLCD(0b00000110,0);
  1981  00117E  0E00               	movlw	0
  1982  001180  6E28               	movwf	SendLCD@type,c
  1983  001182  0E06               	movlw	6
  1984  001184  EC02  F00C         	call	_SendLCD
  1985                           
  1986                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1987  001188  0E21               	movlw	33
  1988  00118A                     u2907:
  1989  00118A  2EE8               	decfsz	wreg,f,c
  1990  00118C  D7FE               	goto	u2907
  1991  00118E  F000               	nop	
  1992                           
  1993                           ;LCD.c: 70: SendLCD(0b00001100,0);
  1994  001190  0E00               	movlw	0
  1995  001192  6E28               	movwf	SendLCD@type,c
  1996  001194  0E0C               	movlw	12
  1997  001196  EC02  F00C         	call	_SendLCD
  1998                           
  1999                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2000  00119A  0E21               	movlw	33
  2001  00119C                     u2917:
  2002  00119C  2EE8               	decfsz	wreg,f,c
  2003  00119E  D7FE               	goto	u2917
  2004  0011A0  F000               	nop	
  2005  0011A2  0012               	return		;funcret
  2006  0011A4                     __end_of_initLCD:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           prodh	equ	0xFF4
  2010                           prodl	equ	0xFF3
  2011                           intcon	equ	0xFF2
  2012                           postinc0	equ	0xFEE
  2013                           wreg	equ	0xFE8
  2014                           indf1	equ	0xFE7
  2015                           fsr1h	equ	0xFE2
  2016                           fsr1l	equ	0xFE1
  2017                           indf2	equ	0xFDF
  2018                           fsr2h	equ	0xFDA
  2019                           fsr2l	equ	0xFD9
  2020                           status	equ	0xFD8
  2021                           
  2022 ;; *************** function _initIR *****************
  2023 ;; Defined at:
  2024 ;;		line 30 in file "IR_Reading.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;		None               void
  2031 ;; Registers used:
  2032 ;;		wreg, status,2
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2038 ;;      Params:         0       0       0       0
  2039 ;;      Locals:         0       0       0       0
  2040 ;;      Temps:          0       0       0       0
  2041 ;;      Totals:         0       0       0       0
  2042 ;;Total ram usage:        0 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    3
  2045 ;; This function calls:
  2046 ;;		Nothing
  2047 ;; This function is called by:
  2048 ;;		_main
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text4
  2053  0018AA                     __ptext4:
  2054                           	opt stack 0
  2055  0018AA                     _initIR:
  2056                           	opt stack 27
  2057                           
  2058                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2059                           
  2060                           ;incstack = 0
  2061  0018AA  9489               	bcf	3977,2,c	;volatile
  2062                           
  2063                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2064  0018AC  9689               	bcf	3977,3,c	;volatile
  2065                           
  2066                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2067  0018AE  8492               	bsf	3986,2,c	;volatile
  2068                           
  2069                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2070  0018B0  8692               	bsf	3986,3,c	;volatile
  2071                           
  2072                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2073  0018B2  94B8               	bcf	4024,2,c	;volatile
  2074                           
  2075                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2076  0018B4  96B8               	bcf	4024,3,c	;volatile
  2077                           
  2078                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2079  0018B6  9CB8               	bcf	4024,6,c	;volatile
  2080                           
  2081                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2082  0018B8  9EB8               	bcf	4024,7,c	;volatile
  2083                           
  2084                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2085  0018BA  0E06               	movlw	6
  2086  0018BC  6E63               	movwf	3939,c	;volatile
  2087                           
  2088                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2089  0018BE  0E06               	movlw	6
  2090  0018C0  6E62               	movwf	3938,c	;volatile
  2091                           
  2092                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2093  0018C2  9096               	bcf	3990,0,c	;volatile
  2094                           
  2095                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2096  0018C4  9296               	bcf	3990,1,c	;volatile
  2097                           
  2098                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2099  0018C6  0E59               	movlw	89
  2100  0018C8  6EB7               	movwf	4023,c	;volatile
  2101  0018CA  0012               	return		;funcret
  2102  0018CC                     __end_of_initIR:
  2103                           	opt stack 0
  2104                           tblptru	equ	0xFF8
  2105                           prodh	equ	0xFF4
  2106                           prodl	equ	0xFF3
  2107                           intcon	equ	0xFF2
  2108                           postinc0	equ	0xFEE
  2109                           wreg	equ	0xFE8
  2110                           indf1	equ	0xFE7
  2111                           fsr1h	equ	0xFE2
  2112                           fsr1l	equ	0xFE1
  2113                           indf2	equ	0xFDF
  2114                           fsr2h	equ	0xFDA
  2115                           fsr2l	equ	0xFD9
  2116                           status	equ	0xFD8
  2117                           
  2118 ;; *************** function _fullSpeedBack *****************
  2119 ;; Defined at:
  2120 ;;		line 125 in file "dc_motor.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2123 ;;		 -> main@mL(9), 
  2124 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2125 ;;		 -> main@mR(9), 
  2126 ;;  power           1   11[BANK0 ] unsigned char 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;		None               void
  2131 ;; Registers used:
  2132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2138 ;;      Params:         0       5       0       0
  2139 ;;      Locals:         0       0       0       0
  2140 ;;      Temps:          0       0       0       0
  2141 ;;      Totals:         0       5       0       0
  2142 ;;Total ram usage:        5 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    6
  2145 ;; This function calls:
  2146 ;;		_fullSpeedAhead
  2147 ;; This function is called by:
  2148 ;;		_main
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text5
  2153  0016F4                     __ptext5:
  2154                           	opt stack 0
  2155  0016F4                     _fullSpeedBack:
  2156                           	opt stack 24
  2157                           
  2158                           ;dc_motor.c: 128: mL->direction=0;
  2159                           
  2160                           ;incstack = 0
  2161  0016F4  0100               	movlb	0	; () banked
  2162  0016F6  EE20 F001          	lfsr	2,1
  2163  0016FA  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2164  0016FC  26D9               	addwf	fsr2l,f,c
  2165  0016FE  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2166  001700  22DA               	addwfc	fsr2h,f,c
  2167  001702  0E00               	movlw	0
  2168  001704  6EDF               	movwf	indf2,c
  2169                           
  2170                           ;dc_motor.c: 129: mR->direction=0;
  2171  001706  0100               	movlb	0	; () banked
  2172  001708  EE20 F001          	lfsr	2,1
  2173  00170C  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2174  00170E  26D9               	addwf	fsr2l,f,c
  2175  001710  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2176  001712  22DA               	addwfc	fsr2h,f,c
  2177  001714  0E00               	movlw	0
  2178  001716  6EDF               	movwf	indf2,c
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2182  001718  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2183  00171C  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2184  001720  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2185  001724  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2186  001728  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2187  00172C  ECFD  F009         	call	_fullSpeedAhead	;wreg free
  2188  001730  0012               	return		;funcret
  2189  001732                     __end_of_fullSpeedBack:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           intcon	equ	0xFF2
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           indf1	equ	0xFE7
  2198                           fsr1h	equ	0xFE2
  2199                           fsr1l	equ	0xFE1
  2200                           indf2	equ	0xFDF
  2201                           fsr2h	equ	0xFDA
  2202                           fsr2l	equ	0xFD9
  2203                           status	equ	0xFD8
  2204                           
  2205 ;; *************** function _enableSensor *****************
  2206 ;; Defined at:
  2207 ;;		line 106 in file "IR_Reading.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  sensor          1    wreg     unsigned char 
  2210 ;;  status          1   35[COMRAM] unsigned char 
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;  sensor          1   36[COMRAM] unsigned char 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;		None               void
  2215 ;; Registers used:
  2216 ;;		wreg, status,2, status,0
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2222 ;;      Params:         1       0       0       0
  2223 ;;      Locals:         1       0       0       0
  2224 ;;      Temps:          0       0       0       0
  2225 ;;      Totals:         2       0       0       0
  2226 ;;Total ram usage:        2 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    3
  2229 ;; This function calls:
  2230 ;;		Nothing
  2231 ;; This function is called by:
  2232 ;;		_main
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	text6
  2237  00185E                     __ptext6:
  2238                           	opt stack 0
  2239  00185E                     _enableSensor:
  2240                           	opt stack 27
  2241                           
  2242                           ;incstack = 0
  2243                           ;enableSensor@sensor stored from wreg
  2244  00185E  6E25               	movwf	enableSensor@sensor,c
  2245                           
  2246                           ;IR_Reading.c: 108: if (sensor==0){
  2247  001860  5025               	movf	enableSensor@sensor,w,c
  2248  001862  A4D8               	btfss	status,2,c
  2249  001864  D006               	goto	l2297
  2250                           
  2251                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2252  001866  B024               	btfsc	enableSensor@status,0,c
  2253  001868  D002               	bra	u1765
  2254  00186A  908D               	bcf	3981,0,c	;volatile
  2255  00186C  D001               	bra	u1766
  2256  00186E                     u1765:
  2257  00186E  808D               	bsf	3981,0,c	;volatile
  2258  001870                     u1766:
  2259                           
  2260                           ;IR_Reading.c: 110: } else if (sensor==1){
  2261  001870  0012               	return	
  2262  001872                     l2297:
  2263  001872  0425               	decf	enableSensor@sensor,w,c
  2264  001874  A4D8               	btfss	status,2,c
  2265  001876  0012               	return	
  2266                           
  2267                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2268  001878  B024               	btfsc	enableSensor@status,0,c
  2269  00187A  D002               	bra	u1785
  2270  00187C  928D               	bcf	3981,1,c	;volatile
  2271  00187E  D001               	bra	u1786
  2272  001880                     u1785:
  2273  001880  828D               	bsf	3981,1,c	;volatile
  2274  001882                     u1786:
  2275  001882  0012               	return	
  2276  001884                     __end_of_enableSensor:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           prodh	equ	0xFF4
  2280                           prodl	equ	0xFF3
  2281                           intcon	equ	0xFF2
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           indf1	equ	0xFE7
  2285                           fsr1h	equ	0xFE2
  2286                           fsr1l	equ	0xFE1
  2287                           indf2	equ	0xFDF
  2288                           fsr2h	equ	0xFDA
  2289                           fsr2l	equ	0xFD9
  2290                           status	equ	0xFD8
  2291                           
  2292 ;; *************** function _VerifySignal *****************
  2293 ;; Defined at:
  2294 ;;		line 55 in file "RFID_Reader.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2297 ;;		 -> ReceivedString(16), 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  hexByte         2   44[COMRAM] unsigned int 
  2300 ;;  i               1   46[COMRAM] unsigned char 
  2301 ;;  checksum        1   43[COMRAM] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      unsigned char 
  2304 ;; Registers used:
  2305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2311 ;;      Params:         2       0       0       0
  2312 ;;      Locals:         4       0       0       0
  2313 ;;      Temps:          6       0       0       0
  2314 ;;      Totals:        12       0       0       0
  2315 ;;Total ram usage:       12 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    3
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text7
  2326  0011A4                     __ptext7:
  2327                           	opt stack 0
  2328  0011A4                     _VerifySignal:
  2329                           	opt stack 27
  2330                           
  2331                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2332                           
  2333                           ;incstack = 0
  2334  0011A4  0E00               	movlw	0
  2335  0011A6  6E2C               	movwf	VerifySignal@checksum,c
  2336                           
  2337                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2338  0011A8  0E00               	movlw	0
  2339  0011AA  6E2E               	movwf	VerifySignal@hexByte+1,c
  2340  0011AC  0E00               	movlw	0
  2341  0011AE  6E2D               	movwf	VerifySignal@hexByte,c
  2342                           
  2343                           ;RFID_Reader.c: 58: unsigned char i=0;
  2344  0011B0  0E00               	movlw	0
  2345  0011B2  6E2F               	movwf	VerifySignal@i,c
  2346                           
  2347                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2348  0011B4  EE20 F004          	lfsr	2,4
  2349  0011B8  5024               	movf	VerifySignal@Signal,w,c
  2350  0011BA  26D9               	addwf	fsr2l,f,c
  2351  0011BC  5025               	movf	VerifySignal@Signal+1,w,c
  2352  0011BE  22DA               	addwfc	fsr2h,f,c
  2353  0011C0  50DF               	movf	indf2,w,c
  2354  0011C2  6E26               	movwf	??_VerifySignal& (0+255),c
  2355  0011C4  EE20 F003          	lfsr	2,3
  2356  0011C8  5024               	movf	VerifySignal@Signal,w,c
  2357  0011CA  26D9               	addwf	fsr2l,f,c
  2358  0011CC  5025               	movf	VerifySignal@Signal+1,w,c
  2359  0011CE  22DA               	addwfc	fsr2h,f,c
  2360  0011D0  50DF               	movf	indf2,w,c
  2361  0011D2  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2362  0011D4  5027               	movf	??_VerifySignal+1,w,c
  2363  0011D6  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2364  0011D8  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2365  0011DA  5026               	movf	??_VerifySignal,w,c
  2366  0011DC  2428               	addwf	??_VerifySignal+2,w,c
  2367  0011DE  6E2D               	movwf	VerifySignal@hexByte,c
  2368  0011E0  0E00               	movlw	0
  2369  0011E2  2029               	addwfc	??_VerifySignal+3,w,c
  2370  0011E4  6E2E               	movwf	VerifySignal@hexByte+1,c
  2371                           
  2372                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2373  0011E6  EE20 F002          	lfsr	2,2
  2374  0011EA  5024               	movf	VerifySignal@Signal,w,c
  2375  0011EC  26D9               	addwf	fsr2l,f,c
  2376  0011EE  5025               	movf	VerifySignal@Signal+1,w,c
  2377  0011F0  22DA               	addwfc	fsr2h,f,c
  2378  0011F2  50DF               	movf	indf2,w,c
  2379  0011F4  182D               	xorwf	VerifySignal@hexByte,w,c
  2380  0011F6  6E2C               	movwf	VerifySignal@checksum,c
  2381                           
  2382                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2383  0011F8  0E05               	movlw	5
  2384  0011FA  6E2F               	movwf	VerifySignal@i,c
  2385  0011FC                     l2491:
  2386  0011FC  0E09               	movlw	9
  2387  0011FE  642F               	cpfsgt	VerifySignal@i,c
  2388  001200  D001               	goto	l2495
  2389  001202  D028               	goto	l2503
  2390  001204                     l2495:
  2391                           
  2392                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2393  001204  502F               	movf	VerifySignal@i,w,c
  2394  001206  6E26               	movwf	??_VerifySignal& (0+255),c
  2395  001208  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2396  00120A  0E01               	movlw	1
  2397  00120C  2626               	addwf	??_VerifySignal,f,c
  2398  00120E  0E00               	movlw	0
  2399  001210  2227               	addwfc	??_VerifySignal+1,f,c
  2400  001212  5026               	movf	??_VerifySignal,w,c
  2401  001214  2424               	addwf	VerifySignal@Signal,w,c
  2402  001216  6ED9               	movwf	fsr2l,c
  2403  001218  5027               	movf	??_VerifySignal+1,w,c
  2404  00121A  2025               	addwfc	VerifySignal@Signal+1,w,c
  2405  00121C  6EDA               	movwf	fsr2h,c
  2406  00121E  50DF               	movf	indf2,w,c
  2407  001220  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2408  001222  502F               	movf	VerifySignal@i,w,c
  2409  001224  0D01               	mullw	1
  2410  001226  50F3               	movf	prodl,w,c
  2411  001228  2424               	addwf	VerifySignal@Signal,w,c
  2412  00122A  6ED9               	movwf	fsr2l,c
  2413  00122C  50F4               	movf	prodh,w,c
  2414  00122E  2025               	addwfc	VerifySignal@Signal+1,w,c
  2415  001230  6EDA               	movwf	fsr2h,c
  2416  001232  50DF               	movf	indf2,w,c
  2417  001234  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2418  001236  5029               	movf	??_VerifySignal+3,w,c
  2419  001238  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2420  00123A  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2421  00123C  5028               	movf	??_VerifySignal+2,w,c
  2422  00123E  242A               	addwf	??_VerifySignal+4,w,c
  2423  001240  6E2D               	movwf	VerifySignal@hexByte,c
  2424  001242  0E00               	movlw	0
  2425  001244  202B               	addwfc	??_VerifySignal+5,w,c
  2426  001246  6E2E               	movwf	VerifySignal@hexByte+1,c
  2427                           
  2428                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2429  001248  502C               	movf	VerifySignal@checksum,w,c
  2430  00124A  182D               	xorwf	VerifySignal@hexByte,w,c
  2431  00124C  6E2C               	movwf	VerifySignal@checksum,c
  2432  00124E  0E02               	movlw	2
  2433  001250  262F               	addwf	VerifySignal@i,f,c
  2434  001252  D7D4               	goto	l2491
  2435  001254                     l2503:
  2436                           
  2437                           ;RFID_Reader.c: 68: }
  2438                           ;RFID_Reader.c: 71: return 1;
  2439  001254  0E01               	movlw	1
  2440  001256  0012               	return	
  2441  001258                     __end_of_VerifySignal:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           prodh	equ	0xFF4
  2445                           prodl	equ	0xFF3
  2446                           intcon	equ	0xFF2
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           indf1	equ	0xFE7
  2450                           fsr1h	equ	0xFE2
  2451                           fsr1l	equ	0xFE1
  2452                           indf2	equ	0xFDF
  2453                           fsr2h	equ	0xFDA
  2454                           fsr2l	equ	0xFD9
  2455                           status	equ	0xFD8
  2456                           
  2457 ;; *************** function _ScanWithRange *****************
  2458 ;; Defined at:
  2459 ;;		line 77 in file "Movement.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2462 ;;		 -> main@mL(9), 
  2463 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2464 ;;		 -> main@mR(9), 
  2465 ;;  milliseconds    2   17[BANK0 ] int 
  2466 ;;  MoveTimeEntr    2   19[BANK0 ] PTR unsigned char 
  2467 ;;		 -> main@MoveTime(100), 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  buf            40   23[BANK0 ] unsigned char [40]
  2470 ;;  SensorResult    4   70[BANK0 ] unsigned int [2]
  2471 ;;  DirectionFou    2   68[BANK0 ] const unsigned int 
  2472 ;;  n               2   66[BANK0 ] unsigned int 
  2473 ;;  i               2   64[BANK0 ] unsigned int 
  2474 ;;  RightFlag       1   75[BANK0 ] unsigned char 
  2475 ;;  LeftFlag        1   74[BANK0 ] unsigned char 
  2476 ;;  TimeAboveThr    1   63[BANK0 ] unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      unsigned char 
  2479 ;; Registers used:
  2480 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2486 ;;      Params:         0       8       0       0
  2487 ;;      Locals:         0      53       0       0
  2488 ;;      Temps:          0       2       0       0
  2489 ;;      Totals:         0      63       0       0
  2490 ;;Total ram usage:       63 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    7
  2493 ;; This function calls:
  2494 ;;		_LCD_String
  2495 ;;		_SendLCD
  2496 ;;		_SetLine
  2497 ;;		_delay_tenth_s
  2498 ;;		_grabLeftIR
  2499 ;;		_grabRightIR
  2500 ;;		_sprintf
  2501 ;;		_stop
  2502 ;;		_turnLeft
  2503 ;;		_turnRight
  2504 ;; This function is called by:
  2505 ;;		_main
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text8
  2510  000B5E                     __ptext8:
  2511                           	opt stack 0
  2512  000B5E                     _ScanWithRange:
  2513                           	opt stack 23
  2514                           
  2515                           ;Movement.c: 80: unsigned int SensorResult[2]={0,0};
  2516                           
  2517                           ;incstack = 0
  2518  000B5E  C0BA  F0A6         	movff	ScanWithRange@F3889,ScanWithRange@SensorResult
  2519  000B62  C0BB  F0A7         	movff	ScanWithRange@F3889+1,ScanWithRange@SensorResult+1
  2520  000B66  C0BC  F0A8         	movff	ScanWithRange@F3889+2,ScanWithRange@SensorResult+2
  2521  000B6A  C0BD  F0A9         	movff	ScanWithRange@F3889+3,ScanWithRange@SensorResult+3
  2522                           
  2523                           ;Movement.c: 81: unsigned char LeftFlag=0;
  2524  000B6E  0E00               	movlw	0
  2525  000B70  0100               	movlb	0	; () banked
  2526  000B72  6FAA               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2527                           
  2528                           ;Movement.c: 82: unsigned char RightFlag=0;
  2529  000B74  0E00               	movlw	0
  2530  000B76  0100               	movlb	0	; () banked
  2531  000B78  6FAB               	movwf	ScanWithRange@RightFlag& (0+255),b
  2532                           
  2533                           ;Movement.c: 83: char buf[40];
  2534                           ;Movement.c: 84: unsigned int i=0;
  2535  000B7A  0E00               	movlw	0
  2536  000B7C  0100               	movlb	0	; () banked
  2537  000B7E  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2538  000B80  0E00               	movlw	0
  2539  000B82  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2540                           
  2541                           ;Movement.c: 85: unsigned int n=0;
  2542  000B84  0E00               	movlw	0
  2543  000B86  0100               	movlb	0	; () banked
  2544  000B88  6FA3               	movwf	(ScanWithRange@n+1)& (0+255),b
  2545  000B8A  0E00               	movlw	0
  2546  000B8C  6FA2               	movwf	ScanWithRange@n& (0+255),b
  2547                           
  2548                           ;Movement.c: 86: unsigned char TimeAboveThreshold=0;
  2549  000B8E  0E00               	movlw	0
  2550  000B90  0100               	movlb	0	; () banked
  2551  000B92  6F9F               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2552                           
  2553                           ;Movement.c: 89: const unsigned int DirectionFoundThreshold=4000;
  2554  000B94  0E0F               	movlw	15
  2555  000B96  0100               	movlb	0	; () banked
  2556  000B98  6FA5               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2557  000B9A  0EA0               	movlw	160
  2558  000B9C  6FA4               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;Movement.c: 98: turnLeft(mL,mR, 100);
  2562  000B9E  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2563  000BA2  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2564  000BA6  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2565  000BAA  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2566  000BAE  0E64               	movlw	100
  2567  000BB0  0100               	movlb	0	; () banked
  2568  000BB2  6F6B               	movwf	turnLeft@power& (0+255),b
  2569  000BB4  EC07  F00B         	call	_turnLeft	;wreg free
  2570                           
  2571                           ;Movement.c: 99: delay_tenth_s(5);
  2572  000BB8  0E05               	movlw	5
  2573  000BBA  EC99  F00B         	call	_delay_tenth_s
  2574                           
  2575                           ;Movement.c: 100: stop(mL,mR);
  2576  000BBE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2577  000BC2  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2578  000BC6  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2579  000BCA  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2580  000BCE  EC2C  F009         	call	_stop	;wreg free
  2581                           
  2582                           ;Movement.c: 103: for (i=1; i<=milliseconds; i++) {
  2583  000BD2  0E00               	movlw	0
  2584  000BD4  0100               	movlb	0	; () banked
  2585  000BD6  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2586  000BD8  0E01               	movlw	1
  2587  000BDA  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2588  000BDC  D0E2               	goto	l3095
  2589  000BDE                     l3023:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;Movement.c: 106: SensorResult[0]=grabLeftIR();
  2593  000BDE  EC76  F00A         	call	_grabLeftIR	;wreg free
  2594  000BE2  C024  F0A6         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2595  000BE6  C025  F0A7         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2596                           
  2597                           ;Movement.c: 107: SensorResult[1]=grabRightIR();
  2598  000BEA  EC3D  F00A         	call	_grabRightIR	;wreg free
  2599  000BEE  C024  F0A8         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2600  000BF2  C025  F0A9         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2601                           
  2602                           ;Movement.c: 111: CAP1BUFH=0;
  2603  000BF6  0E00               	movlw	0
  2604  000BF8  6E69               	movwf	3945,c	;volatile
  2605                           
  2606                           ;Movement.c: 112: CAP1BUFL=0;
  2607  000BFA  0E00               	movlw	0
  2608  000BFC  6E68               	movwf	3944,c	;volatile
  2609                           
  2610                           ;Movement.c: 113: CAP2BUFH=0;
  2611  000BFE  0E00               	movlw	0
  2612  000C00  6E67               	movwf	3943,c	;volatile
  2613                           
  2614                           ;Movement.c: 114: CAP2BUFL=0;
  2615  000C02  0E00               	movlw	0
  2616  000C04  6E66               	movwf	3942,c	;volatile
  2617                           
  2618                           ;Movement.c: 117: SendLCD(0b00000001,0);
  2619  000C06  0E00               	movlw	0
  2620  000C08  6E28               	movwf	SendLCD@type,c
  2621  000C0A  0E01               	movlw	1
  2622  000C0C  EC02  F00C         	call	_SendLCD
  2623                           
  2624                           ;Movement.c: 118: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2625  000C10  0E21               	movlw	33
  2626  000C12                     u2927:
  2627  000C12  2EE8               	decfsz	wreg,f,c
  2628  000C14  D7FE               	goto	u2927
  2629  000C16  F000               	nop	
  2630                           
  2631                           ;Movement.c: 119: SendLCD(0b00000010,0);
  2632  000C18  0E00               	movlw	0
  2633  000C1A  6E28               	movwf	SendLCD@type,c
  2634  000C1C  0E02               	movlw	2
  2635  000C1E  EC02  F00C         	call	_SendLCD
  2636                           
  2637                           ;Movement.c: 120: _delay((unsigned long)((2)*(8000000/4000.0)));
  2638  000C22  0E06               	movlw	6
  2639  000C24  0100               	movlb	0	; () banked
  2640  000C26  6F75               	movwf	??_ScanWithRange& (0+255),b
  2641  000C28  0E30               	movlw	48
  2642  000C2A                     u2937:
  2643  000C2A  2EE8               	decfsz	wreg,f,c
  2644  000C2C  D7FE               	goto	u2937
  2645  000C2E  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2646  000C30  D7FC               	goto	u2937
  2647  000C32  D000               	nop2	
  2648                           
  2649                           ;Movement.c: 121: SetLine(1);
  2650  000C34  0E01               	movlw	1
  2651  000C36  ECEA  F00B         	call	_SetLine
  2652                           
  2653                           ;Movement.c: 122: LCD_String("     ScanIR");
  2654  000C3A  0E2D               	movlw	low STR_1
  2655  000C3C  6E2A               	movwf	LCD_String@string,c
  2656  000C3E  0E03               	movlw	high STR_1
  2657  000C40  6E2B               	movwf	LCD_String@string+1,c
  2658  000C42  ECAF  F00A         	call	_LCD_String	;wreg free
  2659                           
  2660                           ;Movement.c: 123: SetLine(2);
  2661  000C46  0E02               	movlw	2
  2662  000C48  ECEA  F00B         	call	_SetLine
  2663                           
  2664                           ;Movement.c: 124: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2665  000C4C  0E77               	movlw	low ScanWithRange@buf
  2666  000C4E  6E30               	movwf	sprintf@sp,c
  2667  000C50  0E00               	movlw	high ScanWithRange@buf
  2668  000C52  6E31               	movwf	sprintf@sp+1,c
  2669  000C54  0E0C               	movlw	low (STR_6+1)
  2670  000C56  6E32               	movwf	sprintf@f,c
  2671  000C58  0E03               	movlw	high (STR_6+1)
  2672  000C5A  6E33               	movwf	sprintf@f+1,c
  2673  000C5C  C0A6  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2674  000C60  C0A7  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2675  000C64  C0A8  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2676  000C68  C0A9  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2677  000C6C  EC2C  F004         	call	_sprintf	;wreg free
  2678                           
  2679                           ;Movement.c: 125: LCD_String(buf);
  2680  000C70  0E77               	movlw	low ScanWithRange@buf
  2681  000C72  6E2A               	movwf	LCD_String@string,c
  2682  000C74  0E00               	movlw	high ScanWithRange@buf
  2683  000C76  6E2B               	movwf	LCD_String@string+1,c
  2684  000C78  ECAF  F00A         	call	_LCD_String	;wreg free
  2685                           
  2686                           ;Movement.c: 128: turnRight(mL,mR, 100);
  2687  000C7C  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2688  000C80  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2689  000C84  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2690  000C88  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2691  000C8C  0E64               	movlw	100
  2692  000C8E  0100               	movlb	0	; () banked
  2693  000C90  6F6B               	movwf	turnRight@power& (0+255),b
  2694  000C92  ECDE  F00A         	call	_turnRight	;wreg free
  2695                           
  2696                           ;Movement.c: 129: _delay((unsigned long)((1)*(8000000/4000.0)));
  2697  000C96  0E03               	movlw	3
  2698  000C98  0100               	movlb	0	; () banked
  2699  000C9A  6F75               	movwf	??_ScanWithRange& (0+255),b
  2700  000C9C  0E98               	movlw	152
  2701  000C9E                     u2947:
  2702  000C9E  2EE8               	decfsz	wreg,f,c
  2703  000CA0  D7FE               	goto	u2947
  2704  000CA2  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2705  000CA4  D7FC               	goto	u2947
  2706                           
  2707                           ;Movement.c: 130: stop(mL,mR);
  2708  000CA6  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2709  000CAA  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2710  000CAE  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2711  000CB2  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2712  000CB6  EC2C  F009         	call	_stop	;wreg free
  2713                           
  2714                           ;Movement.c: 132: if (SensorResult[1]>DirectionFoundThreshold) {
  2715  000CBA  0100               	movlb	0	; () banked
  2716  000CBC  51A8               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2717  000CBE  0100               	movlb	0	; () banked
  2718  000CC0  5DA4               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2719  000CC2  0100               	movlb	0	; () banked
  2720  000CC4  51A9               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2721  000CC6  0100               	movlb	0	; () banked
  2722  000CC8  59A5               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2723  000CCA  B0D8               	btfsc	status,0,c
  2724  000CCC  D003               	goto	l3057
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;Movement.c: 133: RightFlag=1;
  2728  000CCE  0E01               	movlw	1
  2729  000CD0  0100               	movlb	0	; () banked
  2730  000CD2  6FAB               	movwf	ScanWithRange@RightFlag& (0+255),b
  2731  000CD4                     l3057:
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;Movement.c: 134: }
  2735                           ;Movement.c: 136: if (SensorResult[0]>DirectionFoundThreshold) {
  2736  000CD4  0100               	movlb	0	; () banked
  2737  000CD6  51A6               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2738  000CD8  0100               	movlb	0	; () banked
  2739  000CDA  5DA4               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2740  000CDC  0100               	movlb	0	; () banked
  2741  000CDE  51A7               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2742  000CE0  0100               	movlb	0	; () banked
  2743  000CE2  59A5               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2744  000CE4  B0D8               	btfsc	status,0,c
  2745  000CE6  D003               	goto	l3061
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;Movement.c: 137: LeftFlag=1;
  2749  000CE8  0E01               	movlw	1
  2750  000CEA  0100               	movlb	0	; () banked
  2751  000CEC  6FAA               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2752  000CEE                     l3061:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;Movement.c: 138: }
  2756                           ;Movement.c: 141: if ((LeftFlag==1)||(RightFlag==1)) {
  2757  000CEE  0100               	movlb	0	; () banked
  2758  000CF0  05AA               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2759  000CF2  B4D8               	btfsc	status,2,c
  2760  000CF4  D004               	goto	l3065
  2761                           
  2762                           ; BSR set to: 0
  2763  000CF6  0100               	movlb	0	; () banked
  2764  000CF8  05AB               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2765  000CFA  A4D8               	btfss	status,2,c
  2766  000CFC  D002               	goto	l3067
  2767  000CFE                     l3065:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;Movement.c: 142: TimeAboveThreshold++;
  2771  000CFE  0100               	movlb	0	; () banked
  2772  000D00  2B9F               	incf	ScanWithRange@TimeAboveThreshold& (0+255),f,b
  2773  000D02                     l3067:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;Movement.c: 143: }
  2777                           ;Movement.c: 147: if ((LeftFlag==1)&&(RightFlag==1)) {
  2778  000D02  0100               	movlb	0	; () banked
  2779  000D04  05AA               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2780  000D06  A4D8               	btfss	status,2,c
  2781  000D08  D03E               	goto	l3085
  2782                           
  2783                           ; BSR set to: 0
  2784  000D0A  0100               	movlb	0	; () banked
  2785  000D0C  05AB               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2786  000D0E  A4D8               	btfss	status,2,c
  2787  000D10  D03A               	goto	l3085
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;Movement.c: 148: for (n=1; n<=(TimeAboveThreshold>>1); n++) {
  2791  000D12  0E00               	movlw	0
  2792  000D14  0100               	movlb	0	; () banked
  2793  000D16  6FA3               	movwf	(ScanWithRange@n+1)& (0+255),b
  2794  000D18  0E01               	movlw	1
  2795  000D1A  6FA2               	movwf	ScanWithRange@n& (0+255),b
  2796  000D1C  D022               	goto	l216
  2797  000D1E                     l3073:
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;Movement.c: 149: turnLeft(mL,mR, 100);
  2801  000D1E  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2802  000D22  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2803  000D26  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2804  000D2A  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2805  000D2E  0E64               	movlw	100
  2806  000D30  0100               	movlb	0	; () banked
  2807  000D32  6F6B               	movwf	turnLeft@power& (0+255),b
  2808  000D34  EC07  F00B         	call	_turnLeft	;wreg free
  2809                           
  2810                           ;Movement.c: 150: _delay((unsigned long)((1)*(8000000/4000.0)));
  2811  000D38  0E03               	movlw	3
  2812  000D3A  0100               	movlb	0	; () banked
  2813  000D3C  6F75               	movwf	??_ScanWithRange& (0+255),b
  2814  000D3E  0E98               	movlw	152
  2815  000D40                     u2957:
  2816  000D40  2EE8               	decfsz	wreg,f,c
  2817  000D42  D7FE               	goto	u2957
  2818  000D44  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2819  000D46  D7FC               	goto	u2957
  2820                           
  2821                           ;Movement.c: 151: stop(mL,mR);
  2822  000D48  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2823  000D4C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2824  000D50  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2825  000D54  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2826  000D58  EC2C  F009         	call	_stop	;wreg free
  2827  000D5C  0100               	movlb	0	; () banked
  2828  000D5E  4BA2               	infsnz	ScanWithRange@n& (0+255),f,b
  2829  000D60  2BA3               	incf	(ScanWithRange@n+1)& (0+255),f,b
  2830  000D62                     l216:
  2831                           
  2832                           ; BSR set to: 0
  2833  000D62  0100               	movlb	0	; () banked
  2834  000D64  90D8               	bcf	status,0,c
  2835  000D66  319F               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  2836  000D68  0100               	movlb	0	; () banked
  2837  000D6A  6F75               	movwf	??_ScanWithRange& (0+255),b
  2838  000D6C  6B76               	clrf	(??_ScanWithRange+1)& (0+255),b
  2839  000D6E  0100               	movlb	0	; () banked
  2840  000D70  51A2               	movf	ScanWithRange@n& (0+255),w,b
  2841  000D72  0100               	movlb	0	; () banked
  2842  000D74  5D75               	subwf	??_ScanWithRange& (0+255),w,b
  2843  000D76  0100               	movlb	0	; () banked
  2844  000D78  51A3               	movf	(ScanWithRange@n+1)& (0+255),w,b
  2845  000D7A  0100               	movlb	0	; () banked
  2846  000D7C  5976               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2847  000D7E  B0D8               	btfsc	status,0,c
  2848  000D80  D7CE               	goto	l3073
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;Movement.c: 152: }
  2852                           ;Movement.c: 153: return 2;
  2853                           
  2854                           ; BSR set to: 0
  2855  000D82  0E02               	movlw	2
  2856                           
  2857                           ; BSR set to: 0
  2858  000D84  0012               	return	
  2859  000D86                     l3085:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;Movement.c: 154: }
  2863                           ;Movement.c: 157: if ((LeftFlag==1)&&(RightFlag==0)) {
  2864  000D86  0100               	movlb	0	; () banked
  2865  000D88  05AA               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2866  000D8A  A4D8               	btfss	status,2,c
  2867  000D8C  D007               	goto	l3093
  2868                           
  2869                           ; BSR set to: 0
  2870  000D8E  0100               	movlb	0	; () banked
  2871  000D90  51AB               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2872  000D92  0100               	movlb	0	; () banked
  2873  000D94  A4D8               	btfss	status,2,c
  2874  000D96  D002               	goto	l3093
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;Movement.c: 158: return 2;
  2878  000D98  0E02               	movlw	2
  2879                           
  2880                           ; BSR set to: 0
  2881  000D9A  0012               	return	
  2882  000D9C                     l3093:
  2883                           
  2884                           ; BSR set to: 0
  2885  000D9C  0100               	movlb	0	; () banked
  2886  000D9E  4BA0               	infsnz	ScanWithRange@i& (0+255),f,b
  2887  000DA0  2BA1               	incf	(ScanWithRange@i+1)& (0+255),f,b
  2888  000DA2                     l3095:
  2889                           
  2890                           ; BSR set to: 0
  2891  000DA2  0100               	movlb	0	; () banked
  2892  000DA4  51A0               	movf	ScanWithRange@i& (0+255),w,b
  2893  000DA6  0100               	movlb	0	; () banked
  2894  000DA8  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  2895  000DAA  0100               	movlb	0	; () banked
  2896  000DAC  51A1               	movf	(ScanWithRange@i+1)& (0+255),w,b
  2897  000DAE  0100               	movlb	0	; () banked
  2898  000DB0  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  2899  000DB2  B0D8               	btfsc	status,0,c
  2900  000DB4  D714               	goto	l3023
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;Movement.c: 159: }
  2904                           ;Movement.c: 161: }
  2905                           ;Movement.c: 164: turnRight(mL,mR, 100);
  2906                           
  2907                           ; BSR set to: 0
  2908  000DB6  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2909  000DBA  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2910  000DBE  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2911  000DC2  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2912  000DC6  0E64               	movlw	100
  2913  000DC8  0100               	movlb	0	; () banked
  2914  000DCA  6F6B               	movwf	turnRight@power& (0+255),b
  2915  000DCC  ECDE  F00A         	call	_turnRight	;wreg free
  2916                           
  2917                           ;Movement.c: 165: delay_tenth_s(5);
  2918  000DD0  0E05               	movlw	5
  2919  000DD2  EC99  F00B         	call	_delay_tenth_s
  2920                           
  2921                           ;Movement.c: 166: stop(mL,mR);
  2922  000DD6  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2923  000DDA  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2924  000DDE  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2925  000DE2  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2926  000DE6  EC2C  F009         	call	_stop	;wreg free
  2927                           
  2928                           ;Movement.c: 167: return -1;
  2929  000DEA  0EFF               	movlw	255
  2930  000DEC  0012               	return	
  2931  000DEE                     __end_of_ScanWithRange:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           prodh	equ	0xFF4
  2935                           prodl	equ	0xFF3
  2936                           intcon	equ	0xFF2
  2937                           postinc0	equ	0xFEE
  2938                           wreg	equ	0xFE8
  2939                           indf1	equ	0xFE7
  2940                           fsr1h	equ	0xFE2
  2941                           fsr1l	equ	0xFE1
  2942                           indf2	equ	0xFDF
  2943                           fsr2h	equ	0xFDA
  2944                           fsr2l	equ	0xFD9
  2945                           status	equ	0xFD8
  2946                           
  2947 ;; *************** function _turnRight *****************
  2948 ;; Defined at:
  2949 ;;		line 98 in file "dc_motor.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2952 ;;		 -> main@mL(9), 
  2953 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2954 ;;		 -> main@mR(9), 
  2955 ;;  power           1   11[BANK0 ] unsigned char 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;		None
  2958 ;; Return value:  Size  Location     Type
  2959 ;;		None               void
  2960 ;; Registers used:
  2961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2967 ;;      Params:         0       5       0       0
  2968 ;;      Locals:         0       0       0       0
  2969 ;;      Temps:          0       0       0       0
  2970 ;;      Totals:         0       5       0       0
  2971 ;;Total ram usage:        5 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    6
  2974 ;; This function calls:
  2975 ;;		_fullSpeedAhead
  2976 ;;		_stop
  2977 ;; This function is called by:
  2978 ;;		_ScanWithRange
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text9
  2983  0015BC                     __ptext9:
  2984                           	opt stack 0
  2985  0015BC                     _turnRight:
  2986                           	opt stack 23
  2987                           
  2988                           ;dc_motor.c: 100: stop(mL, mR);
  2989                           
  2990                           ;incstack = 0
  2991  0015BC  C067  F062         	movff	turnRight@mL,stop@mL
  2992  0015C0  C068  F063         	movff	turnRight@mL+1,stop@mL+1
  2993  0015C4  C069  F064         	movff	turnRight@mR,stop@mR
  2994  0015C8  C06A  F065         	movff	turnRight@mR+1,stop@mR+1
  2995  0015CC  EC2C  F009         	call	_stop	;wreg free
  2996                           
  2997                           ;dc_motor.c: 102: mL->direction=0;
  2998  0015D0  0100               	movlb	0	; () banked
  2999  0015D2  EE20 F001          	lfsr	2,1
  3000  0015D6  5167               	movf	turnRight@mL& (0+255),w,b
  3001  0015D8  26D9               	addwf	fsr2l,f,c
  3002  0015DA  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3003  0015DC  22DA               	addwfc	fsr2h,f,c
  3004  0015DE  0E00               	movlw	0
  3005  0015E0  6EDF               	movwf	indf2,c
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;dc_motor.c: 103: mR->direction=1;
  3009  0015E2  0100               	movlb	0	; () banked
  3010  0015E4  EE20 F001          	lfsr	2,1
  3011  0015E8  5169               	movf	turnRight@mR& (0+255),w,b
  3012  0015EA  26D9               	addwf	fsr2l,f,c
  3013  0015EC  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3014  0015EE  22DA               	addwfc	fsr2h,f,c
  3015  0015F0  0E01               	movlw	1
  3016  0015F2  6EDF               	movwf	indf2,c
  3017                           
  3018                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3019  0015F4  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3020  0015F8  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3021  0015FC  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3022  001600  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3023  001604  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3024  001608  ECFD  F009         	call	_fullSpeedAhead	;wreg free
  3025  00160C  0012               	return		;funcret
  3026  00160E                     __end_of_turnRight:
  3027                           	opt stack 0
  3028                           tblptru	equ	0xFF8
  3029                           prodh	equ	0xFF4
  3030                           prodl	equ	0xFF3
  3031                           intcon	equ	0xFF2
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           indf1	equ	0xFE7
  3035                           fsr1h	equ	0xFE2
  3036                           fsr1l	equ	0xFE1
  3037                           indf2	equ	0xFDF
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _turnLeft *****************
  3043 ;; Defined at:
  3044 ;;		line 87 in file "dc_motor.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3047 ;;		 -> main@mL(9), 
  3048 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3049 ;;		 -> main@mR(9), 
  3050 ;;  power           1   11[BANK0 ] unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;		None               void
  3055 ;; Registers used:
  3056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3062 ;;      Params:         0       5       0       0
  3063 ;;      Locals:         0       0       0       0
  3064 ;;      Temps:          0       0       0       0
  3065 ;;      Totals:         0       5       0       0
  3066 ;;Total ram usage:        5 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    6
  3069 ;; This function calls:
  3070 ;;		_fullSpeedAhead
  3071 ;;		_stop
  3072 ;; This function is called by:
  3073 ;;		_ScanWithRange
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text10
  3078  00160E                     __ptext10:
  3079                           	opt stack 0
  3080  00160E                     _turnLeft:
  3081                           	opt stack 23
  3082                           
  3083                           ;dc_motor.c: 89: stop(mL, mR);
  3084                           
  3085                           ;incstack = 0
  3086  00160E  C067  F062         	movff	turnLeft@mL,stop@mL
  3087  001612  C068  F063         	movff	turnLeft@mL+1,stop@mL+1
  3088  001616  C069  F064         	movff	turnLeft@mR,stop@mR
  3089  00161A  C06A  F065         	movff	turnLeft@mR+1,stop@mR+1
  3090  00161E  EC2C  F009         	call	_stop	;wreg free
  3091                           
  3092                           ;dc_motor.c: 91: mL->direction=1;
  3093  001622  0100               	movlb	0	; () banked
  3094  001624  EE20 F001          	lfsr	2,1
  3095  001628  5167               	movf	turnLeft@mL& (0+255),w,b
  3096  00162A  26D9               	addwf	fsr2l,f,c
  3097  00162C  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3098  00162E  22DA               	addwfc	fsr2h,f,c
  3099  001630  0E01               	movlw	1
  3100  001632  6EDF               	movwf	indf2,c
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;dc_motor.c: 92: mR->direction=0;
  3104  001634  0100               	movlb	0	; () banked
  3105  001636  EE20 F001          	lfsr	2,1
  3106  00163A  5169               	movf	turnLeft@mR& (0+255),w,b
  3107  00163C  26D9               	addwf	fsr2l,f,c
  3108  00163E  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3109  001640  22DA               	addwfc	fsr2h,f,c
  3110  001642  0E00               	movlw	0
  3111  001644  6EDF               	movwf	indf2,c
  3112                           
  3113                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3114  001646  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3115  00164A  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3116  00164E  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3117  001652  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3118  001656  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3119  00165A  ECFD  F009         	call	_fullSpeedAhead	;wreg free
  3120  00165E  0012               	return		;funcret
  3121  001660                     __end_of_turnLeft:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           indf1	equ	0xFE7
  3130                           fsr1h	equ	0xFE2
  3131                           fsr1l	equ	0xFE1
  3132                           indf2	equ	0xFDF
  3133                           fsr2h	equ	0xFDA
  3134                           fsr2l	equ	0xFD9
  3135                           status	equ	0xFD8
  3136                           
  3137 ;; *************** function _fullSpeedAhead *****************
  3138 ;; Defined at:
  3139 ;;		line 108 in file "dc_motor.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3142 ;;		 -> main@mL(9), 
  3143 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3144 ;;		 -> main@mR(9), 
  3145 ;;  power           1    6[BANK0 ] unsigned char 
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;		None               void
  3150 ;; Registers used:
  3151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3157 ;;      Params:         0       5       0       0
  3158 ;;      Locals:         0       0       0       0
  3159 ;;      Temps:          1       0       0       0
  3160 ;;      Totals:         1       5       0       0
  3161 ;;Total ram usage:        6 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    5
  3164 ;; This function calls:
  3165 ;;		_setMotorPWM
  3166 ;; This function is called by:
  3167 ;;		_turnLeft
  3168 ;;		_turnRight
  3169 ;;		_fullSpeedBack
  3170 ;;		_main
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           	psect	text11
  3175  0013FA                     __ptext11:
  3176                           	opt stack 0
  3177  0013FA                     _fullSpeedAhead:
  3178                           	opt stack 24
  3179                           
  3180                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3181                           
  3182                           ;incstack = 0
  3183  0013FA  D02C               	goto	l65
  3184  0013FC                     l2823:
  3185                           
  3186                           ;dc_motor.c: 112: if(mL->power<power){
  3187  0013FC  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3188  001400  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3189  001404  0100               	movlb	0	; () banked
  3190  001406  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3191  001408  5CDE               	subwf	postinc2,w,c
  3192  00140A  B0D8               	btfsc	status,0,c
  3193  00140C  D005               	goto	l2827
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;dc_motor.c: 113: mL->power++;
  3197  00140E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3198  001412  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3199  001416  2ADF               	incf	indf2,f,c
  3200  001418                     l2827:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;dc_motor.c: 114: }
  3204                           ;dc_motor.c: 115: if(mR->power<power){
  3205  001418  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3206  00141C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3207  001420  0100               	movlb	0	; () banked
  3208  001422  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3209  001424  5CDE               	subwf	postinc2,w,c
  3210  001426  B0D8               	btfsc	status,0,c
  3211  001428  D005               	goto	l2831
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;dc_motor.c: 116: mR->power++;
  3215  00142A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3216  00142E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3217  001432  2ADF               	incf	indf2,f,c
  3218  001434                     l2831:
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;dc_motor.c: 117: }
  3222                           ;dc_motor.c: 118: setMotorPWM(mL);
  3223  001434  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3224  001438  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3225  00143C  ECF7  F006         	call	_setMotorPWM	;wreg free
  3226                           
  3227                           ;dc_motor.c: 119: setMotorPWM(mR);
  3228  001440  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3229  001444  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3230  001448  ECF7  F006         	call	_setMotorPWM	;wreg free
  3231                           
  3232                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3233  00144C  0E21               	movlw	33
  3234  00144E                     u2967:
  3235  00144E  2EE8               	decfsz	wreg,f,c
  3236  001450  D7FE               	goto	u2967
  3237  001452  F000               	nop	
  3238  001454                     l65:
  3239  001454  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3240  001458  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3241  00145C  0100               	movlb	0	; () banked
  3242  00145E  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3243  001460  5CDE               	subwf	postinc2,w,c
  3244  001462  A0D8               	btfss	status,0,c
  3245  001464  D7CB               	goto	l2823
  3246                           
  3247                           ; BSR set to: 0
  3248  001466  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3249  00146A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3250  00146E  0100               	movlb	0	; () banked
  3251  001470  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3252  001472  5CDE               	subwf	postinc2,w,c
  3253  001474  B0D8               	btfsc	status,0,c
  3254  001476  0012               	return	
  3255  001478  D7C1               	goto	l2823
  3256  00147A                     __end_of_fullSpeedAhead:
  3257                           	opt stack 0
  3258                           tblptru	equ	0xFF8
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           indf1	equ	0xFE7
  3265                           fsr1h	equ	0xFE2
  3266                           fsr1l	equ	0xFE1
  3267                           indf2	equ	0xFDF
  3268                           postinc2	equ	0xFDE
  3269                           fsr2h	equ	0xFDA
  3270                           fsr2l	equ	0xFD9
  3271                           status	equ	0xFD8
  3272                           
  3273 ;; *************** function _delay_tenth_s *****************
  3274 ;; Defined at:
  3275 ;;		line 21 in file "Movement.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  tenth_second    1    wreg     unsigned char 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3280 ;;  i               2   37[COMRAM] unsigned int 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;		None               void
  3283 ;; Registers used:
  3284 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3290 ;;      Params:         0       0       0       0
  3291 ;;      Locals:         3       0       0       0
  3292 ;;      Temps:          1       0       0       0
  3293 ;;      Totals:         4       0       0       0
  3294 ;;Total ram usage:        4 bytes
  3295 ;; Hardware stack levels used:    1
  3296 ;; Hardware stack levels required when called:    3
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_ScanWithRange
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text12
  3306  001732                     __ptext12:
  3307                           	opt stack 0
  3308  001732                     _delay_tenth_s:
  3309                           	opt stack 27
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;incstack = 0
  3313                           ;delay_tenth_s@tenth_seconds stored from wreg
  3314  001732  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3315                           
  3316                           ;Movement.c: 22: unsigned int i=0;
  3317  001734  0E00               	movlw	0
  3318  001736  6E27               	movwf	delay_tenth_s@i+1,c
  3319  001738  0E00               	movlw	0
  3320  00173A  6E26               	movwf	delay_tenth_s@i,c
  3321                           
  3322                           ;Movement.c: 23: for (i=1; i<=tenth_seconds*2; i++) {
  3323  00173C  0E00               	movlw	0
  3324  00173E  6E27               	movwf	delay_tenth_s@i+1,c
  3325  001740  0E01               	movlw	1
  3326  001742  6E26               	movwf	delay_tenth_s@i,c
  3327  001744  D009               	goto	l2155
  3328  001746                     l2151:
  3329                           
  3330                           ;Movement.c: 25: _delay((unsigned long)((50)*(8000000/4000.0)));
  3331  001746  0E82               	movlw	130
  3332  001748  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3333  00174A  0EDE               	movlw	222
  3334  00174C                     u2977:
  3335  00174C  2EE8               	decfsz	wreg,f,c
  3336  00174E  D7FE               	goto	u2977
  3337  001750  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3338  001752  D7FC               	goto	u2977
  3339  001754  4A26               	infsnz	delay_tenth_s@i,f,c
  3340  001756  2A27               	incf	delay_tenth_s@i+1,f,c
  3341  001758                     l2155:
  3342  001758  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3343  00175A  0D02               	mullw	2
  3344  00175C  5026               	movf	delay_tenth_s@i,w,c
  3345  00175E  5CF3               	subwf	prodl,w,c
  3346  001760  5027               	movf	delay_tenth_s@i+1,w,c
  3347  001762  58F4               	subwfb	prodh,w,c
  3348  001764  A0D8               	btfss	status,0,c
  3349  001766  0012               	return	
  3350  001768  D7EE               	goto	l2151
  3351  00176A                     __end_of_delay_tenth_s:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           intcon	equ	0xFF2
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           indf1	equ	0xFE7
  3360                           fsr1h	equ	0xFE2
  3361                           fsr1l	equ	0xFE1
  3362                           indf2	equ	0xFDF
  3363                           postinc2	equ	0xFDE
  3364                           fsr2h	equ	0xFDA
  3365                           fsr2l	equ	0xFD9
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _ScanIR *****************
  3369 ;; Defined at:
  3370 ;;		line 34 in file "Movement.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3373 ;;		 -> main@mL(9), 
  3374 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3375 ;;		 -> main@mR(9), 
  3376 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3377 ;;		 -> main@Move(1), 
  3378 ;;  MoveTime        2   19[BANK0 ] PTR unsigned char 
  3379 ;;		 -> main@MoveTime(100), 
  3380 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3381 ;;		 -> main@MoveType(100), 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3384 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3385 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      unsigned char 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3395 ;;      Params:         0      10       0       0
  3396 ;;      Locals:         0      46       0       0
  3397 ;;      Temps:          1       0       0       0
  3398 ;;      Totals:         1      56       0       0
  3399 ;;Total ram usage:       57 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    7
  3402 ;; This function calls:
  3403 ;;		_LCD_String
  3404 ;;		_SendLCD
  3405 ;;		_SetLine
  3406 ;;		_grabLeftIR
  3407 ;;		_grabRightIR
  3408 ;;		_sprintf
  3409 ;;		_stop
  3410 ;; This function is called by:
  3411 ;;		_main
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text13
  3416  000F28                     __ptext13:
  3417                           	opt stack 0
  3418  000F28                     _ScanIR:
  3419                           	opt stack 23
  3420                           
  3421                           ;Movement.c: 37: unsigned int SensorResult[2]={0,0};
  3422                           
  3423                           ;incstack = 0
  3424  000F28  C0B6  F0A1         	movff	ScanIR@F3879,ScanIR@SensorResult
  3425  000F2C  C0B7  F0A2         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  3426  000F30  C0B8  F0A3         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  3427  000F34  C0B9  F0A4         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  3428                           
  3429                           ;Movement.c: 38: char buf[40];
  3430                           ;Movement.c: 41: const unsigned int DirectionMoveThreshold=2500;
  3431  000F38  0E09               	movlw	9
  3432  000F3A  0100               	movlb	0	; () banked
  3433  000F3C  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3434  000F3E  0EC4               	movlw	196
  3435  000F40  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;Movement.c: 44: SensorResult[0]=grabLeftIR();
  3439  000F42  EC76  F00A         	call	_grabLeftIR	;wreg free
  3440  000F46  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3441  000F4A  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3442                           
  3443                           ;Movement.c: 45: SensorResult[1]=grabRightIR();
  3444  000F4E  EC3D  F00A         	call	_grabRightIR	;wreg free
  3445  000F52  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3446  000F56  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3447                           
  3448                           ;Movement.c: 49: CAP1BUFH=0;
  3449  000F5A  0E00               	movlw	0
  3450  000F5C  6E69               	movwf	3945,c	;volatile
  3451                           
  3452                           ;Movement.c: 50: CAP1BUFL=0;
  3453  000F5E  0E00               	movlw	0
  3454  000F60  6E68               	movwf	3944,c	;volatile
  3455                           
  3456                           ;Movement.c: 51: CAP2BUFH=0;
  3457  000F62  0E00               	movlw	0
  3458  000F64  6E67               	movwf	3943,c	;volatile
  3459                           
  3460                           ;Movement.c: 52: CAP2BUFL=0;
  3461  000F66  0E00               	movlw	0
  3462  000F68  6E66               	movwf	3942,c	;volatile
  3463                           
  3464                           ;Movement.c: 55: SendLCD(0b00000001,0);
  3465  000F6A  0E00               	movlw	0
  3466  000F6C  6E28               	movwf	SendLCD@type,c
  3467  000F6E  0E01               	movlw	1
  3468  000F70  EC02  F00C         	call	_SendLCD
  3469                           
  3470                           ;Movement.c: 56: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3471  000F74  0E21               	movlw	33
  3472  000F76                     u2987:
  3473  000F76  2EE8               	decfsz	wreg,f,c
  3474  000F78  D7FE               	goto	u2987
  3475  000F7A  F000               	nop	
  3476                           
  3477                           ;Movement.c: 57: SendLCD(0b00000010,0);
  3478  000F7C  0E00               	movlw	0
  3479  000F7E  6E28               	movwf	SendLCD@type,c
  3480  000F80  0E02               	movlw	2
  3481  000F82  EC02  F00C         	call	_SendLCD
  3482                           
  3483                           ;Movement.c: 58: _delay((unsigned long)((2)*(8000000/4000.0)));
  3484  000F86  0E06               	movlw	6
  3485  000F88  6E39               	movwf	??_ScanIR& (0+255),c
  3486  000F8A  0E30               	movlw	48
  3487  000F8C                     u2997:
  3488  000F8C  2EE8               	decfsz	wreg,f,c
  3489  000F8E  D7FE               	goto	u2997
  3490  000F90  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3491  000F92  D7FC               	goto	u2997
  3492  000F94  D000               	nop2	
  3493                           
  3494                           ;Movement.c: 59: SetLine(1);
  3495  000F96  0E01               	movlw	1
  3496  000F98  ECEA  F00B         	call	_SetLine
  3497                           
  3498                           ;Movement.c: 60: LCD_String("     ScanIR");
  3499  000F9C  0E2D               	movlw	low STR_1
  3500  000F9E  6E2A               	movwf	LCD_String@string,c
  3501  000FA0  0E03               	movlw	high STR_1
  3502  000FA2  6E2B               	movwf	LCD_String@string+1,c
  3503  000FA4  ECAF  F00A         	call	_LCD_String	;wreg free
  3504                           
  3505                           ;Movement.c: 61: SetLine(2);
  3506  000FA8  0E02               	movlw	2
  3507  000FAA  ECEA  F00B         	call	_SetLine
  3508                           
  3509                           ;Movement.c: 62: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3510  000FAE  0E77               	movlw	low ScanIR@buf
  3511  000FB0  6E30               	movwf	sprintf@sp,c
  3512  000FB2  0E00               	movlw	high ScanIR@buf
  3513  000FB4  6E31               	movwf	sprintf@sp+1,c
  3514  000FB6  0E0C               	movlw	low (STR_6+1)
  3515  000FB8  6E32               	movwf	sprintf@f,c
  3516  000FBA  0E03               	movlw	high (STR_6+1)
  3517  000FBC  6E33               	movwf	sprintf@f+1,c
  3518  000FBE  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3519  000FC2  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3520  000FC6  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3521  000FCA  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3522  000FCE  EC2C  F004         	call	_sprintf	;wreg free
  3523                           
  3524                           ;Movement.c: 63: LCD_String(buf);
  3525  000FD2  0E77               	movlw	low ScanIR@buf
  3526  000FD4  6E2A               	movwf	LCD_String@string,c
  3527  000FD6  0E00               	movlw	high ScanIR@buf
  3528  000FD8  6E2B               	movwf	LCD_String@string+1,c
  3529  000FDA  ECAF  F00A         	call	_LCD_String	;wreg free
  3530                           
  3531                           ;Movement.c: 67: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>Directio
      +                          nMoveThreshold)) {
  3532  000FDE  0100               	movlb	0	; () banked
  3533  000FE0  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3534  000FE2  0100               	movlb	0	; () banked
  3535  000FE4  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3536  000FE6  0100               	movlb	0	; () banked
  3537  000FE8  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3538  000FEA  0100               	movlb	0	; () banked
  3539  000FEC  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3540  000FEE  B0D8               	btfsc	status,0,c
  3541  000FF0  D00C               	goto	l3005
  3542                           
  3543                           ; BSR set to: 0
  3544  000FF2  0100               	movlb	0	; () banked
  3545  000FF4  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3546  000FF6  0100               	movlb	0	; () banked
  3547  000FF8  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3548  000FFA  0100               	movlb	0	; () banked
  3549  000FFC  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3550  000FFE  0100               	movlb	0	; () banked
  3551  001000  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3552  001002  B0D8               	btfsc	status,0,c
  3553  001004  D002               	goto	l3005
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;Movement.c: 68: return 2;
  3557  001006  0E02               	movlw	2
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;Movement.c: 69: } else {
  3561                           
  3562                           ; BSR set to: 0
  3563  001008  0012               	return	
  3564  00100A                     l3005:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;Movement.c: 70: stop(mL,mR);
  3568  00100A  C06D  F062         	movff	ScanIR@mL,stop@mL
  3569  00100E  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3570  001012  C06F  F064         	movff	ScanIR@mR,stop@mR
  3571  001016  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3572  00101A  EC2C  F009         	call	_stop	;wreg free
  3573                           
  3574                           ;Movement.c: 71: return 0;
  3575  00101E  0E00               	movlw	0
  3576  001020  0012               	return	
  3577  001022                     __end_of_ScanIR:
  3578                           	opt stack 0
  3579                           tblptru	equ	0xFF8
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           intcon	equ	0xFF2
  3583                           postinc0	equ	0xFEE
  3584                           wreg	equ	0xFE8
  3585                           indf1	equ	0xFE7
  3586                           fsr1h	equ	0xFE2
  3587                           fsr1l	equ	0xFE1
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function _stop *****************
  3595 ;; Defined at:
  3596 ;;		line 67 in file "dc_motor.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3599 ;;		 -> main@mL(9), 
  3600 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3601 ;;		 -> main@mR(9), 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;		None
  3604 ;; Return value:  Size  Location     Type
  3605 ;;		None               void
  3606 ;; Registers used:
  3607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3613 ;;      Params:         0       4       0       0
  3614 ;;      Locals:         0       0       0       0
  3615 ;;      Temps:          0       0       0       0
  3616 ;;      Totals:         0       4       0       0
  3617 ;;Total ram usage:        4 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    5
  3620 ;; This function calls:
  3621 ;;		_setMotorPWM
  3622 ;; This function is called by:
  3623 ;;		_turnLeft
  3624 ;;		_turnRight
  3625 ;;		_ScanIR
  3626 ;;		_ScanWithRange
  3627 ;;		_main
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           	psect	text14
  3632  001258                     __ptext14:
  3633                           	opt stack 0
  3634  001258                     _stop:
  3635                           	opt stack 25
  3636                           
  3637                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3638                           
  3639                           ;incstack = 0
  3640  001258  D028               	goto	l2815
  3641  00125A                     l2801:
  3642                           
  3643                           ;dc_motor.c: 71: if(mL->power>0){
  3644  00125A  C062  FFD9         	movff	stop@mL,fsr2l
  3645  00125E  C063  FFDA         	movff	stop@mL+1,fsr2h
  3646  001262  50DF               	movf	indf2,w,c
  3647  001264  B4D8               	btfsc	status,2,c
  3648  001266  D005               	goto	l2805
  3649                           
  3650                           ;dc_motor.c: 72: mL->power--;
  3651  001268  C062  FFD9         	movff	stop@mL,fsr2l
  3652  00126C  C063  FFDA         	movff	stop@mL+1,fsr2h
  3653  001270  06DF               	decf	indf2,f,c
  3654  001272                     l2805:
  3655                           
  3656                           ;dc_motor.c: 73: }
  3657                           ;dc_motor.c: 74: if(mR->power>0){
  3658  001272  C064  FFD9         	movff	stop@mR,fsr2l
  3659  001276  C065  FFDA         	movff	stop@mR+1,fsr2h
  3660  00127A  50DF               	movf	indf2,w,c
  3661  00127C  B4D8               	btfsc	status,2,c
  3662  00127E  D005               	goto	l2809
  3663                           
  3664                           ;dc_motor.c: 75: mR->power--;
  3665  001280  C064  FFD9         	movff	stop@mR,fsr2l
  3666  001284  C065  FFDA         	movff	stop@mR+1,fsr2h
  3667  001288  06DF               	decf	indf2,f,c
  3668  00128A                     l2809:
  3669                           
  3670                           ;dc_motor.c: 76: }
  3671                           ;dc_motor.c: 77: setMotorPWM(mL);
  3672  00128A  C062  F032         	movff	stop@mL,setMotorPWM@m
  3673  00128E  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3674  001292  ECF7  F006         	call	_setMotorPWM	;wreg free
  3675                           
  3676                           ;dc_motor.c: 78: setMotorPWM(mR);
  3677  001296  C064  F032         	movff	stop@mR,setMotorPWM@m
  3678  00129A  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3679  00129E  ECF7  F006         	call	_setMotorPWM	;wreg free
  3680                           
  3681                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3682  0012A2  0E21               	movlw	33
  3683  0012A4                     u3007:
  3684  0012A4  2EE8               	decfsz	wreg,f,c
  3685  0012A6  D7FE               	goto	u3007
  3686  0012A8  F000               	nop	
  3687  0012AA                     l2815:
  3688  0012AA  C062  FFD9         	movff	stop@mL,fsr2l
  3689  0012AE  C063  FFDA         	movff	stop@mL+1,fsr2h
  3690  0012B2  50DF               	movf	indf2,w,c
  3691  0012B4  A4D8               	btfss	status,2,c
  3692  0012B6  D7D1               	goto	l2801
  3693  0012B8  C064  FFD9         	movff	stop@mR,fsr2l
  3694  0012BC  C065  FFDA         	movff	stop@mR+1,fsr2h
  3695  0012C0  50DF               	movf	indf2,w,c
  3696  0012C2  A4D8               	btfss	status,2,c
  3697  0012C4  D7CA               	goto	l2801
  3698                           
  3699                           ;dc_motor.c: 80: }
  3700                           ;dc_motor.c: 81: mL->direction=1;
  3701  0012C6  0100               	movlb	0	; () banked
  3702  0012C8  EE20 F001          	lfsr	2,1
  3703  0012CC  5162               	movf	stop@mL& (0+255),w,b
  3704  0012CE  26D9               	addwf	fsr2l,f,c
  3705  0012D0  5163               	movf	(stop@mL+1)& (0+255),w,b
  3706  0012D2  22DA               	addwfc	fsr2h,f,c
  3707  0012D4  0E01               	movlw	1
  3708  0012D6  6EDF               	movwf	indf2,c
  3709                           
  3710                           ;dc_motor.c: 82: mR->direction=1;
  3711  0012D8  0100               	movlb	0	; () banked
  3712  0012DA  EE20 F001          	lfsr	2,1
  3713  0012DE  5164               	movf	stop@mR& (0+255),w,b
  3714  0012E0  26D9               	addwf	fsr2l,f,c
  3715  0012E2  5165               	movf	(stop@mR+1)& (0+255),w,b
  3716  0012E4  22DA               	addwfc	fsr2h,f,c
  3717  0012E6  0E01               	movlw	1
  3718  0012E8  6EDF               	movwf	indf2,c
  3719                           
  3720                           ; BSR set to: 0
  3721  0012EA  0012               	return		;funcret
  3722  0012EC                     __end_of_stop:
  3723                           	opt stack 0
  3724                           tblptru	equ	0xFF8
  3725                           prodh	equ	0xFF4
  3726                           prodl	equ	0xFF3
  3727                           intcon	equ	0xFF2
  3728                           postinc0	equ	0xFEE
  3729                           wreg	equ	0xFE8
  3730                           indf1	equ	0xFE7
  3731                           fsr1h	equ	0xFE2
  3732                           fsr1l	equ	0xFE1
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           fsr2h	equ	0xFDA
  3736                           fsr2l	equ	0xFD9
  3737                           status	equ	0xFD8
  3738                           
  3739 ;; *************** function _setMotorPWM *****************
  3740 ;; Defined at:
  3741 ;;		line 26 in file "dc_motor.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3744 ;;		 -> main@mR(9), main@mL(9), 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  PWMduty         2    0[BANK0 ] int 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;		None               void
  3749 ;; Registers used:
  3750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3756 ;;      Params:         2       0       0       0
  3757 ;;      Locals:         0       2       0       0
  3758 ;;      Temps:          5       0       0       0
  3759 ;;      Totals:         7       2       0       0
  3760 ;;Total ram usage:        9 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    4
  3763 ;; This function calls:
  3764 ;;		___awdiv
  3765 ;;		___wmul
  3766 ;; This function is called by:
  3767 ;;		_stop
  3768 ;;		_fullSpeedAhead
  3769 ;;		_setMotorFullSpeed
  3770 ;;		_stopMotor
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           	psect	text15
  3775  000DEE                     __ptext15:
  3776                           	opt stack 0
  3777  000DEE                     _setMotorPWM:
  3778                           	opt stack 25
  3779                           
  3780                           ;dc_motor.c: 28: int PWMduty;
  3781                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;incstack = 0
  3785  000DEE  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  3786  000DF2  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3787  000DF6  50DF               	movf	indf2,w,c
  3788  000DF8  6E34               	movwf	??_setMotorPWM& (0+255),c
  3789  000DFA  5034               	movf	??_setMotorPWM,w,c
  3790  000DFC  6E24               	movwf	___wmul@multiplier,c
  3791  000DFE  6A25               	clrf	___wmul@multiplier+1,c
  3792  000E00  EE20 F007          	lfsr	2,7
  3793  000E04  5032               	movf	setMotorPWM@m,w,c
  3794  000E06  26D9               	addwf	fsr2l,f,c
  3795  000E08  5033               	movf	setMotorPWM@m+1,w,c
  3796  000E0A  22DA               	addwfc	fsr2h,f,c
  3797  000E0C  CFDE F026          	movff	postinc2,___wmul@multiplicand
  3798  000E10  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  3799  000E14  EC42  F00C         	call	___wmul	;wreg free
  3800  000E18  C024  F02A         	movff	?___wmul,___awdiv@dividend
  3801  000E1C  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  3802  000E20  0E00               	movlw	0
  3803  000E22  6E2D               	movwf	___awdiv@divisor+1,c
  3804  000E24  0E64               	movlw	100
  3805  000E26  6E2C               	movwf	___awdiv@divisor,c
  3806  000E28  ECBB  F009         	call	___awdiv	;wreg free
  3807  000E2C  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  3808  000E30  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3809                           
  3810                           ;dc_motor.c: 32: if (m->direction)
  3811  000E34  EE20 F001          	lfsr	2,1
  3812  000E38  5032               	movf	setMotorPWM@m,w,c
  3813  000E3A  26D9               	addwf	fsr2l,f,c
  3814  000E3C  5033               	movf	setMotorPWM@m+1,w,c
  3815  000E3E  22DA               	addwfc	fsr2h,f,c
  3816  000E40  50DF               	movf	indf2,w,c
  3817  000E42  B4D8               	btfsc	status,2,c
  3818  000E44  D02E               	goto	l2797
  3819                           
  3820                           ;dc_motor.c: 33: {
  3821                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3822  000E46  EE20 F006          	lfsr	2,6
  3823  000E4A  5032               	movf	setMotorPWM@m,w,c
  3824  000E4C  26D9               	addwf	fsr2l,f,c
  3825  000E4E  5033               	movf	setMotorPWM@m+1,w,c
  3826  000E50  22DA               	addwfc	fsr2h,f,c
  3827  000E52  50DF               	movf	indf2,w,c
  3828  000E54  6E34               	movwf	??_setMotorPWM& (0+255),c
  3829  000E56  0E01               	movlw	1
  3830  000E58  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3831  000E5A  2A34               	incf	??_setMotorPWM,f,c
  3832  000E5C  D002               	goto	u2224
  3833  000E5E                     u2225:
  3834  000E5E  90D8               	bcf	status,0,c
  3835  000E60  3635               	rlcf	??_setMotorPWM+1,f,c
  3836  000E62                     u2224:
  3837  000E62  2E34               	decfsz	??_setMotorPWM,f,c
  3838  000E64  D7FC               	goto	u2225
  3839  000E66  5035               	movf	??_setMotorPWM+1,w,c
  3840  000E68  108A               	iorwf	3978,w,c	;volatile
  3841  000E6A  6E8A               	movwf	3978,c	;volatile
  3842                           
  3843                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3844  000E6C  EE20 F007          	lfsr	2,7
  3845  000E70  5032               	movf	setMotorPWM@m,w,c
  3846  000E72  26D9               	addwf	fsr2l,f,c
  3847  000E74  5033               	movf	setMotorPWM@m+1,w,c
  3848  000E76  22DA               	addwfc	fsr2h,f,c
  3849  000E78  CFDE F034          	movff	postinc2,??_setMotorPWM
  3850  000E7C  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3851  000E80  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3852  000E84  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3853  000E88  1E36               	comf	??_setMotorPWM+2,f,c
  3854  000E8A  1E37               	comf	??_setMotorPWM+3,f,c
  3855  000E8C  4A36               	infsnz	??_setMotorPWM+2,f,c
  3856  000E8E  2A37               	incf	??_setMotorPWM+3,f,c
  3857  000E90  5034               	movf	??_setMotorPWM,w,c
  3858  000E92  2436               	addwf	??_setMotorPWM+2,w,c
  3859  000E94  0100               	movlb	0	; () banked
  3860  000E96  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  3861  000E98  5035               	movf	??_setMotorPWM+1,w,c
  3862  000E9A  2037               	addwfc	??_setMotorPWM+3,w,c
  3863  000E9C  0100               	movlb	0	; () banked
  3864  000E9E  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  3865                           
  3866                           ;dc_motor.c: 36: }
  3867  000EA0  D014               	goto	l35
  3868  000EA2                     l2797:
  3869                           
  3870                           ;dc_motor.c: 37: else
  3871                           ;dc_motor.c: 38: {
  3872                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  3873  000EA2  EE20 F006          	lfsr	2,6
  3874  000EA6  5032               	movf	setMotorPWM@m,w,c
  3875  000EA8  26D9               	addwf	fsr2l,f,c
  3876  000EAA  5033               	movf	setMotorPWM@m+1,w,c
  3877  000EAC  22DA               	addwfc	fsr2h,f,c
  3878  000EAE  50DF               	movf	indf2,w,c
  3879  000EB0  6E34               	movwf	??_setMotorPWM& (0+255),c
  3880  000EB2  0E01               	movlw	1
  3881  000EB4  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3882  000EB6  2A34               	incf	??_setMotorPWM,f,c
  3883  000EB8  D002               	goto	u2234
  3884  000EBA                     u2235:
  3885  000EBA  90D8               	bcf	status,0,c
  3886  000EBC  3635               	rlcf	??_setMotorPWM+1,f,c
  3887  000EBE                     u2234:
  3888  000EBE  2E34               	decfsz	??_setMotorPWM,f,c
  3889  000EC0  D7FC               	goto	u2235
  3890  000EC2  5035               	movf	??_setMotorPWM+1,w,c
  3891  000EC4  0AFF               	xorlw	255
  3892  000EC6  148A               	andwf	3978,w,c	;volatile
  3893  000EC8  6E8A               	movwf	3978,c	;volatile
  3894  000ECA                     l35:
  3895                           
  3896                           ;dc_motor.c: 40: }
  3897                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  3898  000ECA  EE20 F002          	lfsr	2,2
  3899  000ECE  5032               	movf	setMotorPWM@m,w,c
  3900  000ED0  26D9               	addwf	fsr2l,f,c
  3901  000ED2  5033               	movf	setMotorPWM@m+1,w,c
  3902  000ED4  22DA               	addwfc	fsr2h,f,c
  3903  000ED6  CFDE F034          	movff	postinc2,??_setMotorPWM
  3904  000EDA  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3905  000EDE  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  3906  000EE2  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3907  000EE6  0100               	movlb	0	; () banked
  3908  000EE8  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  3909  000EEA  46E8               	rlncf	wreg,f,c
  3910  000EEC  0BFC               	andlw	252
  3911  000EEE  6EDF               	movwf	indf2,c
  3912                           
  3913                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  3914  000EF0  EE20 F004          	lfsr	2,4
  3915  000EF4  5032               	movf	setMotorPWM@m,w,c
  3916  000EF6  26D9               	addwf	fsr2l,f,c
  3917  000EF8  5033               	movf	setMotorPWM@m+1,w,c
  3918  000EFA  22DA               	addwfc	fsr2h,f,c
  3919  000EFC  CFDE F034          	movff	postinc2,??_setMotorPWM
  3920  000F00  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3921  000F04  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  3922  000F08  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3923  000F0C  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3924  000F10  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3925  000F14  0E06               	movlw	6
  3926  000F16  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  3927  000F18                     u2245:
  3928  000F18  3437               	rlcf	??_setMotorPWM+3,w,c
  3929  000F1A  3237               	rrcf	??_setMotorPWM+3,f,c
  3930  000F1C  3236               	rrcf	??_setMotorPWM+2,f,c
  3931  000F1E  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  3932  000F20  D7FB               	goto	u2245
  3933  000F22  5036               	movf	??_setMotorPWM+2,w,c
  3934  000F24  6EDF               	movwf	indf2,c
  3935                           
  3936                           ; BSR set to: 0
  3937  000F26  0012               	return		;funcret
  3938  000F28                     __end_of_setMotorPWM:
  3939                           	opt stack 0
  3940                           tblptru	equ	0xFF8
  3941                           prodh	equ	0xFF4
  3942                           prodl	equ	0xFF3
  3943                           intcon	equ	0xFF2
  3944                           postinc0	equ	0xFEE
  3945                           wreg	equ	0xFE8
  3946                           indf1	equ	0xFE7
  3947                           fsr1h	equ	0xFE2
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function ___awdiv *****************
  3957 ;; Defined at:
  3958 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  dividend        2   41[COMRAM] int 
  3961 ;;  divisor         2   43[COMRAM] int 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  quotient        2   47[COMRAM] int 
  3964 ;;  sign            1   46[COMRAM] unsigned char 
  3965 ;;  counter         1   45[COMRAM] unsigned char 
  3966 ;; Return value:  Size  Location     Type
  3967 ;;                  2   41[COMRAM] int 
  3968 ;; Registers used:
  3969 ;;		wreg, status,2, status,0
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3975 ;;      Params:         4       0       0       0
  3976 ;;      Locals:         4       0       0       0
  3977 ;;      Temps:          0       0       0       0
  3978 ;;      Totals:         8       0       0       0
  3979 ;;Total ram usage:        8 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    3
  3982 ;; This function calls:
  3983 ;;		Nothing
  3984 ;; This function is called by:
  3985 ;;		_setMotorPWM
  3986 ;; This function uses a non-reentrant model
  3987 ;;
  3988                           
  3989                           	psect	text16
  3990  001376                     __ptext16:
  3991                           	opt stack 0
  3992  001376                     ___awdiv:
  3993                           	opt stack 25
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;incstack = 0
  3997  001376  0E00               	movlw	0
  3998  001378  6E2F               	movwf	___awdiv@sign,c
  3999  00137A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4000  00137C  D006               	goto	l2755
  4001  00137E  6C2C               	negf	___awdiv@divisor,c
  4002  001380  1E2D               	comf	___awdiv@divisor+1,f,c
  4003  001382  B0D8               	btfsc	status,0,c
  4004  001384  2A2D               	incf	___awdiv@divisor+1,f,c
  4005  001386  0E01               	movlw	1
  4006  001388  6E2F               	movwf	___awdiv@sign,c
  4007  00138A                     l2755:
  4008  00138A  AE2B               	btfss	___awdiv@dividend+1,7,c
  4009  00138C  D006               	goto	l2761
  4010  00138E  6C2A               	negf	___awdiv@dividend,c
  4011  001390  1E2B               	comf	___awdiv@dividend+1,f,c
  4012  001392  B0D8               	btfsc	status,0,c
  4013  001394  2A2B               	incf	___awdiv@dividend+1,f,c
  4014  001396  0E01               	movlw	1
  4015  001398  1A2F               	xorwf	___awdiv@sign,f,c
  4016  00139A                     l2761:
  4017  00139A  0E00               	movlw	0
  4018  00139C  6E31               	movwf	___awdiv@quotient+1,c
  4019  00139E  0E00               	movlw	0
  4020  0013A0  6E30               	movwf	___awdiv@quotient,c
  4021  0013A2  502C               	movf	___awdiv@divisor,w,c
  4022  0013A4  102D               	iorwf	___awdiv@divisor+1,w,c
  4023  0013A6  B4D8               	btfsc	status,2,c
  4024  0013A8  D01C               	goto	l2783
  4025  0013AA  0E01               	movlw	1
  4026  0013AC  6E2E               	movwf	___awdiv@counter,c
  4027  0013AE  D004               	goto	l2769
  4028  0013B0                     l2767:
  4029  0013B0  90D8               	bcf	status,0,c
  4030  0013B2  362C               	rlcf	___awdiv@divisor,f,c
  4031  0013B4  362D               	rlcf	___awdiv@divisor+1,f,c
  4032  0013B6  2A2E               	incf	___awdiv@counter,f,c
  4033  0013B8                     l2769:
  4034  0013B8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4035  0013BA  D7FA               	goto	l2767
  4036  0013BC                     l2771:
  4037  0013BC  90D8               	bcf	status,0,c
  4038  0013BE  3630               	rlcf	___awdiv@quotient,f,c
  4039  0013C0  3631               	rlcf	___awdiv@quotient+1,f,c
  4040  0013C2  502C               	movf	___awdiv@divisor,w,c
  4041  0013C4  5C2A               	subwf	___awdiv@dividend,w,c
  4042  0013C6  502D               	movf	___awdiv@divisor+1,w,c
  4043  0013C8  582B               	subwfb	___awdiv@dividend+1,w,c
  4044  0013CA  A0D8               	btfss	status,0,c
  4045  0013CC  D005               	goto	l2779
  4046  0013CE  502C               	movf	___awdiv@divisor,w,c
  4047  0013D0  5E2A               	subwf	___awdiv@dividend,f,c
  4048  0013D2  502D               	movf	___awdiv@divisor+1,w,c
  4049  0013D4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4050  0013D6  8030               	bsf	___awdiv@quotient,0,c
  4051  0013D8                     l2779:
  4052  0013D8  90D8               	bcf	status,0,c
  4053  0013DA  322D               	rrcf	___awdiv@divisor+1,f,c
  4054  0013DC  322C               	rrcf	___awdiv@divisor,f,c
  4055  0013DE  2E2E               	decfsz	___awdiv@counter,f,c
  4056  0013E0  D7ED               	goto	l2771
  4057  0013E2                     l2783:
  4058  0013E2  502F               	movf	___awdiv@sign,w,c
  4059  0013E4  B4D8               	btfsc	status,2,c
  4060  0013E6  D004               	goto	l2787
  4061  0013E8  6C30               	negf	___awdiv@quotient,c
  4062  0013EA  1E31               	comf	___awdiv@quotient+1,f,c
  4063  0013EC  B0D8               	btfsc	status,0,c
  4064  0013EE  2A31               	incf	___awdiv@quotient+1,f,c
  4065  0013F0                     l2787:
  4066  0013F0  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4067  0013F4  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4068  0013F8  0012               	return	
  4069  0013FA                     __end_of___awdiv:
  4070                           	opt stack 0
  4071                           tblptru	equ	0xFF8
  4072                           prodh	equ	0xFF4
  4073                           prodl	equ	0xFF3
  4074                           intcon	equ	0xFF2
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           indf1	equ	0xFE7
  4078                           fsr1h	equ	0xFE2
  4079                           fsr1l	equ	0xFE1
  4080                           indf2	equ	0xFDF
  4081                           postinc2	equ	0xFDE
  4082                           postdec2	equ	0xFDD
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8
  4086                           
  4087 ;; *************** function _sprintf *****************
  4088 ;; Defined at:
  4089 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4092 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4093 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4094 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  tmpval          4    0        struct .
  4097 ;;  cp              3    0        PTR const unsigned char 
  4098 ;;  width           2   10[BANK0 ] int 
  4099 ;;  val             2    7[BANK0 ] unsigned int 
  4100 ;;  ap              2    4[BANK0 ] PTR void [1]
  4101 ;;		 -> ?_sprintf(2), 
  4102 ;;  len             2    0        unsigned int 
  4103 ;;  c               1   12[BANK0 ] char 
  4104 ;;  flag            1    9[BANK0 ] unsigned char 
  4105 ;;  prec            1    6[BANK0 ] char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  2   47[COMRAM] int 
  4108 ;; Registers used:
  4109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4115 ;;      Params:         8       0       0       0
  4116 ;;      Locals:         0       9       0       0
  4117 ;;      Temps:          0       4       0       0
  4118 ;;      Totals:         8      13       0       0
  4119 ;;Total ram usage:       21 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    4
  4122 ;; This function calls:
  4123 ;;		___lwdiv
  4124 ;;		___lwmod
  4125 ;;		___wmul
  4126 ;;		_isdigit
  4127 ;; This function is called by:
  4128 ;;		_ScanIR
  4129 ;;		_ScanWithRange
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text17
  4135  000858                     __ptext17:
  4136                           	opt stack 0
  4137  000858                     _sprintf:
  4138                           	opt stack 26
  4139                           
  4140                           ;doprnt.c: 494: va_list ap;
  4141                           ;doprnt.c: 499: signed char c;
  4142                           ;doprnt.c: 501: int width;
  4143                           ;doprnt.c: 506: signed char prec;
  4144                           ;doprnt.c: 508: unsigned char flag;
  4145                           ;doprnt.c: 523: union {
  4146                           ;doprnt.c: 524: unsigned long vd;
  4147                           ;doprnt.c: 525: double integ;
  4148                           ;doprnt.c: 526: } tmpval;
  4149                           ;doprnt.c: 528: unsigned int val;
  4150                           ;doprnt.c: 529: unsigned len;
  4151                           ;doprnt.c: 530: const char * cp;
  4152                           ;doprnt.c: 533: *ap = __va_start();
  4153                           
  4154                           ;incstack = 0
  4155  000858  0E34               	movlw	low (?_sprintf+4)
  4156  00085A  0100               	movlb	0	; () banked
  4157  00085C  6F64               	movwf	sprintf@ap& (0+255),b
  4158  00085E  0E00               	movlw	high (?_sprintf+4)
  4159  000860  0100               	movlb	0	; () banked
  4160  000862  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4161                           
  4162                           ;doprnt.c: 536: while(c = *f++) {
  4163  000864  D168               	goto	l2959
  4164  000866                     l2853:
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;doprnt.c: 538: if(c != '%')
  4168  000866  0E25               	movlw	37
  4169  000868  0100               	movlb	0	; () banked
  4170  00086A  196C               	xorwf	sprintf@c& (0+255),w,b
  4171  00086C  B4D8               	btfsc	status,2,c
  4172  00086E  D009               	goto	l2859
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;doprnt.c: 540: {
  4176                           ;doprnt.c: 541: ((*sp++ = (c)));
  4177  000870  C030  FFD9         	movff	sprintf@sp,fsr2l
  4178  000874  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4179  000878  C06C  FFDF         	movff	sprintf@c,indf2
  4180                           
  4181                           ; BSR set to: 0
  4182  00087C  4A30               	infsnz	sprintf@sp,f,c
  4183  00087E  2A31               	incf	sprintf@sp+1,f,c
  4184                           
  4185                           ;doprnt.c: 542: continue;
  4186  000880  D15A               	goto	l2959
  4187  000882                     l2859:
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;doprnt.c: 543: }
  4191                           ;doprnt.c: 546: width = 0;
  4192  000882  0E00               	movlw	0
  4193  000884  0100               	movlb	0	; () banked
  4194  000886  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4195  000888  0E00               	movlw	0
  4196  00088A  6F6A               	movwf	sprintf@width& (0+255),b
  4197                           
  4198                           ;doprnt.c: 548: flag = 0;
  4199  00088C  0E00               	movlw	0
  4200  00088E  0100               	movlb	0	; () banked
  4201  000890  6F69               	movwf	sprintf@flag& (0+255),b
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;doprnt.c: 551: switch(*f) {
  4205                           
  4206                           ;doprnt.c: 550: for(;;) {
  4207  000892  D004               	goto	l2865
  4208  000894                     l2861:
  4209                           
  4210                           ;doprnt.c: 580: flag |= 0x04;
  4211  000894  0100               	movlb	0	; () banked
  4212  000896  8569               	bsf	sprintf@flag& (0+255),2,b
  4213                           
  4214                           ;doprnt.c: 581: f++;
  4215  000898  4A32               	infsnz	sprintf@f,f,c
  4216  00089A  2A33               	incf	sprintf@f+1,f,c
  4217  00089C                     l2865:
  4218  00089C  C032  FFF6         	movff	sprintf@f,tblptrl
  4219  0008A0  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4220  0008A4                     	if	0	;tblptru may be non-zero
  4221  0008A4                     	endif
  4222  0008A4                     	if	0	;tblptru may be non-zero
  4223  0008A4                     	endif
  4224  0008A4  0008               	tblrd		*
  4225  0008A6  50F5               	movf	tablat,w,c
  4226                           
  4227                           ; Switch size 1, requested type "space"
  4228                           ; Number of cases is 1, Range of values is 48 to 48
  4229                           ; switch strategies available:
  4230                           ; Name         Instructions Cycles
  4231                           ; simple_byte            4     3 (average)
  4232                           ;	Chosen strategy is simple_byte
  4233  0008A8  0A30               	xorlw	48	; case 48
  4234  0008AA  B4D8               	btfsc	status,2,c
  4235  0008AC  D7F3               	goto	l2861
  4236                           
  4237                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4238                           
  4239                           ;doprnt.c: 586: }
  4240                           
  4241                           ;doprnt.c: 585: break;
  4242  0008AE  C032  FFF6         	movff	sprintf@f,tblptrl
  4243  0008B2  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4244  0008B6                     	if	0	;tblptru may be non-zero
  4245  0008B6                     	endif
  4246  0008B6                     	if	0	;tblptru may be non-zero
  4247  0008B6                     	endif
  4248  0008B6  0008               	tblrd		*
  4249  0008B8  50F5               	movf	tablat,w,c
  4250  0008BA  EC66  F00C         	call	_isdigit
  4251  0008BE  A0D8               	btfss	status,0,c
  4252  0008C0  D03E               	goto	l2881
  4253                           
  4254                           ;doprnt.c: 598: width = 0;
  4255  0008C2  0E00               	movlw	0
  4256  0008C4  0100               	movlb	0	; () banked
  4257  0008C6  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4258  0008C8  0E00               	movlw	0
  4259  0008CA  6F6A               	movwf	sprintf@width& (0+255),b
  4260  0008CC                     l2871:
  4261                           
  4262                           ;doprnt.c: 600: width *= 10;
  4263  0008CC  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4264  0008D0  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4265  0008D4  0E00               	movlw	0
  4266  0008D6  6E27               	movwf	___wmul@multiplicand+1,c
  4267  0008D8  0E0A               	movlw	10
  4268  0008DA  6E26               	movwf	___wmul@multiplicand,c
  4269  0008DC  EC42  F00C         	call	___wmul	;wreg free
  4270  0008E0  C024  F06A         	movff	?___wmul,sprintf@width
  4271  0008E4  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4272                           
  4273                           ;doprnt.c: 601: width += *f++ - '0';
  4274  0008E8  0ED0               	movlw	208
  4275  0008EA  0100               	movlb	0	; () banked
  4276  0008EC  6F60               	movwf	??_sprintf& (0+255),b
  4277  0008EE  0EFF               	movlw	255
  4278  0008F0  0100               	movlb	0	; () banked
  4279  0008F2  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4280  0008F4  C032  FFF6         	movff	sprintf@f,tblptrl
  4281  0008F8  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4282  0008FC                     	if	0	;tblptru may be non-zero
  4283  0008FC                     	endif
  4284  0008FC                     	if	0	;tblptru may be non-zero
  4285  0008FC                     	endif
  4286  0008FC  0008               	tblrd		*
  4287  0008FE  50F5               	movf	tablat,w,c
  4288  000900  0100               	movlb	0	; () banked
  4289  000902  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4290  000904  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4291  000906  0100               	movlb	0	; () banked
  4292  000908  5160               	movf	??_sprintf& (0+255),w,b
  4293  00090A  0100               	movlb	0	; () banked
  4294  00090C  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4295  00090E  0100               	movlb	0	; () banked
  4296  000910  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4297  000912  0100               	movlb	0	; () banked
  4298  000914  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4299  000916  0100               	movlb	0	; () banked
  4300  000918  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4301  00091A  0100               	movlb	0	; () banked
  4302  00091C  276A               	addwf	sprintf@width& (0+255),f,b
  4303  00091E  0100               	movlb	0	; () banked
  4304  000920  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4305  000922  0100               	movlb	0	; () banked
  4306  000924  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4307                           
  4308                           ; BSR set to: 0
  4309  000926  4A32               	infsnz	sprintf@f,f,c
  4310  000928  2A33               	incf	sprintf@f+1,f,c
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4314  00092A  C032  FFF6         	movff	sprintf@f,tblptrl
  4315  00092E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4316  000932                     	if	0	;tblptru may be non-zero
  4317  000932                     	endif
  4318  000932                     	if	0	;tblptru may be non-zero
  4319  000932                     	endif
  4320  000932  0008               	tblrd		*
  4321  000934  50F5               	movf	tablat,w,c
  4322  000936  EC66  F00C         	call	_isdigit
  4323  00093A  B0D8               	btfsc	status,0,c
  4324  00093C  D7C7               	goto	l2871
  4325  00093E                     l2881:
  4326  00093E  C032  FFF6         	movff	sprintf@f,tblptrl
  4327  000942  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4328  000946  4A32               	infsnz	sprintf@f,f,c
  4329  000948  2A33               	incf	sprintf@f+1,f,c
  4330  00094A                     	if	0	;tblptru may be non-zero
  4331  00094A                     	endif
  4332  00094A                     	if	0	;tblptru may be non-zero
  4333  00094A                     	endif
  4334  00094A  0008               	tblrd		*
  4335  00094C  CFF5 F06C          	movff	tablat,sprintf@c
  4336  000950  0100               	movlb	0	; () banked
  4337  000952  516C               	movf	sprintf@c& (0+255),w,b
  4338                           
  4339                           ; Switch size 1, requested type "space"
  4340                           ; Number of cases is 3, Range of values is 0 to 105
  4341                           ; switch strategies available:
  4342                           ; Name         Instructions Cycles
  4343                           ; simple_byte           10     6 (average)
  4344                           ;	Chosen strategy is simple_byte
  4345  000954  0A00               	xorlw	0	; case 0
  4346  000956  B4D8               	btfsc	status,2,c
  4347  000958  D0FB               	goto	l2961
  4348  00095A  0A64               	xorlw	100	; case 100
  4349  00095C  B4D8               	btfsc	status,2,c
  4350  00095E  D003               	goto	l2883
  4351  000960  0A0D               	xorlw	13	; case 105
  4352  000962  A4D8               	btfss	status,2,c
  4353  000964  D0E8               	goto	l2959
  4354  000966                     l2883:
  4355                           
  4356                           ;doprnt.c: 1253: {
  4357                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4358  000966  C064  FFD9         	movff	sprintf@ap,fsr2l
  4359  00096A  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4360  00096E  CFDE F067          	movff	postinc2,sprintf@val
  4361  000972  CFDD F068          	movff	postdec2,sprintf@val+1
  4362  000976  0E02               	movlw	2
  4363  000978  0100               	movlb	0	; () banked
  4364  00097A  2764               	addwf	sprintf@ap& (0+255),f,b
  4365  00097C  0E00               	movlw	0
  4366  00097E  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;doprnt.c: 1261: if((int)val < 0) {
  4370  000980  0100               	movlb	0	; () banked
  4371  000982  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4372  000984  D008               	goto	l2893
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;doprnt.c: 1262: flag |= 0x03;
  4376  000986  0E03               	movlw	3
  4377  000988  0100               	movlb	0	; () banked
  4378  00098A  1369               	iorwf	sprintf@flag& (0+255),f,b
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;doprnt.c: 1263: val = -val;
  4382  00098C  0100               	movlb	0	; () banked
  4383  00098E  6D67               	negf	sprintf@val& (0+255),b
  4384  000990  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4385  000992  B0D8               	btfsc	status,0,c
  4386  000994  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4387  000996                     l2893:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 1264: }
  4391                           ;doprnt.c: 1266: }
  4392                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4393  000996  0E01               	movlw	1
  4394  000998  0100               	movlb	0	; () banked
  4395  00099A  6F6C               	movwf	sprintf@c& (0+255),b
  4396  00099C                     l2895:
  4397                           
  4398                           ; BSR set to: 0
  4399  00099C  0E05               	movlw	5
  4400  00099E  0100               	movlb	0	; () banked
  4401  0009A0  196C               	xorwf	sprintf@c& (0+255),w,b
  4402  0009A2  B4D8               	btfsc	status,2,c
  4403  0009A4  D016               	goto	l2907
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;doprnt.c: 1306: if(val < dpowers[c])
  4407                           
  4408                           ; BSR set to: 0
  4409                           
  4410                           ; BSR set to: 0
  4411  0009A6  0100               	movlb	0	; () banked
  4412  0009A8  516C               	movf	sprintf@c& (0+255),w,b
  4413  0009AA  0D02               	mullw	2
  4414  0009AC  0E01               	movlw	low _dpowers
  4415  0009AE  24F3               	addwf	prodl,w,c
  4416  0009B0  6EF6               	movwf	tblptrl,c
  4417  0009B2  0E03               	movlw	high _dpowers
  4418  0009B4  20F4               	addwfc	prodh,w,c
  4419  0009B6  6EF7               	movwf	tblptrh,c
  4420  0009B8                     	if	0	;There are less than 3 active tblptr bytes
  4421  0009B8                     	endif
  4422  0009B8  0009               	tblrd		*+
  4423  0009BA  50F5               	movf	tablat,w,c
  4424  0009BC  0100               	movlb	0	; () banked
  4425  0009BE  5D67               	subwf	sprintf@val& (0+255),w,b
  4426  0009C0  0009               	tblrd		*+
  4427  0009C2  50F5               	movf	tablat,w,c
  4428  0009C4  0100               	movlb	0	; () banked
  4429  0009C6  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4430  0009C8  A0D8               	btfss	status,0,c
  4431  0009CA  D003               	goto	l2907
  4432                           
  4433                           ; BSR set to: 0
  4434                           
  4435                           ; BSR set to: 0
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;doprnt.c: 1307: break;
  4439  0009CC  0100               	movlb	0	; () banked
  4440  0009CE  2B6C               	incf	sprintf@c& (0+255),f,b
  4441  0009D0  D7E5               	goto	l2895
  4442  0009D2                     l2907:
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4446  0009D2  0100               	movlb	0	; () banked
  4447  0009D4  516A               	movf	sprintf@width& (0+255),w,b
  4448  0009D6  0100               	movlb	0	; () banked
  4449  0009D8  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4450  0009DA  B4D8               	btfsc	status,2,c
  4451  0009DC  D00B               	goto	l2913
  4452                           
  4453                           ; BSR set to: 0
  4454  0009DE  C069  F060         	movff	sprintf@flag,??_sprintf
  4455  0009E2  0E03               	movlw	3
  4456  0009E4  0100               	movlb	0	; () banked
  4457  0009E6  1760               	andwf	??_sprintf& (0+255),f,b
  4458  0009E8  B4D8               	btfsc	status,2,c
  4459  0009EA  D004               	goto	l2913
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;doprnt.c: 1346: width--;
  4463  0009EC  0100               	movlb	0	; () banked
  4464  0009EE  076A               	decf	sprintf@width& (0+255),f,b
  4465  0009F0  A0D8               	btfss	status,0,c
  4466  0009F2  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4467  0009F4                     l2913:
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;doprnt.c: 1381: if(width > c)
  4471  0009F4  0E80               	movlw	128
  4472  0009F6  0100               	movlb	0	; () banked
  4473  0009F8  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4474  0009FA  0E7F               	movlw	127
  4475  0009FC  0100               	movlb	0	; () banked
  4476  0009FE  6F60               	movwf	??_sprintf& (0+255),b
  4477  000A00  0100               	movlb	0	; () banked
  4478  000A02  516A               	movf	sprintf@width& (0+255),w,b
  4479  000A04  0100               	movlb	0	; () banked
  4480  000A06  5D6C               	subwf	sprintf@c& (0+255),w,b
  4481  000A08  0100               	movlb	0	; () banked
  4482  000A0A  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4483  000A0C  0A80               	xorlw	128
  4484  000A0E  0100               	movlb	0	; () banked
  4485  000A10  5960               	subwfb	??_sprintf& (0+255),w,b
  4486  000A12  B0D8               	btfsc	status,0,c
  4487  000A14  D00B               	goto	l2917
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;doprnt.c: 1382: width -= c;
  4491  000A16  0100               	movlb	0	; () banked
  4492  000A18  516C               	movf	sprintf@c& (0+255),w,b
  4493  000A1A  0100               	movlb	0	; () banked
  4494  000A1C  5F6A               	subwf	sprintf@width& (0+255),f,b
  4495  000A1E  0E00               	movlw	0
  4496  000A20  0100               	movlb	0	; () banked
  4497  000A22  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4498  000A24  0EFF               	movlw	255
  4499  000A26  0100               	movlb	0	; () banked
  4500  000A28  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4501  000A2A  D005               	goto	l2919
  4502  000A2C                     l2917:
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;doprnt.c: 1383: else
  4506                           ;doprnt.c: 1384: width = 0;
  4507  000A2C  0E00               	movlw	0
  4508  000A2E  0100               	movlb	0	; () banked
  4509  000A30  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4510  000A32  0E00               	movlw	0
  4511  000A34  6F6A               	movwf	sprintf@width& (0+255),b
  4512  000A36                     l2919:
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;doprnt.c: 1387: if(flag & 0x04) {
  4516  000A36  0100               	movlb	0	; () banked
  4517  000A38  A569               	btfss	sprintf@flag& (0+255),2,b
  4518  000A3A  D022               	goto	l2935
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;doprnt.c: 1392: if(flag & 0x03)
  4522  000A3C  C069  F060         	movff	sprintf@flag,??_sprintf
  4523  000A40  0E03               	movlw	3
  4524  000A42  0100               	movlb	0	; () banked
  4525  000A44  1760               	andwf	??_sprintf& (0+255),f,b
  4526  000A46  B4D8               	btfsc	status,2,c
  4527  000A48  D008               	goto	l2927
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4531  000A4A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4532  000A4E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4533  000A52  0E2D               	movlw	45
  4534  000A54  6EDF               	movwf	indf2,c
  4535                           
  4536                           ; BSR set to: 0
  4537  000A56  4A30               	infsnz	sprintf@sp,f,c
  4538  000A58  2A31               	incf	sprintf@sp+1,f,c
  4539  000A5A                     l2927:
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;doprnt.c: 1415: if(width)
  4543  000A5A  0100               	movlb	0	; () banked
  4544  000A5C  516A               	movf	sprintf@width& (0+255),w,b
  4545  000A5E  0100               	movlb	0	; () banked
  4546  000A60  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4547  000A62  B4D8               	btfsc	status,2,c
  4548  000A64  D034               	goto	l2949
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4552                           
  4553                           ; BSR set to: 0
  4554                           
  4555                           ;doprnt.c: 1416: do
  4556  000A66  C030  FFD9         	movff	sprintf@sp,fsr2l
  4557  000A6A  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4558  000A6E  0E30               	movlw	48
  4559  000A70  6EDF               	movwf	indf2,c
  4560                           
  4561                           ; BSR set to: 0
  4562  000A72  4A30               	infsnz	sprintf@sp,f,c
  4563  000A74  2A31               	incf	sprintf@sp+1,f,c
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;doprnt.c: 1418: while(--width);
  4567  000A76  0100               	movlb	0	; () banked
  4568  000A78  076A               	decf	sprintf@width& (0+255),f,b
  4569  000A7A  A0D8               	btfss	status,0,c
  4570  000A7C  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4571  000A7E  D7ED               	goto	l2927
  4572  000A80                     l2935:
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;doprnt.c: 1422: {
  4576                           ;doprnt.c: 1424: if(width
  4577                           ;doprnt.c: 1428: )
  4578  000A80  0100               	movlb	0	; () banked
  4579  000A82  516A               	movf	sprintf@width& (0+255),w,b
  4580  000A84  0100               	movlb	0	; () banked
  4581  000A86  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4582  000A88  B4D8               	btfsc	status,2,c
  4583  000A8A  D012               	goto	l2943
  4584  000A8C                     l2937:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4588  000A8C  C030  FFD9         	movff	sprintf@sp,fsr2l
  4589  000A90  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4590  000A94  0E20               	movlw	32
  4591  000A96  6EDF               	movwf	indf2,c
  4592                           
  4593                           ; BSR set to: 0
  4594  000A98  4A30               	infsnz	sprintf@sp,f,c
  4595  000A9A  2A31               	incf	sprintf@sp+1,f,c
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;doprnt.c: 1431: while(--width);
  4599  000A9C  0100               	movlb	0	; () banked
  4600  000A9E  076A               	decf	sprintf@width& (0+255),f,b
  4601  000AA0  A0D8               	btfss	status,0,c
  4602  000AA2  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4603  000AA4  0100               	movlb	0	; () banked
  4604  000AA6  516A               	movf	sprintf@width& (0+255),w,b
  4605  000AA8  0100               	movlb	0	; () banked
  4606  000AAA  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4607  000AAC  A4D8               	btfss	status,2,c
  4608  000AAE  D7EE               	goto	l2937
  4609  000AB0                     l2943:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;doprnt.c: 1438: if(flag & 0x03)
  4613  000AB0  C069  F060         	movff	sprintf@flag,??_sprintf
  4614  000AB4  0E03               	movlw	3
  4615  000AB6  0100               	movlb	0	; () banked
  4616  000AB8  1760               	andwf	??_sprintf& (0+255),f,b
  4617  000ABA  B4D8               	btfsc	status,2,c
  4618  000ABC  D008               	goto	l2949
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4622  000ABE  C030  FFD9         	movff	sprintf@sp,fsr2l
  4623  000AC2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4624  000AC6  0E2D               	movlw	45
  4625  000AC8  6EDF               	movwf	indf2,c
  4626                           
  4627                           ; BSR set to: 0
  4628  000ACA  4A30               	infsnz	sprintf@sp,f,c
  4629  000ACC  2A31               	incf	sprintf@sp+1,f,c
  4630  000ACE                     l2949:
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;doprnt.c: 1469: }
  4634                           ;doprnt.c: 1472: prec = c;
  4635  000ACE  C06C  F066         	movff	sprintf@c,sprintf@prec
  4636                           
  4637                           ;doprnt.c: 1474: while(prec--) {
  4638  000AD2  D02B               	goto	l2957
  4639  000AD4                     l2951:
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;doprnt.c: 1478: {
  4643                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4644  000AD4  0100               	movlb	0	; () banked
  4645  000AD6  5166               	movf	sprintf@prec& (0+255),w,b
  4646  000AD8  0D02               	mullw	2
  4647  000ADA  0E01               	movlw	low _dpowers
  4648  000ADC  24F3               	addwf	prodl,w,c
  4649  000ADE  6EF6               	movwf	tblptrl,c
  4650  000AE0  0E03               	movlw	high _dpowers
  4651  000AE2  20F4               	addwfc	prodh,w,c
  4652  000AE4  6EF7               	movwf	tblptrh,c
  4653  000AE6                     	if	0	;There are less than 3 active tblptr bytes
  4654  000AE6                     	endif
  4655  000AE6  0009               	tblrd		*+
  4656  000AE8  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4657  000AEC  000A               	tblrd		*-
  4658  000AEE  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4659  000AF2  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4660  000AF6  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4661  000AFA  EC30  F00B         	call	___lwdiv	;wreg free
  4662  000AFE  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4663  000B02  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4664  000B06  0E00               	movlw	0
  4665  000B08  6E2E               	movwf	___lwmod@divisor+1,c
  4666  000B0A  0E0A               	movlw	10
  4667  000B0C  6E2D               	movwf	___lwmod@divisor,c
  4668  000B0E  EC59  F00B         	call	___lwmod	;wreg free
  4669  000B12  502B               	movf	?___lwmod,w,c
  4670  000B14  0F30               	addlw	48
  4671  000B16  0100               	movlb	0	; () banked
  4672  000B18  6F6C               	movwf	sprintf@c& (0+255),b
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;doprnt.c: 1523: }
  4676                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4677  000B1A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4678  000B1E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4679  000B22  C06C  FFDF         	movff	sprintf@c,indf2
  4680                           
  4681                           ; BSR set to: 0
  4682  000B26  4A30               	infsnz	sprintf@sp,f,c
  4683  000B28  2A31               	incf	sprintf@sp+1,f,c
  4684  000B2A                     l2957:
  4685                           
  4686                           ; BSR set to: 0
  4687  000B2A  0100               	movlb	0	; () banked
  4688  000B2C  0766               	decf	sprintf@prec& (0+255),f,b
  4689  000B2E  0100               	movlb	0	; () banked
  4690  000B30  2966               	incf	sprintf@prec& (0+255),w,b
  4691  000B32  A4D8               	btfss	status,2,c
  4692  000B34  D7CF               	goto	l2951
  4693  000B36                     l2959:
  4694  000B36  C032  FFF6         	movff	sprintf@f,tblptrl
  4695  000B3A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4696  000B3E  4A32               	infsnz	sprintf@f,f,c
  4697  000B40  2A33               	incf	sprintf@f+1,f,c
  4698  000B42                     	if	0	;tblptru may be non-zero
  4699  000B42                     	endif
  4700  000B42                     	if	0	;tblptru may be non-zero
  4701  000B42                     	endif
  4702  000B42  0008               	tblrd		*
  4703  000B44  CFF5 F06C          	movff	tablat,sprintf@c
  4704  000B48  0100               	movlb	0	; () banked
  4705  000B4A  516C               	movf	sprintf@c& (0+255),w,b
  4706  000B4C  A4D8               	btfss	status,2,c
  4707  000B4E  D68B               	goto	l2853
  4708  000B50                     l2961:
  4709                           
  4710                           ;doprnt.c: 1538: *sp = 0;
  4711  000B50  C030  FFD9         	movff	sprintf@sp,fsr2l
  4712  000B54  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4713  000B58  0E00               	movlw	0
  4714  000B5A  6EDF               	movwf	indf2,c
  4715  000B5C  0012               	return	
  4716  000B5E                     __end_of_sprintf:
  4717                           	opt stack 0
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           indf1	equ	0xFE7
  4728                           fsr1h	equ	0xFE2
  4729                           fsr1l	equ	0xFE1
  4730                           indf2	equ	0xFDF
  4731                           postinc2	equ	0xFDE
  4732                           postdec2	equ	0xFDD
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _isdigit *****************
  4738 ;; Defined at:
  4739 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  c               1    wreg     unsigned char 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  c               1   37[COMRAM] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;		None               void
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4753 ;;      Params:         0       0       0       0
  4754 ;;      Locals:         2       0       0       0
  4755 ;;      Temps:          1       0       0       0
  4756 ;;      Totals:         3       0       0       0
  4757 ;;Total ram usage:        3 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    3
  4760 ;; This function calls:
  4761 ;;		Nothing
  4762 ;; This function is called by:
  4763 ;;		_sprintf
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text18
  4768  0018CC                     __ptext18:
  4769                           	opt stack 0
  4770  0018CC                     _isdigit:
  4771                           	opt stack 26
  4772                           
  4773                           ;incstack = 0
  4774                           ;isdigit@c stored from wreg
  4775  0018CC  6E26               	movwf	isdigit@c,c
  4776  0018CE  0E00               	movlw	0
  4777  0018D0  6E25               	movwf	_isdigit$1874,c
  4778  0018D2  0E3A               	movlw	58
  4779  0018D4  6026               	cpfslt	isdigit@c,c
  4780  0018D6  D005               	goto	l2043
  4781  0018D8  0E2F               	movlw	47
  4782  0018DA  6426               	cpfsgt	isdigit@c,c
  4783  0018DC  D002               	goto	l2043
  4784  0018DE  0E01               	movlw	1
  4785  0018E0  6E25               	movwf	_isdigit$1874,c
  4786  0018E2                     l2043:
  4787  0018E2  C025  F024         	movff	_isdigit$1874,??_isdigit
  4788  0018E6  3024               	rrcf	??_isdigit,w,c
  4789  0018E8  0012               	return	
  4790  0018EA                     __end_of_isdigit:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           intcon	equ	0xFF2
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           indf1	equ	0xFE7
  4802                           fsr1h	equ	0xFE2
  4803                           fsr1l	equ	0xFE1
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           fsr2h	equ	0xFDA
  4808                           fsr2l	equ	0xFD9
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function ___wmul *****************
  4812 ;; Defined at:
  4813 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  multiplier      2   35[COMRAM] unsigned int 
  4816 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  product         2   39[COMRAM] unsigned int 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  2   35[COMRAM] unsigned int 
  4821 ;; Registers used:
  4822 ;;		wreg, status,2, status,0, prodl, prodh
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4828 ;;      Params:         4       0       0       0
  4829 ;;      Locals:         2       0       0       0
  4830 ;;      Temps:          0       0       0       0
  4831 ;;      Totals:         6       0       0       0
  4832 ;;Total ram usage:        6 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    3
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_setMotorPWM
  4839 ;;		_sprintf
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text19
  4844  001884                     __ptext19:
  4845                           	opt stack 0
  4846  001884                     ___wmul:
  4847                           	opt stack 25
  4848                           
  4849                           ;incstack = 0
  4850  001884  5024               	movf	___wmul@multiplier,w,c
  4851  001886  0226               	mulwf	___wmul@multiplicand,c
  4852  001888  CFF3 F028          	movff	prodl,___wmul@product
  4853  00188C  CFF4 F029          	movff	prodh,___wmul@product+1
  4854  001890  5024               	movf	___wmul@multiplier,w,c
  4855  001892  0227               	mulwf	___wmul@multiplicand+1,c
  4856  001894  50F3               	movf	prodl,w,c
  4857  001896  2629               	addwf	___wmul@product+1,f,c
  4858  001898  5025               	movf	___wmul@multiplier+1,w,c
  4859  00189A  0226               	mulwf	___wmul@multiplicand,c
  4860  00189C  50F3               	movf	prodl,w,c
  4861  00189E  2629               	addwf	___wmul@product+1,f,c
  4862  0018A0  C028  F024         	movff	___wmul@product,?___wmul
  4863  0018A4  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4864  0018A8  0012               	return	
  4865  0018AA                     __end_of___wmul:
  4866                           	opt stack 0
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           postinc0	equ	0xFEE
  4875                           wreg	equ	0xFE8
  4876                           indf1	equ	0xFE7
  4877                           fsr1h	equ	0xFE2
  4878                           fsr1l	equ	0xFE1
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           fsr2h	equ	0xFDA
  4883                           fsr2l	equ	0xFD9
  4884                           status	equ	0xFD8
  4885                           
  4886 ;; *************** function ___lwmod *****************
  4887 ;; Defined at:
  4888 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  dividend        2   42[COMRAM] unsigned int 
  4891 ;;  divisor         2   44[COMRAM] unsigned int 
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  counter         1   46[COMRAM] unsigned char 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  2   42[COMRAM] unsigned int 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, status,0
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4903 ;;      Params:         4       0       0       0
  4904 ;;      Locals:         1       0       0       0
  4905 ;;      Temps:          0       0       0       0
  4906 ;;      Totals:         5       0       0       0
  4907 ;;Total ram usage:        5 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    3
  4910 ;; This function calls:
  4911 ;;		Nothing
  4912 ;; This function is called by:
  4913 ;;		_sprintf
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           	psect	text20
  4918  0016B2                     __ptext20:
  4919                           	opt stack 0
  4920  0016B2                     ___lwmod:
  4921                           	opt stack 26
  4922                           
  4923                           ;incstack = 0
  4924  0016B2  502D               	movf	___lwmod@divisor,w,c
  4925  0016B4  102E               	iorwf	___lwmod@divisor+1,w,c
  4926  0016B6  B4D8               	btfsc	status,2,c
  4927  0016B8  D018               	goto	l864
  4928  0016BA  0E01               	movlw	1
  4929  0016BC  6E2F               	movwf	___lwmod@counter,c
  4930  0016BE  D004               	goto	l2075
  4931  0016C0                     l2073:
  4932  0016C0  90D8               	bcf	status,0,c
  4933  0016C2  362D               	rlcf	___lwmod@divisor,f,c
  4934  0016C4  362E               	rlcf	___lwmod@divisor+1,f,c
  4935  0016C6  2A2F               	incf	___lwmod@counter,f,c
  4936  0016C8                     l2075:
  4937  0016C8  AE2E               	btfss	___lwmod@divisor+1,7,c
  4938  0016CA  D7FA               	goto	l2073
  4939  0016CC                     l2077:
  4940  0016CC  502D               	movf	___lwmod@divisor,w,c
  4941  0016CE  5C2B               	subwf	___lwmod@dividend,w,c
  4942  0016D0  502E               	movf	___lwmod@divisor+1,w,c
  4943  0016D2  582C               	subwfb	___lwmod@dividend+1,w,c
  4944  0016D4  A0D8               	btfss	status,0,c
  4945  0016D6  D004               	goto	l2081
  4946  0016D8  502D               	movf	___lwmod@divisor,w,c
  4947  0016DA  5E2B               	subwf	___lwmod@dividend,f,c
  4948  0016DC  502E               	movf	___lwmod@divisor+1,w,c
  4949  0016DE  5A2C               	subwfb	___lwmod@dividend+1,f,c
  4950  0016E0                     l2081:
  4951  0016E0  90D8               	bcf	status,0,c
  4952  0016E2  322E               	rrcf	___lwmod@divisor+1,f,c
  4953  0016E4  322D               	rrcf	___lwmod@divisor,f,c
  4954  0016E6  2E2F               	decfsz	___lwmod@counter,f,c
  4955  0016E8  D7F1               	goto	l2077
  4956  0016EA                     l864:
  4957  0016EA  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  4958  0016EE  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  4959  0016F2  0012               	return		;funcret
  4960  0016F4                     __end_of___lwmod:
  4961                           	opt stack 0
  4962                           tblptru	equ	0xFF8
  4963                           tblptrh	equ	0xFF7
  4964                           tblptrl	equ	0xFF6
  4965                           tablat	equ	0xFF5
  4966                           prodh	equ	0xFF4
  4967                           prodl	equ	0xFF3
  4968                           intcon	equ	0xFF2
  4969                           postinc0	equ	0xFEE
  4970                           wreg	equ	0xFE8
  4971                           indf1	equ	0xFE7
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           fsr2h	equ	0xFDA
  4978                           fsr2l	equ	0xFD9
  4979                           status	equ	0xFD8
  4980                           
  4981 ;; *************** function ___lwdiv *****************
  4982 ;; Defined at:
  4983 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  dividend        2   35[COMRAM] unsigned int 
  4986 ;;  divisor         2   37[COMRAM] unsigned int 
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;  quotient        2   39[COMRAM] unsigned int 
  4989 ;;  counter         1   41[COMRAM] unsigned char 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  2   35[COMRAM] unsigned int 
  4992 ;; Registers used:
  4993 ;;		wreg, status,2, status,0
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4999 ;;      Params:         4       0       0       0
  5000 ;;      Locals:         3       0       0       0
  5001 ;;      Temps:          0       0       0       0
  5002 ;;      Totals:         7       0       0       0
  5003 ;;Total ram usage:        7 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    3
  5006 ;; This function calls:
  5007 ;;		Nothing
  5008 ;; This function is called by:
  5009 ;;		_sprintf
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text21
  5014  001660                     __ptext21:
  5015                           	opt stack 0
  5016  001660                     ___lwdiv:
  5017                           	opt stack 26
  5018                           
  5019                           ;incstack = 0
  5020  001660  0E00               	movlw	0
  5021  001662  6E29               	movwf	___lwdiv@quotient+1,c
  5022  001664  0E00               	movlw	0
  5023  001666  6E28               	movwf	___lwdiv@quotient,c
  5024  001668  5026               	movf	___lwdiv@divisor,w,c
  5025  00166A  1027               	iorwf	___lwdiv@divisor+1,w,c
  5026  00166C  B4D8               	btfsc	status,2,c
  5027  00166E  D01C               	goto	l854
  5028  001670  0E01               	movlw	1
  5029  001672  6E2A               	movwf	___lwdiv@counter,c
  5030  001674  D004               	goto	l2055
  5031  001676                     l2053:
  5032  001676  90D8               	bcf	status,0,c
  5033  001678  3626               	rlcf	___lwdiv@divisor,f,c
  5034  00167A  3627               	rlcf	___lwdiv@divisor+1,f,c
  5035  00167C  2A2A               	incf	___lwdiv@counter,f,c
  5036  00167E                     l2055:
  5037  00167E  AE27               	btfss	___lwdiv@divisor+1,7,c
  5038  001680  D7FA               	goto	l2053
  5039  001682                     l2057:
  5040  001682  90D8               	bcf	status,0,c
  5041  001684  3628               	rlcf	___lwdiv@quotient,f,c
  5042  001686  3629               	rlcf	___lwdiv@quotient+1,f,c
  5043  001688  5026               	movf	___lwdiv@divisor,w,c
  5044  00168A  5C24               	subwf	___lwdiv@dividend,w,c
  5045  00168C  5027               	movf	___lwdiv@divisor+1,w,c
  5046  00168E  5825               	subwfb	___lwdiv@dividend+1,w,c
  5047  001690  A0D8               	btfss	status,0,c
  5048  001692  D005               	goto	l2065
  5049  001694  5026               	movf	___lwdiv@divisor,w,c
  5050  001696  5E24               	subwf	___lwdiv@dividend,f,c
  5051  001698  5027               	movf	___lwdiv@divisor+1,w,c
  5052  00169A  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5053  00169C  8028               	bsf	___lwdiv@quotient,0,c
  5054  00169E                     l2065:
  5055  00169E  90D8               	bcf	status,0,c
  5056  0016A0  3227               	rrcf	___lwdiv@divisor+1,f,c
  5057  0016A2  3226               	rrcf	___lwdiv@divisor,f,c
  5058  0016A4  2E2A               	decfsz	___lwdiv@counter,f,c
  5059  0016A6  D7ED               	goto	l2057
  5060  0016A8                     l854:
  5061  0016A8  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5062  0016AC  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5063  0016B0  0012               	return		;funcret
  5064  0016B2                     __end_of___lwdiv:
  5065                           	opt stack 0
  5066                           tblptru	equ	0xFF8
  5067                           tblptrh	equ	0xFF7
  5068                           tblptrl	equ	0xFF6
  5069                           tablat	equ	0xFF5
  5070                           prodh	equ	0xFF4
  5071                           prodl	equ	0xFF3
  5072                           intcon	equ	0xFF2
  5073                           postinc0	equ	0xFEE
  5074                           wreg	equ	0xFE8
  5075                           indf1	equ	0xFE7
  5076                           fsr1h	equ	0xFE2
  5077                           fsr1l	equ	0xFE1
  5078                           indf2	equ	0xFDF
  5079                           postinc2	equ	0xFDE
  5080                           postdec2	equ	0xFDD
  5081                           fsr2h	equ	0xFDA
  5082                           fsr2l	equ	0xFD9
  5083                           status	equ	0xFD8
  5084                           
  5085 ;; *************** function _grabRightIR *****************
  5086 ;; Defined at:
  5087 ;;		line 74 in file "IR_Reading.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;		None
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5092 ;;  i               1   42[COMRAM] unsigned char 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  2   35[COMRAM] unsigned int 
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5102 ;;      Params:         2       0       0       0
  5103 ;;      Locals:         3       0       0       0
  5104 ;;      Temps:          3       0       0       0
  5105 ;;      Totals:         8       0       0       0
  5106 ;;Total ram usage:        8 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    3
  5109 ;; This function calls:
  5110 ;;		Nothing
  5111 ;; This function is called by:
  5112 ;;		_ScanIR
  5113 ;;		_ScanWithRange
  5114 ;;		_main
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           	psect	text22
  5119  00147A                     __ptext22:
  5120                           	opt stack 0
  5121  00147A                     _grabRightIR:
  5122                           	opt stack 27
  5123                           
  5124                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5125                           
  5126                           ;incstack = 0
  5127  00147A  0E00               	movlw	0
  5128  00147C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5129  00147E  0E00               	movlw	0
  5130  001480  6E29               	movwf	grabRightIR@IR_signal,c
  5131                           
  5132                           ;IR_Reading.c: 77: unsigned char i=0;
  5133  001482  0E00               	movlw	0
  5134  001484  6E2B               	movwf	grabRightIR@i,c
  5135                           
  5136                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5137  001486  0E00               	movlw	0
  5138  001488  6E2B               	movwf	grabRightIR@i,c
  5139  00148A                     l2099:
  5140  00148A  0E03               	movlw	3
  5141  00148C  642B               	cpfsgt	grabRightIR@i,c
  5142  00148E  D001               	goto	l2103
  5143  001490  D01E               	goto	l2109
  5144  001492                     l2103:
  5145                           
  5146                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5147  001492  5069               	movf	3945,w,c	;volatile
  5148  001494  6E26               	movwf	??_grabRightIR& (0+255),c
  5149  001496  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5150  001498  0E07               	movlw	7
  5151  00149A                     u1455:
  5152  00149A  90D8               	bcf	status,0,c
  5153  00149C  3626               	rlcf	??_grabRightIR,f,c
  5154  00149E  3627               	rlcf	??_grabRightIR+1,f,c
  5155  0014A0  2EE8               	decfsz	wreg,f,c
  5156  0014A2  D7FB               	goto	u1455
  5157  0014A4  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5158  0014A8  90D8               	bcf	status,0,c
  5159  0014AA  3228               	rrcf	??_grabRightIR+2,f,c
  5160  0014AC  5028               	movf	??_grabRightIR+2,w,c
  5161  0014AE  1226               	iorwf	??_grabRightIR,f,c
  5162  0014B0  0E00               	movlw	0
  5163  0014B2  1227               	iorwf	??_grabRightIR+1,f,c
  5164  0014B4  5026               	movf	??_grabRightIR,w,c
  5165  0014B6  2629               	addwf	grabRightIR@IR_signal,f,c
  5166  0014B8  5027               	movf	??_grabRightIR+1,w,c
  5167  0014BA  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5168                           
  5169                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5170  0014BC  0E82               	movlw	130
  5171  0014BE  6E26               	movwf	??_grabRightIR& (0+255),c
  5172  0014C0  0EDE               	movlw	222
  5173  0014C2                     u3017:
  5174  0014C2  2EE8               	decfsz	wreg,f,c
  5175  0014C4  D7FE               	goto	u3017
  5176  0014C6  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5177  0014C8  D7FC               	goto	u3017
  5178  0014CA  2A2B               	incf	grabRightIR@i,f,c
  5179  0014CC  D7DE               	goto	l2099
  5180  0014CE                     l2109:
  5181                           
  5182                           ;IR_Reading.c: 83: }
  5183                           ;IR_Reading.c: 85: return IR_signal>>2;
  5184  0014CE  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5185  0014D2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5186  0014D6  90D8               	bcf	status,0,c
  5187  0014D8  3227               	rrcf	??_grabRightIR+1,f,c
  5188  0014DA  3226               	rrcf	??_grabRightIR,f,c
  5189  0014DC  90D8               	bcf	status,0,c
  5190  0014DE  3227               	rrcf	??_grabRightIR+1,f,c
  5191  0014E0  3226               	rrcf	??_grabRightIR,f,c
  5192  0014E2  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5193  0014E6  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5194  0014EA  0012               	return	
  5195  0014EC                     __end_of_grabRightIR:
  5196                           	opt stack 0
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodh	equ	0xFF4
  5202                           prodl	equ	0xFF3
  5203                           intcon	equ	0xFF2
  5204                           postinc0	equ	0xFEE
  5205                           wreg	equ	0xFE8
  5206                           indf1	equ	0xFE7
  5207                           fsr1h	equ	0xFE2
  5208                           fsr1l	equ	0xFE1
  5209                           indf2	equ	0xFDF
  5210                           postinc2	equ	0xFDE
  5211                           postdec2	equ	0xFDD
  5212                           fsr2h	equ	0xFDA
  5213                           fsr2l	equ	0xFD9
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _grabLeftIR *****************
  5217 ;; Defined at:
  5218 ;;		line 90 in file "IR_Reading.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5223 ;;  i               1   42[COMRAM] unsigned char 
  5224 ;; Return value:  Size  Location     Type
  5225 ;;                  2   35[COMRAM] unsigned int 
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5233 ;;      Params:         2       0       0       0
  5234 ;;      Locals:         3       0       0       0
  5235 ;;      Temps:          3       0       0       0
  5236 ;;      Totals:         8       0       0       0
  5237 ;;Total ram usage:        8 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    3
  5240 ;; This function calls:
  5241 ;;		Nothing
  5242 ;; This function is called by:
  5243 ;;		_ScanIR
  5244 ;;		_ScanWithRange
  5245 ;;		_main
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text23
  5250  0014EC                     __ptext23:
  5251                           	opt stack 0
  5252  0014EC                     _grabLeftIR:
  5253                           	opt stack 27
  5254                           
  5255                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5256                           
  5257                           ;incstack = 0
  5258  0014EC  0E00               	movlw	0
  5259  0014EE  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5260  0014F0  0E00               	movlw	0
  5261  0014F2  6E29               	movwf	grabLeftIR@IR_signal,c
  5262                           
  5263                           ;IR_Reading.c: 93: unsigned char i=0;
  5264  0014F4  0E00               	movlw	0
  5265  0014F6  6E2B               	movwf	grabLeftIR@i,c
  5266                           
  5267                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5268  0014F8  0E00               	movlw	0
  5269  0014FA  6E2B               	movwf	grabLeftIR@i,c
  5270  0014FC                     l2115:
  5271  0014FC  0E03               	movlw	3
  5272  0014FE  642B               	cpfsgt	grabLeftIR@i,c
  5273  001500  D001               	goto	l2119
  5274  001502  D01E               	goto	l2125
  5275  001504                     l2119:
  5276                           
  5277                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5278  001504  5067               	movf	3943,w,c	;volatile
  5279  001506  6E26               	movwf	??_grabLeftIR& (0+255),c
  5280  001508  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5281  00150A  0E07               	movlw	7
  5282  00150C                     u1485:
  5283  00150C  90D8               	bcf	status,0,c
  5284  00150E  3626               	rlcf	??_grabLeftIR,f,c
  5285  001510  3627               	rlcf	??_grabLeftIR+1,f,c
  5286  001512  2EE8               	decfsz	wreg,f,c
  5287  001514  D7FB               	goto	u1485
  5288  001516  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5289  00151A  90D8               	bcf	status,0,c
  5290  00151C  3228               	rrcf	??_grabLeftIR+2,f,c
  5291  00151E  5028               	movf	??_grabLeftIR+2,w,c
  5292  001520  1226               	iorwf	??_grabLeftIR,f,c
  5293  001522  0E00               	movlw	0
  5294  001524  1227               	iorwf	??_grabLeftIR+1,f,c
  5295  001526  5026               	movf	??_grabLeftIR,w,c
  5296  001528  2629               	addwf	grabLeftIR@IR_signal,f,c
  5297  00152A  5027               	movf	??_grabLeftIR+1,w,c
  5298  00152C  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5299                           
  5300                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5301  00152E  0E82               	movlw	130
  5302  001530  6E26               	movwf	??_grabLeftIR& (0+255),c
  5303  001532  0EDE               	movlw	222
  5304  001534                     u3027:
  5305  001534  2EE8               	decfsz	wreg,f,c
  5306  001536  D7FE               	goto	u3027
  5307  001538  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5308  00153A  D7FC               	goto	u3027
  5309  00153C  2A2B               	incf	grabLeftIR@i,f,c
  5310  00153E  D7DE               	goto	l2115
  5311  001540                     l2125:
  5312                           
  5313                           ;IR_Reading.c: 99: }
  5314                           ;IR_Reading.c: 101: return IR_signal>>2;
  5315  001540  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5316  001544  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5317  001548  90D8               	bcf	status,0,c
  5318  00154A  3227               	rrcf	??_grabLeftIR+1,f,c
  5319  00154C  3226               	rrcf	??_grabLeftIR,f,c
  5320  00154E  90D8               	bcf	status,0,c
  5321  001550  3227               	rrcf	??_grabLeftIR+1,f,c
  5322  001552  3226               	rrcf	??_grabLeftIR,f,c
  5323  001554  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5324  001558  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5325  00155C  0012               	return	
  5326  00155E                     __end_of_grabLeftIR:
  5327                           	opt stack 0
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           indf1	equ	0xFE7
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           fsr2h	equ	0xFDA
  5344                           fsr2l	equ	0xFD9
  5345                           status	equ	0xFD8
  5346                           
  5347 ;; *************** function _SetLine *****************
  5348 ;; Defined at:
  5349 ;;		line 74 in file "LCD.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;  line            1    wreg     unsigned char 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  line            1   41[COMRAM] unsigned char 
  5354 ;; Return value:  Size  Location     Type
  5355 ;;		None               void
  5356 ;; Registers used:
  5357 ;;		wreg, status,2, status,0, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5363 ;;      Params:         0       0       0       0
  5364 ;;      Locals:         1       0       0       0
  5365 ;;      Temps:          0       0       0       0
  5366 ;;      Totals:         1       0       0       0
  5367 ;;Total ram usage:        1 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    6
  5370 ;; This function calls:
  5371 ;;		_SendLCD
  5372 ;; This function is called by:
  5373 ;;		_ScanIR
  5374 ;;		_ScanWithRange
  5375 ;;		_main
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text24
  5380  0017D4                     __ptext24:
  5381                           	opt stack 0
  5382  0017D4                     _SetLine:
  5383                           	opt stack 24
  5384                           
  5385                           ;incstack = 0
  5386                           ;SetLine@line stored from wreg
  5387  0017D4  6E2A               	movwf	SetLine@line,c
  5388                           
  5389                           ;LCD.c: 75: if (line==1) {
  5390  0017D6  042A               	decf	SetLine@line,w,c
  5391  0017D8  A4D8               	btfss	status,2,c
  5392  0017DA  D006               	goto	l2133
  5393                           
  5394                           ;LCD.c: 76: SendLCD(0x80,0);
  5395  0017DC  0E00               	movlw	0
  5396  0017DE  6E28               	movwf	SendLCD@type,c
  5397  0017E0  0E80               	movlw	128
  5398  0017E2  EC02  F00C         	call	_SendLCD
  5399                           
  5400                           ;LCD.c: 77: } else if (line==2) {
  5401  0017E6  D009               	goto	l2137
  5402  0017E8                     l2133:
  5403  0017E8  0E02               	movlw	2
  5404  0017EA  182A               	xorwf	SetLine@line,w,c
  5405  0017EC  A4D8               	btfss	status,2,c
  5406  0017EE  D005               	goto	l2137
  5407                           
  5408                           ;LCD.c: 78: SendLCD(0xC0,0);
  5409  0017F0  0E00               	movlw	0
  5410  0017F2  6E28               	movwf	SendLCD@type,c
  5411  0017F4  0EC0               	movlw	192
  5412  0017F6  EC02  F00C         	call	_SendLCD
  5413  0017FA                     l2137:
  5414                           
  5415                           ;LCD.c: 79: }
  5416                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5417  0017FA  0E21               	movlw	33
  5418  0017FC                     u3037:
  5419  0017FC  2EE8               	decfsz	wreg,f,c
  5420  0017FE  D7FE               	goto	u3037
  5421  001800  F000               	nop	
  5422  001802  0012               	return		;funcret
  5423  001804                     __end_of_SetLine:
  5424                           	opt stack 0
  5425                           tblptru	equ	0xFF8
  5426                           tblptrh	equ	0xFF7
  5427                           tblptrl	equ	0xFF6
  5428                           tablat	equ	0xFF5
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           postinc0	equ	0xFEE
  5433                           wreg	equ	0xFE8
  5434                           indf1	equ	0xFE7
  5435                           fsr1h	equ	0xFE2
  5436                           fsr1l	equ	0xFE1
  5437                           indf2	equ	0xFDF
  5438                           postinc2	equ	0xFDE
  5439                           postdec2	equ	0xFDD
  5440                           fsr2h	equ	0xFDA
  5441                           fsr2l	equ	0xFD9
  5442                           status	equ	0xFD8
  5443                           
  5444 ;; *************** function _LCD_String *****************
  5445 ;; Defined at:
  5446 ;;		line 83 in file "LCD.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;  string          2   41[COMRAM] PTR unsigned char 
  5449 ;;		 -> STR_8(11), main@Message(10), STR_7(10), main@buf(40), 
  5450 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5451 ;;		 -> STR_1(12), 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;		None
  5454 ;; Return value:  Size  Location     Type
  5455 ;;		None               void
  5456 ;; Registers used:
  5457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5463 ;;      Params:         2       0       0       0
  5464 ;;      Locals:         0       0       0       0
  5465 ;;      Temps:          0       0       0       0
  5466 ;;      Totals:         2       0       0       0
  5467 ;;Total ram usage:        2 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    6
  5470 ;; This function calls:
  5471 ;;		_SendLCD
  5472 ;; This function is called by:
  5473 ;;		_ScanIR
  5474 ;;		_ScanWithRange
  5475 ;;		_main
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           	psect	text25
  5480  00155E                     __ptext25:
  5481                           	opt stack 0
  5482  00155E                     _LCD_String:
  5483                           	opt stack 23
  5484                           
  5485                           ;LCD.c: 85: while(*string != 0){
  5486                           
  5487                           ;incstack = 0
  5488  00155E  D01A               	goto	l2147
  5489  001560                     l2141:
  5490                           
  5491                           ;LCD.c: 88: SendLCD(*string++,1);
  5492  001560  0E01               	movlw	1
  5493  001562  6E28               	movwf	SendLCD@type,c
  5494  001564  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5495  001568  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5496  00156C  6AF8               	clrf	tblptru,c
  5497  00156E  0E02               	movlw	(high __ramtop+-1)
  5498  001570  64F7               	cpfsgt	tblptrh,c
  5499  001572  D003               	bra	u1527
  5500  001574  0008               	tblrd		*
  5501  001576  50F5               	movf	tablat,w,c
  5502  001578  D005               	bra	u1520
  5503  00157A                     u1527:
  5504  00157A  CFF6 FFE1          	movff	tblptrl,fsr1l
  5505  00157E  CFF7 FFE2          	movff	tblptrh,fsr1h
  5506  001582  50E7               	movf	indf1,w,c
  5507  001584                     u1520:
  5508  001584  EC02  F00C         	call	_SendLCD
  5509  001588  4A2A               	infsnz	LCD_String@string,f,c
  5510  00158A  2A2B               	incf	LCD_String@string+1,f,c
  5511                           
  5512                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5513  00158C  0E21               	movlw	33
  5514  00158E                     u3047:
  5515  00158E  2EE8               	decfsz	wreg,f,c
  5516  001590  D7FE               	goto	u3047
  5517  001592  F000               	nop	
  5518  001594                     l2147:
  5519  001594  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5520  001598  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5521  00159C  6AF8               	clrf	tblptru,c
  5522  00159E  0E02               	movlw	(high __ramtop+-1)
  5523  0015A0  64F7               	cpfsgt	tblptrh,c
  5524  0015A2  D003               	bra	u1537
  5525  0015A4  0008               	tblrd		*
  5526  0015A6  50F5               	movf	tablat,w,c
  5527  0015A8  D005               	bra	u1530
  5528  0015AA                     u1537:
  5529  0015AA  CFF6 FFE1          	movff	tblptrl,fsr1l
  5530  0015AE  CFF7 FFE2          	movff	tblptrh,fsr1h
  5531  0015B2  50E7               	movf	indf1,w,c
  5532  0015B4                     u1530:
  5533  0015B4  0900               	iorlw	0
  5534  0015B6  B4D8               	btfsc	status,2,c
  5535  0015B8  0012               	return	
  5536  0015BA  D7D2               	goto	l2141
  5537  0015BC                     __end_of_LCD_String:
  5538                           	opt stack 0
  5539                           tblptru	equ	0xFF8
  5540                           tblptrh	equ	0xFF7
  5541                           tblptrl	equ	0xFF6
  5542                           tablat	equ	0xFF5
  5543                           prodh	equ	0xFF4
  5544                           prodl	equ	0xFF3
  5545                           intcon	equ	0xFF2
  5546                           postinc0	equ	0xFEE
  5547                           wreg	equ	0xFE8
  5548                           indf1	equ	0xFE7
  5549                           fsr1h	equ	0xFE2
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           postdec2	equ	0xFDD
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _SendLCD *****************
  5559 ;; Defined at:
  5560 ;;		line 27 in file "LCD.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  Byte            1    wreg     unsigned char 
  5563 ;;  type            1   39[COMRAM] unsigned char 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  Byte            1   40[COMRAM] unsigned char 
  5566 ;; Return value:  Size  Location     Type
  5567 ;;		None               void
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0, cstack
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5575 ;;      Params:         1       0       0       0
  5576 ;;      Locals:         1       0       0       0
  5577 ;;      Temps:          0       0       0       0
  5578 ;;      Totals:         2       0       0       0
  5579 ;;Total ram usage:        2 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    5
  5582 ;; This function calls:
  5583 ;;		_LCDout
  5584 ;; This function is called by:
  5585 ;;		_initLCD
  5586 ;;		_SetLine
  5587 ;;		_LCD_String
  5588 ;;		_ScanIR
  5589 ;;		_ScanWithRange
  5590 ;;		_main
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text26
  5595  001804                     __ptext26:
  5596                           	opt stack 0
  5597  001804                     _SendLCD:
  5598                           	opt stack 24
  5599                           
  5600                           ;incstack = 0
  5601                           ;SendLCD@Byte stored from wreg
  5602  001804  6E29               	movwf	SendLCD@Byte,c
  5603                           
  5604                           ;LCD.c: 30: LATAbits.LATA6=type;
  5605  001806  B028               	btfsc	SendLCD@type,0,c
  5606  001808  D002               	bra	u1355
  5607  00180A  9C89               	bcf	3977,6,c	;volatile
  5608  00180C  D001               	bra	u1356
  5609  00180E                     u1355:
  5610  00180E  8C89               	bsf	3977,6,c	;volatile
  5611  001810                     u1356:
  5612                           
  5613                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5614  001810  3829               	swapf	SendLCD@Byte,w,c
  5615  001812  0B0F               	andlw	15
  5616  001814  0B0F               	andlw	15
  5617  001816  EC11  F008         	call	_LCDout
  5618                           
  5619                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5620  00181A  0E06               	movlw	6
  5621  00181C                     u3057:
  5622  00181C  2EE8               	decfsz	wreg,f,c
  5623  00181E  D7FE               	goto	u3057
  5624  001820  D000               	nop2		;nop
  5625                           
  5626                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5627  001822  5029               	movf	SendLCD@Byte,w,c
  5628  001824  0B0F               	andlw	15
  5629  001826  EC11  F008         	call	_LCDout
  5630                           
  5631                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5632  00182A  0E21               	movlw	33
  5633  00182C                     u3067:
  5634  00182C  2EE8               	decfsz	wreg,f,c
  5635  00182E  D7FE               	goto	u3067
  5636  001830  F000               	nop	
  5637  001832  0012               	return		;funcret
  5638  001834                     __end_of_SendLCD:
  5639                           	opt stack 0
  5640                           tblptru	equ	0xFF8
  5641                           tblptrh	equ	0xFF7
  5642                           tblptrl	equ	0xFF6
  5643                           tablat	equ	0xFF5
  5644                           prodh	equ	0xFF4
  5645                           prodl	equ	0xFF3
  5646                           intcon	equ	0xFF2
  5647                           postinc0	equ	0xFEE
  5648                           wreg	equ	0xFE8
  5649                           indf1	equ	0xFE7
  5650                           fsr1h	equ	0xFE2
  5651                           fsr1l	equ	0xFE1
  5652                           indf2	equ	0xFDF
  5653                           postinc2	equ	0xFDE
  5654                           postdec2	equ	0xFDD
  5655                           fsr2h	equ	0xFDA
  5656                           fsr2l	equ	0xFD9
  5657                           status	equ	0xFD8
  5658                           
  5659 ;; *************** function _LCDout *****************
  5660 ;; Defined at:
  5661 ;;		line 14 in file "LCD.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  number          1    wreg     unsigned char 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  number          1   38[COMRAM] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;		None               void
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5675 ;;      Params:         0       0       0       0
  5676 ;;      Locals:         1       0       0       0
  5677 ;;      Temps:          3       0       0       0
  5678 ;;      Totals:         4       0       0       0
  5679 ;;Total ram usage:        4 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    4
  5682 ;; This function calls:
  5683 ;;		_E_TOG
  5684 ;; This function is called by:
  5685 ;;		_SendLCD
  5686 ;;		_initLCD
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text27
  5691  001022                     __ptext27:
  5692                           	opt stack 0
  5693  001022                     _LCDout:
  5694                           	opt stack 24
  5695                           
  5696                           ;incstack = 0
  5697                           ;LCDout@number stored from wreg
  5698  001022  6E27               	movwf	LCDout@number,c
  5699                           
  5700                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5701  001024  5027               	movf	LCDout@number,w,c
  5702  001026  6E24               	movwf	??_LCDout& (0+255),c
  5703  001028  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5704  00102A  0E07               	movlw	7
  5705  00102C                     u1205:
  5706  00102C  90D8               	bcf	status,0,c
  5707  00102E  3624               	rlcf	??_LCDout,f,c
  5708  001030  3625               	rlcf	??_LCDout+1,f,c
  5709  001032  2EE8               	decfsz	wreg,f,c
  5710  001034  D7FB               	goto	u1205
  5711  001036  0E07               	movlw	7
  5712  001038  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5713  00103A                     u1215:
  5714  00103A  3425               	rlcf	??_LCDout+1,w,c
  5715  00103C  3225               	rrcf	??_LCDout+1,f,c
  5716  00103E  3224               	rrcf	??_LCDout,f,c
  5717  001040  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5718  001042  D7FB               	goto	u1215
  5719  001044  4624               	rlncf	??_LCDout,f,c
  5720  001046  508B               	movf	3979,w,c	;volatile
  5721  001048  1824               	xorwf	??_LCDout,w,c
  5722  00104A  0BFD               	andlw	-3
  5723  00104C  1824               	xorwf	??_LCDout,w,c
  5724  00104E  6E8B               	movwf	3979,c	;volatile
  5725                           
  5726                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5727  001050  5027               	movf	LCDout@number,w,c
  5728  001052  6E24               	movwf	??_LCDout& (0+255),c
  5729  001054  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5730  001056  0E06               	movlw	6
  5731  001058                     u1225:
  5732  001058  90D8               	bcf	status,0,c
  5733  00105A  3624               	rlcf	??_LCDout,f,c
  5734  00105C  3625               	rlcf	??_LCDout+1,f,c
  5735  00105E  2EE8               	decfsz	wreg,f,c
  5736  001060  D7FB               	goto	u1225
  5737  001062  0E07               	movlw	7
  5738  001064  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5739  001066                     u1235:
  5740  001066  3425               	rlcf	??_LCDout+1,w,c
  5741  001068  3225               	rrcf	??_LCDout+1,f,c
  5742  00106A  3224               	rrcf	??_LCDout,f,c
  5743  00106C  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5744  00106E  D7FB               	goto	u1235
  5745  001070  4624               	rlncf	??_LCDout,f,c
  5746  001072  4624               	rlncf	??_LCDout,f,c
  5747  001074  508B               	movf	3979,w,c	;volatile
  5748  001076  1824               	xorwf	??_LCDout,w,c
  5749  001078  0BFB               	andlw	-5
  5750  00107A  1824               	xorwf	??_LCDout,w,c
  5751  00107C  6E8B               	movwf	3979,c	;volatile
  5752                           
  5753                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5754  00107E  5027               	movf	LCDout@number,w,c
  5755  001080  6E24               	movwf	??_LCDout& (0+255),c
  5756  001082  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5757  001084  0E05               	movlw	5
  5758  001086                     u1245:
  5759  001086  90D8               	bcf	status,0,c
  5760  001088  3624               	rlcf	??_LCDout,f,c
  5761  00108A  3625               	rlcf	??_LCDout+1,f,c
  5762  00108C  2EE8               	decfsz	wreg,f,c
  5763  00108E  D7FB               	goto	u1245
  5764  001090  0E07               	movlw	7
  5765  001092  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5766  001094                     u1255:
  5767  001094  3425               	rlcf	??_LCDout+1,w,c
  5768  001096  3225               	rrcf	??_LCDout+1,f,c
  5769  001098  3224               	rrcf	??_LCDout,f,c
  5770  00109A  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5771  00109C  D7FB               	goto	u1255
  5772  00109E  508C               	movf	3980,w,c	;volatile
  5773  0010A0  1824               	xorwf	??_LCDout,w,c
  5774  0010A2  0BFE               	andlw	-2
  5775  0010A4  1824               	xorwf	??_LCDout,w,c
  5776  0010A6  6E8C               	movwf	3980,c	;volatile
  5777                           
  5778                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  5779  0010A8  5027               	movf	LCDout@number,w,c
  5780  0010AA  6E24               	movwf	??_LCDout& (0+255),c
  5781  0010AC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5782  0010AE  3A24               	swapf	??_LCDout,f,c
  5783  0010B0  3A25               	swapf	??_LCDout+1,f,c
  5784  0010B2  0EF0               	movlw	240
  5785  0010B4  1625               	andwf	??_LCDout+1,f,c
  5786  0010B6  5024               	movf	??_LCDout,w,c
  5787  0010B8  0B0F               	andlw	15
  5788  0010BA  1225               	iorwf	??_LCDout+1,f,c
  5789  0010BC  0EF0               	movlw	240
  5790  0010BE  1624               	andwf	??_LCDout,f,c
  5791  0010C0  0E07               	movlw	7
  5792  0010C2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5793  0010C4                     u1265:
  5794  0010C4  3425               	rlcf	??_LCDout+1,w,c
  5795  0010C6  3225               	rrcf	??_LCDout+1,f,c
  5796  0010C8  3224               	rrcf	??_LCDout,f,c
  5797  0010CA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5798  0010CC  D7FB               	goto	u1265
  5799  0010CE  4624               	rlncf	??_LCDout,f,c
  5800  0010D0  508C               	movf	3980,w,c	;volatile
  5801  0010D2  1824               	xorwf	??_LCDout,w,c
  5802  0010D4  0BFD               	andlw	-3
  5803  0010D6  1824               	xorwf	??_LCDout,w,c
  5804  0010D8  6E8C               	movwf	3980,c	;volatile
  5805                           
  5806                           ;LCD.c: 21: E_TOG();
  5807  0010DA  EC83  F00C         	call	_E_TOG	;wreg free
  5808                           
  5809                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5810  0010DE  0E03               	movlw	3
  5811  0010E0                     u3077:
  5812  0010E0  2EE8               	decfsz	wreg,f,c
  5813  0010E2  D7FE               	goto	u3077
  5814  0010E4  F000               	nop	
  5815  0010E6  0012               	return		;funcret
  5816  0010E8                     __end_of_LCDout:
  5817                           	opt stack 0
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           postinc0	equ	0xFEE
  5826                           wreg	equ	0xFE8
  5827                           indf1	equ	0xFE7
  5828                           fsr1h	equ	0xFE2
  5829                           fsr1l	equ	0xFE1
  5830                           indf2	equ	0xFDF
  5831                           postinc2	equ	0xFDE
  5832                           postdec2	equ	0xFDD
  5833                           fsr2h	equ	0xFDA
  5834                           fsr2l	equ	0xFD9
  5835                           status	equ	0xFD8
  5836                           
  5837 ;; *************** function _E_TOG *****************
  5838 ;; Defined at:
  5839 ;;		line 5 in file "LCD.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;		None
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;		None               void
  5846 ;; Registers used:
  5847 ;;		wreg
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5853 ;;      Params:         0       0       0       0
  5854 ;;      Locals:         0       0       0       0
  5855 ;;      Temps:          0       0       0       0
  5856 ;;      Totals:         0       0       0       0
  5857 ;;Total ram usage:        0 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:    3
  5860 ;; This function calls:
  5861 ;;		Nothing
  5862 ;; This function is called by:
  5863 ;;		_LCDout
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text28
  5868  001906                     __ptext28:
  5869                           	opt stack 0
  5870  001906                     _E_TOG:
  5871                           	opt stack 24
  5872                           
  5873                           ;LCD.c: 8: LATCbits.LATC0=1;
  5874                           
  5875                           ;incstack = 0
  5876  001906  808B               	bsf	3979,0,c	;volatile
  5877                           
  5878                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5879  001908  0E03               	movlw	3
  5880  00190A                     u3087:
  5881  00190A  2EE8               	decfsz	wreg,f,c
  5882  00190C  D7FE               	goto	u3087
  5883  00190E  F000               	nop	
  5884                           
  5885                           ;LCD.c: 10: LATCbits.LATC0=0;
  5886  001910  908B               	bcf	3979,0,c	;volatile
  5887  001912  0012               	return		;funcret
  5888  001914                     __end_of_E_TOG:
  5889                           	opt stack 0
  5890                           tblptru	equ	0xFF8
  5891                           tblptrh	equ	0xFF7
  5892                           tblptrl	equ	0xFF6
  5893                           tablat	equ	0xFF5
  5894                           prodh	equ	0xFF4
  5895                           prodl	equ	0xFF3
  5896                           intcon	equ	0xFF2
  5897                           postinc0	equ	0xFEE
  5898                           wreg	equ	0xFE8
  5899                           indf1	equ	0xFE7
  5900                           fsr1h	equ	0xFE2
  5901                           fsr1l	equ	0xFE1
  5902                           indf2	equ	0xFDF
  5903                           postinc2	equ	0xFDE
  5904                           postdec2	equ	0xFDD
  5905                           fsr2h	equ	0xFDA
  5906                           fsr2l	equ	0xFD9
  5907                           status	equ	0xFD8
  5908                           
  5909 ;; *************** function _InterruptHandlerLow *****************
  5910 ;; Defined at:
  5911 ;;		line 18 in file "main.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;		None
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;		None
  5916 ;; Return value:  Size  Location     Type
  5917 ;;		None               void
  5918 ;; Registers used:
  5919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5925 ;;      Params:         0       0       0       0
  5926 ;;      Locals:         0       0       0       0
  5927 ;;      Temps:         17       0       0       0
  5928 ;;      Totals:        17       0       0       0
  5929 ;;Total ram usage:       17 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    2
  5932 ;; This function calls:
  5933 ;;		Nothing
  5934 ;; This function is called by:
  5935 ;;		Interrupt level 1
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	intcodelo
  5940  000018                     __pintcodelo:
  5941                           	opt stack 0
  5942  000018                     _InterruptHandlerLow:
  5943                           	opt stack 23
  5944                           
  5945                           ;incstack = 0
  5946  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5947  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  5948  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  5949  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  5950  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  5951  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  5952  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  5953  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  5954  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  5955  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  5956  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  5957  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  5958  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  5959  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  5960  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  5961  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  5962  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  5963  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  5964                           
  5965                           ;main.c: 20: if (PIR1bits.RCIF) {
  5966  00005E  AA9E               	btfss	3998,5,c	;volatile
  5967  000060  D016               	goto	i1l353
  5968                           
  5969                           ;main.c: 21: ReceivedString[i]=RCREG;
  5970  000062  503A               	movf	_i,w,c	;volatile
  5971  000064  0D01               	mullw	1
  5972  000066  0EBE               	movlw	low _ReceivedString
  5973  000068  24F3               	addwf	prodl,w,c
  5974  00006A  6ED9               	movwf	fsr2l,c
  5975  00006C  0E00               	movlw	high _ReceivedString
  5976  00006E  20F4               	addwfc	prodh,w,c
  5977  000070  6EDA               	movwf	fsr2h,c
  5978  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  5979                           
  5980                           ;main.c: 22: RFID_Read=1;
  5981  000076  0E01               	movlw	1
  5982  000078  0101               	movlb	1	; () banked
  5983  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  5984                           
  5985                           ; BSR set to: 1
  5986                           ;main.c: 23: if (i==15){
  5987  00007C  0E0F               	movlw	15
  5988  00007E  183A               	xorwf	_i,w,c	;volatile
  5989  000080  A4D8               	btfss	status,2,c
  5990  000082  D003               	goto	i1l2541
  5991                           
  5992                           ; BSR set to: 1
  5993                           ;main.c: 24: i=0;
  5994  000084  0E00               	movlw	0
  5995  000086  6E3A               	movwf	_i,c	;volatile
  5996                           
  5997                           ;main.c: 25: }else{
  5998  000088  D001               	goto	i1l2543
  5999  00008A                     i1l2541:
  6000                           
  6001                           ; BSR set to: 1
  6002                           ;main.c: 26: i++;
  6003  00008A  2A3A               	incf	_i,f,c	;volatile
  6004  00008C                     i1l2543:
  6005                           
  6006                           ; BSR set to: 1
  6007                           ;main.c: 27: }
  6008                           ;main.c: 28: PIR1bits.RCIF=0;
  6009  00008C  9A9E               	bcf	3998,5,c	;volatile
  6010  00008E                     i1l353:
  6011  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6012  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6013  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6014  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6015  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6016  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6017  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6018  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6019  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6020  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6021  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6022  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6023  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6024  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6025  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6026  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6027  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6028  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6029  0000D4  0010               	retfie	
  6030  0000D6                     __end_of_InterruptHandlerLow:
  6031                           	opt stack 0
  6032                           pclatu	equ	0xFFB
  6033                           pclath	equ	0xFFA
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           intcon	equ	0xFF2
  6041                           postinc0	equ	0xFEE
  6042                           fsr0h	equ	0xFEA
  6043                           fsr0l	equ	0xFE9
  6044                           wreg	equ	0xFE8
  6045                           indf1	equ	0xFE7
  6046                           fsr1h	equ	0xFE2
  6047                           fsr1l	equ	0xFE1
  6048                           bsr	equ	0xFE0
  6049                           indf2	equ	0xFDF
  6050                           postinc2	equ	0xFDE
  6051                           postdec2	equ	0xFDD
  6052                           fsr2h	equ	0xFDA
  6053                           fsr2l	equ	0xFD9
  6054                           status	equ	0xFD8
  6055                           
  6056 ;; *************** function _InterruptHandlerHigh *****************
  6057 ;; Defined at:
  6058 ;;		line 34 in file "main.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;		None               void
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6072 ;;      Params:         0       0       0       0
  6073 ;;      Locals:         0       0       0       0
  6074 ;;      Temps:         14       0       0       0
  6075 ;;      Totals:        14       0       0       0
  6076 ;;Total ram usage:       14 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    1
  6079 ;; This function calls:
  6080 ;;		i2_delay_tenth_s
  6081 ;; This function is called by:
  6082 ;;		Interrupt level 2
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           	psect	intcode
  6087  000008                     __pintcode:
  6088                           	opt stack 0
  6089  000008                     _InterruptHandlerHigh:
  6090                           	opt stack 23
  6091                           
  6092                           ;incstack = 0
  6093  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6094  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6095  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6096  000012  EF76  F009         	goto	int_func
  6097                           pclatu	equ	0xFFB
  6098                           pclath	equ	0xFFA
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           prodh	equ	0xFF4
  6104                           prodl	equ	0xFF3
  6105                           intcon	equ	0xFF2
  6106                           postinc0	equ	0xFEE
  6107                           fsr0h	equ	0xFEA
  6108                           fsr0l	equ	0xFE9
  6109                           wreg	equ	0xFE8
  6110                           indf1	equ	0xFE7
  6111                           fsr1h	equ	0xFE2
  6112                           fsr1l	equ	0xFE1
  6113                           bsr	equ	0xFE0
  6114                           indf2	equ	0xFDF
  6115                           postinc2	equ	0xFDE
  6116                           postdec2	equ	0xFDD
  6117                           fsr2h	equ	0xFDA
  6118                           fsr2l	equ	0xFD9
  6119                           status	equ	0xFD8
  6120                           
  6121                           	psect	intcode_body
  6122  0012EC                     __pintcode_body:
  6123                           	opt stack 23
  6124  0012EC                     int_func:
  6125                           	opt stack 23
  6126  0012EC  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6127  0012F0  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6128  0012F4  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6129  0012F8  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6130  0012FC  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6131  001300  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6132  001304  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6133  001308  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6134  00130C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6135  001310  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6136  001314  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6137  001318  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6138                           
  6139                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6140  00131C  A2F2               	btfss	intcon,1,c	;volatile
  6141  00131E  D00D               	goto	i2l361
  6142                           
  6143                           ;main.c: 36: if (mode==-1) {
  6144  001320  283B               	incf	_mode,w,c	;volatile
  6145  001322  A4D8               	btfss	status,2,c
  6146  001324  D003               	goto	i2l2551
  6147                           
  6148                           ;main.c: 38: mode=1;
  6149  001326  0E01               	movlw	1
  6150  001328  6E3B               	movwf	_mode,c	;volatile
  6151                           
  6152                           ;main.c: 39: } else if (mode==0) {
  6153  00132A  D003               	goto	i2l2555
  6154  00132C                     i2l2551:
  6155  00132C  503B               	movf	_mode,w,c	;volatile
  6156  00132E  A4D8               	btfss	status,2,c
  6157                           
  6158                           ;main.c: 43: mode=-1;
  6159                           
  6160                           ;main.c: 41: } else {
  6161  001330  683B               	setf	_mode,c	;volatile
  6162  001332                     i2l2555:
  6163                           
  6164                           ;main.c: 44: }
  6165                           ;main.c: 46: delay_tenth_s(2);
  6166  001332  0E02               	movlw	2
  6167  001334  ECB5  F00B         	call	i2_delay_tenth_s
  6168                           
  6169                           ;main.c: 47: INTCONbits.INT0IF=0;
  6170  001338  92F2               	bcf	intcon,1,c	;volatile
  6171  00133A                     i2l361:
  6172  00133A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6173  00133E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6174  001342  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6175  001346  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6176  00134A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6177  00134E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6178  001352  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6179  001356  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6180  00135A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6181  00135E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6182  001362  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6183  001366  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6184  00136A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6185  00136E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6186  001372  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6187  001374  0011               	retfie		f
  6188  001376                     __end_of_InterruptHandlerHigh:
  6189                           	opt stack 0
  6190                           pclatu	equ	0xFFB
  6191                           pclath	equ	0xFFA
  6192                           tblptru	equ	0xFF8
  6193                           tblptrh	equ	0xFF7
  6194                           tblptrl	equ	0xFF6
  6195                           tablat	equ	0xFF5
  6196                           prodh	equ	0xFF4
  6197                           prodl	equ	0xFF3
  6198                           intcon	equ	0xFF2
  6199                           postinc0	equ	0xFEE
  6200                           fsr0h	equ	0xFEA
  6201                           fsr0l	equ	0xFE9
  6202                           wreg	equ	0xFE8
  6203                           indf1	equ	0xFE7
  6204                           fsr1h	equ	0xFE2
  6205                           fsr1l	equ	0xFE1
  6206                           bsr	equ	0xFE0
  6207                           indf2	equ	0xFDF
  6208                           postinc2	equ	0xFDE
  6209                           postdec2	equ	0xFDD
  6210                           fsr2h	equ	0xFDA
  6211                           fsr2l	equ	0xFD9
  6212                           status	equ	0xFD8
  6213                           
  6214 ;; *************** function i2_delay_tenth_s *****************
  6215 ;; Defined at:
  6216 ;;		line 21 in file "Movement.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  tenth_second    1    wreg     unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6221 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;		None               void
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6231 ;;      Params:         0       0       0       0
  6232 ;;      Locals:         3       0       0       0
  6233 ;;      Temps:          1       0       0       0
  6234 ;;      Totals:         4       0       0       0
  6235 ;;Total ram usage:        4 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_InterruptHandlerHigh
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           	psect	text31
  6245  00176A                     __ptext31:
  6246                           	opt stack 0
  6247  00176A                     i2_delay_tenth_s:
  6248                           	opt stack 23
  6249                           
  6250                           ;incstack = 0
  6251                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6252  00176A  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6253                           
  6254                           ;Movement.c: 22: unsigned int i=0;
  6255  00176C  0E00               	movlw	0
  6256  00176E  6E04               	movwf	i2delay_tenth_s@i+1,c
  6257  001770  0E00               	movlw	0
  6258  001772  6E03               	movwf	i2delay_tenth_s@i,c
  6259                           
  6260                           ;Movement.c: 23: for (i=1; i<=tenth_seconds*2; i++) {
  6261  001774  0E00               	movlw	0
  6262  001776  6E04               	movwf	i2delay_tenth_s@i+1,c
  6263  001778  0E01               	movlw	1
  6264  00177A  6E03               	movwf	i2delay_tenth_s@i,c
  6265  00177C  D009               	goto	i2l2513
  6266  00177E                     i2l2509:
  6267                           
  6268                           ;Movement.c: 25: _delay((unsigned long)((50)*(8000000/4000.0)));
  6269  00177E  0E82               	movlw	130
  6270  001780  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6271  001782  0EDE               	movlw	222
  6272  001784                     i2u309_47:
  6273  001784  2EE8               	decfsz	wreg,f,c
  6274  001786  D7FE               	goto	i2u309_47
  6275  001788  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6276  00178A  D7FC               	goto	i2u309_47
  6277  00178C  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6278  00178E  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6279  001790                     i2l2513:
  6280  001790  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6281  001792  0D02               	mullw	2
  6282  001794  5003               	movf	i2delay_tenth_s@i,w,c
  6283  001796  5CF3               	subwf	prodl,w,c
  6284  001798  5004               	movf	i2delay_tenth_s@i+1,w,c
  6285  00179A  58F4               	subwfb	prodh,w,c
  6286  00179C  A0D8               	btfss	status,0,c
  6287  00179E  0012               	return	
  6288  0017A0  D7EE               	goto	i2l2509
  6289  0017A2                     __end_ofi2_delay_tenth_s:
  6290                           	opt stack 0
  6291                           pclatu	equ	0xFFB
  6292                           pclath	equ	0xFFA
  6293                           tblptru	equ	0xFF8
  6294                           tblptrh	equ	0xFF7
  6295                           tblptrl	equ	0xFF6
  6296                           tablat	equ	0xFF5
  6297                           prodh	equ	0xFF4
  6298                           prodl	equ	0xFF3
  6299                           intcon	equ	0xFF2
  6300                           postinc0	equ	0xFEE
  6301                           fsr0h	equ	0xFEA
  6302                           fsr0l	equ	0xFE9
  6303                           wreg	equ	0xFE8
  6304                           indf1	equ	0xFE7
  6305                           fsr1h	equ	0xFE2
  6306                           fsr1l	equ	0xFE1
  6307                           bsr	equ	0xFE0
  6308                           indf2	equ	0xFDF
  6309                           postinc2	equ	0xFDE
  6310                           postdec2	equ	0xFDD
  6311                           fsr2h	equ	0xFDA
  6312                           fsr2l	equ	0xFD9
  6313                           status	equ	0xFD8
  6314                           pclatu	equ	0xFFB
  6315                           pclath	equ	0xFFA
  6316                           tblptru	equ	0xFF8
  6317                           tblptrh	equ	0xFF7
  6318                           tblptrl	equ	0xFF6
  6319                           tablat	equ	0xFF5
  6320                           prodh	equ	0xFF4
  6321                           prodl	equ	0xFF3
  6322                           intcon	equ	0xFF2
  6323                           postinc0	equ	0xFEE
  6324                           fsr0h	equ	0xFEA
  6325                           fsr0l	equ	0xFE9
  6326                           wreg	equ	0xFE8
  6327                           indf1	equ	0xFE7
  6328                           fsr1h	equ	0xFE2
  6329                           fsr1l	equ	0xFE1
  6330                           bsr	equ	0xFE0
  6331                           indf2	equ	0xFDF
  6332                           postinc2	equ	0xFDE
  6333                           postdec2	equ	0xFDD
  6334                           fsr2h	equ	0xFDA
  6335                           fsr2l	equ	0xFD9
  6336                           status	equ	0xFD8
  6337                           
  6338                           	psect	rparam
  6339  0000                     pclatu	equ	0xFFB
  6340                           pclath	equ	0xFFA
  6341                           tblptru	equ	0xFF8
  6342                           tblptrh	equ	0xFF7
  6343                           tblptrl	equ	0xFF6
  6344                           tablat	equ	0xFF5
  6345                           prodh	equ	0xFF4
  6346                           prodl	equ	0xFF3
  6347                           intcon	equ	0xFF2
  6348                           postinc0	equ	0xFEE
  6349                           fsr0h	equ	0xFEA
  6350                           fsr0l	equ	0xFE9
  6351                           wreg	equ	0xFE8
  6352                           indf1	equ	0xFE7
  6353                           fsr1h	equ	0xFE2
  6354                           fsr1l	equ	0xFE1
  6355                           bsr	equ	0xFE0
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363                           	psect	temp
  6364  00003C                     btemp:
  6365                           	opt stack 0
  6366  00003C                     	ds	1
  6367  0000                     int$flags	set	btemp
  6368                           pclatu	equ	0xFFB
  6369                           pclath	equ	0xFFA
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           postinc0	equ	0xFEE
  6378                           fsr0h	equ	0xFEA
  6379                           fsr0l	equ	0xFE9
  6380                           wreg	equ	0xFE8
  6381                           indf1	equ	0xFE7
  6382                           fsr1h	equ	0xFE2
  6383                           fsr1l	equ	0xFE1
  6384                           bsr	equ	0xFE0
  6385                           indf2	equ	0xFDF
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     86     110
    BANK1           256    250     255
    BANK2           256     18      18

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), main@Message(BANK1[10]), STR_7(CODE[10]), main@buf(BANK1[40]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               278   278      0   64551
                                             76 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2     18    18      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       63    55      8   29605
                                             13 BANK0     63    55      8
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    8570
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    8570
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11715
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4030
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1671
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     12      12       9        7.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     56      6E       5       68.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BA       3        0.0%
DATA                 0      0     1BA      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 16:04:16 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0ECA  
                                  l65 1454                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l216 0D62                                   l366 03F8  
                                 l854 16A8                                   l864 16EA  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        main@MoveType 0164                                  l2103 1492  
                                l2115 14FC                                  l2043 18E2  
                                l2141 1560                                  l2133 17E8  
                                l2125 1540                                  l2109 14CE  
                                l2053 1676                                  l3005 100A  
                                l2119 1504                                  l2055 167E  
                                l2151 1746                                  l3023 0BDE  
                                l2137 17FA                                  l2065 169E  
                                l2057 1682                                  l2081 16E0  
                                l2073 16C0                                  l2147 1594  
                                l2075 16C8                                  l2155 1758  
                                l2077 16CC                                  l3061 0CEE  
                                l3221 058A                                  l3205 0510  
                                l2503 1254                                  l3231 0622  
                                l3303 0836                                  l3073 0D1E  
                                l3065 0CFE                                  l3057 0CD4  
                                l2099 148A                                  l3067 0D02  
                                l3235 0630                                  l3227 05D4  
                                l3155 03FE                                  l3093 0D9C  
                                l3085 0D86                                  l3261 06FE  
                                l3253 06B8                                  l3095 0DA2  
                                l3271 0724                                  l3239 0646  
                                l2801 125A                                  l2297 1872  
                                l3265 0708                                  l3249 06AE  
                                l3273 072A                                  l3281 0792  
                                l2491 11FC                                  l3291 07F0  
                                l3259 06F8                                  l2805 1272  
                                l3293 07F6                                  l3189 04C0  
                                l2815 12AA                                  l2831 1434  
                                l2823 13FC                                  l2495 1204  
                                l2913 09F4                                  l2761 139A  
                                l2809 128A                                  l2907 09D2  
                                l2771 13BC                                  l2755 138A  
                                l2827 1418                                  l2917 0A2C  
                                l2861 0894                                  l2853 0866  
                                l2951 0AD4                                  l2943 0AB0  
                                l2927 0A5A                                  l2935 0A80  
                                l2919 0A36                                  l2871 08CC  
                                l2767 13B0                                  l2783 13E2  
                                l2937 0A8C                                  l2961 0B50  
                                l2881 093E                                  l2865 089C  
                                l2769 13B8                                  l2883 0966  
                                l2859 0882                                  l2787 13F0  
                                l2779 13D8                                  l2957 0B2A  
                                l2949 0ACE                                  l2893 0996  
                                l2797 0EA2                                  l2895 099C  
                                l2959 0B36                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1205 102C  
                                u1215 103A                                  u1225 1058  
                                u1235 1066                                  u1245 1086  
                                _LATB 000F8A                                  u1255 1094  
                                u3007 12A4                                  u1520 1584  
                                u2224 0E62                                  u1265 10C4  
                                u3017 14C2                                  u2225 0E5E  
                                u1530 15B4                                  u2234 0EBE  
                                u1355 180E                                  u3027 1534  
                                u2235 0EBA                                  u1356 1810  
                                u3037 17FC                                  u2245 0F18  
                                u3047 158E                                  u1527 157A  
                                u1455 149A                                  u3057 181C  
                                u1537 15AA                                  u3067 182C  
                                u3077 10E0                                  u1485 150C  
                                u3087 190A                                  u2720 0678  
                                u2730 068C                                  u2722 067A  
                                u2732 068E                                  u1765 186E  
                                u1766 1870                                  u2807 0454  
                                u1785 1880                                  u2817 046C  
                                u1786 1882                                  u2907 118A  
                                u2827 10FA                                  u2917 119C  
                                u2837 1110                                  u2927 0C12  
                                u2847 1120                                  u2937 0C2A  
                                u2857 112E                                  u2947 0C9E  
                                u2867 113C                                  u2957 0D40  
                                u2877 114E                                  u2967 144E  
                                u2887 1160                                  u2977 174C  
                                u2897 1176                                  u2987 0F76  
                                u2997 0F8C                            ScanIR@Move 0071  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 00AE                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1258                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 176A  
                     __end_of_SendLCD 1834                       __end_of_SetLine 1804  
                  ScanWithRange@F3889 00BA                           ScanIR@F3879 00B6  
                               ?_main 0001                       __end_of___awdiv 13FA  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 16B2                                 i1l353 008E  
                     __end_of___lwmod 16F4                                 i2l361 133A  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 1906                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 11A4                       __end_of_dpowers 030B  
                     __end_of_isdigit 18EA                                 main@i 00B5  
                               tablat 000FF5                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 0B5E  
              __size_of_ScanWithRange 0290                       __initialization 1834  
                        __end_of_main 0858                          __end_of_stop 12EC  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 009F  
                __end_of_enableSensor 1884                   VerifySignal@hexByte 002D  
                              ??_main 00AC                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2541 008A                                i1l2543 008C  
                              i2l2513 1790                                i2l2509 177E  
                      __CFG_WDTEN$OFF 000000                                i2l2551 132C  
                              i2l2555 1332                 __end_of_delay_tenth_s 176A  
                              _LCDout 1022                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 17A2                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 0F28  
                           ??_SetLine 002A                                ___wmul 1884  
                           ??___awdiv 002E                      __end_of_initRFID 1906  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 18AA                  __size_of_grabRightIR 0072  
                              clear_0 1846                      ___awdiv@quotient 0030  
                              main@mL 0200                                main@mR 0209  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0B5E                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 009F                      __end_of_turnLeft 1660  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1850  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1914                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 16F4                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002C  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 136E  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00B6  
                          __pbssBANK1 01FA                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __end_of_LCD_String 15BC  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 14EC  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 185E  
                  __size_of_turnRight 0052                  __end_of_initMotorPWM 17D4  
                             _SendLCD 1804                               __Hparam 0000  
                             _SetLine 17D4                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 1376  
                     __size_of___wmul 0026                               ___lwdiv 1660  
                             ___lwmod 16B2                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1834  
                     ??_ScanWithRange 0075                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 18EA                               __ptext2 17A2  
                             __ptext3 10E8                               __ptext4 18AA  
                             __ptext5 16F4                               __ptext6 185E  
                             __ptext7 11A4                               __ptext8 0B5E  
                             __ptext9 15BC                               _initLCD 10E8  
                             _dpowers 0301                               _isdigit 18CC  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0858  
                      __pintcode_body 12EC                  end_of_initialization 1850  
                      ScanWithRange@i 00A0                        ScanWithRange@n 00A2  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 12EC  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 160E                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00AB                        __end_of_LCDout 10E8  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 1022                        _fullSpeedAhead 13FA  
                      _ReceivedString 00BE                        __end_of___wmul 18AA  
                         _BAUDCONbits 000FAA                        __end_of_initIR 18CC  
              __size_of_delay_tenth_s 0038                   start_initialization 1834  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1376  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 147A  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 14EC  
                        _initMotorPWM 17A2                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1874 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1732  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 1258                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00AF  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 0052  
                       ??_setMotorPWM 0034                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u309_47 1784  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3894 01FA                           _grabRightIR 147A  
               ScanWithRange@LeftFlag 00AA                  grabRightIR@IR_signal 0029  
           ScanWithRange@milliseconds 0071                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 0DEE                          setMotorPWM@m 0032  
                _InterruptHandlerHigh 0008                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                           _turnRight 15BC                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 0077  
                 __end_of_setMotorPWM 0F28                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1732                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 155E                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 160E  
                            __ptext11 13FA                              __ptext20 16B2  
                            __ptext12 1732                              __ptext21 1660  
                            __ptext13 0F28                              __ptext22 147A  
                            __ptext14 1258                              __ptext31 176A  
                            __ptext23 14EC                              __ptext15 0DEE  
                            __ptext24 17D4                              __ptext16 1376  
                            __ptext25 155E                              __ptext17 0858  
                            __ptext26 1804                              __ptext18 18CC  
                            __ptext27 1022                              __ptext19 1884  
                            __ptext28 1906                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                              _initRFID 18EA  
           ScanWithRange@SensorResult 00A6                        turnRight@power 006B  
                       __size_of_main 0508                    main@DirectionFound 00B3  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 00B4                              int$flags 003C  
                            main@Move 00B4                   _InterruptHandlerLow 0018  
                          _LCD_String 155E                              _turnLeft 160E  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002F                            _INTCONbits 000FF2  
                            isdigit@c 0026                           _setMotorPWM 0DEE  
                        _VerifySignal 11A4                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A4                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
