

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 18:54:47 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISEbits	set	3990
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  00188A                     __pcinit:
   189                           	opt stack 0
   190  00188A                     start_initialization:
   191                           	opt stack 0
   192  00188A                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (5 bytes)
   196  00188A  0101               	movlb	1
   197  00188C  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   198  00188E  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   199  001890  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   200  001892  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   201  001894  6BFA               	clrf	__pbssBANK1& (0+255),b
   202                           
   203                           ; Clear objects allocated to BANK0 (24 bytes)
   204  001896  EE00  F0BC         	lfsr	0,__pbssBANK0
   205  00189A  0E18               	movlw	24
   206  00189C                     clear_0:
   207  00189C  6AEE               	clrf	postinc0,c
   208  00189E  06E8               	decf	wreg,f,c
   209  0018A0  E1FD               	bnz	clear_0
   210                           
   211                           ; Clear objects allocated to COMRAM (2 bytes)
   212  0018A2  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  0018A4  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   214  0018A6                     end_of_initialization:
   215                           	opt stack 0
   216  0018A6                     __end_of__initialization:
   217                           	opt stack 0
   218  0018A6  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   219  0018A8  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   220  0018AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   221  0018AC  6EF8               	movwf	tblptru,c
   222  0018AE  0100               	movlb	0
   223  0018B0  EFA8  F001         	goto	_main	;jump to C main() function
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssCOMRAM
   229  00003A                     __pbssCOMRAM:
   230                           	opt stack 0
   231  00003A                     _i:
   232                           	opt stack 0
   233  00003A                     	ds	1
   234  00003B                     _mode:
   235                           	opt stack 0
   236  00003B                     	ds	1
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           
   241                           	psect	bssBANK0
   242  0000BC                     __pbssBANK0:
   243                           	opt stack 0
   244  0000BC                     ScanIR@F3882:
   245                           	opt stack 0
   246  0000BC                     	ds	4
   247  0000C0                     ScanWithRange@F3892:
   248                           	opt stack 0
   249  0000C0                     	ds	4
   250  0000C4                     _ReceivedString:
   251                           	opt stack 0
   252  0000C4                     	ds	16
   253                           tblptru	equ	0xFF8
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	bssBANK1
   258  0001FA                     __pbssBANK1:
   259                           	opt stack 0
   260  0001FA                     main@F3896:
   261                           	opt stack 0
   262  0001FA                     	ds	4
   263  0001FE                     _RFID_Read:
   264                           	opt stack 0
   265  0001FE                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           postinc0	equ	0xFEE
   268                           wreg	equ	0xFE8
   269                           
   270                           	psect	cstackBANK2
   271  000200                     __pcstackBANK2:
   272                           	opt stack 0
   273  000200                     main@MoveType:
   274                           	opt stack 0
   275                           
   276                           ; 100 bytes @ 0x0
   277  000200                     	ds	100
   278  000264                     main@mL:
   279                           	opt stack 0
   280                           
   281                           ; 9 bytes @ 0x64
   282  000264                     	ds	9
   283  00026D                     main@mR:
   284                           	opt stack 0
   285                           
   286                           ; 9 bytes @ 0x6D
   287  00026D                     	ds	9
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     main@MoveTime:
   296                           	opt stack 0
   297                           
   298                           ; 200 bytes @ 0x0
   299  000100                     	ds	200
   300  0001C8                     main@buf:
   301                           	opt stack 0
   302                           
   303                           ; 40 bytes @ 0xC8
   304  0001C8                     	ds	40
   305  0001F0                     main@Message:
   306                           	opt stack 0
   307                           
   308                           ; 10 bytes @ 0xF0
   309  0001F0                     	ds	10
   310                           tblptru	equ	0xFF8
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	cstackBANK0
   315  000060                     __pcstackBANK0:
   316                           	opt stack 0
   317  000060                     ??_sprintf:
   318  000060                     setMotorPWM@PWMduty:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x0
   322  000060                     	ds	2
   323  000062                     stop@mL:
   324                           	opt stack 0
   325  000062                     fullSpeedAhead@mL:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329  000062                     	ds	2
   330  000064                     stop@mR:
   331                           	opt stack 0
   332  000064                     fullSpeedAhead@mR:
   333                           	opt stack 0
   334  000064                     sprintf@ap:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000064                     	ds	2
   339  000066                     fullSpeedAhead@power:
   340                           	opt stack 0
   341  000066                     sprintf@prec:
   342                           	opt stack 0
   343                           
   344                           ; 1 bytes @ 0x6
   345  000066                     	ds	1
   346  000067                     turnLeft@mL:
   347                           	opt stack 0
   348  000067                     turnRight@mL:
   349                           	opt stack 0
   350  000067                     fullSpeedBack@mL:
   351                           	opt stack 0
   352  000067                     sprintf@val:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x7
   356  000067                     	ds	2
   357  000069                     sprintf@flag:
   358                           	opt stack 0
   359  000069                     turnLeft@mR:
   360                           	opt stack 0
   361  000069                     turnRight@mR:
   362                           	opt stack 0
   363  000069                     fullSpeedBack@mR:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x9
   367  000069                     	ds	1
   368  00006A                     sprintf@width:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0xA
   372  00006A                     	ds	1
   373  00006B                     turnLeft@power:
   374                           	opt stack 0
   375  00006B                     turnRight@power:
   376                           	opt stack 0
   377  00006B                     fullSpeedBack@power:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xB
   381  00006B                     	ds	1
   382  00006C                     sprintf@c:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  00006C                     	ds	1
   387  00006D                     ScanIR@mL:
   388                           	opt stack 0
   389  00006D                     ScanWithRange@mL:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0xD
   393  00006D                     	ds	2
   394  00006F                     ScanIR@mR:
   395                           	opt stack 0
   396  00006F                     ScanWithRange@mR:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0xF
   400  00006F                     	ds	2
   401  000071                     ScanIR@Move:
   402                           	opt stack 0
   403  000071                     ScanWithRange@milliseconds:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x11
   407  000071                     	ds	2
   408  000073                     ScanIR@MoveTime:
   409                           	opt stack 0
   410  000073                     ScanWithRange@MoveTimeEntry:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x13
   414  000073                     	ds	2
   415  000075                     ??_ScanWithRange:
   416  000075                     ScanIR@MoveType:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x15
   420  000075                     	ds	2
   421  000077                     ScanIR@buf:
   422                           	opt stack 0
   423                           
   424                           ; 40 bytes @ 0x17
   425  000077                     	ds	3
   426  00007A                     ScanWithRange@buf:
   427                           	opt stack 0
   428                           
   429                           ; 40 bytes @ 0x1A
   430  00007A                     	ds	37
   431  00009F                     ScanIR@DirectionMoveThreshold:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x3F
   435  00009F                     	ds	2
   436  0000A1                     ScanIR@SensorResult:
   437                           	opt stack 0
   438                           
   439                           ; 4 bytes @ 0x41
   440  0000A1                     	ds	1
   441  0000A2                     ScanWithRange@n:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x42
   445  0000A2                     	ds	2
   446  0000A4                     ScanWithRange@TimeAboveThreshold:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x44
   450  0000A4                     	ds	1
   451  0000A5                     ScanWithRange@i:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x45
   455  0000A5                     	ds	2
   456  0000A7                     ScanWithRange@DirectionFoundThreshold:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x47
   460  0000A7                     	ds	2
   461  0000A9                     ScanWithRange@power:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x49
   465  0000A9                     	ds	1
   466  0000AA                     ScanWithRange@SensorResult:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x4A
   470  0000AA                     	ds	4
   471  0000AE                     ScanWithRange@LeftFlag:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x4E
   475  0000AE                     	ds	2
   476  0000B0                     ScanWithRange@RightFlag:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x50
   480  0000B0                     	ds	2
   481  0000B2                     ??_main:
   482                           
   483                           ; 0 bytes @ 0x52
   484  0000B2                     	ds	2
   485  0000B4                     main@ScanAngle:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x54
   489  0000B4                     	ds	1
   490  0000B5                     main@SensorResult:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0x55
   494  0000B5                     	ds	4
   495  0000B9                     main@DirectionFound:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x59
   499  0000B9                     	ds	1
   500  0000BA                     main@Move:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x5A
   504  0000BA                     	ds	1
   505  0000BB                     main@i:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x5B
   509  0000BB                     	ds	1
   510                           tblptru	equ	0xFF8
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           
   514                           	psect	cstackCOMRAM
   515  000001                     __pcstackCOMRAM:
   516                           	opt stack 0
   517  000001                     ??i2_delay_tenth_s:
   518                           
   519                           ; 0 bytes @ 0x0
   520  000001                     	ds	1
   521  000002                     i2delay_tenth_s@tenth_seconds:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x1
   525  000002                     	ds	1
   526  000003                     i2delay_tenth_s@i:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x2
   530  000003                     	ds	2
   531  000005                     ??_InterruptHandlerHigh:
   532                           
   533                           ; 0 bytes @ 0x4
   534  000005                     	ds	14
   535  000013                     ??_InterruptHandlerLow:
   536                           
   537                           ; 0 bytes @ 0x12
   538  000013                     	ds	17
   539  000024                     ??_isdigit:
   540  000024                     ??_LCDout:
   541  000024                     ??_delay_tenth_s:
   542  000024                     ?_grabRightIR:
   543                           	opt stack 0
   544  000024                     ?_grabLeftIR:
   545                           	opt stack 0
   546  000024                     ?___wmul:
   547                           	opt stack 0
   548  000024                     ?___lwdiv:
   549                           	opt stack 0
   550  000024                     enableSensor@status:
   551                           	opt stack 0
   552  000024                     VerifySignal@Signal:
   553                           	opt stack 0
   554  000024                     ___wmul@multiplier:
   555                           	opt stack 0
   556  000024                     ___lwdiv@dividend:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x23
   560  000024                     	ds	1
   561  000025                     enableSensor@sensor:
   562                           	opt stack 0
   563  000025                     delay_tenth_s@tenth_seconds:
   564                           	opt stack 0
   565  000025                     _isdigit$1961:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x24
   569  000025                     	ds	1
   570  000026                     ??_grabRightIR:
   571  000026                     ??_grabLeftIR:
   572  000026                     ??_VerifySignal:
   573  000026                     isdigit@c:
   574                           	opt stack 0
   575  000026                     delay_tenth_s@i:
   576                           	opt stack 0
   577  000026                     ___wmul@multiplicand:
   578                           	opt stack 0
   579  000026                     ___lwdiv@divisor:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x25
   583  000026                     	ds	1
   584  000027                     LCDout@number:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x26
   588  000027                     	ds	1
   589  000028                     SendLCD@type:
   590                           	opt stack 0
   591  000028                     ___wmul@product:
   592                           	opt stack 0
   593  000028                     ___lwdiv@quotient:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x27
   597  000028                     	ds	1
   598  000029                     SendLCD@Byte:
   599                           	opt stack 0
   600  000029                     grabRightIR@IR_signal:
   601                           	opt stack 0
   602  000029                     grabLeftIR@IR_signal:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x28
   606  000029                     	ds	1
   607  00002A                     ??_initLCD:
   608  00002A                     ?___awdiv:
   609                           	opt stack 0
   610  00002A                     SetLine@line:
   611                           	opt stack 0
   612  00002A                     ___lwdiv@counter:
   613                           	opt stack 0
   614  00002A                     LCD_String@string:
   615                           	opt stack 0
   616  00002A                     ___awdiv@dividend:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x29
   620  00002A                     	ds	1
   621  00002B                     ?___lwmod:
   622                           	opt stack 0
   623  00002B                     grabRightIR@i:
   624                           	opt stack 0
   625  00002B                     grabLeftIR@i:
   626                           	opt stack 0
   627  00002B                     ___lwmod@dividend:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x2A
   631  00002B                     	ds	1
   632  00002C                     VerifySignal@checksum:
   633                           	opt stack 0
   634  00002C                     ___awdiv@divisor:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2B
   638  00002C                     	ds	1
   639  00002D                     VerifySignal@hexByte:
   640                           	opt stack 0
   641  00002D                     ___lwmod@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2C
   645  00002D                     	ds	1
   646  00002E                     ___awdiv@counter:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x2D
   650  00002E                     	ds	1
   651  00002F                     VerifySignal@i:
   652                           	opt stack 0
   653  00002F                     ___awdiv@sign:
   654                           	opt stack 0
   655  00002F                     ___lwmod@counter:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x2E
   659  00002F                     	ds	1
   660  000030                     ?_sprintf:
   661                           	opt stack 0
   662  000030                     sprintf@sp:
   663                           	opt stack 0
   664  000030                     ___awdiv@quotient:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x2F
   668  000030                     	ds	2
   669  000032                     setMotorPWM@m:
   670                           	opt stack 0
   671  000032                     sprintf@f:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x31
   675  000032                     	ds	2
   676  000034                     ??_setMotorPWM:
   677                           
   678                           ; 0 bytes @ 0x33
   679  000034                     	ds	5
   680  000039                     ??_ScanIR:
   681                           
   682                           ; 0 bytes @ 0x38
   683  000039                     	ds	1
   684  00003A                     tblptru	equ	0xFF8
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           
   688                           ; 0 bytes @ 0x39
   689 ;;
   690 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   691 ;;
   692 ;; *************** function _main *****************
   693 ;; Defined at:
   694 ;;		line 51 in file "main.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  MoveTime      200    0[BANK1 ] int [100]
   699 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   700 ;;  buf            40  200[BANK1 ] unsigned char [40]
   701 ;;  Message        10  240[BANK1 ] unsigned char [10]
   702 ;;  mR              9  109[BANK2 ] struct DC_motor
   703 ;;  mL              9  100[BANK2 ] struct DC_motor
   704 ;;  SensorResult    4   85[BANK0 ] unsigned int [2]
   705 ;;  i               1   91[BANK0 ] unsigned char 
   706 ;;  Move            1   90[BANK0 ] unsigned char 
   707 ;;  DirectionFou    1   89[BANK0 ] char 
   708 ;;  ScanAngle       1   84[BANK0 ] unsigned char 
   709 ;; Return value:  Size  Location     Type
   710 ;;		None               void
   711 ;; Registers used:
   712 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   718 ;;      Params:         0       0       0       0
   719 ;;      Locals:         0       8     250     118
   720 ;;      Temps:          0       2       0       0
   721 ;;      Totals:         0      10     250     118
   722 ;;Total ram usage:      378 bytes
   723 ;; Hardware stack levels required when called:    8
   724 ;; This function calls:
   725 ;;		_LCD_String
   726 ;;		_ScanIR
   727 ;;		_ScanWithRange
   728 ;;		_SendLCD
   729 ;;		_SetLine
   730 ;;		_VerifySignal
   731 ;;		_delay_tenth_s
   732 ;;		_enableSensor
   733 ;;		_fullSpeedAhead
   734 ;;		_fullSpeedBack
   735 ;;		_grabLeftIR
   736 ;;		_grabRightIR
   737 ;;		_initIR
   738 ;;		_initLCD
   739 ;;		_initMotorPWM
   740 ;;		_initRFID
   741 ;;		_initTimer
   742 ;;		_sprintf
   743 ;;		_stop
   744 ;; This function is called by:
   745 ;;		Startup code after reset
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text0
   750  000350                     __ptext0:
   751                           	opt stack 0
   752  000350                     _main:
   753                           	opt stack 23
   754                           
   755                           ;main.c: 54: unsigned char Message[10];
   756                           ;main.c: 55: unsigned char i=0;
   757                           
   758                           ;incstack = 0
   759  000350  0E00               	movlw	0
   760  000352  0100               	movlb	0	; () banked
   761  000354  6FBB               	movwf	main@i& (0+255),b
   762                           
   763                           ;main.c: 56: signed char DirectionFound=0;
   764  000356  0E00               	movlw	0
   765  000358  0100               	movlb	0	; () banked
   766  00035A  6FB9               	movwf	main@DirectionFound& (0+255),b
   767                           
   768                           ;main.c: 57: int MoveTime[100];
   769                           ;main.c: 58: char MoveType[100];
   770                           ;main.c: 59: char Move=0;
   771  00035C  0E00               	movlw	0
   772  00035E  0100               	movlb	0	; () banked
   773  000360  6FBA               	movwf	main@Move& (0+255),b
   774                           
   775                           ; BSR set to: 0
   776                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   777  000362  C1FA  F0B5         	movff	main@F3896,main@SensorResult
   778  000366  C1FB  F0B6         	movff	main@F3896+1,main@SensorResult+1
   779  00036A  C1FC  F0B7         	movff	main@F3896+2,main@SensorResult+2
   780  00036E  C1FD  F0B8         	movff	main@F3896+3,main@SensorResult+3
   781                           
   782                           ;main.c: 61: char buf[40];
   783                           ;main.c: 63: unsigned char ScanAngle=60;
   784  000372  0E3C               	movlw	60
   785  000374  0100               	movlb	0	; () banked
   786  000376  6FB4               	movwf	main@ScanAngle& (0+255),b
   787                           
   788                           ; BSR set to: 0
   789                           ;main.c: 66: INTCONbits.GIEH=1;
   790  000378  8EF2               	bsf	intcon,7,c	;volatile
   791                           
   792                           ; BSR set to: 0
   793                           ;main.c: 67: INTCONbits.GIEL=1;
   794  00037A  8CF2               	bsf	intcon,6,c	;volatile
   795                           
   796                           ; BSR set to: 0
   797                           ;main.c: 68: INTCONbits.PEIE=1;
   798  00037C  8CF2               	bsf	intcon,6,c	;volatile
   799                           
   800                           ; BSR set to: 0
   801                           ;main.c: 69: RCONbits.IPEN=1;
   802  00037E  8ED0               	bsf	4048,7,c	;volatile
   803                           
   804                           ; BSR set to: 0
   805                           ;main.c: 72: IPR1bits.RCIP=0;
   806  000380  9A9F               	bcf	3999,5,c	;volatile
   807                           
   808                           ; BSR set to: 0
   809                           ;main.c: 73: PIE1bits.RCIE=1;
   810  000382  8A9D               	bsf	3997,5,c	;volatile
   811                           
   812                           ; BSR set to: 0
   813                           ;main.c: 76: TRISCbits.RC3=1;
   814  000384  8694               	bsf	3988,3,c	;volatile
   815                           
   816                           ; BSR set to: 0
   817                           ;main.c: 77: INTCONbits.INT0IE=1;
   818  000386  88F2               	bsf	intcon,4,c	;volatile
   819                           
   820                           ; BSR set to: 0
   821                           ;main.c: 80: PIR1bits.RC1IF=0;
   822  000388  9A9E               	bcf	3998,5,c	;volatile
   823                           
   824                           ; BSR set to: 0
   825                           ;main.c: 81: INTCONbits.INT0IF=0;
   826  00038A  92F2               	bcf	intcon,1,c	;volatile
   827                           
   828                           ;main.c: 84: struct DC_motor mL, mR;
   829                           ;main.c: 85: mL.power=0;
   830  00038C  0E00               	movlw	0
   831  00038E  0102               	movlb	2	; () banked
   832  000390  6F64               	movwf	main@mL& (0+255),b
   833                           
   834                           ;main.c: 86: mL.direction=1;
   835  000392  0E01               	movlw	1
   836  000394  0102               	movlb	2	; () banked
   837  000396  6F65               	movwf	(main@mL+1)& (0+255),b
   838                           
   839                           ; BSR set to: 2
   840                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   841  000398  0E79               	movlw	121
   842  00039A  0102               	movlb	2	; () banked
   843  00039C  6F66               	movwf	(main@mL+2)& (0+255),b
   844  00039E  0E0F               	movlw	15
   845  0003A0  0102               	movlb	2	; () banked
   846  0003A2  6F67               	movwf	(main@mL+3)& (0+255),b
   847                           
   848                           ; BSR set to: 2
   849                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   850  0003A4  0E78               	movlw	120
   851  0003A6  0102               	movlb	2	; () banked
   852  0003A8  6F68               	movwf	(main@mL+4)& (0+255),b
   853  0003AA  0E0F               	movlw	15
   854  0003AC  0102               	movlb	2	; () banked
   855  0003AE  6F69               	movwf	(main@mL+5)& (0+255),b
   856                           
   857                           ;main.c: 89: mL.dir_pin=0;
   858  0003B0  0E00               	movlw	0
   859  0003B2  0102               	movlb	2	; () banked
   860  0003B4  6F6A               	movwf	(main@mL+6)& (0+255),b
   861                           
   862                           ;main.c: 90: mL.PWMperiod=199;
   863  0003B6  0E00               	movlw	0
   864  0003B8  0102               	movlb	2	; () banked
   865  0003BA  6F6C               	movwf	(main@mL+8)& (0+255),b
   866  0003BC  0EC7               	movlw	199
   867  0003BE  6F6B               	movwf	(main@mL+7)& (0+255),b
   868                           
   869                           ;main.c: 92: mR.power=0;
   870  0003C0  0E00               	movlw	0
   871  0003C2  0102               	movlb	2	; () banked
   872  0003C4  6F6D               	movwf	main@mR& (0+255),b
   873                           
   874                           ;main.c: 93: mR.direction=1;
   875  0003C6  0E01               	movlw	1
   876  0003C8  0102               	movlb	2	; () banked
   877  0003CA  6F6E               	movwf	(main@mR+1)& (0+255),b
   878                           
   879                           ; BSR set to: 2
   880                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   881  0003CC  0E77               	movlw	119
   882  0003CE  0102               	movlb	2	; () banked
   883  0003D0  6F6F               	movwf	(main@mR+2)& (0+255),b
   884  0003D2  0E0F               	movlw	15
   885  0003D4  0102               	movlb	2	; () banked
   886  0003D6  6F70               	movwf	(main@mR+3)& (0+255),b
   887                           
   888                           ; BSR set to: 2
   889                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   890  0003D8  0E76               	movlw	118
   891  0003DA  0102               	movlb	2	; () banked
   892  0003DC  6F71               	movwf	(main@mR+4)& (0+255),b
   893  0003DE  0E0F               	movlw	15
   894  0003E0  0102               	movlb	2	; () banked
   895  0003E2  6F72               	movwf	(main@mR+5)& (0+255),b
   896                           
   897                           ;main.c: 96: mR.dir_pin=2;
   898  0003E4  0E02               	movlw	2
   899  0003E6  0102               	movlb	2	; () banked
   900  0003E8  6F73               	movwf	(main@mR+6)& (0+255),b
   901                           
   902                           ;main.c: 97: mR.PWMperiod=199;
   903  0003EA  0E00               	movlw	0
   904  0003EC  0102               	movlb	2	; () banked
   905  0003EE  6F75               	movwf	(main@mR+8)& (0+255),b
   906  0003F0  0EC7               	movlw	199
   907  0003F2  6F74               	movwf	(main@mR+7)& (0+255),b
   908                           
   909                           ;main.c: 99: OSCCON = 0x72;
   910  0003F4  0E72               	movlw	114
   911  0003F6  6ED3               	movwf	4051,c	;volatile
   912  0003F8                     l379:
   913  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   914  0003FA  D22E               	goto	l3334
   915  0003FC  D7FD               	goto	l379
   916  0003FE                     l3178:
   917                           
   918                           ;main.c: 112: stop(&mL, &mR);
   919  0003FE  0E64               	movlw	low main@mL
   920  000400  0100               	movlb	0	; () banked
   921  000402  6F62               	movwf	stop@mL& (0+255),b
   922  000404  0E02               	movlw	high main@mL
   923  000406  0100               	movlb	0	; () banked
   924  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   925  00040A  0E6D               	movlw	low main@mR
   926  00040C  0100               	movlb	0	; () banked
   927  00040E  6F64               	movwf	stop@mR& (0+255),b
   928  000410  0E02               	movlw	high main@mR
   929  000412  0100               	movlb	0	; () banked
   930  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   931  000416  EC6B  F009         	call	_stop	;wreg free
   932                           
   933                           ;main.c: 113: RFID_Read=0;
   934  00041A  0E00               	movlw	0
   935  00041C  0101               	movlb	1	; () banked
   936  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   937                           
   938                           ; BSR set to: 1
   939                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   940  000420  ECB5  F00A         	call	_grabLeftIR	;wreg free
   941  000424  C024  F0B5         	movff	?_grabLeftIR,main@SensorResult
   942  000428  C025  F0B6         	movff	?_grabLeftIR+1,main@SensorResult+1
   943                           
   944                           ;main.c: 117: SensorResult[1]=grabRightIR();
   945  00042C  EC7C  F00A         	call	_grabRightIR	;wreg free
   946  000430  C024  F0B7         	movff	?_grabRightIR,main@SensorResult+2
   947  000434  C025  F0B8         	movff	?_grabRightIR+1,main@SensorResult+3
   948                           
   949                           ;main.c: 121: CAP1BUFH=0;
   950  000438  0E00               	movlw	0
   951  00043A  6E69               	movwf	3945,c	;volatile
   952                           
   953                           ;main.c: 122: CAP1BUFL=0;
   954  00043C  0E00               	movlw	0
   955  00043E  6E68               	movwf	3944,c	;volatile
   956                           
   957                           ;main.c: 123: CAP2BUFH=0;
   958  000440  0E00               	movlw	0
   959  000442  6E67               	movwf	3943,c	;volatile
   960                           
   961                           ;main.c: 124: CAP2BUFL=0;
   962  000444  0E00               	movlw	0
   963  000446  6E66               	movwf	3942,c	;volatile
   964                           
   965                           ;main.c: 127: SendLCD(0b00000001,0);
   966  000448  0E00               	movlw	0
   967  00044A  6E28               	movwf	SendLCD@type,c
   968  00044C  0E01               	movlw	1
   969  00044E  EC2D  F00C         	call	_SendLCD
   970                           
   971                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   972  000452  0E21               	movlw	33
   973  000454                     u2777:
   974  000454  2EE8               	decfsz	wreg,f,c
   975  000456  D7FE               	goto	u2777
   976  000458  F000               	nop	
   977                           
   978                           ;main.c: 129: SendLCD(0b00000010,0);
   979  00045A  0E00               	movlw	0
   980  00045C  6E28               	movwf	SendLCD@type,c
   981  00045E  0E02               	movlw	2
   982  000460  EC2D  F00C         	call	_SendLCD
   983                           
   984                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   985  000464  0E06               	movlw	6
   986  000466  0100               	movlb	0	; () banked
   987  000468  6FB2               	movwf	??_main& (0+255),b
   988  00046A  0E30               	movlw	48
   989  00046C                     u2787:
   990  00046C  2EE8               	decfsz	wreg,f,c
   991  00046E  D7FE               	goto	u2787
   992  000470  2FB2               	decfsz	??_main& (0+255),f,b
   993  000472  D7FC               	goto	u2787
   994  000474  D000               	nop2	
   995                           
   996                           ;main.c: 131: SetLine(1);
   997  000476  0E01               	movlw	1
   998  000478  EC15  F00C         	call	_SetLine
   999                           
  1000                           ;main.c: 132: LCD_String("      Inert Mode");
  1001  00047C  0E1C               	movlw	low STR_5
  1002  00047E  6E2A               	movwf	LCD_String@string,c
  1003  000480  0E03               	movlw	high STR_5
  1004  000482  6E2B               	movwf	LCD_String@string+1,c
  1005  000484  ECEE  F00A         	call	_LCD_String	;wreg free
  1006                           
  1007                           ;main.c: 133: SetLine(2);
  1008  000488  0E02               	movlw	2
  1009  00048A  EC15  F00C         	call	_SetLine
  1010                           
  1011                           ;main.c: 134: if (RFID_Read) {
  1012  00048E  0101               	movlb	1	; () banked
  1013  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1014  000492  B4D8               	btfsc	status,2,c
  1015  000494  D007               	goto	l3212
  1016                           
  1017                           ; BSR set to: 1
  1018                           ;main.c: 135: LCD_String(Message);
  1019  000496  0EF0               	movlw	low main@Message
  1020  000498  6E2A               	movwf	LCD_String@string,c
  1021  00049A  0E01               	movlw	high main@Message
  1022  00049C  6E2B               	movwf	LCD_String@string+1,c
  1023  00049E  ECEE  F00A         	call	_LCD_String	;wreg free
  1024                           
  1025                           ;main.c: 136: } else {
  1026  0004A2  D1DA               	goto	l3334
  1027  0004A4                     l3212:
  1028                           
  1029                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1030  0004A4  0EC8               	movlw	low main@buf
  1031  0004A6  6E30               	movwf	sprintf@sp,c
  1032  0004A8  0E01               	movlw	high main@buf
  1033  0004AA  6E31               	movwf	sprintf@sp+1,c
  1034  0004AC  0E0B               	movlw	low STR_6
  1035  0004AE  6E32               	movwf	sprintf@f,c
  1036  0004B0  0E03               	movlw	high STR_6
  1037  0004B2  6E33               	movwf	sprintf@f+1,c
  1038  0004B4  C0B5  F034         	movff	main@SensorResult,?_sprintf+4
  1039  0004B8  C0B6  F035         	movff	main@SensorResult+1,?_sprintf+5
  1040  0004BC  C0B7  F036         	movff	main@SensorResult+2,?_sprintf+6
  1041  0004C0  C0B8  F037         	movff	main@SensorResult+3,?_sprintf+7
  1042  0004C4  EC3D  F004         	call	_sprintf	;wreg free
  1043                           
  1044                           ;main.c: 138: LCD_String(buf);
  1045  0004C8  0EC8               	movlw	low main@buf
  1046  0004CA  6E2A               	movwf	LCD_String@string,c
  1047  0004CC  0E01               	movlw	high main@buf
  1048  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1049  0004D0  ECEE  F00A         	call	_LCD_String	;wreg free
  1050                           
  1051                           ;main.c: 139: }
  1052                           ;main.c: 142: break;
  1053  0004D4  D1C1               	goto	l3334
  1054  0004D6                     l3216:
  1055                           
  1056                           ;main.c: 147: initMotorPWM();
  1057  0004D6  ECFC  F00B         	call	_initMotorPWM	;wreg free
  1058                           
  1059                           ;main.c: 148: initTimer();
  1060  0004DA  ECAE  F00C         	call	_initTimer	;wreg free
  1061                           
  1062                           ;main.c: 149: initRFID();
  1063  0004DE  ECA0  F00C         	call	_initRFID	;wreg free
  1064                           
  1065                           ;main.c: 150: initLCD();
  1066  0004E2  ECB3  F008         	call	_initLCD	;wreg free
  1067                           
  1068                           ;main.c: 151: initIR();
  1069  0004E6  EC80  F00C         	call	_initIR	;wreg free
  1070                           
  1071                           ;main.c: 153: enableSensor(0, 1);
  1072  0004EA  0E01               	movlw	1
  1073  0004EC  6E24               	movwf	enableSensor@status,c
  1074  0004EE  0E00               	movlw	0
  1075  0004F0  EC5A  F00C         	call	_enableSensor
  1076                           
  1077                           ;main.c: 154: enableSensor(1, 1);
  1078  0004F4  0E01               	movlw	1
  1079  0004F6  6E24               	movwf	enableSensor@status,c
  1080  0004F8  0E01               	movlw	1
  1081  0004FA  EC5A  F00C         	call	_enableSensor
  1082                           
  1083                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1084  0004FE  0E64               	movlw	low main@mL
  1085  000500  0100               	movlb	0	; () banked
  1086  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1087  000504  0E02               	movlw	high main@mL
  1088  000506  0100               	movlb	0	; () banked
  1089  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1090  00050A  0E6D               	movlw	low main@mR
  1091  00050C  0100               	movlb	0	; () banked
  1092  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1093  000510  0E02               	movlw	high main@mR
  1094  000512  0100               	movlb	0	; () banked
  1095  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1096  000516  0E64               	movlw	100
  1097  000518  0100               	movlb	0	; () banked
  1098  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1099  00051C  EC3C  F00A         	call	_fullSpeedAhead	;wreg free
  1100                           
  1101                           ;main.c: 158: delay_tenth_s(1);
  1102  000520  0E01               	movlw	1
  1103  000522  ECC4  F00B         	call	_delay_tenth_s
  1104                           
  1105                           ;main.c: 160: mode=-1;
  1106  000526  683B               	setf	_mode,c	;volatile
  1107                           
  1108                           ;main.c: 162: break;
  1109  000528  D197               	goto	l3334
  1110  00052A                     l3236:
  1111                           
  1112                           ;main.c: 170: SetLine(1);
  1113  00052A  0E01               	movlw	1
  1114  00052C  EC15  F00C         	call	_SetLine
  1115                           
  1116                           ;main.c: 171: LCD_String("Searching");
  1117  000530  0E44               	movlw	low STR_7
  1118  000532  6E2A               	movwf	LCD_String@string,c
  1119  000534  0E03               	movlw	high STR_7
  1120  000536  6E2B               	movwf	LCD_String@string+1,c
  1121  000538  ECEE  F00A         	call	_LCD_String	;wreg free
  1122                           
  1123                           ;main.c: 173: if (DirectionFound==-1) {
  1124  00053C  0100               	movlb	0	; () banked
  1125  00053E  29B9               	incf	main@DirectionFound& (0+255),w,b
  1126  000540  A4D8               	btfss	status,2,c
  1127  000542  D030               	goto	l3252
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1131  000544  0E64               	movlw	low main@mL
  1132  000546  0100               	movlb	0	; () banked
  1133  000548  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1134  00054A  0E02               	movlw	high main@mL
  1135  00054C  0100               	movlb	0	; () banked
  1136  00054E  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1137  000550  0E6D               	movlw	low main@mR
  1138  000552  0100               	movlb	0	; () banked
  1139  000554  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1140  000556  0E02               	movlw	high main@mR
  1141  000558  0100               	movlb	0	; () banked
  1142  00055A  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1143  00055C  0E64               	movlw	100
  1144  00055E  0100               	movlb	0	; () banked
  1145  000560  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1146  000562  EC3C  F00A         	call	_fullSpeedAhead	;wreg free
  1147                           
  1148                           ;main.c: 179: delay_tenth_s(6);
  1149  000566  0E06               	movlw	6
  1150  000568  ECC4  F00B         	call	_delay_tenth_s
  1151                           
  1152                           ;main.c: 180: stop(&mL,&mR);
  1153  00056C  0E64               	movlw	low main@mL
  1154  00056E  0100               	movlb	0	; () banked
  1155  000570  6F62               	movwf	stop@mL& (0+255),b
  1156  000572  0E02               	movlw	high main@mL
  1157  000574  0100               	movlb	0	; () banked
  1158  000576  6F63               	movwf	(stop@mL+1)& (0+255),b
  1159  000578  0E6D               	movlw	low main@mR
  1160  00057A  0100               	movlb	0	; () banked
  1161  00057C  6F64               	movwf	stop@mR& (0+255),b
  1162  00057E  0E02               	movlw	high main@mR
  1163  000580  0100               	movlb	0	; () banked
  1164  000582  6F65               	movwf	(stop@mR+1)& (0+255),b
  1165  000584  EC6B  F009         	call	_stop	;wreg free
  1166                           
  1167                           ;main.c: 181: DirectionFound=0;
  1168  000588  0E00               	movlw	0
  1169  00058A  0100               	movlb	0	; () banked
  1170  00058C  6FB9               	movwf	main@DirectionFound& (0+255),b
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;main.c: 182: MoveType[Move]=0;
  1174  00058E  0100               	movlb	0	; () banked
  1175  000590  51BA               	movf	main@Move& (0+255),w,b
  1176  000592  0D01               	mullw	1
  1177  000594  0E00               	movlw	low main@MoveType
  1178  000596  24F3               	addwf	prodl,w,c
  1179  000598  6ED9               	movwf	fsr2l,c
  1180  00059A  0E02               	movlw	high main@MoveType
  1181  00059C  20F4               	addwfc	prodh,w,c
  1182  00059E  6EDA               	movwf	fsr2h,c
  1183  0005A0  0E00               	movlw	0
  1184  0005A2  D025               	goto	L1
  1185  0005A4                     l3252:
  1186                           
  1187                           ; BSR set to: 0
  1188  0005A4  0100               	movlb	0	; () banked
  1189  0005A6  51B9               	movf	main@DirectionFound& (0+255),w,b
  1190  0005A8  0100               	movlb	0	; () banked
  1191  0005AA  A4D8               	btfss	status,2,c
  1192  0005AC  D022               	goto	l3258
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1196  0005AE  0E64               	movlw	low main@mL
  1197  0005B0  0100               	movlb	0	; () banked
  1198  0005B2  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1199  0005B4  0E02               	movlw	high main@mL
  1200  0005B6  0100               	movlb	0	; () banked
  1201  0005B8  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1202  0005BA  0E6D               	movlw	low main@mR
  1203  0005BC  0100               	movlb	0	; () banked
  1204  0005BE  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1205  0005C0  0E02               	movlw	high main@mR
  1206  0005C2  0100               	movlb	0	; () banked
  1207  0005C4  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1208  0005C6  C0B4  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1209  0005CA  0100               	movlb	0	; () banked
  1210  0005CC  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1211  0005CE  0100               	movlb	0	; () banked
  1212  0005D0  51BA               	movf	main@Move& (0+255),w,b
  1213  0005D2  0D02               	mullw	2
  1214  0005D4  0E00               	movlw	low main@MoveTime
  1215  0005D6  24F3               	addwf	prodl,w,c
  1216  0005D8  0100               	movlb	0	; () banked
  1217  0005DA  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1218  0005DC  0E01               	movlw	high main@MoveTime
  1219  0005DE  20F4               	addwfc	prodh,w,c
  1220  0005E0  0100               	movlb	0	; () banked
  1221  0005E2  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1222  0005E4  ECC0  F005         	call	_ScanWithRange	;wreg free
  1223  0005E8  0100               	movlb	0	; () banked
  1224  0005EA  6FB9               	movwf	main@DirectionFound& (0+255),b
  1225  0005EC  D030               	goto	l3266
  1226  0005EE                     L1:
  1227  0005EE  6EDF               	movwf	indf2,c
  1228                           
  1229                           ;main.c: 187: } else if (DirectionFound==1) {
  1230  0005F0  D110               	goto	l3322
  1231  0005F2                     l3258:
  1232                           
  1233                           ; BSR set to: 0
  1234  0005F2  0100               	movlb	0	; () banked
  1235  0005F4  05B9               	decf	main@DirectionFound& (0+255),w,b
  1236  0005F6  A4D8               	btfss	status,2,c
  1237  0005F8  D023               	goto	l3262
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;main.c: 189: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1241  0005FA  0E64               	movlw	low main@mL
  1242  0005FC  0100               	movlb	0	; () banked
  1243  0005FE  6F6D               	movwf	ScanIR@mL& (0+255),b
  1244  000600  0E02               	movlw	high main@mL
  1245  000602  0100               	movlb	0	; () banked
  1246  000604  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1247  000606  0E6D               	movlw	low main@mR
  1248  000608  0100               	movlb	0	; () banked
  1249  00060A  6F6F               	movwf	ScanIR@mR& (0+255),b
  1250  00060C  0E02               	movlw	high main@mR
  1251  00060E  0100               	movlb	0	; () banked
  1252  000610  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1253  000612  0EBA               	movlw	low main@Move
  1254  000614  0100               	movlb	0	; () banked
  1255  000616  6F71               	movwf	ScanIR@Move& (0+255),b
  1256  000618  0E00               	movlw	high main@Move
  1257  00061A  0100               	movlb	0	; () banked
  1258  00061C  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1259  00061E  0E00               	movlw	low main@MoveTime
  1260  000620  0100               	movlb	0	; () banked
  1261  000622  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1262  000624  0E01               	movlw	high main@MoveTime
  1263  000626  0100               	movlb	0	; () banked
  1264  000628  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1265  00062A  0E00               	movlw	low main@MoveType
  1266  00062C  0100               	movlb	0	; () banked
  1267  00062E  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1268  000630  0E02               	movlw	high main@MoveType
  1269  000632  0100               	movlb	0	; () banked
  1270  000634  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1271  000636  ECD3  F007         	call	_ScanIR	;wreg free
  1272  00063A  0100               	movlb	0	; () banked
  1273  00063C  6FB9               	movwf	main@DirectionFound& (0+255),b
  1274                           
  1275                           ;main.c: 190: } else if (DirectionFound==2) {
  1276  00063E  D0E9               	goto	l3322
  1277  000640                     l3262:
  1278                           
  1279                           ; BSR set to: 0
  1280  000640  0E02               	movlw	2
  1281  000642  0100               	movlb	0	; () banked
  1282  000644  19B9               	xorwf	main@DirectionFound& (0+255),w,b
  1283  000646  A4D8               	btfss	status,2,c
  1284  000648  D0E4               	goto	l3322
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;main.c: 192: mode=2;
  1288  00064A  0E02               	movlw	2
  1289  00064C  6E3B               	movwf	_mode,c	;volatile
  1290  00064E                     l3266:
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;main.c: 193: MoveType[Move]=1;
  1294  00064E  0100               	movlb	0	; () banked
  1295  000650  51BA               	movf	main@Move& (0+255),w,b
  1296  000652  0D01               	mullw	1
  1297  000654  0E00               	movlw	low main@MoveType
  1298  000656  24F3               	addwf	prodl,w,c
  1299  000658  6ED9               	movwf	fsr2l,c
  1300  00065A  0E02               	movlw	high main@MoveType
  1301  00065C  20F4               	addwfc	prodh,w,c
  1302  00065E  6EDA               	movwf	fsr2h,c
  1303  000660  0E01               	movlw	1
  1304  000662  D7C5               	goto	L1
  1305  000664                     l3270:
  1306                           
  1307                           ;main.c: 205: if (RFID_Read) {
  1308  000664  0101               	movlb	1	; () banked
  1309  000666  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1310  000668  B4D8               	btfsc	status,2,c
  1311  00066A  D0A2               	goto	l3312
  1312                           
  1313                           ; BSR set to: 1
  1314                           ;main.c: 206: stop(&mL, &mR);
  1315  00066C  0E64               	movlw	low main@mL
  1316  00066E  0100               	movlb	0	; () banked
  1317  000670  6F62               	movwf	stop@mL& (0+255),b
  1318  000672  0E02               	movlw	high main@mL
  1319  000674  0100               	movlb	0	; () banked
  1320  000676  6F63               	movwf	(stop@mL+1)& (0+255),b
  1321  000678  0E6D               	movlw	low main@mR
  1322  00067A  0100               	movlb	0	; () banked
  1323  00067C  6F64               	movwf	stop@mR& (0+255),b
  1324  00067E  0E02               	movlw	high main@mR
  1325  000680  0100               	movlb	0	; () banked
  1326  000682  6F65               	movwf	(stop@mR+1)& (0+255),b
  1327  000684  EC6B  F009         	call	_stop	;wreg free
  1328                           
  1329                           ;main.c: 207: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1330  000688  0E03               	movlw	3
  1331  00068A  0100               	movlb	0	; () banked
  1332  00068C  19D3               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1333  00068E  A4D8               	btfss	status,2,c
  1334  000690  D002               	goto	u2690
  1335  000692  0E01               	movlw	1
  1336  000694  D001               	goto	u2692
  1337  000696                     u2690:
  1338  000696  0E00               	movlw	0
  1339  000698                     u2692:
  1340  000698  0100               	movlb	0	; () banked
  1341  00069A  6FB2               	movwf	??_main& (0+255),b
  1342  00069C  0E02               	movlw	2
  1343  00069E  0100               	movlb	0	; () banked
  1344  0006A0  19C4               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1345  0006A2  A4D8               	btfss	status,2,c
  1346  0006A4  D002               	goto	u2700
  1347  0006A6  0E01               	movlw	1
  1348  0006A8  D001               	goto	u2702
  1349  0006AA                     u2700:
  1350  0006AA  0E00               	movlw	0
  1351  0006AC                     u2702:
  1352  0006AC  0100               	movlb	0	; () banked
  1353  0006AE  15B2               	andwf	??_main& (0+255),w,b
  1354  0006B0  A0E8               	btfss	wreg,0,c
  1355  0006B2  D0D2               	goto	l3334
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;main.c: 208: if (VerifySignal(ReceivedString)){
  1359  0006B4  0EC4               	movlw	low _ReceivedString
  1360  0006B6  6E24               	movwf	VerifySignal@Signal,c
  1361  0006B8  0E00               	movlw	high _ReceivedString
  1362  0006BA  6E25               	movwf	VerifySignal@Signal+1,c
  1363  0006BC  EC11  F009         	call	_VerifySignal	;wreg free
  1364  0006C0  0900               	iorlw	0
  1365  0006C2  B4D8               	btfsc	status,2,c
  1366  0006C4  D041               	goto	l3304
  1367                           
  1368                           ;main.c: 210: for (i=0; i<10; i++){
  1369  0006C6  0E00               	movlw	0
  1370  0006C8  0100               	movlb	0	; () banked
  1371  0006CA  6FBB               	movwf	main@i& (0+255),b
  1372  0006CC                     l3280:
  1373                           
  1374                           ; BSR set to: 0
  1375  0006CC  0E09               	movlw	9
  1376  0006CE  0100               	movlb	0	; () banked
  1377  0006D0  65BB               	cpfsgt	main@i& (0+255),b
  1378  0006D2  D001               	goto	l3284
  1379  0006D4  D020               	goto	l3290
  1380  0006D6                     l3284:
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;main.c: 211: Message[i] = ReceivedString[i+1];
  1384  0006D6  0100               	movlb	0	; () banked
  1385  0006D8  51BB               	movf	main@i& (0+255),w,b
  1386  0006DA  0100               	movlb	0	; () banked
  1387  0006DC  6FB2               	movwf	??_main& (0+255),b
  1388  0006DE  6BB3               	clrf	(??_main+1)& (0+255),b
  1389  0006E0  0E01               	movlw	1
  1390  0006E2  0100               	movlb	0	; () banked
  1391  0006E4  27B2               	addwf	??_main& (0+255),f,b
  1392  0006E6  0E00               	movlw	0
  1393  0006E8  23B3               	addwfc	(??_main+1)& (0+255),f,b
  1394  0006EA  0EC4               	movlw	low _ReceivedString
  1395  0006EC  0100               	movlb	0	; () banked
  1396  0006EE  25B2               	addwf	??_main& (0+255),w,b
  1397  0006F0  6ED9               	movwf	fsr2l,c
  1398  0006F2  0E00               	movlw	high _ReceivedString
  1399  0006F4  0100               	movlb	0	; () banked
  1400  0006F6  21B3               	addwfc	(??_main+1)& (0+255),w,b
  1401  0006F8  6EDA               	movwf	fsr2h,c
  1402  0006FA  0100               	movlb	0	; () banked
  1403  0006FC  51BB               	movf	main@i& (0+255),w,b
  1404  0006FE  0D01               	mullw	1
  1405  000700  0EF0               	movlw	low main@Message
  1406  000702  24F3               	addwf	prodl,w,c
  1407  000704  6EE1               	movwf	fsr1l,c
  1408  000706  0E01               	movlw	high main@Message
  1409  000708  20F4               	addwfc	prodh,w,c
  1410  00070A  6EE2               	movwf	fsr1h,c
  1411  00070C  CFDF FFE7          	movff	indf2,indf1
  1412                           
  1413                           ; BSR set to: 0
  1414  000710  0100               	movlb	0	; () banked
  1415  000712  2BBB               	incf	main@i& (0+255),f,b
  1416  000714  D7DB               	goto	l3280
  1417  000716                     l3290:
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;main.c: 212: }
  1421                           ;main.c: 215: for (i=0; i<16; i++) {
  1422  000716  0E00               	movlw	0
  1423  000718  0100               	movlb	0	; () banked
  1424  00071A  6FBB               	movwf	main@i& (0+255),b
  1425  00071C                     l3292:
  1426                           
  1427                           ; BSR set to: 0
  1428  00071C  0E0F               	movlw	15
  1429  00071E  0100               	movlb	0	; () banked
  1430  000720  65BB               	cpfsgt	main@i& (0+255),b
  1431  000722  D001               	goto	l3296
  1432  000724  D00E               	goto	l3302
  1433  000726                     l3296:
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;main.c: 216: ReceivedString[i]=0;
  1437  000726  0100               	movlb	0	; () banked
  1438  000728  51BB               	movf	main@i& (0+255),w,b
  1439  00072A  0D01               	mullw	1
  1440  00072C  0EC4               	movlw	low _ReceivedString
  1441  00072E  24F3               	addwf	prodl,w,c
  1442  000730  6ED9               	movwf	fsr2l,c
  1443  000732  0E00               	movlw	high _ReceivedString
  1444  000734  20F4               	addwfc	prodh,w,c
  1445  000736  6EDA               	movwf	fsr2h,c
  1446  000738  0E00               	movlw	0
  1447  00073A  6EDF               	movwf	indf2,c
  1448                           
  1449                           ; BSR set to: 0
  1450  00073C  0100               	movlb	0	; () banked
  1451  00073E  2BBB               	incf	main@i& (0+255),f,b
  1452  000740  D7ED               	goto	l3292
  1453  000742                     l3302:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;main.c: 217: }
  1457                           ;main.c: 218: mode=3;
  1458  000742  0E03               	movlw	3
  1459  000744  6E3B               	movwf	_mode,c	;volatile
  1460                           
  1461                           ;main.c: 220: } else {
  1462  000746  D088               	goto	l3334
  1463  000748                     l3304:
  1464                           
  1465                           ;main.c: 221: fullSpeedBack(&mL,&mR, 100);
  1466  000748  0E64               	movlw	low main@mL
  1467  00074A  0100               	movlb	0	; () banked
  1468  00074C  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1469  00074E  0E02               	movlw	high main@mL
  1470  000750  0100               	movlb	0	; () banked
  1471  000752  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1472  000754  0E6D               	movlw	low main@mR
  1473  000756  0100               	movlb	0	; () banked
  1474  000758  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1475  00075A  0E02               	movlw	high main@mR
  1476  00075C  0100               	movlb	0	; () banked
  1477  00075E  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1478  000760  0E64               	movlw	100
  1479  000762  0100               	movlb	0	; () banked
  1480  000764  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1481  000766  EC67  F00B         	call	_fullSpeedBack	;wreg free
  1482                           
  1483                           ;main.c: 222: delay_tenth_s(5);
  1484  00076A  0E05               	movlw	5
  1485  00076C  ECC4  F00B         	call	_delay_tenth_s
  1486                           
  1487                           ;main.c: 223: stop(&mL,&mR);
  1488  000770  0E64               	movlw	low main@mL
  1489  000772  0100               	movlb	0	; () banked
  1490  000774  6F62               	movwf	stop@mL& (0+255),b
  1491  000776  0E02               	movlw	high main@mL
  1492  000778  0100               	movlb	0	; () banked
  1493  00077A  6F63               	movwf	(stop@mL+1)& (0+255),b
  1494  00077C  0E6D               	movlw	low main@mR
  1495  00077E  0100               	movlb	0	; () banked
  1496  000780  6F64               	movwf	stop@mR& (0+255),b
  1497  000782  0E02               	movlw	high main@mR
  1498  000784  0100               	movlb	0	; () banked
  1499  000786  6F65               	movwf	(stop@mR+1)& (0+255),b
  1500  000788  EC6B  F009         	call	_stop	;wreg free
  1501                           
  1502                           ;main.c: 224: fullSpeedAhead(&mL,&mR, 100);
  1503  00078C  0E64               	movlw	low main@mL
  1504  00078E  0100               	movlb	0	; () banked
  1505  000790  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1506  000792  0E02               	movlw	high main@mL
  1507  000794  0100               	movlb	0	; () banked
  1508  000796  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1509  000798  0E6D               	movlw	low main@mR
  1510  00079A  0100               	movlb	0	; () banked
  1511  00079C  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1512  00079E  0E02               	movlw	high main@mR
  1513  0007A0  0100               	movlb	0	; () banked
  1514  0007A2  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1515  0007A4  0E64               	movlw	100
  1516  0007A6  0100               	movlb	0	; () banked
  1517  0007A8  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1518  0007AA  EC3C  F00A         	call	_fullSpeedAhead	;wreg free
  1519                           
  1520                           ;main.c: 225: }
  1521                           ;main.c: 226: }
  1522                           ;main.c: 227: } else {
  1523  0007AE  D054               	goto	l3334
  1524  0007B0                     l3312:
  1525                           
  1526                           ;main.c: 228: DirectionFound=1;
  1527  0007B0  0E01               	movlw	1
  1528  0007B2  0100               	movlb	0	; () banked
  1529  0007B4  6FB9               	movwf	main@DirectionFound& (0+255),b
  1530                           
  1531                           ;main.c: 229: mode=1;
  1532  0007B6  0E01               	movlw	1
  1533  0007B8  6E3B               	movwf	_mode,c	;volatile
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 231: fullSpeedAhead(&mL,&mR, 100);
  1537  0007BA  0E64               	movlw	low main@mL
  1538  0007BC  0100               	movlb	0	; () banked
  1539  0007BE  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1540  0007C0  0E02               	movlw	high main@mL
  1541  0007C2  0100               	movlb	0	; () banked
  1542  0007C4  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1543  0007C6  0E6D               	movlw	low main@mR
  1544  0007C8  0100               	movlb	0	; () banked
  1545  0007CA  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1546  0007CC  0E02               	movlw	high main@mR
  1547  0007CE  0100               	movlb	0	; () banked
  1548  0007D0  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1549  0007D2  0E64               	movlw	100
  1550  0007D4  0100               	movlb	0	; () banked
  1551  0007D6  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1552  0007D8  EC3C  F00A         	call	_fullSpeedAhead	;wreg free
  1553                           
  1554                           ;main.c: 232: delay_tenth_s(5);
  1555  0007DC  0E05               	movlw	5
  1556  0007DE  ECC4  F00B         	call	_delay_tenth_s
  1557                           
  1558                           ;main.c: 233: MoveType[Move] = 0;
  1559  0007E2  0100               	movlb	0	; () banked
  1560  0007E4  51BA               	movf	main@Move& (0+255),w,b
  1561  0007E6  0D01               	mullw	1
  1562  0007E8  0E00               	movlw	low main@MoveType
  1563  0007EA  24F3               	addwf	prodl,w,c
  1564  0007EC  6ED9               	movwf	fsr2l,c
  1565  0007EE  0E02               	movlw	high main@MoveType
  1566  0007F0  20F4               	addwfc	prodh,w,c
  1567  0007F2  6EDA               	movwf	fsr2h,c
  1568  0007F4  0E00               	movlw	0
  1569  0007F6  6EDF               	movwf	indf2,c
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;main.c: 234: MoveTime[Move] = 5;
  1573  0007F8  0100               	movlb	0	; () banked
  1574  0007FA  51BA               	movf	main@Move& (0+255),w,b
  1575  0007FC  0D02               	mullw	2
  1576  0007FE  0E00               	movlw	low main@MoveTime
  1577  000800  24F3               	addwf	prodl,w,c
  1578  000802  6ED9               	movwf	fsr2l,c
  1579  000804  0E01               	movlw	high main@MoveTime
  1580  000806  20F4               	addwfc	prodh,w,c
  1581  000808  6EDA               	movwf	fsr2h,c
  1582  00080A  0E05               	movlw	5
  1583  00080C  6EDE               	movwf	postinc2,c
  1584  00080E  0E00               	movlw	0
  1585  000810  6EDD               	movwf	postdec2,c
  1586  000812                     l3322:
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 235: Move++;
  1590  000812  0100               	movlb	0	; () banked
  1591  000814  2BBA               	incf	main@Move& (0+255),f,b
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;main.c: 236: }
  1595                           ;main.c: 238: break;
  1596  000816  D020               	goto	l3334
  1597  000818                     l3324:
  1598                           
  1599                           ;main.c: 243: SetLine(1);
  1600  000818  0E01               	movlw	1
  1601  00081A  EC15  F00C         	call	_SetLine
  1602                           
  1603                           ;main.c: 244: LCD_String(Message);
  1604  00081E  0EF0               	movlw	low main@Message
  1605  000820  6E2A               	movwf	LCD_String@string,c
  1606  000822  0E01               	movlw	high main@Message
  1607  000824  6E2B               	movwf	LCD_String@string+1,c
  1608  000826  ECEE  F00A         	call	_LCD_String	;wreg free
  1609                           
  1610                           ;main.c: 245: SetLine(2);
  1611  00082A  0E02               	movlw	2
  1612  00082C  EC15  F00C         	call	_SetLine
  1613                           
  1614                           ;main.c: 246: LCD_String("Going Home");
  1615  000830  0E39               	movlw	low STR_8
  1616  000832  6E2A               	movwf	LCD_String@string,c
  1617  000834  0E03               	movlw	high STR_8
  1618  000836  6E2B               	movwf	LCD_String@string+1,c
  1619  000838  ECEE  F00A         	call	_LCD_String	;wreg free
  1620                           
  1621                           ;main.c: 247: stop(&mL,&mR);
  1622  00083C  0E64               	movlw	low main@mL
  1623  00083E  0100               	movlb	0	; () banked
  1624  000840  6F62               	movwf	stop@mL& (0+255),b
  1625  000842  0E02               	movlw	high main@mL
  1626  000844  0100               	movlb	0	; () banked
  1627  000846  6F63               	movwf	(stop@mL+1)& (0+255),b
  1628  000848  0E6D               	movlw	low main@mR
  1629  00084A  0100               	movlb	0	; () banked
  1630  00084C  6F64               	movwf	stop@mR& (0+255),b
  1631  00084E  0E02               	movlw	high main@mR
  1632  000850  0100               	movlb	0	; () banked
  1633  000852  6F65               	movwf	(stop@mR+1)& (0+255),b
  1634  000854  EC6B  F009         	call	_stop	;wreg free
  1635  000858                     l3334:
  1636  000858  503B               	movf	_mode,w,c	;volatile
  1637                           
  1638                           ; Switch size 1, requested type "space"
  1639                           ; Number of cases is 5, Range of values is 0 to 255
  1640                           ; switch strategies available:
  1641                           ; Name         Instructions Cycles
  1642                           ; simple_byte           16     9 (average)
  1643                           ;	Chosen strategy is simple_byte
  1644  00085A  0A00               	xorlw	0	; case 0
  1645  00085C  B4D8               	btfsc	status,2,c
  1646  00085E  D63B               	goto	l3216
  1647  000860  0A01               	xorlw	1	; case 1
  1648  000862  B4D8               	btfsc	status,2,c
  1649  000864  D662               	goto	l3236
  1650  000866  0A03               	xorlw	3	; case 2
  1651  000868  B4D8               	btfsc	status,2,c
  1652  00086A  D6FC               	goto	l3270
  1653  00086C  0A01               	xorlw	1	; case 3
  1654  00086E  B4D8               	btfsc	status,2,c
  1655  000870  D7D3               	goto	l3324
  1656  000872  0AFC               	xorlw	252	; case 255
  1657  000874  B4D8               	btfsc	status,2,c
  1658  000876  D5C3               	goto	l3178
  1659  000878  D7EF               	goto	l3334
  1660  00087A                     __end_of_main:
  1661                           	opt stack 0
  1662                           tblptru	equ	0xFF8
  1663                           prodh	equ	0xFF4
  1664                           prodl	equ	0xFF3
  1665                           intcon	equ	0xFF2
  1666                           postinc0	equ	0xFEE
  1667                           wreg	equ	0xFE8
  1668                           indf1	equ	0xFE7
  1669                           fsr1h	equ	0xFE2
  1670                           fsr1l	equ	0xFE1
  1671                           indf2	equ	0xFDF
  1672                           postinc2	equ	0xFDE
  1673                           postdec2	equ	0xFDD
  1674                           fsr2h	equ	0xFDA
  1675                           fsr2l	equ	0xFD9
  1676                           status	equ	0xFD8
  1677                           
  1678 ;; *************** function _initTimer *****************
  1679 ;; Defined at:
  1680 ;;		line 8 in file "Movement.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;		None               void
  1687 ;; Registers used:
  1688 ;;		None
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1694 ;;      Params:         0       0       0       0
  1695 ;;      Locals:         0       0       0       0
  1696 ;;      Temps:          0       0       0       0
  1697 ;;      Totals:         0       0       0       0
  1698 ;;Total ram usage:        0 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; Hardware stack levels required when called:    3
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_main
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text1
  1709  00195C                     __ptext1:
  1710                           	opt stack 0
  1711  00195C                     _initTimer:
  1712                           	opt stack 27
  1713                           
  1714                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1715                           
  1716                           ;incstack = 0
  1717  00195C  9ED5               	bcf	4053,7,c	;volatile
  1718                           
  1719                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1720  00195E  9CD5               	bcf	4053,6,c	;volatile
  1721                           
  1722                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1723  001960  9AD5               	bcf	4053,5,c	;volatile
  1724                           
  1725                           ;Movement.c: 13: T0CONbits.PSA=0;
  1726  001962  96D5               	bcf	4053,3,c	;volatile
  1727                           
  1728                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1729  001964  80D5               	bsf	4053,0,c	;volatile
  1730  001966  82D5               	bsf	4053,1,c	;volatile
  1731  001968  84D5               	bsf	4053,2,c	;volatile
  1732                           
  1733                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1734  00196A  9AF2               	bcf	intcon,5,c	;volatile
  1735  00196C  0012               	return		;funcret
  1736  00196E                     __end_of_initTimer:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           prodh	equ	0xFF4
  1740                           prodl	equ	0xFF3
  1741                           intcon	equ	0xFF2
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           indf1	equ	0xFE7
  1745                           fsr1h	equ	0xFE2
  1746                           fsr1l	equ	0xFE1
  1747                           indf2	equ	0xFDF
  1748                           postinc2	equ	0xFDE
  1749                           postdec2	equ	0xFDD
  1750                           fsr2h	equ	0xFDA
  1751                           fsr2l	equ	0xFD9
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _initRFID *****************
  1755 ;; Defined at:
  1756 ;;		line 5 in file "RFID_Reader.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;		None               void
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1770 ;;      Params:         0       0       0       0
  1771 ;;      Locals:         0       0       0       0
  1772 ;;      Temps:          0       0       0       0
  1773 ;;      Totals:         0       0       0       0
  1774 ;;Total ram usage:        0 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    3
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_main
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text2
  1785  001940                     __ptext2:
  1786                           	opt stack 0
  1787  001940                     _initRFID:
  1788                           	opt stack 27
  1789                           
  1790                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1791                           
  1792                           ;incstack = 0
  1793  001940  5094               	movf	3988,w,c	;volatile
  1794  001942  09C0               	iorlw	192
  1795  001944  6E94               	movwf	3988,c	;volatile
  1796                           
  1797                           ;RFID_Reader.c: 10: SPBRG=205;
  1798  001946  0ECD               	movlw	205
  1799  001948  6EAF               	movwf	4015,c	;volatile
  1800                           
  1801                           ;RFID_Reader.c: 11: SPBRGH=0;
  1802  00194A  0E00               	movlw	0
  1803  00194C  6EB0               	movwf	4016,c	;volatile
  1804                           
  1805                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1806  00194E  86AA               	bsf	4010,3,c	;volatile
  1807                           
  1808                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1809  001950  84AC               	bsf	4012,2,c	;volatile
  1810                           
  1811                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1812  001952  88AB               	bsf	4011,4,c	;volatile
  1813                           
  1814                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1815  001954  8EAB               	bsf	4011,7,c	;volatile
  1816                           
  1817                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1818  001956  98AC               	bcf	4012,4,c	;volatile
  1819                           
  1820                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1821  001958  9CAB               	bcf	4011,6,c	;volatile
  1822  00195A  0012               	return		;funcret
  1823  00195C                     __end_of_initRFID:
  1824                           	opt stack 0
  1825                           tblptru	equ	0xFF8
  1826                           prodh	equ	0xFF4
  1827                           prodl	equ	0xFF3
  1828                           intcon	equ	0xFF2
  1829                           postinc0	equ	0xFEE
  1830                           wreg	equ	0xFE8
  1831                           indf1	equ	0xFE7
  1832                           fsr1h	equ	0xFE2
  1833                           fsr1l	equ	0xFE1
  1834                           indf2	equ	0xFDF
  1835                           postinc2	equ	0xFDE
  1836                           postdec2	equ	0xFDD
  1837                           fsr2h	equ	0xFDA
  1838                           fsr2l	equ	0xFD9
  1839                           status	equ	0xFD8
  1840                           
  1841 ;; *************** function _initMotorPWM *****************
  1842 ;; Defined at:
  1843 ;;		line 4 in file "dc_motor.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;		None
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;		None               void
  1850 ;; Registers used:
  1851 ;;		wreg, status,2
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1857 ;;      Params:         0       0       0       0
  1858 ;;      Locals:         0       0       0       0
  1859 ;;      Temps:          0       0       0       0
  1860 ;;      Totals:         0       0       0       0
  1861 ;;Total ram usage:        0 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    3
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_main
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           	psect	text3
  1872  0017F8                     __ptext3:
  1873                           	opt stack 0
  1874  0017F8                     _initMotorPWM:
  1875                           	opt stack 27
  1876                           
  1877                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1878                           
  1879                           ;incstack = 0
  1880  0017F8  0E00               	movlw	0
  1881  0017FA  6E7F               	movwf	3967,c	;volatile
  1882                           
  1883                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1884  0017FC  0E80               	movlw	128
  1885  0017FE  6E7E               	movwf	3966,c	;volatile
  1886                           
  1887                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1888  001800  0E6F               	movlw	111
  1889  001802  6E6F               	movwf	3951,c	;volatile
  1890                           
  1891                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1892  001804  0E00               	movlw	0
  1893  001806  6E6E               	movwf	3950,c	;volatile
  1894                           
  1895                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1896  001808  0EC7               	movlw	199
  1897  00180A  6E7B               	movwf	3963,c	;volatile
  1898                           
  1899                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1900  00180C  0E00               	movlw	0
  1901  00180E  6E7A               	movwf	3962,c	;volatile
  1902                           
  1903                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1904  001810  0E00               	movlw	0
  1905  001812  6E79               	movwf	3961,c	;volatile
  1906                           
  1907                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1908  001814  0E00               	movlw	0
  1909  001816  6E78               	movwf	3960,c	;volatile
  1910                           
  1911                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1912  001818  0E00               	movlw	0
  1913  00181A  6E77               	movwf	3959,c	;volatile
  1914                           
  1915                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1916  00181C  0E00               	movlw	0
  1917  00181E  6E76               	movwf	3958,c	;volatile
  1918                           
  1919                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1920  001820  9093               	bcf	3987,0,c	;volatile
  1921                           
  1922                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1923  001822  9293               	bcf	3987,1,c	;volatile
  1924                           
  1925                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1926  001824  9493               	bcf	3987,2,c	;volatile
  1927                           
  1928                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1929  001826  9693               	bcf	3987,3,c	;volatile
  1930  001828  0012               	return		;funcret
  1931  00182A                     __end_of_initMotorPWM:
  1932                           	opt stack 0
  1933                           tblptru	equ	0xFF8
  1934                           prodh	equ	0xFF4
  1935                           prodl	equ	0xFF3
  1936                           intcon	equ	0xFF2
  1937                           postinc0	equ	0xFEE
  1938                           wreg	equ	0xFE8
  1939                           indf1	equ	0xFE7
  1940                           fsr1h	equ	0xFE2
  1941                           fsr1l	equ	0xFE1
  1942                           indf2	equ	0xFDF
  1943                           postinc2	equ	0xFDE
  1944                           postdec2	equ	0xFDD
  1945                           fsr2h	equ	0xFDA
  1946                           fsr2l	equ	0xFD9
  1947                           status	equ	0xFD8
  1948                           
  1949 ;; *************** function _initLCD *****************
  1950 ;; Defined at:
  1951 ;;		line 38 in file "LCD.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;		None
  1954 ;; Auto vars:     Size  Location     Type
  1955 ;;		None
  1956 ;; Return value:  Size  Location     Type
  1957 ;;		None               void
  1958 ;; Registers used:
  1959 ;;		wreg, status,2, status,0, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1965 ;;      Params:         0       0       0       0
  1966 ;;      Locals:         0       0       0       0
  1967 ;;      Temps:          1       0       0       0
  1968 ;;      Totals:         1       0       0       0
  1969 ;;Total ram usage:        1 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    6
  1972 ;; This function calls:
  1973 ;;		_LCDout
  1974 ;;		_SendLCD
  1975 ;; This function is called by:
  1976 ;;		_main
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980                           	psect	text4
  1981  001166                     __ptext4:
  1982                           	opt stack 0
  1983  001166                     _initLCD:
  1984                           	opt stack 24
  1985                           
  1986                           ;LCD.c: 44: TRISAbits.RA6=0;
  1987                           
  1988                           ;incstack = 0
  1989  001166  9C92               	bcf	3986,6,c	;volatile
  1990                           
  1991                           ;LCD.c: 45: TRISCbits.RC0=0;
  1992  001168  9094               	bcf	3988,0,c	;volatile
  1993                           
  1994                           ;LCD.c: 46: TRISCbits.RC1=0;
  1995  00116A  9294               	bcf	3988,1,c	;volatile
  1996                           
  1997                           ;LCD.c: 47: TRISCbits.RC2=0;
  1998  00116C  9494               	bcf	3988,2,c	;volatile
  1999                           
  2000                           ;LCD.c: 48: TRISDbits.RD0=0;
  2001  00116E  9095               	bcf	3989,0,c	;volatile
  2002                           
  2003                           ;LCD.c: 49: TRISDbits.RD1=0;
  2004  001170  9295               	bcf	3989,1,c	;volatile
  2005                           
  2006                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2007  001172  0E27               	movlw	39
  2008  001174  6E2A               	movwf	??_initLCD& (0+255),c
  2009  001176  0EF5               	movlw	245
  2010  001178                     u2797:
  2011  001178  2EE8               	decfsz	wreg,f,c
  2012  00117A  D7FE               	goto	u2797
  2013  00117C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2014  00117E  D7FC               	goto	u2797
  2015  001180  F000               	nop	
  2016                           
  2017                           ;LCD.c: 52: LCDout(0b0011);
  2018  001182  0E03               	movlw	3
  2019  001184  EC50  F008         	call	_LCDout
  2020                           
  2021                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2022  001188  0E0D               	movlw	13
  2023  00118A  6E2A               	movwf	??_initLCD& (0+255),c
  2024  00118C  0EFC               	movlw	252
  2025  00118E                     u2807:
  2026  00118E  2EE8               	decfsz	wreg,f,c
  2027  001190  D7FE               	goto	u2807
  2028  001192  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2029  001194  D7FC               	goto	u2807
  2030                           
  2031                           ;LCD.c: 54: LCDout(0b0011);
  2032  001196  0E03               	movlw	3
  2033  001198  EC50  F008         	call	_LCDout
  2034                           
  2035                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2036  00119C  0E85               	movlw	133
  2037  00119E                     u2817:
  2038  00119E  2EE8               	decfsz	wreg,f,c
  2039  0011A0  D7FE               	goto	u2817
  2040  0011A2  F000               	nop	
  2041                           
  2042                           ;LCD.c: 56: LCDout(0b0011);
  2043  0011A4  0E03               	movlw	3
  2044  0011A6  EC50  F008         	call	_LCDout
  2045                           
  2046                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2047  0011AA  0E21               	movlw	33
  2048  0011AC                     u2827:
  2049  0011AC  2EE8               	decfsz	wreg,f,c
  2050  0011AE  D7FE               	goto	u2827
  2051  0011B0  F000               	nop	
  2052                           
  2053                           ;LCD.c: 58: LCDout(0b0010);
  2054  0011B2  0E02               	movlw	2
  2055  0011B4  EC50  F008         	call	_LCDout
  2056                           
  2057                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2058  0011B8  0E21               	movlw	33
  2059  0011BA                     u2837:
  2060  0011BA  2EE8               	decfsz	wreg,f,c
  2061  0011BC  D7FE               	goto	u2837
  2062  0011BE  F000               	nop	
  2063                           
  2064                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2065  0011C0  0E00               	movlw	0
  2066  0011C2  6E28               	movwf	SendLCD@type,c
  2067  0011C4  0E28               	movlw	40
  2068  0011C6  EC2D  F00C         	call	_SendLCD
  2069                           
  2070                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2071  0011CA  0E21               	movlw	33
  2072  0011CC                     u2847:
  2073  0011CC  2EE8               	decfsz	wreg,f,c
  2074  0011CE  D7FE               	goto	u2847
  2075  0011D0  F000               	nop	
  2076                           
  2077                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2078  0011D2  0E00               	movlw	0
  2079  0011D4  6E28               	movwf	SendLCD@type,c
  2080  0011D6  0E08               	movlw	8
  2081  0011D8  EC2D  F00C         	call	_SendLCD
  2082                           
  2083                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2084  0011DC  0E21               	movlw	33
  2085  0011DE                     u2857:
  2086  0011DE  2EE8               	decfsz	wreg,f,c
  2087  0011E0  D7FE               	goto	u2857
  2088  0011E2  F000               	nop	
  2089                           
  2090                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2091  0011E4  0E00               	movlw	0
  2092  0011E6  6E28               	movwf	SendLCD@type,c
  2093  0011E8  0E01               	movlw	1
  2094  0011EA  EC2D  F00C         	call	_SendLCD
  2095                           
  2096                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2097  0011EE  0E0D               	movlw	13
  2098  0011F0  6E2A               	movwf	??_initLCD& (0+255),c
  2099  0011F2  0EFC               	movlw	252
  2100  0011F4                     u2867:
  2101  0011F4  2EE8               	decfsz	wreg,f,c
  2102  0011F6  D7FE               	goto	u2867
  2103  0011F8  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2104  0011FA  D7FC               	goto	u2867
  2105                           
  2106                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2107  0011FC  0E00               	movlw	0
  2108  0011FE  6E28               	movwf	SendLCD@type,c
  2109  001200  0E06               	movlw	6
  2110  001202  EC2D  F00C         	call	_SendLCD
  2111                           
  2112                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2113  001206  0E21               	movlw	33
  2114  001208                     u2877:
  2115  001208  2EE8               	decfsz	wreg,f,c
  2116  00120A  D7FE               	goto	u2877
  2117  00120C  F000               	nop	
  2118                           
  2119                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2120  00120E  0E00               	movlw	0
  2121  001210  6E28               	movwf	SendLCD@type,c
  2122  001212  0E0C               	movlw	12
  2123  001214  EC2D  F00C         	call	_SendLCD
  2124                           
  2125                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2126  001218  0E21               	movlw	33
  2127  00121A                     u2887:
  2128  00121A  2EE8               	decfsz	wreg,f,c
  2129  00121C  D7FE               	goto	u2887
  2130  00121E  F000               	nop	
  2131  001220  0012               	return		;funcret
  2132  001222                     __end_of_initLCD:
  2133                           	opt stack 0
  2134                           tblptru	equ	0xFF8
  2135                           prodh	equ	0xFF4
  2136                           prodl	equ	0xFF3
  2137                           intcon	equ	0xFF2
  2138                           postinc0	equ	0xFEE
  2139                           wreg	equ	0xFE8
  2140                           indf1	equ	0xFE7
  2141                           fsr1h	equ	0xFE2
  2142                           fsr1l	equ	0xFE1
  2143                           indf2	equ	0xFDF
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _initIR *****************
  2151 ;; Defined at:
  2152 ;;		line 30 in file "IR_Reading.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;		None
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;		None               void
  2159 ;; Registers used:
  2160 ;;		wreg, status,2
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2166 ;;      Params:         0       0       0       0
  2167 ;;      Locals:         0       0       0       0
  2168 ;;      Temps:          0       0       0       0
  2169 ;;      Totals:         0       0       0       0
  2170 ;;Total ram usage:        0 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    3
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_main
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text5
  2181  001900                     __ptext5:
  2182                           	opt stack 0
  2183  001900                     _initIR:
  2184                           	opt stack 27
  2185                           
  2186                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2187                           
  2188                           ;incstack = 0
  2189  001900  9489               	bcf	3977,2,c	;volatile
  2190                           
  2191                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2192  001902  9689               	bcf	3977,3,c	;volatile
  2193                           
  2194                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2195  001904  8492               	bsf	3986,2,c	;volatile
  2196                           
  2197                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2198  001906  8692               	bsf	3986,3,c	;volatile
  2199                           
  2200                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2201  001908  94B8               	bcf	4024,2,c	;volatile
  2202                           
  2203                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2204  00190A  96B8               	bcf	4024,3,c	;volatile
  2205                           
  2206                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2207  00190C  9CB8               	bcf	4024,6,c	;volatile
  2208                           
  2209                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2210  00190E  9EB8               	bcf	4024,7,c	;volatile
  2211                           
  2212                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2213  001910  0E06               	movlw	6
  2214  001912  6E63               	movwf	3939,c	;volatile
  2215                           
  2216                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2217  001914  0E06               	movlw	6
  2218  001916  6E62               	movwf	3938,c	;volatile
  2219                           
  2220                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2221  001918  9096               	bcf	3990,0,c	;volatile
  2222                           
  2223                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2224  00191A  9296               	bcf	3990,1,c	;volatile
  2225                           
  2226                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2227  00191C  0E59               	movlw	89
  2228  00191E  6EB7               	movwf	4023,c	;volatile
  2229  001920  0012               	return		;funcret
  2230  001922                     __end_of_initIR:
  2231                           	opt stack 0
  2232                           tblptru	equ	0xFF8
  2233                           prodh	equ	0xFF4
  2234                           prodl	equ	0xFF3
  2235                           intcon	equ	0xFF2
  2236                           postinc0	equ	0xFEE
  2237                           wreg	equ	0xFE8
  2238                           indf1	equ	0xFE7
  2239                           fsr1h	equ	0xFE2
  2240                           fsr1l	equ	0xFE1
  2241                           indf2	equ	0xFDF
  2242                           postinc2	equ	0xFDE
  2243                           postdec2	equ	0xFDD
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _fullSpeedBack *****************
  2249 ;; Defined at:
  2250 ;;		line 125 in file "dc_motor.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2253 ;;		 -> main@mL(9), 
  2254 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2255 ;;		 -> main@mR(9), 
  2256 ;;  power           1   11[BANK0 ] unsigned char 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;		None               void
  2261 ;; Registers used:
  2262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2268 ;;      Params:         0       5       0       0
  2269 ;;      Locals:         0       0       0       0
  2270 ;;      Temps:          0       0       0       0
  2271 ;;      Totals:         0       5       0       0
  2272 ;;Total ram usage:        5 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    6
  2275 ;; This function calls:
  2276 ;;		_fullSpeedAhead
  2277 ;; This function is called by:
  2278 ;;		_main
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text6
  2283  0016CE                     __ptext6:
  2284                           	opt stack 0
  2285  0016CE                     _fullSpeedBack:
  2286                           	opt stack 24
  2287                           
  2288                           ;dc_motor.c: 128: mL->direction=0;
  2289                           
  2290                           ;incstack = 0
  2291  0016CE  0100               	movlb	0	; () banked
  2292  0016D0  EE20 F001          	lfsr	2,1
  2293  0016D4  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2294  0016D6  26D9               	addwf	fsr2l,f,c
  2295  0016D8  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2296  0016DA  22DA               	addwfc	fsr2h,f,c
  2297  0016DC  0E00               	movlw	0
  2298  0016DE  6EDF               	movwf	indf2,c
  2299                           
  2300                           ;dc_motor.c: 129: mR->direction=0;
  2301  0016E0  0100               	movlb	0	; () banked
  2302  0016E2  EE20 F001          	lfsr	2,1
  2303  0016E6  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2304  0016E8  26D9               	addwf	fsr2l,f,c
  2305  0016EA  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2306  0016EC  22DA               	addwfc	fsr2h,f,c
  2307  0016EE  0E00               	movlw	0
  2308  0016F0  6EDF               	movwf	indf2,c
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2312  0016F2  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2313  0016F6  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2314  0016FA  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2315  0016FE  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2316  001702  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2317  001706  EC3C  F00A         	call	_fullSpeedAhead	;wreg free
  2318  00170A  0012               	return		;funcret
  2319  00170C                     __end_of_fullSpeedBack:
  2320                           	opt stack 0
  2321                           tblptru	equ	0xFF8
  2322                           prodh	equ	0xFF4
  2323                           prodl	equ	0xFF3
  2324                           intcon	equ	0xFF2
  2325                           postinc0	equ	0xFEE
  2326                           wreg	equ	0xFE8
  2327                           indf1	equ	0xFE7
  2328                           fsr1h	equ	0xFE2
  2329                           fsr1l	equ	0xFE1
  2330                           indf2	equ	0xFDF
  2331                           postinc2	equ	0xFDE
  2332                           postdec2	equ	0xFDD
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _enableSensor *****************
  2338 ;; Defined at:
  2339 ;;		line 106 in file "IR_Reading.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  sensor          1    wreg     unsigned char 
  2342 ;;  status          1   35[COMRAM] unsigned char 
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  sensor          1   36[COMRAM] unsigned char 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;		None               void
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2354 ;;      Params:         1       0       0       0
  2355 ;;      Locals:         1       0       0       0
  2356 ;;      Temps:          0       0       0       0
  2357 ;;      Totals:         2       0       0       0
  2358 ;;Total ram usage:        2 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    3
  2361 ;; This function calls:
  2362 ;;		Nothing
  2363 ;; This function is called by:
  2364 ;;		_main
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text7
  2369  0018B4                     __ptext7:
  2370                           	opt stack 0
  2371  0018B4                     _enableSensor:
  2372                           	opt stack 27
  2373                           
  2374                           ;incstack = 0
  2375                           ;enableSensor@sensor stored from wreg
  2376  0018B4  6E25               	movwf	enableSensor@sensor,c
  2377                           
  2378                           ;IR_Reading.c: 108: if (sensor==0){
  2379  0018B6  5025               	movf	enableSensor@sensor,w,c
  2380  0018B8  A4D8               	btfss	status,2,c
  2381  0018BA  D006               	goto	l2314
  2382                           
  2383                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2384  0018BC  B024               	btfsc	enableSensor@status,0,c
  2385  0018BE  D002               	bra	u1755
  2386  0018C0  908D               	bcf	3981,0,c	;volatile
  2387  0018C2  D001               	bra	u1756
  2388  0018C4                     u1755:
  2389  0018C4  808D               	bsf	3981,0,c	;volatile
  2390  0018C6                     u1756:
  2391                           
  2392                           ;IR_Reading.c: 110: } else if (sensor==1){
  2393  0018C6  0012               	return	
  2394  0018C8                     l2314:
  2395  0018C8  0425               	decf	enableSensor@sensor,w,c
  2396  0018CA  A4D8               	btfss	status,2,c
  2397  0018CC  0012               	return	
  2398                           
  2399                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2400  0018CE  B024               	btfsc	enableSensor@status,0,c
  2401  0018D0  D002               	bra	u1775
  2402  0018D2  928D               	bcf	3981,1,c	;volatile
  2403  0018D4  D001               	bra	u1776
  2404  0018D6                     u1775:
  2405  0018D6  828D               	bsf	3981,1,c	;volatile
  2406  0018D8                     u1776:
  2407  0018D8  0012               	return	
  2408  0018DA                     __end_of_enableSensor:
  2409                           	opt stack 0
  2410                           tblptru	equ	0xFF8
  2411                           prodh	equ	0xFF4
  2412                           prodl	equ	0xFF3
  2413                           intcon	equ	0xFF2
  2414                           postinc0	equ	0xFEE
  2415                           wreg	equ	0xFE8
  2416                           indf1	equ	0xFE7
  2417                           fsr1h	equ	0xFE2
  2418                           fsr1l	equ	0xFE1
  2419                           indf2	equ	0xFDF
  2420                           postinc2	equ	0xFDE
  2421                           postdec2	equ	0xFDD
  2422                           fsr2h	equ	0xFDA
  2423                           fsr2l	equ	0xFD9
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _VerifySignal *****************
  2427 ;; Defined at:
  2428 ;;		line 55 in file "RFID_Reader.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2431 ;;		 -> ReceivedString(16), 
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;  hexByte         2   44[COMRAM] unsigned int 
  2434 ;;  i               1   46[COMRAM] unsigned char 
  2435 ;;  checksum        1   43[COMRAM] unsigned char 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  1    wreg      unsigned char 
  2438 ;; Registers used:
  2439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2445 ;;      Params:         2       0       0       0
  2446 ;;      Locals:         4       0       0       0
  2447 ;;      Temps:          6       0       0       0
  2448 ;;      Totals:        12       0       0       0
  2449 ;;Total ram usage:       12 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    3
  2452 ;; This function calls:
  2453 ;;		Nothing
  2454 ;; This function is called by:
  2455 ;;		_main
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text8
  2460  001222                     __ptext8:
  2461                           	opt stack 0
  2462  001222                     _VerifySignal:
  2463                           	opt stack 27
  2464                           
  2465                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2466                           
  2467                           ;incstack = 0
  2468  001222  0E00               	movlw	0
  2469  001224  6E2C               	movwf	VerifySignal@checksum,c
  2470                           
  2471                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2472  001226  0E00               	movlw	0
  2473  001228  6E2E               	movwf	VerifySignal@hexByte+1,c
  2474  00122A  0E00               	movlw	0
  2475  00122C  6E2D               	movwf	VerifySignal@hexByte,c
  2476                           
  2477                           ;RFID_Reader.c: 58: unsigned char i=0;
  2478  00122E  0E00               	movlw	0
  2479  001230  6E2F               	movwf	VerifySignal@i,c
  2480                           
  2481                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2482  001232  EE20 F004          	lfsr	2,4
  2483  001236  5024               	movf	VerifySignal@Signal,w,c
  2484  001238  26D9               	addwf	fsr2l,f,c
  2485  00123A  5025               	movf	VerifySignal@Signal+1,w,c
  2486  00123C  22DA               	addwfc	fsr2h,f,c
  2487  00123E  50DF               	movf	indf2,w,c
  2488  001240  6E26               	movwf	??_VerifySignal& (0+255),c
  2489  001242  EE20 F003          	lfsr	2,3
  2490  001246  5024               	movf	VerifySignal@Signal,w,c
  2491  001248  26D9               	addwf	fsr2l,f,c
  2492  00124A  5025               	movf	VerifySignal@Signal+1,w,c
  2493  00124C  22DA               	addwfc	fsr2h,f,c
  2494  00124E  50DF               	movf	indf2,w,c
  2495  001250  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2496  001252  5027               	movf	??_VerifySignal+1,w,c
  2497  001254  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2498  001256  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2499  001258  5026               	movf	??_VerifySignal,w,c
  2500  00125A  2428               	addwf	??_VerifySignal+2,w,c
  2501  00125C  6E2D               	movwf	VerifySignal@hexByte,c
  2502  00125E  0E00               	movlw	0
  2503  001260  2029               	addwfc	??_VerifySignal+3,w,c
  2504  001262  6E2E               	movwf	VerifySignal@hexByte+1,c
  2505                           
  2506                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2507  001264  EE20 F002          	lfsr	2,2
  2508  001268  5024               	movf	VerifySignal@Signal,w,c
  2509  00126A  26D9               	addwf	fsr2l,f,c
  2510  00126C  5025               	movf	VerifySignal@Signal+1,w,c
  2511  00126E  22DA               	addwfc	fsr2h,f,c
  2512  001270  50DF               	movf	indf2,w,c
  2513  001272  182D               	xorwf	VerifySignal@hexByte,w,c
  2514  001274  6E2C               	movwf	VerifySignal@checksum,c
  2515                           
  2516                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2517  001276  0E05               	movlw	5
  2518  001278  6E2F               	movwf	VerifySignal@i,c
  2519  00127A                     l2510:
  2520  00127A  0E09               	movlw	9
  2521  00127C  642F               	cpfsgt	VerifySignal@i,c
  2522  00127E  D001               	goto	l2514
  2523  001280  D028               	goto	l2522
  2524  001282                     l2514:
  2525                           
  2526                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2527  001282  502F               	movf	VerifySignal@i,w,c
  2528  001284  6E26               	movwf	??_VerifySignal& (0+255),c
  2529  001286  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2530  001288  0E01               	movlw	1
  2531  00128A  2626               	addwf	??_VerifySignal,f,c
  2532  00128C  0E00               	movlw	0
  2533  00128E  2227               	addwfc	??_VerifySignal+1,f,c
  2534  001290  5026               	movf	??_VerifySignal,w,c
  2535  001292  2424               	addwf	VerifySignal@Signal,w,c
  2536  001294  6ED9               	movwf	fsr2l,c
  2537  001296  5027               	movf	??_VerifySignal+1,w,c
  2538  001298  2025               	addwfc	VerifySignal@Signal+1,w,c
  2539  00129A  6EDA               	movwf	fsr2h,c
  2540  00129C  50DF               	movf	indf2,w,c
  2541  00129E  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2542  0012A0  502F               	movf	VerifySignal@i,w,c
  2543  0012A2  0D01               	mullw	1
  2544  0012A4  50F3               	movf	prodl,w,c
  2545  0012A6  2424               	addwf	VerifySignal@Signal,w,c
  2546  0012A8  6ED9               	movwf	fsr2l,c
  2547  0012AA  50F4               	movf	prodh,w,c
  2548  0012AC  2025               	addwfc	VerifySignal@Signal+1,w,c
  2549  0012AE  6EDA               	movwf	fsr2h,c
  2550  0012B0  50DF               	movf	indf2,w,c
  2551  0012B2  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2552  0012B4  5029               	movf	??_VerifySignal+3,w,c
  2553  0012B6  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2554  0012B8  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2555  0012BA  5028               	movf	??_VerifySignal+2,w,c
  2556  0012BC  242A               	addwf	??_VerifySignal+4,w,c
  2557  0012BE  6E2D               	movwf	VerifySignal@hexByte,c
  2558  0012C0  0E00               	movlw	0
  2559  0012C2  202B               	addwfc	??_VerifySignal+5,w,c
  2560  0012C4  6E2E               	movwf	VerifySignal@hexByte+1,c
  2561                           
  2562                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2563  0012C6  502C               	movf	VerifySignal@checksum,w,c
  2564  0012C8  182D               	xorwf	VerifySignal@hexByte,w,c
  2565  0012CA  6E2C               	movwf	VerifySignal@checksum,c
  2566  0012CC  0E02               	movlw	2
  2567  0012CE  262F               	addwf	VerifySignal@i,f,c
  2568  0012D0  D7D4               	goto	l2510
  2569  0012D2                     l2522:
  2570                           
  2571                           ;RFID_Reader.c: 68: }
  2572                           ;RFID_Reader.c: 71: return 1;
  2573  0012D2  0E01               	movlw	1
  2574  0012D4  0012               	return	
  2575  0012D6                     __end_of_VerifySignal:
  2576                           	opt stack 0
  2577                           tblptru	equ	0xFF8
  2578                           prodh	equ	0xFF4
  2579                           prodl	equ	0xFF3
  2580                           intcon	equ	0xFF2
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           indf1	equ	0xFE7
  2584                           fsr1h	equ	0xFE2
  2585                           fsr1l	equ	0xFE1
  2586                           indf2	equ	0xFDF
  2587                           postinc2	equ	0xFDE
  2588                           postdec2	equ	0xFDD
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _ScanWithRange *****************
  2594 ;; Defined at:
  2595 ;;		line 91 in file "Movement.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2598 ;;		 -> main@mL(9), 
  2599 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2600 ;;		 -> main@mR(9), 
  2601 ;;  milliseconds    2   17[BANK0 ] int 
  2602 ;;  MoveTimeEntr    2   19[BANK0 ] PTR unsigned char 
  2603 ;;		 -> main@MoveTime(200), 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  buf            40   26[BANK0 ] unsigned char [40]
  2606 ;;  SensorResult    4   74[BANK0 ] unsigned int [2]
  2607 ;;  RightFlag       2   80[BANK0 ] unsigned int 
  2608 ;;  LeftFlag        2   78[BANK0 ] unsigned int 
  2609 ;;  DirectionFou    2   71[BANK0 ] const unsigned int 
  2610 ;;  i               2   69[BANK0 ] unsigned int 
  2611 ;;  n               2   66[BANK0 ] unsigned int 
  2612 ;;  power           1   73[BANK0 ] const unsigned char 
  2613 ;;  TimeAboveThr    1   68[BANK0 ] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      unsigned char 
  2616 ;; Registers used:
  2617 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2623 ;;      Params:         0       8       0       0
  2624 ;;      Locals:         0      56       0       0
  2625 ;;      Temps:          0       5       0       0
  2626 ;;      Totals:         0      69       0       0
  2627 ;;Total ram usage:       69 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    7
  2630 ;; This function calls:
  2631 ;;		_LCD_String
  2632 ;;		_SendLCD
  2633 ;;		_SetLine
  2634 ;;		_delay_tenth_s
  2635 ;;		_grabLeftIR
  2636 ;;		_grabRightIR
  2637 ;;		_sprintf
  2638 ;;		_stop
  2639 ;;		_turnLeft
  2640 ;;		_turnRight
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text9
  2647  000B80                     __ptext9:
  2648                           	opt stack 0
  2649  000B80                     _ScanWithRange:
  2650                           	opt stack 23
  2651                           
  2652                           ;Movement.c: 95: unsigned int SensorResult[2]={0,0};
  2653                           
  2654                           ;incstack = 0
  2655  000B80  C0C0  F0AA         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  2656  000B84  C0C1  F0AB         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  2657  000B88  C0C2  F0AC         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  2658  000B8C  C0C3  F0AD         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  2659                           
  2660                           ;Movement.c: 96: unsigned int LeftFlag=0;
  2661  000B90  0E00               	movlw	0
  2662  000B92  0100               	movlb	0	; () banked
  2663  000B94  6FAF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2664  000B96  0E00               	movlw	0
  2665  000B98  6FAE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2666                           
  2667                           ;Movement.c: 97: unsigned int RightFlag=0;
  2668  000B9A  0E00               	movlw	0
  2669  000B9C  0100               	movlb	0	; () banked
  2670  000B9E  6FB1               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2671  000BA0  0E00               	movlw	0
  2672  000BA2  6FB0               	movwf	ScanWithRange@RightFlag& (0+255),b
  2673                           
  2674                           ;Movement.c: 98: char buf[40];
  2675                           ;Movement.c: 99: unsigned int i=0;
  2676  000BA4  0E00               	movlw	0
  2677  000BA6  0100               	movlb	0	; () banked
  2678  000BA8  6FA6               	movwf	(ScanWithRange@i+1)& (0+255),b
  2679  000BAA  0E00               	movlw	0
  2680  000BAC  6FA5               	movwf	ScanWithRange@i& (0+255),b
  2681                           
  2682                           ;Movement.c: 100: unsigned int n=0;
  2683  000BAE  0E00               	movlw	0
  2684  000BB0  0100               	movlb	0	; () banked
  2685  000BB2  6FA3               	movwf	(ScanWithRange@n+1)& (0+255),b
  2686  000BB4  0E00               	movlw	0
  2687  000BB6  6FA2               	movwf	ScanWithRange@n& (0+255),b
  2688                           
  2689                           ;Movement.c: 101: unsigned char TimeAboveThreshold=0;
  2690  000BB8  0E00               	movlw	0
  2691  000BBA  0100               	movlb	0	; () banked
  2692  000BBC  6FA4               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2693                           
  2694                           ;Movement.c: 103: const unsigned int DirectionFoundThreshold=3000;
  2695  000BBE  0E0B               	movlw	11
  2696  000BC0  0100               	movlb	0	; () banked
  2697  000BC2  6FA8               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2698  000BC4  0EB8               	movlw	184
  2699  000BC6  6FA7               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2700                           
  2701                           ;Movement.c: 105: const unsigned char power=45;
  2702  000BC8  0E2D               	movlw	45
  2703  000BCA  0100               	movlb	0	; () banked
  2704  000BCC  6FA9               	movwf	ScanWithRange@power& (0+255),b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;Movement.c: 114: turnLeft(mL,mR, 100);
  2708  000BCE  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2709  000BD2  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2710  000BD6  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2711  000BDA  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2712  000BDE  0E64               	movlw	100
  2713  000BE0  0100               	movlb	0	; () banked
  2714  000BE2  6F6B               	movwf	turnLeft@power& (0+255),b
  2715  000BE4  ECA5  F00B         	call	_turnLeft	;wreg free
  2716                           
  2717                           ;Movement.c: 115: delay_tenth_s(3);
  2718  000BE8  0E03               	movlw	3
  2719  000BEA  ECC4  F00B         	call	_delay_tenth_s
  2720                           
  2721                           ;Movement.c: 116: stop(mL,mR);
  2722  000BEE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2723  000BF2  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2724  000BF6  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2725  000BFA  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2726  000BFE  EC6B  F009         	call	_stop	;wreg free
  2727                           
  2728                           ;Movement.c: 119: turnRight(mL,mR, power);
  2729  000C02  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2730  000C06  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2731  000C0A  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2732  000C0E  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2733  000C12  C0A9  F06B         	movff	ScanWithRange@power,turnRight@power
  2734  000C16  EC86  F00B         	call	_turnRight	;wreg free
  2735                           
  2736                           ;Movement.c: 122: TMR0L = 0;
  2737  000C1A  0E00               	movlw	0
  2738  000C1C  6ED6               	movwf	4054,c	;volatile
  2739                           
  2740                           ;Movement.c: 123: TMR0H = 0;
  2741  000C1E  0E00               	movlw	0
  2742  000C20  6ED7               	movwf	4055,c	;volatile
  2743                           
  2744                           ;Movement.c: 124: T0CONbits.TMR0ON=1;
  2745  000C22  8ED5               	bsf	4053,7,c	;volatile
  2746                           
  2747                           ;Movement.c: 126: for (i=1; i<=milliseconds; i++) {
  2748  000C24  0E00               	movlw	0
  2749  000C26  0100               	movlb	0	; () banked
  2750  000C28  6FA6               	movwf	(ScanWithRange@i+1)& (0+255),b
  2751  000C2A  0E01               	movlw	1
  2752  000C2C  6FA5               	movwf	ScanWithRange@i& (0+255),b
  2753  000C2E  D0F8               	goto	l3118
  2754  000C30                     l3054:
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;Movement.c: 129: SensorResult[0]=grabLeftIR();
  2758  000C30  ECB5  F00A         	call	_grabLeftIR	;wreg free
  2759  000C34  C024  F0AA         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2760  000C38  C025  F0AB         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2761                           
  2762                           ;Movement.c: 130: SensorResult[1]=grabRightIR();
  2763  000C3C  EC7C  F00A         	call	_grabRightIR	;wreg free
  2764  000C40  C024  F0AC         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2765  000C44  C025  F0AD         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2766                           
  2767                           ;Movement.c: 134: CAP1BUFH=0;
  2768  000C48  0E00               	movlw	0
  2769  000C4A  6E69               	movwf	3945,c	;volatile
  2770                           
  2771                           ;Movement.c: 135: CAP1BUFL=0;
  2772  000C4C  0E00               	movlw	0
  2773  000C4E  6E68               	movwf	3944,c	;volatile
  2774                           
  2775                           ;Movement.c: 136: CAP2BUFH=0;
  2776  000C50  0E00               	movlw	0
  2777  000C52  6E67               	movwf	3943,c	;volatile
  2778                           
  2779                           ;Movement.c: 137: CAP2BUFL=0;
  2780  000C54  0E00               	movlw	0
  2781  000C56  6E66               	movwf	3942,c	;volatile
  2782                           
  2783                           ;Movement.c: 141: SendLCD(0b00000001,0);
  2784  000C58  0E00               	movlw	0
  2785  000C5A  6E28               	movwf	SendLCD@type,c
  2786  000C5C  0E01               	movlw	1
  2787  000C5E  EC2D  F00C         	call	_SendLCD
  2788                           
  2789                           ;Movement.c: 142: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2790  000C62  0E21               	movlw	33
  2791  000C64                     u2897:
  2792  000C64  2EE8               	decfsz	wreg,f,c
  2793  000C66  D7FE               	goto	u2897
  2794  000C68  F000               	nop	
  2795                           
  2796                           ;Movement.c: 143: SendLCD(0b00000010,0);
  2797  000C6A  0E00               	movlw	0
  2798  000C6C  6E28               	movwf	SendLCD@type,c
  2799  000C6E  0E02               	movlw	2
  2800  000C70  EC2D  F00C         	call	_SendLCD
  2801                           
  2802                           ;Movement.c: 144: _delay((unsigned long)((2)*(8000000/4000.0)));
  2803  000C74  0E06               	movlw	6
  2804  000C76  0100               	movlb	0	; () banked
  2805  000C78  6F75               	movwf	??_ScanWithRange& (0+255),b
  2806  000C7A  0E30               	movlw	48
  2807  000C7C                     u2907:
  2808  000C7C  2EE8               	decfsz	wreg,f,c
  2809  000C7E  D7FE               	goto	u2907
  2810  000C80  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2811  000C82  D7FC               	goto	u2907
  2812  000C84  D000               	nop2	
  2813                           
  2814                           ;Movement.c: 145: SetLine(1);
  2815  000C86  0E01               	movlw	1
  2816  000C88  EC15  F00C         	call	_SetLine
  2817                           
  2818                           ;Movement.c: 146: LCD_String("     ScanIR");
  2819  000C8C  0E2D               	movlw	low STR_1
  2820  000C8E  6E2A               	movwf	LCD_String@string,c
  2821  000C90  0E03               	movlw	high STR_1
  2822  000C92  6E2B               	movwf	LCD_String@string+1,c
  2823  000C94  ECEE  F00A         	call	_LCD_String	;wreg free
  2824                           
  2825                           ;Movement.c: 147: SetLine(2);
  2826  000C98  0E02               	movlw	2
  2827  000C9A  EC15  F00C         	call	_SetLine
  2828                           
  2829                           ;Movement.c: 148: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2830  000C9E  0E7A               	movlw	low ScanWithRange@buf
  2831  000CA0  6E30               	movwf	sprintf@sp,c
  2832  000CA2  0E00               	movlw	high ScanWithRange@buf
  2833  000CA4  6E31               	movwf	sprintf@sp+1,c
  2834  000CA6  0E0C               	movlw	low (STR_6+1)
  2835  000CA8  6E32               	movwf	sprintf@f,c
  2836  000CAA  0E03               	movlw	high (STR_6+1)
  2837  000CAC  6E33               	movwf	sprintf@f+1,c
  2838  000CAE  C0AA  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2839  000CB2  C0AB  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2840  000CB6  C0AC  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2841  000CBA  C0AD  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2842  000CBE  EC3D  F004         	call	_sprintf	;wreg free
  2843                           
  2844                           ;Movement.c: 149: LCD_String(buf);
  2845  000CC2  0E7A               	movlw	low ScanWithRange@buf
  2846  000CC4  6E2A               	movwf	LCD_String@string,c
  2847  000CC6  0E00               	movlw	high ScanWithRange@buf
  2848  000CC8  6E2B               	movwf	LCD_String@string+1,c
  2849  000CCA  ECEE  F00A         	call	_LCD_String	;wreg free
  2850                           
  2851                           ;Movement.c: 151: if (RightFlag==0){
  2852  000CCE  0100               	movlb	0	; () banked
  2853  000CD0  51B0               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2854  000CD2  0100               	movlb	0	; () banked
  2855  000CD4  11B1               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2856  000CD6  A4D8               	btfss	status,2,c
  2857  000CD8  D018               	goto	l221
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;Movement.c: 152: if (SensorResult[1]>DirectionFoundThreshold) {
  2861  000CDA  0100               	movlb	0	; () banked
  2862  000CDC  51AC               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2863  000CDE  0100               	movlb	0	; () banked
  2864  000CE0  5DA7               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2865  000CE2  0100               	movlb	0	; () banked
  2866  000CE4  51AD               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2867  000CE6  0100               	movlb	0	; () banked
  2868  000CE8  59A8               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2869  000CEA  B0D8               	btfsc	status,0,c
  2870  000CEC  D00E               	goto	l221
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;Movement.c: 153: RightFlag= (TMR0H<<8)+TMR0L;
  2874  000CEE  50D7               	movf	4055,w,c	;volatile
  2875  000CF0  0100               	movlb	0	; () banked
  2876  000CF2  6F76               	movwf	(??_ScanWithRange+1)& (0+255),b
  2877  000CF4  6B75               	clrf	??_ScanWithRange& (0+255),b
  2878  000CF6  50D6               	movf	4054,w,c	;volatile
  2879  000CF8  0100               	movlb	0	; () banked
  2880  000CFA  2575               	addwf	??_ScanWithRange& (0+255),w,b
  2881  000CFC  0100               	movlb	0	; () banked
  2882  000CFE  6FB0               	movwf	ScanWithRange@RightFlag& (0+255),b
  2883  000D00  0E00               	movlw	0
  2884  000D02  0100               	movlb	0	; () banked
  2885  000D04  2176               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2886  000D06  0100               	movlb	0	; () banked
  2887  000D08  6FB1               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2888  000D0A                     l221:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;Movement.c: 154: }
  2892                           ;Movement.c: 155: }
  2893                           ;Movement.c: 157: if (LeftFlag==0){
  2894  000D0A  0100               	movlb	0	; () banked
  2895  000D0C  51AE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2896  000D0E  0100               	movlb	0	; () banked
  2897  000D10  11AF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2898  000D12  A4D8               	btfss	status,2,c
  2899  000D14  D018               	goto	l223
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;Movement.c: 158: if (SensorResult[0]>DirectionFoundThreshold) {
  2903  000D16  0100               	movlb	0	; () banked
  2904  000D18  51AA               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2905  000D1A  0100               	movlb	0	; () banked
  2906  000D1C  5DA7               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2907  000D1E  0100               	movlb	0	; () banked
  2908  000D20  51AB               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2909  000D22  0100               	movlb	0	; () banked
  2910  000D24  59A8               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2911  000D26  B0D8               	btfsc	status,0,c
  2912  000D28  D00E               	goto	l223
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;Movement.c: 159: LeftFlag=(TMR0H<<8)+TMR0L;
  2916  000D2A  50D7               	movf	4055,w,c	;volatile
  2917  000D2C  0100               	movlb	0	; () banked
  2918  000D2E  6F76               	movwf	(??_ScanWithRange+1)& (0+255),b
  2919  000D30  6B75               	clrf	??_ScanWithRange& (0+255),b
  2920  000D32  50D6               	movf	4054,w,c	;volatile
  2921  000D34  0100               	movlb	0	; () banked
  2922  000D36  2575               	addwf	??_ScanWithRange& (0+255),w,b
  2923  000D38  0100               	movlb	0	; () banked
  2924  000D3A  6FAE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2925  000D3C  0E00               	movlw	0
  2926  000D3E  0100               	movlb	0	; () banked
  2927  000D40  2176               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  2928  000D42  0100               	movlb	0	; () banked
  2929  000D44  6FAF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2930  000D46                     l223:
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;Movement.c: 160: }
  2934                           ;Movement.c: 161: }
  2935                           ;Movement.c: 168: if (LeftFlag>0) {
  2936  000D46  0100               	movlb	0	; () banked
  2937  000D48  51AE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  2938  000D4A  0100               	movlb	0	; () banked
  2939  000D4C  11AF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  2940  000D4E  B4D8               	btfsc	status,2,c
  2941  000D50  D064               	goto	l3116
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;Movement.c: 171: if (RightFlag>0) {
  2945  000D52  0100               	movlb	0	; () banked
  2946  000D54  51B0               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2947  000D56  0100               	movlb	0	; () banked
  2948  000D58  11B1               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  2949  000D5A  B4D8               	btfsc	status,2,c
  2950  000D5C  D052               	goto	l226
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;Movement.c: 172: TimeAboveThreshold = LeftFlag - RightFlag;
  2954  000D5E  0100               	movlb	0	; () banked
  2955  000D60  51B0               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2956  000D62  0800               	sublw	0
  2957  000D64  0100               	movlb	0	; () banked
  2958  000D66  25AE               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  2959  000D68  0100               	movlb	0	; () banked
  2960  000D6A  6FA4               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;Movement.c: 173: TMR0L = 0;
  2964  000D6C  0E00               	movlw	0
  2965  000D6E  6ED6               	movwf	4054,c	;volatile
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;Movement.c: 174: TMR0H = 0;
  2969  000D70  0E00               	movlw	0
  2970  000D72  6ED7               	movwf	4055,c	;volatile
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;Movement.c: 175: stop(mL,mR);
  2974  000D74  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2975  000D78  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2976  000D7C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2977  000D80  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2978  000D84  EC6B  F009         	call	_stop	;wreg free
  2979                           
  2980                           ;Movement.c: 176: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  2981  000D88  D00C               	goto	l3100
  2982  000D8A                     l3098:
  2983                           
  2984                           ;Movement.c: 177: turnLeft(mL,mR, power);
  2985  000D8A  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2986  000D8E  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2987  000D92  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2988  000D96  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2989  000D9A  C0A9  F06B         	movff	ScanWithRange@power,turnLeft@power
  2990  000D9E  ECA5  F00B         	call	_turnLeft	;wreg free
  2991  000DA2                     l3100:
  2992  000DA2  0100               	movlb	0	; () banked
  2993  000DA4  90D8               	bcf	status,0,c
  2994  000DA6  31A4               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  2995  000DA8  0100               	movlb	0	; () banked
  2996  000DAA  6F75               	movwf	??_ScanWithRange& (0+255),b
  2997  000DAC  6B76               	clrf	(??_ScanWithRange+1)& (0+255),b
  2998  000DAE  50D6               	movf	4054,w,c	;volatile
  2999  000DB0  CFD7 F077          	movff	4055,??_ScanWithRange+2	;volatile
  3000  000DB4  0100               	movlb	0	; () banked
  3001  000DB6  6B78               	clrf	(??_ScanWithRange+3)& (0+255),b
  3002  000DB8  C077  F078         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3003  000DBC  0100               	movlb	0	; () banked
  3004  000DBE  6B77               	clrf	(??_ScanWithRange+2)& (0+255),b
  3005  000DC0  0100               	movlb	0	; () banked
  3006  000DC2  2777               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3007  000DC4  0E00               	movlw	0
  3008  000DC6  2378               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3009  000DC8  0100               	movlb	0	; () banked
  3010  000DCA  5175               	movf	??_ScanWithRange& (0+255),w,b
  3011  000DCC  0100               	movlb	0	; () banked
  3012  000DCE  5D77               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3013  000DD0  0100               	movlb	0	; () banked
  3014  000DD2  5178               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3015  000DD4  0A80               	xorlw	128
  3016  000DD6  0100               	movlb	0	; () banked
  3017  000DD8  6F79               	movwf	(??_ScanWithRange+4)& (0+255),b
  3018  000DDA  0100               	movlb	0	; () banked
  3019  000DDC  5176               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3020  000DDE  0A80               	xorlw	128
  3021  000DE0  0100               	movlb	0	; () banked
  3022  000DE2  5979               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3023  000DE4  A0D8               	btfss	status,0,c
  3024  000DE6  D7D1               	goto	l3098
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;Movement.c: 178: }
  3028                           ;Movement.c: 179: T0CONbits.TMR0ON=0;
  3029  000DE8  9ED5               	bcf	4053,7,c	;volatile
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;Movement.c: 180: stop(mL,mR);
  3033  000DEA  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3034  000DEE  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3035  000DF2  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3036  000DF6  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3037  000DFA  EC6B  F009         	call	_stop	;wreg free
  3038  000DFE                     l3104:
  3039                           
  3040                           ;Movement.c: 181: return 2;
  3041  000DFE  0E02               	movlw	2
  3042  000E00  0012               	return	
  3043  000E02                     l226:
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;Movement.c: 184: T0CONbits.TMR0ON=0;
  3047  000E02  9ED5               	bcf	4053,7,c	;volatile
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;Movement.c: 185: stop(mL,mR);
  3051  000E04  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3052  000E08  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3053  000E0C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3054  000E10  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3055  000E14  EC6B  F009         	call	_stop	;wreg free
  3056  000E18  D7F2               	goto	l3104
  3057  000E1A                     l3116:
  3058  000E1A  0100               	movlb	0	; () banked
  3059  000E1C  4BA5               	infsnz	ScanWithRange@i& (0+255),f,b
  3060  000E1E  2BA6               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3061  000E20                     l3118:
  3062                           
  3063                           ; BSR set to: 0
  3064  000E20  0100               	movlb	0	; () banked
  3065  000E22  51A5               	movf	ScanWithRange@i& (0+255),w,b
  3066  000E24  0100               	movlb	0	; () banked
  3067  000E26  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  3068  000E28  0100               	movlb	0	; () banked
  3069  000E2A  51A6               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3070  000E2C  0100               	movlb	0	; () banked
  3071  000E2E  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3072  000E30  B0D8               	btfsc	status,0,c
  3073  000E32  D6FE               	goto	l3054
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;Movement.c: 187: }
  3077                           ;Movement.c: 188: }
  3078                           ;Movement.c: 189: }
  3079                           ;Movement.c: 192: turnRight(mL,mR, 100);
  3080                           
  3081                           ; BSR set to: 0
  3082  000E34  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3083  000E38  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3084  000E3C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3085  000E40  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3086  000E44  0E64               	movlw	100
  3087  000E46  0100               	movlb	0	; () banked
  3088  000E48  6F6B               	movwf	turnRight@power& (0+255),b
  3089  000E4A  EC86  F00B         	call	_turnRight	;wreg free
  3090                           
  3091                           ;Movement.c: 193: delay_tenth_s(2);
  3092  000E4E  0E02               	movlw	2
  3093  000E50  ECC4  F00B         	call	_delay_tenth_s
  3094                           
  3095                           ;Movement.c: 194: stop(mL,mR);
  3096  000E54  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3097  000E58  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3098  000E5C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3099  000E60  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3100  000E64  EC6B  F009         	call	_stop	;wreg free
  3101                           
  3102                           ;Movement.c: 195: return -1;
  3103  000E68  0EFF               	movlw	255
  3104  000E6A  0012               	return	
  3105  000E6C                     __end_of_ScanWithRange:
  3106                           	opt stack 0
  3107                           tblptru	equ	0xFF8
  3108                           prodh	equ	0xFF4
  3109                           prodl	equ	0xFF3
  3110                           intcon	equ	0xFF2
  3111                           postinc0	equ	0xFEE
  3112                           wreg	equ	0xFE8
  3113                           indf1	equ	0xFE7
  3114                           fsr1h	equ	0xFE2
  3115                           fsr1l	equ	0xFE1
  3116                           indf2	equ	0xFDF
  3117                           postinc2	equ	0xFDE
  3118                           postdec2	equ	0xFDD
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _turnRight *****************
  3124 ;; Defined at:
  3125 ;;		line 98 in file "dc_motor.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3128 ;;		 -> main@mL(9), 
  3129 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3130 ;;		 -> main@mR(9), 
  3131 ;;  power           1   11[BANK0 ] unsigned char 
  3132 ;; Auto vars:     Size  Location     Type
  3133 ;;		None
  3134 ;; Return value:  Size  Location     Type
  3135 ;;		None               void
  3136 ;; Registers used:
  3137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3138 ;; Tracked objects:
  3139 ;;		On entry : 0/0
  3140 ;;		On exit  : 0/0
  3141 ;;		Unchanged: 0/0
  3142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3143 ;;      Params:         0       5       0       0
  3144 ;;      Locals:         0       0       0       0
  3145 ;;      Temps:          0       0       0       0
  3146 ;;      Totals:         0       5       0       0
  3147 ;;Total ram usage:        5 bytes
  3148 ;; Hardware stack levels used:    1
  3149 ;; Hardware stack levels required when called:    6
  3150 ;; This function calls:
  3151 ;;		_fullSpeedAhead
  3152 ;; This function is called by:
  3153 ;;		_ScanWithRange
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text10
  3158  00170C                     __ptext10:
  3159                           	opt stack 0
  3160  00170C                     _turnRight:
  3161                           	opt stack 23
  3162                           
  3163                           ;dc_motor.c: 102: mL->direction=0;
  3164                           
  3165                           ;incstack = 0
  3166  00170C  0100               	movlb	0	; () banked
  3167  00170E  EE20 F001          	lfsr	2,1
  3168  001712  5167               	movf	turnRight@mL& (0+255),w,b
  3169  001714  26D9               	addwf	fsr2l,f,c
  3170  001716  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3171  001718  22DA               	addwfc	fsr2h,f,c
  3172  00171A  0E00               	movlw	0
  3173  00171C  6EDF               	movwf	indf2,c
  3174                           
  3175                           ;dc_motor.c: 103: mR->direction=1;
  3176  00171E  0100               	movlb	0	; () banked
  3177  001720  EE20 F001          	lfsr	2,1
  3178  001724  5169               	movf	turnRight@mR& (0+255),w,b
  3179  001726  26D9               	addwf	fsr2l,f,c
  3180  001728  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3181  00172A  22DA               	addwfc	fsr2h,f,c
  3182  00172C  0E01               	movlw	1
  3183  00172E  6EDF               	movwf	indf2,c
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3187  001730  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3188  001734  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3189  001738  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3190  00173C  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3191  001740  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3192  001744  EC3C  F00A         	call	_fullSpeedAhead	;wreg free
  3193  001748  0012               	return		;funcret
  3194  00174A                     __end_of_turnRight:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           prodh	equ	0xFF4
  3198                           prodl	equ	0xFF3
  3199                           intcon	equ	0xFF2
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           indf1	equ	0xFE7
  3203                           fsr1h	equ	0xFE2
  3204                           fsr1l	equ	0xFE1
  3205                           indf2	equ	0xFDF
  3206                           postinc2	equ	0xFDE
  3207                           postdec2	equ	0xFDD
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _turnLeft *****************
  3213 ;; Defined at:
  3214 ;;		line 87 in file "dc_motor.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3217 ;;		 -> main@mL(9), 
  3218 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3219 ;;		 -> main@mR(9), 
  3220 ;;  power           1   11[BANK0 ] unsigned char 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;		None
  3223 ;; Return value:  Size  Location     Type
  3224 ;;		None               void
  3225 ;; Registers used:
  3226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3232 ;;      Params:         0       5       0       0
  3233 ;;      Locals:         0       0       0       0
  3234 ;;      Temps:          0       0       0       0
  3235 ;;      Totals:         0       5       0       0
  3236 ;;Total ram usage:        5 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    6
  3239 ;; This function calls:
  3240 ;;		_fullSpeedAhead
  3241 ;; This function is called by:
  3242 ;;		_ScanWithRange
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text11
  3247  00174A                     __ptext11:
  3248                           	opt stack 0
  3249  00174A                     _turnLeft:
  3250                           	opt stack 23
  3251                           
  3252                           ;dc_motor.c: 91: mL->direction=1;
  3253                           
  3254                           ;incstack = 0
  3255  00174A  0100               	movlb	0	; () banked
  3256  00174C  EE20 F001          	lfsr	2,1
  3257  001750  5167               	movf	turnLeft@mL& (0+255),w,b
  3258  001752  26D9               	addwf	fsr2l,f,c
  3259  001754  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3260  001756  22DA               	addwfc	fsr2h,f,c
  3261  001758  0E01               	movlw	1
  3262  00175A  6EDF               	movwf	indf2,c
  3263                           
  3264                           ;dc_motor.c: 92: mR->direction=0;
  3265  00175C  0100               	movlb	0	; () banked
  3266  00175E  EE20 F001          	lfsr	2,1
  3267  001762  5169               	movf	turnLeft@mR& (0+255),w,b
  3268  001764  26D9               	addwf	fsr2l,f,c
  3269  001766  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3270  001768  22DA               	addwfc	fsr2h,f,c
  3271  00176A  0E00               	movlw	0
  3272  00176C  6EDF               	movwf	indf2,c
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3276  00176E  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3277  001772  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3278  001776  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3279  00177A  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3280  00177E  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3281  001782  EC3C  F00A         	call	_fullSpeedAhead	;wreg free
  3282  001786  0012               	return		;funcret
  3283  001788                     __end_of_turnLeft:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           intcon	equ	0xFF2
  3289                           postinc0	equ	0xFEE
  3290                           wreg	equ	0xFE8
  3291                           indf1	equ	0xFE7
  3292                           fsr1h	equ	0xFE2
  3293                           fsr1l	equ	0xFE1
  3294                           indf2	equ	0xFDF
  3295                           postinc2	equ	0xFDE
  3296                           postdec2	equ	0xFDD
  3297                           fsr2h	equ	0xFDA
  3298                           fsr2l	equ	0xFD9
  3299                           status	equ	0xFD8
  3300                           
  3301 ;; *************** function _fullSpeedAhead *****************
  3302 ;; Defined at:
  3303 ;;		line 108 in file "dc_motor.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3306 ;;		 -> main@mL(9), 
  3307 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3308 ;;		 -> main@mR(9), 
  3309 ;;  power           1    6[BANK0 ] unsigned char 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;		None
  3312 ;; Return value:  Size  Location     Type
  3313 ;;		None               void
  3314 ;; Registers used:
  3315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3321 ;;      Params:         0       5       0       0
  3322 ;;      Locals:         0       0       0       0
  3323 ;;      Temps:          1       0       0       0
  3324 ;;      Totals:         1       5       0       0
  3325 ;;Total ram usage:        6 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    5
  3328 ;; This function calls:
  3329 ;;		_setMotorPWM
  3330 ;; This function is called by:
  3331 ;;		_turnLeft
  3332 ;;		_turnRight
  3333 ;;		_fullSpeedBack
  3334 ;;		_main
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text12
  3339  001478                     __ptext12:
  3340                           	opt stack 0
  3341  001478                     _fullSpeedAhead:
  3342                           	opt stack 24
  3343                           
  3344                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3345                           
  3346                           ;incstack = 0
  3347  001478  D02C               	goto	l65
  3348  00147A                     l2828:
  3349                           
  3350                           ;dc_motor.c: 112: if(mL->power<power){
  3351  00147A  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3352  00147E  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3353  001482  0100               	movlb	0	; () banked
  3354  001484  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3355  001486  5CDE               	subwf	postinc2,w,c
  3356  001488  B0D8               	btfsc	status,0,c
  3357  00148A  D005               	goto	l2832
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;dc_motor.c: 113: mL->power++;
  3361  00148C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3362  001490  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3363  001494  2ADF               	incf	indf2,f,c
  3364  001496                     l2832:
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;dc_motor.c: 114: }
  3368                           ;dc_motor.c: 115: if(mR->power<power){
  3369  001496  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3370  00149A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3371  00149E  0100               	movlb	0	; () banked
  3372  0014A0  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3373  0014A2  5CDE               	subwf	postinc2,w,c
  3374  0014A4  B0D8               	btfsc	status,0,c
  3375  0014A6  D005               	goto	l2836
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;dc_motor.c: 116: mR->power++;
  3379  0014A8  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3380  0014AC  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3381  0014B0  2ADF               	incf	indf2,f,c
  3382  0014B2                     l2836:
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;dc_motor.c: 117: }
  3386                           ;dc_motor.c: 118: setMotorPWM(mL);
  3387  0014B2  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3388  0014B6  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3389  0014BA  EC36  F007         	call	_setMotorPWM	;wreg free
  3390                           
  3391                           ;dc_motor.c: 119: setMotorPWM(mR);
  3392  0014BE  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3393  0014C2  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3394  0014C6  EC36  F007         	call	_setMotorPWM	;wreg free
  3395                           
  3396                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3397  0014CA  0E21               	movlw	33
  3398  0014CC                     u2917:
  3399  0014CC  2EE8               	decfsz	wreg,f,c
  3400  0014CE  D7FE               	goto	u2917
  3401  0014D0  F000               	nop	
  3402  0014D2                     l65:
  3403  0014D2  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3404  0014D6  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3405  0014DA  0100               	movlb	0	; () banked
  3406  0014DC  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3407  0014DE  5CDE               	subwf	postinc2,w,c
  3408  0014E0  A0D8               	btfss	status,0,c
  3409  0014E2  D7CB               	goto	l2828
  3410                           
  3411                           ; BSR set to: 0
  3412  0014E4  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3413  0014E8  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3414  0014EC  0100               	movlb	0	; () banked
  3415  0014EE  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3416  0014F0  5CDE               	subwf	postinc2,w,c
  3417  0014F2  B0D8               	btfsc	status,0,c
  3418  0014F4  0012               	return	
  3419  0014F6  D7C1               	goto	l2828
  3420  0014F8                     __end_of_fullSpeedAhead:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           prodh	equ	0xFF4
  3424                           prodl	equ	0xFF3
  3425                           intcon	equ	0xFF2
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           indf1	equ	0xFE7
  3429                           fsr1h	equ	0xFE2
  3430                           fsr1l	equ	0xFE1
  3431                           indf2	equ	0xFDF
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function _delay_tenth_s *****************
  3439 ;; Defined at:
  3440 ;;		line 32 in file "Movement.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  tenth_second    1    wreg     unsigned char 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3445 ;;  i               2   37[COMRAM] unsigned int 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;		None               void
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3455 ;;      Params:         0       0       0       0
  3456 ;;      Locals:         3       0       0       0
  3457 ;;      Temps:          1       0       0       0
  3458 ;;      Totals:         4       0       0       0
  3459 ;;Total ram usage:        4 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    3
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_ScanWithRange
  3466 ;;		_main
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text13
  3471  001788                     __ptext13:
  3472                           	opt stack 0
  3473  001788                     _delay_tenth_s:
  3474                           	opt stack 27
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;incstack = 0
  3478                           ;delay_tenth_s@tenth_seconds stored from wreg
  3479  001788  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3480                           
  3481                           ;Movement.c: 33: unsigned int i=0;
  3482  00178A  0E00               	movlw	0
  3483  00178C  6E27               	movwf	delay_tenth_s@i+1,c
  3484  00178E  0E00               	movlw	0
  3485  001790  6E26               	movwf	delay_tenth_s@i,c
  3486                           
  3487                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3488  001792  0E00               	movlw	0
  3489  001794  6E27               	movwf	delay_tenth_s@i+1,c
  3490  001796  0E01               	movlw	1
  3491  001798  6E26               	movwf	delay_tenth_s@i,c
  3492  00179A  D009               	goto	l2172
  3493  00179C                     l2168:
  3494                           
  3495                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3496  00179C  0E82               	movlw	130
  3497  00179E  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3498  0017A0  0EDE               	movlw	222
  3499  0017A2                     u2927:
  3500  0017A2  2EE8               	decfsz	wreg,f,c
  3501  0017A4  D7FE               	goto	u2927
  3502  0017A6  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3503  0017A8  D7FC               	goto	u2927
  3504  0017AA  4A26               	infsnz	delay_tenth_s@i,f,c
  3505  0017AC  2A27               	incf	delay_tenth_s@i+1,f,c
  3506  0017AE                     l2172:
  3507  0017AE  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3508  0017B0  0D02               	mullw	2
  3509  0017B2  5026               	movf	delay_tenth_s@i,w,c
  3510  0017B4  5CF3               	subwf	prodl,w,c
  3511  0017B6  5027               	movf	delay_tenth_s@i+1,w,c
  3512  0017B8  58F4               	subwfb	prodh,w,c
  3513  0017BA  A0D8               	btfss	status,0,c
  3514  0017BC  0012               	return	
  3515  0017BE  D7EE               	goto	l2168
  3516  0017C0                     __end_of_delay_tenth_s:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           intcon	equ	0xFF2
  3522                           postinc0	equ	0xFEE
  3523                           wreg	equ	0xFE8
  3524                           indf1	equ	0xFE7
  3525                           fsr1h	equ	0xFE2
  3526                           fsr1l	equ	0xFE1
  3527                           indf2	equ	0xFDF
  3528                           postinc2	equ	0xFDE
  3529                           postdec2	equ	0xFDD
  3530                           fsr2h	equ	0xFDA
  3531                           fsr2l	equ	0xFD9
  3532                           status	equ	0xFD8
  3533                           
  3534 ;; *************** function _ScanIR *****************
  3535 ;; Defined at:
  3536 ;;		line 45 in file "Movement.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3539 ;;		 -> main@mL(9), 
  3540 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3541 ;;		 -> main@mR(9), 
  3542 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3543 ;;		 -> main@Move(1), 
  3544 ;;  MoveTime        2   19[BANK0 ] PTR unsigned char 
  3545 ;;		 -> main@MoveTime(200), 
  3546 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3547 ;;		 -> main@MoveType(100), 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3550 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3551 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      unsigned char 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3561 ;;      Params:         0      10       0       0
  3562 ;;      Locals:         0      46       0       0
  3563 ;;      Temps:          1       0       0       0
  3564 ;;      Totals:         1      56       0       0
  3565 ;;Total ram usage:       57 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    7
  3568 ;; This function calls:
  3569 ;;		_LCD_String
  3570 ;;		_SendLCD
  3571 ;;		_SetLine
  3572 ;;		_grabLeftIR
  3573 ;;		_grabRightIR
  3574 ;;		_sprintf
  3575 ;;		_stop
  3576 ;; This function is called by:
  3577 ;;		_main
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text14
  3582  000FA6                     __ptext14:
  3583                           	opt stack 0
  3584  000FA6                     _ScanIR:
  3585                           	opt stack 23
  3586                           
  3587                           ;Movement.c: 49: unsigned int SensorResult[2]={0,0};
  3588                           
  3589                           ;incstack = 0
  3590  000FA6  C0BC  F0A1         	movff	ScanIR@F3882,ScanIR@SensorResult
  3591  000FAA  C0BD  F0A2         	movff	ScanIR@F3882+1,ScanIR@SensorResult+1
  3592  000FAE  C0BE  F0A3         	movff	ScanIR@F3882+2,ScanIR@SensorResult+2
  3593  000FB2  C0BF  F0A4         	movff	ScanIR@F3882+3,ScanIR@SensorResult+3
  3594                           
  3595                           ;Movement.c: 50: char buf[40];
  3596                           ;Movement.c: 54: const unsigned int DirectionMoveThreshold=2500;
  3597  000FB6  0E09               	movlw	9
  3598  000FB8  0100               	movlb	0	; () banked
  3599  000FBA  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3600  000FBC  0EC4               	movlw	196
  3601  000FBE  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;Movement.c: 57: SensorResult[0]=grabLeftIR();
  3605  000FC0  ECB5  F00A         	call	_grabLeftIR	;wreg free
  3606  000FC4  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3607  000FC8  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3608                           
  3609                           ;Movement.c: 58: SensorResult[1]=grabRightIR();
  3610  000FCC  EC7C  F00A         	call	_grabRightIR	;wreg free
  3611  000FD0  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3612  000FD4  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3613                           
  3614                           ;Movement.c: 62: CAP1BUFH=0;
  3615  000FD8  0E00               	movlw	0
  3616  000FDA  6E69               	movwf	3945,c	;volatile
  3617                           
  3618                           ;Movement.c: 63: CAP1BUFL=0;
  3619  000FDC  0E00               	movlw	0
  3620  000FDE  6E68               	movwf	3944,c	;volatile
  3621                           
  3622                           ;Movement.c: 64: CAP2BUFH=0;
  3623  000FE0  0E00               	movlw	0
  3624  000FE2  6E67               	movwf	3943,c	;volatile
  3625                           
  3626                           ;Movement.c: 65: CAP2BUFL=0;
  3627  000FE4  0E00               	movlw	0
  3628  000FE6  6E66               	movwf	3942,c	;volatile
  3629                           
  3630                           ;Movement.c: 68: SendLCD(0b00000001,0);
  3631  000FE8  0E00               	movlw	0
  3632  000FEA  6E28               	movwf	SendLCD@type,c
  3633  000FEC  0E01               	movlw	1
  3634  000FEE  EC2D  F00C         	call	_SendLCD
  3635                           
  3636                           ;Movement.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3637  000FF2  0E21               	movlw	33
  3638  000FF4                     u2937:
  3639  000FF4  2EE8               	decfsz	wreg,f,c
  3640  000FF6  D7FE               	goto	u2937
  3641  000FF8  F000               	nop	
  3642                           
  3643                           ;Movement.c: 70: SendLCD(0b00000010,0);
  3644  000FFA  0E00               	movlw	0
  3645  000FFC  6E28               	movwf	SendLCD@type,c
  3646  000FFE  0E02               	movlw	2
  3647  001000  EC2D  F00C         	call	_SendLCD
  3648                           
  3649                           ;Movement.c: 71: _delay((unsigned long)((2)*(8000000/4000.0)));
  3650  001004  0E06               	movlw	6
  3651  001006  6E39               	movwf	??_ScanIR& (0+255),c
  3652  001008  0E30               	movlw	48
  3653  00100A                     u2947:
  3654  00100A  2EE8               	decfsz	wreg,f,c
  3655  00100C  D7FE               	goto	u2947
  3656  00100E  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3657  001010  D7FC               	goto	u2947
  3658  001012  D000               	nop2	
  3659                           
  3660                           ;Movement.c: 72: SetLine(1);
  3661  001014  0E01               	movlw	1
  3662  001016  EC15  F00C         	call	_SetLine
  3663                           
  3664                           ;Movement.c: 73: LCD_String("     ScanIR");
  3665  00101A  0E2D               	movlw	low STR_1
  3666  00101C  6E2A               	movwf	LCD_String@string,c
  3667  00101E  0E03               	movlw	high STR_1
  3668  001020  6E2B               	movwf	LCD_String@string+1,c
  3669  001022  ECEE  F00A         	call	_LCD_String	;wreg free
  3670                           
  3671                           ;Movement.c: 74: SetLine(2);
  3672  001026  0E02               	movlw	2
  3673  001028  EC15  F00C         	call	_SetLine
  3674                           
  3675                           ;Movement.c: 75: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3676  00102C  0E77               	movlw	low ScanIR@buf
  3677  00102E  6E30               	movwf	sprintf@sp,c
  3678  001030  0E00               	movlw	high ScanIR@buf
  3679  001032  6E31               	movwf	sprintf@sp+1,c
  3680  001034  0E0C               	movlw	low (STR_6+1)
  3681  001036  6E32               	movwf	sprintf@f,c
  3682  001038  0E03               	movlw	high (STR_6+1)
  3683  00103A  6E33               	movwf	sprintf@f+1,c
  3684  00103C  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3685  001040  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3686  001044  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3687  001048  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3688  00104C  EC3D  F004         	call	_sprintf	;wreg free
  3689                           
  3690                           ;Movement.c: 76: LCD_String(buf);
  3691  001050  0E77               	movlw	low ScanIR@buf
  3692  001052  6E2A               	movwf	LCD_String@string,c
  3693  001054  0E00               	movlw	high ScanIR@buf
  3694  001056  6E2B               	movwf	LCD_String@string+1,c
  3695  001058  ECEE  F00A         	call	_LCD_String	;wreg free
  3696                           
  3697                           ;Movement.c: 80: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  3698                           ;Movement.c: 81: DirectionMoveThreshold)) {
  3699  00105C  0100               	movlb	0	; () banked
  3700  00105E  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3701  001060  0100               	movlb	0	; () banked
  3702  001062  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3703  001064  0100               	movlb	0	; () banked
  3704  001066  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3705  001068  0100               	movlb	0	; () banked
  3706  00106A  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3707  00106C  B0D8               	btfsc	status,0,c
  3708  00106E  D00C               	goto	l3028
  3709                           
  3710                           ; BSR set to: 0
  3711  001070  0100               	movlb	0	; () banked
  3712  001072  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3713  001074  0100               	movlb	0	; () banked
  3714  001076  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3715  001078  0100               	movlb	0	; () banked
  3716  00107A  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3717  00107C  0100               	movlb	0	; () banked
  3718  00107E  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3719  001080  B0D8               	btfsc	status,0,c
  3720  001082  D002               	goto	l3028
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;Movement.c: 82: return 2;
  3724  001084  0E02               	movlw	2
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;Movement.c: 83: } else {
  3728                           
  3729                           ; BSR set to: 0
  3730  001086  0012               	return	
  3731  001088                     l3028:
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;Movement.c: 84: stop(mL,mR);
  3735  001088  C06D  F062         	movff	ScanIR@mL,stop@mL
  3736  00108C  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3737  001090  C06F  F064         	movff	ScanIR@mR,stop@mR
  3738  001094  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3739  001098  EC6B  F009         	call	_stop	;wreg free
  3740                           
  3741                           ;Movement.c: 85: return 0;
  3742  00109C  0E00               	movlw	0
  3743  00109E  0012               	return	
  3744  0010A0                     __end_of_ScanIR:
  3745                           	opt stack 0
  3746                           tblptru	equ	0xFF8
  3747                           prodh	equ	0xFF4
  3748                           prodl	equ	0xFF3
  3749                           intcon	equ	0xFF2
  3750                           postinc0	equ	0xFEE
  3751                           wreg	equ	0xFE8
  3752                           indf1	equ	0xFE7
  3753                           fsr1h	equ	0xFE2
  3754                           fsr1l	equ	0xFE1
  3755                           indf2	equ	0xFDF
  3756                           postinc2	equ	0xFDE
  3757                           postdec2	equ	0xFDD
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function _stop *****************
  3763 ;; Defined at:
  3764 ;;		line 67 in file "dc_motor.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3767 ;;		 -> main@mL(9), 
  3768 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3769 ;;		 -> main@mR(9), 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;		None
  3772 ;; Return value:  Size  Location     Type
  3773 ;;		None               void
  3774 ;; Registers used:
  3775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3781 ;;      Params:         0       4       0       0
  3782 ;;      Locals:         0       0       0       0
  3783 ;;      Temps:          0       0       0       0
  3784 ;;      Totals:         0       4       0       0
  3785 ;;Total ram usage:        4 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    5
  3788 ;; This function calls:
  3789 ;;		_setMotorPWM
  3790 ;; This function is called by:
  3791 ;;		_ScanIR
  3792 ;;		_ScanWithRange
  3793 ;;		_main
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text15
  3798  0012D6                     __ptext15:
  3799                           	opt stack 0
  3800  0012D6                     _stop:
  3801                           	opt stack 25
  3802                           
  3803                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3804                           
  3805                           ;incstack = 0
  3806  0012D6  D028               	goto	l2860
  3807  0012D8                     l2846:
  3808                           
  3809                           ;dc_motor.c: 71: if(mL->power>0){
  3810  0012D8  C062  FFD9         	movff	stop@mL,fsr2l
  3811  0012DC  C063  FFDA         	movff	stop@mL+1,fsr2h
  3812  0012E0  50DF               	movf	indf2,w,c
  3813  0012E2  B4D8               	btfsc	status,2,c
  3814  0012E4  D005               	goto	l2850
  3815                           
  3816                           ;dc_motor.c: 72: mL->power--;
  3817  0012E6  C062  FFD9         	movff	stop@mL,fsr2l
  3818  0012EA  C063  FFDA         	movff	stop@mL+1,fsr2h
  3819  0012EE  06DF               	decf	indf2,f,c
  3820  0012F0                     l2850:
  3821                           
  3822                           ;dc_motor.c: 73: }
  3823                           ;dc_motor.c: 74: if(mR->power>0){
  3824  0012F0  C064  FFD9         	movff	stop@mR,fsr2l
  3825  0012F4  C065  FFDA         	movff	stop@mR+1,fsr2h
  3826  0012F8  50DF               	movf	indf2,w,c
  3827  0012FA  B4D8               	btfsc	status,2,c
  3828  0012FC  D005               	goto	l2854
  3829                           
  3830                           ;dc_motor.c: 75: mR->power--;
  3831  0012FE  C064  FFD9         	movff	stop@mR,fsr2l
  3832  001302  C065  FFDA         	movff	stop@mR+1,fsr2h
  3833  001306  06DF               	decf	indf2,f,c
  3834  001308                     l2854:
  3835                           
  3836                           ;dc_motor.c: 76: }
  3837                           ;dc_motor.c: 77: setMotorPWM(mL);
  3838  001308  C062  F032         	movff	stop@mL,setMotorPWM@m
  3839  00130C  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3840  001310  EC36  F007         	call	_setMotorPWM	;wreg free
  3841                           
  3842                           ;dc_motor.c: 78: setMotorPWM(mR);
  3843  001314  C064  F032         	movff	stop@mR,setMotorPWM@m
  3844  001318  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3845  00131C  EC36  F007         	call	_setMotorPWM	;wreg free
  3846                           
  3847                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3848  001320  0E21               	movlw	33
  3849  001322                     u2957:
  3850  001322  2EE8               	decfsz	wreg,f,c
  3851  001324  D7FE               	goto	u2957
  3852  001326  F000               	nop	
  3853  001328                     l2860:
  3854  001328  C062  FFD9         	movff	stop@mL,fsr2l
  3855  00132C  C063  FFDA         	movff	stop@mL+1,fsr2h
  3856  001330  50DF               	movf	indf2,w,c
  3857  001332  A4D8               	btfss	status,2,c
  3858  001334  D7D1               	goto	l2846
  3859  001336  C064  FFD9         	movff	stop@mR,fsr2l
  3860  00133A  C065  FFDA         	movff	stop@mR+1,fsr2h
  3861  00133E  50DF               	movf	indf2,w,c
  3862  001340  A4D8               	btfss	status,2,c
  3863  001342  D7CA               	goto	l2846
  3864                           
  3865                           ;dc_motor.c: 80: }
  3866                           ;dc_motor.c: 81: mL->direction=1;
  3867  001344  0100               	movlb	0	; () banked
  3868  001346  EE20 F001          	lfsr	2,1
  3869  00134A  5162               	movf	stop@mL& (0+255),w,b
  3870  00134C  26D9               	addwf	fsr2l,f,c
  3871  00134E  5163               	movf	(stop@mL+1)& (0+255),w,b
  3872  001350  22DA               	addwfc	fsr2h,f,c
  3873  001352  0E01               	movlw	1
  3874  001354  6EDF               	movwf	indf2,c
  3875                           
  3876                           ;dc_motor.c: 82: mR->direction=1;
  3877  001356  0100               	movlb	0	; () banked
  3878  001358  EE20 F001          	lfsr	2,1
  3879  00135C  5164               	movf	stop@mR& (0+255),w,b
  3880  00135E  26D9               	addwf	fsr2l,f,c
  3881  001360  5165               	movf	(stop@mR+1)& (0+255),w,b
  3882  001362  22DA               	addwfc	fsr2h,f,c
  3883  001364  0E01               	movlw	1
  3884  001366  6EDF               	movwf	indf2,c
  3885                           
  3886                           ; BSR set to: 0
  3887  001368  0012               	return		;funcret
  3888  00136A                     __end_of_stop:
  3889                           	opt stack 0
  3890                           tblptru	equ	0xFF8
  3891                           prodh	equ	0xFF4
  3892                           prodl	equ	0xFF3
  3893                           intcon	equ	0xFF2
  3894                           postinc0	equ	0xFEE
  3895                           wreg	equ	0xFE8
  3896                           indf1	equ	0xFE7
  3897                           fsr1h	equ	0xFE2
  3898                           fsr1l	equ	0xFE1
  3899                           indf2	equ	0xFDF
  3900                           postinc2	equ	0xFDE
  3901                           postdec2	equ	0xFDD
  3902                           fsr2h	equ	0xFDA
  3903                           fsr2l	equ	0xFD9
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function _setMotorPWM *****************
  3907 ;; Defined at:
  3908 ;;		line 26 in file "dc_motor.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3911 ;;		 -> main@mR(9), main@mL(9), 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  PWMduty         2    0[BANK0 ] int 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3923 ;;      Params:         2       0       0       0
  3924 ;;      Locals:         0       2       0       0
  3925 ;;      Temps:          5       0       0       0
  3926 ;;      Totals:         7       2       0       0
  3927 ;;Total ram usage:        9 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    4
  3930 ;; This function calls:
  3931 ;;		___awdiv
  3932 ;;		___wmul
  3933 ;; This function is called by:
  3934 ;;		_stop
  3935 ;;		_fullSpeedAhead
  3936 ;;		_setMotorFullSpeed
  3937 ;;		_stopMotor
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text16
  3942  000E6C                     __ptext16:
  3943                           	opt stack 0
  3944  000E6C                     _setMotorPWM:
  3945                           	opt stack 25
  3946                           
  3947                           ;dc_motor.c: 28: int PWMduty;
  3948                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;incstack = 0
  3952  000E6C  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  3953  000E70  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3954  000E74  50DF               	movf	indf2,w,c
  3955  000E76  6E34               	movwf	??_setMotorPWM& (0+255),c
  3956  000E78  5034               	movf	??_setMotorPWM,w,c
  3957  000E7A  6E24               	movwf	___wmul@multiplier,c
  3958  000E7C  6A25               	clrf	___wmul@multiplier+1,c
  3959  000E7E  EE20 F007          	lfsr	2,7
  3960  000E82  5032               	movf	setMotorPWM@m,w,c
  3961  000E84  26D9               	addwf	fsr2l,f,c
  3962  000E86  5033               	movf	setMotorPWM@m+1,w,c
  3963  000E88  22DA               	addwfc	fsr2h,f,c
  3964  000E8A  CFDE F026          	movff	postinc2,___wmul@multiplicand
  3965  000E8E  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  3966  000E92  EC6D  F00C         	call	___wmul	;wreg free
  3967  000E96  C024  F02A         	movff	?___wmul,___awdiv@dividend
  3968  000E9A  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  3969  000E9E  0E00               	movlw	0
  3970  000EA0  6E2D               	movwf	___awdiv@divisor+1,c
  3971  000EA2  0E64               	movlw	100
  3972  000EA4  6E2C               	movwf	___awdiv@divisor,c
  3973  000EA6  ECFA  F009         	call	___awdiv	;wreg free
  3974  000EAA  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  3975  000EAE  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3976                           
  3977                           ;dc_motor.c: 32: if (m->direction)
  3978  000EB2  EE20 F001          	lfsr	2,1
  3979  000EB6  5032               	movf	setMotorPWM@m,w,c
  3980  000EB8  26D9               	addwf	fsr2l,f,c
  3981  000EBA  5033               	movf	setMotorPWM@m+1,w,c
  3982  000EBC  22DA               	addwfc	fsr2h,f,c
  3983  000EBE  50DF               	movf	indf2,w,c
  3984  000EC0  B4D8               	btfsc	status,2,c
  3985  000EC2  D02E               	goto	l2824
  3986                           
  3987                           ;dc_motor.c: 33: {
  3988                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3989  000EC4  EE20 F006          	lfsr	2,6
  3990  000EC8  5032               	movf	setMotorPWM@m,w,c
  3991  000ECA  26D9               	addwf	fsr2l,f,c
  3992  000ECC  5033               	movf	setMotorPWM@m+1,w,c
  3993  000ECE  22DA               	addwfc	fsr2h,f,c
  3994  000ED0  50DF               	movf	indf2,w,c
  3995  000ED2  6E34               	movwf	??_setMotorPWM& (0+255),c
  3996  000ED4  0E01               	movlw	1
  3997  000ED6  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3998  000ED8  2A34               	incf	??_setMotorPWM,f,c
  3999  000EDA  D002               	goto	u2204
  4000  000EDC                     u2205:
  4001  000EDC  90D8               	bcf	status,0,c
  4002  000EDE  3635               	rlcf	??_setMotorPWM+1,f,c
  4003  000EE0                     u2204:
  4004  000EE0  2E34               	decfsz	??_setMotorPWM,f,c
  4005  000EE2  D7FC               	goto	u2205
  4006  000EE4  5035               	movf	??_setMotorPWM+1,w,c
  4007  000EE6  108A               	iorwf	3978,w,c	;volatile
  4008  000EE8  6E8A               	movwf	3978,c	;volatile
  4009                           
  4010                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4011  000EEA  EE20 F007          	lfsr	2,7
  4012  000EEE  5032               	movf	setMotorPWM@m,w,c
  4013  000EF0  26D9               	addwf	fsr2l,f,c
  4014  000EF2  5033               	movf	setMotorPWM@m+1,w,c
  4015  000EF4  22DA               	addwfc	fsr2h,f,c
  4016  000EF6  CFDE F034          	movff	postinc2,??_setMotorPWM
  4017  000EFA  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4018  000EFE  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4019  000F02  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4020  000F06  1E36               	comf	??_setMotorPWM+2,f,c
  4021  000F08  1E37               	comf	??_setMotorPWM+3,f,c
  4022  000F0A  4A36               	infsnz	??_setMotorPWM+2,f,c
  4023  000F0C  2A37               	incf	??_setMotorPWM+3,f,c
  4024  000F0E  5034               	movf	??_setMotorPWM,w,c
  4025  000F10  2436               	addwf	??_setMotorPWM+2,w,c
  4026  000F12  0100               	movlb	0	; () banked
  4027  000F14  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4028  000F16  5035               	movf	??_setMotorPWM+1,w,c
  4029  000F18  2037               	addwfc	??_setMotorPWM+3,w,c
  4030  000F1A  0100               	movlb	0	; () banked
  4031  000F1C  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4032                           
  4033                           ;dc_motor.c: 36: }
  4034  000F1E  D014               	goto	l35
  4035  000F20                     l2824:
  4036                           
  4037                           ;dc_motor.c: 37: else
  4038                           ;dc_motor.c: 38: {
  4039                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4040  000F20  EE20 F006          	lfsr	2,6
  4041  000F24  5032               	movf	setMotorPWM@m,w,c
  4042  000F26  26D9               	addwf	fsr2l,f,c
  4043  000F28  5033               	movf	setMotorPWM@m+1,w,c
  4044  000F2A  22DA               	addwfc	fsr2h,f,c
  4045  000F2C  50DF               	movf	indf2,w,c
  4046  000F2E  6E34               	movwf	??_setMotorPWM& (0+255),c
  4047  000F30  0E01               	movlw	1
  4048  000F32  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4049  000F34  2A34               	incf	??_setMotorPWM,f,c
  4050  000F36  D002               	goto	u2214
  4051  000F38                     u2215:
  4052  000F38  90D8               	bcf	status,0,c
  4053  000F3A  3635               	rlcf	??_setMotorPWM+1,f,c
  4054  000F3C                     u2214:
  4055  000F3C  2E34               	decfsz	??_setMotorPWM,f,c
  4056  000F3E  D7FC               	goto	u2215
  4057  000F40  5035               	movf	??_setMotorPWM+1,w,c
  4058  000F42  0AFF               	xorlw	255
  4059  000F44  148A               	andwf	3978,w,c	;volatile
  4060  000F46  6E8A               	movwf	3978,c	;volatile
  4061  000F48                     l35:
  4062                           
  4063                           ;dc_motor.c: 40: }
  4064                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4065  000F48  EE20 F002          	lfsr	2,2
  4066  000F4C  5032               	movf	setMotorPWM@m,w,c
  4067  000F4E  26D9               	addwf	fsr2l,f,c
  4068  000F50  5033               	movf	setMotorPWM@m+1,w,c
  4069  000F52  22DA               	addwfc	fsr2h,f,c
  4070  000F54  CFDE F034          	movff	postinc2,??_setMotorPWM
  4071  000F58  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4072  000F5C  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4073  000F60  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4074  000F64  0100               	movlb	0	; () banked
  4075  000F66  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4076  000F68  46E8               	rlncf	wreg,f,c
  4077  000F6A  0BFC               	andlw	252
  4078  000F6C  6EDF               	movwf	indf2,c
  4079                           
  4080                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4081  000F6E  EE20 F004          	lfsr	2,4
  4082  000F72  5032               	movf	setMotorPWM@m,w,c
  4083  000F74  26D9               	addwf	fsr2l,f,c
  4084  000F76  5033               	movf	setMotorPWM@m+1,w,c
  4085  000F78  22DA               	addwfc	fsr2h,f,c
  4086  000F7A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4087  000F7E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4088  000F82  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4089  000F86  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4090  000F8A  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4091  000F8E  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4092  000F92  0E06               	movlw	6
  4093  000F94  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4094  000F96                     u2225:
  4095  000F96  3437               	rlcf	??_setMotorPWM+3,w,c
  4096  000F98  3237               	rrcf	??_setMotorPWM+3,f,c
  4097  000F9A  3236               	rrcf	??_setMotorPWM+2,f,c
  4098  000F9C  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4099  000F9E  D7FB               	goto	u2225
  4100  000FA0  5036               	movf	??_setMotorPWM+2,w,c
  4101  000FA2  6EDF               	movwf	indf2,c
  4102                           
  4103                           ; BSR set to: 0
  4104  000FA4  0012               	return		;funcret
  4105  000FA6                     __end_of_setMotorPWM:
  4106                           	opt stack 0
  4107                           tblptru	equ	0xFF8
  4108                           prodh	equ	0xFF4
  4109                           prodl	equ	0xFF3
  4110                           intcon	equ	0xFF2
  4111                           postinc0	equ	0xFEE
  4112                           wreg	equ	0xFE8
  4113                           indf1	equ	0xFE7
  4114                           fsr1h	equ	0xFE2
  4115                           fsr1l	equ	0xFE1
  4116                           indf2	equ	0xFDF
  4117                           postinc2	equ	0xFDE
  4118                           postdec2	equ	0xFDD
  4119                           fsr2h	equ	0xFDA
  4120                           fsr2l	equ	0xFD9
  4121                           status	equ	0xFD8
  4122                           
  4123 ;; *************** function ___awdiv *****************
  4124 ;; Defined at:
  4125 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;  dividend        2   41[COMRAM] int 
  4128 ;;  divisor         2   43[COMRAM] int 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;  quotient        2   47[COMRAM] int 
  4131 ;;  sign            1   46[COMRAM] unsigned char 
  4132 ;;  counter         1   45[COMRAM] unsigned char 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  2   41[COMRAM] int 
  4135 ;; Registers used:
  4136 ;;		wreg, status,2, status,0
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4142 ;;      Params:         4       0       0       0
  4143 ;;      Locals:         4       0       0       0
  4144 ;;      Temps:          0       0       0       0
  4145 ;;      Totals:         8       0       0       0
  4146 ;;Total ram usage:        8 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    3
  4149 ;; This function calls:
  4150 ;;		Nothing
  4151 ;; This function is called by:
  4152 ;;		_setMotorPWM
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           	psect	text17
  4157  0013F4                     __ptext17:
  4158                           	opt stack 0
  4159  0013F4                     ___awdiv:
  4160                           	opt stack 25
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;incstack = 0
  4164  0013F4  0E00               	movlw	0
  4165  0013F6  6E2F               	movwf	___awdiv@sign,c
  4166  0013F8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4167  0013FA  D006               	goto	l2782
  4168  0013FC  6C2C               	negf	___awdiv@divisor,c
  4169  0013FE  1E2D               	comf	___awdiv@divisor+1,f,c
  4170  001400  B0D8               	btfsc	status,0,c
  4171  001402  2A2D               	incf	___awdiv@divisor+1,f,c
  4172  001404  0E01               	movlw	1
  4173  001406  6E2F               	movwf	___awdiv@sign,c
  4174  001408                     l2782:
  4175  001408  AE2B               	btfss	___awdiv@dividend+1,7,c
  4176  00140A  D006               	goto	l2788
  4177  00140C  6C2A               	negf	___awdiv@dividend,c
  4178  00140E  1E2B               	comf	___awdiv@dividend+1,f,c
  4179  001410  B0D8               	btfsc	status,0,c
  4180  001412  2A2B               	incf	___awdiv@dividend+1,f,c
  4181  001414  0E01               	movlw	1
  4182  001416  1A2F               	xorwf	___awdiv@sign,f,c
  4183  001418                     l2788:
  4184  001418  0E00               	movlw	0
  4185  00141A  6E31               	movwf	___awdiv@quotient+1,c
  4186  00141C  0E00               	movlw	0
  4187  00141E  6E30               	movwf	___awdiv@quotient,c
  4188  001420  502C               	movf	___awdiv@divisor,w,c
  4189  001422  102D               	iorwf	___awdiv@divisor+1,w,c
  4190  001424  B4D8               	btfsc	status,2,c
  4191  001426  D01C               	goto	l2810
  4192  001428  0E01               	movlw	1
  4193  00142A  6E2E               	movwf	___awdiv@counter,c
  4194  00142C  D004               	goto	l2796
  4195  00142E                     l2794:
  4196  00142E  90D8               	bcf	status,0,c
  4197  001430  362C               	rlcf	___awdiv@divisor,f,c
  4198  001432  362D               	rlcf	___awdiv@divisor+1,f,c
  4199  001434  2A2E               	incf	___awdiv@counter,f,c
  4200  001436                     l2796:
  4201  001436  AE2D               	btfss	___awdiv@divisor+1,7,c
  4202  001438  D7FA               	goto	l2794
  4203  00143A                     l2798:
  4204  00143A  90D8               	bcf	status,0,c
  4205  00143C  3630               	rlcf	___awdiv@quotient,f,c
  4206  00143E  3631               	rlcf	___awdiv@quotient+1,f,c
  4207  001440  502C               	movf	___awdiv@divisor,w,c
  4208  001442  5C2A               	subwf	___awdiv@dividend,w,c
  4209  001444  502D               	movf	___awdiv@divisor+1,w,c
  4210  001446  582B               	subwfb	___awdiv@dividend+1,w,c
  4211  001448  A0D8               	btfss	status,0,c
  4212  00144A  D005               	goto	l2806
  4213  00144C  502C               	movf	___awdiv@divisor,w,c
  4214  00144E  5E2A               	subwf	___awdiv@dividend,f,c
  4215  001450  502D               	movf	___awdiv@divisor+1,w,c
  4216  001452  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4217  001454  8030               	bsf	___awdiv@quotient,0,c
  4218  001456                     l2806:
  4219  001456  90D8               	bcf	status,0,c
  4220  001458  322D               	rrcf	___awdiv@divisor+1,f,c
  4221  00145A  322C               	rrcf	___awdiv@divisor,f,c
  4222  00145C  2E2E               	decfsz	___awdiv@counter,f,c
  4223  00145E  D7ED               	goto	l2798
  4224  001460                     l2810:
  4225  001460  502F               	movf	___awdiv@sign,w,c
  4226  001462  B4D8               	btfsc	status,2,c
  4227  001464  D004               	goto	l2814
  4228  001466  6C30               	negf	___awdiv@quotient,c
  4229  001468  1E31               	comf	___awdiv@quotient+1,f,c
  4230  00146A  B0D8               	btfsc	status,0,c
  4231  00146C  2A31               	incf	___awdiv@quotient+1,f,c
  4232  00146E                     l2814:
  4233  00146E  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4234  001472  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4235  001476  0012               	return	
  4236  001478                     __end_of___awdiv:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           postinc0	equ	0xFEE
  4243                           wreg	equ	0xFE8
  4244                           indf1	equ	0xFE7
  4245                           fsr1h	equ	0xFE2
  4246                           fsr1l	equ	0xFE1
  4247                           indf2	equ	0xFDF
  4248                           postinc2	equ	0xFDE
  4249                           postdec2	equ	0xFDD
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function _sprintf *****************
  4255 ;; Defined at:
  4256 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4259 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4260 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4261 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  tmpval          4    0        struct .
  4264 ;;  cp              3    0        PTR const unsigned char 
  4265 ;;  width           2   10[BANK0 ] int 
  4266 ;;  val             2    7[BANK0 ] unsigned int 
  4267 ;;  ap              2    4[BANK0 ] PTR void [1]
  4268 ;;		 -> ?_sprintf(2), 
  4269 ;;  len             2    0        unsigned int 
  4270 ;;  c               1   12[BANK0 ] char 
  4271 ;;  flag            1    9[BANK0 ] unsigned char 
  4272 ;;  prec            1    6[BANK0 ] char 
  4273 ;; Return value:  Size  Location     Type
  4274 ;;                  2   47[COMRAM] int 
  4275 ;; Registers used:
  4276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4282 ;;      Params:         8       0       0       0
  4283 ;;      Locals:         0       9       0       0
  4284 ;;      Temps:          0       4       0       0
  4285 ;;      Totals:         8      13       0       0
  4286 ;;Total ram usage:       21 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    4
  4289 ;; This function calls:
  4290 ;;		___lwdiv
  4291 ;;		___lwmod
  4292 ;;		___wmul
  4293 ;;		_isdigit
  4294 ;; This function is called by:
  4295 ;;		_ScanIR
  4296 ;;		_ScanWithRange
  4297 ;;		_main
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text18
  4302  00087A                     __ptext18:
  4303                           	opt stack 0
  4304  00087A                     _sprintf:
  4305                           	opt stack 26
  4306                           
  4307                           ;doprnt.c: 494: va_list ap;
  4308                           ;doprnt.c: 499: signed char c;
  4309                           ;doprnt.c: 501: int width;
  4310                           ;doprnt.c: 506: signed char prec;
  4311                           ;doprnt.c: 508: unsigned char flag;
  4312                           ;doprnt.c: 523: union {
  4313                           ;doprnt.c: 524: unsigned long vd;
  4314                           ;doprnt.c: 525: double integ;
  4315                           ;doprnt.c: 526: } tmpval;
  4316                           ;doprnt.c: 528: unsigned int val;
  4317                           ;doprnt.c: 529: unsigned len;
  4318                           ;doprnt.c: 530: const char * cp;
  4319                           ;doprnt.c: 533: *ap = __va_start();
  4320                           
  4321                           ;incstack = 0
  4322  00087A  0E34               	movlw	low (?_sprintf+4)
  4323  00087C  0100               	movlb	0	; () banked
  4324  00087E  6F64               	movwf	sprintf@ap& (0+255),b
  4325  000880  0E00               	movlw	high (?_sprintf+4)
  4326  000882  0100               	movlb	0	; () banked
  4327  000884  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4328                           
  4329                           ;doprnt.c: 536: while(c = *f++) {
  4330  000886  D168               	goto	l2982
  4331  000888                     l2876:
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;doprnt.c: 538: if(c != '%')
  4335  000888  0E25               	movlw	37
  4336  00088A  0100               	movlb	0	; () banked
  4337  00088C  196C               	xorwf	sprintf@c& (0+255),w,b
  4338  00088E  B4D8               	btfsc	status,2,c
  4339  000890  D009               	goto	l2882
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 540: {
  4343                           ;doprnt.c: 541: ((*sp++ = (c)));
  4344  000892  C030  FFD9         	movff	sprintf@sp,fsr2l
  4345  000896  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4346  00089A  C06C  FFDF         	movff	sprintf@c,indf2
  4347                           
  4348                           ; BSR set to: 0
  4349  00089E  4A30               	infsnz	sprintf@sp,f,c
  4350  0008A0  2A31               	incf	sprintf@sp+1,f,c
  4351                           
  4352                           ;doprnt.c: 542: continue;
  4353  0008A2  D15A               	goto	l2982
  4354  0008A4                     l2882:
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;doprnt.c: 543: }
  4358                           ;doprnt.c: 546: width = 0;
  4359  0008A4  0E00               	movlw	0
  4360  0008A6  0100               	movlb	0	; () banked
  4361  0008A8  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4362  0008AA  0E00               	movlw	0
  4363  0008AC  6F6A               	movwf	sprintf@width& (0+255),b
  4364                           
  4365                           ;doprnt.c: 548: flag = 0;
  4366  0008AE  0E00               	movlw	0
  4367  0008B0  0100               	movlb	0	; () banked
  4368  0008B2  6F69               	movwf	sprintf@flag& (0+255),b
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;doprnt.c: 551: switch(*f) {
  4372                           
  4373                           ;doprnt.c: 550: for(;;) {
  4374  0008B4  D004               	goto	l2888
  4375  0008B6                     l2884:
  4376                           
  4377                           ;doprnt.c: 580: flag |= 0x04;
  4378  0008B6  0100               	movlb	0	; () banked
  4379  0008B8  8569               	bsf	sprintf@flag& (0+255),2,b
  4380                           
  4381                           ;doprnt.c: 581: f++;
  4382  0008BA  4A32               	infsnz	sprintf@f,f,c
  4383  0008BC  2A33               	incf	sprintf@f+1,f,c
  4384  0008BE                     l2888:
  4385  0008BE  C032  FFF6         	movff	sprintf@f,tblptrl
  4386  0008C2  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4387  0008C6                     	if	0	;tblptru may be non-zero
  4388  0008C6                     	endif
  4389  0008C6                     	if	0	;tblptru may be non-zero
  4390  0008C6                     	endif
  4391  0008C6  0008               	tblrd		*
  4392  0008C8  50F5               	movf	tablat,w,c
  4393                           
  4394                           ; Switch size 1, requested type "space"
  4395                           ; Number of cases is 1, Range of values is 48 to 48
  4396                           ; switch strategies available:
  4397                           ; Name         Instructions Cycles
  4398                           ; simple_byte            4     3 (average)
  4399                           ;	Chosen strategy is simple_byte
  4400  0008CA  0A30               	xorlw	48	; case 48
  4401  0008CC  B4D8               	btfsc	status,2,c
  4402  0008CE  D7F3               	goto	l2884
  4403                           
  4404                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4405                           
  4406                           ;doprnt.c: 586: }
  4407                           
  4408                           ;doprnt.c: 585: break;
  4409  0008D0  C032  FFF6         	movff	sprintf@f,tblptrl
  4410  0008D4  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4411  0008D8                     	if	0	;tblptru may be non-zero
  4412  0008D8                     	endif
  4413  0008D8                     	if	0	;tblptru may be non-zero
  4414  0008D8                     	endif
  4415  0008D8  0008               	tblrd		*
  4416  0008DA  50F5               	movf	tablat,w,c
  4417  0008DC  EC91  F00C         	call	_isdigit
  4418  0008E0  A0D8               	btfss	status,0,c
  4419  0008E2  D03E               	goto	l2904
  4420                           
  4421                           ;doprnt.c: 598: width = 0;
  4422  0008E4  0E00               	movlw	0
  4423  0008E6  0100               	movlb	0	; () banked
  4424  0008E8  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4425  0008EA  0E00               	movlw	0
  4426  0008EC  6F6A               	movwf	sprintf@width& (0+255),b
  4427  0008EE                     l2894:
  4428                           
  4429                           ;doprnt.c: 600: width *= 10;
  4430  0008EE  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4431  0008F2  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4432  0008F6  0E00               	movlw	0
  4433  0008F8  6E27               	movwf	___wmul@multiplicand+1,c
  4434  0008FA  0E0A               	movlw	10
  4435  0008FC  6E26               	movwf	___wmul@multiplicand,c
  4436  0008FE  EC6D  F00C         	call	___wmul	;wreg free
  4437  000902  C024  F06A         	movff	?___wmul,sprintf@width
  4438  000906  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4439                           
  4440                           ;doprnt.c: 601: width += *f++ - '0';
  4441  00090A  0ED0               	movlw	208
  4442  00090C  0100               	movlb	0	; () banked
  4443  00090E  6F60               	movwf	??_sprintf& (0+255),b
  4444  000910  0EFF               	movlw	255
  4445  000912  0100               	movlb	0	; () banked
  4446  000914  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4447  000916  C032  FFF6         	movff	sprintf@f,tblptrl
  4448  00091A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4449  00091E                     	if	0	;tblptru may be non-zero
  4450  00091E                     	endif
  4451  00091E                     	if	0	;tblptru may be non-zero
  4452  00091E                     	endif
  4453  00091E  0008               	tblrd		*
  4454  000920  50F5               	movf	tablat,w,c
  4455  000922  0100               	movlb	0	; () banked
  4456  000924  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4457  000926  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4458  000928  0100               	movlb	0	; () banked
  4459  00092A  5160               	movf	??_sprintf& (0+255),w,b
  4460  00092C  0100               	movlb	0	; () banked
  4461  00092E  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4462  000930  0100               	movlb	0	; () banked
  4463  000932  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4464  000934  0100               	movlb	0	; () banked
  4465  000936  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4466  000938  0100               	movlb	0	; () banked
  4467  00093A  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4468  00093C  0100               	movlb	0	; () banked
  4469  00093E  276A               	addwf	sprintf@width& (0+255),f,b
  4470  000940  0100               	movlb	0	; () banked
  4471  000942  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4472  000944  0100               	movlb	0	; () banked
  4473  000946  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4474                           
  4475                           ; BSR set to: 0
  4476  000948  4A32               	infsnz	sprintf@f,f,c
  4477  00094A  2A33               	incf	sprintf@f+1,f,c
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4481  00094C  C032  FFF6         	movff	sprintf@f,tblptrl
  4482  000950  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4483  000954                     	if	0	;tblptru may be non-zero
  4484  000954                     	endif
  4485  000954                     	if	0	;tblptru may be non-zero
  4486  000954                     	endif
  4487  000954  0008               	tblrd		*
  4488  000956  50F5               	movf	tablat,w,c
  4489  000958  EC91  F00C         	call	_isdigit
  4490  00095C  B0D8               	btfsc	status,0,c
  4491  00095E  D7C7               	goto	l2894
  4492  000960                     l2904:
  4493  000960  C032  FFF6         	movff	sprintf@f,tblptrl
  4494  000964  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4495  000968  4A32               	infsnz	sprintf@f,f,c
  4496  00096A  2A33               	incf	sprintf@f+1,f,c
  4497  00096C                     	if	0	;tblptru may be non-zero
  4498  00096C                     	endif
  4499  00096C                     	if	0	;tblptru may be non-zero
  4500  00096C                     	endif
  4501  00096C  0008               	tblrd		*
  4502  00096E  CFF5 F06C          	movff	tablat,sprintf@c
  4503  000972  0100               	movlb	0	; () banked
  4504  000974  516C               	movf	sprintf@c& (0+255),w,b
  4505                           
  4506                           ; Switch size 1, requested type "space"
  4507                           ; Number of cases is 3, Range of values is 0 to 105
  4508                           ; switch strategies available:
  4509                           ; Name         Instructions Cycles
  4510                           ; simple_byte           10     6 (average)
  4511                           ;	Chosen strategy is simple_byte
  4512  000976  0A00               	xorlw	0	; case 0
  4513  000978  B4D8               	btfsc	status,2,c
  4514  00097A  D0FB               	goto	l2984
  4515  00097C  0A64               	xorlw	100	; case 100
  4516  00097E  B4D8               	btfsc	status,2,c
  4517  000980  D003               	goto	l2906
  4518  000982  0A0D               	xorlw	13	; case 105
  4519  000984  A4D8               	btfss	status,2,c
  4520  000986  D0E8               	goto	l2982
  4521  000988                     l2906:
  4522                           
  4523                           ;doprnt.c: 1253: {
  4524                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4525  000988  C064  FFD9         	movff	sprintf@ap,fsr2l
  4526  00098C  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4527  000990  CFDE F067          	movff	postinc2,sprintf@val
  4528  000994  CFDD F068          	movff	postdec2,sprintf@val+1
  4529  000998  0E02               	movlw	2
  4530  00099A  0100               	movlb	0	; () banked
  4531  00099C  2764               	addwf	sprintf@ap& (0+255),f,b
  4532  00099E  0E00               	movlw	0
  4533  0009A0  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;doprnt.c: 1261: if((int)val < 0) {
  4537  0009A2  0100               	movlb	0	; () banked
  4538  0009A4  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4539  0009A6  D008               	goto	l2916
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;doprnt.c: 1262: flag |= 0x03;
  4543  0009A8  0E03               	movlw	3
  4544  0009AA  0100               	movlb	0	; () banked
  4545  0009AC  1369               	iorwf	sprintf@flag& (0+255),f,b
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;doprnt.c: 1263: val = -val;
  4549  0009AE  0100               	movlb	0	; () banked
  4550  0009B0  6D67               	negf	sprintf@val& (0+255),b
  4551  0009B2  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4552  0009B4  B0D8               	btfsc	status,0,c
  4553  0009B6  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4554  0009B8                     l2916:
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;doprnt.c: 1264: }
  4558                           ;doprnt.c: 1266: }
  4559                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4560  0009B8  0E01               	movlw	1
  4561  0009BA  0100               	movlb	0	; () banked
  4562  0009BC  6F6C               	movwf	sprintf@c& (0+255),b
  4563  0009BE                     l2918:
  4564                           
  4565                           ; BSR set to: 0
  4566  0009BE  0E05               	movlw	5
  4567  0009C0  0100               	movlb	0	; () banked
  4568  0009C2  196C               	xorwf	sprintf@c& (0+255),w,b
  4569  0009C4  B4D8               	btfsc	status,2,c
  4570  0009C6  D016               	goto	l2930
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;doprnt.c: 1306: if(val < dpowers[c])
  4574                           
  4575                           ; BSR set to: 0
  4576                           
  4577                           ; BSR set to: 0
  4578  0009C8  0100               	movlb	0	; () banked
  4579  0009CA  516C               	movf	sprintf@c& (0+255),w,b
  4580  0009CC  0D02               	mullw	2
  4581  0009CE  0E01               	movlw	low _dpowers
  4582  0009D0  24F3               	addwf	prodl,w,c
  4583  0009D2  6EF6               	movwf	tblptrl,c
  4584  0009D4  0E03               	movlw	high _dpowers
  4585  0009D6  20F4               	addwfc	prodh,w,c
  4586  0009D8  6EF7               	movwf	tblptrh,c
  4587  0009DA                     	if	0	;There are less than 3 active tblptr bytes
  4588  0009DA                     	endif
  4589  0009DA  0009               	tblrd		*+
  4590  0009DC  50F5               	movf	tablat,w,c
  4591  0009DE  0100               	movlb	0	; () banked
  4592  0009E0  5D67               	subwf	sprintf@val& (0+255),w,b
  4593  0009E2  0009               	tblrd		*+
  4594  0009E4  50F5               	movf	tablat,w,c
  4595  0009E6  0100               	movlb	0	; () banked
  4596  0009E8  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4597  0009EA  A0D8               	btfss	status,0,c
  4598  0009EC  D003               	goto	l2930
  4599                           
  4600                           ; BSR set to: 0
  4601                           
  4602                           ; BSR set to: 0
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;doprnt.c: 1307: break;
  4606  0009EE  0100               	movlb	0	; () banked
  4607  0009F0  2B6C               	incf	sprintf@c& (0+255),f,b
  4608  0009F2  D7E5               	goto	l2918
  4609  0009F4                     l2930:
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4613  0009F4  0100               	movlb	0	; () banked
  4614  0009F6  516A               	movf	sprintf@width& (0+255),w,b
  4615  0009F8  0100               	movlb	0	; () banked
  4616  0009FA  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4617  0009FC  B4D8               	btfsc	status,2,c
  4618  0009FE  D00B               	goto	l2936
  4619                           
  4620                           ; BSR set to: 0
  4621  000A00  C069  F060         	movff	sprintf@flag,??_sprintf
  4622  000A04  0E03               	movlw	3
  4623  000A06  0100               	movlb	0	; () banked
  4624  000A08  1760               	andwf	??_sprintf& (0+255),f,b
  4625  000A0A  B4D8               	btfsc	status,2,c
  4626  000A0C  D004               	goto	l2936
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;doprnt.c: 1346: width--;
  4630  000A0E  0100               	movlb	0	; () banked
  4631  000A10  076A               	decf	sprintf@width& (0+255),f,b
  4632  000A12  A0D8               	btfss	status,0,c
  4633  000A14  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4634  000A16                     l2936:
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;doprnt.c: 1381: if(width > c)
  4638  000A16  0E80               	movlw	128
  4639  000A18  0100               	movlb	0	; () banked
  4640  000A1A  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4641  000A1C  0E7F               	movlw	127
  4642  000A1E  0100               	movlb	0	; () banked
  4643  000A20  6F60               	movwf	??_sprintf& (0+255),b
  4644  000A22  0100               	movlb	0	; () banked
  4645  000A24  516A               	movf	sprintf@width& (0+255),w,b
  4646  000A26  0100               	movlb	0	; () banked
  4647  000A28  5D6C               	subwf	sprintf@c& (0+255),w,b
  4648  000A2A  0100               	movlb	0	; () banked
  4649  000A2C  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4650  000A2E  0A80               	xorlw	128
  4651  000A30  0100               	movlb	0	; () banked
  4652  000A32  5960               	subwfb	??_sprintf& (0+255),w,b
  4653  000A34  B0D8               	btfsc	status,0,c
  4654  000A36  D00B               	goto	l2940
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;doprnt.c: 1382: width -= c;
  4658  000A38  0100               	movlb	0	; () banked
  4659  000A3A  516C               	movf	sprintf@c& (0+255),w,b
  4660  000A3C  0100               	movlb	0	; () banked
  4661  000A3E  5F6A               	subwf	sprintf@width& (0+255),f,b
  4662  000A40  0E00               	movlw	0
  4663  000A42  0100               	movlb	0	; () banked
  4664  000A44  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4665  000A46  0EFF               	movlw	255
  4666  000A48  0100               	movlb	0	; () banked
  4667  000A4A  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4668  000A4C  D005               	goto	l2942
  4669  000A4E                     l2940:
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;doprnt.c: 1383: else
  4673                           ;doprnt.c: 1384: width = 0;
  4674  000A4E  0E00               	movlw	0
  4675  000A50  0100               	movlb	0	; () banked
  4676  000A52  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4677  000A54  0E00               	movlw	0
  4678  000A56  6F6A               	movwf	sprintf@width& (0+255),b
  4679  000A58                     l2942:
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;doprnt.c: 1387: if(flag & 0x04) {
  4683  000A58  0100               	movlb	0	; () banked
  4684  000A5A  A569               	btfss	sprintf@flag& (0+255),2,b
  4685  000A5C  D022               	goto	l2958
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;doprnt.c: 1392: if(flag & 0x03)
  4689  000A5E  C069  F060         	movff	sprintf@flag,??_sprintf
  4690  000A62  0E03               	movlw	3
  4691  000A64  0100               	movlb	0	; () banked
  4692  000A66  1760               	andwf	??_sprintf& (0+255),f,b
  4693  000A68  B4D8               	btfsc	status,2,c
  4694  000A6A  D008               	goto	l2950
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4698  000A6C  C030  FFD9         	movff	sprintf@sp,fsr2l
  4699  000A70  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4700  000A74  0E2D               	movlw	45
  4701  000A76  6EDF               	movwf	indf2,c
  4702                           
  4703                           ; BSR set to: 0
  4704  000A78  4A30               	infsnz	sprintf@sp,f,c
  4705  000A7A  2A31               	incf	sprintf@sp+1,f,c
  4706  000A7C                     l2950:
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;doprnt.c: 1415: if(width)
  4710  000A7C  0100               	movlb	0	; () banked
  4711  000A7E  516A               	movf	sprintf@width& (0+255),w,b
  4712  000A80  0100               	movlb	0	; () banked
  4713  000A82  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4714  000A84  B4D8               	btfsc	status,2,c
  4715  000A86  D034               	goto	l2972
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4719                           
  4720                           ; BSR set to: 0
  4721                           
  4722                           ;doprnt.c: 1416: do
  4723  000A88  C030  FFD9         	movff	sprintf@sp,fsr2l
  4724  000A8C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4725  000A90  0E30               	movlw	48
  4726  000A92  6EDF               	movwf	indf2,c
  4727                           
  4728                           ; BSR set to: 0
  4729  000A94  4A30               	infsnz	sprintf@sp,f,c
  4730  000A96  2A31               	incf	sprintf@sp+1,f,c
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;doprnt.c: 1418: while(--width);
  4734  000A98  0100               	movlb	0	; () banked
  4735  000A9A  076A               	decf	sprintf@width& (0+255),f,b
  4736  000A9C  A0D8               	btfss	status,0,c
  4737  000A9E  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4738  000AA0  D7ED               	goto	l2950
  4739  000AA2                     l2958:
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;doprnt.c: 1422: {
  4743                           ;doprnt.c: 1424: if(width
  4744                           ;doprnt.c: 1428: )
  4745  000AA2  0100               	movlb	0	; () banked
  4746  000AA4  516A               	movf	sprintf@width& (0+255),w,b
  4747  000AA6  0100               	movlb	0	; () banked
  4748  000AA8  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4749  000AAA  B4D8               	btfsc	status,2,c
  4750  000AAC  D012               	goto	l2966
  4751  000AAE                     l2960:
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4755  000AAE  C030  FFD9         	movff	sprintf@sp,fsr2l
  4756  000AB2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4757  000AB6  0E20               	movlw	32
  4758  000AB8  6EDF               	movwf	indf2,c
  4759                           
  4760                           ; BSR set to: 0
  4761  000ABA  4A30               	infsnz	sprintf@sp,f,c
  4762  000ABC  2A31               	incf	sprintf@sp+1,f,c
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;doprnt.c: 1431: while(--width);
  4766  000ABE  0100               	movlb	0	; () banked
  4767  000AC0  076A               	decf	sprintf@width& (0+255),f,b
  4768  000AC2  A0D8               	btfss	status,0,c
  4769  000AC4  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4770  000AC6  0100               	movlb	0	; () banked
  4771  000AC8  516A               	movf	sprintf@width& (0+255),w,b
  4772  000ACA  0100               	movlb	0	; () banked
  4773  000ACC  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4774  000ACE  A4D8               	btfss	status,2,c
  4775  000AD0  D7EE               	goto	l2960
  4776  000AD2                     l2966:
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;doprnt.c: 1438: if(flag & 0x03)
  4780  000AD2  C069  F060         	movff	sprintf@flag,??_sprintf
  4781  000AD6  0E03               	movlw	3
  4782  000AD8  0100               	movlb	0	; () banked
  4783  000ADA  1760               	andwf	??_sprintf& (0+255),f,b
  4784  000ADC  B4D8               	btfsc	status,2,c
  4785  000ADE  D008               	goto	l2972
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4789  000AE0  C030  FFD9         	movff	sprintf@sp,fsr2l
  4790  000AE4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4791  000AE8  0E2D               	movlw	45
  4792  000AEA  6EDF               	movwf	indf2,c
  4793                           
  4794                           ; BSR set to: 0
  4795  000AEC  4A30               	infsnz	sprintf@sp,f,c
  4796  000AEE  2A31               	incf	sprintf@sp+1,f,c
  4797  000AF0                     l2972:
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;doprnt.c: 1469: }
  4801                           ;doprnt.c: 1472: prec = c;
  4802  000AF0  C06C  F066         	movff	sprintf@c,sprintf@prec
  4803                           
  4804                           ;doprnt.c: 1474: while(prec--) {
  4805  000AF4  D02B               	goto	l2980
  4806  000AF6                     l2974:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;doprnt.c: 1478: {
  4810                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4811  000AF6  0100               	movlb	0	; () banked
  4812  000AF8  5166               	movf	sprintf@prec& (0+255),w,b
  4813  000AFA  0D02               	mullw	2
  4814  000AFC  0E01               	movlw	low _dpowers
  4815  000AFE  24F3               	addwf	prodl,w,c
  4816  000B00  6EF6               	movwf	tblptrl,c
  4817  000B02  0E03               	movlw	high _dpowers
  4818  000B04  20F4               	addwfc	prodh,w,c
  4819  000B06  6EF7               	movwf	tblptrh,c
  4820  000B08                     	if	0	;There are less than 3 active tblptr bytes
  4821  000B08                     	endif
  4822  000B08  0009               	tblrd		*+
  4823  000B0A  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4824  000B0E  000A               	tblrd		*-
  4825  000B10  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4826  000B14  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4827  000B18  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4828  000B1C  EC1D  F00B         	call	___lwdiv	;wreg free
  4829  000B20  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4830  000B24  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4831  000B28  0E00               	movlw	0
  4832  000B2A  6E2E               	movwf	___lwmod@divisor+1,c
  4833  000B2C  0E0A               	movlw	10
  4834  000B2E  6E2D               	movwf	___lwmod@divisor,c
  4835  000B30  EC46  F00B         	call	___lwmod	;wreg free
  4836  000B34  502B               	movf	?___lwmod,w,c
  4837  000B36  0F30               	addlw	48
  4838  000B38  0100               	movlb	0	; () banked
  4839  000B3A  6F6C               	movwf	sprintf@c& (0+255),b
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;doprnt.c: 1523: }
  4843                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4844  000B3C  C030  FFD9         	movff	sprintf@sp,fsr2l
  4845  000B40  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4846  000B44  C06C  FFDF         	movff	sprintf@c,indf2
  4847                           
  4848                           ; BSR set to: 0
  4849  000B48  4A30               	infsnz	sprintf@sp,f,c
  4850  000B4A  2A31               	incf	sprintf@sp+1,f,c
  4851  000B4C                     l2980:
  4852                           
  4853                           ; BSR set to: 0
  4854  000B4C  0100               	movlb	0	; () banked
  4855  000B4E  0766               	decf	sprintf@prec& (0+255),f,b
  4856  000B50  0100               	movlb	0	; () banked
  4857  000B52  2966               	incf	sprintf@prec& (0+255),w,b
  4858  000B54  A4D8               	btfss	status,2,c
  4859  000B56  D7CF               	goto	l2974
  4860  000B58                     l2982:
  4861  000B58  C032  FFF6         	movff	sprintf@f,tblptrl
  4862  000B5C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4863  000B60  4A32               	infsnz	sprintf@f,f,c
  4864  000B62  2A33               	incf	sprintf@f+1,f,c
  4865  000B64                     	if	0	;tblptru may be non-zero
  4866  000B64                     	endif
  4867  000B64                     	if	0	;tblptru may be non-zero
  4868  000B64                     	endif
  4869  000B64  0008               	tblrd		*
  4870  000B66  CFF5 F06C          	movff	tablat,sprintf@c
  4871  000B6A  0100               	movlb	0	; () banked
  4872  000B6C  516C               	movf	sprintf@c& (0+255),w,b
  4873  000B6E  A4D8               	btfss	status,2,c
  4874  000B70  D68B               	goto	l2876
  4875  000B72                     l2984:
  4876                           
  4877                           ;doprnt.c: 1538: *sp = 0;
  4878  000B72  C030  FFD9         	movff	sprintf@sp,fsr2l
  4879  000B76  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4880  000B7A  0E00               	movlw	0
  4881  000B7C  6EDF               	movwf	indf2,c
  4882  000B7E  0012               	return	
  4883  000B80                     __end_of_sprintf:
  4884                           	opt stack 0
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           intcon	equ	0xFF2
  4892                           postinc0	equ	0xFEE
  4893                           wreg	equ	0xFE8
  4894                           indf1	equ	0xFE7
  4895                           fsr1h	equ	0xFE2
  4896                           fsr1l	equ	0xFE1
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           fsr2h	equ	0xFDA
  4901                           fsr2l	equ	0xFD9
  4902                           status	equ	0xFD8
  4903                           
  4904 ;; *************** function _isdigit *****************
  4905 ;; Defined at:
  4906 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  c               1    wreg     unsigned char 
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  c               1   37[COMRAM] unsigned char 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;		None               void
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4920 ;;      Params:         0       0       0       0
  4921 ;;      Locals:         2       0       0       0
  4922 ;;      Temps:          1       0       0       0
  4923 ;;      Totals:         3       0       0       0
  4924 ;;Total ram usage:        3 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    3
  4927 ;; This function calls:
  4928 ;;		Nothing
  4929 ;; This function is called by:
  4930 ;;		_sprintf
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text19
  4935  001922                     __ptext19:
  4936                           	opt stack 0
  4937  001922                     _isdigit:
  4938                           	opt stack 26
  4939                           
  4940                           ;incstack = 0
  4941                           ;isdigit@c stored from wreg
  4942  001922  6E26               	movwf	isdigit@c,c
  4943  001924  0E00               	movlw	0
  4944  001926  6E25               	movwf	_isdigit$1961,c
  4945  001928  0E3A               	movlw	58
  4946  00192A  6026               	cpfslt	isdigit@c,c
  4947  00192C  D005               	goto	l2042
  4948  00192E  0E2F               	movlw	47
  4949  001930  6426               	cpfsgt	isdigit@c,c
  4950  001932  D002               	goto	l2042
  4951  001934  0E01               	movlw	1
  4952  001936  6E25               	movwf	_isdigit$1961,c
  4953  001938                     l2042:
  4954  001938  C025  F024         	movff	_isdigit$1961,??_isdigit
  4955  00193C  3024               	rrcf	??_isdigit,w,c
  4956  00193E  0012               	return	
  4957  001940                     __end_of_isdigit:
  4958                           	opt stack 0
  4959                           tblptru	equ	0xFF8
  4960                           tblptrh	equ	0xFF7
  4961                           tblptrl	equ	0xFF6
  4962                           tablat	equ	0xFF5
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           intcon	equ	0xFF2
  4966                           postinc0	equ	0xFEE
  4967                           wreg	equ	0xFE8
  4968                           indf1	equ	0xFE7
  4969                           fsr1h	equ	0xFE2
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function ___wmul *****************
  4979 ;; Defined at:
  4980 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  multiplier      2   35[COMRAM] unsigned int 
  4983 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  product         2   39[COMRAM] unsigned int 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  2   35[COMRAM] unsigned int 
  4988 ;; Registers used:
  4989 ;;		wreg, status,2, status,0, prodl, prodh
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4995 ;;      Params:         4       0       0       0
  4996 ;;      Locals:         2       0       0       0
  4997 ;;      Temps:          0       0       0       0
  4998 ;;      Totals:         6       0       0       0
  4999 ;;Total ram usage:        6 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    3
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_setMotorPWM
  5006 ;;		_sprintf
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text20
  5011  0018DA                     __ptext20:
  5012                           	opt stack 0
  5013  0018DA                     ___wmul:
  5014                           	opt stack 25
  5015                           
  5016                           ;incstack = 0
  5017  0018DA  5024               	movf	___wmul@multiplier,w,c
  5018  0018DC  0226               	mulwf	___wmul@multiplicand,c
  5019  0018DE  CFF3 F028          	movff	prodl,___wmul@product
  5020  0018E2  CFF4 F029          	movff	prodh,___wmul@product+1
  5021  0018E6  5024               	movf	___wmul@multiplier,w,c
  5022  0018E8  0227               	mulwf	___wmul@multiplicand+1,c
  5023  0018EA  50F3               	movf	prodl,w,c
  5024  0018EC  2629               	addwf	___wmul@product+1,f,c
  5025  0018EE  5025               	movf	___wmul@multiplier+1,w,c
  5026  0018F0  0226               	mulwf	___wmul@multiplicand,c
  5027  0018F2  50F3               	movf	prodl,w,c
  5028  0018F4  2629               	addwf	___wmul@product+1,f,c
  5029  0018F6  C028  F024         	movff	___wmul@product,?___wmul
  5030  0018FA  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5031  0018FE  0012               	return	
  5032  001900                     __end_of___wmul:
  5033                           	opt stack 0
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           intcon	equ	0xFF2
  5041                           postinc0	equ	0xFEE
  5042                           wreg	equ	0xFE8
  5043                           indf1	equ	0xFE7
  5044                           fsr1h	equ	0xFE2
  5045                           fsr1l	equ	0xFE1
  5046                           indf2	equ	0xFDF
  5047                           postinc2	equ	0xFDE
  5048                           postdec2	equ	0xFDD
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function ___lwmod *****************
  5054 ;; Defined at:
  5055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  dividend        2   42[COMRAM] unsigned int 
  5058 ;;  divisor         2   44[COMRAM] unsigned int 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  counter         1   46[COMRAM] unsigned char 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  2   42[COMRAM] unsigned int 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5070 ;;      Params:         4       0       0       0
  5071 ;;      Locals:         1       0       0       0
  5072 ;;      Temps:          0       0       0       0
  5073 ;;      Totals:         5       0       0       0
  5074 ;;Total ram usage:        5 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    3
  5077 ;; This function calls:
  5078 ;;		Nothing
  5079 ;; This function is called by:
  5080 ;;		_sprintf
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text21
  5085  00168C                     __ptext21:
  5086                           	opt stack 0
  5087  00168C                     ___lwmod:
  5088                           	opt stack 26
  5089                           
  5090                           ;incstack = 0
  5091  00168C  502D               	movf	___lwmod@divisor,w,c
  5092  00168E  102E               	iorwf	___lwmod@divisor+1,w,c
  5093  001690  B4D8               	btfsc	status,2,c
  5094  001692  D018               	goto	l879
  5095  001694  0E01               	movlw	1
  5096  001696  6E2F               	movwf	___lwmod@counter,c
  5097  001698  D004               	goto	l2074
  5098  00169A                     l2072:
  5099  00169A  90D8               	bcf	status,0,c
  5100  00169C  362D               	rlcf	___lwmod@divisor,f,c
  5101  00169E  362E               	rlcf	___lwmod@divisor+1,f,c
  5102  0016A0  2A2F               	incf	___lwmod@counter,f,c
  5103  0016A2                     l2074:
  5104  0016A2  AE2E               	btfss	___lwmod@divisor+1,7,c
  5105  0016A4  D7FA               	goto	l2072
  5106  0016A6                     l2076:
  5107  0016A6  502D               	movf	___lwmod@divisor,w,c
  5108  0016A8  5C2B               	subwf	___lwmod@dividend,w,c
  5109  0016AA  502E               	movf	___lwmod@divisor+1,w,c
  5110  0016AC  582C               	subwfb	___lwmod@dividend+1,w,c
  5111  0016AE  A0D8               	btfss	status,0,c
  5112  0016B0  D004               	goto	l2080
  5113  0016B2  502D               	movf	___lwmod@divisor,w,c
  5114  0016B4  5E2B               	subwf	___lwmod@dividend,f,c
  5115  0016B6  502E               	movf	___lwmod@divisor+1,w,c
  5116  0016B8  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5117  0016BA                     l2080:
  5118  0016BA  90D8               	bcf	status,0,c
  5119  0016BC  322E               	rrcf	___lwmod@divisor+1,f,c
  5120  0016BE  322D               	rrcf	___lwmod@divisor,f,c
  5121  0016C0  2E2F               	decfsz	___lwmod@counter,f,c
  5122  0016C2  D7F1               	goto	l2076
  5123  0016C4                     l879:
  5124  0016C4  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5125  0016C8  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5126  0016CC  0012               	return		;funcret
  5127  0016CE                     __end_of___lwmod:
  5128                           	opt stack 0
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           intcon	equ	0xFF2
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           indf1	equ	0xFE7
  5139                           fsr1h	equ	0xFE2
  5140                           fsr1l	equ	0xFE1
  5141                           indf2	equ	0xFDF
  5142                           postinc2	equ	0xFDE
  5143                           postdec2	equ	0xFDD
  5144                           fsr2h	equ	0xFDA
  5145                           fsr2l	equ	0xFD9
  5146                           status	equ	0xFD8
  5147                           
  5148 ;; *************** function ___lwdiv *****************
  5149 ;; Defined at:
  5150 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  dividend        2   35[COMRAM] unsigned int 
  5153 ;;  divisor         2   37[COMRAM] unsigned int 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  quotient        2   39[COMRAM] unsigned int 
  5156 ;;  counter         1   41[COMRAM] unsigned char 
  5157 ;; Return value:  Size  Location     Type
  5158 ;;                  2   35[COMRAM] unsigned int 
  5159 ;; Registers used:
  5160 ;;		wreg, status,2, status,0
  5161 ;; Tracked objects:
  5162 ;;		On entry : 0/0
  5163 ;;		On exit  : 0/0
  5164 ;;		Unchanged: 0/0
  5165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5166 ;;      Params:         4       0       0       0
  5167 ;;      Locals:         3       0       0       0
  5168 ;;      Temps:          0       0       0       0
  5169 ;;      Totals:         7       0       0       0
  5170 ;;Total ram usage:        7 bytes
  5171 ;; Hardware stack levels used:    1
  5172 ;; Hardware stack levels required when called:    3
  5173 ;; This function calls:
  5174 ;;		Nothing
  5175 ;; This function is called by:
  5176 ;;		_sprintf
  5177 ;; This function uses a non-reentrant model
  5178 ;;
  5179                           
  5180                           	psect	text22
  5181  00163A                     __ptext22:
  5182                           	opt stack 0
  5183  00163A                     ___lwdiv:
  5184                           	opt stack 26
  5185                           
  5186                           ;incstack = 0
  5187  00163A  0E00               	movlw	0
  5188  00163C  6E29               	movwf	___lwdiv@quotient+1,c
  5189  00163E  0E00               	movlw	0
  5190  001640  6E28               	movwf	___lwdiv@quotient,c
  5191  001642  5026               	movf	___lwdiv@divisor,w,c
  5192  001644  1027               	iorwf	___lwdiv@divisor+1,w,c
  5193  001646  B4D8               	btfsc	status,2,c
  5194  001648  D01C               	goto	l869
  5195  00164A  0E01               	movlw	1
  5196  00164C  6E2A               	movwf	___lwdiv@counter,c
  5197  00164E  D004               	goto	l2054
  5198  001650                     l2052:
  5199  001650  90D8               	bcf	status,0,c
  5200  001652  3626               	rlcf	___lwdiv@divisor,f,c
  5201  001654  3627               	rlcf	___lwdiv@divisor+1,f,c
  5202  001656  2A2A               	incf	___lwdiv@counter,f,c
  5203  001658                     l2054:
  5204  001658  AE27               	btfss	___lwdiv@divisor+1,7,c
  5205  00165A  D7FA               	goto	l2052
  5206  00165C                     l2056:
  5207  00165C  90D8               	bcf	status,0,c
  5208  00165E  3628               	rlcf	___lwdiv@quotient,f,c
  5209  001660  3629               	rlcf	___lwdiv@quotient+1,f,c
  5210  001662  5026               	movf	___lwdiv@divisor,w,c
  5211  001664  5C24               	subwf	___lwdiv@dividend,w,c
  5212  001666  5027               	movf	___lwdiv@divisor+1,w,c
  5213  001668  5825               	subwfb	___lwdiv@dividend+1,w,c
  5214  00166A  A0D8               	btfss	status,0,c
  5215  00166C  D005               	goto	l2064
  5216  00166E  5026               	movf	___lwdiv@divisor,w,c
  5217  001670  5E24               	subwf	___lwdiv@dividend,f,c
  5218  001672  5027               	movf	___lwdiv@divisor+1,w,c
  5219  001674  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5220  001676  8028               	bsf	___lwdiv@quotient,0,c
  5221  001678                     l2064:
  5222  001678  90D8               	bcf	status,0,c
  5223  00167A  3227               	rrcf	___lwdiv@divisor+1,f,c
  5224  00167C  3226               	rrcf	___lwdiv@divisor,f,c
  5225  00167E  2E2A               	decfsz	___lwdiv@counter,f,c
  5226  001680  D7ED               	goto	l2056
  5227  001682                     l869:
  5228  001682  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5229  001686  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5230  00168A  0012               	return		;funcret
  5231  00168C                     __end_of___lwdiv:
  5232                           	opt stack 0
  5233                           tblptru	equ	0xFF8
  5234                           tblptrh	equ	0xFF7
  5235                           tblptrl	equ	0xFF6
  5236                           tablat	equ	0xFF5
  5237                           prodh	equ	0xFF4
  5238                           prodl	equ	0xFF3
  5239                           intcon	equ	0xFF2
  5240                           postinc0	equ	0xFEE
  5241                           wreg	equ	0xFE8
  5242                           indf1	equ	0xFE7
  5243                           fsr1h	equ	0xFE2
  5244                           fsr1l	equ	0xFE1
  5245                           indf2	equ	0xFDF
  5246                           postinc2	equ	0xFDE
  5247                           postdec2	equ	0xFDD
  5248                           fsr2h	equ	0xFDA
  5249                           fsr2l	equ	0xFD9
  5250                           status	equ	0xFD8
  5251                           
  5252 ;; *************** function _grabRightIR *****************
  5253 ;; Defined at:
  5254 ;;		line 74 in file "IR_Reading.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5259 ;;  i               1   42[COMRAM] unsigned char 
  5260 ;; Return value:  Size  Location     Type
  5261 ;;                  2   35[COMRAM] unsigned int 
  5262 ;; Registers used:
  5263 ;;		wreg, status,2, status,0
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5269 ;;      Params:         2       0       0       0
  5270 ;;      Locals:         3       0       0       0
  5271 ;;      Temps:          3       0       0       0
  5272 ;;      Totals:         8       0       0       0
  5273 ;;Total ram usage:        8 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    3
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_ScanIR
  5280 ;;		_ScanWithRange
  5281 ;;		_main
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text23
  5286  0014F8                     __ptext23:
  5287                           	opt stack 0
  5288  0014F8                     _grabRightIR:
  5289                           	opt stack 27
  5290                           
  5291                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5292                           
  5293                           ;incstack = 0
  5294  0014F8  0E00               	movlw	0
  5295  0014FA  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5296  0014FC  0E00               	movlw	0
  5297  0014FE  6E29               	movwf	grabRightIR@IR_signal,c
  5298                           
  5299                           ;IR_Reading.c: 77: unsigned char i=0;
  5300  001500  0E00               	movlw	0
  5301  001502  6E2B               	movwf	grabRightIR@i,c
  5302                           
  5303                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5304  001504  0E00               	movlw	0
  5305  001506  6E2B               	movwf	grabRightIR@i,c
  5306  001508                     l2116:
  5307  001508  0E03               	movlw	3
  5308  00150A  642B               	cpfsgt	grabRightIR@i,c
  5309  00150C  D001               	goto	l2120
  5310  00150E  D01E               	goto	l2126
  5311  001510                     l2120:
  5312                           
  5313                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5314  001510  5069               	movf	3945,w,c	;volatile
  5315  001512  6E26               	movwf	??_grabRightIR& (0+255),c
  5316  001514  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5317  001516  0E07               	movlw	7
  5318  001518                     u1445:
  5319  001518  90D8               	bcf	status,0,c
  5320  00151A  3626               	rlcf	??_grabRightIR,f,c
  5321  00151C  3627               	rlcf	??_grabRightIR+1,f,c
  5322  00151E  2EE8               	decfsz	wreg,f,c
  5323  001520  D7FB               	goto	u1445
  5324  001522  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5325  001526  90D8               	bcf	status,0,c
  5326  001528  3228               	rrcf	??_grabRightIR+2,f,c
  5327  00152A  5028               	movf	??_grabRightIR+2,w,c
  5328  00152C  1226               	iorwf	??_grabRightIR,f,c
  5329  00152E  0E00               	movlw	0
  5330  001530  1227               	iorwf	??_grabRightIR+1,f,c
  5331  001532  5026               	movf	??_grabRightIR,w,c
  5332  001534  2629               	addwf	grabRightIR@IR_signal,f,c
  5333  001536  5027               	movf	??_grabRightIR+1,w,c
  5334  001538  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5335                           
  5336                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5337  00153A  0E82               	movlw	130
  5338  00153C  6E26               	movwf	??_grabRightIR& (0+255),c
  5339  00153E  0EDE               	movlw	222
  5340  001540                     u2967:
  5341  001540  2EE8               	decfsz	wreg,f,c
  5342  001542  D7FE               	goto	u2967
  5343  001544  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5344  001546  D7FC               	goto	u2967
  5345  001548  2A2B               	incf	grabRightIR@i,f,c
  5346  00154A  D7DE               	goto	l2116
  5347  00154C                     l2126:
  5348                           
  5349                           ;IR_Reading.c: 83: }
  5350                           ;IR_Reading.c: 85: return IR_signal>>2;
  5351  00154C  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5352  001550  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5353  001554  90D8               	bcf	status,0,c
  5354  001556  3227               	rrcf	??_grabRightIR+1,f,c
  5355  001558  3226               	rrcf	??_grabRightIR,f,c
  5356  00155A  90D8               	bcf	status,0,c
  5357  00155C  3227               	rrcf	??_grabRightIR+1,f,c
  5358  00155E  3226               	rrcf	??_grabRightIR,f,c
  5359  001560  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5360  001564  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5361  001568  0012               	return	
  5362  00156A                     __end_of_grabRightIR:
  5363                           	opt stack 0
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           intcon	equ	0xFF2
  5371                           postinc0	equ	0xFEE
  5372                           wreg	equ	0xFE8
  5373                           indf1	equ	0xFE7
  5374                           fsr1h	equ	0xFE2
  5375                           fsr1l	equ	0xFE1
  5376                           indf2	equ	0xFDF
  5377                           postinc2	equ	0xFDE
  5378                           postdec2	equ	0xFDD
  5379                           fsr2h	equ	0xFDA
  5380                           fsr2l	equ	0xFD9
  5381                           status	equ	0xFD8
  5382                           
  5383 ;; *************** function _grabLeftIR *****************
  5384 ;; Defined at:
  5385 ;;		line 90 in file "IR_Reading.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;		None
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5390 ;;  i               1   42[COMRAM] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  2   35[COMRAM] unsigned int 
  5393 ;; Registers used:
  5394 ;;		wreg, status,2, status,0
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5400 ;;      Params:         2       0       0       0
  5401 ;;      Locals:         3       0       0       0
  5402 ;;      Temps:          3       0       0       0
  5403 ;;      Totals:         8       0       0       0
  5404 ;;Total ram usage:        8 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    3
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_ScanIR
  5411 ;;		_ScanWithRange
  5412 ;;		_main
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text24
  5417  00156A                     __ptext24:
  5418                           	opt stack 0
  5419  00156A                     _grabLeftIR:
  5420                           	opt stack 27
  5421                           
  5422                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5423                           
  5424                           ;incstack = 0
  5425  00156A  0E00               	movlw	0
  5426  00156C  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5427  00156E  0E00               	movlw	0
  5428  001570  6E29               	movwf	grabLeftIR@IR_signal,c
  5429                           
  5430                           ;IR_Reading.c: 93: unsigned char i=0;
  5431  001572  0E00               	movlw	0
  5432  001574  6E2B               	movwf	grabLeftIR@i,c
  5433                           
  5434                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5435  001576  0E00               	movlw	0
  5436  001578  6E2B               	movwf	grabLeftIR@i,c
  5437  00157A                     l2132:
  5438  00157A  0E03               	movlw	3
  5439  00157C  642B               	cpfsgt	grabLeftIR@i,c
  5440  00157E  D001               	goto	l2136
  5441  001580  D01E               	goto	l2142
  5442  001582                     l2136:
  5443                           
  5444                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5445  001582  5067               	movf	3943,w,c	;volatile
  5446  001584  6E26               	movwf	??_grabLeftIR& (0+255),c
  5447  001586  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5448  001588  0E07               	movlw	7
  5449  00158A                     u1475:
  5450  00158A  90D8               	bcf	status,0,c
  5451  00158C  3626               	rlcf	??_grabLeftIR,f,c
  5452  00158E  3627               	rlcf	??_grabLeftIR+1,f,c
  5453  001590  2EE8               	decfsz	wreg,f,c
  5454  001592  D7FB               	goto	u1475
  5455  001594  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5456  001598  90D8               	bcf	status,0,c
  5457  00159A  3228               	rrcf	??_grabLeftIR+2,f,c
  5458  00159C  5028               	movf	??_grabLeftIR+2,w,c
  5459  00159E  1226               	iorwf	??_grabLeftIR,f,c
  5460  0015A0  0E00               	movlw	0
  5461  0015A2  1227               	iorwf	??_grabLeftIR+1,f,c
  5462  0015A4  5026               	movf	??_grabLeftIR,w,c
  5463  0015A6  2629               	addwf	grabLeftIR@IR_signal,f,c
  5464  0015A8  5027               	movf	??_grabLeftIR+1,w,c
  5465  0015AA  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5466                           
  5467                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5468  0015AC  0E82               	movlw	130
  5469  0015AE  6E26               	movwf	??_grabLeftIR& (0+255),c
  5470  0015B0  0EDE               	movlw	222
  5471  0015B2                     u2977:
  5472  0015B2  2EE8               	decfsz	wreg,f,c
  5473  0015B4  D7FE               	goto	u2977
  5474  0015B6  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5475  0015B8  D7FC               	goto	u2977
  5476  0015BA  2A2B               	incf	grabLeftIR@i,f,c
  5477  0015BC  D7DE               	goto	l2132
  5478  0015BE                     l2142:
  5479                           
  5480                           ;IR_Reading.c: 99: }
  5481                           ;IR_Reading.c: 101: return IR_signal>>2;
  5482  0015BE  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5483  0015C2  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5484  0015C6  90D8               	bcf	status,0,c
  5485  0015C8  3227               	rrcf	??_grabLeftIR+1,f,c
  5486  0015CA  3226               	rrcf	??_grabLeftIR,f,c
  5487  0015CC  90D8               	bcf	status,0,c
  5488  0015CE  3227               	rrcf	??_grabLeftIR+1,f,c
  5489  0015D0  3226               	rrcf	??_grabLeftIR,f,c
  5490  0015D2  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5491  0015D6  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5492  0015DA  0012               	return	
  5493  0015DC                     __end_of_grabLeftIR:
  5494                           	opt stack 0
  5495                           tblptru	equ	0xFF8
  5496                           tblptrh	equ	0xFF7
  5497                           tblptrl	equ	0xFF6
  5498                           tablat	equ	0xFF5
  5499                           prodh	equ	0xFF4
  5500                           prodl	equ	0xFF3
  5501                           intcon	equ	0xFF2
  5502                           postinc0	equ	0xFEE
  5503                           wreg	equ	0xFE8
  5504                           indf1	equ	0xFE7
  5505                           fsr1h	equ	0xFE2
  5506                           fsr1l	equ	0xFE1
  5507                           indf2	equ	0xFDF
  5508                           postinc2	equ	0xFDE
  5509                           postdec2	equ	0xFDD
  5510                           fsr2h	equ	0xFDA
  5511                           fsr2l	equ	0xFD9
  5512                           status	equ	0xFD8
  5513                           
  5514 ;; *************** function _SetLine *****************
  5515 ;; Defined at:
  5516 ;;		line 74 in file "LCD.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;  line            1    wreg     unsigned char 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  line            1   41[COMRAM] unsigned char 
  5521 ;; Return value:  Size  Location     Type
  5522 ;;		None               void
  5523 ;; Registers used:
  5524 ;;		wreg, status,2, status,0, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5530 ;;      Params:         0       0       0       0
  5531 ;;      Locals:         1       0       0       0
  5532 ;;      Temps:          0       0       0       0
  5533 ;;      Totals:         1       0       0       0
  5534 ;;Total ram usage:        1 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    6
  5537 ;; This function calls:
  5538 ;;		_SendLCD
  5539 ;; This function is called by:
  5540 ;;		_ScanIR
  5541 ;;		_ScanWithRange
  5542 ;;		_main
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546                           	psect	text25
  5547  00182A                     __ptext25:
  5548                           	opt stack 0
  5549  00182A                     _SetLine:
  5550                           	opt stack 24
  5551                           
  5552                           ;incstack = 0
  5553                           ;SetLine@line stored from wreg
  5554  00182A  6E2A               	movwf	SetLine@line,c
  5555                           
  5556                           ;LCD.c: 75: if (line==1) {
  5557  00182C  042A               	decf	SetLine@line,w,c
  5558  00182E  A4D8               	btfss	status,2,c
  5559  001830  D006               	goto	l2150
  5560                           
  5561                           ;LCD.c: 76: SendLCD(0x80,0);
  5562  001832  0E00               	movlw	0
  5563  001834  6E28               	movwf	SendLCD@type,c
  5564  001836  0E80               	movlw	128
  5565  001838  EC2D  F00C         	call	_SendLCD
  5566                           
  5567                           ;LCD.c: 77: } else if (line==2) {
  5568  00183C  D009               	goto	l2154
  5569  00183E                     l2150:
  5570  00183E  0E02               	movlw	2
  5571  001840  182A               	xorwf	SetLine@line,w,c
  5572  001842  A4D8               	btfss	status,2,c
  5573  001844  D005               	goto	l2154
  5574                           
  5575                           ;LCD.c: 78: SendLCD(0xC0,0);
  5576  001846  0E00               	movlw	0
  5577  001848  6E28               	movwf	SendLCD@type,c
  5578  00184A  0EC0               	movlw	192
  5579  00184C  EC2D  F00C         	call	_SendLCD
  5580  001850                     l2154:
  5581                           
  5582                           ;LCD.c: 79: }
  5583                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5584  001850  0E21               	movlw	33
  5585  001852                     u2987:
  5586  001852  2EE8               	decfsz	wreg,f,c
  5587  001854  D7FE               	goto	u2987
  5588  001856  F000               	nop	
  5589  001858  0012               	return		;funcret
  5590  00185A                     __end_of_SetLine:
  5591                           	opt stack 0
  5592                           tblptru	equ	0xFF8
  5593                           tblptrh	equ	0xFF7
  5594                           tblptrl	equ	0xFF6
  5595                           tablat	equ	0xFF5
  5596                           prodh	equ	0xFF4
  5597                           prodl	equ	0xFF3
  5598                           intcon	equ	0xFF2
  5599                           postinc0	equ	0xFEE
  5600                           wreg	equ	0xFE8
  5601                           indf1	equ	0xFE7
  5602                           fsr1h	equ	0xFE2
  5603                           fsr1l	equ	0xFE1
  5604                           indf2	equ	0xFDF
  5605                           postinc2	equ	0xFDE
  5606                           postdec2	equ	0xFDD
  5607                           fsr2h	equ	0xFDA
  5608                           fsr2l	equ	0xFD9
  5609                           status	equ	0xFD8
  5610                           
  5611 ;; *************** function _LCD_String *****************
  5612 ;; Defined at:
  5613 ;;		line 83 in file "LCD.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  string          2   41[COMRAM] PTR unsigned char 
  5616 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5617 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5618 ;;		 -> STR_1(12), 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;		None
  5621 ;; Return value:  Size  Location     Type
  5622 ;;		None               void
  5623 ;; Registers used:
  5624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5630 ;;      Params:         2       0       0       0
  5631 ;;      Locals:         0       0       0       0
  5632 ;;      Temps:          0       0       0       0
  5633 ;;      Totals:         2       0       0       0
  5634 ;;Total ram usage:        2 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    6
  5637 ;; This function calls:
  5638 ;;		_SendLCD
  5639 ;; This function is called by:
  5640 ;;		_ScanIR
  5641 ;;		_ScanWithRange
  5642 ;;		_main
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text26
  5647  0015DC                     __ptext26:
  5648                           	opt stack 0
  5649  0015DC                     _LCD_String:
  5650                           	opt stack 23
  5651                           
  5652                           ;LCD.c: 85: while(*string != 0){
  5653                           
  5654                           ;incstack = 0
  5655  0015DC  D01A               	goto	l2164
  5656  0015DE                     l2158:
  5657                           
  5658                           ;LCD.c: 88: SendLCD(*string++,1);
  5659  0015DE  0E01               	movlw	1
  5660  0015E0  6E28               	movwf	SendLCD@type,c
  5661  0015E2  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5662  0015E6  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5663  0015EA  6AF8               	clrf	tblptru,c
  5664  0015EC  0E02               	movlw	(high __ramtop+-1)
  5665  0015EE  64F7               	cpfsgt	tblptrh,c
  5666  0015F0  D003               	bra	u1517
  5667  0015F2  0008               	tblrd		*
  5668  0015F4  50F5               	movf	tablat,w,c
  5669  0015F6  D005               	bra	u1510
  5670  0015F8                     u1517:
  5671  0015F8  CFF6 FFE1          	movff	tblptrl,fsr1l
  5672  0015FC  CFF7 FFE2          	movff	tblptrh,fsr1h
  5673  001600  50E7               	movf	indf1,w,c
  5674  001602                     u1510:
  5675  001602  EC2D  F00C         	call	_SendLCD
  5676  001606  4A2A               	infsnz	LCD_String@string,f,c
  5677  001608  2A2B               	incf	LCD_String@string+1,f,c
  5678                           
  5679                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5680  00160A  0E21               	movlw	33
  5681  00160C                     u2997:
  5682  00160C  2EE8               	decfsz	wreg,f,c
  5683  00160E  D7FE               	goto	u2997
  5684  001610  F000               	nop	
  5685  001612                     l2164:
  5686  001612  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5687  001616  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5688  00161A  6AF8               	clrf	tblptru,c
  5689  00161C  0E02               	movlw	(high __ramtop+-1)
  5690  00161E  64F7               	cpfsgt	tblptrh,c
  5691  001620  D003               	bra	u1527
  5692  001622  0008               	tblrd		*
  5693  001624  50F5               	movf	tablat,w,c
  5694  001626  D005               	bra	u1520
  5695  001628                     u1527:
  5696  001628  CFF6 FFE1          	movff	tblptrl,fsr1l
  5697  00162C  CFF7 FFE2          	movff	tblptrh,fsr1h
  5698  001630  50E7               	movf	indf1,w,c
  5699  001632                     u1520:
  5700  001632  0900               	iorlw	0
  5701  001634  B4D8               	btfsc	status,2,c
  5702  001636  0012               	return	
  5703  001638  D7D2               	goto	l2158
  5704  00163A                     __end_of_LCD_String:
  5705                           	opt stack 0
  5706                           tblptru	equ	0xFF8
  5707                           tblptrh	equ	0xFF7
  5708                           tblptrl	equ	0xFF6
  5709                           tablat	equ	0xFF5
  5710                           prodh	equ	0xFF4
  5711                           prodl	equ	0xFF3
  5712                           intcon	equ	0xFF2
  5713                           postinc0	equ	0xFEE
  5714                           wreg	equ	0xFE8
  5715                           indf1	equ	0xFE7
  5716                           fsr1h	equ	0xFE2
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           postinc2	equ	0xFDE
  5720                           postdec2	equ	0xFDD
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _SendLCD *****************
  5726 ;; Defined at:
  5727 ;;		line 27 in file "LCD.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  Byte            1    wreg     unsigned char 
  5730 ;;  type            1   39[COMRAM] unsigned char 
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;  Byte            1   40[COMRAM] unsigned char 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;		None               void
  5735 ;; Registers used:
  5736 ;;		wreg, status,2, status,0, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5742 ;;      Params:         1       0       0       0
  5743 ;;      Locals:         1       0       0       0
  5744 ;;      Temps:          0       0       0       0
  5745 ;;      Totals:         2       0       0       0
  5746 ;;Total ram usage:        2 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    5
  5749 ;; This function calls:
  5750 ;;		_LCDout
  5751 ;; This function is called by:
  5752 ;;		_initLCD
  5753 ;;		_SetLine
  5754 ;;		_LCD_String
  5755 ;;		_ScanIR
  5756 ;;		_ScanWithRange
  5757 ;;		_main
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text27
  5762  00185A                     __ptext27:
  5763                           	opt stack 0
  5764  00185A                     _SendLCD:
  5765                           	opt stack 24
  5766                           
  5767                           ;incstack = 0
  5768                           ;SendLCD@Byte stored from wreg
  5769  00185A  6E29               	movwf	SendLCD@Byte,c
  5770                           
  5771                           ;LCD.c: 30: LATAbits.LATA6=type;
  5772  00185C  B028               	btfsc	SendLCD@type,0,c
  5773  00185E  D002               	bra	u1305
  5774  001860  9C89               	bcf	3977,6,c	;volatile
  5775  001862  D001               	bra	u1306
  5776  001864                     u1305:
  5777  001864  8C89               	bsf	3977,6,c	;volatile
  5778  001866                     u1306:
  5779                           
  5780                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5781  001866  3829               	swapf	SendLCD@Byte,w,c
  5782  001868  0B0F               	andlw	15
  5783  00186A  0B0F               	andlw	15
  5784  00186C  EC50  F008         	call	_LCDout
  5785                           
  5786                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5787  001870  0E06               	movlw	6
  5788  001872                     u3007:
  5789  001872  2EE8               	decfsz	wreg,f,c
  5790  001874  D7FE               	goto	u3007
  5791  001876  D000               	nop2		;nop
  5792                           
  5793                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5794  001878  5029               	movf	SendLCD@Byte,w,c
  5795  00187A  0B0F               	andlw	15
  5796  00187C  EC50  F008         	call	_LCDout
  5797                           
  5798                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5799  001880  0E21               	movlw	33
  5800  001882                     u3017:
  5801  001882  2EE8               	decfsz	wreg,f,c
  5802  001884  D7FE               	goto	u3017
  5803  001886  F000               	nop	
  5804  001888  0012               	return		;funcret
  5805  00188A                     __end_of_SendLCD:
  5806                           	opt stack 0
  5807                           tblptru	equ	0xFF8
  5808                           tblptrh	equ	0xFF7
  5809                           tblptrl	equ	0xFF6
  5810                           tablat	equ	0xFF5
  5811                           prodh	equ	0xFF4
  5812                           prodl	equ	0xFF3
  5813                           intcon	equ	0xFF2
  5814                           postinc0	equ	0xFEE
  5815                           wreg	equ	0xFE8
  5816                           indf1	equ	0xFE7
  5817                           fsr1h	equ	0xFE2
  5818                           fsr1l	equ	0xFE1
  5819                           indf2	equ	0xFDF
  5820                           postinc2	equ	0xFDE
  5821                           postdec2	equ	0xFDD
  5822                           fsr2h	equ	0xFDA
  5823                           fsr2l	equ	0xFD9
  5824                           status	equ	0xFD8
  5825                           
  5826 ;; *************** function _LCDout *****************
  5827 ;; Defined at:
  5828 ;;		line 14 in file "LCD.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;  number          1    wreg     unsigned char 
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  number          1   38[COMRAM] unsigned char 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;		None               void
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5842 ;;      Params:         0       0       0       0
  5843 ;;      Locals:         1       0       0       0
  5844 ;;      Temps:          3       0       0       0
  5845 ;;      Totals:         4       0       0       0
  5846 ;;Total ram usage:        4 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    4
  5849 ;; This function calls:
  5850 ;;		_E_TOG
  5851 ;; This function is called by:
  5852 ;;		_SendLCD
  5853 ;;		_initLCD
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text28
  5858  0010A0                     __ptext28:
  5859                           	opt stack 0
  5860  0010A0                     _LCDout:
  5861                           	opt stack 24
  5862                           
  5863                           ;incstack = 0
  5864                           ;LCDout@number stored from wreg
  5865  0010A0  6E27               	movwf	LCDout@number,c
  5866                           
  5867                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5868  0010A2  5027               	movf	LCDout@number,w,c
  5869  0010A4  6E24               	movwf	??_LCDout& (0+255),c
  5870  0010A6  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5871  0010A8  0E07               	movlw	7
  5872  0010AA                     u1195:
  5873  0010AA  90D8               	bcf	status,0,c
  5874  0010AC  3624               	rlcf	??_LCDout,f,c
  5875  0010AE  3625               	rlcf	??_LCDout+1,f,c
  5876  0010B0  2EE8               	decfsz	wreg,f,c
  5877  0010B2  D7FB               	goto	u1195
  5878  0010B4  0E07               	movlw	7
  5879  0010B6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5880  0010B8                     u1205:
  5881  0010B8  3425               	rlcf	??_LCDout+1,w,c
  5882  0010BA  3225               	rrcf	??_LCDout+1,f,c
  5883  0010BC  3224               	rrcf	??_LCDout,f,c
  5884  0010BE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5885  0010C0  D7FB               	goto	u1205
  5886  0010C2  4624               	rlncf	??_LCDout,f,c
  5887  0010C4  508B               	movf	3979,w,c	;volatile
  5888  0010C6  1824               	xorwf	??_LCDout,w,c
  5889  0010C8  0BFD               	andlw	-3
  5890  0010CA  1824               	xorwf	??_LCDout,w,c
  5891  0010CC  6E8B               	movwf	3979,c	;volatile
  5892                           
  5893                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5894  0010CE  5027               	movf	LCDout@number,w,c
  5895  0010D0  6E24               	movwf	??_LCDout& (0+255),c
  5896  0010D2  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5897  0010D4  0E06               	movlw	6
  5898  0010D6                     u1215:
  5899  0010D6  90D8               	bcf	status,0,c
  5900  0010D8  3624               	rlcf	??_LCDout,f,c
  5901  0010DA  3625               	rlcf	??_LCDout+1,f,c
  5902  0010DC  2EE8               	decfsz	wreg,f,c
  5903  0010DE  D7FB               	goto	u1215
  5904  0010E0  0E07               	movlw	7
  5905  0010E2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5906  0010E4                     u1225:
  5907  0010E4  3425               	rlcf	??_LCDout+1,w,c
  5908  0010E6  3225               	rrcf	??_LCDout+1,f,c
  5909  0010E8  3224               	rrcf	??_LCDout,f,c
  5910  0010EA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5911  0010EC  D7FB               	goto	u1225
  5912  0010EE  4624               	rlncf	??_LCDout,f,c
  5913  0010F0  4624               	rlncf	??_LCDout,f,c
  5914  0010F2  508B               	movf	3979,w,c	;volatile
  5915  0010F4  1824               	xorwf	??_LCDout,w,c
  5916  0010F6  0BFB               	andlw	-5
  5917  0010F8  1824               	xorwf	??_LCDout,w,c
  5918  0010FA  6E8B               	movwf	3979,c	;volatile
  5919                           
  5920                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5921  0010FC  5027               	movf	LCDout@number,w,c
  5922  0010FE  6E24               	movwf	??_LCDout& (0+255),c
  5923  001100  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5924  001102  0E05               	movlw	5
  5925  001104                     u1235:
  5926  001104  90D8               	bcf	status,0,c
  5927  001106  3624               	rlcf	??_LCDout,f,c
  5928  001108  3625               	rlcf	??_LCDout+1,f,c
  5929  00110A  2EE8               	decfsz	wreg,f,c
  5930  00110C  D7FB               	goto	u1235
  5931  00110E  0E07               	movlw	7
  5932  001110  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5933  001112                     u1245:
  5934  001112  3425               	rlcf	??_LCDout+1,w,c
  5935  001114  3225               	rrcf	??_LCDout+1,f,c
  5936  001116  3224               	rrcf	??_LCDout,f,c
  5937  001118  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5938  00111A  D7FB               	goto	u1245
  5939  00111C  508C               	movf	3980,w,c	;volatile
  5940  00111E  1824               	xorwf	??_LCDout,w,c
  5941  001120  0BFE               	andlw	-2
  5942  001122  1824               	xorwf	??_LCDout,w,c
  5943  001124  6E8C               	movwf	3980,c	;volatile
  5944                           
  5945                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  5946  001126  5027               	movf	LCDout@number,w,c
  5947  001128  6E24               	movwf	??_LCDout& (0+255),c
  5948  00112A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5949  00112C  3A24               	swapf	??_LCDout,f,c
  5950  00112E  3A25               	swapf	??_LCDout+1,f,c
  5951  001130  0EF0               	movlw	240
  5952  001132  1625               	andwf	??_LCDout+1,f,c
  5953  001134  5024               	movf	??_LCDout,w,c
  5954  001136  0B0F               	andlw	15
  5955  001138  1225               	iorwf	??_LCDout+1,f,c
  5956  00113A  0EF0               	movlw	240
  5957  00113C  1624               	andwf	??_LCDout,f,c
  5958  00113E  0E07               	movlw	7
  5959  001140  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5960  001142                     u1255:
  5961  001142  3425               	rlcf	??_LCDout+1,w,c
  5962  001144  3225               	rrcf	??_LCDout+1,f,c
  5963  001146  3224               	rrcf	??_LCDout,f,c
  5964  001148  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5965  00114A  D7FB               	goto	u1255
  5966  00114C  4624               	rlncf	??_LCDout,f,c
  5967  00114E  508C               	movf	3980,w,c	;volatile
  5968  001150  1824               	xorwf	??_LCDout,w,c
  5969  001152  0BFD               	andlw	-3
  5970  001154  1824               	xorwf	??_LCDout,w,c
  5971  001156  6E8C               	movwf	3980,c	;volatile
  5972                           
  5973                           ;LCD.c: 21: E_TOG();
  5974  001158  ECB7  F00C         	call	_E_TOG	;wreg free
  5975                           
  5976                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5977  00115C  0E03               	movlw	3
  5978  00115E                     u3027:
  5979  00115E  2EE8               	decfsz	wreg,f,c
  5980  001160  D7FE               	goto	u3027
  5981  001162  F000               	nop	
  5982  001164  0012               	return		;funcret
  5983  001166                     __end_of_LCDout:
  5984                           	opt stack 0
  5985                           tblptru	equ	0xFF8
  5986                           tblptrh	equ	0xFF7
  5987                           tblptrl	equ	0xFF6
  5988                           tablat	equ	0xFF5
  5989                           prodh	equ	0xFF4
  5990                           prodl	equ	0xFF3
  5991                           intcon	equ	0xFF2
  5992                           postinc0	equ	0xFEE
  5993                           wreg	equ	0xFE8
  5994                           indf1	equ	0xFE7
  5995                           fsr1h	equ	0xFE2
  5996                           fsr1l	equ	0xFE1
  5997                           indf2	equ	0xFDF
  5998                           postinc2	equ	0xFDE
  5999                           postdec2	equ	0xFDD
  6000                           fsr2h	equ	0xFDA
  6001                           fsr2l	equ	0xFD9
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function _E_TOG *****************
  6005 ;; Defined at:
  6006 ;;		line 5 in file "LCD.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;		None
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;		None
  6011 ;; Return value:  Size  Location     Type
  6012 ;;		None               void
  6013 ;; Registers used:
  6014 ;;		wreg
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6020 ;;      Params:         0       0       0       0
  6021 ;;      Locals:         0       0       0       0
  6022 ;;      Temps:          0       0       0       0
  6023 ;;      Totals:         0       0       0       0
  6024 ;;Total ram usage:        0 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    3
  6027 ;; This function calls:
  6028 ;;		Nothing
  6029 ;; This function is called by:
  6030 ;;		_LCDout
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text29
  6035  00196E                     __ptext29:
  6036                           	opt stack 0
  6037  00196E                     _E_TOG:
  6038                           	opt stack 24
  6039                           
  6040                           ;LCD.c: 8: LATCbits.LATC0=1;
  6041                           
  6042                           ;incstack = 0
  6043  00196E  808B               	bsf	3979,0,c	;volatile
  6044                           
  6045                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6046  001970  0E03               	movlw	3
  6047  001972                     u3037:
  6048  001972  2EE8               	decfsz	wreg,f,c
  6049  001974  D7FE               	goto	u3037
  6050  001976  F000               	nop	
  6051                           
  6052                           ;LCD.c: 10: LATCbits.LATC0=0;
  6053  001978  908B               	bcf	3979,0,c	;volatile
  6054  00197A  0012               	return		;funcret
  6055  00197C                     __end_of_E_TOG:
  6056                           	opt stack 0
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           intcon	equ	0xFF2
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           indf1	equ	0xFE7
  6067                           fsr1h	equ	0xFE2
  6068                           fsr1l	equ	0xFE1
  6069                           indf2	equ	0xFDF
  6070                           postinc2	equ	0xFDE
  6071                           postdec2	equ	0xFDD
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8
  6075                           
  6076 ;; *************** function _InterruptHandlerLow *****************
  6077 ;; Defined at:
  6078 ;;		line 18 in file "main.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;		None               void
  6085 ;; Registers used:
  6086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6092 ;;      Params:         0       0       0       0
  6093 ;;      Locals:         0       0       0       0
  6094 ;;      Temps:         17       0       0       0
  6095 ;;      Totals:        17       0       0       0
  6096 ;;Total ram usage:       17 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    2
  6099 ;; This function calls:
  6100 ;;		Nothing
  6101 ;; This function is called by:
  6102 ;;		Interrupt level 1
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           	psect	intcodelo
  6107  000018                     __pintcodelo:
  6108                           	opt stack 0
  6109  000018                     _InterruptHandlerLow:
  6110                           	opt stack 23
  6111                           
  6112                           ;incstack = 0
  6113  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6114  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6115  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6116  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6117  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6118  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6119  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6120  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6121  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6122  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6123  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6124  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6125  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6126  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6127  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6128  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6129  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6130  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6131                           
  6132                           ;main.c: 20: if (PIR1bits.RCIF) {
  6133  00005E  AA9E               	btfss	3998,5,c	;volatile
  6134  000060  D016               	goto	i1l366
  6135                           
  6136                           ;main.c: 21: ReceivedString[i]=RCREG;
  6137  000062  503A               	movf	_i,w,c	;volatile
  6138  000064  0D01               	mullw	1
  6139  000066  0EC4               	movlw	low _ReceivedString
  6140  000068  24F3               	addwf	prodl,w,c
  6141  00006A  6ED9               	movwf	fsr2l,c
  6142  00006C  0E00               	movlw	high _ReceivedString
  6143  00006E  20F4               	addwfc	prodh,w,c
  6144  000070  6EDA               	movwf	fsr2h,c
  6145  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6146                           
  6147                           ;main.c: 22: RFID_Read=1;
  6148  000076  0E01               	movlw	1
  6149  000078  0101               	movlb	1	; () banked
  6150  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6151                           
  6152                           ; BSR set to: 1
  6153                           ;main.c: 23: if (i==15){
  6154  00007C  0E0F               	movlw	15
  6155  00007E  183A               	xorwf	_i,w,c	;volatile
  6156  000080  A4D8               	btfss	status,2,c
  6157  000082  D003               	goto	i1l2560
  6158                           
  6159                           ; BSR set to: 1
  6160                           ;main.c: 24: i=0;
  6161  000084  0E00               	movlw	0
  6162  000086  6E3A               	movwf	_i,c	;volatile
  6163                           
  6164                           ;main.c: 25: }else{
  6165  000088  D001               	goto	i1l2562
  6166  00008A                     i1l2560:
  6167                           
  6168                           ; BSR set to: 1
  6169                           ;main.c: 26: i++;
  6170  00008A  2A3A               	incf	_i,f,c	;volatile
  6171  00008C                     i1l2562:
  6172                           
  6173                           ; BSR set to: 1
  6174                           ;main.c: 27: }
  6175                           ;main.c: 28: PIR1bits.RCIF=0;
  6176  00008C  9A9E               	bcf	3998,5,c	;volatile
  6177  00008E                     i1l366:
  6178  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6179  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6180  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6181  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6182  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6183  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6184  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6185  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6186  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6187  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6188  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6189  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6190  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6191  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6192  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6193  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6194  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6195  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6196  0000D4  0010               	retfie	
  6197  0000D6                     __end_of_InterruptHandlerLow:
  6198                           	opt stack 0
  6199                           pclatu	equ	0xFFB
  6200                           pclath	equ	0xFFA
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           postinc0	equ	0xFEE
  6209                           fsr0h	equ	0xFEA
  6210                           fsr0l	equ	0xFE9
  6211                           wreg	equ	0xFE8
  6212                           indf1	equ	0xFE7
  6213                           fsr1h	equ	0xFE2
  6214                           fsr1l	equ	0xFE1
  6215                           bsr	equ	0xFE0
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223 ;; *************** function _InterruptHandlerHigh *****************
  6224 ;; Defined at:
  6225 ;;		line 34 in file "main.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;		None               void
  6232 ;; Registers used:
  6233 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6239 ;;      Params:         0       0       0       0
  6240 ;;      Locals:         0       0       0       0
  6241 ;;      Temps:         14       0       0       0
  6242 ;;      Totals:        14       0       0       0
  6243 ;;Total ram usage:       14 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    1
  6246 ;; This function calls:
  6247 ;;		i2_delay_tenth_s
  6248 ;; This function is called by:
  6249 ;;		Interrupt level 2
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           	psect	intcode
  6254  000008                     __pintcode:
  6255                           	opt stack 0
  6256  000008                     _InterruptHandlerHigh:
  6257                           	opt stack 23
  6258                           
  6259                           ;incstack = 0
  6260  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6261  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6262  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6263  000012  EFB5  F009         	goto	int_func
  6264                           pclatu	equ	0xFFB
  6265                           pclath	equ	0xFFA
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           intcon	equ	0xFF2
  6273                           postinc0	equ	0xFEE
  6274                           fsr0h	equ	0xFEA
  6275                           fsr0l	equ	0xFE9
  6276                           wreg	equ	0xFE8
  6277                           indf1	equ	0xFE7
  6278                           fsr1h	equ	0xFE2
  6279                           fsr1l	equ	0xFE1
  6280                           bsr	equ	0xFE0
  6281                           indf2	equ	0xFDF
  6282                           postinc2	equ	0xFDE
  6283                           postdec2	equ	0xFDD
  6284                           fsr2h	equ	0xFDA
  6285                           fsr2l	equ	0xFD9
  6286                           status	equ	0xFD8
  6287                           
  6288                           	psect	intcode_body
  6289  00136A                     __pintcode_body:
  6290                           	opt stack 23
  6291  00136A                     int_func:
  6292                           	opt stack 23
  6293  00136A  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6294  00136E  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6295  001372  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6296  001376  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6297  00137A  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6298  00137E  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6299  001382  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6300  001386  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6301  00138A  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6302  00138E  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6303  001392  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6304  001396  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6305                           
  6306                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6307  00139A  A2F2               	btfss	intcon,1,c	;volatile
  6308  00139C  D00D               	goto	i2l374
  6309                           
  6310                           ;main.c: 36: if (mode==-1) {
  6311  00139E  283B               	incf	_mode,w,c	;volatile
  6312  0013A0  A4D8               	btfss	status,2,c
  6313  0013A2  D003               	goto	i2l2570
  6314                           
  6315                           ;main.c: 38: mode=1;
  6316  0013A4  0E01               	movlw	1
  6317  0013A6  6E3B               	movwf	_mode,c	;volatile
  6318                           
  6319                           ;main.c: 39: } else if (mode==0) {
  6320  0013A8  D003               	goto	i2l2574
  6321  0013AA                     i2l2570:
  6322  0013AA  503B               	movf	_mode,w,c	;volatile
  6323  0013AC  A4D8               	btfss	status,2,c
  6324                           
  6325                           ;main.c: 43: mode=-1;
  6326                           
  6327                           ;main.c: 41: } else {
  6328  0013AE  683B               	setf	_mode,c	;volatile
  6329  0013B0                     i2l2574:
  6330                           
  6331                           ;main.c: 44: }
  6332                           ;main.c: 46: delay_tenth_s(2);
  6333  0013B0  0E02               	movlw	2
  6334  0013B2  ECE0  F00B         	call	i2_delay_tenth_s
  6335                           
  6336                           ;main.c: 47: INTCONbits.INT0IF=0;
  6337  0013B6  92F2               	bcf	intcon,1,c	;volatile
  6338  0013B8                     i2l374:
  6339  0013B8  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6340  0013BC  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6341  0013C0  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6342  0013C4  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6343  0013C8  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6344  0013CC  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6345  0013D0  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6346  0013D4  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6347  0013D8  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6348  0013DC  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6349  0013E0  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6350  0013E4  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6351  0013E8  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6352  0013EC  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6353  0013F0  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6354  0013F2  0011               	retfie		f
  6355  0013F4                     __end_of_InterruptHandlerHigh:
  6356                           	opt stack 0
  6357                           pclatu	equ	0xFFB
  6358                           pclath	equ	0xFFA
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           prodh	equ	0xFF4
  6364                           prodl	equ	0xFF3
  6365                           intcon	equ	0xFF2
  6366                           postinc0	equ	0xFEE
  6367                           fsr0h	equ	0xFEA
  6368                           fsr0l	equ	0xFE9
  6369                           wreg	equ	0xFE8
  6370                           indf1	equ	0xFE7
  6371                           fsr1h	equ	0xFE2
  6372                           fsr1l	equ	0xFE1
  6373                           bsr	equ	0xFE0
  6374                           indf2	equ	0xFDF
  6375                           postinc2	equ	0xFDE
  6376                           postdec2	equ	0xFDD
  6377                           fsr2h	equ	0xFDA
  6378                           fsr2l	equ	0xFD9
  6379                           status	equ	0xFD8
  6380                           
  6381 ;; *************** function i2_delay_tenth_s *****************
  6382 ;; Defined at:
  6383 ;;		line 32 in file "Movement.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  tenth_second    1    wreg     unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6388 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;		None               void
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6398 ;;      Params:         0       0       0       0
  6399 ;;      Locals:         3       0       0       0
  6400 ;;      Temps:          1       0       0       0
  6401 ;;      Totals:         4       0       0       0
  6402 ;;Total ram usage:        4 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; This function calls:
  6405 ;;		Nothing
  6406 ;; This function is called by:
  6407 ;;		_InterruptHandlerHigh
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           	psect	text32
  6412  0017C0                     __ptext32:
  6413                           	opt stack 0
  6414  0017C0                     i2_delay_tenth_s:
  6415                           	opt stack 23
  6416                           
  6417                           ;incstack = 0
  6418                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6419  0017C0  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6420                           
  6421                           ;Movement.c: 33: unsigned int i=0;
  6422  0017C2  0E00               	movlw	0
  6423  0017C4  6E04               	movwf	i2delay_tenth_s@i+1,c
  6424  0017C6  0E00               	movlw	0
  6425  0017C8  6E03               	movwf	i2delay_tenth_s@i,c
  6426                           
  6427                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6428  0017CA  0E00               	movlw	0
  6429  0017CC  6E04               	movwf	i2delay_tenth_s@i+1,c
  6430  0017CE  0E01               	movlw	1
  6431  0017D0  6E03               	movwf	i2delay_tenth_s@i,c
  6432  0017D2  D009               	goto	i2l2532
  6433  0017D4                     i2l2528:
  6434                           
  6435                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6436  0017D4  0E82               	movlw	130
  6437  0017D6  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6438  0017D8  0EDE               	movlw	222
  6439  0017DA                     i2u304_47:
  6440  0017DA  2EE8               	decfsz	wreg,f,c
  6441  0017DC  D7FE               	goto	i2u304_47
  6442  0017DE  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6443  0017E0  D7FC               	goto	i2u304_47
  6444  0017E2  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6445  0017E4  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6446  0017E6                     i2l2532:
  6447  0017E6  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6448  0017E8  0D02               	mullw	2
  6449  0017EA  5003               	movf	i2delay_tenth_s@i,w,c
  6450  0017EC  5CF3               	subwf	prodl,w,c
  6451  0017EE  5004               	movf	i2delay_tenth_s@i+1,w,c
  6452  0017F0  58F4               	subwfb	prodh,w,c
  6453  0017F2  A0D8               	btfss	status,0,c
  6454  0017F4  0012               	return	
  6455  0017F6  D7EE               	goto	i2l2528
  6456  0017F8                     __end_ofi2_delay_tenth_s:
  6457                           	opt stack 0
  6458                           pclatu	equ	0xFFB
  6459                           pclath	equ	0xFFA
  6460                           tblptru	equ	0xFF8
  6461                           tblptrh	equ	0xFF7
  6462                           tblptrl	equ	0xFF6
  6463                           tablat	equ	0xFF5
  6464                           prodh	equ	0xFF4
  6465                           prodl	equ	0xFF3
  6466                           intcon	equ	0xFF2
  6467                           postinc0	equ	0xFEE
  6468                           fsr0h	equ	0xFEA
  6469                           fsr0l	equ	0xFE9
  6470                           wreg	equ	0xFE8
  6471                           indf1	equ	0xFE7
  6472                           fsr1h	equ	0xFE2
  6473                           fsr1l	equ	0xFE1
  6474                           bsr	equ	0xFE0
  6475                           indf2	equ	0xFDF
  6476                           postinc2	equ	0xFDE
  6477                           postdec2	equ	0xFDD
  6478                           fsr2h	equ	0xFDA
  6479                           fsr2l	equ	0xFD9
  6480                           status	equ	0xFD8
  6481                           pclatu	equ	0xFFB
  6482                           pclath	equ	0xFFA
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           intcon	equ	0xFF2
  6490                           postinc0	equ	0xFEE
  6491                           fsr0h	equ	0xFEA
  6492                           fsr0l	equ	0xFE9
  6493                           wreg	equ	0xFE8
  6494                           indf1	equ	0xFE7
  6495                           fsr1h	equ	0xFE2
  6496                           fsr1l	equ	0xFE1
  6497                           bsr	equ	0xFE0
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505                           	psect	rparam
  6506  0000                     pclatu	equ	0xFFB
  6507                           pclath	equ	0xFFA
  6508                           tblptru	equ	0xFF8
  6509                           tblptrh	equ	0xFF7
  6510                           tblptrl	equ	0xFF6
  6511                           tablat	equ	0xFF5
  6512                           prodh	equ	0xFF4
  6513                           prodl	equ	0xFF3
  6514                           intcon	equ	0xFF2
  6515                           postinc0	equ	0xFEE
  6516                           fsr0h	equ	0xFEA
  6517                           fsr0l	equ	0xFE9
  6518                           wreg	equ	0xFE8
  6519                           indf1	equ	0xFE7
  6520                           fsr1h	equ	0xFE2
  6521                           fsr1l	equ	0xFE1
  6522                           bsr	equ	0xFE0
  6523                           indf2	equ	0xFDF
  6524                           postinc2	equ	0xFDE
  6525                           postdec2	equ	0xFDD
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530                           	psect	temp
  6531  00003C                     btemp:
  6532                           	opt stack 0
  6533  00003C                     	ds	1
  6534  0000                     int$flags	set	btemp
  6535                           pclatu	equ	0xFFB
  6536                           pclath	equ	0xFFA
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           prodh	equ	0xFF4
  6542                           prodl	equ	0xFF3
  6543                           intcon	equ	0xFF2
  6544                           postinc0	equ	0xFEE
  6545                           fsr0h	equ	0xFEA
  6546                           fsr0l	equ	0xFE9
  6547                           wreg	equ	0xFE8
  6548                           indf1	equ	0xFE7
  6549                           fsr1h	equ	0xFE2
  6550                           fsr1l	equ	0xFE1
  6551                           bsr	equ	0xFE0
  6552                           indf2	equ	0xFDF
  6553                           postinc2	equ	0xFDE
  6554                           postdec2	equ	0xFDD
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     92     116
    BANK1           256    250     255
    BANK2           256    118     118

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   56218
                                             82 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2    118   118      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       69    61      8   21421
                                             13 BANK0     69    61      8
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11625
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     76      76       9       46.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      74       5       72.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     224       3        0.0%
DATA                 0      0     224      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 18:54:47 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0F48  
                                  l65 14D2                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l221 0D0A                                   l223 0D46  
                                 l226 0E02                                   l379 03F8  
                                 l869 1682                                   l879 16C4  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l2120 1510                                  l2042 1938  
                                l2132 157A                                  l2116 1508  
                                l2052 1650                                  l3100 0DA2  
                                l2150 183E                                  l2142 15BE  
                                l2126 154C                                  l2054 1658  
                                l2136 1582                                  l2064 1678  
                                l2056 165C                                  l2080 16BA  
                                l2072 169A                                  l3104 0DFE  
                                l2154 1850                                  l2074 16A2  
                                l2314 18C8                                  l2164 1612  
                                l2076 16A6                                  l3028 1088  
                                l2172 17AE                                  l3116 0E1A  
                                l3212 04A4                                  l2158 15DE  
                                l3054 0C30                                  l3118 0E20  
                                l2510 127A                                  l3302 0742  
                                l2168 179C                                  l3304 0748  
                                l3312 07B0                                  l3216 04D6  
                                l2522 12D2                                  l2514 1282  
                                l3322 0812                                  l3324 0818  
                                l3252 05A4                                  l3236 052A  
                                l3270 0664                                  l3262 0640  
                                l3334 0858                                  l3280 06CC  
                                l2810 1460                                  l3098 0D8A  
                                l3290 0716                                  l3266 064E  
                                l3258 05F2                                  l3178 03FE  
                                l3292 071C                                  l3284 06D6  
                                l2814 146E                                  l2806 1456  
                                l2904 0960                                  l2824 0F20  
                                l2832 1496                                  l3296 0726  
                                l2930 09F4                                  l2906 0988  
                                l2850 12F0                                  l2940 0A4E  
                                l2916 09B8                                  l2860 1328  
                                l2836 14B2                                  l2828 147A  
                                l2950 0A7C                                  l2942 0A58  
                                l2918 09BE                                  l2782 1408  
                                l2854 1308                                  l2846 12D8  
                                l2960 0AAE                                  l2936 0A16  
                                l2882 08A4                                  l2794 142E  
                                l2980 0B4C                                  l2972 0AF0  
                                l2884 08B6                                  l2876 0888  
                                l2796 1436                                  l2788 1418  
                                l2974 0AF6                                  l2966 0AD2  
                                l2958 0AA2                                  l2894 08EE  
                                l2982 0B58                                  l2798 143A  
                                l2984 0B72                                  l2888 08BE  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1205 10B8                                  u1215 10D6  
                                u1225 10E4                                  u1305 1864  
                                u1306 1866                                  u1235 1104  
                                u2204 0EE0                                  u1245 1112  
                                u2205 0EDC                                  u1510 1602  
                                u2214 0F3C                                  _LATB 000F8A  
                                u1255 1142                                  u3007 1872  
                                u2215 0F38                                  u1520 1632  
                                u3017 1882                                  u2225 0F96  
                                u3027 115E                                  u1195 10AA  
                                u3037 1972                                  u1517 15F8  
                                u1445 1518                                  u1527 1628  
                                u1475 158A                                  u2700 06AA  
                                u2702 06AC                                  u1755 18C4  
                                u1756 18C6                                  u1775 18D6  
                                u2807 118E                                  u1776 18D8  
                                u2817 119E                                  u2690 0696  
                                u2907 0C7C                                  u2827 11AC  
                                u2692 0698                                  u2917 14CC  
                                u2837 11BA                                  u2927 17A2  
                                u2847 11CC                                  u2937 0FF4  
                                u2857 11DE                                  u2777 0454  
                                u2947 100A                                  u2867 11F4  
                                u2787 046C                                  u2957 1322  
                                u2877 1208                                  u2797 1178  
                                u2967 1540                                  u2887 121A  
                                u2977 15B2                                  u2897 0C64  
                                u2987 1852                                  u2997 160C  
                          ScanIR@Move 0071                                  _main 0350  
                                _mode 003B                         main@ScanAngle 00B4  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 12D6  
                                pclat 000FFA                   fullSpeedAhead@power 0066  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00D6                          ___param_bank 000010  
                     i2_delay_tenth_s 17C0                       __end_of_SendLCD 188A  
                     __end_of_SetLine 185A                    ScanWithRange@F3892 00C0  
                         ScanIR@F3882 00BC                                 ?_main 0001  
                     __end_of___awdiv 1478                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 168C  
                     __end_of___lwmod 16CE                                 i1l366 008E  
                               i2l374 13B8                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 196E  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1222  
                  ScanWithRange@power 00A9                       __end_of_dpowers 030B  
                     __end_of_isdigit 1940                                 main@i 00BB  
                               tablat 000FF5                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 0B80  
              __size_of_ScanWithRange 02EC                        __CFG_MCLRE$OFF 000000  
                     __initialization 188A                          __end_of_main 087A  
                        __end_of_stop 136A                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 009F                  __end_of_enableSensor 18DA  
                 VerifySignal@hexByte 002D                                ??_main 00B2  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2560 008A  
                              i1l2562 008C                                i2l2532 17E6  
                      __CFG_WDTEN$OFF 000000                                i2l2528 17D4  
                              i2l2570 13AA                                i2l2574 13B0  
               __end_of_delay_tenth_s 17C0                                _LCDout 10A0  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 17F8  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 0FA6                             ??_SetLine 002A  
                              ___wmul 18DA                             ??___awdiv 002E  
                    __end_of_initRFID 195C                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 1900  
                __size_of_grabRightIR 0072                                clear_0 189C  
                    ___awdiv@quotient 0030                                main@mL 0264  
                              main@mR 026D                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0B80  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060       ScanWithRange@TimeAboveThreshold 00A4  
                    __end_of_turnLeft 1788                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 18A6                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 197C  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 16CE  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002C                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 13EC           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00BC                            __pbssBANK1 01FA  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 163A  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 156A  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 18B4  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 182A  
                             _SendLCD 185A                               __Hparam 0000  
                             _SetLine 182A                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 13F4  
                     __size_of___wmul 0026                               ___lwdiv 163A  
                             ___lwmod 168C                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 188A  
                     ??_ScanWithRange 0075                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 195C                               __ptext2 1940  
                             __ptext3 17F8                               __ptext4 1166  
                             __ptext5 1900                               __ptext6 16CE  
                             __ptext7 18B4                               __ptext8 1222  
                             __ptext9 0B80                             _T0CONbits 000FD5  
                             _initLCD 1166                     __end_of_initTimer 196E  
                             _dpowers 0301                               _isdigit 1922  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 087A  
                      __pintcode_body 136A                  end_of_initialization 18A6  
                      ScanWithRange@i 00A5                        ScanWithRange@n 00A2  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 136A  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 174A                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B0                        __end_of_LCDout 1166  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 10A0                        _fullSpeedAhead 1478  
                      _ReceivedString 00C4                        __end_of___wmul 1900  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1922  
              __size_of_delay_tenth_s 0038                   start_initialization 188A  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 13F4  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 14F8  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 156A  
                        _initMotorPWM 17F8                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1961 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1788  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 12D6                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00B5  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 195C  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u304_47 17DA                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3896 01FA  
                         _grabRightIR 14F8                 ScanWithRange@LeftFlag 00AE  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0E6C  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 170C                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 007A  
                 __end_of_setMotorPWM 0FA6                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 170C                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 15DC                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 170C  
                            __ptext11 174A                              __ptext20 18DA  
                            __ptext12 1478                              __ptext21 168C  
                            __ptext13 1788                              __ptext22 163A  
                            __ptext14 0FA6                              __ptext23 14F8  
                            __ptext15 12D6                              __ptext32 17C0  
                            __ptext24 156A                              __ptext16 0E6C  
                            __ptext25 182A                              __ptext17 13F4  
                            __ptext26 15DC                              __ptext18 087A  
                            __ptext27 185A                              __ptext19 1922  
                            __ptext28 10A0                              __ptext29 196E  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 1940             ScanWithRange@SensorResult 00AA  
                      turnRight@power 006B                         __size_of_main 052A  
                  main@DirectionFound 00B9                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00B4  
                            int$flags 003C                              main@Move 00BA  
                 _InterruptHandlerLow 0018                            _LCD_String 15DC  
                            _turnLeft 174A                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 0E6C  
                        _VerifySignal 1222                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A7                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
