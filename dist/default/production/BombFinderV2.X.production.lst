

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 15:57:54 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISEbits	set	3990
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001CB6                     __pcinit:
   189                           	opt stack 0
   190  001CB6                     start_initialization:
   191                           	opt stack 0
   192  001CB6                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK2 (100 bytes)
   196  001CB6  EE02  F000         	lfsr	0,__pbssBANK2
   197  001CBA  0E64               	movlw	100
   198  001CBC                     clear_0:
   199  001CBC  6AEE               	clrf	postinc0,c
   200  001CBE  06E8               	decf	wreg,f,c
   201  001CC0  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK1 (21 bytes)
   204  001CC2  EE01  F0E2         	lfsr	0,__pbssBANK1
   205  001CC6  0E15               	movlw	21
   206  001CC8                     clear_1:
   207  001CC8  6AEE               	clrf	postinc0,c
   208  001CCA  06E8               	decf	wreg,f,c
   209  001CCC  E1FD               	bnz	clear_1
   210                           
   211                           ; Clear objects allocated to BANK0 (58 bytes)
   212  001CCE  EE00  F0BF         	lfsr	0,__pbssBANK0
   213  001CD2  0E3A               	movlw	58
   214  001CD4                     clear_2:
   215  001CD4  6AEE               	clrf	postinc0,c
   216  001CD6  06E8               	decf	wreg,f,c
   217  001CD8  E1FD               	bnz	clear_2
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220  001CDA  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221  001CDC  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   222  001CDE                     end_of_initialization:
   223                           	opt stack 0
   224  001CDE                     __end_of__initialization:
   225                           	opt stack 0
   226  001CDE  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227  001CE0  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228  001CE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   229  001CE4  6EF8               	movwf	tblptru,c
   230  001CE6  0100               	movlb	0
   231  001CE8  EFA8  F001         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  00003A                     __pbssCOMRAM:
   238                           	opt stack 0
   239  00003A                     _i:
   240                           	opt stack 0
   241  00003A                     	ds	1
   242  00003B                     _mode:
   243                           	opt stack 0
   244  00003B                     	ds	1
   245                           tblptru	equ	0xFF8
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           
   249                           	psect	bssBANK0
   250  0000BF                     __pbssBANK0:
   251                           	opt stack 0
   252  0000BF                     main@F3895:
   253                           	opt stack 0
   254  0000BF                     	ds	50
   255  0000F1                     ScanIR@F3879:
   256                           	opt stack 0
   257  0000F1                     	ds	4
   258  0000F5                     ScanWithRange@F3892:
   259                           	opt stack 0
   260  0000F5                     	ds	4
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265                           	psect	bssBANK1
   266  0001E2                     __pbssBANK1:
   267                           	opt stack 0
   268  0001E2                     main@F3898:
   269                           	opt stack 0
   270  0001E2                     	ds	4
   271  0001E6                     _ReceivedString:
   272                           	opt stack 0
   273  0001E6                     	ds	16
   274  0001F6                     _RFID_Read:
   275                           	opt stack 0
   276  0001F6                     	ds	1
   277                           tblptru	equ	0xFF8
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	bssBANK2
   282  000200                     __pbssBANK2:
   283                           	opt stack 0
   284  000200                     main@F3893:
   285                           	opt stack 0
   286  000200                     	ds	100
   287                           tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	cstackBANK1
   292  000100                     __pcstackBANK1:
   293                           	opt stack 0
   294  000100                     main@buf:
   295                           	opt stack 0
   296                           
   297                           ; 40 bytes @ 0x0
   298  000100                     	ds	40
   299  000128                     main@MoveType:
   300                           	opt stack 0
   301                           
   302                           ; 50 bytes @ 0x28
   303  000128                     	ds	50
   304  00015A                     main@MoveTime:
   305                           	opt stack 0
   306                           
   307                           ; 100 bytes @ 0x5A
   308  00015A                     	ds	100
   309  0001BE                     main@Message:
   310                           	opt stack 0
   311                           
   312                           ; 10 bytes @ 0xBE
   313  0001BE                     	ds	10
   314  0001C8                     main@ScanAngle:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0xC8
   318  0001C8                     	ds	1
   319  0001C9                     main@SensorResult:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0xC9
   323  0001C9                     	ds	4
   324  0001CD                     main@DirectionFound:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0xCD
   328  0001CD                     	ds	1
   329  0001CE                     main@i:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0xCE
   333  0001CE                     	ds	1
   334  0001CF                     main@Move:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0xCF
   338  0001CF                     	ds	1
   339  0001D0                     main@mL:
   340                           	opt stack 0
   341                           
   342                           ; 9 bytes @ 0xD0
   343  0001D0                     	ds	9
   344  0001D9                     main@mR:
   345                           	opt stack 0
   346                           
   347                           ; 9 bytes @ 0xD9
   348  0001D9                     	ds	9
   349                           tblptru	equ	0xFF8
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	cstackBANK0
   354  000060                     __pcstackBANK0:
   355                           	opt stack 0
   356  000060                     ??_sprintf:
   357  000060                     setMotorPWM@PWMduty:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x0
   361  000060                     	ds	2
   362  000062                     stop@mL:
   363                           	opt stack 0
   364  000062                     fullSpeedAhead@mL:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x2
   368  000062                     	ds	2
   369  000064                     stop@mR:
   370                           	opt stack 0
   371  000064                     fullSpeedAhead@mR:
   372                           	opt stack 0
   373  000064                     sprintf@ap:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x4
   377  000064                     	ds	2
   378  000066                     fullSpeedAhead@power:
   379                           	opt stack 0
   380  000066                     sprintf@prec:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x6
   384  000066                     	ds	1
   385  000067                     turnLeft@mL:
   386                           	opt stack 0
   387  000067                     turnRight@mL:
   388                           	opt stack 0
   389  000067                     fullSpeedBack@mL:
   390                           	opt stack 0
   391  000067                     sprintf@val:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x7
   395  000067                     	ds	2
   396  000069                     sprintf@flag:
   397                           	opt stack 0
   398  000069                     turnLeft@mR:
   399                           	opt stack 0
   400  000069                     turnRight@mR:
   401                           	opt stack 0
   402  000069                     fullSpeedBack@mR:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x9
   406  000069                     	ds	1
   407  00006A                     sprintf@width:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0xA
   411  00006A                     	ds	1
   412  00006B                     turnLeft@power:
   413                           	opt stack 0
   414  00006B                     turnRight@power:
   415                           	opt stack 0
   416  00006B                     fullSpeedBack@power:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xB
   420  00006B                     	ds	1
   421  00006C                     sprintf@c:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0xC
   425  00006C                     	ds	1
   426  00006D                     ScanIR@mL:
   427                           	opt stack 0
   428  00006D                     ScanWithRange@mL:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0xD
   432  00006D                     	ds	2
   433  00006F                     ScanIR@mR:
   434                           	opt stack 0
   435  00006F                     ScanWithRange@mR:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0xF
   439  00006F                     	ds	2
   440  000071                     ScanWithRange@loops:
   441                           	opt stack 0
   442  000071                     ScanIR@buf:
   443                           	opt stack 0
   444                           
   445                           ; 40 bytes @ 0x11
   446  000071                     	ds	2
   447  000073                     ScanWithRange@MoveTime:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x13
   451  000073                     	ds	2
   452  000075                     ScanWithRange@Move:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x15
   456  000075                     	ds	2
   457  000077                     ScanWithRange@MoveType:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x17
   461  000077                     	ds	2
   462  000079                     ScanWithRange@RFID_Read:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x19
   466  000079                     	ds	2
   467  00007B                     ??_ScanWithRange:
   468                           
   469                           ; 0 bytes @ 0x1B
   470  00007B                     	ds	5
   471  000080                     ScanWithRange@buf:
   472                           	opt stack 0
   473                           
   474                           ; 40 bytes @ 0x20
   475  000080                     	ds	25
   476  000099                     ScanIR@DirectionMoveThreshold:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x39
   480  000099                     	ds	2
   481  00009B                     ScanIR@SensorResult:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x3B
   485  00009B                     	ds	13
   486  0000A8                     ScanWithRange@n:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x48
   490  0000A8                     	ds	2
   491  0000AA                     ScanWithRange@i:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x4A
   495  0000AA                     	ds	2
   496  0000AC                     ScanWithRange@DirectionFoundThreshold:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x4C
   500  0000AC                     	ds	2
   501  0000AE                     ScanWithRange@MotorPower:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x4E
   505  0000AE                     	ds	1
   506  0000AF                     ScanWithRange@LeftFlick:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x4F
   510  0000AF                     	ds	1
   511  0000B0                     ScanWithRange@MiniLeftFlick:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x50
   515  0000B0                     	ds	1
   516  0000B1                     ScanWithRange@LeftFlag:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x51
   520  0000B1                     	ds	2
   521  0000B3                     ScanWithRange@TimeAboveThreshold:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x53
   525  0000B3                     	ds	1
   526  0000B4                     ScanWithRange@SensorResult:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x54
   530  0000B4                     	ds	4
   531  0000B8                     ScanWithRange@RightFlag:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x58
   535  0000B8                     	ds	2
   536  0000BA                     ??_main:
   537                           
   538                           ; 0 bytes @ 0x5A
   539  0000BA                     	ds	5
   540                           tblptru	equ	0xFF8
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           
   544                           	psect	cstackCOMRAM
   545  000001                     __pcstackCOMRAM:
   546                           	opt stack 0
   547  000001                     ??i2_delay_tenth_s:
   548                           
   549                           ; 0 bytes @ 0x0
   550  000001                     	ds	1
   551  000002                     i2delay_tenth_s@tenth_seconds:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x1
   555  000002                     	ds	1
   556  000003                     i2delay_tenth_s@i:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     ??_InterruptHandlerHigh:
   562                           
   563                           ; 0 bytes @ 0x4
   564  000005                     	ds	14
   565  000013                     ??_InterruptHandlerLow:
   566                           
   567                           ; 0 bytes @ 0x12
   568  000013                     	ds	17
   569  000024                     ??_isdigit:
   570  000024                     ??_LCDout:
   571  000024                     ??_delay_tenth_s:
   572  000024                     ?_grabRightIR:
   573                           	opt stack 0
   574  000024                     ?_grabLeftIR:
   575                           	opt stack 0
   576  000024                     ?___wmul:
   577                           	opt stack 0
   578  000024                     ?___lwdiv:
   579                           	opt stack 0
   580  000024                     enableSensor@status:
   581                           	opt stack 0
   582  000024                     VerifySignal@Signal:
   583                           	opt stack 0
   584  000024                     ___wmul@multiplier:
   585                           	opt stack 0
   586  000024                     ___lwdiv@dividend:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x23
   590  000024                     	ds	1
   591  000025                     enableSensor@sensor:
   592                           	opt stack 0
   593  000025                     delay_tenth_s@tenth_seconds:
   594                           	opt stack 0
   595  000025                     _isdigit$1986:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x24
   599  000025                     	ds	1
   600  000026                     ??_grabRightIR:
   601  000026                     ??_grabLeftIR:
   602  000026                     ??_VerifySignal:
   603  000026                     isdigit@c:
   604                           	opt stack 0
   605  000026                     delay_tenth_s@i:
   606                           	opt stack 0
   607  000026                     ___wmul@multiplicand:
   608                           	opt stack 0
   609  000026                     ___lwdiv@divisor:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x25
   613  000026                     	ds	1
   614  000027                     LCDout@number:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x26
   618  000027                     	ds	1
   619  000028                     SendLCD@type:
   620                           	opt stack 0
   621  000028                     ___wmul@product:
   622                           	opt stack 0
   623  000028                     ___lwdiv@quotient:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x27
   627  000028                     	ds	1
   628  000029                     SendLCD@Byte:
   629                           	opt stack 0
   630  000029                     grabRightIR@IR_signal:
   631                           	opt stack 0
   632  000029                     grabLeftIR@IR_signal:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x28
   636  000029                     	ds	1
   637  00002A                     ??_initLCD:
   638  00002A                     ?___awdiv:
   639                           	opt stack 0
   640  00002A                     SetLine@line:
   641                           	opt stack 0
   642  00002A                     VerifySignal@i:
   643                           	opt stack 0
   644  00002A                     ___lwdiv@counter:
   645                           	opt stack 0
   646  00002A                     LCD_String@string:
   647                           	opt stack 0
   648  00002A                     ___awdiv@dividend:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x29
   652  00002A                     	ds	1
   653  00002B                     ?___lwmod:
   654                           	opt stack 0
   655  00002B                     grabRightIR@i:
   656                           	opt stack 0
   657  00002B                     grabLeftIR@i:
   658                           	opt stack 0
   659  00002B                     VerifySignal@checksum:
   660                           	opt stack 0
   661  00002B                     ___lwmod@dividend:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x2A
   665  00002B                     	ds	1
   666  00002C                     VerifySignal@hexByte:
   667                           	opt stack 0
   668  00002C                     ___awdiv@divisor:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x2B
   672  00002C                     	ds	1
   673  00002D                     ___lwmod@divisor:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x2C
   677  00002D                     	ds	1
   678  00002E                     ___awdiv@counter:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x2D
   682  00002E                     	ds	1
   683  00002F                     ___awdiv@sign:
   684                           	opt stack 0
   685  00002F                     ___lwmod@counter:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x2E
   689  00002F                     	ds	1
   690  000030                     ?_sprintf:
   691                           	opt stack 0
   692  000030                     sprintf@sp:
   693                           	opt stack 0
   694  000030                     ___awdiv@quotient:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x2F
   698  000030                     	ds	2
   699  000032                     setMotorPWM@m:
   700                           	opt stack 0
   701  000032                     sprintf@f:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x31
   705  000032                     	ds	2
   706  000034                     ??_setMotorPWM:
   707                           
   708                           ; 0 bytes @ 0x33
   709  000034                     	ds	5
   710  000039                     ??_ScanIR:
   711                           
   712                           ; 0 bytes @ 0x38
   713  000039                     	ds	1
   714  00003A                     tblptru	equ	0xFF8
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           
   718                           ; 0 bytes @ 0x39
   719 ;;
   720 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   721 ;;
   722 ;; *************** function _main *****************
   723 ;; Defined at:
   724 ;;		line 51 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  MoveTime      100   90[BANK1 ] int [50]
   729 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   730 ;;  buf            40    0[BANK1 ] unsigned char [40]
   731 ;;  Message        10  190[BANK1 ] unsigned char [10]
   732 ;;  mR              9  217[BANK1 ] struct DC_motor
   733 ;;  mL              9  208[BANK1 ] struct DC_motor
   734 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   735 ;;  Move            1  207[BANK1 ] unsigned char 
   736 ;;  i               1  206[BANK1 ] unsigned char 
   737 ;;  DirectionFou    1  205[BANK1 ] char 
   738 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;		None               void
   741 ;; Registers used:
   742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   748 ;;      Params:         0       0       0       0
   749 ;;      Locals:         0       0     226       0
   750 ;;      Temps:          0       5       0       0
   751 ;;      Totals:         0       5     226       0
   752 ;;Total ram usage:      231 bytes
   753 ;; Hardware stack levels required when called:    8
   754 ;; This function calls:
   755 ;;		_LCD_String
   756 ;;		_ScanIR
   757 ;;		_ScanWithRange
   758 ;;		_SendLCD
   759 ;;		_SetLine
   760 ;;		_VerifySignal
   761 ;;		_delay_tenth_s
   762 ;;		_enableSensor
   763 ;;		_fullSpeedAhead
   764 ;;		_fullSpeedBack
   765 ;;		_grabLeftIR
   766 ;;		_grabRightIR
   767 ;;		_initIR
   768 ;;		_initLCD
   769 ;;		_initMotorPWM
   770 ;;		_initRFID
   771 ;;		_initTimer
   772 ;;		_sprintf
   773 ;;		_stop
   774 ;;		_turnLeft
   775 ;;		_turnRight
   776 ;; This function is called by:
   777 ;;		Startup code after reset
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text0
   782  000350                     __ptext0:
   783                           	opt stack 0
   784  000350                     _main:
   785                           	opt stack 23
   786                           
   787                           ;main.c: 54: unsigned char Message[10];
   788                           ;main.c: 55: unsigned char i=0;
   789                           
   790                           ;incstack = 0
   791  000350  0E00               	movlw	0
   792  000352  0101               	movlb	1	; () banked
   793  000354  6FCE               	movwf	main@i& (0+255),b
   794                           
   795                           ;main.c: 56: signed char DirectionFound=0;
   796  000356  0E00               	movlw	0
   797  000358  0101               	movlb	1	; () banked
   798  00035A  6FCD               	movwf	main@DirectionFound& (0+255),b
   799                           
   800                           ; BSR set to: 1
   801                           ;main.c: 57: int MoveTime[50] = { 0 };
   802  00035C  EE22  F000         	lfsr	2,main@F3893
   803  000360  EE11  F05A         	lfsr	1,main@MoveTime
   804  000364  0E63               	movlw	99
   805  000366                     u2731:
   806  000366  CFDB FFE3          	movff	plusw2,plusw1
   807  00036A  06E8               	decf	wreg,f,c
   808  00036C  E2FC               	bc	u2731
   809                           
   810                           ; BSR set to: 1
   811                           ;main.c: 60: char MoveType[50] = { 0 };
   812  00036E  EE20  F0BF         	lfsr	2,main@F3895
   813  000372  EE11  F028         	lfsr	1,main@MoveType
   814  000376  0E31               	movlw	49
   815  000378                     u2741:
   816  000378  CFDB FFE3          	movff	plusw2,plusw1
   817  00037C  06E8               	decf	wreg,f,c
   818  00037E  E2FC               	bc	u2741
   819                           
   820                           ;main.c: 63: char Move=0;
   821  000380  0E00               	movlw	0
   822  000382  0101               	movlb	1	; () banked
   823  000384  6FCF               	movwf	main@Move& (0+255),b
   824                           
   825                           ; BSR set to: 1
   826                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   827  000386  C1E2  F1C9         	movff	main@F3898,main@SensorResult
   828  00038A  C1E3  F1CA         	movff	main@F3898+1,main@SensorResult+1
   829  00038E  C1E4  F1CB         	movff	main@F3898+2,main@SensorResult+2
   830  000392  C1E5  F1CC         	movff	main@F3898+3,main@SensorResult+3
   831                           
   832                           ;main.c: 65: char buf[40];
   833                           ;main.c: 67: unsigned char ScanAngle=60;
   834  000396  0E3C               	movlw	60
   835  000398  0101               	movlb	1	; () banked
   836  00039A  6FC8               	movwf	main@ScanAngle& (0+255),b
   837                           
   838                           ; BSR set to: 1
   839                           ;main.c: 76: INTCONbits.GIEH=1;
   840  00039C  8EF2               	bsf	intcon,7,c	;volatile
   841                           
   842                           ; BSR set to: 1
   843                           ;main.c: 77: INTCONbits.GIEL=1;
   844  00039E  8CF2               	bsf	intcon,6,c	;volatile
   845                           
   846                           ; BSR set to: 1
   847                           ;main.c: 78: INTCONbits.PEIE=1;
   848  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   849                           
   850                           ; BSR set to: 1
   851                           ;main.c: 79: RCONbits.IPEN=1;
   852  0003A2  8ED0               	bsf	4048,7,c	;volatile
   853                           
   854                           ; BSR set to: 1
   855                           ;main.c: 82: IPR1bits.RCIP=0;
   856  0003A4  9A9F               	bcf	3999,5,c	;volatile
   857                           
   858                           ; BSR set to: 1
   859                           ;main.c: 83: PIE1bits.RCIE=1;
   860  0003A6  8A9D               	bsf	3997,5,c	;volatile
   861                           
   862                           ; BSR set to: 1
   863                           ;main.c: 86: TRISCbits.RC3=1;
   864  0003A8  8694               	bsf	3988,3,c	;volatile
   865                           
   866                           ; BSR set to: 1
   867                           ;main.c: 87: INTCONbits.INT0IE=1;
   868  0003AA  88F2               	bsf	intcon,4,c	;volatile
   869                           
   870                           ; BSR set to: 1
   871                           ;main.c: 90: PIR1bits.RC1IF=0;
   872  0003AC  9A9E               	bcf	3998,5,c	;volatile
   873                           
   874                           ; BSR set to: 1
   875                           ;main.c: 91: INTCONbits.INT0IF=0;
   876  0003AE  92F2               	bcf	intcon,1,c	;volatile
   877                           
   878                           ;main.c: 94: struct DC_motor mL, mR;
   879                           ;main.c: 95: mL.power=0;
   880  0003B0  0E00               	movlw	0
   881  0003B2  0101               	movlb	1	; () banked
   882  0003B4  6FD0               	movwf	main@mL& (0+255),b
   883                           
   884                           ;main.c: 96: mL.direction=1;
   885  0003B6  0E01               	movlw	1
   886  0003B8  0101               	movlb	1	; () banked
   887  0003BA  6FD1               	movwf	(main@mL+1)& (0+255),b
   888                           
   889                           ; BSR set to: 1
   890                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   891  0003BC  0E79               	movlw	121
   892  0003BE  0101               	movlb	1	; () banked
   893  0003C0  6FD2               	movwf	(main@mL+2)& (0+255),b
   894  0003C2  0E0F               	movlw	15
   895  0003C4  0101               	movlb	1	; () banked
   896  0003C6  6FD3               	movwf	(main@mL+3)& (0+255),b
   897                           
   898                           ; BSR set to: 1
   899                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   900  0003C8  0E78               	movlw	120
   901  0003CA  0101               	movlb	1	; () banked
   902  0003CC  6FD4               	movwf	(main@mL+4)& (0+255),b
   903  0003CE  0E0F               	movlw	15
   904  0003D0  0101               	movlb	1	; () banked
   905  0003D2  6FD5               	movwf	(main@mL+5)& (0+255),b
   906                           
   907                           ;main.c: 99: mL.dir_pin=0;
   908  0003D4  0E00               	movlw	0
   909  0003D6  0101               	movlb	1	; () banked
   910  0003D8  6FD6               	movwf	(main@mL+6)& (0+255),b
   911                           
   912                           ;main.c: 100: mL.PWMperiod=199;
   913  0003DA  0E00               	movlw	0
   914  0003DC  0101               	movlb	1	; () banked
   915  0003DE  6FD8               	movwf	(main@mL+8)& (0+255),b
   916  0003E0  0EC7               	movlw	199
   917  0003E2  6FD7               	movwf	(main@mL+7)& (0+255),b
   918                           
   919                           ;main.c: 102: mR.power=0;
   920  0003E4  0E00               	movlw	0
   921  0003E6  0101               	movlb	1	; () banked
   922  0003E8  6FD9               	movwf	main@mR& (0+255),b
   923                           
   924                           ;main.c: 103: mR.direction=1;
   925  0003EA  0E01               	movlw	1
   926  0003EC  0101               	movlb	1	; () banked
   927  0003EE  6FDA               	movwf	(main@mR+1)& (0+255),b
   928                           
   929                           ; BSR set to: 1
   930                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   931  0003F0  0E77               	movlw	119
   932  0003F2  0101               	movlb	1	; () banked
   933  0003F4  6FDB               	movwf	(main@mR+2)& (0+255),b
   934  0003F6  0E0F               	movlw	15
   935  0003F8  0101               	movlb	1	; () banked
   936  0003FA  6FDC               	movwf	(main@mR+3)& (0+255),b
   937                           
   938                           ; BSR set to: 1
   939                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   940  0003FC  0E76               	movlw	118
   941  0003FE  0101               	movlb	1	; () banked
   942  000400  6FDD               	movwf	(main@mR+4)& (0+255),b
   943  000402  0E0F               	movlw	15
   944  000404  0101               	movlb	1	; () banked
   945  000406  6FDE               	movwf	(main@mR+5)& (0+255),b
   946                           
   947                           ;main.c: 106: mR.dir_pin=2;
   948  000408  0E02               	movlw	2
   949  00040A  0101               	movlb	1	; () banked
   950  00040C  6FDF               	movwf	(main@mR+6)& (0+255),b
   951                           
   952                           ;main.c: 107: mR.PWMperiod=199;
   953  00040E  0E00               	movlw	0
   954  000410  0101               	movlb	1	; () banked
   955  000412  6FE1               	movwf	(main@mR+8)& (0+255),b
   956  000414  0EC7               	movlw	199
   957  000416  6FE0               	movwf	(main@mR+7)& (0+255),b
   958                           
   959                           ;main.c: 109: OSCCON = 0x72;
   960  000418  0E72               	movlw	114
   961  00041A  6ED3               	movwf	4051,c	;volatile
   962  00041C                     l390:
   963  00041C  B4D3               	btfsc	4051,2,c	;volatile
   964  00041E  D358               	goto	l3560
   965  000420  D7FD               	goto	l390
   966  000422                     l3368:
   967                           
   968                           ;main.c: 121: stop(&mL, &mR);
   969  000422  0ED0               	movlw	low main@mL
   970  000424  0100               	movlb	0	; () banked
   971  000426  6F62               	movwf	stop@mL& (0+255),b
   972  000428  0E01               	movlw	high main@mL
   973  00042A  0100               	movlb	0	; () banked
   974  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   975  00042E  0ED9               	movlw	low main@mR
   976  000430  0100               	movlb	0	; () banked
   977  000432  6F64               	movwf	stop@mR& (0+255),b
   978  000434  0E01               	movlw	high main@mR
   979  000436  0100               	movlb	0	; () banked
   980  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   981  00043A  EC9E  F00B         	call	_stop	;wreg free
   982                           
   983                           ;main.c: 122: RFID_Read=0;
   984  00043E  0E00               	movlw	0
   985  000440  0101               	movlb	1	; () banked
   986  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   987                           
   988                           ; BSR set to: 1
   989                           ;main.c: 125: SensorResult[0]=grabLeftIR();
   990  000444  ECE8  F00C         	call	_grabLeftIR	;wreg free
   991  000448  C024  F1C9         	movff	?_grabLeftIR,main@SensorResult
   992  00044C  C025  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
   993                           
   994                           ;main.c: 126: SensorResult[1]=grabRightIR();
   995  000450  ECAF  F00C         	call	_grabRightIR	;wreg free
   996  000454  C024  F1CB         	movff	?_grabRightIR,main@SensorResult+2
   997  000458  C025  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
   998                           
   999                           ;main.c: 130: CAP1BUFH=0;
  1000  00045C  0E00               	movlw	0
  1001  00045E  6E69               	movwf	3945,c	;volatile
  1002                           
  1003                           ;main.c: 131: CAP1BUFL=0;
  1004  000460  0E00               	movlw	0
  1005  000462  6E68               	movwf	3944,c	;volatile
  1006                           
  1007                           ;main.c: 132: CAP2BUFH=0;
  1008  000464  0E00               	movlw	0
  1009  000466  6E67               	movwf	3943,c	;volatile
  1010                           
  1011                           ;main.c: 133: CAP2BUFL=0;
  1012  000468  0E00               	movlw	0
  1013  00046A  6E66               	movwf	3942,c	;volatile
  1014                           
  1015                           ;main.c: 136: SendLCD(0b00000001,0);
  1016  00046C  0E00               	movlw	0
  1017  00046E  6E28               	movwf	SendLCD@type,c
  1018  000470  0E01               	movlw	1
  1019  000472  ECA7  F00E         	call	_SendLCD
  1020                           
  1021                           ;main.c: 137: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1022  000476  0E21               	movlw	33
  1023  000478                     u2977:
  1024  000478  2EE8               	decfsz	wreg,f,c
  1025  00047A  D7FE               	goto	u2977
  1026  00047C  F000               	nop	
  1027                           
  1028                           ;main.c: 138: SendLCD(0b00000010,0);
  1029  00047E  0E00               	movlw	0
  1030  000480  6E28               	movwf	SendLCD@type,c
  1031  000482  0E02               	movlw	2
  1032  000484  ECA7  F00E         	call	_SendLCD
  1033                           
  1034                           ;main.c: 139: _delay((unsigned long)((2)*(8000000/4000.0)));
  1035  000488  0E06               	movlw	6
  1036  00048A  0100               	movlb	0	; () banked
  1037  00048C  6FBA               	movwf	??_main& (0+255),b
  1038  00048E  0E30               	movlw	48
  1039  000490                     u2987:
  1040  000490  2EE8               	decfsz	wreg,f,c
  1041  000492  D7FE               	goto	u2987
  1042  000494  2FBA               	decfsz	??_main& (0+255),f,b
  1043  000496  D7FC               	goto	u2987
  1044  000498  D000               	nop2	
  1045                           
  1046                           ;main.c: 140: SetLine(1);
  1047  00049A  0E01               	movlw	1
  1048  00049C  EC8F  F00E         	call	_SetLine
  1049                           
  1050                           ;main.c: 141: LCD_String("      Inert Mode");
  1051  0004A0  0E1C               	movlw	low STR_5
  1052  0004A2  6E2A               	movwf	LCD_String@string,c
  1053  0004A4  0E03               	movlw	high STR_5
  1054  0004A6  6E2B               	movwf	LCD_String@string+1,c
  1055  0004A8  EC21  F00D         	call	_LCD_String	;wreg free
  1056                           
  1057                           ;main.c: 142: SetLine(2);
  1058  0004AC  0E02               	movlw	2
  1059  0004AE  EC8F  F00E         	call	_SetLine
  1060                           
  1061                           ;main.c: 143: if (RFID_Read) {
  1062  0004B2  0101               	movlb	1	; () banked
  1063  0004B4  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1064  0004B6  B4D8               	btfsc	status,2,c
  1065  0004B8  D007               	goto	l3402
  1066                           
  1067                           ; BSR set to: 1
  1068                           ;main.c: 144: LCD_String(Message);
  1069  0004BA  0EBE               	movlw	low main@Message
  1070  0004BC  6E2A               	movwf	LCD_String@string,c
  1071  0004BE  0E01               	movlw	high main@Message
  1072  0004C0  6E2B               	movwf	LCD_String@string+1,c
  1073  0004C2  EC21  F00D         	call	_LCD_String	;wreg free
  1074                           
  1075                           ;main.c: 145: } else {
  1076  0004C6  D304               	goto	l3560
  1077  0004C8                     l3402:
  1078                           
  1079                           ;main.c: 146: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1080  0004C8  0E00               	movlw	low main@buf
  1081  0004CA  6E30               	movwf	sprintf@sp,c
  1082  0004CC  0E01               	movlw	high main@buf
  1083  0004CE  6E31               	movwf	sprintf@sp+1,c
  1084  0004D0  0E0B               	movlw	low STR_6
  1085  0004D2  6E32               	movwf	sprintf@f,c
  1086  0004D4  0E03               	movlw	high STR_6
  1087  0004D6  6E33               	movwf	sprintf@f+1,c
  1088  0004D8  C1C9  F034         	movff	main@SensorResult,?_sprintf+4
  1089  0004DC  C1CA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1090  0004E0  C1CB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1091  0004E4  C1CC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1092  0004E8  EC40  F008         	call	_sprintf	;wreg free
  1093                           
  1094                           ;main.c: 147: LCD_String(buf);
  1095  0004EC  0E00               	movlw	low main@buf
  1096  0004EE  6E2A               	movwf	LCD_String@string,c
  1097  0004F0  0E01               	movlw	high main@buf
  1098  0004F2  6E2B               	movwf	LCD_String@string+1,c
  1099  0004F4  EC21  F00D         	call	_LCD_String	;wreg free
  1100                           
  1101                           ;main.c: 148: }
  1102                           ;main.c: 150: break;
  1103  0004F8  D2EB               	goto	l3560
  1104  0004FA                     l3406:
  1105                           
  1106                           ;main.c: 154: initMotorPWM();
  1107  0004FA  EC76  F00E         	call	_initMotorPWM	;wreg free
  1108                           
  1109                           ;main.c: 155: initTimer();
  1110  0004FE  EC13  F00F         	call	_initTimer	;wreg free
  1111                           
  1112                           ;main.c: 156: initRFID();
  1113  000502  EC05  F00F         	call	_initRFID	;wreg free
  1114                           
  1115                           ;main.c: 157: initLCD();
  1116  000506  EC40  F00B         	call	_initLCD	;wreg free
  1117                           
  1118                           ;main.c: 158: initIR();
  1119  00050A  ECE5  F00E         	call	_initIR	;wreg free
  1120                           
  1121                           ;main.c: 160: enableSensor(0, 1);
  1122  00050E  0E01               	movlw	1
  1123  000510  6E24               	movwf	enableSensor@status,c
  1124  000512  0E00               	movlw	0
  1125  000514  ECBF  F00E         	call	_enableSensor
  1126                           
  1127                           ;main.c: 161: enableSensor(1, 1);
  1128  000518  0E01               	movlw	1
  1129  00051A  6E24               	movwf	enableSensor@status,c
  1130  00051C  0E01               	movlw	1
  1131  00051E  ECBF  F00E         	call	_enableSensor
  1132                           
  1133                           ;main.c: 164: fullSpeedAhead(&mL, &mR, 100);
  1134  000522  0ED0               	movlw	low main@mL
  1135  000524  0100               	movlb	0	; () banked
  1136  000526  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1137  000528  0E01               	movlw	high main@mL
  1138  00052A  0100               	movlb	0	; () banked
  1139  00052C  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1140  00052E  0ED9               	movlw	low main@mR
  1141  000530  0100               	movlb	0	; () banked
  1142  000532  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1143  000534  0E01               	movlw	high main@mR
  1144  000536  0100               	movlb	0	; () banked
  1145  000538  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1146  00053A  0E64               	movlw	100
  1147  00053C  0100               	movlb	0	; () banked
  1148  00053E  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1149  000540  EC6F  F00C         	call	_fullSpeedAhead	;wreg free
  1150                           
  1151                           ;main.c: 165: delay_tenth_s(1);
  1152  000544  0E01               	movlw	1
  1153  000546  EC23  F00E         	call	_delay_tenth_s
  1154  00054A  D2C1               	goto	l3556
  1155  00054C                     l3426:
  1156                           
  1157                           ;main.c: 173: SetLine(1);
  1158  00054C  0E01               	movlw	1
  1159  00054E  EC8F  F00E         	call	_SetLine
  1160                           
  1161                           ;main.c: 174: LCD_String("Searching");
  1162  000552  0E44               	movlw	low STR_7
  1163  000554  6E2A               	movwf	LCD_String@string,c
  1164  000556  0E03               	movlw	high STR_7
  1165  000558  6E2B               	movwf	LCD_String@string+1,c
  1166  00055A  EC21  F00D         	call	_LCD_String	;wreg free
  1167                           
  1168                           ;main.c: 176: if (DirectionFound==-1) {
  1169  00055E  0101               	movlb	1	; () banked
  1170  000560  29CD               	incf	main@DirectionFound& (0+255),w,b
  1171  000562  A4D8               	btfss	status,2,c
  1172  000564  D03E               	goto	l3444
  1173                           
  1174                           ; BSR set to: 1
  1175                           ;main.c: 181: MoveType[Move]=0;
  1176  000566  0101               	movlb	1	; () banked
  1177  000568  51CF               	movf	main@Move& (0+255),w,b
  1178  00056A  0D01               	mullw	1
  1179  00056C  0E28               	movlw	low main@MoveType
  1180  00056E  24F3               	addwf	prodl,w,c
  1181  000570  6ED9               	movwf	fsr2l,c
  1182  000572  0E01               	movlw	high main@MoveType
  1183  000574  20F4               	addwfc	prodh,w,c
  1184  000576  6EDA               	movwf	fsr2h,c
  1185  000578  0E00               	movlw	0
  1186  00057A  6EDF               	movwf	indf2,c
  1187                           
  1188                           ;main.c: 182: MoveTime[Move]=6;
  1189  00057C  0101               	movlb	1	; () banked
  1190  00057E  51CF               	movf	main@Move& (0+255),w,b
  1191  000580  0D02               	mullw	2
  1192  000582  0E5A               	movlw	low main@MoveTime
  1193  000584  24F3               	addwf	prodl,w,c
  1194  000586  6ED9               	movwf	fsr2l,c
  1195  000588  0E01               	movlw	high main@MoveTime
  1196  00058A  20F4               	addwfc	prodh,w,c
  1197  00058C  6EDA               	movwf	fsr2h,c
  1198  00058E  0E06               	movlw	6
  1199  000590  6EDE               	movwf	postinc2,c
  1200  000592  0E00               	movlw	0
  1201  000594  6EDD               	movwf	postdec2,c
  1202                           
  1203                           ; BSR set to: 1
  1204                           ;main.c: 183: Move++;
  1205  000596  0101               	movlb	1	; () banked
  1206  000598  2BCF               	incf	main@Move& (0+255),f,b
  1207                           
  1208                           ; BSR set to: 1
  1209                           ;main.c: 184: fullSpeedAhead(&mL, &mR, 100);
  1210  00059A  0ED0               	movlw	low main@mL
  1211  00059C  0100               	movlb	0	; () banked
  1212  00059E  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1213  0005A0  0E01               	movlw	high main@mL
  1214  0005A2  0100               	movlb	0	; () banked
  1215  0005A4  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1216  0005A6  0ED9               	movlw	low main@mR
  1217  0005A8  0100               	movlb	0	; () banked
  1218  0005AA  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1219  0005AC  0E01               	movlw	high main@mR
  1220  0005AE  0100               	movlb	0	; () banked
  1221  0005B0  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1222  0005B2  0E64               	movlw	100
  1223  0005B4  0100               	movlb	0	; () banked
  1224  0005B6  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1225  0005B8  EC6F  F00C         	call	_fullSpeedAhead	;wreg free
  1226                           
  1227                           ;main.c: 185: delay_tenth_s(6);
  1228  0005BC  0E06               	movlw	6
  1229  0005BE  EC23  F00E         	call	_delay_tenth_s
  1230                           
  1231                           ;main.c: 186: stop(&mL,&mR);
  1232  0005C2  0ED0               	movlw	low main@mL
  1233  0005C4  0100               	movlb	0	; () banked
  1234  0005C6  6F62               	movwf	stop@mL& (0+255),b
  1235  0005C8  0E01               	movlw	high main@mL
  1236  0005CA  0100               	movlb	0	; () banked
  1237  0005CC  6F63               	movwf	(stop@mL+1)& (0+255),b
  1238  0005CE  0ED9               	movlw	low main@mR
  1239  0005D0  0100               	movlb	0	; () banked
  1240  0005D2  6F64               	movwf	stop@mR& (0+255),b
  1241  0005D4  0E01               	movlw	high main@mR
  1242  0005D6  0100               	movlb	0	; () banked
  1243  0005D8  6F65               	movwf	(stop@mR+1)& (0+255),b
  1244  0005DA  EC9E  F00B         	call	_stop	;wreg free
  1245                           
  1246                           ;main.c: 187: DirectionFound=0;
  1247  0005DE  0E00               	movlw	0
  1248  0005E0  D042               	goto	L2
  1249  0005E2                     l3444:
  1250                           
  1251                           ; BSR set to: 1
  1252  0005E2  0101               	movlb	1	; () banked
  1253  0005E4  51CD               	movf	main@DirectionFound& (0+255),w,b
  1254  0005E6  0101               	movlb	1	; () banked
  1255  0005E8  A4D8               	btfss	status,2,c
  1256  0005EA  D02B               	goto	l3448
  1257                           
  1258                           ; BSR set to: 1
  1259                           ;main.c: 190: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1260                           ;main.c: 191: &MoveTime, &Move, &MoveType, &RFID_Read);
  1261  0005EC  0ED0               	movlw	low main@mL
  1262  0005EE  0100               	movlb	0	; () banked
  1263  0005F0  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1264  0005F2  0E01               	movlw	high main@mL
  1265  0005F4  0100               	movlb	0	; () banked
  1266  0005F6  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1267  0005F8  0ED9               	movlw	low main@mR
  1268  0005FA  0100               	movlb	0	; () banked
  1269  0005FC  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1270  0005FE  0E01               	movlw	high main@mR
  1271  000600  0100               	movlb	0	; () banked
  1272  000602  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1273  000604  C1C8  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1274  000608  0100               	movlb	0	; () banked
  1275  00060A  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1276  00060C  0E5A               	movlw	low main@MoveTime
  1277  00060E  0100               	movlb	0	; () banked
  1278  000610  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1279  000612  0E01               	movlw	high main@MoveTime
  1280  000614  0100               	movlb	0	; () banked
  1281  000616  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1282  000618  0ECF               	movlw	low main@Move
  1283  00061A  0100               	movlb	0	; () banked
  1284  00061C  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1285  00061E  0E01               	movlw	high main@Move
  1286  000620  0100               	movlb	0	; () banked
  1287  000622  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1288  000624  0E28               	movlw	low main@MoveType
  1289  000626  0100               	movlb	0	; () banked
  1290  000628  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1291  00062A  0E01               	movlw	high main@MoveType
  1292  00062C  0100               	movlb	0	; () banked
  1293  00062E  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1294  000630  0EF6               	movlw	low _RFID_Read
  1295  000632  0100               	movlb	0	; () banked
  1296  000634  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1297  000636  0E01               	movlw	high _RFID_Read
  1298  000638  0100               	movlb	0	; () banked
  1299  00063A  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1300  00063C  EC79  F005         	call	_ScanWithRange	;wreg free
  1301  000640  D012               	goto	L2
  1302  000642                     l3448:
  1303                           
  1304                           ; BSR set to: 1
  1305  000642  0101               	movlb	1	; () banked
  1306  000644  05CD               	decf	main@DirectionFound& (0+255),w,b
  1307  000646  A4D8               	btfss	status,2,c
  1308  000648  D011               	goto	l3452
  1309                           
  1310                           ; BSR set to: 1
  1311                           ;main.c: 194: DirectionFound=ScanIR(&mL, &mR);
  1312  00064A  0ED0               	movlw	low main@mL
  1313  00064C  0100               	movlb	0	; () banked
  1314  00064E  6F6D               	movwf	ScanIR@mL& (0+255),b
  1315  000650  0E01               	movlw	high main@mL
  1316  000652  0100               	movlb	0	; () banked
  1317  000654  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1318  000656  0ED9               	movlw	low main@mR
  1319  000658  0100               	movlb	0	; () banked
  1320  00065A  6F6F               	movwf	ScanIR@mR& (0+255),b
  1321  00065C  0E01               	movlw	high main@mR
  1322  00065E  0100               	movlb	0	; () banked
  1323  000660  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1324  000662  EC60  F00A         	call	_ScanIR	;wreg free
  1325  000666                     L2:
  1326  000666  0101               	movlb	1	; () banked
  1327  000668  6FCD               	movwf	main@DirectionFound& (0+255),b
  1328                           
  1329                           ;main.c: 195: } else if (DirectionFound==2) {
  1330  00066A  D232               	goto	l3560
  1331  00066C                     l3452:
  1332                           
  1333                           ; BSR set to: 1
  1334  00066C  0E02               	movlw	2
  1335  00066E  0101               	movlb	1	; () banked
  1336  000670  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1337  000672  A4D8               	btfss	status,2,c
  1338  000674  D22D               	goto	l3560
  1339                           
  1340                           ; BSR set to: 1
  1341                           ;main.c: 197: mode=2;
  1342  000676  0E02               	movlw	2
  1343  000678  6E3B               	movwf	_mode,c	;volatile
  1344                           
  1345                           ; BSR set to: 1
  1346                           ;main.c: 198: MoveType[Move]=1;
  1347  00067A  0101               	movlb	1	; () banked
  1348  00067C  51CF               	movf	main@Move& (0+255),w,b
  1349  00067E  0D01               	mullw	1
  1350  000680  0E28               	movlw	low main@MoveType
  1351  000682  24F3               	addwf	prodl,w,c
  1352  000684  6ED9               	movwf	fsr2l,c
  1353  000686  0E01               	movlw	high main@MoveType
  1354  000688  20F4               	addwfc	prodh,w,c
  1355  00068A  6EDA               	movwf	fsr2h,c
  1356  00068C  0E01               	movlw	1
  1357  00068E  6EDF               	movwf	indf2,c
  1358                           
  1359                           ; BSR set to: 1
  1360                           ;main.c: 199: }
  1361                           ;main.c: 201: break;
  1362                           
  1363                           ; BSR set to: 1
  1364                           
  1365                           ; BSR set to: 1
  1366                           
  1367                           ; BSR set to: 1
  1368  000690  D21F               	goto	l3560
  1369  000692                     l3458:
  1370                           
  1371                           ;main.c: 208: if (RFID_Read) {
  1372  000692  0101               	movlb	1	; () banked
  1373  000694  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1374  000696  B4D8               	btfsc	status,2,c
  1375  000698  D0A2               	goto	l3500
  1376                           
  1377                           ; BSR set to: 1
  1378                           ;main.c: 209: stop(&mL, &mR);
  1379  00069A  0ED0               	movlw	low main@mL
  1380  00069C  0100               	movlb	0	; () banked
  1381  00069E  6F62               	movwf	stop@mL& (0+255),b
  1382  0006A0  0E01               	movlw	high main@mL
  1383  0006A2  0100               	movlb	0	; () banked
  1384  0006A4  6F63               	movwf	(stop@mL+1)& (0+255),b
  1385  0006A6  0ED9               	movlw	low main@mR
  1386  0006A8  0100               	movlb	0	; () banked
  1387  0006AA  6F64               	movwf	stop@mR& (0+255),b
  1388  0006AC  0E01               	movlw	high main@mR
  1389  0006AE  0100               	movlb	0	; () banked
  1390  0006B0  6F65               	movwf	(stop@mR+1)& (0+255),b
  1391  0006B2  EC9E  F00B         	call	_stop	;wreg free
  1392                           
  1393                           ;main.c: 210: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1394  0006B6  0E03               	movlw	3
  1395  0006B8  0101               	movlb	1	; () banked
  1396  0006BA  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1397  0006BC  A4D8               	btfss	status,2,c
  1398  0006BE  D002               	goto	u2820
  1399  0006C0  0E01               	movlw	1
  1400  0006C2  D001               	goto	u2822
  1401  0006C4                     u2820:
  1402  0006C4  0E00               	movlw	0
  1403  0006C6                     u2822:
  1404  0006C6  0100               	movlb	0	; () banked
  1405  0006C8  6FBA               	movwf	??_main& (0+255),b
  1406  0006CA  0E02               	movlw	2
  1407  0006CC  0101               	movlb	1	; () banked
  1408  0006CE  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1409  0006D0  A4D8               	btfss	status,2,c
  1410  0006D2  D002               	goto	u2830
  1411  0006D4  0E01               	movlw	1
  1412  0006D6  D001               	goto	u2832
  1413  0006D8                     u2830:
  1414  0006D8  0E00               	movlw	0
  1415  0006DA                     u2832:
  1416  0006DA  0100               	movlb	0	; () banked
  1417  0006DC  15BA               	andwf	??_main& (0+255),w,b
  1418  0006DE  A0E8               	btfss	wreg,0,c
  1419  0006E0  D1F7               	goto	l3560
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;main.c: 211: if (VerifySignal(&ReceivedString)){
  1423  0006E2  0EE6               	movlw	low _ReceivedString
  1424  0006E4  6E24               	movwf	VerifySignal@Signal,c
  1425  0006E6  0E01               	movlw	high _ReceivedString
  1426  0006E8  6E25               	movwf	VerifySignal@Signal+1,c
  1427  0006EA  EC50  F00D         	call	_VerifySignal	;wreg free
  1428  0006EE  0900               	iorlw	0
  1429  0006F0  B4D8               	btfsc	status,2,c
  1430  0006F2  D041               	goto	l3492
  1431                           
  1432                           ;main.c: 213: for (i=0; i<10; i++){
  1433  0006F4  0E00               	movlw	0
  1434  0006F6  0101               	movlb	1	; () banked
  1435  0006F8  6FCE               	movwf	main@i& (0+255),b
  1436  0006FA                     l3468:
  1437                           
  1438                           ; BSR set to: 1
  1439  0006FA  0E09               	movlw	9
  1440  0006FC  0101               	movlb	1	; () banked
  1441  0006FE  65CE               	cpfsgt	main@i& (0+255),b
  1442  000700  D001               	goto	l3472
  1443  000702  D020               	goto	l3478
  1444  000704                     l3472:
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main.c: 214: Message[i] = ReceivedString[i+1];
  1448  000704  0101               	movlb	1	; () banked
  1449  000706  51CE               	movf	main@i& (0+255),w,b
  1450  000708  0100               	movlb	0	; () banked
  1451  00070A  6FBA               	movwf	??_main& (0+255),b
  1452  00070C  6BBB               	clrf	(??_main+1)& (0+255),b
  1453  00070E  0E01               	movlw	1
  1454  000710  0100               	movlb	0	; () banked
  1455  000712  27BA               	addwf	??_main& (0+255),f,b
  1456  000714  0E00               	movlw	0
  1457  000716  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1458  000718  0EE6               	movlw	low _ReceivedString
  1459  00071A  0100               	movlb	0	; () banked
  1460  00071C  25BA               	addwf	??_main& (0+255),w,b
  1461  00071E  6ED9               	movwf	fsr2l,c
  1462  000720  0E01               	movlw	high _ReceivedString
  1463  000722  0100               	movlb	0	; () banked
  1464  000724  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1465  000726  6EDA               	movwf	fsr2h,c
  1466  000728  0101               	movlb	1	; () banked
  1467  00072A  51CE               	movf	main@i& (0+255),w,b
  1468  00072C  0D01               	mullw	1
  1469  00072E  0EBE               	movlw	low main@Message
  1470  000730  24F3               	addwf	prodl,w,c
  1471  000732  6EE1               	movwf	fsr1l,c
  1472  000734  0E01               	movlw	high main@Message
  1473  000736  20F4               	addwfc	prodh,w,c
  1474  000738  6EE2               	movwf	fsr1h,c
  1475  00073A  CFDF FFE7          	movff	indf2,indf1
  1476                           
  1477                           ; BSR set to: 1
  1478  00073E  0101               	movlb	1	; () banked
  1479  000740  2BCE               	incf	main@i& (0+255),f,b
  1480  000742  D7DB               	goto	l3468
  1481  000744                     l3478:
  1482                           
  1483                           ; BSR set to: 1
  1484                           ;main.c: 215: }
  1485                           ;main.c: 218: for (i=0; i<16; i++) {
  1486  000744  0E00               	movlw	0
  1487  000746  0101               	movlb	1	; () banked
  1488  000748  6FCE               	movwf	main@i& (0+255),b
  1489  00074A                     l3480:
  1490                           
  1491                           ; BSR set to: 1
  1492  00074A  0E0F               	movlw	15
  1493  00074C  0101               	movlb	1	; () banked
  1494  00074E  65CE               	cpfsgt	main@i& (0+255),b
  1495  000750  D001               	goto	l3484
  1496  000752  D00E               	goto	l3490
  1497  000754                     l3484:
  1498                           
  1499                           ; BSR set to: 1
  1500                           ;main.c: 219: ReceivedString[i]=0;
  1501  000754  0101               	movlb	1	; () banked
  1502  000756  51CE               	movf	main@i& (0+255),w,b
  1503  000758  0D01               	mullw	1
  1504  00075A  0EE6               	movlw	low _ReceivedString
  1505  00075C  24F3               	addwf	prodl,w,c
  1506  00075E  6ED9               	movwf	fsr2l,c
  1507  000760  0E01               	movlw	high _ReceivedString
  1508  000762  20F4               	addwfc	prodh,w,c
  1509  000764  6EDA               	movwf	fsr2h,c
  1510  000766  0E00               	movlw	0
  1511  000768  6EDF               	movwf	indf2,c
  1512                           
  1513                           ; BSR set to: 1
  1514  00076A  0101               	movlb	1	; () banked
  1515  00076C  2BCE               	incf	main@i& (0+255),f,b
  1516  00076E  D7ED               	goto	l3480
  1517  000770                     l3490:
  1518                           
  1519                           ; BSR set to: 1
  1520                           ;main.c: 220: }
  1521                           ;main.c: 221: mode=3;
  1522  000770  0E03               	movlw	3
  1523  000772  6E3B               	movwf	_mode,c	;volatile
  1524                           
  1525                           ;main.c: 223: } else {
  1526  000774  D1AD               	goto	l3560
  1527  000776                     l3492:
  1528                           
  1529                           ;main.c: 224: fullSpeedBack(&mL,&mR, 100);
  1530  000776  0ED0               	movlw	low main@mL
  1531  000778  0100               	movlb	0	; () banked
  1532  00077A  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1533  00077C  0E01               	movlw	high main@mL
  1534  00077E  0100               	movlb	0	; () banked
  1535  000780  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1536  000782  0ED9               	movlw	low main@mR
  1537  000784  0100               	movlb	0	; () banked
  1538  000786  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1539  000788  0E01               	movlw	high main@mR
  1540  00078A  0100               	movlb	0	; () banked
  1541  00078C  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1542  00078E  0E64               	movlw	100
  1543  000790  0100               	movlb	0	; () banked
  1544  000792  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1545  000794  ECC6  F00D         	call	_fullSpeedBack	;wreg free
  1546                           
  1547                           ;main.c: 225: delay_tenth_s(5);
  1548  000798  0E05               	movlw	5
  1549  00079A  EC23  F00E         	call	_delay_tenth_s
  1550                           
  1551                           ;main.c: 226: stop(&mL,&mR);
  1552  00079E  0ED0               	movlw	low main@mL
  1553  0007A0  0100               	movlb	0	; () banked
  1554  0007A2  6F62               	movwf	stop@mL& (0+255),b
  1555  0007A4  0E01               	movlw	high main@mL
  1556  0007A6  0100               	movlb	0	; () banked
  1557  0007A8  6F63               	movwf	(stop@mL+1)& (0+255),b
  1558  0007AA  0ED9               	movlw	low main@mR
  1559  0007AC  0100               	movlb	0	; () banked
  1560  0007AE  6F64               	movwf	stop@mR& (0+255),b
  1561  0007B0  0E01               	movlw	high main@mR
  1562  0007B2  0100               	movlb	0	; () banked
  1563  0007B4  6F65               	movwf	(stop@mR+1)& (0+255),b
  1564  0007B6  EC9E  F00B         	call	_stop	;wreg free
  1565                           
  1566                           ;main.c: 227: fullSpeedAhead(&mL,&mR, 100);
  1567  0007BA  0ED0               	movlw	low main@mL
  1568  0007BC  0100               	movlb	0	; () banked
  1569  0007BE  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1570  0007C0  0E01               	movlw	high main@mL
  1571  0007C2  0100               	movlb	0	; () banked
  1572  0007C4  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1573  0007C6  0ED9               	movlw	low main@mR
  1574  0007C8  0100               	movlb	0	; () banked
  1575  0007CA  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1576  0007CC  0E01               	movlw	high main@mR
  1577  0007CE  0100               	movlb	0	; () banked
  1578  0007D0  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1579  0007D2  0E64               	movlw	100
  1580  0007D4  0100               	movlb	0	; () banked
  1581  0007D6  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1582  0007D8  EC6F  F00C         	call	_fullSpeedAhead	;wreg free
  1583                           
  1584                           ;main.c: 228: }
  1585                           ;main.c: 229: }
  1586                           ;main.c: 230: } else {
  1587  0007DC  D179               	goto	l3560
  1588  0007DE                     l3500:
  1589                           
  1590                           ;main.c: 231: DirectionFound=1;
  1591  0007DE  0E01               	movlw	1
  1592  0007E0  0101               	movlb	1	; () banked
  1593  0007E2  6FCD               	movwf	main@DirectionFound& (0+255),b
  1594                           
  1595                           ;main.c: 232: mode=1;
  1596  0007E4  0E01               	movlw	1
  1597  0007E6  6E3B               	movwf	_mode,c	;volatile
  1598                           
  1599                           ; BSR set to: 1
  1600                           ;main.c: 234: fullSpeedAhead(&mL,&mR, 100);
  1601  0007E8  0ED0               	movlw	low main@mL
  1602  0007EA  0100               	movlb	0	; () banked
  1603  0007EC  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1604  0007EE  0E01               	movlw	high main@mL
  1605  0007F0  0100               	movlb	0	; () banked
  1606  0007F2  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1607  0007F4  0ED9               	movlw	low main@mR
  1608  0007F6  0100               	movlb	0	; () banked
  1609  0007F8  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1610  0007FA  0E01               	movlw	high main@mR
  1611  0007FC  0100               	movlb	0	; () banked
  1612  0007FE  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1613  000800  0E64               	movlw	100
  1614  000802  0100               	movlb	0	; () banked
  1615  000804  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1616  000806  EC6F  F00C         	call	_fullSpeedAhead	;wreg free
  1617                           
  1618                           ;main.c: 235: delay_tenth_s(5);
  1619  00080A  0E05               	movlw	5
  1620  00080C  EC23  F00E         	call	_delay_tenth_s
  1621                           
  1622                           ;main.c: 236: MoveType[Move] = 0;
  1623  000810  0101               	movlb	1	; () banked
  1624  000812  51CF               	movf	main@Move& (0+255),w,b
  1625  000814  0D01               	mullw	1
  1626  000816  0E28               	movlw	low main@MoveType
  1627  000818  24F3               	addwf	prodl,w,c
  1628  00081A  6ED9               	movwf	fsr2l,c
  1629  00081C  0E01               	movlw	high main@MoveType
  1630  00081E  20F4               	addwfc	prodh,w,c
  1631  000820  6EDA               	movwf	fsr2h,c
  1632  000822  0E00               	movlw	0
  1633  000824  6EDF               	movwf	indf2,c
  1634                           
  1635                           ; BSR set to: 1
  1636                           ;main.c: 237: MoveTime[Move] = 5;
  1637  000826  0101               	movlb	1	; () banked
  1638  000828  51CF               	movf	main@Move& (0+255),w,b
  1639  00082A  0D02               	mullw	2
  1640  00082C  0E5A               	movlw	low main@MoveTime
  1641  00082E  24F3               	addwf	prodl,w,c
  1642  000830  6ED9               	movwf	fsr2l,c
  1643  000832  0E01               	movlw	high main@MoveTime
  1644  000834  20F4               	addwfc	prodh,w,c
  1645  000836  6EDA               	movwf	fsr2h,c
  1646  000838  0E05               	movlw	5
  1647  00083A  6EDE               	movwf	postinc2,c
  1648  00083C  0E00               	movlw	0
  1649  00083E  6EDD               	movwf	postdec2,c
  1650                           
  1651                           ; BSR set to: 1
  1652                           ;main.c: 238: Move++;
  1653  000840  0101               	movlb	1	; () banked
  1654  000842  2BCF               	incf	main@Move& (0+255),f,b
  1655                           
  1656                           ; BSR set to: 1
  1657                           ;main.c: 239: }
  1658                           ;main.c: 241: break;
  1659  000844  D145               	goto	l3560
  1660  000846                     l3512:
  1661                           
  1662                           ;main.c: 246: SetLine(1);
  1663  000846  0E01               	movlw	1
  1664  000848  EC8F  F00E         	call	_SetLine
  1665                           
  1666                           ;main.c: 247: LCD_String(Message);
  1667  00084C  0EBE               	movlw	low main@Message
  1668  00084E  6E2A               	movwf	LCD_String@string,c
  1669  000850  0E01               	movlw	high main@Message
  1670  000852  6E2B               	movwf	LCD_String@string+1,c
  1671  000854  EC21  F00D         	call	_LCD_String	;wreg free
  1672                           
  1673                           ;main.c: 248: SetLine(2);
  1674  000858  0E02               	movlw	2
  1675  00085A  EC8F  F00E         	call	_SetLine
  1676                           
  1677                           ;main.c: 249: LCD_String("Going Home");
  1678  00085E  0E39               	movlw	low STR_8
  1679  000860  6E2A               	movwf	LCD_String@string,c
  1680  000862  0E03               	movlw	high STR_8
  1681  000864  6E2B               	movwf	LCD_String@string+1,c
  1682  000866  EC21  F00D         	call	_LCD_String	;wreg free
  1683  00086A                     l3520:
  1684                           
  1685                           ;main.c: 252: stop(&mL,&mR);
  1686  00086A  0ED0               	movlw	low main@mL
  1687  00086C  0100               	movlb	0	; () banked
  1688  00086E  6F62               	movwf	stop@mL& (0+255),b
  1689  000870  0E01               	movlw	high main@mL
  1690  000872  0100               	movlb	0	; () banked
  1691  000874  6F63               	movwf	(stop@mL+1)& (0+255),b
  1692  000876  0ED9               	movlw	low main@mR
  1693  000878  0100               	movlb	0	; () banked
  1694  00087A  6F64               	movwf	stop@mR& (0+255),b
  1695  00087C  0E01               	movlw	high main@mR
  1696  00087E  0100               	movlb	0	; () banked
  1697  000880  6F65               	movwf	(stop@mR+1)& (0+255),b
  1698  000882  EC9E  F00B         	call	_stop	;wreg free
  1699                           
  1700                           ;main.c: 253: if (MoveType[Move]==0) {
  1701  000886  0101               	movlb	1	; () banked
  1702  000888  51CF               	movf	main@Move& (0+255),w,b
  1703  00088A  0D01               	mullw	1
  1704  00088C  0E28               	movlw	low main@MoveType
  1705  00088E  24F3               	addwf	prodl,w,c
  1706  000890  6ED9               	movwf	fsr2l,c
  1707  000892  0E01               	movlw	high main@MoveType
  1708  000894  20F4               	addwfc	prodh,w,c
  1709  000896  6EDA               	movwf	fsr2h,c
  1710  000898  50DF               	movf	indf2,w,c
  1711  00089A  A4D8               	btfss	status,2,c
  1712  00089C  D01E               	goto	l3526
  1713                           
  1714                           ; BSR set to: 1
  1715                           ;main.c: 254: fullSpeedBack(&mL,&mR,100);
  1716  00089E  0ED0               	movlw	low main@mL
  1717  0008A0  0100               	movlb	0	; () banked
  1718  0008A2  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1719  0008A4  0E01               	movlw	high main@mL
  1720  0008A6  0100               	movlb	0	; () banked
  1721  0008A8  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1722  0008AA  0ED9               	movlw	low main@mR
  1723  0008AC  0100               	movlb	0	; () banked
  1724  0008AE  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1725  0008B0  0E01               	movlw	high main@mR
  1726  0008B2  0100               	movlb	0	; () banked
  1727  0008B4  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1728  0008B6  0E64               	movlw	100
  1729  0008B8  0100               	movlb	0	; () banked
  1730  0008BA  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1731  0008BC  ECC6  F00D         	call	_fullSpeedBack	;wreg free
  1732                           
  1733                           ;main.c: 255: delay_tenth_s(MoveTime[Move]);
  1734  0008C0  0101               	movlb	1	; () banked
  1735  0008C2  51CF               	movf	main@Move& (0+255),w,b
  1736  0008C4  0D02               	mullw	2
  1737  0008C6  0E5A               	movlw	low main@MoveTime
  1738  0008C8  24F3               	addwf	prodl,w,c
  1739  0008CA  6ED9               	movwf	fsr2l,c
  1740  0008CC  0E01               	movlw	high main@MoveTime
  1741  0008CE  20F4               	addwfc	prodh,w,c
  1742  0008D0  6EDA               	movwf	fsr2h,c
  1743  0008D2  50DF               	movf	indf2,w,c
  1744  0008D4  EC23  F00E         	call	_delay_tenth_s
  1745                           
  1746                           ;main.c: 256: } else if (MoveType[Move]==1) {
  1747  0008D8  D0F7               	goto	l3552
  1748  0008DA                     l3526:
  1749  0008DA  0101               	movlb	1	; () banked
  1750  0008DC  51CF               	movf	main@Move& (0+255),w,b
  1751  0008DE  0D01               	mullw	1
  1752  0008E0  0E28               	movlw	low main@MoveType
  1753  0008E2  24F3               	addwf	prodl,w,c
  1754  0008E4  6ED9               	movwf	fsr2l,c
  1755  0008E6  0E01               	movlw	high main@MoveType
  1756  0008E8  20F4               	addwfc	prodh,w,c
  1757  0008EA  6EDA               	movwf	fsr2h,c
  1758  0008EC  04DE               	decf	postinc2,w,c
  1759  0008EE  A4D8               	btfss	status,2,c
  1760  0008F0  D091               	goto	l3544
  1761                           
  1762                           ; BSR set to: 1
  1763                           ;main.c: 257: T0CONbits.TMR0ON=0;
  1764  0008F2  9ED5               	bcf	4053,7,c	;volatile
  1765                           
  1766                           ; BSR set to: 1
  1767                           ;main.c: 258: TMR0L = 0;
  1768  0008F4  0E00               	movlw	0
  1769  0008F6  6ED6               	movwf	4054,c	;volatile
  1770                           
  1771                           ;main.c: 259: TMR0H = 0;
  1772  0008F8  0E00               	movlw	0
  1773  0008FA  6ED7               	movwf	4055,c	;volatile
  1774                           
  1775                           ; BSR set to: 1
  1776                           ;main.c: 260: if (MoveTime[Move]>0) {
  1777  0008FC  0101               	movlb	1	; () banked
  1778  0008FE  51CF               	movf	main@Move& (0+255),w,b
  1779  000900  0D02               	mullw	2
  1780  000902  0E5A               	movlw	low main@MoveTime
  1781  000904  24F3               	addwf	prodl,w,c
  1782  000906  6ED9               	movwf	fsr2l,c
  1783  000908  0E01               	movlw	high main@MoveTime
  1784  00090A  20F4               	addwfc	prodh,w,c
  1785  00090C  6EDA               	movwf	fsr2h,c
  1786  00090E  0E01               	movlw	1
  1787  000910  BEDB               	btfsc	plusw2,7,c
  1788  000912  D03D               	goto	l424
  1789  000914  0E01               	movlw	1
  1790  000916  50DB               	movf	plusw2,w,c
  1791  000918  E103               	bnz	u2920
  1792  00091A  04DE               	decf	postinc2,w,c
  1793  00091C  A0D8               	btfss	status,0,c
  1794  00091E  D037               	goto	l424
  1795  000920                     u2920:
  1796                           
  1797                           ; BSR set to: 1
  1798                           ;main.c: 261: T0CONbits.TMR0ON=1;
  1799  000920  8ED5               	bsf	4053,7,c	;volatile
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;main.c: 262: turnRight(&mL,&mR,40);
  1803  000922  0ED0               	movlw	low main@mL
  1804  000924  0100               	movlb	0	; () banked
  1805  000926  6F67               	movwf	turnRight@mL& (0+255),b
  1806  000928  0E01               	movlw	high main@mL
  1807  00092A  0100               	movlb	0	; () banked
  1808  00092C  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1809  00092E  0ED9               	movlw	low main@mR
  1810  000930  0100               	movlb	0	; () banked
  1811  000932  6F69               	movwf	turnRight@mR& (0+255),b
  1812  000934  0E01               	movlw	high main@mR
  1813  000936  0100               	movlb	0	; () banked
  1814  000938  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1815  00093A  0E28               	movlw	40
  1816  00093C  0100               	movlb	0	; () banked
  1817  00093E  6F6B               	movwf	turnRight@power& (0+255),b
  1818  000940  ECE5  F00D         	call	_turnRight	;wreg free
  1819  000944                     l3538:
  1820  000944  0101               	movlb	1	; () banked
  1821  000946  51CF               	movf	main@Move& (0+255),w,b
  1822  000948  0D02               	mullw	2
  1823  00094A  0E5A               	movlw	low main@MoveTime
  1824  00094C  24F3               	addwf	prodl,w,c
  1825  00094E  6ED9               	movwf	fsr2l,c
  1826  000950  0E01               	movlw	high main@MoveTime
  1827  000952  20F4               	addwfc	prodh,w,c
  1828  000954  6EDA               	movwf	fsr2h,c
  1829  000956  50D6               	movf	4054,w,c	;volatile
  1830  000958  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1831  00095C  0100               	movlb	0	; () banked
  1832  00095E  6BBD               	clrf	(??_main+3)& (0+255),b
  1833  000960  C0BC  F0BD         	movff	??_main+2,??_main+3
  1834  000964  0100               	movlb	0	; () banked
  1835  000966  6BBC               	clrf	(??_main+2)& (0+255),b
  1836  000968  0100               	movlb	0	; () banked
  1837  00096A  27BC               	addwf	(??_main+2)& (0+255),f,b
  1838  00096C  0E00               	movlw	0
  1839  00096E  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1840  000970  50DE               	movf	postinc2,w,c
  1841  000972  0100               	movlb	0	; () banked
  1842  000974  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1843  000976  0100               	movlb	0	; () banked
  1844  000978  51BD               	movf	(??_main+3)& (0+255),w,b
  1845  00097A  0A80               	xorlw	128
  1846  00097C  0100               	movlb	0	; () banked
  1847  00097E  6FBE               	movwf	(??_main+4)& (0+255),b
  1848  000980  50DE               	movf	postinc2,w,c
  1849  000982  0A80               	xorlw	128
  1850  000984  0100               	movlb	0	; () banked
  1851  000986  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1852  000988  A0D8               	btfss	status,0,c
  1853  00098A  D7DC               	goto	l3538
  1854  00098C  D041               	goto	l431
  1855  00098E                     l424:
  1856                           
  1857                           ; BSR set to: 1
  1858                           ;main.c: 267: T0CONbits.TMR0ON=1;
  1859  00098E  8ED5               	bsf	4053,7,c	;volatile
  1860                           
  1861                           ; BSR set to: 1
  1862                           ;main.c: 268: turnLeft(&mL,&mR,40);
  1863  000990  0ED0               	movlw	low main@mL
  1864  000992  0100               	movlb	0	; () banked
  1865  000994  6F67               	movwf	turnLeft@mL& (0+255),b
  1866  000996  0E01               	movlw	high main@mL
  1867  000998  0100               	movlb	0	; () banked
  1868  00099A  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1869  00099C  0ED9               	movlw	low main@mR
  1870  00099E  0100               	movlb	0	; () banked
  1871  0009A0  6F69               	movwf	turnLeft@mR& (0+255),b
  1872  0009A2  0E01               	movlw	high main@mR
  1873  0009A4  0100               	movlb	0	; () banked
  1874  0009A6  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1875  0009A8  0E28               	movlw	40
  1876  0009AA  0100               	movlb	0	; () banked
  1877  0009AC  6F6B               	movwf	turnLeft@power& (0+255),b
  1878  0009AE  EC04  F00E         	call	_turnLeft	;wreg free
  1879  0009B2                     l3542:
  1880  0009B2  0101               	movlb	1	; () banked
  1881  0009B4  51CF               	movf	main@Move& (0+255),w,b
  1882  0009B6  0D02               	mullw	2
  1883  0009B8  0E5A               	movlw	low main@MoveTime
  1884  0009BA  24F3               	addwf	prodl,w,c
  1885  0009BC  6ED9               	movwf	fsr2l,c
  1886  0009BE  0E01               	movlw	high main@MoveTime
  1887  0009C0  20F4               	addwfc	prodh,w,c
  1888  0009C2  6EDA               	movwf	fsr2h,c
  1889  0009C4  CFDE F0BA          	movff	postinc2,??_main
  1890  0009C8  CFDD F0BB          	movff	postdec2,??_main+1
  1891  0009CC  0100               	movlb	0	; () banked
  1892  0009CE  1FBA               	comf	??_main& (0+255),f,b
  1893  0009D0  1FBB               	comf	(??_main+1)& (0+255),f,b
  1894  0009D2  4BBA               	infsnz	??_main& (0+255),f,b
  1895  0009D4  2BBB               	incf	(??_main+1)& (0+255),f,b
  1896  0009D6  50D6               	movf	4054,w,c	;volatile
  1897  0009D8  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1898  0009DC  0100               	movlb	0	; () banked
  1899  0009DE  6BBD               	clrf	(??_main+3)& (0+255),b
  1900  0009E0  C0BC  F0BD         	movff	??_main+2,??_main+3
  1901  0009E4  0100               	movlb	0	; () banked
  1902  0009E6  6BBC               	clrf	(??_main+2)& (0+255),b
  1903  0009E8  0100               	movlb	0	; () banked
  1904  0009EA  27BC               	addwf	(??_main+2)& (0+255),f,b
  1905  0009EC  0E00               	movlw	0
  1906  0009EE  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1907  0009F0  0100               	movlb	0	; () banked
  1908  0009F2  51BA               	movf	??_main& (0+255),w,b
  1909  0009F4  0100               	movlb	0	; () banked
  1910  0009F6  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1911  0009F8  0100               	movlb	0	; () banked
  1912  0009FA  51BD               	movf	(??_main+3)& (0+255),w,b
  1913  0009FC  0A80               	xorlw	128
  1914  0009FE  0100               	movlb	0	; () banked
  1915  000A00  6FBE               	movwf	(??_main+4)& (0+255),b
  1916  000A02  0100               	movlb	0	; () banked
  1917  000A04  51BB               	movf	(??_main+1)& (0+255),w,b
  1918  000A06  0A80               	xorlw	128
  1919  000A08  0100               	movlb	0	; () banked
  1920  000A0A  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1921  000A0C  A0D8               	btfss	status,0,c
  1922  000A0E  D7D1               	goto	l3542
  1923  000A10                     l431:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 271: T0CONbits.TMR0ON=0;
  1927  000A10  9ED5               	bcf	4053,7,c	;volatile
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 272: }
  1931                           ;main.c: 273: } else if (MoveType[Move]==2) {
  1932  000A12  D05A               	goto	l3552
  1933  000A14                     l3544:
  1934  000A14  0101               	movlb	1	; () banked
  1935  000A16  51CF               	movf	main@Move& (0+255),w,b
  1936  000A18  0D01               	mullw	1
  1937  000A1A  0E28               	movlw	low main@MoveType
  1938  000A1C  24F3               	addwf	prodl,w,c
  1939  000A1E  6ED9               	movwf	fsr2l,c
  1940  000A20  0E01               	movlw	high main@MoveType
  1941  000A22  20F4               	addwfc	prodh,w,c
  1942  000A24  6EDA               	movwf	fsr2h,c
  1943  000A26  0E02               	movlw	2
  1944  000A28  18DE               	xorwf	postinc2,w,c
  1945  000A2A  A4D8               	btfss	status,2,c
  1946  000A2C  D04D               	goto	l3552
  1947                           
  1948                           ; BSR set to: 1
  1949                           ;main.c: 274: if (MoveTime[Move]>0) {
  1950  000A2E  0101               	movlb	1	; () banked
  1951  000A30  51CF               	movf	main@Move& (0+255),w,b
  1952  000A32  0D02               	mullw	2
  1953  000A34  0E5A               	movlw	low main@MoveTime
  1954  000A36  24F3               	addwf	prodl,w,c
  1955  000A38  6ED9               	movwf	fsr2l,c
  1956  000A3A  0E01               	movlw	high main@MoveTime
  1957  000A3C  20F4               	addwfc	prodh,w,c
  1958  000A3E  6EDA               	movwf	fsr2h,c
  1959  000A40  0E01               	movlw	1
  1960  000A42  BEDB               	btfsc	plusw2,7,c
  1961  000A44  D024               	goto	l3550
  1962  000A46  0E01               	movlw	1
  1963  000A48  50DB               	movf	plusw2,w,c
  1964  000A4A  E103               	bnz	u2960
  1965  000A4C  04DE               	decf	postinc2,w,c
  1966  000A4E  A0D8               	btfss	status,0,c
  1967  000A50  D01E               	goto	l3550
  1968  000A52                     u2960:
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;main.c: 275: turnRight(&mL,&mR,100);
  1972  000A52  0ED0               	movlw	low main@mL
  1973  000A54  0100               	movlb	0	; () banked
  1974  000A56  6F67               	movwf	turnRight@mL& (0+255),b
  1975  000A58  0E01               	movlw	high main@mL
  1976  000A5A  0100               	movlb	0	; () banked
  1977  000A5C  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1978  000A5E  0ED9               	movlw	low main@mR
  1979  000A60  0100               	movlb	0	; () banked
  1980  000A62  6F69               	movwf	turnRight@mR& (0+255),b
  1981  000A64  0E01               	movlw	high main@mR
  1982  000A66  0100               	movlb	0	; () banked
  1983  000A68  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1984  000A6A  0E64               	movlw	100
  1985  000A6C  0100               	movlb	0	; () banked
  1986  000A6E  6F6B               	movwf	turnRight@power& (0+255),b
  1987  000A70  ECE5  F00D         	call	_turnRight	;wreg free
  1988                           
  1989                           ;main.c: 276: delay_tenth_s(MoveTime[Move]);
  1990  000A74  0101               	movlb	1	; () banked
  1991  000A76  51CF               	movf	main@Move& (0+255),w,b
  1992  000A78  0D02               	mullw	2
  1993  000A7A  0E5A               	movlw	low main@MoveTime
  1994  000A7C  24F3               	addwf	prodl,w,c
  1995  000A7E  6ED9               	movwf	fsr2l,c
  1996  000A80  0E01               	movlw	high main@MoveTime
  1997  000A82  20F4               	addwfc	prodh,w,c
  1998  000A84  6EDA               	movwf	fsr2h,c
  1999  000A86  50DF               	movf	indf2,w,c
  2000  000A88  EC23  F00E         	call	_delay_tenth_s
  2001                           
  2002                           ;main.c: 277: } else {
  2003  000A8C  D01D               	goto	l3552
  2004  000A8E                     l3550:
  2005                           
  2006                           ;main.c: 278: turnLeft(&mL,&mR,100);
  2007  000A8E  0ED0               	movlw	low main@mL
  2008  000A90  0100               	movlb	0	; () banked
  2009  000A92  6F67               	movwf	turnLeft@mL& (0+255),b
  2010  000A94  0E01               	movlw	high main@mL
  2011  000A96  0100               	movlb	0	; () banked
  2012  000A98  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2013  000A9A  0ED9               	movlw	low main@mR
  2014  000A9C  0100               	movlb	0	; () banked
  2015  000A9E  6F69               	movwf	turnLeft@mR& (0+255),b
  2016  000AA0  0E01               	movlw	high main@mR
  2017  000AA2  0100               	movlb	0	; () banked
  2018  000AA4  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2019  000AA6  0E64               	movlw	100
  2020  000AA8  0100               	movlb	0	; () banked
  2021  000AAA  6F6B               	movwf	turnLeft@power& (0+255),b
  2022  000AAC  EC04  F00E         	call	_turnLeft	;wreg free
  2023                           
  2024                           ;main.c: 279: delay_tenth_s(MoveTime[Move]);
  2025  000AB0  0101               	movlb	1	; () banked
  2026  000AB2  51CF               	movf	main@Move& (0+255),w,b
  2027  000AB4  0D02               	mullw	2
  2028  000AB6  0E5A               	movlw	low main@MoveTime
  2029  000AB8  24F3               	addwf	prodl,w,c
  2030  000ABA  6ED9               	movwf	fsr2l,c
  2031  000ABC  0E01               	movlw	high main@MoveTime
  2032  000ABE  20F4               	addwfc	prodh,w,c
  2033  000AC0  6EDA               	movwf	fsr2h,c
  2034  000AC2  50DF               	movf	indf2,w,c
  2035  000AC4  EC23  F00E         	call	_delay_tenth_s
  2036  000AC8                     l3552:
  2037  000AC8  0101               	movlb	1	; () banked
  2038  000ACA  07CF               	decf	main@Move& (0+255),f,b
  2039  000ACC  D6CE               	goto	l3520
  2040  000ACE                     l3556:
  2041                           
  2042                           ;main.c: 284: mode=-1;
  2043  000ACE  683B               	setf	_mode,c	;volatile
  2044  000AD0                     l3560:
  2045  000AD0  503B               	movf	_mode,w,c	;volatile
  2046                           
  2047                           ; Switch size 1, requested type "space"
  2048                           ; Number of cases is 5, Range of values is 0 to 255
  2049                           ; switch strategies available:
  2050                           ; Name         Instructions Cycles
  2051                           ; simple_byte           16     9 (average)
  2052                           ;	Chosen strategy is simple_byte
  2053  000AD2  0A00               	xorlw	0	; case 0
  2054  000AD4  B4D8               	btfsc	status,2,c
  2055  000AD6  D511               	goto	l3406
  2056  000AD8  0A01               	xorlw	1	; case 1
  2057  000ADA  B4D8               	btfsc	status,2,c
  2058  000ADC  D537               	goto	l3426
  2059  000ADE  0A03               	xorlw	3	; case 2
  2060  000AE0  B4D8               	btfsc	status,2,c
  2061  000AE2  D5D7               	goto	l3458
  2062  000AE4  0A01               	xorlw	1	; case 3
  2063  000AE6  B4D8               	btfsc	status,2,c
  2064  000AE8  D6AE               	goto	l3512
  2065  000AEA  0AFC               	xorlw	252	; case 255
  2066  000AEC  B4D8               	btfsc	status,2,c
  2067  000AEE  D499               	goto	l3368
  2068  000AF0  D7EF               	goto	l3560
  2069  000AF2                     __end_of_main:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           prodh	equ	0xFF4
  2073                           prodl	equ	0xFF3
  2074                           intcon	equ	0xFF2
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           indf1	equ	0xFE7
  2078                           plusw1	equ	0xFE3
  2079                           fsr1h	equ	0xFE2
  2080                           fsr1l	equ	0xFE1
  2081                           indf2	equ	0xFDF
  2082                           postinc2	equ	0xFDE
  2083                           postdec2	equ	0xFDD
  2084                           plusw2	equ	0xFDB
  2085                           fsr2h	equ	0xFDA
  2086                           fsr2l	equ	0xFD9
  2087                           status	equ	0xFD8
  2088                           
  2089 ;; *************** function _initTimer *****************
  2090 ;; Defined at:
  2091 ;;		line 8 in file "Movement.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;		None
  2096 ;; Return value:  Size  Location     Type
  2097 ;;		None               void
  2098 ;; Registers used:
  2099 ;;		None
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2105 ;;      Params:         0       0       0       0
  2106 ;;      Locals:         0       0       0       0
  2107 ;;      Temps:          0       0       0       0
  2108 ;;      Totals:         0       0       0       0
  2109 ;;Total ram usage:        0 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    3
  2112 ;; This function calls:
  2113 ;;		Nothing
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text1
  2120  001E26                     __ptext1:
  2121                           	opt stack 0
  2122  001E26                     _initTimer:
  2123                           	opt stack 27
  2124                           
  2125                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2126                           
  2127                           ;incstack = 0
  2128  001E26  9ED5               	bcf	4053,7,c	;volatile
  2129                           
  2130                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2131  001E28  9CD5               	bcf	4053,6,c	;volatile
  2132                           
  2133                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2134  001E2A  9AD5               	bcf	4053,5,c	;volatile
  2135                           
  2136                           ;Movement.c: 13: T0CONbits.PSA=0;
  2137  001E2C  96D5               	bcf	4053,3,c	;volatile
  2138                           
  2139                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2140  001E2E  80D5               	bsf	4053,0,c	;volatile
  2141  001E30  82D5               	bsf	4053,1,c	;volatile
  2142  001E32  84D5               	bsf	4053,2,c	;volatile
  2143                           
  2144                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2145  001E34  9AF2               	bcf	intcon,5,c	;volatile
  2146  001E36  0012               	return		;funcret
  2147  001E38                     __end_of_initTimer:
  2148                           	opt stack 0
  2149                           tblptru	equ	0xFF8
  2150                           prodh	equ	0xFF4
  2151                           prodl	equ	0xFF3
  2152                           intcon	equ	0xFF2
  2153                           postinc0	equ	0xFEE
  2154                           wreg	equ	0xFE8
  2155                           indf1	equ	0xFE7
  2156                           plusw1	equ	0xFE3
  2157                           fsr1h	equ	0xFE2
  2158                           fsr1l	equ	0xFE1
  2159                           indf2	equ	0xFDF
  2160                           postinc2	equ	0xFDE
  2161                           postdec2	equ	0xFDD
  2162                           plusw2	equ	0xFDB
  2163                           fsr2h	equ	0xFDA
  2164                           fsr2l	equ	0xFD9
  2165                           status	equ	0xFD8
  2166                           
  2167 ;; *************** function _initRFID *****************
  2168 ;; Defined at:
  2169 ;;		line 8 in file "RFID_Reader.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;		None
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;		None
  2174 ;; Return value:  Size  Location     Type
  2175 ;;		None               void
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2183 ;;      Params:         0       0       0       0
  2184 ;;      Locals:         0       0       0       0
  2185 ;;      Temps:          0       0       0       0
  2186 ;;      Totals:         0       0       0       0
  2187 ;;Total ram usage:        0 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:    3
  2190 ;; This function calls:
  2191 ;;		Nothing
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text2
  2198  001E0A                     __ptext2:
  2199                           	opt stack 0
  2200  001E0A                     _initRFID:
  2201                           	opt stack 27
  2202                           
  2203                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2204                           
  2205                           ;incstack = 0
  2206  001E0A  5094               	movf	3988,w,c	;volatile
  2207  001E0C  09C0               	iorlw	192
  2208  001E0E  6E94               	movwf	3988,c	;volatile
  2209                           
  2210                           ;RFID_Reader.c: 13: SPBRG=205;
  2211  001E10  0ECD               	movlw	205
  2212  001E12  6EAF               	movwf	4015,c	;volatile
  2213                           
  2214                           ;RFID_Reader.c: 14: SPBRGH=0;
  2215  001E14  0E00               	movlw	0
  2216  001E16  6EB0               	movwf	4016,c	;volatile
  2217                           
  2218                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2219  001E18  86AA               	bsf	4010,3,c	;volatile
  2220                           
  2221                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2222  001E1A  84AC               	bsf	4012,2,c	;volatile
  2223                           
  2224                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2225  001E1C  88AB               	bsf	4011,4,c	;volatile
  2226                           
  2227                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2228  001E1E  8EAB               	bsf	4011,7,c	;volatile
  2229                           
  2230                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2231  001E20  98AC               	bcf	4012,4,c	;volatile
  2232                           
  2233                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2234  001E22  9CAB               	bcf	4011,6,c	;volatile
  2235  001E24  0012               	return		;funcret
  2236  001E26                     __end_of_initRFID:
  2237                           	opt stack 0
  2238                           tblptru	equ	0xFF8
  2239                           prodh	equ	0xFF4
  2240                           prodl	equ	0xFF3
  2241                           intcon	equ	0xFF2
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           indf1	equ	0xFE7
  2245                           plusw1	equ	0xFE3
  2246                           fsr1h	equ	0xFE2
  2247                           fsr1l	equ	0xFE1
  2248                           indf2	equ	0xFDF
  2249                           postinc2	equ	0xFDE
  2250                           postdec2	equ	0xFDD
  2251                           plusw2	equ	0xFDB
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _initMotorPWM *****************
  2257 ;; Defined at:
  2258 ;;		line 4 in file "dc_motor.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;		None
  2263 ;; Return value:  Size  Location     Type
  2264 ;;		None               void
  2265 ;; Registers used:
  2266 ;;		wreg, status,2
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2272 ;;      Params:         0       0       0       0
  2273 ;;      Locals:         0       0       0       0
  2274 ;;      Temps:          0       0       0       0
  2275 ;;      Totals:         0       0       0       0
  2276 ;;Total ram usage:        0 bytes
  2277 ;; Hardware stack levels used:    1
  2278 ;; Hardware stack levels required when called:    3
  2279 ;; This function calls:
  2280 ;;		Nothing
  2281 ;; This function is called by:
  2282 ;;		_main
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text3
  2287  001CEC                     __ptext3:
  2288                           	opt stack 0
  2289  001CEC                     _initMotorPWM:
  2290                           	opt stack 27
  2291                           
  2292                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2293                           
  2294                           ;incstack = 0
  2295  001CEC  0E00               	movlw	0
  2296  001CEE  6E7F               	movwf	3967,c	;volatile
  2297                           
  2298                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2299  001CF0  0E80               	movlw	128
  2300  001CF2  6E7E               	movwf	3966,c	;volatile
  2301                           
  2302                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2303  001CF4  0E6F               	movlw	111
  2304  001CF6  6E6F               	movwf	3951,c	;volatile
  2305                           
  2306                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2307  001CF8  0E00               	movlw	0
  2308  001CFA  6E6E               	movwf	3950,c	;volatile
  2309                           
  2310                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2311  001CFC  0EC7               	movlw	199
  2312  001CFE  6E7B               	movwf	3963,c	;volatile
  2313                           
  2314                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2315  001D00  0E00               	movlw	0
  2316  001D02  6E7A               	movwf	3962,c	;volatile
  2317                           
  2318                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2319  001D04  0E00               	movlw	0
  2320  001D06  6E79               	movwf	3961,c	;volatile
  2321                           
  2322                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2323  001D08  0E00               	movlw	0
  2324  001D0A  6E78               	movwf	3960,c	;volatile
  2325                           
  2326                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2327  001D0C  0E00               	movlw	0
  2328  001D0E  6E77               	movwf	3959,c	;volatile
  2329                           
  2330                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2331  001D10  0E00               	movlw	0
  2332  001D12  6E76               	movwf	3958,c	;volatile
  2333                           
  2334                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2335  001D14  9093               	bcf	3987,0,c	;volatile
  2336                           
  2337                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2338  001D16  9293               	bcf	3987,1,c	;volatile
  2339                           
  2340                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2341  001D18  9493               	bcf	3987,2,c	;volatile
  2342                           
  2343                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2344  001D1A  9693               	bcf	3987,3,c	;volatile
  2345  001D1C  0012               	return		;funcret
  2346  001D1E                     __end_of_initMotorPWM:
  2347                           	opt stack 0
  2348                           tblptru	equ	0xFF8
  2349                           prodh	equ	0xFF4
  2350                           prodl	equ	0xFF3
  2351                           intcon	equ	0xFF2
  2352                           postinc0	equ	0xFEE
  2353                           wreg	equ	0xFE8
  2354                           indf1	equ	0xFE7
  2355                           plusw1	equ	0xFE3
  2356                           fsr1h	equ	0xFE2
  2357                           fsr1l	equ	0xFE1
  2358                           indf2	equ	0xFDF
  2359                           postinc2	equ	0xFDE
  2360                           postdec2	equ	0xFDD
  2361                           plusw2	equ	0xFDB
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _initLCD *****************
  2367 ;; Defined at:
  2368 ;;		line 38 in file "LCD.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;		None               void
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2382 ;;      Params:         0       0       0       0
  2383 ;;      Locals:         0       0       0       0
  2384 ;;      Temps:          1       0       0       0
  2385 ;;      Totals:         1       0       0       0
  2386 ;;Total ram usage:        1 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    6
  2389 ;; This function calls:
  2390 ;;		_LCDout
  2391 ;;		_SendLCD
  2392 ;; This function is called by:
  2393 ;;		_main
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text4
  2398  001680                     __ptext4:
  2399                           	opt stack 0
  2400  001680                     _initLCD:
  2401                           	opt stack 24
  2402                           
  2403                           ;LCD.c: 44: TRISAbits.RA6=0;
  2404                           
  2405                           ;incstack = 0
  2406  001680  9C92               	bcf	3986,6,c	;volatile
  2407                           
  2408                           ;LCD.c: 45: TRISCbits.RC0=0;
  2409  001682  9094               	bcf	3988,0,c	;volatile
  2410                           
  2411                           ;LCD.c: 46: TRISCbits.RC1=0;
  2412  001684  9294               	bcf	3988,1,c	;volatile
  2413                           
  2414                           ;LCD.c: 47: TRISCbits.RC2=0;
  2415  001686  9494               	bcf	3988,2,c	;volatile
  2416                           
  2417                           ;LCD.c: 48: TRISDbits.RD0=0;
  2418  001688  9095               	bcf	3989,0,c	;volatile
  2419                           
  2420                           ;LCD.c: 49: TRISDbits.RD1=0;
  2421  00168A  9295               	bcf	3989,1,c	;volatile
  2422                           
  2423                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2424  00168C  0E27               	movlw	39
  2425  00168E  6E2A               	movwf	??_initLCD& (0+255),c
  2426  001690  0EF5               	movlw	245
  2427  001692                     u2997:
  2428  001692  2EE8               	decfsz	wreg,f,c
  2429  001694  D7FE               	goto	u2997
  2430  001696  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2431  001698  D7FC               	goto	u2997
  2432  00169A  F000               	nop	
  2433                           
  2434                           ;LCD.c: 52: LCDout(0b0011);
  2435  00169C  0E03               	movlw	3
  2436  00169E  ECDD  F00A         	call	_LCDout
  2437                           
  2438                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2439  0016A2  0E0D               	movlw	13
  2440  0016A4  6E2A               	movwf	??_initLCD& (0+255),c
  2441  0016A6  0EFC               	movlw	252
  2442  0016A8                     u3007:
  2443  0016A8  2EE8               	decfsz	wreg,f,c
  2444  0016AA  D7FE               	goto	u3007
  2445  0016AC  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2446  0016AE  D7FC               	goto	u3007
  2447                           
  2448                           ;LCD.c: 54: LCDout(0b0011);
  2449  0016B0  0E03               	movlw	3
  2450  0016B2  ECDD  F00A         	call	_LCDout
  2451                           
  2452                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2453  0016B6  0E85               	movlw	133
  2454  0016B8                     u3017:
  2455  0016B8  2EE8               	decfsz	wreg,f,c
  2456  0016BA  D7FE               	goto	u3017
  2457  0016BC  F000               	nop	
  2458                           
  2459                           ;LCD.c: 56: LCDout(0b0011);
  2460  0016BE  0E03               	movlw	3
  2461  0016C0  ECDD  F00A         	call	_LCDout
  2462                           
  2463                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2464  0016C4  0E21               	movlw	33
  2465  0016C6                     u3027:
  2466  0016C6  2EE8               	decfsz	wreg,f,c
  2467  0016C8  D7FE               	goto	u3027
  2468  0016CA  F000               	nop	
  2469                           
  2470                           ;LCD.c: 58: LCDout(0b0010);
  2471  0016CC  0E02               	movlw	2
  2472  0016CE  ECDD  F00A         	call	_LCDout
  2473                           
  2474                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2475  0016D2  0E21               	movlw	33
  2476  0016D4                     u3037:
  2477  0016D4  2EE8               	decfsz	wreg,f,c
  2478  0016D6  D7FE               	goto	u3037
  2479  0016D8  F000               	nop	
  2480                           
  2481                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2482  0016DA  0E00               	movlw	0
  2483  0016DC  6E28               	movwf	SendLCD@type,c
  2484  0016DE  0E28               	movlw	40
  2485  0016E0  ECA7  F00E         	call	_SendLCD
  2486                           
  2487                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2488  0016E4  0E21               	movlw	33
  2489  0016E6                     u3047:
  2490  0016E6  2EE8               	decfsz	wreg,f,c
  2491  0016E8  D7FE               	goto	u3047
  2492  0016EA  F000               	nop	
  2493                           
  2494                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2495  0016EC  0E00               	movlw	0
  2496  0016EE  6E28               	movwf	SendLCD@type,c
  2497  0016F0  0E08               	movlw	8
  2498  0016F2  ECA7  F00E         	call	_SendLCD
  2499                           
  2500                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2501  0016F6  0E21               	movlw	33
  2502  0016F8                     u3057:
  2503  0016F8  2EE8               	decfsz	wreg,f,c
  2504  0016FA  D7FE               	goto	u3057
  2505  0016FC  F000               	nop	
  2506                           
  2507                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2508  0016FE  0E00               	movlw	0
  2509  001700  6E28               	movwf	SendLCD@type,c
  2510  001702  0E01               	movlw	1
  2511  001704  ECA7  F00E         	call	_SendLCD
  2512                           
  2513                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2514  001708  0E0D               	movlw	13
  2515  00170A  6E2A               	movwf	??_initLCD& (0+255),c
  2516  00170C  0EFC               	movlw	252
  2517  00170E                     u3067:
  2518  00170E  2EE8               	decfsz	wreg,f,c
  2519  001710  D7FE               	goto	u3067
  2520  001712  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2521  001714  D7FC               	goto	u3067
  2522                           
  2523                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2524  001716  0E00               	movlw	0
  2525  001718  6E28               	movwf	SendLCD@type,c
  2526  00171A  0E06               	movlw	6
  2527  00171C  ECA7  F00E         	call	_SendLCD
  2528                           
  2529                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2530  001720  0E21               	movlw	33
  2531  001722                     u3077:
  2532  001722  2EE8               	decfsz	wreg,f,c
  2533  001724  D7FE               	goto	u3077
  2534  001726  F000               	nop	
  2535                           
  2536                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2537  001728  0E00               	movlw	0
  2538  00172A  6E28               	movwf	SendLCD@type,c
  2539  00172C  0E0C               	movlw	12
  2540  00172E  ECA7  F00E         	call	_SendLCD
  2541                           
  2542                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2543  001732  0E21               	movlw	33
  2544  001734                     u3087:
  2545  001734  2EE8               	decfsz	wreg,f,c
  2546  001736  D7FE               	goto	u3087
  2547  001738  F000               	nop	
  2548  00173A  0012               	return		;funcret
  2549  00173C                     __end_of_initLCD:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           prodh	equ	0xFF4
  2553                           prodl	equ	0xFF3
  2554                           intcon	equ	0xFF2
  2555                           postinc0	equ	0xFEE
  2556                           wreg	equ	0xFE8
  2557                           indf1	equ	0xFE7
  2558                           plusw1	equ	0xFE3
  2559                           fsr1h	equ	0xFE2
  2560                           fsr1l	equ	0xFE1
  2561                           indf2	equ	0xFDF
  2562                           postinc2	equ	0xFDE
  2563                           postdec2	equ	0xFDD
  2564                           plusw2	equ	0xFDB
  2565                           fsr2h	equ	0xFDA
  2566                           fsr2l	equ	0xFD9
  2567                           status	equ	0xFD8
  2568                           
  2569 ;; *************** function _initIR *****************
  2570 ;; Defined at:
  2571 ;;		line 30 in file "IR_Reading.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;		None               void
  2578 ;; Registers used:
  2579 ;;		wreg, status,2
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2585 ;;      Params:         0       0       0       0
  2586 ;;      Locals:         0       0       0       0
  2587 ;;      Temps:          0       0       0       0
  2588 ;;      Totals:         0       0       0       0
  2589 ;;Total ram usage:        0 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    3
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_main
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           	psect	text5
  2600  001DCA                     __ptext5:
  2601                           	opt stack 0
  2602  001DCA                     _initIR:
  2603                           	opt stack 27
  2604                           
  2605                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2606                           
  2607                           ;incstack = 0
  2608  001DCA  9489               	bcf	3977,2,c	;volatile
  2609                           
  2610                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2611  001DCC  9689               	bcf	3977,3,c	;volatile
  2612                           
  2613                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2614  001DCE  8492               	bsf	3986,2,c	;volatile
  2615                           
  2616                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2617  001DD0  8692               	bsf	3986,3,c	;volatile
  2618                           
  2619                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2620  001DD2  94B8               	bcf	4024,2,c	;volatile
  2621                           
  2622                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2623  001DD4  96B8               	bcf	4024,3,c	;volatile
  2624                           
  2625                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2626  001DD6  9CB8               	bcf	4024,6,c	;volatile
  2627                           
  2628                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2629  001DD8  9EB8               	bcf	4024,7,c	;volatile
  2630                           
  2631                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2632  001DDA  0E06               	movlw	6
  2633  001DDC  6E63               	movwf	3939,c	;volatile
  2634                           
  2635                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2636  001DDE  0E06               	movlw	6
  2637  001DE0  6E62               	movwf	3938,c	;volatile
  2638                           
  2639                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2640  001DE2  9096               	bcf	3990,0,c	;volatile
  2641                           
  2642                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2643  001DE4  9296               	bcf	3990,1,c	;volatile
  2644                           
  2645                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2646  001DE6  0E59               	movlw	89
  2647  001DE8  6EB7               	movwf	4023,c	;volatile
  2648  001DEA  0012               	return		;funcret
  2649  001DEC                     __end_of_initIR:
  2650                           	opt stack 0
  2651                           tblptru	equ	0xFF8
  2652                           prodh	equ	0xFF4
  2653                           prodl	equ	0xFF3
  2654                           intcon	equ	0xFF2
  2655                           postinc0	equ	0xFEE
  2656                           wreg	equ	0xFE8
  2657                           indf1	equ	0xFE7
  2658                           plusw1	equ	0xFE3
  2659                           fsr1h	equ	0xFE2
  2660                           fsr1l	equ	0xFE1
  2661                           indf2	equ	0xFDF
  2662                           postinc2	equ	0xFDE
  2663                           postdec2	equ	0xFDD
  2664                           plusw2	equ	0xFDB
  2665                           fsr2h	equ	0xFDA
  2666                           fsr2l	equ	0xFD9
  2667                           status	equ	0xFD8
  2668                           
  2669 ;; *************** function _fullSpeedBack *****************
  2670 ;; Defined at:
  2671 ;;		line 125 in file "dc_motor.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2674 ;;		 -> main@mL(9), 
  2675 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2676 ;;		 -> main@mR(9), 
  2677 ;;  power           1   11[BANK0 ] unsigned char 
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;		None
  2680 ;; Return value:  Size  Location     Type
  2681 ;;		None               void
  2682 ;; Registers used:
  2683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2689 ;;      Params:         0       5       0       0
  2690 ;;      Locals:         0       0       0       0
  2691 ;;      Temps:          0       0       0       0
  2692 ;;      Totals:         0       5       0       0
  2693 ;;Total ram usage:        5 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    6
  2696 ;; This function calls:
  2697 ;;		_fullSpeedAhead
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text6
  2704  001B8C                     __ptext6:
  2705                           	opt stack 0
  2706  001B8C                     _fullSpeedBack:
  2707                           	opt stack 24
  2708                           
  2709                           ;dc_motor.c: 128: mL->direction=0;
  2710                           
  2711                           ;incstack = 0
  2712  001B8C  0100               	movlb	0	; () banked
  2713  001B8E  EE20 F001          	lfsr	2,1
  2714  001B92  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2715  001B94  26D9               	addwf	fsr2l,f,c
  2716  001B96  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2717  001B98  22DA               	addwfc	fsr2h,f,c
  2718  001B9A  0E00               	movlw	0
  2719  001B9C  6EDF               	movwf	indf2,c
  2720                           
  2721                           ;dc_motor.c: 129: mR->direction=0;
  2722  001B9E  0100               	movlb	0	; () banked
  2723  001BA0  EE20 F001          	lfsr	2,1
  2724  001BA4  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2725  001BA6  26D9               	addwf	fsr2l,f,c
  2726  001BA8  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2727  001BAA  22DA               	addwfc	fsr2h,f,c
  2728  001BAC  0E00               	movlw	0
  2729  001BAE  6EDF               	movwf	indf2,c
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2733  001BB0  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2734  001BB4  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2735  001BB8  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2736  001BBC  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2737  001BC0  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2738  001BC4  EC6F  F00C         	call	_fullSpeedAhead	;wreg free
  2739  001BC8  0012               	return		;funcret
  2740  001BCA                     __end_of_fullSpeedBack:
  2741                           	opt stack 0
  2742                           tblptru	equ	0xFF8
  2743                           prodh	equ	0xFF4
  2744                           prodl	equ	0xFF3
  2745                           intcon	equ	0xFF2
  2746                           postinc0	equ	0xFEE
  2747                           wreg	equ	0xFE8
  2748                           indf1	equ	0xFE7
  2749                           plusw1	equ	0xFE3
  2750                           fsr1h	equ	0xFE2
  2751                           fsr1l	equ	0xFE1
  2752                           indf2	equ	0xFDF
  2753                           postinc2	equ	0xFDE
  2754                           postdec2	equ	0xFDD
  2755                           plusw2	equ	0xFDB
  2756                           fsr2h	equ	0xFDA
  2757                           fsr2l	equ	0xFD9
  2758                           status	equ	0xFD8
  2759                           
  2760 ;; *************** function _enableSensor *****************
  2761 ;; Defined at:
  2762 ;;		line 106 in file "IR_Reading.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  sensor          1    wreg     unsigned char 
  2765 ;;  status          1   35[COMRAM] unsigned char 
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;  sensor          1   36[COMRAM] unsigned char 
  2768 ;; Return value:  Size  Location     Type
  2769 ;;		None               void
  2770 ;; Registers used:
  2771 ;;		wreg, status,2, status,0
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2777 ;;      Params:         1       0       0       0
  2778 ;;      Locals:         1       0       0       0
  2779 ;;      Temps:          0       0       0       0
  2780 ;;      Totals:         2       0       0       0
  2781 ;;Total ram usage:        2 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    3
  2784 ;; This function calls:
  2785 ;;		Nothing
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text7
  2792  001D7E                     __ptext7:
  2793                           	opt stack 0
  2794  001D7E                     _enableSensor:
  2795                           	opt stack 27
  2796                           
  2797                           ;incstack = 0
  2798                           ;enableSensor@sensor stored from wreg
  2799  001D7E  6E25               	movwf	enableSensor@sensor,c
  2800                           
  2801                           ;IR_Reading.c: 108: if (sensor==0){
  2802  001D80  5025               	movf	enableSensor@sensor,w,c
  2803  001D82  A4D8               	btfss	status,2,c
  2804  001D84  D006               	goto	l2404
  2805                           
  2806                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2807  001D86  B024               	btfsc	enableSensor@status,0,c
  2808  001D88  D002               	bra	u1815
  2809  001D8A  908D               	bcf	3981,0,c	;volatile
  2810  001D8C  D001               	bra	u1816
  2811  001D8E                     u1815:
  2812  001D8E  808D               	bsf	3981,0,c	;volatile
  2813  001D90                     u1816:
  2814                           
  2815                           ;IR_Reading.c: 110: } else if (sensor==1){
  2816  001D90  0012               	return	
  2817  001D92                     l2404:
  2818  001D92  0425               	decf	enableSensor@sensor,w,c
  2819  001D94  A4D8               	btfss	status,2,c
  2820  001D96  0012               	return	
  2821                           
  2822                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2823  001D98  B024               	btfsc	enableSensor@status,0,c
  2824  001D9A  D002               	bra	u1835
  2825  001D9C  928D               	bcf	3981,1,c	;volatile
  2826  001D9E  D001               	bra	u1836
  2827  001DA0                     u1835:
  2828  001DA0  828D               	bsf	3981,1,c	;volatile
  2829  001DA2                     u1836:
  2830  001DA2  0012               	return	
  2831  001DA4                     __end_of_enableSensor:
  2832                           	opt stack 0
  2833                           tblptru	equ	0xFF8
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           intcon	equ	0xFF2
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           indf1	equ	0xFE7
  2840                           plusw1	equ	0xFE3
  2841                           fsr1h	equ	0xFE2
  2842                           fsr1l	equ	0xFE1
  2843                           indf2	equ	0xFDF
  2844                           postinc2	equ	0xFDE
  2845                           postdec2	equ	0xFDD
  2846                           plusw2	equ	0xFDB
  2847                           fsr2h	equ	0xFDA
  2848                           fsr2l	equ	0xFD9
  2849                           status	equ	0xFD8
  2850                           
  2851 ;; *************** function _VerifySignal *****************
  2852 ;; Defined at:
  2853 ;;		line 58 in file "RFID_Reader.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2856 ;;		 -> ReceivedString(16), 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  ptr             3    0        PTR unsigned char 
  2859 ;;  hexByte         2   43[COMRAM] unsigned int 
  2860 ;;  checksum        1   42[COMRAM] unsigned char 
  2861 ;;  i               1   41[COMRAM] unsigned char 
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  1    wreg      unsigned char 
  2864 ;; Registers used:
  2865 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2871 ;;      Params:         2       0       0       0
  2872 ;;      Locals:         4       0       0       0
  2873 ;;      Temps:          4       0       0       0
  2874 ;;      Totals:        10       0       0       0
  2875 ;;Total ram usage:       10 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    3
  2878 ;; This function calls:
  2879 ;;		Nothing
  2880 ;; This function is called by:
  2881 ;;		_main
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text8
  2886  001AA0                     __ptext8:
  2887                           	opt stack 0
  2888  001AA0                     _VerifySignal:
  2889                           	opt stack 27
  2890                           
  2891                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2892                           
  2893                           ;incstack = 0
  2894  001AA0  0E00               	movlw	0
  2895  001AA2  6E2B               	movwf	VerifySignal@checksum,c
  2896                           
  2897                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2898  001AA4  0E00               	movlw	0
  2899  001AA6  6E2D               	movwf	VerifySignal@hexByte+1,c
  2900  001AA8  0E00               	movlw	0
  2901  001AAA  6E2C               	movwf	VerifySignal@hexByte,c
  2902                           
  2903                           ;RFID_Reader.c: 61: unsigned char i=0;
  2904  001AAC  0E00               	movlw	0
  2905  001AAE  6E2A               	movwf	VerifySignal@i,c
  2906                           
  2907                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2908                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2909  001AB0  EE20 F004          	lfsr	2,4
  2910  001AB4  5024               	movf	VerifySignal@Signal,w,c
  2911  001AB6  26D9               	addwf	fsr2l,f,c
  2912  001AB8  5025               	movf	VerifySignal@Signal+1,w,c
  2913  001ABA  22DA               	addwfc	fsr2h,f,c
  2914  001ABC  50DF               	movf	indf2,w,c
  2915  001ABE  6E26               	movwf	??_VerifySignal& (0+255),c
  2916  001AC0  EE20 F003          	lfsr	2,3
  2917  001AC4  5024               	movf	VerifySignal@Signal,w,c
  2918  001AC6  26D9               	addwf	fsr2l,f,c
  2919  001AC8  5025               	movf	VerifySignal@Signal+1,w,c
  2920  001ACA  22DA               	addwfc	fsr2h,f,c
  2921  001ACC  50DF               	movf	indf2,w,c
  2922  001ACE  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2923  001AD0  5027               	movf	??_VerifySignal+1,w,c
  2924  001AD2  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2925  001AD4  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2926  001AD6  5026               	movf	??_VerifySignal,w,c
  2927  001AD8  2428               	addwf	??_VerifySignal+2,w,c
  2928  001ADA  6E2C               	movwf	VerifySignal@hexByte,c
  2929  001ADC  0E00               	movlw	0
  2930  001ADE  2029               	addwfc	??_VerifySignal+3,w,c
  2931  001AE0  6E2D               	movwf	VerifySignal@hexByte+1,c
  2932                           
  2933                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2934  001AE2  EE20 F002          	lfsr	2,2
  2935  001AE6  5024               	movf	VerifySignal@Signal,w,c
  2936  001AE8  26D9               	addwf	fsr2l,f,c
  2937  001AEA  5025               	movf	VerifySignal@Signal+1,w,c
  2938  001AEC  22DA               	addwfc	fsr2h,f,c
  2939  001AEE  50DF               	movf	indf2,w,c
  2940  001AF0  182C               	xorwf	VerifySignal@hexByte,w,c
  2941  001AF2  6E2B               	movwf	VerifySignal@checksum,c
  2942                           
  2943                           ;RFID_Reader.c: 75: return 1;
  2944  001AF4  0E01               	movlw	1
  2945  001AF6  0012               	return	
  2946  001AF8                     __end_of_VerifySignal:
  2947                           	opt stack 0
  2948                           tblptru	equ	0xFF8
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           intcon	equ	0xFF2
  2952                           postinc0	equ	0xFEE
  2953                           wreg	equ	0xFE8
  2954                           indf1	equ	0xFE7
  2955                           plusw1	equ	0xFE3
  2956                           fsr1h	equ	0xFE2
  2957                           fsr1l	equ	0xFE1
  2958                           indf2	equ	0xFDF
  2959                           postinc2	equ	0xFDE
  2960                           postdec2	equ	0xFDD
  2961                           plusw2	equ	0xFDB
  2962                           fsr2h	equ	0xFDA
  2963                           fsr2l	equ	0xFD9
  2964                           status	equ	0xFD8
  2965                           
  2966 ;; *************** function _ScanWithRange *****************
  2967 ;; Defined at:
  2968 ;;		line 98 in file "Movement.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2971 ;;		 -> main@mL(9), 
  2972 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2973 ;;		 -> main@mR(9), 
  2974 ;;  loops           2   17[BANK0 ] int 
  2975 ;;  MoveTime        2   19[BANK0 ] PTR int 
  2976 ;;		 -> main@MoveTime(100), 
  2977 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  2978 ;;		 -> main@Move(1), 
  2979 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  2980 ;;		 -> main@MoveType(50), 
  2981 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  2982 ;;		 -> RFID_Read(1), 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  buf            40   32[BANK0 ] unsigned char [40]
  2985 ;;  SensorResult    4   84[BANK0 ] unsigned int [2]
  2986 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  2987 ;;  LeftFlag        2   81[BANK0 ] unsigned int 
  2988 ;;  DirectionFou    2   76[BANK0 ] const unsigned int 
  2989 ;;  i               2   74[BANK0 ] unsigned int 
  2990 ;;  n               2   72[BANK0 ] unsigned int 
  2991 ;;  TimeAboveThr    1   83[BANK0 ] unsigned char 
  2992 ;;  MiniLeftFlic    1   80[BANK0 ] const unsigned char 
  2993 ;;  LeftFlick       1   79[BANK0 ] const unsigned char 
  2994 ;;  MotorPower      1   78[BANK0 ] const unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;                  1    wreg      unsigned char 
  2997 ;; Registers used:
  2998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3004 ;;      Params:         0      14       0       0
  3005 ;;      Locals:         0      58       0       0
  3006 ;;      Temps:          0       5       0       0
  3007 ;;      Totals:         0      77       0       0
  3008 ;;Total ram usage:       77 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; Hardware stack levels required when called:    7
  3011 ;; This function calls:
  3012 ;;		_LCD_String
  3013 ;;		_SendLCD
  3014 ;;		_SetLine
  3015 ;;		_delay_tenth_s
  3016 ;;		_grabLeftIR
  3017 ;;		_grabRightIR
  3018 ;;		_sprintf
  3019 ;;		_stop
  3020 ;;		_turnLeft
  3021 ;;		_turnRight
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text9
  3028  000AF2                     __ptext9:
  3029                           	opt stack 0
  3030  000AF2                     _ScanWithRange:
  3031                           	opt stack 23
  3032                           
  3033                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3034                           
  3035                           ;incstack = 0
  3036  000AF2  C0F5  F0B4         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3037  000AF6  C0F6  F0B5         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3038  000AFA  C0F7  F0B6         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3039  000AFE  C0F8  F0B7         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3040                           
  3041                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3042  000B02  0E00               	movlw	0
  3043  000B04  0100               	movlb	0	; () banked
  3044  000B06  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3045  000B08  0E00               	movlw	0
  3046  000B0A  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3047                           
  3048                           ;Movement.c: 104: unsigned int RightFlag=0;
  3049  000B0C  0E00               	movlw	0
  3050  000B0E  0100               	movlb	0	; () banked
  3051  000B10  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3052  000B12  0E00               	movlw	0
  3053  000B14  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3054                           
  3055                           ;Movement.c: 105: char buf[40];
  3056                           ;Movement.c: 106: unsigned int i=0;
  3057  000B16  0E00               	movlw	0
  3058  000B18  0100               	movlb	0	; () banked
  3059  000B1A  6FAB               	movwf	(ScanWithRange@i+1)& (0+255),b
  3060  000B1C  0E00               	movlw	0
  3061  000B1E  6FAA               	movwf	ScanWithRange@i& (0+255),b
  3062                           
  3063                           ;Movement.c: 107: unsigned int n=0;
  3064  000B20  0E00               	movlw	0
  3065  000B22  0100               	movlb	0	; () banked
  3066  000B24  6FA9               	movwf	(ScanWithRange@n+1)& (0+255),b
  3067  000B26  0E00               	movlw	0
  3068  000B28  6FA8               	movwf	ScanWithRange@n& (0+255),b
  3069                           
  3070                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  3071  000B2A  0E00               	movlw	0
  3072  000B2C  0100               	movlb	0	; () banked
  3073  000B2E  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3074                           
  3075                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3076  000B30  0E03               	movlw	3
  3077  000B32  0100               	movlb	0	; () banked
  3078  000B34  6FAD               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3079  000B36  0EE8               	movlw	232
  3080  000B38  6FAC               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3081                           
  3082                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3083  000B3A  0E28               	movlw	40
  3084  000B3C  0100               	movlb	0	; () banked
  3085  000B3E  6FAE               	movwf	ScanWithRange@MotorPower& (0+255),b
  3086                           
  3087                           ;Movement.c: 114: const unsigned char LeftFlick=2;
  3088  000B40  0E02               	movlw	2
  3089  000B42  0100               	movlb	0	; () banked
  3090  000B44  6FAF               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3091                           
  3092                           ;Movement.c: 116: const unsigned char MiniLeftFlick=1;
  3093  000B46  0E01               	movlw	1
  3094  000B48  0100               	movlb	0	; () banked
  3095  000B4A  6FB0               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;Movement.c: 121: (MoveType[*Move]) = 2;
  3099  000B4C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3100  000B50  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3101  000B54  50DF               	movf	indf2,w,c
  3102  000B56  0100               	movlb	0	; () banked
  3103  000B58  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3104  000B5A  0100               	movlb	0	; () banked
  3105  000B5C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3106  000B5E  0D01               	mullw	1
  3107  000B60  50F3               	movf	prodl,w,c
  3108  000B62  0100               	movlb	0	; () banked
  3109  000B64  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3110  000B66  6ED9               	movwf	fsr2l,c
  3111  000B68  50F4               	movf	prodh,w,c
  3112  000B6A  0100               	movlb	0	; () banked
  3113  000B6C  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3114  000B6E  6EDA               	movwf	fsr2h,c
  3115  000B70  0E02               	movlw	2
  3116  000B72  6EDF               	movwf	indf2,c
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;Movement.c: 122: (MoveTime[*Move]) = LeftFlick;
  3120  000B74  0100               	movlb	0	; () banked
  3121  000B76  51AF               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3122  000B78  0100               	movlb	0	; () banked
  3123  000B7A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3124  000B7C  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3125  000B7E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3126  000B82  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3127  000B86  50DF               	movf	indf2,w,c
  3128  000B88  0100               	movlb	0	; () banked
  3129  000B8A  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3130  000B8C  0100               	movlb	0	; () banked
  3131  000B8E  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3132  000B90  0D02               	mullw	2
  3133  000B92  50F3               	movf	prodl,w,c
  3134  000B94  0100               	movlb	0	; () banked
  3135  000B96  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3136  000B98  6ED9               	movwf	fsr2l,c
  3137  000B9A  50F4               	movf	prodh,w,c
  3138  000B9C  0100               	movlb	0	; () banked
  3139  000B9E  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3140  000BA0  6EDA               	movwf	fsr2h,c
  3141  000BA2  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3142  000BA6  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;Movement.c: 123: *Move = *Move+1;
  3146  000BAA  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3147  000BAE  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3148  000BB2  50DF               	movf	indf2,w,c
  3149  000BB4  0100               	movlb	0	; () banked
  3150  000BB6  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3151  000BB8  0100               	movlb	0	; () banked
  3152  000BBA  297B               	incf	??_ScanWithRange& (0+255),w,b
  3153  000BBC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3154  000BC0  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3155  000BC4  6EDF               	movwf	indf2,c
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;Movement.c: 124: turnLeft(mL,mR, 100);
  3159  000BC6  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3160  000BCA  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3161  000BCE  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3162  000BD2  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3163  000BD6  0E64               	movlw	100
  3164  000BD8  0100               	movlb	0	; () banked
  3165  000BDA  6F6B               	movwf	turnLeft@power& (0+255),b
  3166  000BDC  EC04  F00E         	call	_turnLeft	;wreg free
  3167                           
  3168                           ;Movement.c: 125: delay_tenth_s(LeftFlick);
  3169  000BE0  0100               	movlb	0	; () banked
  3170  000BE2  51AF               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3171  000BE4  EC23  F00E         	call	_delay_tenth_s
  3172                           
  3173                           ;Movement.c: 126: stop(mL,mR);
  3174  000BE8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3175  000BEC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3176  000BF0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3177  000BF4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3178  000BF8  EC9E  F00B         	call	_stop	;wreg free
  3179                           
  3180                           ;Movement.c: 129: turnRight(mL,mR, MotorPower);
  3181  000BFC  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3182  000C00  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3183  000C04  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3184  000C08  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3185  000C0C  C0AE  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3186  000C10  ECE5  F00D         	call	_turnRight	;wreg free
  3187                           
  3188                           ;Movement.c: 132: TMR0L = 0;
  3189  000C14  0E00               	movlw	0
  3190  000C16  6ED6               	movwf	4054,c	;volatile
  3191                           
  3192                           ;Movement.c: 133: TMR0H = 0;
  3193  000C18  0E00               	movlw	0
  3194  000C1A  6ED7               	movwf	4055,c	;volatile
  3195                           
  3196                           ;Movement.c: 134: T0CONbits.TMR0ON=1;
  3197  000C1C  8ED5               	bsf	4053,7,c	;volatile
  3198                           
  3199                           ;Movement.c: 136: for (i=1; i<=loops; i++) {
  3200  000C1E  0E00               	movlw	0
  3201  000C20  0100               	movlb	0	; () banked
  3202  000C22  6FAB               	movwf	(ScanWithRange@i+1)& (0+255),b
  3203  000C24  0E01               	movlw	1
  3204  000C26  6FAA               	movwf	ScanWithRange@i& (0+255),b
  3205  000C28  D1CD               	goto	l3300
  3206  000C2A                     l3212:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;Movement.c: 139: SensorResult[0]=grabLeftIR();
  3210  000C2A  ECE8  F00C         	call	_grabLeftIR	;wreg free
  3211  000C2E  C024  F0B4         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3212  000C32  C025  F0B5         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3213                           
  3214                           ;Movement.c: 140: SensorResult[1]=grabRightIR();
  3215  000C36  ECAF  F00C         	call	_grabRightIR	;wreg free
  3216  000C3A  C024  F0B6         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3217  000C3E  C025  F0B7         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3218                           
  3219                           ;Movement.c: 144: CAP1BUFH=0;
  3220  000C42  0E00               	movlw	0
  3221  000C44  6E69               	movwf	3945,c	;volatile
  3222                           
  3223                           ;Movement.c: 145: CAP1BUFL=0;
  3224  000C46  0E00               	movlw	0
  3225  000C48  6E68               	movwf	3944,c	;volatile
  3226                           
  3227                           ;Movement.c: 146: CAP2BUFH=0;
  3228  000C4A  0E00               	movlw	0
  3229  000C4C  6E67               	movwf	3943,c	;volatile
  3230                           
  3231                           ;Movement.c: 147: CAP2BUFL=0;
  3232  000C4E  0E00               	movlw	0
  3233  000C50  6E66               	movwf	3942,c	;volatile
  3234                           
  3235                           ;Movement.c: 151: SendLCD(0b00000001,0);
  3236  000C52  0E00               	movlw	0
  3237  000C54  6E28               	movwf	SendLCD@type,c
  3238  000C56  0E01               	movlw	1
  3239  000C58  ECA7  F00E         	call	_SendLCD
  3240                           
  3241                           ;Movement.c: 152: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3242  000C5C  0E21               	movlw	33
  3243  000C5E                     u3097:
  3244  000C5E  2EE8               	decfsz	wreg,f,c
  3245  000C60  D7FE               	goto	u3097
  3246  000C62  F000               	nop	
  3247                           
  3248                           ;Movement.c: 153: SendLCD(0b00000010,0);
  3249  000C64  0E00               	movlw	0
  3250  000C66  6E28               	movwf	SendLCD@type,c
  3251  000C68  0E02               	movlw	2
  3252  000C6A  ECA7  F00E         	call	_SendLCD
  3253                           
  3254                           ;Movement.c: 154: _delay((unsigned long)((2)*(8000000/4000.0)));
  3255  000C6E  0E06               	movlw	6
  3256  000C70  0100               	movlb	0	; () banked
  3257  000C72  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3258  000C74  0E30               	movlw	48
  3259  000C76                     u3107:
  3260  000C76  2EE8               	decfsz	wreg,f,c
  3261  000C78  D7FE               	goto	u3107
  3262  000C7A  2F7B               	decfsz	??_ScanWithRange& (0+255),f,b
  3263  000C7C  D7FC               	goto	u3107
  3264  000C7E  D000               	nop2	
  3265                           
  3266                           ;Movement.c: 155: SetLine(1);
  3267  000C80  0E01               	movlw	1
  3268  000C82  EC8F  F00E         	call	_SetLine
  3269                           
  3270                           ;Movement.c: 156: LCD_String("     ScanIR");
  3271  000C86  0E2D               	movlw	low STR_1
  3272  000C88  6E2A               	movwf	LCD_String@string,c
  3273  000C8A  0E03               	movlw	high STR_1
  3274  000C8C  6E2B               	movwf	LCD_String@string+1,c
  3275  000C8E  EC21  F00D         	call	_LCD_String	;wreg free
  3276                           
  3277                           ;Movement.c: 157: SetLine(2);
  3278  000C92  0E02               	movlw	2
  3279  000C94  EC8F  F00E         	call	_SetLine
  3280                           
  3281                           ;Movement.c: 158: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3282  000C98  0E80               	movlw	low ScanWithRange@buf
  3283  000C9A  6E30               	movwf	sprintf@sp,c
  3284  000C9C  0E00               	movlw	high ScanWithRange@buf
  3285  000C9E  6E31               	movwf	sprintf@sp+1,c
  3286  000CA0  0E0C               	movlw	low (STR_6+1)
  3287  000CA2  6E32               	movwf	sprintf@f,c
  3288  000CA4  0E03               	movlw	high (STR_6+1)
  3289  000CA6  6E33               	movwf	sprintf@f+1,c
  3290  000CA8  C0B4  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3291  000CAC  C0B5  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3292  000CB0  C0B6  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3293  000CB4  C0B7  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3294  000CB8  EC40  F008         	call	_sprintf	;wreg free
  3295                           
  3296                           ;Movement.c: 159: LCD_String(buf);
  3297  000CBC  0E80               	movlw	low ScanWithRange@buf
  3298  000CBE  6E2A               	movwf	LCD_String@string,c
  3299  000CC0  0E00               	movlw	high ScanWithRange@buf
  3300  000CC2  6E2B               	movwf	LCD_String@string+1,c
  3301  000CC4  EC21  F00D         	call	_LCD_String	;wreg free
  3302                           
  3303                           ;Movement.c: 163: if (SensorResult[1]>DirectionFoundThreshold) {
  3304  000CC8  0100               	movlb	0	; () banked
  3305  000CCA  51B6               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3306  000CCC  0100               	movlb	0	; () banked
  3307  000CCE  5DAC               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3308  000CD0  0100               	movlb	0	; () banked
  3309  000CD2  51B7               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3310  000CD4  0100               	movlb	0	; () banked
  3311  000CD6  59AD               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3312  000CD8  B0D8               	btfsc	status,0,c
  3313  000CDA  D00E               	goto	l221
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;Movement.c: 164: RightFlag= (TMR0H<<8)+TMR0L;
  3317  000CDC  50D7               	movf	4055,w,c	;volatile
  3318  000CDE  0100               	movlb	0	; () banked
  3319  000CE0  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3320  000CE2  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3321  000CE4  50D6               	movf	4054,w,c	;volatile
  3322  000CE6  0100               	movlb	0	; () banked
  3323  000CE8  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3324  000CEA  0100               	movlb	0	; () banked
  3325  000CEC  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3326  000CEE  0E00               	movlw	0
  3327  000CF0  0100               	movlb	0	; () banked
  3328  000CF2  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3329  000CF4  0100               	movlb	0	; () banked
  3330  000CF6  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3331  000CF8                     l221:
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;Movement.c: 165: }
  3335                           ;Movement.c: 167: if (SensorResult[0]>DirectionFoundThreshold) {
  3336  000CF8  0100               	movlb	0	; () banked
  3337  000CFA  51B4               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3338  000CFC  0100               	movlb	0	; () banked
  3339  000CFE  5DAC               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3340  000D00  0100               	movlb	0	; () banked
  3341  000D02  51B5               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3342  000D04  0100               	movlb	0	; () banked
  3343  000D06  59AD               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3344  000D08  B0D8               	btfsc	status,0,c
  3345  000D0A  D00E               	goto	l222
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;Movement.c: 168: LeftFlag=(TMR0H<<8)+TMR0L;
  3349  000D0C  50D7               	movf	4055,w,c	;volatile
  3350  000D0E  0100               	movlb	0	; () banked
  3351  000D10  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3352  000D12  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3353  000D14  50D6               	movf	4054,w,c	;volatile
  3354  000D16  0100               	movlb	0	; () banked
  3355  000D18  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3356  000D1A  0100               	movlb	0	; () banked
  3357  000D1C  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3358  000D1E  0E00               	movlw	0
  3359  000D20  0100               	movlb	0	; () banked
  3360  000D22  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3361  000D24  0100               	movlb	0	; () banked
  3362  000D26  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3363  000D28                     l222:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;Movement.c: 169: }
  3367                           ;Movement.c: 176: if (LeftFlag>0) {
  3368  000D28  0100               	movlb	0	; () banked
  3369  000D2A  51B1               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3370  000D2C  0100               	movlb	0	; () banked
  3371  000D2E  11B2               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3372  000D30  B4D8               	btfsc	status,2,c
  3373  000D32  D13C               	goto	l3292
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;Movement.c: 179: if (RightFlag>0) {
  3377  000D34  0100               	movlb	0	; () banked
  3378  000D36  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3379  000D38  0100               	movlb	0	; () banked
  3380  000D3A  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3381  000D3C  B4D8               	btfsc	status,2,c
  3382  000D3E  D099               	goto	l224
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;Movement.c: 180: TimeAboveThreshold = LeftFlag - RightFlag;
  3386  000D40  0100               	movlb	0	; () banked
  3387  000D42  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3388  000D44  0800               	sublw	0
  3389  000D46  0100               	movlb	0	; () banked
  3390  000D48  25B1               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3391  000D4A  0100               	movlb	0	; () banked
  3392  000D4C  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;Movement.c: 181: TMR0L = 0;
  3396  000D4E  0E00               	movlw	0
  3397  000D50  6ED6               	movwf	4054,c	;volatile
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;Movement.c: 182: TMR0H = 0;
  3401  000D52  0E00               	movlw	0
  3402  000D54  6ED7               	movwf	4055,c	;volatile
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;Movement.c: 183: stop(mL,mR);
  3406  000D56  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3407  000D5A  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3408  000D5E  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3409  000D62  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3410  000D66  EC9E  F00B         	call	_stop	;wreg free
  3411                           
  3412                           ;Movement.c: 184: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3413  000D6A  D00C               	goto	l3254
  3414  000D6C                     l3252:
  3415                           
  3416                           ;Movement.c: 185: turnLeft(mL,mR, MotorPower);
  3417  000D6C  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3418  000D70  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3419  000D74  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3420  000D78  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3421  000D7C  C0AE  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3422  000D80  EC04  F00E         	call	_turnLeft	;wreg free
  3423  000D84                     l3254:
  3424  000D84  0100               	movlb	0	; () banked
  3425  000D86  90D8               	bcf	status,0,c
  3426  000D88  31B3               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3427  000D8A  0100               	movlb	0	; () banked
  3428  000D8C  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3429  000D8E  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3430  000D90  50D6               	movf	4054,w,c	;volatile
  3431  000D92  CFD7 F07D          	movff	4055,??_ScanWithRange+2	;volatile
  3432  000D96  0100               	movlb	0	; () banked
  3433  000D98  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3434  000D9A  C07D  F07E         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3435  000D9E  0100               	movlb	0	; () banked
  3436  000DA0  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3437  000DA2  0100               	movlb	0	; () banked
  3438  000DA4  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3439  000DA6  0E00               	movlw	0
  3440  000DA8  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3441  000DAA  0100               	movlb	0	; () banked
  3442  000DAC  517B               	movf	??_ScanWithRange& (0+255),w,b
  3443  000DAE  0100               	movlb	0	; () banked
  3444  000DB0  5D7D               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3445  000DB2  0100               	movlb	0	; () banked
  3446  000DB4  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3447  000DB6  0A80               	xorlw	128
  3448  000DB8  0100               	movlb	0	; () banked
  3449  000DBA  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3450  000DBC  0100               	movlb	0	; () banked
  3451  000DBE  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3452  000DC0  0A80               	xorlw	128
  3453  000DC2  0100               	movlb	0	; () banked
  3454  000DC4  597F               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3455  000DC6  A0D8               	btfss	status,0,c
  3456  000DC8  D7D1               	goto	l3252
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;Movement.c: 186: }
  3460                           ;Movement.c: 187: T0CONbits.TMR0ON=0;
  3461  000DCA  9ED5               	bcf	4053,7,c	;volatile
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;Movement.c: 188: stop(mL,mR);
  3465  000DCC  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3466  000DD0  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3467  000DD4  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3468  000DD8  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3469  000DDC  EC9E  F00B         	call	_stop	;wreg free
  3470                           
  3471                           ;Movement.c: 190: (MoveType[*Move]) = 1;
  3472  000DE0  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3473  000DE4  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3474  000DE8  50DF               	movf	indf2,w,c
  3475  000DEA  0100               	movlb	0	; () banked
  3476  000DEC  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3477  000DEE  0100               	movlb	0	; () banked
  3478  000DF0  517B               	movf	??_ScanWithRange& (0+255),w,b
  3479  000DF2  0D01               	mullw	1
  3480  000DF4  50F3               	movf	prodl,w,c
  3481  000DF6  0100               	movlb	0	; () banked
  3482  000DF8  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3483  000DFA  6ED9               	movwf	fsr2l,c
  3484  000DFC  50F4               	movf	prodh,w,c
  3485  000DFE  0100               	movlb	0	; () banked
  3486  000E00  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3487  000E02  6EDA               	movwf	fsr2h,c
  3488  000E04  0E01               	movlw	1
  3489  000E06  6EDF               	movwf	indf2,c
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;Movement.c: 191: (MoveTime[*Move]) = RightFlag + (TimeAboveThreshold>>1);
  3493  000E08  C0B3  F07B         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3494  000E0C  0100               	movlb	0	; () banked
  3495  000E0E  90D8               	bcf	status,0,c
  3496  000E10  337B               	rrcf	??_ScanWithRange& (0+255),f,b
  3497  000E12  0100               	movlb	0	; () banked
  3498  000E14  517B               	movf	??_ScanWithRange& (0+255),w,b
  3499  000E16  0100               	movlb	0	; () banked
  3500  000E18  25B8               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3501  000E1A  0100               	movlb	0	; () banked
  3502  000E1C  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3503  000E1E  0E00               	movlw	0
  3504  000E20  0100               	movlb	0	; () banked
  3505  000E22  21B9               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3506  000E24  0100               	movlb	0	; () banked
  3507  000E26  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3508  000E28  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3509  000E2C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3510  000E30  50DF               	movf	indf2,w,c
  3511  000E32  0100               	movlb	0	; () banked
  3512  000E34  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3513  000E36  0100               	movlb	0	; () banked
  3514  000E38  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3515  000E3A  0D02               	mullw	2
  3516  000E3C  50F3               	movf	prodl,w,c
  3517  000E3E  0100               	movlb	0	; () banked
  3518  000E40  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3519  000E42  6ED9               	movwf	fsr2l,c
  3520  000E44  50F4               	movf	prodh,w,c
  3521  000E46  0100               	movlb	0	; () banked
  3522  000E48  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3523  000E4A  6EDA               	movwf	fsr2h,c
  3524  000E4C  C07C  FFDE         	movff	??_ScanWithRange+1,postinc2
  3525  000E50  C07D  FFDD         	movff	??_ScanWithRange+2,postdec2
  3526  000E54                     l3262:
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;Movement.c: 192: *Move = *Move+1;
  3530  000E54  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3531  000E58  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3532  000E5C  50DF               	movf	indf2,w,c
  3533  000E5E  0100               	movlb	0	; () banked
  3534  000E60  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3535  000E62  0100               	movlb	0	; () banked
  3536  000E64  297B               	incf	??_ScanWithRange& (0+255),w,b
  3537  000E66  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3538  000E6A  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3539  000E6E  6EDF               	movwf	indf2,c
  3540  000E70  D09B               	goto	l3288
  3541  000E72                     l224:
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;Movement.c: 196: T0CONbits.TMR0ON=0;
  3545  000E72  9ED5               	bcf	4053,7,c	;volatile
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;Movement.c: 200: (MoveType[*Move]) = 1;
  3549  000E74  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3550  000E78  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3551  000E7C  50DF               	movf	indf2,w,c
  3552  000E7E  0100               	movlb	0	; () banked
  3553  000E80  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3554  000E82  0100               	movlb	0	; () banked
  3555  000E84  517B               	movf	??_ScanWithRange& (0+255),w,b
  3556  000E86  0D01               	mullw	1
  3557  000E88  50F3               	movf	prodl,w,c
  3558  000E8A  0100               	movlb	0	; () banked
  3559  000E8C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3560  000E8E  6ED9               	movwf	fsr2l,c
  3561  000E90  50F4               	movf	prodh,w,c
  3562  000E92  0100               	movlb	0	; () banked
  3563  000E94  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3564  000E96  6EDA               	movwf	fsr2h,c
  3565  000E98  0E01               	movlw	1
  3566  000E9A  6EDF               	movwf	indf2,c
  3567                           
  3568                           ;Movement.c: 201: (MoveTime[*Move]) = ((TMR0H<<8)+TMR0L);
  3569  000E9C  50D6               	movf	4054,w,c	;volatile
  3570  000E9E  CFD7 F07B          	movff	4055,??_ScanWithRange	;volatile
  3571  000EA2  0100               	movlb	0	; () banked
  3572  000EA4  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3573  000EA6  C07B  F07C         	movff	??_ScanWithRange,??_ScanWithRange+1
  3574  000EAA  0100               	movlb	0	; () banked
  3575  000EAC  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3576  000EAE  0100               	movlb	0	; () banked
  3577  000EB0  277B               	addwf	??_ScanWithRange& (0+255),f,b
  3578  000EB2  0E00               	movlw	0
  3579  000EB4  237C               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3580  000EB6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3581  000EBA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3582  000EBE  50DF               	movf	indf2,w,c
  3583  000EC0  0100               	movlb	0	; () banked
  3584  000EC2  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3585  000EC4  0100               	movlb	0	; () banked
  3586  000EC6  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3587  000EC8  0D02               	mullw	2
  3588  000ECA  50F3               	movf	prodl,w,c
  3589  000ECC  0100               	movlb	0	; () banked
  3590  000ECE  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3591  000ED0  6ED9               	movwf	fsr2l,c
  3592  000ED2  50F4               	movf	prodh,w,c
  3593  000ED4  0100               	movlb	0	; () banked
  3594  000ED6  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3595  000ED8  6EDA               	movwf	fsr2h,c
  3596  000EDA  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3597  000EDE  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;Movement.c: 202: *Move = *Move+1;
  3601  000EE2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3602  000EE6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3603  000EEA  50DF               	movf	indf2,w,c
  3604  000EEC  0100               	movlb	0	; () banked
  3605  000EEE  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3606  000EF0  0100               	movlb	0	; () banked
  3607  000EF2  297B               	incf	??_ScanWithRange& (0+255),w,b
  3608  000EF4  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3609  000EF8  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3610  000EFC  6EDF               	movwf	indf2,c
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;Movement.c: 203: stop(mL,mR);
  3614  000EFE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3615  000F02  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3616  000F06  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3617  000F0A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3618  000F0E  EC9E  F00B         	call	_stop	;wreg free
  3619                           
  3620                           ;Movement.c: 206: turnLeft(mL,mR,100);
  3621  000F12  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3622  000F16  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3623  000F1A  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3624  000F1E  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3625  000F22  0E64               	movlw	100
  3626  000F24  0100               	movlb	0	; () banked
  3627  000F26  6F6B               	movwf	turnLeft@power& (0+255),b
  3628  000F28  EC04  F00E         	call	_turnLeft	;wreg free
  3629                           
  3630                           ;Movement.c: 207: delay_tenth_s(MiniLeftFlick);
  3631  000F2C  0100               	movlb	0	; () banked
  3632  000F2E  51B0               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3633  000F30  EC23  F00E         	call	_delay_tenth_s
  3634                           
  3635                           ;Movement.c: 208: stop(mL,mR);
  3636  000F34  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3637  000F38  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3638  000F3C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3639  000F40  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3640  000F44  EC9E  F00B         	call	_stop	;wreg free
  3641                           
  3642                           ;Movement.c: 209: (MoveType[*Move]) = 2;
  3643  000F48  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3644  000F4C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3645  000F50  50DF               	movf	indf2,w,c
  3646  000F52  0100               	movlb	0	; () banked
  3647  000F54  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3648  000F56  0100               	movlb	0	; () banked
  3649  000F58  517B               	movf	??_ScanWithRange& (0+255),w,b
  3650  000F5A  0D01               	mullw	1
  3651  000F5C  50F3               	movf	prodl,w,c
  3652  000F5E  0100               	movlb	0	; () banked
  3653  000F60  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3654  000F62  6ED9               	movwf	fsr2l,c
  3655  000F64  50F4               	movf	prodh,w,c
  3656  000F66  0100               	movlb	0	; () banked
  3657  000F68  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3658  000F6A  6EDA               	movwf	fsr2h,c
  3659  000F6C  0E02               	movlw	2
  3660  000F6E  6EDF               	movwf	indf2,c
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;Movement.c: 210: (MoveTime[*Move]) = MiniLeftFlick;
  3664  000F70  0100               	movlb	0	; () banked
  3665  000F72  51B0               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3666  000F74  0100               	movlb	0	; () banked
  3667  000F76  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3668  000F78  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3669  000F7A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3670  000F7E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3671  000F82  50DF               	movf	indf2,w,c
  3672  000F84  0100               	movlb	0	; () banked
  3673  000F86  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3674  000F88  0100               	movlb	0	; () banked
  3675  000F8A  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3676  000F8C  0D02               	mullw	2
  3677  000F8E  50F3               	movf	prodl,w,c
  3678  000F90  0100               	movlb	0	; () banked
  3679  000F92  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3680  000F94  6ED9               	movwf	fsr2l,c
  3681  000F96  50F4               	movf	prodh,w,c
  3682  000F98  0100               	movlb	0	; () banked
  3683  000F9A  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3684  000F9C  6EDA               	movwf	fsr2h,c
  3685  000F9E  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3686  000FA2  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3687  000FA6  D756               	goto	l3262
  3688  000FA8                     l3288:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;Movement.c: 214: return 2;
  3692  000FA8  0E02               	movlw	2
  3693                           
  3694                           ; BSR set to: 0
  3695  000FAA  0012               	return	
  3696  000FAC                     l3292:
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;Movement.c: 215: }
  3700                           ;Movement.c: 216: }
  3701                           ;Movement.c: 218: if (*RFID_Read==1) {
  3702  000FAC  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3703  000FB0  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3704  000FB4  04DE               	decf	postinc2,w,c
  3705  000FB6  A4D8               	btfss	status,2,c
  3706  000FB8  D002               	goto	l3298
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;Movement.c: 219: return 2;
  3710  000FBA  0E02               	movlw	2
  3711                           
  3712                           ; BSR set to: 0
  3713  000FBC  0012               	return	
  3714  000FBE                     l3298:
  3715                           
  3716                           ; BSR set to: 0
  3717  000FBE  0100               	movlb	0	; () banked
  3718  000FC0  4BAA               	infsnz	ScanWithRange@i& (0+255),f,b
  3719  000FC2  2BAB               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3720  000FC4                     l3300:
  3721                           
  3722                           ; BSR set to: 0
  3723  000FC4  0100               	movlb	0	; () banked
  3724  000FC6  51AA               	movf	ScanWithRange@i& (0+255),w,b
  3725  000FC8  0100               	movlb	0	; () banked
  3726  000FCA  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3727  000FCC  0100               	movlb	0	; () banked
  3728  000FCE  51AB               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3729  000FD0  0100               	movlb	0	; () banked
  3730  000FD2  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3731  000FD4  B0D8               	btfsc	status,0,c
  3732  000FD6  D629               	goto	l3212
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;Movement.c: 220: }
  3736                           ;Movement.c: 221: }
  3737                           ;Movement.c: 224: (MoveType[*Move]) = 2;
  3738                           
  3739                           ; BSR set to: 0
  3740  000FD8  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3741  000FDC  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3742  000FE0  50DF               	movf	indf2,w,c
  3743  000FE2  0100               	movlb	0	; () banked
  3744  000FE4  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3745  000FE6  0100               	movlb	0	; () banked
  3746  000FE8  517B               	movf	??_ScanWithRange& (0+255),w,b
  3747  000FEA  0D01               	mullw	1
  3748  000FEC  50F3               	movf	prodl,w,c
  3749  000FEE  0100               	movlb	0	; () banked
  3750  000FF0  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3751  000FF2  6ED9               	movwf	fsr2l,c
  3752  000FF4  50F4               	movf	prodh,w,c
  3753  000FF6  0100               	movlb	0	; () banked
  3754  000FF8  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3755  000FFA  6EDA               	movwf	fsr2h,c
  3756  000FFC  0E02               	movlw	2
  3757  000FFE  6EDF               	movwf	indf2,c
  3758                           
  3759                           ;Movement.c: 225: (MoveTime[*Move]) = -2;
  3760  001000  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3761  001004  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3762  001008  50DF               	movf	indf2,w,c
  3763  00100A  0100               	movlb	0	; () banked
  3764  00100C  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3765  00100E  0100               	movlb	0	; () banked
  3766  001010  517B               	movf	??_ScanWithRange& (0+255),w,b
  3767  001012  0D02               	mullw	2
  3768  001014  50F3               	movf	prodl,w,c
  3769  001016  0100               	movlb	0	; () banked
  3770  001018  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3771  00101A  6ED9               	movwf	fsr2l,c
  3772  00101C  50F4               	movf	prodh,w,c
  3773  00101E  0100               	movlb	0	; () banked
  3774  001020  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3775  001022  6EDA               	movwf	fsr2h,c
  3776  001024  0EFE               	movlw	254
  3777  001026  6EDE               	movwf	postinc2,c
  3778  001028  0EFF               	movlw	255
  3779  00102A  6EDD               	movwf	postdec2,c
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;Movement.c: 226: *Move = *Move+1;
  3783  00102C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3784  001030  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3785  001034  50DF               	movf	indf2,w,c
  3786  001036  0100               	movlb	0	; () banked
  3787  001038  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3788  00103A  0100               	movlb	0	; () banked
  3789  00103C  297B               	incf	??_ScanWithRange& (0+255),w,b
  3790  00103E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3791  001042  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3792  001046  6EDF               	movwf	indf2,c
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;Movement.c: 227: turnRight(mL,mR, 100);
  3796  001048  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3797  00104C  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3798  001050  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3799  001054  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3800  001058  0E64               	movlw	100
  3801  00105A  0100               	movlb	0	; () banked
  3802  00105C  6F6B               	movwf	turnRight@power& (0+255),b
  3803  00105E  ECE5  F00D         	call	_turnRight	;wreg free
  3804                           
  3805                           ;Movement.c: 228: delay_tenth_s(2);
  3806  001062  0E02               	movlw	2
  3807  001064  EC23  F00E         	call	_delay_tenth_s
  3808                           
  3809                           ;Movement.c: 229: stop(mL,mR);
  3810  001068  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3811  00106C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3812  001070  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3813  001074  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3814  001078  EC9E  F00B         	call	_stop	;wreg free
  3815                           
  3816                           ;Movement.c: 230: return -1;
  3817  00107C  0EFF               	movlw	255
  3818  00107E  0012               	return	
  3819  001080                     __end_of_ScanWithRange:
  3820                           	opt stack 0
  3821                           tblptru	equ	0xFF8
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           postinc0	equ	0xFEE
  3826                           wreg	equ	0xFE8
  3827                           indf1	equ	0xFE7
  3828                           plusw1	equ	0xFE3
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           indf2	equ	0xFDF
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           plusw2	equ	0xFDB
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _turnRight *****************
  3840 ;; Defined at:
  3841 ;;		line 98 in file "dc_motor.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3844 ;;		 -> main@mL(9), 
  3845 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3846 ;;		 -> main@mR(9), 
  3847 ;;  power           1   11[BANK0 ] unsigned char 
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;		None               void
  3852 ;; Registers used:
  3853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3859 ;;      Params:         0       5       0       0
  3860 ;;      Locals:         0       0       0       0
  3861 ;;      Temps:          0       0       0       0
  3862 ;;      Totals:         0       5       0       0
  3863 ;;Total ram usage:        5 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    6
  3866 ;; This function calls:
  3867 ;;		_fullSpeedAhead
  3868 ;; This function is called by:
  3869 ;;		_ScanWithRange
  3870 ;;		_main
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text10
  3875  001BCA                     __ptext10:
  3876                           	opt stack 0
  3877  001BCA                     _turnRight:
  3878                           	opt stack 24
  3879                           
  3880                           ;dc_motor.c: 102: mL->direction=0;
  3881                           
  3882                           ;incstack = 0
  3883  001BCA  0100               	movlb	0	; () banked
  3884  001BCC  EE20 F001          	lfsr	2,1
  3885  001BD0  5167               	movf	turnRight@mL& (0+255),w,b
  3886  001BD2  26D9               	addwf	fsr2l,f,c
  3887  001BD4  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3888  001BD6  22DA               	addwfc	fsr2h,f,c
  3889  001BD8  0E00               	movlw	0
  3890  001BDA  6EDF               	movwf	indf2,c
  3891                           
  3892                           ;dc_motor.c: 103: mR->direction=1;
  3893  001BDC  0100               	movlb	0	; () banked
  3894  001BDE  EE20 F001          	lfsr	2,1
  3895  001BE2  5169               	movf	turnRight@mR& (0+255),w,b
  3896  001BE4  26D9               	addwf	fsr2l,f,c
  3897  001BE6  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3898  001BE8  22DA               	addwfc	fsr2h,f,c
  3899  001BEA  0E01               	movlw	1
  3900  001BEC  6EDF               	movwf	indf2,c
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3904  001BEE  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3905  001BF2  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3906  001BF6  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3907  001BFA  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3908  001BFE  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3909  001C02  EC6F  F00C         	call	_fullSpeedAhead	;wreg free
  3910  001C06  0012               	return		;funcret
  3911  001C08                     __end_of_turnRight:
  3912                           	opt stack 0
  3913                           tblptru	equ	0xFF8
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           intcon	equ	0xFF2
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           indf1	equ	0xFE7
  3920                           plusw1	equ	0xFE3
  3921                           fsr1h	equ	0xFE2
  3922                           fsr1l	equ	0xFE1
  3923                           indf2	equ	0xFDF
  3924                           postinc2	equ	0xFDE
  3925                           postdec2	equ	0xFDD
  3926                           plusw2	equ	0xFDB
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function _turnLeft *****************
  3932 ;; Defined at:
  3933 ;;		line 87 in file "dc_motor.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3936 ;;		 -> main@mL(9), 
  3937 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3938 ;;		 -> main@mR(9), 
  3939 ;;  power           1   11[BANK0 ] unsigned char 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;		None
  3942 ;; Return value:  Size  Location     Type
  3943 ;;		None               void
  3944 ;; Registers used:
  3945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3951 ;;      Params:         0       5       0       0
  3952 ;;      Locals:         0       0       0       0
  3953 ;;      Temps:          0       0       0       0
  3954 ;;      Totals:         0       5       0       0
  3955 ;;Total ram usage:        5 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:    6
  3958 ;; This function calls:
  3959 ;;		_fullSpeedAhead
  3960 ;; This function is called by:
  3961 ;;		_ScanWithRange
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text11
  3967  001C08                     __ptext11:
  3968                           	opt stack 0
  3969  001C08                     _turnLeft:
  3970                           	opt stack 24
  3971                           
  3972                           ;dc_motor.c: 91: mL->direction=1;
  3973                           
  3974                           ;incstack = 0
  3975  001C08  0100               	movlb	0	; () banked
  3976  001C0A  EE20 F001          	lfsr	2,1
  3977  001C0E  5167               	movf	turnLeft@mL& (0+255),w,b
  3978  001C10  26D9               	addwf	fsr2l,f,c
  3979  001C12  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3980  001C14  22DA               	addwfc	fsr2h,f,c
  3981  001C16  0E01               	movlw	1
  3982  001C18  6EDF               	movwf	indf2,c
  3983                           
  3984                           ;dc_motor.c: 92: mR->direction=0;
  3985  001C1A  0100               	movlb	0	; () banked
  3986  001C1C  EE20 F001          	lfsr	2,1
  3987  001C20  5169               	movf	turnLeft@mR& (0+255),w,b
  3988  001C22  26D9               	addwf	fsr2l,f,c
  3989  001C24  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3990  001C26  22DA               	addwfc	fsr2h,f,c
  3991  001C28  0E00               	movlw	0
  3992  001C2A  6EDF               	movwf	indf2,c
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3996  001C2C  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3997  001C30  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3998  001C34  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3999  001C38  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4000  001C3C  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  4001  001C40  EC6F  F00C         	call	_fullSpeedAhead	;wreg free
  4002  001C44  0012               	return		;funcret
  4003  001C46                     __end_of_turnLeft:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           prodh	equ	0xFF4
  4007                           prodl	equ	0xFF3
  4008                           intcon	equ	0xFF2
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           indf1	equ	0xFE7
  4012                           plusw1	equ	0xFE3
  4013                           fsr1h	equ	0xFE2
  4014                           fsr1l	equ	0xFE1
  4015                           indf2	equ	0xFDF
  4016                           postinc2	equ	0xFDE
  4017                           postdec2	equ	0xFDD
  4018                           plusw2	equ	0xFDB
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function _fullSpeedAhead *****************
  4024 ;; Defined at:
  4025 ;;		line 108 in file "dc_motor.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4028 ;;		 -> main@mL(9), 
  4029 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4030 ;;		 -> main@mR(9), 
  4031 ;;  power           1    6[BANK0 ] unsigned char 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;		None               void
  4036 ;; Registers used:
  4037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4043 ;;      Params:         0       5       0       0
  4044 ;;      Locals:         0       0       0       0
  4045 ;;      Temps:          1       0       0       0
  4046 ;;      Totals:         1       5       0       0
  4047 ;;Total ram usage:        6 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    5
  4050 ;; This function calls:
  4051 ;;		_setMotorPWM
  4052 ;; This function is called by:
  4053 ;;		_turnLeft
  4054 ;;		_turnRight
  4055 ;;		_fullSpeedBack
  4056 ;;		_main
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text12
  4061  0018DE                     __ptext12:
  4062                           	opt stack 0
  4063  0018DE                     _fullSpeedAhead:
  4064                           	opt stack 24
  4065                           
  4066                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  4067                           
  4068                           ;incstack = 0
  4069  0018DE  D02C               	goto	l65
  4070  0018E0                     l2980:
  4071                           
  4072                           ;dc_motor.c: 112: if(mL->power<power){
  4073  0018E0  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4074  0018E4  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4075  0018E8  0100               	movlb	0	; () banked
  4076  0018EA  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4077  0018EC  5CDE               	subwf	postinc2,w,c
  4078  0018EE  B0D8               	btfsc	status,0,c
  4079  0018F0  D005               	goto	l2984
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;dc_motor.c: 113: mL->power++;
  4083  0018F2  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4084  0018F6  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4085  0018FA  2ADF               	incf	indf2,f,c
  4086  0018FC                     l2984:
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;dc_motor.c: 114: }
  4090                           ;dc_motor.c: 115: if(mR->power<power){
  4091  0018FC  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4092  001900  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4093  001904  0100               	movlb	0	; () banked
  4094  001906  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4095  001908  5CDE               	subwf	postinc2,w,c
  4096  00190A  B0D8               	btfsc	status,0,c
  4097  00190C  D005               	goto	l2988
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;dc_motor.c: 116: mR->power++;
  4101  00190E  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4102  001912  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4103  001916  2ADF               	incf	indf2,f,c
  4104  001918                     l2988:
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;dc_motor.c: 117: }
  4108                           ;dc_motor.c: 118: setMotorPWM(mL);
  4109  001918  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4110  00191C  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4111  001920  ECC3  F009         	call	_setMotorPWM	;wreg free
  4112                           
  4113                           ;dc_motor.c: 119: setMotorPWM(mR);
  4114  001924  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4115  001928  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4116  00192C  ECC3  F009         	call	_setMotorPWM	;wreg free
  4117                           
  4118                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4119  001930  0E21               	movlw	33
  4120  001932                     u3117:
  4121  001932  2EE8               	decfsz	wreg,f,c
  4122  001934  D7FE               	goto	u3117
  4123  001936  F000               	nop	
  4124  001938                     l65:
  4125  001938  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4126  00193C  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4127  001940  0100               	movlb	0	; () banked
  4128  001942  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4129  001944  5CDE               	subwf	postinc2,w,c
  4130  001946  A0D8               	btfss	status,0,c
  4131  001948  D7CB               	goto	l2980
  4132                           
  4133                           ; BSR set to: 0
  4134  00194A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4135  00194E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4136  001952  0100               	movlb	0	; () banked
  4137  001954  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4138  001956  5CDE               	subwf	postinc2,w,c
  4139  001958  B0D8               	btfsc	status,0,c
  4140  00195A  0012               	return	
  4141  00195C  D7C1               	goto	l2980
  4142  00195E                     __end_of_fullSpeedAhead:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           prodh	equ	0xFF4
  4146                           prodl	equ	0xFF3
  4147                           intcon	equ	0xFF2
  4148                           postinc0	equ	0xFEE
  4149                           wreg	equ	0xFE8
  4150                           indf1	equ	0xFE7
  4151                           plusw1	equ	0xFE3
  4152                           fsr1h	equ	0xFE2
  4153                           fsr1l	equ	0xFE1
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           plusw2	equ	0xFDB
  4158                           fsr2h	equ	0xFDA
  4159                           fsr2l	equ	0xFD9
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function _delay_tenth_s *****************
  4163 ;; Defined at:
  4164 ;;		line 32 in file "Movement.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  tenth_second    1    wreg     unsigned char 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4169 ;;  i               2   37[COMRAM] unsigned int 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;		None               void
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4179 ;;      Params:         0       0       0       0
  4180 ;;      Locals:         3       0       0       0
  4181 ;;      Temps:          1       0       0       0
  4182 ;;      Totals:         4       0       0       0
  4183 ;;Total ram usage:        4 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    3
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_ScanWithRange
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text13
  4195  001C46                     __ptext13:
  4196                           	opt stack 0
  4197  001C46                     _delay_tenth_s:
  4198                           	opt stack 27
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;incstack = 0
  4202                           ;delay_tenth_s@tenth_seconds stored from wreg
  4203  001C46  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4204                           
  4205                           ;Movement.c: 33: unsigned int i=0;
  4206  001C48  0E00               	movlw	0
  4207  001C4A  6E27               	movwf	delay_tenth_s@i+1,c
  4208  001C4C  0E00               	movlw	0
  4209  001C4E  6E26               	movwf	delay_tenth_s@i,c
  4210                           
  4211                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4212  001C50  0E00               	movlw	0
  4213  001C52  6E27               	movwf	delay_tenth_s@i+1,c
  4214  001C54  0E01               	movlw	1
  4215  001C56  6E26               	movwf	delay_tenth_s@i,c
  4216  001C58  D009               	goto	l2262
  4217  001C5A                     l2258:
  4218                           
  4219                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4220  001C5A  0E82               	movlw	130
  4221  001C5C  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4222  001C5E  0EDE               	movlw	222
  4223  001C60                     u3127:
  4224  001C60  2EE8               	decfsz	wreg,f,c
  4225  001C62  D7FE               	goto	u3127
  4226  001C64  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4227  001C66  D7FC               	goto	u3127
  4228  001C68  4A26               	infsnz	delay_tenth_s@i,f,c
  4229  001C6A  2A27               	incf	delay_tenth_s@i+1,f,c
  4230  001C6C                     l2262:
  4231  001C6C  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4232  001C6E  0D02               	mullw	2
  4233  001C70  5026               	movf	delay_tenth_s@i,w,c
  4234  001C72  5CF3               	subwf	prodl,w,c
  4235  001C74  5027               	movf	delay_tenth_s@i+1,w,c
  4236  001C76  58F4               	subwfb	prodh,w,c
  4237  001C78  A0D8               	btfss	status,0,c
  4238  001C7A  0012               	return	
  4239  001C7C  D7EE               	goto	l2258
  4240  001C7E                     __end_of_delay_tenth_s:
  4241                           	opt stack 0
  4242                           tblptru	equ	0xFF8
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon	equ	0xFF2
  4246                           postinc0	equ	0xFEE
  4247                           wreg	equ	0xFE8
  4248                           indf1	equ	0xFE7
  4249                           plusw1	equ	0xFE3
  4250                           fsr1h	equ	0xFE2
  4251                           fsr1l	equ	0xFE1
  4252                           indf2	equ	0xFDF
  4253                           postinc2	equ	0xFDE
  4254                           postdec2	equ	0xFDD
  4255                           plusw2	equ	0xFDB
  4256                           fsr2h	equ	0xFDA
  4257                           fsr2l	equ	0xFD9
  4258                           status	equ	0xFD8
  4259                           
  4260 ;; *************** function _ScanIR *****************
  4261 ;; Defined at:
  4262 ;;		line 44 in file "Movement.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4265 ;;		 -> main@mL(9), 
  4266 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4267 ;;		 -> main@mR(9), 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4270 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4271 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      unsigned char 
  4274 ;; Registers used:
  4275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4281 ;;      Params:         0       4       0       0
  4282 ;;      Locals:         0      46       0       0
  4283 ;;      Temps:          1       0       0       0
  4284 ;;      Totals:         1      50       0       0
  4285 ;;Total ram usage:       51 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    7
  4288 ;; This function calls:
  4289 ;;		_LCD_String
  4290 ;;		_SendLCD
  4291 ;;		_SetLine
  4292 ;;		_grabLeftIR
  4293 ;;		_grabRightIR
  4294 ;;		_sprintf
  4295 ;;		_stop
  4296 ;; This function is called by:
  4297 ;;		_main
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text14
  4302  0014C0                     __ptext14:
  4303                           	opt stack 0
  4304  0014C0                     _ScanIR:
  4305                           	opt stack 23
  4306                           
  4307                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4308                           
  4309                           ;incstack = 0
  4310  0014C0  C0F1  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4311  0014C4  C0F2  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4312  0014C8  C0F3  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4313  0014CC  C0F4  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4314                           
  4315                           ;Movement.c: 48: char buf[40];
  4316                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4317  0014D0  0E03               	movlw	3
  4318  0014D2  0100               	movlb	0	; () banked
  4319  0014D4  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4320  0014D6  0EE8               	movlw	232
  4321  0014D8  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4325  0014DA  ECE8  F00C         	call	_grabLeftIR	;wreg free
  4326  0014DE  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4327  0014E2  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4328                           
  4329                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4330  0014E6  ECAF  F00C         	call	_grabRightIR	;wreg free
  4331  0014EA  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4332  0014EE  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4333                           
  4334                           ;Movement.c: 60: CAP1BUFH=0;
  4335  0014F2  0E00               	movlw	0
  4336  0014F4  6E69               	movwf	3945,c	;volatile
  4337                           
  4338                           ;Movement.c: 61: CAP1BUFL=0;
  4339  0014F6  0E00               	movlw	0
  4340  0014F8  6E68               	movwf	3944,c	;volatile
  4341                           
  4342                           ;Movement.c: 62: CAP2BUFH=0;
  4343  0014FA  0E00               	movlw	0
  4344  0014FC  6E67               	movwf	3943,c	;volatile
  4345                           
  4346                           ;Movement.c: 63: CAP2BUFL=0;
  4347  0014FE  0E00               	movlw	0
  4348  001500  6E66               	movwf	3942,c	;volatile
  4349                           
  4350                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4351  001502  0E00               	movlw	0
  4352  001504  6E28               	movwf	SendLCD@type,c
  4353  001506  0E01               	movlw	1
  4354  001508  ECA7  F00E         	call	_SendLCD
  4355                           
  4356                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4357  00150C  0E21               	movlw	33
  4358  00150E                     u3137:
  4359  00150E  2EE8               	decfsz	wreg,f,c
  4360  001510  D7FE               	goto	u3137
  4361  001512  F000               	nop	
  4362                           
  4363                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4364  001514  0E00               	movlw	0
  4365  001516  6E28               	movwf	SendLCD@type,c
  4366  001518  0E02               	movlw	2
  4367  00151A  ECA7  F00E         	call	_SendLCD
  4368                           
  4369                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4370  00151E  0E06               	movlw	6
  4371  001520  6E39               	movwf	??_ScanIR& (0+255),c
  4372  001522  0E30               	movlw	48
  4373  001524                     u3147:
  4374  001524  2EE8               	decfsz	wreg,f,c
  4375  001526  D7FE               	goto	u3147
  4376  001528  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4377  00152A  D7FC               	goto	u3147
  4378  00152C  D000               	nop2	
  4379                           
  4380                           ;Movement.c: 70: SetLine(1);
  4381  00152E  0E01               	movlw	1
  4382  001530  EC8F  F00E         	call	_SetLine
  4383                           
  4384                           ;Movement.c: 71: LCD_String("     ScanIR");
  4385  001534  0E2D               	movlw	low STR_1
  4386  001536  6E2A               	movwf	LCD_String@string,c
  4387  001538  0E03               	movlw	high STR_1
  4388  00153A  6E2B               	movwf	LCD_String@string+1,c
  4389  00153C  EC21  F00D         	call	_LCD_String	;wreg free
  4390                           
  4391                           ;Movement.c: 72: SetLine(2);
  4392  001540  0E02               	movlw	2
  4393  001542  EC8F  F00E         	call	_SetLine
  4394                           
  4395                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4396  001546  0E71               	movlw	low ScanIR@buf
  4397  001548  6E30               	movwf	sprintf@sp,c
  4398  00154A  0E00               	movlw	high ScanIR@buf
  4399  00154C  6E31               	movwf	sprintf@sp+1,c
  4400  00154E  0E0C               	movlw	low (STR_6+1)
  4401  001550  6E32               	movwf	sprintf@f,c
  4402  001552  0E03               	movlw	high (STR_6+1)
  4403  001554  6E33               	movwf	sprintf@f+1,c
  4404  001556  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4405  00155A  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4406  00155E  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4407  001562  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4408  001566  EC40  F008         	call	_sprintf	;wreg free
  4409                           
  4410                           ;Movement.c: 74: LCD_String(buf);
  4411  00156A  0E71               	movlw	low ScanIR@buf
  4412  00156C  6E2A               	movwf	LCD_String@string,c
  4413  00156E  0E00               	movlw	high ScanIR@buf
  4414  001570  6E2B               	movwf	LCD_String@string+1,c
  4415  001572  EC21  F00D         	call	_LCD_String	;wreg free
  4416                           
  4417                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4418                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4419  001576  0100               	movlb	0	; () banked
  4420  001578  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4421  00157A  0100               	movlb	0	; () banked
  4422  00157C  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4423  00157E  0100               	movlb	0	; () banked
  4424  001580  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4425  001582  0100               	movlb	0	; () banked
  4426  001584  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4427  001586  B0D8               	btfsc	status,0,c
  4428  001588  D00C               	goto	l3180
  4429                           
  4430                           ; BSR set to: 0
  4431  00158A  0100               	movlb	0	; () banked
  4432  00158C  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4433  00158E  0100               	movlb	0	; () banked
  4434  001590  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4435  001592  0100               	movlb	0	; () banked
  4436  001594  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4437  001596  0100               	movlb	0	; () banked
  4438  001598  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4439  00159A  B0D8               	btfsc	status,0,c
  4440  00159C  D002               	goto	l3180
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;Movement.c: 80: return 2;
  4444  00159E  0E02               	movlw	2
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;Movement.c: 81: } else {
  4448                           
  4449                           ; BSR set to: 0
  4450  0015A0  0012               	return	
  4451  0015A2                     l3180:
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;Movement.c: 82: stop(mL,mR);
  4455  0015A2  C06D  F062         	movff	ScanIR@mL,stop@mL
  4456  0015A6  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4457  0015AA  C06F  F064         	movff	ScanIR@mR,stop@mR
  4458  0015AE  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4459  0015B2  EC9E  F00B         	call	_stop	;wreg free
  4460                           
  4461                           ;Movement.c: 83: return 0;
  4462  0015B6  0E00               	movlw	0
  4463  0015B8  0012               	return	
  4464  0015BA                     __end_of_ScanIR:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           prodh	equ	0xFF4
  4468                           prodl	equ	0xFF3
  4469                           intcon	equ	0xFF2
  4470                           postinc0	equ	0xFEE
  4471                           wreg	equ	0xFE8
  4472                           indf1	equ	0xFE7
  4473                           plusw1	equ	0xFE3
  4474                           fsr1h	equ	0xFE2
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           plusw2	equ	0xFDB
  4480                           fsr2h	equ	0xFDA
  4481                           fsr2l	equ	0xFD9
  4482                           status	equ	0xFD8
  4483                           
  4484 ;; *************** function _stop *****************
  4485 ;; Defined at:
  4486 ;;		line 67 in file "dc_motor.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4489 ;;		 -> main@mL(9), 
  4490 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4491 ;;		 -> main@mR(9), 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;		None               void
  4496 ;; Registers used:
  4497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4503 ;;      Params:         0       4       0       0
  4504 ;;      Locals:         0       0       0       0
  4505 ;;      Temps:          0       0       0       0
  4506 ;;      Totals:         0       4       0       0
  4507 ;;Total ram usage:        4 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    5
  4510 ;; This function calls:
  4511 ;;		_setMotorPWM
  4512 ;; This function is called by:
  4513 ;;		_ScanIR
  4514 ;;		_ScanWithRange
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text15
  4520  00173C                     __ptext15:
  4521                           	opt stack 0
  4522  00173C                     _stop:
  4523                           	opt stack 25
  4524                           
  4525                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4526                           
  4527                           ;incstack = 0
  4528  00173C  D028               	goto	l3012
  4529  00173E                     l2998:
  4530                           
  4531                           ;dc_motor.c: 71: if(mL->power>0){
  4532  00173E  C062  FFD9         	movff	stop@mL,fsr2l
  4533  001742  C063  FFDA         	movff	stop@mL+1,fsr2h
  4534  001746  50DF               	movf	indf2,w,c
  4535  001748  B4D8               	btfsc	status,2,c
  4536  00174A  D005               	goto	l3002
  4537                           
  4538                           ;dc_motor.c: 72: mL->power--;
  4539  00174C  C062  FFD9         	movff	stop@mL,fsr2l
  4540  001750  C063  FFDA         	movff	stop@mL+1,fsr2h
  4541  001754  06DF               	decf	indf2,f,c
  4542  001756                     l3002:
  4543                           
  4544                           ;dc_motor.c: 73: }
  4545                           ;dc_motor.c: 74: if(mR->power>0){
  4546  001756  C064  FFD9         	movff	stop@mR,fsr2l
  4547  00175A  C065  FFDA         	movff	stop@mR+1,fsr2h
  4548  00175E  50DF               	movf	indf2,w,c
  4549  001760  B4D8               	btfsc	status,2,c
  4550  001762  D005               	goto	l3006
  4551                           
  4552                           ;dc_motor.c: 75: mR->power--;
  4553  001764  C064  FFD9         	movff	stop@mR,fsr2l
  4554  001768  C065  FFDA         	movff	stop@mR+1,fsr2h
  4555  00176C  06DF               	decf	indf2,f,c
  4556  00176E                     l3006:
  4557                           
  4558                           ;dc_motor.c: 76: }
  4559                           ;dc_motor.c: 77: setMotorPWM(mL);
  4560  00176E  C062  F032         	movff	stop@mL,setMotorPWM@m
  4561  001772  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4562  001776  ECC3  F009         	call	_setMotorPWM	;wreg free
  4563                           
  4564                           ;dc_motor.c: 78: setMotorPWM(mR);
  4565  00177A  C064  F032         	movff	stop@mR,setMotorPWM@m
  4566  00177E  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4567  001782  ECC3  F009         	call	_setMotorPWM	;wreg free
  4568                           
  4569                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4570  001786  0E21               	movlw	33
  4571  001788                     u3157:
  4572  001788  2EE8               	decfsz	wreg,f,c
  4573  00178A  D7FE               	goto	u3157
  4574  00178C  F000               	nop	
  4575  00178E                     l3012:
  4576  00178E  C062  FFD9         	movff	stop@mL,fsr2l
  4577  001792  C063  FFDA         	movff	stop@mL+1,fsr2h
  4578  001796  50DF               	movf	indf2,w,c
  4579  001798  A4D8               	btfss	status,2,c
  4580  00179A  D7D1               	goto	l2998
  4581  00179C  C064  FFD9         	movff	stop@mR,fsr2l
  4582  0017A0  C065  FFDA         	movff	stop@mR+1,fsr2h
  4583  0017A4  50DF               	movf	indf2,w,c
  4584  0017A6  A4D8               	btfss	status,2,c
  4585  0017A8  D7CA               	goto	l2998
  4586                           
  4587                           ;dc_motor.c: 80: }
  4588                           ;dc_motor.c: 81: mL->direction=1;
  4589  0017AA  0100               	movlb	0	; () banked
  4590  0017AC  EE20 F001          	lfsr	2,1
  4591  0017B0  5162               	movf	stop@mL& (0+255),w,b
  4592  0017B2  26D9               	addwf	fsr2l,f,c
  4593  0017B4  5163               	movf	(stop@mL+1)& (0+255),w,b
  4594  0017B6  22DA               	addwfc	fsr2h,f,c
  4595  0017B8  0E01               	movlw	1
  4596  0017BA  6EDF               	movwf	indf2,c
  4597                           
  4598                           ;dc_motor.c: 82: mR->direction=1;
  4599  0017BC  0100               	movlb	0	; () banked
  4600  0017BE  EE20 F001          	lfsr	2,1
  4601  0017C2  5164               	movf	stop@mR& (0+255),w,b
  4602  0017C4  26D9               	addwf	fsr2l,f,c
  4603  0017C6  5165               	movf	(stop@mR+1)& (0+255),w,b
  4604  0017C8  22DA               	addwfc	fsr2h,f,c
  4605  0017CA  0E01               	movlw	1
  4606  0017CC  6EDF               	movwf	indf2,c
  4607                           
  4608                           ; BSR set to: 0
  4609  0017CE  0012               	return		;funcret
  4610  0017D0                     __end_of_stop:
  4611                           	opt stack 0
  4612                           tblptru	equ	0xFF8
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           postinc0	equ	0xFEE
  4617                           wreg	equ	0xFE8
  4618                           indf1	equ	0xFE7
  4619                           plusw1	equ	0xFE3
  4620                           fsr1h	equ	0xFE2
  4621                           fsr1l	equ	0xFE1
  4622                           indf2	equ	0xFDF
  4623                           postinc2	equ	0xFDE
  4624                           postdec2	equ	0xFDD
  4625                           plusw2	equ	0xFDB
  4626                           fsr2h	equ	0xFDA
  4627                           fsr2l	equ	0xFD9
  4628                           status	equ	0xFD8
  4629                           
  4630 ;; *************** function _setMotorPWM *****************
  4631 ;; Defined at:
  4632 ;;		line 26 in file "dc_motor.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4635 ;;		 -> main@mR(9), main@mL(9), 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  PWMduty         2    0[BANK0 ] int 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;		None               void
  4640 ;; Registers used:
  4641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4647 ;;      Params:         2       0       0       0
  4648 ;;      Locals:         0       2       0       0
  4649 ;;      Temps:          5       0       0       0
  4650 ;;      Totals:         7       2       0       0
  4651 ;;Total ram usage:        9 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    4
  4654 ;; This function calls:
  4655 ;;		___awdiv
  4656 ;;		___wmul
  4657 ;; This function is called by:
  4658 ;;		_stop
  4659 ;;		_fullSpeedAhead
  4660 ;;		_setMotorFullSpeed
  4661 ;;		_stopMotor
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text16
  4666  001386                     __ptext16:
  4667                           	opt stack 0
  4668  001386                     _setMotorPWM:
  4669                           	opt stack 24
  4670                           
  4671                           ;dc_motor.c: 28: int PWMduty;
  4672                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;incstack = 0
  4676  001386  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4677  00138A  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4678  00138E  50DF               	movf	indf2,w,c
  4679  001390  6E34               	movwf	??_setMotorPWM& (0+255),c
  4680  001392  5034               	movf	??_setMotorPWM,w,c
  4681  001394  6E24               	movwf	___wmul@multiplier,c
  4682  001396  6A25               	clrf	___wmul@multiplier+1,c
  4683  001398  EE20 F007          	lfsr	2,7
  4684  00139C  5032               	movf	setMotorPWM@m,w,c
  4685  00139E  26D9               	addwf	fsr2l,f,c
  4686  0013A0  5033               	movf	setMotorPWM@m+1,w,c
  4687  0013A2  22DA               	addwfc	fsr2h,f,c
  4688  0013A4  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4689  0013A8  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4690  0013AC  ECD2  F00E         	call	___wmul	;wreg free
  4691  0013B0  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4692  0013B4  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4693  0013B8  0E00               	movlw	0
  4694  0013BA  6E2D               	movwf	___awdiv@divisor+1,c
  4695  0013BC  0E64               	movlw	100
  4696  0013BE  6E2C               	movwf	___awdiv@divisor,c
  4697  0013C0  EC2D  F00C         	call	___awdiv	;wreg free
  4698  0013C4  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4699  0013C8  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4700                           
  4701                           ;dc_motor.c: 32: if (m->direction)
  4702  0013CC  EE20 F001          	lfsr	2,1
  4703  0013D0  5032               	movf	setMotorPWM@m,w,c
  4704  0013D2  26D9               	addwf	fsr2l,f,c
  4705  0013D4  5033               	movf	setMotorPWM@m+1,w,c
  4706  0013D6  22DA               	addwfc	fsr2h,f,c
  4707  0013D8  50DF               	movf	indf2,w,c
  4708  0013DA  B4D8               	btfsc	status,2,c
  4709  0013DC  D02E               	goto	l2976
  4710                           
  4711                           ;dc_motor.c: 33: {
  4712                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4713  0013DE  EE20 F006          	lfsr	2,6
  4714  0013E2  5032               	movf	setMotorPWM@m,w,c
  4715  0013E4  26D9               	addwf	fsr2l,f,c
  4716  0013E6  5033               	movf	setMotorPWM@m+1,w,c
  4717  0013E8  22DA               	addwfc	fsr2h,f,c
  4718  0013EA  50DF               	movf	indf2,w,c
  4719  0013EC  6E34               	movwf	??_setMotorPWM& (0+255),c
  4720  0013EE  0E01               	movlw	1
  4721  0013F0  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4722  0013F2  2A34               	incf	??_setMotorPWM,f,c
  4723  0013F4  D002               	goto	u2324
  4724  0013F6                     u2325:
  4725  0013F6  90D8               	bcf	status,0,c
  4726  0013F8  3635               	rlcf	??_setMotorPWM+1,f,c
  4727  0013FA                     u2324:
  4728  0013FA  2E34               	decfsz	??_setMotorPWM,f,c
  4729  0013FC  D7FC               	goto	u2325
  4730  0013FE  5035               	movf	??_setMotorPWM+1,w,c
  4731  001400  108A               	iorwf	3978,w,c	;volatile
  4732  001402  6E8A               	movwf	3978,c	;volatile
  4733                           
  4734                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4735  001404  EE20 F007          	lfsr	2,7
  4736  001408  5032               	movf	setMotorPWM@m,w,c
  4737  00140A  26D9               	addwf	fsr2l,f,c
  4738  00140C  5033               	movf	setMotorPWM@m+1,w,c
  4739  00140E  22DA               	addwfc	fsr2h,f,c
  4740  001410  CFDE F034          	movff	postinc2,??_setMotorPWM
  4741  001414  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4742  001418  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4743  00141C  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4744  001420  1E36               	comf	??_setMotorPWM+2,f,c
  4745  001422  1E37               	comf	??_setMotorPWM+3,f,c
  4746  001424  4A36               	infsnz	??_setMotorPWM+2,f,c
  4747  001426  2A37               	incf	??_setMotorPWM+3,f,c
  4748  001428  5034               	movf	??_setMotorPWM,w,c
  4749  00142A  2436               	addwf	??_setMotorPWM+2,w,c
  4750  00142C  0100               	movlb	0	; () banked
  4751  00142E  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4752  001430  5035               	movf	??_setMotorPWM+1,w,c
  4753  001432  2037               	addwfc	??_setMotorPWM+3,w,c
  4754  001434  0100               	movlb	0	; () banked
  4755  001436  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4756                           
  4757                           ;dc_motor.c: 36: }
  4758  001438  D014               	goto	l35
  4759  00143A                     l2976:
  4760                           
  4761                           ;dc_motor.c: 37: else
  4762                           ;dc_motor.c: 38: {
  4763                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4764  00143A  EE20 F006          	lfsr	2,6
  4765  00143E  5032               	movf	setMotorPWM@m,w,c
  4766  001440  26D9               	addwf	fsr2l,f,c
  4767  001442  5033               	movf	setMotorPWM@m+1,w,c
  4768  001444  22DA               	addwfc	fsr2h,f,c
  4769  001446  50DF               	movf	indf2,w,c
  4770  001448  6E34               	movwf	??_setMotorPWM& (0+255),c
  4771  00144A  0E01               	movlw	1
  4772  00144C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4773  00144E  2A34               	incf	??_setMotorPWM,f,c
  4774  001450  D002               	goto	u2334
  4775  001452                     u2335:
  4776  001452  90D8               	bcf	status,0,c
  4777  001454  3635               	rlcf	??_setMotorPWM+1,f,c
  4778  001456                     u2334:
  4779  001456  2E34               	decfsz	??_setMotorPWM,f,c
  4780  001458  D7FC               	goto	u2335
  4781  00145A  5035               	movf	??_setMotorPWM+1,w,c
  4782  00145C  0AFF               	xorlw	255
  4783  00145E  148A               	andwf	3978,w,c	;volatile
  4784  001460  6E8A               	movwf	3978,c	;volatile
  4785  001462                     l35:
  4786                           
  4787                           ;dc_motor.c: 40: }
  4788                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4789  001462  EE20 F002          	lfsr	2,2
  4790  001466  5032               	movf	setMotorPWM@m,w,c
  4791  001468  26D9               	addwf	fsr2l,f,c
  4792  00146A  5033               	movf	setMotorPWM@m+1,w,c
  4793  00146C  22DA               	addwfc	fsr2h,f,c
  4794  00146E  CFDE F034          	movff	postinc2,??_setMotorPWM
  4795  001472  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4796  001476  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4797  00147A  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4798  00147E  0100               	movlb	0	; () banked
  4799  001480  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4800  001482  46E8               	rlncf	wreg,f,c
  4801  001484  0BFC               	andlw	252
  4802  001486  6EDF               	movwf	indf2,c
  4803                           
  4804                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4805  001488  EE20 F004          	lfsr	2,4
  4806  00148C  5032               	movf	setMotorPWM@m,w,c
  4807  00148E  26D9               	addwf	fsr2l,f,c
  4808  001490  5033               	movf	setMotorPWM@m+1,w,c
  4809  001492  22DA               	addwfc	fsr2h,f,c
  4810  001494  CFDE F034          	movff	postinc2,??_setMotorPWM
  4811  001498  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4812  00149C  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4813  0014A0  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4814  0014A4  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4815  0014A8  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4816  0014AC  0E06               	movlw	6
  4817  0014AE  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4818  0014B0                     u2345:
  4819  0014B0  3437               	rlcf	??_setMotorPWM+3,w,c
  4820  0014B2  3237               	rrcf	??_setMotorPWM+3,f,c
  4821  0014B4  3236               	rrcf	??_setMotorPWM+2,f,c
  4822  0014B6  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4823  0014B8  D7FB               	goto	u2345
  4824  0014BA  5036               	movf	??_setMotorPWM+2,w,c
  4825  0014BC  6EDF               	movwf	indf2,c
  4826                           
  4827                           ; BSR set to: 0
  4828  0014BE  0012               	return		;funcret
  4829  0014C0                     __end_of_setMotorPWM:
  4830                           	opt stack 0
  4831                           tblptru	equ	0xFF8
  4832                           prodh	equ	0xFF4
  4833                           prodl	equ	0xFF3
  4834                           intcon	equ	0xFF2
  4835                           postinc0	equ	0xFEE
  4836                           wreg	equ	0xFE8
  4837                           indf1	equ	0xFE7
  4838                           plusw1	equ	0xFE3
  4839                           fsr1h	equ	0xFE2
  4840                           fsr1l	equ	0xFE1
  4841                           indf2	equ	0xFDF
  4842                           postinc2	equ	0xFDE
  4843                           postdec2	equ	0xFDD
  4844                           plusw2	equ	0xFDB
  4845                           fsr2h	equ	0xFDA
  4846                           fsr2l	equ	0xFD9
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function ___awdiv *****************
  4850 ;; Defined at:
  4851 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  dividend        2   41[COMRAM] int 
  4854 ;;  divisor         2   43[COMRAM] int 
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  quotient        2   47[COMRAM] int 
  4857 ;;  sign            1   46[COMRAM] unsigned char 
  4858 ;;  counter         1   45[COMRAM] unsigned char 
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  2   41[COMRAM] int 
  4861 ;; Registers used:
  4862 ;;		wreg, status,2, status,0
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4868 ;;      Params:         4       0       0       0
  4869 ;;      Locals:         4       0       0       0
  4870 ;;      Temps:          0       0       0       0
  4871 ;;      Totals:         8       0       0       0
  4872 ;;Total ram usage:        8 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    3
  4875 ;; This function calls:
  4876 ;;		Nothing
  4877 ;; This function is called by:
  4878 ;;		_setMotorPWM
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           	psect	text17
  4883  00185A                     __ptext17:
  4884                           	opt stack 0
  4885  00185A                     ___awdiv:
  4886                           	opt stack 24
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;incstack = 0
  4890  00185A  0E00               	movlw	0
  4891  00185C  6E2F               	movwf	___awdiv@sign,c
  4892  00185E  AE2D               	btfss	___awdiv@divisor+1,7,c
  4893  001860  D006               	goto	l2934
  4894  001862  6C2C               	negf	___awdiv@divisor,c
  4895  001864  1E2D               	comf	___awdiv@divisor+1,f,c
  4896  001866  B0D8               	btfsc	status,0,c
  4897  001868  2A2D               	incf	___awdiv@divisor+1,f,c
  4898  00186A  0E01               	movlw	1
  4899  00186C  6E2F               	movwf	___awdiv@sign,c
  4900  00186E                     l2934:
  4901  00186E  AE2B               	btfss	___awdiv@dividend+1,7,c
  4902  001870  D006               	goto	l2940
  4903  001872  6C2A               	negf	___awdiv@dividend,c
  4904  001874  1E2B               	comf	___awdiv@dividend+1,f,c
  4905  001876  B0D8               	btfsc	status,0,c
  4906  001878  2A2B               	incf	___awdiv@dividend+1,f,c
  4907  00187A  0E01               	movlw	1
  4908  00187C  1A2F               	xorwf	___awdiv@sign,f,c
  4909  00187E                     l2940:
  4910  00187E  0E00               	movlw	0
  4911  001880  6E31               	movwf	___awdiv@quotient+1,c
  4912  001882  0E00               	movlw	0
  4913  001884  6E30               	movwf	___awdiv@quotient,c
  4914  001886  502C               	movf	___awdiv@divisor,w,c
  4915  001888  102D               	iorwf	___awdiv@divisor+1,w,c
  4916  00188A  B4D8               	btfsc	status,2,c
  4917  00188C  D01C               	goto	l2962
  4918  00188E  0E01               	movlw	1
  4919  001890  6E2E               	movwf	___awdiv@counter,c
  4920  001892  D004               	goto	l2948
  4921  001894                     l2946:
  4922  001894  90D8               	bcf	status,0,c
  4923  001896  362C               	rlcf	___awdiv@divisor,f,c
  4924  001898  362D               	rlcf	___awdiv@divisor+1,f,c
  4925  00189A  2A2E               	incf	___awdiv@counter,f,c
  4926  00189C                     l2948:
  4927  00189C  AE2D               	btfss	___awdiv@divisor+1,7,c
  4928  00189E  D7FA               	goto	l2946
  4929  0018A0                     l2950:
  4930  0018A0  90D8               	bcf	status,0,c
  4931  0018A2  3630               	rlcf	___awdiv@quotient,f,c
  4932  0018A4  3631               	rlcf	___awdiv@quotient+1,f,c
  4933  0018A6  502C               	movf	___awdiv@divisor,w,c
  4934  0018A8  5C2A               	subwf	___awdiv@dividend,w,c
  4935  0018AA  502D               	movf	___awdiv@divisor+1,w,c
  4936  0018AC  582B               	subwfb	___awdiv@dividend+1,w,c
  4937  0018AE  A0D8               	btfss	status,0,c
  4938  0018B0  D005               	goto	l2958
  4939  0018B2  502C               	movf	___awdiv@divisor,w,c
  4940  0018B4  5E2A               	subwf	___awdiv@dividend,f,c
  4941  0018B6  502D               	movf	___awdiv@divisor+1,w,c
  4942  0018B8  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4943  0018BA  8030               	bsf	___awdiv@quotient,0,c
  4944  0018BC                     l2958:
  4945  0018BC  90D8               	bcf	status,0,c
  4946  0018BE  322D               	rrcf	___awdiv@divisor+1,f,c
  4947  0018C0  322C               	rrcf	___awdiv@divisor,f,c
  4948  0018C2  2E2E               	decfsz	___awdiv@counter,f,c
  4949  0018C4  D7ED               	goto	l2950
  4950  0018C6                     l2962:
  4951  0018C6  502F               	movf	___awdiv@sign,w,c
  4952  0018C8  B4D8               	btfsc	status,2,c
  4953  0018CA  D004               	goto	l2966
  4954  0018CC  6C30               	negf	___awdiv@quotient,c
  4955  0018CE  1E31               	comf	___awdiv@quotient+1,f,c
  4956  0018D0  B0D8               	btfsc	status,0,c
  4957  0018D2  2A31               	incf	___awdiv@quotient+1,f,c
  4958  0018D4                     l2966:
  4959  0018D4  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4960  0018D8  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4961  0018DC  0012               	return	
  4962  0018DE                     __end_of___awdiv:
  4963                           	opt stack 0
  4964                           tblptru	equ	0xFF8
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           intcon	equ	0xFF2
  4968                           postinc0	equ	0xFEE
  4969                           wreg	equ	0xFE8
  4970                           indf1	equ	0xFE7
  4971                           plusw1	equ	0xFE3
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           plusw2	equ	0xFDB
  4978                           fsr2h	equ	0xFDA
  4979                           fsr2l	equ	0xFD9
  4980                           status	equ	0xFD8
  4981                           
  4982 ;; *************** function _sprintf *****************
  4983 ;; Defined at:
  4984 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4987 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4988 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4989 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  tmpval          4    0        struct .
  4992 ;;  cp              3    0        PTR const unsigned char 
  4993 ;;  width           2   10[BANK0 ] int 
  4994 ;;  val             2    7[BANK0 ] unsigned int 
  4995 ;;  ap              2    4[BANK0 ] PTR void [1]
  4996 ;;		 -> ?_sprintf(2), 
  4997 ;;  len             2    0        unsigned int 
  4998 ;;  c               1   12[BANK0 ] char 
  4999 ;;  flag            1    9[BANK0 ] unsigned char 
  5000 ;;  prec            1    6[BANK0 ] char 
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  2   47[COMRAM] int 
  5003 ;; Registers used:
  5004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5010 ;;      Params:         8       0       0       0
  5011 ;;      Locals:         0       9       0       0
  5012 ;;      Temps:          0       4       0       0
  5013 ;;      Totals:         8      13       0       0
  5014 ;;Total ram usage:       21 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    4
  5017 ;; This function calls:
  5018 ;;		___lwdiv
  5019 ;;		___lwmod
  5020 ;;		___wmul
  5021 ;;		_isdigit
  5022 ;; This function is called by:
  5023 ;;		_ScanIR
  5024 ;;		_ScanWithRange
  5025 ;;		_main
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text18
  5030  001080                     __ptext18:
  5031                           	opt stack 0
  5032  001080                     _sprintf:
  5033                           	opt stack 26
  5034                           
  5035                           ;doprnt.c: 494: va_list ap;
  5036                           ;doprnt.c: 499: signed char c;
  5037                           ;doprnt.c: 501: int width;
  5038                           ;doprnt.c: 506: signed char prec;
  5039                           ;doprnt.c: 508: unsigned char flag;
  5040                           ;doprnt.c: 523: union {
  5041                           ;doprnt.c: 524: unsigned long vd;
  5042                           ;doprnt.c: 525: double integ;
  5043                           ;doprnt.c: 526: } tmpval;
  5044                           ;doprnt.c: 528: unsigned int val;
  5045                           ;doprnt.c: 529: unsigned len;
  5046                           ;doprnt.c: 530: const char * cp;
  5047                           ;doprnt.c: 533: *ap = __va_start();
  5048                           
  5049                           ;incstack = 0
  5050  001080  0E34               	movlw	low (?_sprintf+4)
  5051  001082  0100               	movlb	0	; () banked
  5052  001084  6F64               	movwf	sprintf@ap& (0+255),b
  5053  001086  0E00               	movlw	high (?_sprintf+4)
  5054  001088  0100               	movlb	0	; () banked
  5055  00108A  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  5056                           
  5057                           ;doprnt.c: 536: while(c = *f++) {
  5058  00108C  D168               	goto	l3134
  5059  00108E                     l3028:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;doprnt.c: 538: if(c != '%')
  5063  00108E  0E25               	movlw	37
  5064  001090  0100               	movlb	0	; () banked
  5065  001092  196C               	xorwf	sprintf@c& (0+255),w,b
  5066  001094  B4D8               	btfsc	status,2,c
  5067  001096  D009               	goto	l3034
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;doprnt.c: 540: {
  5071                           ;doprnt.c: 541: ((*sp++ = (c)));
  5072  001098  C030  FFD9         	movff	sprintf@sp,fsr2l
  5073  00109C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5074  0010A0  C06C  FFDF         	movff	sprintf@c,indf2
  5075                           
  5076                           ; BSR set to: 0
  5077  0010A4  4A30               	infsnz	sprintf@sp,f,c
  5078  0010A6  2A31               	incf	sprintf@sp+1,f,c
  5079                           
  5080                           ;doprnt.c: 542: continue;
  5081  0010A8  D15A               	goto	l3134
  5082  0010AA                     l3034:
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;doprnt.c: 543: }
  5086                           ;doprnt.c: 546: width = 0;
  5087  0010AA  0E00               	movlw	0
  5088  0010AC  0100               	movlb	0	; () banked
  5089  0010AE  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5090  0010B0  0E00               	movlw	0
  5091  0010B2  6F6A               	movwf	sprintf@width& (0+255),b
  5092                           
  5093                           ;doprnt.c: 548: flag = 0;
  5094  0010B4  0E00               	movlw	0
  5095  0010B6  0100               	movlb	0	; () banked
  5096  0010B8  6F69               	movwf	sprintf@flag& (0+255),b
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;doprnt.c: 551: switch(*f) {
  5100                           
  5101                           ;doprnt.c: 550: for(;;) {
  5102  0010BA  D004               	goto	l3040
  5103  0010BC                     l3036:
  5104                           
  5105                           ;doprnt.c: 580: flag |= 0x04;
  5106  0010BC  0100               	movlb	0	; () banked
  5107  0010BE  8569               	bsf	sprintf@flag& (0+255),2,b
  5108                           
  5109                           ;doprnt.c: 581: f++;
  5110  0010C0  4A32               	infsnz	sprintf@f,f,c
  5111  0010C2  2A33               	incf	sprintf@f+1,f,c
  5112  0010C4                     l3040:
  5113  0010C4  C032  FFF6         	movff	sprintf@f,tblptrl
  5114  0010C8  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5115  0010CC                     	if	0	;tblptru may be non-zero
  5116  0010CC                     	endif
  5117  0010CC                     	if	0	;tblptru may be non-zero
  5118  0010CC                     	endif
  5119  0010CC  0008               	tblrd		*
  5120  0010CE  50F5               	movf	tablat,w,c
  5121                           
  5122                           ; Switch size 1, requested type "space"
  5123                           ; Number of cases is 1, Range of values is 48 to 48
  5124                           ; switch strategies available:
  5125                           ; Name         Instructions Cycles
  5126                           ; simple_byte            4     3 (average)
  5127                           ;	Chosen strategy is simple_byte
  5128  0010D0  0A30               	xorlw	48	; case 48
  5129  0010D2  B4D8               	btfsc	status,2,c
  5130  0010D4  D7F3               	goto	l3036
  5131                           
  5132                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5133                           
  5134                           ;doprnt.c: 586: }
  5135                           
  5136                           ;doprnt.c: 585: break;
  5137  0010D6  C032  FFF6         	movff	sprintf@f,tblptrl
  5138  0010DA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5139  0010DE                     	if	0	;tblptru may be non-zero
  5140  0010DE                     	endif
  5141  0010DE                     	if	0	;tblptru may be non-zero
  5142  0010DE                     	endif
  5143  0010DE  0008               	tblrd		*
  5144  0010E0  50F5               	movf	tablat,w,c
  5145  0010E2  ECF6  F00E         	call	_isdigit
  5146  0010E6  A0D8               	btfss	status,0,c
  5147  0010E8  D03E               	goto	l3056
  5148                           
  5149                           ;doprnt.c: 598: width = 0;
  5150  0010EA  0E00               	movlw	0
  5151  0010EC  0100               	movlb	0	; () banked
  5152  0010EE  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5153  0010F0  0E00               	movlw	0
  5154  0010F2  6F6A               	movwf	sprintf@width& (0+255),b
  5155  0010F4                     l3046:
  5156                           
  5157                           ;doprnt.c: 600: width *= 10;
  5158  0010F4  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5159  0010F8  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5160  0010FC  0E00               	movlw	0
  5161  0010FE  6E27               	movwf	___wmul@multiplicand+1,c
  5162  001100  0E0A               	movlw	10
  5163  001102  6E26               	movwf	___wmul@multiplicand,c
  5164  001104  ECD2  F00E         	call	___wmul	;wreg free
  5165  001108  C024  F06A         	movff	?___wmul,sprintf@width
  5166  00110C  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5167                           
  5168                           ;doprnt.c: 601: width += *f++ - '0';
  5169  001110  0ED0               	movlw	208
  5170  001112  0100               	movlb	0	; () banked
  5171  001114  6F60               	movwf	??_sprintf& (0+255),b
  5172  001116  0EFF               	movlw	255
  5173  001118  0100               	movlb	0	; () banked
  5174  00111A  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5175  00111C  C032  FFF6         	movff	sprintf@f,tblptrl
  5176  001120  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5177  001124                     	if	0	;tblptru may be non-zero
  5178  001124                     	endif
  5179  001124                     	if	0	;tblptru may be non-zero
  5180  001124                     	endif
  5181  001124  0008               	tblrd		*
  5182  001126  50F5               	movf	tablat,w,c
  5183  001128  0100               	movlb	0	; () banked
  5184  00112A  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5185  00112C  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5186  00112E  0100               	movlb	0	; () banked
  5187  001130  5160               	movf	??_sprintf& (0+255),w,b
  5188  001132  0100               	movlb	0	; () banked
  5189  001134  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5190  001136  0100               	movlb	0	; () banked
  5191  001138  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5192  00113A  0100               	movlb	0	; () banked
  5193  00113C  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5194  00113E  0100               	movlb	0	; () banked
  5195  001140  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5196  001142  0100               	movlb	0	; () banked
  5197  001144  276A               	addwf	sprintf@width& (0+255),f,b
  5198  001146  0100               	movlb	0	; () banked
  5199  001148  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5200  00114A  0100               	movlb	0	; () banked
  5201  00114C  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5202                           
  5203                           ; BSR set to: 0
  5204  00114E  4A32               	infsnz	sprintf@f,f,c
  5205  001150  2A33               	incf	sprintf@f+1,f,c
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5209  001152  C032  FFF6         	movff	sprintf@f,tblptrl
  5210  001156  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5211  00115A                     	if	0	;tblptru may be non-zero
  5212  00115A                     	endif
  5213  00115A                     	if	0	;tblptru may be non-zero
  5214  00115A                     	endif
  5215  00115A  0008               	tblrd		*
  5216  00115C  50F5               	movf	tablat,w,c
  5217  00115E  ECF6  F00E         	call	_isdigit
  5218  001162  B0D8               	btfsc	status,0,c
  5219  001164  D7C7               	goto	l3046
  5220  001166                     l3056:
  5221  001166  C032  FFF6         	movff	sprintf@f,tblptrl
  5222  00116A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5223  00116E  4A32               	infsnz	sprintf@f,f,c
  5224  001170  2A33               	incf	sprintf@f+1,f,c
  5225  001172                     	if	0	;tblptru may be non-zero
  5226  001172                     	endif
  5227  001172                     	if	0	;tblptru may be non-zero
  5228  001172                     	endif
  5229  001172  0008               	tblrd		*
  5230  001174  CFF5 F06C          	movff	tablat,sprintf@c
  5231  001178  0100               	movlb	0	; () banked
  5232  00117A  516C               	movf	sprintf@c& (0+255),w,b
  5233                           
  5234                           ; Switch size 1, requested type "space"
  5235                           ; Number of cases is 3, Range of values is 0 to 105
  5236                           ; switch strategies available:
  5237                           ; Name         Instructions Cycles
  5238                           ; simple_byte           10     6 (average)
  5239                           ;	Chosen strategy is simple_byte
  5240  00117C  0A00               	xorlw	0	; case 0
  5241  00117E  B4D8               	btfsc	status,2,c
  5242  001180  D0FB               	goto	l3136
  5243  001182  0A64               	xorlw	100	; case 100
  5244  001184  B4D8               	btfsc	status,2,c
  5245  001186  D003               	goto	l3058
  5246  001188  0A0D               	xorlw	13	; case 105
  5247  00118A  A4D8               	btfss	status,2,c
  5248  00118C  D0E8               	goto	l3134
  5249  00118E                     l3058:
  5250                           
  5251                           ;doprnt.c: 1253: {
  5252                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5253  00118E  C064  FFD9         	movff	sprintf@ap,fsr2l
  5254  001192  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5255  001196  CFDE F067          	movff	postinc2,sprintf@val
  5256  00119A  CFDD F068          	movff	postdec2,sprintf@val+1
  5257  00119E  0E02               	movlw	2
  5258  0011A0  0100               	movlb	0	; () banked
  5259  0011A2  2764               	addwf	sprintf@ap& (0+255),f,b
  5260  0011A4  0E00               	movlw	0
  5261  0011A6  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;doprnt.c: 1261: if((int)val < 0) {
  5265  0011A8  0100               	movlb	0	; () banked
  5266  0011AA  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5267  0011AC  D008               	goto	l3068
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;doprnt.c: 1262: flag |= 0x03;
  5271  0011AE  0E03               	movlw	3
  5272  0011B0  0100               	movlb	0	; () banked
  5273  0011B2  1369               	iorwf	sprintf@flag& (0+255),f,b
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;doprnt.c: 1263: val = -val;
  5277  0011B4  0100               	movlb	0	; () banked
  5278  0011B6  6D67               	negf	sprintf@val& (0+255),b
  5279  0011B8  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5280  0011BA  B0D8               	btfsc	status,0,c
  5281  0011BC  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5282  0011BE                     l3068:
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;doprnt.c: 1264: }
  5286                           ;doprnt.c: 1266: }
  5287                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5288  0011BE  0E01               	movlw	1
  5289  0011C0  0100               	movlb	0	; () banked
  5290  0011C2  6F6C               	movwf	sprintf@c& (0+255),b
  5291  0011C4                     l3070:
  5292                           
  5293                           ; BSR set to: 0
  5294  0011C4  0E05               	movlw	5
  5295  0011C6  0100               	movlb	0	; () banked
  5296  0011C8  196C               	xorwf	sprintf@c& (0+255),w,b
  5297  0011CA  B4D8               	btfsc	status,2,c
  5298  0011CC  D016               	goto	l3082
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;doprnt.c: 1306: if(val < dpowers[c])
  5302                           
  5303                           ; BSR set to: 0
  5304                           
  5305                           ; BSR set to: 0
  5306  0011CE  0100               	movlb	0	; () banked
  5307  0011D0  516C               	movf	sprintf@c& (0+255),w,b
  5308  0011D2  0D02               	mullw	2
  5309  0011D4  0E01               	movlw	low _dpowers
  5310  0011D6  24F3               	addwf	prodl,w,c
  5311  0011D8  6EF6               	movwf	tblptrl,c
  5312  0011DA  0E03               	movlw	high _dpowers
  5313  0011DC  20F4               	addwfc	prodh,w,c
  5314  0011DE  6EF7               	movwf	tblptrh,c
  5315  0011E0                     	if	0	;There are less than 3 active tblptr bytes
  5316  0011E0                     	endif
  5317  0011E0  0009               	tblrd		*+
  5318  0011E2  50F5               	movf	tablat,w,c
  5319  0011E4  0100               	movlb	0	; () banked
  5320  0011E6  5D67               	subwf	sprintf@val& (0+255),w,b
  5321  0011E8  0009               	tblrd		*+
  5322  0011EA  50F5               	movf	tablat,w,c
  5323  0011EC  0100               	movlb	0	; () banked
  5324  0011EE  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5325  0011F0  A0D8               	btfss	status,0,c
  5326  0011F2  D003               	goto	l3082
  5327                           
  5328                           ; BSR set to: 0
  5329                           
  5330                           ; BSR set to: 0
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;doprnt.c: 1307: break;
  5334  0011F4  0100               	movlb	0	; () banked
  5335  0011F6  2B6C               	incf	sprintf@c& (0+255),f,b
  5336  0011F8  D7E5               	goto	l3070
  5337  0011FA                     l3082:
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5341  0011FA  0100               	movlb	0	; () banked
  5342  0011FC  516A               	movf	sprintf@width& (0+255),w,b
  5343  0011FE  0100               	movlb	0	; () banked
  5344  001200  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5345  001202  B4D8               	btfsc	status,2,c
  5346  001204  D00B               	goto	l3088
  5347                           
  5348                           ; BSR set to: 0
  5349  001206  C069  F060         	movff	sprintf@flag,??_sprintf
  5350  00120A  0E03               	movlw	3
  5351  00120C  0100               	movlb	0	; () banked
  5352  00120E  1760               	andwf	??_sprintf& (0+255),f,b
  5353  001210  B4D8               	btfsc	status,2,c
  5354  001212  D004               	goto	l3088
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;doprnt.c: 1346: width--;
  5358  001214  0100               	movlb	0	; () banked
  5359  001216  076A               	decf	sprintf@width& (0+255),f,b
  5360  001218  A0D8               	btfss	status,0,c
  5361  00121A  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5362  00121C                     l3088:
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;doprnt.c: 1381: if(width > c)
  5366  00121C  0E80               	movlw	128
  5367  00121E  0100               	movlb	0	; () banked
  5368  001220  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5369  001222  0E7F               	movlw	127
  5370  001224  0100               	movlb	0	; () banked
  5371  001226  6F60               	movwf	??_sprintf& (0+255),b
  5372  001228  0100               	movlb	0	; () banked
  5373  00122A  516A               	movf	sprintf@width& (0+255),w,b
  5374  00122C  0100               	movlb	0	; () banked
  5375  00122E  5D6C               	subwf	sprintf@c& (0+255),w,b
  5376  001230  0100               	movlb	0	; () banked
  5377  001232  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5378  001234  0A80               	xorlw	128
  5379  001236  0100               	movlb	0	; () banked
  5380  001238  5960               	subwfb	??_sprintf& (0+255),w,b
  5381  00123A  B0D8               	btfsc	status,0,c
  5382  00123C  D00B               	goto	l3092
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;doprnt.c: 1382: width -= c;
  5386  00123E  0100               	movlb	0	; () banked
  5387  001240  516C               	movf	sprintf@c& (0+255),w,b
  5388  001242  0100               	movlb	0	; () banked
  5389  001244  5F6A               	subwf	sprintf@width& (0+255),f,b
  5390  001246  0E00               	movlw	0
  5391  001248  0100               	movlb	0	; () banked
  5392  00124A  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5393  00124C  0EFF               	movlw	255
  5394  00124E  0100               	movlb	0	; () banked
  5395  001250  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5396  001252  D005               	goto	l3094
  5397  001254                     l3092:
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;doprnt.c: 1383: else
  5401                           ;doprnt.c: 1384: width = 0;
  5402  001254  0E00               	movlw	0
  5403  001256  0100               	movlb	0	; () banked
  5404  001258  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5405  00125A  0E00               	movlw	0
  5406  00125C  6F6A               	movwf	sprintf@width& (0+255),b
  5407  00125E                     l3094:
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;doprnt.c: 1387: if(flag & 0x04) {
  5411  00125E  0100               	movlb	0	; () banked
  5412  001260  A569               	btfss	sprintf@flag& (0+255),2,b
  5413  001262  D022               	goto	l3110
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;doprnt.c: 1392: if(flag & 0x03)
  5417  001264  C069  F060         	movff	sprintf@flag,??_sprintf
  5418  001268  0E03               	movlw	3
  5419  00126A  0100               	movlb	0	; () banked
  5420  00126C  1760               	andwf	??_sprintf& (0+255),f,b
  5421  00126E  B4D8               	btfsc	status,2,c
  5422  001270  D008               	goto	l3102
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5426  001272  C030  FFD9         	movff	sprintf@sp,fsr2l
  5427  001276  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5428  00127A  0E2D               	movlw	45
  5429  00127C  6EDF               	movwf	indf2,c
  5430                           
  5431                           ; BSR set to: 0
  5432  00127E  4A30               	infsnz	sprintf@sp,f,c
  5433  001280  2A31               	incf	sprintf@sp+1,f,c
  5434  001282                     l3102:
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;doprnt.c: 1415: if(width)
  5438  001282  0100               	movlb	0	; () banked
  5439  001284  516A               	movf	sprintf@width& (0+255),w,b
  5440  001286  0100               	movlb	0	; () banked
  5441  001288  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5442  00128A  B4D8               	btfsc	status,2,c
  5443  00128C  D034               	goto	l3124
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5447                           
  5448                           ; BSR set to: 0
  5449                           
  5450                           ;doprnt.c: 1416: do
  5451  00128E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5452  001292  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5453  001296  0E30               	movlw	48
  5454  001298  6EDF               	movwf	indf2,c
  5455                           
  5456                           ; BSR set to: 0
  5457  00129A  4A30               	infsnz	sprintf@sp,f,c
  5458  00129C  2A31               	incf	sprintf@sp+1,f,c
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;doprnt.c: 1418: while(--width);
  5462  00129E  0100               	movlb	0	; () banked
  5463  0012A0  076A               	decf	sprintf@width& (0+255),f,b
  5464  0012A2  A0D8               	btfss	status,0,c
  5465  0012A4  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5466  0012A6  D7ED               	goto	l3102
  5467  0012A8                     l3110:
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;doprnt.c: 1422: {
  5471                           ;doprnt.c: 1424: if(width
  5472                           ;doprnt.c: 1428: )
  5473  0012A8  0100               	movlb	0	; () banked
  5474  0012AA  516A               	movf	sprintf@width& (0+255),w,b
  5475  0012AC  0100               	movlb	0	; () banked
  5476  0012AE  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5477  0012B0  B4D8               	btfsc	status,2,c
  5478  0012B2  D012               	goto	l3118
  5479  0012B4                     l3112:
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5483  0012B4  C030  FFD9         	movff	sprintf@sp,fsr2l
  5484  0012B8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5485  0012BC  0E20               	movlw	32
  5486  0012BE  6EDF               	movwf	indf2,c
  5487                           
  5488                           ; BSR set to: 0
  5489  0012C0  4A30               	infsnz	sprintf@sp,f,c
  5490  0012C2  2A31               	incf	sprintf@sp+1,f,c
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;doprnt.c: 1431: while(--width);
  5494  0012C4  0100               	movlb	0	; () banked
  5495  0012C6  076A               	decf	sprintf@width& (0+255),f,b
  5496  0012C8  A0D8               	btfss	status,0,c
  5497  0012CA  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5498  0012CC  0100               	movlb	0	; () banked
  5499  0012CE  516A               	movf	sprintf@width& (0+255),w,b
  5500  0012D0  0100               	movlb	0	; () banked
  5501  0012D2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5502  0012D4  A4D8               	btfss	status,2,c
  5503  0012D6  D7EE               	goto	l3112
  5504  0012D8                     l3118:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;doprnt.c: 1438: if(flag & 0x03)
  5508  0012D8  C069  F060         	movff	sprintf@flag,??_sprintf
  5509  0012DC  0E03               	movlw	3
  5510  0012DE  0100               	movlb	0	; () banked
  5511  0012E0  1760               	andwf	??_sprintf& (0+255),f,b
  5512  0012E2  B4D8               	btfsc	status,2,c
  5513  0012E4  D008               	goto	l3124
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5517  0012E6  C030  FFD9         	movff	sprintf@sp,fsr2l
  5518  0012EA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5519  0012EE  0E2D               	movlw	45
  5520  0012F0  6EDF               	movwf	indf2,c
  5521                           
  5522                           ; BSR set to: 0
  5523  0012F2  4A30               	infsnz	sprintf@sp,f,c
  5524  0012F4  2A31               	incf	sprintf@sp+1,f,c
  5525  0012F6                     l3124:
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;doprnt.c: 1469: }
  5529                           ;doprnt.c: 1472: prec = c;
  5530  0012F6  C06C  F066         	movff	sprintf@c,sprintf@prec
  5531                           
  5532                           ;doprnt.c: 1474: while(prec--) {
  5533  0012FA  D02B               	goto	l3132
  5534  0012FC                     l3126:
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;doprnt.c: 1478: {
  5538                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5539  0012FC  0100               	movlb	0	; () banked
  5540  0012FE  5166               	movf	sprintf@prec& (0+255),w,b
  5541  001300  0D02               	mullw	2
  5542  001302  0E01               	movlw	low _dpowers
  5543  001304  24F3               	addwf	prodl,w,c
  5544  001306  6EF6               	movwf	tblptrl,c
  5545  001308  0E03               	movlw	high _dpowers
  5546  00130A  20F4               	addwfc	prodh,w,c
  5547  00130C  6EF7               	movwf	tblptrh,c
  5548  00130E                     	if	0	;There are less than 3 active tblptr bytes
  5549  00130E                     	endif
  5550  00130E  0009               	tblrd		*+
  5551  001310  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5552  001314  000A               	tblrd		*-
  5553  001316  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5554  00131A  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5555  00131E  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5556  001322  EC7C  F00D         	call	___lwdiv	;wreg free
  5557  001326  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5558  00132A  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5559  00132E  0E00               	movlw	0
  5560  001330  6E2E               	movwf	___lwmod@divisor+1,c
  5561  001332  0E0A               	movlw	10
  5562  001334  6E2D               	movwf	___lwmod@divisor,c
  5563  001336  ECA5  F00D         	call	___lwmod	;wreg free
  5564  00133A  502B               	movf	?___lwmod,w,c
  5565  00133C  0F30               	addlw	48
  5566  00133E  0100               	movlb	0	; () banked
  5567  001340  6F6C               	movwf	sprintf@c& (0+255),b
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;doprnt.c: 1523: }
  5571                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5572  001342  C030  FFD9         	movff	sprintf@sp,fsr2l
  5573  001346  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5574  00134A  C06C  FFDF         	movff	sprintf@c,indf2
  5575                           
  5576                           ; BSR set to: 0
  5577  00134E  4A30               	infsnz	sprintf@sp,f,c
  5578  001350  2A31               	incf	sprintf@sp+1,f,c
  5579  001352                     l3132:
  5580                           
  5581                           ; BSR set to: 0
  5582  001352  0100               	movlb	0	; () banked
  5583  001354  0766               	decf	sprintf@prec& (0+255),f,b
  5584  001356  0100               	movlb	0	; () banked
  5585  001358  2966               	incf	sprintf@prec& (0+255),w,b
  5586  00135A  A4D8               	btfss	status,2,c
  5587  00135C  D7CF               	goto	l3126
  5588  00135E                     l3134:
  5589  00135E  C032  FFF6         	movff	sprintf@f,tblptrl
  5590  001362  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5591  001366  4A32               	infsnz	sprintf@f,f,c
  5592  001368  2A33               	incf	sprintf@f+1,f,c
  5593  00136A                     	if	0	;tblptru may be non-zero
  5594  00136A                     	endif
  5595  00136A                     	if	0	;tblptru may be non-zero
  5596  00136A                     	endif
  5597  00136A  0008               	tblrd		*
  5598  00136C  CFF5 F06C          	movff	tablat,sprintf@c
  5599  001370  0100               	movlb	0	; () banked
  5600  001372  516C               	movf	sprintf@c& (0+255),w,b
  5601  001374  A4D8               	btfss	status,2,c
  5602  001376  D68B               	goto	l3028
  5603  001378                     l3136:
  5604                           
  5605                           ;doprnt.c: 1538: *sp = 0;
  5606  001378  C030  FFD9         	movff	sprintf@sp,fsr2l
  5607  00137C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5608  001380  0E00               	movlw	0
  5609  001382  6EDF               	movwf	indf2,c
  5610  001384  0012               	return	
  5611  001386                     __end_of_sprintf:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon	equ	0xFF2
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           indf1	equ	0xFE7
  5623                           plusw1	equ	0xFE3
  5624                           fsr1h	equ	0xFE2
  5625                           fsr1l	equ	0xFE1
  5626                           indf2	equ	0xFDF
  5627                           postinc2	equ	0xFDE
  5628                           postdec2	equ	0xFDD
  5629                           plusw2	equ	0xFDB
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function _isdigit *****************
  5635 ;; Defined at:
  5636 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;  c               1    wreg     unsigned char 
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;  c               1   37[COMRAM] unsigned char 
  5641 ;; Return value:  Size  Location     Type
  5642 ;;		None               void
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5650 ;;      Params:         0       0       0       0
  5651 ;;      Locals:         2       0       0       0
  5652 ;;      Temps:          1       0       0       0
  5653 ;;      Totals:         3       0       0       0
  5654 ;;Total ram usage:        3 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    3
  5657 ;; This function calls:
  5658 ;;		Nothing
  5659 ;; This function is called by:
  5660 ;;		_sprintf
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text19
  5665  001DEC                     __ptext19:
  5666                           	opt stack 0
  5667  001DEC                     _isdigit:
  5668                           	opt stack 26
  5669                           
  5670                           ;incstack = 0
  5671                           ;isdigit@c stored from wreg
  5672  001DEC  6E26               	movwf	isdigit@c,c
  5673  001DEE  0E00               	movlw	0
  5674  001DF0  6E25               	movwf	_isdigit$1986,c
  5675  001DF2  0E3A               	movlw	58
  5676  001DF4  6026               	cpfslt	isdigit@c,c
  5677  001DF6  D005               	goto	l2132
  5678  001DF8  0E2F               	movlw	47
  5679  001DFA  6426               	cpfsgt	isdigit@c,c
  5680  001DFC  D002               	goto	l2132
  5681  001DFE  0E01               	movlw	1
  5682  001E00  6E25               	movwf	_isdigit$1986,c
  5683  001E02                     l2132:
  5684  001E02  C025  F024         	movff	_isdigit$1986,??_isdigit
  5685  001E06  3024               	rrcf	??_isdigit,w,c
  5686  001E08  0012               	return	
  5687  001E0A                     __end_of_isdigit:
  5688                           	opt stack 0
  5689                           tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodh	equ	0xFF4
  5694                           prodl	equ	0xFF3
  5695                           intcon	equ	0xFF2
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           indf1	equ	0xFE7
  5699                           plusw1	equ	0xFE3
  5700                           fsr1h	equ	0xFE2
  5701                           fsr1l	equ	0xFE1
  5702                           indf2	equ	0xFDF
  5703                           postinc2	equ	0xFDE
  5704                           postdec2	equ	0xFDD
  5705                           plusw2	equ	0xFDB
  5706                           fsr2h	equ	0xFDA
  5707                           fsr2l	equ	0xFD9
  5708                           status	equ	0xFD8
  5709                           
  5710 ;; *************** function ___wmul *****************
  5711 ;; Defined at:
  5712 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;  multiplier      2   35[COMRAM] unsigned int 
  5715 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;  product         2   39[COMRAM] unsigned int 
  5718 ;; Return value:  Size  Location     Type
  5719 ;;                  2   35[COMRAM] unsigned int 
  5720 ;; Registers used:
  5721 ;;		wreg, status,2, status,0, prodl, prodh
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5727 ;;      Params:         4       0       0       0
  5728 ;;      Locals:         2       0       0       0
  5729 ;;      Temps:          0       0       0       0
  5730 ;;      Totals:         6       0       0       0
  5731 ;;Total ram usage:        6 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    3
  5734 ;; This function calls:
  5735 ;;		Nothing
  5736 ;; This function is called by:
  5737 ;;		_setMotorPWM
  5738 ;;		_sprintf
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           	psect	text20
  5743  001DA4                     __ptext20:
  5744                           	opt stack 0
  5745  001DA4                     ___wmul:
  5746                           	opt stack 24
  5747                           
  5748                           ;incstack = 0
  5749  001DA4  5024               	movf	___wmul@multiplier,w,c
  5750  001DA6  0226               	mulwf	___wmul@multiplicand,c
  5751  001DA8  CFF3 F028          	movff	prodl,___wmul@product
  5752  001DAC  CFF4 F029          	movff	prodh,___wmul@product+1
  5753  001DB0  5024               	movf	___wmul@multiplier,w,c
  5754  001DB2  0227               	mulwf	___wmul@multiplicand+1,c
  5755  001DB4  50F3               	movf	prodl,w,c
  5756  001DB6  2629               	addwf	___wmul@product+1,f,c
  5757  001DB8  5025               	movf	___wmul@multiplier+1,w,c
  5758  001DBA  0226               	mulwf	___wmul@multiplicand,c
  5759  001DBC  50F3               	movf	prodl,w,c
  5760  001DBE  2629               	addwf	___wmul@product+1,f,c
  5761  001DC0  C028  F024         	movff	___wmul@product,?___wmul
  5762  001DC4  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5763  001DC8  0012               	return	
  5764  001DCA                     __end_of___wmul:
  5765                           	opt stack 0
  5766                           tblptru	equ	0xFF8
  5767                           tblptrh	equ	0xFF7
  5768                           tblptrl	equ	0xFF6
  5769                           tablat	equ	0xFF5
  5770                           prodh	equ	0xFF4
  5771                           prodl	equ	0xFF3
  5772                           intcon	equ	0xFF2
  5773                           postinc0	equ	0xFEE
  5774                           wreg	equ	0xFE8
  5775                           indf1	equ	0xFE7
  5776                           plusw1	equ	0xFE3
  5777                           fsr1h	equ	0xFE2
  5778                           fsr1l	equ	0xFE1
  5779                           indf2	equ	0xFDF
  5780                           postinc2	equ	0xFDE
  5781                           postdec2	equ	0xFDD
  5782                           plusw2	equ	0xFDB
  5783                           fsr2h	equ	0xFDA
  5784                           fsr2l	equ	0xFD9
  5785                           status	equ	0xFD8
  5786                           
  5787 ;; *************** function ___lwmod *****************
  5788 ;; Defined at:
  5789 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;  dividend        2   42[COMRAM] unsigned int 
  5792 ;;  divisor         2   44[COMRAM] unsigned int 
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;  counter         1   46[COMRAM] unsigned char 
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  2   42[COMRAM] unsigned int 
  5797 ;; Registers used:
  5798 ;;		wreg, status,2, status,0
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5804 ;;      Params:         4       0       0       0
  5805 ;;      Locals:         1       0       0       0
  5806 ;;      Temps:          0       0       0       0
  5807 ;;      Totals:         5       0       0       0
  5808 ;;Total ram usage:        5 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    3
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_sprintf
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text21
  5819  001B4A                     __ptext21:
  5820                           	opt stack 0
  5821  001B4A                     ___lwmod:
  5822                           	opt stack 26
  5823                           
  5824                           ;incstack = 0
  5825  001B4A  502D               	movf	___lwmod@divisor,w,c
  5826  001B4C  102E               	iorwf	___lwmod@divisor+1,w,c
  5827  001B4E  B4D8               	btfsc	status,2,c
  5828  001B50  D018               	goto	l907
  5829  001B52  0E01               	movlw	1
  5830  001B54  6E2F               	movwf	___lwmod@counter,c
  5831  001B56  D004               	goto	l2164
  5832  001B58                     l2162:
  5833  001B58  90D8               	bcf	status,0,c
  5834  001B5A  362D               	rlcf	___lwmod@divisor,f,c
  5835  001B5C  362E               	rlcf	___lwmod@divisor+1,f,c
  5836  001B5E  2A2F               	incf	___lwmod@counter,f,c
  5837  001B60                     l2164:
  5838  001B60  AE2E               	btfss	___lwmod@divisor+1,7,c
  5839  001B62  D7FA               	goto	l2162
  5840  001B64                     l2166:
  5841  001B64  502D               	movf	___lwmod@divisor,w,c
  5842  001B66  5C2B               	subwf	___lwmod@dividend,w,c
  5843  001B68  502E               	movf	___lwmod@divisor+1,w,c
  5844  001B6A  582C               	subwfb	___lwmod@dividend+1,w,c
  5845  001B6C  A0D8               	btfss	status,0,c
  5846  001B6E  D004               	goto	l2170
  5847  001B70  502D               	movf	___lwmod@divisor,w,c
  5848  001B72  5E2B               	subwf	___lwmod@dividend,f,c
  5849  001B74  502E               	movf	___lwmod@divisor+1,w,c
  5850  001B76  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5851  001B78                     l2170:
  5852  001B78  90D8               	bcf	status,0,c
  5853  001B7A  322E               	rrcf	___lwmod@divisor+1,f,c
  5854  001B7C  322D               	rrcf	___lwmod@divisor,f,c
  5855  001B7E  2E2F               	decfsz	___lwmod@counter,f,c
  5856  001B80  D7F1               	goto	l2166
  5857  001B82                     l907:
  5858  001B82  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5859  001B86  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5860  001B8A  0012               	return		;funcret
  5861  001B8C                     __end_of___lwmod:
  5862                           	opt stack 0
  5863                           tblptru	equ	0xFF8
  5864                           tblptrh	equ	0xFF7
  5865                           tblptrl	equ	0xFF6
  5866                           tablat	equ	0xFF5
  5867                           prodh	equ	0xFF4
  5868                           prodl	equ	0xFF3
  5869                           intcon	equ	0xFF2
  5870                           postinc0	equ	0xFEE
  5871                           wreg	equ	0xFE8
  5872                           indf1	equ	0xFE7
  5873                           plusw1	equ	0xFE3
  5874                           fsr1h	equ	0xFE2
  5875                           fsr1l	equ	0xFE1
  5876                           indf2	equ	0xFDF
  5877                           postinc2	equ	0xFDE
  5878                           postdec2	equ	0xFDD
  5879                           plusw2	equ	0xFDB
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function ___lwdiv *****************
  5885 ;; Defined at:
  5886 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  dividend        2   35[COMRAM] unsigned int 
  5889 ;;  divisor         2   37[COMRAM] unsigned int 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  quotient        2   39[COMRAM] unsigned int 
  5892 ;;  counter         1   41[COMRAM] unsigned char 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  2   35[COMRAM] unsigned int 
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5902 ;;      Params:         4       0       0       0
  5903 ;;      Locals:         3       0       0       0
  5904 ;;      Temps:          0       0       0       0
  5905 ;;      Totals:         7       0       0       0
  5906 ;;Total ram usage:        7 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    3
  5909 ;; This function calls:
  5910 ;;		Nothing
  5911 ;; This function is called by:
  5912 ;;		_sprintf
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text22
  5917  001AF8                     __ptext22:
  5918                           	opt stack 0
  5919  001AF8                     ___lwdiv:
  5920                           	opt stack 26
  5921                           
  5922                           ;incstack = 0
  5923  001AF8  0E00               	movlw	0
  5924  001AFA  6E29               	movwf	___lwdiv@quotient+1,c
  5925  001AFC  0E00               	movlw	0
  5926  001AFE  6E28               	movwf	___lwdiv@quotient,c
  5927  001B00  5026               	movf	___lwdiv@divisor,w,c
  5928  001B02  1027               	iorwf	___lwdiv@divisor+1,w,c
  5929  001B04  B4D8               	btfsc	status,2,c
  5930  001B06  D01C               	goto	l897
  5931  001B08  0E01               	movlw	1
  5932  001B0A  6E2A               	movwf	___lwdiv@counter,c
  5933  001B0C  D004               	goto	l2144
  5934  001B0E                     l2142:
  5935  001B0E  90D8               	bcf	status,0,c
  5936  001B10  3626               	rlcf	___lwdiv@divisor,f,c
  5937  001B12  3627               	rlcf	___lwdiv@divisor+1,f,c
  5938  001B14  2A2A               	incf	___lwdiv@counter,f,c
  5939  001B16                     l2144:
  5940  001B16  AE27               	btfss	___lwdiv@divisor+1,7,c
  5941  001B18  D7FA               	goto	l2142
  5942  001B1A                     l2146:
  5943  001B1A  90D8               	bcf	status,0,c
  5944  001B1C  3628               	rlcf	___lwdiv@quotient,f,c
  5945  001B1E  3629               	rlcf	___lwdiv@quotient+1,f,c
  5946  001B20  5026               	movf	___lwdiv@divisor,w,c
  5947  001B22  5C24               	subwf	___lwdiv@dividend,w,c
  5948  001B24  5027               	movf	___lwdiv@divisor+1,w,c
  5949  001B26  5825               	subwfb	___lwdiv@dividend+1,w,c
  5950  001B28  A0D8               	btfss	status,0,c
  5951  001B2A  D005               	goto	l2154
  5952  001B2C  5026               	movf	___lwdiv@divisor,w,c
  5953  001B2E  5E24               	subwf	___lwdiv@dividend,f,c
  5954  001B30  5027               	movf	___lwdiv@divisor+1,w,c
  5955  001B32  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5956  001B34  8028               	bsf	___lwdiv@quotient,0,c
  5957  001B36                     l2154:
  5958  001B36  90D8               	bcf	status,0,c
  5959  001B38  3227               	rrcf	___lwdiv@divisor+1,f,c
  5960  001B3A  3226               	rrcf	___lwdiv@divisor,f,c
  5961  001B3C  2E2A               	decfsz	___lwdiv@counter,f,c
  5962  001B3E  D7ED               	goto	l2146
  5963  001B40                     l897:
  5964  001B40  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5965  001B44  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5966  001B48  0012               	return		;funcret
  5967  001B4A                     __end_of___lwdiv:
  5968                           	opt stack 0
  5969                           tblptru	equ	0xFF8
  5970                           tblptrh	equ	0xFF7
  5971                           tblptrl	equ	0xFF6
  5972                           tablat	equ	0xFF5
  5973                           prodh	equ	0xFF4
  5974                           prodl	equ	0xFF3
  5975                           intcon	equ	0xFF2
  5976                           postinc0	equ	0xFEE
  5977                           wreg	equ	0xFE8
  5978                           indf1	equ	0xFE7
  5979                           plusw1	equ	0xFE3
  5980                           fsr1h	equ	0xFE2
  5981                           fsr1l	equ	0xFE1
  5982                           indf2	equ	0xFDF
  5983                           postinc2	equ	0xFDE
  5984                           postdec2	equ	0xFDD
  5985                           plusw2	equ	0xFDB
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _grabRightIR *****************
  5991 ;; Defined at:
  5992 ;;		line 74 in file "IR_Reading.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;		None
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5997 ;;  i               1   42[COMRAM] unsigned char 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  2   35[COMRAM] unsigned int 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6007 ;;      Params:         2       0       0       0
  6008 ;;      Locals:         3       0       0       0
  6009 ;;      Temps:          3       0       0       0
  6010 ;;      Totals:         8       0       0       0
  6011 ;;Total ram usage:        8 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    3
  6014 ;; This function calls:
  6015 ;;		Nothing
  6016 ;; This function is called by:
  6017 ;;		_ScanIR
  6018 ;;		_ScanWithRange
  6019 ;;		_main
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           	psect	text23
  6024  00195E                     __ptext23:
  6025                           	opt stack 0
  6026  00195E                     _grabRightIR:
  6027                           	opt stack 27
  6028                           
  6029                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6030                           
  6031                           ;incstack = 0
  6032  00195E  0E00               	movlw	0
  6033  001960  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6034  001962  0E00               	movlw	0
  6035  001964  6E29               	movwf	grabRightIR@IR_signal,c
  6036                           
  6037                           ;IR_Reading.c: 77: unsigned char i=0;
  6038  001966  0E00               	movlw	0
  6039  001968  6E2B               	movwf	grabRightIR@i,c
  6040                           
  6041                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6042  00196A  0E00               	movlw	0
  6043  00196C  6E2B               	movwf	grabRightIR@i,c
  6044  00196E                     l2206:
  6045  00196E  0E03               	movlw	3
  6046  001970  642B               	cpfsgt	grabRightIR@i,c
  6047  001972  D001               	goto	l2210
  6048  001974  D01E               	goto	l2216
  6049  001976                     l2210:
  6050                           
  6051                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6052  001976  5069               	movf	3945,w,c	;volatile
  6053  001978  6E26               	movwf	??_grabRightIR& (0+255),c
  6054  00197A  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6055  00197C  0E07               	movlw	7
  6056  00197E                     u1505:
  6057  00197E  90D8               	bcf	status,0,c
  6058  001980  3626               	rlcf	??_grabRightIR,f,c
  6059  001982  3627               	rlcf	??_grabRightIR+1,f,c
  6060  001984  2EE8               	decfsz	wreg,f,c
  6061  001986  D7FB               	goto	u1505
  6062  001988  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6063  00198C  90D8               	bcf	status,0,c
  6064  00198E  3228               	rrcf	??_grabRightIR+2,f,c
  6065  001990  5028               	movf	??_grabRightIR+2,w,c
  6066  001992  1226               	iorwf	??_grabRightIR,f,c
  6067  001994  0E00               	movlw	0
  6068  001996  1227               	iorwf	??_grabRightIR+1,f,c
  6069  001998  5026               	movf	??_grabRightIR,w,c
  6070  00199A  2629               	addwf	grabRightIR@IR_signal,f,c
  6071  00199C  5027               	movf	??_grabRightIR+1,w,c
  6072  00199E  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6073                           
  6074                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6075  0019A0  0E82               	movlw	130
  6076  0019A2  6E26               	movwf	??_grabRightIR& (0+255),c
  6077  0019A4  0EDE               	movlw	222
  6078  0019A6                     u3167:
  6079  0019A6  2EE8               	decfsz	wreg,f,c
  6080  0019A8  D7FE               	goto	u3167
  6081  0019AA  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6082  0019AC  D7FC               	goto	u3167
  6083  0019AE  2A2B               	incf	grabRightIR@i,f,c
  6084  0019B0  D7DE               	goto	l2206
  6085  0019B2                     l2216:
  6086                           
  6087                           ;IR_Reading.c: 83: }
  6088                           ;IR_Reading.c: 85: return IR_signal>>2;
  6089  0019B2  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6090  0019B6  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6091  0019BA  90D8               	bcf	status,0,c
  6092  0019BC  3227               	rrcf	??_grabRightIR+1,f,c
  6093  0019BE  3226               	rrcf	??_grabRightIR,f,c
  6094  0019C0  90D8               	bcf	status,0,c
  6095  0019C2  3227               	rrcf	??_grabRightIR+1,f,c
  6096  0019C4  3226               	rrcf	??_grabRightIR,f,c
  6097  0019C6  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6098  0019CA  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6099  0019CE  0012               	return	
  6100  0019D0                     __end_of_grabRightIR:
  6101                           	opt stack 0
  6102                           tblptru	equ	0xFF8
  6103                           tblptrh	equ	0xFF7
  6104                           tblptrl	equ	0xFF6
  6105                           tablat	equ	0xFF5
  6106                           prodh	equ	0xFF4
  6107                           prodl	equ	0xFF3
  6108                           intcon	equ	0xFF2
  6109                           postinc0	equ	0xFEE
  6110                           wreg	equ	0xFE8
  6111                           indf1	equ	0xFE7
  6112                           plusw1	equ	0xFE3
  6113                           fsr1h	equ	0xFE2
  6114                           fsr1l	equ	0xFE1
  6115                           indf2	equ	0xFDF
  6116                           postinc2	equ	0xFDE
  6117                           postdec2	equ	0xFDD
  6118                           plusw2	equ	0xFDB
  6119                           fsr2h	equ	0xFDA
  6120                           fsr2l	equ	0xFD9
  6121                           status	equ	0xFD8
  6122                           
  6123 ;; *************** function _grabLeftIR *****************
  6124 ;; Defined at:
  6125 ;;		line 90 in file "IR_Reading.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6130 ;;  i               1   42[COMRAM] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  2   35[COMRAM] unsigned int 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6140 ;;      Params:         2       0       0       0
  6141 ;;      Locals:         3       0       0       0
  6142 ;;      Temps:          3       0       0       0
  6143 ;;      Totals:         8       0       0       0
  6144 ;;Total ram usage:        8 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    3
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_ScanIR
  6151 ;;		_ScanWithRange
  6152 ;;		_main
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text24
  6157  0019D0                     __ptext24:
  6158                           	opt stack 0
  6159  0019D0                     _grabLeftIR:
  6160                           	opt stack 27
  6161                           
  6162                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6163                           
  6164                           ;incstack = 0
  6165  0019D0  0E00               	movlw	0
  6166  0019D2  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6167  0019D4  0E00               	movlw	0
  6168  0019D6  6E29               	movwf	grabLeftIR@IR_signal,c
  6169                           
  6170                           ;IR_Reading.c: 93: unsigned char i=0;
  6171  0019D8  0E00               	movlw	0
  6172  0019DA  6E2B               	movwf	grabLeftIR@i,c
  6173                           
  6174                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6175  0019DC  0E00               	movlw	0
  6176  0019DE  6E2B               	movwf	grabLeftIR@i,c
  6177  0019E0                     l2222:
  6178  0019E0  0E03               	movlw	3
  6179  0019E2  642B               	cpfsgt	grabLeftIR@i,c
  6180  0019E4  D001               	goto	l2226
  6181  0019E6  D01E               	goto	l2232
  6182  0019E8                     l2226:
  6183                           
  6184                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6185  0019E8  5067               	movf	3943,w,c	;volatile
  6186  0019EA  6E26               	movwf	??_grabLeftIR& (0+255),c
  6187  0019EC  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6188  0019EE  0E07               	movlw	7
  6189  0019F0                     u1535:
  6190  0019F0  90D8               	bcf	status,0,c
  6191  0019F2  3626               	rlcf	??_grabLeftIR,f,c
  6192  0019F4  3627               	rlcf	??_grabLeftIR+1,f,c
  6193  0019F6  2EE8               	decfsz	wreg,f,c
  6194  0019F8  D7FB               	goto	u1535
  6195  0019FA  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6196  0019FE  90D8               	bcf	status,0,c
  6197  001A00  3228               	rrcf	??_grabLeftIR+2,f,c
  6198  001A02  5028               	movf	??_grabLeftIR+2,w,c
  6199  001A04  1226               	iorwf	??_grabLeftIR,f,c
  6200  001A06  0E00               	movlw	0
  6201  001A08  1227               	iorwf	??_grabLeftIR+1,f,c
  6202  001A0A  5026               	movf	??_grabLeftIR,w,c
  6203  001A0C  2629               	addwf	grabLeftIR@IR_signal,f,c
  6204  001A0E  5027               	movf	??_grabLeftIR+1,w,c
  6205  001A10  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6206                           
  6207                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6208  001A12  0E82               	movlw	130
  6209  001A14  6E26               	movwf	??_grabLeftIR& (0+255),c
  6210  001A16  0EDE               	movlw	222
  6211  001A18                     u3177:
  6212  001A18  2EE8               	decfsz	wreg,f,c
  6213  001A1A  D7FE               	goto	u3177
  6214  001A1C  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6215  001A1E  D7FC               	goto	u3177
  6216  001A20  2A2B               	incf	grabLeftIR@i,f,c
  6217  001A22  D7DE               	goto	l2222
  6218  001A24                     l2232:
  6219                           
  6220                           ;IR_Reading.c: 99: }
  6221                           ;IR_Reading.c: 101: return IR_signal>>2;
  6222  001A24  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6223  001A28  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6224  001A2C  90D8               	bcf	status,0,c
  6225  001A2E  3227               	rrcf	??_grabLeftIR+1,f,c
  6226  001A30  3226               	rrcf	??_grabLeftIR,f,c
  6227  001A32  90D8               	bcf	status,0,c
  6228  001A34  3227               	rrcf	??_grabLeftIR+1,f,c
  6229  001A36  3226               	rrcf	??_grabLeftIR,f,c
  6230  001A38  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6231  001A3C  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6232  001A40  0012               	return	
  6233  001A42                     __end_of_grabLeftIR:
  6234                           	opt stack 0
  6235                           tblptru	equ	0xFF8
  6236                           tblptrh	equ	0xFF7
  6237                           tblptrl	equ	0xFF6
  6238                           tablat	equ	0xFF5
  6239                           prodh	equ	0xFF4
  6240                           prodl	equ	0xFF3
  6241                           intcon	equ	0xFF2
  6242                           postinc0	equ	0xFEE
  6243                           wreg	equ	0xFE8
  6244                           indf1	equ	0xFE7
  6245                           plusw1	equ	0xFE3
  6246                           fsr1h	equ	0xFE2
  6247                           fsr1l	equ	0xFE1
  6248                           indf2	equ	0xFDF
  6249                           postinc2	equ	0xFDE
  6250                           postdec2	equ	0xFDD
  6251                           plusw2	equ	0xFDB
  6252                           fsr2h	equ	0xFDA
  6253                           fsr2l	equ	0xFD9
  6254                           status	equ	0xFD8
  6255                           
  6256 ;; *************** function _SetLine *****************
  6257 ;; Defined at:
  6258 ;;		line 74 in file "LCD.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  line            1    wreg     unsigned char 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  line            1   41[COMRAM] unsigned char 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;		None               void
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6272 ;;      Params:         0       0       0       0
  6273 ;;      Locals:         1       0       0       0
  6274 ;;      Temps:          0       0       0       0
  6275 ;;      Totals:         1       0       0       0
  6276 ;;Total ram usage:        1 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    6
  6279 ;; This function calls:
  6280 ;;		_SendLCD
  6281 ;; This function is called by:
  6282 ;;		_ScanIR
  6283 ;;		_ScanWithRange
  6284 ;;		_main
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text25
  6289  001D1E                     __ptext25:
  6290                           	opt stack 0
  6291  001D1E                     _SetLine:
  6292                           	opt stack 24
  6293                           
  6294                           ;incstack = 0
  6295                           ;SetLine@line stored from wreg
  6296  001D1E  6E2A               	movwf	SetLine@line,c
  6297                           
  6298                           ;LCD.c: 75: if (line==1) {
  6299  001D20  042A               	decf	SetLine@line,w,c
  6300  001D22  A4D8               	btfss	status,2,c
  6301  001D24  D006               	goto	l2240
  6302                           
  6303                           ;LCD.c: 76: SendLCD(0x80,0);
  6304  001D26  0E00               	movlw	0
  6305  001D28  6E28               	movwf	SendLCD@type,c
  6306  001D2A  0E80               	movlw	128
  6307  001D2C  ECA7  F00E         	call	_SendLCD
  6308                           
  6309                           ;LCD.c: 77: } else if (line==2) {
  6310  001D30  D009               	goto	l2244
  6311  001D32                     l2240:
  6312  001D32  0E02               	movlw	2
  6313  001D34  182A               	xorwf	SetLine@line,w,c
  6314  001D36  A4D8               	btfss	status,2,c
  6315  001D38  D005               	goto	l2244
  6316                           
  6317                           ;LCD.c: 78: SendLCD(0xC0,0);
  6318  001D3A  0E00               	movlw	0
  6319  001D3C  6E28               	movwf	SendLCD@type,c
  6320  001D3E  0EC0               	movlw	192
  6321  001D40  ECA7  F00E         	call	_SendLCD
  6322  001D44                     l2244:
  6323                           
  6324                           ;LCD.c: 79: }
  6325                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6326  001D44  0E21               	movlw	33
  6327  001D46                     u3187:
  6328  001D46  2EE8               	decfsz	wreg,f,c
  6329  001D48  D7FE               	goto	u3187
  6330  001D4A  F000               	nop	
  6331  001D4C  0012               	return		;funcret
  6332  001D4E                     __end_of_SetLine:
  6333                           	opt stack 0
  6334                           tblptru	equ	0xFF8
  6335                           tblptrh	equ	0xFF7
  6336                           tblptrl	equ	0xFF6
  6337                           tablat	equ	0xFF5
  6338                           prodh	equ	0xFF4
  6339                           prodl	equ	0xFF3
  6340                           intcon	equ	0xFF2
  6341                           postinc0	equ	0xFEE
  6342                           wreg	equ	0xFE8
  6343                           indf1	equ	0xFE7
  6344                           plusw1	equ	0xFE3
  6345                           fsr1h	equ	0xFE2
  6346                           fsr1l	equ	0xFE1
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           plusw2	equ	0xFDB
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355 ;; *************** function _LCD_String *****************
  6356 ;; Defined at:
  6357 ;;		line 83 in file "LCD.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  string          2   41[COMRAM] PTR unsigned char 
  6360 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6361 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6362 ;;		 -> STR_1(12), 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;		None               void
  6367 ;; Registers used:
  6368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6374 ;;      Params:         2       0       0       0
  6375 ;;      Locals:         0       0       0       0
  6376 ;;      Temps:          0       0       0       0
  6377 ;;      Totals:         2       0       0       0
  6378 ;;Total ram usage:        2 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    6
  6381 ;; This function calls:
  6382 ;;		_SendLCD
  6383 ;; This function is called by:
  6384 ;;		_ScanIR
  6385 ;;		_ScanWithRange
  6386 ;;		_main
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	text26
  6391  001A42                     __ptext26:
  6392                           	opt stack 0
  6393  001A42                     _LCD_String:
  6394                           	opt stack 23
  6395                           
  6396                           ;LCD.c: 85: while(*string != 0){
  6397                           
  6398                           ;incstack = 0
  6399  001A42  D01A               	goto	l2254
  6400  001A44                     l2248:
  6401                           
  6402                           ;LCD.c: 88: SendLCD(*string++,1);
  6403  001A44  0E01               	movlw	1
  6404  001A46  6E28               	movwf	SendLCD@type,c
  6405  001A48  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6406  001A4C  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6407  001A50  6AF8               	clrf	tblptru,c
  6408  001A52  0E02               	movlw	(high __ramtop+-1)
  6409  001A54  64F7               	cpfsgt	tblptrh,c
  6410  001A56  D003               	bra	u1577
  6411  001A58  0008               	tblrd		*
  6412  001A5A  50F5               	movf	tablat,w,c
  6413  001A5C  D005               	bra	u1570
  6414  001A5E                     u1577:
  6415  001A5E  CFF6 FFE1          	movff	tblptrl,fsr1l
  6416  001A62  CFF7 FFE2          	movff	tblptrh,fsr1h
  6417  001A66  50E7               	movf	indf1,w,c
  6418  001A68                     u1570:
  6419  001A68  ECA7  F00E         	call	_SendLCD
  6420  001A6C  4A2A               	infsnz	LCD_String@string,f,c
  6421  001A6E  2A2B               	incf	LCD_String@string+1,f,c
  6422                           
  6423                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6424  001A70  0E21               	movlw	33
  6425  001A72                     u3197:
  6426  001A72  2EE8               	decfsz	wreg,f,c
  6427  001A74  D7FE               	goto	u3197
  6428  001A76  F000               	nop	
  6429  001A78                     l2254:
  6430  001A78  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6431  001A7C  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6432  001A80  6AF8               	clrf	tblptru,c
  6433  001A82  0E02               	movlw	(high __ramtop+-1)
  6434  001A84  64F7               	cpfsgt	tblptrh,c
  6435  001A86  D003               	bra	u1587
  6436  001A88  0008               	tblrd		*
  6437  001A8A  50F5               	movf	tablat,w,c
  6438  001A8C  D005               	bra	u1580
  6439  001A8E                     u1587:
  6440  001A8E  CFF6 FFE1          	movff	tblptrl,fsr1l
  6441  001A92  CFF7 FFE2          	movff	tblptrh,fsr1h
  6442  001A96  50E7               	movf	indf1,w,c
  6443  001A98                     u1580:
  6444  001A98  0900               	iorlw	0
  6445  001A9A  B4D8               	btfsc	status,2,c
  6446  001A9C  0012               	return	
  6447  001A9E  D7D2               	goto	l2248
  6448  001AA0                     __end_of_LCD_String:
  6449                           	opt stack 0
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           intcon	equ	0xFF2
  6457                           postinc0	equ	0xFEE
  6458                           wreg	equ	0xFE8
  6459                           indf1	equ	0xFE7
  6460                           plusw1	equ	0xFE3
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           postdec2	equ	0xFDD
  6466                           plusw2	equ	0xFDB
  6467                           fsr2h	equ	0xFDA
  6468                           fsr2l	equ	0xFD9
  6469                           status	equ	0xFD8
  6470                           
  6471 ;; *************** function _SendLCD *****************
  6472 ;; Defined at:
  6473 ;;		line 27 in file "LCD.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;  Byte            1    wreg     unsigned char 
  6476 ;;  type            1   39[COMRAM] unsigned char 
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;  Byte            1   40[COMRAM] unsigned char 
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		wreg, status,2, status,0, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6488 ;;      Params:         1       0       0       0
  6489 ;;      Locals:         1       0       0       0
  6490 ;;      Temps:          0       0       0       0
  6491 ;;      Totals:         2       0       0       0
  6492 ;;Total ram usage:        2 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    5
  6495 ;; This function calls:
  6496 ;;		_LCDout
  6497 ;; This function is called by:
  6498 ;;		_initLCD
  6499 ;;		_SetLine
  6500 ;;		_LCD_String
  6501 ;;		_ScanIR
  6502 ;;		_ScanWithRange
  6503 ;;		_main
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text27
  6508  001D4E                     __ptext27:
  6509                           	opt stack 0
  6510  001D4E                     _SendLCD:
  6511                           	opt stack 24
  6512                           
  6513                           ;incstack = 0
  6514                           ;SendLCD@Byte stored from wreg
  6515  001D4E  6E29               	movwf	SendLCD@Byte,c
  6516                           
  6517                           ;LCD.c: 30: LATAbits.LATA6=type;
  6518  001D50  B028               	btfsc	SendLCD@type,0,c
  6519  001D52  D002               	bra	u1365
  6520  001D54  9C89               	bcf	3977,6,c	;volatile
  6521  001D56  D001               	bra	u1366
  6522  001D58                     u1365:
  6523  001D58  8C89               	bsf	3977,6,c	;volatile
  6524  001D5A                     u1366:
  6525                           
  6526                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6527  001D5A  3829               	swapf	SendLCD@Byte,w,c
  6528  001D5C  0B0F               	andlw	15
  6529  001D5E  0B0F               	andlw	15
  6530  001D60  ECDD  F00A         	call	_LCDout
  6531                           
  6532                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6533  001D64  0E06               	movlw	6
  6534  001D66                     u3207:
  6535  001D66  2EE8               	decfsz	wreg,f,c
  6536  001D68  D7FE               	goto	u3207
  6537  001D6A  D000               	nop2		;nop
  6538                           
  6539                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6540  001D6C  5029               	movf	SendLCD@Byte,w,c
  6541  001D6E  0B0F               	andlw	15
  6542  001D70  ECDD  F00A         	call	_LCDout
  6543                           
  6544                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6545  001D74  0E21               	movlw	33
  6546  001D76                     u3217:
  6547  001D76  2EE8               	decfsz	wreg,f,c
  6548  001D78  D7FE               	goto	u3217
  6549  001D7A  F000               	nop	
  6550  001D7C  0012               	return		;funcret
  6551  001D7E                     __end_of_SendLCD:
  6552                           	opt stack 0
  6553                           tblptru	equ	0xFF8
  6554                           tblptrh	equ	0xFF7
  6555                           tblptrl	equ	0xFF6
  6556                           tablat	equ	0xFF5
  6557                           prodh	equ	0xFF4
  6558                           prodl	equ	0xFF3
  6559                           intcon	equ	0xFF2
  6560                           postinc0	equ	0xFEE
  6561                           wreg	equ	0xFE8
  6562                           indf1	equ	0xFE7
  6563                           plusw1	equ	0xFE3
  6564                           fsr1h	equ	0xFE2
  6565                           fsr1l	equ	0xFE1
  6566                           indf2	equ	0xFDF
  6567                           postinc2	equ	0xFDE
  6568                           postdec2	equ	0xFDD
  6569                           plusw2	equ	0xFDB
  6570                           fsr2h	equ	0xFDA
  6571                           fsr2l	equ	0xFD9
  6572                           status	equ	0xFD8
  6573                           
  6574 ;; *************** function _LCDout *****************
  6575 ;; Defined at:
  6576 ;;		line 14 in file "LCD.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  number          1    wreg     unsigned char 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  number          1   38[COMRAM] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;		None               void
  6583 ;; Registers used:
  6584 ;;		wreg, status,2, status,0, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6590 ;;      Params:         0       0       0       0
  6591 ;;      Locals:         1       0       0       0
  6592 ;;      Temps:          3       0       0       0
  6593 ;;      Totals:         4       0       0       0
  6594 ;;Total ram usage:        4 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    4
  6597 ;; This function calls:
  6598 ;;		_E_TOG
  6599 ;; This function is called by:
  6600 ;;		_SendLCD
  6601 ;;		_initLCD
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           	psect	text28
  6606  0015BA                     __ptext28:
  6607                           	opt stack 0
  6608  0015BA                     _LCDout:
  6609                           	opt stack 24
  6610                           
  6611                           ;incstack = 0
  6612                           ;LCDout@number stored from wreg
  6613  0015BA  6E27               	movwf	LCDout@number,c
  6614                           
  6615                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6616  0015BC  5027               	movf	LCDout@number,w,c
  6617  0015BE  6E24               	movwf	??_LCDout& (0+255),c
  6618  0015C0  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6619  0015C2  0E07               	movlw	7
  6620  0015C4                     u1255:
  6621  0015C4  90D8               	bcf	status,0,c
  6622  0015C6  3624               	rlcf	??_LCDout,f,c
  6623  0015C8  3625               	rlcf	??_LCDout+1,f,c
  6624  0015CA  2EE8               	decfsz	wreg,f,c
  6625  0015CC  D7FB               	goto	u1255
  6626  0015CE  0E07               	movlw	7
  6627  0015D0  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6628  0015D2                     u1265:
  6629  0015D2  3425               	rlcf	??_LCDout+1,w,c
  6630  0015D4  3225               	rrcf	??_LCDout+1,f,c
  6631  0015D6  3224               	rrcf	??_LCDout,f,c
  6632  0015D8  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6633  0015DA  D7FB               	goto	u1265
  6634  0015DC  4624               	rlncf	??_LCDout,f,c
  6635  0015DE  508B               	movf	3979,w,c	;volatile
  6636  0015E0  1824               	xorwf	??_LCDout,w,c
  6637  0015E2  0BFD               	andlw	-3
  6638  0015E4  1824               	xorwf	??_LCDout,w,c
  6639  0015E6  6E8B               	movwf	3979,c	;volatile
  6640                           
  6641                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6642  0015E8  5027               	movf	LCDout@number,w,c
  6643  0015EA  6E24               	movwf	??_LCDout& (0+255),c
  6644  0015EC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6645  0015EE  0E06               	movlw	6
  6646  0015F0                     u1275:
  6647  0015F0  90D8               	bcf	status,0,c
  6648  0015F2  3624               	rlcf	??_LCDout,f,c
  6649  0015F4  3625               	rlcf	??_LCDout+1,f,c
  6650  0015F6  2EE8               	decfsz	wreg,f,c
  6651  0015F8  D7FB               	goto	u1275
  6652  0015FA  0E07               	movlw	7
  6653  0015FC  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6654  0015FE                     u1285:
  6655  0015FE  3425               	rlcf	??_LCDout+1,w,c
  6656  001600  3225               	rrcf	??_LCDout+1,f,c
  6657  001602  3224               	rrcf	??_LCDout,f,c
  6658  001604  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6659  001606  D7FB               	goto	u1285
  6660  001608  4624               	rlncf	??_LCDout,f,c
  6661  00160A  4624               	rlncf	??_LCDout,f,c
  6662  00160C  508B               	movf	3979,w,c	;volatile
  6663  00160E  1824               	xorwf	??_LCDout,w,c
  6664  001610  0BFB               	andlw	-5
  6665  001612  1824               	xorwf	??_LCDout,w,c
  6666  001614  6E8B               	movwf	3979,c	;volatile
  6667                           
  6668                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6669  001616  5027               	movf	LCDout@number,w,c
  6670  001618  6E24               	movwf	??_LCDout& (0+255),c
  6671  00161A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6672  00161C  0E05               	movlw	5
  6673  00161E                     u1295:
  6674  00161E  90D8               	bcf	status,0,c
  6675  001620  3624               	rlcf	??_LCDout,f,c
  6676  001622  3625               	rlcf	??_LCDout+1,f,c
  6677  001624  2EE8               	decfsz	wreg,f,c
  6678  001626  D7FB               	goto	u1295
  6679  001628  0E07               	movlw	7
  6680  00162A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6681  00162C                     u1305:
  6682  00162C  3425               	rlcf	??_LCDout+1,w,c
  6683  00162E  3225               	rrcf	??_LCDout+1,f,c
  6684  001630  3224               	rrcf	??_LCDout,f,c
  6685  001632  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6686  001634  D7FB               	goto	u1305
  6687  001636  508C               	movf	3980,w,c	;volatile
  6688  001638  1824               	xorwf	??_LCDout,w,c
  6689  00163A  0BFE               	andlw	-2
  6690  00163C  1824               	xorwf	??_LCDout,w,c
  6691  00163E  6E8C               	movwf	3980,c	;volatile
  6692                           
  6693                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6694  001640  5027               	movf	LCDout@number,w,c
  6695  001642  6E24               	movwf	??_LCDout& (0+255),c
  6696  001644  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6697  001646  3A24               	swapf	??_LCDout,f,c
  6698  001648  3A25               	swapf	??_LCDout+1,f,c
  6699  00164A  0EF0               	movlw	240
  6700  00164C  1625               	andwf	??_LCDout+1,f,c
  6701  00164E  5024               	movf	??_LCDout,w,c
  6702  001650  0B0F               	andlw	15
  6703  001652  1225               	iorwf	??_LCDout+1,f,c
  6704  001654  0EF0               	movlw	240
  6705  001656  1624               	andwf	??_LCDout,f,c
  6706  001658  0E07               	movlw	7
  6707  00165A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6708  00165C                     u1315:
  6709  00165C  3425               	rlcf	??_LCDout+1,w,c
  6710  00165E  3225               	rrcf	??_LCDout+1,f,c
  6711  001660  3224               	rrcf	??_LCDout,f,c
  6712  001662  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6713  001664  D7FB               	goto	u1315
  6714  001666  4624               	rlncf	??_LCDout,f,c
  6715  001668  508C               	movf	3980,w,c	;volatile
  6716  00166A  1824               	xorwf	??_LCDout,w,c
  6717  00166C  0BFD               	andlw	-3
  6718  00166E  1824               	xorwf	??_LCDout,w,c
  6719  001670  6E8C               	movwf	3980,c	;volatile
  6720                           
  6721                           ;LCD.c: 21: E_TOG();
  6722  001672  EC1C  F00F         	call	_E_TOG	;wreg free
  6723                           
  6724                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6725  001676  0E03               	movlw	3
  6726  001678                     u3227:
  6727  001678  2EE8               	decfsz	wreg,f,c
  6728  00167A  D7FE               	goto	u3227
  6729  00167C  F000               	nop	
  6730  00167E  0012               	return		;funcret
  6731  001680                     __end_of_LCDout:
  6732                           	opt stack 0
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           intcon	equ	0xFF2
  6740                           postinc0	equ	0xFEE
  6741                           wreg	equ	0xFE8
  6742                           indf1	equ	0xFE7
  6743                           plusw1	equ	0xFE3
  6744                           fsr1h	equ	0xFE2
  6745                           fsr1l	equ	0xFE1
  6746                           indf2	equ	0xFDF
  6747                           postinc2	equ	0xFDE
  6748                           postdec2	equ	0xFDD
  6749                           plusw2	equ	0xFDB
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _E_TOG *****************
  6755 ;; Defined at:
  6756 ;;		line 5 in file "LCD.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;		None               void
  6763 ;; Registers used:
  6764 ;;		wreg
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6770 ;;      Params:         0       0       0       0
  6771 ;;      Locals:         0       0       0       0
  6772 ;;      Temps:          0       0       0       0
  6773 ;;      Totals:         0       0       0       0
  6774 ;;Total ram usage:        0 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    3
  6777 ;; This function calls:
  6778 ;;		Nothing
  6779 ;; This function is called by:
  6780 ;;		_LCDout
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text29
  6785  001E38                     __ptext29:
  6786                           	opt stack 0
  6787  001E38                     _E_TOG:
  6788                           	opt stack 24
  6789                           
  6790                           ;LCD.c: 8: LATCbits.LATC0=1;
  6791                           
  6792                           ;incstack = 0
  6793  001E38  808B               	bsf	3979,0,c	;volatile
  6794                           
  6795                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6796  001E3A  0E03               	movlw	3
  6797  001E3C                     u3237:
  6798  001E3C  2EE8               	decfsz	wreg,f,c
  6799  001E3E  D7FE               	goto	u3237
  6800  001E40  F000               	nop	
  6801                           
  6802                           ;LCD.c: 10: LATCbits.LATC0=0;
  6803  001E42  908B               	bcf	3979,0,c	;volatile
  6804  001E44  0012               	return		;funcret
  6805  001E46                     __end_of_E_TOG:
  6806                           	opt stack 0
  6807                           tblptru	equ	0xFF8
  6808                           tblptrh	equ	0xFF7
  6809                           tblptrl	equ	0xFF6
  6810                           tablat	equ	0xFF5
  6811                           prodh	equ	0xFF4
  6812                           prodl	equ	0xFF3
  6813                           intcon	equ	0xFF2
  6814                           postinc0	equ	0xFEE
  6815                           wreg	equ	0xFE8
  6816                           indf1	equ	0xFE7
  6817                           plusw1	equ	0xFE3
  6818                           fsr1h	equ	0xFE2
  6819                           fsr1l	equ	0xFE1
  6820                           indf2	equ	0xFDF
  6821                           postinc2	equ	0xFDE
  6822                           postdec2	equ	0xFDD
  6823                           plusw2	equ	0xFDB
  6824                           fsr2h	equ	0xFDA
  6825                           fsr2l	equ	0xFD9
  6826                           status	equ	0xFD8
  6827                           
  6828 ;; *************** function _InterruptHandlerLow *****************
  6829 ;; Defined at:
  6830 ;;		line 18 in file "main.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;		None
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;		None
  6835 ;; Return value:  Size  Location     Type
  6836 ;;		None               void
  6837 ;; Registers used:
  6838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6844 ;;      Params:         0       0       0       0
  6845 ;;      Locals:         0       0       0       0
  6846 ;;      Temps:         17       0       0       0
  6847 ;;      Totals:        17       0       0       0
  6848 ;;Total ram usage:       17 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    2
  6851 ;; This function calls:
  6852 ;;		Nothing
  6853 ;; This function is called by:
  6854 ;;		Interrupt level 1
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           	psect	intcodelo
  6859  000018                     __pintcodelo:
  6860                           	opt stack 0
  6861  000018                     _InterruptHandlerLow:
  6862                           	opt stack 23
  6863                           
  6864                           ;incstack = 0
  6865  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6866  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6867  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6868  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6869  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6870  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6871  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6872  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6873  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6874  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6875  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6876  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6877  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6878  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6879  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6880  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6881  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6882  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6883                           
  6884                           ;main.c: 20: if (PIR1bits.RCIF) {
  6885  00005E  AA9E               	btfss	3998,5,c	;volatile
  6886  000060  D016               	goto	i1l373
  6887                           
  6888                           ;main.c: 21: ReceivedString[i]=RCREG;
  6889  000062  503A               	movf	_i,w,c	;volatile
  6890  000064  0D01               	mullw	1
  6891  000066  0EE6               	movlw	low _ReceivedString
  6892  000068  24F3               	addwf	prodl,w,c
  6893  00006A  6ED9               	movwf	fsr2l,c
  6894  00006C  0E01               	movlw	high _ReceivedString
  6895  00006E  20F4               	addwfc	prodh,w,c
  6896  000070  6EDA               	movwf	fsr2h,c
  6897  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6898                           
  6899                           ;main.c: 22: RFID_Read=1;
  6900  000076  0E01               	movlw	1
  6901  000078  0101               	movlb	1	; () banked
  6902  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6903                           
  6904                           ; BSR set to: 1
  6905                           ;main.c: 23: if (i==15){
  6906  00007C  0E0F               	movlw	15
  6907  00007E  183A               	xorwf	_i,w,c	;volatile
  6908  000080  A4D8               	btfss	status,2,c
  6909  000082  D003               	goto	i1l2672
  6910                           
  6911                           ; BSR set to: 1
  6912                           ;main.c: 24: i=0;
  6913  000084  0E00               	movlw	0
  6914  000086  6E3A               	movwf	_i,c	;volatile
  6915                           
  6916                           ;main.c: 25: }else{
  6917  000088  D001               	goto	i1l2674
  6918  00008A                     i1l2672:
  6919                           
  6920                           ; BSR set to: 1
  6921                           ;main.c: 26: i++;
  6922  00008A  2A3A               	incf	_i,f,c	;volatile
  6923  00008C                     i1l2674:
  6924                           
  6925                           ; BSR set to: 1
  6926                           ;main.c: 27: }
  6927                           ;main.c: 28: PIR1bits.RCIF=0;
  6928  00008C  9A9E               	bcf	3998,5,c	;volatile
  6929  00008E                     i1l373:
  6930  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6931  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6932  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6933  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6934  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6935  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6936  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6937  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6938  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6939  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6940  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6941  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6942  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6943  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6944  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6945  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6946  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6947  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6948  0000D4  0010               	retfie	
  6949  0000D6                     __end_of_InterruptHandlerLow:
  6950                           	opt stack 0
  6951                           pclatu	equ	0xFFB
  6952                           pclath	equ	0xFFA
  6953                           tblptru	equ	0xFF8
  6954                           tblptrh	equ	0xFF7
  6955                           tblptrl	equ	0xFF6
  6956                           tablat	equ	0xFF5
  6957                           prodh	equ	0xFF4
  6958                           prodl	equ	0xFF3
  6959                           intcon	equ	0xFF2
  6960                           postinc0	equ	0xFEE
  6961                           fsr0h	equ	0xFEA
  6962                           fsr0l	equ	0xFE9
  6963                           wreg	equ	0xFE8
  6964                           indf1	equ	0xFE7
  6965                           plusw1	equ	0xFE3
  6966                           fsr1h	equ	0xFE2
  6967                           fsr1l	equ	0xFE1
  6968                           bsr	equ	0xFE0
  6969                           indf2	equ	0xFDF
  6970                           postinc2	equ	0xFDE
  6971                           postdec2	equ	0xFDD
  6972                           plusw2	equ	0xFDB
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function _InterruptHandlerHigh *****************
  6978 ;; Defined at:
  6979 ;;		line 34 in file "main.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;		None
  6982 ;; Auto vars:     Size  Location     Type
  6983 ;;		None
  6984 ;; Return value:  Size  Location     Type
  6985 ;;		None               void
  6986 ;; Registers used:
  6987 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6988 ;; Tracked objects:
  6989 ;;		On entry : 0/0
  6990 ;;		On exit  : 0/0
  6991 ;;		Unchanged: 0/0
  6992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6993 ;;      Params:         0       0       0       0
  6994 ;;      Locals:         0       0       0       0
  6995 ;;      Temps:         14       0       0       0
  6996 ;;      Totals:        14       0       0       0
  6997 ;;Total ram usage:       14 bytes
  6998 ;; Hardware stack levels used:    1
  6999 ;; Hardware stack levels required when called:    1
  7000 ;; This function calls:
  7001 ;;		i2_delay_tenth_s
  7002 ;; This function is called by:
  7003 ;;		Interrupt level 2
  7004 ;; This function uses a non-reentrant model
  7005 ;;
  7006                           
  7007                           	psect	intcode
  7008  000008                     __pintcode:
  7009                           	opt stack 0
  7010  000008                     _InterruptHandlerHigh:
  7011                           	opt stack 23
  7012                           
  7013                           ;incstack = 0
  7014  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7015  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7016  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7017  000012  EFE8  F00B         	goto	int_func
  7018                           pclatu	equ	0xFFB
  7019                           pclath	equ	0xFFA
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           postinc0	equ	0xFEE
  7028                           fsr0h	equ	0xFEA
  7029                           fsr0l	equ	0xFE9
  7030                           wreg	equ	0xFE8
  7031                           indf1	equ	0xFE7
  7032                           plusw1	equ	0xFE3
  7033                           fsr1h	equ	0xFE2
  7034                           fsr1l	equ	0xFE1
  7035                           bsr	equ	0xFE0
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           plusw2	equ	0xFDB
  7040                           fsr2h	equ	0xFDA
  7041                           fsr2l	equ	0xFD9
  7042                           status	equ	0xFD8
  7043                           
  7044                           	psect	intcode_body
  7045  0017D0                     __pintcode_body:
  7046                           	opt stack 23
  7047  0017D0                     int_func:
  7048                           	opt stack 23
  7049  0017D0  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7050  0017D4  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7051  0017D8  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7052  0017DC  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7053  0017E0  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7054  0017E4  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7055  0017E8  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7056  0017EC  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7057  0017F0  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7058  0017F4  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7059  0017F8  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7060  0017FC  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7061                           
  7062                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7063  001800  A2F2               	btfss	intcon,1,c	;volatile
  7064  001802  D00D               	goto	i2l381
  7065                           
  7066                           ;main.c: 36: if (mode==-1) {
  7067  001804  283B               	incf	_mode,w,c	;volatile
  7068  001806  A4D8               	btfss	status,2,c
  7069  001808  D003               	goto	i2l2682
  7070                           
  7071                           ;main.c: 38: mode=1;
  7072  00180A  0E01               	movlw	1
  7073  00180C  6E3B               	movwf	_mode,c	;volatile
  7074                           
  7075                           ;main.c: 39: } else if (mode==0) {
  7076  00180E  D003               	goto	i2l2686
  7077  001810                     i2l2682:
  7078  001810  503B               	movf	_mode,w,c	;volatile
  7079  001812  A4D8               	btfss	status,2,c
  7080                           
  7081                           ;main.c: 43: mode=-1;
  7082                           
  7083                           ;main.c: 41: } else {
  7084  001814  683B               	setf	_mode,c	;volatile
  7085  001816                     i2l2686:
  7086                           
  7087                           ;main.c: 44: }
  7088                           ;main.c: 46: delay_tenth_s(2);
  7089  001816  0E02               	movlw	2
  7090  001818  EC3F  F00E         	call	i2_delay_tenth_s
  7091                           
  7092                           ;main.c: 47: INTCONbits.INT0IF=0;
  7093  00181C  92F2               	bcf	intcon,1,c	;volatile
  7094  00181E                     i2l381:
  7095  00181E  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7096  001822  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7097  001826  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7098  00182A  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7099  00182E  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7100  001832  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7101  001836  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7102  00183A  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7103  00183E  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7104  001842  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7105  001846  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7106  00184A  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7107  00184E  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7108  001852  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7109  001856  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7110  001858  0011               	retfie		f
  7111  00185A                     __end_of_InterruptHandlerHigh:
  7112                           	opt stack 0
  7113                           pclatu	equ	0xFFB
  7114                           pclath	equ	0xFFA
  7115                           tblptru	equ	0xFF8
  7116                           tblptrh	equ	0xFF7
  7117                           tblptrl	equ	0xFF6
  7118                           tablat	equ	0xFF5
  7119                           prodh	equ	0xFF4
  7120                           prodl	equ	0xFF3
  7121                           intcon	equ	0xFF2
  7122                           postinc0	equ	0xFEE
  7123                           fsr0h	equ	0xFEA
  7124                           fsr0l	equ	0xFE9
  7125                           wreg	equ	0xFE8
  7126                           indf1	equ	0xFE7
  7127                           plusw1	equ	0xFE3
  7128                           fsr1h	equ	0xFE2
  7129                           fsr1l	equ	0xFE1
  7130                           bsr	equ	0xFE0
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           plusw2	equ	0xFDB
  7135                           fsr2h	equ	0xFDA
  7136                           fsr2l	equ	0xFD9
  7137                           status	equ	0xFD8
  7138                           
  7139 ;; *************** function i2_delay_tenth_s *****************
  7140 ;; Defined at:
  7141 ;;		line 32 in file "Movement.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;  tenth_second    1    wreg     unsigned char 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7146 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7147 ;; Return value:  Size  Location     Type
  7148 ;;		None               void
  7149 ;; Registers used:
  7150 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7156 ;;      Params:         0       0       0       0
  7157 ;;      Locals:         3       0       0       0
  7158 ;;      Temps:          1       0       0       0
  7159 ;;      Totals:         4       0       0       0
  7160 ;;Total ram usage:        4 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; This function calls:
  7163 ;;		Nothing
  7164 ;; This function is called by:
  7165 ;;		_InterruptHandlerHigh
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text32
  7170  001C7E                     __ptext32:
  7171                           	opt stack 0
  7172  001C7E                     i2_delay_tenth_s:
  7173                           	opt stack 23
  7174                           
  7175                           ;incstack = 0
  7176                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7177  001C7E  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7178                           
  7179                           ;Movement.c: 33: unsigned int i=0;
  7180  001C80  0E00               	movlw	0
  7181  001C82  6E04               	movwf	i2delay_tenth_s@i+1,c
  7182  001C84  0E00               	movlw	0
  7183  001C86  6E03               	movwf	i2delay_tenth_s@i,c
  7184                           
  7185                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7186  001C88  0E00               	movlw	0
  7187  001C8A  6E04               	movwf	i2delay_tenth_s@i+1,c
  7188  001C8C  0E01               	movlw	1
  7189  001C8E  6E03               	movwf	i2delay_tenth_s@i,c
  7190  001C90  D009               	goto	i2l2644
  7191  001C92                     i2l2640:
  7192                           
  7193                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7194  001C92  0E82               	movlw	130
  7195  001C94  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7196  001C96  0EDE               	movlw	222
  7197  001C98                     i2u324_47:
  7198  001C98  2EE8               	decfsz	wreg,f,c
  7199  001C9A  D7FE               	goto	i2u324_47
  7200  001C9C  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7201  001C9E  D7FC               	goto	i2u324_47
  7202  001CA0  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7203  001CA2  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7204  001CA4                     i2l2644:
  7205  001CA4  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7206  001CA6  0D02               	mullw	2
  7207  001CA8  5003               	movf	i2delay_tenth_s@i,w,c
  7208  001CAA  5CF3               	subwf	prodl,w,c
  7209  001CAC  5004               	movf	i2delay_tenth_s@i+1,w,c
  7210  001CAE  58F4               	subwfb	prodh,w,c
  7211  001CB0  A0D8               	btfss	status,0,c
  7212  001CB2  0012               	return	
  7213  001CB4  D7EE               	goto	i2l2640
  7214  001CB6                     __end_ofi2_delay_tenth_s:
  7215                           	opt stack 0
  7216                           pclatu	equ	0xFFB
  7217                           pclath	equ	0xFFA
  7218                           tblptru	equ	0xFF8
  7219                           tblptrh	equ	0xFF7
  7220                           tblptrl	equ	0xFF6
  7221                           tablat	equ	0xFF5
  7222                           prodh	equ	0xFF4
  7223                           prodl	equ	0xFF3
  7224                           intcon	equ	0xFF2
  7225                           postinc0	equ	0xFEE
  7226                           fsr0h	equ	0xFEA
  7227                           fsr0l	equ	0xFE9
  7228                           wreg	equ	0xFE8
  7229                           indf1	equ	0xFE7
  7230                           plusw1	equ	0xFE3
  7231                           fsr1h	equ	0xFE2
  7232                           fsr1l	equ	0xFE1
  7233                           bsr	equ	0xFE0
  7234                           indf2	equ	0xFDF
  7235                           postinc2	equ	0xFDE
  7236                           postdec2	equ	0xFDD
  7237                           plusw2	equ	0xFDB
  7238                           fsr2h	equ	0xFDA
  7239                           fsr2l	equ	0xFD9
  7240                           status	equ	0xFD8
  7241                           pclatu	equ	0xFFB
  7242                           pclath	equ	0xFFA
  7243                           tblptru	equ	0xFF8
  7244                           tblptrh	equ	0xFF7
  7245                           tblptrl	equ	0xFF6
  7246                           tablat	equ	0xFF5
  7247                           prodh	equ	0xFF4
  7248                           prodl	equ	0xFF3
  7249                           intcon	equ	0xFF2
  7250                           postinc0	equ	0xFEE
  7251                           fsr0h	equ	0xFEA
  7252                           fsr0l	equ	0xFE9
  7253                           wreg	equ	0xFE8
  7254                           indf1	equ	0xFE7
  7255                           plusw1	equ	0xFE3
  7256                           fsr1h	equ	0xFE2
  7257                           fsr1l	equ	0xFE1
  7258                           bsr	equ	0xFE0
  7259                           indf2	equ	0xFDF
  7260                           postinc2	equ	0xFDE
  7261                           postdec2	equ	0xFDD
  7262                           plusw2	equ	0xFDB
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267                           	psect	rparam
  7268  0000                     pclatu	equ	0xFFB
  7269                           pclath	equ	0xFFA
  7270                           tblptru	equ	0xFF8
  7271                           tblptrh	equ	0xFF7
  7272                           tblptrl	equ	0xFF6
  7273                           tablat	equ	0xFF5
  7274                           prodh	equ	0xFF4
  7275                           prodl	equ	0xFF3
  7276                           intcon	equ	0xFF2
  7277                           postinc0	equ	0xFEE
  7278                           fsr0h	equ	0xFEA
  7279                           fsr0l	equ	0xFE9
  7280                           wreg	equ	0xFE8
  7281                           indf1	equ	0xFE7
  7282                           plusw1	equ	0xFE3
  7283                           fsr1h	equ	0xFE2
  7284                           fsr1l	equ	0xFE1
  7285                           bsr	equ	0xFE0
  7286                           indf2	equ	0xFDF
  7287                           postinc2	equ	0xFDE
  7288                           postdec2	equ	0xFDD
  7289                           plusw2	equ	0xFDB
  7290                           fsr2h	equ	0xFDA
  7291                           fsr2l	equ	0xFD9
  7292                           status	equ	0xFD8
  7293                           
  7294                           	psect	temp
  7295  00003C                     btemp:
  7296                           	opt stack 0
  7297  00003C                     	ds	1
  7298  0000                     int$flags	set	btemp
  7299                           pclatu	equ	0xFFB
  7300                           pclath	equ	0xFFA
  7301                           tblptru	equ	0xFF8
  7302                           tblptrh	equ	0xFF7
  7303                           tblptrl	equ	0xFF6
  7304                           tablat	equ	0xFF5
  7305                           prodh	equ	0xFF4
  7306                           prodl	equ	0xFF3
  7307                           intcon	equ	0xFF2
  7308                           postinc0	equ	0xFEE
  7309                           fsr0h	equ	0xFEA
  7310                           fsr0l	equ	0xFE9
  7311                           wreg	equ	0xFE8
  7312                           indf1	equ	0xFE7
  7313                           plusw1	equ	0xFE3
  7314                           fsr1h	equ	0xFE2
  7315                           fsr1l	equ	0xFE1
  7316                           bsr	equ	0xFE0
  7317                           indf2	equ	0xFDF
  7318                           postinc2	equ	0xFDE
  7319                           postdec2	equ	0xFDD
  7320                           plusw2	equ	0xFDB
  7321                           fsr2h	equ	0xFDA
  7322                           fsr2l	equ	0xFD9
  7323                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     153
    BANK1           256    226     247
    BANK2           256      0     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   70778
                                             90 BANK0      5     5      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   24330
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    4940
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5171
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11702
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F       3        0.0%
DATA                 0      0     22F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 15:57:54 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 1462  
                                  l65 1938                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01BE                           ?_LCD_String 002A  
                                 l221 0CF8                                   l222 0D28  
                                 l224 0E72                                   l431 0A10  
                                 l424 098E                                   l390 041C  
                                 l907 1B82                                   l897 1B40  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l2210 1976                                  l3002 1756  
                                l2132 1E02                                  l3012 178E  
                                l2222 19E0                                  l2206 196E  
                                l2142 1B0E                                  l3102 1282  
                                l3110 12A8                                  l3006 176E  
                                l2240 1D32                                  l2232 1A24  
                                l2216 19B2                                  l2144 1B16  
                                l3112 12B4                                  l3040 10C4  
                                l2226 19E8                                  l2154 1B36  
                                l2146 1B1A                                  l2170 1B78  
                                l2162 1B58                                  l3034 10AA  
                                l2244 1D44                                  l2164 1B60  
                                l3132 1352                                  l3124 12F6  
                                l3036 10BC                                  l3028 108E  
                                l3212 0C2A                                  l3300 0FC4  
                                l2404 1D92                                  l2254 1A78  
                                l2166 1B64                                  l3126 12FC  
                                l3118 12D8                                  l3070 11C4  
                                l3046 10F4                                  l3134 135E  
                                l2262 1C6C                                  l2248 1A44  
                                l3136 1378                                  l3056 1166  
                                l3082 11FA                                  l3058 118E  
                                l2258 1C5A                                  l3402 04C8  
                                l3092 1254                                  l3068 11BE  
                                l3180 15A2                                  l3252 0D6C  
                                l3500 07DE                                  l3094 125E  
                                l3262 0E54                                  l3254 0D84  
                                l3406 04FA                                  l3088 121C  
                                l3520 086A                                  l3512 0846  
                                l3426 054C                                  l3292 0FAC  
                                l3452 066C                                  l3444 05E2  
                                l3550 0A8E                                  l3542 09B2  
                                l3526 08DA                                  l3288 0FA8  
                                l3544 0A14                                  l3552 0AC8  
                                l3480 074A                                  l3472 0704  
                                l3448 0642                                  l3368 0422  
                                l3560 0AD0                                  l3298 0FBE  
                                l3538 0944                                  l3490 0770  
                                l3458 0692                                  l2940 187E  
                                l3556 0ACE                                  l3484 0754  
                                l3468 06FA                                  l3492 0776  
                                l2950 18A0                                  l2934 186E  
                                l3478 0744                                  l2946 1894  
                                l2962 18C6                                  l2948 189C  
                                l2980 18E0                                  l2966 18D4  
                                l2958 18BC                                  l2976 143A  
                                l2984 18FC                                  l2988 1918  
                                l2998 173E                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1305 162C  
                                u1315 165C                                  _LATB 000F8A  
                                u1255 15C4                                  u3007 16A8  
                                u1265 15D2                                  u1505 197E  
                                u3017 16B8                                  u1275 15F0  
                                u3107 0C76                                  u3027 16C6  
                                u2324 13FA                                  u1285 15FE  
                                u1365 1D58                                  u2325 13F6  
                                u3117 1932                                  u3037 16D4  
                                u1366 1D5A                                  u2334 1456  
                                u1295 161E                                  u3207 1D66  
                                u1535 19F0                                  u2335 1452  
                                u3127 1C60                                  u3047 16E6  
                                u3217 1D76                                  u2345 14B0  
                                u3137 150E                                  u3057 16F8  
                                u1570 1A68                                  u3227 1678  
                                u3147 1524                                  u3067 170E  
                                u1580 1A98                                  u3237 1E3C  
                                u3157 1788                                  u3077 1722  
                                u3167 19A6                                  u1815 1D8E  
                                u3087 1734                                  u1816 1D90  
                                u1577 1A5E                                  u3177 1A18  
                                u3097 0C5E                                  u1587 1A8E  
                                u3187 1D46                                  u1835 1DA0  
                                u2731 0366                                  u1836 1DA2  
                                u2820 06C4                                  u3197 1A72  
                                u2741 0378                                  u2830 06D8  
                                u2822 06C6                                  u2920 0920  
                                u2832 06DA                                  u2960 0A52  
                                u2977 0478                                  u2987 0490  
                                u2997 1692                                  _main 0350  
                                _mode 003B                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 173C  
                                pclat 000FFA                   fullSpeedAhead@power 0066  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00D6               ScanWithRange@MotorPower 00AE  
                        ___param_bank 000010                       i2_delay_tenth_s 1C7E  
                     __end_of_SendLCD 1D7E                       __end_of_SetLine 1D4E  
                  ScanWithRange@F3892 00F5                           ScanIR@F3879 00F1  
                               ?_main 0001                       __end_of___awdiv 18DE  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 1B4A                       __end_of___lwmod 1B8C  
                               i1l373 008E                                 i2l381 181E  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 1E38                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 173C                    ScanWithRange@loops 0071  
                     __end_of_dpowers 030B                       __end_of_isdigit 1E0A  
                               main@i 01CE                                 tablat 000FF5  
                               plusw1 000FE3                                 plusw2 000FDB  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 1386                __size_of_ScanWithRange 058E  
                      __CFG_MCLRE$OFF 000000                       __initialization 1CB6  
                        __end_of_main 0AF2                          __end_of_stop 17D0  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 0099  
                __end_of_enableSensor 1DA4                   VerifySignal@hexByte 002C  
                              ??_main 00BA                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2672 008A                                i1l2674 008C  
                      __CFG_WDTEN$OFF 000000                                i2l2640 1C92  
                              i2l2644 1CA4                                i2l2682 1810  
                              i2l2686 1816                 __end_of_delay_tenth_s 1C7E  
                              _LCDout 15BA                           SendLCD@Byte 0029  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
          ScanWithRange@MiniLeftFlick 00B0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 1CB6  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 14C0                             ??_SetLine 002A  
                              ___wmul 1DA4                             ??___awdiv 002E  
                    __end_of_initRFID 1E26                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 1DCA  
                __size_of_grabRightIR 0072                                clear_0 1CBC  
                              clear_1 1CC8                                clear_2 1CD4  
                    ___awdiv@quotient 0030                                main@mL 01D0  
                              main@mR 01D9                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0AF2  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060       ScanWithRange@TimeAboveThreshold 00B3  
                    __end_of_turnLeft 1C46                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 1CDE                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 1E46  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1B8C  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002B                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 1852           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00BF                            __pbssBANK1 01E2  
                          __pbssBANK2 0200                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 1AA0                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 0080  
                          _grabLeftIR 19D0                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 1D7E                    __size_of_turnRight 003E  
                __end_of_initMotorPWM 1D1E                ScanWithRange@RFID_Read 0079  
                             _SendLCD 1D4E                               __Hparam 0000  
                             _SetLine 1D1E                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 185A  
                     __size_of___wmul 0026                               ___lwdiv 1AF8  
                             ___lwmod 1B4A                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1CB6  
                     ??_ScanWithRange 007B                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 1E26                               __ptext2 1E0A  
                             __ptext3 1CEC                               __ptext4 1680  
                             __ptext5 1DCA                               __ptext6 1B8C  
                             __ptext7 1D7E                               __ptext8 1AA0  
                             __ptext9 0AF2                             _T0CONbits 000FD5  
                             _initLCD 1680                     __end_of_initTimer 1E38  
                             _dpowers 0301                               _isdigit 1DEC  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 0100                               _sprintf 1080  
                      __pintcode_body 17D0                  end_of_initialization 1CDE  
                      ScanWithRange@i 00AA                        ScanWithRange@n 00A8  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 17D0  
                  ScanIR@SensorResult 009B                       ??_fullSpeedBack 003A  
                           _RFID_Read 01F6                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
              ScanWithRange@LeftFlick 00AF                     __end_of_turnRight 1C08  
                         ?_grabLeftIR 0024                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0026                      fullSpeedAhead@mL 0062  
                    fullSpeedAhead@mR 0064                ScanWithRange@RightFlag 00B8  
                      __end_of_LCDout 1680                             _TXSTAbits 000FAC  
                           ScanIR@buf 0071                         ??_grabRightIR 0026  
                      __end_of_ScanIR 15BA                        _fullSpeedAhead 18DE  
                      _ReceivedString 01E6                        __end_of___wmul 1DCA  
                   ScanWithRange@Move 0075                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1DEC                __size_of_delay_tenth_s 0038  
                 start_initialization 1CB6                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 0032                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 185A                              ??_ScanIR 0039  
              __end_of_fullSpeedAhead 195E                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 19D0                          _initMotorPWM 1CEC  
                         __pbssCOMRAM 003A                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                          _isdigit$1986 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1C46  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 1AF8                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 01C9  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 1E26  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u324_47 1C98                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3893 0200  
                           main@F3895 00BF                             main@F3898 01E2  
                         _grabRightIR 195E                 ScanWithRange@LeftFlag 00B1  
                grabRightIR@IR_signal 0029                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 1080                          setMotorPWM@m 0032  
               ScanWithRange@MoveTime 0073                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 0077                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                          ?_initTimer 0001                             _turnRight 1BCA  
                    ScanWithRange@buf 0080                   __end_of_setMotorPWM 14C0  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1BCA  
                    __size_of_SetLine 0030                    __end_of_grabLeftIR 1A42  
                    __size_of___awdiv 0084                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0067  
                            __ptext10 1BCA                              __ptext11 1C08  
                            __ptext20 1DA4                              __ptext12 18DE  
                            __ptext21 1B4A                              __ptext13 1C46  
                            __ptext22 1AF8                              __ptext14 14C0  
                            __ptext23 195E                              __ptext15 173C  
                            __ptext32 1C7E                              __ptext24 19D0  
                            __ptext16 1386                              __ptext25 1D1E  
                            __ptext17 185A                              __ptext26 1A42  
                            __ptext18 1080                              __ptext27 1D4E  
                            __ptext19 1DEC                              __ptext28 15BA  
                            __ptext29 1E38                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                              _initRFID 1E0A  
           ScanWithRange@SensorResult 00B4                        turnRight@power 006B  
                       __size_of_main 07A2                    main@DirectionFound 01CD  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 0058                              int$flags 003C  
                            main@Move 01CF                   _InterruptHandlerLow 0018  
                          _LCD_String 1A42                              _turnLeft 1C08  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002A                            _INTCONbits 000FF2  
                         ??_initTimer 0024                              isdigit@c 0026  
                         _setMotorPWM 1386                          _VerifySignal 1AA0  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                      ??_fullSpeedAhead 0039  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00AC  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
