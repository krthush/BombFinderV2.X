

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 22:54:41 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATBbits	set	3978
    78  0000                     _LATCbits	set	3979
    79  0000                     _LATDbits	set	3980
    80  0000                     _LATEbits	set	3981
    81  0000                     _OSCCON	set	4051
    82  0000                     _OSCCONbits	set	4051
    83  0000                     _PIE1bits	set	3997
    84  0000                     _PIR1bits	set	3998
    85  0000                     _PTCON0	set	3967
    86  0000                     _PTCON1	set	3966
    87  0000                     _PTPERH	set	3962
    88  0000                     _PTPERL	set	3963
    89  0000                     _PWMCON0	set	3951
    90  0000                     _PWMCON1	set	3950
    91  0000                     _RCONbits	set	4048
    92  0000                     _RCREG	set	4014
    93  0000                     _RCSTAbits	set	4011
    94  0000                     _SPBRG	set	4015
    95  0000                     _SPBRGH	set	4016
    96  0000                     _T0CONbits	set	4053
    97  0000                     _T5CON	set	4023
    98  0000                     _TMR0H	set	4055
    99  0000                     _TMR0L	set	4054
   100  0000                     _TRISAbits	set	3986
   101  0000                     _TRISBbits	set	3987
   102  0000                     _TRISC	set	3988
   103  0000                     _TRISCbits	set	3988
   104  0000                     _TRISDbits	set	3989
   105  0000                     _TRISEbits	set	3990
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001CDC                     __pcinit:
   189                           	opt stack 0
   190  001CDC                     start_initialization:
   191                           	opt stack 0
   192  001CDC                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK2 (100 bytes)
   196  001CDC  EE02  F000         	lfsr	0,__pbssBANK2
   197  001CE0  0E64               	movlw	100
   198  001CE2                     clear_0:
   199  001CE2  6AEE               	clrf	postinc0,c
   200  001CE4  06E8               	decf	wreg,f,c
   201  001CE6  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK1 (23 bytes)
   204  001CE8  EE01  F0E2         	lfsr	0,__pbssBANK1
   205  001CEC  0E17               	movlw	23
   206  001CEE                     clear_1:
   207  001CEE  6AEE               	clrf	postinc0,c
   208  001CF0  06E8               	decf	wreg,f,c
   209  001CF2  E1FD               	bnz	clear_1
   210                           
   211                           ; Clear objects allocated to BANK0 (58 bytes)
   212  001CF4  EE00  F0BC         	lfsr	0,__pbssBANK0
   213  001CF8  0E3A               	movlw	58
   214  001CFA                     clear_2:
   215  001CFA  6AEE               	clrf	postinc0,c
   216  001CFC  06E8               	decf	wreg,f,c
   217  001CFE  E1FD               	bnz	clear_2
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220  001D00  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221  001D02  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   222  001D04                     end_of_initialization:
   223                           	opt stack 0
   224  001D04                     __end_of__initialization:
   225                           	opt stack 0
   226  001D04  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227  001D06  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228  001D08  0E00               	movlw	low (__Lmediumconst shr (0+16))
   229  001D0A  6EF8               	movwf	tblptru,c
   230  001D0C  0100               	movlb	0
   231  001D0E  EFA8  F001         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  00003A                     __pbssCOMRAM:
   238                           	opt stack 0
   239  00003A                     _i:
   240                           	opt stack 0
   241  00003A                     	ds	1
   242  00003B                     _mode:
   243                           	opt stack 0
   244  00003B                     	ds	1
   245                           tblptru	equ	0xFF8
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           
   249                           	psect	bssBANK0
   250  0000BC                     __pbssBANK0:
   251                           	opt stack 0
   252  0000BC                     main@F3895:
   253                           	opt stack 0
   254  0000BC                     	ds	50
   255  0000EE                     ScanIR@F3880:
   256                           	opt stack 0
   257  0000EE                     	ds	4
   258  0000F2                     ScanWithRange@F3894:
   259                           	opt stack 0
   260  0000F2                     	ds	4
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265                           	psect	bssBANK1
   266  0001E2                     __pbssBANK1:
   267                           	opt stack 0
   268  0001E2                     main@F3898:
   269                           	opt stack 0
   270  0001E2                     	ds	4
   271  0001E6                     _ReceivedString:
   272                           	opt stack 0
   273  0001E6                     	ds	16
   274  0001F6                     _millis:
   275                           	opt stack 0
   276  0001F6                     	ds	2
   277  0001F8                     _RFID_Read:
   278                           	opt stack 0
   279  0001F8                     	ds	1
   280                           tblptru	equ	0xFF8
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284                           	psect	bssBANK2
   285  000200                     __pbssBANK2:
   286                           	opt stack 0
   287  000200                     main@F3893:
   288                           	opt stack 0
   289  000200                     	ds	100
   290                           tblptru	equ	0xFF8
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           
   294                           	psect	cstackBANK1
   295  000100                     __pcstackBANK1:
   296                           	opt stack 0
   297  000100                     main@buf:
   298                           	opt stack 0
   299                           
   300                           ; 40 bytes @ 0x0
   301  000100                     	ds	40
   302  000128                     main@MoveType:
   303                           	opt stack 0
   304                           
   305                           ; 50 bytes @ 0x28
   306  000128                     	ds	50
   307  00015A                     main@MoveTime:
   308                           	opt stack 0
   309                           
   310                           ; 100 bytes @ 0x5A
   311  00015A                     	ds	100
   312  0001BE                     main@Message:
   313                           	opt stack 0
   314                           
   315                           ; 10 bytes @ 0xBE
   316  0001BE                     	ds	10
   317  0001C8                     main@ScanAngle:
   318                           	opt stack 0
   319                           
   320                           ; 1 bytes @ 0xC8
   321  0001C8                     	ds	1
   322  0001C9                     main@SensorResult:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0xC9
   326  0001C9                     	ds	4
   327  0001CD                     main@DirectionFound:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0xCD
   331  0001CD                     	ds	1
   332  0001CE                     main@i:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0xCE
   336  0001CE                     	ds	1
   337  0001CF                     main@Move:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0xCF
   341  0001CF                     	ds	1
   342  0001D0                     main@mL:
   343                           	opt stack 0
   344                           
   345                           ; 9 bytes @ 0xD0
   346  0001D0                     	ds	9
   347  0001D9                     main@mR:
   348                           	opt stack 0
   349                           
   350                           ; 9 bytes @ 0xD9
   351  0001D9                     	ds	9
   352                           tblptru	equ	0xFF8
   353                           postinc0	equ	0xFEE
   354                           wreg	equ	0xFE8
   355                           
   356                           	psect	cstackBANK0
   357  000060                     __pcstackBANK0:
   358                           	opt stack 0
   359  000060                     ??_sprintf:
   360  000060                     setMotorPWM@PWMduty:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x0
   364  000060                     	ds	2
   365  000062                     stop@mL:
   366                           	opt stack 0
   367  000062                     fullSpeed@mL:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x2
   371  000062                     	ds	2
   372  000064                     stop@mR:
   373                           	opt stack 0
   374  000064                     fullSpeed@mR:
   375                           	opt stack 0
   376  000064                     sprintf@ap:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x4
   380  000064                     	ds	2
   381  000066                     fullSpeed@power:
   382                           	opt stack 0
   383  000066                     sprintf@prec:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x6
   387  000066                     	ds	1
   388  000067                     turnLeft@mL:
   389                           	opt stack 0
   390  000067                     turnRight@mL:
   391                           	opt stack 0
   392  000067                     fullSpeedBack@mL:
   393                           	opt stack 0
   394  000067                     sprintf@val:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x7
   398  000067                     	ds	2
   399  000069                     sprintf@flag:
   400                           	opt stack 0
   401  000069                     turnLeft@mR:
   402                           	opt stack 0
   403  000069                     turnRight@mR:
   404                           	opt stack 0
   405  000069                     fullSpeedBack@mR:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x9
   409  000069                     	ds	1
   410  00006A                     sprintf@width:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0xA
   414  00006A                     	ds	1
   415  00006B                     turnLeft@power:
   416                           	opt stack 0
   417  00006B                     turnRight@power:
   418                           	opt stack 0
   419  00006B                     fullSpeedBack@power:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0xB
   423  00006B                     	ds	1
   424  00006C                     sprintf@c:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0xC
   428  00006C                     	ds	1
   429  00006D                     ScanIR@mL:
   430                           	opt stack 0
   431  00006D                     ScanWithRange@mL:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0xD
   435  00006D                     	ds	2
   436  00006F                     ScanIR@mR:
   437                           	opt stack 0
   438  00006F                     ScanWithRange@mR:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0xF
   442  00006F                     	ds	2
   443  000071                     ScanWithRange@loops:
   444                           	opt stack 0
   445  000071                     ScanIR@buf:
   446                           	opt stack 0
   447                           
   448                           ; 40 bytes @ 0x11
   449  000071                     	ds	2
   450  000073                     ScanWithRange@MoveTime:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x13
   454  000073                     	ds	2
   455  000075                     ScanWithRange@Move:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x15
   459  000075                     	ds	2
   460  000077                     ScanWithRange@MoveType:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x17
   464  000077                     	ds	2
   465  000079                     ScanWithRange@RFID_Read:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x19
   469  000079                     	ds	2
   470  00007B                     ScanWithRange@millis:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x1B
   474  00007B                     	ds	2
   475  00007D                     ??_ScanWithRange:
   476                           
   477                           ; 0 bytes @ 0x1D
   478  00007D                     	ds	4
   479  000081                     ScanWithRange@buf:
   480                           	opt stack 0
   481                           
   482                           ; 40 bytes @ 0x21
   483  000081                     	ds	24
   484  000099                     ScanIR@DirectionMoveThreshold:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x39
   488  000099                     	ds	2
   489  00009B                     ScanIR@SensorResult:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x3B
   493  00009B                     	ds	14
   494  0000A9                     ScanWithRange@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x49
   498  0000A9                     	ds	2
   499  0000AB                     ScanWithRange@DirectionFoundThreshold:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x4B
   503  0000AB                     	ds	2
   504  0000AD                     ScanWithRange@MotorPower:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x4D
   508  0000AD                     	ds	1
   509  0000AE                     ScanWithRange@MiniLeftFlick:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x4E
   513  0000AE                     	ds	1
   514  0000AF                     ScanWithRange@LeftFlag:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x4F
   518  0000AF                     	ds	2
   519  0000B1                     ScanWithRange@TimeAboveThreshold:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x51
   523  0000B1                     	ds	2
   524  0000B3                     ScanWithRange@SensorResult:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x53
   528  0000B3                     	ds	4
   529  0000B7                     ScanWithRange@LeftFlick:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x57
   533  0000B7                     	ds	1
   534  0000B8                     ScanWithRange@RightFlag:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x58
   538  0000B8                     	ds	2
   539  0000BA                     ??_main:
   540                           
   541                           ; 0 bytes @ 0x5A
   542  0000BA                     	ds	2
   543                           tblptru	equ	0xFF8
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           
   547                           	psect	cstackCOMRAM
   548  000001                     __pcstackCOMRAM:
   549                           	opt stack 0
   550  000001                     ??i2_delay_tenth_s:
   551                           
   552                           ; 0 bytes @ 0x0
   553  000001                     	ds	1
   554  000002                     i2delay_tenth_s@tenth_seconds:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x1
   558  000002                     	ds	1
   559  000003                     i2delay_tenth_s@i:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x2
   563  000003                     	ds	2
   564  000005                     ??_InterruptHandlerHigh:
   565                           
   566                           ; 0 bytes @ 0x4
   567  000005                     	ds	14
   568  000013                     ??_InterruptHandlerLow:
   569                           
   570                           ; 0 bytes @ 0x12
   571  000013                     	ds	17
   572  000024                     ??_isdigit:
   573  000024                     ??_LCDout:
   574  000024                     ??_delay_tenth_s:
   575  000024                     ?_grabRightIR:
   576                           	opt stack 0
   577  000024                     ?_grabLeftIR:
   578                           	opt stack 0
   579  000024                     ?___wmul:
   580                           	opt stack 0
   581  000024                     ?___lwdiv:
   582                           	opt stack 0
   583  000024                     enableSensor@status:
   584                           	opt stack 0
   585  000024                     VerifySignal@Signal:
   586                           	opt stack 0
   587  000024                     ___wmul@multiplier:
   588                           	opt stack 0
   589  000024                     ___lwdiv@dividend:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x23
   593  000024                     	ds	1
   594  000025                     enableSensor@sensor:
   595                           	opt stack 0
   596  000025                     delay_tenth_s@tenth_seconds:
   597                           	opt stack 0
   598  000025                     _isdigit$2086:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x24
   602  000025                     	ds	1
   603  000026                     ??_grabRightIR:
   604  000026                     ??_grabLeftIR:
   605  000026                     ??_VerifySignal:
   606  000026                     isdigit@c:
   607                           	opt stack 0
   608  000026                     delay_tenth_s@i:
   609                           	opt stack 0
   610  000026                     ___wmul@multiplicand:
   611                           	opt stack 0
   612  000026                     ___lwdiv@divisor:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x25
   616  000026                     	ds	1
   617  000027                     LCDout@number:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x26
   621  000027                     	ds	1
   622  000028                     SendLCD@type:
   623                           	opt stack 0
   624  000028                     ___wmul@product:
   625                           	opt stack 0
   626  000028                     ___lwdiv@quotient:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x27
   630  000028                     	ds	1
   631  000029                     SendLCD@Byte:
   632                           	opt stack 0
   633  000029                     grabRightIR@IR_signal:
   634                           	opt stack 0
   635  000029                     grabLeftIR@IR_signal:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x28
   639  000029                     	ds	1
   640  00002A                     ??_initLCD:
   641  00002A                     ?___awdiv:
   642                           	opt stack 0
   643  00002A                     SetLine@line:
   644                           	opt stack 0
   645  00002A                     VerifySignal@i:
   646                           	opt stack 0
   647  00002A                     ___lwdiv@counter:
   648                           	opt stack 0
   649  00002A                     LCD_String@string:
   650                           	opt stack 0
   651  00002A                     ___awdiv@dividend:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x29
   655  00002A                     	ds	1
   656  00002B                     ?___lwmod:
   657                           	opt stack 0
   658  00002B                     grabRightIR@i:
   659                           	opt stack 0
   660  00002B                     grabLeftIR@i:
   661                           	opt stack 0
   662  00002B                     VerifySignal@checksum:
   663                           	opt stack 0
   664  00002B                     ___lwmod@dividend:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x2A
   668  00002B                     	ds	1
   669  00002C                     VerifySignal@hexByte:
   670                           	opt stack 0
   671  00002C                     ___awdiv@divisor:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x2B
   675  00002C                     	ds	1
   676  00002D                     ___lwmod@divisor:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x2C
   680  00002D                     	ds	1
   681  00002E                     ___awdiv@counter:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x2D
   685  00002E                     	ds	1
   686  00002F                     ___awdiv@sign:
   687                           	opt stack 0
   688  00002F                     ___lwmod@counter:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x2E
   692  00002F                     	ds	1
   693  000030                     ?_sprintf:
   694                           	opt stack 0
   695  000030                     sprintf@sp:
   696                           	opt stack 0
   697  000030                     ___awdiv@quotient:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x2F
   701  000030                     	ds	2
   702  000032                     setMotorPWM@m:
   703                           	opt stack 0
   704  000032                     sprintf@f:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x31
   708  000032                     	ds	2
   709  000034                     ??_setMotorPWM:
   710                           
   711                           ; 0 bytes @ 0x33
   712  000034                     	ds	5
   713  000039                     ??_ScanIR:
   714                           
   715                           ; 0 bytes @ 0x38
   716  000039                     	ds	1
   717  00003A                     tblptru	equ	0xFF8
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           
   721                           ; 0 bytes @ 0x39
   722 ;;
   723 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   724 ;;
   725 ;; *************** function _main *****************
   726 ;; Defined at:
   727 ;;		line 55 in file "main.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  MoveTime      100   90[BANK1 ] int [50]
   732 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   733 ;;  buf            40    0[BANK1 ] unsigned char [40]
   734 ;;  Message        10  190[BANK1 ] unsigned char [10]
   735 ;;  mR              9  217[BANK1 ] struct DC_motor
   736 ;;  mL              9  208[BANK1 ] struct DC_motor
   737 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   738 ;;  Move            1  207[BANK1 ] char 
   739 ;;  i               1  206[BANK1 ] unsigned char 
   740 ;;  DirectionFou    1  205[BANK1 ] char 
   741 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   742 ;; Return value:  Size  Location     Type
   743 ;;		None               void
   744 ;; Registers used:
   745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   751 ;;      Params:         0       0       0       0
   752 ;;      Locals:         0       0     226       0
   753 ;;      Temps:          0       2       0       0
   754 ;;      Totals:         0       2     226       0
   755 ;;Total ram usage:      228 bytes
   756 ;; Hardware stack levels required when called:    8
   757 ;; This function calls:
   758 ;;		_LCD_String
   759 ;;		_ScanIR
   760 ;;		_ScanWithRange
   761 ;;		_SendLCD
   762 ;;		_SetLine
   763 ;;		_VerifySignal
   764 ;;		_delay_tenth_s
   765 ;;		_enableSensor
   766 ;;		_fullSpeed
   767 ;;		_fullSpeedBack
   768 ;;		_grabLeftIR
   769 ;;		_grabRightIR
   770 ;;		_initIR
   771 ;;		_initLCD
   772 ;;		_initMotorPWM
   773 ;;		_initRFID
   774 ;;		_initTimer
   775 ;;		_sprintf
   776 ;;		_stop
   777 ;;		_turnLeft
   778 ;;		_turnRight
   779 ;; This function is called by:
   780 ;;		Startup code after reset
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text0
   785  000350                     __ptext0:
   786                           	opt stack 0
   787  000350                     _main:
   788                           	opt stack 23
   789                           
   790                           ;main.c: 58: unsigned char Message[10];
   791                           ;main.c: 59: unsigned char i=0;
   792                           
   793                           ;incstack = 0
   794  000350  0E00               	movlw	0
   795  000352  0101               	movlb	1	; () banked
   796  000354  6FCE               	movwf	main@i& (0+255),b
   797                           
   798                           ;main.c: 60: signed char DirectionFound=0;
   799  000356  0E00               	movlw	0
   800  000358  0101               	movlb	1	; () banked
   801  00035A  6FCD               	movwf	main@DirectionFound& (0+255),b
   802                           
   803                           ; BSR set to: 1
   804                           ;main.c: 61: signed int MoveTime[50] = { 0 };
   805  00035C  EE22  F000         	lfsr	2,main@F3893
   806  000360  EE11  F05A         	lfsr	1,main@MoveTime
   807  000364  0E63               	movlw	99
   808  000366                     u2801:
   809  000366  CFDB FFE3          	movff	plusw2,plusw1
   810  00036A  06E8               	decf	wreg,f,c
   811  00036C  E2FC               	bc	u2801
   812                           
   813                           ; BSR set to: 1
   814                           ;main.c: 64: unsigned char MoveType[50] = { 0 };
   815  00036E  EE20  F0BC         	lfsr	2,main@F3895
   816  000372  EE11  F028         	lfsr	1,main@MoveType
   817  000376  0E31               	movlw	49
   818  000378                     u2811:
   819  000378  CFDB FFE3          	movff	plusw2,plusw1
   820  00037C  06E8               	decf	wreg,f,c
   821  00037E  E2FC               	bc	u2811
   822                           
   823                           ;main.c: 67: signed char Move=0;
   824  000380  0E00               	movlw	0
   825  000382  0101               	movlb	1	; () banked
   826  000384  6FCF               	movwf	main@Move& (0+255),b
   827                           
   828                           ; BSR set to: 1
   829                           ;main.c: 68: unsigned int SensorResult[2]={0,0};
   830  000386  C1E2  F1C9         	movff	main@F3898,main@SensorResult
   831  00038A  C1E3  F1CA         	movff	main@F3898+1,main@SensorResult+1
   832  00038E  C1E4  F1CB         	movff	main@F3898+2,main@SensorResult+2
   833  000392  C1E5  F1CC         	movff	main@F3898+3,main@SensorResult+3
   834                           
   835                           ;main.c: 69: char buf[40];
   836                           ;main.c: 71: unsigned char ScanAngle=60;
   837  000396  0E3C               	movlw	60
   838  000398  0101               	movlb	1	; () banked
   839  00039A  6FC8               	movwf	main@ScanAngle& (0+255),b
   840                           
   841                           ; BSR set to: 1
   842                           ;main.c: 80: INTCONbits.GIEH=1;
   843  00039C  8EF2               	bsf	intcon,7,c	;volatile
   844                           
   845                           ; BSR set to: 1
   846                           ;main.c: 81: INTCONbits.GIEL=1;
   847  00039E  8CF2               	bsf	intcon,6,c	;volatile
   848                           
   849                           ; BSR set to: 1
   850                           ;main.c: 82: INTCONbits.PEIE=1;
   851  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   852                           
   853                           ; BSR set to: 1
   854                           ;main.c: 83: RCONbits.IPEN=1;
   855  0003A2  8ED0               	bsf	4048,7,c	;volatile
   856                           
   857                           ; BSR set to: 1
   858                           ;main.c: 86: IPR1bits.RCIP=0;
   859  0003A4  9A9F               	bcf	3999,5,c	;volatile
   860                           
   861                           ; BSR set to: 1
   862                           ;main.c: 87: PIE1bits.RCIE=1;
   863  0003A6  8A9D               	bsf	3997,5,c	;volatile
   864                           
   865                           ; BSR set to: 1
   866                           ;main.c: 90: TRISCbits.RC3=1;
   867  0003A8  8694               	bsf	3988,3,c	;volatile
   868                           
   869                           ; BSR set to: 1
   870                           ;main.c: 91: INTCONbits.INT0IE=1;
   871  0003AA  88F2               	bsf	intcon,4,c	;volatile
   872                           
   873                           ; BSR set to: 1
   874                           ;main.c: 94: PIR1bits.RC1IF=0;
   875  0003AC  9A9E               	bcf	3998,5,c	;volatile
   876                           
   877                           ; BSR set to: 1
   878                           ;main.c: 95: INTCONbits.INT0IF=0;
   879  0003AE  92F2               	bcf	intcon,1,c	;volatile
   880                           
   881                           ;main.c: 98: struct DC_motor mL, mR;
   882                           ;main.c: 99: mL.power=0;
   883  0003B0  0E00               	movlw	0
   884  0003B2  0101               	movlb	1	; () banked
   885  0003B4  6FD0               	movwf	main@mL& (0+255),b
   886                           
   887                           ;main.c: 100: mL.direction=1;
   888  0003B6  0E01               	movlw	1
   889  0003B8  0101               	movlb	1	; () banked
   890  0003BA  6FD1               	movwf	(main@mL+1)& (0+255),b
   891                           
   892                           ; BSR set to: 1
   893                           ;main.c: 101: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   894  0003BC  0E79               	movlw	121
   895  0003BE  0101               	movlb	1	; () banked
   896  0003C0  6FD2               	movwf	(main@mL+2)& (0+255),b
   897  0003C2  0E0F               	movlw	15
   898  0003C4  0101               	movlb	1	; () banked
   899  0003C6  6FD3               	movwf	(main@mL+3)& (0+255),b
   900                           
   901                           ; BSR set to: 1
   902                           ;main.c: 102: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   903  0003C8  0E78               	movlw	120
   904  0003CA  0101               	movlb	1	; () banked
   905  0003CC  6FD4               	movwf	(main@mL+4)& (0+255),b
   906  0003CE  0E0F               	movlw	15
   907  0003D0  0101               	movlb	1	; () banked
   908  0003D2  6FD5               	movwf	(main@mL+5)& (0+255),b
   909                           
   910                           ;main.c: 103: mL.dir_pin=0;
   911  0003D4  0E00               	movlw	0
   912  0003D6  0101               	movlb	1	; () banked
   913  0003D8  6FD6               	movwf	(main@mL+6)& (0+255),b
   914                           
   915                           ;main.c: 104: mL.PWMperiod=199;
   916  0003DA  0E00               	movlw	0
   917  0003DC  0101               	movlb	1	; () banked
   918  0003DE  6FD8               	movwf	(main@mL+8)& (0+255),b
   919  0003E0  0EC7               	movlw	199
   920  0003E2  6FD7               	movwf	(main@mL+7)& (0+255),b
   921                           
   922                           ;main.c: 106: mR.power=0;
   923  0003E4  0E00               	movlw	0
   924  0003E6  0101               	movlb	1	; () banked
   925  0003E8  6FD9               	movwf	main@mR& (0+255),b
   926                           
   927                           ;main.c: 107: mR.direction=1;
   928  0003EA  0E01               	movlw	1
   929  0003EC  0101               	movlb	1	; () banked
   930  0003EE  6FDA               	movwf	(main@mR+1)& (0+255),b
   931                           
   932                           ; BSR set to: 1
   933                           ;main.c: 108: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   934  0003F0  0E77               	movlw	119
   935  0003F2  0101               	movlb	1	; () banked
   936  0003F4  6FDB               	movwf	(main@mR+2)& (0+255),b
   937  0003F6  0E0F               	movlw	15
   938  0003F8  0101               	movlb	1	; () banked
   939  0003FA  6FDC               	movwf	(main@mR+3)& (0+255),b
   940                           
   941                           ; BSR set to: 1
   942                           ;main.c: 109: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   943  0003FC  0E76               	movlw	118
   944  0003FE  0101               	movlb	1	; () banked
   945  000400  6FDD               	movwf	(main@mR+4)& (0+255),b
   946  000402  0E0F               	movlw	15
   947  000404  0101               	movlb	1	; () banked
   948  000406  6FDE               	movwf	(main@mR+5)& (0+255),b
   949                           
   950                           ;main.c: 110: mR.dir_pin=2;
   951  000408  0E02               	movlw	2
   952  00040A  0101               	movlb	1	; () banked
   953  00040C  6FDF               	movwf	(main@mR+6)& (0+255),b
   954                           
   955                           ;main.c: 111: mR.PWMperiod=199;
   956  00040E  0E00               	movlw	0
   957  000410  0101               	movlb	1	; () banked
   958  000412  6FE1               	movwf	(main@mR+8)& (0+255),b
   959  000414  0EC7               	movlw	199
   960  000416  6FE0               	movwf	(main@mR+7)& (0+255),b
   961                           
   962                           ;main.c: 113: OSCCON = 0b1110010;
   963  000418  0E72               	movlw	114
   964  00041A  6ED3               	movwf	4051,c	;volatile
   965  00041C                     l392:
   966  00041C  B4D3               	btfsc	4051,2,c	;volatile
   967  00041E  D354               	goto	l3643
   968  000420  D7FD               	goto	l392
   969  000422                     l3445:
   970                           
   971                           ;main.c: 125: stop(&mL, &mR);
   972  000422  0ED0               	movlw	low main@mL
   973  000424  0100               	movlb	0	; () banked
   974  000426  6F62               	movwf	stop@mL& (0+255),b
   975  000428  0E01               	movlw	high main@mL
   976  00042A  0100               	movlb	0	; () banked
   977  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   978  00042E  0ED9               	movlw	low main@mR
   979  000430  0100               	movlb	0	; () banked
   980  000432  6F64               	movwf	stop@mR& (0+255),b
   981  000434  0E01               	movlw	high main@mR
   982  000436  0100               	movlb	0	; () banked
   983  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   984  00043A  ECD9  F00B         	call	_stop	;wreg free
   985                           
   986                           ;main.c: 128: RFID_Read=0;
   987  00043E  0E00               	movlw	0
   988  000440  0101               	movlb	1	; () banked
   989  000442  6FF8               	movwf	_RFID_Read& (0+255),b	;volatile
   990                           
   991                           ; BSR set to: 1
   992                           ;main.c: 129: Move=0;
   993  000444  0E00               	movlw	0
   994  000446  0101               	movlb	1	; () banked
   995  000448  6FCF               	movwf	main@Move& (0+255),b
   996                           
   997                           ; BSR set to: 1
   998                           ;main.c: 132: SensorResult[0]=grabLeftIR();
   999  00044A  ECDE  F00C         	call	_grabLeftIR	;wreg free
  1000  00044E  C024  F1C9         	movff	?_grabLeftIR,main@SensorResult
  1001  000452  C025  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1002                           
  1003                           ;main.c: 133: SensorResult[1]=grabRightIR();
  1004  000456  ECA5  F00C         	call	_grabRightIR	;wreg free
  1005  00045A  C024  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1006  00045E  C025  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1007                           
  1008                           ;main.c: 137: CAP1BUFH=0;
  1009  000462  0E00               	movlw	0
  1010  000464  6E69               	movwf	3945,c	;volatile
  1011                           
  1012                           ;main.c: 138: CAP1BUFL=0;
  1013  000466  0E00               	movlw	0
  1014  000468  6E68               	movwf	3944,c	;volatile
  1015                           
  1016                           ;main.c: 139: CAP2BUFH=0;
  1017  00046A  0E00               	movlw	0
  1018  00046C  6E67               	movwf	3943,c	;volatile
  1019                           
  1020                           ;main.c: 140: CAP2BUFL=0;
  1021  00046E  0E00               	movlw	0
  1022  000470  6E66               	movwf	3942,c	;volatile
  1023                           
  1024                           ;main.c: 143: SendLCD(0b00000001,0);
  1025  000472  0E00               	movlw	0
  1026  000474  6E28               	movwf	SendLCD@type,c
  1027  000476  0E01               	movlw	1
  1028  000478  ECA1  F00E         	call	_SendLCD
  1029                           
  1030                           ;main.c: 144: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1031  00047C  0E21               	movlw	33
  1032  00047E                     u3077:
  1033  00047E  2EE8               	decfsz	wreg,f,c
  1034  000480  D7FE               	goto	u3077
  1035  000482  F000               	nop	
  1036                           
  1037                           ;main.c: 145: SendLCD(0b00000010,0);
  1038  000484  0E00               	movlw	0
  1039  000486  6E28               	movwf	SendLCD@type,c
  1040  000488  0E02               	movlw	2
  1041  00048A  ECA1  F00E         	call	_SendLCD
  1042                           
  1043                           ;main.c: 146: _delay((unsigned long)((2)*(8000000/4000.0)));
  1044  00048E  0E06               	movlw	6
  1045  000490  0100               	movlb	0	; () banked
  1046  000492  6FBA               	movwf	??_main& (0+255),b
  1047  000494  0E30               	movlw	48
  1048  000496                     u3087:
  1049  000496  2EE8               	decfsz	wreg,f,c
  1050  000498  D7FE               	goto	u3087
  1051  00049A  2FBA               	decfsz	??_main& (0+255),f,b
  1052  00049C  D7FC               	goto	u3087
  1053  00049E  D000               	nop2	
  1054                           
  1055                           ;main.c: 147: SetLine(1);
  1056  0004A0  0E01               	movlw	1
  1057  0004A2  EC89  F00E         	call	_SetLine
  1058                           
  1059                           ;main.c: 148: LCD_String("      Inert Mode");
  1060  0004A6  0E1C               	movlw	low STR_5
  1061  0004A8  6E2A               	movwf	LCD_String@string,c
  1062  0004AA  0E03               	movlw	high STR_5
  1063  0004AC  6E2B               	movwf	LCD_String@string+1,c
  1064  0004AE  EC17  F00D         	call	_LCD_String	;wreg free
  1065                           
  1066                           ;main.c: 149: SetLine(2);
  1067  0004B2  0E02               	movlw	2
  1068  0004B4  EC89  F00E         	call	_SetLine
  1069                           
  1070                           ;main.c: 150: if (RFID_Read) {
  1071  0004B8  0101               	movlb	1	; () banked
  1072  0004BA  51F8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1073  0004BC  B4D8               	btfsc	status,2,c
  1074  0004BE  D007               	goto	l3481
  1075                           
  1076                           ; BSR set to: 1
  1077                           ;main.c: 151: LCD_String(Message);
  1078  0004C0  0EBE               	movlw	low main@Message
  1079  0004C2  6E2A               	movwf	LCD_String@string,c
  1080  0004C4  0E01               	movlw	high main@Message
  1081  0004C6  6E2B               	movwf	LCD_String@string+1,c
  1082  0004C8  EC17  F00D         	call	_LCD_String	;wreg free
  1083                           
  1084                           ;main.c: 152: } else {
  1085  0004CC  D2FD               	goto	l3643
  1086  0004CE                     l3481:
  1087                           
  1088                           ;main.c: 153: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1089  0004CE  0E00               	movlw	low main@buf
  1090  0004D0  6E30               	movwf	sprintf@sp,c
  1091  0004D2  0E01               	movlw	high main@buf
  1092  0004D4  6E31               	movwf	sprintf@sp+1,c
  1093  0004D6  0E0B               	movlw	low STR_6
  1094  0004D8  6E32               	movwf	sprintf@f,c
  1095  0004DA  0E03               	movlw	high STR_6
  1096  0004DC  6E33               	movwf	sprintf@f+1,c
  1097  0004DE  C1C9  F034         	movff	main@SensorResult,?_sprintf+4
  1098  0004E2  C1CA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1099  0004E6  C1CB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1100  0004EA  C1CC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1101  0004EE  EC30  F008         	call	_sprintf	;wreg free
  1102                           
  1103                           ;main.c: 154: LCD_String(buf);
  1104  0004F2  0E00               	movlw	low main@buf
  1105  0004F4  6E2A               	movwf	LCD_String@string,c
  1106  0004F6  0E01               	movlw	high main@buf
  1107  0004F8  6E2B               	movwf	LCD_String@string+1,c
  1108  0004FA  EC17  F00D         	call	_LCD_String	;wreg free
  1109                           
  1110                           ;main.c: 155: }
  1111                           ;main.c: 157: break;
  1112  0004FE  D2E4               	goto	l3643
  1113  000500                     l3485:
  1114                           
  1115                           ;main.c: 161: initMotorPWM();
  1116  000500  EC19  F00E         	call	_initMotorPWM	;wreg free
  1117                           
  1118                           ;main.c: 162: initTimer();
  1119  000504  EC0D  F00F         	call	_initTimer	;wreg free
  1120                           
  1121                           ;main.c: 163: initRFID();
  1122  000508  ECFF  F00E         	call	_initRFID	;wreg free
  1123                           
  1124                           ;main.c: 164: initLCD();
  1125  00050C  EC30  F00B         	call	_initLCD	;wreg free
  1126                           
  1127                           ;main.c: 165: initIR();
  1128  000510  ECDF  F00E         	call	_initIR	;wreg free
  1129                           
  1130                           ;main.c: 167: enableSensor(0, 1);
  1131  000514  0E01               	movlw	1
  1132  000516  6E24               	movwf	enableSensor@status,c
  1133  000518  0E00               	movlw	0
  1134  00051A  ECB9  F00E         	call	_enableSensor
  1135                           
  1136                           ;main.c: 168: enableSensor(1, 1);
  1137  00051E  0E01               	movlw	1
  1138  000520  6E24               	movwf	enableSensor@status,c
  1139  000522  0E01               	movlw	1
  1140  000524  ECB9  F00E         	call	_enableSensor
  1141                           
  1142                           ;main.c: 171: fullSpeed(&mL, &mR, 100);
  1143  000528  0ED0               	movlw	low main@mL
  1144  00052A  0100               	movlb	0	; () banked
  1145  00052C  6F62               	movwf	fullSpeed@mL& (0+255),b
  1146  00052E  0E01               	movlw	high main@mL
  1147  000530  0100               	movlb	0	; () banked
  1148  000532  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1149  000534  0ED9               	movlw	low main@mR
  1150  000536  0100               	movlb	0	; () banked
  1151  000538  6F64               	movwf	fullSpeed@mR& (0+255),b
  1152  00053A  0E01               	movlw	high main@mR
  1153  00053C  0100               	movlb	0	; () banked
  1154  00053E  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1155  000540  0E64               	movlw	100
  1156  000542  0100               	movlb	0	; () banked
  1157  000544  6F66               	movwf	fullSpeed@power& (0+255),b
  1158  000546  EC65  F00C         	call	_fullSpeed	;wreg free
  1159                           
  1160                           ;main.c: 172: delay_tenth_s(1);
  1161  00054A  0E01               	movlw	1
  1162  00054C  EC36  F00E         	call	_delay_tenth_s
  1163  000550  D2BA               	goto	l3639
  1164  000552                     l3501:
  1165                           
  1166                           ;main.c: 180: SetLine(1);
  1167  000552  0E01               	movlw	1
  1168  000554  EC89  F00E         	call	_SetLine
  1169                           
  1170                           ;main.c: 181: LCD_String("Searching");
  1171  000558  0E44               	movlw	low STR_7
  1172  00055A  6E2A               	movwf	LCD_String@string,c
  1173  00055C  0E03               	movlw	high STR_7
  1174  00055E  6E2B               	movwf	LCD_String@string+1,c
  1175  000560  EC17  F00D         	call	_LCD_String	;wreg free
  1176                           
  1177                           ;main.c: 183: if (DirectionFound==-1) {
  1178  000564  0101               	movlb	1	; () banked
  1179  000566  29CD               	incf	main@DirectionFound& (0+255),w,b
  1180  000568  A4D8               	btfss	status,2,c
  1181  00056A  D03E               	goto	l3519
  1182                           
  1183                           ; BSR set to: 1
  1184                           ;main.c: 188: MoveType[Move]=0;
  1185  00056C  0101               	movlb	1	; () banked
  1186  00056E  51CF               	movf	main@Move& (0+255),w,b
  1187  000570  0D01               	mullw	1
  1188  000572  0E28               	movlw	low main@MoveType
  1189  000574  24F3               	addwf	prodl,w,c
  1190  000576  6ED9               	movwf	fsr2l,c
  1191  000578  0E01               	movlw	high main@MoveType
  1192  00057A  20F4               	addwfc	prodh,w,c
  1193  00057C  6EDA               	movwf	fsr2h,c
  1194  00057E  0E00               	movlw	0
  1195  000580  6EDF               	movwf	indf2,c
  1196                           
  1197                           ;main.c: 189: MoveTime[Move]=6;
  1198  000582  0101               	movlb	1	; () banked
  1199  000584  51CF               	movf	main@Move& (0+255),w,b
  1200  000586  0D02               	mullw	2
  1201  000588  0E5A               	movlw	low main@MoveTime
  1202  00058A  24F3               	addwf	prodl,w,c
  1203  00058C  6ED9               	movwf	fsr2l,c
  1204  00058E  0E01               	movlw	high main@MoveTime
  1205  000590  20F4               	addwfc	prodh,w,c
  1206  000592  6EDA               	movwf	fsr2h,c
  1207  000594  0E06               	movlw	6
  1208  000596  6EDE               	movwf	postinc2,c
  1209  000598  0E00               	movlw	0
  1210  00059A  6EDD               	movwf	postdec2,c
  1211                           
  1212                           ; BSR set to: 1
  1213                           ;main.c: 190: Move++;
  1214  00059C  0101               	movlb	1	; () banked
  1215  00059E  2BCF               	incf	main@Move& (0+255),f,b
  1216                           
  1217                           ; BSR set to: 1
  1218                           ;main.c: 191: fullSpeed(&mL, &mR, 100);
  1219  0005A0  0ED0               	movlw	low main@mL
  1220  0005A2  0100               	movlb	0	; () banked
  1221  0005A4  6F62               	movwf	fullSpeed@mL& (0+255),b
  1222  0005A6  0E01               	movlw	high main@mL
  1223  0005A8  0100               	movlb	0	; () banked
  1224  0005AA  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1225  0005AC  0ED9               	movlw	low main@mR
  1226  0005AE  0100               	movlb	0	; () banked
  1227  0005B0  6F64               	movwf	fullSpeed@mR& (0+255),b
  1228  0005B2  0E01               	movlw	high main@mR
  1229  0005B4  0100               	movlb	0	; () banked
  1230  0005B6  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1231  0005B8  0E64               	movlw	100
  1232  0005BA  0100               	movlb	0	; () banked
  1233  0005BC  6F66               	movwf	fullSpeed@power& (0+255),b
  1234  0005BE  EC65  F00C         	call	_fullSpeed	;wreg free
  1235                           
  1236                           ;main.c: 192: delay_tenth_s(6);
  1237  0005C2  0E06               	movlw	6
  1238  0005C4  EC36  F00E         	call	_delay_tenth_s
  1239                           
  1240                           ;main.c: 193: stop(&mL,&mR);
  1241  0005C8  0ED0               	movlw	low main@mL
  1242  0005CA  0100               	movlb	0	; () banked
  1243  0005CC  6F62               	movwf	stop@mL& (0+255),b
  1244  0005CE  0E01               	movlw	high main@mL
  1245  0005D0  0100               	movlb	0	; () banked
  1246  0005D2  6F63               	movwf	(stop@mL+1)& (0+255),b
  1247  0005D4  0ED9               	movlw	low main@mR
  1248  0005D6  0100               	movlb	0	; () banked
  1249  0005D8  6F64               	movwf	stop@mR& (0+255),b
  1250  0005DA  0E01               	movlw	high main@mR
  1251  0005DC  0100               	movlb	0	; () banked
  1252  0005DE  6F65               	movwf	(stop@mR+1)& (0+255),b
  1253  0005E0  ECD9  F00B         	call	_stop	;wreg free
  1254                           
  1255                           ;main.c: 194: DirectionFound=0;
  1256  0005E4  0E00               	movlw	0
  1257  0005E6  D048               	goto	L2
  1258  0005E8                     l3519:
  1259                           
  1260                           ; BSR set to: 1
  1261  0005E8  0101               	movlb	1	; () banked
  1262  0005EA  51CD               	movf	main@DirectionFound& (0+255),w,b
  1263  0005EC  0101               	movlb	1	; () banked
  1264  0005EE  A4D8               	btfss	status,2,c
  1265  0005F0  D031               	goto	l3523
  1266                           
  1267                           ; BSR set to: 1
  1268                           ;main.c: 197: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1269                           ;main.c: 198: &MoveTime, &Move, &MoveType, &RFID_Read, &millis);
  1270  0005F2  0ED0               	movlw	low main@mL
  1271  0005F4  0100               	movlb	0	; () banked
  1272  0005F6  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1273  0005F8  0E01               	movlw	high main@mL
  1274  0005FA  0100               	movlb	0	; () banked
  1275  0005FC  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1276  0005FE  0ED9               	movlw	low main@mR
  1277  000600  0100               	movlb	0	; () banked
  1278  000602  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1279  000604  0E01               	movlw	high main@mR
  1280  000606  0100               	movlb	0	; () banked
  1281  000608  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1282  00060A  C1C8  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1283  00060E  0100               	movlb	0	; () banked
  1284  000610  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1285  000612  0E5A               	movlw	low main@MoveTime
  1286  000614  0100               	movlb	0	; () banked
  1287  000616  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1288  000618  0E01               	movlw	high main@MoveTime
  1289  00061A  0100               	movlb	0	; () banked
  1290  00061C  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1291  00061E  0ECF               	movlw	low main@Move
  1292  000620  0100               	movlb	0	; () banked
  1293  000622  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1294  000624  0E01               	movlw	high main@Move
  1295  000626  0100               	movlb	0	; () banked
  1296  000628  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1297  00062A  0E28               	movlw	low main@MoveType
  1298  00062C  0100               	movlb	0	; () banked
  1299  00062E  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1300  000630  0E01               	movlw	high main@MoveType
  1301  000632  0100               	movlb	0	; () banked
  1302  000634  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1303  000636  0EF8               	movlw	low _RFID_Read
  1304  000638  0100               	movlb	0	; () banked
  1305  00063A  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1306  00063C  0E01               	movlw	high _RFID_Read
  1307  00063E  0100               	movlb	0	; () banked
  1308  000640  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1309  000642  0EF6               	movlw	low _millis
  1310  000644  0100               	movlb	0	; () banked
  1311  000646  6F7B               	movwf	ScanWithRange@millis& (0+255),b
  1312  000648  0E01               	movlw	high _millis
  1313  00064A  0100               	movlb	0	; () banked
  1314  00064C  6F7C               	movwf	(ScanWithRange@millis+1)& (0+255),b
  1315  00064E  EC75  F005         	call	_ScanWithRange	;wreg free
  1316  000652  D012               	goto	L2
  1317  000654                     l3523:
  1318                           
  1319                           ; BSR set to: 1
  1320  000654  0101               	movlb	1	; () banked
  1321  000656  05CD               	decf	main@DirectionFound& (0+255),w,b
  1322  000658  A4D8               	btfss	status,2,c
  1323  00065A  D011               	goto	l3527
  1324                           
  1325                           ; BSR set to: 1
  1326                           ;main.c: 201: DirectionFound=ScanIR(&mL, &mR);
  1327  00065C  0ED0               	movlw	low main@mL
  1328  00065E  0100               	movlb	0	; () banked
  1329  000660  6F6D               	movwf	ScanIR@mL& (0+255),b
  1330  000662  0E01               	movlw	high main@mL
  1331  000664  0100               	movlb	0	; () banked
  1332  000666  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1333  000668  0ED9               	movlw	low main@mR
  1334  00066A  0100               	movlb	0	; () banked
  1335  00066C  6F6F               	movwf	ScanIR@mR& (0+255),b
  1336  00066E  0E01               	movlw	high main@mR
  1337  000670  0100               	movlb	0	; () banked
  1338  000672  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1339  000674  EC50  F00A         	call	_ScanIR	;wreg free
  1340  000678                     L2:
  1341  000678  0101               	movlb	1	; () banked
  1342  00067A  6FCD               	movwf	main@DirectionFound& (0+255),b
  1343                           
  1344                           ;main.c: 202: } else if (DirectionFound==2) {
  1345  00067C  D225               	goto	l3643
  1346  00067E                     l3527:
  1347                           
  1348                           ; BSR set to: 1
  1349  00067E  0E02               	movlw	2
  1350  000680  0101               	movlb	1	; () banked
  1351  000682  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1352  000684  A4D8               	btfss	status,2,c
  1353  000686  D220               	goto	l3643
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;main.c: 204: mode=2;
  1357  000688  0E02               	movlw	2
  1358  00068A  6E3B               	movwf	_mode,c	;volatile
  1359                           
  1360                           ; BSR set to: 1
  1361                           ;main.c: 205: MoveType[Move]=1;
  1362  00068C  0101               	movlb	1	; () banked
  1363  00068E  51CF               	movf	main@Move& (0+255),w,b
  1364  000690  0D01               	mullw	1
  1365  000692  0E28               	movlw	low main@MoveType
  1366  000694  24F3               	addwf	prodl,w,c
  1367  000696  6ED9               	movwf	fsr2l,c
  1368  000698  0E01               	movlw	high main@MoveType
  1369  00069A  20F4               	addwfc	prodh,w,c
  1370  00069C  6EDA               	movwf	fsr2h,c
  1371  00069E  0E01               	movlw	1
  1372  0006A0  6EDF               	movwf	indf2,c
  1373                           
  1374                           ; BSR set to: 1
  1375                           ;main.c: 206: }
  1376                           ;main.c: 208: break;
  1377                           
  1378                           ; BSR set to: 1
  1379                           
  1380                           ; BSR set to: 1
  1381                           
  1382                           ; BSR set to: 1
  1383  0006A2  D212               	goto	l3643
  1384  0006A4                     l3533:
  1385                           
  1386                           ;main.c: 215: if (RFID_Read) {
  1387  0006A4  0101               	movlb	1	; () banked
  1388  0006A6  51F8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1389  0006A8  B4D8               	btfsc	status,2,c
  1390  0006AA  D0A2               	goto	l3575
  1391                           
  1392                           ; BSR set to: 1
  1393                           ;main.c: 216: stop(&mL, &mR);
  1394  0006AC  0ED0               	movlw	low main@mL
  1395  0006AE  0100               	movlb	0	; () banked
  1396  0006B0  6F62               	movwf	stop@mL& (0+255),b
  1397  0006B2  0E01               	movlw	high main@mL
  1398  0006B4  0100               	movlb	0	; () banked
  1399  0006B6  6F63               	movwf	(stop@mL+1)& (0+255),b
  1400  0006B8  0ED9               	movlw	low main@mR
  1401  0006BA  0100               	movlb	0	; () banked
  1402  0006BC  6F64               	movwf	stop@mR& (0+255),b
  1403  0006BE  0E01               	movlw	high main@mR
  1404  0006C0  0100               	movlb	0	; () banked
  1405  0006C2  6F65               	movwf	(stop@mR+1)& (0+255),b
  1406  0006C4  ECD9  F00B         	call	_stop	;wreg free
  1407                           
  1408                           ;main.c: 217: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1409  0006C8  0E03               	movlw	3
  1410  0006CA  0101               	movlb	1	; () banked
  1411  0006CC  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1412  0006CE  A4D8               	btfss	status,2,c
  1413  0006D0  D002               	goto	u2890
  1414  0006D2  0E01               	movlw	1
  1415  0006D4  D001               	goto	u2892
  1416  0006D6                     u2890:
  1417  0006D6  0E00               	movlw	0
  1418  0006D8                     u2892:
  1419  0006D8  0100               	movlb	0	; () banked
  1420  0006DA  6FBA               	movwf	??_main& (0+255),b
  1421  0006DC  0E02               	movlw	2
  1422  0006DE  0101               	movlb	1	; () banked
  1423  0006E0  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1424  0006E2  A4D8               	btfss	status,2,c
  1425  0006E4  D002               	goto	u2900
  1426  0006E6  0E01               	movlw	1
  1427  0006E8  D001               	goto	u2902
  1428  0006EA                     u2900:
  1429  0006EA  0E00               	movlw	0
  1430  0006EC                     u2902:
  1431  0006EC  0100               	movlb	0	; () banked
  1432  0006EE  15BA               	andwf	??_main& (0+255),w,b
  1433  0006F0  A0E8               	btfss	wreg,0,c
  1434  0006F2  D1EA               	goto	l3643
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;main.c: 218: if (VerifySignal(&ReceivedString)){
  1438  0006F4  0EE6               	movlw	low _ReceivedString
  1439  0006F6  6E24               	movwf	VerifySignal@Signal,c
  1440  0006F8  0E01               	movlw	high _ReceivedString
  1441  0006FA  6E25               	movwf	VerifySignal@Signal+1,c
  1442  0006FC  EC46  F00D         	call	_VerifySignal	;wreg free
  1443  000700  0900               	iorlw	0
  1444  000702  B4D8               	btfsc	status,2,c
  1445  000704  D041               	goto	l3567
  1446                           
  1447                           ;main.c: 220: for (i=0; i<10; i++){
  1448  000706  0E00               	movlw	0
  1449  000708  0101               	movlb	1	; () banked
  1450  00070A  6FCE               	movwf	main@i& (0+255),b
  1451  00070C                     l3543:
  1452                           
  1453                           ; BSR set to: 1
  1454  00070C  0E09               	movlw	9
  1455  00070E  0101               	movlb	1	; () banked
  1456  000710  65CE               	cpfsgt	main@i& (0+255),b
  1457  000712  D001               	goto	l3547
  1458  000714  D020               	goto	l3553
  1459  000716                     l3547:
  1460                           
  1461                           ; BSR set to: 1
  1462                           ;main.c: 221: Message[i] = ReceivedString[i+1];
  1463  000716  0101               	movlb	1	; () banked
  1464  000718  51CE               	movf	main@i& (0+255),w,b
  1465  00071A  0100               	movlb	0	; () banked
  1466  00071C  6FBA               	movwf	??_main& (0+255),b
  1467  00071E  6BBB               	clrf	(??_main+1)& (0+255),b
  1468  000720  0E01               	movlw	1
  1469  000722  0100               	movlb	0	; () banked
  1470  000724  27BA               	addwf	??_main& (0+255),f,b
  1471  000726  0E00               	movlw	0
  1472  000728  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1473  00072A  0EE6               	movlw	low _ReceivedString
  1474  00072C  0100               	movlb	0	; () banked
  1475  00072E  25BA               	addwf	??_main& (0+255),w,b
  1476  000730  6ED9               	movwf	fsr2l,c
  1477  000732  0E01               	movlw	high _ReceivedString
  1478  000734  0100               	movlb	0	; () banked
  1479  000736  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1480  000738  6EDA               	movwf	fsr2h,c
  1481  00073A  0101               	movlb	1	; () banked
  1482  00073C  51CE               	movf	main@i& (0+255),w,b
  1483  00073E  0D01               	mullw	1
  1484  000740  0EBE               	movlw	low main@Message
  1485  000742  24F3               	addwf	prodl,w,c
  1486  000744  6EE1               	movwf	fsr1l,c
  1487  000746  0E01               	movlw	high main@Message
  1488  000748  20F4               	addwfc	prodh,w,c
  1489  00074A  6EE2               	movwf	fsr1h,c
  1490  00074C  CFDF FFE7          	movff	indf2,indf1
  1491                           
  1492                           ; BSR set to: 1
  1493  000750  0101               	movlb	1	; () banked
  1494  000752  2BCE               	incf	main@i& (0+255),f,b
  1495  000754  D7DB               	goto	l3543
  1496  000756                     l3553:
  1497                           
  1498                           ; BSR set to: 1
  1499                           ;main.c: 222: }
  1500                           ;main.c: 225: for (i=0; i<16; i++) {
  1501  000756  0E00               	movlw	0
  1502  000758  0101               	movlb	1	; () banked
  1503  00075A  6FCE               	movwf	main@i& (0+255),b
  1504  00075C                     l3555:
  1505                           
  1506                           ; BSR set to: 1
  1507  00075C  0E0F               	movlw	15
  1508  00075E  0101               	movlb	1	; () banked
  1509  000760  65CE               	cpfsgt	main@i& (0+255),b
  1510  000762  D001               	goto	l3559
  1511  000764  D00E               	goto	l3565
  1512  000766                     l3559:
  1513                           
  1514                           ; BSR set to: 1
  1515                           ;main.c: 226: ReceivedString[i]=0;
  1516  000766  0101               	movlb	1	; () banked
  1517  000768  51CE               	movf	main@i& (0+255),w,b
  1518  00076A  0D01               	mullw	1
  1519  00076C  0EE6               	movlw	low _ReceivedString
  1520  00076E  24F3               	addwf	prodl,w,c
  1521  000770  6ED9               	movwf	fsr2l,c
  1522  000772  0E01               	movlw	high _ReceivedString
  1523  000774  20F4               	addwfc	prodh,w,c
  1524  000776  6EDA               	movwf	fsr2h,c
  1525  000778  0E00               	movlw	0
  1526  00077A  6EDF               	movwf	indf2,c
  1527                           
  1528                           ; BSR set to: 1
  1529  00077C  0101               	movlb	1	; () banked
  1530  00077E  2BCE               	incf	main@i& (0+255),f,b
  1531  000780  D7ED               	goto	l3555
  1532  000782                     l3565:
  1533                           
  1534                           ; BSR set to: 1
  1535                           ;main.c: 227: }
  1536                           ;main.c: 228: mode=3;
  1537  000782  0E03               	movlw	3
  1538  000784  6E3B               	movwf	_mode,c	;volatile
  1539                           
  1540                           ;main.c: 230: } else {
  1541  000786  D1A0               	goto	l3643
  1542  000788                     l3567:
  1543                           
  1544                           ;main.c: 231: fullSpeedBack(&mL,&mR, 100);
  1545  000788  0ED0               	movlw	low main@mL
  1546  00078A  0100               	movlb	0	; () banked
  1547  00078C  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1548  00078E  0E01               	movlw	high main@mL
  1549  000790  0100               	movlb	0	; () banked
  1550  000792  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1551  000794  0ED9               	movlw	low main@mR
  1552  000796  0100               	movlb	0	; () banked
  1553  000798  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1554  00079A  0E01               	movlw	high main@mR
  1555  00079C  0100               	movlb	0	; () banked
  1556  00079E  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1557  0007A0  0E64               	movlw	100
  1558  0007A2  0100               	movlb	0	; () banked
  1559  0007A4  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1560  0007A6  ECBC  F00D         	call	_fullSpeedBack	;wreg free
  1561                           
  1562                           ;main.c: 232: delay_tenth_s(5);
  1563  0007AA  0E05               	movlw	5
  1564  0007AC  EC36  F00E         	call	_delay_tenth_s
  1565                           
  1566                           ;main.c: 233: stop(&mL,&mR);
  1567  0007B0  0ED0               	movlw	low main@mL
  1568  0007B2  0100               	movlb	0	; () banked
  1569  0007B4  6F62               	movwf	stop@mL& (0+255),b
  1570  0007B6  0E01               	movlw	high main@mL
  1571  0007B8  0100               	movlb	0	; () banked
  1572  0007BA  6F63               	movwf	(stop@mL+1)& (0+255),b
  1573  0007BC  0ED9               	movlw	low main@mR
  1574  0007BE  0100               	movlb	0	; () banked
  1575  0007C0  6F64               	movwf	stop@mR& (0+255),b
  1576  0007C2  0E01               	movlw	high main@mR
  1577  0007C4  0100               	movlb	0	; () banked
  1578  0007C6  6F65               	movwf	(stop@mR+1)& (0+255),b
  1579  0007C8  ECD9  F00B         	call	_stop	;wreg free
  1580                           
  1581                           ;main.c: 234: fullSpeed(&mL,&mR, 100);
  1582  0007CC  0ED0               	movlw	low main@mL
  1583  0007CE  0100               	movlb	0	; () banked
  1584  0007D0  6F62               	movwf	fullSpeed@mL& (0+255),b
  1585  0007D2  0E01               	movlw	high main@mL
  1586  0007D4  0100               	movlb	0	; () banked
  1587  0007D6  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1588  0007D8  0ED9               	movlw	low main@mR
  1589  0007DA  0100               	movlb	0	; () banked
  1590  0007DC  6F64               	movwf	fullSpeed@mR& (0+255),b
  1591  0007DE  0E01               	movlw	high main@mR
  1592  0007E0  0100               	movlb	0	; () banked
  1593  0007E2  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1594  0007E4  0E64               	movlw	100
  1595  0007E6  0100               	movlb	0	; () banked
  1596  0007E8  6F66               	movwf	fullSpeed@power& (0+255),b
  1597  0007EA  EC65  F00C         	call	_fullSpeed	;wreg free
  1598                           
  1599                           ;main.c: 235: }
  1600                           ;main.c: 236: }
  1601                           ;main.c: 237: } else {
  1602  0007EE  D16C               	goto	l3643
  1603  0007F0                     l3575:
  1604                           
  1605                           ;main.c: 238: DirectionFound=1;
  1606  0007F0  0E01               	movlw	1
  1607  0007F2  0101               	movlb	1	; () banked
  1608  0007F4  6FCD               	movwf	main@DirectionFound& (0+255),b
  1609                           
  1610                           ;main.c: 239: mode=1;
  1611  0007F6  0E01               	movlw	1
  1612  0007F8  6E3B               	movwf	_mode,c	;volatile
  1613                           
  1614                           ; BSR set to: 1
  1615                           ;main.c: 241: fullSpeed(&mL,&mR, 100);
  1616  0007FA  0ED0               	movlw	low main@mL
  1617  0007FC  0100               	movlb	0	; () banked
  1618  0007FE  6F62               	movwf	fullSpeed@mL& (0+255),b
  1619  000800  0E01               	movlw	high main@mL
  1620  000802  0100               	movlb	0	; () banked
  1621  000804  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1622  000806  0ED9               	movlw	low main@mR
  1623  000808  0100               	movlb	0	; () banked
  1624  00080A  6F64               	movwf	fullSpeed@mR& (0+255),b
  1625  00080C  0E01               	movlw	high main@mR
  1626  00080E  0100               	movlb	0	; () banked
  1627  000810  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1628  000812  0E64               	movlw	100
  1629  000814  0100               	movlb	0	; () banked
  1630  000816  6F66               	movwf	fullSpeed@power& (0+255),b
  1631  000818  EC65  F00C         	call	_fullSpeed	;wreg free
  1632                           
  1633                           ;main.c: 242: delay_tenth_s(1);
  1634  00081C  0E01               	movlw	1
  1635  00081E  EC36  F00E         	call	_delay_tenth_s
  1636                           
  1637                           ;main.c: 243: MoveType[Move] = 0;
  1638  000822  0101               	movlb	1	; () banked
  1639  000824  51CF               	movf	main@Move& (0+255),w,b
  1640  000826  0D01               	mullw	1
  1641  000828  0E28               	movlw	low main@MoveType
  1642  00082A  24F3               	addwf	prodl,w,c
  1643  00082C  6ED9               	movwf	fsr2l,c
  1644  00082E  0E01               	movlw	high main@MoveType
  1645  000830  20F4               	addwfc	prodh,w,c
  1646  000832  6EDA               	movwf	fsr2h,c
  1647  000834  0E00               	movlw	0
  1648  000836  6EDF               	movwf	indf2,c
  1649                           
  1650                           ; BSR set to: 1
  1651                           ;main.c: 244: MoveTime[Move] = 5;
  1652  000838  0101               	movlb	1	; () banked
  1653  00083A  51CF               	movf	main@Move& (0+255),w,b
  1654  00083C  0D02               	mullw	2
  1655  00083E  0E5A               	movlw	low main@MoveTime
  1656  000840  24F3               	addwf	prodl,w,c
  1657  000842  6ED9               	movwf	fsr2l,c
  1658  000844  0E01               	movlw	high main@MoveTime
  1659  000846  20F4               	addwfc	prodh,w,c
  1660  000848  6EDA               	movwf	fsr2h,c
  1661  00084A  0E05               	movlw	5
  1662  00084C  6EDE               	movwf	postinc2,c
  1663  00084E  0E00               	movlw	0
  1664  000850  6EDD               	movwf	postdec2,c
  1665                           
  1666                           ; BSR set to: 1
  1667                           ;main.c: 245: Move++;
  1668  000852  0101               	movlb	1	; () banked
  1669  000854  2BCF               	incf	main@Move& (0+255),f,b
  1670                           
  1671                           ; BSR set to: 1
  1672                           ;main.c: 246: }
  1673                           ;main.c: 248: break;
  1674  000856  D138               	goto	l3643
  1675  000858                     l3587:
  1676                           
  1677                           ;main.c: 253: SetLine(1);
  1678  000858  0E01               	movlw	1
  1679  00085A  EC89  F00E         	call	_SetLine
  1680                           
  1681                           ;main.c: 254: LCD_String(Message);
  1682  00085E  0EBE               	movlw	low main@Message
  1683  000860  6E2A               	movwf	LCD_String@string,c
  1684  000862  0E01               	movlw	high main@Message
  1685  000864  6E2B               	movwf	LCD_String@string+1,c
  1686  000866  EC17  F00D         	call	_LCD_String	;wreg free
  1687                           
  1688                           ;main.c: 255: SetLine(2);
  1689  00086A  0E02               	movlw	2
  1690  00086C  EC89  F00E         	call	_SetLine
  1691                           
  1692                           ;main.c: 256: LCD_String("Going Home");
  1693  000870  0E39               	movlw	low STR_8
  1694  000872  6E2A               	movwf	LCD_String@string,c
  1695  000874  0E03               	movlw	high STR_8
  1696  000876  6E2B               	movwf	LCD_String@string+1,c
  1697  000878  EC17  F00D         	call	_LCD_String	;wreg free
  1698  00087C                     l3593:
  1699  00087C  0101               	movlb	1	; () banked
  1700  00087E  BFCF               	btfsc	main@Move& (0+255),7,b
  1701  000880  D114               	goto	l3637
  1702                           
  1703                           ; BSR set to: 1
  1704                           ;main.c: 259: stop(&mL,&mR);
  1705                           
  1706                           ; BSR set to: 1
  1707                           
  1708                           ; BSR set to: 1
  1709  000882  0ED0               	movlw	low main@mL
  1710  000884  0100               	movlb	0	; () banked
  1711  000886  6F62               	movwf	stop@mL& (0+255),b
  1712  000888  0E01               	movlw	high main@mL
  1713  00088A  0100               	movlb	0	; () banked
  1714  00088C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1715  00088E  0ED9               	movlw	low main@mR
  1716  000890  0100               	movlb	0	; () banked
  1717  000892  6F64               	movwf	stop@mR& (0+255),b
  1718  000894  0E01               	movlw	high main@mR
  1719  000896  0100               	movlb	0	; () banked
  1720  000898  6F65               	movwf	(stop@mR+1)& (0+255),b
  1721  00089A  ECD9  F00B         	call	_stop	;wreg free
  1722                           
  1723                           ;main.c: 260: if (MoveType[Move]==0) {
  1724  00089E  0101               	movlb	1	; () banked
  1725  0008A0  51CF               	movf	main@Move& (0+255),w,b
  1726  0008A2  0D01               	mullw	1
  1727  0008A4  0E28               	movlw	low main@MoveType
  1728  0008A6  24F3               	addwf	prodl,w,c
  1729  0008A8  6ED9               	movwf	fsr2l,c
  1730  0008AA  0E01               	movlw	high main@MoveType
  1731  0008AC  20F4               	addwfc	prodh,w,c
  1732  0008AE  6EDA               	movwf	fsr2h,c
  1733  0008B0  50DF               	movf	indf2,w,c
  1734  0008B2  A4D8               	btfss	status,2,c
  1735  0008B4  D01E               	goto	l3603
  1736                           
  1737                           ; BSR set to: 1
  1738                           ;main.c: 261: fullSpeedBack(&mL,&mR,100);
  1739  0008B6  0ED0               	movlw	low main@mL
  1740  0008B8  0100               	movlb	0	; () banked
  1741  0008BA  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1742  0008BC  0E01               	movlw	high main@mL
  1743  0008BE  0100               	movlb	0	; () banked
  1744  0008C0  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1745  0008C2  0ED9               	movlw	low main@mR
  1746  0008C4  0100               	movlb	0	; () banked
  1747  0008C6  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1748  0008C8  0E01               	movlw	high main@mR
  1749  0008CA  0100               	movlb	0	; () banked
  1750  0008CC  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1751  0008CE  0E64               	movlw	100
  1752  0008D0  0100               	movlb	0	; () banked
  1753  0008D2  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1754  0008D4  ECBC  F00D         	call	_fullSpeedBack	;wreg free
  1755                           
  1756                           ;main.c: 262: delay_tenth_s(MoveTime[Move]);
  1757  0008D8  0101               	movlb	1	; () banked
  1758  0008DA  51CF               	movf	main@Move& (0+255),w,b
  1759  0008DC  0D02               	mullw	2
  1760  0008DE  0E5A               	movlw	low main@MoveTime
  1761  0008E0  24F3               	addwf	prodl,w,c
  1762  0008E2  6ED9               	movwf	fsr2l,c
  1763  0008E4  0E01               	movlw	high main@MoveTime
  1764  0008E6  20F4               	addwfc	prodh,w,c
  1765  0008E8  6EDA               	movwf	fsr2h,c
  1766  0008EA  50DF               	movf	indf2,w,c
  1767  0008EC  EC36  F00E         	call	_delay_tenth_s
  1768                           
  1769                           ;main.c: 263: } else if (MoveType[Move]==1) {
  1770  0008F0  D0D6               	goto	l3629
  1771  0008F2                     l3603:
  1772  0008F2  0101               	movlb	1	; () banked
  1773  0008F4  51CF               	movf	main@Move& (0+255),w,b
  1774  0008F6  0D01               	mullw	1
  1775  0008F8  0E28               	movlw	low main@MoveType
  1776  0008FA  24F3               	addwf	prodl,w,c
  1777  0008FC  6ED9               	movwf	fsr2l,c
  1778  0008FE  0E01               	movlw	high main@MoveType
  1779  000900  20F4               	addwfc	prodh,w,c
  1780  000902  6EDA               	movwf	fsr2h,c
  1781  000904  04DE               	decf	postinc2,w,c
  1782  000906  A4D8               	btfss	status,2,c
  1783  000908  D070               	goto	l3621
  1784                           
  1785                           ; BSR set to: 1
  1786                           ;main.c: 264: T0CONbits.TMR0ON=0;
  1787  00090A  9ED5               	bcf	4053,7,c	;volatile
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;main.c: 265: TMR0L = 0;
  1791  00090C  0E00               	movlw	0
  1792  00090E  6ED6               	movwf	4054,c	;volatile
  1793                           
  1794                           ;main.c: 266: TMR0H = 0;
  1795  000910  0E00               	movlw	0
  1796  000912  6ED7               	movwf	4055,c	;volatile
  1797                           
  1798                           ;main.c: 267: millis = 0;
  1799  000914  0E00               	movlw	0
  1800  000916  0101               	movlb	1	; () banked
  1801  000918  6FF7               	movwf	(_millis+1)& (0+255),b	;volatile
  1802  00091A  0E00               	movlw	0
  1803  00091C  6FF6               	movwf	_millis& (0+255),b	;volatile
  1804                           
  1805                           ; BSR set to: 1
  1806                           ;main.c: 268: if (MoveTime[Move]>0) {
  1807  00091E  0101               	movlb	1	; () banked
  1808  000920  51CF               	movf	main@Move& (0+255),w,b
  1809  000922  0D02               	mullw	2
  1810  000924  0E5A               	movlw	low main@MoveTime
  1811  000926  24F3               	addwf	prodl,w,c
  1812  000928  6ED9               	movwf	fsr2l,c
  1813  00092A  0E01               	movlw	high main@MoveTime
  1814  00092C  20F4               	addwfc	prodh,w,c
  1815  00092E  6EDA               	movwf	fsr2h,c
  1816  000930  0E01               	movlw	1
  1817  000932  BEDB               	btfsc	plusw2,7,c
  1818  000934  D02A               	goto	l426
  1819  000936  0E01               	movlw	1
  1820  000938  50DB               	movf	plusw2,w,c
  1821  00093A  E103               	bnz	u3000
  1822  00093C  04DE               	decf	postinc2,w,c
  1823  00093E  A0D8               	btfss	status,0,c
  1824  000940  D024               	goto	l426
  1825  000942                     u3000:
  1826                           
  1827                           ; BSR set to: 1
  1828                           ;main.c: 269: T0CONbits.TMR0ON=1;
  1829  000942  8ED5               	bsf	4053,7,c	;volatile
  1830                           
  1831                           ; BSR set to: 1
  1832                           ;main.c: 270: turnRight(&mL,&mR,40);
  1833  000944  0ED0               	movlw	low main@mL
  1834  000946  0100               	movlb	0	; () banked
  1835  000948  6F67               	movwf	turnRight@mL& (0+255),b
  1836  00094A  0E01               	movlw	high main@mL
  1837  00094C  0100               	movlb	0	; () banked
  1838  00094E  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1839  000950  0ED9               	movlw	low main@mR
  1840  000952  0100               	movlb	0	; () banked
  1841  000954  6F69               	movwf	turnRight@mR& (0+255),b
  1842  000956  0E01               	movlw	high main@mR
  1843  000958  0100               	movlb	0	; () banked
  1844  00095A  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1845  00095C  0E28               	movlw	40
  1846  00095E  0100               	movlb	0	; () banked
  1847  000960  6F6B               	movwf	turnRight@power& (0+255),b
  1848  000962  ECDB  F00D         	call	_turnRight	;wreg free
  1849  000966                     l3615:
  1850  000966  0101               	movlb	1	; () banked
  1851  000968  51CF               	movf	main@Move& (0+255),w,b
  1852  00096A  0D02               	mullw	2
  1853  00096C  0E5A               	movlw	low main@MoveTime
  1854  00096E  24F3               	addwf	prodl,w,c
  1855  000970  6ED9               	movwf	fsr2l,c
  1856  000972  0E01               	movlw	high main@MoveTime
  1857  000974  20F4               	addwfc	prodh,w,c
  1858  000976  6EDA               	movwf	fsr2h,c
  1859  000978  50DE               	movf	postinc2,w,c
  1860  00097A  0101               	movlb	1	; () banked
  1861  00097C  5DF6               	subwf	_millis& (0+255),w,b	;volatile
  1862  00097E  50DE               	movf	postinc2,w,c
  1863  000980  0101               	movlb	1	; () banked
  1864  000982  59F7               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1865  000984  A0D8               	btfss	status,0,c
  1866  000986  D7EF               	goto	l3615
  1867  000988  D02E               	goto	l433
  1868  00098A                     l426:
  1869                           
  1870                           ; BSR set to: 1
  1871                           ;main.c: 275: T0CONbits.TMR0ON=1;
  1872  00098A  8ED5               	bsf	4053,7,c	;volatile
  1873                           
  1874                           ; BSR set to: 1
  1875                           ;main.c: 276: turnLeft(&mL,&mR,40);
  1876  00098C  0ED0               	movlw	low main@mL
  1877  00098E  0100               	movlb	0	; () banked
  1878  000990  6F67               	movwf	turnLeft@mL& (0+255),b
  1879  000992  0E01               	movlw	high main@mL
  1880  000994  0100               	movlb	0	; () banked
  1881  000996  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1882  000998  0ED9               	movlw	low main@mR
  1883  00099A  0100               	movlb	0	; () banked
  1884  00099C  6F69               	movwf	turnLeft@mR& (0+255),b
  1885  00099E  0E01               	movlw	high main@mR
  1886  0009A0  0100               	movlb	0	; () banked
  1887  0009A2  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1888  0009A4  0E28               	movlw	40
  1889  0009A6  0100               	movlb	0	; () banked
  1890  0009A8  6F6B               	movwf	turnLeft@power& (0+255),b
  1891  0009AA  ECFA  F00D         	call	_turnLeft	;wreg free
  1892  0009AE                     l3619:
  1893  0009AE  0101               	movlb	1	; () banked
  1894  0009B0  51CF               	movf	main@Move& (0+255),w,b
  1895  0009B2  0D02               	mullw	2
  1896  0009B4  0E5A               	movlw	low main@MoveTime
  1897  0009B6  24F3               	addwf	prodl,w,c
  1898  0009B8  6ED9               	movwf	fsr2l,c
  1899  0009BA  0E01               	movlw	high main@MoveTime
  1900  0009BC  20F4               	addwfc	prodh,w,c
  1901  0009BE  6EDA               	movwf	fsr2h,c
  1902  0009C0  CFDE F0BA          	movff	postinc2,??_main
  1903  0009C4  CFDD F0BB          	movff	postdec2,??_main+1
  1904  0009C8  0100               	movlb	0	; () banked
  1905  0009CA  1FBA               	comf	??_main& (0+255),f,b
  1906  0009CC  1FBB               	comf	(??_main+1)& (0+255),f,b
  1907  0009CE  4BBA               	infsnz	??_main& (0+255),f,b
  1908  0009D0  2BBB               	incf	(??_main+1)& (0+255),f,b
  1909  0009D2  0100               	movlb	0	; () banked
  1910  0009D4  51BA               	movf	??_main& (0+255),w,b
  1911  0009D6  0101               	movlb	1	; () banked
  1912  0009D8  5DF6               	subwf	_millis& (0+255),w,b	;volatile
  1913  0009DA  0100               	movlb	0	; () banked
  1914  0009DC  51BB               	movf	(??_main+1)& (0+255),w,b
  1915  0009DE  0101               	movlb	1	; () banked
  1916  0009E0  59F7               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1917  0009E2  A0D8               	btfss	status,0,c
  1918  0009E4  D7E4               	goto	l3619
  1919  0009E6                     l433:
  1920                           
  1921                           ; BSR set to: 1
  1922                           ;main.c: 279: T0CONbits.TMR0ON=0;
  1923  0009E6  9ED5               	bcf	4053,7,c	;volatile
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;main.c: 280: }
  1927                           ;main.c: 281: } else if (MoveType[Move]==2) {
  1928  0009E8  D05A               	goto	l3629
  1929  0009EA                     l3621:
  1930                           
  1931                           ; BSR set to: 1
  1932  0009EA  0101               	movlb	1	; () banked
  1933  0009EC  51CF               	movf	main@Move& (0+255),w,b
  1934  0009EE  0D01               	mullw	1
  1935  0009F0  0E28               	movlw	low main@MoveType
  1936  0009F2  24F3               	addwf	prodl,w,c
  1937  0009F4  6ED9               	movwf	fsr2l,c
  1938  0009F6  0E01               	movlw	high main@MoveType
  1939  0009F8  20F4               	addwfc	prodh,w,c
  1940  0009FA  6EDA               	movwf	fsr2h,c
  1941  0009FC  0E02               	movlw	2
  1942  0009FE  18DE               	xorwf	postinc2,w,c
  1943  000A00  A4D8               	btfss	status,2,c
  1944  000A02  D04D               	goto	l3629
  1945                           
  1946                           ; BSR set to: 1
  1947                           ;main.c: 282: if (MoveTime[Move]>0) {
  1948  000A04  0101               	movlb	1	; () banked
  1949  000A06  51CF               	movf	main@Move& (0+255),w,b
  1950  000A08  0D02               	mullw	2
  1951  000A0A  0E5A               	movlw	low main@MoveTime
  1952  000A0C  24F3               	addwf	prodl,w,c
  1953  000A0E  6ED9               	movwf	fsr2l,c
  1954  000A10  0E01               	movlw	high main@MoveTime
  1955  000A12  20F4               	addwfc	prodh,w,c
  1956  000A14  6EDA               	movwf	fsr2h,c
  1957  000A16  0E01               	movlw	1
  1958  000A18  BEDB               	btfsc	plusw2,7,c
  1959  000A1A  D024               	goto	l3627
  1960  000A1C  0E01               	movlw	1
  1961  000A1E  50DB               	movf	plusw2,w,c
  1962  000A20  E103               	bnz	u3040
  1963  000A22  04DE               	decf	postinc2,w,c
  1964  000A24  A0D8               	btfss	status,0,c
  1965  000A26  D01E               	goto	l3627
  1966  000A28                     u3040:
  1967                           
  1968                           ; BSR set to: 1
  1969                           ;main.c: 283: turnRight(&mL,&mR,78);
  1970  000A28  0ED0               	movlw	low main@mL
  1971  000A2A  0100               	movlb	0	; () banked
  1972  000A2C  6F67               	movwf	turnRight@mL& (0+255),b
  1973  000A2E  0E01               	movlw	high main@mL
  1974  000A30  0100               	movlb	0	; () banked
  1975  000A32  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1976  000A34  0ED9               	movlw	low main@mR
  1977  000A36  0100               	movlb	0	; () banked
  1978  000A38  6F69               	movwf	turnRight@mR& (0+255),b
  1979  000A3A  0E01               	movlw	high main@mR
  1980  000A3C  0100               	movlb	0	; () banked
  1981  000A3E  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1982  000A40  0E4E               	movlw	78
  1983  000A42  0100               	movlb	0	; () banked
  1984  000A44  6F6B               	movwf	turnRight@power& (0+255),b
  1985  000A46  ECDB  F00D         	call	_turnRight	;wreg free
  1986                           
  1987                           ;main.c: 285: delay_tenth_s(MoveTime[Move]);
  1988  000A4A  0101               	movlb	1	; () banked
  1989  000A4C  51CF               	movf	main@Move& (0+255),w,b
  1990  000A4E  0D02               	mullw	2
  1991  000A50  0E5A               	movlw	low main@MoveTime
  1992  000A52  24F3               	addwf	prodl,w,c
  1993  000A54  6ED9               	movwf	fsr2l,c
  1994  000A56  0E01               	movlw	high main@MoveTime
  1995  000A58  20F4               	addwfc	prodh,w,c
  1996  000A5A  6EDA               	movwf	fsr2h,c
  1997  000A5C  50DF               	movf	indf2,w,c
  1998  000A5E  EC36  F00E         	call	_delay_tenth_s
  1999                           
  2000                           ;main.c: 286: } else {
  2001  000A62  D01D               	goto	l3629
  2002  000A64                     l3627:
  2003                           
  2004                           ;main.c: 287: turnLeft(&mL,&mR,100);
  2005  000A64  0ED0               	movlw	low main@mL
  2006  000A66  0100               	movlb	0	; () banked
  2007  000A68  6F67               	movwf	turnLeft@mL& (0+255),b
  2008  000A6A  0E01               	movlw	high main@mL
  2009  000A6C  0100               	movlb	0	; () banked
  2010  000A6E  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2011  000A70  0ED9               	movlw	low main@mR
  2012  000A72  0100               	movlb	0	; () banked
  2013  000A74  6F69               	movwf	turnLeft@mR& (0+255),b
  2014  000A76  0E01               	movlw	high main@mR
  2015  000A78  0100               	movlb	0	; () banked
  2016  000A7A  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2017  000A7C  0E64               	movlw	100
  2018  000A7E  0100               	movlb	0	; () banked
  2019  000A80  6F6B               	movwf	turnLeft@power& (0+255),b
  2020  000A82  ECFA  F00D         	call	_turnLeft	;wreg free
  2021                           
  2022                           ;main.c: 288: delay_tenth_s(MoveTime[Move]);
  2023  000A86  0101               	movlb	1	; () banked
  2024  000A88  51CF               	movf	main@Move& (0+255),w,b
  2025  000A8A  0D02               	mullw	2
  2026  000A8C  0E5A               	movlw	low main@MoveTime
  2027  000A8E  24F3               	addwf	prodl,w,c
  2028  000A90  6ED9               	movwf	fsr2l,c
  2029  000A92  0E01               	movlw	high main@MoveTime
  2030  000A94  20F4               	addwfc	prodh,w,c
  2031  000A96  6EDA               	movwf	fsr2h,c
  2032  000A98  50DF               	movf	indf2,w,c
  2033  000A9A  EC36  F00E         	call	_delay_tenth_s
  2034  000A9E                     l3629:
  2035                           
  2036                           ;main.c: 289: }
  2037                           ;main.c: 290: }
  2038                           ;main.c: 291: if (mode==-1) {
  2039  000A9E  283B               	incf	_mode,w,c	;volatile
  2040  000AA0  B4D8               	btfsc	status,2,c
  2041  000AA2  D003               	goto	l3637
  2042                           
  2043                           ;main.c: 292: break;
  2044  000AA4  0101               	movlb	1	; () banked
  2045  000AA6  07CF               	decf	main@Move& (0+255),f,b
  2046  000AA8  D6E9               	goto	l3593
  2047  000AAA                     l3637:
  2048                           
  2049                           ;main.c: 293: }
  2050                           ;main.c: 294: }
  2051                           ;main.c: 295: stop(&mL,&mR);
  2052  000AAA  0ED0               	movlw	low main@mL
  2053  000AAC  0100               	movlb	0	; () banked
  2054  000AAE  6F62               	movwf	stop@mL& (0+255),b
  2055  000AB0  0E01               	movlw	high main@mL
  2056  000AB2  0100               	movlb	0	; () banked
  2057  000AB4  6F63               	movwf	(stop@mL+1)& (0+255),b
  2058  000AB6  0ED9               	movlw	low main@mR
  2059  000AB8  0100               	movlb	0	; () banked
  2060  000ABA  6F64               	movwf	stop@mR& (0+255),b
  2061  000ABC  0E01               	movlw	high main@mR
  2062  000ABE  0100               	movlb	0	; () banked
  2063  000AC0  6F65               	movwf	(stop@mR+1)& (0+255),b
  2064  000AC2  ECD9  F00B         	call	_stop	;wreg free
  2065  000AC6                     l3639:
  2066                           
  2067                           ;main.c: 296: mode=-1;
  2068  000AC6  683B               	setf	_mode,c	;volatile
  2069  000AC8                     l3643:
  2070  000AC8  503B               	movf	_mode,w,c	;volatile
  2071                           
  2072                           ; Switch size 1, requested type "space"
  2073                           ; Number of cases is 5, Range of values is 0 to 255
  2074                           ; switch strategies available:
  2075                           ; Name         Instructions Cycles
  2076                           ; simple_byte           16     9 (average)
  2077                           ;	Chosen strategy is simple_byte
  2078  000ACA  0A00               	xorlw	0	; case 0
  2079  000ACC  B4D8               	btfsc	status,2,c
  2080  000ACE  D518               	goto	l3485
  2081  000AD0  0A01               	xorlw	1	; case 1
  2082  000AD2  B4D8               	btfsc	status,2,c
  2083  000AD4  D53E               	goto	l3501
  2084  000AD6  0A03               	xorlw	3	; case 2
  2085  000AD8  B4D8               	btfsc	status,2,c
  2086  000ADA  D5E4               	goto	l3533
  2087  000ADC  0A01               	xorlw	1	; case 3
  2088  000ADE  B4D8               	btfsc	status,2,c
  2089  000AE0  D6BB               	goto	l3587
  2090  000AE2  0AFC               	xorlw	252	; case 255
  2091  000AE4  B4D8               	btfsc	status,2,c
  2092  000AE6  D49D               	goto	l3445
  2093  000AE8  D7EF               	goto	l3643
  2094  000AEA                     __end_of_main:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           prodh	equ	0xFF4
  2098                           prodl	equ	0xFF3
  2099                           intcon	equ	0xFF2
  2100                           postinc0	equ	0xFEE
  2101                           wreg	equ	0xFE8
  2102                           indf1	equ	0xFE7
  2103                           plusw1	equ	0xFE3
  2104                           fsr1h	equ	0xFE2
  2105                           fsr1l	equ	0xFE1
  2106                           indf2	equ	0xFDF
  2107                           postinc2	equ	0xFDE
  2108                           postdec2	equ	0xFDD
  2109                           plusw2	equ	0xFDB
  2110                           fsr2h	equ	0xFDA
  2111                           fsr2l	equ	0xFD9
  2112                           status	equ	0xFD8
  2113                           
  2114 ;; *************** function _initTimer *****************
  2115 ;; Defined at:
  2116 ;;		line 8 in file "Movement.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;		None
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;		None
  2121 ;; Return value:  Size  Location     Type
  2122 ;;		None               void
  2123 ;; Registers used:
  2124 ;;		wreg, status,2
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2130 ;;      Params:         0       0       0       0
  2131 ;;      Locals:         0       0       0       0
  2132 ;;      Temps:          0       0       0       0
  2133 ;;      Totals:         0       0       0       0
  2134 ;;Total ram usage:        0 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    3
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_main
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text1
  2145  001E1A                     __ptext1:
  2146                           	opt stack 0
  2147  001E1A                     _initTimer:
  2148                           	opt stack 27
  2149                           
  2150                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2151                           
  2152                           ;incstack = 0
  2153  001E1A  9ED5               	bcf	4053,7,c	;volatile
  2154                           
  2155                           ;Movement.c: 11: T0CONbits.T016BIT=1;
  2156  001E1C  8CD5               	bsf	4053,6,c	;volatile
  2157                           
  2158                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2159  001E1E  9AD5               	bcf	4053,5,c	;volatile
  2160                           
  2161                           ;Movement.c: 13: T0CONbits.PSA=0;
  2162  001E20  96D5               	bcf	4053,3,c	;volatile
  2163                           
  2164                           ;Movement.c: 14: T0CONbits.T0PS=0b010;
  2165  001E22  50D5               	movf	4053,w,c	;volatile
  2166  001E24  0BF8               	andlw	-8
  2167  001E26  0902               	iorlw	2
  2168  001E28  6ED5               	movwf	4053,c	;volatile
  2169                           
  2170                           ;Movement.c: 17: INTCONbits.TMR0IE=1;
  2171  001E2A  8AF2               	bsf	intcon,5,c	;volatile
  2172  001E2C  0012               	return		;funcret
  2173  001E2E                     __end_of_initTimer:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           prodh	equ	0xFF4
  2177                           prodl	equ	0xFF3
  2178                           intcon	equ	0xFF2
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           indf1	equ	0xFE7
  2182                           plusw1	equ	0xFE3
  2183                           fsr1h	equ	0xFE2
  2184                           fsr1l	equ	0xFE1
  2185                           indf2	equ	0xFDF
  2186                           postinc2	equ	0xFDE
  2187                           postdec2	equ	0xFDD
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _initRFID *****************
  2194 ;; Defined at:
  2195 ;;		line 8 in file "RFID_Reader.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;		None
  2200 ;; Return value:  Size  Location     Type
  2201 ;;		None               void
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, status,0
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2209 ;;      Params:         0       0       0       0
  2210 ;;      Locals:         0       0       0       0
  2211 ;;      Temps:          0       0       0       0
  2212 ;;      Totals:         0       0       0       0
  2213 ;;Total ram usage:        0 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    3
  2216 ;; This function calls:
  2217 ;;		Nothing
  2218 ;; This function is called by:
  2219 ;;		_main
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text2
  2224  001DFE                     __ptext2:
  2225                           	opt stack 0
  2226  001DFE                     _initRFID:
  2227                           	opt stack 27
  2228                           
  2229                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2230                           
  2231                           ;incstack = 0
  2232  001DFE  5094               	movf	3988,w,c	;volatile
  2233  001E00  09C0               	iorlw	192
  2234  001E02  6E94               	movwf	3988,c	;volatile
  2235                           
  2236                           ;RFID_Reader.c: 13: SPBRG=205;
  2237  001E04  0ECD               	movlw	205
  2238  001E06  6EAF               	movwf	4015,c	;volatile
  2239                           
  2240                           ;RFID_Reader.c: 14: SPBRGH=0;
  2241  001E08  0E00               	movlw	0
  2242  001E0A  6EB0               	movwf	4016,c	;volatile
  2243                           
  2244                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2245  001E0C  86AA               	bsf	4010,3,c	;volatile
  2246                           
  2247                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2248  001E0E  84AC               	bsf	4012,2,c	;volatile
  2249                           
  2250                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2251  001E10  88AB               	bsf	4011,4,c	;volatile
  2252                           
  2253                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2254  001E12  8EAB               	bsf	4011,7,c	;volatile
  2255                           
  2256                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2257  001E14  98AC               	bcf	4012,4,c	;volatile
  2258                           
  2259                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2260  001E16  9CAB               	bcf	4011,6,c	;volatile
  2261  001E18  0012               	return		;funcret
  2262  001E1A                     __end_of_initRFID:
  2263                           	opt stack 0
  2264                           tblptru	equ	0xFF8
  2265                           prodh	equ	0xFF4
  2266                           prodl	equ	0xFF3
  2267                           intcon	equ	0xFF2
  2268                           postinc0	equ	0xFEE
  2269                           wreg	equ	0xFE8
  2270                           indf1	equ	0xFE7
  2271                           plusw1	equ	0xFE3
  2272                           fsr1h	equ	0xFE2
  2273                           fsr1l	equ	0xFE1
  2274                           indf2	equ	0xFDF
  2275                           postinc2	equ	0xFDE
  2276                           postdec2	equ	0xFDD
  2277                           plusw2	equ	0xFDB
  2278                           fsr2h	equ	0xFDA
  2279                           fsr2l	equ	0xFD9
  2280                           status	equ	0xFD8
  2281                           
  2282 ;; *************** function _initMotorPWM *****************
  2283 ;; Defined at:
  2284 ;;		line 4 in file "dc_motor.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;		None
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;		None
  2289 ;; Return value:  Size  Location     Type
  2290 ;;		None               void
  2291 ;; Registers used:
  2292 ;;		wreg, status,2
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2298 ;;      Params:         0       0       0       0
  2299 ;;      Locals:         0       0       0       0
  2300 ;;      Temps:          0       0       0       0
  2301 ;;      Totals:         0       0       0       0
  2302 ;;Total ram usage:        0 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    3
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_main
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text3
  2313  001C32                     __ptext3:
  2314                           	opt stack 0
  2315  001C32                     _initMotorPWM:
  2316                           	opt stack 27
  2317                           
  2318                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2319                           
  2320                           ;incstack = 0
  2321  001C32  0E00               	movlw	0
  2322  001C34  6E7F               	movwf	3967,c	;volatile
  2323                           
  2324                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2325  001C36  0E80               	movlw	128
  2326  001C38  6E7E               	movwf	3966,c	;volatile
  2327                           
  2328                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2329  001C3A  0E6F               	movlw	111
  2330  001C3C  6E6F               	movwf	3951,c	;volatile
  2331                           
  2332                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2333  001C3E  0E00               	movlw	0
  2334  001C40  6E6E               	movwf	3950,c	;volatile
  2335                           
  2336                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2337  001C42  0EC7               	movlw	199
  2338  001C44  6E7B               	movwf	3963,c	;volatile
  2339                           
  2340                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2341  001C46  0E00               	movlw	0
  2342  001C48  6E7A               	movwf	3962,c	;volatile
  2343                           
  2344                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2345  001C4A  0E00               	movlw	0
  2346  001C4C  6E79               	movwf	3961,c	;volatile
  2347                           
  2348                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2349  001C4E  0E00               	movlw	0
  2350  001C50  6E78               	movwf	3960,c	;volatile
  2351                           
  2352                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2353  001C52  0E00               	movlw	0
  2354  001C54  6E77               	movwf	3959,c	;volatile
  2355                           
  2356                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2357  001C56  0E00               	movlw	0
  2358  001C58  6E76               	movwf	3958,c	;volatile
  2359                           
  2360                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2361  001C5A  9093               	bcf	3987,0,c	;volatile
  2362                           
  2363                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2364  001C5C  9293               	bcf	3987,1,c	;volatile
  2365                           
  2366                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2367  001C5E  9493               	bcf	3987,2,c	;volatile
  2368                           
  2369                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2370  001C60  9693               	bcf	3987,3,c	;volatile
  2371                           
  2372                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2373  001C62  908A               	bcf	3978,0,c	;volatile
  2374                           
  2375                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2376  001C64  928A               	bcf	3978,1,c	;volatile
  2377                           
  2378                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2379  001C66  948A               	bcf	3978,2,c	;volatile
  2380                           
  2381                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2382  001C68  968A               	bcf	3978,3,c	;volatile
  2383  001C6A  0012               	return		;funcret
  2384  001C6C                     __end_of_initMotorPWM:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           intcon	equ	0xFF2
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           indf1	equ	0xFE7
  2393                           plusw1	equ	0xFE3
  2394                           fsr1h	equ	0xFE2
  2395                           fsr1l	equ	0xFE1
  2396                           indf2	equ	0xFDF
  2397                           postinc2	equ	0xFDE
  2398                           postdec2	equ	0xFDD
  2399                           plusw2	equ	0xFDB
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _initLCD *****************
  2405 ;; Defined at:
  2406 ;;		line 38 in file "LCD.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;		None
  2411 ;; Return value:  Size  Location     Type
  2412 ;;		None               void
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2420 ;;      Params:         0       0       0       0
  2421 ;;      Locals:         0       0       0       0
  2422 ;;      Temps:          1       0       0       0
  2423 ;;      Totals:         1       0       0       0
  2424 ;;Total ram usage:        1 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    6
  2427 ;; This function calls:
  2428 ;;		_LCDout
  2429 ;;		_SendLCD
  2430 ;; This function is called by:
  2431 ;;		_main
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text4
  2436  001660                     __ptext4:
  2437                           	opt stack 0
  2438  001660                     _initLCD:
  2439                           	opt stack 24
  2440                           
  2441                           ;LCD.c: 44: TRISAbits.RA6=0;
  2442                           
  2443                           ;incstack = 0
  2444  001660  9C92               	bcf	3986,6,c	;volatile
  2445                           
  2446                           ;LCD.c: 45: TRISCbits.RC0=0;
  2447  001662  9094               	bcf	3988,0,c	;volatile
  2448                           
  2449                           ;LCD.c: 46: TRISCbits.RC1=0;
  2450  001664  9294               	bcf	3988,1,c	;volatile
  2451                           
  2452                           ;LCD.c: 47: TRISCbits.RC2=0;
  2453  001666  9494               	bcf	3988,2,c	;volatile
  2454                           
  2455                           ;LCD.c: 48: TRISDbits.RD0=0;
  2456  001668  9095               	bcf	3989,0,c	;volatile
  2457                           
  2458                           ;LCD.c: 49: TRISDbits.RD1=0;
  2459  00166A  9295               	bcf	3989,1,c	;volatile
  2460                           
  2461                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2462  00166C  0E27               	movlw	39
  2463  00166E  6E2A               	movwf	??_initLCD& (0+255),c
  2464  001670  0EF5               	movlw	245
  2465  001672                     u3097:
  2466  001672  2EE8               	decfsz	wreg,f,c
  2467  001674  D7FE               	goto	u3097
  2468  001676  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2469  001678  D7FC               	goto	u3097
  2470  00167A  F000               	nop	
  2471                           
  2472                           ;LCD.c: 52: LCDout(0b0011);
  2473  00167C  0E03               	movlw	3
  2474  00167E  ECCD  F00A         	call	_LCDout
  2475                           
  2476                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2477  001682  0E0D               	movlw	13
  2478  001684  6E2A               	movwf	??_initLCD& (0+255),c
  2479  001686  0EFC               	movlw	252
  2480  001688                     u3107:
  2481  001688  2EE8               	decfsz	wreg,f,c
  2482  00168A  D7FE               	goto	u3107
  2483  00168C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2484  00168E  D7FC               	goto	u3107
  2485                           
  2486                           ;LCD.c: 54: LCDout(0b0011);
  2487  001690  0E03               	movlw	3
  2488  001692  ECCD  F00A         	call	_LCDout
  2489                           
  2490                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2491  001696  0E85               	movlw	133
  2492  001698                     u3117:
  2493  001698  2EE8               	decfsz	wreg,f,c
  2494  00169A  D7FE               	goto	u3117
  2495  00169C  F000               	nop	
  2496                           
  2497                           ;LCD.c: 56: LCDout(0b0011);
  2498  00169E  0E03               	movlw	3
  2499  0016A0  ECCD  F00A         	call	_LCDout
  2500                           
  2501                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2502  0016A4  0E21               	movlw	33
  2503  0016A6                     u3127:
  2504  0016A6  2EE8               	decfsz	wreg,f,c
  2505  0016A8  D7FE               	goto	u3127
  2506  0016AA  F000               	nop	
  2507                           
  2508                           ;LCD.c: 58: LCDout(0b0010);
  2509  0016AC  0E02               	movlw	2
  2510  0016AE  ECCD  F00A         	call	_LCDout
  2511                           
  2512                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2513  0016B2  0E21               	movlw	33
  2514  0016B4                     u3137:
  2515  0016B4  2EE8               	decfsz	wreg,f,c
  2516  0016B6  D7FE               	goto	u3137
  2517  0016B8  F000               	nop	
  2518                           
  2519                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2520  0016BA  0E00               	movlw	0
  2521  0016BC  6E28               	movwf	SendLCD@type,c
  2522  0016BE  0E28               	movlw	40
  2523  0016C0  ECA1  F00E         	call	_SendLCD
  2524                           
  2525                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2526  0016C4  0E21               	movlw	33
  2527  0016C6                     u3147:
  2528  0016C6  2EE8               	decfsz	wreg,f,c
  2529  0016C8  D7FE               	goto	u3147
  2530  0016CA  F000               	nop	
  2531                           
  2532                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2533  0016CC  0E00               	movlw	0
  2534  0016CE  6E28               	movwf	SendLCD@type,c
  2535  0016D0  0E08               	movlw	8
  2536  0016D2  ECA1  F00E         	call	_SendLCD
  2537                           
  2538                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2539  0016D6  0E21               	movlw	33
  2540  0016D8                     u3157:
  2541  0016D8  2EE8               	decfsz	wreg,f,c
  2542  0016DA  D7FE               	goto	u3157
  2543  0016DC  F000               	nop	
  2544                           
  2545                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2546  0016DE  0E00               	movlw	0
  2547  0016E0  6E28               	movwf	SendLCD@type,c
  2548  0016E2  0E01               	movlw	1
  2549  0016E4  ECA1  F00E         	call	_SendLCD
  2550                           
  2551                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2552  0016E8  0E0D               	movlw	13
  2553  0016EA  6E2A               	movwf	??_initLCD& (0+255),c
  2554  0016EC  0EFC               	movlw	252
  2555  0016EE                     u3167:
  2556  0016EE  2EE8               	decfsz	wreg,f,c
  2557  0016F0  D7FE               	goto	u3167
  2558  0016F2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2559  0016F4  D7FC               	goto	u3167
  2560                           
  2561                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2562  0016F6  0E00               	movlw	0
  2563  0016F8  6E28               	movwf	SendLCD@type,c
  2564  0016FA  0E06               	movlw	6
  2565  0016FC  ECA1  F00E         	call	_SendLCD
  2566                           
  2567                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2568  001700  0E21               	movlw	33
  2569  001702                     u3177:
  2570  001702  2EE8               	decfsz	wreg,f,c
  2571  001704  D7FE               	goto	u3177
  2572  001706  F000               	nop	
  2573                           
  2574                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2575  001708  0E00               	movlw	0
  2576  00170A  6E28               	movwf	SendLCD@type,c
  2577  00170C  0E0C               	movlw	12
  2578  00170E  ECA1  F00E         	call	_SendLCD
  2579                           
  2580                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2581  001712  0E21               	movlw	33
  2582  001714                     u3187:
  2583  001714  2EE8               	decfsz	wreg,f,c
  2584  001716  D7FE               	goto	u3187
  2585  001718  F000               	nop	
  2586  00171A  0012               	return		;funcret
  2587  00171C                     __end_of_initLCD:
  2588                           	opt stack 0
  2589                           tblptru	equ	0xFF8
  2590                           prodh	equ	0xFF4
  2591                           prodl	equ	0xFF3
  2592                           intcon	equ	0xFF2
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           indf1	equ	0xFE7
  2596                           plusw1	equ	0xFE3
  2597                           fsr1h	equ	0xFE2
  2598                           fsr1l	equ	0xFE1
  2599                           indf2	equ	0xFDF
  2600                           postinc2	equ	0xFDE
  2601                           postdec2	equ	0xFDD
  2602                           plusw2	equ	0xFDB
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _initIR *****************
  2608 ;; Defined at:
  2609 ;;		line 30 in file "IR_Reading.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;		None               void
  2616 ;; Registers used:
  2617 ;;		wreg, status,2
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2623 ;;      Params:         0       0       0       0
  2624 ;;      Locals:         0       0       0       0
  2625 ;;      Temps:          0       0       0       0
  2626 ;;      Totals:         0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    3
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text5
  2638  001DBE                     __ptext5:
  2639                           	opt stack 0
  2640  001DBE                     _initIR:
  2641                           	opt stack 27
  2642                           
  2643                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2644                           
  2645                           ;incstack = 0
  2646  001DBE  9489               	bcf	3977,2,c	;volatile
  2647                           
  2648                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2649  001DC0  9689               	bcf	3977,3,c	;volatile
  2650                           
  2651                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2652  001DC2  8492               	bsf	3986,2,c	;volatile
  2653                           
  2654                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2655  001DC4  8692               	bsf	3986,3,c	;volatile
  2656                           
  2657                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2658  001DC6  94B8               	bcf	4024,2,c	;volatile
  2659                           
  2660                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2661  001DC8  96B8               	bcf	4024,3,c	;volatile
  2662                           
  2663                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2664  001DCA  9CB8               	bcf	4024,6,c	;volatile
  2665                           
  2666                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2667  001DCC  9EB8               	bcf	4024,7,c	;volatile
  2668                           
  2669                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2670  001DCE  0E06               	movlw	6
  2671  001DD0  6E63               	movwf	3939,c	;volatile
  2672                           
  2673                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2674  001DD2  0E06               	movlw	6
  2675  001DD4  6E62               	movwf	3938,c	;volatile
  2676                           
  2677                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2678  001DD6  9096               	bcf	3990,0,c	;volatile
  2679                           
  2680                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2681  001DD8  9296               	bcf	3990,1,c	;volatile
  2682                           
  2683                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2684  001DDA  0E59               	movlw	89
  2685  001DDC  6EB7               	movwf	4023,c	;volatile
  2686  001DDE  0012               	return		;funcret
  2687  001DE0                     __end_of_initIR:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           prodh	equ	0xFF4
  2691                           prodl	equ	0xFF3
  2692                           intcon	equ	0xFF2
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           indf1	equ	0xFE7
  2696                           plusw1	equ	0xFE3
  2697                           fsr1h	equ	0xFE2
  2698                           fsr1l	equ	0xFE1
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           postdec2	equ	0xFDD
  2702                           plusw2	equ	0xFDB
  2703                           fsr2h	equ	0xFDA
  2704                           fsr2l	equ	0xFD9
  2705                           status	equ	0xFD8
  2706                           
  2707 ;; *************** function _fullSpeedBack *****************
  2708 ;; Defined at:
  2709 ;;		line 138 in file "dc_motor.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2712 ;;		 -> main@mL(9), 
  2713 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2714 ;;		 -> main@mR(9), 
  2715 ;;  power           1   11[BANK0 ] unsigned char 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;		None
  2718 ;; Return value:  Size  Location     Type
  2719 ;;		None               void
  2720 ;; Registers used:
  2721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2727 ;;      Params:         0       5       0       0
  2728 ;;      Locals:         0       0       0       0
  2729 ;;      Temps:          0       0       0       0
  2730 ;;      Totals:         0       5       0       0
  2731 ;;Total ram usage:        5 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:    6
  2734 ;; This function calls:
  2735 ;;		_fullSpeed
  2736 ;; This function is called by:
  2737 ;;		_main
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text6
  2742  001B78                     __ptext6:
  2743                           	opt stack 0
  2744  001B78                     _fullSpeedBack:
  2745                           	opt stack 24
  2746                           
  2747                           ;dc_motor.c: 141: mL->direction=0;
  2748                           
  2749                           ;incstack = 0
  2750  001B78  0100               	movlb	0	; () banked
  2751  001B7A  EE20 F001          	lfsr	2,1
  2752  001B7E  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2753  001B80  26D9               	addwf	fsr2l,f,c
  2754  001B82  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2755  001B84  22DA               	addwfc	fsr2h,f,c
  2756  001B86  0E00               	movlw	0
  2757  001B88  6EDF               	movwf	indf2,c
  2758                           
  2759                           ;dc_motor.c: 142: mR->direction=0;
  2760  001B8A  0100               	movlb	0	; () banked
  2761  001B8C  EE20 F001          	lfsr	2,1
  2762  001B90  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2763  001B92  26D9               	addwf	fsr2l,f,c
  2764  001B94  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2765  001B96  22DA               	addwfc	fsr2h,f,c
  2766  001B98  0E00               	movlw	0
  2767  001B9A  6EDF               	movwf	indf2,c
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2771  001B9C  C067  F062         	movff	fullSpeedBack@mL,fullSpeed@mL
  2772  001BA0  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2773  001BA4  C069  F064         	movff	fullSpeedBack@mR,fullSpeed@mR
  2774  001BA8  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2775  001BAC  C06B  F066         	movff	fullSpeedBack@power,fullSpeed@power
  2776  001BB0  EC65  F00C         	call	_fullSpeed	;wreg free
  2777  001BB4  0012               	return		;funcret
  2778  001BB6                     __end_of_fullSpeedBack:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           prodh	equ	0xFF4
  2782                           prodl	equ	0xFF3
  2783                           intcon	equ	0xFF2
  2784                           postinc0	equ	0xFEE
  2785                           wreg	equ	0xFE8
  2786                           indf1	equ	0xFE7
  2787                           plusw1	equ	0xFE3
  2788                           fsr1h	equ	0xFE2
  2789                           fsr1l	equ	0xFE1
  2790                           indf2	equ	0xFDF
  2791                           postinc2	equ	0xFDE
  2792                           postdec2	equ	0xFDD
  2793                           plusw2	equ	0xFDB
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _enableSensor *****************
  2799 ;; Defined at:
  2800 ;;		line 106 in file "IR_Reading.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  sensor          1    wreg     unsigned char 
  2803 ;;  status          1   35[COMRAM] unsigned char 
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  sensor          1   36[COMRAM] unsigned char 
  2806 ;; Return value:  Size  Location     Type
  2807 ;;		None               void
  2808 ;; Registers used:
  2809 ;;		wreg, status,2, status,0
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2815 ;;      Params:         1       0       0       0
  2816 ;;      Locals:         1       0       0       0
  2817 ;;      Temps:          0       0       0       0
  2818 ;;      Totals:         2       0       0       0
  2819 ;;Total ram usage:        2 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:    3
  2822 ;; This function calls:
  2823 ;;		Nothing
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text7
  2830  001D72                     __ptext7:
  2831                           	opt stack 0
  2832  001D72                     _enableSensor:
  2833                           	opt stack 27
  2834                           
  2835                           ;incstack = 0
  2836                           ;enableSensor@sensor stored from wreg
  2837  001D72  6E25               	movwf	enableSensor@sensor,c
  2838                           
  2839                           ;IR_Reading.c: 108: if (sensor==0){
  2840  001D74  5025               	movf	enableSensor@sensor,w,c
  2841  001D76  A4D8               	btfss	status,2,c
  2842  001D78  D006               	goto	l2445
  2843                           
  2844                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2845  001D7A  B024               	btfsc	enableSensor@status,0,c
  2846  001D7C  D002               	bra	u1845
  2847  001D7E  908D               	bcf	3981,0,c	;volatile
  2848  001D80  D001               	bra	u1846
  2849  001D82                     u1845:
  2850  001D82  808D               	bsf	3981,0,c	;volatile
  2851  001D84                     u1846:
  2852                           
  2853                           ;IR_Reading.c: 110: } else if (sensor==1){
  2854  001D84  0012               	return	
  2855  001D86                     l2445:
  2856  001D86  0425               	decf	enableSensor@sensor,w,c
  2857  001D88  A4D8               	btfss	status,2,c
  2858  001D8A  0012               	return	
  2859                           
  2860                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2861  001D8C  B024               	btfsc	enableSensor@status,0,c
  2862  001D8E  D002               	bra	u1865
  2863  001D90  928D               	bcf	3981,1,c	;volatile
  2864  001D92  D001               	bra	u1866
  2865  001D94                     u1865:
  2866  001D94  828D               	bsf	3981,1,c	;volatile
  2867  001D96                     u1866:
  2868  001D96  0012               	return	
  2869  001D98                     __end_of_enableSensor:
  2870                           	opt stack 0
  2871                           tblptru	equ	0xFF8
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           intcon	equ	0xFF2
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           indf1	equ	0xFE7
  2878                           plusw1	equ	0xFE3
  2879                           fsr1h	equ	0xFE2
  2880                           fsr1l	equ	0xFE1
  2881                           indf2	equ	0xFDF
  2882                           postinc2	equ	0xFDE
  2883                           postdec2	equ	0xFDD
  2884                           plusw2	equ	0xFDB
  2885                           fsr2h	equ	0xFDA
  2886                           fsr2l	equ	0xFD9
  2887                           status	equ	0xFD8
  2888                           
  2889 ;; *************** function _VerifySignal *****************
  2890 ;; Defined at:
  2891 ;;		line 53 in file "RFID_Reader.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2894 ;;		 -> ReceivedString(16), 
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  ptr             3    0        PTR unsigned char 
  2897 ;;  hexByte         2   43[COMRAM] unsigned int 
  2898 ;;  checksum        1   42[COMRAM] unsigned char 
  2899 ;;  i               1   41[COMRAM] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      unsigned char 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2909 ;;      Params:         2       0       0       0
  2910 ;;      Locals:         4       0       0       0
  2911 ;;      Temps:          4       0       0       0
  2912 ;;      Totals:        10       0       0       0
  2913 ;;Total ram usage:       10 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    3
  2916 ;; This function calls:
  2917 ;;		Nothing
  2918 ;; This function is called by:
  2919 ;;		_main
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text8
  2924  001A8C                     __ptext8:
  2925                           	opt stack 0
  2926  001A8C                     _VerifySignal:
  2927                           	opt stack 27
  2928                           
  2929                           ;RFID_Reader.c: 54: unsigned char checksum=0;
  2930                           
  2931                           ;incstack = 0
  2932  001A8C  0E00               	movlw	0
  2933  001A8E  6E2B               	movwf	VerifySignal@checksum,c
  2934                           
  2935                           ;RFID_Reader.c: 55: unsigned int hexByte=0;
  2936  001A90  0E00               	movlw	0
  2937  001A92  6E2D               	movwf	VerifySignal@hexByte+1,c
  2938  001A94  0E00               	movlw	0
  2939  001A96  6E2C               	movwf	VerifySignal@hexByte,c
  2940                           
  2941                           ;RFID_Reader.c: 56: unsigned char i=0;
  2942  001A98  0E00               	movlw	0
  2943  001A9A  6E2A               	movwf	VerifySignal@i,c
  2944                           
  2945                           ;RFID_Reader.c: 57: unsigned char *ptr;
  2946                           ;RFID_Reader.c: 60: hexByte = (Signal[3]<<8) + Signal[4];
  2947  001A9C  EE20 F004          	lfsr	2,4
  2948  001AA0  5024               	movf	VerifySignal@Signal,w,c
  2949  001AA2  26D9               	addwf	fsr2l,f,c
  2950  001AA4  5025               	movf	VerifySignal@Signal+1,w,c
  2951  001AA6  22DA               	addwfc	fsr2h,f,c
  2952  001AA8  50DF               	movf	indf2,w,c
  2953  001AAA  6E26               	movwf	??_VerifySignal& (0+255),c
  2954  001AAC  EE20 F003          	lfsr	2,3
  2955  001AB0  5024               	movf	VerifySignal@Signal,w,c
  2956  001AB2  26D9               	addwf	fsr2l,f,c
  2957  001AB4  5025               	movf	VerifySignal@Signal+1,w,c
  2958  001AB6  22DA               	addwfc	fsr2h,f,c
  2959  001AB8  50DF               	movf	indf2,w,c
  2960  001ABA  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2961  001ABC  5027               	movf	??_VerifySignal+1,w,c
  2962  001ABE  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2963  001AC0  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2964  001AC2  5026               	movf	??_VerifySignal,w,c
  2965  001AC4  2428               	addwf	??_VerifySignal+2,w,c
  2966  001AC6  6E2C               	movwf	VerifySignal@hexByte,c
  2967  001AC8  0E00               	movlw	0
  2968  001ACA  2029               	addwfc	??_VerifySignal+3,w,c
  2969  001ACC  6E2D               	movwf	VerifySignal@hexByte+1,c
  2970                           
  2971                           ;RFID_Reader.c: 61: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2972  001ACE  EE20 F002          	lfsr	2,2
  2973  001AD2  5024               	movf	VerifySignal@Signal,w,c
  2974  001AD4  26D9               	addwf	fsr2l,f,c
  2975  001AD6  5025               	movf	VerifySignal@Signal+1,w,c
  2976  001AD8  22DA               	addwfc	fsr2h,f,c
  2977  001ADA  50DF               	movf	indf2,w,c
  2978  001ADC  182C               	xorwf	VerifySignal@hexByte,w,c
  2979  001ADE  6E2B               	movwf	VerifySignal@checksum,c
  2980                           
  2981                           ;RFID_Reader.c: 70: return 1;
  2982  001AE0  0E01               	movlw	1
  2983  001AE2  0012               	return	
  2984  001AE4                     __end_of_VerifySignal:
  2985                           	opt stack 0
  2986                           tblptru	equ	0xFF8
  2987                           prodh	equ	0xFF4
  2988                           prodl	equ	0xFF3
  2989                           intcon	equ	0xFF2
  2990                           postinc0	equ	0xFEE
  2991                           wreg	equ	0xFE8
  2992                           indf1	equ	0xFE7
  2993                           plusw1	equ	0xFE3
  2994                           fsr1h	equ	0xFE2
  2995                           fsr1l	equ	0xFE1
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           plusw2	equ	0xFDB
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _ScanWithRange *****************
  3005 ;; Defined at:
  3006 ;;		line 98 in file "Movement.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3009 ;;		 -> main@mL(9), 
  3010 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3011 ;;		 -> main@mR(9), 
  3012 ;;  loops           2   17[BANK0 ] int 
  3013 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3014 ;;		 -> main@MoveTime(100), 
  3015 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  3016 ;;		 -> main@Move(1), 
  3017 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  3018 ;;		 -> main@MoveType(50), 
  3019 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  3020 ;;		 -> RFID_Read(1), 
  3021 ;;  millis          2   27[BANK0 ] PTR unsigned int 
  3022 ;;		 -> millis(2), 
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;  buf            40   33[BANK0 ] unsigned char [40]
  3025 ;;  SensorResult    4   83[BANK0 ] unsigned int [2]
  3026 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  3027 ;;  TimeAboveThr    2   81[BANK0 ] unsigned int 
  3028 ;;  LeftFlag        2   79[BANK0 ] unsigned int 
  3029 ;;  DirectionFou    2   75[BANK0 ] const unsigned int 
  3030 ;;  i               2   73[BANK0 ] unsigned int 
  3031 ;;  LeftFlick       1   87[BANK0 ] const char 
  3032 ;;  MiniLeftFlic    1   78[BANK0 ] const unsigned char 
  3033 ;;  MotorPower      1   77[BANK0 ] const unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      unsigned char 
  3036 ;; Registers used:
  3037 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3043 ;;      Params:         0      16       0       0
  3044 ;;      Locals:         0      57       0       0
  3045 ;;      Temps:          0       4       0       0
  3046 ;;      Totals:         0      77       0       0
  3047 ;;Total ram usage:       77 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    7
  3050 ;; This function calls:
  3051 ;;		_LCD_String
  3052 ;;		_SendLCD
  3053 ;;		_SetLine
  3054 ;;		_delay_tenth_s
  3055 ;;		_grabLeftIR
  3056 ;;		_grabRightIR
  3057 ;;		_sprintf
  3058 ;;		_stop
  3059 ;;		_turnLeft
  3060 ;;		_turnRight
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text9
  3067  000AEA                     __ptext9:
  3068                           	opt stack 0
  3069  000AEA                     _ScanWithRange:
  3070                           	opt stack 23
  3071                           
  3072                           ;Movement.c: 103: unsigned int SensorResult[2]={0,0};
  3073                           
  3074                           ;incstack = 0
  3075  000AEA  C0F2  F0B3         	movff	ScanWithRange@F3894,ScanWithRange@SensorResult
  3076  000AEE  C0F3  F0B4         	movff	ScanWithRange@F3894+1,ScanWithRange@SensorResult+1
  3077  000AF2  C0F4  F0B5         	movff	ScanWithRange@F3894+2,ScanWithRange@SensorResult+2
  3078  000AF6  C0F5  F0B6         	movff	ScanWithRange@F3894+3,ScanWithRange@SensorResult+3
  3079                           
  3080                           ;Movement.c: 104: unsigned int LeftFlag=0;
  3081  000AFA  0E00               	movlw	0
  3082  000AFC  0100               	movlb	0	; () banked
  3083  000AFE  6FB0               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3084  000B00  0E00               	movlw	0
  3085  000B02  6FAF               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3086                           
  3087                           ;Movement.c: 105: unsigned int RightFlag=0;
  3088  000B04  0E00               	movlw	0
  3089  000B06  0100               	movlb	0	; () banked
  3090  000B08  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3091  000B0A  0E00               	movlw	0
  3092  000B0C  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3093                           
  3094                           ;Movement.c: 106: char buf[40];
  3095                           ;Movement.c: 107: unsigned int i=0;
  3096  000B0E  0E00               	movlw	0
  3097  000B10  0100               	movlb	0	; () banked
  3098  000B12  6FAA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3099  000B14  0E00               	movlw	0
  3100  000B16  6FA9               	movwf	ScanWithRange@i& (0+255),b
  3101                           
  3102                           ;Movement.c: 108: unsigned int TimeAboveThreshold=0;
  3103  000B18  0E00               	movlw	0
  3104  000B1A  0100               	movlb	0	; () banked
  3105  000B1C  6FB2               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3106  000B1E  0E00               	movlw	0
  3107  000B20  6FB1               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3108                           
  3109                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3110  000B22  0E03               	movlw	3
  3111  000B24  0100               	movlb	0	; () banked
  3112  000B26  6FAC               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3113  000B28  0EE8               	movlw	232
  3114  000B2A  6FAB               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3115                           
  3116                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3117  000B2C  0E28               	movlw	40
  3118  000B2E  0100               	movlb	0	; () banked
  3119  000B30  6FAD               	movwf	ScanWithRange@MotorPower& (0+255),b
  3120                           
  3121                           ;Movement.c: 114: const signed char LeftFlick=2;
  3122  000B32  0E02               	movlw	2
  3123  000B34  0100               	movlb	0	; () banked
  3124  000B36  6FB7               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3125                           
  3126                           ;Movement.c: 118: const unsigned char MiniLeftFlick=1;
  3127  000B38  0E01               	movlw	1
  3128  000B3A  0100               	movlb	0	; () banked
  3129  000B3C  6FAE               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;Movement.c: 124: (MoveType[*Move]) = 2;
  3133  000B3E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3134  000B42  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3135  000B46  50DF               	movf	indf2,w,c
  3136  000B48  0100               	movlb	0	; () banked
  3137  000B4A  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3138  000B4C  0100               	movlb	0	; () banked
  3139  000B4E  517D               	movf	??_ScanWithRange& (0+255),w,b
  3140  000B50  0D01               	mullw	1
  3141  000B52  50F3               	movf	prodl,w,c
  3142  000B54  0100               	movlb	0	; () banked
  3143  000B56  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3144  000B58  6ED9               	movwf	fsr2l,c
  3145  000B5A  50F4               	movf	prodh,w,c
  3146  000B5C  0100               	movlb	0	; () banked
  3147  000B5E  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3148  000B60  6EDA               	movwf	fsr2h,c
  3149  000B62  0E02               	movlw	2
  3150  000B64  6EDF               	movwf	indf2,c
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;Movement.c: 125: (MoveTime[*Move]) = LeftFlick;
  3154  000B66  C0B7  F07D         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3155  000B6A  0100               	movlb	0	; () banked
  3156  000B6C  6B7E               	clrf	(??_ScanWithRange+1)& (0+255),b
  3157  000B6E  BF7D               	btfsc	??_ScanWithRange& (0+255),7,b
  3158  000B70  077E               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3159  000B72  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3160  000B76  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3161  000B7A  50DF               	movf	indf2,w,c
  3162  000B7C  0100               	movlb	0	; () banked
  3163  000B7E  6F7F               	movwf	(??_ScanWithRange+2)& (0+255),b
  3164  000B80  0100               	movlb	0	; () banked
  3165  000B82  517F               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3166  000B84  0D02               	mullw	2
  3167  000B86  50F3               	movf	prodl,w,c
  3168  000B88  0100               	movlb	0	; () banked
  3169  000B8A  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3170  000B8C  6ED9               	movwf	fsr2l,c
  3171  000B8E  50F4               	movf	prodh,w,c
  3172  000B90  0100               	movlb	0	; () banked
  3173  000B92  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3174  000B94  6EDA               	movwf	fsr2h,c
  3175  000B96  C07D  FFDE         	movff	??_ScanWithRange,postinc2
  3176  000B9A  C07E  FFDD         	movff	??_ScanWithRange+1,postdec2
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;Movement.c: 126: *Move = *Move+1;
  3180  000B9E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3181  000BA2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3182  000BA6  50DF               	movf	indf2,w,c
  3183  000BA8  0100               	movlb	0	; () banked
  3184  000BAA  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3185  000BAC  0100               	movlb	0	; () banked
  3186  000BAE  297D               	incf	??_ScanWithRange& (0+255),w,b
  3187  000BB0  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3188  000BB4  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3189  000BB8  6EDF               	movwf	indf2,c
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;Movement.c: 127: turnLeft(mL,mR, 100);
  3193  000BBA  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3194  000BBE  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3195  000BC2  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3196  000BC6  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3197  000BCA  0E64               	movlw	100
  3198  000BCC  0100               	movlb	0	; () banked
  3199  000BCE  6F6B               	movwf	turnLeft@power& (0+255),b
  3200  000BD0  ECFA  F00D         	call	_turnLeft	;wreg free
  3201                           
  3202                           ;Movement.c: 128: delay_tenth_s(LeftFlick);
  3203  000BD4  0100               	movlb	0	; () banked
  3204  000BD6  51B7               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3205  000BD8  EC36  F00E         	call	_delay_tenth_s
  3206                           
  3207                           ;Movement.c: 129: stop(mL,mR);
  3208  000BDC  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3209  000BE0  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3210  000BE4  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3211  000BE8  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3212  000BEC  ECD9  F00B         	call	_stop	;wreg free
  3213                           
  3214                           ;Movement.c: 132: turnRight(mL,mR, MotorPower);
  3215  000BF0  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3216  000BF4  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3217  000BF8  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3218  000BFC  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3219  000C00  C0AD  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3220  000C04  ECDB  F00D         	call	_turnRight	;wreg free
  3221                           
  3222                           ;Movement.c: 135: TMR0L = 0;
  3223  000C08  0E00               	movlw	0
  3224  000C0A  6ED6               	movwf	4054,c	;volatile
  3225                           
  3226                           ;Movement.c: 136: TMR0H = 0;
  3227  000C0C  0E00               	movlw	0
  3228  000C0E  6ED7               	movwf	4055,c	;volatile
  3229                           
  3230                           ;Movement.c: 137: *millis = 0;
  3231  000C10  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3232  000C14  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3233  000C18  0E00               	movlw	0
  3234  000C1A  6EDE               	movwf	postinc2,c
  3235  000C1C  0E00               	movlw	0
  3236  000C1E  6EDD               	movwf	postdec2,c
  3237                           
  3238                           ;Movement.c: 138: T0CONbits.TMR0ON=1;
  3239  000C20  8ED5               	bsf	4053,7,c	;volatile
  3240                           
  3241                           ;Movement.c: 140: for (i=1; i<=loops; i++) {
  3242  000C22  0E00               	movlw	0
  3243  000C24  0100               	movlb	0	; () banked
  3244  000C26  6FAA               	movwf	(ScanWithRange@i+1)& (0+255),b
  3245  000C28  0E01               	movlw	1
  3246  000C2A  6FA9               	movwf	ScanWithRange@i& (0+255),b
  3247  000C2C  D1BA               	goto	l3375
  3248  000C2E                     l3281:
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;Movement.c: 143: SensorResult[0]=grabLeftIR();
  3252  000C2E  ECDE  F00C         	call	_grabLeftIR	;wreg free
  3253  000C32  C024  F0B3         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3254  000C36  C025  F0B4         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3255                           
  3256                           ;Movement.c: 144: SensorResult[1]=grabRightIR();
  3257  000C3A  ECA5  F00C         	call	_grabRightIR	;wreg free
  3258  000C3E  C024  F0B5         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3259  000C42  C025  F0B6         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3260                           
  3261                           ;Movement.c: 148: CAP1BUFH=0;
  3262  000C46  0E00               	movlw	0
  3263  000C48  6E69               	movwf	3945,c	;volatile
  3264                           
  3265                           ;Movement.c: 149: CAP1BUFL=0;
  3266  000C4A  0E00               	movlw	0
  3267  000C4C  6E68               	movwf	3944,c	;volatile
  3268                           
  3269                           ;Movement.c: 150: CAP2BUFH=0;
  3270  000C4E  0E00               	movlw	0
  3271  000C50  6E67               	movwf	3943,c	;volatile
  3272                           
  3273                           ;Movement.c: 151: CAP2BUFL=0;
  3274  000C52  0E00               	movlw	0
  3275  000C54  6E66               	movwf	3942,c	;volatile
  3276                           
  3277                           ;Movement.c: 155: SendLCD(0b00000001,0);
  3278  000C56  0E00               	movlw	0
  3279  000C58  6E28               	movwf	SendLCD@type,c
  3280  000C5A  0E01               	movlw	1
  3281  000C5C  ECA1  F00E         	call	_SendLCD
  3282                           
  3283                           ;Movement.c: 156: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3284  000C60  0E21               	movlw	33
  3285  000C62                     u3197:
  3286  000C62  2EE8               	decfsz	wreg,f,c
  3287  000C64  D7FE               	goto	u3197
  3288  000C66  F000               	nop	
  3289                           
  3290                           ;Movement.c: 157: SendLCD(0b00000010,0);
  3291  000C68  0E00               	movlw	0
  3292  000C6A  6E28               	movwf	SendLCD@type,c
  3293  000C6C  0E02               	movlw	2
  3294  000C6E  ECA1  F00E         	call	_SendLCD
  3295                           
  3296                           ;Movement.c: 158: _delay((unsigned long)((2)*(8000000/4000.0)));
  3297  000C72  0E06               	movlw	6
  3298  000C74  0100               	movlb	0	; () banked
  3299  000C76  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3300  000C78  0E30               	movlw	48
  3301  000C7A                     u3207:
  3302  000C7A  2EE8               	decfsz	wreg,f,c
  3303  000C7C  D7FE               	goto	u3207
  3304  000C7E  2F7D               	decfsz	??_ScanWithRange& (0+255),f,b
  3305  000C80  D7FC               	goto	u3207
  3306  000C82  D000               	nop2	
  3307                           
  3308                           ;Movement.c: 159: SetLine(1);
  3309  000C84  0E01               	movlw	1
  3310  000C86  EC89  F00E         	call	_SetLine
  3311                           
  3312                           ;Movement.c: 160: LCD_String("     ScanIR");
  3313  000C8A  0E2D               	movlw	low STR_1
  3314  000C8C  6E2A               	movwf	LCD_String@string,c
  3315  000C8E  0E03               	movlw	high STR_1
  3316  000C90  6E2B               	movwf	LCD_String@string+1,c
  3317  000C92  EC17  F00D         	call	_LCD_String	;wreg free
  3318                           
  3319                           ;Movement.c: 161: SetLine(2);
  3320  000C96  0E02               	movlw	2
  3321  000C98  EC89  F00E         	call	_SetLine
  3322                           
  3323                           ;Movement.c: 162: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3324  000C9C  0E81               	movlw	low ScanWithRange@buf
  3325  000C9E  6E30               	movwf	sprintf@sp,c
  3326  000CA0  0E00               	movlw	high ScanWithRange@buf
  3327  000CA2  6E31               	movwf	sprintf@sp+1,c
  3328  000CA4  0E0C               	movlw	low (STR_6+1)
  3329  000CA6  6E32               	movwf	sprintf@f,c
  3330  000CA8  0E03               	movlw	high (STR_6+1)
  3331  000CAA  6E33               	movwf	sprintf@f+1,c
  3332  000CAC  C0B3  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3333  000CB0  C0B4  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3334  000CB4  C0B5  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3335  000CB8  C0B6  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3336  000CBC  EC30  F008         	call	_sprintf	;wreg free
  3337                           
  3338                           ;Movement.c: 163: LCD_String(buf);
  3339  000CC0  0E81               	movlw	low ScanWithRange@buf
  3340  000CC2  6E2A               	movwf	LCD_String@string,c
  3341  000CC4  0E00               	movlw	high ScanWithRange@buf
  3342  000CC6  6E2B               	movwf	LCD_String@string+1,c
  3343  000CC8  EC17  F00D         	call	_LCD_String	;wreg free
  3344                           
  3345                           ;Movement.c: 167: if (SensorResult[1]>DirectionFoundThreshold) {
  3346  000CCC  0100               	movlb	0	; () banked
  3347  000CCE  51B5               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3348  000CD0  0100               	movlb	0	; () banked
  3349  000CD2  5DAB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3350  000CD4  0100               	movlb	0	; () banked
  3351  000CD6  51B6               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3352  000CD8  0100               	movlb	0	; () banked
  3353  000CDA  59AC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3354  000CDC  B0D8               	btfsc	status,0,c
  3355  000CDE  D008               	goto	l3309
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;Movement.c: 168: RightFlag=*millis;
  3359  000CE0  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3360  000CE4  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3361  000CE8  CFDE F0B8          	movff	postinc2,ScanWithRange@RightFlag
  3362  000CEC  CFDD F0B9          	movff	postdec2,ScanWithRange@RightFlag+1
  3363  000CF0                     l3309:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;Movement.c: 169: }
  3367                           ;Movement.c: 171: if (SensorResult[0]>DirectionFoundThreshold) {
  3368  000CF0  0100               	movlb	0	; () banked
  3369  000CF2  51B3               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3370  000CF4  0100               	movlb	0	; () banked
  3371  000CF6  5DAB               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3372  000CF8  0100               	movlb	0	; () banked
  3373  000CFA  51B4               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3374  000CFC  0100               	movlb	0	; () banked
  3375  000CFE  59AC               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3376  000D00  B0D8               	btfsc	status,0,c
  3377  000D02  D008               	goto	l3313
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;Movement.c: 172: LeftFlag=*millis;
  3381  000D04  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3382  000D08  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3383  000D0C  CFDE F0AF          	movff	postinc2,ScanWithRange@LeftFlag
  3384  000D10  CFDD F0B0          	movff	postdec2,ScanWithRange@LeftFlag+1
  3385  000D14                     l3313:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;Movement.c: 173: }
  3389                           ;Movement.c: 180: if (LeftFlag>0) {
  3390  000D14  0100               	movlb	0	; () banked
  3391  000D16  51AF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3392  000D18  0100               	movlb	0	; () banked
  3393  000D1A  11B0               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3394  000D1C  B4D8               	btfsc	status,2,c
  3395  000D1E  D135               	goto	l3367
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;Movement.c: 183: if (RightFlag>0) {
  3399  000D20  0100               	movlb	0	; () banked
  3400  000D22  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3401  000D24  0100               	movlb	0	; () banked
  3402  000D26  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3403  000D28  B4D8               	btfsc	status,2,c
  3404  000D2A  D09B               	goto	l229
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;Movement.c: 184: TimeAboveThreshold=LeftFlag-RightFlag;
  3408  000D2C  C0B8  F07D         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3409  000D30  C0B9  F07E         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3410  000D34  0100               	movlb	0	; () banked
  3411  000D36  1F7D               	comf	??_ScanWithRange& (0+255),f,b
  3412  000D38  1F7E               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3413  000D3A  4B7D               	infsnz	??_ScanWithRange& (0+255),f,b
  3414  000D3C  2B7E               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3415  000D3E  0100               	movlb	0	; () banked
  3416  000D40  51AF               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3417  000D42  0100               	movlb	0	; () banked
  3418  000D44  257D               	addwf	??_ScanWithRange& (0+255),w,b
  3419  000D46  0100               	movlb	0	; () banked
  3420  000D48  6FB1               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3421  000D4A  0100               	movlb	0	; () banked
  3422  000D4C  51B0               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3423  000D4E  0100               	movlb	0	; () banked
  3424  000D50  217E               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3425  000D52  0100               	movlb	0	; () banked
  3426  000D54  6FB2               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;Movement.c: 185: TMR0L = 0;
  3430  000D56  0E00               	movlw	0
  3431  000D58  6ED6               	movwf	4054,c	;volatile
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;Movement.c: 186: TMR0H = 0;
  3435  000D5A  0E00               	movlw	0
  3436  000D5C  6ED7               	movwf	4055,c	;volatile
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;Movement.c: 187: *millis = 0;
  3440  000D5E  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3441  000D62  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3442  000D66  0E00               	movlw	0
  3443  000D68  6EDE               	movwf	postinc2,c
  3444  000D6A  0E00               	movlw	0
  3445  000D6C  6EDD               	movwf	postdec2,c
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;Movement.c: 188: stop(mL,mR);
  3449  000D6E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3450  000D72  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3451  000D76  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3452  000D7A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3453  000D7E  ECD9  F00B         	call	_stop	;wreg free
  3454                           
  3455                           ;Movement.c: 189: while (*millis<(TimeAboveThreshold>>1)) {
  3456  000D82  D00C               	goto	l3329
  3457  000D84                     l3327:
  3458                           
  3459                           ;Movement.c: 190: turnLeft(mL,mR, MotorPower);
  3460  000D84  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3461  000D88  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3462  000D8C  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3463  000D90  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3464  000D94  C0AD  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3465  000D98  ECFA  F00D         	call	_turnLeft	;wreg free
  3466  000D9C                     l3329:
  3467  000D9C  90D8               	bcf	status,0,c
  3468  000D9E  0100               	movlb	0	; () banked
  3469  000DA0  31B2               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3470  000DA2  0100               	movlb	0	; () banked
  3471  000DA4  6F7E               	movwf	(??_ScanWithRange+1)& (0+255),b
  3472  000DA6  0100               	movlb	0	; () banked
  3473  000DA8  31B1               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3474  000DAA  0100               	movlb	0	; () banked
  3475  000DAC  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3476  000DAE  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3477  000DB2  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3478  000DB6  0100               	movlb	0	; () banked
  3479  000DB8  517D               	movf	??_ScanWithRange& (0+255),w,b
  3480  000DBA  5CDE               	subwf	postinc2,w,c
  3481  000DBC  0100               	movlb	0	; () banked
  3482  000DBE  517E               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3483  000DC0  58DE               	subwfb	postinc2,w,c
  3484  000DC2  A0D8               	btfss	status,0,c
  3485  000DC4  D7DF               	goto	l3327
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;Movement.c: 191: }
  3489                           ;Movement.c: 192: T0CONbits.TMR0ON=0;
  3490  000DC6  9ED5               	bcf	4053,7,c	;volatile
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;Movement.c: 193: stop(mL,mR);
  3494  000DC8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3495  000DCC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3496  000DD0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3497  000DD4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3498  000DD8  ECD9  F00B         	call	_stop	;wreg free
  3499                           
  3500                           ;Movement.c: 195: (MoveType[*Move]) = 1;
  3501  000DDC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3502  000DE0  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3503  000DE4  50DF               	movf	indf2,w,c
  3504  000DE6  0100               	movlb	0	; () banked
  3505  000DE8  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3506  000DEA  0100               	movlb	0	; () banked
  3507  000DEC  517D               	movf	??_ScanWithRange& (0+255),w,b
  3508  000DEE  0D01               	mullw	1
  3509  000DF0  50F3               	movf	prodl,w,c
  3510  000DF2  0100               	movlb	0	; () banked
  3511  000DF4  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3512  000DF6  6ED9               	movwf	fsr2l,c
  3513  000DF8  50F4               	movf	prodh,w,c
  3514  000DFA  0100               	movlb	0	; () banked
  3515  000DFC  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3516  000DFE  6EDA               	movwf	fsr2h,c
  3517  000E00  0E01               	movlw	1
  3518  000E02  6EDF               	movwf	indf2,c
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;Movement.c: 196: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3522  000E04  90D8               	bcf	status,0,c
  3523  000E06  0100               	movlb	0	; () banked
  3524  000E08  31B2               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3525  000E0A  0100               	movlb	0	; () banked
  3526  000E0C  6F7E               	movwf	(??_ScanWithRange+1)& (0+255),b
  3527  000E0E  0100               	movlb	0	; () banked
  3528  000E10  31B1               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3529  000E12  0100               	movlb	0	; () banked
  3530  000E14  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3531  000E16  0100               	movlb	0	; () banked
  3532  000E18  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3533  000E1A  0100               	movlb	0	; () banked
  3534  000E1C  277D               	addwf	??_ScanWithRange& (0+255),f,b
  3535  000E1E  0100               	movlb	0	; () banked
  3536  000E20  51B9               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3537  000E22  0100               	movlb	0	; () banked
  3538  000E24  237E               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3539  000E26  0100               	movlb	0	; () banked
  3540  000E28  1F7D               	comf	??_ScanWithRange& (0+255),f,b
  3541  000E2A  1F7E               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3542  000E2C  4B7D               	infsnz	??_ScanWithRange& (0+255),f,b
  3543  000E2E  2B7E               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3544  000E30  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3545  000E34  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3546  000E38  50DF               	movf	indf2,w,c
  3547  000E3A  0100               	movlb	0	; () banked
  3548  000E3C  6F7F               	movwf	(??_ScanWithRange+2)& (0+255),b
  3549  000E3E  0100               	movlb	0	; () banked
  3550  000E40  517F               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3551  000E42  0D02               	mullw	2
  3552  000E44  50F3               	movf	prodl,w,c
  3553  000E46  0100               	movlb	0	; () banked
  3554  000E48  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3555  000E4A  6ED9               	movwf	fsr2l,c
  3556  000E4C  50F4               	movf	prodh,w,c
  3557  000E4E  0100               	movlb	0	; () banked
  3558  000E50  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3559  000E52  6EDA               	movwf	fsr2h,c
  3560  000E54  C07D  FFDE         	movff	??_ScanWithRange,postinc2
  3561  000E58  C07E  FFDD         	movff	??_ScanWithRange+1,postdec2
  3562  000E5C  D087               	goto	l3361
  3563  000E5E                     l3339:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;Movement.c: 199: return 2;
  3567  000E5E  0E02               	movlw	2
  3568                           
  3569                           ; BSR set to: 0
  3570  000E60  0012               	return	
  3571  000E62                     l229:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;Movement.c: 201: T0CONbits.TMR0ON=0;
  3575  000E62  9ED5               	bcf	4053,7,c	;volatile
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;Movement.c: 205: (MoveType[*Move]) = 1;
  3579  000E64  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3580  000E68  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3581  000E6C  50DF               	movf	indf2,w,c
  3582  000E6E  0100               	movlb	0	; () banked
  3583  000E70  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3584  000E72  0100               	movlb	0	; () banked
  3585  000E74  517D               	movf	??_ScanWithRange& (0+255),w,b
  3586  000E76  0D01               	mullw	1
  3587  000E78  50F3               	movf	prodl,w,c
  3588  000E7A  0100               	movlb	0	; () banked
  3589  000E7C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3590  000E7E  6ED9               	movwf	fsr2l,c
  3591  000E80  50F4               	movf	prodh,w,c
  3592  000E82  0100               	movlb	0	; () banked
  3593  000E84  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3594  000E86  6EDA               	movwf	fsr2h,c
  3595  000E88  0E01               	movlw	1
  3596  000E8A  6EDF               	movwf	indf2,c
  3597                           
  3598                           ;Movement.c: 206: (MoveTime[*Move]) = -(*millis);
  3599  000E8C  C07B  FFD9         	movff	ScanWithRange@millis,fsr2l
  3600  000E90  C07C  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3601  000E94  CFDE F07D          	movff	postinc2,??_ScanWithRange
  3602  000E98  CFDD F07E          	movff	postdec2,??_ScanWithRange+1
  3603  000E9C  0100               	movlb	0	; () banked
  3604  000E9E  1F7D               	comf	??_ScanWithRange& (0+255),f,b
  3605  000EA0  1F7E               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3606  000EA2  4B7D               	infsnz	??_ScanWithRange& (0+255),f,b
  3607  000EA4  2B7E               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3608  000EA6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3609  000EAA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3610  000EAE  50DF               	movf	indf2,w,c
  3611  000EB0  0100               	movlb	0	; () banked
  3612  000EB2  6F7F               	movwf	(??_ScanWithRange+2)& (0+255),b
  3613  000EB4  0100               	movlb	0	; () banked
  3614  000EB6  517F               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3615  000EB8  0D02               	mullw	2
  3616  000EBA  50F3               	movf	prodl,w,c
  3617  000EBC  0100               	movlb	0	; () banked
  3618  000EBE  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3619  000EC0  6ED9               	movwf	fsr2l,c
  3620  000EC2  50F4               	movf	prodh,w,c
  3621  000EC4  0100               	movlb	0	; () banked
  3622  000EC6  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3623  000EC8  6EDA               	movwf	fsr2h,c
  3624  000ECA  C07D  FFDE         	movff	??_ScanWithRange,postinc2
  3625  000ECE  C07E  FFDD         	movff	??_ScanWithRange+1,postdec2
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;Movement.c: 207: *Move = *Move+1;
  3629  000ED2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3630  000ED6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3631  000EDA  50DF               	movf	indf2,w,c
  3632  000EDC  0100               	movlb	0	; () banked
  3633  000EDE  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3634  000EE0  0100               	movlb	0	; () banked
  3635  000EE2  297D               	incf	??_ScanWithRange& (0+255),w,b
  3636  000EE4  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3637  000EE8  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3638  000EEC  6EDF               	movwf	indf2,c
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;Movement.c: 208: stop(mL,mR);
  3642  000EEE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3643  000EF2  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3644  000EF6  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3645  000EFA  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3646  000EFE  ECD9  F00B         	call	_stop	;wreg free
  3647                           
  3648                           ;Movement.c: 211: turnLeft(mL,mR,100);
  3649  000F02  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3650  000F06  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3651  000F0A  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3652  000F0E  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3653  000F12  0E64               	movlw	100
  3654  000F14  0100               	movlb	0	; () banked
  3655  000F16  6F6B               	movwf	turnLeft@power& (0+255),b
  3656  000F18  ECFA  F00D         	call	_turnLeft	;wreg free
  3657                           
  3658                           ;Movement.c: 212: delay_tenth_s(MiniLeftFlick);
  3659  000F1C  0100               	movlb	0	; () banked
  3660  000F1E  51AE               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3661  000F20  EC36  F00E         	call	_delay_tenth_s
  3662                           
  3663                           ;Movement.c: 213: stop(mL,mR);
  3664  000F24  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3665  000F28  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3666  000F2C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3667  000F30  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3668  000F34  ECD9  F00B         	call	_stop	;wreg free
  3669                           
  3670                           ;Movement.c: 214: (MoveType[*Move]) = 2;
  3671  000F38  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3672  000F3C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3673  000F40  50DF               	movf	indf2,w,c
  3674  000F42  0100               	movlb	0	; () banked
  3675  000F44  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3676  000F46  0100               	movlb	0	; () banked
  3677  000F48  517D               	movf	??_ScanWithRange& (0+255),w,b
  3678  000F4A  0D01               	mullw	1
  3679  000F4C  50F3               	movf	prodl,w,c
  3680  000F4E  0100               	movlb	0	; () banked
  3681  000F50  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3682  000F52  6ED9               	movwf	fsr2l,c
  3683  000F54  50F4               	movf	prodh,w,c
  3684  000F56  0100               	movlb	0	; () banked
  3685  000F58  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3686  000F5A  6EDA               	movwf	fsr2h,c
  3687  000F5C  0E02               	movlw	2
  3688  000F5E  6EDF               	movwf	indf2,c
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;Movement.c: 215: (MoveTime[*Move]) = MiniLeftFlick;
  3692  000F60  0100               	movlb	0	; () banked
  3693  000F62  51AE               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3694  000F64  0100               	movlb	0	; () banked
  3695  000F66  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3696  000F68  6B7E               	clrf	(??_ScanWithRange+1)& (0+255),b
  3697  000F6A  D762               	goto	L3
  3698  000F6C                     l3361:
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;Movement.c: 216: *Move = *Move+1;
  3702  000F6C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3703  000F70  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3704  000F74  50DF               	movf	indf2,w,c
  3705  000F76  0100               	movlb	0	; () banked
  3706  000F78  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3707  000F7A  0100               	movlb	0	; () banked
  3708  000F7C  297D               	incf	??_ScanWithRange& (0+255),w,b
  3709  000F7E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3710  000F82  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3711  000F86  6EDF               	movwf	indf2,c
  3712  000F88  D76A               	goto	l3339
  3713  000F8A                     l3367:
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;Movement.c: 220: }
  3717                           ;Movement.c: 221: }
  3718                           ;Movement.c: 223: if (*RFID_Read==1) {
  3719  000F8A  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3720  000F8E  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3721  000F92  04DE               	decf	postinc2,w,c
  3722  000F94  A4D8               	btfss	status,2,c
  3723  000F96  D002               	goto	l3373
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;Movement.c: 224: return 2;
  3727  000F98  0E02               	movlw	2
  3728                           
  3729                           ; BSR set to: 0
  3730  000F9A  0012               	return	
  3731  000F9C                     l3373:
  3732                           
  3733                           ; BSR set to: 0
  3734  000F9C  0100               	movlb	0	; () banked
  3735  000F9E  4BA9               	infsnz	ScanWithRange@i& (0+255),f,b
  3736  000FA0  2BAA               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3737  000FA2                     l3375:
  3738                           
  3739                           ; BSR set to: 0
  3740  000FA2  0100               	movlb	0	; () banked
  3741  000FA4  51A9               	movf	ScanWithRange@i& (0+255),w,b
  3742  000FA6  0100               	movlb	0	; () banked
  3743  000FA8  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3744  000FAA  0100               	movlb	0	; () banked
  3745  000FAC  51AA               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3746  000FAE  0100               	movlb	0	; () banked
  3747  000FB0  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3748  000FB2  B0D8               	btfsc	status,0,c
  3749  000FB4  D63C               	goto	l3281
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;Movement.c: 225: }
  3753                           ;Movement.c: 226: }
  3754                           ;Movement.c: 231: (MoveType[*Move]) = 2;
  3755                           
  3756                           ; BSR set to: 0
  3757  000FB6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3758  000FBA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3759  000FBE  50DF               	movf	indf2,w,c
  3760  000FC0  0100               	movlb	0	; () banked
  3761  000FC2  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3762  000FC4  0100               	movlb	0	; () banked
  3763  000FC6  517D               	movf	??_ScanWithRange& (0+255),w,b
  3764  000FC8  0D01               	mullw	1
  3765  000FCA  50F3               	movf	prodl,w,c
  3766  000FCC  0100               	movlb	0	; () banked
  3767  000FCE  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3768  000FD0  6ED9               	movwf	fsr2l,c
  3769  000FD2  50F4               	movf	prodh,w,c
  3770  000FD4  0100               	movlb	0	; () banked
  3771  000FD6  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3772  000FD8  6EDA               	movwf	fsr2h,c
  3773  000FDA  0E02               	movlw	2
  3774  000FDC  6EDF               	movwf	indf2,c
  3775                           
  3776                           ;Movement.c: 232: (MoveTime[*Move]) = -2;
  3777  000FDE  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3778  000FE2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3779  000FE6  50DF               	movf	indf2,w,c
  3780  000FE8  0100               	movlb	0	; () banked
  3781  000FEA  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3782  000FEC  0100               	movlb	0	; () banked
  3783  000FEE  517D               	movf	??_ScanWithRange& (0+255),w,b
  3784  000FF0  0D02               	mullw	2
  3785  000FF2  50F3               	movf	prodl,w,c
  3786  000FF4  0100               	movlb	0	; () banked
  3787  000FF6  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3788  000FF8  6ED9               	movwf	fsr2l,c
  3789  000FFA  50F4               	movf	prodh,w,c
  3790  000FFC  0100               	movlb	0	; () banked
  3791  000FFE  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3792  001000  6EDA               	movwf	fsr2h,c
  3793  001002  0EFE               	movlw	254
  3794  001004  6EDE               	movwf	postinc2,c
  3795  001006  0EFF               	movlw	255
  3796  001008  6EDD               	movwf	postdec2,c
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;Movement.c: 233: *Move = *Move+1;
  3800  00100A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3801  00100E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3802  001012  50DF               	movf	indf2,w,c
  3803  001014  0100               	movlb	0	; () banked
  3804  001016  6F7D               	movwf	??_ScanWithRange& (0+255),b
  3805  001018  0100               	movlb	0	; () banked
  3806  00101A  297D               	incf	??_ScanWithRange& (0+255),w,b
  3807  00101C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3808  001020  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3809  001024  6EDF               	movwf	indf2,c
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;Movement.c: 234: turnRight(mL,mR, 100);
  3813  001026  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3814  00102A  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3815  00102E  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3816  001032  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3817  001036  0E64               	movlw	100
  3818  001038  0100               	movlb	0	; () banked
  3819  00103A  6F6B               	movwf	turnRight@power& (0+255),b
  3820  00103C  ECDB  F00D         	call	_turnRight	;wreg free
  3821                           
  3822                           ;Movement.c: 235: delay_tenth_s(LeftFlick);
  3823  001040  0100               	movlb	0	; () banked
  3824  001042  51B7               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3825  001044  EC36  F00E         	call	_delay_tenth_s
  3826                           
  3827                           ;Movement.c: 236: stop(mL,mR);
  3828  001048  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3829  00104C  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3830  001050  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3831  001054  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3832  001058  ECD9  F00B         	call	_stop	;wreg free
  3833                           
  3834                           ;Movement.c: 237: return -1;
  3835  00105C  0EFF               	movlw	255
  3836  00105E  0012               	return	
  3837  001060                     __end_of_ScanWithRange:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           prodh	equ	0xFF4
  3841                           prodl	equ	0xFF3
  3842                           intcon	equ	0xFF2
  3843                           postinc0	equ	0xFEE
  3844                           wreg	equ	0xFE8
  3845                           indf1	equ	0xFE7
  3846                           plusw1	equ	0xFE3
  3847                           fsr1h	equ	0xFE2
  3848                           fsr1l	equ	0xFE1
  3849                           indf2	equ	0xFDF
  3850                           postinc2	equ	0xFDE
  3851                           postdec2	equ	0xFDD
  3852                           plusw2	equ	0xFDB
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function _turnRight *****************
  3858 ;; Defined at:
  3859 ;;		line 103 in file "dc_motor.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3862 ;;		 -> main@mL(9), 
  3863 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3864 ;;		 -> main@mR(9), 
  3865 ;;  power           1   11[BANK0 ] unsigned char 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;		None               void
  3870 ;; Registers used:
  3871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3877 ;;      Params:         0       5       0       0
  3878 ;;      Locals:         0       0       0       0
  3879 ;;      Temps:          0       0       0       0
  3880 ;;      Totals:         0       5       0       0
  3881 ;;Total ram usage:        5 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    6
  3884 ;; This function calls:
  3885 ;;		_fullSpeed
  3886 ;; This function is called by:
  3887 ;;		_ScanWithRange
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text10
  3893  001BB6                     __ptext10:
  3894                           	opt stack 0
  3895  001BB6                     _turnRight:
  3896                           	opt stack 24
  3897                           
  3898                           ;dc_motor.c: 107: mL->direction=0;
  3899                           
  3900                           ;incstack = 0
  3901  001BB6  0100               	movlb	0	; () banked
  3902  001BB8  EE20 F001          	lfsr	2,1
  3903  001BBC  5167               	movf	turnRight@mL& (0+255),w,b
  3904  001BBE  26D9               	addwf	fsr2l,f,c
  3905  001BC0  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3906  001BC2  22DA               	addwfc	fsr2h,f,c
  3907  001BC4  0E00               	movlw	0
  3908  001BC6  6EDF               	movwf	indf2,c
  3909                           
  3910                           ;dc_motor.c: 108: mR->direction=1;
  3911  001BC8  0100               	movlb	0	; () banked
  3912  001BCA  EE20 F001          	lfsr	2,1
  3913  001BCE  5169               	movf	turnRight@mR& (0+255),w,b
  3914  001BD0  26D9               	addwf	fsr2l,f,c
  3915  001BD2  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3916  001BD4  22DA               	addwfc	fsr2h,f,c
  3917  001BD6  0E01               	movlw	1
  3918  001BD8  6EDF               	movwf	indf2,c
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3922  001BDA  C067  F062         	movff	turnRight@mL,fullSpeed@mL
  3923  001BDE  C068  F063         	movff	turnRight@mL+1,fullSpeed@mL+1
  3924  001BE2  C069  F064         	movff	turnRight@mR,fullSpeed@mR
  3925  001BE6  C06A  F065         	movff	turnRight@mR+1,fullSpeed@mR+1
  3926  001BEA  C06B  F066         	movff	turnRight@power,fullSpeed@power
  3927  001BEE  EC65  F00C         	call	_fullSpeed	;wreg free
  3928  001BF2  0012               	return		;funcret
  3929  001BF4                     __end_of_turnRight:
  3930                           	opt stack 0
  3931                           tblptru	equ	0xFF8
  3932                           prodh	equ	0xFF4
  3933                           prodl	equ	0xFF3
  3934                           intcon	equ	0xFF2
  3935                           postinc0	equ	0xFEE
  3936                           wreg	equ	0xFE8
  3937                           indf1	equ	0xFE7
  3938                           plusw1	equ	0xFE3
  3939                           fsr1h	equ	0xFE2
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           plusw2	equ	0xFDB
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _turnLeft *****************
  3950 ;; Defined at:
  3951 ;;		line 92 in file "dc_motor.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3954 ;;		 -> main@mL(9), 
  3955 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3956 ;;		 -> main@mR(9), 
  3957 ;;  power           1   11[BANK0 ] unsigned char 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;		None
  3960 ;; Return value:  Size  Location     Type
  3961 ;;		None               void
  3962 ;; Registers used:
  3963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3969 ;;      Params:         0       5       0       0
  3970 ;;      Locals:         0       0       0       0
  3971 ;;      Temps:          0       0       0       0
  3972 ;;      Totals:         0       5       0       0
  3973 ;;Total ram usage:        5 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    6
  3976 ;; This function calls:
  3977 ;;		_fullSpeed
  3978 ;; This function is called by:
  3979 ;;		_ScanWithRange
  3980 ;;		_main
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text11
  3985  001BF4                     __ptext11:
  3986                           	opt stack 0
  3987  001BF4                     _turnLeft:
  3988                           	opt stack 24
  3989                           
  3990                           ;dc_motor.c: 96: mL->direction=1;
  3991                           
  3992                           ;incstack = 0
  3993  001BF4  0100               	movlb	0	; () banked
  3994  001BF6  EE20 F001          	lfsr	2,1
  3995  001BFA  5167               	movf	turnLeft@mL& (0+255),w,b
  3996  001BFC  26D9               	addwf	fsr2l,f,c
  3997  001BFE  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3998  001C00  22DA               	addwfc	fsr2h,f,c
  3999  001C02  0E01               	movlw	1
  4000  001C04  6EDF               	movwf	indf2,c
  4001                           
  4002                           ;dc_motor.c: 97: mR->direction=0;
  4003  001C06  0100               	movlb	0	; () banked
  4004  001C08  EE20 F001          	lfsr	2,1
  4005  001C0C  5169               	movf	turnLeft@mR& (0+255),w,b
  4006  001C0E  26D9               	addwf	fsr2l,f,c
  4007  001C10  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  4008  001C12  22DA               	addwfc	fsr2h,f,c
  4009  001C14  0E00               	movlw	0
  4010  001C16  6EDF               	movwf	indf2,c
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  4014  001C18  C067  F062         	movff	turnLeft@mL,fullSpeed@mL
  4015  001C1C  C068  F063         	movff	turnLeft@mL+1,fullSpeed@mL+1
  4016  001C20  C069  F064         	movff	turnLeft@mR,fullSpeed@mR
  4017  001C24  C06A  F065         	movff	turnLeft@mR+1,fullSpeed@mR+1
  4018  001C28  C06B  F066         	movff	turnLeft@power,fullSpeed@power
  4019  001C2C  EC65  F00C         	call	_fullSpeed	;wreg free
  4020  001C30  0012               	return		;funcret
  4021  001C32                     __end_of_turnLeft:
  4022                           	opt stack 0
  4023                           tblptru	equ	0xFF8
  4024                           prodh	equ	0xFF4
  4025                           prodl	equ	0xFF3
  4026                           intcon	equ	0xFF2
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           indf1	equ	0xFE7
  4030                           plusw1	equ	0xFE3
  4031                           fsr1h	equ	0xFE2
  4032                           fsr1l	equ	0xFE1
  4033                           indf2	equ	0xFDF
  4034                           postinc2	equ	0xFDE
  4035                           postdec2	equ	0xFDD
  4036                           plusw2	equ	0xFDB
  4037                           fsr2h	equ	0xFDA
  4038                           fsr2l	equ	0xFD9
  4039                           status	equ	0xFD8
  4040                           
  4041 ;; *************** function _fullSpeed *****************
  4042 ;; Defined at:
  4043 ;;		line 113 in file "dc_motor.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4046 ;;		 -> main@mL(9), 
  4047 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4048 ;;		 -> main@mR(9), 
  4049 ;;  power           1    6[BANK0 ] unsigned char 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;		None
  4052 ;; Return value:  Size  Location     Type
  4053 ;;		None               void
  4054 ;; Registers used:
  4055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4061 ;;      Params:         0       5       0       0
  4062 ;;      Locals:         0       0       0       0
  4063 ;;      Temps:          1       0       0       0
  4064 ;;      Totals:         1       5       0       0
  4065 ;;Total ram usage:        6 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    5
  4068 ;; This function calls:
  4069 ;;		_setMotorPWM
  4070 ;; This function is called by:
  4071 ;;		_turnLeft
  4072 ;;		_turnRight
  4073 ;;		_fullSpeedBack
  4074 ;;		_main
  4075 ;;		_fullSpeedForward
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text12
  4080  0018CA                     __ptext12:
  4081                           	opt stack 0
  4082  0018CA                     _fullSpeed:
  4083                           	opt stack 24
  4084                           
  4085                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4086                           
  4087                           ;incstack = 0
  4088  0018CA  D02C               	goto	l67
  4089  0018CC                     l3047:
  4090                           
  4091                           ;dc_motor.c: 117: if(mL->power<power){
  4092  0018CC  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4093  0018D0  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4094  0018D4  0100               	movlb	0	; () banked
  4095  0018D6  5166               	movf	fullSpeed@power& (0+255),w,b
  4096  0018D8  5CDE               	subwf	postinc2,w,c
  4097  0018DA  B0D8               	btfsc	status,0,c
  4098  0018DC  D005               	goto	l3051
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;dc_motor.c: 118: mL->power++;
  4102  0018DE  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4103  0018E2  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4104  0018E6  2ADF               	incf	indf2,f,c
  4105  0018E8                     l3051:
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;dc_motor.c: 119: }
  4109                           ;dc_motor.c: 120: if(mR->power<power){
  4110  0018E8  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4111  0018EC  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4112  0018F0  0100               	movlb	0	; () banked
  4113  0018F2  5166               	movf	fullSpeed@power& (0+255),w,b
  4114  0018F4  5CDE               	subwf	postinc2,w,c
  4115  0018F6  B0D8               	btfsc	status,0,c
  4116  0018F8  D005               	goto	l3055
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;dc_motor.c: 121: mR->power++;
  4120  0018FA  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4121  0018FE  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4122  001902  2ADF               	incf	indf2,f,c
  4123  001904                     l3055:
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;dc_motor.c: 122: }
  4127                           ;dc_motor.c: 123: setMotorPWM(mL);
  4128  001904  C062  F032         	movff	fullSpeed@mL,setMotorPWM@m
  4129  001908  C063  F033         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4130  00190C  ECB3  F009         	call	_setMotorPWM	;wreg free
  4131                           
  4132                           ;dc_motor.c: 124: setMotorPWM(mR);
  4133  001910  C064  F032         	movff	fullSpeed@mR,setMotorPWM@m
  4134  001914  C065  F033         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4135  001918  ECB3  F009         	call	_setMotorPWM	;wreg free
  4136                           
  4137                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4138  00191C  0E21               	movlw	33
  4139  00191E                     u3217:
  4140  00191E  2EE8               	decfsz	wreg,f,c
  4141  001920  D7FE               	goto	u3217
  4142  001922  F000               	nop	
  4143  001924                     l67:
  4144  001924  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4145  001928  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4146  00192C  0100               	movlb	0	; () banked
  4147  00192E  5166               	movf	fullSpeed@power& (0+255),w,b
  4148  001930  5CDE               	subwf	postinc2,w,c
  4149  001932  A0D8               	btfss	status,0,c
  4150  001934  D7CB               	goto	l3047
  4151                           
  4152                           ; BSR set to: 0
  4153  001936  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4154  00193A  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4155  00193E  0100               	movlb	0	; () banked
  4156  001940  5166               	movf	fullSpeed@power& (0+255),w,b
  4157  001942  5CDE               	subwf	postinc2,w,c
  4158  001944  B0D8               	btfsc	status,0,c
  4159  001946  0012               	return	
  4160  001948  D7C1               	goto	l3047
  4161  00194A                     __end_of_fullSpeed:
  4162                           	opt stack 0
  4163                           tblptru	equ	0xFF8
  4164                           prodh	equ	0xFF4
  4165                           prodl	equ	0xFF3
  4166                           intcon	equ	0xFF2
  4167                           postinc0	equ	0xFEE
  4168                           wreg	equ	0xFE8
  4169                           indf1	equ	0xFE7
  4170                           plusw1	equ	0xFE3
  4171                           fsr1h	equ	0xFE2
  4172                           fsr1l	equ	0xFE1
  4173                           indf2	equ	0xFDF
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           plusw2	equ	0xFDB
  4177                           fsr2h	equ	0xFDA
  4178                           fsr2l	equ	0xFD9
  4179                           status	equ	0xFD8
  4180                           
  4181 ;; *************** function _delay_tenth_s *****************
  4182 ;; Defined at:
  4183 ;;		line 32 in file "Movement.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  tenth_second    1    wreg     unsigned char 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4188 ;;  i               2   37[COMRAM] unsigned int 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;		None               void
  4191 ;; Registers used:
  4192 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4198 ;;      Params:         0       0       0       0
  4199 ;;      Locals:         3       0       0       0
  4200 ;;      Temps:          1       0       0       0
  4201 ;;      Totals:         4       0       0       0
  4202 ;;Total ram usage:        4 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; Hardware stack levels required when called:    3
  4205 ;; This function calls:
  4206 ;;		Nothing
  4207 ;; This function is called by:
  4208 ;;		_ScanWithRange
  4209 ;;		_main
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text13
  4214  001C6C                     __ptext13:
  4215                           	opt stack 0
  4216  001C6C                     _delay_tenth_s:
  4217                           	opt stack 27
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;incstack = 0
  4221                           ;delay_tenth_s@tenth_seconds stored from wreg
  4222  001C6C  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4223                           
  4224                           ;Movement.c: 33: unsigned int i=0;
  4225  001C6E  0E00               	movlw	0
  4226  001C70  6E27               	movwf	delay_tenth_s@i+1,c
  4227  001C72  0E00               	movlw	0
  4228  001C74  6E26               	movwf	delay_tenth_s@i,c
  4229                           
  4230                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4231  001C76  0E00               	movlw	0
  4232  001C78  6E27               	movwf	delay_tenth_s@i+1,c
  4233  001C7A  0E01               	movlw	1
  4234  001C7C  6E26               	movwf	delay_tenth_s@i,c
  4235  001C7E  D009               	goto	l2295
  4236  001C80                     l2291:
  4237                           
  4238                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4239  001C80  0E82               	movlw	130
  4240  001C82  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4241  001C84  0EDE               	movlw	222
  4242  001C86                     u3227:
  4243  001C86  2EE8               	decfsz	wreg,f,c
  4244  001C88  D7FE               	goto	u3227
  4245  001C8A  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4246  001C8C  D7FC               	goto	u3227
  4247  001C8E  4A26               	infsnz	delay_tenth_s@i,f,c
  4248  001C90  2A27               	incf	delay_tenth_s@i+1,f,c
  4249  001C92                     l2295:
  4250  001C92  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4251  001C94  0D02               	mullw	2
  4252  001C96  5026               	movf	delay_tenth_s@i,w,c
  4253  001C98  5CF3               	subwf	prodl,w,c
  4254  001C9A  5027               	movf	delay_tenth_s@i+1,w,c
  4255  001C9C  58F4               	subwfb	prodh,w,c
  4256  001C9E  A0D8               	btfss	status,0,c
  4257  001CA0  0012               	return	
  4258  001CA2  D7EE               	goto	l2291
  4259  001CA4                     __end_of_delay_tenth_s:
  4260                           	opt stack 0
  4261                           tblptru	equ	0xFF8
  4262                           prodh	equ	0xFF4
  4263                           prodl	equ	0xFF3
  4264                           intcon	equ	0xFF2
  4265                           postinc0	equ	0xFEE
  4266                           wreg	equ	0xFE8
  4267                           indf1	equ	0xFE7
  4268                           plusw1	equ	0xFE3
  4269                           fsr1h	equ	0xFE2
  4270                           fsr1l	equ	0xFE1
  4271                           indf2	equ	0xFDF
  4272                           postinc2	equ	0xFDE
  4273                           postdec2	equ	0xFDD
  4274                           plusw2	equ	0xFDB
  4275                           fsr2h	equ	0xFDA
  4276                           fsr2l	equ	0xFD9
  4277                           status	equ	0xFD8
  4278                           
  4279 ;; *************** function _ScanIR *****************
  4280 ;; Defined at:
  4281 ;;		line 44 in file "Movement.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4284 ;;		 -> main@mL(9), 
  4285 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4286 ;;		 -> main@mR(9), 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4289 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4290 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      unsigned char 
  4293 ;; Registers used:
  4294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4300 ;;      Params:         0       4       0       0
  4301 ;;      Locals:         0      46       0       0
  4302 ;;      Temps:          1       0       0       0
  4303 ;;      Totals:         1      50       0       0
  4304 ;;Total ram usage:       51 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    7
  4307 ;; This function calls:
  4308 ;;		_LCD_String
  4309 ;;		_SendLCD
  4310 ;;		_SetLine
  4311 ;;		_grabLeftIR
  4312 ;;		_grabRightIR
  4313 ;;		_sprintf
  4314 ;;		_stop
  4315 ;; This function is called by:
  4316 ;;		_main
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text14
  4321  0014A0                     __ptext14:
  4322                           	opt stack 0
  4323  0014A0                     _ScanIR:
  4324                           	opt stack 23
  4325                           
  4326                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4327                           
  4328                           ;incstack = 0
  4329  0014A0  C0EE  F09B         	movff	ScanIR@F3880,ScanIR@SensorResult
  4330  0014A4  C0EF  F09C         	movff	ScanIR@F3880+1,ScanIR@SensorResult+1
  4331  0014A8  C0F0  F09D         	movff	ScanIR@F3880+2,ScanIR@SensorResult+2
  4332  0014AC  C0F1  F09E         	movff	ScanIR@F3880+3,ScanIR@SensorResult+3
  4333                           
  4334                           ;Movement.c: 48: char buf[40];
  4335                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4336  0014B0  0E03               	movlw	3
  4337  0014B2  0100               	movlb	0	; () banked
  4338  0014B4  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4339  0014B6  0EE8               	movlw	232
  4340  0014B8  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4344  0014BA  ECDE  F00C         	call	_grabLeftIR	;wreg free
  4345  0014BE  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4346  0014C2  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4347                           
  4348                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4349  0014C6  ECA5  F00C         	call	_grabRightIR	;wreg free
  4350  0014CA  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4351  0014CE  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4352                           
  4353                           ;Movement.c: 60: CAP1BUFH=0;
  4354  0014D2  0E00               	movlw	0
  4355  0014D4  6E69               	movwf	3945,c	;volatile
  4356                           
  4357                           ;Movement.c: 61: CAP1BUFL=0;
  4358  0014D6  0E00               	movlw	0
  4359  0014D8  6E68               	movwf	3944,c	;volatile
  4360                           
  4361                           ;Movement.c: 62: CAP2BUFH=0;
  4362  0014DA  0E00               	movlw	0
  4363  0014DC  6E67               	movwf	3943,c	;volatile
  4364                           
  4365                           ;Movement.c: 63: CAP2BUFL=0;
  4366  0014DE  0E00               	movlw	0
  4367  0014E0  6E66               	movwf	3942,c	;volatile
  4368                           
  4369                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4370  0014E2  0E00               	movlw	0
  4371  0014E4  6E28               	movwf	SendLCD@type,c
  4372  0014E6  0E01               	movlw	1
  4373  0014E8  ECA1  F00E         	call	_SendLCD
  4374                           
  4375                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4376  0014EC  0E21               	movlw	33
  4377  0014EE                     u3237:
  4378  0014EE  2EE8               	decfsz	wreg,f,c
  4379  0014F0  D7FE               	goto	u3237
  4380  0014F2  F000               	nop	
  4381                           
  4382                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4383  0014F4  0E00               	movlw	0
  4384  0014F6  6E28               	movwf	SendLCD@type,c
  4385  0014F8  0E02               	movlw	2
  4386  0014FA  ECA1  F00E         	call	_SendLCD
  4387                           
  4388                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4389  0014FE  0E06               	movlw	6
  4390  001500  6E39               	movwf	??_ScanIR& (0+255),c
  4391  001502  0E30               	movlw	48
  4392  001504                     u3247:
  4393  001504  2EE8               	decfsz	wreg,f,c
  4394  001506  D7FE               	goto	u3247
  4395  001508  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4396  00150A  D7FC               	goto	u3247
  4397  00150C  D000               	nop2	
  4398                           
  4399                           ;Movement.c: 70: SetLine(1);
  4400  00150E  0E01               	movlw	1
  4401  001510  EC89  F00E         	call	_SetLine
  4402                           
  4403                           ;Movement.c: 71: LCD_String("     ScanIR");
  4404  001514  0E2D               	movlw	low STR_1
  4405  001516  6E2A               	movwf	LCD_String@string,c
  4406  001518  0E03               	movlw	high STR_1
  4407  00151A  6E2B               	movwf	LCD_String@string+1,c
  4408  00151C  EC17  F00D         	call	_LCD_String	;wreg free
  4409                           
  4410                           ;Movement.c: 72: SetLine(2);
  4411  001520  0E02               	movlw	2
  4412  001522  EC89  F00E         	call	_SetLine
  4413                           
  4414                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4415  001526  0E71               	movlw	low ScanIR@buf
  4416  001528  6E30               	movwf	sprintf@sp,c
  4417  00152A  0E00               	movlw	high ScanIR@buf
  4418  00152C  6E31               	movwf	sprintf@sp+1,c
  4419  00152E  0E0C               	movlw	low (STR_6+1)
  4420  001530  6E32               	movwf	sprintf@f,c
  4421  001532  0E03               	movlw	high (STR_6+1)
  4422  001534  6E33               	movwf	sprintf@f+1,c
  4423  001536  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4424  00153A  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4425  00153E  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4426  001542  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4427  001546  EC30  F008         	call	_sprintf	;wreg free
  4428                           
  4429                           ;Movement.c: 74: LCD_String(buf);
  4430  00154A  0E71               	movlw	low ScanIR@buf
  4431  00154C  6E2A               	movwf	LCD_String@string,c
  4432  00154E  0E00               	movlw	high ScanIR@buf
  4433  001550  6E2B               	movwf	LCD_String@string+1,c
  4434  001552  EC17  F00D         	call	_LCD_String	;wreg free
  4435                           
  4436                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4437                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4438  001556  0100               	movlb	0	; () banked
  4439  001558  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4440  00155A  0100               	movlb	0	; () banked
  4441  00155C  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4442  00155E  0100               	movlb	0	; () banked
  4443  001560  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4444  001562  0100               	movlb	0	; () banked
  4445  001564  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4446  001566  B0D8               	btfsc	status,0,c
  4447  001568  D00C               	goto	l3247
  4448                           
  4449                           ; BSR set to: 0
  4450  00156A  0100               	movlb	0	; () banked
  4451  00156C  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4452  00156E  0100               	movlb	0	; () banked
  4453  001570  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4454  001572  0100               	movlb	0	; () banked
  4455  001574  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4456  001576  0100               	movlb	0	; () banked
  4457  001578  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4458  00157A  B0D8               	btfsc	status,0,c
  4459  00157C  D002               	goto	l3247
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;Movement.c: 80: return 2;
  4463  00157E  0E02               	movlw	2
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;Movement.c: 81: } else {
  4467                           
  4468                           ; BSR set to: 0
  4469  001580  0012               	return	
  4470  001582                     l3247:
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;Movement.c: 82: stop(mL,mR);
  4474  001582  C06D  F062         	movff	ScanIR@mL,stop@mL
  4475  001586  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4476  00158A  C06F  F064         	movff	ScanIR@mR,stop@mR
  4477  00158E  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4478  001592  ECD9  F00B         	call	_stop	;wreg free
  4479                           
  4480                           ;Movement.c: 83: return 0;
  4481  001596  0E00               	movlw	0
  4482  001598  0012               	return	
  4483  00159A                     __end_of_ScanIR:
  4484                           	opt stack 0
  4485                           tblptru	equ	0xFF8
  4486                           prodh	equ	0xFF4
  4487                           prodl	equ	0xFF3
  4488                           intcon	equ	0xFF2
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           indf1	equ	0xFE7
  4492                           plusw1	equ	0xFE3
  4493                           fsr1h	equ	0xFE2
  4494                           fsr1l	equ	0xFE1
  4495                           indf2	equ	0xFDF
  4496                           postinc2	equ	0xFDE
  4497                           postdec2	equ	0xFDD
  4498                           plusw2	equ	0xFDB
  4499                           fsr2h	equ	0xFDA
  4500                           fsr2l	equ	0xFD9
  4501                           status	equ	0xFD8
  4502                           
  4503 ;; *************** function _stop *****************
  4504 ;; Defined at:
  4505 ;;		line 72 in file "dc_motor.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4508 ;;		 -> main@mL(9), 
  4509 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4510 ;;		 -> main@mR(9), 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;		None               void
  4515 ;; Registers used:
  4516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4522 ;;      Params:         0       4       0       0
  4523 ;;      Locals:         0       0       0       0
  4524 ;;      Temps:          0       0       0       0
  4525 ;;      Totals:         0       4       0       0
  4526 ;;Total ram usage:        4 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    5
  4529 ;; This function calls:
  4530 ;;		_setMotorPWM
  4531 ;; This function is called by:
  4532 ;;		_ScanIR
  4533 ;;		_ScanWithRange
  4534 ;;		_main
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text15
  4539  0017B2                     __ptext15:
  4540                           	opt stack 0
  4541  0017B2                     _stop:
  4542                           	opt stack 25
  4543                           
  4544                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4545                           
  4546                           ;incstack = 0
  4547  0017B2  D028               	goto	l3079
  4548  0017B4                     l3065:
  4549                           
  4550                           ;dc_motor.c: 76: if(mL->power>0){
  4551  0017B4  C062  FFD9         	movff	stop@mL,fsr2l
  4552  0017B8  C063  FFDA         	movff	stop@mL+1,fsr2h
  4553  0017BC  50DF               	movf	indf2,w,c
  4554  0017BE  B4D8               	btfsc	status,2,c
  4555  0017C0  D005               	goto	l3069
  4556                           
  4557                           ;dc_motor.c: 77: mL->power--;
  4558  0017C2  C062  FFD9         	movff	stop@mL,fsr2l
  4559  0017C6  C063  FFDA         	movff	stop@mL+1,fsr2h
  4560  0017CA  06DF               	decf	indf2,f,c
  4561  0017CC                     l3069:
  4562                           
  4563                           ;dc_motor.c: 78: }
  4564                           ;dc_motor.c: 79: if(mR->power>0){
  4565  0017CC  C064  FFD9         	movff	stop@mR,fsr2l
  4566  0017D0  C065  FFDA         	movff	stop@mR+1,fsr2h
  4567  0017D4  50DF               	movf	indf2,w,c
  4568  0017D6  B4D8               	btfsc	status,2,c
  4569  0017D8  D005               	goto	l3073
  4570                           
  4571                           ;dc_motor.c: 80: mR->power--;
  4572  0017DA  C064  FFD9         	movff	stop@mR,fsr2l
  4573  0017DE  C065  FFDA         	movff	stop@mR+1,fsr2h
  4574  0017E2  06DF               	decf	indf2,f,c
  4575  0017E4                     l3073:
  4576                           
  4577                           ;dc_motor.c: 81: }
  4578                           ;dc_motor.c: 82: setMotorPWM(mL);
  4579  0017E4  C062  F032         	movff	stop@mL,setMotorPWM@m
  4580  0017E8  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4581  0017EC  ECB3  F009         	call	_setMotorPWM	;wreg free
  4582                           
  4583                           ;dc_motor.c: 83: setMotorPWM(mR);
  4584  0017F0  C064  F032         	movff	stop@mR,setMotorPWM@m
  4585  0017F4  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4586  0017F8  ECB3  F009         	call	_setMotorPWM	;wreg free
  4587                           
  4588                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4589  0017FC  0E21               	movlw	33
  4590  0017FE                     u3257:
  4591  0017FE  2EE8               	decfsz	wreg,f,c
  4592  001800  D7FE               	goto	u3257
  4593  001802  F000               	nop	
  4594  001804                     l3079:
  4595  001804  C062  FFD9         	movff	stop@mL,fsr2l
  4596  001808  C063  FFDA         	movff	stop@mL+1,fsr2h
  4597  00180C  50DF               	movf	indf2,w,c
  4598  00180E  A4D8               	btfss	status,2,c
  4599  001810  D7D1               	goto	l3065
  4600  001812  C064  FFD9         	movff	stop@mR,fsr2l
  4601  001816  C065  FFDA         	movff	stop@mR+1,fsr2h
  4602  00181A  50DF               	movf	indf2,w,c
  4603  00181C  A4D8               	btfss	status,2,c
  4604  00181E  D7CA               	goto	l3065
  4605                           
  4606                           ;dc_motor.c: 85: }
  4607                           ;dc_motor.c: 86: mL->direction=1;
  4608  001820  0100               	movlb	0	; () banked
  4609  001822  EE20 F001          	lfsr	2,1
  4610  001826  5162               	movf	stop@mL& (0+255),w,b
  4611  001828  26D9               	addwf	fsr2l,f,c
  4612  00182A  5163               	movf	(stop@mL+1)& (0+255),w,b
  4613  00182C  22DA               	addwfc	fsr2h,f,c
  4614  00182E  0E01               	movlw	1
  4615  001830  6EDF               	movwf	indf2,c
  4616                           
  4617                           ;dc_motor.c: 87: mR->direction=1;
  4618  001832  0100               	movlb	0	; () banked
  4619  001834  EE20 F001          	lfsr	2,1
  4620  001838  5164               	movf	stop@mR& (0+255),w,b
  4621  00183A  26D9               	addwf	fsr2l,f,c
  4622  00183C  5165               	movf	(stop@mR+1)& (0+255),w,b
  4623  00183E  22DA               	addwfc	fsr2h,f,c
  4624  001840  0E01               	movlw	1
  4625  001842  6EDF               	movwf	indf2,c
  4626                           
  4627                           ; BSR set to: 0
  4628  001844  0012               	return		;funcret
  4629  001846                     __end_of_stop:
  4630                           	opt stack 0
  4631                           tblptru	equ	0xFF8
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           intcon	equ	0xFF2
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           indf1	equ	0xFE7
  4638                           plusw1	equ	0xFE3
  4639                           fsr1h	equ	0xFE2
  4640                           fsr1l	equ	0xFE1
  4641                           indf2	equ	0xFDF
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           plusw2	equ	0xFDB
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649 ;; *************** function _setMotorPWM *****************
  4650 ;; Defined at:
  4651 ;;		line 31 in file "dc_motor.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4654 ;;		 -> main@mR(9), main@mL(9), 
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  PWMduty         2    0[BANK0 ] int 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;		None               void
  4659 ;; Registers used:
  4660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4666 ;;      Params:         2       0       0       0
  4667 ;;      Locals:         0       2       0       0
  4668 ;;      Temps:          5       0       0       0
  4669 ;;      Totals:         7       2       0       0
  4670 ;;Total ram usage:        9 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; Hardware stack levels required when called:    4
  4673 ;; This function calls:
  4674 ;;		___awdiv
  4675 ;;		___wmul
  4676 ;; This function is called by:
  4677 ;;		_stop
  4678 ;;		_fullSpeed
  4679 ;;		_setMotorFullSpeed
  4680 ;;		_stopMotor
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text16
  4685  001366                     __ptext16:
  4686                           	opt stack 0
  4687  001366                     _setMotorPWM:
  4688                           	opt stack 24
  4689                           
  4690                           ;dc_motor.c: 33: int PWMduty;
  4691                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;incstack = 0
  4695  001366  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4696  00136A  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4697  00136E  50DF               	movf	indf2,w,c
  4698  001370  6E34               	movwf	??_setMotorPWM& (0+255),c
  4699  001372  5034               	movf	??_setMotorPWM,w,c
  4700  001374  6E24               	movwf	___wmul@multiplier,c
  4701  001376  6A25               	clrf	___wmul@multiplier+1,c
  4702  001378  EE20 F007          	lfsr	2,7
  4703  00137C  5032               	movf	setMotorPWM@m,w,c
  4704  00137E  26D9               	addwf	fsr2l,f,c
  4705  001380  5033               	movf	setMotorPWM@m+1,w,c
  4706  001382  22DA               	addwfc	fsr2h,f,c
  4707  001384  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4708  001388  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4709  00138C  ECCC  F00E         	call	___wmul	;wreg free
  4710  001390  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4711  001394  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4712  001398  0E00               	movlw	0
  4713  00139A  6E2D               	movwf	___awdiv@divisor+1,c
  4714  00139C  0E64               	movlw	100
  4715  00139E  6E2C               	movwf	___awdiv@divisor,c
  4716  0013A0  EC23  F00C         	call	___awdiv	;wreg free
  4717  0013A4  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4718  0013A8  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4719                           
  4720                           ;dc_motor.c: 37: if (m->direction)
  4721  0013AC  EE20 F001          	lfsr	2,1
  4722  0013B0  5032               	movf	setMotorPWM@m,w,c
  4723  0013B2  26D9               	addwf	fsr2l,f,c
  4724  0013B4  5033               	movf	setMotorPWM@m+1,w,c
  4725  0013B6  22DA               	addwfc	fsr2h,f,c
  4726  0013B8  50DF               	movf	indf2,w,c
  4727  0013BA  B4D8               	btfsc	status,2,c
  4728  0013BC  D02E               	goto	l3043
  4729                           
  4730                           ;dc_motor.c: 38: {
  4731                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4732  0013BE  EE20 F006          	lfsr	2,6
  4733  0013C2  5032               	movf	setMotorPWM@m,w,c
  4734  0013C4  26D9               	addwf	fsr2l,f,c
  4735  0013C6  5033               	movf	setMotorPWM@m+1,w,c
  4736  0013C8  22DA               	addwfc	fsr2h,f,c
  4737  0013CA  50DF               	movf	indf2,w,c
  4738  0013CC  6E34               	movwf	??_setMotorPWM& (0+255),c
  4739  0013CE  0E01               	movlw	1
  4740  0013D0  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4741  0013D2  2A34               	incf	??_setMotorPWM,f,c
  4742  0013D4  D002               	goto	u2394
  4743  0013D6                     u2395:
  4744  0013D6  90D8               	bcf	status,0,c
  4745  0013D8  3635               	rlcf	??_setMotorPWM+1,f,c
  4746  0013DA                     u2394:
  4747  0013DA  2E34               	decfsz	??_setMotorPWM,f,c
  4748  0013DC  D7FC               	goto	u2395
  4749  0013DE  5035               	movf	??_setMotorPWM+1,w,c
  4750  0013E0  108A               	iorwf	3978,w,c	;volatile
  4751  0013E2  6E8A               	movwf	3978,c	;volatile
  4752                           
  4753                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4754  0013E4  EE20 F007          	lfsr	2,7
  4755  0013E8  5032               	movf	setMotorPWM@m,w,c
  4756  0013EA  26D9               	addwf	fsr2l,f,c
  4757  0013EC  5033               	movf	setMotorPWM@m+1,w,c
  4758  0013EE  22DA               	addwfc	fsr2h,f,c
  4759  0013F0  CFDE F034          	movff	postinc2,??_setMotorPWM
  4760  0013F4  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4761  0013F8  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4762  0013FC  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4763  001400  1E36               	comf	??_setMotorPWM+2,f,c
  4764  001402  1E37               	comf	??_setMotorPWM+3,f,c
  4765  001404  4A36               	infsnz	??_setMotorPWM+2,f,c
  4766  001406  2A37               	incf	??_setMotorPWM+3,f,c
  4767  001408  5034               	movf	??_setMotorPWM,w,c
  4768  00140A  2436               	addwf	??_setMotorPWM+2,w,c
  4769  00140C  0100               	movlb	0	; () banked
  4770  00140E  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4771  001410  5035               	movf	??_setMotorPWM+1,w,c
  4772  001412  2037               	addwfc	??_setMotorPWM+3,w,c
  4773  001414  0100               	movlb	0	; () banked
  4774  001416  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4775                           
  4776                           ;dc_motor.c: 41: }
  4777  001418  D014               	goto	l37
  4778  00141A                     l3043:
  4779                           
  4780                           ;dc_motor.c: 42: else
  4781                           ;dc_motor.c: 43: {
  4782                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4783  00141A  EE20 F006          	lfsr	2,6
  4784  00141E  5032               	movf	setMotorPWM@m,w,c
  4785  001420  26D9               	addwf	fsr2l,f,c
  4786  001422  5033               	movf	setMotorPWM@m+1,w,c
  4787  001424  22DA               	addwfc	fsr2h,f,c
  4788  001426  50DF               	movf	indf2,w,c
  4789  001428  6E34               	movwf	??_setMotorPWM& (0+255),c
  4790  00142A  0E01               	movlw	1
  4791  00142C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4792  00142E  2A34               	incf	??_setMotorPWM,f,c
  4793  001430  D002               	goto	u2404
  4794  001432                     u2405:
  4795  001432  90D8               	bcf	status,0,c
  4796  001434  3635               	rlcf	??_setMotorPWM+1,f,c
  4797  001436                     u2404:
  4798  001436  2E34               	decfsz	??_setMotorPWM,f,c
  4799  001438  D7FC               	goto	u2405
  4800  00143A  5035               	movf	??_setMotorPWM+1,w,c
  4801  00143C  0AFF               	xorlw	255
  4802  00143E  148A               	andwf	3978,w,c	;volatile
  4803  001440  6E8A               	movwf	3978,c	;volatile
  4804  001442                     l37:
  4805                           
  4806                           ;dc_motor.c: 45: }
  4807                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4808  001442  EE20 F002          	lfsr	2,2
  4809  001446  5032               	movf	setMotorPWM@m,w,c
  4810  001448  26D9               	addwf	fsr2l,f,c
  4811  00144A  5033               	movf	setMotorPWM@m+1,w,c
  4812  00144C  22DA               	addwfc	fsr2h,f,c
  4813  00144E  CFDE F034          	movff	postinc2,??_setMotorPWM
  4814  001452  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4815  001456  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4816  00145A  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4817  00145E  0100               	movlb	0	; () banked
  4818  001460  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4819  001462  46E8               	rlncf	wreg,f,c
  4820  001464  0BFC               	andlw	252
  4821  001466  6EDF               	movwf	indf2,c
  4822                           
  4823                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4824  001468  EE20 F004          	lfsr	2,4
  4825  00146C  5032               	movf	setMotorPWM@m,w,c
  4826  00146E  26D9               	addwf	fsr2l,f,c
  4827  001470  5033               	movf	setMotorPWM@m+1,w,c
  4828  001472  22DA               	addwfc	fsr2h,f,c
  4829  001474  CFDE F034          	movff	postinc2,??_setMotorPWM
  4830  001478  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4831  00147C  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4832  001480  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4833  001484  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4834  001488  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4835  00148C  0E06               	movlw	6
  4836  00148E  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4837  001490                     u2415:
  4838  001490  3437               	rlcf	??_setMotorPWM+3,w,c
  4839  001492  3237               	rrcf	??_setMotorPWM+3,f,c
  4840  001494  3236               	rrcf	??_setMotorPWM+2,f,c
  4841  001496  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4842  001498  D7FB               	goto	u2415
  4843  00149A  5036               	movf	??_setMotorPWM+2,w,c
  4844  00149C  6EDF               	movwf	indf2,c
  4845                           
  4846                           ; BSR set to: 0
  4847  00149E  0012               	return		;funcret
  4848  0014A0                     __end_of_setMotorPWM:
  4849                           	opt stack 0
  4850                           tblptru	equ	0xFF8
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           postinc0	equ	0xFEE
  4855                           wreg	equ	0xFE8
  4856                           indf1	equ	0xFE7
  4857                           plusw1	equ	0xFE3
  4858                           fsr1h	equ	0xFE2
  4859                           fsr1l	equ	0xFE1
  4860                           indf2	equ	0xFDF
  4861                           postinc2	equ	0xFDE
  4862                           postdec2	equ	0xFDD
  4863                           plusw2	equ	0xFDB
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function ___awdiv *****************
  4869 ;; Defined at:
  4870 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  dividend        2   41[COMRAM] int 
  4873 ;;  divisor         2   43[COMRAM] int 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  quotient        2   47[COMRAM] int 
  4876 ;;  sign            1   46[COMRAM] unsigned char 
  4877 ;;  counter         1   45[COMRAM] unsigned char 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  2   41[COMRAM] int 
  4880 ;; Registers used:
  4881 ;;		wreg, status,2, status,0
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4887 ;;      Params:         4       0       0       0
  4888 ;;      Locals:         4       0       0       0
  4889 ;;      Temps:          0       0       0       0
  4890 ;;      Totals:         8       0       0       0
  4891 ;;Total ram usage:        8 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    3
  4894 ;; This function calls:
  4895 ;;		Nothing
  4896 ;; This function is called by:
  4897 ;;		_setMotorPWM
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           	psect	text17
  4902  001846                     __ptext17:
  4903                           	opt stack 0
  4904  001846                     ___awdiv:
  4905                           	opt stack 24
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;incstack = 0
  4909  001846  0E00               	movlw	0
  4910  001848  6E2F               	movwf	___awdiv@sign,c
  4911  00184A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4912  00184C  D006               	goto	l3001
  4913  00184E  6C2C               	negf	___awdiv@divisor,c
  4914  001850  1E2D               	comf	___awdiv@divisor+1,f,c
  4915  001852  B0D8               	btfsc	status,0,c
  4916  001854  2A2D               	incf	___awdiv@divisor+1,f,c
  4917  001856  0E01               	movlw	1
  4918  001858  6E2F               	movwf	___awdiv@sign,c
  4919  00185A                     l3001:
  4920  00185A  AE2B               	btfss	___awdiv@dividend+1,7,c
  4921  00185C  D006               	goto	l3007
  4922  00185E  6C2A               	negf	___awdiv@dividend,c
  4923  001860  1E2B               	comf	___awdiv@dividend+1,f,c
  4924  001862  B0D8               	btfsc	status,0,c
  4925  001864  2A2B               	incf	___awdiv@dividend+1,f,c
  4926  001866  0E01               	movlw	1
  4927  001868  1A2F               	xorwf	___awdiv@sign,f,c
  4928  00186A                     l3007:
  4929  00186A  0E00               	movlw	0
  4930  00186C  6E31               	movwf	___awdiv@quotient+1,c
  4931  00186E  0E00               	movlw	0
  4932  001870  6E30               	movwf	___awdiv@quotient,c
  4933  001872  502C               	movf	___awdiv@divisor,w,c
  4934  001874  102D               	iorwf	___awdiv@divisor+1,w,c
  4935  001876  B4D8               	btfsc	status,2,c
  4936  001878  D01C               	goto	l3029
  4937  00187A  0E01               	movlw	1
  4938  00187C  6E2E               	movwf	___awdiv@counter,c
  4939  00187E  D004               	goto	l3015
  4940  001880                     l3013:
  4941  001880  90D8               	bcf	status,0,c
  4942  001882  362C               	rlcf	___awdiv@divisor,f,c
  4943  001884  362D               	rlcf	___awdiv@divisor+1,f,c
  4944  001886  2A2E               	incf	___awdiv@counter,f,c
  4945  001888                     l3015:
  4946  001888  AE2D               	btfss	___awdiv@divisor+1,7,c
  4947  00188A  D7FA               	goto	l3013
  4948  00188C                     l3017:
  4949  00188C  90D8               	bcf	status,0,c
  4950  00188E  3630               	rlcf	___awdiv@quotient,f,c
  4951  001890  3631               	rlcf	___awdiv@quotient+1,f,c
  4952  001892  502C               	movf	___awdiv@divisor,w,c
  4953  001894  5C2A               	subwf	___awdiv@dividend,w,c
  4954  001896  502D               	movf	___awdiv@divisor+1,w,c
  4955  001898  582B               	subwfb	___awdiv@dividend+1,w,c
  4956  00189A  A0D8               	btfss	status,0,c
  4957  00189C  D005               	goto	l3025
  4958  00189E  502C               	movf	___awdiv@divisor,w,c
  4959  0018A0  5E2A               	subwf	___awdiv@dividend,f,c
  4960  0018A2  502D               	movf	___awdiv@divisor+1,w,c
  4961  0018A4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4962  0018A6  8030               	bsf	___awdiv@quotient,0,c
  4963  0018A8                     l3025:
  4964  0018A8  90D8               	bcf	status,0,c
  4965  0018AA  322D               	rrcf	___awdiv@divisor+1,f,c
  4966  0018AC  322C               	rrcf	___awdiv@divisor,f,c
  4967  0018AE  2E2E               	decfsz	___awdiv@counter,f,c
  4968  0018B0  D7ED               	goto	l3017
  4969  0018B2                     l3029:
  4970  0018B2  502F               	movf	___awdiv@sign,w,c
  4971  0018B4  B4D8               	btfsc	status,2,c
  4972  0018B6  D004               	goto	l3033
  4973  0018B8  6C30               	negf	___awdiv@quotient,c
  4974  0018BA  1E31               	comf	___awdiv@quotient+1,f,c
  4975  0018BC  B0D8               	btfsc	status,0,c
  4976  0018BE  2A31               	incf	___awdiv@quotient+1,f,c
  4977  0018C0                     l3033:
  4978  0018C0  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4979  0018C4  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4980  0018C8  0012               	return	
  4981  0018CA                     __end_of___awdiv:
  4982                           	opt stack 0
  4983                           tblptru	equ	0xFF8
  4984                           prodh	equ	0xFF4
  4985                           prodl	equ	0xFF3
  4986                           intcon	equ	0xFF2
  4987                           postinc0	equ	0xFEE
  4988                           wreg	equ	0xFE8
  4989                           indf1	equ	0xFE7
  4990                           plusw1	equ	0xFE3
  4991                           fsr1h	equ	0xFE2
  4992                           fsr1l	equ	0xFE1
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           plusw2	equ	0xFDB
  4997                           fsr2h	equ	0xFDA
  4998                           fsr2l	equ	0xFD9
  4999                           status	equ	0xFD8
  5000                           
  5001 ;; *************** function _sprintf *****************
  5002 ;; Defined at:
  5003 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5006 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  5007 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5008 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  tmpval          4    0        struct .
  5011 ;;  cp              3    0        PTR const unsigned char 
  5012 ;;  width           2   10[BANK0 ] int 
  5013 ;;  val             2    7[BANK0 ] unsigned int 
  5014 ;;  ap              2    4[BANK0 ] PTR void [1]
  5015 ;;		 -> ?_sprintf(2), 
  5016 ;;  len             2    0        unsigned int 
  5017 ;;  c               1   12[BANK0 ] char 
  5018 ;;  flag            1    9[BANK0 ] unsigned char 
  5019 ;;  prec            1    6[BANK0 ] char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  2   47[COMRAM] int 
  5022 ;; Registers used:
  5023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5029 ;;      Params:         8       0       0       0
  5030 ;;      Locals:         0       9       0       0
  5031 ;;      Temps:          0       4       0       0
  5032 ;;      Totals:         8      13       0       0
  5033 ;;Total ram usage:       21 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    4
  5036 ;; This function calls:
  5037 ;;		___lwdiv
  5038 ;;		___lwmod
  5039 ;;		___wmul
  5040 ;;		_isdigit
  5041 ;; This function is called by:
  5042 ;;		_ScanIR
  5043 ;;		_ScanWithRange
  5044 ;;		_main
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text18
  5049  001060                     __ptext18:
  5050                           	opt stack 0
  5051  001060                     _sprintf:
  5052                           	opt stack 26
  5053                           
  5054                           ;doprnt.c: 494: va_list ap;
  5055                           ;doprnt.c: 499: signed char c;
  5056                           ;doprnt.c: 501: int width;
  5057                           ;doprnt.c: 506: signed char prec;
  5058                           ;doprnt.c: 508: unsigned char flag;
  5059                           ;doprnt.c: 523: union {
  5060                           ;doprnt.c: 524: unsigned long vd;
  5061                           ;doprnt.c: 525: double integ;
  5062                           ;doprnt.c: 526: } tmpval;
  5063                           ;doprnt.c: 528: unsigned int val;
  5064                           ;doprnt.c: 529: unsigned len;
  5065                           ;doprnt.c: 530: const char * cp;
  5066                           ;doprnt.c: 533: *ap = __va_start();
  5067                           
  5068                           ;incstack = 0
  5069  001060  0E34               	movlw	low (?_sprintf+4)
  5070  001062  0100               	movlb	0	; () banked
  5071  001064  6F64               	movwf	sprintf@ap& (0+255),b
  5072  001066  0E00               	movlw	high (?_sprintf+4)
  5073  001068  0100               	movlb	0	; () banked
  5074  00106A  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  5075                           
  5076                           ;doprnt.c: 536: while(c = *f++) {
  5077  00106C  D168               	goto	l3201
  5078  00106E                     l3095:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;doprnt.c: 538: if(c != '%')
  5082  00106E  0E25               	movlw	37
  5083  001070  0100               	movlb	0	; () banked
  5084  001072  196C               	xorwf	sprintf@c& (0+255),w,b
  5085  001074  B4D8               	btfsc	status,2,c
  5086  001076  D009               	goto	l3101
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;doprnt.c: 540: {
  5090                           ;doprnt.c: 541: ((*sp++ = (c)));
  5091  001078  C030  FFD9         	movff	sprintf@sp,fsr2l
  5092  00107C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5093  001080  C06C  FFDF         	movff	sprintf@c,indf2
  5094                           
  5095                           ; BSR set to: 0
  5096  001084  4A30               	infsnz	sprintf@sp,f,c
  5097  001086  2A31               	incf	sprintf@sp+1,f,c
  5098                           
  5099                           ;doprnt.c: 542: continue;
  5100  001088  D15A               	goto	l3201
  5101  00108A                     l3101:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;doprnt.c: 543: }
  5105                           ;doprnt.c: 546: width = 0;
  5106  00108A  0E00               	movlw	0
  5107  00108C  0100               	movlb	0	; () banked
  5108  00108E  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5109  001090  0E00               	movlw	0
  5110  001092  6F6A               	movwf	sprintf@width& (0+255),b
  5111                           
  5112                           ;doprnt.c: 548: flag = 0;
  5113  001094  0E00               	movlw	0
  5114  001096  0100               	movlb	0	; () banked
  5115  001098  6F69               	movwf	sprintf@flag& (0+255),b
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;doprnt.c: 551: switch(*f) {
  5119                           
  5120                           ;doprnt.c: 550: for(;;) {
  5121  00109A  D004               	goto	l3107
  5122  00109C                     l3103:
  5123                           
  5124                           ;doprnt.c: 580: flag |= 0x04;
  5125  00109C  0100               	movlb	0	; () banked
  5126  00109E  8569               	bsf	sprintf@flag& (0+255),2,b
  5127                           
  5128                           ;doprnt.c: 581: f++;
  5129  0010A0  4A32               	infsnz	sprintf@f,f,c
  5130  0010A2  2A33               	incf	sprintf@f+1,f,c
  5131  0010A4                     l3107:
  5132  0010A4  C032  FFF6         	movff	sprintf@f,tblptrl
  5133  0010A8  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5134  0010AC                     	if	0	;tblptru may be non-zero
  5135  0010AC                     	endif
  5136  0010AC                     	if	0	;tblptru may be non-zero
  5137  0010AC                     	endif
  5138  0010AC  0008               	tblrd		*
  5139  0010AE  50F5               	movf	tablat,w,c
  5140                           
  5141                           ; Switch size 1, requested type "space"
  5142                           ; Number of cases is 1, Range of values is 48 to 48
  5143                           ; switch strategies available:
  5144                           ; Name         Instructions Cycles
  5145                           ; simple_byte            4     3 (average)
  5146                           ;	Chosen strategy is simple_byte
  5147  0010B0  0A30               	xorlw	48	; case 48
  5148  0010B2  B4D8               	btfsc	status,2,c
  5149  0010B4  D7F3               	goto	l3103
  5150                           
  5151                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5152                           
  5153                           ;doprnt.c: 586: }
  5154                           
  5155                           ;doprnt.c: 585: break;
  5156  0010B6  C032  FFF6         	movff	sprintf@f,tblptrl
  5157  0010BA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5158  0010BE                     	if	0	;tblptru may be non-zero
  5159  0010BE                     	endif
  5160  0010BE                     	if	0	;tblptru may be non-zero
  5161  0010BE                     	endif
  5162  0010BE  0008               	tblrd		*
  5163  0010C0  50F5               	movf	tablat,w,c
  5164  0010C2  ECF0  F00E         	call	_isdigit
  5165  0010C6  A0D8               	btfss	status,0,c
  5166  0010C8  D03E               	goto	l3123
  5167                           
  5168                           ;doprnt.c: 598: width = 0;
  5169  0010CA  0E00               	movlw	0
  5170  0010CC  0100               	movlb	0	; () banked
  5171  0010CE  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5172  0010D0  0E00               	movlw	0
  5173  0010D2  6F6A               	movwf	sprintf@width& (0+255),b
  5174  0010D4                     l3113:
  5175                           
  5176                           ;doprnt.c: 600: width *= 10;
  5177  0010D4  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5178  0010D8  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5179  0010DC  0E00               	movlw	0
  5180  0010DE  6E27               	movwf	___wmul@multiplicand+1,c
  5181  0010E0  0E0A               	movlw	10
  5182  0010E2  6E26               	movwf	___wmul@multiplicand,c
  5183  0010E4  ECCC  F00E         	call	___wmul	;wreg free
  5184  0010E8  C024  F06A         	movff	?___wmul,sprintf@width
  5185  0010EC  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5186                           
  5187                           ;doprnt.c: 601: width += *f++ - '0';
  5188  0010F0  0ED0               	movlw	208
  5189  0010F2  0100               	movlb	0	; () banked
  5190  0010F4  6F60               	movwf	??_sprintf& (0+255),b
  5191  0010F6  0EFF               	movlw	255
  5192  0010F8  0100               	movlb	0	; () banked
  5193  0010FA  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5194  0010FC  C032  FFF6         	movff	sprintf@f,tblptrl
  5195  001100  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5196  001104                     	if	0	;tblptru may be non-zero
  5197  001104                     	endif
  5198  001104                     	if	0	;tblptru may be non-zero
  5199  001104                     	endif
  5200  001104  0008               	tblrd		*
  5201  001106  50F5               	movf	tablat,w,c
  5202  001108  0100               	movlb	0	; () banked
  5203  00110A  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5204  00110C  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5205  00110E  0100               	movlb	0	; () banked
  5206  001110  5160               	movf	??_sprintf& (0+255),w,b
  5207  001112  0100               	movlb	0	; () banked
  5208  001114  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5209  001116  0100               	movlb	0	; () banked
  5210  001118  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5211  00111A  0100               	movlb	0	; () banked
  5212  00111C  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5213  00111E  0100               	movlb	0	; () banked
  5214  001120  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5215  001122  0100               	movlb	0	; () banked
  5216  001124  276A               	addwf	sprintf@width& (0+255),f,b
  5217  001126  0100               	movlb	0	; () banked
  5218  001128  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5219  00112A  0100               	movlb	0	; () banked
  5220  00112C  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5221                           
  5222                           ; BSR set to: 0
  5223  00112E  4A32               	infsnz	sprintf@f,f,c
  5224  001130  2A33               	incf	sprintf@f+1,f,c
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5228  001132  C032  FFF6         	movff	sprintf@f,tblptrl
  5229  001136  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5230  00113A                     	if	0	;tblptru may be non-zero
  5231  00113A                     	endif
  5232  00113A                     	if	0	;tblptru may be non-zero
  5233  00113A                     	endif
  5234  00113A  0008               	tblrd		*
  5235  00113C  50F5               	movf	tablat,w,c
  5236  00113E  ECF0  F00E         	call	_isdigit
  5237  001142  B0D8               	btfsc	status,0,c
  5238  001144  D7C7               	goto	l3113
  5239  001146                     l3123:
  5240  001146  C032  FFF6         	movff	sprintf@f,tblptrl
  5241  00114A  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5242  00114E  4A32               	infsnz	sprintf@f,f,c
  5243  001150  2A33               	incf	sprintf@f+1,f,c
  5244  001152                     	if	0	;tblptru may be non-zero
  5245  001152                     	endif
  5246  001152                     	if	0	;tblptru may be non-zero
  5247  001152                     	endif
  5248  001152  0008               	tblrd		*
  5249  001154  CFF5 F06C          	movff	tablat,sprintf@c
  5250  001158  0100               	movlb	0	; () banked
  5251  00115A  516C               	movf	sprintf@c& (0+255),w,b
  5252                           
  5253                           ; Switch size 1, requested type "space"
  5254                           ; Number of cases is 3, Range of values is 0 to 105
  5255                           ; switch strategies available:
  5256                           ; Name         Instructions Cycles
  5257                           ; simple_byte           10     6 (average)
  5258                           ;	Chosen strategy is simple_byte
  5259  00115C  0A00               	xorlw	0	; case 0
  5260  00115E  B4D8               	btfsc	status,2,c
  5261  001160  D0FB               	goto	l3203
  5262  001162  0A64               	xorlw	100	; case 100
  5263  001164  B4D8               	btfsc	status,2,c
  5264  001166  D003               	goto	l3125
  5265  001168  0A0D               	xorlw	13	; case 105
  5266  00116A  A4D8               	btfss	status,2,c
  5267  00116C  D0E8               	goto	l3201
  5268  00116E                     l3125:
  5269                           
  5270                           ;doprnt.c: 1253: {
  5271                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5272  00116E  C064  FFD9         	movff	sprintf@ap,fsr2l
  5273  001172  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5274  001176  CFDE F067          	movff	postinc2,sprintf@val
  5275  00117A  CFDD F068          	movff	postdec2,sprintf@val+1
  5276  00117E  0E02               	movlw	2
  5277  001180  0100               	movlb	0	; () banked
  5278  001182  2764               	addwf	sprintf@ap& (0+255),f,b
  5279  001184  0E00               	movlw	0
  5280  001186  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;doprnt.c: 1261: if((int)val < 0) {
  5284  001188  0100               	movlb	0	; () banked
  5285  00118A  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5286  00118C  D008               	goto	l3135
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;doprnt.c: 1262: flag |= 0x03;
  5290  00118E  0E03               	movlw	3
  5291  001190  0100               	movlb	0	; () banked
  5292  001192  1369               	iorwf	sprintf@flag& (0+255),f,b
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;doprnt.c: 1263: val = -val;
  5296  001194  0100               	movlb	0	; () banked
  5297  001196  6D67               	negf	sprintf@val& (0+255),b
  5298  001198  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5299  00119A  B0D8               	btfsc	status,0,c
  5300  00119C  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5301  00119E                     l3135:
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;doprnt.c: 1264: }
  5305                           ;doprnt.c: 1266: }
  5306                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5307  00119E  0E01               	movlw	1
  5308  0011A0  0100               	movlb	0	; () banked
  5309  0011A2  6F6C               	movwf	sprintf@c& (0+255),b
  5310  0011A4                     l3137:
  5311                           
  5312                           ; BSR set to: 0
  5313  0011A4  0E05               	movlw	5
  5314  0011A6  0100               	movlb	0	; () banked
  5315  0011A8  196C               	xorwf	sprintf@c& (0+255),w,b
  5316  0011AA  B4D8               	btfsc	status,2,c
  5317  0011AC  D016               	goto	l3149
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;doprnt.c: 1306: if(val < dpowers[c])
  5321                           
  5322                           ; BSR set to: 0
  5323                           
  5324                           ; BSR set to: 0
  5325  0011AE  0100               	movlb	0	; () banked
  5326  0011B0  516C               	movf	sprintf@c& (0+255),w,b
  5327  0011B2  0D02               	mullw	2
  5328  0011B4  0E01               	movlw	low _dpowers
  5329  0011B6  24F3               	addwf	prodl,w,c
  5330  0011B8  6EF6               	movwf	tblptrl,c
  5331  0011BA  0E03               	movlw	high _dpowers
  5332  0011BC  20F4               	addwfc	prodh,w,c
  5333  0011BE  6EF7               	movwf	tblptrh,c
  5334  0011C0                     	if	0	;There are less than 3 active tblptr bytes
  5335  0011C0                     	endif
  5336  0011C0  0009               	tblrd		*+
  5337  0011C2  50F5               	movf	tablat,w,c
  5338  0011C4  0100               	movlb	0	; () banked
  5339  0011C6  5D67               	subwf	sprintf@val& (0+255),w,b
  5340  0011C8  0009               	tblrd		*+
  5341  0011CA  50F5               	movf	tablat,w,c
  5342  0011CC  0100               	movlb	0	; () banked
  5343  0011CE  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5344  0011D0  A0D8               	btfss	status,0,c
  5345  0011D2  D003               	goto	l3149
  5346                           
  5347                           ; BSR set to: 0
  5348                           
  5349                           ; BSR set to: 0
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;doprnt.c: 1307: break;
  5353  0011D4  0100               	movlb	0	; () banked
  5354  0011D6  2B6C               	incf	sprintf@c& (0+255),f,b
  5355  0011D8  D7E5               	goto	l3137
  5356  0011DA                     l3149:
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5360  0011DA  0100               	movlb	0	; () banked
  5361  0011DC  516A               	movf	sprintf@width& (0+255),w,b
  5362  0011DE  0100               	movlb	0	; () banked
  5363  0011E0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5364  0011E2  B4D8               	btfsc	status,2,c
  5365  0011E4  D00B               	goto	l3155
  5366                           
  5367                           ; BSR set to: 0
  5368  0011E6  C069  F060         	movff	sprintf@flag,??_sprintf
  5369  0011EA  0E03               	movlw	3
  5370  0011EC  0100               	movlb	0	; () banked
  5371  0011EE  1760               	andwf	??_sprintf& (0+255),f,b
  5372  0011F0  B4D8               	btfsc	status,2,c
  5373  0011F2  D004               	goto	l3155
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;doprnt.c: 1346: width--;
  5377  0011F4  0100               	movlb	0	; () banked
  5378  0011F6  076A               	decf	sprintf@width& (0+255),f,b
  5379  0011F8  A0D8               	btfss	status,0,c
  5380  0011FA  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5381  0011FC                     l3155:
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;doprnt.c: 1381: if(width > c)
  5385  0011FC  0E80               	movlw	128
  5386  0011FE  0100               	movlb	0	; () banked
  5387  001200  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5388  001202  0E7F               	movlw	127
  5389  001204  0100               	movlb	0	; () banked
  5390  001206  6F60               	movwf	??_sprintf& (0+255),b
  5391  001208  0100               	movlb	0	; () banked
  5392  00120A  516A               	movf	sprintf@width& (0+255),w,b
  5393  00120C  0100               	movlb	0	; () banked
  5394  00120E  5D6C               	subwf	sprintf@c& (0+255),w,b
  5395  001210  0100               	movlb	0	; () banked
  5396  001212  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5397  001214  0A80               	xorlw	128
  5398  001216  0100               	movlb	0	; () banked
  5399  001218  5960               	subwfb	??_sprintf& (0+255),w,b
  5400  00121A  B0D8               	btfsc	status,0,c
  5401  00121C  D00B               	goto	l3159
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;doprnt.c: 1382: width -= c;
  5405  00121E  0100               	movlb	0	; () banked
  5406  001220  516C               	movf	sprintf@c& (0+255),w,b
  5407  001222  0100               	movlb	0	; () banked
  5408  001224  5F6A               	subwf	sprintf@width& (0+255),f,b
  5409  001226  0E00               	movlw	0
  5410  001228  0100               	movlb	0	; () banked
  5411  00122A  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5412  00122C  0EFF               	movlw	255
  5413  00122E  0100               	movlb	0	; () banked
  5414  001230  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5415  001232  D005               	goto	l3161
  5416  001234                     l3159:
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;doprnt.c: 1383: else
  5420                           ;doprnt.c: 1384: width = 0;
  5421  001234  0E00               	movlw	0
  5422  001236  0100               	movlb	0	; () banked
  5423  001238  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5424  00123A  0E00               	movlw	0
  5425  00123C  6F6A               	movwf	sprintf@width& (0+255),b
  5426  00123E                     l3161:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 1387: if(flag & 0x04) {
  5430  00123E  0100               	movlb	0	; () banked
  5431  001240  A569               	btfss	sprintf@flag& (0+255),2,b
  5432  001242  D022               	goto	l3177
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;doprnt.c: 1392: if(flag & 0x03)
  5436  001244  C069  F060         	movff	sprintf@flag,??_sprintf
  5437  001248  0E03               	movlw	3
  5438  00124A  0100               	movlb	0	; () banked
  5439  00124C  1760               	andwf	??_sprintf& (0+255),f,b
  5440  00124E  B4D8               	btfsc	status,2,c
  5441  001250  D008               	goto	l3169
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5445  001252  C030  FFD9         	movff	sprintf@sp,fsr2l
  5446  001256  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5447  00125A  0E2D               	movlw	45
  5448  00125C  6EDF               	movwf	indf2,c
  5449                           
  5450                           ; BSR set to: 0
  5451  00125E  4A30               	infsnz	sprintf@sp,f,c
  5452  001260  2A31               	incf	sprintf@sp+1,f,c
  5453  001262                     l3169:
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;doprnt.c: 1415: if(width)
  5457  001262  0100               	movlb	0	; () banked
  5458  001264  516A               	movf	sprintf@width& (0+255),w,b
  5459  001266  0100               	movlb	0	; () banked
  5460  001268  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5461  00126A  B4D8               	btfsc	status,2,c
  5462  00126C  D034               	goto	l3191
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5466                           
  5467                           ; BSR set to: 0
  5468                           
  5469                           ;doprnt.c: 1416: do
  5470  00126E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5471  001272  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5472  001276  0E30               	movlw	48
  5473  001278  6EDF               	movwf	indf2,c
  5474                           
  5475                           ; BSR set to: 0
  5476  00127A  4A30               	infsnz	sprintf@sp,f,c
  5477  00127C  2A31               	incf	sprintf@sp+1,f,c
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;doprnt.c: 1418: while(--width);
  5481  00127E  0100               	movlb	0	; () banked
  5482  001280  076A               	decf	sprintf@width& (0+255),f,b
  5483  001282  A0D8               	btfss	status,0,c
  5484  001284  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5485  001286  D7ED               	goto	l3169
  5486  001288                     l3177:
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;doprnt.c: 1422: {
  5490                           ;doprnt.c: 1424: if(width
  5491                           ;doprnt.c: 1428: )
  5492  001288  0100               	movlb	0	; () banked
  5493  00128A  516A               	movf	sprintf@width& (0+255),w,b
  5494  00128C  0100               	movlb	0	; () banked
  5495  00128E  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5496  001290  B4D8               	btfsc	status,2,c
  5497  001292  D012               	goto	l3185
  5498  001294                     l3179:
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5502  001294  C030  FFD9         	movff	sprintf@sp,fsr2l
  5503  001298  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5504  00129C  0E20               	movlw	32
  5505  00129E  6EDF               	movwf	indf2,c
  5506                           
  5507                           ; BSR set to: 0
  5508  0012A0  4A30               	infsnz	sprintf@sp,f,c
  5509  0012A2  2A31               	incf	sprintf@sp+1,f,c
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;doprnt.c: 1431: while(--width);
  5513  0012A4  0100               	movlb	0	; () banked
  5514  0012A6  076A               	decf	sprintf@width& (0+255),f,b
  5515  0012A8  A0D8               	btfss	status,0,c
  5516  0012AA  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5517  0012AC  0100               	movlb	0	; () banked
  5518  0012AE  516A               	movf	sprintf@width& (0+255),w,b
  5519  0012B0  0100               	movlb	0	; () banked
  5520  0012B2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5521  0012B4  A4D8               	btfss	status,2,c
  5522  0012B6  D7EE               	goto	l3179
  5523  0012B8                     l3185:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;doprnt.c: 1438: if(flag & 0x03)
  5527  0012B8  C069  F060         	movff	sprintf@flag,??_sprintf
  5528  0012BC  0E03               	movlw	3
  5529  0012BE  0100               	movlb	0	; () banked
  5530  0012C0  1760               	andwf	??_sprintf& (0+255),f,b
  5531  0012C2  B4D8               	btfsc	status,2,c
  5532  0012C4  D008               	goto	l3191
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5536  0012C6  C030  FFD9         	movff	sprintf@sp,fsr2l
  5537  0012CA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5538  0012CE  0E2D               	movlw	45
  5539  0012D0  6EDF               	movwf	indf2,c
  5540                           
  5541                           ; BSR set to: 0
  5542  0012D2  4A30               	infsnz	sprintf@sp,f,c
  5543  0012D4  2A31               	incf	sprintf@sp+1,f,c
  5544  0012D6                     l3191:
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;doprnt.c: 1469: }
  5548                           ;doprnt.c: 1472: prec = c;
  5549  0012D6  C06C  F066         	movff	sprintf@c,sprintf@prec
  5550                           
  5551                           ;doprnt.c: 1474: while(prec--) {
  5552  0012DA  D02B               	goto	l3199
  5553  0012DC                     l3193:
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;doprnt.c: 1478: {
  5557                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5558  0012DC  0100               	movlb	0	; () banked
  5559  0012DE  5166               	movf	sprintf@prec& (0+255),w,b
  5560  0012E0  0D02               	mullw	2
  5561  0012E2  0E01               	movlw	low _dpowers
  5562  0012E4  24F3               	addwf	prodl,w,c
  5563  0012E6  6EF6               	movwf	tblptrl,c
  5564  0012E8  0E03               	movlw	high _dpowers
  5565  0012EA  20F4               	addwfc	prodh,w,c
  5566  0012EC  6EF7               	movwf	tblptrh,c
  5567  0012EE                     	if	0	;There are less than 3 active tblptr bytes
  5568  0012EE                     	endif
  5569  0012EE  0009               	tblrd		*+
  5570  0012F0  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5571  0012F4  000A               	tblrd		*-
  5572  0012F6  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5573  0012FA  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5574  0012FE  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5575  001302  EC72  F00D         	call	___lwdiv	;wreg free
  5576  001306  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5577  00130A  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5578  00130E  0E00               	movlw	0
  5579  001310  6E2E               	movwf	___lwmod@divisor+1,c
  5580  001312  0E0A               	movlw	10
  5581  001314  6E2D               	movwf	___lwmod@divisor,c
  5582  001316  EC9B  F00D         	call	___lwmod	;wreg free
  5583  00131A  502B               	movf	?___lwmod,w,c
  5584  00131C  0F30               	addlw	48
  5585  00131E  0100               	movlb	0	; () banked
  5586  001320  6F6C               	movwf	sprintf@c& (0+255),b
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;doprnt.c: 1523: }
  5590                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5591  001322  C030  FFD9         	movff	sprintf@sp,fsr2l
  5592  001326  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5593  00132A  C06C  FFDF         	movff	sprintf@c,indf2
  5594                           
  5595                           ; BSR set to: 0
  5596  00132E  4A30               	infsnz	sprintf@sp,f,c
  5597  001330  2A31               	incf	sprintf@sp+1,f,c
  5598  001332                     l3199:
  5599                           
  5600                           ; BSR set to: 0
  5601  001332  0100               	movlb	0	; () banked
  5602  001334  0766               	decf	sprintf@prec& (0+255),f,b
  5603  001336  0100               	movlb	0	; () banked
  5604  001338  2966               	incf	sprintf@prec& (0+255),w,b
  5605  00133A  A4D8               	btfss	status,2,c
  5606  00133C  D7CF               	goto	l3193
  5607  00133E                     l3201:
  5608  00133E  C032  FFF6         	movff	sprintf@f,tblptrl
  5609  001342  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5610  001346  4A32               	infsnz	sprintf@f,f,c
  5611  001348  2A33               	incf	sprintf@f+1,f,c
  5612  00134A                     	if	0	;tblptru may be non-zero
  5613  00134A                     	endif
  5614  00134A                     	if	0	;tblptru may be non-zero
  5615  00134A                     	endif
  5616  00134A  0008               	tblrd		*
  5617  00134C  CFF5 F06C          	movff	tablat,sprintf@c
  5618  001350  0100               	movlb	0	; () banked
  5619  001352  516C               	movf	sprintf@c& (0+255),w,b
  5620  001354  A4D8               	btfss	status,2,c
  5621  001356  D68B               	goto	l3095
  5622  001358                     l3203:
  5623                           
  5624                           ;doprnt.c: 1538: *sp = 0;
  5625  001358  C030  FFD9         	movff	sprintf@sp,fsr2l
  5626  00135C  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5627  001360  0E00               	movlw	0
  5628  001362  6EDF               	movwf	indf2,c
  5629  001364  0012               	return	
  5630  001366                     __end_of_sprintf:
  5631                           	opt stack 0
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           intcon	equ	0xFF2
  5639                           postinc0	equ	0xFEE
  5640                           wreg	equ	0xFE8
  5641                           indf1	equ	0xFE7
  5642                           plusw1	equ	0xFE3
  5643                           fsr1h	equ	0xFE2
  5644                           fsr1l	equ	0xFE1
  5645                           indf2	equ	0xFDF
  5646                           postinc2	equ	0xFDE
  5647                           postdec2	equ	0xFDD
  5648                           plusw2	equ	0xFDB
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _isdigit *****************
  5654 ;; Defined at:
  5655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  c               1    wreg     unsigned char 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  c               1   37[COMRAM] unsigned char 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;		None               void
  5662 ;; Registers used:
  5663 ;;		wreg, status,2, status,0
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5669 ;;      Params:         0       0       0       0
  5670 ;;      Locals:         2       0       0       0
  5671 ;;      Temps:          1       0       0       0
  5672 ;;      Totals:         3       0       0       0
  5673 ;;Total ram usage:        3 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    3
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_sprintf
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text19
  5684  001DE0                     __ptext19:
  5685                           	opt stack 0
  5686  001DE0                     _isdigit:
  5687                           	opt stack 26
  5688                           
  5689                           ;incstack = 0
  5690                           ;isdigit@c stored from wreg
  5691  001DE0  6E26               	movwf	isdigit@c,c
  5692  001DE2  0E00               	movlw	0
  5693  001DE4  6E25               	movwf	_isdigit$2086,c
  5694  001DE6  0E3A               	movlw	58
  5695  001DE8  6026               	cpfslt	isdigit@c,c
  5696  001DEA  D005               	goto	l2165
  5697  001DEC  0E2F               	movlw	47
  5698  001DEE  6426               	cpfsgt	isdigit@c,c
  5699  001DF0  D002               	goto	l2165
  5700  001DF2  0E01               	movlw	1
  5701  001DF4  6E25               	movwf	_isdigit$2086,c
  5702  001DF6                     l2165:
  5703  001DF6  C025  F024         	movff	_isdigit$2086,??_isdigit
  5704  001DFA  3024               	rrcf	??_isdigit,w,c
  5705  001DFC  0012               	return	
  5706  001DFE                     __end_of_isdigit:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           intcon	equ	0xFF2
  5715                           postinc0	equ	0xFEE
  5716                           wreg	equ	0xFE8
  5717                           indf1	equ	0xFE7
  5718                           plusw1	equ	0xFE3
  5719                           fsr1h	equ	0xFE2
  5720                           fsr1l	equ	0xFE1
  5721                           indf2	equ	0xFDF
  5722                           postinc2	equ	0xFDE
  5723                           postdec2	equ	0xFDD
  5724                           plusw2	equ	0xFDB
  5725                           fsr2h	equ	0xFDA
  5726                           fsr2l	equ	0xFD9
  5727                           status	equ	0xFD8
  5728                           
  5729 ;; *************** function ___wmul *****************
  5730 ;; Defined at:
  5731 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  multiplier      2   35[COMRAM] unsigned int 
  5734 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;  product         2   39[COMRAM] unsigned int 
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  2   35[COMRAM] unsigned int 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0, prodl, prodh
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5746 ;;      Params:         4       0       0       0
  5747 ;;      Locals:         2       0       0       0
  5748 ;;      Temps:          0       0       0       0
  5749 ;;      Totals:         6       0       0       0
  5750 ;;Total ram usage:        6 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    3
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		_setMotorPWM
  5757 ;;		_sprintf
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text20
  5762  001D98                     __ptext20:
  5763                           	opt stack 0
  5764  001D98                     ___wmul:
  5765                           	opt stack 24
  5766                           
  5767                           ;incstack = 0
  5768  001D98  5024               	movf	___wmul@multiplier,w,c
  5769  001D9A  0226               	mulwf	___wmul@multiplicand,c
  5770  001D9C  CFF3 F028          	movff	prodl,___wmul@product
  5771  001DA0  CFF4 F029          	movff	prodh,___wmul@product+1
  5772  001DA4  5024               	movf	___wmul@multiplier,w,c
  5773  001DA6  0227               	mulwf	___wmul@multiplicand+1,c
  5774  001DA8  50F3               	movf	prodl,w,c
  5775  001DAA  2629               	addwf	___wmul@product+1,f,c
  5776  001DAC  5025               	movf	___wmul@multiplier+1,w,c
  5777  001DAE  0226               	mulwf	___wmul@multiplicand,c
  5778  001DB0  50F3               	movf	prodl,w,c
  5779  001DB2  2629               	addwf	___wmul@product+1,f,c
  5780  001DB4  C028  F024         	movff	___wmul@product,?___wmul
  5781  001DB8  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5782  001DBC  0012               	return	
  5783  001DBE                     __end_of___wmul:
  5784                           	opt stack 0
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           prodh	equ	0xFF4
  5790                           prodl	equ	0xFF3
  5791                           intcon	equ	0xFF2
  5792                           postinc0	equ	0xFEE
  5793                           wreg	equ	0xFE8
  5794                           indf1	equ	0xFE7
  5795                           plusw1	equ	0xFE3
  5796                           fsr1h	equ	0xFE2
  5797                           fsr1l	equ	0xFE1
  5798                           indf2	equ	0xFDF
  5799                           postinc2	equ	0xFDE
  5800                           postdec2	equ	0xFDD
  5801                           plusw2	equ	0xFDB
  5802                           fsr2h	equ	0xFDA
  5803                           fsr2l	equ	0xFD9
  5804                           status	equ	0xFD8
  5805                           
  5806 ;; *************** function ___lwmod *****************
  5807 ;; Defined at:
  5808 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  dividend        2   42[COMRAM] unsigned int 
  5811 ;;  divisor         2   44[COMRAM] unsigned int 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  counter         1   46[COMRAM] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  2   42[COMRAM] unsigned int 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5823 ;;      Params:         4       0       0       0
  5824 ;;      Locals:         1       0       0       0
  5825 ;;      Temps:          0       0       0       0
  5826 ;;      Totals:         5       0       0       0
  5827 ;;Total ram usage:        5 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    3
  5830 ;; This function calls:
  5831 ;;		Nothing
  5832 ;; This function is called by:
  5833 ;;		_sprintf
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           	psect	text21
  5838  001B36                     __ptext21:
  5839                           	opt stack 0
  5840  001B36                     ___lwmod:
  5841                           	opt stack 26
  5842                           
  5843                           ;incstack = 0
  5844  001B36  502D               	movf	___lwmod@divisor,w,c
  5845  001B38  102E               	iorwf	___lwmod@divisor+1,w,c
  5846  001B3A  B4D8               	btfsc	status,2,c
  5847  001B3C  D018               	goto	l910
  5848  001B3E  0E01               	movlw	1
  5849  001B40  6E2F               	movwf	___lwmod@counter,c
  5850  001B42  D004               	goto	l2197
  5851  001B44                     l2195:
  5852  001B44  90D8               	bcf	status,0,c
  5853  001B46  362D               	rlcf	___lwmod@divisor,f,c
  5854  001B48  362E               	rlcf	___lwmod@divisor+1,f,c
  5855  001B4A  2A2F               	incf	___lwmod@counter,f,c
  5856  001B4C                     l2197:
  5857  001B4C  AE2E               	btfss	___lwmod@divisor+1,7,c
  5858  001B4E  D7FA               	goto	l2195
  5859  001B50                     l2199:
  5860  001B50  502D               	movf	___lwmod@divisor,w,c
  5861  001B52  5C2B               	subwf	___lwmod@dividend,w,c
  5862  001B54  502E               	movf	___lwmod@divisor+1,w,c
  5863  001B56  582C               	subwfb	___lwmod@dividend+1,w,c
  5864  001B58  A0D8               	btfss	status,0,c
  5865  001B5A  D004               	goto	l2203
  5866  001B5C  502D               	movf	___lwmod@divisor,w,c
  5867  001B5E  5E2B               	subwf	___lwmod@dividend,f,c
  5868  001B60  502E               	movf	___lwmod@divisor+1,w,c
  5869  001B62  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5870  001B64                     l2203:
  5871  001B64  90D8               	bcf	status,0,c
  5872  001B66  322E               	rrcf	___lwmod@divisor+1,f,c
  5873  001B68  322D               	rrcf	___lwmod@divisor,f,c
  5874  001B6A  2E2F               	decfsz	___lwmod@counter,f,c
  5875  001B6C  D7F1               	goto	l2199
  5876  001B6E                     l910:
  5877  001B6E  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5878  001B72  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5879  001B76  0012               	return		;funcret
  5880  001B78                     __end_of___lwmod:
  5881                           	opt stack 0
  5882                           tblptru	equ	0xFF8
  5883                           tblptrh	equ	0xFF7
  5884                           tblptrl	equ	0xFF6
  5885                           tablat	equ	0xFF5
  5886                           prodh	equ	0xFF4
  5887                           prodl	equ	0xFF3
  5888                           intcon	equ	0xFF2
  5889                           postinc0	equ	0xFEE
  5890                           wreg	equ	0xFE8
  5891                           indf1	equ	0xFE7
  5892                           plusw1	equ	0xFE3
  5893                           fsr1h	equ	0xFE2
  5894                           fsr1l	equ	0xFE1
  5895                           indf2	equ	0xFDF
  5896                           postinc2	equ	0xFDE
  5897                           postdec2	equ	0xFDD
  5898                           plusw2	equ	0xFDB
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function ___lwdiv *****************
  5904 ;; Defined at:
  5905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  dividend        2   35[COMRAM] unsigned int 
  5908 ;;  divisor         2   37[COMRAM] unsigned int 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;  quotient        2   39[COMRAM] unsigned int 
  5911 ;;  counter         1   41[COMRAM] unsigned char 
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  2   35[COMRAM] unsigned int 
  5914 ;; Registers used:
  5915 ;;		wreg, status,2, status,0
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5921 ;;      Params:         4       0       0       0
  5922 ;;      Locals:         3       0       0       0
  5923 ;;      Temps:          0       0       0       0
  5924 ;;      Totals:         7       0       0       0
  5925 ;;Total ram usage:        7 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    3
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		_sprintf
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text22
  5936  001AE4                     __ptext22:
  5937                           	opt stack 0
  5938  001AE4                     ___lwdiv:
  5939                           	opt stack 26
  5940                           
  5941                           ;incstack = 0
  5942  001AE4  0E00               	movlw	0
  5943  001AE6  6E29               	movwf	___lwdiv@quotient+1,c
  5944  001AE8  0E00               	movlw	0
  5945  001AEA  6E28               	movwf	___lwdiv@quotient,c
  5946  001AEC  5026               	movf	___lwdiv@divisor,w,c
  5947  001AEE  1027               	iorwf	___lwdiv@divisor+1,w,c
  5948  001AF0  B4D8               	btfsc	status,2,c
  5949  001AF2  D01C               	goto	l900
  5950  001AF4  0E01               	movlw	1
  5951  001AF6  6E2A               	movwf	___lwdiv@counter,c
  5952  001AF8  D004               	goto	l2177
  5953  001AFA                     l2175:
  5954  001AFA  90D8               	bcf	status,0,c
  5955  001AFC  3626               	rlcf	___lwdiv@divisor,f,c
  5956  001AFE  3627               	rlcf	___lwdiv@divisor+1,f,c
  5957  001B00  2A2A               	incf	___lwdiv@counter,f,c
  5958  001B02                     l2177:
  5959  001B02  AE27               	btfss	___lwdiv@divisor+1,7,c
  5960  001B04  D7FA               	goto	l2175
  5961  001B06                     l2179:
  5962  001B06  90D8               	bcf	status,0,c
  5963  001B08  3628               	rlcf	___lwdiv@quotient,f,c
  5964  001B0A  3629               	rlcf	___lwdiv@quotient+1,f,c
  5965  001B0C  5026               	movf	___lwdiv@divisor,w,c
  5966  001B0E  5C24               	subwf	___lwdiv@dividend,w,c
  5967  001B10  5027               	movf	___lwdiv@divisor+1,w,c
  5968  001B12  5825               	subwfb	___lwdiv@dividend+1,w,c
  5969  001B14  A0D8               	btfss	status,0,c
  5970  001B16  D005               	goto	l2187
  5971  001B18  5026               	movf	___lwdiv@divisor,w,c
  5972  001B1A  5E24               	subwf	___lwdiv@dividend,f,c
  5973  001B1C  5027               	movf	___lwdiv@divisor+1,w,c
  5974  001B1E  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5975  001B20  8028               	bsf	___lwdiv@quotient,0,c
  5976  001B22                     l2187:
  5977  001B22  90D8               	bcf	status,0,c
  5978  001B24  3227               	rrcf	___lwdiv@divisor+1,f,c
  5979  001B26  3226               	rrcf	___lwdiv@divisor,f,c
  5980  001B28  2E2A               	decfsz	___lwdiv@counter,f,c
  5981  001B2A  D7ED               	goto	l2179
  5982  001B2C                     l900:
  5983  001B2C  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5984  001B30  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5985  001B34  0012               	return		;funcret
  5986  001B36                     __end_of___lwdiv:
  5987                           	opt stack 0
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           postinc0	equ	0xFEE
  5996                           wreg	equ	0xFE8
  5997                           indf1	equ	0xFE7
  5998                           plusw1	equ	0xFE3
  5999                           fsr1h	equ	0xFE2
  6000                           fsr1l	equ	0xFE1
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           plusw2	equ	0xFDB
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _grabRightIR *****************
  6010 ;; Defined at:
  6011 ;;		line 74 in file "IR_Reading.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6016 ;;  i               1   42[COMRAM] unsigned char 
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  2   35[COMRAM] unsigned int 
  6019 ;; Registers used:
  6020 ;;		wreg, status,2, status,0
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6026 ;;      Params:         2       0       0       0
  6027 ;;      Locals:         3       0       0       0
  6028 ;;      Temps:          3       0       0       0
  6029 ;;      Totals:         8       0       0       0
  6030 ;;Total ram usage:        8 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    3
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_ScanIR
  6037 ;;		_ScanWithRange
  6038 ;;		_main
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text23
  6043  00194A                     __ptext23:
  6044                           	opt stack 0
  6045  00194A                     _grabRightIR:
  6046                           	opt stack 27
  6047                           
  6048                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6049                           
  6050                           ;incstack = 0
  6051  00194A  0E00               	movlw	0
  6052  00194C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6053  00194E  0E00               	movlw	0
  6054  001950  6E29               	movwf	grabRightIR@IR_signal,c
  6055                           
  6056                           ;IR_Reading.c: 77: unsigned char i=0;
  6057  001952  0E00               	movlw	0
  6058  001954  6E2B               	movwf	grabRightIR@i,c
  6059                           
  6060                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6061  001956  0E00               	movlw	0
  6062  001958  6E2B               	movwf	grabRightIR@i,c
  6063  00195A                     l2239:
  6064  00195A  0E03               	movlw	3
  6065  00195C  642B               	cpfsgt	grabRightIR@i,c
  6066  00195E  D001               	goto	l2243
  6067  001960  D01E               	goto	l2249
  6068  001962                     l2243:
  6069                           
  6070                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6071  001962  5069               	movf	3945,w,c	;volatile
  6072  001964  6E26               	movwf	??_grabRightIR& (0+255),c
  6073  001966  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6074  001968  0E07               	movlw	7
  6075  00196A                     u1535:
  6076  00196A  90D8               	bcf	status,0,c
  6077  00196C  3626               	rlcf	??_grabRightIR,f,c
  6078  00196E  3627               	rlcf	??_grabRightIR+1,f,c
  6079  001970  2EE8               	decfsz	wreg,f,c
  6080  001972  D7FB               	goto	u1535
  6081  001974  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6082  001978  90D8               	bcf	status,0,c
  6083  00197A  3228               	rrcf	??_grabRightIR+2,f,c
  6084  00197C  5028               	movf	??_grabRightIR+2,w,c
  6085  00197E  1226               	iorwf	??_grabRightIR,f,c
  6086  001980  0E00               	movlw	0
  6087  001982  1227               	iorwf	??_grabRightIR+1,f,c
  6088  001984  5026               	movf	??_grabRightIR,w,c
  6089  001986  2629               	addwf	grabRightIR@IR_signal,f,c
  6090  001988  5027               	movf	??_grabRightIR+1,w,c
  6091  00198A  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6092                           
  6093                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6094  00198C  0E82               	movlw	130
  6095  00198E  6E26               	movwf	??_grabRightIR& (0+255),c
  6096  001990  0EDE               	movlw	222
  6097  001992                     u3267:
  6098  001992  2EE8               	decfsz	wreg,f,c
  6099  001994  D7FE               	goto	u3267
  6100  001996  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6101  001998  D7FC               	goto	u3267
  6102  00199A  2A2B               	incf	grabRightIR@i,f,c
  6103  00199C  D7DE               	goto	l2239
  6104  00199E                     l2249:
  6105                           
  6106                           ;IR_Reading.c: 83: }
  6107                           ;IR_Reading.c: 85: return IR_signal>>2;
  6108  00199E  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6109  0019A2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6110  0019A6  90D8               	bcf	status,0,c
  6111  0019A8  3227               	rrcf	??_grabRightIR+1,f,c
  6112  0019AA  3226               	rrcf	??_grabRightIR,f,c
  6113  0019AC  90D8               	bcf	status,0,c
  6114  0019AE  3227               	rrcf	??_grabRightIR+1,f,c
  6115  0019B0  3226               	rrcf	??_grabRightIR,f,c
  6116  0019B2  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6117  0019B6  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6118  0019BA  0012               	return	
  6119  0019BC                     __end_of_grabRightIR:
  6120                           	opt stack 0
  6121                           tblptru	equ	0xFF8
  6122                           tblptrh	equ	0xFF7
  6123                           tblptrl	equ	0xFF6
  6124                           tablat	equ	0xFF5
  6125                           prodh	equ	0xFF4
  6126                           prodl	equ	0xFF3
  6127                           intcon	equ	0xFF2
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           indf1	equ	0xFE7
  6131                           plusw1	equ	0xFE3
  6132                           fsr1h	equ	0xFE2
  6133                           fsr1l	equ	0xFE1
  6134                           indf2	equ	0xFDF
  6135                           postinc2	equ	0xFDE
  6136                           postdec2	equ	0xFDD
  6137                           plusw2	equ	0xFDB
  6138                           fsr2h	equ	0xFDA
  6139                           fsr2l	equ	0xFD9
  6140                           status	equ	0xFD8
  6141                           
  6142 ;; *************** function _grabLeftIR *****************
  6143 ;; Defined at:
  6144 ;;		line 90 in file "IR_Reading.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;		None
  6147 ;; Auto vars:     Size  Location     Type
  6148 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6149 ;;  i               1   42[COMRAM] unsigned char 
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  2   35[COMRAM] unsigned int 
  6152 ;; Registers used:
  6153 ;;		wreg, status,2, status,0
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6159 ;;      Params:         2       0       0       0
  6160 ;;      Locals:         3       0       0       0
  6161 ;;      Temps:          3       0       0       0
  6162 ;;      Totals:         8       0       0       0
  6163 ;;Total ram usage:        8 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    3
  6166 ;; This function calls:
  6167 ;;		Nothing
  6168 ;; This function is called by:
  6169 ;;		_ScanIR
  6170 ;;		_ScanWithRange
  6171 ;;		_main
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           	psect	text24
  6176  0019BC                     __ptext24:
  6177                           	opt stack 0
  6178  0019BC                     _grabLeftIR:
  6179                           	opt stack 27
  6180                           
  6181                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6182                           
  6183                           ;incstack = 0
  6184  0019BC  0E00               	movlw	0
  6185  0019BE  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6186  0019C0  0E00               	movlw	0
  6187  0019C2  6E29               	movwf	grabLeftIR@IR_signal,c
  6188                           
  6189                           ;IR_Reading.c: 93: unsigned char i=0;
  6190  0019C4  0E00               	movlw	0
  6191  0019C6  6E2B               	movwf	grabLeftIR@i,c
  6192                           
  6193                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6194  0019C8  0E00               	movlw	0
  6195  0019CA  6E2B               	movwf	grabLeftIR@i,c
  6196  0019CC                     l2255:
  6197  0019CC  0E03               	movlw	3
  6198  0019CE  642B               	cpfsgt	grabLeftIR@i,c
  6199  0019D0  D001               	goto	l2259
  6200  0019D2  D01E               	goto	l2265
  6201  0019D4                     l2259:
  6202                           
  6203                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6204  0019D4  5067               	movf	3943,w,c	;volatile
  6205  0019D6  6E26               	movwf	??_grabLeftIR& (0+255),c
  6206  0019D8  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6207  0019DA  0E07               	movlw	7
  6208  0019DC                     u1565:
  6209  0019DC  90D8               	bcf	status,0,c
  6210  0019DE  3626               	rlcf	??_grabLeftIR,f,c
  6211  0019E0  3627               	rlcf	??_grabLeftIR+1,f,c
  6212  0019E2  2EE8               	decfsz	wreg,f,c
  6213  0019E4  D7FB               	goto	u1565
  6214  0019E6  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6215  0019EA  90D8               	bcf	status,0,c
  6216  0019EC  3228               	rrcf	??_grabLeftIR+2,f,c
  6217  0019EE  5028               	movf	??_grabLeftIR+2,w,c
  6218  0019F0  1226               	iorwf	??_grabLeftIR,f,c
  6219  0019F2  0E00               	movlw	0
  6220  0019F4  1227               	iorwf	??_grabLeftIR+1,f,c
  6221  0019F6  5026               	movf	??_grabLeftIR,w,c
  6222  0019F8  2629               	addwf	grabLeftIR@IR_signal,f,c
  6223  0019FA  5027               	movf	??_grabLeftIR+1,w,c
  6224  0019FC  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6225                           
  6226                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6227  0019FE  0E82               	movlw	130
  6228  001A00  6E26               	movwf	??_grabLeftIR& (0+255),c
  6229  001A02  0EDE               	movlw	222
  6230  001A04                     u3277:
  6231  001A04  2EE8               	decfsz	wreg,f,c
  6232  001A06  D7FE               	goto	u3277
  6233  001A08  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6234  001A0A  D7FC               	goto	u3277
  6235  001A0C  2A2B               	incf	grabLeftIR@i,f,c
  6236  001A0E  D7DE               	goto	l2255
  6237  001A10                     l2265:
  6238                           
  6239                           ;IR_Reading.c: 99: }
  6240                           ;IR_Reading.c: 101: return IR_signal>>2;
  6241  001A10  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6242  001A14  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6243  001A18  90D8               	bcf	status,0,c
  6244  001A1A  3227               	rrcf	??_grabLeftIR+1,f,c
  6245  001A1C  3226               	rrcf	??_grabLeftIR,f,c
  6246  001A1E  90D8               	bcf	status,0,c
  6247  001A20  3227               	rrcf	??_grabLeftIR+1,f,c
  6248  001A22  3226               	rrcf	??_grabLeftIR,f,c
  6249  001A24  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6250  001A28  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6251  001A2C  0012               	return	
  6252  001A2E                     __end_of_grabLeftIR:
  6253                           	opt stack 0
  6254                           tblptru	equ	0xFF8
  6255                           tblptrh	equ	0xFF7
  6256                           tblptrl	equ	0xFF6
  6257                           tablat	equ	0xFF5
  6258                           prodh	equ	0xFF4
  6259                           prodl	equ	0xFF3
  6260                           intcon	equ	0xFF2
  6261                           postinc0	equ	0xFEE
  6262                           wreg	equ	0xFE8
  6263                           indf1	equ	0xFE7
  6264                           plusw1	equ	0xFE3
  6265                           fsr1h	equ	0xFE2
  6266                           fsr1l	equ	0xFE1
  6267                           indf2	equ	0xFDF
  6268                           postinc2	equ	0xFDE
  6269                           postdec2	equ	0xFDD
  6270                           plusw2	equ	0xFDB
  6271                           fsr2h	equ	0xFDA
  6272                           fsr2l	equ	0xFD9
  6273                           status	equ	0xFD8
  6274                           
  6275 ;; *************** function _SetLine *****************
  6276 ;; Defined at:
  6277 ;;		line 74 in file "LCD.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;  line            1    wreg     unsigned char 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  line            1   41[COMRAM] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;		None               void
  6284 ;; Registers used:
  6285 ;;		wreg, status,2, status,0, cstack
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6291 ;;      Params:         0       0       0       0
  6292 ;;      Locals:         1       0       0       0
  6293 ;;      Temps:          0       0       0       0
  6294 ;;      Totals:         1       0       0       0
  6295 ;;Total ram usage:        1 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    6
  6298 ;; This function calls:
  6299 ;;		_SendLCD
  6300 ;; This function is called by:
  6301 ;;		_ScanIR
  6302 ;;		_ScanWithRange
  6303 ;;		_main
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           	psect	text25
  6308  001D12                     __ptext25:
  6309                           	opt stack 0
  6310  001D12                     _SetLine:
  6311                           	opt stack 24
  6312                           
  6313                           ;incstack = 0
  6314                           ;SetLine@line stored from wreg
  6315  001D12  6E2A               	movwf	SetLine@line,c
  6316                           
  6317                           ;LCD.c: 75: if (line==1) {
  6318  001D14  042A               	decf	SetLine@line,w,c
  6319  001D16  A4D8               	btfss	status,2,c
  6320  001D18  D006               	goto	l2273
  6321                           
  6322                           ;LCD.c: 76: SendLCD(0x80,0);
  6323  001D1A  0E00               	movlw	0
  6324  001D1C  6E28               	movwf	SendLCD@type,c
  6325  001D1E  0E80               	movlw	128
  6326  001D20  ECA1  F00E         	call	_SendLCD
  6327                           
  6328                           ;LCD.c: 77: } else if (line==2) {
  6329  001D24  D009               	goto	l2277
  6330  001D26                     l2273:
  6331  001D26  0E02               	movlw	2
  6332  001D28  182A               	xorwf	SetLine@line,w,c
  6333  001D2A  A4D8               	btfss	status,2,c
  6334  001D2C  D005               	goto	l2277
  6335                           
  6336                           ;LCD.c: 78: SendLCD(0xC0,0);
  6337  001D2E  0E00               	movlw	0
  6338  001D30  6E28               	movwf	SendLCD@type,c
  6339  001D32  0EC0               	movlw	192
  6340  001D34  ECA1  F00E         	call	_SendLCD
  6341  001D38                     l2277:
  6342                           
  6343                           ;LCD.c: 79: }
  6344                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6345  001D38  0E21               	movlw	33
  6346  001D3A                     u3287:
  6347  001D3A  2EE8               	decfsz	wreg,f,c
  6348  001D3C  D7FE               	goto	u3287
  6349  001D3E  F000               	nop	
  6350  001D40  0012               	return		;funcret
  6351  001D42                     __end_of_SetLine:
  6352                           	opt stack 0
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           postinc0	equ	0xFEE
  6361                           wreg	equ	0xFE8
  6362                           indf1	equ	0xFE7
  6363                           plusw1	equ	0xFE3
  6364                           fsr1h	equ	0xFE2
  6365                           fsr1l	equ	0xFE1
  6366                           indf2	equ	0xFDF
  6367                           postinc2	equ	0xFDE
  6368                           postdec2	equ	0xFDD
  6369                           plusw2	equ	0xFDB
  6370                           fsr2h	equ	0xFDA
  6371                           fsr2l	equ	0xFD9
  6372                           status	equ	0xFD8
  6373                           
  6374 ;; *************** function _LCD_String *****************
  6375 ;; Defined at:
  6376 ;;		line 83 in file "LCD.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  string          2   41[COMRAM] PTR unsigned char 
  6379 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6380 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6381 ;;		 -> STR_1(12), 
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;		None
  6384 ;; Return value:  Size  Location     Type
  6385 ;;		None               void
  6386 ;; Registers used:
  6387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6393 ;;      Params:         2       0       0       0
  6394 ;;      Locals:         0       0       0       0
  6395 ;;      Temps:          0       0       0       0
  6396 ;;      Totals:         2       0       0       0
  6397 ;;Total ram usage:        2 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    6
  6400 ;; This function calls:
  6401 ;;		_SendLCD
  6402 ;; This function is called by:
  6403 ;;		_ScanIR
  6404 ;;		_ScanWithRange
  6405 ;;		_main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           	psect	text26
  6410  001A2E                     __ptext26:
  6411                           	opt stack 0
  6412  001A2E                     _LCD_String:
  6413                           	opt stack 23
  6414                           
  6415                           ;LCD.c: 85: while(*string != 0){
  6416                           
  6417                           ;incstack = 0
  6418  001A2E  D01A               	goto	l2287
  6419  001A30                     l2281:
  6420                           
  6421                           ;LCD.c: 88: SendLCD(*string++,1);
  6422  001A30  0E01               	movlw	1
  6423  001A32  6E28               	movwf	SendLCD@type,c
  6424  001A34  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6425  001A38  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6426  001A3C  6AF8               	clrf	tblptru,c
  6427  001A3E  0E02               	movlw	(high __ramtop+-1)
  6428  001A40  64F7               	cpfsgt	tblptrh,c
  6429  001A42  D003               	bra	u1607
  6430  001A44  0008               	tblrd		*
  6431  001A46  50F5               	movf	tablat,w,c
  6432  001A48  D005               	bra	u1600
  6433  001A4A                     u1607:
  6434  001A4A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6435  001A4E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6436  001A52  50EF               	movf	indf0,w,c
  6437  001A54                     u1600:
  6438  001A54  ECA1  F00E         	call	_SendLCD
  6439  001A58  4A2A               	infsnz	LCD_String@string,f,c
  6440  001A5A  2A2B               	incf	LCD_String@string+1,f,c
  6441                           
  6442                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6443  001A5C  0E21               	movlw	33
  6444  001A5E                     u3297:
  6445  001A5E  2EE8               	decfsz	wreg,f,c
  6446  001A60  D7FE               	goto	u3297
  6447  001A62  F000               	nop	
  6448  001A64                     l2287:
  6449  001A64  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6450  001A68  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6451  001A6C  6AF8               	clrf	tblptru,c
  6452  001A6E  0E02               	movlw	(high __ramtop+-1)
  6453  001A70  64F7               	cpfsgt	tblptrh,c
  6454  001A72  D003               	bra	u1617
  6455  001A74  0008               	tblrd		*
  6456  001A76  50F5               	movf	tablat,w,c
  6457  001A78  D005               	bra	u1610
  6458  001A7A                     u1617:
  6459  001A7A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6460  001A7E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6461  001A82  50EF               	movf	indf0,w,c
  6462  001A84                     u1610:
  6463  001A84  0900               	iorlw	0
  6464  001A86  B4D8               	btfsc	status,2,c
  6465  001A88  0012               	return	
  6466  001A8A  D7D2               	goto	l2281
  6467  001A8C                     __end_of_LCD_String:
  6468                           	opt stack 0
  6469                           tblptru	equ	0xFF8
  6470                           tblptrh	equ	0xFF7
  6471                           tblptrl	equ	0xFF6
  6472                           tablat	equ	0xFF5
  6473                           prodh	equ	0xFF4
  6474                           prodl	equ	0xFF3
  6475                           intcon	equ	0xFF2
  6476                           indf0	equ	0xFEF
  6477                           postinc0	equ	0xFEE
  6478                           fsr0h	equ	0xFEA
  6479                           fsr0l	equ	0xFE9
  6480                           wreg	equ	0xFE8
  6481                           indf1	equ	0xFE7
  6482                           plusw1	equ	0xFE3
  6483                           fsr1h	equ	0xFE2
  6484                           fsr1l	equ	0xFE1
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           postdec2	equ	0xFDD
  6488                           plusw2	equ	0xFDB
  6489                           fsr2h	equ	0xFDA
  6490                           fsr2l	equ	0xFD9
  6491                           status	equ	0xFD8
  6492                           
  6493 ;; *************** function _SendLCD *****************
  6494 ;; Defined at:
  6495 ;;		line 27 in file "LCD.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;  Byte            1    wreg     unsigned char 
  6498 ;;  type            1   39[COMRAM] unsigned char 
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;  Byte            1   40[COMRAM] unsigned char 
  6501 ;; Return value:  Size  Location     Type
  6502 ;;		None               void
  6503 ;; Registers used:
  6504 ;;		wreg, status,2, status,0, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6510 ;;      Params:         1       0       0       0
  6511 ;;      Locals:         1       0       0       0
  6512 ;;      Temps:          0       0       0       0
  6513 ;;      Totals:         2       0       0       0
  6514 ;;Total ram usage:        2 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    5
  6517 ;; This function calls:
  6518 ;;		_LCDout
  6519 ;; This function is called by:
  6520 ;;		_initLCD
  6521 ;;		_SetLine
  6522 ;;		_LCD_String
  6523 ;;		_ScanIR
  6524 ;;		_ScanWithRange
  6525 ;;		_main
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           	psect	text27
  6530  001D42                     __ptext27:
  6531                           	opt stack 0
  6532  001D42                     _SendLCD:
  6533                           	opt stack 24
  6534                           
  6535                           ;incstack = 0
  6536                           ;SendLCD@Byte stored from wreg
  6537  001D42  6E29               	movwf	SendLCD@Byte,c
  6538                           
  6539                           ;LCD.c: 30: LATAbits.LATA6=type;
  6540  001D44  B028               	btfsc	SendLCD@type,0,c
  6541  001D46  D002               	bra	u1395
  6542  001D48  9C89               	bcf	3977,6,c	;volatile
  6543  001D4A  D001               	bra	u1396
  6544  001D4C                     u1395:
  6545  001D4C  8C89               	bsf	3977,6,c	;volatile
  6546  001D4E                     u1396:
  6547                           
  6548                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6549  001D4E  3829               	swapf	SendLCD@Byte,w,c
  6550  001D50  0B0F               	andlw	15
  6551  001D52  0B0F               	andlw	15
  6552  001D54  ECCD  F00A         	call	_LCDout
  6553                           
  6554                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6555  001D58  0E06               	movlw	6
  6556  001D5A                     u3307:
  6557  001D5A  2EE8               	decfsz	wreg,f,c
  6558  001D5C  D7FE               	goto	u3307
  6559  001D5E  D000               	nop2		;nop
  6560                           
  6561                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6562  001D60  5029               	movf	SendLCD@Byte,w,c
  6563  001D62  0B0F               	andlw	15
  6564  001D64  ECCD  F00A         	call	_LCDout
  6565                           
  6566                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6567  001D68  0E21               	movlw	33
  6568  001D6A                     u3317:
  6569  001D6A  2EE8               	decfsz	wreg,f,c
  6570  001D6C  D7FE               	goto	u3317
  6571  001D6E  F000               	nop	
  6572  001D70  0012               	return		;funcret
  6573  001D72                     __end_of_SendLCD:
  6574                           	opt stack 0
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           intcon	equ	0xFF2
  6582                           indf0	equ	0xFEF
  6583                           postinc0	equ	0xFEE
  6584                           fsr0h	equ	0xFEA
  6585                           fsr0l	equ	0xFE9
  6586                           wreg	equ	0xFE8
  6587                           indf1	equ	0xFE7
  6588                           plusw1	equ	0xFE3
  6589                           fsr1h	equ	0xFE2
  6590                           fsr1l	equ	0xFE1
  6591                           indf2	equ	0xFDF
  6592                           postinc2	equ	0xFDE
  6593                           postdec2	equ	0xFDD
  6594                           plusw2	equ	0xFDB
  6595                           fsr2h	equ	0xFDA
  6596                           fsr2l	equ	0xFD9
  6597                           status	equ	0xFD8
  6598                           
  6599 ;; *************** function _LCDout *****************
  6600 ;; Defined at:
  6601 ;;		line 14 in file "LCD.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;  number          1    wreg     unsigned char 
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  number          1   38[COMRAM] unsigned char 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;		None               void
  6608 ;; Registers used:
  6609 ;;		wreg, status,2, status,0, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6615 ;;      Params:         0       0       0       0
  6616 ;;      Locals:         1       0       0       0
  6617 ;;      Temps:          3       0       0       0
  6618 ;;      Totals:         4       0       0       0
  6619 ;;Total ram usage:        4 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    4
  6622 ;; This function calls:
  6623 ;;		_E_TOG
  6624 ;; This function is called by:
  6625 ;;		_SendLCD
  6626 ;;		_initLCD
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           	psect	text28
  6631  00159A                     __ptext28:
  6632                           	opt stack 0
  6633  00159A                     _LCDout:
  6634                           	opt stack 24
  6635                           
  6636                           ;incstack = 0
  6637                           ;LCDout@number stored from wreg
  6638  00159A  6E27               	movwf	LCDout@number,c
  6639                           
  6640                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6641  00159C  5027               	movf	LCDout@number,w,c
  6642  00159E  6E24               	movwf	??_LCDout& (0+255),c
  6643  0015A0  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6644  0015A2  0E07               	movlw	7
  6645  0015A4                     u1285:
  6646  0015A4  90D8               	bcf	status,0,c
  6647  0015A6  3624               	rlcf	??_LCDout,f,c
  6648  0015A8  3625               	rlcf	??_LCDout+1,f,c
  6649  0015AA  2EE8               	decfsz	wreg,f,c
  6650  0015AC  D7FB               	goto	u1285
  6651  0015AE  0E07               	movlw	7
  6652  0015B0  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6653  0015B2                     u1295:
  6654  0015B2  3425               	rlcf	??_LCDout+1,w,c
  6655  0015B4  3225               	rrcf	??_LCDout+1,f,c
  6656  0015B6  3224               	rrcf	??_LCDout,f,c
  6657  0015B8  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6658  0015BA  D7FB               	goto	u1295
  6659  0015BC  4624               	rlncf	??_LCDout,f,c
  6660  0015BE  508B               	movf	3979,w,c	;volatile
  6661  0015C0  1824               	xorwf	??_LCDout,w,c
  6662  0015C2  0BFD               	andlw	-3
  6663  0015C4  1824               	xorwf	??_LCDout,w,c
  6664  0015C6  6E8B               	movwf	3979,c	;volatile
  6665                           
  6666                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6667  0015C8  5027               	movf	LCDout@number,w,c
  6668  0015CA  6E24               	movwf	??_LCDout& (0+255),c
  6669  0015CC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6670  0015CE  0E06               	movlw	6
  6671  0015D0                     u1305:
  6672  0015D0  90D8               	bcf	status,0,c
  6673  0015D2  3624               	rlcf	??_LCDout,f,c
  6674  0015D4  3625               	rlcf	??_LCDout+1,f,c
  6675  0015D6  2EE8               	decfsz	wreg,f,c
  6676  0015D8  D7FB               	goto	u1305
  6677  0015DA  0E07               	movlw	7
  6678  0015DC  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6679  0015DE                     u1315:
  6680  0015DE  3425               	rlcf	??_LCDout+1,w,c
  6681  0015E0  3225               	rrcf	??_LCDout+1,f,c
  6682  0015E2  3224               	rrcf	??_LCDout,f,c
  6683  0015E4  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6684  0015E6  D7FB               	goto	u1315
  6685  0015E8  4624               	rlncf	??_LCDout,f,c
  6686  0015EA  4624               	rlncf	??_LCDout,f,c
  6687  0015EC  508B               	movf	3979,w,c	;volatile
  6688  0015EE  1824               	xorwf	??_LCDout,w,c
  6689  0015F0  0BFB               	andlw	-5
  6690  0015F2  1824               	xorwf	??_LCDout,w,c
  6691  0015F4  6E8B               	movwf	3979,c	;volatile
  6692                           
  6693                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6694  0015F6  5027               	movf	LCDout@number,w,c
  6695  0015F8  6E24               	movwf	??_LCDout& (0+255),c
  6696  0015FA  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6697  0015FC  0E05               	movlw	5
  6698  0015FE                     u1325:
  6699  0015FE  90D8               	bcf	status,0,c
  6700  001600  3624               	rlcf	??_LCDout,f,c
  6701  001602  3625               	rlcf	??_LCDout+1,f,c
  6702  001604  2EE8               	decfsz	wreg,f,c
  6703  001606  D7FB               	goto	u1325
  6704  001608  0E07               	movlw	7
  6705  00160A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6706  00160C                     u1335:
  6707  00160C  3425               	rlcf	??_LCDout+1,w,c
  6708  00160E  3225               	rrcf	??_LCDout+1,f,c
  6709  001610  3224               	rrcf	??_LCDout,f,c
  6710  001612  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6711  001614  D7FB               	goto	u1335
  6712  001616  508C               	movf	3980,w,c	;volatile
  6713  001618  1824               	xorwf	??_LCDout,w,c
  6714  00161A  0BFE               	andlw	-2
  6715  00161C  1824               	xorwf	??_LCDout,w,c
  6716  00161E  6E8C               	movwf	3980,c	;volatile
  6717                           
  6718                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6719  001620  5027               	movf	LCDout@number,w,c
  6720  001622  6E24               	movwf	??_LCDout& (0+255),c
  6721  001624  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6722  001626  3A24               	swapf	??_LCDout,f,c
  6723  001628  3A25               	swapf	??_LCDout+1,f,c
  6724  00162A  0EF0               	movlw	240
  6725  00162C  1625               	andwf	??_LCDout+1,f,c
  6726  00162E  5024               	movf	??_LCDout,w,c
  6727  001630  0B0F               	andlw	15
  6728  001632  1225               	iorwf	??_LCDout+1,f,c
  6729  001634  0EF0               	movlw	240
  6730  001636  1624               	andwf	??_LCDout,f,c
  6731  001638  0E07               	movlw	7
  6732  00163A  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6733  00163C                     u1345:
  6734  00163C  3425               	rlcf	??_LCDout+1,w,c
  6735  00163E  3225               	rrcf	??_LCDout+1,f,c
  6736  001640  3224               	rrcf	??_LCDout,f,c
  6737  001642  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6738  001644  D7FB               	goto	u1345
  6739  001646  4624               	rlncf	??_LCDout,f,c
  6740  001648  508C               	movf	3980,w,c	;volatile
  6741  00164A  1824               	xorwf	??_LCDout,w,c
  6742  00164C  0BFD               	andlw	-3
  6743  00164E  1824               	xorwf	??_LCDout,w,c
  6744  001650  6E8C               	movwf	3980,c	;volatile
  6745                           
  6746                           ;LCD.c: 21: E_TOG();
  6747  001652  EC17  F00F         	call	_E_TOG	;wreg free
  6748                           
  6749                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6750  001656  0E03               	movlw	3
  6751  001658                     u3327:
  6752  001658  2EE8               	decfsz	wreg,f,c
  6753  00165A  D7FE               	goto	u3327
  6754  00165C  F000               	nop	
  6755  00165E  0012               	return		;funcret
  6756  001660                     __end_of_LCDout:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           intcon	equ	0xFF2
  6765                           indf0	equ	0xFEF
  6766                           postinc0	equ	0xFEE
  6767                           fsr0h	equ	0xFEA
  6768                           fsr0l	equ	0xFE9
  6769                           wreg	equ	0xFE8
  6770                           indf1	equ	0xFE7
  6771                           plusw1	equ	0xFE3
  6772                           fsr1h	equ	0xFE2
  6773                           fsr1l	equ	0xFE1
  6774                           indf2	equ	0xFDF
  6775                           postinc2	equ	0xFDE
  6776                           postdec2	equ	0xFDD
  6777                           plusw2	equ	0xFDB
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8
  6781                           
  6782 ;; *************** function _E_TOG *****************
  6783 ;; Defined at:
  6784 ;;		line 5 in file "LCD.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;		None
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;		None
  6789 ;; Return value:  Size  Location     Type
  6790 ;;		None               void
  6791 ;; Registers used:
  6792 ;;		wreg
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6798 ;;      Params:         0       0       0       0
  6799 ;;      Locals:         0       0       0       0
  6800 ;;      Temps:          0       0       0       0
  6801 ;;      Totals:         0       0       0       0
  6802 ;;Total ram usage:        0 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    3
  6805 ;; This function calls:
  6806 ;;		Nothing
  6807 ;; This function is called by:
  6808 ;;		_LCDout
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text29
  6813  001E2E                     __ptext29:
  6814                           	opt stack 0
  6815  001E2E                     _E_TOG:
  6816                           	opt stack 24
  6817                           
  6818                           ;LCD.c: 8: LATCbits.LATC0=1;
  6819                           
  6820                           ;incstack = 0
  6821  001E2E  808B               	bsf	3979,0,c	;volatile
  6822                           
  6823                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6824  001E30  0E03               	movlw	3
  6825  001E32                     u3337:
  6826  001E32  2EE8               	decfsz	wreg,f,c
  6827  001E34  D7FE               	goto	u3337
  6828  001E36  F000               	nop	
  6829                           
  6830                           ;LCD.c: 10: LATCbits.LATC0=0;
  6831  001E38  908B               	bcf	3979,0,c	;volatile
  6832  001E3A  0012               	return		;funcret
  6833  001E3C                     __end_of_E_TOG:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           intcon	equ	0xFF2
  6842                           indf0	equ	0xFEF
  6843                           postinc0	equ	0xFEE
  6844                           fsr0h	equ	0xFEA
  6845                           fsr0l	equ	0xFE9
  6846                           wreg	equ	0xFE8
  6847                           indf1	equ	0xFE7
  6848                           plusw1	equ	0xFE3
  6849                           fsr1h	equ	0xFE2
  6850                           fsr1l	equ	0xFE1
  6851                           indf2	equ	0xFDF
  6852                           postinc2	equ	0xFDE
  6853                           postdec2	equ	0xFDD
  6854                           plusw2	equ	0xFDB
  6855                           fsr2h	equ	0xFDA
  6856                           fsr2l	equ	0xFD9
  6857                           status	equ	0xFD8
  6858                           
  6859 ;; *************** function _InterruptHandlerLow *****************
  6860 ;; Defined at:
  6861 ;;		line 18 in file "main.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;		None
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;		None
  6866 ;; Return value:  Size  Location     Type
  6867 ;;		None               void
  6868 ;; Registers used:
  6869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6875 ;;      Params:         0       0       0       0
  6876 ;;      Locals:         0       0       0       0
  6877 ;;      Temps:         17       0       0       0
  6878 ;;      Totals:        17       0       0       0
  6879 ;;Total ram usage:       17 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    2
  6882 ;; This function calls:
  6883 ;;		Nothing
  6884 ;; This function is called by:
  6885 ;;		Interrupt level 1
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           	psect	intcodelo
  6890  000018                     __pintcodelo:
  6891                           	opt stack 0
  6892  000018                     _InterruptHandlerLow:
  6893                           	opt stack 23
  6894                           
  6895                           ;incstack = 0
  6896  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6897  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6898  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6899  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6900  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6901  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6902  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6903  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6904  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6905  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6906  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6907  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6908  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6909  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6910  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6911  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6912  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6913  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6914                           
  6915                           ;main.c: 20: if (PIR1bits.RCIF) {
  6916  00005E  AA9E               	btfss	3998,5,c	;volatile
  6917  000060  D016               	goto	i1l374
  6918                           
  6919                           ;main.c: 21: ReceivedString[i]=RCREG;
  6920  000062  503A               	movf	_i,w,c	;volatile
  6921  000064  0D01               	mullw	1
  6922  000066  0EE6               	movlw	low _ReceivedString
  6923  000068  24F3               	addwf	prodl,w,c
  6924  00006A  6ED9               	movwf	fsr2l,c
  6925  00006C  0E01               	movlw	high _ReceivedString
  6926  00006E  20F4               	addwfc	prodh,w,c
  6927  000070  6EDA               	movwf	fsr2h,c
  6928  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6929                           
  6930                           ;main.c: 22: RFID_Read=1;
  6931  000076  0E01               	movlw	1
  6932  000078  0101               	movlb	1	; () banked
  6933  00007A  6FF8               	movwf	_RFID_Read& (0+255),b	;volatile
  6934                           
  6935                           ; BSR set to: 1
  6936                           ;main.c: 23: if (i==15){
  6937  00007C  0E0F               	movlw	15
  6938  00007E  183A               	xorwf	_i,w,c	;volatile
  6939  000080  A4D8               	btfss	status,2,c
  6940  000082  D003               	goto	i1l2727
  6941                           
  6942                           ; BSR set to: 1
  6943                           ;main.c: 24: i=0;
  6944  000084  0E00               	movlw	0
  6945  000086  6E3A               	movwf	_i,c	;volatile
  6946                           
  6947                           ;main.c: 25: }else{
  6948  000088  D001               	goto	i1l2729
  6949  00008A                     i1l2727:
  6950                           
  6951                           ; BSR set to: 1
  6952                           ;main.c: 26: i++;
  6953  00008A  2A3A               	incf	_i,f,c	;volatile
  6954  00008C                     i1l2729:
  6955                           
  6956                           ; BSR set to: 1
  6957                           ;main.c: 27: }
  6958                           ;main.c: 28: PIR1bits.RCIF=0;
  6959  00008C  9A9E               	bcf	3998,5,c	;volatile
  6960  00008E                     i1l374:
  6961  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6962  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6963  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6964  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6965  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6966  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6967  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6968  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6969  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6970  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6971  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6972  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6973  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6974  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6975  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6976  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6977  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6978  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6979  0000D4  0010               	retfie	
  6980  0000D6                     __end_of_InterruptHandlerLow:
  6981                           	opt stack 0
  6982                           pclatu	equ	0xFFB
  6983                           pclath	equ	0xFFA
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           indf0	equ	0xFEF
  6992                           postinc0	equ	0xFEE
  6993                           fsr0h	equ	0xFEA
  6994                           fsr0l	equ	0xFE9
  6995                           wreg	equ	0xFE8
  6996                           indf1	equ	0xFE7
  6997                           plusw1	equ	0xFE3
  6998                           fsr1h	equ	0xFE2
  6999                           fsr1l	equ	0xFE1
  7000                           bsr	equ	0xFE0
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           plusw2	equ	0xFDB
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function _InterruptHandlerHigh *****************
  7010 ;; Defined at:
  7011 ;;		line 34 in file "main.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;		None
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;		None
  7016 ;; Return value:  Size  Location     Type
  7017 ;;		None               void
  7018 ;; Registers used:
  7019 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7025 ;;      Params:         0       0       0       0
  7026 ;;      Locals:         0       0       0       0
  7027 ;;      Temps:         14       0       0       0
  7028 ;;      Totals:        14       0       0       0
  7029 ;;Total ram usage:       14 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; Hardware stack levels required when called:    1
  7032 ;; This function calls:
  7033 ;;		i2_delay_tenth_s
  7034 ;; This function is called by:
  7035 ;;		Interrupt level 2
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	intcode
  7040  000008                     __pintcode:
  7041                           	opt stack 0
  7042  000008                     _InterruptHandlerHigh:
  7043                           	opt stack 23
  7044                           
  7045                           ;incstack = 0
  7046  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7047  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7048  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7049  000012  EF8E  F00B         	goto	int_func
  7050                           pclatu	equ	0xFFB
  7051                           pclath	equ	0xFFA
  7052                           tblptru	equ	0xFF8
  7053                           tblptrh	equ	0xFF7
  7054                           tblptrl	equ	0xFF6
  7055                           tablat	equ	0xFF5
  7056                           prodh	equ	0xFF4
  7057                           prodl	equ	0xFF3
  7058                           intcon	equ	0xFF2
  7059                           indf0	equ	0xFEF
  7060                           postinc0	equ	0xFEE
  7061                           fsr0h	equ	0xFEA
  7062                           fsr0l	equ	0xFE9
  7063                           wreg	equ	0xFE8
  7064                           indf1	equ	0xFE7
  7065                           plusw1	equ	0xFE3
  7066                           fsr1h	equ	0xFE2
  7067                           fsr1l	equ	0xFE1
  7068                           bsr	equ	0xFE0
  7069                           indf2	equ	0xFDF
  7070                           postinc2	equ	0xFDE
  7071                           postdec2	equ	0xFDD
  7072                           plusw2	equ	0xFDB
  7073                           fsr2h	equ	0xFDA
  7074                           fsr2l	equ	0xFD9
  7075                           status	equ	0xFD8
  7076                           
  7077                           	psect	intcode_body
  7078  00171C                     __pintcode_body:
  7079                           	opt stack 23
  7080  00171C                     int_func:
  7081                           	opt stack 23
  7082  00171C  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7083  001720  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7084  001724  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7085  001728  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7086  00172C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7087  001730  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7088  001734  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7089  001738  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7090  00173C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7091  001740  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7092  001744  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7093  001748  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7094                           
  7095                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7096  00174C  A2F2               	btfss	intcon,1,c	;volatile
  7097  00174E  D00D               	goto	i2l2745
  7098                           
  7099                           ;main.c: 36: if (mode==-1) {
  7100  001750  283B               	incf	_mode,w,c	;volatile
  7101  001752  A4D8               	btfss	status,2,c
  7102  001754  D003               	goto	i2l2737
  7103                           
  7104                           ;main.c: 38: mode=1;
  7105  001756  0E01               	movlw	1
  7106  001758  6E3B               	movwf	_mode,c	;volatile
  7107                           
  7108                           ;main.c: 39: } else if (mode==0) {
  7109  00175A  D003               	goto	i2l2741
  7110  00175C                     i2l2737:
  7111  00175C  503B               	movf	_mode,w,c	;volatile
  7112  00175E  A4D8               	btfss	status,2,c
  7113                           
  7114                           ;main.c: 43: mode=-1;
  7115                           
  7116                           ;main.c: 41: } else {
  7117  001760  683B               	setf	_mode,c	;volatile
  7118  001762                     i2l2741:
  7119                           
  7120                           ;main.c: 44: }
  7121                           ;main.c: 46: delay_tenth_s(2);
  7122  001762  0E02               	movlw	2
  7123  001764  EC52  F00E         	call	i2_delay_tenth_s
  7124                           
  7125                           ;main.c: 47: INTCONbits.INT0IF=0;
  7126  001768  92F2               	bcf	intcon,1,c	;volatile
  7127  00176A                     i2l2745:
  7128                           
  7129                           ;main.c: 48: }
  7130                           ;main.c: 49: if (INTCONbits.TMR0IF) {
  7131  00176A  A4F2               	btfss	intcon,2,c	;volatile
  7132  00176C  D004               	goto	i2l383
  7133                           
  7134                           ;main.c: 50: millis++;
  7135  00176E  0101               	movlb	1	; () banked
  7136  001770  4BF6               	infsnz	_millis& (0+255),f,b	;volatile
  7137  001772  2BF7               	incf	(_millis+1)& (0+255),f,b	;volatile
  7138                           
  7139                           ; BSR set to: 1
  7140                           ;main.c: 51: INTCONbits.TMR0IF = 0;
  7141  001774  94F2               	bcf	intcon,2,c	;volatile
  7142  001776                     i2l383:
  7143  001776  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7144  00177A  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7145  00177E  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7146  001782  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7147  001786  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7148  00178A  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7149  00178E  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7150  001792  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7151  001796  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7152  00179A  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7153  00179E  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7154  0017A2  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7155  0017A6  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7156  0017AA  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7157  0017AE  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7158  0017B0  0011               	retfie		f
  7159  0017B2                     __end_of_InterruptHandlerHigh:
  7160                           	opt stack 0
  7161                           pclatu	equ	0xFFB
  7162                           pclath	equ	0xFFA
  7163                           tblptru	equ	0xFF8
  7164                           tblptrh	equ	0xFF7
  7165                           tblptrl	equ	0xFF6
  7166                           tablat	equ	0xFF5
  7167                           prodh	equ	0xFF4
  7168                           prodl	equ	0xFF3
  7169                           intcon	equ	0xFF2
  7170                           indf0	equ	0xFEF
  7171                           postinc0	equ	0xFEE
  7172                           fsr0h	equ	0xFEA
  7173                           fsr0l	equ	0xFE9
  7174                           wreg	equ	0xFE8
  7175                           indf1	equ	0xFE7
  7176                           plusw1	equ	0xFE3
  7177                           fsr1h	equ	0xFE2
  7178                           fsr1l	equ	0xFE1
  7179                           bsr	equ	0xFE0
  7180                           indf2	equ	0xFDF
  7181                           postinc2	equ	0xFDE
  7182                           postdec2	equ	0xFDD
  7183                           plusw2	equ	0xFDB
  7184                           fsr2h	equ	0xFDA
  7185                           fsr2l	equ	0xFD9
  7186                           status	equ	0xFD8
  7187                           
  7188 ;; *************** function i2_delay_tenth_s *****************
  7189 ;; Defined at:
  7190 ;;		line 32 in file "Movement.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  tenth_second    1    wreg     unsigned char 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7195 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7196 ;; Return value:  Size  Location     Type
  7197 ;;		None               void
  7198 ;; Registers used:
  7199 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7205 ;;      Params:         0       0       0       0
  7206 ;;      Locals:         3       0       0       0
  7207 ;;      Temps:          1       0       0       0
  7208 ;;      Totals:         4       0       0       0
  7209 ;;Total ram usage:        4 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; This function calls:
  7212 ;;		Nothing
  7213 ;; This function is called by:
  7214 ;;		_InterruptHandlerHigh
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           	psect	text32
  7219  001CA4                     __ptext32:
  7220                           	opt stack 0
  7221  001CA4                     i2_delay_tenth_s:
  7222                           	opt stack 23
  7223                           
  7224                           ;incstack = 0
  7225                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7226  001CA4  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7227                           
  7228                           ;Movement.c: 33: unsigned int i=0;
  7229  001CA6  0E00               	movlw	0
  7230  001CA8  6E04               	movwf	i2delay_tenth_s@i+1,c
  7231  001CAA  0E00               	movlw	0
  7232  001CAC  6E03               	movwf	i2delay_tenth_s@i,c
  7233                           
  7234                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7235  001CAE  0E00               	movlw	0
  7236  001CB0  6E04               	movwf	i2delay_tenth_s@i+1,c
  7237  001CB2  0E01               	movlw	1
  7238  001CB4  6E03               	movwf	i2delay_tenth_s@i,c
  7239  001CB6  D009               	goto	i2l2697
  7240  001CB8                     i2l2693:
  7241                           
  7242                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7243  001CB8  0E82               	movlw	130
  7244  001CBA  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7245  001CBC  0EDE               	movlw	222
  7246  001CBE                     i2u334_47:
  7247  001CBE  2EE8               	decfsz	wreg,f,c
  7248  001CC0  D7FE               	goto	i2u334_47
  7249  001CC2  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7250  001CC4  D7FC               	goto	i2u334_47
  7251  001CC6  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7252  001CC8  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7253  001CCA                     i2l2697:
  7254  001CCA  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7255  001CCC  0D02               	mullw	2
  7256  001CCE  5003               	movf	i2delay_tenth_s@i,w,c
  7257  001CD0  5CF3               	subwf	prodl,w,c
  7258  001CD2  5004               	movf	i2delay_tenth_s@i+1,w,c
  7259  001CD4  58F4               	subwfb	prodh,w,c
  7260  001CD6  A0D8               	btfss	status,0,c
  7261  001CD8  0012               	return	
  7262  001CDA  D7EE               	goto	i2l2693
  7263  001CDC                     __end_ofi2_delay_tenth_s:
  7264                           	opt stack 0
  7265                           pclatu	equ	0xFFB
  7266                           pclath	equ	0xFFA
  7267                           tblptru	equ	0xFF8
  7268                           tblptrh	equ	0xFF7
  7269                           tblptrl	equ	0xFF6
  7270                           tablat	equ	0xFF5
  7271                           prodh	equ	0xFF4
  7272                           prodl	equ	0xFF3
  7273                           intcon	equ	0xFF2
  7274                           indf0	equ	0xFEF
  7275                           postinc0	equ	0xFEE
  7276                           fsr0h	equ	0xFEA
  7277                           fsr0l	equ	0xFE9
  7278                           wreg	equ	0xFE8
  7279                           indf1	equ	0xFE7
  7280                           plusw1	equ	0xFE3
  7281                           fsr1h	equ	0xFE2
  7282                           fsr1l	equ	0xFE1
  7283                           bsr	equ	0xFE0
  7284                           indf2	equ	0xFDF
  7285                           postinc2	equ	0xFDE
  7286                           postdec2	equ	0xFDD
  7287                           plusw2	equ	0xFDB
  7288                           fsr2h	equ	0xFDA
  7289                           fsr2l	equ	0xFD9
  7290                           status	equ	0xFD8
  7291                           pclatu	equ	0xFFB
  7292                           pclath	equ	0xFFA
  7293                           tblptru	equ	0xFF8
  7294                           tblptrh	equ	0xFF7
  7295                           tblptrl	equ	0xFF6
  7296                           tablat	equ	0xFF5
  7297                           prodh	equ	0xFF4
  7298                           prodl	equ	0xFF3
  7299                           intcon	equ	0xFF2
  7300                           indf0	equ	0xFEF
  7301                           postinc0	equ	0xFEE
  7302                           fsr0h	equ	0xFEA
  7303                           fsr0l	equ	0xFE9
  7304                           wreg	equ	0xFE8
  7305                           indf1	equ	0xFE7
  7306                           plusw1	equ	0xFE3
  7307                           fsr1h	equ	0xFE2
  7308                           fsr1l	equ	0xFE1
  7309                           bsr	equ	0xFE0
  7310                           indf2	equ	0xFDF
  7311                           postinc2	equ	0xFDE
  7312                           postdec2	equ	0xFDD
  7313                           plusw2	equ	0xFDB
  7314                           fsr2h	equ	0xFDA
  7315                           fsr2l	equ	0xFD9
  7316                           status	equ	0xFD8
  7317                           
  7318                           	psect	rparam
  7319  0000                     pclatu	equ	0xFFB
  7320                           pclath	equ	0xFFA
  7321                           tblptru	equ	0xFF8
  7322                           tblptrh	equ	0xFF7
  7323                           tblptrl	equ	0xFF6
  7324                           tablat	equ	0xFF5
  7325                           prodh	equ	0xFF4
  7326                           prodl	equ	0xFF3
  7327                           intcon	equ	0xFF2
  7328                           indf0	equ	0xFEF
  7329                           postinc0	equ	0xFEE
  7330                           fsr0h	equ	0xFEA
  7331                           fsr0l	equ	0xFE9
  7332                           wreg	equ	0xFE8
  7333                           indf1	equ	0xFE7
  7334                           plusw1	equ	0xFE3
  7335                           fsr1h	equ	0xFE2
  7336                           fsr1l	equ	0xFE1
  7337                           bsr	equ	0xFE0
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           plusw2	equ	0xFDB
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346                           	psect	temp
  7347  00003C                     btemp:
  7348                           	opt stack 0
  7349  00003C                     	ds	1
  7350  0000                     int$flags	set	btemp
  7351                           pclatu	equ	0xFFB
  7352                           pclath	equ	0xFFA
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           prodh	equ	0xFF4
  7358                           prodl	equ	0xFF3
  7359                           intcon	equ	0xFF2
  7360                           indf0	equ	0xFEF
  7361                           postinc0	equ	0xFEE
  7362                           fsr0h	equ	0xFEA
  7363                           fsr0l	equ	0xFE9
  7364                           wreg	equ	0xFE8
  7365                           indf1	equ	0xFE7
  7366                           plusw1	equ	0xFE3
  7367                           fsr1h	equ	0xFE2
  7368                           fsr1l	equ	0xFE1
  7369                           bsr	equ	0xFE0
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           plusw2	equ	0xFDB
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         183
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     92     150
    BANK1           256    226     249
    BANK2           256      0     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@millis	PTR unsigned int  size(2) Largest target is 2
		 -> millis(BANK1[2]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S146DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S146DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeed
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeed
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               228   228      0   72520
                                             90 BANK0      2     2      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4709
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    61     16   25083
                                             13 BANK0     77    61     16
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5171
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5402
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4092
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11702
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      96       5       93.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22E       3        0.0%
DATA                 0      0     22E      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 22:54:41 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l37 1442  
                                  l67 1924                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01BE                           ?_LCD_String 002A  
                                 l229 0E62                                   l433 09E6  
                                 l426 098A                                   l392 041C  
                                 l900 1B2C                                   l910 1B6E  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3001 185A                                  l2203 1B64  
                                l3101 108A                                  l3013 1880  
                                l3103 109C                                  l3015 1888  
                                l3007 186A                                  l3113 10D4  
                                l3201 133E                                  l3033 18C0  
                                l3025 18A8                                  l3017 188C  
                                l2243 1962                                  l3203 1358  
                                l3123 1146                                  l3107 10A4  
                                l3043 141A                                  l3051 18E8  
                                l2165 1DF6                                  l3125 116E  
                                l3029 18B2                                  l2255 19CC  
                                l2239 195A                                  l2175 1AFA  
                                l3135 119E                                  l3055 1904  
                                l3047 18CC                                  l2281 1A30  
                                l2273 1D26                                  l2265 1A10  
                                l2249 199E                                  l2177 1B02  
                                l3161 123E                                  l3137 11A4  
                                l3073 17E4                                  l3065 17B4  
                                l3313 0D14                                  l2259 19D4  
                                l2187 1B22                                  l2179 1B06  
                                l2195 1B44                                  l3155 11FC  
                                l2291 1C80                                  l2277 1D38  
                                l2197 1B4C                                  l3149 11DA  
                                l3069 17CC                                  l3309 0CF0  
                                l2445 1D86                                  l3501 0552  
                                l2287 1A64                                  l2199 1B50  
                                l3191 12D6                                  l3159 1234  
                                l3095 106E                                  l3079 1804  
                                l3247 1582                                  l2295 1C92  
                                l3327 0D84                                  l3193 12DC  
                                l3185 12B8                                  l3169 1262  
                                l3177 1288                                  l3361 0F6C  
                                l3329 0D9C                                  l3281 0C2E  
                                l3179 1294                                  l3339 0E5E  
                                l3603 08F2                                  l3523 0654  
                                l3373 0F9C                                  l3621 09EA  
                                l3533 06A4                                  l3445 0422  
                                l3199 1332                                  l3367 0F8A  
                                l3375 0FA2                                  l3615 0966  
                                l3543 070C                                  l3527 067E  
                                l3519 05E8                                  l3553 0756  
                                l3481 04CE                                  l3627 0A64  
                                l3619 09AE                                  l3555 075C  
                                l3547 0716                                  l3643 0AC8  
                                l3629 0A9E                                  l3637 0AAA  
                                l3565 0782                                  l3485 0500  
                                l3639 0AC6                                  l3559 0766  
                                l3567 0788                                  l3575 07F0  
                                l3593 087C                                  l3587 0858  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u3000 0942                                  u1305 15D0  
                                u1315 15DE                                  u1325 15FE  
                                _LATB 000F8A                                  u1335 160C  
                                u1600 1A54                                  u3040 0A28  
                                u1345 163C                                  u1610 1A84  
                                u3107 1688                                  u2404 1436  
                                u1285 15A4                                  u2405 1432  
                                u3117 1698                                  u1295 15B2  
                                u1607 1A4A                                  u1535 196A  
                                u2415 1490                                  u3207 0C7A  
                                u3127 16A6                                  u1617 1A7A  
                                u3217 191E                                  u3137 16B4  
                                u3307 1D5A                                  u1395 1D4C  
                                u3227 1C86                                  u3147 16C6  
                                u1396 1D4E                                  u3317 1D6A  
                                u1565 19DC                                  u3237 14EE  
                                u3157 16D8                                  u3077 047E  
                                u3327 1658                                  u3247 1504  
                                u3167 16EE                                  u3087 0496  
                                u3337 1E32                                  u3257 17FE  
                                u3177 1702                                  u3097 1672  
                                u2801 0366                                  u2394 13DA  
                                u3267 1992                                  u2395 13D6  
                                u3187 1714                                  u2811 0378  
                                u2900 06EA                                  u3277 1A04  
                                u3197 0C62                                  u1845 1D82  
                                u1846 1D84                                  u2902 06EC  
                                u3287 1D3A                                  u3297 1A5E  
                                u1865 1D94                                  u1866 1D96  
                                u2890 06D6                                  u2892 06D8  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 01C8                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  indf0 000FEF  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 17B2  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00AD                          ___param_bank 000010  
                     i2_delay_tenth_s 1CA4                       __end_of_SendLCD 1D72  
                     __end_of_SetLine 1D42                    ScanWithRange@F3894 00F2  
                         ScanIR@F3880 00EE                                 ?_main 0001  
                     __end_of___awdiv 18CA                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1B36  
                     __end_of___lwmod 1B78                                 i1l374 008E  
                               i2l383 1776                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1E2E  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                     __end_of_initLCD 171C                    ScanWithRange@loops 0071  
                     __end_of_dpowers 030B                       __end_of_isdigit 1DFE  
                               main@i 01CE                                 tablat 000FF5  
                               plusw1 000FE3                                 plusw2 000FDB  
                               status 000FD8                   __size_of_LCD_String 005E  
                     __end_of_sprintf 1366                __size_of_ScanWithRange 0576  
                      __CFG_MCLRE$OFF 000000                       __initialization 1CDC  
                        __end_of_main 0AEA                          __end_of_stop 1846  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 0099  
                __end_of_enableSensor 1D98                   VerifySignal@hexByte 002C  
                              ??_main 00BA                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 0032  
              __size_of_fullSpeedBack 003E                      ___awdiv@dividend 002A  
                              i1l2727 008A                                i1l2729 008C  
                      __CFG_WDTEN$OFF 000000                                i2l2741 1762  
                              i2l2737 175C                                i2l2745 176A  
                              i2l2693 1CB8                                i2l2697 1CCA  
               __end_of_delay_tenth_s 1CA4                                _LCDout 159A  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00AE  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1CDC                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 14A0  
                           ??_SetLine 002A                           fullSpeed@mL 0062  
                         fullSpeed@mR 0064                   ScanWithRange@millis 007B  
                              ___wmul 1D98                             ??___awdiv 002E  
                    __end_of_initRFID 1E1A                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 1DBE  
                __size_of_grabRightIR 0072                                _millis 01F6  
                              clear_0 1CE2                                clear_1 1CEE  
                              clear_2 1CFA                      ___awdiv@quotient 0030  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0AEA                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00B1                      __end_of_turnLeft 1C32  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1D04  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1E3C                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1B78                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002B  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 17AA  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BC  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0014                    __size_of_fullSpeed 0080  
                  __end_of_LCD_String 1A8C                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                            _grabLeftIR 19BC  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 1D72  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1C6C  
              ScanWithRange@RFID_Read 0079                               _SendLCD 1D42  
                             __Hparam 0000                               _SetLine 1D12  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 1846                       __size_of___wmul 0026  
                             ___lwdiv 1AE4                               ___lwmod 1B36  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1CDC                       ??_ScanWithRange 007D  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 1E1A  
                             __ptext2 1DFE                               __ptext3 1C32  
                             __ptext4 1660                               __ptext5 1DBE  
                             __ptext6 1B78                               __ptext7 1D72  
                             __ptext8 1A8C                               __ptext9 0AEA  
                           _T0CONbits 000FD5                               _initLCD 1660  
                   __end_of_initTimer 1E2E                               _dpowers 0301  
                   __end_of_fullSpeed 194A                               _isdigit 1DE0  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 0100                               _sprintf 1060  
                      __pintcode_body 171C                  end_of_initialization 1D04  
                      ScanWithRange@i 00A9                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 171C                    ScanIR@SensorResult 009B  
                     ??_fullSpeedBack 003A                             _RFID_Read 01F8  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                ScanWithRange@LeftFlick 00B7  
                   __end_of_turnRight 1BF4                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
              ScanWithRange@RightFlag 00B8                        __end_of_LCDout 1660  
                           _TXSTAbits 000FAC                             ScanIR@buf 0071  
                       ??_grabRightIR 0026                        __end_of_ScanIR 159A  
                      _ReceivedString 01E6                        __end_of___wmul 1DBE  
                   ScanWithRange@Move 0075                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1DE0                __size_of_delay_tenth_s 0038  
                 start_initialization 1CDC                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 003A                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 17B2                              ??_ScanIR 0039  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 19BC  
                        _initMotorPWM 1C32                           __pbssCOMRAM 003A  
                      fullSpeed@power 0066                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                          _isdigit$2086 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1C6C  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                           __pintcode 0008                  __end_of_VerifySignal 1AE4  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 01C9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 1E1A                             _fullSpeed 18CA  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATBbits 000F8A  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u334_47 1CBE  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3893 0200                             main@F3895 00BC  
                           main@F3898 01E2                           _grabRightIR 194A  
               ScanWithRange@LeftFlag 00AF                  grabRightIR@IR_signal 0029  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 1060  
                        setMotorPWM@m 0032                 ScanWithRange@MoveTime 0073  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0077  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1BB6                            ?_fullSpeed 0062  
                    ScanWithRange@buf 0081                   __end_of_setMotorPWM 14A0  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1BB6  
                    __size_of_SetLine 0030                    __end_of_grabLeftIR 1A2E  
                    __size_of___awdiv 0084                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0067  
                            __ptext10 1BB6                              __ptext11 1BF4  
                            __ptext20 1D98                              __ptext12 18CA  
                            __ptext21 1B36                              __ptext13 1C6C  
                            __ptext22 1AE4                              __ptext14 14A0  
                            __ptext23 194A                              __ptext15 17B2  
                            __ptext32 1CA4                              __ptext24 19BC  
                            __ptext16 1366                              __ptext25 1D12  
                            __ptext17 1846                              __ptext26 1A2E  
                            __ptext18 1060                              __ptext27 1D42  
                            __ptext19 1DE0                              __ptext28 159A  
                            __ptext29 1E2E                       ??_delay_tenth_s 0024  
                    __size_of_sprintf 0306                              _initRFID 1DFE  
           ScanWithRange@SensorResult 00B3                        turnRight@power 006B  
                       __size_of_main 079A                    main@DirectionFound 01CD  
                       turnLeft@power 006B                         __size_of_stop 0094  
                          turnLeft@mL 0067                            turnLeft@mR 0069  
               __size_of_VerifySignal 0058                              int$flags 003C  
                            main@Move 01CF                   _InterruptHandlerLow 0018  
                          _LCD_String 1A2E                              _turnLeft 1BF4  
                     ScanWithRange@mL 006D                       ScanWithRange@mR 006F  
                  enableSensor@sensor 0025                    enableSensor@status 0024  
                       VerifySignal@i 002A                            _INTCONbits 000FF2  
                         ??_initTimer 0024                              isdigit@c 0026  
                         ??_fullSpeed 0039                           _setMotorPWM 1366  
                        _VerifySignal 1A8C                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00AB  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
