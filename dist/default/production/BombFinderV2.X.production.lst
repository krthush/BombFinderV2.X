

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 20 02:34:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4331 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	smallconst
    88  000300                     __psmallconst:
    89                           	opt stack 0
    90  000300  00                 	db	0
    91  000301                     _dpowers:
    92                           	opt stack 0
    93  000301  0001               	dw	1
    94  000303  000A               	dw	10
    95  000305  0064               	dw	100
    96  000307  03E8               	dw	1000
    97  000309  2710               	dw	10000
    98  00030B                     __end_of_dpowers:
    99                           	opt stack 0
   100  0000                     _OSCCONbits	set	4051
   101  0000                     _OSCCON	set	4051
   102  0000                     _PIE1bits	set	3997
   103  0000                     _IPR1bits	set	3999
   104  0000                     _RCONbits	set	4048
   105  0000                     _RCREG	set	4014
   106  0000                     _PIR1bits	set	3998
   107  0000                     _RCSTAbits	set	4011
   108  0000                     _TXSTAbits	set	4012
   109  0000                     _BAUDCONbits	set	4010
   110  0000                     _SPBRGH	set	4016
   111  0000                     _SPBRG	set	4015
   112  0000                     _TRISC	set	3988
   113  0000                     _TMR0H	set	4055
   114  0000                     _TMR0L	set	4054
   115  0000                     _INTCONbits	set	4082
   116  0000                     _T0CONbits	set	4053
   117  0000                     _TRISDbits	set	3989
   118  0000                     _TRISCbits	set	3988
   119  0000                     _LATDbits	set	3980
   120  0000                     _LATCbits	set	3979
   121  0000                     _LATEbits	set	3981
   122  0000                     _CAP2BUFL	set	3942
   123  0000                     _CAP2BUFH	set	3943
   124  0000                     _CAP1BUFL	set	3944
   125  0000                     _CAP1BUFH	set	3945
   126  0000                     _T5CON	set	4023
   127  0000                     _TRISEbits	set	3990
   128  0000                     _CAP2CON	set	3938
   129  0000                     _CAP1CON	set	3939
   130  0000                     _ANSEL0bits	set	4024
   131  0000                     _TRISAbits	set	3986
   132  0000                     _LATAbits	set	3977
   133  0000                     _LATB	set	3978
   134  0000                     _LATBbits	set	3978
   135  0000                     _TRISBbits	set	3987
   136  0000                     _PTPERH	set	3962
   137  0000                     _PTPERL	set	3963
   138  0000                     _PWMCON1	set	3950
   139  0000                     _PWMCON0	set	3951
   140  0000                     _PTCON1	set	3966
   141  0000                     _PTCON0	set	3967
   142  0000                     _PDC1H	set	3958
   143  0000                     _PDC1L	set	3959
   144  0000                     _PDC0H	set	3960
   145  0000                     _PDC0L	set	3961
   146  00030B                     STR_6:
   147  00030B  20                 	db	32
   148  00030C  20                 	db	32
   149  00030D  20                 	db	32
   150  00030E  20                 	db	32
   151  00030F  20                 	db	32
   152  000310  20                 	db	32
   153  000311  25                 	db	37
   154  000312  30                 	db	48	;'0'
   155  000313  34                 	db	52	;'4'
   156  000314  64                 	db	100	;'d'
   157  000315  2C                 	db	44
   158  000316  20                 	db	32
   159  000317  25                 	db	37
   160  000318  30                 	db	48	;'0'
   161  000319  34                 	db	52	;'4'
   162  00031A  64                 	db	100	;'d'
   163  00031B  00                 	db	0
   164  00031C                     STR_5:
   165  00031C  20                 	db	32
   166  00031D  20                 	db	32
   167  00031E  20                 	db	32
   168  00031F  20                 	db	32
   169  000320  20                 	db	32
   170  000321  20                 	db	32
   171  000322  49                 	db	73	;'I'
   172  000323  6E                 	db	110	;'n'
   173  000324  65                 	db	101	;'e'
   174  000325  72                 	db	114	;'r'
   175  000326  74                 	db	116	;'t'
   176  000327  20                 	db	32
   177  000328  4D                 	db	77	;'M'
   178  000329  6F                 	db	111	;'o'
   179  00032A  64                 	db	100	;'d'
   180  00032B  65                 	db	101	;'e'
   181  00032C  00                 	db	0
   182  00032D                     STR_1:
   183  00032D  20                 	db	32
   184  00032E  20                 	db	32
   185  00032F  20                 	db	32
   186  000330  20                 	db	32
   187  000331  20                 	db	32
   188  000332  53                 	db	83	;'S'
   189  000333  63                 	db	99	;'c'
   190  000334  61                 	db	97	;'a'
   191  000335  6E                 	db	110	;'n'
   192  000336  49                 	db	73	;'I'
   193  000337  52                 	db	82	;'R'
   194  000338  00                 	db	0
   195  000339                     STR_8:
   196  000339  47                 	db	71	;'G'
   197  00033A  6F                 	db	111	;'o'
   198  00033B  69                 	db	105	;'i'
   199  00033C  6E                 	db	110	;'n'
   200  00033D  67                 	db	103	;'g'
   201  00033E  20                 	db	32
   202  00033F  48                 	db	72	;'H'
   203  000340  6F                 	db	111	;'o'
   204  000341  6D                 	db	109	;'m'
   205  000342  65                 	db	101	;'e'
   206  000343  00                 	db	0
   207  000344                     STR_7:
   208  000344  53                 	db	83	;'S'
   209  000345  65                 	db	101	;'e'
   210  000346  61                 	db	97	;'a'
   211  000347  72                 	db	114	;'r'
   212  000348  63                 	db	99	;'c'
   213  000349  68                 	db	104	;'h'
   214  00034A  69                 	db	105	;'i'
   215  00034B  6E                 	db	110	;'n'
   216  00034C  67                 	db	103	;'g'
   217  00034D  00                 	db	0
   218  0000                     
   219                           ; #config settings
   220  00034E  00                 	db	0	; dummy byte at the end
   221  0000                     
   222                           	psect	cinit
   223  001B64                     __pcinit:
   224                           	opt stack 0
   225  001B64                     start_initialization:
   226                           	opt stack 0
   227  001B64                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Clear objects allocated to BANK2 (150 bytes)
   231  001B64  EE02  F000         	lfsr	0,__pbssBANK2
   232  001B68  0E96               	movlw	150
   233  001B6A                     clear_0:
   234  001B6A  6AEE               	clrf	postinc0,c
   235  001B6C  06E8               	decf	wreg,f,c
   236  001B6E  E1FD               	bnz	clear_0
   237                           
   238                           ; Clear objects allocated to BANK1 (23 bytes)
   239  001B70  EE01  F0E2         	lfsr	0,__pbssBANK1
   240  001B74  0E17               	movlw	23
   241  001B76                     clear_1:
   242  001B76  6AEE               	clrf	postinc0,c
   243  001B78  06E8               	decf	wreg,f,c
   244  001B7A  E1FD               	bnz	clear_1
   245                           
   246                           ; Clear objects allocated to BANK0 (8 bytes)
   247  001B7C  EE00  F0CB         	lfsr	0,__pbssBANK0
   248  001B80  0E08               	movlw	8
   249  001B82                     clear_2:
   250  001B82  6AEE               	clrf	postinc0,c
   251  001B84  06E8               	decf	wreg,f,c
   252  001B86  E1FD               	bnz	clear_2
   253                           
   254                           ; Clear objects allocated to COMRAM (2 bytes)
   255  001B88  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   256  001B8A  6A32               	clrf	__pbssCOMRAM& (0+255),c
   257  001B8C                     end_of_initialization:
   258                           	opt stack 0
   259  001B8C                     __end_of__initialization:
   260                           	opt stack 0
   261  001B8C  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   262  001B8E  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   263  001B90  0E00               	movlw	low (__Lmediumconst shr (0+16))
   264  001B92  6EF8               	movwf	tblptru,c
   265  001B94  0100               	movlb	0
   266  001B96  EFA8  F001         	goto	_main	;jump to C main() function
   267                           tblptru	equ	0xFF8
   268                           postinc0	equ	0xFEE
   269                           wreg	equ	0xFE8
   270                           
   271                           	psect	bssCOMRAM
   272  000032                     __pbssCOMRAM:
   273                           	opt stack 0
   274  000032                     _mode:
   275                           	opt stack 0
   276  000032                     	ds	1
   277  000033                     _i:
   278                           	opt stack 0
   279  000033                     	ds	1
   280                           tblptru	equ	0xFF8
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284                           	psect	bssBANK0
   285  0000CB                     __pbssBANK0:
   286                           	opt stack 0
   287  0000CB                     ScanWithRange@F3555:
   288                           	opt stack 0
   289  0000CB                     	ds	4
   290  0000CF                     ScanIR@F3541:
   291                           	opt stack 0
   292  0000CF                     	ds	4
   293                           tblptru	equ	0xFF8
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssBANK1
   298  0001E2                     __pbssBANK1:
   299                           	opt stack 0
   300  0001E2                     main@F3557:
   301                           	opt stack 0
   302  0001E2                     	ds	4
   303  0001E6                     _ReceivedString:
   304                           	opt stack 0
   305  0001E6                     	ds	16
   306  0001F6                     _millis:
   307                           	opt stack 0
   308  0001F6                     	ds	2
   309  0001F8                     _RFID_Read:
   310                           	opt stack 0
   311  0001F8                     	ds	1
   312                           tblptru	equ	0xFF8
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           
   316                           	psect	bssBANK2
   317  000200                     __pbssBANK2:
   318                           	opt stack 0
   319  000200                     main@F3552:
   320                           	opt stack 0
   321  000200                     	ds	100
   322  000264                     main@F3554:
   323                           	opt stack 0
   324  000264                     	ds	50
   325                           tblptru	equ	0xFF8
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	cstackBANK1
   330  000100                     __pcstackBANK1:
   331                           	opt stack 0
   332  000100                     main@buf:
   333                           	opt stack 0
   334                           
   335                           ; 40 bytes @ 0x0
   336  000100                     	ds	40
   337  000128                     main@MoveType:
   338                           	opt stack 0
   339                           
   340                           ; 50 bytes @ 0x28
   341  000128                     	ds	50
   342  00015A                     main@MoveTime:
   343                           	opt stack 0
   344                           
   345                           ; 100 bytes @ 0x5A
   346  00015A                     	ds	100
   347  0001BE                     main@Message:
   348                           	opt stack 0
   349                           
   350                           ; 10 bytes @ 0xBE
   351  0001BE                     	ds	10
   352  0001C8                     main@ScanAngle:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0xC8
   356  0001C8                     	ds	1
   357  0001C9                     main@SensorResult:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0xC9
   361  0001C9                     	ds	4
   362  0001CD                     main@DirectionFound:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0xCD
   366  0001CD                     	ds	1
   367  0001CE                     main@i:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0xCE
   371  0001CE                     	ds	1
   372  0001CF                     main@Move:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0xCF
   376  0001CF                     	ds	1
   377  0001D0                     main@mL:
   378                           	opt stack 0
   379                           
   380                           ; 9 bytes @ 0xD0
   381  0001D0                     	ds	9
   382  0001D9                     main@mR:
   383                           	opt stack 0
   384                           
   385                           ; 9 bytes @ 0xD9
   386  0001D9                     	ds	9
   387                           tblptru	equ	0xFF8
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391                           	psect	cstackBANK0
   392  000060                     __pcstackBANK0:
   393                           	opt stack 0
   394  000060                     ??_initLCD:
   395  000060                     ?___awdiv:
   396                           	opt stack 0
   397  000060                     SetLine@line:
   398                           	opt stack 0
   399  000060                     VerifySignal@i:
   400                           	opt stack 0
   401  000060                     ___lwdiv@counter:
   402                           	opt stack 0
   403  000060                     grabRightIR@IR_signal:
   404                           	opt stack 0
   405  000060                     grabLeftIR@IR_signal:
   406                           	opt stack 0
   407  000060                     LCD_String@string:
   408                           	opt stack 0
   409  000060                     ___awdiv@dividend:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x0
   413  000060                     	ds	1
   414  000061                     VerifySignal@checksum:
   415                           	opt stack 0
   416  000061                     ___lwdiv@quotient:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x1
   420  000061                     	ds	1
   421  000062                     grabRightIR@i:
   422                           	opt stack 0
   423  000062                     grabLeftIR@i:
   424                           	opt stack 0
   425  000062                     VerifySignal@hexByte:
   426                           	opt stack 0
   427  000062                     ___awdiv@divisor:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x2
   431  000062                     	ds	1
   432  000063                     ?___lwmod:
   433                           	opt stack 0
   434  000063                     ___lwmod@dividend:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x3
   438  000063                     	ds	1
   439  000064                     ___awdiv@counter:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x4
   443  000064                     	ds	1
   444  000065                     ___awdiv@sign:
   445                           	opt stack 0
   446  000065                     ___lwmod@divisor:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x5
   450  000065                     	ds	1
   451  000066                     ___awdiv@quotient:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x6
   455  000066                     	ds	1
   456  000067                     ?_sprintf:
   457                           	opt stack 0
   458  000067                     sprintf@sp:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x7
   462  000067                     	ds	1
   463  000068                     setMotorPWM@m:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x8
   467  000068                     	ds	1
   468  000069                     sprintf@f:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x9
   472  000069                     	ds	1
   473  00006A                     ??_setMotorPWM:
   474                           
   475                           ; 1 bytes @ 0xA
   476  00006A                     	ds	5
   477  00006F                     ??_sprintf:
   478  00006F                     setMotorPWM@PWMduty:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0xF
   482  00006F                     	ds	2
   483  000071                     stop@mL:
   484                           	opt stack 0
   485  000071                     fullSpeed@mL:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x11
   489  000071                     	ds	2
   490  000073                     stop@mR:
   491                           	opt stack 0
   492  000073                     fullSpeed@mR:
   493                           	opt stack 0
   494  000073                     sprintf@ap:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x13
   498  000073                     	ds	2
   499  000075                     fullSpeed@power:
   500                           	opt stack 0
   501  000075                     sprintf@prec:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x15
   505  000075                     	ds	1
   506  000076                     sprintf@val:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x16
   510  000076                     	ds	1
   511  000077                     turnLeft@mL:
   512                           	opt stack 0
   513  000077                     turnRight@mL:
   514                           	opt stack 0
   515  000077                     fullSpeedBack@mL:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x17
   519  000077                     	ds	1
   520  000078                     sprintf@flag:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x18
   524  000078                     	ds	1
   525  000079                     turnLeft@mR:
   526                           	opt stack 0
   527  000079                     turnRight@mR:
   528                           	opt stack 0
   529  000079                     fullSpeedBack@mR:
   530                           	opt stack 0
   531  000079                     sprintf@width:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x19
   535  000079                     	ds	2
   536  00007B                     turnLeft@power:
   537                           	opt stack 0
   538  00007B                     turnRight@power:
   539                           	opt stack 0
   540  00007B                     fullSpeedBack@power:
   541                           	opt stack 0
   542  00007B                     sprintf@c:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x1B
   546  00007B                     	ds	1
   547  00007C                     ScanIR@mL:
   548                           	opt stack 0
   549  00007C                     ScanWithRange@mL:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x1C
   553  00007C                     	ds	2
   554  00007E                     ScanIR@mR:
   555                           	opt stack 0
   556  00007E                     ScanWithRange@mR:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x1E
   560  00007E                     	ds	2
   561  000080                     ??_ScanIR:
   562  000080                     ScanWithRange@loops:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x20
   566  000080                     	ds	1
   567  000081                     ScanIR@buf:
   568                           	opt stack 0
   569                           
   570                           ; 40 bytes @ 0x21
   571  000081                     	ds	1
   572  000082                     ScanWithRange@MoveTime:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x22
   576  000082                     	ds	2
   577  000084                     ScanWithRange@Move:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x24
   581  000084                     	ds	2
   582  000086                     ScanWithRange@MoveType:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x26
   586  000086                     	ds	2
   587  000088                     ScanWithRange@RFID_Read:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x28
   591  000088                     	ds	2
   592  00008A                     ScanWithRange@millis:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x2A
   596  00008A                     	ds	2
   597  00008C                     ??_ScanWithRange:
   598                           
   599                           ; 1 bytes @ 0x2C
   600  00008C                     	ds	4
   601  000090                     ScanWithRange@buf:
   602                           	opt stack 0
   603                           
   604                           ; 40 bytes @ 0x30
   605  000090                     	ds	25
   606  0000A9                     ScanIR@DirectionMoveThreshold:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x49
   610  0000A9                     	ds	2
   611  0000AB                     ScanIR@SensorResult:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x4B
   615  0000AB                     	ds	13
   616  0000B8                     ScanWithRange@i:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x58
   620  0000B8                     	ds	2
   621  0000BA                     ScanWithRange@DirectionFoundThreshold:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x5A
   625  0000BA                     	ds	2
   626  0000BC                     ScanWithRange@MotorPower:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x5C
   630  0000BC                     	ds	1
   631  0000BD                     ScanWithRange@MiniLeftFlick:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x5D
   635  0000BD                     	ds	1
   636  0000BE                     ScanWithRange@LeftFlag:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x5E
   640  0000BE                     	ds	2
   641  0000C0                     ScanWithRange@TimeAboveThreshold:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x60
   645  0000C0                     	ds	2
   646  0000C2                     ScanWithRange@SensorResult:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x62
   650  0000C2                     	ds	4
   651  0000C6                     ScanWithRange@LeftFlick:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x66
   655  0000C6                     	ds	1
   656  0000C7                     ScanWithRange@RightFlag:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x67
   660  0000C7                     	ds	2
   661  0000C9                     ??_main:
   662                           
   663                           ; 1 bytes @ 0x69
   664  0000C9                     	ds	2
   665                           tblptru	equ	0xFF8
   666                           postinc0	equ	0xFEE
   667                           wreg	equ	0xFE8
   668                           
   669                           	psect	cstackCOMRAM
   670  000001                     __pcstackCOMRAM:
   671                           	opt stack 0
   672  000001                     ??i2_delay_tenth_s:
   673                           
   674                           ; 1 bytes @ 0x0
   675  000001                     	ds	1
   676  000002                     i2delay_tenth_s@tenth_seconds:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x1
   680  000002                     	ds	1
   681  000003                     i2delay_tenth_s@i:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x2
   685  000003                     	ds	2
   686  000005                     ??_InterruptHandlerHigh:
   687                           
   688                           ; 1 bytes @ 0x4
   689  000005                     	ds	18
   690  000017                     ??_InterruptHandlerLow:
   691                           
   692                           ; 1 bytes @ 0x16
   693  000017                     	ds	21
   694  00002C                     ??_isdigit:
   695  00002C                     ??_LCDout:
   696  00002C                     ??_delay_tenth_s:
   697  00002C                     ?_grabRightIR:
   698                           	opt stack 0
   699  00002C                     ?_grabLeftIR:
   700                           	opt stack 0
   701  00002C                     ?___wmul:
   702                           	opt stack 0
   703  00002C                     ?___lwdiv:
   704                           	opt stack 0
   705  00002C                     enableSensor@status:
   706                           	opt stack 0
   707  00002C                     VerifySignal@RecievedString:
   708                           	opt stack 0
   709  00002C                     ___wmul@multiplier:
   710                           	opt stack 0
   711  00002C                     ___lwdiv@dividend:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x2B
   715  00002C                     	ds	1
   716  00002D                     enableSensor@sensor:
   717                           	opt stack 0
   718  00002D                     delay_tenth_s@tenth_seconds:
   719                           	opt stack 0
   720  00002D                     _isdigit$1772:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x2C
   724  00002D                     	ds	1
   725  00002E                     ??_grabRightIR:
   726  00002E                     ??_grabLeftIR:
   727  00002E                     ??_VerifySignal:
   728  00002E                     isdigit@c:
   729                           	opt stack 0
   730  00002E                     delay_tenth_s@i:
   731                           	opt stack 0
   732  00002E                     ___wmul@multiplicand:
   733                           	opt stack 0
   734  00002E                     ___lwdiv@divisor:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x2D
   738  00002E                     	ds	1
   739  00002F                     LCDout@number:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x2E
   743  00002F                     	ds	1
   744  000030                     SendLCD@type:
   745                           	opt stack 0
   746  000030                     ___lwmod@counter:
   747                           	opt stack 0
   748  000030                     ___wmul@product:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x2F
   752  000030                     	ds	1
   753  000031                     SendLCD@Byte:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x30
   757  000031                     	ds	1
   758  000032                     tblptru	equ	0xFF8
   759                           postinc0	equ	0xFEE
   760                           wreg	equ	0xFE8
   761                           
   762                           ; 1 bytes @ 0x31
   763 ;;
   764 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   765 ;;
   766 ;; *************** function _main *****************
   767 ;; Defined at:
   768 ;;		line 55 in file "main.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  MoveTime      100   90[BANK1 ] int [50]
   773 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   774 ;;  buf            40    0[BANK1 ] unsigned char [40]
   775 ;;  Message        10  190[BANK1 ] unsigned char [10]
   776 ;;  mR              9  217[BANK1 ] struct DC_motor
   777 ;;  mL              9  208[BANK1 ] struct DC_motor
   778 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   779 ;;  Move            1  207[BANK1 ] char 
   780 ;;  i               1  206[BANK1 ] unsigned char 
   781 ;;  DirectionFou    1  205[BANK1 ] char 
   782 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   792 ;;      Params:         0       0       0       0
   793 ;;      Locals:         0       0     226       0
   794 ;;      Temps:          0       2       0       0
   795 ;;      Totals:         0       2     226       0
   796 ;;Total ram usage:      228 bytes
   797 ;; Hardware stack levels required when called:    8
   798 ;; This function calls:
   799 ;;		_LCD_String
   800 ;;		_ScanIR
   801 ;;		_ScanWithRange
   802 ;;		_SendLCD
   803 ;;		_SetLine
   804 ;;		_VerifySignal
   805 ;;		_delay_tenth_s
   806 ;;		_enableSensor
   807 ;;		_fullSpeed
   808 ;;		_fullSpeedBack
   809 ;;		_grabLeftIR
   810 ;;		_grabRightIR
   811 ;;		_initIR
   812 ;;		_initLCD
   813 ;;		_initMotorPWM
   814 ;;		_initRFID
   815 ;;		_initTimer
   816 ;;		_sprintf
   817 ;;		_stop
   818 ;;		_turnLeft
   819 ;;		_turnRight
   820 ;; This function is called by:
   821 ;;		Startup code after reset
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text0
   826  000350                     __ptext0:
   827                           	opt stack 0
   828  000350                     _main:
   829                           	opt stack 23
   830                           
   831                           ;main.c: 58: unsigned char Message[10];
   832                           ;main.c: 59: unsigned char i=0;
   833                           
   834                           ;incstack = 0
   835  000350  0E00               	movlw	0
   836  000352  0101               	movlb	1	; () banked
   837  000354  6FCE               	movwf	main@i& (0+255),b
   838                           
   839                           ;main.c: 60: signed char DirectionFound=0;
   840  000356  0E00               	movlw	0
   841  000358  6FCD               	movwf	main@DirectionFound& (0+255),b
   842                           
   843                           ; BSR set to: 1
   844                           ;main.c: 61: signed int MoveTime[50] = { 0 };
   845  00035A  EE22  F000         	lfsr	2,main@F3552
   846  00035E  EE11  F05A         	lfsr	1,main@MoveTime
   847  000362  0E63               	movlw	99
   848  000364                     u2971:
   849  000364  CFDB FFE3          	movff	plusw2,plusw1
   850  000368  06E8               	decf	wreg,f,c
   851  00036A  E2FC               	bc	u2971
   852                           
   853                           ; BSR set to: 1
   854                           ;main.c: 64: unsigned char MoveType[50] = { 0 };
   855  00036C  EE22  F064         	lfsr	2,main@F3554
   856  000370  EE11  F028         	lfsr	1,main@MoveType
   857  000374  0E31               	movlw	49
   858  000376                     u2981:
   859  000376  CFDB FFE3          	movff	plusw2,plusw1
   860  00037A  06E8               	decf	wreg,f,c
   861  00037C  E2FC               	bc	u2981
   862                           
   863                           ;main.c: 67: signed char Move=0;
   864  00037E  0E00               	movlw	0
   865  000380  6FCF               	movwf	main@Move& (0+255),b
   866                           
   867                           ; BSR set to: 1
   868                           ;main.c: 68: unsigned int SensorResult[2]={0,0};
   869  000382  C1E2  F1C9         	movff	main@F3557,main@SensorResult
   870  000386  C1E3  F1CA         	movff	main@F3557+1,main@SensorResult+1
   871  00038A  C1E4  F1CB         	movff	main@F3557+2,main@SensorResult+2
   872  00038E  C1E5  F1CC         	movff	main@F3557+3,main@SensorResult+3
   873                           
   874                           ;main.c: 69: char buf[40];
   875                           ;main.c: 71: unsigned char ScanAngle=60;
   876  000392  0E3C               	movlw	60
   877  000394  6FC8               	movwf	main@ScanAngle& (0+255),b
   878                           
   879                           ; BSR set to: 1
   880                           ;main.c: 80: INTCONbits.GIEH=1;
   881  000396  8EF2               	bsf	intcon,7,c	;volatile
   882                           
   883                           ; BSR set to: 1
   884                           ;main.c: 81: INTCONbits.GIEL=1;
   885  000398  8CF2               	bsf	intcon,6,c	;volatile
   886                           
   887                           ; BSR set to: 1
   888                           ;main.c: 82: INTCONbits.PEIE=1;
   889  00039A  8CF2               	bsf	intcon,6,c	;volatile
   890                           
   891                           ; BSR set to: 1
   892                           ;main.c: 83: RCONbits.IPEN=1;
   893  00039C  8ED0               	bsf	4048,7,c	;volatile
   894                           
   895                           ; BSR set to: 1
   896                           ;main.c: 86: IPR1bits.RCIP=0;
   897  00039E  9A9F               	bcf	3999,5,c	;volatile
   898                           
   899                           ; BSR set to: 1
   900                           ;main.c: 87: PIE1bits.RCIE=1;
   901  0003A0  8A9D               	bsf	3997,5,c	;volatile
   902                           
   903                           ; BSR set to: 1
   904                           ;main.c: 90: TRISCbits.RC3=1;
   905  0003A2  8694               	bsf	3988,3,c	;volatile
   906                           
   907                           ; BSR set to: 1
   908                           ;main.c: 91: INTCONbits.INT0IE=1;
   909  0003A4  88F2               	bsf	intcon,4,c	;volatile
   910                           
   911                           ; BSR set to: 1
   912                           ;main.c: 94: PIR1bits.RC1IF=0;
   913  0003A6  9A9E               	bcf	3998,5,c	;volatile
   914                           
   915                           ; BSR set to: 1
   916                           ;main.c: 95: INTCONbits.INT0IF=0;
   917  0003A8  92F2               	bcf	intcon,1,c	;volatile
   918                           
   919                           ;main.c: 98: struct DC_motor mL, mR;
   920                           ;main.c: 99: mL.power=0;
   921  0003AA  0E00               	movlw	0
   922  0003AC  6FD0               	movwf	main@mL& (0+255),b
   923                           
   924                           ;main.c: 100: mL.direction=1;
   925  0003AE  0E01               	movlw	1
   926  0003B0  6FD1               	movwf	(main@mL+1)& (0+255),b
   927                           
   928                           ; BSR set to: 1
   929                           ;main.c: 101: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   930  0003B2  0E79               	movlw	121
   931  0003B4  6FD2               	movwf	(main@mL+2)& (0+255),b
   932  0003B6  0E0F               	movlw	15
   933  0003B8  6FD3               	movwf	(main@mL+3)& (0+255),b
   934                           
   935                           ; BSR set to: 1
   936                           ;main.c: 102: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   937  0003BA  0E78               	movlw	120
   938  0003BC  6FD4               	movwf	(main@mL+4)& (0+255),b
   939  0003BE  0E0F               	movlw	15
   940  0003C0  6FD5               	movwf	(main@mL+5)& (0+255),b
   941                           
   942                           ;main.c: 103: mL.dir_pin=0;
   943  0003C2  0E00               	movlw	0
   944  0003C4  6FD6               	movwf	(main@mL+6)& (0+255),b
   945                           
   946                           ;main.c: 104: mL.PWMperiod=199;
   947  0003C6  0E00               	movlw	0
   948  0003C8  6FD8               	movwf	(main@mL+8)& (0+255),b
   949  0003CA  0EC7               	movlw	199
   950  0003CC  6FD7               	movwf	(main@mL+7)& (0+255),b
   951                           
   952                           ;main.c: 106: mR.power=0;
   953  0003CE  0E00               	movlw	0
   954  0003D0  6FD9               	movwf	main@mR& (0+255),b
   955                           
   956                           ;main.c: 107: mR.direction=1;
   957  0003D2  0E01               	movlw	1
   958  0003D4  6FDA               	movwf	(main@mR+1)& (0+255),b
   959                           
   960                           ; BSR set to: 1
   961                           ;main.c: 108: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   962  0003D6  0E77               	movlw	119
   963  0003D8  6FDB               	movwf	(main@mR+2)& (0+255),b
   964  0003DA  0E0F               	movlw	15
   965  0003DC  6FDC               	movwf	(main@mR+3)& (0+255),b
   966                           
   967                           ; BSR set to: 1
   968                           ;main.c: 109: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   969  0003DE  0E76               	movlw	118
   970  0003E0  6FDD               	movwf	(main@mR+4)& (0+255),b
   971  0003E2  0E0F               	movlw	15
   972  0003E4  6FDE               	movwf	(main@mR+5)& (0+255),b
   973                           
   974                           ;main.c: 110: mR.dir_pin=2;
   975  0003E6  0E02               	movlw	2
   976  0003E8  6FDF               	movwf	(main@mR+6)& (0+255),b
   977                           
   978                           ;main.c: 111: mR.PWMperiod=199;
   979  0003EA  0E00               	movlw	0
   980  0003EC  6FE1               	movwf	(main@mR+8)& (0+255),b
   981  0003EE  0EC7               	movlw	199
   982  0003F0  6FE0               	movwf	(main@mR+7)& (0+255),b
   983                           
   984                           ;main.c: 113: OSCCON = 0b1110010;
   985  0003F2  0E72               	movlw	114
   986  0003F4  6ED3               	movwf	4051,c	;volatile
   987  0003F6                     
   988                           ; BSR set to: 1
   989  0003F6  B4D3               	btfsc	4051,2,c	;volatile
   990  0003F8  D300               	goto	l3721
   991  0003FA  D7FD               	goto	l389
   992  0003FC                     
   993                           ;main.c: 125: stop(&mL, &mR);
   994  0003FC  0ED0               	movlw	low main@mL
   995  0003FE  0100               	movlb	0	; () banked
   996  000400  6F71               	movwf	stop@mL& (0+255),b
   997  000402  0E01               	movlw	high main@mL
   998  000404  6F72               	movwf	(stop@mL+1)& (0+255),b
   999  000406  0ED9               	movlw	low main@mR
  1000  000408  6F73               	movwf	stop@mR& (0+255),b
  1001  00040A  0E01               	movlw	high main@mR
  1002  00040C  6F74               	movwf	(stop@mR+1)& (0+255),b
  1003  00040E  EC1A  F00B         	call	_stop	;wreg free
  1004                           
  1005                           ;main.c: 128: RFID_Read=0;
  1006  000412  0E00               	movlw	0
  1007  000414  0101               	movlb	1	; () banked
  1008  000416  6FF8               	movwf	_RFID_Read& (0+255),b	;volatile
  1009                           
  1010                           ; BSR set to: 1
  1011                           ;main.c: 129: Move=0;
  1012  000418  0E00               	movlw	0
  1013  00041A  6FCF               	movwf	main@Move& (0+255),b
  1014                           
  1015                           ; BSR set to: 1
  1016                           ;main.c: 132: SensorResult[0]=grabLeftIR();
  1017  00041C  EC1F  F00C         	call	_grabLeftIR	;wreg free
  1018  000420  C02C  F1C9         	movff	?_grabLeftIR,main@SensorResult
  1019  000424  C02D  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1020                           
  1021                           ;main.c: 133: SensorResult[1]=grabRightIR();
  1022  000428  ECE4  F00B         	call	_grabRightIR	;wreg free
  1023  00042C  C02C  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1024  000430  C02D  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1025                           
  1026                           ;main.c: 137: CAP1BUFH=0;
  1027  000434  0E00               	movlw	0
  1028  000436  6E69               	movwf	3945,c	;volatile
  1029                           
  1030                           ;main.c: 138: CAP1BUFL=0;
  1031  000438  0E00               	movlw	0
  1032  00043A  6E68               	movwf	3944,c	;volatile
  1033                           
  1034                           ;main.c: 139: CAP2BUFH=0;
  1035  00043C  0E00               	movlw	0
  1036  00043E  6E67               	movwf	3943,c	;volatile
  1037                           
  1038                           ;main.c: 140: CAP2BUFL=0;
  1039  000440  0E00               	movlw	0
  1040  000442  6E66               	movwf	3942,c	;volatile
  1041                           
  1042                           ;main.c: 143: SendLCD(0b00000001,0);
  1043  000444  0E00               	movlw	0
  1044  000446  6E30               	movwf	SendLCD@type,c
  1045  000448  0E01               	movlw	1
  1046  00044A  ECE8  F00D         	call	_SendLCD
  1047                           
  1048                           ;main.c: 144: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1049  00044E  0E21               	movlw	33
  1050  000450                     u3257:
  1051  000450  2EE8               	decfsz	wreg,f,c
  1052  000452  D7FE               	bra	u3257
  1053  000454  F000               	nop	
  1054                           
  1055                           ;main.c: 145: SendLCD(0b00000010,0);
  1056  000456  0E00               	movlw	0
  1057  000458  6E30               	movwf	SendLCD@type,c
  1058  00045A  0E02               	movlw	2
  1059  00045C  ECE8  F00D         	call	_SendLCD
  1060                           
  1061                           ;main.c: 146: _delay((unsigned long)((2)*(8000000/4000.0)));
  1062  000460  0E06               	movlw	6
  1063  000462  0100               	movlb	0	; () banked
  1064  000464  6FC9               	movwf	??_main& (0+255),b
  1065  000466  0E30               	movlw	48
  1066  000468                     u3267:
  1067  000468  2EE8               	decfsz	wreg,f,c
  1068  00046A  D7FE               	bra	u3267
  1069  00046C  2FC9               	decfsz	??_main& (0+255),f,b
  1070  00046E  D7FC               	bra	u3267
  1071  000470  F000               	nop	
  1072                           
  1073                           ;main.c: 147: SetLine(1);
  1074  000472  0E01               	movlw	1
  1075  000474  ECCD  F00D         	call	_SetLine
  1076                           
  1077                           ;main.c: 148: if (Message[0]==0) {
  1078  000478  0101               	movlb	1	; () banked
  1079  00047A  51BE               	movf	main@Message& (0+255),w,b
  1080  00047C  A4D8               	btfss	status,2,c
  1081  00047E  D008               	goto	l394
  1082                           
  1083                           ; BSR set to: 1
  1084                           ;main.c: 149: LCD_String("      Inert Mode");
  1085  000480  0E1C               	movlw	low STR_5
  1086  000482  0100               	movlb	0	; () banked
  1087  000484  6F60               	movwf	LCD_String@string& (0+255),b
  1088  000486  0E03               	movlw	high STR_5
  1089  000488  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1090  00048A  EC5A  F00C         	call	_LCD_String	;wreg free
  1091                           
  1092                           ;main.c: 150: } else {
  1093  00048E  D007               	goto	l395
  1094  000490                     l394:
  1095                           
  1096                           ;main.c: 151: LCD_String(Message);
  1097  000490  0EBE               	movlw	low main@Message
  1098  000492  0100               	movlb	0	; () banked
  1099  000494  6F60               	movwf	LCD_String@string& (0+255),b
  1100  000496  0E01               	movlw	high main@Message
  1101  000498  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1102  00049A  EC5A  F00C         	call	_LCD_String	;wreg free
  1103  00049E                     l395:
  1104                           
  1105                           ;main.c: 152: }
  1106                           ;main.c: 153: SetLine(2);
  1107  00049E  0E02               	movlw	2
  1108  0004A0  ECCD  F00D         	call	_SetLine
  1109                           
  1110                           ;main.c: 154: if (RFID_Read) {
  1111  0004A4  0101               	movlb	1	; () banked
  1112  0004A6  51F8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1113  0004A8  B4D8               	btfsc	status,2,c
  1114  0004AA  D008               	goto	l396
  1115                           
  1116                           ; BSR set to: 1
  1117                           ;main.c: 155: LCD_String(Message);
  1118  0004AC  0EBE               	movlw	low main@Message
  1119  0004AE  0100               	movlb	0	; () banked
  1120  0004B0  6F60               	movwf	LCD_String@string& (0+255),b
  1121  0004B2  0E01               	movlw	high main@Message
  1122  0004B4  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1123  0004B6  EC5A  F00C         	call	_LCD_String	;wreg free
  1124                           
  1125                           ;main.c: 156: } else {
  1126  0004BA  D29F               	goto	l3721
  1127  0004BC                     l396:
  1128                           
  1129                           ;main.c: 157: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1130  0004BC  0E00               	movlw	low main@buf
  1131  0004BE  0100               	movlb	0	; () banked
  1132  0004C0  6F67               	movwf	sprintf@sp& (0+255),b
  1133  0004C2  0E01               	movlw	high main@buf
  1134  0004C4  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  1135  0004C6  0E0B               	movlw	low STR_6
  1136  0004C8  6F69               	movwf	sprintf@f& (0+255),b
  1137  0004CA  0E03               	movlw	high STR_6
  1138  0004CC  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  1139  0004CE  C1C9  F06B         	movff	main@SensorResult,?_sprintf+4
  1140  0004D2  C1CA  F06C         	movff	main@SensorResult+1,?_sprintf+5
  1141  0004D6  C1CB  F06D         	movff	main@SensorResult+2,?_sprintf+6
  1142  0004DA  C1CC  F06E         	movff	main@SensorResult+3,?_sprintf+7
  1143  0004DE  EC8D  F007         	call	_sprintf	;wreg free
  1144                           
  1145                           ;main.c: 158: LCD_String(buf);
  1146  0004E2  0E00               	movlw	low main@buf
  1147  0004E4  0100               	movlb	0	; () banked
  1148  0004E6  6F60               	movwf	LCD_String@string& (0+255),b
  1149  0004E8  0E01               	movlw	high main@buf
  1150  0004EA  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1151  0004EC  EC5A  F00C         	call	_LCD_String	;wreg free
  1152                           
  1153                           ;main.c: 159: }
  1154                           ;main.c: 161: break;
  1155  0004F0  D284               	goto	l3721
  1156  0004F2                     
  1157                           ;main.c: 165: initMotorPWM();
  1158  0004F2  EC5D  F00D         	call	_initMotorPWM	;wreg free
  1159                           
  1160                           ;main.c: 166: initTimer();
  1161  0004F6  EC54  F00E         	call	_initTimer	;wreg free
  1162                           
  1163                           ;main.c: 167: initRFID();
  1164  0004FA  EC46  F00E         	call	_initRFID	;wreg free
  1165                           
  1166                           ;main.c: 168: initLCD();
  1167  0004FE  EC59  F00A         	call	_initLCD	;wreg free
  1168                           
  1169                           ;main.c: 169: initIR();
  1170  000502  EC26  F00E         	call	_initIR	;wreg free
  1171                           
  1172                           ;main.c: 171: enableSensor(0, 1);
  1173  000506  0E01               	movlw	1
  1174  000508  6E2C               	movwf	enableSensor@status,c
  1175  00050A  0E00               	movlw	0
  1176  00050C  EC00  F00E         	call	_enableSensor
  1177                           
  1178                           ;main.c: 172: enableSensor(1, 1);
  1179  000510  0E01               	movlw	1
  1180  000512  6E2C               	movwf	enableSensor@status,c
  1181  000514  0E01               	movlw	1
  1182  000516  EC00  F00E         	call	_enableSensor
  1183                           
  1184                           ;main.c: 175: fullSpeed(&mL, &mR, 100);
  1185  00051A  0ED0               	movlw	low main@mL
  1186  00051C  0100               	movlb	0	; () banked
  1187  00051E  6F71               	movwf	fullSpeed@mL& (0+255),b
  1188  000520  0E01               	movlw	high main@mL
  1189  000522  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1190  000524  0ED9               	movlw	low main@mR
  1191  000526  6F73               	movwf	fullSpeed@mR& (0+255),b
  1192  000528  0E01               	movlw	high main@mR
  1193  00052A  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1194  00052C  0E64               	movlw	100
  1195  00052E  6F75               	movwf	fullSpeed@power& (0+255),b
  1196  000530  ECA6  F00B         	call	_fullSpeed	;wreg free
  1197                           
  1198                           ;main.c: 176: delay_tenth_s(1);
  1199  000534  0E01               	movlw	1
  1200  000536  EC7A  F00D         	call	_delay_tenth_s
  1201  00053A  D25E               	goto	l3719
  1202  00053C                     
  1203                           ;main.c: 184: SetLine(1);
  1204  00053C  0E01               	movlw	1
  1205  00053E  ECCD  F00D         	call	_SetLine
  1206                           
  1207                           ;main.c: 185: LCD_String("Searching");
  1208  000542  0E44               	movlw	low STR_7
  1209  000544  0100               	movlb	0	; () banked
  1210  000546  6F60               	movwf	LCD_String@string& (0+255),b
  1211  000548  0E03               	movlw	high STR_7
  1212  00054A  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1213  00054C  EC5A  F00C         	call	_LCD_String	;wreg free
  1214                           
  1215                           ;main.c: 187: if (DirectionFound==-1) {
  1216  000550  0101               	movlb	1	; () banked
  1217  000552  29CD               	incf	main@DirectionFound& (0+255),w,b
  1218  000554  A4D8               	btfss	status,2,c
  1219  000556  D034               	goto	l401
  1220                           
  1221                           ; BSR set to: 1
  1222                           ;main.c: 192: MoveType[Move]=0;
  1223  000558  51CF               	movf	main@Move& (0+255),w,b
  1224  00055A  0D01               	mullw	1
  1225  00055C  0E28               	movlw	low main@MoveType
  1226  00055E  24F3               	addwf	prodl,w,c
  1227  000560  6ED9               	movwf	fsr2l,c
  1228  000562  0E01               	movlw	high main@MoveType
  1229  000564  20F4               	addwfc	prodh,w,c
  1230  000566  6EDA               	movwf	fsr2h,c
  1231  000568  0E00               	movlw	0
  1232  00056A  6EDF               	movwf	indf2,c
  1233                           
  1234                           ;main.c: 193: MoveTime[Move]=6;
  1235  00056C  51CF               	movf	main@Move& (0+255),w,b
  1236  00056E  0D02               	mullw	2
  1237  000570  0E5A               	movlw	low main@MoveTime
  1238  000572  24F3               	addwf	prodl,w,c
  1239  000574  6ED9               	movwf	fsr2l,c
  1240  000576  0E01               	movlw	high main@MoveTime
  1241  000578  20F4               	addwfc	prodh,w,c
  1242  00057A  6EDA               	movwf	fsr2h,c
  1243  00057C  0E06               	movlw	6
  1244  00057E  6EDE               	movwf	postinc2,c
  1245  000580  0E00               	movlw	0
  1246  000582  6EDD               	movwf	postdec2,c
  1247                           
  1248                           ; BSR set to: 1
  1249                           ;main.c: 194: Move++;
  1250  000584  2BCF               	incf	main@Move& (0+255),f,b
  1251                           
  1252                           ; BSR set to: 1
  1253                           ;main.c: 195: fullSpeed(&mL, &mR, 100);
  1254  000586  0ED0               	movlw	low main@mL
  1255  000588  0100               	movlb	0	; () banked
  1256  00058A  6F71               	movwf	fullSpeed@mL& (0+255),b
  1257  00058C  0E01               	movlw	high main@mL
  1258  00058E  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1259  000590  0ED9               	movlw	low main@mR
  1260  000592  6F73               	movwf	fullSpeed@mR& (0+255),b
  1261  000594  0E01               	movlw	high main@mR
  1262  000596  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1263  000598  0E64               	movlw	100
  1264  00059A  6F75               	movwf	fullSpeed@power& (0+255),b
  1265  00059C  ECA6  F00B         	call	_fullSpeed	;wreg free
  1266                           
  1267                           ;main.c: 196: delay_tenth_s(6);
  1268  0005A0  0E06               	movlw	6
  1269  0005A2  EC7A  F00D         	call	_delay_tenth_s
  1270                           
  1271                           ;main.c: 197: stop(&mL,&mR);
  1272  0005A6  0ED0               	movlw	low main@mL
  1273  0005A8  0100               	movlb	0	; () banked
  1274  0005AA  6F71               	movwf	stop@mL& (0+255),b
  1275  0005AC  0E01               	movlw	high main@mL
  1276  0005AE  6F72               	movwf	(stop@mL+1)& (0+255),b
  1277  0005B0  0ED9               	movlw	low main@mR
  1278  0005B2  6F73               	movwf	stop@mR& (0+255),b
  1279  0005B4  0E01               	movlw	high main@mR
  1280  0005B6  6F74               	movwf	(stop@mR+1)& (0+255),b
  1281  0005B8  EC1A  F00B         	call	_stop	;wreg free
  1282                           
  1283                           ;main.c: 198: DirectionFound=0;
  1284  0005BC  0E00               	movlw	0
  1285  0005BE  D034               	goto	L2
  1286  0005C0                     l401:
  1287                           
  1288                           ; BSR set to: 1
  1289                           
  1290                           ; BSR set to: 1
  1291  0005C0  51CD               	movf	main@DirectionFound& (0+255),w,b
  1292  0005C2  A4D8               	btfss	status,2,c
  1293  0005C4  D023               	goto	l403
  1294                           
  1295                           ; BSR set to: 1
  1296                           ;main.c: 201: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1297                           ;main.c: 202: &MoveTime, &Move, &MoveType, &RFID_Read, &millis);
  1298  0005C6  0ED0               	movlw	low main@mL
  1299  0005C8  0100               	movlb	0	; () banked
  1300  0005CA  6F7C               	movwf	ScanWithRange@mL& (0+255),b
  1301  0005CC  0E01               	movlw	high main@mL
  1302  0005CE  6F7D               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1303  0005D0  0ED9               	movlw	low main@mR
  1304  0005D2  6F7E               	movwf	ScanWithRange@mR& (0+255),b
  1305  0005D4  0E01               	movlw	high main@mR
  1306  0005D6  6F7F               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1307  0005D8  C1C8  F080         	movff	main@ScanAngle,ScanWithRange@loops
  1308  0005DC  6B81               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1309  0005DE  0E5A               	movlw	low main@MoveTime
  1310  0005E0  6F82               	movwf	ScanWithRange@MoveTime& (0+255),b
  1311  0005E2  0E01               	movlw	high main@MoveTime
  1312  0005E4  6F83               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1313  0005E6  0ECF               	movlw	low main@Move
  1314  0005E8  6F84               	movwf	ScanWithRange@Move& (0+255),b
  1315  0005EA  0E01               	movlw	high main@Move
  1316  0005EC  6F85               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1317  0005EE  0E28               	movlw	low main@MoveType
  1318  0005F0  6F86               	movwf	ScanWithRange@MoveType& (0+255),b
  1319  0005F2  0E01               	movlw	high main@MoveType
  1320  0005F4  6F87               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1321  0005F6  0EF8               	movlw	low _RFID_Read
  1322  0005F8  6F88               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1323  0005FA  0E01               	movlw	high _RFID_Read
  1324  0005FC  6F89               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1325  0005FE  0EF6               	movlw	low _millis
  1326  000600  6F8A               	movwf	ScanWithRange@millis& (0+255),b
  1327  000602  0E01               	movlw	high _millis
  1328  000604  6F8B               	movwf	(ScanWithRange@millis+1)& (0+255),b
  1329  000606  EC0E  F005         	call	_ScanWithRange	;wreg free
  1330  00060A  D00E               	goto	L2
  1331  00060C                     l403:
  1332                           
  1333                           ; BSR set to: 1
  1334                           
  1335                           ; BSR set to: 1
  1336  00060C  05CD               	decf	main@DirectionFound& (0+255),w,b
  1337  00060E  A4D8               	btfss	status,2,c
  1338  000610  D00E               	goto	l405
  1339                           
  1340                           ; BSR set to: 1
  1341                           ;main.c: 205: DirectionFound=ScanIR(&mL, &mR);
  1342  000612  0ED0               	movlw	low main@mL
  1343  000614  0100               	movlb	0	; () banked
  1344  000616  6F7C               	movwf	ScanIR@mL& (0+255),b
  1345  000618  0E01               	movlw	high main@mL
  1346  00061A  6F7D               	movwf	(ScanIR@mL+1)& (0+255),b
  1347  00061C  0ED9               	movlw	low main@mR
  1348  00061E  6F7E               	movwf	ScanIR@mR& (0+255),b
  1349  000620  0E01               	movlw	high main@mR
  1350  000622  6F7F               	movwf	(ScanIR@mR+1)& (0+255),b
  1351  000624  EC7C  F009         	call	_ScanIR	;wreg free
  1352  000628                     L2:
  1353  000628  0101               	movlb	1	; () banked
  1354  00062A  6FCD               	movwf	main@DirectionFound& (0+255),b
  1355                           
  1356                           ;main.c: 206: } else if (DirectionFound==2) {
  1357  00062C  D1E6               	goto	l3721
  1358  00062E                     l405:
  1359                           
  1360                           ; BSR set to: 1
  1361                           
  1362                           ; BSR set to: 1
  1363  00062E  0E02               	movlw	2
  1364  000630  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1365  000632  A4D8               	btfss	status,2,c
  1366  000634  D1E2               	goto	l3721
  1367                           
  1368                           ; BSR set to: 1
  1369                           ;main.c: 208: mode=2;
  1370  000636  0E02               	movlw	2
  1371  000638  6E32               	movwf	_mode,c	;volatile
  1372                           
  1373                           ; BSR set to: 1
  1374                           ;main.c: 209: MoveType[Move]=1;
  1375  00063A  51CF               	movf	main@Move& (0+255),w,b
  1376  00063C  0D01               	mullw	1
  1377  00063E  0E28               	movlw	low main@MoveType
  1378  000640  24F3               	addwf	prodl,w,c
  1379  000642  6ED9               	movwf	fsr2l,c
  1380  000644  0E01               	movlw	high main@MoveType
  1381  000646  20F4               	addwfc	prodh,w,c
  1382  000648  6EDA               	movwf	fsr2h,c
  1383  00064A  0E01               	movlw	1
  1384  00064C  6EDF               	movwf	indf2,c
  1385                           
  1386                           ; BSR set to: 1
  1387                           ;main.c: 210: }
  1388                           ;main.c: 212: break;
  1389                           
  1390                           ; BSR set to: 1
  1391                           
  1392                           ; BSR set to: 1
  1393                           
  1394                           ; BSR set to: 1
  1395  00064E  D1D5               	goto	l3721
  1396  000650                     
  1397                           ;main.c: 219: if (RFID_Read) {
  1398                           
  1399                           ; BSR set to: 1
  1400  000650  0101               	movlb	1	; () banked
  1401  000652  51F8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1402  000654  B4D8               	btfsc	status,2,c
  1403  000656  D08A               	goto	l409
  1404                           
  1405                           ; BSR set to: 1
  1406                           ;main.c: 220: stop(&mL, &mR);
  1407  000658  0ED0               	movlw	low main@mL
  1408  00065A  0100               	movlb	0	; () banked
  1409  00065C  6F71               	movwf	stop@mL& (0+255),b
  1410  00065E  0E01               	movlw	high main@mL
  1411  000660  6F72               	movwf	(stop@mL+1)& (0+255),b
  1412  000662  0ED9               	movlw	low main@mR
  1413  000664  6F73               	movwf	stop@mR& (0+255),b
  1414  000666  0E01               	movlw	high main@mR
  1415  000668  6F74               	movwf	(stop@mR+1)& (0+255),b
  1416  00066A  EC1A  F00B         	call	_stop	;wreg free
  1417                           
  1418                           ;main.c: 221: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1419  00066E  0E03               	movlw	3
  1420  000670  0101               	movlb	1	; () banked
  1421  000672  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1422  000674  A4D8               	btfss	status,2,c
  1423  000676  D002               	goto	u3070
  1424  000678  0E01               	movlw	1
  1425  00067A  D001               	goto	u3072
  1426  00067C                     u3070:
  1427  00067C  0E00               	movlw	0
  1428  00067E                     u3072:
  1429  00067E  0100               	movlb	0	; () banked
  1430  000680  6FC9               	movwf	??_main& (0+255),b
  1431  000682  0E02               	movlw	2
  1432  000684  0101               	movlb	1	; () banked
  1433  000686  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1434  000688  A4D8               	btfss	status,2,c
  1435  00068A  D002               	goto	u3080
  1436  00068C  0E01               	movlw	1
  1437  00068E  D001               	goto	u3082
  1438  000690                     u3080:
  1439  000690  0E00               	movlw	0
  1440  000692                     u3082:
  1441  000692  0100               	movlb	0	; () banked
  1442  000694  15C9               	andwf	??_main& (0+255),w,b
  1443  000696  A0E8               	btfss	wreg,0,c
  1444  000698  D1B0               	goto	l3721
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;main.c: 222: if (VerifySignal(&ReceivedString)){
  1448  00069A  0EE6               	movlw	low _ReceivedString
  1449  00069C  6E2C               	movwf	VerifySignal@RecievedString,c
  1450  00069E  0E01               	movlw	high _ReceivedString
  1451  0006A0  6E2D               	movwf	VerifySignal@RecievedString+1,c
  1452  0006A2  EC8A  F00C         	call	_VerifySignal	;wreg free
  1453  0006A6  0900               	iorlw	0
  1454  0006A8  B4D8               	btfsc	status,2,c
  1455  0006AA  D037               	goto	l411
  1456                           
  1457                           ;main.c: 224: for (i=0; i<10; i++){
  1458  0006AC  0E00               	movlw	0
  1459  0006AE  0101               	movlb	1	; () banked
  1460  0006B0  6FCE               	movwf	main@i& (0+255),b
  1461  0006B2                     l3623:
  1462                           
  1463                           ; BSR set to: 1
  1464  0006B2  0E09               	movlw	9
  1465  0006B4  65CE               	cpfsgt	main@i& (0+255),b
  1466  0006B6  D001               	goto	l412
  1467  0006B8  D01B               	goto	u3120
  1468  0006BA                     l412:
  1469                           
  1470                           ; BSR set to: 1
  1471                           ;main.c: 225: Message[i] = ReceivedString[i+1];
  1472                           
  1473                           ; BSR set to: 1
  1474  0006BA  51CE               	movf	main@i& (0+255),w,b
  1475  0006BC  0100               	movlb	0	; () banked
  1476  0006BE  6FC9               	movwf	??_main& (0+255),b
  1477  0006C0  6BCA               	clrf	(??_main+1)& (0+255),b
  1478  0006C2  0E01               	movlw	1
  1479  0006C4  27C9               	addwf	??_main& (0+255),f,b
  1480  0006C6  0E00               	movlw	0
  1481  0006C8  23CA               	addwfc	(??_main+1)& (0+255),f,b
  1482  0006CA  0EE6               	movlw	low _ReceivedString
  1483  0006CC  25C9               	addwf	??_main& (0+255),w,b
  1484  0006CE  6ED9               	movwf	fsr2l,c
  1485  0006D0  0E01               	movlw	high _ReceivedString
  1486  0006D2  21CA               	addwfc	(??_main+1)& (0+255),w,b
  1487  0006D4  6EDA               	movwf	fsr2h,c
  1488  0006D6  0101               	movlb	1	; () banked
  1489  0006D8  51CE               	movf	main@i& (0+255),w,b
  1490  0006DA  0D01               	mullw	1
  1491  0006DC  0EBE               	movlw	low main@Message
  1492  0006DE  24F3               	addwf	prodl,w,c
  1493  0006E0  6EE1               	movwf	fsr1l,c
  1494  0006E2  0E01               	movlw	high main@Message
  1495  0006E4  20F4               	addwfc	prodh,w,c
  1496  0006E6  6EE2               	movwf	fsr1h,c
  1497  0006E8  CFDF FFE7          	movff	indf2,indf1
  1498                           
  1499                           ; BSR set to: 1
  1500  0006EC  2BCE               	incf	main@i& (0+255),f,b
  1501  0006EE  D7E1               	goto	l3623
  1502  0006F0                     u3120:
  1503                           
  1504                           ; BSR set to: 1
  1505                           ;main.c: 226: }
  1506                           ;main.c: 229: for (i=0; i<16; i++) {
  1507                           
  1508                           ; BSR set to: 1
  1509  0006F0  0E00               	movlw	0
  1510  0006F2  6FCE               	movwf	main@i& (0+255),b
  1511  0006F4                     l3635:
  1512                           
  1513                           ; BSR set to: 1
  1514  0006F4  0E0F               	movlw	15
  1515  0006F6  65CE               	cpfsgt	main@i& (0+255),b
  1516  0006F8  D001               	goto	l414
  1517  0006FA  D00C               	goto	u3140
  1518  0006FC                     l414:
  1519                           
  1520                           ; BSR set to: 1
  1521                           ;main.c: 230: ReceivedString[i]=0;
  1522                           
  1523                           ; BSR set to: 1
  1524  0006FC  51CE               	movf	main@i& (0+255),w,b
  1525  0006FE  0D01               	mullw	1
  1526  000700  0EE6               	movlw	low _ReceivedString
  1527  000702  24F3               	addwf	prodl,w,c
  1528  000704  6ED9               	movwf	fsr2l,c
  1529  000706  0E01               	movlw	high _ReceivedString
  1530  000708  20F4               	addwfc	prodh,w,c
  1531  00070A  6EDA               	movwf	fsr2h,c
  1532  00070C  0E00               	movlw	0
  1533  00070E  6EDF               	movwf	indf2,c
  1534                           
  1535                           ; BSR set to: 1
  1536  000710  2BCE               	incf	main@i& (0+255),f,b
  1537  000712  D7F0               	goto	l3635
  1538  000714                     u3140:
  1539                           
  1540                           ; BSR set to: 1
  1541                           ;main.c: 231: }
  1542                           ;main.c: 232: mode=3;
  1543                           
  1544                           ; BSR set to: 1
  1545  000714  0E03               	movlw	3
  1546  000716  6E32               	movwf	_mode,c	;volatile
  1547                           
  1548                           ;main.c: 234: } else {
  1549  000718  D170               	goto	l3721
  1550  00071A                     l411:
  1551                           
  1552                           ;main.c: 235: fullSpeedBack(&mL,&mR, 100);
  1553                           
  1554                           ; BSR set to: 1
  1555  00071A  0ED0               	movlw	low main@mL
  1556  00071C  0100               	movlb	0	; () banked
  1557  00071E  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1558  000720  0E01               	movlw	high main@mL
  1559  000722  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1560  000724  0ED9               	movlw	low main@mR
  1561  000726  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1562  000728  0E01               	movlw	high main@mR
  1563  00072A  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1564  00072C  0E64               	movlw	100
  1565  00072E  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1566  000730  EC03  F00D         	call	_fullSpeedBack	;wreg free
  1567                           
  1568                           ;main.c: 236: delay_tenth_s(5);
  1569  000734  0E05               	movlw	5
  1570  000736  EC7A  F00D         	call	_delay_tenth_s
  1571                           
  1572                           ;main.c: 237: stop(&mL,&mR);
  1573  00073A  0ED0               	movlw	low main@mL
  1574  00073C  0100               	movlb	0	; () banked
  1575  00073E  6F71               	movwf	stop@mL& (0+255),b
  1576  000740  0E01               	movlw	high main@mL
  1577  000742  6F72               	movwf	(stop@mL+1)& (0+255),b
  1578  000744  0ED9               	movlw	low main@mR
  1579  000746  6F73               	movwf	stop@mR& (0+255),b
  1580  000748  0E01               	movlw	high main@mR
  1581  00074A  6F74               	movwf	(stop@mR+1)& (0+255),b
  1582  00074C  EC1A  F00B         	call	_stop	;wreg free
  1583                           
  1584                           ;main.c: 238: fullSpeed(&mL,&mR, 100);
  1585  000750  0ED0               	movlw	low main@mL
  1586  000752  0100               	movlb	0	; () banked
  1587  000754  6F71               	movwf	fullSpeed@mL& (0+255),b
  1588  000756  0E01               	movlw	high main@mL
  1589  000758  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1590  00075A  0ED9               	movlw	low main@mR
  1591  00075C  6F73               	movwf	fullSpeed@mR& (0+255),b
  1592  00075E  0E01               	movlw	high main@mR
  1593  000760  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1594  000762  0E64               	movlw	100
  1595  000764  6F75               	movwf	fullSpeed@power& (0+255),b
  1596  000766  ECA6  F00B         	call	_fullSpeed	;wreg free
  1597                           
  1598                           ;main.c: 239: }
  1599                           ;main.c: 240: }
  1600                           ;main.c: 241: } else {
  1601  00076A  D147               	goto	l3721
  1602  00076C                     l409:
  1603                           
  1604                           ;main.c: 242: DirectionFound=1;
  1605  00076C  0E01               	movlw	1
  1606  00076E  0101               	movlb	1	; () banked
  1607  000770  6FCD               	movwf	main@DirectionFound& (0+255),b
  1608                           
  1609                           ;main.c: 243: mode=1;
  1610  000772  0E01               	movlw	1
  1611  000774  6E32               	movwf	_mode,c	;volatile
  1612                           
  1613                           ; BSR set to: 1
  1614                           ;main.c: 245: fullSpeed(&mL,&mR, 100);
  1615  000776  0ED0               	movlw	low main@mL
  1616  000778  0100               	movlb	0	; () banked
  1617  00077A  6F71               	movwf	fullSpeed@mL& (0+255),b
  1618  00077C  0E01               	movlw	high main@mL
  1619  00077E  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1620  000780  0ED9               	movlw	low main@mR
  1621  000782  6F73               	movwf	fullSpeed@mR& (0+255),b
  1622  000784  0E01               	movlw	high main@mR
  1623  000786  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1624  000788  0E64               	movlw	100
  1625  00078A  6F75               	movwf	fullSpeed@power& (0+255),b
  1626  00078C  ECA6  F00B         	call	_fullSpeed	;wreg free
  1627                           
  1628                           ;main.c: 246: delay_tenth_s(1);
  1629  000790  0E01               	movlw	1
  1630  000792  EC7A  F00D         	call	_delay_tenth_s
  1631                           
  1632                           ;main.c: 247: MoveType[Move] = 0;
  1633  000796  0101               	movlb	1	; () banked
  1634  000798  51CF               	movf	main@Move& (0+255),w,b
  1635  00079A  0D01               	mullw	1
  1636  00079C  0E28               	movlw	low main@MoveType
  1637  00079E  24F3               	addwf	prodl,w,c
  1638  0007A0  6ED9               	movwf	fsr2l,c
  1639  0007A2  0E01               	movlw	high main@MoveType
  1640  0007A4  20F4               	addwfc	prodh,w,c
  1641  0007A6  6EDA               	movwf	fsr2h,c
  1642  0007A8  0E00               	movlw	0
  1643  0007AA  6EDF               	movwf	indf2,c
  1644                           
  1645                           ; BSR set to: 1
  1646                           ;main.c: 248: MoveTime[Move] = 5;
  1647  0007AC  51CF               	movf	main@Move& (0+255),w,b
  1648  0007AE  0D02               	mullw	2
  1649  0007B0  0E5A               	movlw	low main@MoveTime
  1650  0007B2  24F3               	addwf	prodl,w,c
  1651  0007B4  6ED9               	movwf	fsr2l,c
  1652  0007B6  0E01               	movlw	high main@MoveTime
  1653  0007B8  20F4               	addwfc	prodh,w,c
  1654  0007BA  6EDA               	movwf	fsr2h,c
  1655  0007BC  0E05               	movlw	5
  1656  0007BE  6EDE               	movwf	postinc2,c
  1657  0007C0  0E00               	movlw	0
  1658  0007C2  6EDD               	movwf	postdec2,c
  1659                           
  1660                           ; BSR set to: 1
  1661                           ;main.c: 249: Move++;
  1662  0007C4  2BCF               	incf	main@Move& (0+255),f,b
  1663                           
  1664                           ; BSR set to: 1
  1665                           ;main.c: 250: }
  1666                           ;main.c: 252: break;
  1667  0007C6  D119               	goto	l3721
  1668  0007C8                     
  1669                           ;main.c: 257: SetLine(1);
  1670                           
  1671                           ; BSR set to: 1
  1672  0007C8  0E01               	movlw	1
  1673  0007CA  ECCD  F00D         	call	_SetLine
  1674                           
  1675                           ;main.c: 258: LCD_String(Message);
  1676  0007CE  0EBE               	movlw	low main@Message
  1677  0007D0  0100               	movlb	0	; () banked
  1678  0007D2  6F60               	movwf	LCD_String@string& (0+255),b
  1679  0007D4  0E01               	movlw	high main@Message
  1680  0007D6  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1681  0007D8  EC5A  F00C         	call	_LCD_String	;wreg free
  1682                           
  1683                           ;main.c: 259: SetLine(2);
  1684  0007DC  0E02               	movlw	2
  1685  0007DE  ECCD  F00D         	call	_SetLine
  1686                           
  1687                           ;main.c: 260: LCD_String("Going Home");
  1688  0007E2  0E39               	movlw	low STR_8
  1689  0007E4  0100               	movlb	0	; () banked
  1690  0007E6  6F60               	movwf	LCD_String@string& (0+255),b
  1691  0007E8  0E03               	movlw	high STR_8
  1692  0007EA  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1693  0007EC  EC5A  F00C         	call	_LCD_String	;wreg free
  1694  0007F0  0101               	movlb	1	; () banked
  1695  0007F2  BFCF               	btfsc	main@Move& (0+255),7,b
  1696  0007F4  D0F6               	goto	u3240
  1697                           
  1698                           ; BSR set to: 1
  1699                           ;main.c: 263: stop(&mL,&mR);
  1700                           
  1701                           ; BSR set to: 1
  1702                           
  1703                           ; BSR set to: 1
  1704  0007F6  0ED0               	movlw	low main@mL
  1705  0007F8  0100               	movlb	0	; () banked
  1706  0007FA  6F71               	movwf	stop@mL& (0+255),b
  1707  0007FC  0E01               	movlw	high main@mL
  1708  0007FE  6F72               	movwf	(stop@mL+1)& (0+255),b
  1709  000800  0ED9               	movlw	low main@mR
  1710  000802  6F73               	movwf	stop@mR& (0+255),b
  1711  000804  0E01               	movlw	high main@mR
  1712  000806  6F74               	movwf	(stop@mR+1)& (0+255),b
  1713  000808  EC1A  F00B         	call	_stop	;wreg free
  1714                           
  1715                           ;main.c: 264: if (MoveType[Move]==0) {
  1716  00080C  0101               	movlb	1	; () banked
  1717  00080E  51CF               	movf	main@Move& (0+255),w,b
  1718  000810  0D01               	mullw	1
  1719  000812  0E28               	movlw	low main@MoveType
  1720  000814  24F3               	addwf	prodl,w,c
  1721  000816  6ED9               	movwf	fsr2l,c
  1722  000818  0E01               	movlw	high main@MoveType
  1723  00081A  20F4               	addwfc	prodh,w,c
  1724  00081C  6EDA               	movwf	fsr2h,c
  1725  00081E  50DF               	movf	indf2,w,c
  1726  000820  A4D8               	btfss	status,2,c
  1727  000822  D01A               	goto	l421
  1728                           
  1729                           ; BSR set to: 1
  1730                           ;main.c: 265: fullSpeedBack(&mL,&mR,100);
  1731  000824  0ED0               	movlw	low main@mL
  1732  000826  0100               	movlb	0	; () banked
  1733  000828  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1734  00082A  0E01               	movlw	high main@mL
  1735  00082C  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1736  00082E  0ED9               	movlw	low main@mR
  1737  000830  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1738  000832  0E01               	movlw	high main@mR
  1739  000834  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1740  000836  0E64               	movlw	100
  1741  000838  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1742  00083A  EC03  F00D         	call	_fullSpeedBack	;wreg free
  1743                           
  1744                           ;main.c: 266: delay_tenth_s(MoveTime[Move]);
  1745  00083E  0101               	movlb	1	; () banked
  1746  000840  51CF               	movf	main@Move& (0+255),w,b
  1747  000842  0D02               	mullw	2
  1748  000844  0E5A               	movlw	low main@MoveTime
  1749  000846  24F3               	addwf	prodl,w,c
  1750  000848  6ED9               	movwf	fsr2l,c
  1751  00084A  0E01               	movlw	high main@MoveTime
  1752  00084C  20F4               	addwfc	prodh,w,c
  1753  00084E  6EDA               	movwf	fsr2h,c
  1754  000850  50DF               	movf	indf2,w,c
  1755  000852  EC7A  F00D         	call	_delay_tenth_s
  1756                           
  1757                           ;main.c: 267: } else if (MoveType[Move]==1) {
  1758  000856  D0BF               	goto	l435
  1759  000858                     l421:
  1760  000858  0101               	movlb	1	; () banked
  1761  00085A  51CF               	movf	main@Move& (0+255),w,b
  1762  00085C  0D01               	mullw	1
  1763  00085E  0E28               	movlw	low main@MoveType
  1764  000860  24F3               	addwf	prodl,w,c
  1765  000862  6ED9               	movwf	fsr2l,c
  1766  000864  0E01               	movlw	high main@MoveType
  1767  000866  20F4               	addwfc	prodh,w,c
  1768  000868  6EDA               	movwf	fsr2h,c
  1769  00086A  04DE               	decf	postinc2,w,c
  1770  00086C  A4D8               	btfss	status,2,c
  1771  00086E  D063               	goto	l423
  1772                           
  1773                           ; BSR set to: 1
  1774                           ;main.c: 268: T0CONbits.TMR0ON=0;
  1775  000870  9ED5               	bcf	4053,7,c	;volatile
  1776                           
  1777                           ; BSR set to: 1
  1778                           ;main.c: 269: TMR0L = 0;
  1779  000872  0E00               	movlw	0
  1780  000874  6ED6               	movwf	4054,c	;volatile
  1781                           
  1782                           ;main.c: 270: TMR0H = 0;
  1783  000876  0E00               	movlw	0
  1784  000878  6ED7               	movwf	4055,c	;volatile
  1785                           
  1786                           ;main.c: 271: millis = 0;
  1787  00087A  0E00               	movlw	0
  1788  00087C  6FF7               	movwf	(_millis+1)& (0+255),b	;volatile
  1789  00087E  0E00               	movlw	0
  1790  000880  6FF6               	movwf	_millis& (0+255),b	;volatile
  1791                           
  1792                           ; BSR set to: 1
  1793                           ;main.c: 272: if (MoveTime[Move]>0) {
  1794  000882  51CF               	movf	main@Move& (0+255),w,b
  1795  000884  0D02               	mullw	2
  1796  000886  0E5A               	movlw	low main@MoveTime
  1797  000888  24F3               	addwf	prodl,w,c
  1798  00088A  6ED9               	movwf	fsr2l,c
  1799  00088C  0E01               	movlw	high main@MoveTime
  1800  00088E  20F4               	addwfc	prodh,w,c
  1801  000890  6EDA               	movwf	fsr2h,c
  1802  000892  0E01               	movlw	1
  1803  000894  BEDB               	btfsc	plusw2,7,c
  1804  000896  D024               	goto	l424
  1805  000898  0E01               	movlw	1
  1806  00089A  50DB               	movf	plusw2,w,c
  1807  00089C  E103               	bnz	u3180
  1808  00089E  04DE               	decf	postinc2,w,c
  1809  0008A0  A0D8               	btfss	status,0,c
  1810  0008A2  D01E               	goto	l424
  1811  0008A4                     u3180:
  1812                           
  1813                           ; BSR set to: 1
  1814                           ;main.c: 273: T0CONbits.TMR0ON=1;
  1815  0008A4  8ED5               	bsf	4053,7,c	;volatile
  1816                           
  1817                           ; BSR set to: 1
  1818                           ;main.c: 274: turnRight(&mL,&mR,40);
  1819  0008A6  0ED0               	movlw	low main@mL
  1820  0008A8  0100               	movlb	0	; () banked
  1821  0008AA  6F77               	movwf	turnRight@mL& (0+255),b
  1822  0008AC  0E01               	movlw	high main@mL
  1823  0008AE  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1824  0008B0  0ED9               	movlw	low main@mR
  1825  0008B2  6F79               	movwf	turnRight@mR& (0+255),b
  1826  0008B4  0E01               	movlw	high main@mR
  1827  0008B6  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1828  0008B8  0E28               	movlw	40
  1829  0008BA  6F7B               	movwf	turnRight@power& (0+255),b
  1830  0008BC  EC21  F00D         	call	_turnRight	;wreg free
  1831  0008C0  0101               	movlb	1	; () banked
  1832  0008C2  51CF               	movf	main@Move& (0+255),w,b
  1833  0008C4  0D02               	mullw	2
  1834  0008C6  0E5A               	movlw	low main@MoveTime
  1835  0008C8  24F3               	addwf	prodl,w,c
  1836  0008CA  6ED9               	movwf	fsr2l,c
  1837  0008CC  0E01               	movlw	high main@MoveTime
  1838  0008CE  20F4               	addwfc	prodh,w,c
  1839  0008D0  6EDA               	movwf	fsr2h,c
  1840  0008D2  50DE               	movf	postinc2,w,c
  1841  0008D4  5DF6               	subwf	_millis& (0+255),w,b	;volatile
  1842  0008D6  50DE               	movf	postinc2,w,c
  1843  0008D8  59F7               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1844  0008DA  A0D8               	btfss	status,0,c
  1845  0008DC  D7F1               	goto	l426
  1846  0008DE  D029               	goto	u3200
  1847  0008E0                     l424:
  1848                           
  1849                           ; BSR set to: 1
  1850                           ;main.c: 279: T0CONbits.TMR0ON=1;
  1851  0008E0  8ED5               	bsf	4053,7,c	;volatile
  1852                           
  1853                           ; BSR set to: 1
  1854                           ;main.c: 280: turnLeft(&mL,&mR,40);
  1855  0008E2  0ED0               	movlw	low main@mL
  1856  0008E4  0100               	movlb	0	; () banked
  1857  0008E6  6F77               	movwf	turnLeft@mL& (0+255),b
  1858  0008E8  0E01               	movlw	high main@mL
  1859  0008EA  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1860  0008EC  0ED9               	movlw	low main@mR
  1861  0008EE  6F79               	movwf	turnLeft@mR& (0+255),b
  1862  0008F0  0E01               	movlw	high main@mR
  1863  0008F2  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1864  0008F4  0E28               	movlw	40
  1865  0008F6  6F7B               	movwf	turnLeft@power& (0+255),b
  1866  0008F8  EC3F  F00D         	call	_turnLeft	;wreg free
  1867  0008FC  0101               	movlb	1	; () banked
  1868  0008FE  51CF               	movf	main@Move& (0+255),w,b
  1869  000900  0D02               	mullw	2
  1870  000902  0E5A               	movlw	low main@MoveTime
  1871  000904  24F3               	addwf	prodl,w,c
  1872  000906  6ED9               	movwf	fsr2l,c
  1873  000908  0E01               	movlw	high main@MoveTime
  1874  00090A  20F4               	addwfc	prodh,w,c
  1875  00090C  6EDA               	movwf	fsr2h,c
  1876  00090E  CFDE F0C9          	movff	postinc2,??_main
  1877  000912  CFDD F0CA          	movff	postdec2,??_main+1
  1878  000916  0100               	movlb	0	; () banked
  1879  000918  1FC9               	comf	??_main& (0+255),f,b
  1880  00091A  1FCA               	comf	(??_main+1)& (0+255),f,b
  1881  00091C  4BC9               	infsnz	??_main& (0+255),f,b
  1882  00091E  2BCA               	incf	(??_main+1)& (0+255),f,b
  1883  000920  51C9               	movf	??_main& (0+255),w,b
  1884  000922  0101               	movlb	1	; () banked
  1885  000924  5DF6               	subwf	_millis& (0+255),w,b	;volatile
  1886  000926  0100               	movlb	0	; () banked
  1887  000928  51CA               	movf	(??_main+1)& (0+255),w,b
  1888  00092A  0101               	movlb	1	; () banked
  1889  00092C  59F7               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1890  00092E  A0D8               	btfss	status,0,c
  1891  000930  D7E5               	goto	l430
  1892  000932                     u3200:
  1893                           
  1894                           ; BSR set to: 1
  1895                           ;main.c: 283: T0CONbits.TMR0ON=0;
  1896  000932  9ED5               	bcf	4053,7,c	;volatile
  1897                           
  1898                           ; BSR set to: 1
  1899                           ;main.c: 284: }
  1900                           ;main.c: 285: } else if (MoveType[Move]==2) {
  1901  000934  D050               	goto	l435
  1902  000936                     l423:
  1903                           
  1904                           ; BSR set to: 1
  1905                           
  1906                           ; BSR set to: 1
  1907  000936  51CF               	movf	main@Move& (0+255),w,b
  1908  000938  0D01               	mullw	1
  1909  00093A  0E28               	movlw	low main@MoveType
  1910  00093C  24F3               	addwf	prodl,w,c
  1911  00093E  6ED9               	movwf	fsr2l,c
  1912  000940  0E01               	movlw	high main@MoveType
  1913  000942  20F4               	addwfc	prodh,w,c
  1914  000944  6EDA               	movwf	fsr2h,c
  1915  000946  0E02               	movlw	2
  1916  000948  18DE               	xorwf	postinc2,w,c
  1917  00094A  A4D8               	btfss	status,2,c
  1918  00094C  D044               	goto	l435
  1919                           
  1920                           ; BSR set to: 1
  1921                           ;main.c: 286: if (MoveTime[Move]>0) {
  1922  00094E  51CF               	movf	main@Move& (0+255),w,b
  1923  000950  0D02               	mullw	2
  1924  000952  0E5A               	movlw	low main@MoveTime
  1925  000954  24F3               	addwf	prodl,w,c
  1926  000956  6ED9               	movwf	fsr2l,c
  1927  000958  0E01               	movlw	high main@MoveTime
  1928  00095A  20F4               	addwfc	prodh,w,c
  1929  00095C  6EDA               	movwf	fsr2h,c
  1930  00095E  0E01               	movlw	1
  1931  000960  BEDB               	btfsc	plusw2,7,c
  1932  000962  D020               	goto	l434
  1933  000964  0E01               	movlw	1
  1934  000966  50DB               	movf	plusw2,w,c
  1935  000968  E103               	bnz	u3220
  1936  00096A  04DE               	decf	postinc2,w,c
  1937  00096C  A0D8               	btfss	status,0,c
  1938  00096E  D01A               	goto	l434
  1939  000970                     u3220:
  1940                           
  1941                           ; BSR set to: 1
  1942                           ;main.c: 287: turnRight(&mL,&mR,78);
  1943  000970  0ED0               	movlw	low main@mL
  1944  000972  0100               	movlb	0	; () banked
  1945  000974  6F77               	movwf	turnRight@mL& (0+255),b
  1946  000976  0E01               	movlw	high main@mL
  1947  000978  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1948  00097A  0ED9               	movlw	low main@mR
  1949  00097C  6F79               	movwf	turnRight@mR& (0+255),b
  1950  00097E  0E01               	movlw	high main@mR
  1951  000980  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1952  000982  0E4E               	movlw	78
  1953  000984  6F7B               	movwf	turnRight@power& (0+255),b
  1954  000986  EC21  F00D         	call	_turnRight	;wreg free
  1955                           
  1956                           ;main.c: 289: delay_tenth_s(MoveTime[Move]);
  1957  00098A  0101               	movlb	1	; () banked
  1958  00098C  51CF               	movf	main@Move& (0+255),w,b
  1959  00098E  0D02               	mullw	2
  1960  000990  0E5A               	movlw	low main@MoveTime
  1961  000992  24F3               	addwf	prodl,w,c
  1962  000994  6ED9               	movwf	fsr2l,c
  1963  000996  0E01               	movlw	high main@MoveTime
  1964  000998  20F4               	addwfc	prodh,w,c
  1965  00099A  6EDA               	movwf	fsr2h,c
  1966  00099C  50DF               	movf	indf2,w,c
  1967  00099E  EC7A  F00D         	call	_delay_tenth_s
  1968                           
  1969                           ;main.c: 290: } else {
  1970  0009A2  D019               	goto	l435
  1971  0009A4                     l434:
  1972                           
  1973                           ;main.c: 291: turnLeft(&mL,&mR,100);
  1974  0009A4  0ED0               	movlw	low main@mL
  1975  0009A6  0100               	movlb	0	; () banked
  1976  0009A8  6F77               	movwf	turnLeft@mL& (0+255),b
  1977  0009AA  0E01               	movlw	high main@mL
  1978  0009AC  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1979  0009AE  0ED9               	movlw	low main@mR
  1980  0009B0  6F79               	movwf	turnLeft@mR& (0+255),b
  1981  0009B2  0E01               	movlw	high main@mR
  1982  0009B4  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1983  0009B6  0E64               	movlw	100
  1984  0009B8  6F7B               	movwf	turnLeft@power& (0+255),b
  1985  0009BA  EC3F  F00D         	call	_turnLeft	;wreg free
  1986                           
  1987                           ;main.c: 292: delay_tenth_s(MoveTime[Move]);
  1988  0009BE  0101               	movlb	1	; () banked
  1989  0009C0  51CF               	movf	main@Move& (0+255),w,b
  1990  0009C2  0D02               	mullw	2
  1991  0009C4  0E5A               	movlw	low main@MoveTime
  1992  0009C6  24F3               	addwf	prodl,w,c
  1993  0009C8  6ED9               	movwf	fsr2l,c
  1994  0009CA  0E01               	movlw	high main@MoveTime
  1995  0009CC  20F4               	addwfc	prodh,w,c
  1996  0009CE  6EDA               	movwf	fsr2h,c
  1997  0009D0  50DF               	movf	indf2,w,c
  1998  0009D2  EC7A  F00D         	call	_delay_tenth_s
  1999  0009D6                     l435:
  2000                           
  2001                           ;main.c: 293: }
  2002                           ;main.c: 294: }
  2003                           ;main.c: 295: if (mode==-1) {
  2004  0009D6  2832               	incf	_mode,w,c	;volatile
  2005  0009D8  B4D8               	btfsc	status,2,c
  2006  0009DA  D003               	goto	u3240
  2007                           
  2008                           ;main.c: 296: break;
  2009  0009DC  0101               	movlb	1	; () banked
  2010  0009DE  07CF               	decf	main@Move& (0+255),f,b
  2011  0009E0  D708               	goto	L3
  2012  0009E2                     u3240:
  2013                           
  2014                           ;main.c: 297: }
  2015                           ;main.c: 298: }
  2016                           ;main.c: 299: stop(&mL,&mR);
  2017                           
  2018                           ; BSR set to: 1
  2019  0009E2  0ED0               	movlw	low main@mL
  2020  0009E4  0100               	movlb	0	; () banked
  2021  0009E6  6F71               	movwf	stop@mL& (0+255),b
  2022  0009E8  0E01               	movlw	high main@mL
  2023  0009EA  6F72               	movwf	(stop@mL+1)& (0+255),b
  2024  0009EC  0ED9               	movlw	low main@mR
  2025  0009EE  6F73               	movwf	stop@mR& (0+255),b
  2026  0009F0  0E01               	movlw	high main@mR
  2027  0009F2  6F74               	movwf	(stop@mR+1)& (0+255),b
  2028  0009F4  EC1A  F00B         	call	_stop	;wreg free
  2029  0009F8                     l3719:
  2030                           
  2031                           ;main.c: 300: mode=-1;
  2032  0009F8  6832               	setf	_mode,c	;volatile
  2033  0009FA                     l3721:
  2034                           
  2035                           ;main.c: 303: }
  2036  0009FA  5032               	movf	_mode,w,c	;volatile
  2037                           
  2038                           ; Switch size 1, requested type "space"
  2039                           ; Number of cases is 5, Range of values is 0 to 255
  2040                           ; switch strategies available:
  2041                           ; Name         Instructions Cycles
  2042                           ; simple_byte           16     9 (average)
  2043                           ;	Chosen strategy is simple_byte
  2044  0009FC  0A00               	xorlw	0	; case 0
  2045  0009FE  B4D8               	btfsc	status,2,c
  2046  000A00  D578               	goto	l399
  2047  000A02  0A01               	xorlw	1	; case 1
  2048  000A04  B4D8               	btfsc	status,2,c
  2049  000A06  D59A               	goto	l400
  2050  000A08  0A03               	xorlw	3	; case 2
  2051  000A0A  B4D8               	btfsc	status,2,c
  2052  000A0C  D621               	goto	l408
  2053  000A0E  0A01               	xorlw	1	; case 3
  2054  000A10  B4D8               	btfsc	status,2,c
  2055  000A12  D6DA               	goto	l418
  2056  000A14  0AFC               	xorlw	252	; case 255
  2057  000A16  B4D8               	btfsc	status,2,c
  2058  000A18  D4F1               	goto	l393
  2059  000A1A  D7EF               	goto	l3721
  2060  000A1C                     __end_of_main:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           prodh	equ	0xFF4
  2064                           prodl	equ	0xFF3
  2065                           intcon	equ	0xFF2
  2066                           postinc0	equ	0xFEE
  2067                           wreg	equ	0xFE8
  2068                           indf1	equ	0xFE7
  2069                           plusw1	equ	0xFE3
  2070                           fsr1h	equ	0xFE2
  2071                           fsr1l	equ	0xFE1
  2072                           indf2	equ	0xFDF
  2073                           postinc2	equ	0xFDE
  2074                           postdec2	equ	0xFDD
  2075                           plusw2	equ	0xFDB
  2076                           fsr2h	equ	0xFDA
  2077                           fsr2l	equ	0xFD9
  2078                           status	equ	0xFD8
  2079                           
  2080 ;; *************** function _initTimer *****************
  2081 ;; Defined at:
  2082 ;;		line 8 in file "Movement.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;		None
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;		None
  2087 ;; Return value:  Size  Location     Type
  2088 ;;                  1    wreg      void 
  2089 ;; Registers used:
  2090 ;;		wreg, status,2
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2096 ;;      Params:         0       0       0       0
  2097 ;;      Locals:         0       0       0       0
  2098 ;;      Temps:          0       0       0       0
  2099 ;;      Totals:         0       0       0       0
  2100 ;;Total ram usage:        0 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    3
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_main
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text1
  2111  001CA8                     __ptext1:
  2112                           	opt stack 0
  2113  001CA8                     _initTimer:
  2114                           	opt stack 27
  2115                           
  2116                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2117                           
  2118                           ;incstack = 0
  2119  001CA8  9ED5               	bcf	4053,7,c	;volatile
  2120                           
  2121                           ;Movement.c: 11: T0CONbits.T016BIT=1;
  2122  001CAA  8CD5               	bsf	4053,6,c	;volatile
  2123                           
  2124                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2125  001CAC  9AD5               	bcf	4053,5,c	;volatile
  2126                           
  2127                           ;Movement.c: 13: T0CONbits.PSA=0;
  2128  001CAE  96D5               	bcf	4053,3,c	;volatile
  2129                           
  2130                           ;Movement.c: 14: T0CONbits.T0PS=0b010;
  2131  001CB0  50D5               	movf	4053,w,c	;volatile
  2132  001CB2  0BF8               	andlw	-8
  2133  001CB4  0902               	iorlw	2
  2134  001CB6  6ED5               	movwf	4053,c	;volatile
  2135                           
  2136                           ;Movement.c: 17: INTCONbits.TMR0IE=1;
  2137  001CB8  8AF2               	bsf	intcon,5,c	;volatile
  2138  001CBA  0012               	return		;funcret
  2139  001CBC                     __end_of_initTimer:
  2140                           	opt stack 0
  2141                           tblptru	equ	0xFF8
  2142                           prodh	equ	0xFF4
  2143                           prodl	equ	0xFF3
  2144                           intcon	equ	0xFF2
  2145                           postinc0	equ	0xFEE
  2146                           wreg	equ	0xFE8
  2147                           indf1	equ	0xFE7
  2148                           plusw1	equ	0xFE3
  2149                           fsr1h	equ	0xFE2
  2150                           fsr1l	equ	0xFE1
  2151                           indf2	equ	0xFDF
  2152                           postinc2	equ	0xFDE
  2153                           postdec2	equ	0xFDD
  2154                           plusw2	equ	0xFDB
  2155                           fsr2h	equ	0xFDA
  2156                           fsr2l	equ	0xFD9
  2157                           status	equ	0xFD8
  2158                           
  2159 ;; *************** function _initRFID *****************
  2160 ;; Defined at:
  2161 ;;		line 8 in file "RFID_Reader.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, status,2, status,0
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2175 ;;      Params:         0       0       0       0
  2176 ;;      Locals:         0       0       0       0
  2177 ;;      Temps:          0       0       0       0
  2178 ;;      Totals:         0       0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    3
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_main
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text2
  2190  001C8C                     __ptext2:
  2191                           	opt stack 0
  2192  001C8C                     _initRFID:
  2193                           	opt stack 27
  2194                           
  2195                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2196                           
  2197                           ;incstack = 0
  2198  001C8C  5094               	movf	3988,w,c	;volatile
  2199  001C8E  09C0               	iorlw	192
  2200  001C90  6E94               	movwf	3988,c	;volatile
  2201                           
  2202                           ;RFID_Reader.c: 13: SPBRG=205;
  2203  001C92  0ECD               	movlw	205
  2204  001C94  6EAF               	movwf	4015,c	;volatile
  2205                           
  2206                           ;RFID_Reader.c: 14: SPBRGH=0;
  2207  001C96  0E00               	movlw	0
  2208  001C98  6EB0               	movwf	4016,c	;volatile
  2209                           
  2210                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2211  001C9A  86AA               	bsf	4010,3,c	;volatile
  2212                           
  2213                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2214  001C9C  84AC               	bsf	4012,2,c	;volatile
  2215                           
  2216                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2217  001C9E  88AB               	bsf	4011,4,c	;volatile
  2218                           
  2219                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2220  001CA0  8EAB               	bsf	4011,7,c	;volatile
  2221                           
  2222                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2223  001CA2  98AC               	bcf	4012,4,c	;volatile
  2224                           
  2225                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2226  001CA4  9CAB               	bcf	4011,6,c	;volatile
  2227  001CA6  0012               	return		;funcret
  2228  001CA8                     __end_of_initRFID:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           intcon	equ	0xFF2
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           indf1	equ	0xFE7
  2237                           plusw1	equ	0xFE3
  2238                           fsr1h	equ	0xFE2
  2239                           fsr1l	equ	0xFE1
  2240                           indf2	equ	0xFDF
  2241                           postinc2	equ	0xFDE
  2242                           postdec2	equ	0xFDD
  2243                           plusw2	equ	0xFDB
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _initMotorPWM *****************
  2249 ;; Defined at:
  2250 ;;		line 4 in file "dc_motor.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;		None
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  1    wreg      void 
  2257 ;; Registers used:
  2258 ;;		wreg, status,2
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2264 ;;      Params:         0       0       0       0
  2265 ;;      Locals:         0       0       0       0
  2266 ;;      Temps:          0       0       0       0
  2267 ;;      Totals:         0       0       0       0
  2268 ;;Total ram usage:        0 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    3
  2271 ;; This function calls:
  2272 ;;		Nothing
  2273 ;; This function is called by:
  2274 ;;		_main
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text3
  2279  001ABA                     __ptext3:
  2280                           	opt stack 0
  2281  001ABA                     _initMotorPWM:
  2282                           	opt stack 27
  2283                           
  2284                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2285                           
  2286                           ;incstack = 0
  2287  001ABA  0E00               	movlw	0
  2288  001ABC  6E7F               	movwf	3967,c	;volatile
  2289                           
  2290                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2291  001ABE  0E80               	movlw	128
  2292  001AC0  6E7E               	movwf	3966,c	;volatile
  2293                           
  2294                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2295  001AC2  0E6F               	movlw	111
  2296  001AC4  6E6F               	movwf	3951,c	;volatile
  2297                           
  2298                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2299  001AC6  0E00               	movlw	0
  2300  001AC8  6E6E               	movwf	3950,c	;volatile
  2301                           
  2302                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2303  001ACA  0EC7               	movlw	199
  2304  001ACC  6E7B               	movwf	3963,c	;volatile
  2305                           
  2306                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2307  001ACE  0E00               	movlw	0
  2308  001AD0  6E7A               	movwf	3962,c	;volatile
  2309                           
  2310                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2311  001AD2  0E00               	movlw	0
  2312  001AD4  6E79               	movwf	3961,c	;volatile
  2313                           
  2314                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2315  001AD6  0E00               	movlw	0
  2316  001AD8  6E78               	movwf	3960,c	;volatile
  2317                           
  2318                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2319  001ADA  0E00               	movlw	0
  2320  001ADC  6E77               	movwf	3959,c	;volatile
  2321                           
  2322                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2323  001ADE  0E00               	movlw	0
  2324  001AE0  6E76               	movwf	3958,c	;volatile
  2325                           
  2326                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2327  001AE2  9093               	bcf	3987,0,c	;volatile
  2328                           
  2329                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2330  001AE4  9293               	bcf	3987,1,c	;volatile
  2331                           
  2332                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2333  001AE6  9493               	bcf	3987,2,c	;volatile
  2334                           
  2335                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2336  001AE8  9693               	bcf	3987,3,c	;volatile
  2337                           
  2338                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2339  001AEA  908A               	bcf	3978,0,c	;volatile
  2340                           
  2341                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2342  001AEC  928A               	bcf	3978,1,c	;volatile
  2343                           
  2344                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2345  001AEE  948A               	bcf	3978,2,c	;volatile
  2346                           
  2347                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2348  001AF0  968A               	bcf	3978,3,c	;volatile
  2349  001AF2  0012               	return		;funcret
  2350  001AF4                     __end_of_initMotorPWM:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           prodh	equ	0xFF4
  2354                           prodl	equ	0xFF3
  2355                           intcon	equ	0xFF2
  2356                           postinc0	equ	0xFEE
  2357                           wreg	equ	0xFE8
  2358                           indf1	equ	0xFE7
  2359                           plusw1	equ	0xFE3
  2360                           fsr1h	equ	0xFE2
  2361                           fsr1l	equ	0xFE1
  2362                           indf2	equ	0xFDF
  2363                           postinc2	equ	0xFDE
  2364                           postdec2	equ	0xFDD
  2365                           plusw2	equ	0xFDB
  2366                           fsr2h	equ	0xFDA
  2367                           fsr2l	equ	0xFD9
  2368                           status	equ	0xFD8
  2369                           
  2370 ;; *************** function _initLCD *****************
  2371 ;; Defined at:
  2372 ;;		line 38 in file "LCD.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;		None
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;		None
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2386 ;;      Params:         0       0       0       0
  2387 ;;      Locals:         0       0       0       0
  2388 ;;      Temps:          0       1       0       0
  2389 ;;      Totals:         0       1       0       0
  2390 ;;Total ram usage:        1 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    6
  2393 ;; This function calls:
  2394 ;;		_LCDout
  2395 ;;		_SendLCD
  2396 ;; This function is called by:
  2397 ;;		_main
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text4
  2402  0014B2                     __ptext4:
  2403                           	opt stack 0
  2404  0014B2                     _initLCD:
  2405                           	opt stack 24
  2406                           
  2407                           ;LCD.c: 44: TRISAbits.RA6=0;
  2408                           
  2409                           ;incstack = 0
  2410  0014B2  9C92               	bcf	3986,6,c	;volatile
  2411                           
  2412                           ;LCD.c: 45: TRISCbits.RC0=0;
  2413  0014B4  9094               	bcf	3988,0,c	;volatile
  2414                           
  2415                           ;LCD.c: 46: TRISCbits.RC1=0;
  2416  0014B6  9294               	bcf	3988,1,c	;volatile
  2417                           
  2418                           ;LCD.c: 47: TRISCbits.RC2=0;
  2419  0014B8  9494               	bcf	3988,2,c	;volatile
  2420                           
  2421                           ;LCD.c: 48: TRISDbits.RD0=0;
  2422  0014BA  9095               	bcf	3989,0,c	;volatile
  2423                           
  2424                           ;LCD.c: 49: TRISDbits.RD1=0;
  2425  0014BC  9295               	bcf	3989,1,c	;volatile
  2426                           
  2427                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2428  0014BE  0E27               	movlw	39
  2429  0014C0  0100               	movlb	0	; () banked
  2430  0014C2  6F60               	movwf	??_initLCD& (0+255),b
  2431  0014C4  0EF5               	movlw	245
  2432  0014C6                     u3277:
  2433  0014C6  2EE8               	decfsz	wreg,f,c
  2434  0014C8  D7FE               	bra	u3277
  2435  0014CA  2F60               	decfsz	??_initLCD& (0+255),f,b
  2436  0014CC  D7FC               	bra	u3277
  2437                           
  2438                           ;LCD.c: 52: LCDout(0b0011);
  2439  0014CE  0E03               	movlw	3
  2440  0014D0  ECF6  F009         	call	_LCDout
  2441                           
  2442                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2443  0014D4  0E0D               	movlw	13
  2444  0014D6  0100               	movlb	0	; () banked
  2445  0014D8  6F60               	movwf	??_initLCD& (0+255),b
  2446  0014DA  0EFB               	movlw	251
  2447  0014DC                     u3287:
  2448  0014DC  2EE8               	decfsz	wreg,f,c
  2449  0014DE  D7FE               	bra	u3287
  2450  0014E0  2F60               	decfsz	??_initLCD& (0+255),f,b
  2451  0014E2  D7FC               	bra	u3287
  2452  0014E4  D000               	nop2	
  2453                           
  2454                           ;LCD.c: 54: LCDout(0b0011);
  2455  0014E6  0E03               	movlw	3
  2456  0014E8  ECF6  F009         	call	_LCDout
  2457                           
  2458                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2459  0014EC  0E85               	movlw	133
  2460  0014EE                     u3297:
  2461  0014EE  2EE8               	decfsz	wreg,f,c
  2462  0014F0  D7FE               	bra	u3297
  2463  0014F2  F000               	nop	
  2464                           
  2465                           ;LCD.c: 56: LCDout(0b0011);
  2466  0014F4  0E03               	movlw	3
  2467  0014F6  ECF6  F009         	call	_LCDout
  2468                           
  2469                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2470  0014FA  0E21               	movlw	33
  2471  0014FC                     u3307:
  2472  0014FC  2EE8               	decfsz	wreg,f,c
  2473  0014FE  D7FE               	bra	u3307
  2474  001500  F000               	nop	
  2475                           
  2476                           ;LCD.c: 58: LCDout(0b0010);
  2477  001502  0E02               	movlw	2
  2478  001504  ECF6  F009         	call	_LCDout
  2479                           
  2480                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2481  001508  0E21               	movlw	33
  2482  00150A                     u3317:
  2483  00150A  2EE8               	decfsz	wreg,f,c
  2484  00150C  D7FE               	bra	u3317
  2485  00150E  F000               	nop	
  2486                           
  2487                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2488  001510  0E00               	movlw	0
  2489  001512  6E30               	movwf	SendLCD@type,c
  2490  001514  0E28               	movlw	40
  2491  001516  ECE8  F00D         	call	_SendLCD
  2492                           
  2493                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2494  00151A  0E21               	movlw	33
  2495  00151C                     u3327:
  2496  00151C  2EE8               	decfsz	wreg,f,c
  2497  00151E  D7FE               	bra	u3327
  2498  001520  F000               	nop	
  2499                           
  2500                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2501  001522  0E00               	movlw	0
  2502  001524  6E30               	movwf	SendLCD@type,c
  2503  001526  0E08               	movlw	8
  2504  001528  ECE8  F00D         	call	_SendLCD
  2505                           
  2506                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2507  00152C  0E21               	movlw	33
  2508  00152E                     u3337:
  2509  00152E  2EE8               	decfsz	wreg,f,c
  2510  001530  D7FE               	bra	u3337
  2511  001532  F000               	nop	
  2512                           
  2513                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2514  001534  0E00               	movlw	0
  2515  001536  6E30               	movwf	SendLCD@type,c
  2516  001538  0E01               	movlw	1
  2517  00153A  ECE8  F00D         	call	_SendLCD
  2518                           
  2519                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2520  00153E  0E0D               	movlw	13
  2521  001540  0100               	movlb	0	; () banked
  2522  001542  6F60               	movwf	??_initLCD& (0+255),b
  2523  001544  0EFB               	movlw	251
  2524  001546                     u3347:
  2525  001546  2EE8               	decfsz	wreg,f,c
  2526  001548  D7FE               	bra	u3347
  2527  00154A  2F60               	decfsz	??_initLCD& (0+255),f,b
  2528  00154C  D7FC               	bra	u3347
  2529  00154E  D000               	nop2	
  2530                           
  2531                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2532  001550  0E00               	movlw	0
  2533  001552  6E30               	movwf	SendLCD@type,c
  2534  001554  0E06               	movlw	6
  2535  001556  ECE8  F00D         	call	_SendLCD
  2536                           
  2537                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2538  00155A  0E21               	movlw	33
  2539  00155C                     u3357:
  2540  00155C  2EE8               	decfsz	wreg,f,c
  2541  00155E  D7FE               	bra	u3357
  2542  001560  F000               	nop	
  2543                           
  2544                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2545  001562  0E00               	movlw	0
  2546  001564  6E30               	movwf	SendLCD@type,c
  2547  001566  0E0C               	movlw	12
  2548  001568  ECE8  F00D         	call	_SendLCD
  2549                           
  2550                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2551  00156C  0E21               	movlw	33
  2552  00156E                     u3367:
  2553  00156E  2EE8               	decfsz	wreg,f,c
  2554  001570  D7FE               	bra	u3367
  2555  001572  F000               	nop	
  2556  001574  0012               	return		;funcret
  2557  001576                     __end_of_initLCD:
  2558                           	opt stack 0
  2559                           tblptru	equ	0xFF8
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           intcon	equ	0xFF2
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           indf1	equ	0xFE7
  2566                           plusw1	equ	0xFE3
  2567                           fsr1h	equ	0xFE2
  2568                           fsr1l	equ	0xFE1
  2569                           indf2	equ	0xFDF
  2570                           postinc2	equ	0xFDE
  2571                           postdec2	equ	0xFDD
  2572                           plusw2	equ	0xFDB
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function _initIR *****************
  2578 ;; Defined at:
  2579 ;;		line 30 in file "IR_Reading.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;		None
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, status,2
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2593 ;;      Params:         0       0       0       0
  2594 ;;      Locals:         0       0       0       0
  2595 ;;      Temps:          0       0       0       0
  2596 ;;      Totals:         0       0       0       0
  2597 ;;Total ram usage:        0 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    3
  2600 ;; This function calls:
  2601 ;;		Nothing
  2602 ;; This function is called by:
  2603 ;;		_main
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text5
  2608  001C4C                     __ptext5:
  2609                           	opt stack 0
  2610  001C4C                     _initIR:
  2611                           	opt stack 27
  2612                           
  2613                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2614                           
  2615                           ;incstack = 0
  2616  001C4C  9489               	bcf	3977,2,c	;volatile
  2617                           
  2618                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2619  001C4E  9689               	bcf	3977,3,c	;volatile
  2620                           
  2621                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2622  001C50  8492               	bsf	3986,2,c	;volatile
  2623                           
  2624                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2625  001C52  8692               	bsf	3986,3,c	;volatile
  2626                           
  2627                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2628  001C54  94B8               	bcf	4024,2,c	;volatile
  2629                           
  2630                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2631  001C56  96B8               	bcf	4024,3,c	;volatile
  2632                           
  2633                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2634  001C58  9CB8               	bcf	4024,6,c	;volatile
  2635                           
  2636                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2637  001C5A  9EB8               	bcf	4024,7,c	;volatile
  2638                           
  2639                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2640  001C5C  0E06               	movlw	6
  2641  001C5E  6E63               	movwf	3939,c	;volatile
  2642                           
  2643                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2644  001C60  0E06               	movlw	6
  2645  001C62  6E62               	movwf	3938,c	;volatile
  2646                           
  2647                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2648  001C64  9096               	bcf	3990,0,c	;volatile
  2649                           
  2650                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2651  001C66  9296               	bcf	3990,1,c	;volatile
  2652                           
  2653                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2654  001C68  0E59               	movlw	89
  2655  001C6A  6EB7               	movwf	4023,c	;volatile
  2656  001C6C  0012               	return		;funcret
  2657  001C6E                     __end_of_initIR:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           prodh	equ	0xFF4
  2661                           prodl	equ	0xFF3
  2662                           intcon	equ	0xFF2
  2663                           postinc0	equ	0xFEE
  2664                           wreg	equ	0xFE8
  2665                           indf1	equ	0xFE7
  2666                           plusw1	equ	0xFE3
  2667                           fsr1h	equ	0xFE2
  2668                           fsr1l	equ	0xFE1
  2669                           indf2	equ	0xFDF
  2670                           postinc2	equ	0xFDE
  2671                           postdec2	equ	0xFDD
  2672                           plusw2	equ	0xFDB
  2673                           fsr2h	equ	0xFDA
  2674                           fsr2l	equ	0xFD9
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _fullSpeedBack *****************
  2678 ;; Defined at:
  2679 ;;		line 138 in file "dc_motor.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  2682 ;;		 -> main@mL(9), 
  2683 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  2684 ;;		 -> main@mR(9), 
  2685 ;;  power           1   27[BANK0 ] unsigned char 
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;		None
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2697 ;;      Params:         0       5       0       0
  2698 ;;      Locals:         0       0       0       0
  2699 ;;      Temps:          0       0       0       0
  2700 ;;      Totals:         0       5       0       0
  2701 ;;Total ram usage:        5 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    6
  2704 ;; This function calls:
  2705 ;;		_fullSpeed
  2706 ;; This function is called by:
  2707 ;;		_main
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text6
  2712  001A06                     __ptext6:
  2713                           	opt stack 0
  2714  001A06                     _fullSpeedBack:
  2715                           	opt stack 24
  2716                           
  2717                           ;dc_motor.c: 141: mL->direction=0;
  2718                           
  2719                           ;incstack = 0
  2720  001A06  0100               	movlb	0	; () banked
  2721  001A08  EE20 F001          	lfsr	2,1
  2722  001A0C  5177               	movf	fullSpeedBack@mL& (0+255),w,b
  2723  001A0E  26D9               	addwf	fsr2l,f,c
  2724  001A10  5178               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2725  001A12  22DA               	addwfc	fsr2h,f,c
  2726  001A14  0E00               	movlw	0
  2727  001A16  6EDF               	movwf	indf2,c
  2728                           
  2729                           ;dc_motor.c: 142: mR->direction=0;
  2730  001A18  EE20 F001          	lfsr	2,1
  2731  001A1C  5179               	movf	fullSpeedBack@mR& (0+255),w,b
  2732  001A1E  26D9               	addwf	fsr2l,f,c
  2733  001A20  517A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2734  001A22  22DA               	addwfc	fsr2h,f,c
  2735  001A24  0E00               	movlw	0
  2736  001A26  6EDF               	movwf	indf2,c
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2740  001A28  C077  F071         	movff	fullSpeedBack@mL,fullSpeed@mL
  2741  001A2C  C078  F072         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2742  001A30  C079  F073         	movff	fullSpeedBack@mR,fullSpeed@mR
  2743  001A34  C07A  F074         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2744  001A38  C07B  F075         	movff	fullSpeedBack@power,fullSpeed@power
  2745  001A3C  ECA6  F00B         	call	_fullSpeed	;wreg free
  2746  001A40  0012               	return		;funcret
  2747  001A42                     __end_of_fullSpeedBack:
  2748                           	opt stack 0
  2749                           tblptru	equ	0xFF8
  2750                           prodh	equ	0xFF4
  2751                           prodl	equ	0xFF3
  2752                           intcon	equ	0xFF2
  2753                           postinc0	equ	0xFEE
  2754                           wreg	equ	0xFE8
  2755                           indf1	equ	0xFE7
  2756                           plusw1	equ	0xFE3
  2757                           fsr1h	equ	0xFE2
  2758                           fsr1l	equ	0xFE1
  2759                           indf2	equ	0xFDF
  2760                           postinc2	equ	0xFDE
  2761                           postdec2	equ	0xFDD
  2762                           plusw2	equ	0xFDB
  2763                           fsr2h	equ	0xFDA
  2764                           fsr2l	equ	0xFD9
  2765                           status	equ	0xFD8
  2766                           
  2767 ;; *************** function _enableSensor *****************
  2768 ;; Defined at:
  2769 ;;		line 106 in file "IR_Reading.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;  sensor          1    wreg     unsigned char 
  2772 ;;  status          1   43[COMRAM] unsigned char 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  sensor          1   44[COMRAM] unsigned char 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2784 ;;      Params:         1       0       0       0
  2785 ;;      Locals:         1       0       0       0
  2786 ;;      Temps:          0       0       0       0
  2787 ;;      Totals:         2       0       0       0
  2788 ;;Total ram usage:        2 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    3
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_main
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text7
  2799  001C00                     __ptext7:
  2800                           	opt stack 0
  2801  001C00                     _enableSensor:
  2802                           	opt stack 27
  2803                           
  2804                           ;incstack = 0
  2805                           ;enableSensor@sensor stored from wreg
  2806  001C00  6E2D               	movwf	enableSensor@sensor,c
  2807                           
  2808                           ;IR_Reading.c: 108: if (sensor==0){
  2809  001C02  502D               	movf	enableSensor@sensor,w,c
  2810  001C04  A4D8               	btfss	status,2,c
  2811  001C06  D006               	goto	l120
  2812                           
  2813                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2814  001C08  B02C               	btfsc	enableSensor@status,0,c
  2815  001C0A  D002               	bra	u1845
  2816  001C0C  908D               	bcf	3981,0,c	;volatile
  2817  001C0E  D001               	bra	u1846
  2818  001C10                     u1845:
  2819  001C10  808D               	bsf	3981,0,c	;volatile
  2820  001C12                     u1846:
  2821                           
  2822                           ;IR_Reading.c: 110: } else if (sensor==1){
  2823  001C12  0012               	return	
  2824  001C14                     l120:
  2825  001C14  042D               	decf	enableSensor@sensor,w,c
  2826  001C16  A4D8               	btfss	status,2,c
  2827  001C18  0012               	return	
  2828                           
  2829                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2830  001C1A  B02C               	btfsc	enableSensor@status,0,c
  2831  001C1C  D002               	bra	u1865
  2832  001C1E  928D               	bcf	3981,1,c	;volatile
  2833  001C20  D001               	bra	u1866
  2834  001C22                     u1865:
  2835  001C22  828D               	bsf	3981,1,c	;volatile
  2836  001C24                     u1866:
  2837  001C24  0012               	return	
  2838  001C26                     __end_of_enableSensor:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           indf1	equ	0xFE7
  2847                           plusw1	equ	0xFE3
  2848                           fsr1h	equ	0xFE2
  2849                           fsr1l	equ	0xFE1
  2850                           indf2	equ	0xFDF
  2851                           postinc2	equ	0xFDE
  2852                           postdec2	equ	0xFDD
  2853                           plusw2	equ	0xFDB
  2854                           fsr2h	equ	0xFDA
  2855                           fsr2l	equ	0xFD9
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function _VerifySignal *****************
  2859 ;; Defined at:
  2860 ;;		line 40 in file "RFID_Reader.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;  RecievedStri    2   43[COMRAM] PTR unsigned char 
  2863 ;;		 -> ReceivedString(16), 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  hexByte         2    2[BANK0 ] unsigned int 
  2866 ;;  checksum        1    1[BANK0 ] unsigned char 
  2867 ;;  i               1    0[BANK0 ] unsigned char 
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      unsigned char 
  2870 ;; Registers used:
  2871 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2877 ;;      Params:         2       0       0       0
  2878 ;;      Locals:         0       4       0       0
  2879 ;;      Temps:          4       0       0       0
  2880 ;;      Totals:         6       4       0       0
  2881 ;;Total ram usage:       10 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    3
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_main
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text8
  2892  001914                     __ptext8:
  2893                           	opt stack 0
  2894  001914                     _VerifySignal:
  2895                           	opt stack 27
  2896                           
  2897                           ;RFID_Reader.c: 41: unsigned char checksum=0;
  2898                           
  2899                           ;incstack = 0
  2900  001914  0E00               	movlw	0
  2901  001916  0100               	movlb	0	; () banked
  2902  001918  6F61               	movwf	VerifySignal@checksum& (0+255),b
  2903                           
  2904                           ;RFID_Reader.c: 42: unsigned int hexByte=0;
  2905  00191A  0E00               	movlw	0
  2906  00191C  6F63               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2907  00191E  0E00               	movlw	0
  2908  001920  6F62               	movwf	VerifySignal@hexByte& (0+255),b
  2909                           
  2910                           ;RFID_Reader.c: 43: unsigned char i=0;
  2911  001922  0E00               	movlw	0
  2912  001924  6F60               	movwf	VerifySignal@i& (0+255),b
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;RFID_Reader.c: 46: hexByte = (RecievedString[3]<<8) + RecievedString[4];
  2916  001926  EE20 F004          	lfsr	2,4
  2917  00192A  502C               	movf	VerifySignal@RecievedString,w,c
  2918  00192C  26D9               	addwf	fsr2l,f,c
  2919  00192E  502D               	movf	VerifySignal@RecievedString+1,w,c
  2920  001930  22DA               	addwfc	fsr2h,f,c
  2921  001932  50DF               	movf	indf2,w,c
  2922  001934  6E2E               	movwf	??_VerifySignal& (0+255),c
  2923  001936  EE20 F003          	lfsr	2,3
  2924  00193A  502C               	movf	VerifySignal@RecievedString,w,c
  2925  00193C  26D9               	addwf	fsr2l,f,c
  2926  00193E  502D               	movf	VerifySignal@RecievedString+1,w,c
  2927  001940  22DA               	addwfc	fsr2h,f,c
  2928  001942  50DF               	movf	indf2,w,c
  2929  001944  6E2F               	movwf	(??_VerifySignal+1)& (0+255),c
  2930  001946  502F               	movf	??_VerifySignal+1,w,c
  2931  001948  6E31               	movwf	(??_VerifySignal+3)& (0+255),c
  2932  00194A  6A30               	clrf	(??_VerifySignal+2)& (0+255),c
  2933  00194C  502E               	movf	??_VerifySignal,w,c
  2934  00194E  2430               	addwf	??_VerifySignal+2,w,c
  2935  001950  6F62               	movwf	VerifySignal@hexByte& (0+255),b
  2936  001952  0E00               	movlw	0
  2937  001954  2031               	addwfc	??_VerifySignal+3,w,c
  2938  001956  6F63               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;RFID_Reader.c: 47: checksum = ((RecievedString[1]<<8) + RecievedString[2]) ^ hexByte;
  2942  001958  EE20 F002          	lfsr	2,2
  2943  00195C  502C               	movf	VerifySignal@RecievedString,w,c
  2944  00195E  26D9               	addwf	fsr2l,f,c
  2945  001960  502D               	movf	VerifySignal@RecievedString+1,w,c
  2946  001962  22DA               	addwfc	fsr2h,f,c
  2947  001964  50DF               	movf	indf2,w,c
  2948  001966  1962               	xorwf	VerifySignal@hexByte& (0+255),w,b
  2949  001968  6F61               	movwf	VerifySignal@checksum& (0+255),b
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;RFID_Reader.c: 56: return 1;
  2953  00196A  0E01               	movlw	1
  2954  00196C  0012               	return	
  2955  00196E                     __end_of_VerifySignal:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           prodh	equ	0xFF4
  2959                           prodl	equ	0xFF3
  2960                           intcon	equ	0xFF2
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           indf1	equ	0xFE7
  2964                           plusw1	equ	0xFE3
  2965                           fsr1h	equ	0xFE2
  2966                           fsr1l	equ	0xFE1
  2967                           indf2	equ	0xFDF
  2968                           postinc2	equ	0xFDE
  2969                           postdec2	equ	0xFDD
  2970                           plusw2	equ	0xFDB
  2971                           fsr2h	equ	0xFDA
  2972                           fsr2l	equ	0xFD9
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _ScanWithRange *****************
  2976 ;; Defined at:
  2977 ;;		line 98 in file "Movement.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  2980 ;;		 -> main@mL(9), 
  2981 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  2982 ;;		 -> main@mR(9), 
  2983 ;;  loops           2   32[BANK0 ] int 
  2984 ;;  MoveTime        2   34[BANK0 ] PTR int 
  2985 ;;		 -> main@MoveTime(100), 
  2986 ;;  Move            2   36[BANK0 ] PTR unsigned char 
  2987 ;;		 -> main@Move(1), 
  2988 ;;  MoveType        2   38[BANK0 ] PTR unsigned char 
  2989 ;;		 -> main@MoveType(50), 
  2990 ;;  RFID_Read       2   40[BANK0 ] PTR unsigned char 
  2991 ;;		 -> RFID_Read(1), 
  2992 ;;  millis          2   42[BANK0 ] PTR unsigned int 
  2993 ;;		 -> millis(2), 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;  buf            40   48[BANK0 ] unsigned char [40]
  2996 ;;  SensorResult    4   98[BANK0 ] unsigned int [2]
  2997 ;;  RightFlag       2  103[BANK0 ] unsigned int 
  2998 ;;  TimeAboveThr    2   96[BANK0 ] unsigned int 
  2999 ;;  LeftFlag        2   94[BANK0 ] unsigned int 
  3000 ;;  DirectionFou    2   90[BANK0 ] const unsigned int 
  3001 ;;  i               2   88[BANK0 ] unsigned int 
  3002 ;;  LeftFlick       1  102[BANK0 ] const char 
  3003 ;;  MiniLeftFlic    1   93[BANK0 ] const unsigned char 
  3004 ;;  MotorPower      1   92[BANK0 ] const unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      unsigned char 
  3007 ;; Registers used:
  3008 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3014 ;;      Params:         0      16       0       0
  3015 ;;      Locals:         0      57       0       0
  3016 ;;      Temps:          0       4       0       0
  3017 ;;      Totals:         0      77       0       0
  3018 ;;Total ram usage:       77 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    7
  3021 ;; This function calls:
  3022 ;;		_LCD_String
  3023 ;;		_SendLCD
  3024 ;;		_SetLine
  3025 ;;		_delay_tenth_s
  3026 ;;		_grabLeftIR
  3027 ;;		_grabRightIR
  3028 ;;		_sprintf
  3029 ;;		_stop
  3030 ;;		_turnLeft
  3031 ;;		_turnRight
  3032 ;; This function is called by:
  3033 ;;		_main
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text9
  3038  000A1C                     __ptext9:
  3039                           	opt stack 0
  3040  000A1C                     _ScanWithRange:
  3041                           	opt stack 23
  3042                           
  3043                           ;Movement.c: 103: unsigned int SensorResult[2]={0,0};
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;incstack = 0
  3047  000A1C  C0CB  F0C2         	movff	ScanWithRange@F3555,ScanWithRange@SensorResult
  3048  000A20  C0CC  F0C3         	movff	ScanWithRange@F3555+1,ScanWithRange@SensorResult+1
  3049  000A24  C0CD  F0C4         	movff	ScanWithRange@F3555+2,ScanWithRange@SensorResult+2
  3050  000A28  C0CE  F0C5         	movff	ScanWithRange@F3555+3,ScanWithRange@SensorResult+3
  3051                           
  3052                           ;Movement.c: 104: unsigned int LeftFlag=0;
  3053  000A2C  0E00               	movlw	0
  3054  000A2E  0100               	movlb	0	; () banked
  3055  000A30  6FBF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3056  000A32  0E00               	movlw	0
  3057  000A34  6FBE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3058                           
  3059                           ;Movement.c: 105: unsigned int RightFlag=0;
  3060  000A36  0E00               	movlw	0
  3061  000A38  6FC8               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3062  000A3A  0E00               	movlw	0
  3063  000A3C  6FC7               	movwf	ScanWithRange@RightFlag& (0+255),b
  3064                           
  3065                           ;Movement.c: 106: char buf[40];
  3066                           ;Movement.c: 107: unsigned int i=0;
  3067  000A3E  0E00               	movlw	0
  3068  000A40  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3069  000A42  0E00               	movlw	0
  3070  000A44  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3071                           
  3072                           ;Movement.c: 108: unsigned int TimeAboveThreshold=0;
  3073  000A46  0E00               	movlw	0
  3074  000A48  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3075  000A4A  0E00               	movlw	0
  3076  000A4C  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3077                           
  3078                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3079  000A4E  0E03               	movlw	3
  3080  000A50  6FBB               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3081  000A52  0EE8               	movlw	232
  3082  000A54  6FBA               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3083                           
  3084                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3085  000A56  0E28               	movlw	40
  3086  000A58  6FBC               	movwf	ScanWithRange@MotorPower& (0+255),b
  3087                           
  3088                           ;Movement.c: 114: const signed char LeftFlick=2;
  3089  000A5A  0E02               	movlw	2
  3090  000A5C  6FC6               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3091                           
  3092                           ;Movement.c: 118: const unsigned char MiniLeftFlick=1;
  3093  000A5E  0E01               	movlw	1
  3094  000A60  6FBD               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;Movement.c: 124: (MoveType[*Move]) = 2;
  3098  000A62  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3099  000A66  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3100  000A6A  50DF               	movf	indf2,w,c
  3101  000A6C  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3102  000A6E  518C               	movf	??_ScanWithRange& (0+255),w,b
  3103  000A70  0D01               	mullw	1
  3104  000A72  50F3               	movf	prodl,w,c
  3105  000A74  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3106  000A76  6ED9               	movwf	fsr2l,c
  3107  000A78  50F4               	movf	prodh,w,c
  3108  000A7A  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3109  000A7C  6EDA               	movwf	fsr2h,c
  3110  000A7E  0E02               	movlw	2
  3111  000A80  6EDF               	movwf	indf2,c
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;Movement.c: 125: (MoveTime[*Move]) = LeftFlick;
  3115  000A82  C0C6  F08C         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3116  000A86  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3117  000A88  BF8C               	btfsc	??_ScanWithRange& (0+255),7,b
  3118  000A8A  078D               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3119  000A8C  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3120  000A90  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3121  000A94  50DF               	movf	indf2,w,c
  3122  000A96  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3123  000A98  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3124  000A9A  0D02               	mullw	2
  3125  000A9C  50F3               	movf	prodl,w,c
  3126  000A9E  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3127  000AA0  6ED9               	movwf	fsr2l,c
  3128  000AA2  50F4               	movf	prodh,w,c
  3129  000AA4  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3130  000AA6  6EDA               	movwf	fsr2h,c
  3131  000AA8  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3132  000AAC  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;Movement.c: 126: *Move = *Move+1;
  3136  000AB0  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3137  000AB4  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3138  000AB8  50DF               	movf	indf2,w,c
  3139  000ABA  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3140  000ABC  298C               	incf	??_ScanWithRange& (0+255),w,b
  3141  000ABE  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3142  000AC2  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3143  000AC6  6EDF               	movwf	indf2,c
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;Movement.c: 127: turnLeft(mL,mR, 100);
  3147  000AC8  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3148  000ACC  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3149  000AD0  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3150  000AD4  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3151  000AD8  0E64               	movlw	100
  3152  000ADA  6F7B               	movwf	turnLeft@power& (0+255),b
  3153  000ADC  EC3F  F00D         	call	_turnLeft	;wreg free
  3154                           
  3155                           ;Movement.c: 128: delay_tenth_s(LeftFlick);
  3156  000AE0  0100               	movlb	0	; () banked
  3157  000AE2  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3158  000AE4  EC7A  F00D         	call	_delay_tenth_s
  3159                           
  3160                           ;Movement.c: 129: stop(mL,mR);
  3161  000AE8  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3162  000AEC  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3163  000AF0  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3164  000AF4  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3165  000AF8  EC1A  F00B         	call	_stop	;wreg free
  3166                           
  3167                           ;Movement.c: 132: turnRight(mL,mR, MotorPower);
  3168  000AFC  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3169  000B00  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3170  000B04  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3171  000B08  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3172  000B0C  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnRight@power
  3173  000B10  EC21  F00D         	call	_turnRight	;wreg free
  3174                           
  3175                           ;Movement.c: 135: TMR0L = 0;
  3176  000B14  0E00               	movlw	0
  3177  000B16  6ED6               	movwf	4054,c	;volatile
  3178                           
  3179                           ;Movement.c: 136: TMR0H = 0;
  3180  000B18  0E00               	movlw	0
  3181  000B1A  6ED7               	movwf	4055,c	;volatile
  3182                           
  3183                           ;Movement.c: 137: *millis = 0;
  3184  000B1C  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3185  000B20  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3186  000B24  0E00               	movlw	0
  3187  000B26  6EDE               	movwf	postinc2,c
  3188  000B28  0E00               	movlw	0
  3189  000B2A  6EDD               	movwf	postdec2,c
  3190                           
  3191                           ;Movement.c: 138: T0CONbits.TMR0ON=1;
  3192  000B2C  8ED5               	bsf	4053,7,c	;volatile
  3193                           
  3194                           ;Movement.c: 140: for (i=1; i<=loops; i++) {
  3195  000B2E  0E00               	movlw	0
  3196  000B30  0100               	movlb	0	; () banked
  3197  000B32  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3198  000B34  0E01               	movlw	1
  3199  000B36  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3200  000B38  D1A0               	goto	l224
  3201  000B3A                     
  3202                           ; BSR set to: 0
  3203                           ;Movement.c: 143: SensorResult[0]=grabLeftIR();
  3204                           
  3205                           ; BSR set to: 0
  3206  000B3A  EC1F  F00C         	call	_grabLeftIR	;wreg free
  3207  000B3E  C02C  F0C2         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3208  000B42  C02D  F0C3         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3209                           
  3210                           ;Movement.c: 144: SensorResult[1]=grabRightIR();
  3211  000B46  ECE4  F00B         	call	_grabRightIR	;wreg free
  3212  000B4A  C02C  F0C4         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3213  000B4E  C02D  F0C5         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3214                           
  3215                           ;Movement.c: 148: CAP1BUFH=0;
  3216  000B52  0E00               	movlw	0
  3217  000B54  6E69               	movwf	3945,c	;volatile
  3218                           
  3219                           ;Movement.c: 149: CAP1BUFL=0;
  3220  000B56  0E00               	movlw	0
  3221  000B58  6E68               	movwf	3944,c	;volatile
  3222                           
  3223                           ;Movement.c: 150: CAP2BUFH=0;
  3224  000B5A  0E00               	movlw	0
  3225  000B5C  6E67               	movwf	3943,c	;volatile
  3226                           
  3227                           ;Movement.c: 151: CAP2BUFL=0;
  3228  000B5E  0E00               	movlw	0
  3229  000B60  6E66               	movwf	3942,c	;volatile
  3230                           
  3231                           ;Movement.c: 155: SendLCD(0b00000001,0);
  3232  000B62  0E00               	movlw	0
  3233  000B64  6E30               	movwf	SendLCD@type,c
  3234  000B66  0E01               	movlw	1
  3235  000B68  ECE8  F00D         	call	_SendLCD
  3236                           
  3237                           ;Movement.c: 156: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3238  000B6C  0E21               	movlw	33
  3239  000B6E                     u3377:
  3240  000B6E  2EE8               	decfsz	wreg,f,c
  3241  000B70  D7FE               	bra	u3377
  3242  000B72  F000               	nop	
  3243                           
  3244                           ;Movement.c: 157: SendLCD(0b00000010,0);
  3245  000B74  0E00               	movlw	0
  3246  000B76  6E30               	movwf	SendLCD@type,c
  3247  000B78  0E02               	movlw	2
  3248  000B7A  ECE8  F00D         	call	_SendLCD
  3249                           
  3250                           ;Movement.c: 158: _delay((unsigned long)((2)*(8000000/4000.0)));
  3251  000B7E  0E06               	movlw	6
  3252  000B80  0100               	movlb	0	; () banked
  3253  000B82  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3254  000B84  0E30               	movlw	48
  3255  000B86                     u3387:
  3256  000B86  2EE8               	decfsz	wreg,f,c
  3257  000B88  D7FE               	bra	u3387
  3258  000B8A  2F8C               	decfsz	??_ScanWithRange& (0+255),f,b
  3259  000B8C  D7FC               	bra	u3387
  3260  000B8E  F000               	nop	
  3261                           
  3262                           ;Movement.c: 159: SetLine(1);
  3263  000B90  0E01               	movlw	1
  3264  000B92  ECCD  F00D         	call	_SetLine
  3265                           
  3266                           ;Movement.c: 160: LCD_String("     ScanIR");
  3267  000B96  0E2D               	movlw	low STR_1
  3268  000B98  0100               	movlb	0	; () banked
  3269  000B9A  6F60               	movwf	LCD_String@string& (0+255),b
  3270  000B9C  0E03               	movlw	high STR_1
  3271  000B9E  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3272  000BA0  EC5A  F00C         	call	_LCD_String	;wreg free
  3273                           
  3274                           ;Movement.c: 161: SetLine(2);
  3275  000BA4  0E02               	movlw	2
  3276  000BA6  ECCD  F00D         	call	_SetLine
  3277                           
  3278                           ;Movement.c: 162: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3279  000BAA  0E90               	movlw	low ScanWithRange@buf
  3280  000BAC  0100               	movlb	0	; () banked
  3281  000BAE  6F67               	movwf	sprintf@sp& (0+255),b
  3282  000BB0  0E00               	movlw	high ScanWithRange@buf
  3283  000BB2  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  3284  000BB4  0E0C               	movlw	low (STR_6+1)
  3285  000BB6  6F69               	movwf	sprintf@f& (0+255),b
  3286  000BB8  0E03               	movlw	high (STR_6+1)
  3287  000BBA  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  3288  000BBC  C0C2  F06B         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3289  000BC0  C0C3  F06C         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3290  000BC4  C0C4  F06D         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3291  000BC8  C0C5  F06E         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3292  000BCC  EC8D  F007         	call	_sprintf	;wreg free
  3293                           
  3294                           ;Movement.c: 163: LCD_String(buf);
  3295  000BD0  0E90               	movlw	low ScanWithRange@buf
  3296  000BD2  0100               	movlb	0	; () banked
  3297  000BD4  6F60               	movwf	LCD_String@string& (0+255),b
  3298  000BD6  0E00               	movlw	high ScanWithRange@buf
  3299  000BD8  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3300  000BDA  EC5A  F00C         	call	_LCD_String	;wreg free
  3301                           
  3302                           ;Movement.c: 167: if (SensorResult[1]>DirectionFoundThreshold) {
  3303  000BDE  0100               	movlb	0	; () banked
  3304  000BE0  51C4               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3305  000BE2  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3306  000BE4  51C5               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3307  000BE6  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3308  000BE8  B0D8               	btfsc	status,0,c
  3309  000BEA  D008               	goto	l226
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;Movement.c: 168: RightFlag=*millis;
  3313  000BEC  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3314  000BF0  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3315  000BF4  CFDE F0C7          	movff	postinc2,ScanWithRange@RightFlag
  3316  000BF8  CFDD F0C8          	movff	postdec2,ScanWithRange@RightFlag+1
  3317  000BFC                     l226:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;Movement.c: 169: }
  3321                           ;Movement.c: 171: if (SensorResult[0]>DirectionFoundThreshold) {
  3322                           
  3323                           ; BSR set to: 0
  3324  000BFC  51C2               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3325  000BFE  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3326  000C00  51C3               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3327  000C02  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3328  000C04  B0D8               	btfsc	status,0,c
  3329  000C06  D008               	goto	l227
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;Movement.c: 172: LeftFlag=*millis;
  3333  000C08  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3334  000C0C  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3335  000C10  CFDE F0BE          	movff	postinc2,ScanWithRange@LeftFlag
  3336  000C14  CFDD F0BF          	movff	postdec2,ScanWithRange@LeftFlag+1
  3337  000C18                     l227:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;Movement.c: 173: }
  3341                           ;Movement.c: 180: if (LeftFlag>0) {
  3342                           
  3343                           ; BSR set to: 0
  3344  000C18  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3345  000C1A  11BF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3346  000C1C  B4D8               	btfsc	status,2,c
  3347  000C1E  D122               	goto	l234
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;Movement.c: 183: if (RightFlag>0) {
  3351  000C20  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3352  000C22  11C8               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3353  000C24  B4D8               	btfsc	status,2,c
  3354  000C26  D08A               	goto	l229
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;Movement.c: 184: TimeAboveThreshold=LeftFlag-RightFlag;
  3358  000C28  C0C7  F08C         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3359  000C2C  C0C8  F08D         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3360  000C30  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3361  000C32  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3362  000C34  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3363  000C36  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3364  000C38  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3365  000C3A  258C               	addwf	??_ScanWithRange& (0+255),w,b
  3366  000C3C  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3367  000C3E  51BF               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3368  000C40  218D               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3369  000C42  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;Movement.c: 185: TMR0L = 0;
  3373  000C44  0E00               	movlw	0
  3374  000C46  6ED6               	movwf	4054,c	;volatile
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;Movement.c: 186: TMR0H = 0;
  3378  000C48  0E00               	movlw	0
  3379  000C4A  6ED7               	movwf	4055,c	;volatile
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;Movement.c: 187: *millis = 0;
  3383  000C4C  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3384  000C50  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3385  000C54  0E00               	movlw	0
  3386  000C56  6EDE               	movwf	postinc2,c
  3387  000C58  0E00               	movlw	0
  3388  000C5A  6EDD               	movwf	postdec2,c
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;Movement.c: 188: stop(mL,mR);
  3392  000C5C  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3393  000C60  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3394  000C64  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3395  000C68  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3396  000C6C  EC1A  F00B         	call	_stop	;wreg free
  3397                           
  3398                           ;Movement.c: 189: while (*millis<(TimeAboveThreshold>>1)) {
  3399  000C70  D00C               	goto	l230
  3400  000C72                     
  3401                           ;Movement.c: 190: turnLeft(mL,mR, MotorPower);
  3402  000C72  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3403  000C76  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3404  000C7A  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3405  000C7E  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3406  000C82  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3407  000C86  EC3F  F00D         	call	_turnLeft	;wreg free
  3408  000C8A                     l230:
  3409  000C8A  90D8               	bcf	status,0,c
  3410  000C8C  0100               	movlb	0	; () banked
  3411  000C8E  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3412  000C90  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3413  000C92  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3414  000C94  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3415  000C96  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3416  000C9A  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3417  000C9E  518C               	movf	??_ScanWithRange& (0+255),w,b
  3418  000CA0  5CDE               	subwf	postinc2,w,c
  3419  000CA2  518D               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3420  000CA4  58DE               	subwfb	postinc2,w,c
  3421  000CA6  A0D8               	btfss	status,0,c
  3422  000CA8  D7E4               	goto	l231
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;Movement.c: 191: }
  3426                           ;Movement.c: 192: T0CONbits.TMR0ON=0;
  3427  000CAA  9ED5               	bcf	4053,7,c	;volatile
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;Movement.c: 193: stop(mL,mR);
  3431  000CAC  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3432  000CB0  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3433  000CB4  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3434  000CB8  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3435  000CBC  EC1A  F00B         	call	_stop	;wreg free
  3436                           
  3437                           ;Movement.c: 195: (MoveType[*Move]) = 1;
  3438  000CC0  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3439  000CC4  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3440  000CC8  50DF               	movf	indf2,w,c
  3441  000CCA  0100               	movlb	0	; () banked
  3442  000CCC  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3443  000CCE  518C               	movf	??_ScanWithRange& (0+255),w,b
  3444  000CD0  0D01               	mullw	1
  3445  000CD2  50F3               	movf	prodl,w,c
  3446  000CD4  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3447  000CD6  6ED9               	movwf	fsr2l,c
  3448  000CD8  50F4               	movf	prodh,w,c
  3449  000CDA  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3450  000CDC  6EDA               	movwf	fsr2h,c
  3451  000CDE  0E01               	movlw	1
  3452  000CE0  6EDF               	movwf	indf2,c
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;Movement.c: 196: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3456  000CE2  90D8               	bcf	status,0,c
  3457  000CE4  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3458  000CE6  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3459  000CE8  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3460  000CEA  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3461  000CEC  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3462  000CEE  278C               	addwf	??_ScanWithRange& (0+255),f,b
  3463  000CF0  51C8               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3464  000CF2  238D               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3465  000CF4  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3466  000CF6  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3467  000CF8  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3468  000CFA  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3469  000CFC  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3470  000D00  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3471  000D04  50DF               	movf	indf2,w,c
  3472  000D06  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3473  000D08  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3474  000D0A  0D02               	mullw	2
  3475  000D0C  50F3               	movf	prodl,w,c
  3476  000D0E  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3477  000D10  6ED9               	movwf	fsr2l,c
  3478  000D12  50F4               	movf	prodh,w,c
  3479  000D14  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3480  000D16  6EDA               	movwf	fsr2h,c
  3481  000D18  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3482  000D1C  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;Movement.c: 197: *Move = *Move+1;
  3486  000D20  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3487  000D24  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3488  000D28  50DF               	movf	indf2,w,c
  3489  000D2A  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3490  000D2C  298C               	incf	??_ScanWithRange& (0+255),w,b
  3491  000D2E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3492  000D32  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3493  000D36  6EDF               	movwf	indf2,c
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;Movement.c: 199: return 2;
  3497  000D38  0E02               	movlw	2
  3498                           
  3499                           ; BSR set to: 0
  3500  000D3A  0012               	return	
  3501  000D3C                     l229:
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;Movement.c: 201: T0CONbits.TMR0ON=0;
  3505  000D3C  9ED5               	bcf	4053,7,c	;volatile
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;Movement.c: 205: (MoveType[*Move]) = 1;
  3509  000D3E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3510  000D42  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3511  000D46  50DF               	movf	indf2,w,c
  3512  000D48  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3513  000D4A  518C               	movf	??_ScanWithRange& (0+255),w,b
  3514  000D4C  0D01               	mullw	1
  3515  000D4E  50F3               	movf	prodl,w,c
  3516  000D50  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3517  000D52  6ED9               	movwf	fsr2l,c
  3518  000D54  50F4               	movf	prodh,w,c
  3519  000D56  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3520  000D58  6EDA               	movwf	fsr2h,c
  3521  000D5A  0E01               	movlw	1
  3522  000D5C  6EDF               	movwf	indf2,c
  3523                           
  3524                           ;Movement.c: 206: (MoveTime[*Move]) = -(*millis);
  3525  000D5E  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3526  000D62  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3527  000D66  CFDE F08C          	movff	postinc2,??_ScanWithRange
  3528  000D6A  CFDD F08D          	movff	postdec2,??_ScanWithRange+1
  3529  000D6E  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3530  000D70  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3531  000D72  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3532  000D74  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3533  000D76  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3534  000D7A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3535  000D7E  50DF               	movf	indf2,w,c
  3536  000D80  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3537  000D82  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3538  000D84  0D02               	mullw	2
  3539  000D86  50F3               	movf	prodl,w,c
  3540  000D88  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3541  000D8A  6ED9               	movwf	fsr2l,c
  3542  000D8C  50F4               	movf	prodh,w,c
  3543  000D8E  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3544  000D90  6EDA               	movwf	fsr2h,c
  3545  000D92  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3546  000D96  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;Movement.c: 207: *Move = *Move+1;
  3550  000D9A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3551  000D9E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3552  000DA2  50DF               	movf	indf2,w,c
  3553  000DA4  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3554  000DA6  298C               	incf	??_ScanWithRange& (0+255),w,b
  3555  000DA8  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3556  000DAC  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3557  000DB0  6EDF               	movwf	indf2,c
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;Movement.c: 208: stop(mL,mR);
  3561  000DB2  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3562  000DB6  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3563  000DBA  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3564  000DBE  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3565  000DC2  EC1A  F00B         	call	_stop	;wreg free
  3566                           
  3567                           ;Movement.c: 211: turnLeft(mL,mR,100);
  3568  000DC6  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3569  000DCA  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3570  000DCE  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3571  000DD2  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3572  000DD6  0E64               	movlw	100
  3573  000DD8  0100               	movlb	0	; () banked
  3574  000DDA  6F7B               	movwf	turnLeft@power& (0+255),b
  3575  000DDC  EC3F  F00D         	call	_turnLeft	;wreg free
  3576                           
  3577                           ;Movement.c: 212: delay_tenth_s(MiniLeftFlick);
  3578  000DE0  0100               	movlb	0	; () banked
  3579  000DE2  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3580  000DE4  EC7A  F00D         	call	_delay_tenth_s
  3581                           
  3582                           ;Movement.c: 213: stop(mL,mR);
  3583  000DE8  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3584  000DEC  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3585  000DF0  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3586  000DF4  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3587  000DF8  EC1A  F00B         	call	_stop	;wreg free
  3588                           
  3589                           ;Movement.c: 214: (MoveType[*Move]) = 2;
  3590  000DFC  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3591  000E00  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3592  000E04  50DF               	movf	indf2,w,c
  3593  000E06  0100               	movlb	0	; () banked
  3594  000E08  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3595  000E0A  518C               	movf	??_ScanWithRange& (0+255),w,b
  3596  000E0C  0D01               	mullw	1
  3597  000E0E  50F3               	movf	prodl,w,c
  3598  000E10  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3599  000E12  6ED9               	movwf	fsr2l,c
  3600  000E14  50F4               	movf	prodh,w,c
  3601  000E16  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3602  000E18  6EDA               	movwf	fsr2h,c
  3603  000E1A  0E02               	movlw	2
  3604  000E1C  6EDF               	movwf	indf2,c
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;Movement.c: 215: (MoveTime[*Move]) = MiniLeftFlick;
  3608  000E1E  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3609  000E20  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3610  000E22  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3611  000E24  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3612  000E28  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3613  000E2C  50DF               	movf	indf2,w,c
  3614  000E2E  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3615  000E30  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3616  000E32  0D02               	mullw	2
  3617  000E34  50F3               	movf	prodl,w,c
  3618  000E36  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3619  000E38  6ED9               	movwf	fsr2l,c
  3620  000E3A  50F4               	movf	prodh,w,c
  3621  000E3C  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3622  000E3E  6EDA               	movwf	fsr2h,c
  3623  000E40  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3624  000E44  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;Movement.c: 216: *Move = *Move+1;
  3628  000E48  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3629  000E4C  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3630  000E50  50DF               	movf	indf2,w,c
  3631  000E52  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3632  000E54  298C               	incf	??_ScanWithRange& (0+255),w,b
  3633  000E56  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3634  000E5A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3635  000E5E  6EDF               	movwf	indf2,c
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;Movement.c: 219: return 2;
  3639  000E60  0E02               	movlw	2
  3640                           
  3641                           ; BSR set to: 0
  3642  000E62  0012               	return	
  3643  000E64                     l234:
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;Movement.c: 220: }
  3647                           ;Movement.c: 221: }
  3648                           ;Movement.c: 223: if (*RFID_Read==1) {
  3649                           
  3650                           ; BSR set to: 0
  3651                           
  3652                           ; BSR set to: 0
  3653  000E64  C088  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3654  000E68  C089  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3655  000E6C  04DE               	decf	postinc2,w,c
  3656  000E6E  A4D8               	btfss	status,2,c
  3657  000E70  D002               	goto	l235
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;Movement.c: 224: return 2;
  3661  000E72  0E02               	movlw	2
  3662                           
  3663                           ; BSR set to: 0
  3664  000E74  0012               	return	
  3665  000E76                     l235:
  3666                           
  3667                           ; BSR set to: 0
  3668                           
  3669                           ; BSR set to: 0
  3670  000E76  4BB8               	infsnz	ScanWithRange@i& (0+255),f,b
  3671  000E78  2BB9               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3672  000E7A                     l224:
  3673                           
  3674                           ; BSR set to: 0
  3675                           
  3676                           ; BSR set to: 0
  3677  000E7A  51B8               	movf	ScanWithRange@i& (0+255),w,b
  3678  000E7C  5D80               	subwf	ScanWithRange@loops& (0+255),w,b
  3679  000E7E  51B9               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3680  000E80  5981               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3681  000E82  B0D8               	btfsc	status,0,c
  3682  000E84  D65A               	goto	l225
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;Movement.c: 225: }
  3686                           ;Movement.c: 226: }
  3687                           ;Movement.c: 231: (MoveType[*Move]) = 2;
  3688                           
  3689                           ; BSR set to: 0
  3690  000E86  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3691  000E8A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3692  000E8E  50DF               	movf	indf2,w,c
  3693  000E90  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3694  000E92  518C               	movf	??_ScanWithRange& (0+255),w,b
  3695  000E94  0D01               	mullw	1
  3696  000E96  50F3               	movf	prodl,w,c
  3697  000E98  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3698  000E9A  6ED9               	movwf	fsr2l,c
  3699  000E9C  50F4               	movf	prodh,w,c
  3700  000E9E  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3701  000EA0  6EDA               	movwf	fsr2h,c
  3702  000EA2  0E02               	movlw	2
  3703  000EA4  6EDF               	movwf	indf2,c
  3704                           
  3705                           ;Movement.c: 232: (MoveTime[*Move]) = -2;
  3706  000EA6  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3707  000EAA  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3708  000EAE  50DF               	movf	indf2,w,c
  3709  000EB0  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3710  000EB2  518C               	movf	??_ScanWithRange& (0+255),w,b
  3711  000EB4  0D02               	mullw	2
  3712  000EB6  50F3               	movf	prodl,w,c
  3713  000EB8  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3714  000EBA  6ED9               	movwf	fsr2l,c
  3715  000EBC  50F4               	movf	prodh,w,c
  3716  000EBE  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3717  000EC0  6EDA               	movwf	fsr2h,c
  3718  000EC2  0EFE               	movlw	254
  3719  000EC4  6EDE               	movwf	postinc2,c
  3720  000EC6  0EFF               	movlw	255
  3721  000EC8  6EDD               	movwf	postdec2,c
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;Movement.c: 233: *Move = *Move+1;
  3725  000ECA  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3726  000ECE  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3727  000ED2  50DF               	movf	indf2,w,c
  3728  000ED4  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3729  000ED6  298C               	incf	??_ScanWithRange& (0+255),w,b
  3730  000ED8  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3731  000EDC  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3732  000EE0  6EDF               	movwf	indf2,c
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;Movement.c: 234: turnRight(mL,mR, 100);
  3736  000EE2  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3737  000EE6  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3738  000EEA  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3739  000EEE  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3740  000EF2  0E64               	movlw	100
  3741  000EF4  6F7B               	movwf	turnRight@power& (0+255),b
  3742  000EF6  EC21  F00D         	call	_turnRight	;wreg free
  3743                           
  3744                           ;Movement.c: 235: delay_tenth_s(LeftFlick);
  3745  000EFA  0100               	movlb	0	; () banked
  3746  000EFC  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3747  000EFE  EC7A  F00D         	call	_delay_tenth_s
  3748                           
  3749                           ;Movement.c: 236: stop(mL,mR);
  3750  000F02  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3751  000F06  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3752  000F0A  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3753  000F0E  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3754  000F12  EC1A  F00B         	call	_stop	;wreg free
  3755                           
  3756                           ;Movement.c: 237: return -1;
  3757  000F16  0EFF               	movlw	255
  3758  000F18  0012               	return	
  3759  000F1A                     __end_of_ScanWithRange:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           prodh	equ	0xFF4
  3763                           prodl	equ	0xFF3
  3764                           intcon	equ	0xFF2
  3765                           postinc0	equ	0xFEE
  3766                           wreg	equ	0xFE8
  3767                           indf1	equ	0xFE7
  3768                           plusw1	equ	0xFE3
  3769                           fsr1h	equ	0xFE2
  3770                           fsr1l	equ	0xFE1
  3771                           indf2	equ	0xFDF
  3772                           postinc2	equ	0xFDE
  3773                           postdec2	equ	0xFDD
  3774                           plusw2	equ	0xFDB
  3775                           fsr2h	equ	0xFDA
  3776                           fsr2l	equ	0xFD9
  3777                           status	equ	0xFD8
  3778                           
  3779 ;; *************** function _turnRight *****************
  3780 ;; Defined at:
  3781 ;;		line 103 in file "dc_motor.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3784 ;;		 -> main@mL(9), 
  3785 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3786 ;;		 -> main@mR(9), 
  3787 ;;  power           1   27[BANK0 ] unsigned char 
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;		None
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      void 
  3792 ;; Registers used:
  3793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3794 ;; Tracked objects:
  3795 ;;		On entry : 0/0
  3796 ;;		On exit  : 0/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3799 ;;      Params:         0       5       0       0
  3800 ;;      Locals:         0       0       0       0
  3801 ;;      Temps:          0       0       0       0
  3802 ;;      Totals:         0       5       0       0
  3803 ;;Total ram usage:        5 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; Hardware stack levels required when called:    6
  3806 ;; This function calls:
  3807 ;;		_fullSpeed
  3808 ;; This function is called by:
  3809 ;;		_ScanWithRange
  3810 ;;		_main
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           	psect	text10
  3815  001A42                     __ptext10:
  3816                           	opt stack 0
  3817  001A42                     _turnRight:
  3818                           	opt stack 24
  3819                           
  3820                           ;dc_motor.c: 107: mL->direction=0;
  3821                           
  3822                           ;incstack = 0
  3823  001A42  0100               	movlb	0	; () banked
  3824  001A44  EE20 F001          	lfsr	2,1
  3825  001A48  5177               	movf	turnRight@mL& (0+255),w,b
  3826  001A4A  26D9               	addwf	fsr2l,f,c
  3827  001A4C  5178               	movf	(turnRight@mL+1)& (0+255),w,b
  3828  001A4E  22DA               	addwfc	fsr2h,f,c
  3829  001A50  0E00               	movlw	0
  3830  001A52  6EDF               	movwf	indf2,c
  3831                           
  3832                           ;dc_motor.c: 108: mR->direction=1;
  3833  001A54  EE20 F001          	lfsr	2,1
  3834  001A58  5179               	movf	turnRight@mR& (0+255),w,b
  3835  001A5A  26D9               	addwf	fsr2l,f,c
  3836  001A5C  517A               	movf	(turnRight@mR+1)& (0+255),w,b
  3837  001A5E  22DA               	addwfc	fsr2h,f,c
  3838  001A60  0E01               	movlw	1
  3839  001A62  6EDF               	movwf	indf2,c
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3843  001A64  C077  F071         	movff	turnRight@mL,fullSpeed@mL
  3844  001A68  C078  F072         	movff	turnRight@mL+1,fullSpeed@mL+1
  3845  001A6C  C079  F073         	movff	turnRight@mR,fullSpeed@mR
  3846  001A70  C07A  F074         	movff	turnRight@mR+1,fullSpeed@mR+1
  3847  001A74  C07B  F075         	movff	turnRight@power,fullSpeed@power
  3848  001A78  ECA6  F00B         	call	_fullSpeed	;wreg free
  3849  001A7C  0012               	return		;funcret
  3850  001A7E                     __end_of_turnRight:
  3851                           	opt stack 0
  3852                           tblptru	equ	0xFF8
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           postinc0	equ	0xFEE
  3857                           wreg	equ	0xFE8
  3858                           indf1	equ	0xFE7
  3859                           plusw1	equ	0xFE3
  3860                           fsr1h	equ	0xFE2
  3861                           fsr1l	equ	0xFE1
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           plusw2	equ	0xFDB
  3866                           fsr2h	equ	0xFDA
  3867                           fsr2l	equ	0xFD9
  3868                           status	equ	0xFD8
  3869                           
  3870 ;; *************** function _turnLeft *****************
  3871 ;; Defined at:
  3872 ;;		line 92 in file "dc_motor.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3875 ;;		 -> main@mL(9), 
  3876 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3877 ;;		 -> main@mR(9), 
  3878 ;;  power           1   27[BANK0 ] unsigned char 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;		None
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3890 ;;      Params:         0       5       0       0
  3891 ;;      Locals:         0       0       0       0
  3892 ;;      Temps:          0       0       0       0
  3893 ;;      Totals:         0       5       0       0
  3894 ;;Total ram usage:        5 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    6
  3897 ;; This function calls:
  3898 ;;		_fullSpeed
  3899 ;; This function is called by:
  3900 ;;		_ScanWithRange
  3901 ;;		_main
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text11
  3906  001A7E                     __ptext11:
  3907                           	opt stack 0
  3908  001A7E                     _turnLeft:
  3909                           	opt stack 24
  3910                           
  3911                           ;dc_motor.c: 96: mL->direction=1;
  3912                           
  3913                           ;incstack = 0
  3914  001A7E  0100               	movlb	0	; () banked
  3915  001A80  EE20 F001          	lfsr	2,1
  3916  001A84  5177               	movf	turnLeft@mL& (0+255),w,b
  3917  001A86  26D9               	addwf	fsr2l,f,c
  3918  001A88  5178               	movf	(turnLeft@mL+1)& (0+255),w,b
  3919  001A8A  22DA               	addwfc	fsr2h,f,c
  3920  001A8C  0E01               	movlw	1
  3921  001A8E  6EDF               	movwf	indf2,c
  3922                           
  3923                           ;dc_motor.c: 97: mR->direction=0;
  3924  001A90  EE20 F001          	lfsr	2,1
  3925  001A94  5179               	movf	turnLeft@mR& (0+255),w,b
  3926  001A96  26D9               	addwf	fsr2l,f,c
  3927  001A98  517A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3928  001A9A  22DA               	addwfc	fsr2h,f,c
  3929  001A9C  0E00               	movlw	0
  3930  001A9E  6EDF               	movwf	indf2,c
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  3934  001AA0  C077  F071         	movff	turnLeft@mL,fullSpeed@mL
  3935  001AA4  C078  F072         	movff	turnLeft@mL+1,fullSpeed@mL+1
  3936  001AA8  C079  F073         	movff	turnLeft@mR,fullSpeed@mR
  3937  001AAC  C07A  F074         	movff	turnLeft@mR+1,fullSpeed@mR+1
  3938  001AB0  C07B  F075         	movff	turnLeft@power,fullSpeed@power
  3939  001AB4  ECA6  F00B         	call	_fullSpeed	;wreg free
  3940  001AB8  0012               	return		;funcret
  3941  001ABA                     __end_of_turnLeft:
  3942                           	opt stack 0
  3943                           tblptru	equ	0xFF8
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           postinc0	equ	0xFEE
  3948                           wreg	equ	0xFE8
  3949                           indf1	equ	0xFE7
  3950                           plusw1	equ	0xFE3
  3951                           fsr1h	equ	0xFE2
  3952                           fsr1l	equ	0xFE1
  3953                           indf2	equ	0xFDF
  3954                           postinc2	equ	0xFDE
  3955                           postdec2	equ	0xFDD
  3956                           plusw2	equ	0xFDB
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function _fullSpeed *****************
  3962 ;; Defined at:
  3963 ;;		line 113 in file "dc_motor.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  3966 ;;		 -> main@mL(9), 
  3967 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  3968 ;;		 -> main@mR(9), 
  3969 ;;  power           1   21[BANK0 ] unsigned char 
  3970 ;; Auto vars:     Size  Location     Type
  3971 ;;		None
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3981 ;;      Params:         0       5       0       0
  3982 ;;      Locals:         0       0       0       0
  3983 ;;      Temps:          0       1       0       0
  3984 ;;      Totals:         0       6       0       0
  3985 ;;Total ram usage:        6 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    5
  3988 ;; This function calls:
  3989 ;;		_setMotorPWM
  3990 ;; This function is called by:
  3991 ;;		_turnLeft
  3992 ;;		_turnRight
  3993 ;;		_fullSpeedBack
  3994 ;;		_main
  3995 ;;		_fullSpeedForward
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text12
  4000  00174C                     __ptext12:
  4001                           	opt stack 0
  4002  00174C                     _fullSpeed:
  4003                           	opt stack 24
  4004                           
  4005                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  4006                           
  4007                           ;incstack = 0
  4008  00174C  D02B               	goto	l67
  4009  00174E                     
  4010                           ;dc_motor.c: 117: if(mL->power<power){
  4011  00174E  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4012  001752  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4013  001756  0100               	movlb	0	; () banked
  4014  001758  5175               	movf	fullSpeed@power& (0+255),w,b
  4015  00175A  5CDE               	subwf	postinc2,w,c
  4016  00175C  B0D8               	btfsc	status,0,c
  4017  00175E  D005               	goto	l69
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;dc_motor.c: 118: mL->power++;
  4021  001760  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4022  001764  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4023  001768  2ADF               	incf	indf2,f,c
  4024  00176A                     l69:
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;dc_motor.c: 119: }
  4028                           ;dc_motor.c: 120: if(mR->power<power){
  4029                           
  4030                           ; BSR set to: 0
  4031  00176A  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4032  00176E  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4033  001772  5175               	movf	fullSpeed@power& (0+255),w,b
  4034  001774  5CDE               	subwf	postinc2,w,c
  4035  001776  B0D8               	btfsc	status,0,c
  4036  001778  D005               	goto	l70
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;dc_motor.c: 121: mR->power++;
  4040  00177A  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4041  00177E  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4042  001782  2ADF               	incf	indf2,f,c
  4043  001784                     l70:
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;dc_motor.c: 122: }
  4047                           ;dc_motor.c: 123: setMotorPWM(mL);
  4048                           
  4049                           ; BSR set to: 0
  4050  001784  C071  F068         	movff	fullSpeed@mL,setMotorPWM@m
  4051  001788  C072  F069         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4052  00178C  ECDD  F008         	call	_setMotorPWM	;wreg free
  4053                           
  4054                           ;dc_motor.c: 124: setMotorPWM(mR);
  4055  001790  C073  F068         	movff	fullSpeed@mR,setMotorPWM@m
  4056  001794  C074  F069         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4057  001798  ECDD  F008         	call	_setMotorPWM	;wreg free
  4058                           
  4059                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4060  00179C  0E21               	movlw	33
  4061  00179E                     u3397:
  4062  00179E  2EE8               	decfsz	wreg,f,c
  4063  0017A0  D7FE               	bra	u3397
  4064  0017A2  F000               	nop	
  4065  0017A4                     l67:
  4066  0017A4  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4067  0017A8  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4068  0017AC  0100               	movlb	0	; () banked
  4069  0017AE  5175               	movf	fullSpeed@power& (0+255),w,b
  4070  0017B0  5CDE               	subwf	postinc2,w,c
  4071  0017B2  A0D8               	btfss	status,0,c
  4072  0017B4  D7CC               	goto	l68
  4073                           
  4074                           ; BSR set to: 0
  4075  0017B6  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4076  0017BA  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4077  0017BE  5175               	movf	fullSpeed@power& (0+255),w,b
  4078  0017C0  5CDE               	subwf	postinc2,w,c
  4079  0017C2  B0D8               	btfsc	status,0,c
  4080  0017C4  0012               	return	
  4081  0017C6  D7C3               	goto	l68
  4082  0017C8                     __end_of_fullSpeed:
  4083                           	opt stack 0
  4084                           tblptru	equ	0xFF8
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           intcon	equ	0xFF2
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           indf1	equ	0xFE7
  4091                           plusw1	equ	0xFE3
  4092                           fsr1h	equ	0xFE2
  4093                           fsr1l	equ	0xFE1
  4094                           indf2	equ	0xFDF
  4095                           postinc2	equ	0xFDE
  4096                           postdec2	equ	0xFDD
  4097                           plusw2	equ	0xFDB
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function _delay_tenth_s *****************
  4103 ;; Defined at:
  4104 ;;		line 32 in file "Movement.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  tenth_second    1    wreg     unsigned char 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  tenth_second    1   44[COMRAM] unsigned char 
  4109 ;;  i               2   45[COMRAM] unsigned int 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      void 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4119 ;;      Params:         0       0       0       0
  4120 ;;      Locals:         3       0       0       0
  4121 ;;      Temps:          1       0       0       0
  4122 ;;      Totals:         4       0       0       0
  4123 ;;Total ram usage:        4 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    3
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_ScanWithRange
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text13
  4135  001AF4                     __ptext13:
  4136                           	opt stack 0
  4137  001AF4                     _delay_tenth_s:
  4138                           	opt stack 27
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;incstack = 0
  4142                           ;delay_tenth_s@tenth_seconds stored from wreg
  4143  001AF4  6E2D               	movwf	delay_tenth_s@tenth_seconds,c
  4144                           
  4145                           ;Movement.c: 33: unsigned int i=0;
  4146  001AF6  0E00               	movlw	0
  4147  001AF8  6E2F               	movwf	delay_tenth_s@i+1,c
  4148  001AFA  0E00               	movlw	0
  4149  001AFC  6E2E               	movwf	delay_tenth_s@i,c
  4150                           
  4151                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4152  001AFE  0E00               	movlw	0
  4153  001B00  6E2F               	movwf	delay_tenth_s@i+1,c
  4154  001B02  0E01               	movlw	1
  4155  001B04  6E2E               	movwf	delay_tenth_s@i,c
  4156  001B06  D009               	goto	l209
  4157  001B08                     
  4158                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4159  001B08  0E82               	movlw	130
  4160  001B0A  6E2C               	movwf	??_delay_tenth_s& (0+255),c
  4161  001B0C  0EDE               	movlw	222
  4162  001B0E                     u3407:
  4163  001B0E  2EE8               	decfsz	wreg,f,c
  4164  001B10  D7FE               	bra	u3407
  4165  001B12  2E2C               	decfsz	??_delay_tenth_s& (0+255),f,c
  4166  001B14  D7FC               	bra	u3407
  4167  001B16  4A2E               	infsnz	delay_tenth_s@i,f,c
  4168  001B18  2A2F               	incf	delay_tenth_s@i+1,f,c
  4169  001B1A                     l209:
  4170  001B1A  502D               	movf	delay_tenth_s@tenth_seconds,w,c
  4171  001B1C  0D02               	mullw	2
  4172  001B1E  502E               	movf	delay_tenth_s@i,w,c
  4173  001B20  5CF3               	subwf	prodl,w,c
  4174  001B22  502F               	movf	delay_tenth_s@i+1,w,c
  4175  001B24  58F4               	subwfb	prodh,w,c
  4176  001B26  A0D8               	btfss	status,0,c
  4177  001B28  0012               	return	
  4178  001B2A  D7EE               	goto	l210
  4179  001B2C                     __end_of_delay_tenth_s:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           prodh	equ	0xFF4
  4183                           prodl	equ	0xFF3
  4184                           intcon	equ	0xFF2
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           indf1	equ	0xFE7
  4188                           plusw1	equ	0xFE3
  4189                           fsr1h	equ	0xFE2
  4190                           fsr1l	equ	0xFE1
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           plusw2	equ	0xFDB
  4195                           fsr2h	equ	0xFDA
  4196                           fsr2l	equ	0xFD9
  4197                           status	equ	0xFD8
  4198                           
  4199 ;; *************** function _ScanIR *****************
  4200 ;; Defined at:
  4201 ;;		line 44 in file "Movement.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  4204 ;;		 -> main@mL(9), 
  4205 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  4206 ;;		 -> main@mR(9), 
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  buf            40   33[BANK0 ] unsigned char [40]
  4209 ;;  SensorResult    4   75[BANK0 ] unsigned int [2]
  4210 ;;  DirectionMov    2   73[BANK0 ] const unsigned int 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      unsigned char 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4220 ;;      Params:         0       4       0       0
  4221 ;;      Locals:         0      46       0       0
  4222 ;;      Temps:          0       1       0       0
  4223 ;;      Totals:         0      51       0       0
  4224 ;;Total ram usage:       51 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    7
  4227 ;; This function calls:
  4228 ;;		_LCD_String
  4229 ;;		_SendLCD
  4230 ;;		_SetLine
  4231 ;;		_grabLeftIR
  4232 ;;		_grabRightIR
  4233 ;;		_sprintf
  4234 ;;		_stop
  4235 ;; This function is called by:
  4236 ;;		_main
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text14
  4241  0012F8                     __ptext14:
  4242                           	opt stack 0
  4243  0012F8                     _ScanIR:
  4244                           	opt stack 23
  4245                           
  4246                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4247                           
  4248                           ;incstack = 0
  4249  0012F8  C0CF  F0AB         	movff	ScanIR@F3541,ScanIR@SensorResult
  4250  0012FC  C0D0  F0AC         	movff	ScanIR@F3541+1,ScanIR@SensorResult+1
  4251  001300  C0D1  F0AD         	movff	ScanIR@F3541+2,ScanIR@SensorResult+2
  4252  001304  C0D2  F0AE         	movff	ScanIR@F3541+3,ScanIR@SensorResult+3
  4253                           
  4254                           ;Movement.c: 48: char buf[40];
  4255                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4256  001308  0E03               	movlw	3
  4257  00130A  0100               	movlb	0	; () banked
  4258  00130C  6FAA               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4259  00130E  0EE8               	movlw	232
  4260  001310  6FA9               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4264  001312  EC1F  F00C         	call	_grabLeftIR	;wreg free
  4265  001316  C02C  F0AB         	movff	?_grabLeftIR,ScanIR@SensorResult
  4266  00131A  C02D  F0AC         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4267                           
  4268                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4269  00131E  ECE4  F00B         	call	_grabRightIR	;wreg free
  4270  001322  C02C  F0AD         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4271  001326  C02D  F0AE         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4272                           
  4273                           ;Movement.c: 60: CAP1BUFH=0;
  4274  00132A  0E00               	movlw	0
  4275  00132C  6E69               	movwf	3945,c	;volatile
  4276                           
  4277                           ;Movement.c: 61: CAP1BUFL=0;
  4278  00132E  0E00               	movlw	0
  4279  001330  6E68               	movwf	3944,c	;volatile
  4280                           
  4281                           ;Movement.c: 62: CAP2BUFH=0;
  4282  001332  0E00               	movlw	0
  4283  001334  6E67               	movwf	3943,c	;volatile
  4284                           
  4285                           ;Movement.c: 63: CAP2BUFL=0;
  4286  001336  0E00               	movlw	0
  4287  001338  6E66               	movwf	3942,c	;volatile
  4288                           
  4289                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4290  00133A  0E00               	movlw	0
  4291  00133C  6E30               	movwf	SendLCD@type,c
  4292  00133E  0E01               	movlw	1
  4293  001340  ECE8  F00D         	call	_SendLCD
  4294                           
  4295                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4296  001344  0E21               	movlw	33
  4297  001346                     u3417:
  4298  001346  2EE8               	decfsz	wreg,f,c
  4299  001348  D7FE               	bra	u3417
  4300  00134A  F000               	nop	
  4301                           
  4302                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4303  00134C  0E00               	movlw	0
  4304  00134E  6E30               	movwf	SendLCD@type,c
  4305  001350  0E02               	movlw	2
  4306  001352  ECE8  F00D         	call	_SendLCD
  4307                           
  4308                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4309  001356  0E06               	movlw	6
  4310  001358  0100               	movlb	0	; () banked
  4311  00135A  6F80               	movwf	??_ScanIR& (0+255),b
  4312  00135C  0E30               	movlw	48
  4313  00135E                     u3427:
  4314  00135E  2EE8               	decfsz	wreg,f,c
  4315  001360  D7FE               	bra	u3427
  4316  001362  2F80               	decfsz	??_ScanIR& (0+255),f,b
  4317  001364  D7FC               	bra	u3427
  4318  001366  F000               	nop	
  4319                           
  4320                           ;Movement.c: 70: SetLine(1);
  4321  001368  0E01               	movlw	1
  4322  00136A  ECCD  F00D         	call	_SetLine
  4323                           
  4324                           ;Movement.c: 71: LCD_String("     ScanIR");
  4325  00136E  0E2D               	movlw	low STR_1
  4326  001370  0100               	movlb	0	; () banked
  4327  001372  6F60               	movwf	LCD_String@string& (0+255),b
  4328  001374  0E03               	movlw	high STR_1
  4329  001376  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4330  001378  EC5A  F00C         	call	_LCD_String	;wreg free
  4331                           
  4332                           ;Movement.c: 72: SetLine(2);
  4333  00137C  0E02               	movlw	2
  4334  00137E  ECCD  F00D         	call	_SetLine
  4335                           
  4336                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4337  001382  0E81               	movlw	low ScanIR@buf
  4338  001384  0100               	movlb	0	; () banked
  4339  001386  6F67               	movwf	sprintf@sp& (0+255),b
  4340  001388  0E00               	movlw	high ScanIR@buf
  4341  00138A  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  4342  00138C  0E0C               	movlw	low (STR_6+1)
  4343  00138E  6F69               	movwf	sprintf@f& (0+255),b
  4344  001390  0E03               	movlw	high (STR_6+1)
  4345  001392  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  4346  001394  C0AB  F06B         	movff	ScanIR@SensorResult,?_sprintf+4
  4347  001398  C0AC  F06C         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4348  00139C  C0AD  F06D         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4349  0013A0  C0AE  F06E         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4350  0013A4  EC8D  F007         	call	_sprintf	;wreg free
  4351                           
  4352                           ;Movement.c: 74: LCD_String(buf);
  4353  0013A8  0E81               	movlw	low ScanIR@buf
  4354  0013AA  0100               	movlb	0	; () banked
  4355  0013AC  6F60               	movwf	LCD_String@string& (0+255),b
  4356  0013AE  0E00               	movlw	high ScanIR@buf
  4357  0013B0  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4358  0013B2  EC5A  F00C         	call	_LCD_String	;wreg free
  4359                           
  4360                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4361                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4362  0013B6  0100               	movlb	0	; () banked
  4363  0013B8  51AB               	movf	ScanIR@SensorResult& (0+255),w,b
  4364  0013BA  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4365  0013BC  51AC               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4366  0013BE  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4367  0013C0  B0D8               	btfsc	status,0,c
  4368  0013C2  D008               	goto	l217
  4369                           
  4370                           ; BSR set to: 0
  4371  0013C4  51AD               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4372  0013C6  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4373  0013C8  51AE               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4374  0013CA  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4375  0013CC  B0D8               	btfsc	status,0,c
  4376  0013CE  D002               	goto	l217
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;Movement.c: 80: return 2;
  4380  0013D0  0E02               	movlw	2
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;Movement.c: 81: } else {
  4384                           
  4385                           ; BSR set to: 0
  4386  0013D2  0012               	return	
  4387  0013D4                     l217:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;Movement.c: 82: stop(mL,mR);
  4391                           
  4392                           ; BSR set to: 0
  4393  0013D4  C07C  F071         	movff	ScanIR@mL,stop@mL
  4394  0013D8  C07D  F072         	movff	ScanIR@mL+1,stop@mL+1
  4395  0013DC  C07E  F073         	movff	ScanIR@mR,stop@mR
  4396  0013E0  C07F  F074         	movff	ScanIR@mR+1,stop@mR+1
  4397  0013E4  EC1A  F00B         	call	_stop	;wreg free
  4398                           
  4399                           ;Movement.c: 83: return 0;
  4400  0013E8  0E00               	movlw	0
  4401  0013EA  0012               	return	
  4402  0013EC                     __end_of_ScanIR:
  4403                           	opt stack 0
  4404                           tblptru	equ	0xFF8
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           intcon	equ	0xFF2
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           indf1	equ	0xFE7
  4411                           plusw1	equ	0xFE3
  4412                           fsr1h	equ	0xFE2
  4413                           fsr1l	equ	0xFE1
  4414                           indf2	equ	0xFDF
  4415                           postinc2	equ	0xFDE
  4416                           postdec2	equ	0xFDD
  4417                           plusw2	equ	0xFDB
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _stop *****************
  4423 ;; Defined at:
  4424 ;;		line 72 in file "dc_motor.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  4427 ;;		 -> main@mL(9), 
  4428 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  4429 ;;		 -> main@mR(9), 
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      void 
  4434 ;; Registers used:
  4435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4441 ;;      Params:         0       4       0       0
  4442 ;;      Locals:         0       0       0       0
  4443 ;;      Temps:          0       0       0       0
  4444 ;;      Totals:         0       4       0       0
  4445 ;;Total ram usage:        4 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    5
  4448 ;; This function calls:
  4449 ;;		_setMotorPWM
  4450 ;; This function is called by:
  4451 ;;		_ScanIR
  4452 ;;		_ScanWithRange
  4453 ;;		_main
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text15
  4458  001634                     __ptext15:
  4459                           	opt stack 0
  4460  001634                     _stop:
  4461                           	opt stack 25
  4462                           
  4463                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4464                           
  4465                           ;incstack = 0
  4466  001634  D028               	goto	l53
  4467  001636                     
  4468                           ;dc_motor.c: 76: if(mL->power>0){
  4469  001636  C071  FFD9         	movff	stop@mL,fsr2l
  4470  00163A  C072  FFDA         	movff	stop@mL+1,fsr2h
  4471  00163E  50DF               	movf	indf2,w,c
  4472  001640  B4D8               	btfsc	status,2,c
  4473  001642  D005               	goto	l55
  4474                           
  4475                           ;dc_motor.c: 77: mL->power--;
  4476  001644  C071  FFD9         	movff	stop@mL,fsr2l
  4477  001648  C072  FFDA         	movff	stop@mL+1,fsr2h
  4478  00164C  06DF               	decf	indf2,f,c
  4479  00164E                     l55:
  4480                           
  4481                           ;dc_motor.c: 78: }
  4482                           ;dc_motor.c: 79: if(mR->power>0){
  4483  00164E  C073  FFD9         	movff	stop@mR,fsr2l
  4484  001652  C074  FFDA         	movff	stop@mR+1,fsr2h
  4485  001656  50DF               	movf	indf2,w,c
  4486  001658  B4D8               	btfsc	status,2,c
  4487  00165A  D005               	goto	l56
  4488                           
  4489                           ;dc_motor.c: 80: mR->power--;
  4490  00165C  C073  FFD9         	movff	stop@mR,fsr2l
  4491  001660  C074  FFDA         	movff	stop@mR+1,fsr2h
  4492  001664  06DF               	decf	indf2,f,c
  4493  001666                     l56:
  4494                           
  4495                           ;dc_motor.c: 81: }
  4496                           ;dc_motor.c: 82: setMotorPWM(mL);
  4497  001666  C071  F068         	movff	stop@mL,setMotorPWM@m
  4498  00166A  C072  F069         	movff	stop@mL+1,setMotorPWM@m+1
  4499  00166E  ECDD  F008         	call	_setMotorPWM	;wreg free
  4500                           
  4501                           ;dc_motor.c: 83: setMotorPWM(mR);
  4502  001672  C073  F068         	movff	stop@mR,setMotorPWM@m
  4503  001676  C074  F069         	movff	stop@mR+1,setMotorPWM@m+1
  4504  00167A  ECDD  F008         	call	_setMotorPWM	;wreg free
  4505                           
  4506                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4507  00167E  0E21               	movlw	33
  4508  001680                     u3437:
  4509  001680  2EE8               	decfsz	wreg,f,c
  4510  001682  D7FE               	bra	u3437
  4511  001684  F000               	nop	
  4512  001686                     l53:
  4513  001686  C071  FFD9         	movff	stop@mL,fsr2l
  4514  00168A  C072  FFDA         	movff	stop@mL+1,fsr2h
  4515  00168E  50DF               	movf	indf2,w,c
  4516  001690  A4D8               	btfss	status,2,c
  4517  001692  D7D1               	goto	l54
  4518  001694  C073  FFD9         	movff	stop@mR,fsr2l
  4519  001698  C074  FFDA         	movff	stop@mR+1,fsr2h
  4520  00169C  50DF               	movf	indf2,w,c
  4521  00169E  A4D8               	btfss	status,2,c
  4522  0016A0  D7CA               	goto	l54
  4523                           
  4524                           ;dc_motor.c: 85: }
  4525                           ;dc_motor.c: 86: mL->direction=1;
  4526  0016A2  0100               	movlb	0	; () banked
  4527  0016A4  EE20 F001          	lfsr	2,1
  4528  0016A8  5171               	movf	stop@mL& (0+255),w,b
  4529  0016AA  26D9               	addwf	fsr2l,f,c
  4530  0016AC  5172               	movf	(stop@mL+1)& (0+255),w,b
  4531  0016AE  22DA               	addwfc	fsr2h,f,c
  4532  0016B0  0E01               	movlw	1
  4533  0016B2  6EDF               	movwf	indf2,c
  4534                           
  4535                           ;dc_motor.c: 87: mR->direction=1;
  4536  0016B4  EE20 F001          	lfsr	2,1
  4537  0016B8  5173               	movf	stop@mR& (0+255),w,b
  4538  0016BA  26D9               	addwf	fsr2l,f,c
  4539  0016BC  5174               	movf	(stop@mR+1)& (0+255),w,b
  4540  0016BE  22DA               	addwfc	fsr2h,f,c
  4541  0016C0  0E01               	movlw	1
  4542  0016C2  6EDF               	movwf	indf2,c
  4543                           
  4544                           ; BSR set to: 0
  4545  0016C4  0012               	return		;funcret
  4546  0016C6                     __end_of_stop:
  4547                           	opt stack 0
  4548                           tblptru	equ	0xFF8
  4549                           prodh	equ	0xFF4
  4550                           prodl	equ	0xFF3
  4551                           intcon	equ	0xFF2
  4552                           postinc0	equ	0xFEE
  4553                           wreg	equ	0xFE8
  4554                           indf1	equ	0xFE7
  4555                           plusw1	equ	0xFE3
  4556                           fsr1h	equ	0xFE2
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           plusw2	equ	0xFDB
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           
  4566 ;; *************** function _setMotorPWM *****************
  4567 ;; Defined at:
  4568 ;;		line 31 in file "dc_motor.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  m               2    8[BANK0 ] PTR struct DC_motor
  4571 ;;		 -> main@mR(9), main@mL(9), 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  PWMduty         2   15[BANK0 ] int 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4583 ;;      Params:         0       2       0       0
  4584 ;;      Locals:         0       2       0       0
  4585 ;;      Temps:          0       5       0       0
  4586 ;;      Totals:         0       9       0       0
  4587 ;;Total ram usage:        9 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    4
  4590 ;; This function calls:
  4591 ;;		___awdiv
  4592 ;;		___wmul
  4593 ;; This function is called by:
  4594 ;;		_stop
  4595 ;;		_fullSpeed
  4596 ;;		_setMotorFullSpeed
  4597 ;;		_stopMotor
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text16
  4602  0011BA                     __ptext16:
  4603                           	opt stack 0
  4604  0011BA                     _setMotorPWM:
  4605                           	opt stack 24
  4606                           
  4607                           ;dc_motor.c: 33: int PWMduty;
  4608                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;incstack = 0
  4612  0011BA  C068  FFD9         	movff	setMotorPWM@m,fsr2l
  4613  0011BE  C069  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4614  0011C2  50DF               	movf	indf2,w,c
  4615  0011C4  0100               	movlb	0	; () banked
  4616  0011C6  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4617  0011C8  516A               	movf	??_setMotorPWM& (0+255),w,b
  4618  0011CA  6E2C               	movwf	___wmul@multiplier,c
  4619  0011CC  6A2D               	clrf	___wmul@multiplier+1,c
  4620  0011CE  EE20 F007          	lfsr	2,7
  4621  0011D2  5168               	movf	setMotorPWM@m& (0+255),w,b
  4622  0011D4  26D9               	addwf	fsr2l,f,c
  4623  0011D6  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4624  0011D8  22DA               	addwfc	fsr2h,f,c
  4625  0011DA  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  4626  0011DE  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  4627  0011E2  EC13  F00E         	call	___wmul	;wreg free
  4628  0011E6  C02C  F060         	movff	?___wmul,___awdiv@dividend
  4629  0011EA  C02D  F061         	movff	?___wmul+1,___awdiv@dividend+1
  4630  0011EE  0E00               	movlw	0
  4631  0011F0  0100               	movlb	0	; () banked
  4632  0011F2  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4633  0011F4  0E64               	movlw	100
  4634  0011F6  6F62               	movwf	___awdiv@divisor& (0+255),b
  4635  0011F8  EC63  F00B         	call	___awdiv	;wreg free
  4636  0011FC  C060  F06F         	movff	?___awdiv,setMotorPWM@PWMduty
  4637  001200  C061  F070         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4638                           
  4639                           ;dc_motor.c: 37: if (m->direction)
  4640  001204  0100               	movlb	0	; () banked
  4641  001206  EE20 F001          	lfsr	2,1
  4642  00120A  5168               	movf	setMotorPWM@m& (0+255),w,b
  4643  00120C  26D9               	addwf	fsr2l,f,c
  4644  00120E  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4645  001210  22DA               	addwfc	fsr2h,f,c
  4646  001212  50DF               	movf	indf2,w,c
  4647  001214  B4D8               	btfsc	status,2,c
  4648  001216  D02D               	goto	l36
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;dc_motor.c: 38: {
  4652                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4653  001218  EE20 F006          	lfsr	2,6
  4654  00121C  5168               	movf	setMotorPWM@m& (0+255),w,b
  4655  00121E  26D9               	addwf	fsr2l,f,c
  4656  001220  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4657  001222  22DA               	addwfc	fsr2h,f,c
  4658  001224  50DF               	movf	indf2,w,c
  4659  001226  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4660  001228  0E01               	movlw	1
  4661  00122A  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4662  00122C  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4663  00122E  D002               	goto	u2344
  4664  001230                     u2345:
  4665  001230  90D8               	bcf	status,0,c
  4666  001232  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4667  001234                     u2344:
  4668  001234  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4669  001236  D7FC               	goto	u2345
  4670  001238  0100               	movlb	0	; () banked
  4671  00123A  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4672  00123C  108A               	iorwf	3978,w,c	;volatile
  4673  00123E  6E8A               	movwf	3978,c	;volatile
  4674                           
  4675                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4676  001240  EE20 F007          	lfsr	2,7
  4677  001244  5168               	movf	setMotorPWM@m& (0+255),w,b
  4678  001246  26D9               	addwf	fsr2l,f,c
  4679  001248  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4680  00124A  22DA               	addwfc	fsr2h,f,c
  4681  00124C  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4682  001250  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4683  001254  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4684  001258  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4685  00125C  1F6C               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4686  00125E  1F6D               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4687  001260  4B6C               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4688  001262  2B6D               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4689  001264  516A               	movf	??_setMotorPWM& (0+255),w,b
  4690  001266  256C               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4691  001268  6F6F               	movwf	setMotorPWM@PWMduty& (0+255),b
  4692  00126A  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4693  00126C  216D               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4694  00126E  6F70               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4695                           
  4696                           ;dc_motor.c: 41: }
  4697  001270  D015               	goto	l37
  4698  001272                     l36:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;dc_motor.c: 42: else
  4702                           ;dc_motor.c: 43: {
  4703                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4704                           
  4705                           ; BSR set to: 0
  4706  001272  EE20 F006          	lfsr	2,6
  4707  001276  5168               	movf	setMotorPWM@m& (0+255),w,b
  4708  001278  26D9               	addwf	fsr2l,f,c
  4709  00127A  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4710  00127C  22DA               	addwfc	fsr2h,f,c
  4711  00127E  50DF               	movf	indf2,w,c
  4712  001280  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4713  001282  0E01               	movlw	1
  4714  001284  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4715  001286  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4716  001288  D002               	goto	u2354
  4717  00128A                     u2355:
  4718  00128A  90D8               	bcf	status,0,c
  4719  00128C  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4720  00128E                     u2354:
  4721  00128E  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4722  001290  D7FC               	goto	u2355
  4723  001292  0100               	movlb	0	; () banked
  4724  001294  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4725  001296  0AFF               	xorlw	255
  4726  001298  148A               	andwf	3978,w,c	;volatile
  4727  00129A  6E8A               	movwf	3978,c	;volatile
  4728  00129C                     l37:
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;dc_motor.c: 45: }
  4732                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4733  00129C  EE20 F002          	lfsr	2,2
  4734  0012A0  5168               	movf	setMotorPWM@m& (0+255),w,b
  4735  0012A2  26D9               	addwf	fsr2l,f,c
  4736  0012A4  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4737  0012A6  22DA               	addwfc	fsr2h,f,c
  4738  0012A8  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4739  0012AC  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4740  0012B0  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4741  0012B4  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4742  0012B8  456F               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4743  0012BA  46E8               	rlncf	wreg,f,c
  4744  0012BC  0BFC               	andlw	252
  4745  0012BE  6EDF               	movwf	indf2,c
  4746                           
  4747                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4748  0012C0  EE20 F004          	lfsr	2,4
  4749  0012C4  5168               	movf	setMotorPWM@m& (0+255),w,b
  4750  0012C6  26D9               	addwf	fsr2l,f,c
  4751  0012C8  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4752  0012CA  22DA               	addwfc	fsr2h,f,c
  4753  0012CC  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4754  0012D0  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4755  0012D4  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4756  0012D8  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4757  0012DC  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4758  0012E0  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4759  0012E4  0E06               	movlw	6
  4760  0012E6  6F6E               	movwf	(??_setMotorPWM+4)& (0+255),b
  4761  0012E8                     u2365:
  4762  0012E8  356D               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  4763  0012EA  336D               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  4764  0012EC  336C               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  4765  0012EE  2F6E               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  4766  0012F0  D7FB               	goto	u2365
  4767  0012F2  516C               	movf	(??_setMotorPWM+2)& (0+255),w,b
  4768  0012F4  6EDF               	movwf	indf2,c
  4769                           
  4770                           ; BSR set to: 0
  4771  0012F6  0012               	return		;funcret
  4772  0012F8                     __end_of_setMotorPWM:
  4773                           	opt stack 0
  4774                           tblptru	equ	0xFF8
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           postinc0	equ	0xFEE
  4779                           wreg	equ	0xFE8
  4780                           indf1	equ	0xFE7
  4781                           plusw1	equ	0xFE3
  4782                           fsr1h	equ	0xFE2
  4783                           fsr1l	equ	0xFE1
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           postdec2	equ	0xFDD
  4787                           plusw2	equ	0xFDB
  4788                           fsr2h	equ	0xFDA
  4789                           fsr2l	equ	0xFD9
  4790                           status	equ	0xFD8
  4791                           
  4792 ;; *************** function ___awdiv *****************
  4793 ;; Defined at:
  4794 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  dividend        2    0[BANK0 ] int 
  4797 ;;  divisor         2    2[BANK0 ] int 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  quotient        2    6[BANK0 ] int 
  4800 ;;  sign            1    5[BANK0 ] unsigned char 
  4801 ;;  counter         1    4[BANK0 ] unsigned char 
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  2    0[BANK0 ] int 
  4804 ;; Registers used:
  4805 ;;		wreg, status,2, status,0
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4811 ;;      Params:         0       4       0       0
  4812 ;;      Locals:         0       4       0       0
  4813 ;;      Temps:          0       0       0       0
  4814 ;;      Totals:         0       8       0       0
  4815 ;;Total ram usage:        8 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    3
  4818 ;; This function calls:
  4819 ;;		Nothing
  4820 ;; This function is called by:
  4821 ;;		_setMotorPWM
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text17
  4826  0016C6                     __ptext17:
  4827                           	opt stack 0
  4828  0016C6                     ___awdiv:
  4829                           	opt stack 24
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;incstack = 0
  4833  0016C6  0E00               	movlw	0
  4834  0016C8  0100               	movlb	0	; () banked
  4835  0016CA  6F65               	movwf	___awdiv@sign& (0+255),b
  4836                           
  4837                           ; BSR set to: 0
  4838  0016CC  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4839  0016CE  D006               	goto	l658
  4840                           
  4841                           ; BSR set to: 0
  4842  0016D0  6D62               	negf	___awdiv@divisor& (0+255),b
  4843  0016D2  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4844  0016D4  B0D8               	btfsc	status,0,c
  4845  0016D6  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4846                           
  4847                           ; BSR set to: 0
  4848  0016D8  0E01               	movlw	1
  4849  0016DA  6F65               	movwf	___awdiv@sign& (0+255),b
  4850  0016DC                     l658:
  4851                           
  4852                           ; BSR set to: 0
  4853                           
  4854                           ; BSR set to: 0
  4855  0016DC  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4856  0016DE  D006               	goto	l659
  4857                           
  4858                           ; BSR set to: 0
  4859  0016E0  6D60               	negf	___awdiv@dividend& (0+255),b
  4860  0016E2  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4861  0016E4  B0D8               	btfsc	status,0,c
  4862  0016E6  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4863                           
  4864                           ; BSR set to: 0
  4865  0016E8  0E01               	movlw	1
  4866  0016EA  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  4867  0016EC                     l659:
  4868                           
  4869                           ; BSR set to: 0
  4870                           
  4871                           ; BSR set to: 0
  4872  0016EC  0E00               	movlw	0
  4873  0016EE  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  4874  0016F0  0E00               	movlw	0
  4875  0016F2  6F66               	movwf	___awdiv@quotient& (0+255),b
  4876                           
  4877                           ; BSR set to: 0
  4878  0016F4  5162               	movf	___awdiv@divisor& (0+255),w,b
  4879  0016F6  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4880  0016F8  B4D8               	btfsc	status,2,c
  4881  0016FA  D01C               	goto	l666
  4882                           
  4883                           ; BSR set to: 0
  4884  0016FC  0E01               	movlw	1
  4885  0016FE  6F64               	movwf	___awdiv@counter& (0+255),b
  4886  001700  D004               	goto	l661
  4887  001702                     
  4888                           ; BSR set to: 0
  4889                           
  4890                           ; BSR set to: 0
  4891  001702  90D8               	bcf	status,0,c
  4892  001704  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  4893  001706  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4894  001708  2B64               	incf	___awdiv@counter& (0+255),f,b
  4895  00170A                     l661:
  4896                           
  4897                           ; BSR set to: 0
  4898                           
  4899                           ; BSR set to: 0
  4900  00170A  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4901  00170C  D7FA               	goto	l662
  4902  00170E                     u1210:
  4903                           
  4904                           ; BSR set to: 0
  4905                           
  4906                           ; BSR set to: 0
  4907                           
  4908                           ; BSR set to: 0
  4909  00170E  90D8               	bcf	status,0,c
  4910  001710  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  4911  001712  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4912                           
  4913                           ; BSR set to: 0
  4914  001714  5162               	movf	___awdiv@divisor& (0+255),w,b
  4915  001716  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  4916  001718  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4917  00171A  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4918  00171C  A0D8               	btfss	status,0,c
  4919  00171E  D005               	goto	l665
  4920                           
  4921                           ; BSR set to: 0
  4922  001720  5162               	movf	___awdiv@divisor& (0+255),w,b
  4923  001722  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  4924  001724  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4925  001726  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4926                           
  4927                           ; BSR set to: 0
  4928  001728  8166               	bsf	___awdiv@quotient& (0+255),0,b
  4929  00172A                     l665:
  4930                           
  4931                           ; BSR set to: 0
  4932                           
  4933                           ; BSR set to: 0
  4934  00172A  90D8               	bcf	status,0,c
  4935  00172C  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4936  00172E  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  4937                           
  4938                           ; BSR set to: 0
  4939  001730  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  4940  001732  D7ED               	goto	u1210
  4941  001734                     l666:
  4942                           
  4943                           ; BSR set to: 0
  4944                           
  4945                           ; BSR set to: 0
  4946                           
  4947                           ; BSR set to: 0
  4948  001734  5165               	movf	___awdiv@sign& (0+255),w,b
  4949  001736  B4D8               	btfsc	status,2,c
  4950  001738  D004               	goto	l667
  4951                           
  4952                           ; BSR set to: 0
  4953  00173A  6D66               	negf	___awdiv@quotient& (0+255),b
  4954  00173C  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4955  00173E  B0D8               	btfsc	status,0,c
  4956  001740  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4957  001742                     l667:
  4958                           
  4959                           ; BSR set to: 0
  4960                           
  4961                           ; BSR set to: 0
  4962  001742  C066  F060         	movff	___awdiv@quotient,?___awdiv
  4963  001746  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  4964  00174A  0012               	return	
  4965  00174C                     __end_of___awdiv:
  4966                           	opt stack 0
  4967                           tblptru	equ	0xFF8
  4968                           prodh	equ	0xFF4
  4969                           prodl	equ	0xFF3
  4970                           intcon	equ	0xFF2
  4971                           postinc0	equ	0xFEE
  4972                           wreg	equ	0xFE8
  4973                           indf1	equ	0xFE7
  4974                           plusw1	equ	0xFE3
  4975                           fsr1h	equ	0xFE2
  4976                           fsr1l	equ	0xFE1
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           plusw2	equ	0xFDB
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _sprintf *****************
  4986 ;; Defined at:
  4987 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  4990 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4991 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  4992 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  tmpval          4    0        struct .
  4995 ;;  cp              3    0        PTR const unsigned char 
  4996 ;;  width           2   25[BANK0 ] int 
  4997 ;;  val             2   22[BANK0 ] unsigned int 
  4998 ;;  ap              2   19[BANK0 ] PTR void [1]
  4999 ;;		 -> ?_sprintf(2), 
  5000 ;;  len             2    0        unsigned int 
  5001 ;;  c               1   27[BANK0 ] char 
  5002 ;;  flag            1   24[BANK0 ] unsigned char 
  5003 ;;  prec            1   21[BANK0 ] char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  2    7[BANK0 ] int 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5013 ;;      Params:         0       8       0       0
  5014 ;;      Locals:         0       9       0       0
  5015 ;;      Temps:          0       4       0       0
  5016 ;;      Totals:         0      21       0       0
  5017 ;;Total ram usage:       21 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    4
  5020 ;; This function calls:
  5021 ;;		___lwdiv
  5022 ;;		___lwmod
  5023 ;;		___wmul
  5024 ;;		_isdigit
  5025 ;; This function is called by:
  5026 ;;		_ScanIR
  5027 ;;		_ScanWithRange
  5028 ;;		_main
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           	psect	text18
  5033  000F1A                     __ptext18:
  5034                           	opt stack 0
  5035  000F1A                     _sprintf:
  5036                           	opt stack 26
  5037                           
  5038                           ;doprnt.c: 494: va_list ap;
  5039                           ;doprnt.c: 499: signed char c;
  5040                           ;doprnt.c: 501: int width;
  5041                           ;doprnt.c: 506: signed char prec;
  5042                           ;doprnt.c: 508: unsigned char flag;
  5043                           ;doprnt.c: 523: union {
  5044                           ;doprnt.c: 524: unsigned long vd;
  5045                           ;doprnt.c: 525: double integ;
  5046                           ;doprnt.c: 526: } tmpval;
  5047                           ;doprnt.c: 528: unsigned int val;
  5048                           ;doprnt.c: 529: unsigned len;
  5049                           ;doprnt.c: 530: const char * cp;
  5050                           ;doprnt.c: 533: *ap = __va_start();
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;incstack = 0
  5054  000F1A  0E6B               	movlw	low (?_sprintf+4)
  5055  000F1C  0100               	movlb	0	; () banked
  5056  000F1E  6F73               	movwf	sprintf@ap& (0+255),b
  5057  000F20  0E00               	movlw	high (?_sprintf+4)
  5058  000F22  6F74               	movwf	(sprintf@ap+1)& (0+255),b
  5059                           
  5060                           ;doprnt.c: 536: while(c = *f++) {
  5061  000F24  D136               	goto	u2840
  5062  000F26                     
  5063                           ; BSR set to: 0
  5064                           ;doprnt.c: 538: if(c != '%')
  5065                           
  5066                           ; BSR set to: 0
  5067  000F26  0E25               	movlw	37
  5068  000F28  197B               	xorwf	sprintf@c& (0+255),w,b
  5069  000F2A  B4D8               	btfsc	status,2,c
  5070  000F2C  D009               	goto	l452
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;doprnt.c: 540: {
  5074                           ;doprnt.c: 541: ((*sp++ = (c)));
  5075  000F2E  C067  FFD9         	movff	sprintf@sp,fsr2l
  5076  000F32  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5077  000F36  C07B  FFDF         	movff	sprintf@c,indf2
  5078                           
  5079                           ; BSR set to: 0
  5080  000F3A  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5081  000F3C  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5082                           
  5083                           ;doprnt.c: 542: continue;
  5084  000F3E  D129               	goto	u2840
  5085  000F40                     l452:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;doprnt.c: 543: }
  5089                           ;doprnt.c: 546: width = 0;
  5090                           
  5091                           ; BSR set to: 0
  5092  000F40  0E00               	movlw	0
  5093  000F42  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5094  000F44  0E00               	movlw	0
  5095  000F46  6F79               	movwf	sprintf@width& (0+255),b
  5096                           
  5097                           ;doprnt.c: 548: flag = 0;
  5098  000F48  0E00               	movlw	0
  5099  000F4A  6F78               	movwf	sprintf@flag& (0+255),b
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;doprnt.c: 551: switch(*f) {
  5103                           
  5104                           ;doprnt.c: 550: for(;;) {
  5105  000F4C  D004               	goto	l454
  5106  000F4E                     
  5107                           ;doprnt.c: 580: flag |= 0x04;
  5108                           
  5109                           ; BSR set to: 0
  5110  000F4E  0100               	movlb	0	; () banked
  5111  000F50  8578               	bsf	sprintf@flag& (0+255),2,b
  5112                           
  5113                           ;doprnt.c: 581: f++;
  5114  000F52  4B69               	infsnz	sprintf@f& (0+255),f,b
  5115  000F54  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5116  000F56                     l454:
  5117                           
  5118                           ; BSR set to: 0
  5119  000F56  C069  FFF6         	movff	sprintf@f,tblptrl
  5120  000F5A  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5121  000F5E                     	if	0	;tblptru may be non-zero
  5122  000F5E                     	endif
  5123  000F5E                     	if	0	;tblptru may be non-zero
  5124  000F5E                     	endif
  5125  000F5E  0008               	tblrd		*
  5126  000F60  50F5               	movf	tablat,w,c
  5127                           
  5128                           ; Switch size 1, requested type "space"
  5129                           ; Number of cases is 1, Range of values is 48 to 48
  5130                           ; switch strategies available:
  5131                           ; Name         Instructions Cycles
  5132                           ; simple_byte            4     3 (average)
  5133                           ;	Chosen strategy is simple_byte
  5134  000F62  0A30               	xorlw	48	; case 48
  5135  000F64  B4D8               	btfsc	status,2,c
  5136  000F66  D7F3               	goto	l455
  5137                           
  5138                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5139                           
  5140                           ;doprnt.c: 586: }
  5141                           
  5142                           ;doprnt.c: 585: break;
  5143  000F68  C069  FFF6         	movff	sprintf@f,tblptrl
  5144  000F6C  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5145  000F70                     	if	0	;tblptru may be non-zero
  5146  000F70                     	endif
  5147  000F70                     	if	0	;tblptru may be non-zero
  5148  000F70                     	endif
  5149  000F70  0008               	tblrd		*
  5150  000F72  50F5               	movf	tablat,w,c
  5151  000F74  EC37  F00E         	call	_isdigit
  5152  000F78  A0D8               	btfss	status,0,c
  5153  000F7A  D034               	goto	l462
  5154                           
  5155                           ;doprnt.c: 598: width = 0;
  5156  000F7C  0E00               	movlw	0
  5157  000F7E  0100               	movlb	0	; () banked
  5158  000F80  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5159  000F82  0E00               	movlw	0
  5160  000F84  6F79               	movwf	sprintf@width& (0+255),b
  5161  000F86                     
  5162                           ;doprnt.c: 600: width *= 10;
  5163                           
  5164                           ; BSR set to: 0
  5165  000F86  C079  F02C         	movff	sprintf@width,___wmul@multiplier
  5166  000F8A  C07A  F02D         	movff	sprintf@width+1,___wmul@multiplier+1
  5167  000F8E  0E00               	movlw	0
  5168  000F90  6E2F               	movwf	___wmul@multiplicand+1,c
  5169  000F92  0E0A               	movlw	10
  5170  000F94  6E2E               	movwf	___wmul@multiplicand,c
  5171  000F96  EC13  F00E         	call	___wmul	;wreg free
  5172  000F9A  C02C  F079         	movff	?___wmul,sprintf@width
  5173  000F9E  C02D  F07A         	movff	?___wmul+1,sprintf@width+1
  5174                           
  5175                           ;doprnt.c: 601: width += *f++ - '0';
  5176  000FA2  0ED0               	movlw	208
  5177  000FA4  0100               	movlb	0	; () banked
  5178  000FA6  6F6F               	movwf	??_sprintf& (0+255),b
  5179  000FA8  0EFF               	movlw	255
  5180  000FAA  6F70               	movwf	(??_sprintf+1)& (0+255),b
  5181  000FAC  C069  FFF6         	movff	sprintf@f,tblptrl
  5182  000FB0  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5183  000FB4                     	if	0	;tblptru may be non-zero
  5184  000FB4                     	endif
  5185  000FB4                     	if	0	;tblptru may be non-zero
  5186  000FB4                     	endif
  5187  000FB4  0008               	tblrd		*
  5188  000FB6  50F5               	movf	tablat,w,c
  5189  000FB8  6F71               	movwf	(??_sprintf+2)& (0+255),b
  5190  000FBA  6B72               	clrf	(??_sprintf+3)& (0+255),b
  5191  000FBC  516F               	movf	??_sprintf& (0+255),w,b
  5192  000FBE  2771               	addwf	(??_sprintf+2)& (0+255),f,b
  5193  000FC0  5170               	movf	(??_sprintf+1)& (0+255),w,b
  5194  000FC2  2372               	addwfc	(??_sprintf+3)& (0+255),f,b
  5195  000FC4  5171               	movf	(??_sprintf+2)& (0+255),w,b
  5196  000FC6  2779               	addwf	sprintf@width& (0+255),f,b
  5197  000FC8  5172               	movf	(??_sprintf+3)& (0+255),w,b
  5198  000FCA  237A               	addwfc	(sprintf@width+1)& (0+255),f,b
  5199                           
  5200                           ; BSR set to: 0
  5201  000FCC  4B69               	infsnz	sprintf@f& (0+255),f,b
  5202  000FCE  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5206  000FD0  C069  FFF6         	movff	sprintf@f,tblptrl
  5207  000FD4  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5208  000FD8                     	if	0	;tblptru may be non-zero
  5209  000FD8                     	endif
  5210  000FD8                     	if	0	;tblptru may be non-zero
  5211  000FD8                     	endif
  5212  000FD8  0008               	tblrd		*
  5213  000FDA  50F5               	movf	tablat,w,c
  5214  000FDC  EC37  F00E         	call	_isdigit
  5215  000FE0  B0D8               	btfsc	status,0,c
  5216  000FE2  D7D1               	goto	l460
  5217  000FE4                     l462:
  5218  000FE4  C069  FFF6         	movff	sprintf@f,tblptrl
  5219  000FE8  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5220  000FEC  0100               	movlb	0	; () banked
  5221  000FEE  4B69               	infsnz	sprintf@f& (0+255),f,b
  5222  000FF0  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5223  000FF2                     	if	0	;tblptru may be non-zero
  5224  000FF2                     	endif
  5225  000FF2                     	if	0	;tblptru may be non-zero
  5226  000FF2                     	endif
  5227  000FF2  0008               	tblrd		*
  5228  000FF4  CFF5 F07B          	movff	tablat,sprintf@c
  5229  000FF8  517B               	movf	sprintf@c& (0+255),w,b
  5230                           
  5231                           ; Switch size 1, requested type "space"
  5232                           ; Number of cases is 3, Range of values is 0 to 105
  5233                           ; switch strategies available:
  5234                           ; Name         Instructions Cycles
  5235                           ; simple_byte           10     6 (average)
  5236                           ;	Chosen strategy is simple_byte
  5237  000FFA  0A00               	xorlw	0	; case 0
  5238  000FFC  B4D8               	btfsc	status,2,c
  5239  000FFE  D0D6               	goto	u2850
  5240  001000  0A64               	xorlw	100	; case 100
  5241  001002  B4D8               	btfsc	status,2,c
  5242  001004  D003               	goto	l467
  5243  001006  0A0D               	xorlw	13	; case 105
  5244  001008  A4D8               	btfss	status,2,c
  5245  00100A  D0C3               	goto	u2840
  5246  00100C                     l467:
  5247                           
  5248                           ;doprnt.c: 1253: {
  5249                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5250                           
  5251                           ; BSR set to: 0
  5252  00100C  C073  FFD9         	movff	sprintf@ap,fsr2l
  5253  001010  C074  FFDA         	movff	sprintf@ap+1,fsr2h
  5254  001014  CFDE F076          	movff	postinc2,sprintf@val
  5255  001018  CFDD F077          	movff	postdec2,sprintf@val+1
  5256  00101C  0E02               	movlw	2
  5257  00101E  0100               	movlb	0	; () banked
  5258  001020  2773               	addwf	sprintf@ap& (0+255),f,b
  5259  001022  0E00               	movlw	0
  5260  001024  2374               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;doprnt.c: 1261: if((int)val < 0) {
  5264  001026  AF77               	btfss	(sprintf@val+1)& (0+255),7,b
  5265  001028  D006               	goto	l469
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;doprnt.c: 1262: flag |= 0x03;
  5269  00102A  0E03               	movlw	3
  5270  00102C  1378               	iorwf	sprintf@flag& (0+255),f,b
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;doprnt.c: 1263: val = -val;
  5274  00102E  6D76               	negf	sprintf@val& (0+255),b
  5275  001030  1F77               	comf	(sprintf@val+1)& (0+255),f,b
  5276  001032  B0D8               	btfsc	status,0,c
  5277  001034  2B77               	incf	(sprintf@val+1)& (0+255),f,b
  5278  001036                     l469:
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;doprnt.c: 1264: }
  5282                           ;doprnt.c: 1266: }
  5283                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5284                           
  5285                           ; BSR set to: 0
  5286  001036  0E01               	movlw	1
  5287  001038  6F7B               	movwf	sprintf@c& (0+255),b
  5288  00103A                     l3185:
  5289                           
  5290                           ; BSR set to: 0
  5291  00103A  0E05               	movlw	5
  5292  00103C  197B               	xorwf	sprintf@c& (0+255),w,b
  5293  00103E  B4D8               	btfsc	status,2,c
  5294  001040  D012               	goto	u2730
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;doprnt.c: 1306: if(val < dpowers[c])
  5298                           
  5299                           ; BSR set to: 0
  5300                           
  5301                           ; BSR set to: 0
  5302  001042  517B               	movf	sprintf@c& (0+255),w,b
  5303  001044  0D02               	mullw	2
  5304  001046  0E01               	movlw	low _dpowers
  5305  001048  24F3               	addwf	prodl,w,c
  5306  00104A  6EF6               	movwf	tblptrl,c
  5307  00104C  0E03               	movlw	high _dpowers
  5308  00104E  20F4               	addwfc	prodh,w,c
  5309  001050  6EF7               	movwf	tblptrh,c
  5310  001052                     	if	0	;There are less than 3 active tblptr bytes
  5311  001052                     	endif
  5312  001052  0009               	tblrd		*+
  5313  001054  50F5               	movf	tablat,w,c
  5314  001056  5D76               	subwf	sprintf@val& (0+255),w,b
  5315  001058  0009               	tblrd		*+
  5316  00105A  50F5               	movf	tablat,w,c
  5317  00105C  5977               	subwfb	(sprintf@val+1)& (0+255),w,b
  5318  00105E  A0D8               	btfss	status,0,c
  5319  001060  D002               	goto	u2730
  5320                           
  5321                           ; BSR set to: 0
  5322                           
  5323                           ; BSR set to: 0
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;doprnt.c: 1307: break;
  5327  001062  2B7B               	incf	sprintf@c& (0+255),f,b
  5328  001064  D7EA               	goto	l3185
  5329  001066                     u2730:
  5330                           
  5331                           ; BSR set to: 0
  5332                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5333                           
  5334                           ; BSR set to: 0
  5335  001066  5179               	movf	sprintf@width& (0+255),w,b
  5336  001068  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5337  00106A  B4D8               	btfsc	status,2,c
  5338  00106C  D009               	goto	l473
  5339                           
  5340                           ; BSR set to: 0
  5341  00106E  C078  F06F         	movff	sprintf@flag,??_sprintf
  5342  001072  0E03               	movlw	3
  5343  001074  176F               	andwf	??_sprintf& (0+255),f,b
  5344  001076  B4D8               	btfsc	status,2,c
  5345  001078  D003               	goto	l473
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;doprnt.c: 1346: width--;
  5349  00107A  0779               	decf	sprintf@width& (0+255),f,b
  5350  00107C  A0D8               	btfss	status,0,c
  5351  00107E  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5352  001080                     l473:
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;doprnt.c: 1381: if(width > c)
  5356                           
  5357                           ; BSR set to: 0
  5358  001080  0E80               	movlw	128
  5359  001082  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5360  001084  0E7F               	movlw	127
  5361  001086  6F6F               	movwf	??_sprintf& (0+255),b
  5362  001088  5179               	movf	sprintf@width& (0+255),w,b
  5363  00108A  5D7B               	subwf	sprintf@c& (0+255),w,b
  5364  00108C  517A               	movf	(sprintf@width+1)& (0+255),w,b
  5365  00108E  0A80               	xorlw	128
  5366  001090  596F               	subwfb	??_sprintf& (0+255),w,b
  5367  001092  B0D8               	btfsc	status,0,c
  5368  001094  D007               	goto	l474
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;doprnt.c: 1382: width -= c;
  5372  001096  517B               	movf	sprintf@c& (0+255),w,b
  5373  001098  5F79               	subwf	sprintf@width& (0+255),f,b
  5374  00109A  0E00               	movlw	0
  5375  00109C  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5376  00109E  0EFF               	movlw	255
  5377  0010A0  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  5378  0010A2  D004               	goto	l475
  5379  0010A4                     l474:
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;doprnt.c: 1383: else
  5383                           ;doprnt.c: 1384: width = 0;
  5384                           
  5385                           ; BSR set to: 0
  5386  0010A4  0E00               	movlw	0
  5387  0010A6  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5388  0010A8  0E00               	movlw	0
  5389  0010AA  6F79               	movwf	sprintf@width& (0+255),b
  5390  0010AC                     l475:
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;doprnt.c: 1387: if(flag & 0x04) {
  5394                           
  5395                           ; BSR set to: 0
  5396  0010AC  A578               	btfss	sprintf@flag& (0+255),2,b
  5397  0010AE  D01E               	goto	l476
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;doprnt.c: 1392: if(flag & 0x03)
  5401  0010B0  C078  F06F         	movff	sprintf@flag,??_sprintf
  5402  0010B4  0E03               	movlw	3
  5403  0010B6  176F               	andwf	??_sprintf& (0+255),f,b
  5404  0010B8  B4D8               	btfsc	status,2,c
  5405  0010BA  D008               	goto	l477
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5409  0010BC  C067  FFD9         	movff	sprintf@sp,fsr2l
  5410  0010C0  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5411  0010C4  0E2D               	movlw	45
  5412  0010C6  6EDF               	movwf	indf2,c
  5413                           
  5414                           ; BSR set to: 0
  5415  0010C8  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5416  0010CA  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5417  0010CC                     l477:
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;doprnt.c: 1415: if(width)
  5421                           
  5422                           ; BSR set to: 0
  5423  0010CC  5179               	movf	sprintf@width& (0+255),w,b
  5424  0010CE  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5425  0010D0  B4D8               	btfsc	status,2,c
  5426  0010D2  D02D               	goto	l485
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5430                           
  5431                           ; BSR set to: 0
  5432                           
  5433                           ;doprnt.c: 1416: do
  5434  0010D4  C067  FFD9         	movff	sprintf@sp,fsr2l
  5435  0010D8  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5436  0010DC  0E30               	movlw	48
  5437  0010DE  6EDF               	movwf	indf2,c
  5438                           
  5439                           ; BSR set to: 0
  5440  0010E0  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5441  0010E2  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;doprnt.c: 1418: while(--width);
  5445  0010E4  0779               	decf	sprintf@width& (0+255),f,b
  5446  0010E6  A0D8               	btfss	status,0,c
  5447  0010E8  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5448  0010EA  D7F0               	goto	l477
  5449  0010EC                     l476:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;doprnt.c: 1422: {
  5453                           ;doprnt.c: 1424: if(width
  5454                           ;doprnt.c: 1428: )
  5455                           
  5456                           ; BSR set to: 0
  5457  0010EC  5179               	movf	sprintf@width& (0+255),w,b
  5458  0010EE  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5459  0010F0  B4D8               	btfsc	status,2,c
  5460  0010F2  D00F               	goto	u2820
  5461  0010F4                     u2810:
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5465                           
  5466                           ; BSR set to: 0
  5467                           
  5468                           ;doprnt.c: 1429: do
  5469  0010F4  C067  FFD9         	movff	sprintf@sp,fsr2l
  5470  0010F8  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5471  0010FC  0E20               	movlw	32
  5472  0010FE  6EDF               	movwf	indf2,c
  5473                           
  5474                           ; BSR set to: 0
  5475  001100  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5476  001102  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;doprnt.c: 1431: while(--width);
  5480  001104  0779               	decf	sprintf@width& (0+255),f,b
  5481  001106  A0D8               	btfss	status,0,c
  5482  001108  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5483  00110A  5179               	movf	sprintf@width& (0+255),w,b
  5484  00110C  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5485  00110E  A4D8               	btfss	status,2,c
  5486  001110  D7F1               	goto	u2810
  5487  001112                     u2820:
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 1438: if(flag & 0x03)
  5491                           
  5492                           ; BSR set to: 0
  5493                           
  5494                           ; BSR set to: 0
  5495  001112  C078  F06F         	movff	sprintf@flag,??_sprintf
  5496  001116  0E03               	movlw	3
  5497  001118  176F               	andwf	??_sprintf& (0+255),f,b
  5498  00111A  B4D8               	btfsc	status,2,c
  5499  00111C  D008               	goto	l485
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5503  00111E  C067  FFD9         	movff	sprintf@sp,fsr2l
  5504  001122  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5505  001126  0E2D               	movlw	45
  5506  001128  6EDF               	movwf	indf2,c
  5507                           
  5508                           ; BSR set to: 0
  5509  00112A  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5510  00112C  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5511  00112E                     l485:
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;doprnt.c: 1469: }
  5515                           ;doprnt.c: 1472: prec = c;
  5516                           
  5517                           ; BSR set to: 0
  5518                           
  5519                           ; BSR set to: 0
  5520  00112E  C07B  F075         	movff	sprintf@c,sprintf@prec
  5521                           
  5522                           ;doprnt.c: 1474: while(prec--) {
  5523  001132  D02B               	goto	l486
  5524  001134                     
  5525                           ; BSR set to: 0
  5526                           ;doprnt.c: 1478: {
  5527                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5528                           
  5529                           ; BSR set to: 0
  5530  001134  5175               	movf	sprintf@prec& (0+255),w,b
  5531  001136  0D02               	mullw	2
  5532  001138  0E01               	movlw	low _dpowers
  5533  00113A  24F3               	addwf	prodl,w,c
  5534  00113C  6EF6               	movwf	tblptrl,c
  5535  00113E  0E03               	movlw	high _dpowers
  5536  001140  20F4               	addwfc	prodh,w,c
  5537  001142  6EF7               	movwf	tblptrh,c
  5538  001144                     	if	0	;There are less than 3 active tblptr bytes
  5539  001144                     	endif
  5540  001144  0009               	tblrd		*+
  5541  001146  CFF5 F02E          	movff	tablat,___lwdiv@divisor
  5542  00114A  000A               	tblrd		*-
  5543  00114C  CFF5 F02F          	movff	tablat,___lwdiv@divisor+1
  5544  001150  C076  F02C         	movff	sprintf@val,___lwdiv@dividend
  5545  001154  C077  F02D         	movff	sprintf@val+1,___lwdiv@dividend+1
  5546  001158  ECB7  F00C         	call	___lwdiv	;wreg free
  5547  00115C  C02C  F063         	movff	?___lwdiv,___lwmod@dividend
  5548  001160  C02D  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  5549  001164  0E00               	movlw	0
  5550  001166  0100               	movlb	0	; () banked
  5551  001168  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  5552  00116A  0E0A               	movlw	10
  5553  00116C  6F65               	movwf	___lwmod@divisor& (0+255),b
  5554  00116E  ECE1  F00C         	call	___lwmod	;wreg free
  5555  001172  0100               	movlb	0	; () banked
  5556  001174  5163               	movf	?___lwmod& (0+255),w,b
  5557  001176  0F30               	addlw	48
  5558  001178  6F7B               	movwf	sprintf@c& (0+255),b
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;doprnt.c: 1523: }
  5562                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5563  00117A  C067  FFD9         	movff	sprintf@sp,fsr2l
  5564  00117E  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5565  001182  C07B  FFDF         	movff	sprintf@c,indf2
  5566                           
  5567                           ; BSR set to: 0
  5568  001186  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5569  001188  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5570  00118A                     l486:
  5571                           
  5572                           ; BSR set to: 0
  5573                           
  5574                           ; BSR set to: 0
  5575  00118A  0775               	decf	sprintf@prec& (0+255),f,b
  5576  00118C  2975               	incf	sprintf@prec& (0+255),w,b
  5577  00118E  A4D8               	btfss	status,2,c
  5578  001190  D7D1               	goto	l487
  5579  001192                     u2840:
  5580                           
  5581                           ; BSR set to: 0
  5582                           
  5583                           ; BSR set to: 0
  5584  001192  C069  FFF6         	movff	sprintf@f,tblptrl
  5585  001196  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5586  00119A  0100               	movlb	0	; () banked
  5587  00119C  4B69               	infsnz	sprintf@f& (0+255),f,b
  5588  00119E  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5589  0011A0                     	if	0	;tblptru may be non-zero
  5590  0011A0                     	endif
  5591  0011A0                     	if	0	;tblptru may be non-zero
  5592  0011A0                     	endif
  5593  0011A0  0008               	tblrd		*
  5594  0011A2  CFF5 F07B          	movff	tablat,sprintf@c
  5595  0011A6  517B               	movf	sprintf@c& (0+255),w,b
  5596  0011A8  A4D8               	btfss	status,2,c
  5597  0011AA  D6BD               	goto	l451
  5598  0011AC                     u2850:
  5599                           
  5600                           ;doprnt.c: 1538: *sp = 0;
  5601                           
  5602                           ; BSR set to: 0
  5603                           
  5604                           ;doprnt.c: 1525: }
  5605                           ;doprnt.c: 1533: }
  5606                           ;doprnt.c: 1535: alldone:
  5607                           
  5608                           ; BSR set to: 0
  5609  0011AC  C067  FFD9         	movff	sprintf@sp,fsr2l
  5610  0011B0  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5611  0011B4  0E00               	movlw	0
  5612  0011B6  6EDF               	movwf	indf2,c
  5613  0011B8  0012               	return	
  5614  0011BA                     __end_of_sprintf:
  5615                           	opt stack 0
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           intcon	equ	0xFF2
  5623                           postinc0	equ	0xFEE
  5624                           wreg	equ	0xFE8
  5625                           indf1	equ	0xFE7
  5626                           plusw1	equ	0xFE3
  5627                           fsr1h	equ	0xFE2
  5628                           fsr1l	equ	0xFE1
  5629                           indf2	equ	0xFDF
  5630                           postinc2	equ	0xFDE
  5631                           postdec2	equ	0xFDD
  5632                           plusw2	equ	0xFDB
  5633                           fsr2h	equ	0xFDA
  5634                           fsr2l	equ	0xFD9
  5635                           status	equ	0xFD8
  5636                           
  5637 ;; *************** function _isdigit *****************
  5638 ;; Defined at:
  5639 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  c               1    wreg     unsigned char 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  c               1   45[COMRAM] unsigned char 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;		None               void
  5646 ;; Registers used:
  5647 ;;		wreg, status,2, status,0
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5653 ;;      Params:         0       0       0       0
  5654 ;;      Locals:         2       0       0       0
  5655 ;;      Temps:          1       0       0       0
  5656 ;;      Totals:         3       0       0       0
  5657 ;;Total ram usage:        3 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    3
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_sprintf
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text19
  5668  001C6E                     __ptext19:
  5669                           	opt stack 0
  5670  001C6E                     _isdigit:
  5671                           	opt stack 26
  5672                           
  5673                           ;incstack = 0
  5674                           ;isdigit@c stored from wreg
  5675  001C6E  6E2E               	movwf	isdigit@c,c
  5676  001C70  0E00               	movlw	0
  5677  001C72  6E2D               	movwf	_isdigit$1772,c
  5678  001C74  0E3A               	movlw	58
  5679  001C76  602E               	cpfslt	isdigit@c,c
  5680  001C78  D005               	goto	l820
  5681  001C7A  0E2F               	movlw	47
  5682  001C7C  642E               	cpfsgt	isdigit@c,c
  5683  001C7E  D002               	goto	l820
  5684  001C80  0E01               	movlw	1
  5685  001C82  6E2D               	movwf	_isdigit$1772,c
  5686  001C84                     l820:
  5687  001C84  C02D  F02C         	movff	_isdigit$1772,??_isdigit
  5688  001C88  302C               	rrcf	??_isdigit,w,c
  5689  001C8A  0012               	return	
  5690  001C8C                     __end_of_isdigit:
  5691                           	opt stack 0
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           indf1	equ	0xFE7
  5702                           plusw1	equ	0xFE3
  5703                           fsr1h	equ	0xFE2
  5704                           fsr1l	equ	0xFE1
  5705                           indf2	equ	0xFDF
  5706                           postinc2	equ	0xFDE
  5707                           postdec2	equ	0xFDD
  5708                           plusw2	equ	0xFDB
  5709                           fsr2h	equ	0xFDA
  5710                           fsr2l	equ	0xFD9
  5711                           status	equ	0xFD8
  5712                           
  5713 ;; *************** function ___wmul *****************
  5714 ;; Defined at:
  5715 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  multiplier      2   43[COMRAM] unsigned int 
  5718 ;;  multiplicand    2   45[COMRAM] unsigned int 
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;  product         2   47[COMRAM] unsigned int 
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  2   43[COMRAM] unsigned int 
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0, prodl, prodh
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5730 ;;      Params:         4       0       0       0
  5731 ;;      Locals:         2       0       0       0
  5732 ;;      Temps:          0       0       0       0
  5733 ;;      Totals:         6       0       0       0
  5734 ;;Total ram usage:        6 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    3
  5737 ;; This function calls:
  5738 ;;		Nothing
  5739 ;; This function is called by:
  5740 ;;		_setMotorPWM
  5741 ;;		_sprintf
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text20
  5746  001C26                     __ptext20:
  5747                           	opt stack 0
  5748  001C26                     ___wmul:
  5749                           	opt stack 24
  5750                           
  5751                           ;incstack = 0
  5752  001C26  502C               	movf	___wmul@multiplier,w,c
  5753  001C28  022E               	mulwf	___wmul@multiplicand,c
  5754  001C2A  CFF3 F030          	movff	prodl,___wmul@product
  5755  001C2E  CFF4 F031          	movff	prodh,___wmul@product+1
  5756  001C32  502C               	movf	___wmul@multiplier,w,c
  5757  001C34  022F               	mulwf	___wmul@multiplicand+1,c
  5758  001C36  50F3               	movf	prodl,w,c
  5759  001C38  2631               	addwf	___wmul@product+1,f,c
  5760  001C3A  502D               	movf	___wmul@multiplier+1,w,c
  5761  001C3C  022E               	mulwf	___wmul@multiplicand,c
  5762  001C3E  50F3               	movf	prodl,w,c
  5763  001C40  2631               	addwf	___wmul@product+1,f,c
  5764  001C42  C030  F02C         	movff	___wmul@product,?___wmul
  5765  001C46  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  5766  001C4A  0012               	return	
  5767  001C4C                     __end_of___wmul:
  5768                           	opt stack 0
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           intcon	equ	0xFF2
  5776                           postinc0	equ	0xFEE
  5777                           wreg	equ	0xFE8
  5778                           indf1	equ	0xFE7
  5779                           plusw1	equ	0xFE3
  5780                           fsr1h	equ	0xFE2
  5781                           fsr1l	equ	0xFE1
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           postdec2	equ	0xFDD
  5785                           plusw2	equ	0xFDB
  5786                           fsr2h	equ	0xFDA
  5787                           fsr2l	equ	0xFD9
  5788                           status	equ	0xFD8
  5789                           
  5790 ;; *************** function ___lwmod *****************
  5791 ;; Defined at:
  5792 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;  dividend        2    3[BANK0 ] unsigned int 
  5795 ;;  divisor         2    5[BANK0 ] unsigned int 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  counter         1   47[COMRAM] unsigned char 
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  2    3[BANK0 ] unsigned int 
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, status,0
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5807 ;;      Params:         0       4       0       0
  5808 ;;      Locals:         1       0       0       0
  5809 ;;      Temps:          0       0       0       0
  5810 ;;      Totals:         1       4       0       0
  5811 ;;Total ram usage:        5 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:    3
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		_sprintf
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           	psect	text21
  5822  0019C2                     __ptext21:
  5823                           	opt stack 0
  5824  0019C2                     ___lwmod:
  5825                           	opt stack 26
  5826                           
  5827                           ;incstack = 0
  5828  0019C2  0100               	movlb	0	; () banked
  5829  0019C4  5165               	movf	___lwmod@divisor& (0+255),w,b
  5830  0019C6  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5831  0019C8  B4D8               	btfsc	status,2,c
  5832  0019CA  D018               	goto	l914
  5833                           
  5834                           ; BSR set to: 0
  5835  0019CC  0E01               	movlw	1
  5836  0019CE  6E30               	movwf	___lwmod@counter,c
  5837  0019D0  D004               	goto	l909
  5838  0019D2                     
  5839                           ; BSR set to: 0
  5840                           
  5841                           ; BSR set to: 0
  5842  0019D2  90D8               	bcf	status,0,c
  5843  0019D4  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  5844  0019D6  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5845  0019D8  2A30               	incf	___lwmod@counter,f,c
  5846  0019DA                     l909:
  5847                           
  5848                           ; BSR set to: 0
  5849                           
  5850                           ; BSR set to: 0
  5851  0019DA  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5852  0019DC  D7FA               	goto	l910
  5853  0019DE                     u1460:
  5854                           
  5855                           ; BSR set to: 0
  5856                           
  5857                           ; BSR set to: 0
  5858                           
  5859                           ; BSR set to: 0
  5860  0019DE  5165               	movf	___lwmod@divisor& (0+255),w,b
  5861  0019E0  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  5862  0019E2  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5863  0019E4  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5864  0019E6  A0D8               	btfss	status,0,c
  5865  0019E8  D004               	goto	l913
  5866                           
  5867                           ; BSR set to: 0
  5868  0019EA  5165               	movf	___lwmod@divisor& (0+255),w,b
  5869  0019EC  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  5870  0019EE  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5871  0019F0  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5872  0019F2                     l913:
  5873                           
  5874                           ; BSR set to: 0
  5875                           
  5876                           ; BSR set to: 0
  5877  0019F2  90D8               	bcf	status,0,c
  5878  0019F4  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5879  0019F6  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  5880                           
  5881                           ; BSR set to: 0
  5882  0019F8  2E30               	decfsz	___lwmod@counter,f,c
  5883  0019FA  D7F1               	goto	u1460
  5884  0019FC                     l914:
  5885                           
  5886                           ; BSR set to: 0
  5887                           
  5888                           ; BSR set to: 0
  5889  0019FC  C063  F063         	movff	___lwmod@dividend,?___lwmod
  5890  001A00  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  5891                           
  5892                           ; BSR set to: 0
  5893  001A04  0012               	return		;funcret
  5894  001A06                     __end_of___lwmod:
  5895                           	opt stack 0
  5896                           tblptru	equ	0xFF8
  5897                           tblptrh	equ	0xFF7
  5898                           tblptrl	equ	0xFF6
  5899                           tablat	equ	0xFF5
  5900                           prodh	equ	0xFF4
  5901                           prodl	equ	0xFF3
  5902                           intcon	equ	0xFF2
  5903                           postinc0	equ	0xFEE
  5904                           wreg	equ	0xFE8
  5905                           indf1	equ	0xFE7
  5906                           plusw1	equ	0xFE3
  5907                           fsr1h	equ	0xFE2
  5908                           fsr1l	equ	0xFE1
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           plusw2	equ	0xFDB
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function ___lwdiv *****************
  5918 ;; Defined at:
  5919 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  dividend        2   43[COMRAM] unsigned int 
  5922 ;;  divisor         2   45[COMRAM] unsigned int 
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;  quotient        2    1[BANK0 ] unsigned int 
  5925 ;;  counter         1    0[BANK0 ] unsigned char 
  5926 ;; Return value:  Size  Location     Type
  5927 ;;                  2   43[COMRAM] unsigned int 
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5935 ;;      Params:         4       0       0       0
  5936 ;;      Locals:         0       3       0       0
  5937 ;;      Temps:          0       0       0       0
  5938 ;;      Totals:         4       3       0       0
  5939 ;;Total ram usage:        7 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    3
  5942 ;; This function calls:
  5943 ;;		Nothing
  5944 ;; This function is called by:
  5945 ;;		_sprintf
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           	psect	text22
  5950  00196E                     __ptext22:
  5951                           	opt stack 0
  5952  00196E                     ___lwdiv:
  5953                           	opt stack 26
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;incstack = 0
  5957  00196E  0E00               	movlw	0
  5958  001970  0100               	movlb	0	; () banked
  5959  001972  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5960  001974  0E00               	movlw	0
  5961  001976  6F61               	movwf	___lwdiv@quotient& (0+255),b
  5962                           
  5963                           ; BSR set to: 0
  5964  001978  502E               	movf	___lwdiv@divisor,w,c
  5965  00197A  102F               	iorwf	___lwdiv@divisor+1,w,c
  5966  00197C  B4D8               	btfsc	status,2,c
  5967  00197E  D01C               	goto	l904
  5968                           
  5969                           ; BSR set to: 0
  5970  001980  0E01               	movlw	1
  5971  001982  6F60               	movwf	___lwdiv@counter& (0+255),b
  5972  001984  D004               	goto	l899
  5973  001986                     
  5974                           ; BSR set to: 0
  5975                           
  5976                           ; BSR set to: 0
  5977  001986  90D8               	bcf	status,0,c
  5978  001988  362E               	rlcf	___lwdiv@divisor,f,c
  5979  00198A  362F               	rlcf	___lwdiv@divisor+1,f,c
  5980  00198C  2B60               	incf	___lwdiv@counter& (0+255),f,b
  5981  00198E                     l899:
  5982                           
  5983                           ; BSR set to: 0
  5984                           
  5985                           ; BSR set to: 0
  5986  00198E  AE2F               	btfss	___lwdiv@divisor+1,7,c
  5987  001990  D7FA               	goto	l900
  5988  001992                     u2500:
  5989                           
  5990                           ; BSR set to: 0
  5991                           
  5992                           ; BSR set to: 0
  5993                           
  5994                           ; BSR set to: 0
  5995  001992  90D8               	bcf	status,0,c
  5996  001994  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  5997  001996  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5998                           
  5999                           ; BSR set to: 0
  6000  001998  502E               	movf	___lwdiv@divisor,w,c
  6001  00199A  5C2C               	subwf	___lwdiv@dividend,w,c
  6002  00199C  502F               	movf	___lwdiv@divisor+1,w,c
  6003  00199E  582D               	subwfb	___lwdiv@dividend+1,w,c
  6004  0019A0  A0D8               	btfss	status,0,c
  6005  0019A2  D005               	goto	l903
  6006                           
  6007                           ; BSR set to: 0
  6008  0019A4  502E               	movf	___lwdiv@divisor,w,c
  6009  0019A6  5E2C               	subwf	___lwdiv@dividend,f,c
  6010  0019A8  502F               	movf	___lwdiv@divisor+1,w,c
  6011  0019AA  5A2D               	subwfb	___lwdiv@dividend+1,f,c
  6012                           
  6013                           ; BSR set to: 0
  6014  0019AC  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  6015  0019AE                     l903:
  6016                           
  6017                           ; BSR set to: 0
  6018                           
  6019                           ; BSR set to: 0
  6020  0019AE  90D8               	bcf	status,0,c
  6021  0019B0  322F               	rrcf	___lwdiv@divisor+1,f,c
  6022  0019B2  322E               	rrcf	___lwdiv@divisor,f,c
  6023                           
  6024                           ; BSR set to: 0
  6025  0019B4  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  6026  0019B6  D7ED               	goto	u2500
  6027  0019B8                     l904:
  6028                           
  6029                           ; BSR set to: 0
  6030                           
  6031                           ; BSR set to: 0
  6032  0019B8  C061  F02C         	movff	___lwdiv@quotient,?___lwdiv
  6033  0019BC  C062  F02D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6034                           
  6035                           ; BSR set to: 0
  6036  0019C0  0012               	return		;funcret
  6037  0019C2                     __end_of___lwdiv:
  6038                           	opt stack 0
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           prodh	equ	0xFF4
  6044                           prodl	equ	0xFF3
  6045                           intcon	equ	0xFF2
  6046                           postinc0	equ	0xFEE
  6047                           wreg	equ	0xFE8
  6048                           indf1	equ	0xFE7
  6049                           plusw1	equ	0xFE3
  6050                           fsr1h	equ	0xFE2
  6051                           fsr1l	equ	0xFE1
  6052                           indf2	equ	0xFDF
  6053                           postinc2	equ	0xFDE
  6054                           postdec2	equ	0xFDD
  6055                           plusw2	equ	0xFDB
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function _grabRightIR *****************
  6061 ;; Defined at:
  6062 ;;		line 74 in file "IR_Reading.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;		None
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6067 ;;  i               1    2[BANK0 ] unsigned char 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  2   43[COMRAM] unsigned int 
  6070 ;; Registers used:
  6071 ;;		wreg, status,2, status,0
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6077 ;;      Params:         2       0       0       0
  6078 ;;      Locals:         0       3       0       0
  6079 ;;      Temps:          3       0       0       0
  6080 ;;      Totals:         5       3       0       0
  6081 ;;Total ram usage:        8 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    3
  6084 ;; This function calls:
  6085 ;;		Nothing
  6086 ;; This function is called by:
  6087 ;;		_ScanIR
  6088 ;;		_ScanWithRange
  6089 ;;		_main
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           	psect	text23
  6094  0017C8                     __ptext23:
  6095                           	opt stack 0
  6096  0017C8                     _grabRightIR:
  6097                           	opt stack 27
  6098                           
  6099                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;incstack = 0
  6103  0017C8  0E00               	movlw	0
  6104  0017CA  0100               	movlb	0	; () banked
  6105  0017CC  6F61               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  6106  0017CE  0E00               	movlw	0
  6107  0017D0  6F60               	movwf	grabRightIR@IR_signal& (0+255),b
  6108                           
  6109                           ;IR_Reading.c: 77: unsigned char i=0;
  6110  0017D2  0E00               	movlw	0
  6111  0017D4  6F62               	movwf	grabRightIR@i& (0+255),b
  6112                           
  6113                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6114  0017D6  0E00               	movlw	0
  6115  0017D8  6F62               	movwf	grabRightIR@i& (0+255),b
  6116  0017DA                     l3091:
  6117                           
  6118                           ; BSR set to: 0
  6119  0017DA  0E03               	movlw	3
  6120  0017DC  6562               	cpfsgt	grabRightIR@i& (0+255),b
  6121  0017DE  D001               	goto	l110
  6122  0017E0  D01F               	goto	u2580
  6123  0017E2                     l110:
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6127                           
  6128                           ; BSR set to: 0
  6129  0017E2  5069               	movf	3945,w,c	;volatile
  6130  0017E4  6E2E               	movwf	??_grabRightIR& (0+255),c
  6131  0017E6  6A2F               	clrf	(??_grabRightIR+1)& (0+255),c
  6132  0017E8  0E07               	movlw	7
  6133  0017EA                     u2575:
  6134  0017EA  90D8               	bcf	status,0,c
  6135  0017EC  362E               	rlcf	??_grabRightIR,f,c
  6136  0017EE  362F               	rlcf	??_grabRightIR+1,f,c
  6137  0017F0  2EE8               	decfsz	wreg,f,c
  6138  0017F2  D7FB               	goto	u2575
  6139  0017F4  CF68 F030          	movff	3944,??_grabRightIR+2	;volatile
  6140  0017F8  90D8               	bcf	status,0,c
  6141  0017FA  3230               	rrcf	??_grabRightIR+2,f,c
  6142  0017FC  5030               	movf	??_grabRightIR+2,w,c
  6143  0017FE  122E               	iorwf	??_grabRightIR,f,c
  6144  001800  0E00               	movlw	0
  6145  001802  122F               	iorwf	??_grabRightIR+1,f,c
  6146  001804  502E               	movf	??_grabRightIR,w,c
  6147  001806  2760               	addwf	grabRightIR@IR_signal& (0+255),f,b
  6148  001808  502F               	movf	??_grabRightIR+1,w,c
  6149  00180A  2361               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6153  00180C  0E82               	movlw	130
  6154  00180E  6E2E               	movwf	??_grabRightIR& (0+255),c
  6155  001810  0EDE               	movlw	222
  6156  001812                     u3447:
  6157  001812  2EE8               	decfsz	wreg,f,c
  6158  001814  D7FE               	bra	u3447
  6159  001816  2E2E               	decfsz	??_grabRightIR& (0+255),f,c
  6160  001818  D7FC               	bra	u3447
  6161  00181A  0100               	movlb	0	; () banked
  6162  00181C  2B62               	incf	grabRightIR@i& (0+255),f,b
  6163  00181E  D7DD               	goto	l3091
  6164  001820                     u2580:
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;IR_Reading.c: 83: }
  6168                           ;IR_Reading.c: 85: return IR_signal>>2;
  6169                           
  6170                           ; BSR set to: 0
  6171  001820  C060  F02E         	movff	grabRightIR@IR_signal,??_grabRightIR
  6172  001824  C061  F02F         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6173  001828  90D8               	bcf	status,0,c
  6174  00182A  322F               	rrcf	??_grabRightIR+1,f,c
  6175  00182C  322E               	rrcf	??_grabRightIR,f,c
  6176  00182E  90D8               	bcf	status,0,c
  6177  001830  322F               	rrcf	??_grabRightIR+1,f,c
  6178  001832  322E               	rrcf	??_grabRightIR,f,c
  6179  001834  C02E  F02C         	movff	??_grabRightIR,?_grabRightIR
  6180  001838  C02F  F02D         	movff	??_grabRightIR+1,?_grabRightIR+1
  6181  00183C  0012               	return	
  6182  00183E                     __end_of_grabRightIR:
  6183                           	opt stack 0
  6184                           tblptru	equ	0xFF8
  6185                           tblptrh	equ	0xFF7
  6186                           tblptrl	equ	0xFF6
  6187                           tablat	equ	0xFF5
  6188                           prodh	equ	0xFF4
  6189                           prodl	equ	0xFF3
  6190                           intcon	equ	0xFF2
  6191                           postinc0	equ	0xFEE
  6192                           wreg	equ	0xFE8
  6193                           indf1	equ	0xFE7
  6194                           plusw1	equ	0xFE3
  6195                           fsr1h	equ	0xFE2
  6196                           fsr1l	equ	0xFE1
  6197                           indf2	equ	0xFDF
  6198                           postinc2	equ	0xFDE
  6199                           postdec2	equ	0xFDD
  6200                           plusw2	equ	0xFDB
  6201                           fsr2h	equ	0xFDA
  6202                           fsr2l	equ	0xFD9
  6203                           status	equ	0xFD8
  6204                           
  6205 ;; *************** function _grabLeftIR *****************
  6206 ;; Defined at:
  6207 ;;		line 90 in file "IR_Reading.c"
  6208 ;; Parameters:    Size  Location     Type
  6209 ;;		None
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6212 ;;  i               1    2[BANK0 ] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  2   43[COMRAM] unsigned int 
  6215 ;; Registers used:
  6216 ;;		wreg, status,2, status,0
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6222 ;;      Params:         2       0       0       0
  6223 ;;      Locals:         0       3       0       0
  6224 ;;      Temps:          3       0       0       0
  6225 ;;      Totals:         5       3       0       0
  6226 ;;Total ram usage:        8 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    3
  6229 ;; This function calls:
  6230 ;;		Nothing
  6231 ;; This function is called by:
  6232 ;;		_ScanIR
  6233 ;;		_ScanWithRange
  6234 ;;		_main
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           	psect	text24
  6239  00183E                     __ptext24:
  6240                           	opt stack 0
  6241  00183E                     _grabLeftIR:
  6242                           	opt stack 27
  6243                           
  6244                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;incstack = 0
  6248  00183E  0E00               	movlw	0
  6249  001840  0100               	movlb	0	; () banked
  6250  001842  6F61               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  6251  001844  0E00               	movlw	0
  6252  001846  6F60               	movwf	grabLeftIR@IR_signal& (0+255),b
  6253                           
  6254                           ;IR_Reading.c: 93: unsigned char i=0;
  6255  001848  0E00               	movlw	0
  6256  00184A  6F62               	movwf	grabLeftIR@i& (0+255),b
  6257                           
  6258                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6259  00184C  0E00               	movlw	0
  6260  00184E  6F62               	movwf	grabLeftIR@i& (0+255),b
  6261  001850                     l3107:
  6262                           
  6263                           ; BSR set to: 0
  6264  001850  0E03               	movlw	3
  6265  001852  6562               	cpfsgt	grabLeftIR@i& (0+255),b
  6266  001854  D001               	goto	l115
  6267  001856  D01F               	goto	u2610
  6268  001858                     l115:
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6272                           
  6273                           ; BSR set to: 0
  6274  001858  5067               	movf	3943,w,c	;volatile
  6275  00185A  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6276  00185C  6A2F               	clrf	(??_grabLeftIR+1)& (0+255),c
  6277  00185E  0E07               	movlw	7
  6278  001860                     u2605:
  6279  001860  90D8               	bcf	status,0,c
  6280  001862  362E               	rlcf	??_grabLeftIR,f,c
  6281  001864  362F               	rlcf	??_grabLeftIR+1,f,c
  6282  001866  2EE8               	decfsz	wreg,f,c
  6283  001868  D7FB               	goto	u2605
  6284  00186A  CF66 F030          	movff	3942,??_grabLeftIR+2	;volatile
  6285  00186E  90D8               	bcf	status,0,c
  6286  001870  3230               	rrcf	??_grabLeftIR+2,f,c
  6287  001872  5030               	movf	??_grabLeftIR+2,w,c
  6288  001874  122E               	iorwf	??_grabLeftIR,f,c
  6289  001876  0E00               	movlw	0
  6290  001878  122F               	iorwf	??_grabLeftIR+1,f,c
  6291  00187A  502E               	movf	??_grabLeftIR,w,c
  6292  00187C  2760               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  6293  00187E  502F               	movf	??_grabLeftIR+1,w,c
  6294  001880  2361               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6298  001882  0E82               	movlw	130
  6299  001884  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6300  001886  0EDE               	movlw	222
  6301  001888                     u3457:
  6302  001888  2EE8               	decfsz	wreg,f,c
  6303  00188A  D7FE               	bra	u3457
  6304  00188C  2E2E               	decfsz	??_grabLeftIR& (0+255),f,c
  6305  00188E  D7FC               	bra	u3457
  6306  001890  0100               	movlb	0	; () banked
  6307  001892  2B62               	incf	grabLeftIR@i& (0+255),f,b
  6308  001894  D7DD               	goto	l3107
  6309  001896                     u2610:
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;IR_Reading.c: 99: }
  6313                           ;IR_Reading.c: 101: return IR_signal>>2;
  6314                           
  6315                           ; BSR set to: 0
  6316  001896  C060  F02E         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6317  00189A  C061  F02F         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6318  00189E  90D8               	bcf	status,0,c
  6319  0018A0  322F               	rrcf	??_grabLeftIR+1,f,c
  6320  0018A2  322E               	rrcf	??_grabLeftIR,f,c
  6321  0018A4  90D8               	bcf	status,0,c
  6322  0018A6  322F               	rrcf	??_grabLeftIR+1,f,c
  6323  0018A8  322E               	rrcf	??_grabLeftIR,f,c
  6324  0018AA  C02E  F02C         	movff	??_grabLeftIR,?_grabLeftIR
  6325  0018AE  C02F  F02D         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6326  0018B2  0012               	return	
  6327  0018B4                     __end_of_grabLeftIR:
  6328                           	opt stack 0
  6329                           tblptru	equ	0xFF8
  6330                           tblptrh	equ	0xFF7
  6331                           tblptrl	equ	0xFF6
  6332                           tablat	equ	0xFF5
  6333                           prodh	equ	0xFF4
  6334                           prodl	equ	0xFF3
  6335                           intcon	equ	0xFF2
  6336                           postinc0	equ	0xFEE
  6337                           wreg	equ	0xFE8
  6338                           indf1	equ	0xFE7
  6339                           plusw1	equ	0xFE3
  6340                           fsr1h	equ	0xFE2
  6341                           fsr1l	equ	0xFE1
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           plusw2	equ	0xFDB
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350 ;; *************** function _SetLine *****************
  6351 ;; Defined at:
  6352 ;;		line 74 in file "LCD.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  line            1    wreg     unsigned char 
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;  line            1    0[BANK0 ] unsigned char 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      void 
  6359 ;; Registers used:
  6360 ;;		wreg, status,2, status,0, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6366 ;;      Params:         0       0       0       0
  6367 ;;      Locals:         0       1       0       0
  6368 ;;      Temps:          0       0       0       0
  6369 ;;      Totals:         0       1       0       0
  6370 ;;Total ram usage:        1 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    6
  6373 ;; This function calls:
  6374 ;;		_SendLCD
  6375 ;; This function is called by:
  6376 ;;		_ScanIR
  6377 ;;		_ScanWithRange
  6378 ;;		_main
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           	psect	text25
  6383  001B9A                     __ptext25:
  6384                           	opt stack 0
  6385  001B9A                     _SetLine:
  6386                           	opt stack 24
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;incstack = 0
  6390                           ;SetLine@line stored from wreg
  6391  001B9A  0100               	movlb	0	; () banked
  6392  001B9C  6F60               	movwf	SetLine@line& (0+255),b
  6393                           
  6394                           ;LCD.c: 75: if (line==1) {
  6395  001B9E  0100               	movlb	0	; () banked
  6396  001BA0  0560               	decf	SetLine@line& (0+255),w,b
  6397  001BA2  A4D8               	btfss	status,2,c
  6398  001BA4  D006               	goto	l152
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;LCD.c: 76: SendLCD(0x80,0);
  6402  001BA6  0E00               	movlw	0
  6403  001BA8  6E30               	movwf	SendLCD@type,c
  6404  001BAA  0E80               	movlw	128
  6405  001BAC  ECE8  F00D         	call	_SendLCD
  6406                           
  6407                           ;LCD.c: 77: } else if (line==2) {
  6408  001BB0  D00A               	goto	l154
  6409  001BB2                     l152:
  6410  001BB2  0E02               	movlw	2
  6411  001BB4  0100               	movlb	0	; () banked
  6412  001BB6  1960               	xorwf	SetLine@line& (0+255),w,b
  6413  001BB8  A4D8               	btfss	status,2,c
  6414  001BBA  D005               	goto	l154
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;LCD.c: 78: SendLCD(0xC0,0);
  6418  001BBC  0E00               	movlw	0
  6419  001BBE  6E30               	movwf	SendLCD@type,c
  6420  001BC0  0EC0               	movlw	192
  6421  001BC2  ECE8  F00D         	call	_SendLCD
  6422  001BC6                     l154:
  6423                           
  6424                           ;LCD.c: 79: }
  6425                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6426  001BC6  0E21               	movlw	33
  6427  001BC8                     u3467:
  6428  001BC8  2EE8               	decfsz	wreg,f,c
  6429  001BCA  D7FE               	bra	u3467
  6430  001BCC  F000               	nop	
  6431  001BCE  0012               	return		;funcret
  6432  001BD0                     __end_of_SetLine:
  6433                           	opt stack 0
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           intcon	equ	0xFF2
  6441                           postinc0	equ	0xFEE
  6442                           wreg	equ	0xFE8
  6443                           indf1	equ	0xFE7
  6444                           plusw1	equ	0xFE3
  6445                           fsr1h	equ	0xFE2
  6446                           fsr1l	equ	0xFE1
  6447                           indf2	equ	0xFDF
  6448                           postinc2	equ	0xFDE
  6449                           postdec2	equ	0xFDD
  6450                           plusw2	equ	0xFDB
  6451                           fsr2h	equ	0xFDA
  6452                           fsr2l	equ	0xFD9
  6453                           status	equ	0xFD8
  6454                           
  6455 ;; *************** function _LCD_String *****************
  6456 ;; Defined at:
  6457 ;;		line 83 in file "LCD.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;  string          2    0[BANK0 ] PTR unsigned char 
  6460 ;;		 -> STR_8(11), STR_7(10), main@buf(40), STR_5(17), 
  6461 ;;		 -> main@Message(10), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6462 ;;		 -> STR_1(12), 
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      void 
  6467 ;; Registers used:
  6468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6474 ;;      Params:         0       2       0       0
  6475 ;;      Locals:         0       0       0       0
  6476 ;;      Temps:          0       0       0       0
  6477 ;;      Totals:         0       2       0       0
  6478 ;;Total ram usage:        2 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    6
  6481 ;; This function calls:
  6482 ;;		_SendLCD
  6483 ;; This function is called by:
  6484 ;;		_ScanIR
  6485 ;;		_ScanWithRange
  6486 ;;		_main
  6487 ;; This function uses a non-reentrant model
  6488 ;;
  6489                           
  6490                           	psect	text26
  6491  0018B4                     __ptext26:
  6492                           	opt stack 0
  6493  0018B4                     _LCD_String:
  6494                           	opt stack 23
  6495                           
  6496                           ;LCD.c: 85: while(*string != 0){
  6497                           
  6498                           ;incstack = 0
  6499  0018B4  D01B               	goto	l158
  6500  0018B6                     
  6501                           ;LCD.c: 88: SendLCD(*string++,1);
  6502  0018B6  0E01               	movlw	1
  6503  0018B8  6E30               	movwf	SendLCD@type,c
  6504  0018BA  C060  FFF6         	movff	LCD_String@string,tblptrl
  6505  0018BE  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6506  0018C2  6AF8               	clrf	tblptru,c
  6507  0018C4  0E02               	movlw	(high __ramtop+-1)
  6508  0018C6  64F7               	cpfsgt	tblptrh,c
  6509  0018C8  D003               	bra	u2647
  6510  0018CA  0008               	tblrd		*
  6511  0018CC  50F5               	movf	tablat,w,c
  6512  0018CE  D005               	bra	u2640
  6513  0018D0                     u2647:
  6514  0018D0  CFF6 FFE1          	movff	tblptrl,fsr1l
  6515  0018D4  CFF7 FFE2          	movff	tblptrh,fsr1h
  6516  0018D8  50E7               	movf	indf1,w,c
  6517  0018DA                     u2640:
  6518  0018DA  ECE8  F00D         	call	_SendLCD
  6519  0018DE  0100               	movlb	0	; () banked
  6520  0018E0  4B60               	infsnz	LCD_String@string& (0+255),f,b
  6521  0018E2  2B61               	incf	(LCD_String@string+1)& (0+255),f,b
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6525  0018E4  0E21               	movlw	33
  6526  0018E6                     u3477:
  6527  0018E6  2EE8               	decfsz	wreg,f,c
  6528  0018E8  D7FE               	bra	u3477
  6529  0018EA  F000               	nop	
  6530  0018EC                     l158:
  6531  0018EC  C060  FFF6         	movff	LCD_String@string,tblptrl
  6532  0018F0  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6533  0018F4  6AF8               	clrf	tblptru,c
  6534  0018F6  0E02               	movlw	(high __ramtop+-1)
  6535  0018F8  64F7               	cpfsgt	tblptrh,c
  6536  0018FA  D003               	bra	u2657
  6537  0018FC  0008               	tblrd		*
  6538  0018FE  50F5               	movf	tablat,w,c
  6539  001900  D005               	bra	u2650
  6540  001902                     u2657:
  6541  001902  CFF6 FFE1          	movff	tblptrl,fsr1l
  6542  001906  CFF7 FFE2          	movff	tblptrh,fsr1h
  6543  00190A  50E7               	movf	indf1,w,c
  6544  00190C                     u2650:
  6545  00190C  0900               	iorlw	0
  6546  00190E  B4D8               	btfsc	status,2,c
  6547  001910  0012               	return	
  6548  001912  D7D1               	goto	l159
  6549  001914                     __end_of_LCD_String:
  6550                           	opt stack 0
  6551                           tblptru	equ	0xFF8
  6552                           tblptrh	equ	0xFF7
  6553                           tblptrl	equ	0xFF6
  6554                           tablat	equ	0xFF5
  6555                           prodh	equ	0xFF4
  6556                           prodl	equ	0xFF3
  6557                           intcon	equ	0xFF2
  6558                           postinc0	equ	0xFEE
  6559                           wreg	equ	0xFE8
  6560                           indf1	equ	0xFE7
  6561                           plusw1	equ	0xFE3
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           plusw2	equ	0xFDB
  6568                           fsr2h	equ	0xFDA
  6569                           fsr2l	equ	0xFD9
  6570                           status	equ	0xFD8
  6571                           
  6572 ;; *************** function _SendLCD *****************
  6573 ;; Defined at:
  6574 ;;		line 27 in file "LCD.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  Byte            1    wreg     unsigned char 
  6577 ;;  type            1   47[COMRAM] unsigned char 
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;  Byte            1   48[COMRAM] unsigned char 
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  1    wreg      void 
  6582 ;; Registers used:
  6583 ;;		wreg, status,2, status,0, cstack
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6589 ;;      Params:         1       0       0       0
  6590 ;;      Locals:         1       0       0       0
  6591 ;;      Temps:          0       0       0       0
  6592 ;;      Totals:         2       0       0       0
  6593 ;;Total ram usage:        2 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    5
  6596 ;; This function calls:
  6597 ;;		_LCDout
  6598 ;; This function is called by:
  6599 ;;		_initLCD
  6600 ;;		_SetLine
  6601 ;;		_LCD_String
  6602 ;;		_ScanIR
  6603 ;;		_ScanWithRange
  6604 ;;		_main
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text27
  6609  001BD0                     __ptext27:
  6610                           	opt stack 0
  6611  001BD0                     _SendLCD:
  6612                           	opt stack 24
  6613                           
  6614                           ;incstack = 0
  6615                           ;SendLCD@Byte stored from wreg
  6616  001BD0  6E31               	movwf	SendLCD@Byte,c
  6617                           
  6618                           ;LCD.c: 30: LATAbits.LATA6=type;
  6619  001BD2  B030               	btfsc	SendLCD@type,0,c
  6620  001BD4  D002               	bra	u2485
  6621  001BD6  9C89               	bcf	3977,6,c	;volatile
  6622  001BD8  D001               	bra	u2486
  6623  001BDA                     u2485:
  6624  001BDA  8C89               	bsf	3977,6,c	;volatile
  6625  001BDC                     u2486:
  6626                           
  6627                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6628  001BDC  3831               	swapf	SendLCD@Byte,w,c
  6629  001BDE  0B0F               	andlw	15
  6630  001BE0  0B0F               	andlw	15
  6631  001BE2  ECF6  F009         	call	_LCDout
  6632                           
  6633                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6634  001BE6  0E06               	movlw	6
  6635  001BE8                     u3487:
  6636  001BE8  2EE8               	decfsz	wreg,f,c
  6637  001BEA  D7FE               	bra	u3487
  6638  001BEC  D000               	nop2	
  6639                           
  6640                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6641  001BEE  5031               	movf	SendLCD@Byte,w,c
  6642  001BF0  0B0F               	andlw	15
  6643  001BF2  ECF6  F009         	call	_LCDout
  6644                           
  6645                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6646  001BF6  0E21               	movlw	33
  6647  001BF8                     u3497:
  6648  001BF8  2EE8               	decfsz	wreg,f,c
  6649  001BFA  D7FE               	bra	u3497
  6650  001BFC  F000               	nop	
  6651  001BFE  0012               	return		;funcret
  6652  001C00                     __end_of_SendLCD:
  6653                           	opt stack 0
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           prodh	equ	0xFF4
  6659                           prodl	equ	0xFF3
  6660                           intcon	equ	0xFF2
  6661                           postinc0	equ	0xFEE
  6662                           wreg	equ	0xFE8
  6663                           indf1	equ	0xFE7
  6664                           plusw1	equ	0xFE3
  6665                           fsr1h	equ	0xFE2
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           postdec2	equ	0xFDD
  6670                           plusw2	equ	0xFDB
  6671                           fsr2h	equ	0xFDA
  6672                           fsr2l	equ	0xFD9
  6673                           status	equ	0xFD8
  6674                           
  6675 ;; *************** function _LCDout *****************
  6676 ;; Defined at:
  6677 ;;		line 14 in file "LCD.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;  number          1    wreg     unsigned char 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  number          1   46[COMRAM] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1    wreg      void 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6691 ;;      Params:         0       0       0       0
  6692 ;;      Locals:         1       0       0       0
  6693 ;;      Temps:          3       0       0       0
  6694 ;;      Totals:         4       0       0       0
  6695 ;;Total ram usage:        4 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    4
  6698 ;; This function calls:
  6699 ;;		_E_TOG
  6700 ;; This function is called by:
  6701 ;;		_SendLCD
  6702 ;;		_initLCD
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text28
  6707  0013EC                     __ptext28:
  6708                           	opt stack 0
  6709  0013EC                     _LCDout:
  6710                           	opt stack 24
  6711                           
  6712                           ;incstack = 0
  6713                           ;LCDout@number stored from wreg
  6714  0013EC  6E2F               	movwf	LCDout@number,c
  6715                           
  6716                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6717  0013EE  502F               	movf	LCDout@number,w,c
  6718  0013F0  6E2C               	movwf	??_LCDout& (0+255),c
  6719  0013F2  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6720  0013F4  0E07               	movlw	7
  6721  0013F6                     u2375:
  6722  0013F6  90D8               	bcf	status,0,c
  6723  0013F8  362C               	rlcf	??_LCDout,f,c
  6724  0013FA  362D               	rlcf	??_LCDout+1,f,c
  6725  0013FC  2EE8               	decfsz	wreg,f,c
  6726  0013FE  D7FB               	goto	u2375
  6727  001400  0E07               	movlw	7
  6728  001402  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6729  001404                     u2385:
  6730  001404  342D               	rlcf	??_LCDout+1,w,c
  6731  001406  322D               	rrcf	??_LCDout+1,f,c
  6732  001408  322C               	rrcf	??_LCDout,f,c
  6733  00140A  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6734  00140C  D7FB               	goto	u2385
  6735  00140E  462C               	rlncf	??_LCDout,f,c
  6736  001410  508B               	movf	3979,w,c	;volatile
  6737  001412  182C               	xorwf	??_LCDout,w,c
  6738  001414  0BFD               	andlw	-3
  6739  001416  182C               	xorwf	??_LCDout,w,c
  6740  001418  6E8B               	movwf	3979,c	;volatile
  6741                           
  6742                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6743  00141A  502F               	movf	LCDout@number,w,c
  6744  00141C  6E2C               	movwf	??_LCDout& (0+255),c
  6745  00141E  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6746  001420  0E06               	movlw	6
  6747  001422                     u2395:
  6748  001422  90D8               	bcf	status,0,c
  6749  001424  362C               	rlcf	??_LCDout,f,c
  6750  001426  362D               	rlcf	??_LCDout+1,f,c
  6751  001428  2EE8               	decfsz	wreg,f,c
  6752  00142A  D7FB               	goto	u2395
  6753  00142C  0E07               	movlw	7
  6754  00142E  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6755  001430                     u2405:
  6756  001430  342D               	rlcf	??_LCDout+1,w,c
  6757  001432  322D               	rrcf	??_LCDout+1,f,c
  6758  001434  322C               	rrcf	??_LCDout,f,c
  6759  001436  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6760  001438  D7FB               	goto	u2405
  6761  00143A  462C               	rlncf	??_LCDout,f,c
  6762  00143C  462C               	rlncf	??_LCDout,f,c
  6763  00143E  508B               	movf	3979,w,c	;volatile
  6764  001440  182C               	xorwf	??_LCDout,w,c
  6765  001442  0BFB               	andlw	-5
  6766  001444  182C               	xorwf	??_LCDout,w,c
  6767  001446  6E8B               	movwf	3979,c	;volatile
  6768                           
  6769                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6770  001448  502F               	movf	LCDout@number,w,c
  6771  00144A  6E2C               	movwf	??_LCDout& (0+255),c
  6772  00144C  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6773  00144E  0E05               	movlw	5
  6774  001450                     u2415:
  6775  001450  90D8               	bcf	status,0,c
  6776  001452  362C               	rlcf	??_LCDout,f,c
  6777  001454  362D               	rlcf	??_LCDout+1,f,c
  6778  001456  2EE8               	decfsz	wreg,f,c
  6779  001458  D7FB               	goto	u2415
  6780  00145A  0E07               	movlw	7
  6781  00145C  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6782  00145E                     u2425:
  6783  00145E  342D               	rlcf	??_LCDout+1,w,c
  6784  001460  322D               	rrcf	??_LCDout+1,f,c
  6785  001462  322C               	rrcf	??_LCDout,f,c
  6786  001464  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6787  001466  D7FB               	goto	u2425
  6788  001468  508C               	movf	3980,w,c	;volatile
  6789  00146A  182C               	xorwf	??_LCDout,w,c
  6790  00146C  0BFE               	andlw	-2
  6791  00146E  182C               	xorwf	??_LCDout,w,c
  6792  001470  6E8C               	movwf	3980,c	;volatile
  6793                           
  6794                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6795  001472  502F               	movf	LCDout@number,w,c
  6796  001474  6E2C               	movwf	??_LCDout& (0+255),c
  6797  001476  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6798  001478  3A2C               	swapf	??_LCDout,f,c
  6799  00147A  3A2D               	swapf	??_LCDout+1,f,c
  6800  00147C  0EF0               	movlw	240
  6801  00147E  162D               	andwf	??_LCDout+1,f,c
  6802  001480  502C               	movf	??_LCDout,w,c
  6803  001482  0B0F               	andlw	15
  6804  001484  122D               	iorwf	??_LCDout+1,f,c
  6805  001486  0EF0               	movlw	240
  6806  001488  162C               	andwf	??_LCDout,f,c
  6807  00148A  0E07               	movlw	7
  6808  00148C  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6809  00148E                     u2435:
  6810  00148E  342D               	rlcf	??_LCDout+1,w,c
  6811  001490  322D               	rrcf	??_LCDout+1,f,c
  6812  001492  322C               	rrcf	??_LCDout,f,c
  6813  001494  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6814  001496  D7FB               	goto	u2435
  6815  001498  462C               	rlncf	??_LCDout,f,c
  6816  00149A  508C               	movf	3980,w,c	;volatile
  6817  00149C  182C               	xorwf	??_LCDout,w,c
  6818  00149E  0BFD               	andlw	-3
  6819  0014A0  182C               	xorwf	??_LCDout,w,c
  6820  0014A2  6E8C               	movwf	3980,c	;volatile
  6821                           
  6822                           ;LCD.c: 21: E_TOG();
  6823  0014A4  EC5E  F00E         	call	_E_TOG	;wreg free
  6824                           
  6825                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6826  0014A8  0E03               	movlw	3
  6827  0014AA                     u3507:
  6828  0014AA  2EE8               	decfsz	wreg,f,c
  6829  0014AC  D7FE               	bra	u3507
  6830  0014AE  F000               	nop	
  6831  0014B0  0012               	return		;funcret
  6832  0014B2                     __end_of_LCDout:
  6833                           	opt stack 0
  6834                           tblptru	equ	0xFF8
  6835                           tblptrh	equ	0xFF7
  6836                           tblptrl	equ	0xFF6
  6837                           tablat	equ	0xFF5
  6838                           prodh	equ	0xFF4
  6839                           prodl	equ	0xFF3
  6840                           intcon	equ	0xFF2
  6841                           postinc0	equ	0xFEE
  6842                           wreg	equ	0xFE8
  6843                           indf1	equ	0xFE7
  6844                           plusw1	equ	0xFE3
  6845                           fsr1h	equ	0xFE2
  6846                           fsr1l	equ	0xFE1
  6847                           indf2	equ	0xFDF
  6848                           postinc2	equ	0xFDE
  6849                           postdec2	equ	0xFDD
  6850                           plusw2	equ	0xFDB
  6851                           fsr2h	equ	0xFDA
  6852                           fsr2l	equ	0xFD9
  6853                           status	equ	0xFD8
  6854                           
  6855 ;; *************** function _E_TOG *****************
  6856 ;; Defined at:
  6857 ;;		line 5 in file "LCD.c"
  6858 ;; Parameters:    Size  Location     Type
  6859 ;;		None
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;		None
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  1    wreg      void 
  6864 ;; Registers used:
  6865 ;;		wreg
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6871 ;;      Params:         0       0       0       0
  6872 ;;      Locals:         0       0       0       0
  6873 ;;      Temps:          0       0       0       0
  6874 ;;      Totals:         0       0       0       0
  6875 ;;Total ram usage:        0 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    3
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_LCDout
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           	psect	text29
  6886  001CBC                     __ptext29:
  6887                           	opt stack 0
  6888  001CBC                     _E_TOG:
  6889                           	opt stack 24
  6890                           
  6891                           ;LCD.c: 8: LATCbits.LATC0=1;
  6892                           
  6893                           ;incstack = 0
  6894  001CBC  808B               	bsf	3979,0,c	;volatile
  6895                           
  6896                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6897  001CBE  0E03               	movlw	3
  6898  001CC0                     u3517:
  6899  001CC0  2EE8               	decfsz	wreg,f,c
  6900  001CC2  D7FE               	bra	u3517
  6901  001CC4  F000               	nop	
  6902                           
  6903                           ;LCD.c: 10: LATCbits.LATC0=0;
  6904  001CC6  908B               	bcf	3979,0,c	;volatile
  6905  001CC8  0012               	return		;funcret
  6906  001CCA                     __end_of_E_TOG:
  6907                           	opt stack 0
  6908                           tblptru	equ	0xFF8
  6909                           tblptrh	equ	0xFF7
  6910                           tblptrl	equ	0xFF6
  6911                           tablat	equ	0xFF5
  6912                           prodh	equ	0xFF4
  6913                           prodl	equ	0xFF3
  6914                           intcon	equ	0xFF2
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           indf1	equ	0xFE7
  6918                           plusw1	equ	0xFE3
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           plusw2	equ	0xFDB
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _InterruptHandlerLow *****************
  6930 ;; Defined at:
  6931 ;;		line 18 in file "main.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;		None
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;		None
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  1    wreg      void 
  6938 ;; Registers used:
  6939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6945 ;;      Params:         0       0       0       0
  6946 ;;      Locals:         0       0       0       0
  6947 ;;      Temps:         21       0       0       0
  6948 ;;      Totals:        21       0       0       0
  6949 ;;Total ram usage:       21 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    2
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		Interrupt level 1
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	intcodelo
  6960  000018                     __pintcodelo:
  6961                           	opt stack 0
  6962  000018                     _InterruptHandlerLow:
  6963                           	opt stack 23
  6964                           
  6965                           ;incstack = 0
  6966  000018  8034               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6967  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  6968  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  6969  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  6970  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  6971  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  6972  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  6973  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  6974  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  6975  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  6976  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  6977  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  6978  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  6979  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  6980  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  6981  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  6982  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  6983  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  6984  00005E  C034  F028         	movff	btemp,??_InterruptHandlerLow+17
  6985  000062  C035  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  6986  000066  C036  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  6987  00006A  C037  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  6988                           
  6989                           ;main.c: 20: if (PIR1bits.RCIF) {
  6990  00006E  AA9E               	btfss	3998,5,c	;volatile
  6991  000070  D016               	goto	i1l363
  6992                           
  6993                           ;main.c: 21: ReceivedString[i]=RCREG;
  6994  000072  5033               	movf	_i,w,c	;volatile
  6995  000074  0D01               	mullw	1
  6996  000076  0EE6               	movlw	low _ReceivedString
  6997  000078  24F3               	addwf	prodl,w,c
  6998  00007A  6ED9               	movwf	fsr2l,c
  6999  00007C  0E01               	movlw	high _ReceivedString
  7000  00007E  20F4               	addwfc	prodh,w,c
  7001  000080  6EDA               	movwf	fsr2h,c
  7002  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  7003                           
  7004                           ;main.c: 22: RFID_Read=1;
  7005  000086  0E01               	movlw	1
  7006  000088  0101               	movlb	1	; () banked
  7007  00008A  6FF8               	movwf	_RFID_Read& (0+255),b	;volatile
  7008                           
  7009                           ; BSR set to: 1
  7010                           ;main.c: 23: if (i==15){
  7011  00008C  0E0F               	movlw	15
  7012  00008E  1833               	xorwf	_i,w,c	;volatile
  7013  000090  A4D8               	btfss	status,2,c
  7014  000092  D003               	goto	i1l364
  7015                           
  7016                           ; BSR set to: 1
  7017                           ;main.c: 24: i=0;
  7018  000094  0E00               	movlw	0
  7019  000096  6E33               	movwf	_i,c	;volatile
  7020                           
  7021                           ;main.c: 25: }else{
  7022  000098  D001               	goto	i1l365
  7023  00009A                     i1l364:
  7024                           
  7025                           ; BSR set to: 1
  7026                           ;main.c: 26: i++;
  7027                           
  7028                           ; BSR set to: 1
  7029  00009A  2A33               	incf	_i,f,c	;volatile
  7030  00009C                     i1l365:
  7031                           
  7032                           ; BSR set to: 1
  7033                           ;main.c: 27: }
  7034                           ;main.c: 28: PIR1bits.RCIF=0;
  7035                           
  7036                           ; BSR set to: 1
  7037  00009C  9A9E               	bcf	3998,5,c	;volatile
  7038  00009E                     i1l363:
  7039                           
  7040                           ; BSR set to: 1
  7041  00009E  C02B  F037         	movff	??_InterruptHandlerLow+20,btemp+3
  7042  0000A2  C02A  F036         	movff	??_InterruptHandlerLow+19,btemp+2
  7043  0000A6  C029  F035         	movff	??_InterruptHandlerLow+18,btemp+1
  7044  0000AA  C028  F034         	movff	??_InterruptHandlerLow+17,btemp
  7045  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  7046  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  7047  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  7048  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  7049  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  7050  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  7051  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  7052  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  7053  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  7054  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  7055  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  7056  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  7057  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7058  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7059  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7060  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7061  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  7062  0000F2  9034               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7063  0000F4  0010               	retfie	
  7064  0000F6                     __end_of_InterruptHandlerLow:
  7065                           	opt stack 0
  7066                           pclatu	equ	0xFFB
  7067                           pclath	equ	0xFFA
  7068                           tblptru	equ	0xFF8
  7069                           tblptrh	equ	0xFF7
  7070                           tblptrl	equ	0xFF6
  7071                           tablat	equ	0xFF5
  7072                           prodh	equ	0xFF4
  7073                           prodl	equ	0xFF3
  7074                           intcon	equ	0xFF2
  7075                           postinc0	equ	0xFEE
  7076                           fsr0h	equ	0xFEA
  7077                           fsr0l	equ	0xFE9
  7078                           wreg	equ	0xFE8
  7079                           indf1	equ	0xFE7
  7080                           plusw1	equ	0xFE3
  7081                           fsr1h	equ	0xFE2
  7082                           fsr1l	equ	0xFE1
  7083                           bsr	equ	0xFE0
  7084                           indf2	equ	0xFDF
  7085                           postinc2	equ	0xFDE
  7086                           postdec2	equ	0xFDD
  7087                           plusw2	equ	0xFDB
  7088                           fsr2h	equ	0xFDA
  7089                           fsr2l	equ	0xFD9
  7090                           status	equ	0xFD8
  7091                           
  7092 ;; *************** function _InterruptHandlerHigh *****************
  7093 ;; Defined at:
  7094 ;;		line 34 in file "main.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;		None
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;		None
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7108 ;;      Params:         0       0       0       0
  7109 ;;      Locals:         0       0       0       0
  7110 ;;      Temps:         18       0       0       0
  7111 ;;      Totals:        18       0       0       0
  7112 ;;Total ram usage:       18 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:    1
  7115 ;; This function calls:
  7116 ;;		i2_delay_tenth_s
  7117 ;; This function is called by:
  7118 ;;		Interrupt level 2
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	intcode
  7123  000008                     __pintcode:
  7124                           	opt stack 0
  7125  000008                     _InterruptHandlerHigh:
  7126                           	opt stack 23
  7127                           
  7128                           ;incstack = 0
  7129  000008  8234               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7130  00000A  EFBB  F00A         	goto	int_func
  7131                           pclatu	equ	0xFFB
  7132                           pclath	equ	0xFFA
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           intcon	equ	0xFF2
  7140                           postinc0	equ	0xFEE
  7141                           fsr0h	equ	0xFEA
  7142                           fsr0l	equ	0xFE9
  7143                           wreg	equ	0xFE8
  7144                           indf1	equ	0xFE7
  7145                           plusw1	equ	0xFE3
  7146                           fsr1h	equ	0xFE2
  7147                           fsr1l	equ	0xFE1
  7148                           bsr	equ	0xFE0
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           postdec2	equ	0xFDD
  7152                           plusw2	equ	0xFDB
  7153                           fsr2h	equ	0xFDA
  7154                           fsr2l	equ	0xFD9
  7155                           status	equ	0xFD8
  7156                           
  7157                           	psect	intcode_body
  7158  001576                     __pintcode_body:
  7159                           	opt stack 23
  7160  001576                     int_func:
  7161                           	opt stack 23
  7162  001576  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7163  00157A  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7164  00157E  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7165  001582  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7166  001586  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7167  00158A  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7168  00158E  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7169  001592  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7170  001596  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7171  00159A  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7172  00159E  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7173  0015A2  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7174  0015A6  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7175  0015AA  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7176  0015AE  C034  F013         	movff	btemp,??_InterruptHandlerHigh+14
  7177  0015B2  C035  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  7178  0015B6  C036  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  7179  0015BA  C037  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  7180                           
  7181                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7182  0015BE  A2F2               	btfss	intcon,1,c	;volatile
  7183  0015C0  D00D               	goto	i2l371
  7184                           
  7185                           ;main.c: 36: if (mode==-1) {
  7186  0015C2  2832               	incf	_mode,w,c	;volatile
  7187  0015C4  A4D8               	btfss	status,2,c
  7188  0015C6  D003               	goto	i2l372
  7189                           
  7190                           ;main.c: 38: mode=1;
  7191  0015C8  0E01               	movlw	1
  7192  0015CA  6E32               	movwf	_mode,c	;volatile
  7193                           
  7194                           ;main.c: 39: } else if (mode==0) {
  7195  0015CC  D003               	goto	i2l375
  7196  0015CE                     i2l372:
  7197  0015CE  5032               	movf	_mode,w,c	;volatile
  7198  0015D0  A4D8               	btfss	status,2,c
  7199                           
  7200                           ;main.c: 43: mode=-1;
  7201                           
  7202                           ;main.c: 41: } else {
  7203  0015D2  6832               	setf	_mode,c	;volatile
  7204  0015D4                     i2l375:
  7205                           
  7206                           ;main.c: 44: }
  7207                           ;main.c: 46: delay_tenth_s(2);
  7208  0015D4  0E02               	movlw	2
  7209  0015D6  EC96  F00D         	call	i2_delay_tenth_s
  7210                           
  7211                           ;main.c: 47: INTCONbits.INT0IF=0;
  7212  0015DA  92F2               	bcf	intcon,1,c	;volatile
  7213  0015DC                     i2l371:
  7214                           
  7215                           ;main.c: 48: }
  7216                           ;main.c: 49: if (INTCONbits.TMR0IF) {
  7217  0015DC  A4F2               	btfss	intcon,2,c	;volatile
  7218  0015DE  D004               	goto	i2l376
  7219                           
  7220                           ;main.c: 50: millis++;
  7221  0015E0  0101               	movlb	1	; () banked
  7222  0015E2  4BF6               	infsnz	_millis& (0+255),f,b	;volatile
  7223  0015E4  2BF7               	incf	(_millis+1)& (0+255),f,b	;volatile
  7224                           
  7225                           ; BSR set to: 1
  7226                           ;main.c: 51: INTCONbits.TMR0IF = 0;
  7227  0015E6  94F2               	bcf	intcon,2,c	;volatile
  7228  0015E8                     i2l376:
  7229                           
  7230                           ; BSR set to: 1
  7231  0015E8  C016  F037         	movff	??_InterruptHandlerHigh+17,btemp+3
  7232  0015EC  C015  F036         	movff	??_InterruptHandlerHigh+16,btemp+2
  7233  0015F0  C014  F035         	movff	??_InterruptHandlerHigh+15,btemp+1
  7234  0015F4  C013  F034         	movff	??_InterruptHandlerHigh+14,btemp
  7235  0015F8  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7236  0015FC  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7237  001600  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7238  001604  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7239  001608  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7240  00160C  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7241  001610  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7242  001614  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7243  001618  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7244  00161C  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7245  001620  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7246  001624  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7247  001628  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7248  00162C  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7249  001630  9234               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7250  001632  0011               	retfie		f
  7251  001634                     __end_of_InterruptHandlerHigh:
  7252                           	opt stack 0
  7253                           pclatu	equ	0xFFB
  7254                           pclath	equ	0xFFA
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           prodh	equ	0xFF4
  7260                           prodl	equ	0xFF3
  7261                           intcon	equ	0xFF2
  7262                           postinc0	equ	0xFEE
  7263                           fsr0h	equ	0xFEA
  7264                           fsr0l	equ	0xFE9
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           plusw1	equ	0xFE3
  7268                           fsr1h	equ	0xFE2
  7269                           fsr1l	equ	0xFE1
  7270                           bsr	equ	0xFE0
  7271                           indf2	equ	0xFDF
  7272                           postinc2	equ	0xFDE
  7273                           postdec2	equ	0xFDD
  7274                           plusw2	equ	0xFDB
  7275                           fsr2h	equ	0xFDA
  7276                           fsr2l	equ	0xFD9
  7277                           status	equ	0xFD8
  7278                           
  7279 ;; *************** function i2_delay_tenth_s *****************
  7280 ;; Defined at:
  7281 ;;		line 32 in file "Movement.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  tenth_second    1    wreg     unsigned char 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7286 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  1    wreg      void 
  7289 ;; Registers used:
  7290 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : 0/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7296 ;;      Params:         0       0       0       0
  7297 ;;      Locals:         3       0       0       0
  7298 ;;      Temps:          1       0       0       0
  7299 ;;      Totals:         4       0       0       0
  7300 ;;Total ram usage:        4 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; This function calls:
  7303 ;;		Nothing
  7304 ;; This function is called by:
  7305 ;;		_InterruptHandlerHigh
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           	psect	text32
  7310  001B2C                     __ptext32:
  7311                           	opt stack 0
  7312  001B2C                     i2_delay_tenth_s:
  7313                           	opt stack 23
  7314                           
  7315                           ;incstack = 0
  7316                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7317  001B2C  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7318                           
  7319                           ;Movement.c: 33: unsigned int i=0;
  7320  001B2E  0E00               	movlw	0
  7321  001B30  6E04               	movwf	i2delay_tenth_s@i+1,c
  7322  001B32  0E00               	movlw	0
  7323  001B34  6E03               	movwf	i2delay_tenth_s@i,c
  7324                           
  7325                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7326  001B36  0E00               	movlw	0
  7327  001B38  6E04               	movwf	i2delay_tenth_s@i+1,c
  7328  001B3A  0E01               	movlw	1
  7329  001B3C  6E03               	movwf	i2delay_tenth_s@i,c
  7330  001B3E  D009               	goto	i2l209
  7331  001B40                     
  7332                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7333  001B40  0E82               	movlw	130
  7334  001B42  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7335  001B44  0EDE               	movlw	222
  7336  001B46                     i2u352_47:
  7337  001B46  2EE8               	decfsz	wreg,f,c
  7338  001B48  D7FE               	bra	i2u352_47
  7339  001B4A  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7340  001B4C  D7FC               	bra	i2u352_47
  7341  001B4E  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7342  001B50  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7343  001B52                     i2l209:
  7344  001B52  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7345  001B54  0D02               	mullw	2
  7346  001B56  5003               	movf	i2delay_tenth_s@i,w,c
  7347  001B58  5CF3               	subwf	prodl,w,c
  7348  001B5A  5004               	movf	i2delay_tenth_s@i+1,w,c
  7349  001B5C  58F4               	subwfb	prodh,w,c
  7350  001B5E  A0D8               	btfss	status,0,c
  7351  001B60  0012               	return	
  7352  001B62  D7EE               	goto	i2l210
  7353  001B64                     __end_ofi2_delay_tenth_s:
  7354                           	opt stack 0
  7355                           pclatu	equ	0xFFB
  7356                           pclath	equ	0xFFA
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           intcon	equ	0xFF2
  7364                           postinc0	equ	0xFEE
  7365                           fsr0h	equ	0xFEA
  7366                           fsr0l	equ	0xFE9
  7367                           wreg	equ	0xFE8
  7368                           indf1	equ	0xFE7
  7369                           plusw1	equ	0xFE3
  7370                           fsr1h	equ	0xFE2
  7371                           fsr1l	equ	0xFE1
  7372                           bsr	equ	0xFE0
  7373                           indf2	equ	0xFDF
  7374                           postinc2	equ	0xFDE
  7375                           postdec2	equ	0xFDD
  7376                           plusw2	equ	0xFDB
  7377                           fsr2h	equ	0xFDA
  7378                           fsr2l	equ	0xFD9
  7379                           status	equ	0xFD8
  7380                           pclatu	equ	0xFFB
  7381                           pclath	equ	0xFFA
  7382                           tblptru	equ	0xFF8
  7383                           tblptrh	equ	0xFF7
  7384                           tblptrl	equ	0xFF6
  7385                           tablat	equ	0xFF5
  7386                           prodh	equ	0xFF4
  7387                           prodl	equ	0xFF3
  7388                           intcon	equ	0xFF2
  7389                           postinc0	equ	0xFEE
  7390                           fsr0h	equ	0xFEA
  7391                           fsr0l	equ	0xFE9
  7392                           wreg	equ	0xFE8
  7393                           indf1	equ	0xFE7
  7394                           plusw1	equ	0xFE3
  7395                           fsr1h	equ	0xFE2
  7396                           fsr1l	equ	0xFE1
  7397                           bsr	equ	0xFE0
  7398                           indf2	equ	0xFDF
  7399                           postinc2	equ	0xFDE
  7400                           postdec2	equ	0xFDD
  7401                           plusw2	equ	0xFDB
  7402                           fsr2h	equ	0xFDA
  7403                           fsr2l	equ	0xFD9
  7404                           status	equ	0xFD8
  7405                           
  7406                           	psect	rparam
  7407  0000                     pclatu	equ	0xFFB
  7408                           pclath	equ	0xFFA
  7409                           tblptru	equ	0xFF8
  7410                           tblptrh	equ	0xFF7
  7411                           tblptrl	equ	0xFF6
  7412                           tablat	equ	0xFF5
  7413                           prodh	equ	0xFF4
  7414                           prodl	equ	0xFF3
  7415                           intcon	equ	0xFF2
  7416                           postinc0	equ	0xFEE
  7417                           fsr0h	equ	0xFEA
  7418                           fsr0l	equ	0xFE9
  7419                           wreg	equ	0xFE8
  7420                           indf1	equ	0xFE7
  7421                           plusw1	equ	0xFE3
  7422                           fsr1h	equ	0xFE2
  7423                           fsr1l	equ	0xFE1
  7424                           bsr	equ	0xFE0
  7425                           indf2	equ	0xFDF
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           plusw2	equ	0xFDB
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433                           	psect	temp
  7434  000034                     btemp:
  7435                           	opt stack 0
  7436  000034                     	ds	1
  7437  0000                     int$flags	set	btemp
  7438  0000                     wtemp6	set	btemp+1
  7439                           pclatu	equ	0xFFB
  7440                           pclath	equ	0xFFA
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           intcon	equ	0xFF2
  7448                           postinc0	equ	0xFEE
  7449                           fsr0h	equ	0xFEA
  7450                           fsr0l	equ	0xFE9
  7451                           wreg	equ	0xFE8
  7452                           indf1	equ	0xFE7
  7453                           plusw1	equ	0xFE3
  7454                           fsr1h	equ	0xFE2
  7455                           fsr1l	equ	0xFE1
  7456                           bsr	equ	0xFE0
  7457                           indf2	equ	0xFDF
  7458                           postinc2	equ	0xFDE
  7459                           postdec2	equ	0xFDD
  7460                           plusw2	equ	0xFDB
  7461                           fsr2h	equ	0xFDA
  7462                           fsr2l	equ	0xFD9
  7463                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         183
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      51
    BANK0           160    107     115
    BANK1           256    226     249
    BANK2           256      0     150

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@RecievedString	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@millis	PTR unsigned int  size(2) Largest target is 2
		 -> millis(BANK1[2]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), STR_5(CODE[17]), 
		 -> main@Message(BANK1[10]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S111DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S111DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_SendLCD
    _main->_VerifySignal
    _initLCD->_SendLCD
    _ScanWithRange->_SendLCD
    _ScanIR->_SendLCD
    _setMotorPWM->___wmul
    ___awdiv->___wmul
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               228   228      0   80924
                                            105 BANK0      2     2      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              0 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4921
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     240
                                             43 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        10     8      2     169
                                             43 COMRAM     6     4      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    61     16   27849
                                             28 BANK0     77    61     16
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5461
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5731
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4226
                                             17 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             43 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   13771
                                             28 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4344
                                             17 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1694
                                              8 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3073
                                              7 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             43 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     409
                                             43 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             43 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              0 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2532
                                              0 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                             47 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                             43 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6B      73       5       71.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      33       1       54.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     235       3        0.0%
DATA                 0      0     235      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 20 02:34:18 2018

                        ?_grabRightIR 002C                                     _i 0033  
                  fullSpeedBack@power 007B                                    l36 1272  
                                  l37 129C                                    l53 1686  
                                  l54 1636                                    l70 1784  
                                  l55 164E                                    l56 1666  
                                  l67 17A4                                    l68 174E  
                                  l69 176A                          ___awdiv@sign 0065  
                                  bsr 000FE0                   ___wmul@multiplicand 002E  
                         main@Message 01BE                           ?_LCD_String 0060  
                                 l110 17E2                                   l120 1C14  
                                 l210 1B08                                   l115 1858  
                                 l230 0C8A                                   l231 0C72  
                                 l152 1BB2                                   l224 0E7A  
                                 l400 053C                                   l217 13D4  
                                 l209 1B1A                                   l225 0B3A  
                                 l401 05C0                                   l154 1BC6  
                                 l234 0E64                                   l226 0BFC  
                                 l235 0E76                                   l227 0C18  
                                 l411 071A                                   l403 060C  
                                 l412 06BA                                   l229 0D3C  
                                 l421 0858                                   l405 062E  
                                 l158 18EC                                   l430 08FC  
                                 l414 06FC                                   l159 18B6  
                                 l423 0936                                   l424 08E0  
                                 l408 0650                                   l409 076C  
                                 l434 09A4                                   l426 08C0  
                                 l418 07C8                                   l451 0F26  
                                 l435 09D6                                   l460 0F86  
                                 l452 0F40                                   l462 0FE4  
                                 l454 0F56                                   l455 0F4E  
                                 l473 1080                                   l393 03FC  
                                 l474 10A4                                   l394 0490  
                                 l475 10AC                                   l467 100C  
                                 l395 049E                                   l900 1986  
                                 l820 1C84                                   l476 10EC  
                                 l396 04BC                                   l485 112E  
                                 l477 10CC                                   l469 1036  
                                 l661 170A                                   l389 03F6  
                                 l910 19D2                                   l486 118A  
                                 l662 1702                                   l903 19AE  
                                 l487 1134                                   l399 04F2  
                                 l904 19B8                                   l913 19F2  
                                 l665 172A                                   l914 19FC  
                                 l666 1734                                   l658 16DC  
                                 l667 1742                                   l659 16EC  
                                 l909 19DA                                   l899 198E  
                         grabLeftIR@i 0062                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3107 1850                                  l3091 17DA  
                                l3185 103A                                  l3623 06B2  
                                l3721 09FA                                  l3635 06F4  
                                l3719 09F8                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1210 170E  
                                _LATB 000F8A                                  u3200 0932  
                                u3120 06F0                                  u2500 1992  
                                u1460 19DE                                  u3220 0970  
                                u3140 0714                                  u2405 1430  
                                u3070 067C                                  u2415 1450  
                                u2344 1234                                  u3240 09E2  
                                u3080 0690                                  u3072 067E  
                                u2425 145E                                  u2345 1230  
                                u2610 1896                                  u2354 128E  
                                u3082 0692                                  u2435 148E  
                                u2355 128A                                  u3307 14FC  
                                u3180 08A4                                  u2605 1860  
                                u2365 12E8                                  u3317 150A  
                                u2375 13F6                                  u3407 1B0E  
                                u3327 151C                                  u2640 18DA  
                                u2385 1404                                  u3417 1346  
                                u3337 152E                                  u3257 0450  
                                u2650 190C                                  u2810 10F4  
                                u2730 1066                                  u3507 14AA  
                                u2395 1422                                  u3427 135E  
                                u3347 1546                                  u3267 0468  
                                u2580 1820                                  u2820 1112  
                                u3517 1CC0                                  u2485 1BDA  
                                u3437 1680                                  u1845 1C10  
                                u3357 155C                                  u3277 14C6  
                                u2486 1BDC                                  u1846 1C12  
                                u2647 18D0                                  u3447 1812  
                                u2575 17EA                                  u3367 156E  
                                u3287 14DC                                  u2840 1192  
                                u2657 1902                                  u3457 1888  
                                u3377 0B6E                                  u1865 1C22  
                                u3297 14EE                                  u2850 11AC  
                                u1866 1C24                                  u3467 1BC8  
                                u3387 0B86                                  u3477 18E6  
                                u3397 179E                                  u3487 1BE8  
                                u3497 1BF8                                  u2971 0364  
                                u2981 0376                                  _main 0350  
                                _mode 0032                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0034                                  _stop 1634  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00F6               ScanWithRange@MotorPower 00BC  
                        ___param_bank 000000                       i2_delay_tenth_s 1B2C  
                     __end_of_SendLCD 1C00                       __end_of_SetLine 1BD0  
                  ScanWithRange@F3555 00CB                           ScanIR@F3541 00CF  
                               ?_main 0001                       __end_of___awdiv 174C  
                               ?_stop 0071                       ___awdiv@divisor 0062  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0062  
                     __end_of___lwdiv 19C2                       __end_of___lwmod 1A06  
                               i2l210 1B40                                 i1l363 009E  
                               i1l364 009A                                 i1l365 009C  
                               i2l209 1B52                                 i2l371 15DC  
                               i2l372 15CE                                 i2l375 15D4  
                               i2l376 15E8                       ___awdiv@counter 0064  
                               _RCREG 000FAE                                 _E_TOG 1CBC  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                     __end_of_initLCD 1576                    ScanWithRange@loops 0080  
                     __end_of_dpowers 030B                       __end_of_isdigit 1C8C  
                               main@i 01CE                                 pclath 000FFA  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                               wtemp6 0035                   __size_of_LCD_String 0060  
                     __end_of_sprintf 11BA                __size_of_ScanWithRange 04FE  
                      __CFG_MCLRE$OFF 000000                       __initialization 1B64  
                        __end_of_main 0A1C                          __end_of_stop 16C6  
                      delay_tenth_s@i 002E                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 0060          ScanIR@DirectionMoveThreshold 00A9  
          VerifySignal@RecievedString 002C                  __end_of_enableSensor 1C26  
                 VerifySignal@hexByte 0062                                ??_main 00C9  
                              ??_stop 0032                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0068                __size_of_fullSpeedBack 003C  
                    ___awdiv@dividend 0060                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 1B2C                                _LCDout 13EC  
                         SendLCD@Byte 0031                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00BD  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1B64                           SendLCD@type 0030  
                           ??_SendLCD 0031                                _ScanIR 12F8  
                           ??_SetLine 0032                           fullSpeed@mL 0071  
                         fullSpeed@mR 0073                   ScanWithRange@millis 008A  
                              ___wmul 1C26                             ??___awdiv 0032  
                    __end_of_initRFID 1CA8                             ??___lwdiv 0030  
                           ??___lwmod 0030                                _initIR 1C4C  
                __size_of_grabRightIR 0076                                _millis 01F6  
                              clear_0 1B6A                                clear_1 1B76  
                              clear_2 1B82                      ___awdiv@quotient 0066  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 002C                             ??_initLCD 0060  
                       _ScanWithRange 0A1C                             ??_isdigit 002C  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0071  
                              stop@mR 0073                             ??_sprintf 006F  
     ScanWithRange@TimeAboveThreshold 00C0                      __end_of_turnLeft 1ABA  
                     fullSpeedBack@mL 0077                       fullSpeedBack@mR 0079  
                          __accesstop 0060               __end_of__initialization 1B8C  
                       ___rparam_used 000001                           SetLine@line 0060  
                       __end_of_E_TOG 1CCA                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1A06                          ??_LCD_String 0032  
                      ?_ScanWithRange 007C                  VerifySignal@checksum 0061  
                             ??_E_TOG 002C         __size_of_InterruptHandlerHigh 162C  
         __end_of_InterruptHandlerLow 00F6            delay_tenth_s@tenth_seconds 002D  
                        sprintf@width 0079                            __pbssBANK0 00CB  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0014                    __size_of_fullSpeed 007C  
                  __end_of_LCD_String 1914                               ?_ScanIR 007C  
                      ?_fullSpeedBack 0077                 __size_of_enableSensor 0026  
                             ?___wmul 002C                   grabLeftIR@IR_signal 0060  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                            _grabLeftIR 183E  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013E  
                     __size_of_LCDout 00C6                          _enableSensor 1C00  
                  __size_of_turnRight 003C                  __end_of_initMotorPWM 1AF4  
              ScanWithRange@RFID_Read 0088                               _SendLCD 1BD0  
                             __Hparam 0000                               _SetLine 1B9A  
                             __Lparam 0000                       __size_of_ScanIR 00F4  
                             ___awdiv 16C6                       __size_of___wmul 0026  
                             ___lwdiv 196E                               ___lwmod 19C2  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1B64                       ??_ScanWithRange 008C  
                             __ramtop 0300                             ?_turnLeft 0077  
                             __ptext0 0350                               __ptext1 1CA8  
                             __ptext2 1C8C                               __ptext3 1ABA  
                             __ptext4 14B2                               __ptext5 1C4C  
                             __ptext6 1A06                               __ptext7 1C00  
                             __ptext8 1914                               __ptext9 0A1C  
                           _T0CONbits 000FD5                               _initLCD 14B2  
                   __end_of_initTimer 1CBC                               _dpowers 0301  
                   __end_of_fullSpeed 17C8                               _isdigit 1C6E  
                        LCDout@number 002F                         ?_VerifySignal 002C  
                             main@buf 0100                               _sprintf 0F1A  
                      __pintcode_body 1576                  end_of_initialization 1B8C  
                      ScanWithRange@i 00B8                    setMotorPWM@PWMduty 006F  
                          ??_initRFID 002C                         __Lmediumconst 0000  
                             int_func 1576                    ScanIR@SensorResult 00AB  
                     ??_fullSpeedBack 0032                             _RFID_Read 01F8  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 0032                ScanWithRange@LeftFlick 00C6  
                   __end_of_turnRight 1A7E                           ?_grabLeftIR 002C  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 002E  
              ScanWithRange@RightFlag 00C7                        __end_of_LCDout 14B2  
                           _TXSTAbits 000FAC                             ScanIR@buf 0081  
                       ??_grabRightIR 002E                        __end_of_ScanIR 13EC  
                      _ReceivedString 01E6                        __end_of___wmul 1C4C  
                   ScanWithRange@Move 0084                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1C6E                __size_of_delay_tenth_s 0038  
                 start_initialization 1B64                 __size_of_initMotorPWM 003A  
                            ??_LCDout 002C          __end_of_InterruptHandlerHigh 1634  
                            ??_ScanIR 0080                   __size_of_grabLeftIR 0076  
                            ??___wmul 0030                              ??_initIR 002C  
                 __end_of_grabRightIR 183E                          _initMotorPWM 1ABA  
                         __pbssCOMRAM 0032                        fullSpeed@power 0075  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$1772 002D          __size_of_InterruptHandlerLow 00DE  
                       _delay_tenth_s 1AF4                           sprintf@flag 0078  
                         sprintf@prec 0075                     __size_of_initRFID 001C  
                            ?_SendLCD 0030                              ?_SetLine 0001  
                    ___lwdiv@dividend 002C                             __pintcode 0008  
                __end_of_VerifySignal 196E                              ?___awdiv 0060  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 002C  
                            ?___lwmod 0063                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 01C9  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003C  
                       ??_setMotorPWM 006A                             _initTimer 1CA8  
                           _fullSpeed 174C                      ___lwdiv@quotient 0061  
                            ?_sprintf 0067                        ?_delay_tenth_s 0001  
                      ___wmul@product 0030                              _LATAbits 000F89  
                            _LATBbits 000F8A                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0077                           turnRight@mR 0079  
                            i2u352_47 1B46                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3552 0200  
                           main@F3554 0264                             main@F3557 01E2  
                         _grabRightIR 17C8                 ScanWithRange@LeftFlag 00BE  
                grabRightIR@IR_signal 0060                     ___wmul@multiplier 002C  
               __end_of_ScanWithRange 0F1A                          setMotorPWM@m 0068  
               ScanWithRange@MoveTime 0082                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 0086                              ScanIR@mL 007C  
                            ScanIR@mR 007E                          ??_grabLeftIR 002E  
                          ?_initTimer 0001                             _turnRight 1A42  
                          ?_fullSpeed 0071                      ScanWithRange@buf 0090  
                 __end_of_setMotorPWM 12F8                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1A42                      __size_of_SetLine 0036  
                  __end_of_grabLeftIR 18B4                      __size_of___awdiv 0086  
                    __size_of___lwdiv 0054                      __size_of___lwmod 0044  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0076  
                    __size_of_initLCD 00C4                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 002E                       ___lwdiv@counter 0060  
                          ?_turnRight 0077                              __ptext10 1A42  
                            __ptext11 1A7E                              __ptext20 1C26  
                            __ptext12 174C                              __ptext21 19C2  
                            __ptext13 1AF4                              __ptext22 196E  
                            __ptext14 12F8                              __ptext23 17C8  
                            __ptext15 1634                              __ptext32 1B2C  
                            __ptext24 183E                              __ptext16 11BA  
                            __ptext25 1B9A                              __ptext17 16C6  
                            __ptext26 18B4                              __ptext18 0F1A  
                            __ptext27 1BD0                              __ptext19 1C6E  
                            __ptext28 13EC                              __ptext29 1CBC  
                     ??_delay_tenth_s 002C                      __size_of_sprintf 02A0  
                            _initRFID 1C8C             ScanWithRange@SensorResult 00C2  
                      turnRight@power 007B                         __size_of_main 06CC  
                  main@DirectionFound 01CD                         turnLeft@power 007B  
                       __size_of_stop 0092                            turnLeft@mL 0077  
                          turnLeft@mR 0079                 __size_of_VerifySignal 005A  
                            int$flags 0034                              main@Move 01CF  
                 _InterruptHandlerLow 0018                            _LCD_String 18B4  
                            _turnLeft 1A7E                       ScanWithRange@mL 007C  
                     ScanWithRange@mR 007E                    enableSensor@sensor 002D  
                  enableSensor@status 002C                         VerifySignal@i 0060  
                          _INTCONbits 000FF2                           ??_initTimer 002C  
                            isdigit@c 002E                           ??_fullSpeed 0076  
                         _setMotorPWM 11BA                          _VerifySignal 1914  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0073                             sprintf@sp 0067  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 002C  
                    ___lwmod@dividend 0063                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00BA                ??_InterruptHandlerHigh 0005  
                            sprintf@c 007B                              sprintf@f 0069  
                     ___lwmod@divisor 0065                       ___lwmod@counter 0030  
                         ??_turnRight 0032                 ??_InterruptHandlerLow 0017  
                      ??_enableSensor 002D                      i2delay_tenth_s@i 0003  
