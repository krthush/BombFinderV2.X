

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 15:24:59 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISEbits	set	3990
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001C32                     __pcinit:
   189                           	opt stack 0
   190  001C32                     start_initialization:
   191                           	opt stack 0
   192  001C32                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK2 (100 bytes)
   196  001C32  EE02  F000         	lfsr	0,__pbssBANK2
   197  001C36  0E64               	movlw	100
   198  001C38                     clear_0:
   199  001C38  6AEE               	clrf	postinc0,c
   200  001C3A  06E8               	decf	wreg,f,c
   201  001C3C  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK1 (21 bytes)
   204  001C3E  EE01  F0E2         	lfsr	0,__pbssBANK1
   205  001C42  0E15               	movlw	21
   206  001C44                     clear_1:
   207  001C44  6AEE               	clrf	postinc0,c
   208  001C46  06E8               	decf	wreg,f,c
   209  001C48  E1FD               	bnz	clear_1
   210                           
   211                           ; Clear objects allocated to BANK0 (58 bytes)
   212  001C4A  EE00  F0BF         	lfsr	0,__pbssBANK0
   213  001C4E  0E3A               	movlw	58
   214  001C50                     clear_2:
   215  001C50  6AEE               	clrf	postinc0,c
   216  001C52  06E8               	decf	wreg,f,c
   217  001C54  E1FD               	bnz	clear_2
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220  001C56  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221  001C58  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   222  001C5A                     end_of_initialization:
   223                           	opt stack 0
   224  001C5A                     __end_of__initialization:
   225                           	opt stack 0
   226  001C5A  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227  001C5C  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228  001C5E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   229  001C60  6EF8               	movwf	tblptru,c
   230  001C62  0100               	movlb	0
   231  001C64  EFA8  F001         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  00003A                     __pbssCOMRAM:
   238                           	opt stack 0
   239  00003A                     _i:
   240                           	opt stack 0
   241  00003A                     	ds	1
   242  00003B                     _mode:
   243                           	opt stack 0
   244  00003B                     	ds	1
   245                           tblptru	equ	0xFF8
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           
   249                           	psect	bssBANK0
   250  0000BF                     __pbssBANK0:
   251                           	opt stack 0
   252  0000BF                     main@F3895:
   253                           	opt stack 0
   254  0000BF                     	ds	50
   255  0000F1                     ScanIR@F3879:
   256                           	opt stack 0
   257  0000F1                     	ds	4
   258  0000F5                     ScanWithRange@F3892:
   259                           	opt stack 0
   260  0000F5                     	ds	4
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265                           	psect	bssBANK1
   266  0001E2                     __pbssBANK1:
   267                           	opt stack 0
   268  0001E2                     main@F3898:
   269                           	opt stack 0
   270  0001E2                     	ds	4
   271  0001E6                     _ReceivedString:
   272                           	opt stack 0
   273  0001E6                     	ds	16
   274  0001F6                     _RFID_Read:
   275                           	opt stack 0
   276  0001F6                     	ds	1
   277                           tblptru	equ	0xFF8
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	bssBANK2
   282  000200                     __pbssBANK2:
   283                           	opt stack 0
   284  000200                     main@F3893:
   285                           	opt stack 0
   286  000200                     	ds	100
   287                           tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	cstackBANK1
   292  000100                     __pcstackBANK1:
   293                           	opt stack 0
   294  000100                     main@buf:
   295                           	opt stack 0
   296                           
   297                           ; 40 bytes @ 0x0
   298  000100                     	ds	40
   299  000128                     main@MoveType:
   300                           	opt stack 0
   301                           
   302                           ; 50 bytes @ 0x28
   303  000128                     	ds	50
   304  00015A                     main@MoveTime:
   305                           	opt stack 0
   306                           
   307                           ; 100 bytes @ 0x5A
   308  00015A                     	ds	100
   309  0001BE                     main@Message:
   310                           	opt stack 0
   311                           
   312                           ; 10 bytes @ 0xBE
   313  0001BE                     	ds	10
   314  0001C8                     main@ScanAngle:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0xC8
   318  0001C8                     	ds	1
   319  0001C9                     main@SensorResult:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0xC9
   323  0001C9                     	ds	4
   324  0001CD                     main@DirectionFound:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0xCD
   328  0001CD                     	ds	1
   329  0001CE                     main@i:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0xCE
   333  0001CE                     	ds	1
   334  0001CF                     main@Move:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0xCF
   338  0001CF                     	ds	1
   339  0001D0                     main@mL:
   340                           	opt stack 0
   341                           
   342                           ; 9 bytes @ 0xD0
   343  0001D0                     	ds	9
   344  0001D9                     main@mR:
   345                           	opt stack 0
   346                           
   347                           ; 9 bytes @ 0xD9
   348  0001D9                     	ds	9
   349                           tblptru	equ	0xFF8
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	cstackBANK0
   354  000060                     __pcstackBANK0:
   355                           	opt stack 0
   356  000060                     ??_sprintf:
   357  000060                     setMotorPWM@PWMduty:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x0
   361  000060                     	ds	2
   362  000062                     stop@mL:
   363                           	opt stack 0
   364  000062                     fullSpeedAhead@mL:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x2
   368  000062                     	ds	2
   369  000064                     stop@mR:
   370                           	opt stack 0
   371  000064                     fullSpeedAhead@mR:
   372                           	opt stack 0
   373  000064                     sprintf@ap:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x4
   377  000064                     	ds	2
   378  000066                     fullSpeedAhead@power:
   379                           	opt stack 0
   380  000066                     sprintf@prec:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x6
   384  000066                     	ds	1
   385  000067                     turnLeft@mL:
   386                           	opt stack 0
   387  000067                     turnRight@mL:
   388                           	opt stack 0
   389  000067                     fullSpeedBack@mL:
   390                           	opt stack 0
   391  000067                     sprintf@val:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x7
   395  000067                     	ds	2
   396  000069                     sprintf@flag:
   397                           	opt stack 0
   398  000069                     turnLeft@mR:
   399                           	opt stack 0
   400  000069                     turnRight@mR:
   401                           	opt stack 0
   402  000069                     fullSpeedBack@mR:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x9
   406  000069                     	ds	1
   407  00006A                     sprintf@width:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0xA
   411  00006A                     	ds	1
   412  00006B                     turnLeft@power:
   413                           	opt stack 0
   414  00006B                     turnRight@power:
   415                           	opt stack 0
   416  00006B                     fullSpeedBack@power:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xB
   420  00006B                     	ds	1
   421  00006C                     sprintf@c:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0xC
   425  00006C                     	ds	1
   426  00006D                     ScanIR@mL:
   427                           	opt stack 0
   428  00006D                     ScanWithRange@mL:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0xD
   432  00006D                     	ds	2
   433  00006F                     ScanIR@mR:
   434                           	opt stack 0
   435  00006F                     ScanWithRange@mR:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0xF
   439  00006F                     	ds	2
   440  000071                     ScanWithRange@loops:
   441                           	opt stack 0
   442  000071                     ScanIR@buf:
   443                           	opt stack 0
   444                           
   445                           ; 40 bytes @ 0x11
   446  000071                     	ds	2
   447  000073                     ScanWithRange@MoveTime:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x13
   451  000073                     	ds	2
   452  000075                     ScanWithRange@Move:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x15
   456  000075                     	ds	2
   457  000077                     ScanWithRange@MoveType:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x17
   461  000077                     	ds	2
   462  000079                     ScanWithRange@RFID_Read:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x19
   466  000079                     	ds	2
   467  00007B                     ??_ScanWithRange:
   468                           
   469                           ; 0 bytes @ 0x1B
   470  00007B                     	ds	5
   471  000080                     ScanWithRange@buf:
   472                           	opt stack 0
   473                           
   474                           ; 40 bytes @ 0x20
   475  000080                     	ds	25
   476  000099                     ScanIR@DirectionMoveThreshold:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x39
   480  000099                     	ds	2
   481  00009B                     ScanIR@SensorResult:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x3B
   485  00009B                     	ds	13
   486  0000A8                     ScanWithRange@n:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x48
   490  0000A8                     	ds	2
   491  0000AA                     ScanWithRange@LeftFlick:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x4A
   495  0000AA                     	ds	1
   496  0000AB                     ScanWithRange@MiniLeftFlick:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x4B
   500  0000AB                     	ds	1
   501  0000AC                     ScanWithRange@i:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x4C
   505  0000AC                     	ds	2
   506  0000AE                     ScanWithRange@DirectionFoundThreshold:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x4E
   510  0000AE                     	ds	2
   511  0000B0                     ScanWithRange@MotorPower:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x50
   515  0000B0                     	ds	1
   516  0000B1                     ScanWithRange@LeftFlag:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x51
   520  0000B1                     	ds	2
   521  0000B3                     ScanWithRange@TimeAboveThreshold:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x53
   525  0000B3                     	ds	1
   526  0000B4                     ScanWithRange@SensorResult:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x54
   530  0000B4                     	ds	4
   531  0000B8                     ScanWithRange@RightFlag:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x58
   535  0000B8                     	ds	2
   536  0000BA                     ??_main:
   537                           
   538                           ; 0 bytes @ 0x5A
   539  0000BA                     	ds	5
   540                           tblptru	equ	0xFF8
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           
   544                           	psect	cstackCOMRAM
   545  000001                     __pcstackCOMRAM:
   546                           	opt stack 0
   547  000001                     ??i2_delay_tenth_s:
   548                           
   549                           ; 0 bytes @ 0x0
   550  000001                     	ds	1
   551  000002                     i2delay_tenth_s@tenth_seconds:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x1
   555  000002                     	ds	1
   556  000003                     i2delay_tenth_s@i:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     ??_InterruptHandlerHigh:
   562                           
   563                           ; 0 bytes @ 0x4
   564  000005                     	ds	14
   565  000013                     ??_InterruptHandlerLow:
   566                           
   567                           ; 0 bytes @ 0x12
   568  000013                     	ds	17
   569  000024                     ??_isdigit:
   570  000024                     ??_LCDout:
   571  000024                     ??_delay_tenth_s:
   572  000024                     ?_grabRightIR:
   573                           	opt stack 0
   574  000024                     ?_grabLeftIR:
   575                           	opt stack 0
   576  000024                     ?___wmul:
   577                           	opt stack 0
   578  000024                     ?___lwdiv:
   579                           	opt stack 0
   580  000024                     enableSensor@status:
   581                           	opt stack 0
   582  000024                     VerifySignal@Signal:
   583                           	opt stack 0
   584  000024                     ___wmul@multiplier:
   585                           	opt stack 0
   586  000024                     ___lwdiv@dividend:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x23
   590  000024                     	ds	1
   591  000025                     enableSensor@sensor:
   592                           	opt stack 0
   593  000025                     delay_tenth_s@tenth_seconds:
   594                           	opt stack 0
   595  000025                     _isdigit$1986:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x24
   599  000025                     	ds	1
   600  000026                     ??_grabRightIR:
   601  000026                     ??_grabLeftIR:
   602  000026                     ??_VerifySignal:
   603  000026                     isdigit@c:
   604                           	opt stack 0
   605  000026                     delay_tenth_s@i:
   606                           	opt stack 0
   607  000026                     ___wmul@multiplicand:
   608                           	opt stack 0
   609  000026                     ___lwdiv@divisor:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x25
   613  000026                     	ds	1
   614  000027                     LCDout@number:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x26
   618  000027                     	ds	1
   619  000028                     SendLCD@type:
   620                           	opt stack 0
   621  000028                     ___wmul@product:
   622                           	opt stack 0
   623  000028                     ___lwdiv@quotient:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x27
   627  000028                     	ds	1
   628  000029                     SendLCD@Byte:
   629                           	opt stack 0
   630  000029                     grabRightIR@IR_signal:
   631                           	opt stack 0
   632  000029                     grabLeftIR@IR_signal:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x28
   636  000029                     	ds	1
   637  00002A                     ??_initLCD:
   638  00002A                     ?___awdiv:
   639                           	opt stack 0
   640  00002A                     SetLine@line:
   641                           	opt stack 0
   642  00002A                     VerifySignal@i:
   643                           	opt stack 0
   644  00002A                     ___lwdiv@counter:
   645                           	opt stack 0
   646  00002A                     LCD_String@string:
   647                           	opt stack 0
   648  00002A                     ___awdiv@dividend:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x29
   652  00002A                     	ds	1
   653  00002B                     ?___lwmod:
   654                           	opt stack 0
   655  00002B                     grabRightIR@i:
   656                           	opt stack 0
   657  00002B                     grabLeftIR@i:
   658                           	opt stack 0
   659  00002B                     VerifySignal@checksum:
   660                           	opt stack 0
   661  00002B                     ___lwmod@dividend:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x2A
   665  00002B                     	ds	1
   666  00002C                     VerifySignal@hexByte:
   667                           	opt stack 0
   668  00002C                     ___awdiv@divisor:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x2B
   672  00002C                     	ds	1
   673  00002D                     ___lwmod@divisor:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x2C
   677  00002D                     	ds	1
   678  00002E                     ___awdiv@counter:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x2D
   682  00002E                     	ds	1
   683  00002F                     ___awdiv@sign:
   684                           	opt stack 0
   685  00002F                     ___lwmod@counter:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x2E
   689  00002F                     	ds	1
   690  000030                     ?_sprintf:
   691                           	opt stack 0
   692  000030                     sprintf@sp:
   693                           	opt stack 0
   694  000030                     ___awdiv@quotient:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x2F
   698  000030                     	ds	2
   699  000032                     setMotorPWM@m:
   700                           	opt stack 0
   701  000032                     sprintf@f:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x31
   705  000032                     	ds	2
   706  000034                     ??_setMotorPWM:
   707                           
   708                           ; 0 bytes @ 0x33
   709  000034                     	ds	5
   710  000039                     ??_ScanIR:
   711                           
   712                           ; 0 bytes @ 0x38
   713  000039                     	ds	1
   714  00003A                     tblptru	equ	0xFF8
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           
   718                           ; 0 bytes @ 0x39
   719 ;;
   720 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   721 ;;
   722 ;; *************** function _main *****************
   723 ;; Defined at:
   724 ;;		line 51 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  MoveTime      100   90[BANK1 ] int [50]
   729 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   730 ;;  buf            40    0[BANK1 ] unsigned char [40]
   731 ;;  Message        10  190[BANK1 ] unsigned char [10]
   732 ;;  mR              9  217[BANK1 ] struct DC_motor
   733 ;;  mL              9  208[BANK1 ] struct DC_motor
   734 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   735 ;;  Move            1  207[BANK1 ] unsigned char 
   736 ;;  i               1  206[BANK1 ] unsigned char 
   737 ;;  DirectionFou    1  205[BANK1 ] char 
   738 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;		None               void
   741 ;; Registers used:
   742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   748 ;;      Params:         0       0       0       0
   749 ;;      Locals:         0       0     226       0
   750 ;;      Temps:          0       5       0       0
   751 ;;      Totals:         0       5     226       0
   752 ;;Total ram usage:      231 bytes
   753 ;; Hardware stack levels required when called:    8
   754 ;; This function calls:
   755 ;;		_LCD_String
   756 ;;		_ScanIR
   757 ;;		_ScanWithRange
   758 ;;		_SendLCD
   759 ;;		_SetLine
   760 ;;		_VerifySignal
   761 ;;		_delay_tenth_s
   762 ;;		_enableSensor
   763 ;;		_fullSpeedAhead
   764 ;;		_fullSpeedBack
   765 ;;		_grabLeftIR
   766 ;;		_grabRightIR
   767 ;;		_initIR
   768 ;;		_initLCD
   769 ;;		_initMotorPWM
   770 ;;		_initRFID
   771 ;;		_initTimer
   772 ;;		_sprintf
   773 ;;		_stop
   774 ;;		_turnLeft
   775 ;;		_turnRight
   776 ;; This function is called by:
   777 ;;		Startup code after reset
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text0
   782  000350                     __ptext0:
   783                           	opt stack 0
   784  000350                     _main:
   785                           	opt stack 23
   786                           
   787                           ;main.c: 54: unsigned char Message[10];
   788                           ;main.c: 55: unsigned char i=0;
   789                           
   790                           ;incstack = 0
   791  000350  0E00               	movlw	0
   792  000352  0101               	movlb	1	; () banked
   793  000354  6FCE               	movwf	main@i& (0+255),b
   794                           
   795                           ;main.c: 56: signed char DirectionFound=0;
   796  000356  0E00               	movlw	0
   797  000358  0101               	movlb	1	; () banked
   798  00035A  6FCD               	movwf	main@DirectionFound& (0+255),b
   799                           
   800                           ; BSR set to: 1
   801                           ;main.c: 57: int MoveTime[50] = { 0 };
   802  00035C  EE22  F000         	lfsr	2,main@F3893
   803  000360  EE11  F05A         	lfsr	1,main@MoveTime
   804  000364  0E63               	movlw	99
   805  000366                     u2731:
   806  000366  CFDB FFE3          	movff	plusw2,plusw1
   807  00036A  06E8               	decf	wreg,f,c
   808  00036C  E2FC               	bc	u2731
   809                           
   810                           ; BSR set to: 1
   811                           ;main.c: 60: char MoveType[50] = { 0 };
   812  00036E  EE20  F0BF         	lfsr	2,main@F3895
   813  000372  EE11  F028         	lfsr	1,main@MoveType
   814  000376  0E31               	movlw	49
   815  000378                     u2741:
   816  000378  CFDB FFE3          	movff	plusw2,plusw1
   817  00037C  06E8               	decf	wreg,f,c
   818  00037E  E2FC               	bc	u2741
   819                           
   820                           ;main.c: 63: char Move=0;
   821  000380  0E00               	movlw	0
   822  000382  0101               	movlb	1	; () banked
   823  000384  6FCF               	movwf	main@Move& (0+255),b
   824                           
   825                           ; BSR set to: 1
   826                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   827  000386  C1E2  F1C9         	movff	main@F3898,main@SensorResult
   828  00038A  C1E3  F1CA         	movff	main@F3898+1,main@SensorResult+1
   829  00038E  C1E4  F1CB         	movff	main@F3898+2,main@SensorResult+2
   830  000392  C1E5  F1CC         	movff	main@F3898+3,main@SensorResult+3
   831                           
   832                           ;main.c: 65: char buf[40];
   833                           ;main.c: 67: unsigned char ScanAngle=60;
   834  000396  0E3C               	movlw	60
   835  000398  0101               	movlb	1	; () banked
   836  00039A  6FC8               	movwf	main@ScanAngle& (0+255),b
   837                           
   838                           ; BSR set to: 1
   839                           ;main.c: 76: INTCONbits.GIEH=1;
   840  00039C  8EF2               	bsf	intcon,7,c	;volatile
   841                           
   842                           ; BSR set to: 1
   843                           ;main.c: 77: INTCONbits.GIEL=1;
   844  00039E  8CF2               	bsf	intcon,6,c	;volatile
   845                           
   846                           ; BSR set to: 1
   847                           ;main.c: 78: INTCONbits.PEIE=1;
   848  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   849                           
   850                           ; BSR set to: 1
   851                           ;main.c: 79: RCONbits.IPEN=1;
   852  0003A2  8ED0               	bsf	4048,7,c	;volatile
   853                           
   854                           ; BSR set to: 1
   855                           ;main.c: 82: IPR1bits.RCIP=0;
   856  0003A4  9A9F               	bcf	3999,5,c	;volatile
   857                           
   858                           ; BSR set to: 1
   859                           ;main.c: 83: PIE1bits.RCIE=1;
   860  0003A6  8A9D               	bsf	3997,5,c	;volatile
   861                           
   862                           ; BSR set to: 1
   863                           ;main.c: 86: TRISCbits.RC3=1;
   864  0003A8  8694               	bsf	3988,3,c	;volatile
   865                           
   866                           ; BSR set to: 1
   867                           ;main.c: 87: INTCONbits.INT0IE=1;
   868  0003AA  88F2               	bsf	intcon,4,c	;volatile
   869                           
   870                           ; BSR set to: 1
   871                           ;main.c: 90: PIR1bits.RC1IF=0;
   872  0003AC  9A9E               	bcf	3998,5,c	;volatile
   873                           
   874                           ; BSR set to: 1
   875                           ;main.c: 91: INTCONbits.INT0IF=0;
   876  0003AE  92F2               	bcf	intcon,1,c	;volatile
   877                           
   878                           ;main.c: 94: struct DC_motor mL, mR;
   879                           ;main.c: 95: mL.power=0;
   880  0003B0  0E00               	movlw	0
   881  0003B2  0101               	movlb	1	; () banked
   882  0003B4  6FD0               	movwf	main@mL& (0+255),b
   883                           
   884                           ;main.c: 96: mL.direction=1;
   885  0003B6  0E01               	movlw	1
   886  0003B8  0101               	movlb	1	; () banked
   887  0003BA  6FD1               	movwf	(main@mL+1)& (0+255),b
   888                           
   889                           ; BSR set to: 1
   890                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   891  0003BC  0E79               	movlw	121
   892  0003BE  0101               	movlb	1	; () banked
   893  0003C0  6FD2               	movwf	(main@mL+2)& (0+255),b
   894  0003C2  0E0F               	movlw	15
   895  0003C4  0101               	movlb	1	; () banked
   896  0003C6  6FD3               	movwf	(main@mL+3)& (0+255),b
   897                           
   898                           ; BSR set to: 1
   899                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   900  0003C8  0E78               	movlw	120
   901  0003CA  0101               	movlb	1	; () banked
   902  0003CC  6FD4               	movwf	(main@mL+4)& (0+255),b
   903  0003CE  0E0F               	movlw	15
   904  0003D0  0101               	movlb	1	; () banked
   905  0003D2  6FD5               	movwf	(main@mL+5)& (0+255),b
   906                           
   907                           ;main.c: 99: mL.dir_pin=0;
   908  0003D4  0E00               	movlw	0
   909  0003D6  0101               	movlb	1	; () banked
   910  0003D8  6FD6               	movwf	(main@mL+6)& (0+255),b
   911                           
   912                           ;main.c: 100: mL.PWMperiod=199;
   913  0003DA  0E00               	movlw	0
   914  0003DC  0101               	movlb	1	; () banked
   915  0003DE  6FD8               	movwf	(main@mL+8)& (0+255),b
   916  0003E0  0EC7               	movlw	199
   917  0003E2  6FD7               	movwf	(main@mL+7)& (0+255),b
   918                           
   919                           ;main.c: 102: mR.power=0;
   920  0003E4  0E00               	movlw	0
   921  0003E6  0101               	movlb	1	; () banked
   922  0003E8  6FD9               	movwf	main@mR& (0+255),b
   923                           
   924                           ;main.c: 103: mR.direction=1;
   925  0003EA  0E01               	movlw	1
   926  0003EC  0101               	movlb	1	; () banked
   927  0003EE  6FDA               	movwf	(main@mR+1)& (0+255),b
   928                           
   929                           ; BSR set to: 1
   930                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   931  0003F0  0E77               	movlw	119
   932  0003F2  0101               	movlb	1	; () banked
   933  0003F4  6FDB               	movwf	(main@mR+2)& (0+255),b
   934  0003F6  0E0F               	movlw	15
   935  0003F8  0101               	movlb	1	; () banked
   936  0003FA  6FDC               	movwf	(main@mR+3)& (0+255),b
   937                           
   938                           ; BSR set to: 1
   939                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   940  0003FC  0E76               	movlw	118
   941  0003FE  0101               	movlb	1	; () banked
   942  000400  6FDD               	movwf	(main@mR+4)& (0+255),b
   943  000402  0E0F               	movlw	15
   944  000404  0101               	movlb	1	; () banked
   945  000406  6FDE               	movwf	(main@mR+5)& (0+255),b
   946                           
   947                           ;main.c: 106: mR.dir_pin=2;
   948  000408  0E02               	movlw	2
   949  00040A  0101               	movlb	1	; () banked
   950  00040C  6FDF               	movwf	(main@mR+6)& (0+255),b
   951                           
   952                           ;main.c: 107: mR.PWMperiod=199;
   953  00040E  0E00               	movlw	0
   954  000410  0101               	movlb	1	; () banked
   955  000412  6FE1               	movwf	(main@mR+8)& (0+255),b
   956  000414  0EC7               	movlw	199
   957  000416  6FE0               	movwf	(main@mR+7)& (0+255),b
   958                           
   959                           ;main.c: 109: OSCCON = 0x72;
   960  000418  0E72               	movlw	114
   961  00041A  6ED3               	movwf	4051,c	;volatile
   962  00041C                     l390:
   963  00041C  B4D3               	btfsc	4051,2,c	;volatile
   964  00041E  D358               	goto	l3536
   965  000420  D7FD               	goto	l390
   966  000422                     l3348:
   967                           
   968                           ;main.c: 122: stop(&mL, &mR);
   969  000422  0ED0               	movlw	low main@mL
   970  000424  0100               	movlb	0	; () banked
   971  000426  6F62               	movwf	stop@mL& (0+255),b
   972  000428  0E01               	movlw	high main@mL
   973  00042A  0100               	movlb	0	; () banked
   974  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   975  00042E  0ED9               	movlw	low main@mR
   976  000430  0100               	movlb	0	; () banked
   977  000432  6F64               	movwf	stop@mR& (0+255),b
   978  000434  0E01               	movlw	high main@mR
   979  000436  0100               	movlb	0	; () banked
   980  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   981  00043A  EC5C  F00B         	call	_stop	;wreg free
   982                           
   983                           ;main.c: 123: RFID_Read=0;
   984  00043E  0E00               	movlw	0
   985  000440  0101               	movlb	1	; () banked
   986  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   987                           
   988                           ; BSR set to: 1
   989                           ;main.c: 126: SensorResult[0]=grabLeftIR();
   990  000444  ECA6  F00C         	call	_grabLeftIR	;wreg free
   991  000448  C024  F1C9         	movff	?_grabLeftIR,main@SensorResult
   992  00044C  C025  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
   993                           
   994                           ;main.c: 127: SensorResult[1]=grabRightIR();
   995  000450  EC6D  F00C         	call	_grabRightIR	;wreg free
   996  000454  C024  F1CB         	movff	?_grabRightIR,main@SensorResult+2
   997  000458  C025  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
   998                           
   999                           ;main.c: 131: CAP1BUFH=0;
  1000  00045C  0E00               	movlw	0
  1001  00045E  6E69               	movwf	3945,c	;volatile
  1002                           
  1003                           ;main.c: 132: CAP1BUFL=0;
  1004  000460  0E00               	movlw	0
  1005  000462  6E68               	movwf	3944,c	;volatile
  1006                           
  1007                           ;main.c: 133: CAP2BUFH=0;
  1008  000464  0E00               	movlw	0
  1009  000466  6E67               	movwf	3943,c	;volatile
  1010                           
  1011                           ;main.c: 134: CAP2BUFL=0;
  1012  000468  0E00               	movlw	0
  1013  00046A  6E66               	movwf	3942,c	;volatile
  1014                           
  1015                           ;main.c: 137: SendLCD(0b00000001,0);
  1016  00046C  0E00               	movlw	0
  1017  00046E  6E28               	movwf	SendLCD@type,c
  1018  000470  0E01               	movlw	1
  1019  000472  EC65  F00E         	call	_SendLCD
  1020                           
  1021                           ;main.c: 138: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1022  000476  0E21               	movlw	33
  1023  000478                     u2977:
  1024  000478  2EE8               	decfsz	wreg,f,c
  1025  00047A  D7FE               	goto	u2977
  1026  00047C  F000               	nop	
  1027                           
  1028                           ;main.c: 139: SendLCD(0b00000010,0);
  1029  00047E  0E00               	movlw	0
  1030  000480  6E28               	movwf	SendLCD@type,c
  1031  000482  0E02               	movlw	2
  1032  000484  EC65  F00E         	call	_SendLCD
  1033                           
  1034                           ;main.c: 140: _delay((unsigned long)((2)*(8000000/4000.0)));
  1035  000488  0E06               	movlw	6
  1036  00048A  0100               	movlb	0	; () banked
  1037  00048C  6FBA               	movwf	??_main& (0+255),b
  1038  00048E  0E30               	movlw	48
  1039  000490                     u2987:
  1040  000490  2EE8               	decfsz	wreg,f,c
  1041  000492  D7FE               	goto	u2987
  1042  000494  2FBA               	decfsz	??_main& (0+255),f,b
  1043  000496  D7FC               	goto	u2987
  1044  000498  D000               	nop2	
  1045                           
  1046                           ;main.c: 141: SetLine(1);
  1047  00049A  0E01               	movlw	1
  1048  00049C  EC4D  F00E         	call	_SetLine
  1049                           
  1050                           ;main.c: 142: LCD_String("      Inert Mode");
  1051  0004A0  0E1C               	movlw	low STR_5
  1052  0004A2  6E2A               	movwf	LCD_String@string,c
  1053  0004A4  0E03               	movlw	high STR_5
  1054  0004A6  6E2B               	movwf	LCD_String@string+1,c
  1055  0004A8  ECDF  F00C         	call	_LCD_String	;wreg free
  1056                           
  1057                           ;main.c: 143: SetLine(2);
  1058  0004AC  0E02               	movlw	2
  1059  0004AE  EC4D  F00E         	call	_SetLine
  1060                           
  1061                           ;main.c: 144: if (RFID_Read) {
  1062  0004B2  0101               	movlb	1	; () banked
  1063  0004B4  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1064  0004B6  B4D8               	btfsc	status,2,c
  1065  0004B8  D007               	goto	l3382
  1066                           
  1067                           ; BSR set to: 1
  1068                           ;main.c: 145: LCD_String(Message);
  1069  0004BA  0EBE               	movlw	low main@Message
  1070  0004BC  6E2A               	movwf	LCD_String@string,c
  1071  0004BE  0E01               	movlw	high main@Message
  1072  0004C0  6E2B               	movwf	LCD_String@string+1,c
  1073  0004C2  ECDF  F00C         	call	_LCD_String	;wreg free
  1074                           
  1075                           ;main.c: 146: } else {
  1076  0004C6  D304               	goto	l3536
  1077  0004C8                     l3382:
  1078                           
  1079                           ;main.c: 147: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1080  0004C8  0E00               	movlw	low main@buf
  1081  0004CA  6E30               	movwf	sprintf@sp,c
  1082  0004CC  0E01               	movlw	high main@buf
  1083  0004CE  6E31               	movwf	sprintf@sp+1,c
  1084  0004D0  0E0B               	movlw	low STR_6
  1085  0004D2  6E32               	movwf	sprintf@f,c
  1086  0004D4  0E03               	movlw	high STR_6
  1087  0004D6  6E33               	movwf	sprintf@f+1,c
  1088  0004D8  C1C9  F034         	movff	main@SensorResult,?_sprintf+4
  1089  0004DC  C1CA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1090  0004E0  C1CB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1091  0004E4  C1CC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1092  0004E8  ECFE  F007         	call	_sprintf	;wreg free
  1093                           
  1094                           ;main.c: 148: LCD_String(buf);
  1095  0004EC  0E00               	movlw	low main@buf
  1096  0004EE  6E2A               	movwf	LCD_String@string,c
  1097  0004F0  0E01               	movlw	high main@buf
  1098  0004F2  6E2B               	movwf	LCD_String@string+1,c
  1099  0004F4  ECDF  F00C         	call	_LCD_String	;wreg free
  1100                           
  1101                           ;main.c: 149: }
  1102                           ;main.c: 152: break;
  1103  0004F8  D2EB               	goto	l3536
  1104  0004FA                     l3386:
  1105                           
  1106                           ;main.c: 157: initMotorPWM();
  1107  0004FA  EC34  F00E         	call	_initMotorPWM	;wreg free
  1108                           
  1109                           ;main.c: 158: initTimer();
  1110  0004FE  ECD1  F00E         	call	_initTimer	;wreg free
  1111                           
  1112                           ;main.c: 159: initRFID();
  1113  000502  ECC3  F00E         	call	_initRFID	;wreg free
  1114                           
  1115                           ;main.c: 160: initLCD();
  1116  000506  ECFE  F00A         	call	_initLCD	;wreg free
  1117                           
  1118                           ;main.c: 161: initIR();
  1119  00050A  ECA3  F00E         	call	_initIR	;wreg free
  1120                           
  1121                           ;main.c: 163: enableSensor(0, 1);
  1122  00050E  0E01               	movlw	1
  1123  000510  6E24               	movwf	enableSensor@status,c
  1124  000512  0E00               	movlw	0
  1125  000514  EC7D  F00E         	call	_enableSensor
  1126                           
  1127                           ;main.c: 164: enableSensor(1, 1);
  1128  000518  0E01               	movlw	1
  1129  00051A  6E24               	movwf	enableSensor@status,c
  1130  00051C  0E01               	movlw	1
  1131  00051E  EC7D  F00E         	call	_enableSensor
  1132                           
  1133                           ;main.c: 167: fullSpeedAhead(&mL, &mR, 100);
  1134  000522  0ED0               	movlw	low main@mL
  1135  000524  0100               	movlb	0	; () banked
  1136  000526  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1137  000528  0E01               	movlw	high main@mL
  1138  00052A  0100               	movlb	0	; () banked
  1139  00052C  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1140  00052E  0ED9               	movlw	low main@mR
  1141  000530  0100               	movlb	0	; () banked
  1142  000532  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1143  000534  0E01               	movlw	high main@mR
  1144  000536  0100               	movlb	0	; () banked
  1145  000538  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1146  00053A  0E64               	movlw	100
  1147  00053C  0100               	movlb	0	; () banked
  1148  00053E  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1149  000540  EC2D  F00C         	call	_fullSpeedAhead	;wreg free
  1150                           
  1151                           ;main.c: 168: delay_tenth_s(1);
  1152  000544  0E01               	movlw	1
  1153  000546  ECE1  F00D         	call	_delay_tenth_s
  1154  00054A  D2C1               	goto	l420
  1155  00054C                     l3406:
  1156                           
  1157                           ;main.c: 180: SetLine(1);
  1158  00054C  0E01               	movlw	1
  1159  00054E  EC4D  F00E         	call	_SetLine
  1160                           
  1161                           ;main.c: 181: LCD_String("Searching");
  1162  000552  0E44               	movlw	low STR_7
  1163  000554  6E2A               	movwf	LCD_String@string,c
  1164  000556  0E03               	movlw	high STR_7
  1165  000558  6E2B               	movwf	LCD_String@string+1,c
  1166  00055A  ECDF  F00C         	call	_LCD_String	;wreg free
  1167                           
  1168                           ;main.c: 183: if (DirectionFound==-1) {
  1169  00055E  0101               	movlb	1	; () banked
  1170  000560  29CD               	incf	main@DirectionFound& (0+255),w,b
  1171  000562  A4D8               	btfss	status,2,c
  1172  000564  D03E               	goto	l3424
  1173                           
  1174                           ; BSR set to: 1
  1175                           ;main.c: 188: MoveType[Move]=0;
  1176  000566  0101               	movlb	1	; () banked
  1177  000568  51CF               	movf	main@Move& (0+255),w,b
  1178  00056A  0D01               	mullw	1
  1179  00056C  0E28               	movlw	low main@MoveType
  1180  00056E  24F3               	addwf	prodl,w,c
  1181  000570  6ED9               	movwf	fsr2l,c
  1182  000572  0E01               	movlw	high main@MoveType
  1183  000574  20F4               	addwfc	prodh,w,c
  1184  000576  6EDA               	movwf	fsr2h,c
  1185  000578  0E00               	movlw	0
  1186  00057A  6EDF               	movwf	indf2,c
  1187                           
  1188                           ;main.c: 189: MoveTime[Move]=6;
  1189  00057C  0101               	movlb	1	; () banked
  1190  00057E  51CF               	movf	main@Move& (0+255),w,b
  1191  000580  0D02               	mullw	2
  1192  000582  0E5A               	movlw	low main@MoveTime
  1193  000584  24F3               	addwf	prodl,w,c
  1194  000586  6ED9               	movwf	fsr2l,c
  1195  000588  0E01               	movlw	high main@MoveTime
  1196  00058A  20F4               	addwfc	prodh,w,c
  1197  00058C  6EDA               	movwf	fsr2h,c
  1198  00058E  0E06               	movlw	6
  1199  000590  6EDE               	movwf	postinc2,c
  1200  000592  0E00               	movlw	0
  1201  000594  6EDD               	movwf	postdec2,c
  1202                           
  1203                           ; BSR set to: 1
  1204                           ;main.c: 190: Move++;
  1205  000596  0101               	movlb	1	; () banked
  1206  000598  2BCF               	incf	main@Move& (0+255),f,b
  1207                           
  1208                           ; BSR set to: 1
  1209                           ;main.c: 191: fullSpeedAhead(&mL, &mR, 100);
  1210  00059A  0ED0               	movlw	low main@mL
  1211  00059C  0100               	movlb	0	; () banked
  1212  00059E  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1213  0005A0  0E01               	movlw	high main@mL
  1214  0005A2  0100               	movlb	0	; () banked
  1215  0005A4  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1216  0005A6  0ED9               	movlw	low main@mR
  1217  0005A8  0100               	movlb	0	; () banked
  1218  0005AA  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1219  0005AC  0E01               	movlw	high main@mR
  1220  0005AE  0100               	movlb	0	; () banked
  1221  0005B0  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1222  0005B2  0E64               	movlw	100
  1223  0005B4  0100               	movlb	0	; () banked
  1224  0005B6  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1225  0005B8  EC2D  F00C         	call	_fullSpeedAhead	;wreg free
  1226                           
  1227                           ;main.c: 192: delay_tenth_s(6);
  1228  0005BC  0E06               	movlw	6
  1229  0005BE  ECE1  F00D         	call	_delay_tenth_s
  1230                           
  1231                           ;main.c: 193: stop(&mL,&mR);
  1232  0005C2  0ED0               	movlw	low main@mL
  1233  0005C4  0100               	movlb	0	; () banked
  1234  0005C6  6F62               	movwf	stop@mL& (0+255),b
  1235  0005C8  0E01               	movlw	high main@mL
  1236  0005CA  0100               	movlb	0	; () banked
  1237  0005CC  6F63               	movwf	(stop@mL+1)& (0+255),b
  1238  0005CE  0ED9               	movlw	low main@mR
  1239  0005D0  0100               	movlb	0	; () banked
  1240  0005D2  6F64               	movwf	stop@mR& (0+255),b
  1241  0005D4  0E01               	movlw	high main@mR
  1242  0005D6  0100               	movlb	0	; () banked
  1243  0005D8  6F65               	movwf	(stop@mR+1)& (0+255),b
  1244  0005DA  EC5C  F00B         	call	_stop	;wreg free
  1245                           
  1246                           ;main.c: 194: DirectionFound=0;
  1247  0005DE  0E00               	movlw	0
  1248  0005E0  D042               	goto	L2
  1249  0005E2                     l3424:
  1250                           
  1251                           ; BSR set to: 1
  1252  0005E2  0101               	movlb	1	; () banked
  1253  0005E4  51CD               	movf	main@DirectionFound& (0+255),w,b
  1254  0005E6  0101               	movlb	1	; () banked
  1255  0005E8  A4D8               	btfss	status,2,c
  1256  0005EA  D02B               	goto	l3428
  1257                           
  1258                           ; BSR set to: 1
  1259                           ;main.c: 197: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1260                           ;main.c: 198: &MoveTime, &Move, &MoveType, &RFID_Read);
  1261  0005EC  0ED0               	movlw	low main@mL
  1262  0005EE  0100               	movlb	0	; () banked
  1263  0005F0  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1264  0005F2  0E01               	movlw	high main@mL
  1265  0005F4  0100               	movlb	0	; () banked
  1266  0005F6  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1267  0005F8  0ED9               	movlw	low main@mR
  1268  0005FA  0100               	movlb	0	; () banked
  1269  0005FC  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1270  0005FE  0E01               	movlw	high main@mR
  1271  000600  0100               	movlb	0	; () banked
  1272  000602  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1273  000604  C1C8  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1274  000608  0100               	movlb	0	; () banked
  1275  00060A  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1276  00060C  0E5A               	movlw	low main@MoveTime
  1277  00060E  0100               	movlb	0	; () banked
  1278  000610  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1279  000612  0E01               	movlw	high main@MoveTime
  1280  000614  0100               	movlb	0	; () banked
  1281  000616  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1282  000618  0ECF               	movlw	low main@Move
  1283  00061A  0100               	movlb	0	; () banked
  1284  00061C  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1285  00061E  0E01               	movlw	high main@Move
  1286  000620  0100               	movlb	0	; () banked
  1287  000622  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1288  000624  0E28               	movlw	low main@MoveType
  1289  000626  0100               	movlb	0	; () banked
  1290  000628  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1291  00062A  0E01               	movlw	high main@MoveType
  1292  00062C  0100               	movlb	0	; () banked
  1293  00062E  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1294  000630  0EF6               	movlw	low _RFID_Read
  1295  000632  0100               	movlb	0	; () banked
  1296  000634  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1297  000636  0E01               	movlw	high _RFID_Read
  1298  000638  0100               	movlb	0	; () banked
  1299  00063A  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1300  00063C  EC79  F005         	call	_ScanWithRange	;wreg free
  1301  000640  D012               	goto	L2
  1302  000642                     l3428:
  1303                           
  1304                           ; BSR set to: 1
  1305  000642  0101               	movlb	1	; () banked
  1306  000644  05CD               	decf	main@DirectionFound& (0+255),w,b
  1307  000646  A4D8               	btfss	status,2,c
  1308  000648  D011               	goto	l3432
  1309                           
  1310                           ; BSR set to: 1
  1311                           ;main.c: 201: DirectionFound=ScanIR(&mL, &mR);
  1312  00064A  0ED0               	movlw	low main@mL
  1313  00064C  0100               	movlb	0	; () banked
  1314  00064E  6F6D               	movwf	ScanIR@mL& (0+255),b
  1315  000650  0E01               	movlw	high main@mL
  1316  000652  0100               	movlb	0	; () banked
  1317  000654  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1318  000656  0ED9               	movlw	low main@mR
  1319  000658  0100               	movlb	0	; () banked
  1320  00065A  6F6F               	movwf	ScanIR@mR& (0+255),b
  1321  00065C  0E01               	movlw	high main@mR
  1322  00065E  0100               	movlb	0	; () banked
  1323  000660  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1324  000662  EC1E  F00A         	call	_ScanIR	;wreg free
  1325  000666                     L2:
  1326  000666  0101               	movlb	1	; () banked
  1327  000668  6FCD               	movwf	main@DirectionFound& (0+255),b
  1328                           
  1329                           ;main.c: 202: } else if (DirectionFound==2) {
  1330  00066A  D232               	goto	l3536
  1331  00066C                     l3432:
  1332                           
  1333                           ; BSR set to: 1
  1334  00066C  0E02               	movlw	2
  1335  00066E  0101               	movlb	1	; () banked
  1336  000670  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1337  000672  A4D8               	btfss	status,2,c
  1338  000674  D22D               	goto	l3536
  1339                           
  1340                           ; BSR set to: 1
  1341                           ;main.c: 204: mode=2;
  1342  000676  0E02               	movlw	2
  1343  000678  6E3B               	movwf	_mode,c	;volatile
  1344                           
  1345                           ; BSR set to: 1
  1346                           ;main.c: 205: MoveType[Move]=1;
  1347  00067A  0101               	movlb	1	; () banked
  1348  00067C  51CF               	movf	main@Move& (0+255),w,b
  1349  00067E  0D01               	mullw	1
  1350  000680  0E28               	movlw	low main@MoveType
  1351  000682  24F3               	addwf	prodl,w,c
  1352  000684  6ED9               	movwf	fsr2l,c
  1353  000686  0E01               	movlw	high main@MoveType
  1354  000688  20F4               	addwfc	prodh,w,c
  1355  00068A  6EDA               	movwf	fsr2h,c
  1356  00068C  0E01               	movlw	1
  1357  00068E  6EDF               	movwf	indf2,c
  1358                           
  1359                           ; BSR set to: 1
  1360                           ;main.c: 206: }
  1361                           ;main.c: 208: break;
  1362                           
  1363                           ; BSR set to: 1
  1364                           
  1365                           ; BSR set to: 1
  1366                           
  1367                           ; BSR set to: 1
  1368  000690  D21F               	goto	l3536
  1369  000692                     l3438:
  1370                           
  1371                           ;main.c: 215: if (RFID_Read) {
  1372  000692  0101               	movlb	1	; () banked
  1373  000694  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1374  000696  B4D8               	btfsc	status,2,c
  1375  000698  D0A2               	goto	l3480
  1376                           
  1377                           ; BSR set to: 1
  1378                           ;main.c: 216: stop(&mL, &mR);
  1379  00069A  0ED0               	movlw	low main@mL
  1380  00069C  0100               	movlb	0	; () banked
  1381  00069E  6F62               	movwf	stop@mL& (0+255),b
  1382  0006A0  0E01               	movlw	high main@mL
  1383  0006A2  0100               	movlb	0	; () banked
  1384  0006A4  6F63               	movwf	(stop@mL+1)& (0+255),b
  1385  0006A6  0ED9               	movlw	low main@mR
  1386  0006A8  0100               	movlb	0	; () banked
  1387  0006AA  6F64               	movwf	stop@mR& (0+255),b
  1388  0006AC  0E01               	movlw	high main@mR
  1389  0006AE  0100               	movlb	0	; () banked
  1390  0006B0  6F65               	movwf	(stop@mR+1)& (0+255),b
  1391  0006B2  EC5C  F00B         	call	_stop	;wreg free
  1392                           
  1393                           ;main.c: 217: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1394  0006B6  0E03               	movlw	3
  1395  0006B8  0101               	movlb	1	; () banked
  1396  0006BA  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1397  0006BC  A4D8               	btfss	status,2,c
  1398  0006BE  D002               	goto	u2820
  1399  0006C0  0E01               	movlw	1
  1400  0006C2  D001               	goto	u2822
  1401  0006C4                     u2820:
  1402  0006C4  0E00               	movlw	0
  1403  0006C6                     u2822:
  1404  0006C6  0100               	movlb	0	; () banked
  1405  0006C8  6FBA               	movwf	??_main& (0+255),b
  1406  0006CA  0E02               	movlw	2
  1407  0006CC  0101               	movlb	1	; () banked
  1408  0006CE  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1409  0006D0  A4D8               	btfss	status,2,c
  1410  0006D2  D002               	goto	u2830
  1411  0006D4  0E01               	movlw	1
  1412  0006D6  D001               	goto	u2832
  1413  0006D8                     u2830:
  1414  0006D8  0E00               	movlw	0
  1415  0006DA                     u2832:
  1416  0006DA  0100               	movlb	0	; () banked
  1417  0006DC  15BA               	andwf	??_main& (0+255),w,b
  1418  0006DE  A0E8               	btfss	wreg,0,c
  1419  0006E0  D1F7               	goto	l3536
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;main.c: 218: if (VerifySignal(&ReceivedString)){
  1423  0006E2  0EE6               	movlw	low _ReceivedString
  1424  0006E4  6E24               	movwf	VerifySignal@Signal,c
  1425  0006E6  0E01               	movlw	high _ReceivedString
  1426  0006E8  6E25               	movwf	VerifySignal@Signal+1,c
  1427  0006EA  EC0E  F00D         	call	_VerifySignal	;wreg free
  1428  0006EE  0900               	iorlw	0
  1429  0006F0  B4D8               	btfsc	status,2,c
  1430  0006F2  D041               	goto	l3472
  1431                           
  1432                           ;main.c: 220: for (i=0; i<10; i++){
  1433  0006F4  0E00               	movlw	0
  1434  0006F6  0101               	movlb	1	; () banked
  1435  0006F8  6FCE               	movwf	main@i& (0+255),b
  1436  0006FA                     l3448:
  1437                           
  1438                           ; BSR set to: 1
  1439  0006FA  0E09               	movlw	9
  1440  0006FC  0101               	movlb	1	; () banked
  1441  0006FE  65CE               	cpfsgt	main@i& (0+255),b
  1442  000700  D001               	goto	l3452
  1443  000702  D020               	goto	l3458
  1444  000704                     l3452:
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main.c: 221: Message[i] = ReceivedString[i+1];
  1448  000704  0101               	movlb	1	; () banked
  1449  000706  51CE               	movf	main@i& (0+255),w,b
  1450  000708  0100               	movlb	0	; () banked
  1451  00070A  6FBA               	movwf	??_main& (0+255),b
  1452  00070C  6BBB               	clrf	(??_main+1)& (0+255),b
  1453  00070E  0E01               	movlw	1
  1454  000710  0100               	movlb	0	; () banked
  1455  000712  27BA               	addwf	??_main& (0+255),f,b
  1456  000714  0E00               	movlw	0
  1457  000716  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1458  000718  0EE6               	movlw	low _ReceivedString
  1459  00071A  0100               	movlb	0	; () banked
  1460  00071C  25BA               	addwf	??_main& (0+255),w,b
  1461  00071E  6ED9               	movwf	fsr2l,c
  1462  000720  0E01               	movlw	high _ReceivedString
  1463  000722  0100               	movlb	0	; () banked
  1464  000724  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1465  000726  6EDA               	movwf	fsr2h,c
  1466  000728  0101               	movlb	1	; () banked
  1467  00072A  51CE               	movf	main@i& (0+255),w,b
  1468  00072C  0D01               	mullw	1
  1469  00072E  0EBE               	movlw	low main@Message
  1470  000730  24F3               	addwf	prodl,w,c
  1471  000732  6EE1               	movwf	fsr1l,c
  1472  000734  0E01               	movlw	high main@Message
  1473  000736  20F4               	addwfc	prodh,w,c
  1474  000738  6EE2               	movwf	fsr1h,c
  1475  00073A  CFDF FFE7          	movff	indf2,indf1
  1476                           
  1477                           ; BSR set to: 1
  1478  00073E  0101               	movlb	1	; () banked
  1479  000740  2BCE               	incf	main@i& (0+255),f,b
  1480  000742  D7DB               	goto	l3448
  1481  000744                     l3458:
  1482                           
  1483                           ; BSR set to: 1
  1484                           ;main.c: 222: }
  1485                           ;main.c: 225: for (i=0; i<16; i++) {
  1486  000744  0E00               	movlw	0
  1487  000746  0101               	movlb	1	; () banked
  1488  000748  6FCE               	movwf	main@i& (0+255),b
  1489  00074A                     l3460:
  1490                           
  1491                           ; BSR set to: 1
  1492  00074A  0E0F               	movlw	15
  1493  00074C  0101               	movlb	1	; () banked
  1494  00074E  65CE               	cpfsgt	main@i& (0+255),b
  1495  000750  D001               	goto	l3464
  1496  000752  D00E               	goto	l3470
  1497  000754                     l3464:
  1498                           
  1499                           ; BSR set to: 1
  1500                           ;main.c: 226: ReceivedString[i]=0;
  1501  000754  0101               	movlb	1	; () banked
  1502  000756  51CE               	movf	main@i& (0+255),w,b
  1503  000758  0D01               	mullw	1
  1504  00075A  0EE6               	movlw	low _ReceivedString
  1505  00075C  24F3               	addwf	prodl,w,c
  1506  00075E  6ED9               	movwf	fsr2l,c
  1507  000760  0E01               	movlw	high _ReceivedString
  1508  000762  20F4               	addwfc	prodh,w,c
  1509  000764  6EDA               	movwf	fsr2h,c
  1510  000766  0E00               	movlw	0
  1511  000768  6EDF               	movwf	indf2,c
  1512                           
  1513                           ; BSR set to: 1
  1514  00076A  0101               	movlb	1	; () banked
  1515  00076C  2BCE               	incf	main@i& (0+255),f,b
  1516  00076E  D7ED               	goto	l3460
  1517  000770                     l3470:
  1518                           
  1519                           ; BSR set to: 1
  1520                           ;main.c: 227: }
  1521                           ;main.c: 228: mode=3;
  1522  000770  0E03               	movlw	3
  1523  000772  6E3B               	movwf	_mode,c	;volatile
  1524                           
  1525                           ;main.c: 230: } else {
  1526  000774  D1AD               	goto	l3536
  1527  000776                     l3472:
  1528                           
  1529                           ;main.c: 231: fullSpeedBack(&mL,&mR, 100);
  1530  000776  0ED0               	movlw	low main@mL
  1531  000778  0100               	movlb	0	; () banked
  1532  00077A  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1533  00077C  0E01               	movlw	high main@mL
  1534  00077E  0100               	movlb	0	; () banked
  1535  000780  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1536  000782  0ED9               	movlw	low main@mR
  1537  000784  0100               	movlb	0	; () banked
  1538  000786  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1539  000788  0E01               	movlw	high main@mR
  1540  00078A  0100               	movlb	0	; () banked
  1541  00078C  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1542  00078E  0E64               	movlw	100
  1543  000790  0100               	movlb	0	; () banked
  1544  000792  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1545  000794  EC84  F00D         	call	_fullSpeedBack	;wreg free
  1546                           
  1547                           ;main.c: 232: delay_tenth_s(5);
  1548  000798  0E05               	movlw	5
  1549  00079A  ECE1  F00D         	call	_delay_tenth_s
  1550                           
  1551                           ;main.c: 233: stop(&mL,&mR);
  1552  00079E  0ED0               	movlw	low main@mL
  1553  0007A0  0100               	movlb	0	; () banked
  1554  0007A2  6F62               	movwf	stop@mL& (0+255),b
  1555  0007A4  0E01               	movlw	high main@mL
  1556  0007A6  0100               	movlb	0	; () banked
  1557  0007A8  6F63               	movwf	(stop@mL+1)& (0+255),b
  1558  0007AA  0ED9               	movlw	low main@mR
  1559  0007AC  0100               	movlb	0	; () banked
  1560  0007AE  6F64               	movwf	stop@mR& (0+255),b
  1561  0007B0  0E01               	movlw	high main@mR
  1562  0007B2  0100               	movlb	0	; () banked
  1563  0007B4  6F65               	movwf	(stop@mR+1)& (0+255),b
  1564  0007B6  EC5C  F00B         	call	_stop	;wreg free
  1565                           
  1566                           ;main.c: 234: fullSpeedAhead(&mL,&mR, 100);
  1567  0007BA  0ED0               	movlw	low main@mL
  1568  0007BC  0100               	movlb	0	; () banked
  1569  0007BE  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1570  0007C0  0E01               	movlw	high main@mL
  1571  0007C2  0100               	movlb	0	; () banked
  1572  0007C4  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1573  0007C6  0ED9               	movlw	low main@mR
  1574  0007C8  0100               	movlb	0	; () banked
  1575  0007CA  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1576  0007CC  0E01               	movlw	high main@mR
  1577  0007CE  0100               	movlb	0	; () banked
  1578  0007D0  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1579  0007D2  0E64               	movlw	100
  1580  0007D4  0100               	movlb	0	; () banked
  1581  0007D6  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1582  0007D8  EC2D  F00C         	call	_fullSpeedAhead	;wreg free
  1583                           
  1584                           ;main.c: 235: }
  1585                           ;main.c: 236: }
  1586                           ;main.c: 237: } else {
  1587  0007DC  D179               	goto	l3536
  1588  0007DE                     l3480:
  1589                           
  1590                           ;main.c: 238: DirectionFound=1;
  1591  0007DE  0E01               	movlw	1
  1592  0007E0  0101               	movlb	1	; () banked
  1593  0007E2  6FCD               	movwf	main@DirectionFound& (0+255),b
  1594                           
  1595                           ;main.c: 239: mode=1;
  1596  0007E4  0E01               	movlw	1
  1597  0007E6  6E3B               	movwf	_mode,c	;volatile
  1598                           
  1599                           ; BSR set to: 1
  1600                           ;main.c: 241: fullSpeedAhead(&mL,&mR, 100);
  1601  0007E8  0ED0               	movlw	low main@mL
  1602  0007EA  0100               	movlb	0	; () banked
  1603  0007EC  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1604  0007EE  0E01               	movlw	high main@mL
  1605  0007F0  0100               	movlb	0	; () banked
  1606  0007F2  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1607  0007F4  0ED9               	movlw	low main@mR
  1608  0007F6  0100               	movlb	0	; () banked
  1609  0007F8  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1610  0007FA  0E01               	movlw	high main@mR
  1611  0007FC  0100               	movlb	0	; () banked
  1612  0007FE  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1613  000800  0E64               	movlw	100
  1614  000802  0100               	movlb	0	; () banked
  1615  000804  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1616  000806  EC2D  F00C         	call	_fullSpeedAhead	;wreg free
  1617                           
  1618                           ;main.c: 242: delay_tenth_s(5);
  1619  00080A  0E05               	movlw	5
  1620  00080C  ECE1  F00D         	call	_delay_tenth_s
  1621                           
  1622                           ;main.c: 243: MoveType[Move] = 0;
  1623  000810  0101               	movlb	1	; () banked
  1624  000812  51CF               	movf	main@Move& (0+255),w,b
  1625  000814  0D01               	mullw	1
  1626  000816  0E28               	movlw	low main@MoveType
  1627  000818  24F3               	addwf	prodl,w,c
  1628  00081A  6ED9               	movwf	fsr2l,c
  1629  00081C  0E01               	movlw	high main@MoveType
  1630  00081E  20F4               	addwfc	prodh,w,c
  1631  000820  6EDA               	movwf	fsr2h,c
  1632  000822  0E00               	movlw	0
  1633  000824  6EDF               	movwf	indf2,c
  1634                           
  1635                           ; BSR set to: 1
  1636                           ;main.c: 244: MoveTime[Move] = 5;
  1637  000826  0101               	movlb	1	; () banked
  1638  000828  51CF               	movf	main@Move& (0+255),w,b
  1639  00082A  0D02               	mullw	2
  1640  00082C  0E5A               	movlw	low main@MoveTime
  1641  00082E  24F3               	addwf	prodl,w,c
  1642  000830  6ED9               	movwf	fsr2l,c
  1643  000832  0E01               	movlw	high main@MoveTime
  1644  000834  20F4               	addwfc	prodh,w,c
  1645  000836  6EDA               	movwf	fsr2h,c
  1646  000838  0E05               	movlw	5
  1647  00083A  6EDE               	movwf	postinc2,c
  1648  00083C  0E00               	movlw	0
  1649  00083E  6EDD               	movwf	postdec2,c
  1650                           
  1651                           ; BSR set to: 1
  1652                           ;main.c: 245: Move++;
  1653  000840  0101               	movlb	1	; () banked
  1654  000842  2BCF               	incf	main@Move& (0+255),f,b
  1655                           
  1656                           ; BSR set to: 1
  1657                           ;main.c: 246: }
  1658                           ;main.c: 248: break;
  1659  000844  D145               	goto	l3536
  1660  000846                     l3492:
  1661                           
  1662                           ;main.c: 253: SetLine(1);
  1663  000846  0E01               	movlw	1
  1664  000848  EC4D  F00E         	call	_SetLine
  1665                           
  1666                           ;main.c: 254: LCD_String(Message);
  1667  00084C  0EBE               	movlw	low main@Message
  1668  00084E  6E2A               	movwf	LCD_String@string,c
  1669  000850  0E01               	movlw	high main@Message
  1670  000852  6E2B               	movwf	LCD_String@string+1,c
  1671  000854  ECDF  F00C         	call	_LCD_String	;wreg free
  1672                           
  1673                           ;main.c: 255: SetLine(2);
  1674  000858  0E02               	movlw	2
  1675  00085A  EC4D  F00E         	call	_SetLine
  1676                           
  1677                           ;main.c: 256: LCD_String("Going Home");
  1678  00085E  0E39               	movlw	low STR_8
  1679  000860  6E2A               	movwf	LCD_String@string,c
  1680  000862  0E03               	movlw	high STR_8
  1681  000864  6E2B               	movwf	LCD_String@string+1,c
  1682  000866  ECDF  F00C         	call	_LCD_String	;wreg free
  1683  00086A                     l3500:
  1684                           
  1685                           ;main.c: 259: stop(&mL,&mR);
  1686  00086A  0ED0               	movlw	low main@mL
  1687  00086C  0100               	movlb	0	; () banked
  1688  00086E  6F62               	movwf	stop@mL& (0+255),b
  1689  000870  0E01               	movlw	high main@mL
  1690  000872  0100               	movlb	0	; () banked
  1691  000874  6F63               	movwf	(stop@mL+1)& (0+255),b
  1692  000876  0ED9               	movlw	low main@mR
  1693  000878  0100               	movlb	0	; () banked
  1694  00087A  6F64               	movwf	stop@mR& (0+255),b
  1695  00087C  0E01               	movlw	high main@mR
  1696  00087E  0100               	movlb	0	; () banked
  1697  000880  6F65               	movwf	(stop@mR+1)& (0+255),b
  1698  000882  EC5C  F00B         	call	_stop	;wreg free
  1699                           
  1700                           ;main.c: 260: if (MoveType[Move]==0) {
  1701  000886  0101               	movlb	1	; () banked
  1702  000888  51CF               	movf	main@Move& (0+255),w,b
  1703  00088A  0D01               	mullw	1
  1704  00088C  0E28               	movlw	low main@MoveType
  1705  00088E  24F3               	addwf	prodl,w,c
  1706  000890  6ED9               	movwf	fsr2l,c
  1707  000892  0E01               	movlw	high main@MoveType
  1708  000894  20F4               	addwfc	prodh,w,c
  1709  000896  6EDA               	movwf	fsr2h,c
  1710  000898  50DF               	movf	indf2,w,c
  1711  00089A  A4D8               	btfss	status,2,c
  1712  00089C  D01E               	goto	l3506
  1713                           
  1714                           ; BSR set to: 1
  1715                           ;main.c: 261: fullSpeedBack(&mL,&mR,100);
  1716  00089E  0ED0               	movlw	low main@mL
  1717  0008A0  0100               	movlb	0	; () banked
  1718  0008A2  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1719  0008A4  0E01               	movlw	high main@mL
  1720  0008A6  0100               	movlb	0	; () banked
  1721  0008A8  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1722  0008AA  0ED9               	movlw	low main@mR
  1723  0008AC  0100               	movlb	0	; () banked
  1724  0008AE  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1725  0008B0  0E01               	movlw	high main@mR
  1726  0008B2  0100               	movlb	0	; () banked
  1727  0008B4  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1728  0008B6  0E64               	movlw	100
  1729  0008B8  0100               	movlb	0	; () banked
  1730  0008BA  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1731  0008BC  EC84  F00D         	call	_fullSpeedBack	;wreg free
  1732                           
  1733                           ;main.c: 262: delay_tenth_s(MoveTime[Move]);
  1734  0008C0  0101               	movlb	1	; () banked
  1735  0008C2  51CF               	movf	main@Move& (0+255),w,b
  1736  0008C4  0D02               	mullw	2
  1737  0008C6  0E5A               	movlw	low main@MoveTime
  1738  0008C8  24F3               	addwf	prodl,w,c
  1739  0008CA  6ED9               	movwf	fsr2l,c
  1740  0008CC  0E01               	movlw	high main@MoveTime
  1741  0008CE  20F4               	addwfc	prodh,w,c
  1742  0008D0  6EDA               	movwf	fsr2h,c
  1743  0008D2  50DF               	movf	indf2,w,c
  1744  0008D4  ECE1  F00D         	call	_delay_tenth_s
  1745                           
  1746                           ;main.c: 263: } else if (MoveType[Move]==1) {
  1747  0008D8  D0F7               	goto	l3532
  1748  0008DA                     l3506:
  1749  0008DA  0101               	movlb	1	; () banked
  1750  0008DC  51CF               	movf	main@Move& (0+255),w,b
  1751  0008DE  0D01               	mullw	1
  1752  0008E0  0E28               	movlw	low main@MoveType
  1753  0008E2  24F3               	addwf	prodl,w,c
  1754  0008E4  6ED9               	movwf	fsr2l,c
  1755  0008E6  0E01               	movlw	high main@MoveType
  1756  0008E8  20F4               	addwfc	prodh,w,c
  1757  0008EA  6EDA               	movwf	fsr2h,c
  1758  0008EC  04DE               	decf	postinc2,w,c
  1759  0008EE  A4D8               	btfss	status,2,c
  1760  0008F0  D091               	goto	l3524
  1761                           
  1762                           ; BSR set to: 1
  1763                           ;main.c: 264: T0CONbits.TMR0ON=0;
  1764  0008F2  9ED5               	bcf	4053,7,c	;volatile
  1765                           
  1766                           ; BSR set to: 1
  1767                           ;main.c: 265: TMR0L = 0;
  1768  0008F4  0E00               	movlw	0
  1769  0008F6  6ED6               	movwf	4054,c	;volatile
  1770                           
  1771                           ;main.c: 266: TMR0H = 0;
  1772  0008F8  0E00               	movlw	0
  1773  0008FA  6ED7               	movwf	4055,c	;volatile
  1774                           
  1775                           ; BSR set to: 1
  1776                           ;main.c: 267: if (MoveTime[Move]>0) {
  1777  0008FC  0101               	movlb	1	; () banked
  1778  0008FE  51CF               	movf	main@Move& (0+255),w,b
  1779  000900  0D02               	mullw	2
  1780  000902  0E5A               	movlw	low main@MoveTime
  1781  000904  24F3               	addwf	prodl,w,c
  1782  000906  6ED9               	movwf	fsr2l,c
  1783  000908  0E01               	movlw	high main@MoveTime
  1784  00090A  20F4               	addwfc	prodh,w,c
  1785  00090C  6EDA               	movwf	fsr2h,c
  1786  00090E  0E01               	movlw	1
  1787  000910  BEDB               	btfsc	plusw2,7,c
  1788  000912  D03D               	goto	l424
  1789  000914  0E01               	movlw	1
  1790  000916  50DB               	movf	plusw2,w,c
  1791  000918  E103               	bnz	u2920
  1792  00091A  04DE               	decf	postinc2,w,c
  1793  00091C  A0D8               	btfss	status,0,c
  1794  00091E  D037               	goto	l424
  1795  000920                     u2920:
  1796                           
  1797                           ; BSR set to: 1
  1798                           ;main.c: 268: T0CONbits.TMR0ON=1;
  1799  000920  8ED5               	bsf	4053,7,c	;volatile
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;main.c: 269: turnRight(&mL,&mR,40);
  1803  000922  0ED0               	movlw	low main@mL
  1804  000924  0100               	movlb	0	; () banked
  1805  000926  6F67               	movwf	turnRight@mL& (0+255),b
  1806  000928  0E01               	movlw	high main@mL
  1807  00092A  0100               	movlb	0	; () banked
  1808  00092C  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1809  00092E  0ED9               	movlw	low main@mR
  1810  000930  0100               	movlb	0	; () banked
  1811  000932  6F69               	movwf	turnRight@mR& (0+255),b
  1812  000934  0E01               	movlw	high main@mR
  1813  000936  0100               	movlb	0	; () banked
  1814  000938  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1815  00093A  0E28               	movlw	40
  1816  00093C  0100               	movlb	0	; () banked
  1817  00093E  6F6B               	movwf	turnRight@power& (0+255),b
  1818  000940  ECA3  F00D         	call	_turnRight	;wreg free
  1819  000944                     l3518:
  1820  000944  0101               	movlb	1	; () banked
  1821  000946  51CF               	movf	main@Move& (0+255),w,b
  1822  000948  0D02               	mullw	2
  1823  00094A  0E5A               	movlw	low main@MoveTime
  1824  00094C  24F3               	addwf	prodl,w,c
  1825  00094E  6ED9               	movwf	fsr2l,c
  1826  000950  0E01               	movlw	high main@MoveTime
  1827  000952  20F4               	addwfc	prodh,w,c
  1828  000954  6EDA               	movwf	fsr2h,c
  1829  000956  50D6               	movf	4054,w,c	;volatile
  1830  000958  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1831  00095C  0100               	movlb	0	; () banked
  1832  00095E  6BBD               	clrf	(??_main+3)& (0+255),b
  1833  000960  C0BC  F0BD         	movff	??_main+2,??_main+3
  1834  000964  0100               	movlb	0	; () banked
  1835  000966  6BBC               	clrf	(??_main+2)& (0+255),b
  1836  000968  0100               	movlb	0	; () banked
  1837  00096A  27BC               	addwf	(??_main+2)& (0+255),f,b
  1838  00096C  0E00               	movlw	0
  1839  00096E  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1840  000970  50DE               	movf	postinc2,w,c
  1841  000972  0100               	movlb	0	; () banked
  1842  000974  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1843  000976  0100               	movlb	0	; () banked
  1844  000978  51BD               	movf	(??_main+3)& (0+255),w,b
  1845  00097A  0A80               	xorlw	128
  1846  00097C  0100               	movlb	0	; () banked
  1847  00097E  6FBE               	movwf	(??_main+4)& (0+255),b
  1848  000980  50DE               	movf	postinc2,w,c
  1849  000982  0A80               	xorlw	128
  1850  000984  0100               	movlb	0	; () banked
  1851  000986  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1852  000988  A0D8               	btfss	status,0,c
  1853  00098A  D7DC               	goto	l3518
  1854  00098C  D041               	goto	l431
  1855  00098E                     l424:
  1856                           
  1857                           ; BSR set to: 1
  1858                           ;main.c: 274: T0CONbits.TMR0ON=1;
  1859  00098E  8ED5               	bsf	4053,7,c	;volatile
  1860                           
  1861                           ; BSR set to: 1
  1862                           ;main.c: 275: turnLeft(&mL,&mR,40);
  1863  000990  0ED0               	movlw	low main@mL
  1864  000992  0100               	movlb	0	; () banked
  1865  000994  6F67               	movwf	turnLeft@mL& (0+255),b
  1866  000996  0E01               	movlw	high main@mL
  1867  000998  0100               	movlb	0	; () banked
  1868  00099A  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1869  00099C  0ED9               	movlw	low main@mR
  1870  00099E  0100               	movlb	0	; () banked
  1871  0009A0  6F69               	movwf	turnLeft@mR& (0+255),b
  1872  0009A2  0E01               	movlw	high main@mR
  1873  0009A4  0100               	movlb	0	; () banked
  1874  0009A6  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1875  0009A8  0E28               	movlw	40
  1876  0009AA  0100               	movlb	0	; () banked
  1877  0009AC  6F6B               	movwf	turnLeft@power& (0+255),b
  1878  0009AE  ECC2  F00D         	call	_turnLeft	;wreg free
  1879  0009B2                     l3522:
  1880  0009B2  0101               	movlb	1	; () banked
  1881  0009B4  51CF               	movf	main@Move& (0+255),w,b
  1882  0009B6  0D02               	mullw	2
  1883  0009B8  0E5A               	movlw	low main@MoveTime
  1884  0009BA  24F3               	addwf	prodl,w,c
  1885  0009BC  6ED9               	movwf	fsr2l,c
  1886  0009BE  0E01               	movlw	high main@MoveTime
  1887  0009C0  20F4               	addwfc	prodh,w,c
  1888  0009C2  6EDA               	movwf	fsr2h,c
  1889  0009C4  CFDE F0BA          	movff	postinc2,??_main
  1890  0009C8  CFDD F0BB          	movff	postdec2,??_main+1
  1891  0009CC  0100               	movlb	0	; () banked
  1892  0009CE  1FBA               	comf	??_main& (0+255),f,b
  1893  0009D0  1FBB               	comf	(??_main+1)& (0+255),f,b
  1894  0009D2  4BBA               	infsnz	??_main& (0+255),f,b
  1895  0009D4  2BBB               	incf	(??_main+1)& (0+255),f,b
  1896  0009D6  50D6               	movf	4054,w,c	;volatile
  1897  0009D8  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1898  0009DC  0100               	movlb	0	; () banked
  1899  0009DE  6BBD               	clrf	(??_main+3)& (0+255),b
  1900  0009E0  C0BC  F0BD         	movff	??_main+2,??_main+3
  1901  0009E4  0100               	movlb	0	; () banked
  1902  0009E6  6BBC               	clrf	(??_main+2)& (0+255),b
  1903  0009E8  0100               	movlb	0	; () banked
  1904  0009EA  27BC               	addwf	(??_main+2)& (0+255),f,b
  1905  0009EC  0E00               	movlw	0
  1906  0009EE  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1907  0009F0  0100               	movlb	0	; () banked
  1908  0009F2  51BA               	movf	??_main& (0+255),w,b
  1909  0009F4  0100               	movlb	0	; () banked
  1910  0009F6  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1911  0009F8  0100               	movlb	0	; () banked
  1912  0009FA  51BD               	movf	(??_main+3)& (0+255),w,b
  1913  0009FC  0A80               	xorlw	128
  1914  0009FE  0100               	movlb	0	; () banked
  1915  000A00  6FBE               	movwf	(??_main+4)& (0+255),b
  1916  000A02  0100               	movlb	0	; () banked
  1917  000A04  51BB               	movf	(??_main+1)& (0+255),w,b
  1918  000A06  0A80               	xorlw	128
  1919  000A08  0100               	movlb	0	; () banked
  1920  000A0A  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1921  000A0C  A0D8               	btfss	status,0,c
  1922  000A0E  D7D1               	goto	l3522
  1923  000A10                     l431:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 278: T0CONbits.TMR0ON=0;
  1927  000A10  9ED5               	bcf	4053,7,c	;volatile
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 279: }
  1931                           ;main.c: 280: } else if (MoveType[Move]==2) {
  1932  000A12  D05A               	goto	l3532
  1933  000A14                     l3524:
  1934  000A14  0101               	movlb	1	; () banked
  1935  000A16  51CF               	movf	main@Move& (0+255),w,b
  1936  000A18  0D01               	mullw	1
  1937  000A1A  0E28               	movlw	low main@MoveType
  1938  000A1C  24F3               	addwf	prodl,w,c
  1939  000A1E  6ED9               	movwf	fsr2l,c
  1940  000A20  0E01               	movlw	high main@MoveType
  1941  000A22  20F4               	addwfc	prodh,w,c
  1942  000A24  6EDA               	movwf	fsr2h,c
  1943  000A26  0E02               	movlw	2
  1944  000A28  18DE               	xorwf	postinc2,w,c
  1945  000A2A  A4D8               	btfss	status,2,c
  1946  000A2C  D04D               	goto	l3532
  1947                           
  1948                           ; BSR set to: 1
  1949                           ;main.c: 281: if (MoveTime[Move]>0) {
  1950  000A2E  0101               	movlb	1	; () banked
  1951  000A30  51CF               	movf	main@Move& (0+255),w,b
  1952  000A32  0D02               	mullw	2
  1953  000A34  0E5A               	movlw	low main@MoveTime
  1954  000A36  24F3               	addwf	prodl,w,c
  1955  000A38  6ED9               	movwf	fsr2l,c
  1956  000A3A  0E01               	movlw	high main@MoveTime
  1957  000A3C  20F4               	addwfc	prodh,w,c
  1958  000A3E  6EDA               	movwf	fsr2h,c
  1959  000A40  0E01               	movlw	1
  1960  000A42  BEDB               	btfsc	plusw2,7,c
  1961  000A44  D024               	goto	l3530
  1962  000A46  0E01               	movlw	1
  1963  000A48  50DB               	movf	plusw2,w,c
  1964  000A4A  E103               	bnz	u2960
  1965  000A4C  04DE               	decf	postinc2,w,c
  1966  000A4E  A0D8               	btfss	status,0,c
  1967  000A50  D01E               	goto	l3530
  1968  000A52                     u2960:
  1969                           
  1970                           ; BSR set to: 1
  1971                           ;main.c: 282: turnRight(&mL,&mR,100);
  1972  000A52  0ED0               	movlw	low main@mL
  1973  000A54  0100               	movlb	0	; () banked
  1974  000A56  6F67               	movwf	turnRight@mL& (0+255),b
  1975  000A58  0E01               	movlw	high main@mL
  1976  000A5A  0100               	movlb	0	; () banked
  1977  000A5C  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1978  000A5E  0ED9               	movlw	low main@mR
  1979  000A60  0100               	movlb	0	; () banked
  1980  000A62  6F69               	movwf	turnRight@mR& (0+255),b
  1981  000A64  0E01               	movlw	high main@mR
  1982  000A66  0100               	movlb	0	; () banked
  1983  000A68  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1984  000A6A  0E64               	movlw	100
  1985  000A6C  0100               	movlb	0	; () banked
  1986  000A6E  6F6B               	movwf	turnRight@power& (0+255),b
  1987  000A70  ECA3  F00D         	call	_turnRight	;wreg free
  1988                           
  1989                           ;main.c: 283: delay_tenth_s(MoveTime[Move]);
  1990  000A74  0101               	movlb	1	; () banked
  1991  000A76  51CF               	movf	main@Move& (0+255),w,b
  1992  000A78  0D02               	mullw	2
  1993  000A7A  0E5A               	movlw	low main@MoveTime
  1994  000A7C  24F3               	addwf	prodl,w,c
  1995  000A7E  6ED9               	movwf	fsr2l,c
  1996  000A80  0E01               	movlw	high main@MoveTime
  1997  000A82  20F4               	addwfc	prodh,w,c
  1998  000A84  6EDA               	movwf	fsr2h,c
  1999  000A86  50DF               	movf	indf2,w,c
  2000  000A88  ECE1  F00D         	call	_delay_tenth_s
  2001                           
  2002                           ;main.c: 284: } else {
  2003  000A8C  D01D               	goto	l3532
  2004  000A8E                     l3530:
  2005                           
  2006                           ;main.c: 285: turnLeft(&mL,&mR,100);
  2007  000A8E  0ED0               	movlw	low main@mL
  2008  000A90  0100               	movlb	0	; () banked
  2009  000A92  6F67               	movwf	turnLeft@mL& (0+255),b
  2010  000A94  0E01               	movlw	high main@mL
  2011  000A96  0100               	movlb	0	; () banked
  2012  000A98  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2013  000A9A  0ED9               	movlw	low main@mR
  2014  000A9C  0100               	movlb	0	; () banked
  2015  000A9E  6F69               	movwf	turnLeft@mR& (0+255),b
  2016  000AA0  0E01               	movlw	high main@mR
  2017  000AA2  0100               	movlb	0	; () banked
  2018  000AA4  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2019  000AA6  0E64               	movlw	100
  2020  000AA8  0100               	movlb	0	; () banked
  2021  000AAA  6F6B               	movwf	turnLeft@power& (0+255),b
  2022  000AAC  ECC2  F00D         	call	_turnLeft	;wreg free
  2023                           
  2024                           ;main.c: 286: delay_tenth_s(MoveTime[Move]);
  2025  000AB0  0101               	movlb	1	; () banked
  2026  000AB2  51CF               	movf	main@Move& (0+255),w,b
  2027  000AB4  0D02               	mullw	2
  2028  000AB6  0E5A               	movlw	low main@MoveTime
  2029  000AB8  24F3               	addwf	prodl,w,c
  2030  000ABA  6ED9               	movwf	fsr2l,c
  2031  000ABC  0E01               	movlw	high main@MoveTime
  2032  000ABE  20F4               	addwfc	prodh,w,c
  2033  000AC0  6EDA               	movwf	fsr2h,c
  2034  000AC2  50DF               	movf	indf2,w,c
  2035  000AC4  ECE1  F00D         	call	_delay_tenth_s
  2036  000AC8                     l3532:
  2037  000AC8  0101               	movlb	1	; () banked
  2038  000ACA  07CF               	decf	main@Move& (0+255),f,b
  2039  000ACC  D6CE               	goto	l3500
  2040  000ACE                     l420:
  2041                           
  2042                           ;main.c: 287: }
  2043                           ;main.c: 288: }
  2044                           ;main.c: 289: }
  2045                           ;main.c: 290: mode=-1;
  2046  000ACE  683B               	setf	_mode,c	;volatile
  2047  000AD0                     l3536:
  2048  000AD0  503B               	movf	_mode,w,c	;volatile
  2049                           
  2050                           ; Switch size 1, requested type "space"
  2051                           ; Number of cases is 5, Range of values is 0 to 255
  2052                           ; switch strategies available:
  2053                           ; Name         Instructions Cycles
  2054                           ; simple_byte           16     9 (average)
  2055                           ;	Chosen strategy is simple_byte
  2056  000AD2  0A00               	xorlw	0	; case 0
  2057  000AD4  B4D8               	btfsc	status,2,c
  2058  000AD6  D511               	goto	l3386
  2059  000AD8  0A01               	xorlw	1	; case 1
  2060  000ADA  B4D8               	btfsc	status,2,c
  2061  000ADC  D537               	goto	l3406
  2062  000ADE  0A03               	xorlw	3	; case 2
  2063  000AE0  B4D8               	btfsc	status,2,c
  2064  000AE2  D5D7               	goto	l3438
  2065  000AE4  0A01               	xorlw	1	; case 3
  2066  000AE6  B4D8               	btfsc	status,2,c
  2067  000AE8  D6AE               	goto	l3492
  2068  000AEA  0AFC               	xorlw	252	; case 255
  2069  000AEC  B4D8               	btfsc	status,2,c
  2070  000AEE  D499               	goto	l3348
  2071  000AF0  D7EF               	goto	l3536
  2072  000AF2                     __end_of_main:
  2073                           	opt stack 0
  2074                           tblptru	equ	0xFF8
  2075                           prodh	equ	0xFF4
  2076                           prodl	equ	0xFF3
  2077                           intcon	equ	0xFF2
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           indf1	equ	0xFE7
  2081                           plusw1	equ	0xFE3
  2082                           fsr1h	equ	0xFE2
  2083                           fsr1l	equ	0xFE1
  2084                           indf2	equ	0xFDF
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           plusw2	equ	0xFDB
  2088                           fsr2h	equ	0xFDA
  2089                           fsr2l	equ	0xFD9
  2090                           status	equ	0xFD8
  2091                           
  2092 ;; *************** function _initTimer *****************
  2093 ;; Defined at:
  2094 ;;		line 8 in file "Movement.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;		None               void
  2101 ;; Registers used:
  2102 ;;		None
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2108 ;;      Params:         0       0       0       0
  2109 ;;      Locals:         0       0       0       0
  2110 ;;      Temps:          0       0       0       0
  2111 ;;      Totals:         0       0       0       0
  2112 ;;Total ram usage:        0 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    3
  2115 ;; This function calls:
  2116 ;;		Nothing
  2117 ;; This function is called by:
  2118 ;;		_main
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text1
  2123  001DA2                     __ptext1:
  2124                           	opt stack 0
  2125  001DA2                     _initTimer:
  2126                           	opt stack 27
  2127                           
  2128                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2129                           
  2130                           ;incstack = 0
  2131  001DA2  9ED5               	bcf	4053,7,c	;volatile
  2132                           
  2133                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2134  001DA4  9CD5               	bcf	4053,6,c	;volatile
  2135                           
  2136                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2137  001DA6  9AD5               	bcf	4053,5,c	;volatile
  2138                           
  2139                           ;Movement.c: 13: T0CONbits.PSA=0;
  2140  001DA8  96D5               	bcf	4053,3,c	;volatile
  2141                           
  2142                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2143  001DAA  80D5               	bsf	4053,0,c	;volatile
  2144  001DAC  82D5               	bsf	4053,1,c	;volatile
  2145  001DAE  84D5               	bsf	4053,2,c	;volatile
  2146                           
  2147                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2148  001DB0  9AF2               	bcf	intcon,5,c	;volatile
  2149  001DB2  0012               	return		;funcret
  2150  001DB4                     __end_of_initTimer:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           prodh	equ	0xFF4
  2154                           prodl	equ	0xFF3
  2155                           intcon	equ	0xFF2
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           indf1	equ	0xFE7
  2159                           plusw1	equ	0xFE3
  2160                           fsr1h	equ	0xFE2
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           plusw2	equ	0xFDB
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _initRFID *****************
  2171 ;; Defined at:
  2172 ;;		line 8 in file "RFID_Reader.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;		None
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;		None               void
  2179 ;; Registers used:
  2180 ;;		wreg, status,2, status,0
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2186 ;;      Params:         0       0       0       0
  2187 ;;      Locals:         0       0       0       0
  2188 ;;      Temps:          0       0       0       0
  2189 ;;      Totals:         0       0       0       0
  2190 ;;Total ram usage:        0 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    3
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text2
  2201  001D86                     __ptext2:
  2202                           	opt stack 0
  2203  001D86                     _initRFID:
  2204                           	opt stack 27
  2205                           
  2206                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2207                           
  2208                           ;incstack = 0
  2209  001D86  5094               	movf	3988,w,c	;volatile
  2210  001D88  09C0               	iorlw	192
  2211  001D8A  6E94               	movwf	3988,c	;volatile
  2212                           
  2213                           ;RFID_Reader.c: 13: SPBRG=205;
  2214  001D8C  0ECD               	movlw	205
  2215  001D8E  6EAF               	movwf	4015,c	;volatile
  2216                           
  2217                           ;RFID_Reader.c: 14: SPBRGH=0;
  2218  001D90  0E00               	movlw	0
  2219  001D92  6EB0               	movwf	4016,c	;volatile
  2220                           
  2221                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2222  001D94  86AA               	bsf	4010,3,c	;volatile
  2223                           
  2224                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2225  001D96  84AC               	bsf	4012,2,c	;volatile
  2226                           
  2227                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2228  001D98  88AB               	bsf	4011,4,c	;volatile
  2229                           
  2230                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2231  001D9A  8EAB               	bsf	4011,7,c	;volatile
  2232                           
  2233                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2234  001D9C  98AC               	bcf	4012,4,c	;volatile
  2235                           
  2236                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2237  001D9E  9CAB               	bcf	4011,6,c	;volatile
  2238  001DA0  0012               	return		;funcret
  2239  001DA2                     __end_of_initRFID:
  2240                           	opt stack 0
  2241                           tblptru	equ	0xFF8
  2242                           prodh	equ	0xFF4
  2243                           prodl	equ	0xFF3
  2244                           intcon	equ	0xFF2
  2245                           postinc0	equ	0xFEE
  2246                           wreg	equ	0xFE8
  2247                           indf1	equ	0xFE7
  2248                           plusw1	equ	0xFE3
  2249                           fsr1h	equ	0xFE2
  2250                           fsr1l	equ	0xFE1
  2251                           indf2	equ	0xFDF
  2252                           postinc2	equ	0xFDE
  2253                           postdec2	equ	0xFDD
  2254                           plusw2	equ	0xFDB
  2255                           fsr2h	equ	0xFDA
  2256                           fsr2l	equ	0xFD9
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _initMotorPWM *****************
  2260 ;; Defined at:
  2261 ;;		line 4 in file "dc_motor.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;		None               void
  2268 ;; Registers used:
  2269 ;;		wreg, status,2
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2275 ;;      Params:         0       0       0       0
  2276 ;;      Locals:         0       0       0       0
  2277 ;;      Temps:          0       0       0       0
  2278 ;;      Totals:         0       0       0       0
  2279 ;;Total ram usage:        0 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    3
  2282 ;; This function calls:
  2283 ;;		Nothing
  2284 ;; This function is called by:
  2285 ;;		_main
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289                           	psect	text3
  2290  001C68                     __ptext3:
  2291                           	opt stack 0
  2292  001C68                     _initMotorPWM:
  2293                           	opt stack 27
  2294                           
  2295                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2296                           
  2297                           ;incstack = 0
  2298  001C68  0E00               	movlw	0
  2299  001C6A  6E7F               	movwf	3967,c	;volatile
  2300                           
  2301                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2302  001C6C  0E80               	movlw	128
  2303  001C6E  6E7E               	movwf	3966,c	;volatile
  2304                           
  2305                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2306  001C70  0E6F               	movlw	111
  2307  001C72  6E6F               	movwf	3951,c	;volatile
  2308                           
  2309                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2310  001C74  0E00               	movlw	0
  2311  001C76  6E6E               	movwf	3950,c	;volatile
  2312                           
  2313                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2314  001C78  0EC7               	movlw	199
  2315  001C7A  6E7B               	movwf	3963,c	;volatile
  2316                           
  2317                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2318  001C7C  0E00               	movlw	0
  2319  001C7E  6E7A               	movwf	3962,c	;volatile
  2320                           
  2321                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2322  001C80  0E00               	movlw	0
  2323  001C82  6E79               	movwf	3961,c	;volatile
  2324                           
  2325                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2326  001C84  0E00               	movlw	0
  2327  001C86  6E78               	movwf	3960,c	;volatile
  2328                           
  2329                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2330  001C88  0E00               	movlw	0
  2331  001C8A  6E77               	movwf	3959,c	;volatile
  2332                           
  2333                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2334  001C8C  0E00               	movlw	0
  2335  001C8E  6E76               	movwf	3958,c	;volatile
  2336                           
  2337                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2338  001C90  9093               	bcf	3987,0,c	;volatile
  2339                           
  2340                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2341  001C92  9293               	bcf	3987,1,c	;volatile
  2342                           
  2343                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2344  001C94  9493               	bcf	3987,2,c	;volatile
  2345                           
  2346                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2347  001C96  9693               	bcf	3987,3,c	;volatile
  2348  001C98  0012               	return		;funcret
  2349  001C9A                     __end_of_initMotorPWM:
  2350                           	opt stack 0
  2351                           tblptru	equ	0xFF8
  2352                           prodh	equ	0xFF4
  2353                           prodl	equ	0xFF3
  2354                           intcon	equ	0xFF2
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           indf1	equ	0xFE7
  2358                           plusw1	equ	0xFE3
  2359                           fsr1h	equ	0xFE2
  2360                           fsr1l	equ	0xFE1
  2361                           indf2	equ	0xFDF
  2362                           postinc2	equ	0xFDE
  2363                           postdec2	equ	0xFDD
  2364                           plusw2	equ	0xFDB
  2365                           fsr2h	equ	0xFDA
  2366                           fsr2l	equ	0xFD9
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _initLCD *****************
  2370 ;; Defined at:
  2371 ;;		line 38 in file "LCD.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;		None
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;		None
  2376 ;; Return value:  Size  Location     Type
  2377 ;;		None               void
  2378 ;; Registers used:
  2379 ;;		wreg, status,2, status,0, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2385 ;;      Params:         0       0       0       0
  2386 ;;      Locals:         0       0       0       0
  2387 ;;      Temps:          1       0       0       0
  2388 ;;      Totals:         1       0       0       0
  2389 ;;Total ram usage:        1 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    6
  2392 ;; This function calls:
  2393 ;;		_LCDout
  2394 ;;		_SendLCD
  2395 ;; This function is called by:
  2396 ;;		_main
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text4
  2401  0015FC                     __ptext4:
  2402                           	opt stack 0
  2403  0015FC                     _initLCD:
  2404                           	opt stack 24
  2405                           
  2406                           ;LCD.c: 44: TRISAbits.RA6=0;
  2407                           
  2408                           ;incstack = 0
  2409  0015FC  9C92               	bcf	3986,6,c	;volatile
  2410                           
  2411                           ;LCD.c: 45: TRISCbits.RC0=0;
  2412  0015FE  9094               	bcf	3988,0,c	;volatile
  2413                           
  2414                           ;LCD.c: 46: TRISCbits.RC1=0;
  2415  001600  9294               	bcf	3988,1,c	;volatile
  2416                           
  2417                           ;LCD.c: 47: TRISCbits.RC2=0;
  2418  001602  9494               	bcf	3988,2,c	;volatile
  2419                           
  2420                           ;LCD.c: 48: TRISDbits.RD0=0;
  2421  001604  9095               	bcf	3989,0,c	;volatile
  2422                           
  2423                           ;LCD.c: 49: TRISDbits.RD1=0;
  2424  001606  9295               	bcf	3989,1,c	;volatile
  2425                           
  2426                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2427  001608  0E27               	movlw	39
  2428  00160A  6E2A               	movwf	??_initLCD& (0+255),c
  2429  00160C  0EF5               	movlw	245
  2430  00160E                     u2997:
  2431  00160E  2EE8               	decfsz	wreg,f,c
  2432  001610  D7FE               	goto	u2997
  2433  001612  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2434  001614  D7FC               	goto	u2997
  2435  001616  F000               	nop	
  2436                           
  2437                           ;LCD.c: 52: LCDout(0b0011);
  2438  001618  0E03               	movlw	3
  2439  00161A  EC9B  F00A         	call	_LCDout
  2440                           
  2441                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2442  00161E  0E0D               	movlw	13
  2443  001620  6E2A               	movwf	??_initLCD& (0+255),c
  2444  001622  0EFC               	movlw	252
  2445  001624                     u3007:
  2446  001624  2EE8               	decfsz	wreg,f,c
  2447  001626  D7FE               	goto	u3007
  2448  001628  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2449  00162A  D7FC               	goto	u3007
  2450                           
  2451                           ;LCD.c: 54: LCDout(0b0011);
  2452  00162C  0E03               	movlw	3
  2453  00162E  EC9B  F00A         	call	_LCDout
  2454                           
  2455                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2456  001632  0E85               	movlw	133
  2457  001634                     u3017:
  2458  001634  2EE8               	decfsz	wreg,f,c
  2459  001636  D7FE               	goto	u3017
  2460  001638  F000               	nop	
  2461                           
  2462                           ;LCD.c: 56: LCDout(0b0011);
  2463  00163A  0E03               	movlw	3
  2464  00163C  EC9B  F00A         	call	_LCDout
  2465                           
  2466                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2467  001640  0E21               	movlw	33
  2468  001642                     u3027:
  2469  001642  2EE8               	decfsz	wreg,f,c
  2470  001644  D7FE               	goto	u3027
  2471  001646  F000               	nop	
  2472                           
  2473                           ;LCD.c: 58: LCDout(0b0010);
  2474  001648  0E02               	movlw	2
  2475  00164A  EC9B  F00A         	call	_LCDout
  2476                           
  2477                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2478  00164E  0E21               	movlw	33
  2479  001650                     u3037:
  2480  001650  2EE8               	decfsz	wreg,f,c
  2481  001652  D7FE               	goto	u3037
  2482  001654  F000               	nop	
  2483                           
  2484                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2485  001656  0E00               	movlw	0
  2486  001658  6E28               	movwf	SendLCD@type,c
  2487  00165A  0E28               	movlw	40
  2488  00165C  EC65  F00E         	call	_SendLCD
  2489                           
  2490                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2491  001660  0E21               	movlw	33
  2492  001662                     u3047:
  2493  001662  2EE8               	decfsz	wreg,f,c
  2494  001664  D7FE               	goto	u3047
  2495  001666  F000               	nop	
  2496                           
  2497                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2498  001668  0E00               	movlw	0
  2499  00166A  6E28               	movwf	SendLCD@type,c
  2500  00166C  0E08               	movlw	8
  2501  00166E  EC65  F00E         	call	_SendLCD
  2502                           
  2503                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2504  001672  0E21               	movlw	33
  2505  001674                     u3057:
  2506  001674  2EE8               	decfsz	wreg,f,c
  2507  001676  D7FE               	goto	u3057
  2508  001678  F000               	nop	
  2509                           
  2510                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2511  00167A  0E00               	movlw	0
  2512  00167C  6E28               	movwf	SendLCD@type,c
  2513  00167E  0E01               	movlw	1
  2514  001680  EC65  F00E         	call	_SendLCD
  2515                           
  2516                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2517  001684  0E0D               	movlw	13
  2518  001686  6E2A               	movwf	??_initLCD& (0+255),c
  2519  001688  0EFC               	movlw	252
  2520  00168A                     u3067:
  2521  00168A  2EE8               	decfsz	wreg,f,c
  2522  00168C  D7FE               	goto	u3067
  2523  00168E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2524  001690  D7FC               	goto	u3067
  2525                           
  2526                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2527  001692  0E00               	movlw	0
  2528  001694  6E28               	movwf	SendLCD@type,c
  2529  001696  0E06               	movlw	6
  2530  001698  EC65  F00E         	call	_SendLCD
  2531                           
  2532                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2533  00169C  0E21               	movlw	33
  2534  00169E                     u3077:
  2535  00169E  2EE8               	decfsz	wreg,f,c
  2536  0016A0  D7FE               	goto	u3077
  2537  0016A2  F000               	nop	
  2538                           
  2539                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2540  0016A4  0E00               	movlw	0
  2541  0016A6  6E28               	movwf	SendLCD@type,c
  2542  0016A8  0E0C               	movlw	12
  2543  0016AA  EC65  F00E         	call	_SendLCD
  2544                           
  2545                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2546  0016AE  0E21               	movlw	33
  2547  0016B0                     u3087:
  2548  0016B0  2EE8               	decfsz	wreg,f,c
  2549  0016B2  D7FE               	goto	u3087
  2550  0016B4  F000               	nop	
  2551  0016B6  0012               	return		;funcret
  2552  0016B8                     __end_of_initLCD:
  2553                           	opt stack 0
  2554                           tblptru	equ	0xFF8
  2555                           prodh	equ	0xFF4
  2556                           prodl	equ	0xFF3
  2557                           intcon	equ	0xFF2
  2558                           postinc0	equ	0xFEE
  2559                           wreg	equ	0xFE8
  2560                           indf1	equ	0xFE7
  2561                           plusw1	equ	0xFE3
  2562                           fsr1h	equ	0xFE2
  2563                           fsr1l	equ	0xFE1
  2564                           indf2	equ	0xFDF
  2565                           postinc2	equ	0xFDE
  2566                           postdec2	equ	0xFDD
  2567                           plusw2	equ	0xFDB
  2568                           fsr2h	equ	0xFDA
  2569                           fsr2l	equ	0xFD9
  2570                           status	equ	0xFD8
  2571                           
  2572 ;; *************** function _initIR *****************
  2573 ;; Defined at:
  2574 ;;		line 30 in file "IR_Reading.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;		None
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;		None               void
  2581 ;; Registers used:
  2582 ;;		wreg, status,2
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2588 ;;      Params:         0       0       0       0
  2589 ;;      Locals:         0       0       0       0
  2590 ;;      Temps:          0       0       0       0
  2591 ;;      Totals:         0       0       0       0
  2592 ;;Total ram usage:        0 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; Hardware stack levels required when called:    3
  2595 ;; This function calls:
  2596 ;;		Nothing
  2597 ;; This function is called by:
  2598 ;;		_main
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text5
  2603  001D46                     __ptext5:
  2604                           	opt stack 0
  2605  001D46                     _initIR:
  2606                           	opt stack 27
  2607                           
  2608                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2609                           
  2610                           ;incstack = 0
  2611  001D46  9489               	bcf	3977,2,c	;volatile
  2612                           
  2613                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2614  001D48  9689               	bcf	3977,3,c	;volatile
  2615                           
  2616                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2617  001D4A  8492               	bsf	3986,2,c	;volatile
  2618                           
  2619                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2620  001D4C  8692               	bsf	3986,3,c	;volatile
  2621                           
  2622                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2623  001D4E  94B8               	bcf	4024,2,c	;volatile
  2624                           
  2625                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2626  001D50  96B8               	bcf	4024,3,c	;volatile
  2627                           
  2628                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2629  001D52  9CB8               	bcf	4024,6,c	;volatile
  2630                           
  2631                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2632  001D54  9EB8               	bcf	4024,7,c	;volatile
  2633                           
  2634                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2635  001D56  0E06               	movlw	6
  2636  001D58  6E63               	movwf	3939,c	;volatile
  2637                           
  2638                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2639  001D5A  0E06               	movlw	6
  2640  001D5C  6E62               	movwf	3938,c	;volatile
  2641                           
  2642                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2643  001D5E  9096               	bcf	3990,0,c	;volatile
  2644                           
  2645                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2646  001D60  9296               	bcf	3990,1,c	;volatile
  2647                           
  2648                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2649  001D62  0E59               	movlw	89
  2650  001D64  6EB7               	movwf	4023,c	;volatile
  2651  001D66  0012               	return		;funcret
  2652  001D68                     __end_of_initIR:
  2653                           	opt stack 0
  2654                           tblptru	equ	0xFF8
  2655                           prodh	equ	0xFF4
  2656                           prodl	equ	0xFF3
  2657                           intcon	equ	0xFF2
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           indf1	equ	0xFE7
  2661                           plusw1	equ	0xFE3
  2662                           fsr1h	equ	0xFE2
  2663                           fsr1l	equ	0xFE1
  2664                           indf2	equ	0xFDF
  2665                           postinc2	equ	0xFDE
  2666                           postdec2	equ	0xFDD
  2667                           plusw2	equ	0xFDB
  2668                           fsr2h	equ	0xFDA
  2669                           fsr2l	equ	0xFD9
  2670                           status	equ	0xFD8
  2671                           
  2672 ;; *************** function _fullSpeedBack *****************
  2673 ;; Defined at:
  2674 ;;		line 125 in file "dc_motor.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2677 ;;		 -> main@mL(9), 
  2678 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2679 ;;		 -> main@mR(9), 
  2680 ;;  power           1   11[BANK0 ] unsigned char 
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;		None
  2683 ;; Return value:  Size  Location     Type
  2684 ;;		None               void
  2685 ;; Registers used:
  2686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2687 ;; Tracked objects:
  2688 ;;		On entry : 0/0
  2689 ;;		On exit  : 0/0
  2690 ;;		Unchanged: 0/0
  2691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2692 ;;      Params:         0       5       0       0
  2693 ;;      Locals:         0       0       0       0
  2694 ;;      Temps:          0       0       0       0
  2695 ;;      Totals:         0       5       0       0
  2696 ;;Total ram usage:        5 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; Hardware stack levels required when called:    6
  2699 ;; This function calls:
  2700 ;;		_fullSpeedAhead
  2701 ;; This function is called by:
  2702 ;;		_main
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text6
  2707  001B08                     __ptext6:
  2708                           	opt stack 0
  2709  001B08                     _fullSpeedBack:
  2710                           	opt stack 24
  2711                           
  2712                           ;dc_motor.c: 128: mL->direction=0;
  2713                           
  2714                           ;incstack = 0
  2715  001B08  0100               	movlb	0	; () banked
  2716  001B0A  EE20 F001          	lfsr	2,1
  2717  001B0E  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2718  001B10  26D9               	addwf	fsr2l,f,c
  2719  001B12  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2720  001B14  22DA               	addwfc	fsr2h,f,c
  2721  001B16  0E00               	movlw	0
  2722  001B18  6EDF               	movwf	indf2,c
  2723                           
  2724                           ;dc_motor.c: 129: mR->direction=0;
  2725  001B1A  0100               	movlb	0	; () banked
  2726  001B1C  EE20 F001          	lfsr	2,1
  2727  001B20  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2728  001B22  26D9               	addwf	fsr2l,f,c
  2729  001B24  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2730  001B26  22DA               	addwfc	fsr2h,f,c
  2731  001B28  0E00               	movlw	0
  2732  001B2A  6EDF               	movwf	indf2,c
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2736  001B2C  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2737  001B30  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2738  001B34  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2739  001B38  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2740  001B3C  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2741  001B40  EC2D  F00C         	call	_fullSpeedAhead	;wreg free
  2742  001B44  0012               	return		;funcret
  2743  001B46                     __end_of_fullSpeedBack:
  2744                           	opt stack 0
  2745                           tblptru	equ	0xFF8
  2746                           prodh	equ	0xFF4
  2747                           prodl	equ	0xFF3
  2748                           intcon	equ	0xFF2
  2749                           postinc0	equ	0xFEE
  2750                           wreg	equ	0xFE8
  2751                           indf1	equ	0xFE7
  2752                           plusw1	equ	0xFE3
  2753                           fsr1h	equ	0xFE2
  2754                           fsr1l	equ	0xFE1
  2755                           indf2	equ	0xFDF
  2756                           postinc2	equ	0xFDE
  2757                           postdec2	equ	0xFDD
  2758                           plusw2	equ	0xFDB
  2759                           fsr2h	equ	0xFDA
  2760                           fsr2l	equ	0xFD9
  2761                           status	equ	0xFD8
  2762                           
  2763 ;; *************** function _enableSensor *****************
  2764 ;; Defined at:
  2765 ;;		line 106 in file "IR_Reading.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  sensor          1    wreg     unsigned char 
  2768 ;;  status          1   35[COMRAM] unsigned char 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  sensor          1   36[COMRAM] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;		None               void
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2780 ;;      Params:         1       0       0       0
  2781 ;;      Locals:         1       0       0       0
  2782 ;;      Temps:          0       0       0       0
  2783 ;;      Totals:         2       0       0       0
  2784 ;;Total ram usage:        2 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    3
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_main
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text7
  2795  001CFA                     __ptext7:
  2796                           	opt stack 0
  2797  001CFA                     _enableSensor:
  2798                           	opt stack 27
  2799                           
  2800                           ;incstack = 0
  2801                           ;enableSensor@sensor stored from wreg
  2802  001CFA  6E25               	movwf	enableSensor@sensor,c
  2803                           
  2804                           ;IR_Reading.c: 108: if (sensor==0){
  2805  001CFC  5025               	movf	enableSensor@sensor,w,c
  2806  001CFE  A4D8               	btfss	status,2,c
  2807  001D00  D006               	goto	l2396
  2808                           
  2809                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2810  001D02  B024               	btfsc	enableSensor@status,0,c
  2811  001D04  D002               	bra	u1815
  2812  001D06  908D               	bcf	3981,0,c	;volatile
  2813  001D08  D001               	bra	u1816
  2814  001D0A                     u1815:
  2815  001D0A  808D               	bsf	3981,0,c	;volatile
  2816  001D0C                     u1816:
  2817                           
  2818                           ;IR_Reading.c: 110: } else if (sensor==1){
  2819  001D0C  0012               	return	
  2820  001D0E                     l2396:
  2821  001D0E  0425               	decf	enableSensor@sensor,w,c
  2822  001D10  A4D8               	btfss	status,2,c
  2823  001D12  0012               	return	
  2824                           
  2825                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2826  001D14  B024               	btfsc	enableSensor@status,0,c
  2827  001D16  D002               	bra	u1835
  2828  001D18  928D               	bcf	3981,1,c	;volatile
  2829  001D1A  D001               	bra	u1836
  2830  001D1C                     u1835:
  2831  001D1C  828D               	bsf	3981,1,c	;volatile
  2832  001D1E                     u1836:
  2833  001D1E  0012               	return	
  2834  001D20                     __end_of_enableSensor:
  2835                           	opt stack 0
  2836                           tblptru	equ	0xFF8
  2837                           prodh	equ	0xFF4
  2838                           prodl	equ	0xFF3
  2839                           intcon	equ	0xFF2
  2840                           postinc0	equ	0xFEE
  2841                           wreg	equ	0xFE8
  2842                           indf1	equ	0xFE7
  2843                           plusw1	equ	0xFE3
  2844                           fsr1h	equ	0xFE2
  2845                           fsr1l	equ	0xFE1
  2846                           indf2	equ	0xFDF
  2847                           postinc2	equ	0xFDE
  2848                           postdec2	equ	0xFDD
  2849                           plusw2	equ	0xFDB
  2850                           fsr2h	equ	0xFDA
  2851                           fsr2l	equ	0xFD9
  2852                           status	equ	0xFD8
  2853                           
  2854 ;; *************** function _VerifySignal *****************
  2855 ;; Defined at:
  2856 ;;		line 58 in file "RFID_Reader.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2859 ;;		 -> ReceivedString(16), 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  ptr             3    0        PTR unsigned char 
  2862 ;;  hexByte         2   43[COMRAM] unsigned int 
  2863 ;;  checksum        1   42[COMRAM] unsigned char 
  2864 ;;  i               1   41[COMRAM] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  1    wreg      unsigned char 
  2867 ;; Registers used:
  2868 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2874 ;;      Params:         2       0       0       0
  2875 ;;      Locals:         4       0       0       0
  2876 ;;      Temps:          4       0       0       0
  2877 ;;      Totals:        10       0       0       0
  2878 ;;Total ram usage:       10 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    3
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_main
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text8
  2889  001A1C                     __ptext8:
  2890                           	opt stack 0
  2891  001A1C                     _VerifySignal:
  2892                           	opt stack 27
  2893                           
  2894                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2895                           
  2896                           ;incstack = 0
  2897  001A1C  0E00               	movlw	0
  2898  001A1E  6E2B               	movwf	VerifySignal@checksum,c
  2899                           
  2900                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2901  001A20  0E00               	movlw	0
  2902  001A22  6E2D               	movwf	VerifySignal@hexByte+1,c
  2903  001A24  0E00               	movlw	0
  2904  001A26  6E2C               	movwf	VerifySignal@hexByte,c
  2905                           
  2906                           ;RFID_Reader.c: 61: unsigned char i=0;
  2907  001A28  0E00               	movlw	0
  2908  001A2A  6E2A               	movwf	VerifySignal@i,c
  2909                           
  2910                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2911                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2912  001A2C  EE20 F004          	lfsr	2,4
  2913  001A30  5024               	movf	VerifySignal@Signal,w,c
  2914  001A32  26D9               	addwf	fsr2l,f,c
  2915  001A34  5025               	movf	VerifySignal@Signal+1,w,c
  2916  001A36  22DA               	addwfc	fsr2h,f,c
  2917  001A38  50DF               	movf	indf2,w,c
  2918  001A3A  6E26               	movwf	??_VerifySignal& (0+255),c
  2919  001A3C  EE20 F003          	lfsr	2,3
  2920  001A40  5024               	movf	VerifySignal@Signal,w,c
  2921  001A42  26D9               	addwf	fsr2l,f,c
  2922  001A44  5025               	movf	VerifySignal@Signal+1,w,c
  2923  001A46  22DA               	addwfc	fsr2h,f,c
  2924  001A48  50DF               	movf	indf2,w,c
  2925  001A4A  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2926  001A4C  5027               	movf	??_VerifySignal+1,w,c
  2927  001A4E  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2928  001A50  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2929  001A52  5026               	movf	??_VerifySignal,w,c
  2930  001A54  2428               	addwf	??_VerifySignal+2,w,c
  2931  001A56  6E2C               	movwf	VerifySignal@hexByte,c
  2932  001A58  0E00               	movlw	0
  2933  001A5A  2029               	addwfc	??_VerifySignal+3,w,c
  2934  001A5C  6E2D               	movwf	VerifySignal@hexByte+1,c
  2935                           
  2936                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2937  001A5E  EE20 F002          	lfsr	2,2
  2938  001A62  5024               	movf	VerifySignal@Signal,w,c
  2939  001A64  26D9               	addwf	fsr2l,f,c
  2940  001A66  5025               	movf	VerifySignal@Signal+1,w,c
  2941  001A68  22DA               	addwfc	fsr2h,f,c
  2942  001A6A  50DF               	movf	indf2,w,c
  2943  001A6C  182C               	xorwf	VerifySignal@hexByte,w,c
  2944  001A6E  6E2B               	movwf	VerifySignal@checksum,c
  2945                           
  2946                           ;RFID_Reader.c: 75: return 1;
  2947  001A70  0E01               	movlw	1
  2948  001A72  0012               	return	
  2949  001A74                     __end_of_VerifySignal:
  2950                           	opt stack 0
  2951                           tblptru	equ	0xFF8
  2952                           prodh	equ	0xFF4
  2953                           prodl	equ	0xFF3
  2954                           intcon	equ	0xFF2
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           indf1	equ	0xFE7
  2958                           plusw1	equ	0xFE3
  2959                           fsr1h	equ	0xFE2
  2960                           fsr1l	equ	0xFE1
  2961                           indf2	equ	0xFDF
  2962                           postinc2	equ	0xFDE
  2963                           postdec2	equ	0xFDD
  2964                           plusw2	equ	0xFDB
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           status	equ	0xFD8
  2968                           
  2969 ;; *************** function _ScanWithRange *****************
  2970 ;; Defined at:
  2971 ;;		line 98 in file "Movement.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2974 ;;		 -> main@mL(9), 
  2975 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2976 ;;		 -> main@mR(9), 
  2977 ;;  loops           2   17[BANK0 ] int 
  2978 ;;  MoveTime        2   19[BANK0 ] PTR int 
  2979 ;;		 -> main@MoveTime(100), 
  2980 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  2981 ;;		 -> main@Move(1), 
  2982 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  2983 ;;		 -> main@MoveType(50), 
  2984 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  2985 ;;		 -> RFID_Read(1), 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  buf            40   32[BANK0 ] unsigned char [40]
  2988 ;;  SensorResult    4   84[BANK0 ] unsigned int [2]
  2989 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  2990 ;;  LeftFlag        2   81[BANK0 ] unsigned int 
  2991 ;;  DirectionFou    2   78[BANK0 ] const unsigned int 
  2992 ;;  i               2   76[BANK0 ] unsigned int 
  2993 ;;  n               2   72[BANK0 ] unsigned int 
  2994 ;;  TimeAboveThr    1   83[BANK0 ] unsigned char 
  2995 ;;  MotorPower      1   80[BANK0 ] const unsigned char 
  2996 ;;  MiniLeftFlic    1   75[BANK0 ] const unsigned char 
  2997 ;;  LeftFlick       1   74[BANK0 ] const unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      unsigned char 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3007 ;;      Params:         0      14       0       0
  3008 ;;      Locals:         0      58       0       0
  3009 ;;      Temps:          0       5       0       0
  3010 ;;      Totals:         0      77       0       0
  3011 ;;Total ram usage:       77 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    7
  3014 ;; This function calls:
  3015 ;;		_LCD_String
  3016 ;;		_SendLCD
  3017 ;;		_SetLine
  3018 ;;		_delay_tenth_s
  3019 ;;		_grabLeftIR
  3020 ;;		_grabRightIR
  3021 ;;		_sprintf
  3022 ;;		_stop
  3023 ;;		_turnLeft
  3024 ;;		_turnRight
  3025 ;; This function is called by:
  3026 ;;		_main
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           	psect	text9
  3031  000AF2                     __ptext9:
  3032                           	opt stack 0
  3033  000AF2                     _ScanWithRange:
  3034                           	opt stack 23
  3035                           
  3036                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3037                           
  3038                           ;incstack = 0
  3039  000AF2  C0F5  F0B4         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3040  000AF6  C0F6  F0B5         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3041  000AFA  C0F7  F0B6         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3042  000AFE  C0F8  F0B7         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3043                           
  3044                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3045  000B02  0E00               	movlw	0
  3046  000B04  0100               	movlb	0	; () banked
  3047  000B06  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3048  000B08  0E00               	movlw	0
  3049  000B0A  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3050                           
  3051                           ;Movement.c: 104: unsigned int RightFlag=0;
  3052  000B0C  0E00               	movlw	0
  3053  000B0E  0100               	movlb	0	; () banked
  3054  000B10  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3055  000B12  0E00               	movlw	0
  3056  000B14  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3057                           
  3058                           ;Movement.c: 105: char buf[40];
  3059                           ;Movement.c: 106: unsigned int i=0;
  3060  000B16  0E00               	movlw	0
  3061  000B18  0100               	movlb	0	; () banked
  3062  000B1A  6FAD               	movwf	(ScanWithRange@i+1)& (0+255),b
  3063  000B1C  0E00               	movlw	0
  3064  000B1E  6FAC               	movwf	ScanWithRange@i& (0+255),b
  3065                           
  3066                           ;Movement.c: 107: unsigned int n=0;
  3067  000B20  0E00               	movlw	0
  3068  000B22  0100               	movlb	0	; () banked
  3069  000B24  6FA9               	movwf	(ScanWithRange@n+1)& (0+255),b
  3070  000B26  0E00               	movlw	0
  3071  000B28  6FA8               	movwf	ScanWithRange@n& (0+255),b
  3072                           
  3073                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  3074  000B2A  0E00               	movlw	0
  3075  000B2C  0100               	movlb	0	; () banked
  3076  000B2E  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3077                           
  3078                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3079  000B30  0E03               	movlw	3
  3080  000B32  0100               	movlb	0	; () banked
  3081  000B34  6FAF               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3082  000B36  0EE8               	movlw	232
  3083  000B38  6FAE               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3084                           
  3085                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3086  000B3A  0E28               	movlw	40
  3087  000B3C  0100               	movlb	0	; () banked
  3088  000B3E  6FB0               	movwf	ScanWithRange@MotorPower& (0+255),b
  3089                           
  3090                           ;Movement.c: 114: const unsigned char LeftFlick=2;
  3091  000B40  0E02               	movlw	2
  3092  000B42  0100               	movlb	0	; () banked
  3093  000B44  6FAA               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3094                           
  3095                           ;Movement.c: 116: const unsigned char MiniLeftFlick=1;
  3096  000B46  0E01               	movlw	1
  3097  000B48  0100               	movlb	0	; () banked
  3098  000B4A  6FAB               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;Movement.c: 121: (MoveType[*Move]) = 2;
  3102  000B4C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3103  000B50  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3104  000B54  50DF               	movf	indf2,w,c
  3105  000B56  0100               	movlb	0	; () banked
  3106  000B58  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3107  000B5A  0100               	movlb	0	; () banked
  3108  000B5C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3109  000B5E  0D01               	mullw	1
  3110  000B60  50F3               	movf	prodl,w,c
  3111  000B62  0100               	movlb	0	; () banked
  3112  000B64  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3113  000B66  6ED9               	movwf	fsr2l,c
  3114  000B68  50F4               	movf	prodh,w,c
  3115  000B6A  0100               	movlb	0	; () banked
  3116  000B6C  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3117  000B6E  6EDA               	movwf	fsr2h,c
  3118  000B70  0E02               	movlw	2
  3119  000B72  6EDF               	movwf	indf2,c
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;Movement.c: 122: (MoveTime[*Move]) = -3;
  3123  000B74  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3124  000B78  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3125  000B7C  50DF               	movf	indf2,w,c
  3126  000B7E  0100               	movlb	0	; () banked
  3127  000B80  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3128  000B82  0100               	movlb	0	; () banked
  3129  000B84  517B               	movf	??_ScanWithRange& (0+255),w,b
  3130  000B86  0D02               	mullw	2
  3131  000B88  50F3               	movf	prodl,w,c
  3132  000B8A  0100               	movlb	0	; () banked
  3133  000B8C  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3134  000B8E  6ED9               	movwf	fsr2l,c
  3135  000B90  50F4               	movf	prodh,w,c
  3136  000B92  0100               	movlb	0	; () banked
  3137  000B94  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3138  000B96  6EDA               	movwf	fsr2h,c
  3139  000B98  0EFD               	movlw	253
  3140  000B9A  6EDE               	movwf	postinc2,c
  3141  000B9C  0EFF               	movlw	255
  3142  000B9E  6EDD               	movwf	postdec2,c
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;Movement.c: 123: *Move = *Move+1;
  3146  000BA0  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3147  000BA4  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3148  000BA8  50DF               	movf	indf2,w,c
  3149  000BAA  0100               	movlb	0	; () banked
  3150  000BAC  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3151  000BAE  0100               	movlb	0	; () banked
  3152  000BB0  297B               	incf	??_ScanWithRange& (0+255),w,b
  3153  000BB2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3154  000BB6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3155  000BBA  6EDF               	movwf	indf2,c
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;Movement.c: 124: turnLeft(mL,mR, 100);
  3159  000BBC  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3160  000BC0  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3161  000BC4  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3162  000BC8  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3163  000BCC  0E64               	movlw	100
  3164  000BCE  0100               	movlb	0	; () banked
  3165  000BD0  6F6B               	movwf	turnLeft@power& (0+255),b
  3166  000BD2  ECC2  F00D         	call	_turnLeft	;wreg free
  3167                           
  3168                           ;Movement.c: 125: delay_tenth_s(LeftFlick);
  3169  000BD6  0100               	movlb	0	; () banked
  3170  000BD8  51AA               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3171  000BDA  ECE1  F00D         	call	_delay_tenth_s
  3172                           
  3173                           ;Movement.c: 126: stop(mL,mR);
  3174  000BDE  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3175  000BE2  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3176  000BE6  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3177  000BEA  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3178  000BEE  EC5C  F00B         	call	_stop	;wreg free
  3179                           
  3180                           ;Movement.c: 129: turnRight(mL,mR, MotorPower);
  3181  000BF2  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3182  000BF6  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3183  000BFA  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3184  000BFE  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3185  000C02  C0B0  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3186  000C06  ECA3  F00D         	call	_turnRight	;wreg free
  3187                           
  3188                           ;Movement.c: 132: TMR0L = 0;
  3189  000C0A  0E00               	movlw	0
  3190  000C0C  6ED6               	movwf	4054,c	;volatile
  3191                           
  3192                           ;Movement.c: 133: TMR0H = 0;
  3193  000C0E  0E00               	movlw	0
  3194  000C10  6ED7               	movwf	4055,c	;volatile
  3195                           
  3196                           ;Movement.c: 134: T0CONbits.TMR0ON=1;
  3197  000C12  8ED5               	bsf	4053,7,c	;volatile
  3198                           
  3199                           ;Movement.c: 136: for (i=1; i<=loops; i++) {
  3200  000C14  0E00               	movlw	0
  3201  000C16  0100               	movlb	0	; () banked
  3202  000C18  6FAD               	movwf	(ScanWithRange@i+1)& (0+255),b
  3203  000C1A  0E01               	movlw	1
  3204  000C1C  6FAC               	movwf	ScanWithRange@i& (0+255),b
  3205  000C1E  D190               	goto	l3280
  3206  000C20                     l3196:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;Movement.c: 139: SensorResult[0]=grabLeftIR();
  3210  000C20  ECA6  F00C         	call	_grabLeftIR	;wreg free
  3211  000C24  C024  F0B4         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3212  000C28  C025  F0B5         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3213                           
  3214                           ;Movement.c: 140: SensorResult[1]=grabRightIR();
  3215  000C2C  EC6D  F00C         	call	_grabRightIR	;wreg free
  3216  000C30  C024  F0B6         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3217  000C34  C025  F0B7         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3218                           
  3219                           ;Movement.c: 144: CAP1BUFH=0;
  3220  000C38  0E00               	movlw	0
  3221  000C3A  6E69               	movwf	3945,c	;volatile
  3222                           
  3223                           ;Movement.c: 145: CAP1BUFL=0;
  3224  000C3C  0E00               	movlw	0
  3225  000C3E  6E68               	movwf	3944,c	;volatile
  3226                           
  3227                           ;Movement.c: 146: CAP2BUFH=0;
  3228  000C40  0E00               	movlw	0
  3229  000C42  6E67               	movwf	3943,c	;volatile
  3230                           
  3231                           ;Movement.c: 147: CAP2BUFL=0;
  3232  000C44  0E00               	movlw	0
  3233  000C46  6E66               	movwf	3942,c	;volatile
  3234                           
  3235                           ;Movement.c: 151: SendLCD(0b00000001,0);
  3236  000C48  0E00               	movlw	0
  3237  000C4A  6E28               	movwf	SendLCD@type,c
  3238  000C4C  0E01               	movlw	1
  3239  000C4E  EC65  F00E         	call	_SendLCD
  3240                           
  3241                           ;Movement.c: 152: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3242  000C52  0E21               	movlw	33
  3243  000C54                     u3097:
  3244  000C54  2EE8               	decfsz	wreg,f,c
  3245  000C56  D7FE               	goto	u3097
  3246  000C58  F000               	nop	
  3247                           
  3248                           ;Movement.c: 153: SendLCD(0b00000010,0);
  3249  000C5A  0E00               	movlw	0
  3250  000C5C  6E28               	movwf	SendLCD@type,c
  3251  000C5E  0E02               	movlw	2
  3252  000C60  EC65  F00E         	call	_SendLCD
  3253                           
  3254                           ;Movement.c: 154: _delay((unsigned long)((2)*(8000000/4000.0)));
  3255  000C64  0E06               	movlw	6
  3256  000C66  0100               	movlb	0	; () banked
  3257  000C68  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3258  000C6A  0E30               	movlw	48
  3259  000C6C                     u3107:
  3260  000C6C  2EE8               	decfsz	wreg,f,c
  3261  000C6E  D7FE               	goto	u3107
  3262  000C70  2F7B               	decfsz	??_ScanWithRange& (0+255),f,b
  3263  000C72  D7FC               	goto	u3107
  3264  000C74  D000               	nop2	
  3265                           
  3266                           ;Movement.c: 155: SetLine(1);
  3267  000C76  0E01               	movlw	1
  3268  000C78  EC4D  F00E         	call	_SetLine
  3269                           
  3270                           ;Movement.c: 156: LCD_String("     ScanIR");
  3271  000C7C  0E2D               	movlw	low STR_1
  3272  000C7E  6E2A               	movwf	LCD_String@string,c
  3273  000C80  0E03               	movlw	high STR_1
  3274  000C82  6E2B               	movwf	LCD_String@string+1,c
  3275  000C84  ECDF  F00C         	call	_LCD_String	;wreg free
  3276                           
  3277                           ;Movement.c: 157: SetLine(2);
  3278  000C88  0E02               	movlw	2
  3279  000C8A  EC4D  F00E         	call	_SetLine
  3280                           
  3281                           ;Movement.c: 158: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3282  000C8E  0E80               	movlw	low ScanWithRange@buf
  3283  000C90  6E30               	movwf	sprintf@sp,c
  3284  000C92  0E00               	movlw	high ScanWithRange@buf
  3285  000C94  6E31               	movwf	sprintf@sp+1,c
  3286  000C96  0E0C               	movlw	low (STR_6+1)
  3287  000C98  6E32               	movwf	sprintf@f,c
  3288  000C9A  0E03               	movlw	high (STR_6+1)
  3289  000C9C  6E33               	movwf	sprintf@f+1,c
  3290  000C9E  C0B4  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3291  000CA2  C0B5  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3292  000CA6  C0B6  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3293  000CAA  C0B7  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3294  000CAE  ECFE  F007         	call	_sprintf	;wreg free
  3295                           
  3296                           ;Movement.c: 159: LCD_String(buf);
  3297  000CB2  0E80               	movlw	low ScanWithRange@buf
  3298  000CB4  6E2A               	movwf	LCD_String@string,c
  3299  000CB6  0E00               	movlw	high ScanWithRange@buf
  3300  000CB8  6E2B               	movwf	LCD_String@string+1,c
  3301  000CBA  ECDF  F00C         	call	_LCD_String	;wreg free
  3302                           
  3303                           ;Movement.c: 161: if (SensorResult[1]>DirectionFoundThreshold) {
  3304  000CBE  0100               	movlb	0	; () banked
  3305  000CC0  51B6               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3306  000CC2  0100               	movlb	0	; () banked
  3307  000CC4  5DAE               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3308  000CC6  0100               	movlb	0	; () banked
  3309  000CC8  51B7               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3310  000CCA  0100               	movlb	0	; () banked
  3311  000CCC  59AF               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3312  000CCE  B0D8               	btfsc	status,0,c
  3313  000CD0  D00E               	goto	l221
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;Movement.c: 162: RightFlag= (TMR0H<<8)+TMR0L;
  3317  000CD2  50D7               	movf	4055,w,c	;volatile
  3318  000CD4  0100               	movlb	0	; () banked
  3319  000CD6  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3320  000CD8  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3321  000CDA  50D6               	movf	4054,w,c	;volatile
  3322  000CDC  0100               	movlb	0	; () banked
  3323  000CDE  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3324  000CE0  0100               	movlb	0	; () banked
  3325  000CE2  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3326  000CE4  0E00               	movlw	0
  3327  000CE6  0100               	movlb	0	; () banked
  3328  000CE8  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3329  000CEA  0100               	movlb	0	; () banked
  3330  000CEC  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3331  000CEE                     l221:
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;Movement.c: 163: }
  3335                           ;Movement.c: 165: if (SensorResult[0]>DirectionFoundThreshold) {
  3336  000CEE  0100               	movlb	0	; () banked
  3337  000CF0  51B4               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3338  000CF2  0100               	movlb	0	; () banked
  3339  000CF4  5DAE               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3340  000CF6  0100               	movlb	0	; () banked
  3341  000CF8  51B5               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3342  000CFA  0100               	movlb	0	; () banked
  3343  000CFC  59AF               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3344  000CFE  B0D8               	btfsc	status,0,c
  3345  000D00  D00E               	goto	l222
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;Movement.c: 166: LeftFlag=(TMR0H<<8)+TMR0L;
  3349  000D02  50D7               	movf	4055,w,c	;volatile
  3350  000D04  0100               	movlb	0	; () banked
  3351  000D06  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3352  000D08  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3353  000D0A  50D6               	movf	4054,w,c	;volatile
  3354  000D0C  0100               	movlb	0	; () banked
  3355  000D0E  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3356  000D10  0100               	movlb	0	; () banked
  3357  000D12  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3358  000D14  0E00               	movlw	0
  3359  000D16  0100               	movlb	0	; () banked
  3360  000D18  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3361  000D1A  0100               	movlb	0	; () banked
  3362  000D1C  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3363  000D1E                     l222:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;Movement.c: 167: }
  3367                           ;Movement.c: 174: if (LeftFlag>0) {
  3368  000D1E  0100               	movlb	0	; () banked
  3369  000D20  51B1               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3370  000D22  0100               	movlb	0	; () banked
  3371  000D24  11B2               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3372  000D26  B4D8               	btfsc	status,2,c
  3373  000D28  D0FF               	goto	l3272
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;Movement.c: 177: if (RightFlag>0) {
  3377  000D2A  0100               	movlb	0	; () banked
  3378  000D2C  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3379  000D2E  0100               	movlb	0	; () banked
  3380  000D30  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3381  000D32  B4D8               	btfsc	status,2,c
  3382  000D34  D09A               	goto	l3254
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;Movement.c: 178: TimeAboveThreshold = LeftFlag - RightFlag;
  3386  000D36  0100               	movlb	0	; () banked
  3387  000D38  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3388  000D3A  0800               	sublw	0
  3389  000D3C  0100               	movlb	0	; () banked
  3390  000D3E  25B1               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3391  000D40  0100               	movlb	0	; () banked
  3392  000D42  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;Movement.c: 179: TMR0L = 0;
  3396  000D44  0E00               	movlw	0
  3397  000D46  6ED6               	movwf	4054,c	;volatile
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;Movement.c: 180: TMR0H = 0;
  3401  000D48  0E00               	movlw	0
  3402  000D4A  6ED7               	movwf	4055,c	;volatile
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;Movement.c: 181: stop(mL,mR);
  3406  000D4C  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3407  000D50  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3408  000D54  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3409  000D58  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3410  000D5C  EC5C  F00B         	call	_stop	;wreg free
  3411                           
  3412                           ;Movement.c: 182: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3413  000D60  D00C               	goto	l3238
  3414  000D62                     l3236:
  3415                           
  3416                           ;Movement.c: 183: turnLeft(mL,mR, MotorPower);
  3417  000D62  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3418  000D66  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3419  000D6A  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3420  000D6E  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3421  000D72  C0B0  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3422  000D76  ECC2  F00D         	call	_turnLeft	;wreg free
  3423  000D7A                     l3238:
  3424  000D7A  0100               	movlb	0	; () banked
  3425  000D7C  90D8               	bcf	status,0,c
  3426  000D7E  31B3               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3427  000D80  0100               	movlb	0	; () banked
  3428  000D82  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3429  000D84  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3430  000D86  50D6               	movf	4054,w,c	;volatile
  3431  000D88  CFD7 F07D          	movff	4055,??_ScanWithRange+2	;volatile
  3432  000D8C  0100               	movlb	0	; () banked
  3433  000D8E  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3434  000D90  C07D  F07E         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3435  000D94  0100               	movlb	0	; () banked
  3436  000D96  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3437  000D98  0100               	movlb	0	; () banked
  3438  000D9A  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3439  000D9C  0E00               	movlw	0
  3440  000D9E  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3441  000DA0  0100               	movlb	0	; () banked
  3442  000DA2  517B               	movf	??_ScanWithRange& (0+255),w,b
  3443  000DA4  0100               	movlb	0	; () banked
  3444  000DA6  5D7D               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3445  000DA8  0100               	movlb	0	; () banked
  3446  000DAA  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3447  000DAC  0A80               	xorlw	128
  3448  000DAE  0100               	movlb	0	; () banked
  3449  000DB0  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3450  000DB2  0100               	movlb	0	; () banked
  3451  000DB4  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3452  000DB6  0A80               	xorlw	128
  3453  000DB8  0100               	movlb	0	; () banked
  3454  000DBA  597F               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3455  000DBC  A0D8               	btfss	status,0,c
  3456  000DBE  D7D1               	goto	l3236
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;Movement.c: 184: }
  3460                           ;Movement.c: 185: T0CONbits.TMR0ON=0;
  3461  000DC0  9ED5               	bcf	4053,7,c	;volatile
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;Movement.c: 186: stop(mL,mR);
  3465  000DC2  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3466  000DC6  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3467  000DCA  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3468  000DCE  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3469  000DD2  EC5C  F00B         	call	_stop	;wreg free
  3470                           
  3471                           ;Movement.c: 188: (MoveType[*Move]) = 1;
  3472  000DD6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3473  000DDA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3474  000DDE  50DF               	movf	indf2,w,c
  3475  000DE0  0100               	movlb	0	; () banked
  3476  000DE2  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3477  000DE4  0100               	movlb	0	; () banked
  3478  000DE6  517B               	movf	??_ScanWithRange& (0+255),w,b
  3479  000DE8  0D01               	mullw	1
  3480  000DEA  50F3               	movf	prodl,w,c
  3481  000DEC  0100               	movlb	0	; () banked
  3482  000DEE  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3483  000DF0  6ED9               	movwf	fsr2l,c
  3484  000DF2  50F4               	movf	prodh,w,c
  3485  000DF4  0100               	movlb	0	; () banked
  3486  000DF6  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3487  000DF8  6EDA               	movwf	fsr2h,c
  3488  000DFA  0E01               	movlw	1
  3489  000DFC  6EDF               	movwf	indf2,c
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;Movement.c: 189: (MoveTime[*Move]) = RightFlag + (TimeAboveThreshold>>1);
  3493  000DFE  C0B3  F07B         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3494  000E02  0100               	movlb	0	; () banked
  3495  000E04  90D8               	bcf	status,0,c
  3496  000E06  337B               	rrcf	??_ScanWithRange& (0+255),f,b
  3497  000E08  0100               	movlb	0	; () banked
  3498  000E0A  517B               	movf	??_ScanWithRange& (0+255),w,b
  3499  000E0C  0100               	movlb	0	; () banked
  3500  000E0E  25B8               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3501  000E10  0100               	movlb	0	; () banked
  3502  000E12  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3503  000E14  0E00               	movlw	0
  3504  000E16  0100               	movlb	0	; () banked
  3505  000E18  21B9               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3506  000E1A  0100               	movlb	0	; () banked
  3507  000E1C  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3508  000E1E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3509  000E22  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3510  000E26  50DF               	movf	indf2,w,c
  3511  000E28  0100               	movlb	0	; () banked
  3512  000E2A  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3513  000E2C  0100               	movlb	0	; () banked
  3514  000E2E  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3515  000E30  0D02               	mullw	2
  3516  000E32  50F3               	movf	prodl,w,c
  3517  000E34  0100               	movlb	0	; () banked
  3518  000E36  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3519  000E38  6ED9               	movwf	fsr2l,c
  3520  000E3A  50F4               	movf	prodh,w,c
  3521  000E3C  0100               	movlb	0	; () banked
  3522  000E3E  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3523  000E40  6EDA               	movwf	fsr2h,c
  3524  000E42  C07C  FFDE         	movff	??_ScanWithRange+1,postinc2
  3525  000E46  C07D  FFDD         	movff	??_ScanWithRange+2,postdec2
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;Movement.c: 190: *Move = *Move+1;
  3529  000E4A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3530  000E4E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3531  000E52  50DF               	movf	indf2,w,c
  3532  000E54  0100               	movlb	0	; () banked
  3533  000E56  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3534  000E58  0100               	movlb	0	; () banked
  3535  000E5A  297B               	incf	??_ScanWithRange& (0+255),w,b
  3536  000E5C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3537  000E60  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3538  000E64  6EDF               	movwf	indf2,c
  3539  000E66                     l3248:
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;Movement.c: 192: return 2;
  3543  000E66  0E02               	movlw	2
  3544                           
  3545                           ; BSR set to: 0
  3546  000E68  0012               	return	
  3547  000E6A                     l3254:
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Movement.c: 195: (MoveType[*Move]) = 2;
  3551  000E6A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3552  000E6E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3553  000E72  50DF               	movf	indf2,w,c
  3554  000E74  0100               	movlb	0	; () banked
  3555  000E76  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3556  000E78  0100               	movlb	0	; () banked
  3557  000E7A  517B               	movf	??_ScanWithRange& (0+255),w,b
  3558  000E7C  0D01               	mullw	1
  3559  000E7E  50F3               	movf	prodl,w,c
  3560  000E80  0100               	movlb	0	; () banked
  3561  000E82  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3562  000E84  6ED9               	movwf	fsr2l,c
  3563  000E86  50F4               	movf	prodh,w,c
  3564  000E88  0100               	movlb	0	; () banked
  3565  000E8A  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3566  000E8C  6EDA               	movwf	fsr2h,c
  3567  000E8E  0E02               	movlw	2
  3568  000E90  6EDF               	movwf	indf2,c
  3569                           
  3570                           ;Movement.c: 196: (MoveTime[*Move]) = 1;
  3571  000E92  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3572  000E96  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3573  000E9A  50DF               	movf	indf2,w,c
  3574  000E9C  0100               	movlb	0	; () banked
  3575  000E9E  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3576  000EA0  0100               	movlb	0	; () banked
  3577  000EA2  517B               	movf	??_ScanWithRange& (0+255),w,b
  3578  000EA4  0D02               	mullw	2
  3579  000EA6  50F3               	movf	prodl,w,c
  3580  000EA8  0100               	movlb	0	; () banked
  3581  000EAA  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3582  000EAC  6ED9               	movwf	fsr2l,c
  3583  000EAE  50F4               	movf	prodh,w,c
  3584  000EB0  0100               	movlb	0	; () banked
  3585  000EB2  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3586  000EB4  6EDA               	movwf	fsr2h,c
  3587  000EB6  0E01               	movlw	1
  3588  000EB8  6EDE               	movwf	postinc2,c
  3589  000EBA  0E00               	movlw	0
  3590  000EBC  6EDD               	movwf	postdec2,c
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;Movement.c: 197: *Move = *Move+1;
  3594  000EBE  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3595  000EC2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3596  000EC6  50DF               	movf	indf2,w,c
  3597  000EC8  0100               	movlb	0	; () banked
  3598  000ECA  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3599  000ECC  0100               	movlb	0	; () banked
  3600  000ECE  297B               	incf	??_ScanWithRange& (0+255),w,b
  3601  000ED0  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3602  000ED4  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3603  000ED8  6EDF               	movwf	indf2,c
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;Movement.c: 198: stop(mL,mR);
  3607  000EDA  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3608  000EDE  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3609  000EE2  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3610  000EE6  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3611  000EEA  EC5C  F00B         	call	_stop	;wreg free
  3612                           
  3613                           ;Movement.c: 199: turnLeft(mL,mR,100);
  3614  000EEE  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3615  000EF2  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3616  000EF6  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3617  000EFA  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3618  000EFE  0E64               	movlw	100
  3619  000F00  0100               	movlb	0	; () banked
  3620  000F02  6F6B               	movwf	turnLeft@power& (0+255),b
  3621  000F04  ECC2  F00D         	call	_turnLeft	;wreg free
  3622                           
  3623                           ;Movement.c: 200: delay_tenth_s(MiniLeftFlick);
  3624  000F08  0100               	movlb	0	; () banked
  3625  000F0A  51AB               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3626  000F0C  ECE1  F00D         	call	_delay_tenth_s
  3627                           
  3628                           ;Movement.c: 201: T0CONbits.TMR0ON=0;
  3629  000F10  9ED5               	bcf	4053,7,c	;volatile
  3630                           
  3631                           ;Movement.c: 202: stop(mL,mR);
  3632  000F12  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3633  000F16  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3634  000F1A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3635  000F1E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3636  000F22  EC5C  F00B         	call	_stop	;wreg free
  3637  000F26  D79F               	goto	l3248
  3638  000F28                     l3272:
  3639                           
  3640                           ;Movement.c: 204: }
  3641                           ;Movement.c: 205: }
  3642                           ;Movement.c: 207: if (*RFID_Read==1) {
  3643  000F28  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3644  000F2C  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3645  000F30  04DE               	decf	postinc2,w,c
  3646  000F32  A4D8               	btfss	status,2,c
  3647  000F34  D002               	goto	l3278
  3648                           
  3649                           ;Movement.c: 208: return 2;
  3650  000F36  0E02               	movlw	2
  3651  000F38  0012               	return	
  3652  000F3A                     l3278:
  3653  000F3A  0100               	movlb	0	; () banked
  3654  000F3C  4BAC               	infsnz	ScanWithRange@i& (0+255),f,b
  3655  000F3E  2BAD               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3656  000F40                     l3280:
  3657                           
  3658                           ; BSR set to: 0
  3659  000F40  0100               	movlb	0	; () banked
  3660  000F42  51AC               	movf	ScanWithRange@i& (0+255),w,b
  3661  000F44  0100               	movlb	0	; () banked
  3662  000F46  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3663  000F48  0100               	movlb	0	; () banked
  3664  000F4A  51AD               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3665  000F4C  0100               	movlb	0	; () banked
  3666  000F4E  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3667  000F50  B0D8               	btfsc	status,0,c
  3668  000F52  D666               	goto	l3196
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;Movement.c: 209: }
  3672                           ;Movement.c: 210: }
  3673                           ;Movement.c: 213: (MoveType[*Move]) = 2;
  3674                           
  3675                           ; BSR set to: 0
  3676  000F54  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3677  000F58  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3678  000F5C  50DF               	movf	indf2,w,c
  3679  000F5E  0100               	movlb	0	; () banked
  3680  000F60  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3681  000F62  0100               	movlb	0	; () banked
  3682  000F64  517B               	movf	??_ScanWithRange& (0+255),w,b
  3683  000F66  0D01               	mullw	1
  3684  000F68  50F3               	movf	prodl,w,c
  3685  000F6A  0100               	movlb	0	; () banked
  3686  000F6C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3687  000F6E  6ED9               	movwf	fsr2l,c
  3688  000F70  50F4               	movf	prodh,w,c
  3689  000F72  0100               	movlb	0	; () banked
  3690  000F74  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3691  000F76  6EDA               	movwf	fsr2h,c
  3692  000F78  0E02               	movlw	2
  3693  000F7A  6EDF               	movwf	indf2,c
  3694                           
  3695                           ;Movement.c: 214: (MoveTime[*Move]) = -2;
  3696  000F7C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3697  000F80  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3698  000F84  50DF               	movf	indf2,w,c
  3699  000F86  0100               	movlb	0	; () banked
  3700  000F88  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3701  000F8A  0100               	movlb	0	; () banked
  3702  000F8C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3703  000F8E  0D02               	mullw	2
  3704  000F90  50F3               	movf	prodl,w,c
  3705  000F92  0100               	movlb	0	; () banked
  3706  000F94  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3707  000F96  6ED9               	movwf	fsr2l,c
  3708  000F98  50F4               	movf	prodh,w,c
  3709  000F9A  0100               	movlb	0	; () banked
  3710  000F9C  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3711  000F9E  6EDA               	movwf	fsr2h,c
  3712  000FA0  0EFE               	movlw	254
  3713  000FA2  6EDE               	movwf	postinc2,c
  3714  000FA4  0EFF               	movlw	255
  3715  000FA6  6EDD               	movwf	postdec2,c
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;Movement.c: 215: *Move = *Move+1;
  3719  000FA8  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3720  000FAC  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3721  000FB0  50DF               	movf	indf2,w,c
  3722  000FB2  0100               	movlb	0	; () banked
  3723  000FB4  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3724  000FB6  0100               	movlb	0	; () banked
  3725  000FB8  297B               	incf	??_ScanWithRange& (0+255),w,b
  3726  000FBA  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3727  000FBE  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3728  000FC2  6EDF               	movwf	indf2,c
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;Movement.c: 216: turnRight(mL,mR, 100);
  3732  000FC4  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3733  000FC8  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3734  000FCC  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3735  000FD0  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3736  000FD4  0E64               	movlw	100
  3737  000FD6  0100               	movlb	0	; () banked
  3738  000FD8  6F6B               	movwf	turnRight@power& (0+255),b
  3739  000FDA  ECA3  F00D         	call	_turnRight	;wreg free
  3740                           
  3741                           ;Movement.c: 217: delay_tenth_s(2);
  3742  000FDE  0E02               	movlw	2
  3743  000FE0  ECE1  F00D         	call	_delay_tenth_s
  3744                           
  3745                           ;Movement.c: 218: stop(mL,mR);
  3746  000FE4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3747  000FE8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3748  000FEC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3749  000FF0  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3750  000FF4  EC5C  F00B         	call	_stop	;wreg free
  3751                           
  3752                           ;Movement.c: 219: return -1;
  3753  000FF8  0EFF               	movlw	255
  3754  000FFA  0012               	return	
  3755  000FFC                     __end_of_ScanWithRange:
  3756                           	opt stack 0
  3757                           tblptru	equ	0xFF8
  3758                           prodh	equ	0xFF4
  3759                           prodl	equ	0xFF3
  3760                           intcon	equ	0xFF2
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           indf1	equ	0xFE7
  3764                           plusw1	equ	0xFE3
  3765                           fsr1h	equ	0xFE2
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           postdec2	equ	0xFDD
  3770                           plusw2	equ	0xFDB
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function _turnRight *****************
  3776 ;; Defined at:
  3777 ;;		line 98 in file "dc_motor.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3780 ;;		 -> main@mL(9), 
  3781 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3782 ;;		 -> main@mR(9), 
  3783 ;;  power           1   11[BANK0 ] unsigned char 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;		None
  3786 ;; Return value:  Size  Location     Type
  3787 ;;		None               void
  3788 ;; Registers used:
  3789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3795 ;;      Params:         0       5       0       0
  3796 ;;      Locals:         0       0       0       0
  3797 ;;      Temps:          0       0       0       0
  3798 ;;      Totals:         0       5       0       0
  3799 ;;Total ram usage:        5 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    6
  3802 ;; This function calls:
  3803 ;;		_fullSpeedAhead
  3804 ;; This function is called by:
  3805 ;;		_ScanWithRange
  3806 ;;		_main
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           	psect	text10
  3811  001B46                     __ptext10:
  3812                           	opt stack 0
  3813  001B46                     _turnRight:
  3814                           	opt stack 24
  3815                           
  3816                           ;dc_motor.c: 102: mL->direction=0;
  3817                           
  3818                           ;incstack = 0
  3819  001B46  0100               	movlb	0	; () banked
  3820  001B48  EE20 F001          	lfsr	2,1
  3821  001B4C  5167               	movf	turnRight@mL& (0+255),w,b
  3822  001B4E  26D9               	addwf	fsr2l,f,c
  3823  001B50  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3824  001B52  22DA               	addwfc	fsr2h,f,c
  3825  001B54  0E00               	movlw	0
  3826  001B56  6EDF               	movwf	indf2,c
  3827                           
  3828                           ;dc_motor.c: 103: mR->direction=1;
  3829  001B58  0100               	movlb	0	; () banked
  3830  001B5A  EE20 F001          	lfsr	2,1
  3831  001B5E  5169               	movf	turnRight@mR& (0+255),w,b
  3832  001B60  26D9               	addwf	fsr2l,f,c
  3833  001B62  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3834  001B64  22DA               	addwfc	fsr2h,f,c
  3835  001B66  0E01               	movlw	1
  3836  001B68  6EDF               	movwf	indf2,c
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3840  001B6A  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3841  001B6E  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3842  001B72  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3843  001B76  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3844  001B7A  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3845  001B7E  EC2D  F00C         	call	_fullSpeedAhead	;wreg free
  3846  001B82  0012               	return		;funcret
  3847  001B84                     __end_of_turnRight:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           prodh	equ	0xFF4
  3851                           prodl	equ	0xFF3
  3852                           intcon	equ	0xFF2
  3853                           postinc0	equ	0xFEE
  3854                           wreg	equ	0xFE8
  3855                           indf1	equ	0xFE7
  3856                           plusw1	equ	0xFE3
  3857                           fsr1h	equ	0xFE2
  3858                           fsr1l	equ	0xFE1
  3859                           indf2	equ	0xFDF
  3860                           postinc2	equ	0xFDE
  3861                           postdec2	equ	0xFDD
  3862                           plusw2	equ	0xFDB
  3863                           fsr2h	equ	0xFDA
  3864                           fsr2l	equ	0xFD9
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _turnLeft *****************
  3868 ;; Defined at:
  3869 ;;		line 87 in file "dc_motor.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3872 ;;		 -> main@mL(9), 
  3873 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3874 ;;		 -> main@mR(9), 
  3875 ;;  power           1   11[BANK0 ] unsigned char 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;		None               void
  3880 ;; Registers used:
  3881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3887 ;;      Params:         0       5       0       0
  3888 ;;      Locals:         0       0       0       0
  3889 ;;      Temps:          0       0       0       0
  3890 ;;      Totals:         0       5       0       0
  3891 ;;Total ram usage:        5 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    6
  3894 ;; This function calls:
  3895 ;;		_fullSpeedAhead
  3896 ;; This function is called by:
  3897 ;;		_ScanWithRange
  3898 ;;		_main
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text11
  3903  001B84                     __ptext11:
  3904                           	opt stack 0
  3905  001B84                     _turnLeft:
  3906                           	opt stack 24
  3907                           
  3908                           ;dc_motor.c: 91: mL->direction=1;
  3909                           
  3910                           ;incstack = 0
  3911  001B84  0100               	movlb	0	; () banked
  3912  001B86  EE20 F001          	lfsr	2,1
  3913  001B8A  5167               	movf	turnLeft@mL& (0+255),w,b
  3914  001B8C  26D9               	addwf	fsr2l,f,c
  3915  001B8E  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3916  001B90  22DA               	addwfc	fsr2h,f,c
  3917  001B92  0E01               	movlw	1
  3918  001B94  6EDF               	movwf	indf2,c
  3919                           
  3920                           ;dc_motor.c: 92: mR->direction=0;
  3921  001B96  0100               	movlb	0	; () banked
  3922  001B98  EE20 F001          	lfsr	2,1
  3923  001B9C  5169               	movf	turnLeft@mR& (0+255),w,b
  3924  001B9E  26D9               	addwf	fsr2l,f,c
  3925  001BA0  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3926  001BA2  22DA               	addwfc	fsr2h,f,c
  3927  001BA4  0E00               	movlw	0
  3928  001BA6  6EDF               	movwf	indf2,c
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3932  001BA8  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3933  001BAC  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3934  001BB0  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3935  001BB4  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3936  001BB8  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3937  001BBC  EC2D  F00C         	call	_fullSpeedAhead	;wreg free
  3938  001BC0  0012               	return		;funcret
  3939  001BC2                     __end_of_turnLeft:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           prodh	equ	0xFF4
  3943                           prodl	equ	0xFF3
  3944                           intcon	equ	0xFF2
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           indf1	equ	0xFE7
  3948                           plusw1	equ	0xFE3
  3949                           fsr1h	equ	0xFE2
  3950                           fsr1l	equ	0xFE1
  3951                           indf2	equ	0xFDF
  3952                           postinc2	equ	0xFDE
  3953                           postdec2	equ	0xFDD
  3954                           plusw2	equ	0xFDB
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _fullSpeedAhead *****************
  3960 ;; Defined at:
  3961 ;;		line 108 in file "dc_motor.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3964 ;;		 -> main@mL(9), 
  3965 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3966 ;;		 -> main@mR(9), 
  3967 ;;  power           1    6[BANK0 ] unsigned char 
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;		None
  3970 ;; Return value:  Size  Location     Type
  3971 ;;		None               void
  3972 ;; Registers used:
  3973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3979 ;;      Params:         0       5       0       0
  3980 ;;      Locals:         0       0       0       0
  3981 ;;      Temps:          1       0       0       0
  3982 ;;      Totals:         1       5       0       0
  3983 ;;Total ram usage:        6 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    5
  3986 ;; This function calls:
  3987 ;;		_setMotorPWM
  3988 ;; This function is called by:
  3989 ;;		_turnLeft
  3990 ;;		_turnRight
  3991 ;;		_fullSpeedBack
  3992 ;;		_main
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text12
  3997  00185A                     __ptext12:
  3998                           	opt stack 0
  3999  00185A                     _fullSpeedAhead:
  4000                           	opt stack 24
  4001                           
  4002                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  4003                           
  4004                           ;incstack = 0
  4005  00185A  D02C               	goto	l65
  4006  00185C                     l2964:
  4007                           
  4008                           ;dc_motor.c: 112: if(mL->power<power){
  4009  00185C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4010  001860  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4011  001864  0100               	movlb	0	; () banked
  4012  001866  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4013  001868  5CDE               	subwf	postinc2,w,c
  4014  00186A  B0D8               	btfsc	status,0,c
  4015  00186C  D005               	goto	l2968
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;dc_motor.c: 113: mL->power++;
  4019  00186E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4020  001872  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4021  001876  2ADF               	incf	indf2,f,c
  4022  001878                     l2968:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;dc_motor.c: 114: }
  4026                           ;dc_motor.c: 115: if(mR->power<power){
  4027  001878  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4028  00187C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4029  001880  0100               	movlb	0	; () banked
  4030  001882  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4031  001884  5CDE               	subwf	postinc2,w,c
  4032  001886  B0D8               	btfsc	status,0,c
  4033  001888  D005               	goto	l2972
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;dc_motor.c: 116: mR->power++;
  4037  00188A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4038  00188E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4039  001892  2ADF               	incf	indf2,f,c
  4040  001894                     l2972:
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;dc_motor.c: 117: }
  4044                           ;dc_motor.c: 118: setMotorPWM(mL);
  4045  001894  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4046  001898  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4047  00189C  EC81  F009         	call	_setMotorPWM	;wreg free
  4048                           
  4049                           ;dc_motor.c: 119: setMotorPWM(mR);
  4050  0018A0  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4051  0018A4  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4052  0018A8  EC81  F009         	call	_setMotorPWM	;wreg free
  4053                           
  4054                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4055  0018AC  0E21               	movlw	33
  4056  0018AE                     u3117:
  4057  0018AE  2EE8               	decfsz	wreg,f,c
  4058  0018B0  D7FE               	goto	u3117
  4059  0018B2  F000               	nop	
  4060  0018B4                     l65:
  4061  0018B4  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4062  0018B8  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4063  0018BC  0100               	movlb	0	; () banked
  4064  0018BE  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4065  0018C0  5CDE               	subwf	postinc2,w,c
  4066  0018C2  A0D8               	btfss	status,0,c
  4067  0018C4  D7CB               	goto	l2964
  4068                           
  4069                           ; BSR set to: 0
  4070  0018C6  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4071  0018CA  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4072  0018CE  0100               	movlb	0	; () banked
  4073  0018D0  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4074  0018D2  5CDE               	subwf	postinc2,w,c
  4075  0018D4  B0D8               	btfsc	status,0,c
  4076  0018D6  0012               	return	
  4077  0018D8  D7C1               	goto	l2964
  4078  0018DA                     __end_of_fullSpeedAhead:
  4079                           	opt stack 0
  4080                           tblptru	equ	0xFF8
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           intcon	equ	0xFF2
  4084                           postinc0	equ	0xFEE
  4085                           wreg	equ	0xFE8
  4086                           indf1	equ	0xFE7
  4087                           plusw1	equ	0xFE3
  4088                           fsr1h	equ	0xFE2
  4089                           fsr1l	equ	0xFE1
  4090                           indf2	equ	0xFDF
  4091                           postinc2	equ	0xFDE
  4092                           postdec2	equ	0xFDD
  4093                           plusw2	equ	0xFDB
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _delay_tenth_s *****************
  4099 ;; Defined at:
  4100 ;;		line 32 in file "Movement.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  tenth_second    1    wreg     unsigned char 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4105 ;;  i               2   37[COMRAM] unsigned int 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;		None               void
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4115 ;;      Params:         0       0       0       0
  4116 ;;      Locals:         3       0       0       0
  4117 ;;      Temps:          1       0       0       0
  4118 ;;      Totals:         4       0       0       0
  4119 ;;Total ram usage:        4 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    3
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_ScanWithRange
  4126 ;;		_main
  4127 ;; This function uses a non-reentrant model
  4128 ;;
  4129                           
  4130                           	psect	text13
  4131  001BC2                     __ptext13:
  4132                           	opt stack 0
  4133  001BC2                     _delay_tenth_s:
  4134                           	opt stack 27
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;incstack = 0
  4138                           ;delay_tenth_s@tenth_seconds stored from wreg
  4139  001BC2  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4140                           
  4141                           ;Movement.c: 33: unsigned int i=0;
  4142  001BC4  0E00               	movlw	0
  4143  001BC6  6E27               	movwf	delay_tenth_s@i+1,c
  4144  001BC8  0E00               	movlw	0
  4145  001BCA  6E26               	movwf	delay_tenth_s@i,c
  4146                           
  4147                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4148  001BCC  0E00               	movlw	0
  4149  001BCE  6E27               	movwf	delay_tenth_s@i+1,c
  4150  001BD0  0E01               	movlw	1
  4151  001BD2  6E26               	movwf	delay_tenth_s@i,c
  4152  001BD4  D009               	goto	l2254
  4153  001BD6                     l2250:
  4154                           
  4155                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4156  001BD6  0E82               	movlw	130
  4157  001BD8  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4158  001BDA  0EDE               	movlw	222
  4159  001BDC                     u3127:
  4160  001BDC  2EE8               	decfsz	wreg,f,c
  4161  001BDE  D7FE               	goto	u3127
  4162  001BE0  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4163  001BE2  D7FC               	goto	u3127
  4164  001BE4  4A26               	infsnz	delay_tenth_s@i,f,c
  4165  001BE6  2A27               	incf	delay_tenth_s@i+1,f,c
  4166  001BE8                     l2254:
  4167  001BE8  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4168  001BEA  0D02               	mullw	2
  4169  001BEC  5026               	movf	delay_tenth_s@i,w,c
  4170  001BEE  5CF3               	subwf	prodl,w,c
  4171  001BF0  5027               	movf	delay_tenth_s@i+1,w,c
  4172  001BF2  58F4               	subwfb	prodh,w,c
  4173  001BF4  A0D8               	btfss	status,0,c
  4174  001BF6  0012               	return	
  4175  001BF8  D7EE               	goto	l2250
  4176  001BFA                     __end_of_delay_tenth_s:
  4177                           	opt stack 0
  4178                           tblptru	equ	0xFF8
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           postinc0	equ	0xFEE
  4183                           wreg	equ	0xFE8
  4184                           indf1	equ	0xFE7
  4185                           plusw1	equ	0xFE3
  4186                           fsr1h	equ	0xFE2
  4187                           fsr1l	equ	0xFE1
  4188                           indf2	equ	0xFDF
  4189                           postinc2	equ	0xFDE
  4190                           postdec2	equ	0xFDD
  4191                           plusw2	equ	0xFDB
  4192                           fsr2h	equ	0xFDA
  4193                           fsr2l	equ	0xFD9
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function _ScanIR *****************
  4197 ;; Defined at:
  4198 ;;		line 44 in file "Movement.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4201 ;;		 -> main@mL(9), 
  4202 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4203 ;;		 -> main@mR(9), 
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4206 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4207 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      unsigned char 
  4210 ;; Registers used:
  4211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4217 ;;      Params:         0       4       0       0
  4218 ;;      Locals:         0      46       0       0
  4219 ;;      Temps:          1       0       0       0
  4220 ;;      Totals:         1      50       0       0
  4221 ;;Total ram usage:       51 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    7
  4224 ;; This function calls:
  4225 ;;		_LCD_String
  4226 ;;		_SendLCD
  4227 ;;		_SetLine
  4228 ;;		_grabLeftIR
  4229 ;;		_grabRightIR
  4230 ;;		_sprintf
  4231 ;;		_stop
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text14
  4238  00143C                     __ptext14:
  4239                           	opt stack 0
  4240  00143C                     _ScanIR:
  4241                           	opt stack 23
  4242                           
  4243                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4244                           
  4245                           ;incstack = 0
  4246  00143C  C0F1  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4247  001440  C0F2  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4248  001444  C0F3  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4249  001448  C0F4  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4250                           
  4251                           ;Movement.c: 48: char buf[40];
  4252                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4253  00144C  0E03               	movlw	3
  4254  00144E  0100               	movlb	0	; () banked
  4255  001450  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4256  001452  0EE8               	movlw	232
  4257  001454  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4261  001456  ECA6  F00C         	call	_grabLeftIR	;wreg free
  4262  00145A  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4263  00145E  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4264                           
  4265                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4266  001462  EC6D  F00C         	call	_grabRightIR	;wreg free
  4267  001466  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4268  00146A  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4269                           
  4270                           ;Movement.c: 60: CAP1BUFH=0;
  4271  00146E  0E00               	movlw	0
  4272  001470  6E69               	movwf	3945,c	;volatile
  4273                           
  4274                           ;Movement.c: 61: CAP1BUFL=0;
  4275  001472  0E00               	movlw	0
  4276  001474  6E68               	movwf	3944,c	;volatile
  4277                           
  4278                           ;Movement.c: 62: CAP2BUFH=0;
  4279  001476  0E00               	movlw	0
  4280  001478  6E67               	movwf	3943,c	;volatile
  4281                           
  4282                           ;Movement.c: 63: CAP2BUFL=0;
  4283  00147A  0E00               	movlw	0
  4284  00147C  6E66               	movwf	3942,c	;volatile
  4285                           
  4286                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4287  00147E  0E00               	movlw	0
  4288  001480  6E28               	movwf	SendLCD@type,c
  4289  001482  0E01               	movlw	1
  4290  001484  EC65  F00E         	call	_SendLCD
  4291                           
  4292                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4293  001488  0E21               	movlw	33
  4294  00148A                     u3137:
  4295  00148A  2EE8               	decfsz	wreg,f,c
  4296  00148C  D7FE               	goto	u3137
  4297  00148E  F000               	nop	
  4298                           
  4299                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4300  001490  0E00               	movlw	0
  4301  001492  6E28               	movwf	SendLCD@type,c
  4302  001494  0E02               	movlw	2
  4303  001496  EC65  F00E         	call	_SendLCD
  4304                           
  4305                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4306  00149A  0E06               	movlw	6
  4307  00149C  6E39               	movwf	??_ScanIR& (0+255),c
  4308  00149E  0E30               	movlw	48
  4309  0014A0                     u3147:
  4310  0014A0  2EE8               	decfsz	wreg,f,c
  4311  0014A2  D7FE               	goto	u3147
  4312  0014A4  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4313  0014A6  D7FC               	goto	u3147
  4314  0014A8  D000               	nop2	
  4315                           
  4316                           ;Movement.c: 70: SetLine(1);
  4317  0014AA  0E01               	movlw	1
  4318  0014AC  EC4D  F00E         	call	_SetLine
  4319                           
  4320                           ;Movement.c: 71: LCD_String("     ScanIR");
  4321  0014B0  0E2D               	movlw	low STR_1
  4322  0014B2  6E2A               	movwf	LCD_String@string,c
  4323  0014B4  0E03               	movlw	high STR_1
  4324  0014B6  6E2B               	movwf	LCD_String@string+1,c
  4325  0014B8  ECDF  F00C         	call	_LCD_String	;wreg free
  4326                           
  4327                           ;Movement.c: 72: SetLine(2);
  4328  0014BC  0E02               	movlw	2
  4329  0014BE  EC4D  F00E         	call	_SetLine
  4330                           
  4331                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4332  0014C2  0E71               	movlw	low ScanIR@buf
  4333  0014C4  6E30               	movwf	sprintf@sp,c
  4334  0014C6  0E00               	movlw	high ScanIR@buf
  4335  0014C8  6E31               	movwf	sprintf@sp+1,c
  4336  0014CA  0E0C               	movlw	low (STR_6+1)
  4337  0014CC  6E32               	movwf	sprintf@f,c
  4338  0014CE  0E03               	movlw	high (STR_6+1)
  4339  0014D0  6E33               	movwf	sprintf@f+1,c
  4340  0014D2  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4341  0014D6  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4342  0014DA  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4343  0014DE  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4344  0014E2  ECFE  F007         	call	_sprintf	;wreg free
  4345                           
  4346                           ;Movement.c: 74: LCD_String(buf);
  4347  0014E6  0E71               	movlw	low ScanIR@buf
  4348  0014E8  6E2A               	movwf	LCD_String@string,c
  4349  0014EA  0E00               	movlw	high ScanIR@buf
  4350  0014EC  6E2B               	movwf	LCD_String@string+1,c
  4351  0014EE  ECDF  F00C         	call	_LCD_String	;wreg free
  4352                           
  4353                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4354                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4355  0014F2  0100               	movlb	0	; () banked
  4356  0014F4  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4357  0014F6  0100               	movlb	0	; () banked
  4358  0014F8  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4359  0014FA  0100               	movlb	0	; () banked
  4360  0014FC  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4361  0014FE  0100               	movlb	0	; () banked
  4362  001500  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4363  001502  B0D8               	btfsc	status,0,c
  4364  001504  D00C               	goto	l3164
  4365                           
  4366                           ; BSR set to: 0
  4367  001506  0100               	movlb	0	; () banked
  4368  001508  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4369  00150A  0100               	movlb	0	; () banked
  4370  00150C  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4371  00150E  0100               	movlb	0	; () banked
  4372  001510  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4373  001512  0100               	movlb	0	; () banked
  4374  001514  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4375  001516  B0D8               	btfsc	status,0,c
  4376  001518  D002               	goto	l3164
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;Movement.c: 80: return 2;
  4380  00151A  0E02               	movlw	2
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;Movement.c: 81: } else {
  4384                           
  4385                           ; BSR set to: 0
  4386  00151C  0012               	return	
  4387  00151E                     l3164:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;Movement.c: 82: stop(mL,mR);
  4391  00151E  C06D  F062         	movff	ScanIR@mL,stop@mL
  4392  001522  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4393  001526  C06F  F064         	movff	ScanIR@mR,stop@mR
  4394  00152A  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4395  00152E  EC5C  F00B         	call	_stop	;wreg free
  4396                           
  4397                           ;Movement.c: 83: return 0;
  4398  001532  0E00               	movlw	0
  4399  001534  0012               	return	
  4400  001536                     __end_of_ScanIR:
  4401                           	opt stack 0
  4402                           tblptru	equ	0xFF8
  4403                           prodh	equ	0xFF4
  4404                           prodl	equ	0xFF3
  4405                           intcon	equ	0xFF2
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           indf1	equ	0xFE7
  4409                           plusw1	equ	0xFE3
  4410                           fsr1h	equ	0xFE2
  4411                           fsr1l	equ	0xFE1
  4412                           indf2	equ	0xFDF
  4413                           postinc2	equ	0xFDE
  4414                           postdec2	equ	0xFDD
  4415                           plusw2	equ	0xFDB
  4416                           fsr2h	equ	0xFDA
  4417                           fsr2l	equ	0xFD9
  4418                           status	equ	0xFD8
  4419                           
  4420 ;; *************** function _stop *****************
  4421 ;; Defined at:
  4422 ;;		line 67 in file "dc_motor.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4425 ;;		 -> main@mL(9), 
  4426 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4427 ;;		 -> main@mR(9), 
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;		None
  4430 ;; Return value:  Size  Location     Type
  4431 ;;		None               void
  4432 ;; Registers used:
  4433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4439 ;;      Params:         0       4       0       0
  4440 ;;      Locals:         0       0       0       0
  4441 ;;      Temps:          0       0       0       0
  4442 ;;      Totals:         0       4       0       0
  4443 ;;Total ram usage:        4 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    5
  4446 ;; This function calls:
  4447 ;;		_setMotorPWM
  4448 ;; This function is called by:
  4449 ;;		_ScanIR
  4450 ;;		_ScanWithRange
  4451 ;;		_main
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text15
  4456  0016B8                     __ptext15:
  4457                           	opt stack 0
  4458  0016B8                     _stop:
  4459                           	opt stack 25
  4460                           
  4461                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4462                           
  4463                           ;incstack = 0
  4464  0016B8  D028               	goto	l2996
  4465  0016BA                     l2982:
  4466                           
  4467                           ;dc_motor.c: 71: if(mL->power>0){
  4468  0016BA  C062  FFD9         	movff	stop@mL,fsr2l
  4469  0016BE  C063  FFDA         	movff	stop@mL+1,fsr2h
  4470  0016C2  50DF               	movf	indf2,w,c
  4471  0016C4  B4D8               	btfsc	status,2,c
  4472  0016C6  D005               	goto	l2986
  4473                           
  4474                           ;dc_motor.c: 72: mL->power--;
  4475  0016C8  C062  FFD9         	movff	stop@mL,fsr2l
  4476  0016CC  C063  FFDA         	movff	stop@mL+1,fsr2h
  4477  0016D0  06DF               	decf	indf2,f,c
  4478  0016D2                     l2986:
  4479                           
  4480                           ;dc_motor.c: 73: }
  4481                           ;dc_motor.c: 74: if(mR->power>0){
  4482  0016D2  C064  FFD9         	movff	stop@mR,fsr2l
  4483  0016D6  C065  FFDA         	movff	stop@mR+1,fsr2h
  4484  0016DA  50DF               	movf	indf2,w,c
  4485  0016DC  B4D8               	btfsc	status,2,c
  4486  0016DE  D005               	goto	l2990
  4487                           
  4488                           ;dc_motor.c: 75: mR->power--;
  4489  0016E0  C064  FFD9         	movff	stop@mR,fsr2l
  4490  0016E4  C065  FFDA         	movff	stop@mR+1,fsr2h
  4491  0016E8  06DF               	decf	indf2,f,c
  4492  0016EA                     l2990:
  4493                           
  4494                           ;dc_motor.c: 76: }
  4495                           ;dc_motor.c: 77: setMotorPWM(mL);
  4496  0016EA  C062  F032         	movff	stop@mL,setMotorPWM@m
  4497  0016EE  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4498  0016F2  EC81  F009         	call	_setMotorPWM	;wreg free
  4499                           
  4500                           ;dc_motor.c: 78: setMotorPWM(mR);
  4501  0016F6  C064  F032         	movff	stop@mR,setMotorPWM@m
  4502  0016FA  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4503  0016FE  EC81  F009         	call	_setMotorPWM	;wreg free
  4504                           
  4505                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4506  001702  0E21               	movlw	33
  4507  001704                     u3157:
  4508  001704  2EE8               	decfsz	wreg,f,c
  4509  001706  D7FE               	goto	u3157
  4510  001708  F000               	nop	
  4511  00170A                     l2996:
  4512  00170A  C062  FFD9         	movff	stop@mL,fsr2l
  4513  00170E  C063  FFDA         	movff	stop@mL+1,fsr2h
  4514  001712  50DF               	movf	indf2,w,c
  4515  001714  A4D8               	btfss	status,2,c
  4516  001716  D7D1               	goto	l2982
  4517  001718  C064  FFD9         	movff	stop@mR,fsr2l
  4518  00171C  C065  FFDA         	movff	stop@mR+1,fsr2h
  4519  001720  50DF               	movf	indf2,w,c
  4520  001722  A4D8               	btfss	status,2,c
  4521  001724  D7CA               	goto	l2982
  4522                           
  4523                           ;dc_motor.c: 80: }
  4524                           ;dc_motor.c: 81: mL->direction=1;
  4525  001726  0100               	movlb	0	; () banked
  4526  001728  EE20 F001          	lfsr	2,1
  4527  00172C  5162               	movf	stop@mL& (0+255),w,b
  4528  00172E  26D9               	addwf	fsr2l,f,c
  4529  001730  5163               	movf	(stop@mL+1)& (0+255),w,b
  4530  001732  22DA               	addwfc	fsr2h,f,c
  4531  001734  0E01               	movlw	1
  4532  001736  6EDF               	movwf	indf2,c
  4533                           
  4534                           ;dc_motor.c: 82: mR->direction=1;
  4535  001738  0100               	movlb	0	; () banked
  4536  00173A  EE20 F001          	lfsr	2,1
  4537  00173E  5164               	movf	stop@mR& (0+255),w,b
  4538  001740  26D9               	addwf	fsr2l,f,c
  4539  001742  5165               	movf	(stop@mR+1)& (0+255),w,b
  4540  001744  22DA               	addwfc	fsr2h,f,c
  4541  001746  0E01               	movlw	1
  4542  001748  6EDF               	movwf	indf2,c
  4543                           
  4544                           ; BSR set to: 0
  4545  00174A  0012               	return		;funcret
  4546  00174C                     __end_of_stop:
  4547                           	opt stack 0
  4548                           tblptru	equ	0xFF8
  4549                           prodh	equ	0xFF4
  4550                           prodl	equ	0xFF3
  4551                           intcon	equ	0xFF2
  4552                           postinc0	equ	0xFEE
  4553                           wreg	equ	0xFE8
  4554                           indf1	equ	0xFE7
  4555                           plusw1	equ	0xFE3
  4556                           fsr1h	equ	0xFE2
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           plusw2	equ	0xFDB
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           
  4566 ;; *************** function _setMotorPWM *****************
  4567 ;; Defined at:
  4568 ;;		line 26 in file "dc_motor.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4571 ;;		 -> main@mR(9), main@mL(9), 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  PWMduty         2    0[BANK0 ] int 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;		None               void
  4576 ;; Registers used:
  4577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4583 ;;      Params:         2       0       0       0
  4584 ;;      Locals:         0       2       0       0
  4585 ;;      Temps:          5       0       0       0
  4586 ;;      Totals:         7       2       0       0
  4587 ;;Total ram usage:        9 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    4
  4590 ;; This function calls:
  4591 ;;		___awdiv
  4592 ;;		___wmul
  4593 ;; This function is called by:
  4594 ;;		_stop
  4595 ;;		_fullSpeedAhead
  4596 ;;		_setMotorFullSpeed
  4597 ;;		_stopMotor
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text16
  4602  001302                     __ptext16:
  4603                           	opt stack 0
  4604  001302                     _setMotorPWM:
  4605                           	opt stack 24
  4606                           
  4607                           ;dc_motor.c: 28: int PWMduty;
  4608                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;incstack = 0
  4612  001302  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4613  001306  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4614  00130A  50DF               	movf	indf2,w,c
  4615  00130C  6E34               	movwf	??_setMotorPWM& (0+255),c
  4616  00130E  5034               	movf	??_setMotorPWM,w,c
  4617  001310  6E24               	movwf	___wmul@multiplier,c
  4618  001312  6A25               	clrf	___wmul@multiplier+1,c
  4619  001314  EE20 F007          	lfsr	2,7
  4620  001318  5032               	movf	setMotorPWM@m,w,c
  4621  00131A  26D9               	addwf	fsr2l,f,c
  4622  00131C  5033               	movf	setMotorPWM@m+1,w,c
  4623  00131E  22DA               	addwfc	fsr2h,f,c
  4624  001320  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4625  001324  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4626  001328  EC90  F00E         	call	___wmul	;wreg free
  4627  00132C  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4628  001330  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4629  001334  0E00               	movlw	0
  4630  001336  6E2D               	movwf	___awdiv@divisor+1,c
  4631  001338  0E64               	movlw	100
  4632  00133A  6E2C               	movwf	___awdiv@divisor,c
  4633  00133C  ECEB  F00B         	call	___awdiv	;wreg free
  4634  001340  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4635  001344  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4636                           
  4637                           ;dc_motor.c: 32: if (m->direction)
  4638  001348  EE20 F001          	lfsr	2,1
  4639  00134C  5032               	movf	setMotorPWM@m,w,c
  4640  00134E  26D9               	addwf	fsr2l,f,c
  4641  001350  5033               	movf	setMotorPWM@m+1,w,c
  4642  001352  22DA               	addwfc	fsr2h,f,c
  4643  001354  50DF               	movf	indf2,w,c
  4644  001356  B4D8               	btfsc	status,2,c
  4645  001358  D02E               	goto	l2960
  4646                           
  4647                           ;dc_motor.c: 33: {
  4648                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4649  00135A  EE20 F006          	lfsr	2,6
  4650  00135E  5032               	movf	setMotorPWM@m,w,c
  4651  001360  26D9               	addwf	fsr2l,f,c
  4652  001362  5033               	movf	setMotorPWM@m+1,w,c
  4653  001364  22DA               	addwfc	fsr2h,f,c
  4654  001366  50DF               	movf	indf2,w,c
  4655  001368  6E34               	movwf	??_setMotorPWM& (0+255),c
  4656  00136A  0E01               	movlw	1
  4657  00136C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4658  00136E  2A34               	incf	??_setMotorPWM,f,c
  4659  001370  D002               	goto	u2324
  4660  001372                     u2325:
  4661  001372  90D8               	bcf	status,0,c
  4662  001374  3635               	rlcf	??_setMotorPWM+1,f,c
  4663  001376                     u2324:
  4664  001376  2E34               	decfsz	??_setMotorPWM,f,c
  4665  001378  D7FC               	goto	u2325
  4666  00137A  5035               	movf	??_setMotorPWM+1,w,c
  4667  00137C  108A               	iorwf	3978,w,c	;volatile
  4668  00137E  6E8A               	movwf	3978,c	;volatile
  4669                           
  4670                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4671  001380  EE20 F007          	lfsr	2,7
  4672  001384  5032               	movf	setMotorPWM@m,w,c
  4673  001386  26D9               	addwf	fsr2l,f,c
  4674  001388  5033               	movf	setMotorPWM@m+1,w,c
  4675  00138A  22DA               	addwfc	fsr2h,f,c
  4676  00138C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4677  001390  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4678  001394  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4679  001398  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4680  00139C  1E36               	comf	??_setMotorPWM+2,f,c
  4681  00139E  1E37               	comf	??_setMotorPWM+3,f,c
  4682  0013A0  4A36               	infsnz	??_setMotorPWM+2,f,c
  4683  0013A2  2A37               	incf	??_setMotorPWM+3,f,c
  4684  0013A4  5034               	movf	??_setMotorPWM,w,c
  4685  0013A6  2436               	addwf	??_setMotorPWM+2,w,c
  4686  0013A8  0100               	movlb	0	; () banked
  4687  0013AA  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4688  0013AC  5035               	movf	??_setMotorPWM+1,w,c
  4689  0013AE  2037               	addwfc	??_setMotorPWM+3,w,c
  4690  0013B0  0100               	movlb	0	; () banked
  4691  0013B2  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4692                           
  4693                           ;dc_motor.c: 36: }
  4694  0013B4  D014               	goto	l35
  4695  0013B6                     l2960:
  4696                           
  4697                           ;dc_motor.c: 37: else
  4698                           ;dc_motor.c: 38: {
  4699                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4700  0013B6  EE20 F006          	lfsr	2,6
  4701  0013BA  5032               	movf	setMotorPWM@m,w,c
  4702  0013BC  26D9               	addwf	fsr2l,f,c
  4703  0013BE  5033               	movf	setMotorPWM@m+1,w,c
  4704  0013C0  22DA               	addwfc	fsr2h,f,c
  4705  0013C2  50DF               	movf	indf2,w,c
  4706  0013C4  6E34               	movwf	??_setMotorPWM& (0+255),c
  4707  0013C6  0E01               	movlw	1
  4708  0013C8  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4709  0013CA  2A34               	incf	??_setMotorPWM,f,c
  4710  0013CC  D002               	goto	u2334
  4711  0013CE                     u2335:
  4712  0013CE  90D8               	bcf	status,0,c
  4713  0013D0  3635               	rlcf	??_setMotorPWM+1,f,c
  4714  0013D2                     u2334:
  4715  0013D2  2E34               	decfsz	??_setMotorPWM,f,c
  4716  0013D4  D7FC               	goto	u2335
  4717  0013D6  5035               	movf	??_setMotorPWM+1,w,c
  4718  0013D8  0AFF               	xorlw	255
  4719  0013DA  148A               	andwf	3978,w,c	;volatile
  4720  0013DC  6E8A               	movwf	3978,c	;volatile
  4721  0013DE                     l35:
  4722                           
  4723                           ;dc_motor.c: 40: }
  4724                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4725  0013DE  EE20 F002          	lfsr	2,2
  4726  0013E2  5032               	movf	setMotorPWM@m,w,c
  4727  0013E4  26D9               	addwf	fsr2l,f,c
  4728  0013E6  5033               	movf	setMotorPWM@m+1,w,c
  4729  0013E8  22DA               	addwfc	fsr2h,f,c
  4730  0013EA  CFDE F034          	movff	postinc2,??_setMotorPWM
  4731  0013EE  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4732  0013F2  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4733  0013F6  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4734  0013FA  0100               	movlb	0	; () banked
  4735  0013FC  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4736  0013FE  46E8               	rlncf	wreg,f,c
  4737  001400  0BFC               	andlw	252
  4738  001402  6EDF               	movwf	indf2,c
  4739                           
  4740                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4741  001404  EE20 F004          	lfsr	2,4
  4742  001408  5032               	movf	setMotorPWM@m,w,c
  4743  00140A  26D9               	addwf	fsr2l,f,c
  4744  00140C  5033               	movf	setMotorPWM@m+1,w,c
  4745  00140E  22DA               	addwfc	fsr2h,f,c
  4746  001410  CFDE F034          	movff	postinc2,??_setMotorPWM
  4747  001414  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4748  001418  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4749  00141C  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4750  001420  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4751  001424  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4752  001428  0E06               	movlw	6
  4753  00142A  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4754  00142C                     u2345:
  4755  00142C  3437               	rlcf	??_setMotorPWM+3,w,c
  4756  00142E  3237               	rrcf	??_setMotorPWM+3,f,c
  4757  001430  3236               	rrcf	??_setMotorPWM+2,f,c
  4758  001432  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4759  001434  D7FB               	goto	u2345
  4760  001436  5036               	movf	??_setMotorPWM+2,w,c
  4761  001438  6EDF               	movwf	indf2,c
  4762                           
  4763                           ; BSR set to: 0
  4764  00143A  0012               	return		;funcret
  4765  00143C                     __end_of_setMotorPWM:
  4766                           	opt stack 0
  4767                           tblptru	equ	0xFF8
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           intcon	equ	0xFF2
  4771                           postinc0	equ	0xFEE
  4772                           wreg	equ	0xFE8
  4773                           indf1	equ	0xFE7
  4774                           plusw1	equ	0xFE3
  4775                           fsr1h	equ	0xFE2
  4776                           fsr1l	equ	0xFE1
  4777                           indf2	equ	0xFDF
  4778                           postinc2	equ	0xFDE
  4779                           postdec2	equ	0xFDD
  4780                           plusw2	equ	0xFDB
  4781                           fsr2h	equ	0xFDA
  4782                           fsr2l	equ	0xFD9
  4783                           status	equ	0xFD8
  4784                           
  4785 ;; *************** function ___awdiv *****************
  4786 ;; Defined at:
  4787 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4788 ;; Parameters:    Size  Location     Type
  4789 ;;  dividend        2   41[COMRAM] int 
  4790 ;;  divisor         2   43[COMRAM] int 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  quotient        2   47[COMRAM] int 
  4793 ;;  sign            1   46[COMRAM] unsigned char 
  4794 ;;  counter         1   45[COMRAM] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  2   41[COMRAM] int 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4804 ;;      Params:         4       0       0       0
  4805 ;;      Locals:         4       0       0       0
  4806 ;;      Temps:          0       0       0       0
  4807 ;;      Totals:         8       0       0       0
  4808 ;;Total ram usage:        8 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    3
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		_setMotorPWM
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text17
  4819  0017D6                     __ptext17:
  4820                           	opt stack 0
  4821  0017D6                     ___awdiv:
  4822                           	opt stack 24
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;incstack = 0
  4826  0017D6  0E00               	movlw	0
  4827  0017D8  6E2F               	movwf	___awdiv@sign,c
  4828  0017DA  AE2D               	btfss	___awdiv@divisor+1,7,c
  4829  0017DC  D006               	goto	l2918
  4830  0017DE  6C2C               	negf	___awdiv@divisor,c
  4831  0017E0  1E2D               	comf	___awdiv@divisor+1,f,c
  4832  0017E2  B0D8               	btfsc	status,0,c
  4833  0017E4  2A2D               	incf	___awdiv@divisor+1,f,c
  4834  0017E6  0E01               	movlw	1
  4835  0017E8  6E2F               	movwf	___awdiv@sign,c
  4836  0017EA                     l2918:
  4837  0017EA  AE2B               	btfss	___awdiv@dividend+1,7,c
  4838  0017EC  D006               	goto	l2924
  4839  0017EE  6C2A               	negf	___awdiv@dividend,c
  4840  0017F0  1E2B               	comf	___awdiv@dividend+1,f,c
  4841  0017F2  B0D8               	btfsc	status,0,c
  4842  0017F4  2A2B               	incf	___awdiv@dividend+1,f,c
  4843  0017F6  0E01               	movlw	1
  4844  0017F8  1A2F               	xorwf	___awdiv@sign,f,c
  4845  0017FA                     l2924:
  4846  0017FA  0E00               	movlw	0
  4847  0017FC  6E31               	movwf	___awdiv@quotient+1,c
  4848  0017FE  0E00               	movlw	0
  4849  001800  6E30               	movwf	___awdiv@quotient,c
  4850  001802  502C               	movf	___awdiv@divisor,w,c
  4851  001804  102D               	iorwf	___awdiv@divisor+1,w,c
  4852  001806  B4D8               	btfsc	status,2,c
  4853  001808  D01C               	goto	l2946
  4854  00180A  0E01               	movlw	1
  4855  00180C  6E2E               	movwf	___awdiv@counter,c
  4856  00180E  D004               	goto	l2932
  4857  001810                     l2930:
  4858  001810  90D8               	bcf	status,0,c
  4859  001812  362C               	rlcf	___awdiv@divisor,f,c
  4860  001814  362D               	rlcf	___awdiv@divisor+1,f,c
  4861  001816  2A2E               	incf	___awdiv@counter,f,c
  4862  001818                     l2932:
  4863  001818  AE2D               	btfss	___awdiv@divisor+1,7,c
  4864  00181A  D7FA               	goto	l2930
  4865  00181C                     l2934:
  4866  00181C  90D8               	bcf	status,0,c
  4867  00181E  3630               	rlcf	___awdiv@quotient,f,c
  4868  001820  3631               	rlcf	___awdiv@quotient+1,f,c
  4869  001822  502C               	movf	___awdiv@divisor,w,c
  4870  001824  5C2A               	subwf	___awdiv@dividend,w,c
  4871  001826  502D               	movf	___awdiv@divisor+1,w,c
  4872  001828  582B               	subwfb	___awdiv@dividend+1,w,c
  4873  00182A  A0D8               	btfss	status,0,c
  4874  00182C  D005               	goto	l2942
  4875  00182E  502C               	movf	___awdiv@divisor,w,c
  4876  001830  5E2A               	subwf	___awdiv@dividend,f,c
  4877  001832  502D               	movf	___awdiv@divisor+1,w,c
  4878  001834  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4879  001836  8030               	bsf	___awdiv@quotient,0,c
  4880  001838                     l2942:
  4881  001838  90D8               	bcf	status,0,c
  4882  00183A  322D               	rrcf	___awdiv@divisor+1,f,c
  4883  00183C  322C               	rrcf	___awdiv@divisor,f,c
  4884  00183E  2E2E               	decfsz	___awdiv@counter,f,c
  4885  001840  D7ED               	goto	l2934
  4886  001842                     l2946:
  4887  001842  502F               	movf	___awdiv@sign,w,c
  4888  001844  B4D8               	btfsc	status,2,c
  4889  001846  D004               	goto	l2950
  4890  001848  6C30               	negf	___awdiv@quotient,c
  4891  00184A  1E31               	comf	___awdiv@quotient+1,f,c
  4892  00184C  B0D8               	btfsc	status,0,c
  4893  00184E  2A31               	incf	___awdiv@quotient+1,f,c
  4894  001850                     l2950:
  4895  001850  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4896  001854  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4897  001858  0012               	return	
  4898  00185A                     __end_of___awdiv:
  4899                           	opt stack 0
  4900                           tblptru	equ	0xFF8
  4901                           prodh	equ	0xFF4
  4902                           prodl	equ	0xFF3
  4903                           intcon	equ	0xFF2
  4904                           postinc0	equ	0xFEE
  4905                           wreg	equ	0xFE8
  4906                           indf1	equ	0xFE7
  4907                           plusw1	equ	0xFE3
  4908                           fsr1h	equ	0xFE2
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           plusw2	equ	0xFDB
  4914                           fsr2h	equ	0xFDA
  4915                           fsr2l	equ	0xFD9
  4916                           status	equ	0xFD8
  4917                           
  4918 ;; *************** function _sprintf *****************
  4919 ;; Defined at:
  4920 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4923 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4924 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4925 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  tmpval          4    0        struct .
  4928 ;;  cp              3    0        PTR const unsigned char 
  4929 ;;  width           2   10[BANK0 ] int 
  4930 ;;  val             2    7[BANK0 ] unsigned int 
  4931 ;;  ap              2    4[BANK0 ] PTR void [1]
  4932 ;;		 -> ?_sprintf(2), 
  4933 ;;  len             2    0        unsigned int 
  4934 ;;  c               1   12[BANK0 ] char 
  4935 ;;  flag            1    9[BANK0 ] unsigned char 
  4936 ;;  prec            1    6[BANK0 ] char 
  4937 ;; Return value:  Size  Location     Type
  4938 ;;                  2   47[COMRAM] int 
  4939 ;; Registers used:
  4940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4946 ;;      Params:         8       0       0       0
  4947 ;;      Locals:         0       9       0       0
  4948 ;;      Temps:          0       4       0       0
  4949 ;;      Totals:         8      13       0       0
  4950 ;;Total ram usage:       21 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    4
  4953 ;; This function calls:
  4954 ;;		___lwdiv
  4955 ;;		___lwmod
  4956 ;;		___wmul
  4957 ;;		_isdigit
  4958 ;; This function is called by:
  4959 ;;		_ScanIR
  4960 ;;		_ScanWithRange
  4961 ;;		_main
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           	psect	text18
  4966  000FFC                     __ptext18:
  4967                           	opt stack 0
  4968  000FFC                     _sprintf:
  4969                           	opt stack 26
  4970                           
  4971                           ;doprnt.c: 494: va_list ap;
  4972                           ;doprnt.c: 499: signed char c;
  4973                           ;doprnt.c: 501: int width;
  4974                           ;doprnt.c: 506: signed char prec;
  4975                           ;doprnt.c: 508: unsigned char flag;
  4976                           ;doprnt.c: 523: union {
  4977                           ;doprnt.c: 524: unsigned long vd;
  4978                           ;doprnt.c: 525: double integ;
  4979                           ;doprnt.c: 526: } tmpval;
  4980                           ;doprnt.c: 528: unsigned int val;
  4981                           ;doprnt.c: 529: unsigned len;
  4982                           ;doprnt.c: 530: const char * cp;
  4983                           ;doprnt.c: 533: *ap = __va_start();
  4984                           
  4985                           ;incstack = 0
  4986  000FFC  0E34               	movlw	low (?_sprintf+4)
  4987  000FFE  0100               	movlb	0	; () banked
  4988  001000  6F64               	movwf	sprintf@ap& (0+255),b
  4989  001002  0E00               	movlw	high (?_sprintf+4)
  4990  001004  0100               	movlb	0	; () banked
  4991  001006  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4992                           
  4993                           ;doprnt.c: 536: while(c = *f++) {
  4994  001008  D168               	goto	l3118
  4995  00100A                     l3012:
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;doprnt.c: 538: if(c != '%')
  4999  00100A  0E25               	movlw	37
  5000  00100C  0100               	movlb	0	; () banked
  5001  00100E  196C               	xorwf	sprintf@c& (0+255),w,b
  5002  001010  B4D8               	btfsc	status,2,c
  5003  001012  D009               	goto	l3018
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;doprnt.c: 540: {
  5007                           ;doprnt.c: 541: ((*sp++ = (c)));
  5008  001014  C030  FFD9         	movff	sprintf@sp,fsr2l
  5009  001018  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5010  00101C  C06C  FFDF         	movff	sprintf@c,indf2
  5011                           
  5012                           ; BSR set to: 0
  5013  001020  4A30               	infsnz	sprintf@sp,f,c
  5014  001022  2A31               	incf	sprintf@sp+1,f,c
  5015                           
  5016                           ;doprnt.c: 542: continue;
  5017  001024  D15A               	goto	l3118
  5018  001026                     l3018:
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;doprnt.c: 543: }
  5022                           ;doprnt.c: 546: width = 0;
  5023  001026  0E00               	movlw	0
  5024  001028  0100               	movlb	0	; () banked
  5025  00102A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5026  00102C  0E00               	movlw	0
  5027  00102E  6F6A               	movwf	sprintf@width& (0+255),b
  5028                           
  5029                           ;doprnt.c: 548: flag = 0;
  5030  001030  0E00               	movlw	0
  5031  001032  0100               	movlb	0	; () banked
  5032  001034  6F69               	movwf	sprintf@flag& (0+255),b
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;doprnt.c: 551: switch(*f) {
  5036                           
  5037                           ;doprnt.c: 550: for(;;) {
  5038  001036  D004               	goto	l3024
  5039  001038                     l3020:
  5040                           
  5041                           ;doprnt.c: 580: flag |= 0x04;
  5042  001038  0100               	movlb	0	; () banked
  5043  00103A  8569               	bsf	sprintf@flag& (0+255),2,b
  5044                           
  5045                           ;doprnt.c: 581: f++;
  5046  00103C  4A32               	infsnz	sprintf@f,f,c
  5047  00103E  2A33               	incf	sprintf@f+1,f,c
  5048  001040                     l3024:
  5049  001040  C032  FFF6         	movff	sprintf@f,tblptrl
  5050  001044  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5051  001048                     	if	0	;tblptru may be non-zero
  5052  001048                     	endif
  5053  001048                     	if	0	;tblptru may be non-zero
  5054  001048                     	endif
  5055  001048  0008               	tblrd		*
  5056  00104A  50F5               	movf	tablat,w,c
  5057                           
  5058                           ; Switch size 1, requested type "space"
  5059                           ; Number of cases is 1, Range of values is 48 to 48
  5060                           ; switch strategies available:
  5061                           ; Name         Instructions Cycles
  5062                           ; simple_byte            4     3 (average)
  5063                           ;	Chosen strategy is simple_byte
  5064  00104C  0A30               	xorlw	48	; case 48
  5065  00104E  B4D8               	btfsc	status,2,c
  5066  001050  D7F3               	goto	l3020
  5067                           
  5068                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5069                           
  5070                           ;doprnt.c: 586: }
  5071                           
  5072                           ;doprnt.c: 585: break;
  5073  001052  C032  FFF6         	movff	sprintf@f,tblptrl
  5074  001056  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5075  00105A                     	if	0	;tblptru may be non-zero
  5076  00105A                     	endif
  5077  00105A                     	if	0	;tblptru may be non-zero
  5078  00105A                     	endif
  5079  00105A  0008               	tblrd		*
  5080  00105C  50F5               	movf	tablat,w,c
  5081  00105E  ECB4  F00E         	call	_isdigit
  5082  001062  A0D8               	btfss	status,0,c
  5083  001064  D03E               	goto	l3040
  5084                           
  5085                           ;doprnt.c: 598: width = 0;
  5086  001066  0E00               	movlw	0
  5087  001068  0100               	movlb	0	; () banked
  5088  00106A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5089  00106C  0E00               	movlw	0
  5090  00106E  6F6A               	movwf	sprintf@width& (0+255),b
  5091  001070                     l3030:
  5092                           
  5093                           ;doprnt.c: 600: width *= 10;
  5094  001070  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5095  001074  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5096  001078  0E00               	movlw	0
  5097  00107A  6E27               	movwf	___wmul@multiplicand+1,c
  5098  00107C  0E0A               	movlw	10
  5099  00107E  6E26               	movwf	___wmul@multiplicand,c
  5100  001080  EC90  F00E         	call	___wmul	;wreg free
  5101  001084  C024  F06A         	movff	?___wmul,sprintf@width
  5102  001088  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5103                           
  5104                           ;doprnt.c: 601: width += *f++ - '0';
  5105  00108C  0ED0               	movlw	208
  5106  00108E  0100               	movlb	0	; () banked
  5107  001090  6F60               	movwf	??_sprintf& (0+255),b
  5108  001092  0EFF               	movlw	255
  5109  001094  0100               	movlb	0	; () banked
  5110  001096  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5111  001098  C032  FFF6         	movff	sprintf@f,tblptrl
  5112  00109C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5113  0010A0                     	if	0	;tblptru may be non-zero
  5114  0010A0                     	endif
  5115  0010A0                     	if	0	;tblptru may be non-zero
  5116  0010A0                     	endif
  5117  0010A0  0008               	tblrd		*
  5118  0010A2  50F5               	movf	tablat,w,c
  5119  0010A4  0100               	movlb	0	; () banked
  5120  0010A6  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5121  0010A8  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5122  0010AA  0100               	movlb	0	; () banked
  5123  0010AC  5160               	movf	??_sprintf& (0+255),w,b
  5124  0010AE  0100               	movlb	0	; () banked
  5125  0010B0  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5126  0010B2  0100               	movlb	0	; () banked
  5127  0010B4  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5128  0010B6  0100               	movlb	0	; () banked
  5129  0010B8  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5130  0010BA  0100               	movlb	0	; () banked
  5131  0010BC  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5132  0010BE  0100               	movlb	0	; () banked
  5133  0010C0  276A               	addwf	sprintf@width& (0+255),f,b
  5134  0010C2  0100               	movlb	0	; () banked
  5135  0010C4  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5136  0010C6  0100               	movlb	0	; () banked
  5137  0010C8  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5138                           
  5139                           ; BSR set to: 0
  5140  0010CA  4A32               	infsnz	sprintf@f,f,c
  5141  0010CC  2A33               	incf	sprintf@f+1,f,c
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5145  0010CE  C032  FFF6         	movff	sprintf@f,tblptrl
  5146  0010D2  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5147  0010D6                     	if	0	;tblptru may be non-zero
  5148  0010D6                     	endif
  5149  0010D6                     	if	0	;tblptru may be non-zero
  5150  0010D6                     	endif
  5151  0010D6  0008               	tblrd		*
  5152  0010D8  50F5               	movf	tablat,w,c
  5153  0010DA  ECB4  F00E         	call	_isdigit
  5154  0010DE  B0D8               	btfsc	status,0,c
  5155  0010E0  D7C7               	goto	l3030
  5156  0010E2                     l3040:
  5157  0010E2  C032  FFF6         	movff	sprintf@f,tblptrl
  5158  0010E6  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5159  0010EA  4A32               	infsnz	sprintf@f,f,c
  5160  0010EC  2A33               	incf	sprintf@f+1,f,c
  5161  0010EE                     	if	0	;tblptru may be non-zero
  5162  0010EE                     	endif
  5163  0010EE                     	if	0	;tblptru may be non-zero
  5164  0010EE                     	endif
  5165  0010EE  0008               	tblrd		*
  5166  0010F0  CFF5 F06C          	movff	tablat,sprintf@c
  5167  0010F4  0100               	movlb	0	; () banked
  5168  0010F6  516C               	movf	sprintf@c& (0+255),w,b
  5169                           
  5170                           ; Switch size 1, requested type "space"
  5171                           ; Number of cases is 3, Range of values is 0 to 105
  5172                           ; switch strategies available:
  5173                           ; Name         Instructions Cycles
  5174                           ; simple_byte           10     6 (average)
  5175                           ;	Chosen strategy is simple_byte
  5176  0010F8  0A00               	xorlw	0	; case 0
  5177  0010FA  B4D8               	btfsc	status,2,c
  5178  0010FC  D0FB               	goto	l3120
  5179  0010FE  0A64               	xorlw	100	; case 100
  5180  001100  B4D8               	btfsc	status,2,c
  5181  001102  D003               	goto	l3042
  5182  001104  0A0D               	xorlw	13	; case 105
  5183  001106  A4D8               	btfss	status,2,c
  5184  001108  D0E8               	goto	l3118
  5185  00110A                     l3042:
  5186                           
  5187                           ;doprnt.c: 1253: {
  5188                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5189  00110A  C064  FFD9         	movff	sprintf@ap,fsr2l
  5190  00110E  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5191  001112  CFDE F067          	movff	postinc2,sprintf@val
  5192  001116  CFDD F068          	movff	postdec2,sprintf@val+1
  5193  00111A  0E02               	movlw	2
  5194  00111C  0100               	movlb	0	; () banked
  5195  00111E  2764               	addwf	sprintf@ap& (0+255),f,b
  5196  001120  0E00               	movlw	0
  5197  001122  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;doprnt.c: 1261: if((int)val < 0) {
  5201  001124  0100               	movlb	0	; () banked
  5202  001126  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5203  001128  D008               	goto	l3052
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;doprnt.c: 1262: flag |= 0x03;
  5207  00112A  0E03               	movlw	3
  5208  00112C  0100               	movlb	0	; () banked
  5209  00112E  1369               	iorwf	sprintf@flag& (0+255),f,b
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;doprnt.c: 1263: val = -val;
  5213  001130  0100               	movlb	0	; () banked
  5214  001132  6D67               	negf	sprintf@val& (0+255),b
  5215  001134  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5216  001136  B0D8               	btfsc	status,0,c
  5217  001138  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5218  00113A                     l3052:
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 1264: }
  5222                           ;doprnt.c: 1266: }
  5223                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5224  00113A  0E01               	movlw	1
  5225  00113C  0100               	movlb	0	; () banked
  5226  00113E  6F6C               	movwf	sprintf@c& (0+255),b
  5227  001140                     l3054:
  5228                           
  5229                           ; BSR set to: 0
  5230  001140  0E05               	movlw	5
  5231  001142  0100               	movlb	0	; () banked
  5232  001144  196C               	xorwf	sprintf@c& (0+255),w,b
  5233  001146  B4D8               	btfsc	status,2,c
  5234  001148  D016               	goto	l3066
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;doprnt.c: 1306: if(val < dpowers[c])
  5238                           
  5239                           ; BSR set to: 0
  5240                           
  5241                           ; BSR set to: 0
  5242  00114A  0100               	movlb	0	; () banked
  5243  00114C  516C               	movf	sprintf@c& (0+255),w,b
  5244  00114E  0D02               	mullw	2
  5245  001150  0E01               	movlw	low _dpowers
  5246  001152  24F3               	addwf	prodl,w,c
  5247  001154  6EF6               	movwf	tblptrl,c
  5248  001156  0E03               	movlw	high _dpowers
  5249  001158  20F4               	addwfc	prodh,w,c
  5250  00115A  6EF7               	movwf	tblptrh,c
  5251  00115C                     	if	0	;There are less than 3 active tblptr bytes
  5252  00115C                     	endif
  5253  00115C  0009               	tblrd		*+
  5254  00115E  50F5               	movf	tablat,w,c
  5255  001160  0100               	movlb	0	; () banked
  5256  001162  5D67               	subwf	sprintf@val& (0+255),w,b
  5257  001164  0009               	tblrd		*+
  5258  001166  50F5               	movf	tablat,w,c
  5259  001168  0100               	movlb	0	; () banked
  5260  00116A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5261  00116C  A0D8               	btfss	status,0,c
  5262  00116E  D003               	goto	l3066
  5263                           
  5264                           ; BSR set to: 0
  5265                           
  5266                           ; BSR set to: 0
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;doprnt.c: 1307: break;
  5270  001170  0100               	movlb	0	; () banked
  5271  001172  2B6C               	incf	sprintf@c& (0+255),f,b
  5272  001174  D7E5               	goto	l3054
  5273  001176                     l3066:
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5277  001176  0100               	movlb	0	; () banked
  5278  001178  516A               	movf	sprintf@width& (0+255),w,b
  5279  00117A  0100               	movlb	0	; () banked
  5280  00117C  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5281  00117E  B4D8               	btfsc	status,2,c
  5282  001180  D00B               	goto	l3072
  5283                           
  5284                           ; BSR set to: 0
  5285  001182  C069  F060         	movff	sprintf@flag,??_sprintf
  5286  001186  0E03               	movlw	3
  5287  001188  0100               	movlb	0	; () banked
  5288  00118A  1760               	andwf	??_sprintf& (0+255),f,b
  5289  00118C  B4D8               	btfsc	status,2,c
  5290  00118E  D004               	goto	l3072
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;doprnt.c: 1346: width--;
  5294  001190  0100               	movlb	0	; () banked
  5295  001192  076A               	decf	sprintf@width& (0+255),f,b
  5296  001194  A0D8               	btfss	status,0,c
  5297  001196  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5298  001198                     l3072:
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;doprnt.c: 1381: if(width > c)
  5302  001198  0E80               	movlw	128
  5303  00119A  0100               	movlb	0	; () banked
  5304  00119C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5305  00119E  0E7F               	movlw	127
  5306  0011A0  0100               	movlb	0	; () banked
  5307  0011A2  6F60               	movwf	??_sprintf& (0+255),b
  5308  0011A4  0100               	movlb	0	; () banked
  5309  0011A6  516A               	movf	sprintf@width& (0+255),w,b
  5310  0011A8  0100               	movlb	0	; () banked
  5311  0011AA  5D6C               	subwf	sprintf@c& (0+255),w,b
  5312  0011AC  0100               	movlb	0	; () banked
  5313  0011AE  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5314  0011B0  0A80               	xorlw	128
  5315  0011B2  0100               	movlb	0	; () banked
  5316  0011B4  5960               	subwfb	??_sprintf& (0+255),w,b
  5317  0011B6  B0D8               	btfsc	status,0,c
  5318  0011B8  D00B               	goto	l3076
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;doprnt.c: 1382: width -= c;
  5322  0011BA  0100               	movlb	0	; () banked
  5323  0011BC  516C               	movf	sprintf@c& (0+255),w,b
  5324  0011BE  0100               	movlb	0	; () banked
  5325  0011C0  5F6A               	subwf	sprintf@width& (0+255),f,b
  5326  0011C2  0E00               	movlw	0
  5327  0011C4  0100               	movlb	0	; () banked
  5328  0011C6  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5329  0011C8  0EFF               	movlw	255
  5330  0011CA  0100               	movlb	0	; () banked
  5331  0011CC  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5332  0011CE  D005               	goto	l3078
  5333  0011D0                     l3076:
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;doprnt.c: 1383: else
  5337                           ;doprnt.c: 1384: width = 0;
  5338  0011D0  0E00               	movlw	0
  5339  0011D2  0100               	movlb	0	; () banked
  5340  0011D4  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5341  0011D6  0E00               	movlw	0
  5342  0011D8  6F6A               	movwf	sprintf@width& (0+255),b
  5343  0011DA                     l3078:
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;doprnt.c: 1387: if(flag & 0x04) {
  5347  0011DA  0100               	movlb	0	; () banked
  5348  0011DC  A569               	btfss	sprintf@flag& (0+255),2,b
  5349  0011DE  D022               	goto	l3094
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;doprnt.c: 1392: if(flag & 0x03)
  5353  0011E0  C069  F060         	movff	sprintf@flag,??_sprintf
  5354  0011E4  0E03               	movlw	3
  5355  0011E6  0100               	movlb	0	; () banked
  5356  0011E8  1760               	andwf	??_sprintf& (0+255),f,b
  5357  0011EA  B4D8               	btfsc	status,2,c
  5358  0011EC  D008               	goto	l3086
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5362  0011EE  C030  FFD9         	movff	sprintf@sp,fsr2l
  5363  0011F2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5364  0011F6  0E2D               	movlw	45
  5365  0011F8  6EDF               	movwf	indf2,c
  5366                           
  5367                           ; BSR set to: 0
  5368  0011FA  4A30               	infsnz	sprintf@sp,f,c
  5369  0011FC  2A31               	incf	sprintf@sp+1,f,c
  5370  0011FE                     l3086:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;doprnt.c: 1415: if(width)
  5374  0011FE  0100               	movlb	0	; () banked
  5375  001200  516A               	movf	sprintf@width& (0+255),w,b
  5376  001202  0100               	movlb	0	; () banked
  5377  001204  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5378  001206  B4D8               	btfsc	status,2,c
  5379  001208  D034               	goto	l3108
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5383                           
  5384                           ; BSR set to: 0
  5385                           
  5386                           ;doprnt.c: 1416: do
  5387  00120A  C030  FFD9         	movff	sprintf@sp,fsr2l
  5388  00120E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5389  001212  0E30               	movlw	48
  5390  001214  6EDF               	movwf	indf2,c
  5391                           
  5392                           ; BSR set to: 0
  5393  001216  4A30               	infsnz	sprintf@sp,f,c
  5394  001218  2A31               	incf	sprintf@sp+1,f,c
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;doprnt.c: 1418: while(--width);
  5398  00121A  0100               	movlb	0	; () banked
  5399  00121C  076A               	decf	sprintf@width& (0+255),f,b
  5400  00121E  A0D8               	btfss	status,0,c
  5401  001220  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5402  001222  D7ED               	goto	l3086
  5403  001224                     l3094:
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;doprnt.c: 1422: {
  5407                           ;doprnt.c: 1424: if(width
  5408                           ;doprnt.c: 1428: )
  5409  001224  0100               	movlb	0	; () banked
  5410  001226  516A               	movf	sprintf@width& (0+255),w,b
  5411  001228  0100               	movlb	0	; () banked
  5412  00122A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5413  00122C  B4D8               	btfsc	status,2,c
  5414  00122E  D012               	goto	l3102
  5415  001230                     l3096:
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5419  001230  C030  FFD9         	movff	sprintf@sp,fsr2l
  5420  001234  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5421  001238  0E20               	movlw	32
  5422  00123A  6EDF               	movwf	indf2,c
  5423                           
  5424                           ; BSR set to: 0
  5425  00123C  4A30               	infsnz	sprintf@sp,f,c
  5426  00123E  2A31               	incf	sprintf@sp+1,f,c
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 1431: while(--width);
  5430  001240  0100               	movlb	0	; () banked
  5431  001242  076A               	decf	sprintf@width& (0+255),f,b
  5432  001244  A0D8               	btfss	status,0,c
  5433  001246  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5434  001248  0100               	movlb	0	; () banked
  5435  00124A  516A               	movf	sprintf@width& (0+255),w,b
  5436  00124C  0100               	movlb	0	; () banked
  5437  00124E  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5438  001250  A4D8               	btfss	status,2,c
  5439  001252  D7EE               	goto	l3096
  5440  001254                     l3102:
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;doprnt.c: 1438: if(flag & 0x03)
  5444  001254  C069  F060         	movff	sprintf@flag,??_sprintf
  5445  001258  0E03               	movlw	3
  5446  00125A  0100               	movlb	0	; () banked
  5447  00125C  1760               	andwf	??_sprintf& (0+255),f,b
  5448  00125E  B4D8               	btfsc	status,2,c
  5449  001260  D008               	goto	l3108
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5453  001262  C030  FFD9         	movff	sprintf@sp,fsr2l
  5454  001266  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5455  00126A  0E2D               	movlw	45
  5456  00126C  6EDF               	movwf	indf2,c
  5457                           
  5458                           ; BSR set to: 0
  5459  00126E  4A30               	infsnz	sprintf@sp,f,c
  5460  001270  2A31               	incf	sprintf@sp+1,f,c
  5461  001272                     l3108:
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;doprnt.c: 1469: }
  5465                           ;doprnt.c: 1472: prec = c;
  5466  001272  C06C  F066         	movff	sprintf@c,sprintf@prec
  5467                           
  5468                           ;doprnt.c: 1474: while(prec--) {
  5469  001276  D02B               	goto	l3116
  5470  001278                     l3110:
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;doprnt.c: 1478: {
  5474                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5475  001278  0100               	movlb	0	; () banked
  5476  00127A  5166               	movf	sprintf@prec& (0+255),w,b
  5477  00127C  0D02               	mullw	2
  5478  00127E  0E01               	movlw	low _dpowers
  5479  001280  24F3               	addwf	prodl,w,c
  5480  001282  6EF6               	movwf	tblptrl,c
  5481  001284  0E03               	movlw	high _dpowers
  5482  001286  20F4               	addwfc	prodh,w,c
  5483  001288  6EF7               	movwf	tblptrh,c
  5484  00128A                     	if	0	;There are less than 3 active tblptr bytes
  5485  00128A                     	endif
  5486  00128A  0009               	tblrd		*+
  5487  00128C  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5488  001290  000A               	tblrd		*-
  5489  001292  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5490  001296  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5491  00129A  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5492  00129E  EC3A  F00D         	call	___lwdiv	;wreg free
  5493  0012A2  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5494  0012A6  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5495  0012AA  0E00               	movlw	0
  5496  0012AC  6E2E               	movwf	___lwmod@divisor+1,c
  5497  0012AE  0E0A               	movlw	10
  5498  0012B0  6E2D               	movwf	___lwmod@divisor,c
  5499  0012B2  EC63  F00D         	call	___lwmod	;wreg free
  5500  0012B6  502B               	movf	?___lwmod,w,c
  5501  0012B8  0F30               	addlw	48
  5502  0012BA  0100               	movlb	0	; () banked
  5503  0012BC  6F6C               	movwf	sprintf@c& (0+255),b
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;doprnt.c: 1523: }
  5507                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5508  0012BE  C030  FFD9         	movff	sprintf@sp,fsr2l
  5509  0012C2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5510  0012C6  C06C  FFDF         	movff	sprintf@c,indf2
  5511                           
  5512                           ; BSR set to: 0
  5513  0012CA  4A30               	infsnz	sprintf@sp,f,c
  5514  0012CC  2A31               	incf	sprintf@sp+1,f,c
  5515  0012CE                     l3116:
  5516                           
  5517                           ; BSR set to: 0
  5518  0012CE  0100               	movlb	0	; () banked
  5519  0012D0  0766               	decf	sprintf@prec& (0+255),f,b
  5520  0012D2  0100               	movlb	0	; () banked
  5521  0012D4  2966               	incf	sprintf@prec& (0+255),w,b
  5522  0012D6  A4D8               	btfss	status,2,c
  5523  0012D8  D7CF               	goto	l3110
  5524  0012DA                     l3118:
  5525  0012DA  C032  FFF6         	movff	sprintf@f,tblptrl
  5526  0012DE  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5527  0012E2  4A32               	infsnz	sprintf@f,f,c
  5528  0012E4  2A33               	incf	sprintf@f+1,f,c
  5529  0012E6                     	if	0	;tblptru may be non-zero
  5530  0012E6                     	endif
  5531  0012E6                     	if	0	;tblptru may be non-zero
  5532  0012E6                     	endif
  5533  0012E6  0008               	tblrd		*
  5534  0012E8  CFF5 F06C          	movff	tablat,sprintf@c
  5535  0012EC  0100               	movlb	0	; () banked
  5536  0012EE  516C               	movf	sprintf@c& (0+255),w,b
  5537  0012F0  A4D8               	btfss	status,2,c
  5538  0012F2  D68B               	goto	l3012
  5539  0012F4                     l3120:
  5540                           
  5541                           ;doprnt.c: 1538: *sp = 0;
  5542  0012F4  C030  FFD9         	movff	sprintf@sp,fsr2l
  5543  0012F8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5544  0012FC  0E00               	movlw	0
  5545  0012FE  6EDF               	movwf	indf2,c
  5546  001300  0012               	return	
  5547  001302                     __end_of_sprintf:
  5548                           	opt stack 0
  5549                           tblptru	equ	0xFF8
  5550                           tblptrh	equ	0xFF7
  5551                           tblptrl	equ	0xFF6
  5552                           tablat	equ	0xFF5
  5553                           prodh	equ	0xFF4
  5554                           prodl	equ	0xFF3
  5555                           intcon	equ	0xFF2
  5556                           postinc0	equ	0xFEE
  5557                           wreg	equ	0xFE8
  5558                           indf1	equ	0xFE7
  5559                           plusw1	equ	0xFE3
  5560                           fsr1h	equ	0xFE2
  5561                           fsr1l	equ	0xFE1
  5562                           indf2	equ	0xFDF
  5563                           postinc2	equ	0xFDE
  5564                           postdec2	equ	0xFDD
  5565                           plusw2	equ	0xFDB
  5566                           fsr2h	equ	0xFDA
  5567                           fsr2l	equ	0xFD9
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _isdigit *****************
  5571 ;; Defined at:
  5572 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  c               1    wreg     unsigned char 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  c               1   37[COMRAM] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;		None               void
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5586 ;;      Params:         0       0       0       0
  5587 ;;      Locals:         2       0       0       0
  5588 ;;      Temps:          1       0       0       0
  5589 ;;      Totals:         3       0       0       0
  5590 ;;Total ram usage:        3 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    3
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		_sprintf
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text19
  5601  001D68                     __ptext19:
  5602                           	opt stack 0
  5603  001D68                     _isdigit:
  5604                           	opt stack 26
  5605                           
  5606                           ;incstack = 0
  5607                           ;isdigit@c stored from wreg
  5608  001D68  6E26               	movwf	isdigit@c,c
  5609  001D6A  0E00               	movlw	0
  5610  001D6C  6E25               	movwf	_isdigit$1986,c
  5611  001D6E  0E3A               	movlw	58
  5612  001D70  6026               	cpfslt	isdigit@c,c
  5613  001D72  D005               	goto	l2124
  5614  001D74  0E2F               	movlw	47
  5615  001D76  6426               	cpfsgt	isdigit@c,c
  5616  001D78  D002               	goto	l2124
  5617  001D7A  0E01               	movlw	1
  5618  001D7C  6E25               	movwf	_isdigit$1986,c
  5619  001D7E                     l2124:
  5620  001D7E  C025  F024         	movff	_isdigit$1986,??_isdigit
  5621  001D82  3024               	rrcf	??_isdigit,w,c
  5622  001D84  0012               	return	
  5623  001D86                     __end_of_isdigit:
  5624                           	opt stack 0
  5625                           tblptru	equ	0xFF8
  5626                           tblptrh	equ	0xFF7
  5627                           tblptrl	equ	0xFF6
  5628                           tablat	equ	0xFF5
  5629                           prodh	equ	0xFF4
  5630                           prodl	equ	0xFF3
  5631                           intcon	equ	0xFF2
  5632                           postinc0	equ	0xFEE
  5633                           wreg	equ	0xFE8
  5634                           indf1	equ	0xFE7
  5635                           plusw1	equ	0xFE3
  5636                           fsr1h	equ	0xFE2
  5637                           fsr1l	equ	0xFE1
  5638                           indf2	equ	0xFDF
  5639                           postinc2	equ	0xFDE
  5640                           postdec2	equ	0xFDD
  5641                           plusw2	equ	0xFDB
  5642                           fsr2h	equ	0xFDA
  5643                           fsr2l	equ	0xFD9
  5644                           status	equ	0xFD8
  5645                           
  5646 ;; *************** function ___wmul *****************
  5647 ;; Defined at:
  5648 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;  multiplier      2   35[COMRAM] unsigned int 
  5651 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;  product         2   39[COMRAM] unsigned int 
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  2   35[COMRAM] unsigned int 
  5656 ;; Registers used:
  5657 ;;		wreg, status,2, status,0, prodl, prodh
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5663 ;;      Params:         4       0       0       0
  5664 ;;      Locals:         2       0       0       0
  5665 ;;      Temps:          0       0       0       0
  5666 ;;      Totals:         6       0       0       0
  5667 ;;Total ram usage:        6 bytes
  5668 ;; Hardware stack levels used:    1
  5669 ;; Hardware stack levels required when called:    3
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		_setMotorPWM
  5674 ;;		_sprintf
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           	psect	text20
  5679  001D20                     __ptext20:
  5680                           	opt stack 0
  5681  001D20                     ___wmul:
  5682                           	opt stack 24
  5683                           
  5684                           ;incstack = 0
  5685  001D20  5024               	movf	___wmul@multiplier,w,c
  5686  001D22  0226               	mulwf	___wmul@multiplicand,c
  5687  001D24  CFF3 F028          	movff	prodl,___wmul@product
  5688  001D28  CFF4 F029          	movff	prodh,___wmul@product+1
  5689  001D2C  5024               	movf	___wmul@multiplier,w,c
  5690  001D2E  0227               	mulwf	___wmul@multiplicand+1,c
  5691  001D30  50F3               	movf	prodl,w,c
  5692  001D32  2629               	addwf	___wmul@product+1,f,c
  5693  001D34  5025               	movf	___wmul@multiplier+1,w,c
  5694  001D36  0226               	mulwf	___wmul@multiplicand,c
  5695  001D38  50F3               	movf	prodl,w,c
  5696  001D3A  2629               	addwf	___wmul@product+1,f,c
  5697  001D3C  C028  F024         	movff	___wmul@product,?___wmul
  5698  001D40  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5699  001D44  0012               	return	
  5700  001D46                     __end_of___wmul:
  5701                           	opt stack 0
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           prodh	equ	0xFF4
  5707                           prodl	equ	0xFF3
  5708                           intcon	equ	0xFF2
  5709                           postinc0	equ	0xFEE
  5710                           wreg	equ	0xFE8
  5711                           indf1	equ	0xFE7
  5712                           plusw1	equ	0xFE3
  5713                           fsr1h	equ	0xFE2
  5714                           fsr1l	equ	0xFE1
  5715                           indf2	equ	0xFDF
  5716                           postinc2	equ	0xFDE
  5717                           postdec2	equ	0xFDD
  5718                           plusw2	equ	0xFDB
  5719                           fsr2h	equ	0xFDA
  5720                           fsr2l	equ	0xFD9
  5721                           status	equ	0xFD8
  5722                           
  5723 ;; *************** function ___lwmod *****************
  5724 ;; Defined at:
  5725 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;  dividend        2   42[COMRAM] unsigned int 
  5728 ;;  divisor         2   44[COMRAM] unsigned int 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  counter         1   46[COMRAM] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  2   42[COMRAM] unsigned int 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5740 ;;      Params:         4       0       0       0
  5741 ;;      Locals:         1       0       0       0
  5742 ;;      Temps:          0       0       0       0
  5743 ;;      Totals:         5       0       0       0
  5744 ;;Total ram usage:        5 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    3
  5747 ;; This function calls:
  5748 ;;		Nothing
  5749 ;; This function is called by:
  5750 ;;		_sprintf
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text21
  5755  001AC6                     __ptext21:
  5756                           	opt stack 0
  5757  001AC6                     ___lwmod:
  5758                           	opt stack 26
  5759                           
  5760                           ;incstack = 0
  5761  001AC6  502D               	movf	___lwmod@divisor,w,c
  5762  001AC8  102E               	iorwf	___lwmod@divisor+1,w,c
  5763  001ACA  B4D8               	btfsc	status,2,c
  5764  001ACC  D018               	goto	l907
  5765  001ACE  0E01               	movlw	1
  5766  001AD0  6E2F               	movwf	___lwmod@counter,c
  5767  001AD2  D004               	goto	l2156
  5768  001AD4                     l2154:
  5769  001AD4  90D8               	bcf	status,0,c
  5770  001AD6  362D               	rlcf	___lwmod@divisor,f,c
  5771  001AD8  362E               	rlcf	___lwmod@divisor+1,f,c
  5772  001ADA  2A2F               	incf	___lwmod@counter,f,c
  5773  001ADC                     l2156:
  5774  001ADC  AE2E               	btfss	___lwmod@divisor+1,7,c
  5775  001ADE  D7FA               	goto	l2154
  5776  001AE0                     l2158:
  5777  001AE0  502D               	movf	___lwmod@divisor,w,c
  5778  001AE2  5C2B               	subwf	___lwmod@dividend,w,c
  5779  001AE4  502E               	movf	___lwmod@divisor+1,w,c
  5780  001AE6  582C               	subwfb	___lwmod@dividend+1,w,c
  5781  001AE8  A0D8               	btfss	status,0,c
  5782  001AEA  D004               	goto	l2162
  5783  001AEC  502D               	movf	___lwmod@divisor,w,c
  5784  001AEE  5E2B               	subwf	___lwmod@dividend,f,c
  5785  001AF0  502E               	movf	___lwmod@divisor+1,w,c
  5786  001AF2  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5787  001AF4                     l2162:
  5788  001AF4  90D8               	bcf	status,0,c
  5789  001AF6  322E               	rrcf	___lwmod@divisor+1,f,c
  5790  001AF8  322D               	rrcf	___lwmod@divisor,f,c
  5791  001AFA  2E2F               	decfsz	___lwmod@counter,f,c
  5792  001AFC  D7F1               	goto	l2158
  5793  001AFE                     l907:
  5794  001AFE  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5795  001B02  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5796  001B06  0012               	return		;funcret
  5797  001B08                     __end_of___lwmod:
  5798                           	opt stack 0
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           indf1	equ	0xFE7
  5809                           plusw1	equ	0xFE3
  5810                           fsr1h	equ	0xFE2
  5811                           fsr1l	equ	0xFE1
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           postdec2	equ	0xFDD
  5815                           plusw2	equ	0xFDB
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function ___lwdiv *****************
  5821 ;; Defined at:
  5822 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  dividend        2   35[COMRAM] unsigned int 
  5825 ;;  divisor         2   37[COMRAM] unsigned int 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  quotient        2   39[COMRAM] unsigned int 
  5828 ;;  counter         1   41[COMRAM] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  2   35[COMRAM] unsigned int 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5838 ;;      Params:         4       0       0       0
  5839 ;;      Locals:         3       0       0       0
  5840 ;;      Temps:          0       0       0       0
  5841 ;;      Totals:         7       0       0       0
  5842 ;;Total ram usage:        7 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    3
  5845 ;; This function calls:
  5846 ;;		Nothing
  5847 ;; This function is called by:
  5848 ;;		_sprintf
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           	psect	text22
  5853  001A74                     __ptext22:
  5854                           	opt stack 0
  5855  001A74                     ___lwdiv:
  5856                           	opt stack 26
  5857                           
  5858                           ;incstack = 0
  5859  001A74  0E00               	movlw	0
  5860  001A76  6E29               	movwf	___lwdiv@quotient+1,c
  5861  001A78  0E00               	movlw	0
  5862  001A7A  6E28               	movwf	___lwdiv@quotient,c
  5863  001A7C  5026               	movf	___lwdiv@divisor,w,c
  5864  001A7E  1027               	iorwf	___lwdiv@divisor+1,w,c
  5865  001A80  B4D8               	btfsc	status,2,c
  5866  001A82  D01C               	goto	l897
  5867  001A84  0E01               	movlw	1
  5868  001A86  6E2A               	movwf	___lwdiv@counter,c
  5869  001A88  D004               	goto	l2136
  5870  001A8A                     l2134:
  5871  001A8A  90D8               	bcf	status,0,c
  5872  001A8C  3626               	rlcf	___lwdiv@divisor,f,c
  5873  001A8E  3627               	rlcf	___lwdiv@divisor+1,f,c
  5874  001A90  2A2A               	incf	___lwdiv@counter,f,c
  5875  001A92                     l2136:
  5876  001A92  AE27               	btfss	___lwdiv@divisor+1,7,c
  5877  001A94  D7FA               	goto	l2134
  5878  001A96                     l2138:
  5879  001A96  90D8               	bcf	status,0,c
  5880  001A98  3628               	rlcf	___lwdiv@quotient,f,c
  5881  001A9A  3629               	rlcf	___lwdiv@quotient+1,f,c
  5882  001A9C  5026               	movf	___lwdiv@divisor,w,c
  5883  001A9E  5C24               	subwf	___lwdiv@dividend,w,c
  5884  001AA0  5027               	movf	___lwdiv@divisor+1,w,c
  5885  001AA2  5825               	subwfb	___lwdiv@dividend+1,w,c
  5886  001AA4  A0D8               	btfss	status,0,c
  5887  001AA6  D005               	goto	l2146
  5888  001AA8  5026               	movf	___lwdiv@divisor,w,c
  5889  001AAA  5E24               	subwf	___lwdiv@dividend,f,c
  5890  001AAC  5027               	movf	___lwdiv@divisor+1,w,c
  5891  001AAE  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5892  001AB0  8028               	bsf	___lwdiv@quotient,0,c
  5893  001AB2                     l2146:
  5894  001AB2  90D8               	bcf	status,0,c
  5895  001AB4  3227               	rrcf	___lwdiv@divisor+1,f,c
  5896  001AB6  3226               	rrcf	___lwdiv@divisor,f,c
  5897  001AB8  2E2A               	decfsz	___lwdiv@counter,f,c
  5898  001ABA  D7ED               	goto	l2138
  5899  001ABC                     l897:
  5900  001ABC  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5901  001AC0  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5902  001AC4  0012               	return		;funcret
  5903  001AC6                     __end_of___lwdiv:
  5904                           	opt stack 0
  5905                           tblptru	equ	0xFF8
  5906                           tblptrh	equ	0xFF7
  5907                           tblptrl	equ	0xFF6
  5908                           tablat	equ	0xFF5
  5909                           prodh	equ	0xFF4
  5910                           prodl	equ	0xFF3
  5911                           intcon	equ	0xFF2
  5912                           postinc0	equ	0xFEE
  5913                           wreg	equ	0xFE8
  5914                           indf1	equ	0xFE7
  5915                           plusw1	equ	0xFE3
  5916                           fsr1h	equ	0xFE2
  5917                           fsr1l	equ	0xFE1
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           plusw2	equ	0xFDB
  5922                           fsr2h	equ	0xFDA
  5923                           fsr2l	equ	0xFD9
  5924                           status	equ	0xFD8
  5925                           
  5926 ;; *************** function _grabRightIR *****************
  5927 ;; Defined at:
  5928 ;;		line 74 in file "IR_Reading.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5933 ;;  i               1   42[COMRAM] unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  2   35[COMRAM] unsigned int 
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5943 ;;      Params:         2       0       0       0
  5944 ;;      Locals:         3       0       0       0
  5945 ;;      Temps:          3       0       0       0
  5946 ;;      Totals:         8       0       0       0
  5947 ;;Total ram usage:        8 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    3
  5950 ;; This function calls:
  5951 ;;		Nothing
  5952 ;; This function is called by:
  5953 ;;		_ScanIR
  5954 ;;		_ScanWithRange
  5955 ;;		_main
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text23
  5960  0018DA                     __ptext23:
  5961                           	opt stack 0
  5962  0018DA                     _grabRightIR:
  5963                           	opt stack 27
  5964                           
  5965                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5966                           
  5967                           ;incstack = 0
  5968  0018DA  0E00               	movlw	0
  5969  0018DC  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5970  0018DE  0E00               	movlw	0
  5971  0018E0  6E29               	movwf	grabRightIR@IR_signal,c
  5972                           
  5973                           ;IR_Reading.c: 77: unsigned char i=0;
  5974  0018E2  0E00               	movlw	0
  5975  0018E4  6E2B               	movwf	grabRightIR@i,c
  5976                           
  5977                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5978  0018E6  0E00               	movlw	0
  5979  0018E8  6E2B               	movwf	grabRightIR@i,c
  5980  0018EA                     l2198:
  5981  0018EA  0E03               	movlw	3
  5982  0018EC  642B               	cpfsgt	grabRightIR@i,c
  5983  0018EE  D001               	goto	l2202
  5984  0018F0  D01E               	goto	l2208
  5985  0018F2                     l2202:
  5986                           
  5987                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5988  0018F2  5069               	movf	3945,w,c	;volatile
  5989  0018F4  6E26               	movwf	??_grabRightIR& (0+255),c
  5990  0018F6  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5991  0018F8  0E07               	movlw	7
  5992  0018FA                     u1505:
  5993  0018FA  90D8               	bcf	status,0,c
  5994  0018FC  3626               	rlcf	??_grabRightIR,f,c
  5995  0018FE  3627               	rlcf	??_grabRightIR+1,f,c
  5996  001900  2EE8               	decfsz	wreg,f,c
  5997  001902  D7FB               	goto	u1505
  5998  001904  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5999  001908  90D8               	bcf	status,0,c
  6000  00190A  3228               	rrcf	??_grabRightIR+2,f,c
  6001  00190C  5028               	movf	??_grabRightIR+2,w,c
  6002  00190E  1226               	iorwf	??_grabRightIR,f,c
  6003  001910  0E00               	movlw	0
  6004  001912  1227               	iorwf	??_grabRightIR+1,f,c
  6005  001914  5026               	movf	??_grabRightIR,w,c
  6006  001916  2629               	addwf	grabRightIR@IR_signal,f,c
  6007  001918  5027               	movf	??_grabRightIR+1,w,c
  6008  00191A  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6009                           
  6010                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6011  00191C  0E82               	movlw	130
  6012  00191E  6E26               	movwf	??_grabRightIR& (0+255),c
  6013  001920  0EDE               	movlw	222
  6014  001922                     u3167:
  6015  001922  2EE8               	decfsz	wreg,f,c
  6016  001924  D7FE               	goto	u3167
  6017  001926  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6018  001928  D7FC               	goto	u3167
  6019  00192A  2A2B               	incf	grabRightIR@i,f,c
  6020  00192C  D7DE               	goto	l2198
  6021  00192E                     l2208:
  6022                           
  6023                           ;IR_Reading.c: 83: }
  6024                           ;IR_Reading.c: 85: return IR_signal>>2;
  6025  00192E  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6026  001932  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6027  001936  90D8               	bcf	status,0,c
  6028  001938  3227               	rrcf	??_grabRightIR+1,f,c
  6029  00193A  3226               	rrcf	??_grabRightIR,f,c
  6030  00193C  90D8               	bcf	status,0,c
  6031  00193E  3227               	rrcf	??_grabRightIR+1,f,c
  6032  001940  3226               	rrcf	??_grabRightIR,f,c
  6033  001942  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6034  001946  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6035  00194A  0012               	return	
  6036  00194C                     __end_of_grabRightIR:
  6037                           	opt stack 0
  6038                           tblptru	equ	0xFF8
  6039                           tblptrh	equ	0xFF7
  6040                           tblptrl	equ	0xFF6
  6041                           tablat	equ	0xFF5
  6042                           prodh	equ	0xFF4
  6043                           prodl	equ	0xFF3
  6044                           intcon	equ	0xFF2
  6045                           postinc0	equ	0xFEE
  6046                           wreg	equ	0xFE8
  6047                           indf1	equ	0xFE7
  6048                           plusw1	equ	0xFE3
  6049                           fsr1h	equ	0xFE2
  6050                           fsr1l	equ	0xFE1
  6051                           indf2	equ	0xFDF
  6052                           postinc2	equ	0xFDE
  6053                           postdec2	equ	0xFDD
  6054                           plusw2	equ	0xFDB
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _grabLeftIR *****************
  6060 ;; Defined at:
  6061 ;;		line 90 in file "IR_Reading.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;		None
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6066 ;;  i               1   42[COMRAM] unsigned char 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  2   35[COMRAM] unsigned int 
  6069 ;; Registers used:
  6070 ;;		wreg, status,2, status,0
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6076 ;;      Params:         2       0       0       0
  6077 ;;      Locals:         3       0       0       0
  6078 ;;      Temps:          3       0       0       0
  6079 ;;      Totals:         8       0       0       0
  6080 ;;Total ram usage:        8 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    3
  6083 ;; This function calls:
  6084 ;;		Nothing
  6085 ;; This function is called by:
  6086 ;;		_ScanIR
  6087 ;;		_ScanWithRange
  6088 ;;		_main
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text24
  6093  00194C                     __ptext24:
  6094                           	opt stack 0
  6095  00194C                     _grabLeftIR:
  6096                           	opt stack 27
  6097                           
  6098                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6099                           
  6100                           ;incstack = 0
  6101  00194C  0E00               	movlw	0
  6102  00194E  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6103  001950  0E00               	movlw	0
  6104  001952  6E29               	movwf	grabLeftIR@IR_signal,c
  6105                           
  6106                           ;IR_Reading.c: 93: unsigned char i=0;
  6107  001954  0E00               	movlw	0
  6108  001956  6E2B               	movwf	grabLeftIR@i,c
  6109                           
  6110                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6111  001958  0E00               	movlw	0
  6112  00195A  6E2B               	movwf	grabLeftIR@i,c
  6113  00195C                     l2214:
  6114  00195C  0E03               	movlw	3
  6115  00195E  642B               	cpfsgt	grabLeftIR@i,c
  6116  001960  D001               	goto	l2218
  6117  001962  D01E               	goto	l2224
  6118  001964                     l2218:
  6119                           
  6120                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6121  001964  5067               	movf	3943,w,c	;volatile
  6122  001966  6E26               	movwf	??_grabLeftIR& (0+255),c
  6123  001968  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6124  00196A  0E07               	movlw	7
  6125  00196C                     u1535:
  6126  00196C  90D8               	bcf	status,0,c
  6127  00196E  3626               	rlcf	??_grabLeftIR,f,c
  6128  001970  3627               	rlcf	??_grabLeftIR+1,f,c
  6129  001972  2EE8               	decfsz	wreg,f,c
  6130  001974  D7FB               	goto	u1535
  6131  001976  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6132  00197A  90D8               	bcf	status,0,c
  6133  00197C  3228               	rrcf	??_grabLeftIR+2,f,c
  6134  00197E  5028               	movf	??_grabLeftIR+2,w,c
  6135  001980  1226               	iorwf	??_grabLeftIR,f,c
  6136  001982  0E00               	movlw	0
  6137  001984  1227               	iorwf	??_grabLeftIR+1,f,c
  6138  001986  5026               	movf	??_grabLeftIR,w,c
  6139  001988  2629               	addwf	grabLeftIR@IR_signal,f,c
  6140  00198A  5027               	movf	??_grabLeftIR+1,w,c
  6141  00198C  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6142                           
  6143                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6144  00198E  0E82               	movlw	130
  6145  001990  6E26               	movwf	??_grabLeftIR& (0+255),c
  6146  001992  0EDE               	movlw	222
  6147  001994                     u3177:
  6148  001994  2EE8               	decfsz	wreg,f,c
  6149  001996  D7FE               	goto	u3177
  6150  001998  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6151  00199A  D7FC               	goto	u3177
  6152  00199C  2A2B               	incf	grabLeftIR@i,f,c
  6153  00199E  D7DE               	goto	l2214
  6154  0019A0                     l2224:
  6155                           
  6156                           ;IR_Reading.c: 99: }
  6157                           ;IR_Reading.c: 101: return IR_signal>>2;
  6158  0019A0  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6159  0019A4  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6160  0019A8  90D8               	bcf	status,0,c
  6161  0019AA  3227               	rrcf	??_grabLeftIR+1,f,c
  6162  0019AC  3226               	rrcf	??_grabLeftIR,f,c
  6163  0019AE  90D8               	bcf	status,0,c
  6164  0019B0  3227               	rrcf	??_grabLeftIR+1,f,c
  6165  0019B2  3226               	rrcf	??_grabLeftIR,f,c
  6166  0019B4  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6167  0019B8  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6168  0019BC  0012               	return	
  6169  0019BE                     __end_of_grabLeftIR:
  6170                           	opt stack 0
  6171                           tblptru	equ	0xFF8
  6172                           tblptrh	equ	0xFF7
  6173                           tblptrl	equ	0xFF6
  6174                           tablat	equ	0xFF5
  6175                           prodh	equ	0xFF4
  6176                           prodl	equ	0xFF3
  6177                           intcon	equ	0xFF2
  6178                           postinc0	equ	0xFEE
  6179                           wreg	equ	0xFE8
  6180                           indf1	equ	0xFE7
  6181                           plusw1	equ	0xFE3
  6182                           fsr1h	equ	0xFE2
  6183                           fsr1l	equ	0xFE1
  6184                           indf2	equ	0xFDF
  6185                           postinc2	equ	0xFDE
  6186                           postdec2	equ	0xFDD
  6187                           plusw2	equ	0xFDB
  6188                           fsr2h	equ	0xFDA
  6189                           fsr2l	equ	0xFD9
  6190                           status	equ	0xFD8
  6191                           
  6192 ;; *************** function _SetLine *****************
  6193 ;; Defined at:
  6194 ;;		line 74 in file "LCD.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;  line            1    wreg     unsigned char 
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  line            1   41[COMRAM] unsigned char 
  6199 ;; Return value:  Size  Location     Type
  6200 ;;		None               void
  6201 ;; Registers used:
  6202 ;;		wreg, status,2, status,0, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : 0/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6208 ;;      Params:         0       0       0       0
  6209 ;;      Locals:         1       0       0       0
  6210 ;;      Temps:          0       0       0       0
  6211 ;;      Totals:         1       0       0       0
  6212 ;;Total ram usage:        1 bytes
  6213 ;; Hardware stack levels used:    1
  6214 ;; Hardware stack levels required when called:    6
  6215 ;; This function calls:
  6216 ;;		_SendLCD
  6217 ;; This function is called by:
  6218 ;;		_ScanIR
  6219 ;;		_ScanWithRange
  6220 ;;		_main
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           	psect	text25
  6225  001C9A                     __ptext25:
  6226                           	opt stack 0
  6227  001C9A                     _SetLine:
  6228                           	opt stack 24
  6229                           
  6230                           ;incstack = 0
  6231                           ;SetLine@line stored from wreg
  6232  001C9A  6E2A               	movwf	SetLine@line,c
  6233                           
  6234                           ;LCD.c: 75: if (line==1) {
  6235  001C9C  042A               	decf	SetLine@line,w,c
  6236  001C9E  A4D8               	btfss	status,2,c
  6237  001CA0  D006               	goto	l2232
  6238                           
  6239                           ;LCD.c: 76: SendLCD(0x80,0);
  6240  001CA2  0E00               	movlw	0
  6241  001CA4  6E28               	movwf	SendLCD@type,c
  6242  001CA6  0E80               	movlw	128
  6243  001CA8  EC65  F00E         	call	_SendLCD
  6244                           
  6245                           ;LCD.c: 77: } else if (line==2) {
  6246  001CAC  D009               	goto	l2236
  6247  001CAE                     l2232:
  6248  001CAE  0E02               	movlw	2
  6249  001CB0  182A               	xorwf	SetLine@line,w,c
  6250  001CB2  A4D8               	btfss	status,2,c
  6251  001CB4  D005               	goto	l2236
  6252                           
  6253                           ;LCD.c: 78: SendLCD(0xC0,0);
  6254  001CB6  0E00               	movlw	0
  6255  001CB8  6E28               	movwf	SendLCD@type,c
  6256  001CBA  0EC0               	movlw	192
  6257  001CBC  EC65  F00E         	call	_SendLCD
  6258  001CC0                     l2236:
  6259                           
  6260                           ;LCD.c: 79: }
  6261                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6262  001CC0  0E21               	movlw	33
  6263  001CC2                     u3187:
  6264  001CC2  2EE8               	decfsz	wreg,f,c
  6265  001CC4  D7FE               	goto	u3187
  6266  001CC6  F000               	nop	
  6267  001CC8  0012               	return		;funcret
  6268  001CCA                     __end_of_SetLine:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           intcon	equ	0xFF2
  6277                           postinc0	equ	0xFEE
  6278                           wreg	equ	0xFE8
  6279                           indf1	equ	0xFE7
  6280                           plusw1	equ	0xFE3
  6281                           fsr1h	equ	0xFE2
  6282                           fsr1l	equ	0xFE1
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           plusw2	equ	0xFDB
  6287                           fsr2h	equ	0xFDA
  6288                           fsr2l	equ	0xFD9
  6289                           status	equ	0xFD8
  6290                           
  6291 ;; *************** function _LCD_String *****************
  6292 ;; Defined at:
  6293 ;;		line 83 in file "LCD.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  string          2   41[COMRAM] PTR unsigned char 
  6296 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6297 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6298 ;;		 -> STR_1(12), 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;		None
  6301 ;; Return value:  Size  Location     Type
  6302 ;;		None               void
  6303 ;; Registers used:
  6304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6310 ;;      Params:         2       0       0       0
  6311 ;;      Locals:         0       0       0       0
  6312 ;;      Temps:          0       0       0       0
  6313 ;;      Totals:         2       0       0       0
  6314 ;;Total ram usage:        2 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    6
  6317 ;; This function calls:
  6318 ;;		_SendLCD
  6319 ;; This function is called by:
  6320 ;;		_ScanIR
  6321 ;;		_ScanWithRange
  6322 ;;		_main
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	text26
  6327  0019BE                     __ptext26:
  6328                           	opt stack 0
  6329  0019BE                     _LCD_String:
  6330                           	opt stack 23
  6331                           
  6332                           ;LCD.c: 85: while(*string != 0){
  6333                           
  6334                           ;incstack = 0
  6335  0019BE  D01A               	goto	l2246
  6336  0019C0                     l2240:
  6337                           
  6338                           ;LCD.c: 88: SendLCD(*string++,1);
  6339  0019C0  0E01               	movlw	1
  6340  0019C2  6E28               	movwf	SendLCD@type,c
  6341  0019C4  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6342  0019C8  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6343  0019CC  6AF8               	clrf	tblptru,c
  6344  0019CE  0E02               	movlw	(high __ramtop+-1)
  6345  0019D0  64F7               	cpfsgt	tblptrh,c
  6346  0019D2  D003               	bra	u1577
  6347  0019D4  0008               	tblrd		*
  6348  0019D6  50F5               	movf	tablat,w,c
  6349  0019D8  D005               	bra	u1570
  6350  0019DA                     u1577:
  6351  0019DA  CFF6 FFE1          	movff	tblptrl,fsr1l
  6352  0019DE  CFF7 FFE2          	movff	tblptrh,fsr1h
  6353  0019E2  50E7               	movf	indf1,w,c
  6354  0019E4                     u1570:
  6355  0019E4  EC65  F00E         	call	_SendLCD
  6356  0019E8  4A2A               	infsnz	LCD_String@string,f,c
  6357  0019EA  2A2B               	incf	LCD_String@string+1,f,c
  6358                           
  6359                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6360  0019EC  0E21               	movlw	33
  6361  0019EE                     u3197:
  6362  0019EE  2EE8               	decfsz	wreg,f,c
  6363  0019F0  D7FE               	goto	u3197
  6364  0019F2  F000               	nop	
  6365  0019F4                     l2246:
  6366  0019F4  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6367  0019F8  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6368  0019FC  6AF8               	clrf	tblptru,c
  6369  0019FE  0E02               	movlw	(high __ramtop+-1)
  6370  001A00  64F7               	cpfsgt	tblptrh,c
  6371  001A02  D003               	bra	u1587
  6372  001A04  0008               	tblrd		*
  6373  001A06  50F5               	movf	tablat,w,c
  6374  001A08  D005               	bra	u1580
  6375  001A0A                     u1587:
  6376  001A0A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6377  001A0E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6378  001A12  50E7               	movf	indf1,w,c
  6379  001A14                     u1580:
  6380  001A14  0900               	iorlw	0
  6381  001A16  B4D8               	btfsc	status,2,c
  6382  001A18  0012               	return	
  6383  001A1A  D7D2               	goto	l2240
  6384  001A1C                     __end_of_LCD_String:
  6385                           	opt stack 0
  6386                           tblptru	equ	0xFF8
  6387                           tblptrh	equ	0xFF7
  6388                           tblptrl	equ	0xFF6
  6389                           tablat	equ	0xFF5
  6390                           prodh	equ	0xFF4
  6391                           prodl	equ	0xFF3
  6392                           intcon	equ	0xFF2
  6393                           postinc0	equ	0xFEE
  6394                           wreg	equ	0xFE8
  6395                           indf1	equ	0xFE7
  6396                           plusw1	equ	0xFE3
  6397                           fsr1h	equ	0xFE2
  6398                           fsr1l	equ	0xFE1
  6399                           indf2	equ	0xFDF
  6400                           postinc2	equ	0xFDE
  6401                           postdec2	equ	0xFDD
  6402                           plusw2	equ	0xFDB
  6403                           fsr2h	equ	0xFDA
  6404                           fsr2l	equ	0xFD9
  6405                           status	equ	0xFD8
  6406                           
  6407 ;; *************** function _SendLCD *****************
  6408 ;; Defined at:
  6409 ;;		line 27 in file "LCD.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  Byte            1    wreg     unsigned char 
  6412 ;;  type            1   39[COMRAM] unsigned char 
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  Byte            1   40[COMRAM] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6424 ;;      Params:         1       0       0       0
  6425 ;;      Locals:         1       0       0       0
  6426 ;;      Temps:          0       0       0       0
  6427 ;;      Totals:         2       0       0       0
  6428 ;;Total ram usage:        2 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    5
  6431 ;; This function calls:
  6432 ;;		_LCDout
  6433 ;; This function is called by:
  6434 ;;		_initLCD
  6435 ;;		_SetLine
  6436 ;;		_LCD_String
  6437 ;;		_ScanIR
  6438 ;;		_ScanWithRange
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text27
  6444  001CCA                     __ptext27:
  6445                           	opt stack 0
  6446  001CCA                     _SendLCD:
  6447                           	opt stack 24
  6448                           
  6449                           ;incstack = 0
  6450                           ;SendLCD@Byte stored from wreg
  6451  001CCA  6E29               	movwf	SendLCD@Byte,c
  6452                           
  6453                           ;LCD.c: 30: LATAbits.LATA6=type;
  6454  001CCC  B028               	btfsc	SendLCD@type,0,c
  6455  001CCE  D002               	bra	u1365
  6456  001CD0  9C89               	bcf	3977,6,c	;volatile
  6457  001CD2  D001               	bra	u1366
  6458  001CD4                     u1365:
  6459  001CD4  8C89               	bsf	3977,6,c	;volatile
  6460  001CD6                     u1366:
  6461                           
  6462                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6463  001CD6  3829               	swapf	SendLCD@Byte,w,c
  6464  001CD8  0B0F               	andlw	15
  6465  001CDA  0B0F               	andlw	15
  6466  001CDC  EC9B  F00A         	call	_LCDout
  6467                           
  6468                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6469  001CE0  0E06               	movlw	6
  6470  001CE2                     u3207:
  6471  001CE2  2EE8               	decfsz	wreg,f,c
  6472  001CE4  D7FE               	goto	u3207
  6473  001CE6  D000               	nop2		;nop
  6474                           
  6475                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6476  001CE8  5029               	movf	SendLCD@Byte,w,c
  6477  001CEA  0B0F               	andlw	15
  6478  001CEC  EC9B  F00A         	call	_LCDout
  6479                           
  6480                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6481  001CF0  0E21               	movlw	33
  6482  001CF2                     u3217:
  6483  001CF2  2EE8               	decfsz	wreg,f,c
  6484  001CF4  D7FE               	goto	u3217
  6485  001CF6  F000               	nop	
  6486  001CF8  0012               	return		;funcret
  6487  001CFA                     __end_of_SendLCD:
  6488                           	opt stack 0
  6489                           tblptru	equ	0xFF8
  6490                           tblptrh	equ	0xFF7
  6491                           tblptrl	equ	0xFF6
  6492                           tablat	equ	0xFF5
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           intcon	equ	0xFF2
  6496                           postinc0	equ	0xFEE
  6497                           wreg	equ	0xFE8
  6498                           indf1	equ	0xFE7
  6499                           plusw1	equ	0xFE3
  6500                           fsr1h	equ	0xFE2
  6501                           fsr1l	equ	0xFE1
  6502                           indf2	equ	0xFDF
  6503                           postinc2	equ	0xFDE
  6504                           postdec2	equ	0xFDD
  6505                           plusw2	equ	0xFDB
  6506                           fsr2h	equ	0xFDA
  6507                           fsr2l	equ	0xFD9
  6508                           status	equ	0xFD8
  6509                           
  6510 ;; *************** function _LCDout *****************
  6511 ;; Defined at:
  6512 ;;		line 14 in file "LCD.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;  number          1    wreg     unsigned char 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  number          1   38[COMRAM] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, status,2, status,0, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6526 ;;      Params:         0       0       0       0
  6527 ;;      Locals:         1       0       0       0
  6528 ;;      Temps:          3       0       0       0
  6529 ;;      Totals:         4       0       0       0
  6530 ;;Total ram usage:        4 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    4
  6533 ;; This function calls:
  6534 ;;		_E_TOG
  6535 ;; This function is called by:
  6536 ;;		_SendLCD
  6537 ;;		_initLCD
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text28
  6542  001536                     __ptext28:
  6543                           	opt stack 0
  6544  001536                     _LCDout:
  6545                           	opt stack 24
  6546                           
  6547                           ;incstack = 0
  6548                           ;LCDout@number stored from wreg
  6549  001536  6E27               	movwf	LCDout@number,c
  6550                           
  6551                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6552  001538  5027               	movf	LCDout@number,w,c
  6553  00153A  6E24               	movwf	??_LCDout& (0+255),c
  6554  00153C  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6555  00153E  0E07               	movlw	7
  6556  001540                     u1255:
  6557  001540  90D8               	bcf	status,0,c
  6558  001542  3624               	rlcf	??_LCDout,f,c
  6559  001544  3625               	rlcf	??_LCDout+1,f,c
  6560  001546  2EE8               	decfsz	wreg,f,c
  6561  001548  D7FB               	goto	u1255
  6562  00154A  0E07               	movlw	7
  6563  00154C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6564  00154E                     u1265:
  6565  00154E  3425               	rlcf	??_LCDout+1,w,c
  6566  001550  3225               	rrcf	??_LCDout+1,f,c
  6567  001552  3224               	rrcf	??_LCDout,f,c
  6568  001554  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6569  001556  D7FB               	goto	u1265
  6570  001558  4624               	rlncf	??_LCDout,f,c
  6571  00155A  508B               	movf	3979,w,c	;volatile
  6572  00155C  1824               	xorwf	??_LCDout,w,c
  6573  00155E  0BFD               	andlw	-3
  6574  001560  1824               	xorwf	??_LCDout,w,c
  6575  001562  6E8B               	movwf	3979,c	;volatile
  6576                           
  6577                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6578  001564  5027               	movf	LCDout@number,w,c
  6579  001566  6E24               	movwf	??_LCDout& (0+255),c
  6580  001568  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6581  00156A  0E06               	movlw	6
  6582  00156C                     u1275:
  6583  00156C  90D8               	bcf	status,0,c
  6584  00156E  3624               	rlcf	??_LCDout,f,c
  6585  001570  3625               	rlcf	??_LCDout+1,f,c
  6586  001572  2EE8               	decfsz	wreg,f,c
  6587  001574  D7FB               	goto	u1275
  6588  001576  0E07               	movlw	7
  6589  001578  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6590  00157A                     u1285:
  6591  00157A  3425               	rlcf	??_LCDout+1,w,c
  6592  00157C  3225               	rrcf	??_LCDout+1,f,c
  6593  00157E  3224               	rrcf	??_LCDout,f,c
  6594  001580  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6595  001582  D7FB               	goto	u1285
  6596  001584  4624               	rlncf	??_LCDout,f,c
  6597  001586  4624               	rlncf	??_LCDout,f,c
  6598  001588  508B               	movf	3979,w,c	;volatile
  6599  00158A  1824               	xorwf	??_LCDout,w,c
  6600  00158C  0BFB               	andlw	-5
  6601  00158E  1824               	xorwf	??_LCDout,w,c
  6602  001590  6E8B               	movwf	3979,c	;volatile
  6603                           
  6604                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6605  001592  5027               	movf	LCDout@number,w,c
  6606  001594  6E24               	movwf	??_LCDout& (0+255),c
  6607  001596  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6608  001598  0E05               	movlw	5
  6609  00159A                     u1295:
  6610  00159A  90D8               	bcf	status,0,c
  6611  00159C  3624               	rlcf	??_LCDout,f,c
  6612  00159E  3625               	rlcf	??_LCDout+1,f,c
  6613  0015A0  2EE8               	decfsz	wreg,f,c
  6614  0015A2  D7FB               	goto	u1295
  6615  0015A4  0E07               	movlw	7
  6616  0015A6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6617  0015A8                     u1305:
  6618  0015A8  3425               	rlcf	??_LCDout+1,w,c
  6619  0015AA  3225               	rrcf	??_LCDout+1,f,c
  6620  0015AC  3224               	rrcf	??_LCDout,f,c
  6621  0015AE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6622  0015B0  D7FB               	goto	u1305
  6623  0015B2  508C               	movf	3980,w,c	;volatile
  6624  0015B4  1824               	xorwf	??_LCDout,w,c
  6625  0015B6  0BFE               	andlw	-2
  6626  0015B8  1824               	xorwf	??_LCDout,w,c
  6627  0015BA  6E8C               	movwf	3980,c	;volatile
  6628                           
  6629                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6630  0015BC  5027               	movf	LCDout@number,w,c
  6631  0015BE  6E24               	movwf	??_LCDout& (0+255),c
  6632  0015C0  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6633  0015C2  3A24               	swapf	??_LCDout,f,c
  6634  0015C4  3A25               	swapf	??_LCDout+1,f,c
  6635  0015C6  0EF0               	movlw	240
  6636  0015C8  1625               	andwf	??_LCDout+1,f,c
  6637  0015CA  5024               	movf	??_LCDout,w,c
  6638  0015CC  0B0F               	andlw	15
  6639  0015CE  1225               	iorwf	??_LCDout+1,f,c
  6640  0015D0  0EF0               	movlw	240
  6641  0015D2  1624               	andwf	??_LCDout,f,c
  6642  0015D4  0E07               	movlw	7
  6643  0015D6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6644  0015D8                     u1315:
  6645  0015D8  3425               	rlcf	??_LCDout+1,w,c
  6646  0015DA  3225               	rrcf	??_LCDout+1,f,c
  6647  0015DC  3224               	rrcf	??_LCDout,f,c
  6648  0015DE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6649  0015E0  D7FB               	goto	u1315
  6650  0015E2  4624               	rlncf	??_LCDout,f,c
  6651  0015E4  508C               	movf	3980,w,c	;volatile
  6652  0015E6  1824               	xorwf	??_LCDout,w,c
  6653  0015E8  0BFD               	andlw	-3
  6654  0015EA  1824               	xorwf	??_LCDout,w,c
  6655  0015EC  6E8C               	movwf	3980,c	;volatile
  6656                           
  6657                           ;LCD.c: 21: E_TOG();
  6658  0015EE  ECDA  F00E         	call	_E_TOG	;wreg free
  6659                           
  6660                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6661  0015F2  0E03               	movlw	3
  6662  0015F4                     u3227:
  6663  0015F4  2EE8               	decfsz	wreg,f,c
  6664  0015F6  D7FE               	goto	u3227
  6665  0015F8  F000               	nop	
  6666  0015FA  0012               	return		;funcret
  6667  0015FC                     __end_of_LCDout:
  6668                           	opt stack 0
  6669                           tblptru	equ	0xFF8
  6670                           tblptrh	equ	0xFF7
  6671                           tblptrl	equ	0xFF6
  6672                           tablat	equ	0xFF5
  6673                           prodh	equ	0xFF4
  6674                           prodl	equ	0xFF3
  6675                           intcon	equ	0xFF2
  6676                           postinc0	equ	0xFEE
  6677                           wreg	equ	0xFE8
  6678                           indf1	equ	0xFE7
  6679                           plusw1	equ	0xFE3
  6680                           fsr1h	equ	0xFE2
  6681                           fsr1l	equ	0xFE1
  6682                           indf2	equ	0xFDF
  6683                           postinc2	equ	0xFDE
  6684                           postdec2	equ	0xFDD
  6685                           plusw2	equ	0xFDB
  6686                           fsr2h	equ	0xFDA
  6687                           fsr2l	equ	0xFD9
  6688                           status	equ	0xFD8
  6689                           
  6690 ;; *************** function _E_TOG *****************
  6691 ;; Defined at:
  6692 ;;		line 5 in file "LCD.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;		None               void
  6699 ;; Registers used:
  6700 ;;		wreg
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6706 ;;      Params:         0       0       0       0
  6707 ;;      Locals:         0       0       0       0
  6708 ;;      Temps:          0       0       0       0
  6709 ;;      Totals:         0       0       0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    3
  6713 ;; This function calls:
  6714 ;;		Nothing
  6715 ;; This function is called by:
  6716 ;;		_LCDout
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           	psect	text29
  6721  001DB4                     __ptext29:
  6722                           	opt stack 0
  6723  001DB4                     _E_TOG:
  6724                           	opt stack 24
  6725                           
  6726                           ;LCD.c: 8: LATCbits.LATC0=1;
  6727                           
  6728                           ;incstack = 0
  6729  001DB4  808B               	bsf	3979,0,c	;volatile
  6730                           
  6731                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6732  001DB6  0E03               	movlw	3
  6733  001DB8                     u3237:
  6734  001DB8  2EE8               	decfsz	wreg,f,c
  6735  001DBA  D7FE               	goto	u3237
  6736  001DBC  F000               	nop	
  6737                           
  6738                           ;LCD.c: 10: LATCbits.LATC0=0;
  6739  001DBE  908B               	bcf	3979,0,c	;volatile
  6740  001DC0  0012               	return		;funcret
  6741  001DC2                     __end_of_E_TOG:
  6742                           	opt stack 0
  6743                           tblptru	equ	0xFF8
  6744                           tblptrh	equ	0xFF7
  6745                           tblptrl	equ	0xFF6
  6746                           tablat	equ	0xFF5
  6747                           prodh	equ	0xFF4
  6748                           prodl	equ	0xFF3
  6749                           intcon	equ	0xFF2
  6750                           postinc0	equ	0xFEE
  6751                           wreg	equ	0xFE8
  6752                           indf1	equ	0xFE7
  6753                           plusw1	equ	0xFE3
  6754                           fsr1h	equ	0xFE2
  6755                           fsr1l	equ	0xFE1
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           postdec2	equ	0xFDD
  6759                           plusw2	equ	0xFDB
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764 ;; *************** function _InterruptHandlerLow *****************
  6765 ;; Defined at:
  6766 ;;		line 18 in file "main.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6780 ;;      Params:         0       0       0       0
  6781 ;;      Locals:         0       0       0       0
  6782 ;;      Temps:         17       0       0       0
  6783 ;;      Totals:        17       0       0       0
  6784 ;;Total ram usage:       17 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    2
  6787 ;; This function calls:
  6788 ;;		Nothing
  6789 ;; This function is called by:
  6790 ;;		Interrupt level 1
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	intcodelo
  6795  000018                     __pintcodelo:
  6796                           	opt stack 0
  6797  000018                     _InterruptHandlerLow:
  6798                           	opt stack 23
  6799                           
  6800                           ;incstack = 0
  6801  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6802  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6803  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6804  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6805  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6806  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6807  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6808  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6809  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6810  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6811  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6812  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6813  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6814  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6815  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6816  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6817  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6818  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6819                           
  6820                           ;main.c: 20: if (PIR1bits.RCIF) {
  6821  00005E  AA9E               	btfss	3998,5,c	;volatile
  6822  000060  D016               	goto	i1l373
  6823                           
  6824                           ;main.c: 21: ReceivedString[i]=RCREG;
  6825  000062  503A               	movf	_i,w,c	;volatile
  6826  000064  0D01               	mullw	1
  6827  000066  0EE6               	movlw	low _ReceivedString
  6828  000068  24F3               	addwf	prodl,w,c
  6829  00006A  6ED9               	movwf	fsr2l,c
  6830  00006C  0E01               	movlw	high _ReceivedString
  6831  00006E  20F4               	addwfc	prodh,w,c
  6832  000070  6EDA               	movwf	fsr2h,c
  6833  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6834                           
  6835                           ;main.c: 22: RFID_Read=1;
  6836  000076  0E01               	movlw	1
  6837  000078  0101               	movlb	1	; () banked
  6838  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6839                           
  6840                           ; BSR set to: 1
  6841                           ;main.c: 23: if (i==15){
  6842  00007C  0E0F               	movlw	15
  6843  00007E  183A               	xorwf	_i,w,c	;volatile
  6844  000080  A4D8               	btfss	status,2,c
  6845  000082  D003               	goto	i1l2660
  6846                           
  6847                           ; BSR set to: 1
  6848                           ;main.c: 24: i=0;
  6849  000084  0E00               	movlw	0
  6850  000086  6E3A               	movwf	_i,c	;volatile
  6851                           
  6852                           ;main.c: 25: }else{
  6853  000088  D001               	goto	i1l2662
  6854  00008A                     i1l2660:
  6855                           
  6856                           ; BSR set to: 1
  6857                           ;main.c: 26: i++;
  6858  00008A  2A3A               	incf	_i,f,c	;volatile
  6859  00008C                     i1l2662:
  6860                           
  6861                           ; BSR set to: 1
  6862                           ;main.c: 27: }
  6863                           ;main.c: 28: PIR1bits.RCIF=0;
  6864  00008C  9A9E               	bcf	3998,5,c	;volatile
  6865  00008E                     i1l373:
  6866  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6867  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6868  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6869  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6870  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6871  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6872  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6873  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6874  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6875  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6876  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6877  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6878  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6879  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6880  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6881  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6882  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6883  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6884  0000D4  0010               	retfie	
  6885  0000D6                     __end_of_InterruptHandlerLow:
  6886                           	opt stack 0
  6887                           pclatu	equ	0xFFB
  6888                           pclath	equ	0xFFA
  6889                           tblptru	equ	0xFF8
  6890                           tblptrh	equ	0xFF7
  6891                           tblptrl	equ	0xFF6
  6892                           tablat	equ	0xFF5
  6893                           prodh	equ	0xFF4
  6894                           prodl	equ	0xFF3
  6895                           intcon	equ	0xFF2
  6896                           postinc0	equ	0xFEE
  6897                           fsr0h	equ	0xFEA
  6898                           fsr0l	equ	0xFE9
  6899                           wreg	equ	0xFE8
  6900                           indf1	equ	0xFE7
  6901                           plusw1	equ	0xFE3
  6902                           fsr1h	equ	0xFE2
  6903                           fsr1l	equ	0xFE1
  6904                           bsr	equ	0xFE0
  6905                           indf2	equ	0xFDF
  6906                           postinc2	equ	0xFDE
  6907                           postdec2	equ	0xFDD
  6908                           plusw2	equ	0xFDB
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _InterruptHandlerHigh *****************
  6914 ;; Defined at:
  6915 ;;		line 34 in file "main.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;		None
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;		None               void
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6929 ;;      Params:         0       0       0       0
  6930 ;;      Locals:         0       0       0       0
  6931 ;;      Temps:         14       0       0       0
  6932 ;;      Totals:        14       0       0       0
  6933 ;;Total ram usage:       14 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    1
  6936 ;; This function calls:
  6937 ;;		i2_delay_tenth_s
  6938 ;; This function is called by:
  6939 ;;		Interrupt level 2
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           	psect	intcode
  6944  000008                     __pintcode:
  6945                           	opt stack 0
  6946  000008                     _InterruptHandlerHigh:
  6947                           	opt stack 23
  6948                           
  6949                           ;incstack = 0
  6950  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6951  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6952  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6953  000012  EFA6  F00B         	goto	int_func
  6954                           pclatu	equ	0xFFB
  6955                           pclath	equ	0xFFA
  6956                           tblptru	equ	0xFF8
  6957                           tblptrh	equ	0xFF7
  6958                           tblptrl	equ	0xFF6
  6959                           tablat	equ	0xFF5
  6960                           prodh	equ	0xFF4
  6961                           prodl	equ	0xFF3
  6962                           intcon	equ	0xFF2
  6963                           postinc0	equ	0xFEE
  6964                           fsr0h	equ	0xFEA
  6965                           fsr0l	equ	0xFE9
  6966                           wreg	equ	0xFE8
  6967                           indf1	equ	0xFE7
  6968                           plusw1	equ	0xFE3
  6969                           fsr1h	equ	0xFE2
  6970                           fsr1l	equ	0xFE1
  6971                           bsr	equ	0xFE0
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           plusw2	equ	0xFDB
  6976                           fsr2h	equ	0xFDA
  6977                           fsr2l	equ	0xFD9
  6978                           status	equ	0xFD8
  6979                           
  6980                           	psect	intcode_body
  6981  00174C                     __pintcode_body:
  6982                           	opt stack 23
  6983  00174C                     int_func:
  6984                           	opt stack 23
  6985  00174C  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6986  001750  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6987  001754  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6988  001758  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6989  00175C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6990  001760  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6991  001764  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6992  001768  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6993  00176C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6994  001770  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6995  001774  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6996  001778  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6997                           
  6998                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6999  00177C  A2F2               	btfss	intcon,1,c	;volatile
  7000  00177E  D00D               	goto	i2l381
  7001                           
  7002                           ;main.c: 36: if (mode==-1) {
  7003  001780  283B               	incf	_mode,w,c	;volatile
  7004  001782  A4D8               	btfss	status,2,c
  7005  001784  D003               	goto	i2l2670
  7006                           
  7007                           ;main.c: 38: mode=1;
  7008  001786  0E01               	movlw	1
  7009  001788  6E3B               	movwf	_mode,c	;volatile
  7010                           
  7011                           ;main.c: 39: } else if (mode==0) {
  7012  00178A  D003               	goto	i2l2674
  7013  00178C                     i2l2670:
  7014  00178C  503B               	movf	_mode,w,c	;volatile
  7015  00178E  A4D8               	btfss	status,2,c
  7016                           
  7017                           ;main.c: 43: mode=-1;
  7018                           
  7019                           ;main.c: 41: } else {
  7020  001790  683B               	setf	_mode,c	;volatile
  7021  001792                     i2l2674:
  7022                           
  7023                           ;main.c: 44: }
  7024                           ;main.c: 46: delay_tenth_s(2);
  7025  001792  0E02               	movlw	2
  7026  001794  ECFD  F00D         	call	i2_delay_tenth_s
  7027                           
  7028                           ;main.c: 47: INTCONbits.INT0IF=0;
  7029  001798  92F2               	bcf	intcon,1,c	;volatile
  7030  00179A                     i2l381:
  7031  00179A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7032  00179E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7033  0017A2  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7034  0017A6  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7035  0017AA  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7036  0017AE  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7037  0017B2  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7038  0017B6  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7039  0017BA  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7040  0017BE  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7041  0017C2  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7042  0017C6  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7043  0017CA  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7044  0017CE  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7045  0017D2  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7046  0017D4  0011               	retfie		f
  7047  0017D6                     __end_of_InterruptHandlerHigh:
  7048                           	opt stack 0
  7049                           pclatu	equ	0xFFB
  7050                           pclath	equ	0xFFA
  7051                           tblptru	equ	0xFF8
  7052                           tblptrh	equ	0xFF7
  7053                           tblptrl	equ	0xFF6
  7054                           tablat	equ	0xFF5
  7055                           prodh	equ	0xFF4
  7056                           prodl	equ	0xFF3
  7057                           intcon	equ	0xFF2
  7058                           postinc0	equ	0xFEE
  7059                           fsr0h	equ	0xFEA
  7060                           fsr0l	equ	0xFE9
  7061                           wreg	equ	0xFE8
  7062                           indf1	equ	0xFE7
  7063                           plusw1	equ	0xFE3
  7064                           fsr1h	equ	0xFE2
  7065                           fsr1l	equ	0xFE1
  7066                           bsr	equ	0xFE0
  7067                           indf2	equ	0xFDF
  7068                           postinc2	equ	0xFDE
  7069                           postdec2	equ	0xFDD
  7070                           plusw2	equ	0xFDB
  7071                           fsr2h	equ	0xFDA
  7072                           fsr2l	equ	0xFD9
  7073                           status	equ	0xFD8
  7074                           
  7075 ;; *************** function i2_delay_tenth_s *****************
  7076 ;; Defined at:
  7077 ;;		line 32 in file "Movement.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  tenth_second    1    wreg     unsigned char 
  7080 ;; Auto vars:     Size  Location     Type
  7081 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7082 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7083 ;; Return value:  Size  Location     Type
  7084 ;;		None               void
  7085 ;; Registers used:
  7086 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7087 ;; Tracked objects:
  7088 ;;		On entry : 0/0
  7089 ;;		On exit  : 0/0
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7092 ;;      Params:         0       0       0       0
  7093 ;;      Locals:         3       0       0       0
  7094 ;;      Temps:          1       0       0       0
  7095 ;;      Totals:         4       0       0       0
  7096 ;;Total ram usage:        4 bytes
  7097 ;; Hardware stack levels used:    1
  7098 ;; This function calls:
  7099 ;;		Nothing
  7100 ;; This function is called by:
  7101 ;;		_InterruptHandlerHigh
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           	psect	text32
  7106  001BFA                     __ptext32:
  7107                           	opt stack 0
  7108  001BFA                     i2_delay_tenth_s:
  7109                           	opt stack 23
  7110                           
  7111                           ;incstack = 0
  7112                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7113  001BFA  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7114                           
  7115                           ;Movement.c: 33: unsigned int i=0;
  7116  001BFC  0E00               	movlw	0
  7117  001BFE  6E04               	movwf	i2delay_tenth_s@i+1,c
  7118  001C00  0E00               	movlw	0
  7119  001C02  6E03               	movwf	i2delay_tenth_s@i,c
  7120                           
  7121                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7122  001C04  0E00               	movlw	0
  7123  001C06  6E04               	movwf	i2delay_tenth_s@i+1,c
  7124  001C08  0E01               	movlw	1
  7125  001C0A  6E03               	movwf	i2delay_tenth_s@i,c
  7126  001C0C  D009               	goto	i2l2632
  7127  001C0E                     i2l2628:
  7128                           
  7129                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7130  001C0E  0E82               	movlw	130
  7131  001C10  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7132  001C12  0EDE               	movlw	222
  7133  001C14                     i2u324_47:
  7134  001C14  2EE8               	decfsz	wreg,f,c
  7135  001C16  D7FE               	goto	i2u324_47
  7136  001C18  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7137  001C1A  D7FC               	goto	i2u324_47
  7138  001C1C  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7139  001C1E  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7140  001C20                     i2l2632:
  7141  001C20  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7142  001C22  0D02               	mullw	2
  7143  001C24  5003               	movf	i2delay_tenth_s@i,w,c
  7144  001C26  5CF3               	subwf	prodl,w,c
  7145  001C28  5004               	movf	i2delay_tenth_s@i+1,w,c
  7146  001C2A  58F4               	subwfb	prodh,w,c
  7147  001C2C  A0D8               	btfss	status,0,c
  7148  001C2E  0012               	return	
  7149  001C30  D7EE               	goto	i2l2628
  7150  001C32                     __end_ofi2_delay_tenth_s:
  7151                           	opt stack 0
  7152                           pclatu	equ	0xFFB
  7153                           pclath	equ	0xFFA
  7154                           tblptru	equ	0xFF8
  7155                           tblptrh	equ	0xFF7
  7156                           tblptrl	equ	0xFF6
  7157                           tablat	equ	0xFF5
  7158                           prodh	equ	0xFF4
  7159                           prodl	equ	0xFF3
  7160                           intcon	equ	0xFF2
  7161                           postinc0	equ	0xFEE
  7162                           fsr0h	equ	0xFEA
  7163                           fsr0l	equ	0xFE9
  7164                           wreg	equ	0xFE8
  7165                           indf1	equ	0xFE7
  7166                           plusw1	equ	0xFE3
  7167                           fsr1h	equ	0xFE2
  7168                           fsr1l	equ	0xFE1
  7169                           bsr	equ	0xFE0
  7170                           indf2	equ	0xFDF
  7171                           postinc2	equ	0xFDE
  7172                           postdec2	equ	0xFDD
  7173                           plusw2	equ	0xFDB
  7174                           fsr2h	equ	0xFDA
  7175                           fsr2l	equ	0xFD9
  7176                           status	equ	0xFD8
  7177                           pclatu	equ	0xFFB
  7178                           pclath	equ	0xFFA
  7179                           tblptru	equ	0xFF8
  7180                           tblptrh	equ	0xFF7
  7181                           tblptrl	equ	0xFF6
  7182                           tablat	equ	0xFF5
  7183                           prodh	equ	0xFF4
  7184                           prodl	equ	0xFF3
  7185                           intcon	equ	0xFF2
  7186                           postinc0	equ	0xFEE
  7187                           fsr0h	equ	0xFEA
  7188                           fsr0l	equ	0xFE9
  7189                           wreg	equ	0xFE8
  7190                           indf1	equ	0xFE7
  7191                           plusw1	equ	0xFE3
  7192                           fsr1h	equ	0xFE2
  7193                           fsr1l	equ	0xFE1
  7194                           bsr	equ	0xFE0
  7195                           indf2	equ	0xFDF
  7196                           postinc2	equ	0xFDE
  7197                           postdec2	equ	0xFDD
  7198                           plusw2	equ	0xFDB
  7199                           fsr2h	equ	0xFDA
  7200                           fsr2l	equ	0xFD9
  7201                           status	equ	0xFD8
  7202                           
  7203                           	psect	rparam
  7204  0000                     pclatu	equ	0xFFB
  7205                           pclath	equ	0xFFA
  7206                           tblptru	equ	0xFF8
  7207                           tblptrh	equ	0xFF7
  7208                           tblptrl	equ	0xFF6
  7209                           tablat	equ	0xFF5
  7210                           prodh	equ	0xFF4
  7211                           prodl	equ	0xFF3
  7212                           intcon	equ	0xFF2
  7213                           postinc0	equ	0xFEE
  7214                           fsr0h	equ	0xFEA
  7215                           fsr0l	equ	0xFE9
  7216                           wreg	equ	0xFE8
  7217                           indf1	equ	0xFE7
  7218                           plusw1	equ	0xFE3
  7219                           fsr1h	equ	0xFE2
  7220                           fsr1l	equ	0xFE1
  7221                           bsr	equ	0xFE0
  7222                           indf2	equ	0xFDF
  7223                           postinc2	equ	0xFDE
  7224                           postdec2	equ	0xFDD
  7225                           plusw2	equ	0xFDB
  7226                           fsr2h	equ	0xFDA
  7227                           fsr2l	equ	0xFD9
  7228                           status	equ	0xFD8
  7229                           
  7230                           	psect	temp
  7231  00003C                     btemp:
  7232                           	opt stack 0
  7233  00003C                     	ds	1
  7234  0000                     int$flags	set	btemp
  7235                           pclatu	equ	0xFFB
  7236                           pclath	equ	0xFFA
  7237                           tblptru	equ	0xFF8
  7238                           tblptrh	equ	0xFF7
  7239                           tblptrl	equ	0xFF6
  7240                           tablat	equ	0xFF5
  7241                           prodh	equ	0xFF4
  7242                           prodl	equ	0xFF3
  7243                           intcon	equ	0xFF2
  7244                           postinc0	equ	0xFEE
  7245                           fsr0h	equ	0xFEA
  7246                           fsr0l	equ	0xFE9
  7247                           wreg	equ	0xFE8
  7248                           indf1	equ	0xFE7
  7249                           plusw1	equ	0xFE3
  7250                           fsr1h	equ	0xFE2
  7251                           fsr1l	equ	0xFE1
  7252                           bsr	equ	0xFE0
  7253                           indf2	equ	0xFDF
  7254                           postinc2	equ	0xFDE
  7255                           postdec2	equ	0xFDD
  7256                           plusw2	equ	0xFDB
  7257                           fsr2h	equ	0xFDA
  7258                           fsr2l	equ	0xFD9
  7259                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     153
    BANK1           256    226     247
    BANK2           256      0     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   69979
                                             90 BANK0      5     5      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   23928
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    4940
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5171
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11548
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4030
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F       3        0.0%
DATA                 0      0     22F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 15:24:59 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 13DE  
                                  l65 18B4                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01BE                           ?_LCD_String 002A  
                                 l221 0CEE                                   l222 0D1E  
                                 l420 0ACE                                   l431 0A10  
                                 l424 098E                                   l390 041C  
                                 l907 1AFE                                   l897 1ABC  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l2202 18F2                                  l2124 1D7E  
                                l3020 1038                                  l3012 100A  
                                l2214 195C                                  l2134 1A8A  
                                l3110 1278                                  l3102 1254  
                                l3030 1070                                  l2240 19C0  
                                l2232 1CAE                                  l2224 19A0  
                                l2208 192E                                  l2136 1A92  
                                l3120 12F4                                  l3040 10E2  
                                l3024 1040                                  l2218 1964  
                                l2146 1AB2                                  l2138 1A96  
                                l2162 1AF4                                  l2154 1AD4  
                                l3042 110A                                  l3018 1026  
                                l2250 1BD6                                  l2236 1CC0  
                                l2156 1ADC                                  l3116 12CE  
                                l3108 1272                                  l3052 113A  
                                l2246 19F4                                  l2158 1AE0  
                                l3054 1140                                  l3118 12DA  
                                l2254 1BE8                                  l3072 1198  
                                l3066 1176                                  l3076 11D0  
                                l3164 151E                                  l3236 0D62  
                                l3500 086A                                  l2198 18EA  
                                l3086 11FE                                  l3094 1224  
                                l3078 11DA                                  l3238 0D7A  
                                l3254 0E6A                                  l3406 054C  
                                l3096 1230                                  l3248 0E66  
                                l3272 0F28                                  l3280 0F40  
                                l3432 066C                                  l3424 05E2  
                                l3530 0A8E                                  l3522 09B2  
                                l3506 08DA                                  l3196 0C20  
                                l2396 1D0E                                  l3524 0A14  
                                l3532 0AC8                                  l3460 074A  
                                l3452 0704                                  l3428 0642  
                                l3348 0422                                  l3278 0F3A  
                                l3518 0944                                  l3470 0770  
                                l3438 0692                                  l3382 04C8  
                                l3464 0754                                  l3448 06FA  
                                l3472 0776                                  l3480 07DE  
                                l3536 0AD0                                  l2930 1810  
                                l3458 0744                                  l3386 04FA  
                                l2932 1818                                  l2924 17FA  
                                l3492 0846                                  l2950 1850  
                                l2942 1838                                  l2934 181C  
                                l2918 17EA                                  l2960 13B6  
                                l2946 1842                                  l2972 1894  
                                l2964 185C                                  l2990 16EA  
                                l2982 16BA                                  l2968 1878  
                                l2986 16D2                                  l2996 170A  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1305 15A8                                  u1315 15D8  
                                _LATB 000F8A                                  u1255 1540  
                                u3007 1624                                  u1265 154E  
                                u1505 18FA                                  u3017 1634  
                                u1275 156C                                  u3107 0C6C  
                                u3027 1642                                  u2324 1376  
                                u1285 157A                                  u1365 1CD4  
                                u2325 1372                                  u3117 18AE  
                                u3037 1650                                  u1366 1CD6  
                                u2334 13D2                                  u1295 159A  
                                u3207 1CE2                                  u1535 196C  
                                u2335 13CE                                  u3127 1BDC  
                                u3047 1662                                  u3217 1CF2  
                                u2345 142C                                  u3137 148A  
                                u3057 1674                                  u1570 19E4  
                                u3227 15F4                                  u3147 14A0  
                                u3067 168A                                  u1580 1A14  
                                u3237 1DB8                                  u3157 1704  
                                u3077 169E                                  u3167 1922  
                                u1815 1D0A                                  u3087 16B0  
                                u1816 1D0C                                  u1577 19DA  
                                u3177 1994                                  u3097 0C54  
                                u1587 1A0A                                  u3187 1CC2  
                                u1835 1D1C                                  u2731 0366  
                                u1836 1D1E                                  u2820 06C4  
                                u3197 19EE                                  u2741 0378  
                                u2830 06D8                                  u2822 06C6  
                                u2920 0920                                  u2832 06DA  
                                u2960 0A52                                  u2977 0478  
                                u2987 0490                                  u2997 160E  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 01C8                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 16B8                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00B0                          ___param_bank 000010  
                     i2_delay_tenth_s 1BFA                       __end_of_SendLCD 1CFA  
                     __end_of_SetLine 1CCA                    ScanWithRange@F3892 00F5  
                         ScanIR@F3879 00F1                                 ?_main 0001  
                     __end_of___awdiv 185A                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1AC6  
                     __end_of___lwmod 1B08                                 i1l373 008E  
                               i2l381 179A                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1DB4  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 16B8  
                  ScanWithRange@loops 0071                       __end_of_dpowers 030B  
                     __end_of_isdigit 1D86                                 main@i 01CE  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 1302  
              __size_of_ScanWithRange 050A                        __CFG_MCLRE$OFF 000000  
                     __initialization 1C32                          __end_of_main 0AF2  
                        __end_of_stop 174C                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 0099                  __end_of_enableSensor 1D20  
                 VerifySignal@hexByte 002C                                ??_main 00BA  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2660 008A  
                              i1l2662 008C                        __CFG_WDTEN$OFF 000000  
                              i2l2632 1C20                                i2l2628 1C0E  
                              i2l2670 178C                                i2l2674 1792  
               __end_of_delay_tenth_s 1BFA                                _LCDout 1536  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00AB  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1C32                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 143C  
                           ??_SetLine 002A                                ___wmul 1D20  
                           ??___awdiv 002E                      __end_of_initRFID 1DA2  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1D46                  __size_of_grabRightIR 0072  
                              clear_0 1C38                                clear_1 1C44  
                              clear_2 1C50                      ___awdiv@quotient 0030  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0AF2                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00B3                      __end_of_turnLeft 1BC2  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1C5A  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1DC2                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1B08                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002B  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 17CE  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BF  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 1A1C  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 194C  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 1CFA  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1C9A  
              ScanWithRange@RFID_Read 0079                               _SendLCD 1CCA  
                             __Hparam 0000                               _SetLine 1C9A  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 17D6                       __size_of___wmul 0026  
                             ___lwdiv 1A74                               ___lwmod 1AC6  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1C32                       ??_ScanWithRange 007B  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 1DA2  
                             __ptext2 1D86                               __ptext3 1C68  
                             __ptext4 15FC                               __ptext5 1D46  
                             __ptext6 1B08                               __ptext7 1CFA  
                             __ptext8 1A1C                               __ptext9 0AF2  
                           _T0CONbits 000FD5                               _initLCD 15FC  
                   __end_of_initTimer 1DB4                               _dpowers 0301  
                             _isdigit 1D68                          LCDout@number 0027  
                       ?_VerifySignal 0024                               main@buf 0100  
                             _sprintf 0FFC                        __pintcode_body 174C  
                end_of_initialization 1C5A                        ScanWithRange@i 00AC  
                      ScanWithRange@n 00A8                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 174C                    ScanIR@SensorResult 009B  
                     ??_fullSpeedBack 003A                             _RFID_Read 01F6  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                ScanWithRange@LeftFlick 00AA  
                   __end_of_turnRight 1B84                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B8                        __end_of_LCDout 15FC  
                           _TXSTAbits 000FAC                             ScanIR@buf 0071  
                       ??_grabRightIR 0026                        __end_of_ScanIR 1536  
                      _fullSpeedAhead 185A                        _ReceivedString 01E6  
                      __end_of___wmul 1D46                     ScanWithRange@Move 0075  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1D68  
              __size_of_delay_tenth_s 0038                   start_initialization 1C32  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 17D6  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 18DA  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 194C  
                        _initMotorPWM 1C68                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$1986 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1BC2                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0062  
                           __pintcode 0008                  __end_of_VerifySignal 1A74  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 01C9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 1DA2                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u324_47 1C14  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3893 0200                             main@F3895 00BF  
                           main@F3898 01E2                           _grabRightIR 18DA  
               ScanWithRange@LeftFlag 00B1                  grabRightIR@IR_signal 0029  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0FFC  
                        setMotorPWM@m 0032                 ScanWithRange@MoveTime 0073  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0077  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1B46                      ScanWithRange@buf 0080  
                 __end_of_setMotorPWM 143C                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1B46                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 19BE                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1B46  
                            __ptext11 1B84                              __ptext20 1D20  
                            __ptext12 185A                              __ptext21 1AC6  
                            __ptext13 1BC2                              __ptext22 1A74  
                            __ptext14 143C                              __ptext23 18DA  
                            __ptext15 16B8                              __ptext32 1BFA  
                            __ptext24 194C                              __ptext16 1302  
                            __ptext25 1C9A                              __ptext17 17D6  
                            __ptext26 19BE                              __ptext18 0FFC  
                            __ptext27 1CCA                              __ptext19 1D68  
                            __ptext28 1536                              __ptext29 1DB4  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 1D86             ScanWithRange@SensorResult 00B4  
                      turnRight@power 006B                         __size_of_main 07A2  
                  main@DirectionFound 01CD                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 0058  
                            int$flags 003C                              main@Move 01CF  
                 _InterruptHandlerLow 0018                            _LCD_String 19BE  
                            _turnLeft 1B84                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002A  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 1302  
                        _VerifySignal 1A1C                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00AE                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
