

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 19:00:50 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATBbits	set	3978
    78  0000                     _LATCbits	set	3979
    79  0000                     _LATDbits	set	3980
    80  0000                     _LATEbits	set	3981
    81  0000                     _OSCCON	set	4051
    82  0000                     _OSCCONbits	set	4051
    83  0000                     _PIE1bits	set	3997
    84  0000                     _PIR1bits	set	3998
    85  0000                     _PTCON0	set	3967
    86  0000                     _PTCON1	set	3966
    87  0000                     _PTPERH	set	3962
    88  0000                     _PTPERL	set	3963
    89  0000                     _PWMCON0	set	3951
    90  0000                     _PWMCON1	set	3950
    91  0000                     _RCONbits	set	4048
    92  0000                     _RCREG	set	4014
    93  0000                     _RCSTAbits	set	4011
    94  0000                     _SPBRG	set	4015
    95  0000                     _SPBRGH	set	4016
    96  0000                     _T0CONbits	set	4053
    97  0000                     _T5CON	set	4023
    98  0000                     _TMR0H	set	4055
    99  0000                     _TMR0L	set	4054
   100  0000                     _TRISAbits	set	3986
   101  0000                     _TRISBbits	set	3987
   102  0000                     _TRISC	set	3988
   103  0000                     _TRISCbits	set	3988
   104  0000                     _TRISDbits	set	3989
   105  0000                     _TRISEbits	set	3990
   106  0000                     _TXREG	set	4013
   107  0000                     _TXSTAbits	set	4012
   108  0000                     _PDC0H	set	3960
   109  0000                     _PDC0L	set	3961
   110  0000                     _PDC1H	set	3958
   111  0000                     _PDC1L	set	3959
   112  00030B                     STR_6:
   113  00030B  20                 	db	32
   114  00030C  20                 	db	32
   115  00030D  20                 	db	32
   116  00030E  20                 	db	32
   117  00030F  20                 	db	32
   118  000310  20                 	db	32
   119  000311  25                 	db	37
   120  000312  30                 	db	48	;'0'
   121  000313  34                 	db	52	;'4'
   122  000314  64                 	db	100	;'d'
   123  000315  2C                 	db	44
   124  000316  20                 	db	32
   125  000317  25                 	db	37
   126  000318  30                 	db	48	;'0'
   127  000319  34                 	db	52	;'4'
   128  00031A  64                 	db	100	;'d'
   129  00031B  00                 	db	0
   130  00031C                     STR_5:
   131  00031C  20                 	db	32
   132  00031D  20                 	db	32
   133  00031E  20                 	db	32
   134  00031F  20                 	db	32
   135  000320  20                 	db	32
   136  000321  20                 	db	32
   137  000322  49                 	db	73	;'I'
   138  000323  6E                 	db	110	;'n'
   139  000324  65                 	db	101	;'e'
   140  000325  72                 	db	114	;'r'
   141  000326  74                 	db	116	;'t'
   142  000327  20                 	db	32
   143  000328  4D                 	db	77	;'M'
   144  000329  6F                 	db	111	;'o'
   145  00032A  64                 	db	100	;'d'
   146  00032B  65                 	db	101	;'e'
   147  00032C  00                 	db	0
   148  00032D                     STR_1:
   149  00032D  20                 	db	32
   150  00032E  20                 	db	32
   151  00032F  20                 	db	32
   152  000330  20                 	db	32
   153  000331  20                 	db	32
   154  000332  53                 	db	83	;'S'
   155  000333  63                 	db	99	;'c'
   156  000334  61                 	db	97	;'a'
   157  000335  6E                 	db	110	;'n'
   158  000336  49                 	db	73	;'I'
   159  000337  52                 	db	82	;'R'
   160  000338  00                 	db	0
   161  000339                     STR_8:
   162  000339  47                 	db	71	;'G'
   163  00033A  6F                 	db	111	;'o'
   164  00033B  69                 	db	105	;'i'
   165  00033C  6E                 	db	110	;'n'
   166  00033D  67                 	db	103	;'g'
   167  00033E  20                 	db	32
   168  00033F  48                 	db	72	;'H'
   169  000340  6F                 	db	111	;'o'
   170  000341  6D                 	db	109	;'m'
   171  000342  65                 	db	101	;'e'
   172  000343  00                 	db	0
   173  000344                     STR_7:
   174  000344  53                 	db	83	;'S'
   175  000345  65                 	db	101	;'e'
   176  000346  61                 	db	97	;'a'
   177  000347  72                 	db	114	;'r'
   178  000348  63                 	db	99	;'c'
   179  000349  68                 	db	104	;'h'
   180  00034A  69                 	db	105	;'i'
   181  00034B  6E                 	db	110	;'n'
   182  00034C  67                 	db	103	;'g'
   183  00034D  00                 	db	0
   184  0000                     
   185                           ; #config settings
   186  00034E  00                 	db	0	; dummy byte at the end
   187  0000                     
   188                           	psect	cinit
   189  001BEC                     __pcinit:
   190                           	opt stack 0
   191  001BEC                     start_initialization:
   192                           	opt stack 0
   193  001BEC                     __initialization:
   194                           	opt stack 0
   195                           
   196                           ; Clear objects allocated to BANK2 (100 bytes)
   197  001BEC  EE02  F000         	lfsr	0,__pbssBANK2
   198  001BF0  0E64               	movlw	100
   199  001BF2                     clear_0:
   200  001BF2  6AEE               	clrf	postinc0,c
   201  001BF4  06E8               	decf	wreg,f,c
   202  001BF6  E1FD               	bnz	clear_0
   203                           
   204                           ; Clear objects allocated to BANK1 (21 bytes)
   205  001BF8  EE01  F0E2         	lfsr	0,__pbssBANK1
   206  001BFC  0E15               	movlw	21
   207  001BFE                     clear_1:
   208  001BFE  6AEE               	clrf	postinc0,c
   209  001C00  06E8               	decf	wreg,f,c
   210  001C02  E1FD               	bnz	clear_1
   211                           
   212                           ; Clear objects allocated to BANK0 (58 bytes)
   213  001C04  EE00  F0BF         	lfsr	0,__pbssBANK0
   214  001C08  0E3A               	movlw	58
   215  001C0A                     clear_2:
   216  001C0A  6AEE               	clrf	postinc0,c
   217  001C0C  06E8               	decf	wreg,f,c
   218  001C0E  E1FD               	bnz	clear_2
   219                           
   220                           ; Clear objects allocated to COMRAM (2 bytes)
   221  001C10  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   222  001C12  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   223  001C14                     end_of_initialization:
   224                           	opt stack 0
   225  001C14                     __end_of__initialization:
   226                           	opt stack 0
   227  001C14  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   228  001C16  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   229  001C18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   230  001C1A  6EF8               	movwf	tblptru,c
   231  001C1C  0100               	movlb	0
   232  001C1E  EFA8  F001         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	bssCOMRAM
   238  00003A                     __pbssCOMRAM:
   239                           	opt stack 0
   240  00003A                     _i:
   241                           	opt stack 0
   242  00003A                     	ds	1
   243  00003B                     _mode:
   244                           	opt stack 0
   245  00003B                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           
   250                           	psect	bssBANK0
   251  0000BF                     __pbssBANK0:
   252                           	opt stack 0
   253  0000BF                     main@F3895:
   254                           	opt stack 0
   255  0000BF                     	ds	50
   256  0000F1                     ScanIR@F3879:
   257                           	opt stack 0
   258  0000F1                     	ds	4
   259  0000F5                     ScanWithRange@F3892:
   260                           	opt stack 0
   261  0000F5                     	ds	4
   262                           tblptru	equ	0xFF8
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	bssBANK1
   267  0001E2                     __pbssBANK1:
   268                           	opt stack 0
   269  0001E2                     main@F3898:
   270                           	opt stack 0
   271  0001E2                     	ds	4
   272  0001E6                     _ReceivedString:
   273                           	opt stack 0
   274  0001E6                     	ds	16
   275  0001F6                     _RFID_Read:
   276                           	opt stack 0
   277  0001F6                     	ds	1
   278                           tblptru	equ	0xFF8
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           
   282                           	psect	bssBANK2
   283  000200                     __pbssBANK2:
   284                           	opt stack 0
   285  000200                     main@F3893:
   286                           	opt stack 0
   287  000200                     	ds	100
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	cstackBANK1
   293  000100                     __pcstackBANK1:
   294                           	opt stack 0
   295  000100                     main@buf:
   296                           	opt stack 0
   297                           
   298                           ; 40 bytes @ 0x0
   299  000100                     	ds	40
   300  000128                     main@MoveType:
   301                           	opt stack 0
   302                           
   303                           ; 50 bytes @ 0x28
   304  000128                     	ds	50
   305  00015A                     main@MoveTime:
   306                           	opt stack 0
   307                           
   308                           ; 100 bytes @ 0x5A
   309  00015A                     	ds	100
   310  0001BE                     main@Message:
   311                           	opt stack 0
   312                           
   313                           ; 10 bytes @ 0xBE
   314  0001BE                     	ds	10
   315  0001C8                     main@ScanAngle:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0xC8
   319  0001C8                     	ds	1
   320  0001C9                     main@SensorResult:
   321                           	opt stack 0
   322                           
   323                           ; 4 bytes @ 0xC9
   324  0001C9                     	ds	4
   325  0001CD                     main@DirectionFound:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0xCD
   329  0001CD                     	ds	1
   330  0001CE                     main@i:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0xCE
   334  0001CE                     	ds	1
   335  0001CF                     main@Move:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0xCF
   339  0001CF                     	ds	1
   340  0001D0                     main@mL:
   341                           	opt stack 0
   342                           
   343                           ; 9 bytes @ 0xD0
   344  0001D0                     	ds	9
   345  0001D9                     main@mR:
   346                           	opt stack 0
   347                           
   348                           ; 9 bytes @ 0xD9
   349  0001D9                     	ds	9
   350                           tblptru	equ	0xFF8
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	cstackBANK0
   355  000060                     __pcstackBANK0:
   356                           	opt stack 0
   357  000060                     ??_sprintf:
   358  000060                     setMotorPWM@PWMduty:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x0
   362  000060                     	ds	2
   363  000062                     stop@mL:
   364                           	opt stack 0
   365  000062                     fullSpeed@mL:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369  000062                     	ds	2
   370  000064                     stop@mR:
   371                           	opt stack 0
   372  000064                     fullSpeed@mR:
   373                           	opt stack 0
   374  000064                     sprintf@ap:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x4
   378  000064                     	ds	2
   379  000066                     fullSpeed@power:
   380                           	opt stack 0
   381  000066                     sprintf@prec:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x6
   385  000066                     	ds	1
   386  000067                     turnLeft@mL:
   387                           	opt stack 0
   388  000067                     turnRight@mL:
   389                           	opt stack 0
   390  000067                     fullSpeedBack@mL:
   391                           	opt stack 0
   392  000067                     sprintf@val:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x7
   396  000067                     	ds	2
   397  000069                     sprintf@flag:
   398                           	opt stack 0
   399  000069                     turnLeft@mR:
   400                           	opt stack 0
   401  000069                     turnRight@mR:
   402                           	opt stack 0
   403  000069                     fullSpeedBack@mR:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x9
   407  000069                     	ds	1
   408  00006A                     sprintf@width:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0xA
   412  00006A                     	ds	1
   413  00006B                     turnLeft@power:
   414                           	opt stack 0
   415  00006B                     turnRight@power:
   416                           	opt stack 0
   417  00006B                     fullSpeedBack@power:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0xB
   421  00006B                     	ds	1
   422  00006C                     sprintf@c:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0xC
   426  00006C                     	ds	1
   427  00006D                     ScanIR@mL:
   428                           	opt stack 0
   429  00006D                     ScanWithRange@mL:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0xD
   433  00006D                     	ds	2
   434  00006F                     ScanIR@mR:
   435                           	opt stack 0
   436  00006F                     ScanWithRange@mR:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0xF
   440  00006F                     	ds	2
   441  000071                     ScanWithRange@loops:
   442                           	opt stack 0
   443  000071                     ScanIR@buf:
   444                           	opt stack 0
   445                           
   446                           ; 40 bytes @ 0x11
   447  000071                     	ds	2
   448  000073                     ScanWithRange@MoveTime:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x13
   452  000073                     	ds	2
   453  000075                     ScanWithRange@Move:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x15
   457  000075                     	ds	2
   458  000077                     ScanWithRange@MoveType:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x17
   462  000077                     	ds	2
   463  000079                     ScanWithRange@RFID_Read:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x19
   467  000079                     	ds	2
   468  00007B                     ??_ScanWithRange:
   469                           
   470                           ; 0 bytes @ 0x1B
   471  00007B                     	ds	5
   472  000080                     ScanWithRange@buf:
   473                           	opt stack 0
   474                           
   475                           ; 40 bytes @ 0x20
   476  000080                     	ds	25
   477  000099                     ScanIR@DirectionMoveThreshold:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x39
   481  000099                     	ds	2
   482  00009B                     ScanIR@SensorResult:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x3B
   486  00009B                     	ds	13
   487  0000A8                     ScanWithRange@n:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x48
   491  0000A8                     	ds	2
   492  0000AA                     ScanWithRange@LeftFlick:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x4A
   496  0000AA                     	ds	1
   497  0000AB                     ScanWithRange@MiniLeftFlick:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x4B
   501  0000AB                     	ds	1
   502  0000AC                     ScanWithRange@i:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x4C
   506  0000AC                     	ds	2
   507  0000AE                     ScanWithRange@DirectionFoundThreshold:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x4E
   511  0000AE                     	ds	2
   512  0000B0                     ScanWithRange@MotorPower:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x50
   516  0000B0                     	ds	1
   517  0000B1                     ScanWithRange@LeftFlag:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x51
   521  0000B1                     	ds	2
   522  0000B3                     ScanWithRange@TimeAboveThreshold:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x53
   526  0000B3                     	ds	1
   527  0000B4                     ScanWithRange@SensorResult:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x54
   531  0000B4                     	ds	4
   532  0000B8                     ScanWithRange@RightFlag:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x58
   536  0000B8                     	ds	2
   537  0000BA                     ??_main:
   538                           
   539                           ; 0 bytes @ 0x5A
   540  0000BA                     	ds	5
   541                           tblptru	equ	0xFF8
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           
   545                           	psect	cstackCOMRAM
   546  000001                     __pcstackCOMRAM:
   547                           	opt stack 0
   548  000001                     ??i2_delay_tenth_s:
   549                           
   550                           ; 0 bytes @ 0x0
   551  000001                     	ds	1
   552  000002                     i2delay_tenth_s@tenth_seconds:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x1
   556  000002                     	ds	1
   557  000003                     i2delay_tenth_s@i:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x2
   561  000003                     	ds	2
   562  000005                     ??_InterruptHandlerHigh:
   563                           
   564                           ; 0 bytes @ 0x4
   565  000005                     	ds	14
   566  000013                     ??_InterruptHandlerLow:
   567                           
   568                           ; 0 bytes @ 0x12
   569  000013                     	ds	17
   570  000024                     ??_isdigit:
   571  000024                     ??_LCDout:
   572  000024                     ??_delay_tenth_s:
   573  000024                     ?_grabRightIR:
   574                           	opt stack 0
   575  000024                     ?_grabLeftIR:
   576                           	opt stack 0
   577  000024                     ?___wmul:
   578                           	opt stack 0
   579  000024                     ?___lwdiv:
   580                           	opt stack 0
   581  000024                     enableSensor@status:
   582                           	opt stack 0
   583  000024                     VerifySignal@Signal:
   584                           	opt stack 0
   585  000024                     ___wmul@multiplier:
   586                           	opt stack 0
   587  000024                     ___lwdiv@dividend:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x23
   591  000024                     	ds	1
   592  000025                     enableSensor@sensor:
   593                           	opt stack 0
   594  000025                     delay_tenth_s@tenth_seconds:
   595                           	opt stack 0
   596  000025                     _isdigit$2085:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x24
   600  000025                     	ds	1
   601  000026                     ??_grabRightIR:
   602  000026                     ??_grabLeftIR:
   603  000026                     ??_VerifySignal:
   604  000026                     isdigit@c:
   605                           	opt stack 0
   606  000026                     delay_tenth_s@i:
   607                           	opt stack 0
   608  000026                     ___wmul@multiplicand:
   609                           	opt stack 0
   610  000026                     ___lwdiv@divisor:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x25
   614  000026                     	ds	1
   615  000027                     LCDout@number:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x26
   619  000027                     	ds	1
   620  000028                     SendLCD@type:
   621                           	opt stack 0
   622  000028                     ___wmul@product:
   623                           	opt stack 0
   624  000028                     ___lwdiv@quotient:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x27
   628  000028                     	ds	1
   629  000029                     SendLCD@Byte:
   630                           	opt stack 0
   631  000029                     grabRightIR@IR_signal:
   632                           	opt stack 0
   633  000029                     grabLeftIR@IR_signal:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x28
   637  000029                     	ds	1
   638  00002A                     ??_initLCD:
   639  00002A                     ?___awdiv:
   640                           	opt stack 0
   641  00002A                     SetLine@line:
   642                           	opt stack 0
   643  00002A                     VerifySignal@i:
   644                           	opt stack 0
   645  00002A                     ___lwdiv@counter:
   646                           	opt stack 0
   647  00002A                     LCD_String@string:
   648                           	opt stack 0
   649  00002A                     ___awdiv@dividend:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x29
   653  00002A                     	ds	1
   654  00002B                     ?___lwmod:
   655                           	opt stack 0
   656  00002B                     grabRightIR@i:
   657                           	opt stack 0
   658  00002B                     grabLeftIR@i:
   659                           	opt stack 0
   660  00002B                     VerifySignal@checksum:
   661                           	opt stack 0
   662  00002B                     ___lwmod@dividend:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x2A
   666  00002B                     	ds	1
   667  00002C                     VerifySignal@hexByte:
   668                           	opt stack 0
   669  00002C                     ___awdiv@divisor:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x2B
   673  00002C                     	ds	1
   674  00002D                     ___lwmod@divisor:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x2C
   678  00002D                     	ds	1
   679  00002E                     ___awdiv@counter:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x2D
   683  00002E                     	ds	1
   684  00002F                     ___awdiv@sign:
   685                           	opt stack 0
   686  00002F                     ___lwmod@counter:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x2E
   690  00002F                     	ds	1
   691  000030                     ?_sprintf:
   692                           	opt stack 0
   693  000030                     sprintf@sp:
   694                           	opt stack 0
   695  000030                     ___awdiv@quotient:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x2F
   699  000030                     	ds	2
   700  000032                     setMotorPWM@m:
   701                           	opt stack 0
   702  000032                     sprintf@f:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x31
   706  000032                     	ds	2
   707  000034                     ??_setMotorPWM:
   708                           
   709                           ; 0 bytes @ 0x33
   710  000034                     	ds	5
   711  000039                     ??_ScanIR:
   712                           
   713                           ; 0 bytes @ 0x38
   714  000039                     	ds	1
   715  00003A                     tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           
   719                           ; 0 bytes @ 0x39
   720 ;;
   721 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   722 ;;
   723 ;; *************** function _main *****************
   724 ;; Defined at:
   725 ;;		line 51 in file "main.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  MoveTime      100   90[BANK1 ] int [50]
   730 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   731 ;;  buf            40    0[BANK1 ] unsigned char [40]
   732 ;;  Message        10  190[BANK1 ] unsigned char [10]
   733 ;;  mR              9  217[BANK1 ] struct DC_motor
   734 ;;  mL              9  208[BANK1 ] struct DC_motor
   735 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   736 ;;  Move            1  207[BANK1 ] char 
   737 ;;  i               1  206[BANK1 ] unsigned char 
   738 ;;  DirectionFou    1  205[BANK1 ] char 
   739 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   740 ;; Return value:  Size  Location     Type
   741 ;;		None               void
   742 ;; Registers used:
   743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   749 ;;      Params:         0       0       0       0
   750 ;;      Locals:         0       0     226       0
   751 ;;      Temps:          0       5       0       0
   752 ;;      Totals:         0       5     226       0
   753 ;;Total ram usage:      231 bytes
   754 ;; Hardware stack levels required when called:    8
   755 ;; This function calls:
   756 ;;		_LCD_String
   757 ;;		_ScanIR
   758 ;;		_ScanWithRange
   759 ;;		_SendLCD
   760 ;;		_SetLine
   761 ;;		_VerifySignal
   762 ;;		_delay_tenth_s
   763 ;;		_enableSensor
   764 ;;		_fullSpeed
   765 ;;		_fullSpeedBack
   766 ;;		_grabLeftIR
   767 ;;		_grabRightIR
   768 ;;		_initIR
   769 ;;		_initLCD
   770 ;;		_initMotorPWM
   771 ;;		_initRFID
   772 ;;		_initTimer
   773 ;;		_sprintf
   774 ;;		_stop
   775 ;;		_turnLeft
   776 ;;		_turnRight
   777 ;; This function is called by:
   778 ;;		Startup code after reset
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text0
   783  000350                     __ptext0:
   784                           	opt stack 0
   785  000350                     _main:
   786                           	opt stack 23
   787                           
   788                           ;main.c: 54: unsigned char Message[10];
   789                           ;main.c: 55: unsigned char i=0;
   790                           
   791                           ;incstack = 0
   792  000350  0E00               	movlw	0
   793  000352  0101               	movlb	1	; () banked
   794  000354  6FCE               	movwf	main@i& (0+255),b
   795                           
   796                           ;main.c: 56: signed char DirectionFound=0;
   797  000356  0E00               	movlw	0
   798  000358  0101               	movlb	1	; () banked
   799  00035A  6FCD               	movwf	main@DirectionFound& (0+255),b
   800                           
   801                           ; BSR set to: 1
   802                           ;main.c: 57: int MoveTime[50] = { 0 };
   803  00035C  EE22  F000         	lfsr	2,main@F3893
   804  000360  EE11  F05A         	lfsr	1,main@MoveTime
   805  000364  0E63               	movlw	99
   806  000366                     u2791:
   807  000366  CFDB FFE3          	movff	plusw2,plusw1
   808  00036A  06E8               	decf	wreg,f,c
   809  00036C  E2FC               	bc	u2791
   810                           
   811                           ; BSR set to: 1
   812                           ;main.c: 60: char MoveType[50] = { 0 };
   813  00036E  EE20  F0BF         	lfsr	2,main@F3895
   814  000372  EE11  F028         	lfsr	1,main@MoveType
   815  000376  0E31               	movlw	49
   816  000378                     u2801:
   817  000378  CFDB FFE3          	movff	plusw2,plusw1
   818  00037C  06E8               	decf	wreg,f,c
   819  00037E  E2FC               	bc	u2801
   820                           
   821                           ;main.c: 63: signed char Move=0;
   822  000380  0E00               	movlw	0
   823  000382  0101               	movlb	1	; () banked
   824  000384  6FCF               	movwf	main@Move& (0+255),b
   825                           
   826                           ; BSR set to: 1
   827                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   828  000386  C1E2  F1C9         	movff	main@F3898,main@SensorResult
   829  00038A  C1E3  F1CA         	movff	main@F3898+1,main@SensorResult+1
   830  00038E  C1E4  F1CB         	movff	main@F3898+2,main@SensorResult+2
   831  000392  C1E5  F1CC         	movff	main@F3898+3,main@SensorResult+3
   832                           
   833                           ;main.c: 65: char buf[40];
   834                           ;main.c: 67: unsigned char ScanAngle=60;
   835  000396  0E3C               	movlw	60
   836  000398  0101               	movlb	1	; () banked
   837  00039A  6FC8               	movwf	main@ScanAngle& (0+255),b
   838                           
   839                           ; BSR set to: 1
   840                           ;main.c: 76: INTCONbits.GIEH=1;
   841  00039C  8EF2               	bsf	intcon,7,c	;volatile
   842                           
   843                           ; BSR set to: 1
   844                           ;main.c: 77: INTCONbits.GIEL=1;
   845  00039E  8CF2               	bsf	intcon,6,c	;volatile
   846                           
   847                           ; BSR set to: 1
   848                           ;main.c: 78: INTCONbits.PEIE=1;
   849  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   850                           
   851                           ; BSR set to: 1
   852                           ;main.c: 79: RCONbits.IPEN=1;
   853  0003A2  8ED0               	bsf	4048,7,c	;volatile
   854                           
   855                           ; BSR set to: 1
   856                           ;main.c: 82: IPR1bits.RCIP=0;
   857  0003A4  9A9F               	bcf	3999,5,c	;volatile
   858                           
   859                           ; BSR set to: 1
   860                           ;main.c: 83: PIE1bits.RCIE=1;
   861  0003A6  8A9D               	bsf	3997,5,c	;volatile
   862                           
   863                           ; BSR set to: 1
   864                           ;main.c: 86: TRISCbits.RC3=1;
   865  0003A8  8694               	bsf	3988,3,c	;volatile
   866                           
   867                           ; BSR set to: 1
   868                           ;main.c: 87: INTCONbits.INT0IE=1;
   869  0003AA  88F2               	bsf	intcon,4,c	;volatile
   870                           
   871                           ; BSR set to: 1
   872                           ;main.c: 90: PIR1bits.RC1IF=0;
   873  0003AC  9A9E               	bcf	3998,5,c	;volatile
   874                           
   875                           ; BSR set to: 1
   876                           ;main.c: 91: INTCONbits.INT0IF=0;
   877  0003AE  92F2               	bcf	intcon,1,c	;volatile
   878                           
   879                           ;main.c: 94: struct DC_motor mL, mR;
   880                           ;main.c: 95: mL.power=0;
   881  0003B0  0E00               	movlw	0
   882  0003B2  0101               	movlb	1	; () banked
   883  0003B4  6FD0               	movwf	main@mL& (0+255),b
   884                           
   885                           ;main.c: 96: mL.direction=1;
   886  0003B6  0E01               	movlw	1
   887  0003B8  0101               	movlb	1	; () banked
   888  0003BA  6FD1               	movwf	(main@mL+1)& (0+255),b
   889                           
   890                           ; BSR set to: 1
   891                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   892  0003BC  0E79               	movlw	121
   893  0003BE  0101               	movlb	1	; () banked
   894  0003C0  6FD2               	movwf	(main@mL+2)& (0+255),b
   895  0003C2  0E0F               	movlw	15
   896  0003C4  0101               	movlb	1	; () banked
   897  0003C6  6FD3               	movwf	(main@mL+3)& (0+255),b
   898                           
   899                           ; BSR set to: 1
   900                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   901  0003C8  0E78               	movlw	120
   902  0003CA  0101               	movlb	1	; () banked
   903  0003CC  6FD4               	movwf	(main@mL+4)& (0+255),b
   904  0003CE  0E0F               	movlw	15
   905  0003D0  0101               	movlb	1	; () banked
   906  0003D2  6FD5               	movwf	(main@mL+5)& (0+255),b
   907                           
   908                           ;main.c: 99: mL.dir_pin=0;
   909  0003D4  0E00               	movlw	0
   910  0003D6  0101               	movlb	1	; () banked
   911  0003D8  6FD6               	movwf	(main@mL+6)& (0+255),b
   912                           
   913                           ;main.c: 100: mL.PWMperiod=199;
   914  0003DA  0E00               	movlw	0
   915  0003DC  0101               	movlb	1	; () banked
   916  0003DE  6FD8               	movwf	(main@mL+8)& (0+255),b
   917  0003E0  0EC7               	movlw	199
   918  0003E2  6FD7               	movwf	(main@mL+7)& (0+255),b
   919                           
   920                           ;main.c: 102: mR.power=0;
   921  0003E4  0E00               	movlw	0
   922  0003E6  0101               	movlb	1	; () banked
   923  0003E8  6FD9               	movwf	main@mR& (0+255),b
   924                           
   925                           ;main.c: 103: mR.direction=1;
   926  0003EA  0E01               	movlw	1
   927  0003EC  0101               	movlb	1	; () banked
   928  0003EE  6FDA               	movwf	(main@mR+1)& (0+255),b
   929                           
   930                           ; BSR set to: 1
   931                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   932  0003F0  0E77               	movlw	119
   933  0003F2  0101               	movlb	1	; () banked
   934  0003F4  6FDB               	movwf	(main@mR+2)& (0+255),b
   935  0003F6  0E0F               	movlw	15
   936  0003F8  0101               	movlb	1	; () banked
   937  0003FA  6FDC               	movwf	(main@mR+3)& (0+255),b
   938                           
   939                           ; BSR set to: 1
   940                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   941  0003FC  0E76               	movlw	118
   942  0003FE  0101               	movlb	1	; () banked
   943  000400  6FDD               	movwf	(main@mR+4)& (0+255),b
   944  000402  0E0F               	movlw	15
   945  000404  0101               	movlb	1	; () banked
   946  000406  6FDE               	movwf	(main@mR+5)& (0+255),b
   947                           
   948                           ;main.c: 106: mR.dir_pin=2;
   949  000408  0E02               	movlw	2
   950  00040A  0101               	movlb	1	; () banked
   951  00040C  6FDF               	movwf	(main@mR+6)& (0+255),b
   952                           
   953                           ;main.c: 107: mR.PWMperiod=199;
   954  00040E  0E00               	movlw	0
   955  000410  0101               	movlb	1	; () banked
   956  000412  6FE1               	movwf	(main@mR+8)& (0+255),b
   957  000414  0EC7               	movlw	199
   958  000416  6FE0               	movwf	(main@mR+7)& (0+255),b
   959                           
   960                           ;main.c: 109: OSCCON = 0x72;
   961  000418  0E72               	movlw	114
   962  00041A  6ED3               	movwf	4051,c	;volatile
   963  00041C                     l395:
   964  00041C  B4D3               	btfsc	4051,2,c	;volatile
   965  00041E  D36F               	goto	l3546
   966  000420  D7FD               	goto	l395
   967  000422                     l3344:
   968                           
   969                           ;main.c: 121: stop(&mL, &mR);
   970  000422  0ED0               	movlw	low main@mL
   971  000424  0100               	movlb	0	; () banked
   972  000426  6F62               	movwf	stop@mL& (0+255),b
   973  000428  0E01               	movlw	high main@mL
   974  00042A  0100               	movlb	0	; () banked
   975  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   976  00042E  0ED9               	movlw	low main@mR
   977  000430  0100               	movlb	0	; () banked
   978  000432  6F64               	movwf	stop@mR& (0+255),b
   979  000434  0E01               	movlw	high main@mR
   980  000436  0100               	movlb	0	; () banked
   981  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   982  00043A  EC1C  F00B         	call	_stop	;wreg free
   983                           
   984                           ;main.c: 124: RFID_Read=0;
   985  00043E  0E00               	movlw	0
   986  000440  0101               	movlb	1	; () banked
   987  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   988                           
   989                           ; BSR set to: 1
   990                           ;main.c: 125: Move=0;
   991  000444  0E00               	movlw	0
   992  000446  0101               	movlb	1	; () banked
   993  000448  6FCF               	movwf	main@Move& (0+255),b
   994                           
   995                           ; BSR set to: 1
   996                           ;main.c: 128: SensorResult[0]=grabLeftIR();
   997  00044A  EC66  F00C         	call	_grabLeftIR	;wreg free
   998  00044E  C024  F1C9         	movff	?_grabLeftIR,main@SensorResult
   999  000452  C025  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1000                           
  1001                           ;main.c: 129: SensorResult[1]=grabRightIR();
  1002  000456  EC2D  F00C         	call	_grabRightIR	;wreg free
  1003  00045A  C024  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1004  00045E  C025  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1005                           
  1006                           ;main.c: 133: CAP1BUFH=0;
  1007  000462  0E00               	movlw	0
  1008  000464  6E69               	movwf	3945,c	;volatile
  1009                           
  1010                           ;main.c: 134: CAP1BUFL=0;
  1011  000466  0E00               	movlw	0
  1012  000468  6E68               	movwf	3944,c	;volatile
  1013                           
  1014                           ;main.c: 135: CAP2BUFH=0;
  1015  00046A  0E00               	movlw	0
  1016  00046C  6E67               	movwf	3943,c	;volatile
  1017                           
  1018                           ;main.c: 136: CAP2BUFL=0;
  1019  00046E  0E00               	movlw	0
  1020  000470  6E66               	movwf	3942,c	;volatile
  1021                           
  1022                           ;main.c: 139: SendLCD(0b00000001,0);
  1023  000472  0E00               	movlw	0
  1024  000474  6E28               	movwf	SendLCD@type,c
  1025  000476  0E01               	movlw	1
  1026  000478  EC29  F00E         	call	_SendLCD
  1027                           
  1028                           ;main.c: 140: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1029  00047C  0E21               	movlw	33
  1030  00047E                     u3067:
  1031  00047E  2EE8               	decfsz	wreg,f,c
  1032  000480  D7FE               	goto	u3067
  1033  000482  F000               	nop	
  1034                           
  1035                           ;main.c: 141: SendLCD(0b00000010,0);
  1036  000484  0E00               	movlw	0
  1037  000486  6E28               	movwf	SendLCD@type,c
  1038  000488  0E02               	movlw	2
  1039  00048A  EC29  F00E         	call	_SendLCD
  1040                           
  1041                           ;main.c: 142: _delay((unsigned long)((2)*(8000000/4000.0)));
  1042  00048E  0E06               	movlw	6
  1043  000490  0100               	movlb	0	; () banked
  1044  000492  6FBA               	movwf	??_main& (0+255),b
  1045  000494  0E30               	movlw	48
  1046  000496                     u3077:
  1047  000496  2EE8               	decfsz	wreg,f,c
  1048  000498  D7FE               	goto	u3077
  1049  00049A  2FBA               	decfsz	??_main& (0+255),f,b
  1050  00049C  D7FC               	goto	u3077
  1051  00049E  D000               	nop2	
  1052                           
  1053                           ;main.c: 143: SetLine(1);
  1054  0004A0  0E01               	movlw	1
  1055  0004A2  EC11  F00E         	call	_SetLine
  1056                           
  1057                           ;main.c: 144: LCD_String("      Inert Mode");
  1058  0004A6  0E1C               	movlw	low STR_5
  1059  0004A8  6E2A               	movwf	LCD_String@string,c
  1060  0004AA  0E03               	movlw	high STR_5
  1061  0004AC  6E2B               	movwf	LCD_String@string+1,c
  1062  0004AE  EC9F  F00C         	call	_LCD_String	;wreg free
  1063                           
  1064                           ;main.c: 145: SetLine(2);
  1065  0004B2  0E02               	movlw	2
  1066  0004B4  EC11  F00E         	call	_SetLine
  1067                           
  1068                           ;main.c: 146: if (RFID_Read) {
  1069  0004B8  0101               	movlb	1	; () banked
  1070  0004BA  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1071  0004BC  B4D8               	btfsc	status,2,c
  1072  0004BE  D007               	goto	l3380
  1073                           
  1074                           ; BSR set to: 1
  1075                           ;main.c: 147: LCD_String(Message);
  1076  0004C0  0EBE               	movlw	low main@Message
  1077  0004C2  6E2A               	movwf	LCD_String@string,c
  1078  0004C4  0E01               	movlw	high main@Message
  1079  0004C6  6E2B               	movwf	LCD_String@string+1,c
  1080  0004C8  EC9F  F00C         	call	_LCD_String	;wreg free
  1081                           
  1082                           ;main.c: 148: } else {
  1083  0004CC  D318               	goto	l3546
  1084  0004CE                     l3380:
  1085                           
  1086                           ;main.c: 149: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1087  0004CE  0E00               	movlw	low main@buf
  1088  0004D0  6E30               	movwf	sprintf@sp,c
  1089  0004D2  0E01               	movlw	high main@buf
  1090  0004D4  6E31               	movwf	sprintf@sp+1,c
  1091  0004D6  0E0B               	movlw	low STR_6
  1092  0004D8  6E32               	movwf	sprintf@f,c
  1093  0004DA  0E03               	movlw	high STR_6
  1094  0004DC  6E33               	movwf	sprintf@f+1,c
  1095  0004DE  C1C9  F034         	movff	main@SensorResult,?_sprintf+4
  1096  0004E2  C1CA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1097  0004E6  C1CB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1098  0004EA  C1CC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1099  0004EE  ECBE  F007         	call	_sprintf	;wreg free
  1100                           
  1101                           ;main.c: 150: LCD_String(buf);
  1102  0004F2  0E00               	movlw	low main@buf
  1103  0004F4  6E2A               	movwf	LCD_String@string,c
  1104  0004F6  0E01               	movlw	high main@buf
  1105  0004F8  6E2B               	movwf	LCD_String@string+1,c
  1106  0004FA  EC9F  F00C         	call	_LCD_String	;wreg free
  1107                           
  1108                           ;main.c: 151: }
  1109                           ;main.c: 153: break;
  1110  0004FE  D2FF               	goto	l3546
  1111  000500                     l3384:
  1112                           
  1113                           ;main.c: 157: initMotorPWM();
  1114  000500  ECA1  F00D         	call	_initMotorPWM	;wreg free
  1115                           
  1116                           ;main.c: 158: initTimer();
  1117  000504  EC95  F00E         	call	_initTimer	;wreg free
  1118                           
  1119                           ;main.c: 159: initRFID();
  1120  000508  EC87  F00E         	call	_initRFID	;wreg free
  1121                           
  1122                           ;main.c: 160: initLCD();
  1123  00050C  ECBE  F00A         	call	_initLCD	;wreg free
  1124                           
  1125                           ;main.c: 161: initIR();
  1126  000510  EC67  F00E         	call	_initIR	;wreg free
  1127                           
  1128                           ;main.c: 163: enableSensor(0, 1);
  1129  000514  0E01               	movlw	1
  1130  000516  6E24               	movwf	enableSensor@status,c
  1131  000518  0E00               	movlw	0
  1132  00051A  EC41  F00E         	call	_enableSensor
  1133                           
  1134                           ;main.c: 164: enableSensor(1, 1);
  1135  00051E  0E01               	movlw	1
  1136  000520  6E24               	movwf	enableSensor@status,c
  1137  000522  0E01               	movlw	1
  1138  000524  EC41  F00E         	call	_enableSensor
  1139                           
  1140                           ;main.c: 167: fullSpeed(&mL, &mR, 100);
  1141  000528  0ED0               	movlw	low main@mL
  1142  00052A  0100               	movlb	0	; () banked
  1143  00052C  6F62               	movwf	fullSpeed@mL& (0+255),b
  1144  00052E  0E01               	movlw	high main@mL
  1145  000530  0100               	movlb	0	; () banked
  1146  000532  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1147  000534  0ED9               	movlw	low main@mR
  1148  000536  0100               	movlb	0	; () banked
  1149  000538  6F64               	movwf	fullSpeed@mR& (0+255),b
  1150  00053A  0E01               	movlw	high main@mR
  1151  00053C  0100               	movlb	0	; () banked
  1152  00053E  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1153  000540  0E64               	movlw	100
  1154  000542  0100               	movlb	0	; () banked
  1155  000544  6F66               	movwf	fullSpeed@power& (0+255),b
  1156  000546  ECED  F00B         	call	_fullSpeed	;wreg free
  1157                           
  1158                           ;main.c: 168: delay_tenth_s(1);
  1159  00054A  0E01               	movlw	1
  1160  00054C  ECBE  F00D         	call	_delay_tenth_s
  1161  000550  D2D5               	goto	l3542
  1162  000552                     l3404:
  1163                           
  1164                           ;main.c: 176: SetLine(1);
  1165  000552  0E01               	movlw	1
  1166  000554  EC11  F00E         	call	_SetLine
  1167                           
  1168                           ;main.c: 177: LCD_String("Searching");
  1169  000558  0E44               	movlw	low STR_7
  1170  00055A  6E2A               	movwf	LCD_String@string,c
  1171  00055C  0E03               	movlw	high STR_7
  1172  00055E  6E2B               	movwf	LCD_String@string+1,c
  1173  000560  EC9F  F00C         	call	_LCD_String	;wreg free
  1174                           
  1175                           ;main.c: 179: if (DirectionFound==-1) {
  1176  000564  0101               	movlb	1	; () banked
  1177  000566  29CD               	incf	main@DirectionFound& (0+255),w,b
  1178  000568  A4D8               	btfss	status,2,c
  1179  00056A  D03E               	goto	l3422
  1180                           
  1181                           ; BSR set to: 1
  1182                           ;main.c: 184: MoveType[Move]=0;
  1183  00056C  0101               	movlb	1	; () banked
  1184  00056E  51CF               	movf	main@Move& (0+255),w,b
  1185  000570  0D01               	mullw	1
  1186  000572  0E28               	movlw	low main@MoveType
  1187  000574  24F3               	addwf	prodl,w,c
  1188  000576  6ED9               	movwf	fsr2l,c
  1189  000578  0E01               	movlw	high main@MoveType
  1190  00057A  20F4               	addwfc	prodh,w,c
  1191  00057C  6EDA               	movwf	fsr2h,c
  1192  00057E  0E00               	movlw	0
  1193  000580  6EDF               	movwf	indf2,c
  1194                           
  1195                           ;main.c: 185: MoveTime[Move]=6;
  1196  000582  0101               	movlb	1	; () banked
  1197  000584  51CF               	movf	main@Move& (0+255),w,b
  1198  000586  0D02               	mullw	2
  1199  000588  0E5A               	movlw	low main@MoveTime
  1200  00058A  24F3               	addwf	prodl,w,c
  1201  00058C  6ED9               	movwf	fsr2l,c
  1202  00058E  0E01               	movlw	high main@MoveTime
  1203  000590  20F4               	addwfc	prodh,w,c
  1204  000592  6EDA               	movwf	fsr2h,c
  1205  000594  0E06               	movlw	6
  1206  000596  6EDE               	movwf	postinc2,c
  1207  000598  0E00               	movlw	0
  1208  00059A  6EDD               	movwf	postdec2,c
  1209                           
  1210                           ; BSR set to: 1
  1211                           ;main.c: 186: Move++;
  1212  00059C  0101               	movlb	1	; () banked
  1213  00059E  2BCF               	incf	main@Move& (0+255),f,b
  1214                           
  1215                           ; BSR set to: 1
  1216                           ;main.c: 187: fullSpeed(&mL, &mR, 100);
  1217  0005A0  0ED0               	movlw	low main@mL
  1218  0005A2  0100               	movlb	0	; () banked
  1219  0005A4  6F62               	movwf	fullSpeed@mL& (0+255),b
  1220  0005A6  0E01               	movlw	high main@mL
  1221  0005A8  0100               	movlb	0	; () banked
  1222  0005AA  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1223  0005AC  0ED9               	movlw	low main@mR
  1224  0005AE  0100               	movlb	0	; () banked
  1225  0005B0  6F64               	movwf	fullSpeed@mR& (0+255),b
  1226  0005B2  0E01               	movlw	high main@mR
  1227  0005B4  0100               	movlb	0	; () banked
  1228  0005B6  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1229  0005B8  0E64               	movlw	100
  1230  0005BA  0100               	movlb	0	; () banked
  1231  0005BC  6F66               	movwf	fullSpeed@power& (0+255),b
  1232  0005BE  ECED  F00B         	call	_fullSpeed	;wreg free
  1233                           
  1234                           ;main.c: 188: delay_tenth_s(6);
  1235  0005C2  0E06               	movlw	6
  1236  0005C4  ECBE  F00D         	call	_delay_tenth_s
  1237                           
  1238                           ;main.c: 189: stop(&mL,&mR);
  1239  0005C8  0ED0               	movlw	low main@mL
  1240  0005CA  0100               	movlb	0	; () banked
  1241  0005CC  6F62               	movwf	stop@mL& (0+255),b
  1242  0005CE  0E01               	movlw	high main@mL
  1243  0005D0  0100               	movlb	0	; () banked
  1244  0005D2  6F63               	movwf	(stop@mL+1)& (0+255),b
  1245  0005D4  0ED9               	movlw	low main@mR
  1246  0005D6  0100               	movlb	0	; () banked
  1247  0005D8  6F64               	movwf	stop@mR& (0+255),b
  1248  0005DA  0E01               	movlw	high main@mR
  1249  0005DC  0100               	movlb	0	; () banked
  1250  0005DE  6F65               	movwf	(stop@mR+1)& (0+255),b
  1251  0005E0  EC1C  F00B         	call	_stop	;wreg free
  1252                           
  1253                           ;main.c: 190: DirectionFound=0;
  1254  0005E4  0E00               	movlw	0
  1255  0005E6  D042               	goto	L2
  1256  0005E8                     l3422:
  1257                           
  1258                           ; BSR set to: 1
  1259  0005E8  0101               	movlb	1	; () banked
  1260  0005EA  51CD               	movf	main@DirectionFound& (0+255),w,b
  1261  0005EC  0101               	movlb	1	; () banked
  1262  0005EE  A4D8               	btfss	status,2,c
  1263  0005F0  D02B               	goto	l3426
  1264                           
  1265                           ; BSR set to: 1
  1266                           ;main.c: 193: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1267                           ;main.c: 194: &MoveTime, &Move, &MoveType, &RFID_Read);
  1268  0005F2  0ED0               	movlw	low main@mL
  1269  0005F4  0100               	movlb	0	; () banked
  1270  0005F6  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1271  0005F8  0E01               	movlw	high main@mL
  1272  0005FA  0100               	movlb	0	; () banked
  1273  0005FC  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1274  0005FE  0ED9               	movlw	low main@mR
  1275  000600  0100               	movlb	0	; () banked
  1276  000602  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1277  000604  0E01               	movlw	high main@mR
  1278  000606  0100               	movlb	0	; () banked
  1279  000608  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1280  00060A  C1C8  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1281  00060E  0100               	movlb	0	; () banked
  1282  000610  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1283  000612  0E5A               	movlw	low main@MoveTime
  1284  000614  0100               	movlb	0	; () banked
  1285  000616  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1286  000618  0E01               	movlw	high main@MoveTime
  1287  00061A  0100               	movlb	0	; () banked
  1288  00061C  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1289  00061E  0ECF               	movlw	low main@Move
  1290  000620  0100               	movlb	0	; () banked
  1291  000622  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1292  000624  0E01               	movlw	high main@Move
  1293  000626  0100               	movlb	0	; () banked
  1294  000628  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1295  00062A  0E28               	movlw	low main@MoveType
  1296  00062C  0100               	movlb	0	; () banked
  1297  00062E  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1298  000630  0E01               	movlw	high main@MoveType
  1299  000632  0100               	movlb	0	; () banked
  1300  000634  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1301  000636  0EF6               	movlw	low _RFID_Read
  1302  000638  0100               	movlb	0	; () banked
  1303  00063A  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1304  00063C  0E01               	movlw	high _RFID_Read
  1305  00063E  0100               	movlb	0	; () banked
  1306  000640  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1307  000642  EC90  F005         	call	_ScanWithRange	;wreg free
  1308  000646  D012               	goto	L2
  1309  000648                     l3426:
  1310                           
  1311                           ; BSR set to: 1
  1312  000648  0101               	movlb	1	; () banked
  1313  00064A  05CD               	decf	main@DirectionFound& (0+255),w,b
  1314  00064C  A4D8               	btfss	status,2,c
  1315  00064E  D011               	goto	l3430
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;main.c: 197: DirectionFound=ScanIR(&mL, &mR);
  1319  000650  0ED0               	movlw	low main@mL
  1320  000652  0100               	movlb	0	; () banked
  1321  000654  6F6D               	movwf	ScanIR@mL& (0+255),b
  1322  000656  0E01               	movlw	high main@mL
  1323  000658  0100               	movlb	0	; () banked
  1324  00065A  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1325  00065C  0ED9               	movlw	low main@mR
  1326  00065E  0100               	movlb	0	; () banked
  1327  000660  6F6F               	movwf	ScanIR@mR& (0+255),b
  1328  000662  0E01               	movlw	high main@mR
  1329  000664  0100               	movlb	0	; () banked
  1330  000666  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1331  000668  ECDE  F009         	call	_ScanIR	;wreg free
  1332  00066C                     L2:
  1333  00066C  0101               	movlb	1	; () banked
  1334  00066E  6FCD               	movwf	main@DirectionFound& (0+255),b
  1335                           
  1336                           ;main.c: 198: } else if (DirectionFound==2) {
  1337  000670  D246               	goto	l3546
  1338  000672                     l3430:
  1339                           
  1340                           ; BSR set to: 1
  1341  000672  0E02               	movlw	2
  1342  000674  0101               	movlb	1	; () banked
  1343  000676  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1344  000678  A4D8               	btfss	status,2,c
  1345  00067A  D241               	goto	l3546
  1346                           
  1347                           ; BSR set to: 1
  1348                           ;main.c: 200: mode=2;
  1349  00067C  0E02               	movlw	2
  1350  00067E  6E3B               	movwf	_mode,c	;volatile
  1351                           
  1352                           ; BSR set to: 1
  1353                           ;main.c: 201: MoveType[Move]=1;
  1354  000680  0101               	movlb	1	; () banked
  1355  000682  51CF               	movf	main@Move& (0+255),w,b
  1356  000684  0D01               	mullw	1
  1357  000686  0E28               	movlw	low main@MoveType
  1358  000688  24F3               	addwf	prodl,w,c
  1359  00068A  6ED9               	movwf	fsr2l,c
  1360  00068C  0E01               	movlw	high main@MoveType
  1361  00068E  20F4               	addwfc	prodh,w,c
  1362  000690  6EDA               	movwf	fsr2h,c
  1363  000692  0E01               	movlw	1
  1364  000694  6EDF               	movwf	indf2,c
  1365                           
  1366                           ; BSR set to: 1
  1367                           ;main.c: 202: }
  1368                           ;main.c: 204: break;
  1369                           
  1370                           ; BSR set to: 1
  1371                           
  1372                           ; BSR set to: 1
  1373                           
  1374                           ; BSR set to: 1
  1375  000696  D233               	goto	l3546
  1376  000698                     l3436:
  1377                           
  1378                           ;main.c: 211: if (RFID_Read) {
  1379  000698  0101               	movlb	1	; () banked
  1380  00069A  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1381  00069C  B4D8               	btfsc	status,2,c
  1382  00069E  D0A2               	goto	l3478
  1383                           
  1384                           ; BSR set to: 1
  1385                           ;main.c: 212: stop(&mL, &mR);
  1386  0006A0  0ED0               	movlw	low main@mL
  1387  0006A2  0100               	movlb	0	; () banked
  1388  0006A4  6F62               	movwf	stop@mL& (0+255),b
  1389  0006A6  0E01               	movlw	high main@mL
  1390  0006A8  0100               	movlb	0	; () banked
  1391  0006AA  6F63               	movwf	(stop@mL+1)& (0+255),b
  1392  0006AC  0ED9               	movlw	low main@mR
  1393  0006AE  0100               	movlb	0	; () banked
  1394  0006B0  6F64               	movwf	stop@mR& (0+255),b
  1395  0006B2  0E01               	movlw	high main@mR
  1396  0006B4  0100               	movlb	0	; () banked
  1397  0006B6  6F65               	movwf	(stop@mR+1)& (0+255),b
  1398  0006B8  EC1C  F00B         	call	_stop	;wreg free
  1399                           
  1400                           ;main.c: 213: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1401  0006BC  0E03               	movlw	3
  1402  0006BE  0101               	movlb	1	; () banked
  1403  0006C0  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1404  0006C2  A4D8               	btfss	status,2,c
  1405  0006C4  D002               	goto	u2880
  1406  0006C6  0E01               	movlw	1
  1407  0006C8  D001               	goto	u2882
  1408  0006CA                     u2880:
  1409  0006CA  0E00               	movlw	0
  1410  0006CC                     u2882:
  1411  0006CC  0100               	movlb	0	; () banked
  1412  0006CE  6FBA               	movwf	??_main& (0+255),b
  1413  0006D0  0E02               	movlw	2
  1414  0006D2  0101               	movlb	1	; () banked
  1415  0006D4  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1416  0006D6  A4D8               	btfss	status,2,c
  1417  0006D8  D002               	goto	u2890
  1418  0006DA  0E01               	movlw	1
  1419  0006DC  D001               	goto	u2892
  1420  0006DE                     u2890:
  1421  0006DE  0E00               	movlw	0
  1422  0006E0                     u2892:
  1423  0006E0  0100               	movlb	0	; () banked
  1424  0006E2  15BA               	andwf	??_main& (0+255),w,b
  1425  0006E4  A0E8               	btfss	wreg,0,c
  1426  0006E6  D20B               	goto	l3546
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;main.c: 214: if (VerifySignal(&ReceivedString)){
  1430  0006E8  0EE6               	movlw	low _ReceivedString
  1431  0006EA  6E24               	movwf	VerifySignal@Signal,c
  1432  0006EC  0E01               	movlw	high _ReceivedString
  1433  0006EE  6E25               	movwf	VerifySignal@Signal+1,c
  1434  0006F0  ECCE  F00C         	call	_VerifySignal	;wreg free
  1435  0006F4  0900               	iorlw	0
  1436  0006F6  B4D8               	btfsc	status,2,c
  1437  0006F8  D041               	goto	l3470
  1438                           
  1439                           ;main.c: 216: for (i=0; i<10; i++){
  1440  0006FA  0E00               	movlw	0
  1441  0006FC  0101               	movlb	1	; () banked
  1442  0006FE  6FCE               	movwf	main@i& (0+255),b
  1443  000700                     l3446:
  1444                           
  1445                           ; BSR set to: 1
  1446  000700  0E09               	movlw	9
  1447  000702  0101               	movlb	1	; () banked
  1448  000704  65CE               	cpfsgt	main@i& (0+255),b
  1449  000706  D001               	goto	l3450
  1450  000708  D020               	goto	l3456
  1451  00070A                     l3450:
  1452                           
  1453                           ; BSR set to: 1
  1454                           ;main.c: 217: Message[i] = ReceivedString[i+1];
  1455  00070A  0101               	movlb	1	; () banked
  1456  00070C  51CE               	movf	main@i& (0+255),w,b
  1457  00070E  0100               	movlb	0	; () banked
  1458  000710  6FBA               	movwf	??_main& (0+255),b
  1459  000712  6BBB               	clrf	(??_main+1)& (0+255),b
  1460  000714  0E01               	movlw	1
  1461  000716  0100               	movlb	0	; () banked
  1462  000718  27BA               	addwf	??_main& (0+255),f,b
  1463  00071A  0E00               	movlw	0
  1464  00071C  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1465  00071E  0EE6               	movlw	low _ReceivedString
  1466  000720  0100               	movlb	0	; () banked
  1467  000722  25BA               	addwf	??_main& (0+255),w,b
  1468  000724  6ED9               	movwf	fsr2l,c
  1469  000726  0E01               	movlw	high _ReceivedString
  1470  000728  0100               	movlb	0	; () banked
  1471  00072A  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1472  00072C  6EDA               	movwf	fsr2h,c
  1473  00072E  0101               	movlb	1	; () banked
  1474  000730  51CE               	movf	main@i& (0+255),w,b
  1475  000732  0D01               	mullw	1
  1476  000734  0EBE               	movlw	low main@Message
  1477  000736  24F3               	addwf	prodl,w,c
  1478  000738  6EE1               	movwf	fsr1l,c
  1479  00073A  0E01               	movlw	high main@Message
  1480  00073C  20F4               	addwfc	prodh,w,c
  1481  00073E  6EE2               	movwf	fsr1h,c
  1482  000740  CFDF FFE7          	movff	indf2,indf1
  1483                           
  1484                           ; BSR set to: 1
  1485  000744  0101               	movlb	1	; () banked
  1486  000746  2BCE               	incf	main@i& (0+255),f,b
  1487  000748  D7DB               	goto	l3446
  1488  00074A                     l3456:
  1489                           
  1490                           ; BSR set to: 1
  1491                           ;main.c: 218: }
  1492                           ;main.c: 221: for (i=0; i<16; i++) {
  1493  00074A  0E00               	movlw	0
  1494  00074C  0101               	movlb	1	; () banked
  1495  00074E  6FCE               	movwf	main@i& (0+255),b
  1496  000750                     l3458:
  1497                           
  1498                           ; BSR set to: 1
  1499  000750  0E0F               	movlw	15
  1500  000752  0101               	movlb	1	; () banked
  1501  000754  65CE               	cpfsgt	main@i& (0+255),b
  1502  000756  D001               	goto	l3462
  1503  000758  D00E               	goto	l3468
  1504  00075A                     l3462:
  1505                           
  1506                           ; BSR set to: 1
  1507                           ;main.c: 222: ReceivedString[i]=0;
  1508  00075A  0101               	movlb	1	; () banked
  1509  00075C  51CE               	movf	main@i& (0+255),w,b
  1510  00075E  0D01               	mullw	1
  1511  000760  0EE6               	movlw	low _ReceivedString
  1512  000762  24F3               	addwf	prodl,w,c
  1513  000764  6ED9               	movwf	fsr2l,c
  1514  000766  0E01               	movlw	high _ReceivedString
  1515  000768  20F4               	addwfc	prodh,w,c
  1516  00076A  6EDA               	movwf	fsr2h,c
  1517  00076C  0E00               	movlw	0
  1518  00076E  6EDF               	movwf	indf2,c
  1519                           
  1520                           ; BSR set to: 1
  1521  000770  0101               	movlb	1	; () banked
  1522  000772  2BCE               	incf	main@i& (0+255),f,b
  1523  000774  D7ED               	goto	l3458
  1524  000776                     l3468:
  1525                           
  1526                           ; BSR set to: 1
  1527                           ;main.c: 223: }
  1528                           ;main.c: 224: mode=3;
  1529  000776  0E03               	movlw	3
  1530  000778  6E3B               	movwf	_mode,c	;volatile
  1531                           
  1532                           ;main.c: 226: } else {
  1533  00077A  D1C1               	goto	l3546
  1534  00077C                     l3470:
  1535                           
  1536                           ;main.c: 227: fullSpeedBack(&mL,&mR, 100);
  1537  00077C  0ED0               	movlw	low main@mL
  1538  00077E  0100               	movlb	0	; () banked
  1539  000780  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1540  000782  0E01               	movlw	high main@mL
  1541  000784  0100               	movlb	0	; () banked
  1542  000786  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1543  000788  0ED9               	movlw	low main@mR
  1544  00078A  0100               	movlb	0	; () banked
  1545  00078C  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1546  00078E  0E01               	movlw	high main@mR
  1547  000790  0100               	movlb	0	; () banked
  1548  000792  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1549  000794  0E64               	movlw	100
  1550  000796  0100               	movlb	0	; () banked
  1551  000798  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1552  00079A  EC44  F00D         	call	_fullSpeedBack	;wreg free
  1553                           
  1554                           ;main.c: 228: delay_tenth_s(5);
  1555  00079E  0E05               	movlw	5
  1556  0007A0  ECBE  F00D         	call	_delay_tenth_s
  1557                           
  1558                           ;main.c: 229: stop(&mL,&mR);
  1559  0007A4  0ED0               	movlw	low main@mL
  1560  0007A6  0100               	movlb	0	; () banked
  1561  0007A8  6F62               	movwf	stop@mL& (0+255),b
  1562  0007AA  0E01               	movlw	high main@mL
  1563  0007AC  0100               	movlb	0	; () banked
  1564  0007AE  6F63               	movwf	(stop@mL+1)& (0+255),b
  1565  0007B0  0ED9               	movlw	low main@mR
  1566  0007B2  0100               	movlb	0	; () banked
  1567  0007B4  6F64               	movwf	stop@mR& (0+255),b
  1568  0007B6  0E01               	movlw	high main@mR
  1569  0007B8  0100               	movlb	0	; () banked
  1570  0007BA  6F65               	movwf	(stop@mR+1)& (0+255),b
  1571  0007BC  EC1C  F00B         	call	_stop	;wreg free
  1572                           
  1573                           ;main.c: 230: fullSpeed(&mL,&mR, 100);
  1574  0007C0  0ED0               	movlw	low main@mL
  1575  0007C2  0100               	movlb	0	; () banked
  1576  0007C4  6F62               	movwf	fullSpeed@mL& (0+255),b
  1577  0007C6  0E01               	movlw	high main@mL
  1578  0007C8  0100               	movlb	0	; () banked
  1579  0007CA  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1580  0007CC  0ED9               	movlw	low main@mR
  1581  0007CE  0100               	movlb	0	; () banked
  1582  0007D0  6F64               	movwf	fullSpeed@mR& (0+255),b
  1583  0007D2  0E01               	movlw	high main@mR
  1584  0007D4  0100               	movlb	0	; () banked
  1585  0007D6  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1586  0007D8  0E64               	movlw	100
  1587  0007DA  0100               	movlb	0	; () banked
  1588  0007DC  6F66               	movwf	fullSpeed@power& (0+255),b
  1589  0007DE  ECED  F00B         	call	_fullSpeed	;wreg free
  1590                           
  1591                           ;main.c: 231: }
  1592                           ;main.c: 232: }
  1593                           ;main.c: 233: } else {
  1594  0007E2  D18D               	goto	l3546
  1595  0007E4                     l3478:
  1596                           
  1597                           ;main.c: 234: DirectionFound=1;
  1598  0007E4  0E01               	movlw	1
  1599  0007E6  0101               	movlb	1	; () banked
  1600  0007E8  6FCD               	movwf	main@DirectionFound& (0+255),b
  1601                           
  1602                           ;main.c: 235: mode=1;
  1603  0007EA  0E01               	movlw	1
  1604  0007EC  6E3B               	movwf	_mode,c	;volatile
  1605                           
  1606                           ; BSR set to: 1
  1607                           ;main.c: 237: fullSpeed(&mL,&mR, 100);
  1608  0007EE  0ED0               	movlw	low main@mL
  1609  0007F0  0100               	movlb	0	; () banked
  1610  0007F2  6F62               	movwf	fullSpeed@mL& (0+255),b
  1611  0007F4  0E01               	movlw	high main@mL
  1612  0007F6  0100               	movlb	0	; () banked
  1613  0007F8  6F63               	movwf	(fullSpeed@mL+1)& (0+255),b
  1614  0007FA  0ED9               	movlw	low main@mR
  1615  0007FC  0100               	movlb	0	; () banked
  1616  0007FE  6F64               	movwf	fullSpeed@mR& (0+255),b
  1617  000800  0E01               	movlw	high main@mR
  1618  000802  0100               	movlb	0	; () banked
  1619  000804  6F65               	movwf	(fullSpeed@mR+1)& (0+255),b
  1620  000806  0E64               	movlw	100
  1621  000808  0100               	movlb	0	; () banked
  1622  00080A  6F66               	movwf	fullSpeed@power& (0+255),b
  1623  00080C  ECED  F00B         	call	_fullSpeed	;wreg free
  1624                           
  1625                           ;main.c: 238: delay_tenth_s(1);
  1626  000810  0E01               	movlw	1
  1627  000812  ECBE  F00D         	call	_delay_tenth_s
  1628                           
  1629                           ;main.c: 239: MoveType[Move] = 0;
  1630  000816  0101               	movlb	1	; () banked
  1631  000818  51CF               	movf	main@Move& (0+255),w,b
  1632  00081A  0D01               	mullw	1
  1633  00081C  0E28               	movlw	low main@MoveType
  1634  00081E  24F3               	addwf	prodl,w,c
  1635  000820  6ED9               	movwf	fsr2l,c
  1636  000822  0E01               	movlw	high main@MoveType
  1637  000824  20F4               	addwfc	prodh,w,c
  1638  000826  6EDA               	movwf	fsr2h,c
  1639  000828  0E00               	movlw	0
  1640  00082A  6EDF               	movwf	indf2,c
  1641                           
  1642                           ; BSR set to: 1
  1643                           ;main.c: 240: MoveTime[Move] = 5;
  1644  00082C  0101               	movlb	1	; () banked
  1645  00082E  51CF               	movf	main@Move& (0+255),w,b
  1646  000830  0D02               	mullw	2
  1647  000832  0E5A               	movlw	low main@MoveTime
  1648  000834  24F3               	addwf	prodl,w,c
  1649  000836  6ED9               	movwf	fsr2l,c
  1650  000838  0E01               	movlw	high main@MoveTime
  1651  00083A  20F4               	addwfc	prodh,w,c
  1652  00083C  6EDA               	movwf	fsr2h,c
  1653  00083E  0E05               	movlw	5
  1654  000840  6EDE               	movwf	postinc2,c
  1655  000842  0E00               	movlw	0
  1656  000844  6EDD               	movwf	postdec2,c
  1657                           
  1658                           ; BSR set to: 1
  1659                           ;main.c: 241: Move++;
  1660  000846  0101               	movlb	1	; () banked
  1661  000848  2BCF               	incf	main@Move& (0+255),f,b
  1662                           
  1663                           ; BSR set to: 1
  1664                           ;main.c: 242: }
  1665                           ;main.c: 244: break;
  1666  00084A  D159               	goto	l3546
  1667  00084C                     l3490:
  1668                           
  1669                           ;main.c: 249: SetLine(1);
  1670  00084C  0E01               	movlw	1
  1671  00084E  EC11  F00E         	call	_SetLine
  1672                           
  1673                           ;main.c: 250: LCD_String(Message);
  1674  000852  0EBE               	movlw	low main@Message
  1675  000854  6E2A               	movwf	LCD_String@string,c
  1676  000856  0E01               	movlw	high main@Message
  1677  000858  6E2B               	movwf	LCD_String@string+1,c
  1678  00085A  EC9F  F00C         	call	_LCD_String	;wreg free
  1679                           
  1680                           ;main.c: 251: SetLine(2);
  1681  00085E  0E02               	movlw	2
  1682  000860  EC11  F00E         	call	_SetLine
  1683                           
  1684                           ;main.c: 252: LCD_String("Going Home");
  1685  000864  0E39               	movlw	low STR_8
  1686  000866  6E2A               	movwf	LCD_String@string,c
  1687  000868  0E03               	movlw	high STR_8
  1688  00086A  6E2B               	movwf	LCD_String@string+1,c
  1689  00086C  EC9F  F00C         	call	_LCD_String	;wreg free
  1690  000870                     l3496:
  1691  000870  0101               	movlb	1	; () banked
  1692  000872  BFCF               	btfsc	main@Move& (0+255),7,b
  1693  000874  D135               	goto	l3540
  1694                           
  1695                           ; BSR set to: 1
  1696                           ;main.c: 255: stop(&mL,&mR);
  1697                           
  1698                           ; BSR set to: 1
  1699                           
  1700                           ; BSR set to: 1
  1701  000876  0ED0               	movlw	low main@mL
  1702  000878  0100               	movlb	0	; () banked
  1703  00087A  6F62               	movwf	stop@mL& (0+255),b
  1704  00087C  0E01               	movlw	high main@mL
  1705  00087E  0100               	movlb	0	; () banked
  1706  000880  6F63               	movwf	(stop@mL+1)& (0+255),b
  1707  000882  0ED9               	movlw	low main@mR
  1708  000884  0100               	movlb	0	; () banked
  1709  000886  6F64               	movwf	stop@mR& (0+255),b
  1710  000888  0E01               	movlw	high main@mR
  1711  00088A  0100               	movlb	0	; () banked
  1712  00088C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1713  00088E  EC1C  F00B         	call	_stop	;wreg free
  1714                           
  1715                           ;main.c: 256: if (MoveType[Move]==0) {
  1716  000892  0101               	movlb	1	; () banked
  1717  000894  51CF               	movf	main@Move& (0+255),w,b
  1718  000896  0D01               	mullw	1
  1719  000898  0E28               	movlw	low main@MoveType
  1720  00089A  24F3               	addwf	prodl,w,c
  1721  00089C  6ED9               	movwf	fsr2l,c
  1722  00089E  0E01               	movlw	high main@MoveType
  1723  0008A0  20F4               	addwfc	prodh,w,c
  1724  0008A2  6EDA               	movwf	fsr2h,c
  1725  0008A4  50DF               	movf	indf2,w,c
  1726  0008A6  A4D8               	btfss	status,2,c
  1727  0008A8  D01E               	goto	l3506
  1728                           
  1729                           ; BSR set to: 1
  1730                           ;main.c: 257: fullSpeedBack(&mL,&mR,100);
  1731  0008AA  0ED0               	movlw	low main@mL
  1732  0008AC  0100               	movlb	0	; () banked
  1733  0008AE  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1734  0008B0  0E01               	movlw	high main@mL
  1735  0008B2  0100               	movlb	0	; () banked
  1736  0008B4  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1737  0008B6  0ED9               	movlw	low main@mR
  1738  0008B8  0100               	movlb	0	; () banked
  1739  0008BA  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1740  0008BC  0E01               	movlw	high main@mR
  1741  0008BE  0100               	movlb	0	; () banked
  1742  0008C0  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1743  0008C2  0E64               	movlw	100
  1744  0008C4  0100               	movlb	0	; () banked
  1745  0008C6  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1746  0008C8  EC44  F00D         	call	_fullSpeedBack	;wreg free
  1747                           
  1748                           ;main.c: 258: delay_tenth_s(MoveTime[Move]);
  1749  0008CC  0101               	movlb	1	; () banked
  1750  0008CE  51CF               	movf	main@Move& (0+255),w,b
  1751  0008D0  0D02               	mullw	2
  1752  0008D2  0E5A               	movlw	low main@MoveTime
  1753  0008D4  24F3               	addwf	prodl,w,c
  1754  0008D6  6ED9               	movwf	fsr2l,c
  1755  0008D8  0E01               	movlw	high main@MoveTime
  1756  0008DA  20F4               	addwfc	prodh,w,c
  1757  0008DC  6EDA               	movwf	fsr2h,c
  1758  0008DE  50DF               	movf	indf2,w,c
  1759  0008E0  ECBE  F00D         	call	_delay_tenth_s
  1760                           
  1761                           ;main.c: 259: } else if (MoveType[Move]==1) {
  1762  0008E4  D0F7               	goto	l3532
  1763  0008E6                     l3506:
  1764  0008E6  0101               	movlb	1	; () banked
  1765  0008E8  51CF               	movf	main@Move& (0+255),w,b
  1766  0008EA  0D01               	mullw	1
  1767  0008EC  0E28               	movlw	low main@MoveType
  1768  0008EE  24F3               	addwf	prodl,w,c
  1769  0008F0  6ED9               	movwf	fsr2l,c
  1770  0008F2  0E01               	movlw	high main@MoveType
  1771  0008F4  20F4               	addwfc	prodh,w,c
  1772  0008F6  6EDA               	movwf	fsr2h,c
  1773  0008F8  04DE               	decf	postinc2,w,c
  1774  0008FA  A4D8               	btfss	status,2,c
  1775  0008FC  D091               	goto	l3524
  1776                           
  1777                           ; BSR set to: 1
  1778                           ;main.c: 260: T0CONbits.TMR0ON=0;
  1779  0008FE  9ED5               	bcf	4053,7,c	;volatile
  1780                           
  1781                           ; BSR set to: 1
  1782                           ;main.c: 261: TMR0L = 0;
  1783  000900  0E00               	movlw	0
  1784  000902  6ED6               	movwf	4054,c	;volatile
  1785                           
  1786                           ;main.c: 262: TMR0H = 0;
  1787  000904  0E00               	movlw	0
  1788  000906  6ED7               	movwf	4055,c	;volatile
  1789                           
  1790                           ; BSR set to: 1
  1791                           ;main.c: 263: if (MoveTime[Move]>0) {
  1792  000908  0101               	movlb	1	; () banked
  1793  00090A  51CF               	movf	main@Move& (0+255),w,b
  1794  00090C  0D02               	mullw	2
  1795  00090E  0E5A               	movlw	low main@MoveTime
  1796  000910  24F3               	addwf	prodl,w,c
  1797  000912  6ED9               	movwf	fsr2l,c
  1798  000914  0E01               	movlw	high main@MoveTime
  1799  000916  20F4               	addwfc	prodh,w,c
  1800  000918  6EDA               	movwf	fsr2h,c
  1801  00091A  0E01               	movlw	1
  1802  00091C  BEDB               	btfsc	plusw2,7,c
  1803  00091E  D03D               	goto	l429
  1804  000920  0E01               	movlw	1
  1805  000922  50DB               	movf	plusw2,w,c
  1806  000924  E103               	bnz	u2990
  1807  000926  04DE               	decf	postinc2,w,c
  1808  000928  A0D8               	btfss	status,0,c
  1809  00092A  D037               	goto	l429
  1810  00092C                     u2990:
  1811                           
  1812                           ; BSR set to: 1
  1813                           ;main.c: 264: T0CONbits.TMR0ON=1;
  1814  00092C  8ED5               	bsf	4053,7,c	;volatile
  1815                           
  1816                           ; BSR set to: 1
  1817                           ;main.c: 265: turnRight(&mL,&mR,40);
  1818  00092E  0ED0               	movlw	low main@mL
  1819  000930  0100               	movlb	0	; () banked
  1820  000932  6F67               	movwf	turnRight@mL& (0+255),b
  1821  000934  0E01               	movlw	high main@mL
  1822  000936  0100               	movlb	0	; () banked
  1823  000938  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1824  00093A  0ED9               	movlw	low main@mR
  1825  00093C  0100               	movlb	0	; () banked
  1826  00093E  6F69               	movwf	turnRight@mR& (0+255),b
  1827  000940  0E01               	movlw	high main@mR
  1828  000942  0100               	movlb	0	; () banked
  1829  000944  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1830  000946  0E28               	movlw	40
  1831  000948  0100               	movlb	0	; () banked
  1832  00094A  6F6B               	movwf	turnRight@power& (0+255),b
  1833  00094C  EC63  F00D         	call	_turnRight	;wreg free
  1834  000950                     l3518:
  1835  000950  0101               	movlb	1	; () banked
  1836  000952  51CF               	movf	main@Move& (0+255),w,b
  1837  000954  0D02               	mullw	2
  1838  000956  0E5A               	movlw	low main@MoveTime
  1839  000958  24F3               	addwf	prodl,w,c
  1840  00095A  6ED9               	movwf	fsr2l,c
  1841  00095C  0E01               	movlw	high main@MoveTime
  1842  00095E  20F4               	addwfc	prodh,w,c
  1843  000960  6EDA               	movwf	fsr2h,c
  1844  000962  50D6               	movf	4054,w,c	;volatile
  1845  000964  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1846  000968  0100               	movlb	0	; () banked
  1847  00096A  6BBD               	clrf	(??_main+3)& (0+255),b
  1848  00096C  C0BC  F0BD         	movff	??_main+2,??_main+3
  1849  000970  0100               	movlb	0	; () banked
  1850  000972  6BBC               	clrf	(??_main+2)& (0+255),b
  1851  000974  0100               	movlb	0	; () banked
  1852  000976  27BC               	addwf	(??_main+2)& (0+255),f,b
  1853  000978  0E00               	movlw	0
  1854  00097A  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1855  00097C  50DE               	movf	postinc2,w,c
  1856  00097E  0100               	movlb	0	; () banked
  1857  000980  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1858  000982  0100               	movlb	0	; () banked
  1859  000984  51BD               	movf	(??_main+3)& (0+255),w,b
  1860  000986  0A80               	xorlw	128
  1861  000988  0100               	movlb	0	; () banked
  1862  00098A  6FBE               	movwf	(??_main+4)& (0+255),b
  1863  00098C  50DE               	movf	postinc2,w,c
  1864  00098E  0A80               	xorlw	128
  1865  000990  0100               	movlb	0	; () banked
  1866  000992  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1867  000994  A0D8               	btfss	status,0,c
  1868  000996  D7DC               	goto	l3518
  1869  000998  D041               	goto	l436
  1870  00099A                     l429:
  1871                           
  1872                           ; BSR set to: 1
  1873                           ;main.c: 270: T0CONbits.TMR0ON=1;
  1874  00099A  8ED5               	bsf	4053,7,c	;volatile
  1875                           
  1876                           ; BSR set to: 1
  1877                           ;main.c: 271: turnLeft(&mL,&mR,40);
  1878  00099C  0ED0               	movlw	low main@mL
  1879  00099E  0100               	movlb	0	; () banked
  1880  0009A0  6F67               	movwf	turnLeft@mL& (0+255),b
  1881  0009A2  0E01               	movlw	high main@mL
  1882  0009A4  0100               	movlb	0	; () banked
  1883  0009A6  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1884  0009A8  0ED9               	movlw	low main@mR
  1885  0009AA  0100               	movlb	0	; () banked
  1886  0009AC  6F69               	movwf	turnLeft@mR& (0+255),b
  1887  0009AE  0E01               	movlw	high main@mR
  1888  0009B0  0100               	movlb	0	; () banked
  1889  0009B2  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1890  0009B4  0E28               	movlw	40
  1891  0009B6  0100               	movlb	0	; () banked
  1892  0009B8  6F6B               	movwf	turnLeft@power& (0+255),b
  1893  0009BA  EC82  F00D         	call	_turnLeft	;wreg free
  1894  0009BE                     l3522:
  1895  0009BE  0101               	movlb	1	; () banked
  1896  0009C0  51CF               	movf	main@Move& (0+255),w,b
  1897  0009C2  0D02               	mullw	2
  1898  0009C4  0E5A               	movlw	low main@MoveTime
  1899  0009C6  24F3               	addwf	prodl,w,c
  1900  0009C8  6ED9               	movwf	fsr2l,c
  1901  0009CA  0E01               	movlw	high main@MoveTime
  1902  0009CC  20F4               	addwfc	prodh,w,c
  1903  0009CE  6EDA               	movwf	fsr2h,c
  1904  0009D0  CFDE F0BA          	movff	postinc2,??_main
  1905  0009D4  CFDD F0BB          	movff	postdec2,??_main+1
  1906  0009D8  0100               	movlb	0	; () banked
  1907  0009DA  1FBA               	comf	??_main& (0+255),f,b
  1908  0009DC  1FBB               	comf	(??_main+1)& (0+255),f,b
  1909  0009DE  4BBA               	infsnz	??_main& (0+255),f,b
  1910  0009E0  2BBB               	incf	(??_main+1)& (0+255),f,b
  1911  0009E2  50D6               	movf	4054,w,c	;volatile
  1912  0009E4  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1913  0009E8  0100               	movlb	0	; () banked
  1914  0009EA  6BBD               	clrf	(??_main+3)& (0+255),b
  1915  0009EC  C0BC  F0BD         	movff	??_main+2,??_main+3
  1916  0009F0  0100               	movlb	0	; () banked
  1917  0009F2  6BBC               	clrf	(??_main+2)& (0+255),b
  1918  0009F4  0100               	movlb	0	; () banked
  1919  0009F6  27BC               	addwf	(??_main+2)& (0+255),f,b
  1920  0009F8  0E00               	movlw	0
  1921  0009FA  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1922  0009FC  0100               	movlb	0	; () banked
  1923  0009FE  51BA               	movf	??_main& (0+255),w,b
  1924  000A00  0100               	movlb	0	; () banked
  1925  000A02  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1926  000A04  0100               	movlb	0	; () banked
  1927  000A06  51BD               	movf	(??_main+3)& (0+255),w,b
  1928  000A08  0A80               	xorlw	128
  1929  000A0A  0100               	movlb	0	; () banked
  1930  000A0C  6FBE               	movwf	(??_main+4)& (0+255),b
  1931  000A0E  0100               	movlb	0	; () banked
  1932  000A10  51BB               	movf	(??_main+1)& (0+255),w,b
  1933  000A12  0A80               	xorlw	128
  1934  000A14  0100               	movlb	0	; () banked
  1935  000A16  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1936  000A18  A0D8               	btfss	status,0,c
  1937  000A1A  D7D1               	goto	l3522
  1938  000A1C                     l436:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;main.c: 274: T0CONbits.TMR0ON=0;
  1942  000A1C  9ED5               	bcf	4053,7,c	;volatile
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 275: }
  1946                           ;main.c: 276: } else if (MoveType[Move]==2) {
  1947  000A1E  D05A               	goto	l3532
  1948  000A20                     l3524:
  1949  000A20  0101               	movlb	1	; () banked
  1950  000A22  51CF               	movf	main@Move& (0+255),w,b
  1951  000A24  0D01               	mullw	1
  1952  000A26  0E28               	movlw	low main@MoveType
  1953  000A28  24F3               	addwf	prodl,w,c
  1954  000A2A  6ED9               	movwf	fsr2l,c
  1955  000A2C  0E01               	movlw	high main@MoveType
  1956  000A2E  20F4               	addwfc	prodh,w,c
  1957  000A30  6EDA               	movwf	fsr2h,c
  1958  000A32  0E02               	movlw	2
  1959  000A34  18DE               	xorwf	postinc2,w,c
  1960  000A36  A4D8               	btfss	status,2,c
  1961  000A38  D04D               	goto	l3532
  1962                           
  1963                           ; BSR set to: 1
  1964                           ;main.c: 277: if (MoveTime[Move]>0) {
  1965  000A3A  0101               	movlb	1	; () banked
  1966  000A3C  51CF               	movf	main@Move& (0+255),w,b
  1967  000A3E  0D02               	mullw	2
  1968  000A40  0E5A               	movlw	low main@MoveTime
  1969  000A42  24F3               	addwf	prodl,w,c
  1970  000A44  6ED9               	movwf	fsr2l,c
  1971  000A46  0E01               	movlw	high main@MoveTime
  1972  000A48  20F4               	addwfc	prodh,w,c
  1973  000A4A  6EDA               	movwf	fsr2h,c
  1974  000A4C  0E01               	movlw	1
  1975  000A4E  BEDB               	btfsc	plusw2,7,c
  1976  000A50  D024               	goto	l3530
  1977  000A52  0E01               	movlw	1
  1978  000A54  50DB               	movf	plusw2,w,c
  1979  000A56  E103               	bnz	u3030
  1980  000A58  04DE               	decf	postinc2,w,c
  1981  000A5A  A0D8               	btfss	status,0,c
  1982  000A5C  D01E               	goto	l3530
  1983  000A5E                     u3030:
  1984                           
  1985                           ; BSR set to: 1
  1986                           ;main.c: 278: turnRight(&mL,&mR,100);
  1987  000A5E  0ED0               	movlw	low main@mL
  1988  000A60  0100               	movlb	0	; () banked
  1989  000A62  6F67               	movwf	turnRight@mL& (0+255),b
  1990  000A64  0E01               	movlw	high main@mL
  1991  000A66  0100               	movlb	0	; () banked
  1992  000A68  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1993  000A6A  0ED9               	movlw	low main@mR
  1994  000A6C  0100               	movlb	0	; () banked
  1995  000A6E  6F69               	movwf	turnRight@mR& (0+255),b
  1996  000A70  0E01               	movlw	high main@mR
  1997  000A72  0100               	movlb	0	; () banked
  1998  000A74  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1999  000A76  0E64               	movlw	100
  2000  000A78  0100               	movlb	0	; () banked
  2001  000A7A  6F6B               	movwf	turnRight@power& (0+255),b
  2002  000A7C  EC63  F00D         	call	_turnRight	;wreg free
  2003                           
  2004                           ;main.c: 279: delay_tenth_s(MoveTime[Move]);
  2005  000A80  0101               	movlb	1	; () banked
  2006  000A82  51CF               	movf	main@Move& (0+255),w,b
  2007  000A84  0D02               	mullw	2
  2008  000A86  0E5A               	movlw	low main@MoveTime
  2009  000A88  24F3               	addwf	prodl,w,c
  2010  000A8A  6ED9               	movwf	fsr2l,c
  2011  000A8C  0E01               	movlw	high main@MoveTime
  2012  000A8E  20F4               	addwfc	prodh,w,c
  2013  000A90  6EDA               	movwf	fsr2h,c
  2014  000A92  50DF               	movf	indf2,w,c
  2015  000A94  ECBE  F00D         	call	_delay_tenth_s
  2016                           
  2017                           ;main.c: 280: } else {
  2018  000A98  D01D               	goto	l3532
  2019  000A9A                     l3530:
  2020                           
  2021                           ;main.c: 281: turnLeft(&mL,&mR,100);
  2022  000A9A  0ED0               	movlw	low main@mL
  2023  000A9C  0100               	movlb	0	; () banked
  2024  000A9E  6F67               	movwf	turnLeft@mL& (0+255),b
  2025  000AA0  0E01               	movlw	high main@mL
  2026  000AA2  0100               	movlb	0	; () banked
  2027  000AA4  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2028  000AA6  0ED9               	movlw	low main@mR
  2029  000AA8  0100               	movlb	0	; () banked
  2030  000AAA  6F69               	movwf	turnLeft@mR& (0+255),b
  2031  000AAC  0E01               	movlw	high main@mR
  2032  000AAE  0100               	movlb	0	; () banked
  2033  000AB0  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2034  000AB2  0E64               	movlw	100
  2035  000AB4  0100               	movlb	0	; () banked
  2036  000AB6  6F6B               	movwf	turnLeft@power& (0+255),b
  2037  000AB8  EC82  F00D         	call	_turnLeft	;wreg free
  2038                           
  2039                           ;main.c: 282: delay_tenth_s(MoveTime[Move]);
  2040  000ABC  0101               	movlb	1	; () banked
  2041  000ABE  51CF               	movf	main@Move& (0+255),w,b
  2042  000AC0  0D02               	mullw	2
  2043  000AC2  0E5A               	movlw	low main@MoveTime
  2044  000AC4  24F3               	addwf	prodl,w,c
  2045  000AC6  6ED9               	movwf	fsr2l,c
  2046  000AC8  0E01               	movlw	high main@MoveTime
  2047  000ACA  20F4               	addwfc	prodh,w,c
  2048  000ACC  6EDA               	movwf	fsr2h,c
  2049  000ACE  50DF               	movf	indf2,w,c
  2050  000AD0  ECBE  F00D         	call	_delay_tenth_s
  2051  000AD4                     l3532:
  2052                           
  2053                           ;main.c: 283: }
  2054                           ;main.c: 284: }
  2055                           ;main.c: 285: if (mode==-1) {
  2056  000AD4  283B               	incf	_mode,w,c	;volatile
  2057  000AD6  B4D8               	btfsc	status,2,c
  2058  000AD8  D003               	goto	l3540
  2059                           
  2060                           ;main.c: 286: break;
  2061  000ADA  0101               	movlb	1	; () banked
  2062  000ADC  07CF               	decf	main@Move& (0+255),f,b
  2063  000ADE  D6C8               	goto	l3496
  2064  000AE0                     l3540:
  2065                           
  2066                           ;main.c: 287: }
  2067                           ;main.c: 288: }
  2068                           ;main.c: 289: stop(&mL,&mR);
  2069  000AE0  0ED0               	movlw	low main@mL
  2070  000AE2  0100               	movlb	0	; () banked
  2071  000AE4  6F62               	movwf	stop@mL& (0+255),b
  2072  000AE6  0E01               	movlw	high main@mL
  2073  000AE8  0100               	movlb	0	; () banked
  2074  000AEA  6F63               	movwf	(stop@mL+1)& (0+255),b
  2075  000AEC  0ED9               	movlw	low main@mR
  2076  000AEE  0100               	movlb	0	; () banked
  2077  000AF0  6F64               	movwf	stop@mR& (0+255),b
  2078  000AF2  0E01               	movlw	high main@mR
  2079  000AF4  0100               	movlb	0	; () banked
  2080  000AF6  6F65               	movwf	(stop@mR+1)& (0+255),b
  2081  000AF8  EC1C  F00B         	call	_stop	;wreg free
  2082  000AFC                     l3542:
  2083                           
  2084                           ;main.c: 290: mode=-1;
  2085  000AFC  683B               	setf	_mode,c	;volatile
  2086  000AFE                     l3546:
  2087  000AFE  503B               	movf	_mode,w,c	;volatile
  2088                           
  2089                           ; Switch size 1, requested type "space"
  2090                           ; Number of cases is 5, Range of values is 0 to 255
  2091                           ; switch strategies available:
  2092                           ; Name         Instructions Cycles
  2093                           ; simple_byte           16     9 (average)
  2094                           ;	Chosen strategy is simple_byte
  2095  000B00  0A00               	xorlw	0	; case 0
  2096  000B02  B4D8               	btfsc	status,2,c
  2097  000B04  D4FD               	goto	l3384
  2098  000B06  0A01               	xorlw	1	; case 1
  2099  000B08  B4D8               	btfsc	status,2,c
  2100  000B0A  D523               	goto	l3404
  2101  000B0C  0A03               	xorlw	3	; case 2
  2102  000B0E  B4D8               	btfsc	status,2,c
  2103  000B10  D5C3               	goto	l3436
  2104  000B12  0A01               	xorlw	1	; case 3
  2105  000B14  B4D8               	btfsc	status,2,c
  2106  000B16  D69A               	goto	l3490
  2107  000B18  0AFC               	xorlw	252	; case 255
  2108  000B1A  B4D8               	btfsc	status,2,c
  2109  000B1C  D482               	goto	l3344
  2110  000B1E  D7EF               	goto	l3546
  2111  000B20                     __end_of_main:
  2112                           	opt stack 0
  2113                           tblptru	equ	0xFF8
  2114                           prodh	equ	0xFF4
  2115                           prodl	equ	0xFF3
  2116                           intcon	equ	0xFF2
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           indf1	equ	0xFE7
  2120                           plusw1	equ	0xFE3
  2121                           fsr1h	equ	0xFE2
  2122                           fsr1l	equ	0xFE1
  2123                           indf2	equ	0xFDF
  2124                           postinc2	equ	0xFDE
  2125                           postdec2	equ	0xFDD
  2126                           plusw2	equ	0xFDB
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _initTimer *****************
  2132 ;; Defined at:
  2133 ;;		line 8 in file "Movement.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;		None               void
  2140 ;; Registers used:
  2141 ;;		None
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2147 ;;      Params:         0       0       0       0
  2148 ;;      Locals:         0       0       0       0
  2149 ;;      Temps:          0       0       0       0
  2150 ;;      Totals:         0       0       0       0
  2151 ;;Total ram usage:        0 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    3
  2154 ;; This function calls:
  2155 ;;		Nothing
  2156 ;; This function is called by:
  2157 ;;		_main
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           	psect	text1
  2162  001D2A                     __ptext1:
  2163                           	opt stack 0
  2164  001D2A                     _initTimer:
  2165                           	opt stack 27
  2166                           
  2167                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2168                           
  2169                           ;incstack = 0
  2170  001D2A  9ED5               	bcf	4053,7,c	;volatile
  2171                           
  2172                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2173  001D2C  9CD5               	bcf	4053,6,c	;volatile
  2174                           
  2175                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2176  001D2E  9AD5               	bcf	4053,5,c	;volatile
  2177                           
  2178                           ;Movement.c: 13: T0CONbits.PSA=0;
  2179  001D30  96D5               	bcf	4053,3,c	;volatile
  2180                           
  2181                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2182  001D32  80D5               	bsf	4053,0,c	;volatile
  2183  001D34  82D5               	bsf	4053,1,c	;volatile
  2184  001D36  84D5               	bsf	4053,2,c	;volatile
  2185                           
  2186                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2187  001D38  9AF2               	bcf	intcon,5,c	;volatile
  2188  001D3A  0012               	return		;funcret
  2189  001D3C                     __end_of_initTimer:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           intcon	equ	0xFF2
  2195                           postinc0	equ	0xFEE
  2196                           wreg	equ	0xFE8
  2197                           indf1	equ	0xFE7
  2198                           plusw1	equ	0xFE3
  2199                           fsr1h	equ	0xFE2
  2200                           fsr1l	equ	0xFE1
  2201                           indf2	equ	0xFDF
  2202                           postinc2	equ	0xFDE
  2203                           postdec2	equ	0xFDD
  2204                           plusw2	equ	0xFDB
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _initRFID *****************
  2210 ;; Defined at:
  2211 ;;		line 8 in file "RFID_Reader.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;		None               void
  2218 ;; Registers used:
  2219 ;;		wreg, status,2, status,0
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2225 ;;      Params:         0       0       0       0
  2226 ;;      Locals:         0       0       0       0
  2227 ;;      Temps:          0       0       0       0
  2228 ;;      Totals:         0       0       0       0
  2229 ;;Total ram usage:        0 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    3
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_main
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text2
  2240  001D0E                     __ptext2:
  2241                           	opt stack 0
  2242  001D0E                     _initRFID:
  2243                           	opt stack 27
  2244                           
  2245                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2246                           
  2247                           ;incstack = 0
  2248  001D0E  5094               	movf	3988,w,c	;volatile
  2249  001D10  09C0               	iorlw	192
  2250  001D12  6E94               	movwf	3988,c	;volatile
  2251                           
  2252                           ;RFID_Reader.c: 13: SPBRG=205;
  2253  001D14  0ECD               	movlw	205
  2254  001D16  6EAF               	movwf	4015,c	;volatile
  2255                           
  2256                           ;RFID_Reader.c: 14: SPBRGH=0;
  2257  001D18  0E00               	movlw	0
  2258  001D1A  6EB0               	movwf	4016,c	;volatile
  2259                           
  2260                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2261  001D1C  86AA               	bsf	4010,3,c	;volatile
  2262                           
  2263                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2264  001D1E  84AC               	bsf	4012,2,c	;volatile
  2265                           
  2266                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2267  001D20  88AB               	bsf	4011,4,c	;volatile
  2268                           
  2269                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2270  001D22  8EAB               	bsf	4011,7,c	;volatile
  2271                           
  2272                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2273  001D24  98AC               	bcf	4012,4,c	;volatile
  2274                           
  2275                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2276  001D26  9CAB               	bcf	4011,6,c	;volatile
  2277  001D28  0012               	return		;funcret
  2278  001D2A                     __end_of_initRFID:
  2279                           	opt stack 0
  2280                           tblptru	equ	0xFF8
  2281                           prodh	equ	0xFF4
  2282                           prodl	equ	0xFF3
  2283                           intcon	equ	0xFF2
  2284                           postinc0	equ	0xFEE
  2285                           wreg	equ	0xFE8
  2286                           indf1	equ	0xFE7
  2287                           plusw1	equ	0xFE3
  2288                           fsr1h	equ	0xFE2
  2289                           fsr1l	equ	0xFE1
  2290                           indf2	equ	0xFDF
  2291                           postinc2	equ	0xFDE
  2292                           postdec2	equ	0xFDD
  2293                           plusw2	equ	0xFDB
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8
  2297                           
  2298 ;; *************** function _initMotorPWM *****************
  2299 ;; Defined at:
  2300 ;;		line 4 in file "dc_motor.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;		None
  2303 ;; Auto vars:     Size  Location     Type
  2304 ;;		None
  2305 ;; Return value:  Size  Location     Type
  2306 ;;		None               void
  2307 ;; Registers used:
  2308 ;;		wreg, status,2
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2314 ;;      Params:         0       0       0       0
  2315 ;;      Locals:         0       0       0       0
  2316 ;;      Temps:          0       0       0       0
  2317 ;;      Totals:         0       0       0       0
  2318 ;;Total ram usage:        0 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    3
  2321 ;; This function calls:
  2322 ;;		Nothing
  2323 ;; This function is called by:
  2324 ;;		_main
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           	psect	text3
  2329  001B42                     __ptext3:
  2330                           	opt stack 0
  2331  001B42                     _initMotorPWM:
  2332                           	opt stack 27
  2333                           
  2334                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2335                           
  2336                           ;incstack = 0
  2337  001B42  0E00               	movlw	0
  2338  001B44  6E7F               	movwf	3967,c	;volatile
  2339                           
  2340                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2341  001B46  0E80               	movlw	128
  2342  001B48  6E7E               	movwf	3966,c	;volatile
  2343                           
  2344                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2345  001B4A  0E6F               	movlw	111
  2346  001B4C  6E6F               	movwf	3951,c	;volatile
  2347                           
  2348                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2349  001B4E  0E00               	movlw	0
  2350  001B50  6E6E               	movwf	3950,c	;volatile
  2351                           
  2352                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2353  001B52  0EC7               	movlw	199
  2354  001B54  6E7B               	movwf	3963,c	;volatile
  2355                           
  2356                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2357  001B56  0E00               	movlw	0
  2358  001B58  6E7A               	movwf	3962,c	;volatile
  2359                           
  2360                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2361  001B5A  0E00               	movlw	0
  2362  001B5C  6E79               	movwf	3961,c	;volatile
  2363                           
  2364                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2365  001B5E  0E00               	movlw	0
  2366  001B60  6E78               	movwf	3960,c	;volatile
  2367                           
  2368                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2369  001B62  0E00               	movlw	0
  2370  001B64  6E77               	movwf	3959,c	;volatile
  2371                           
  2372                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2373  001B66  0E00               	movlw	0
  2374  001B68  6E76               	movwf	3958,c	;volatile
  2375                           
  2376                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2377  001B6A  9093               	bcf	3987,0,c	;volatile
  2378                           
  2379                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2380  001B6C  9293               	bcf	3987,1,c	;volatile
  2381                           
  2382                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2383  001B6E  9493               	bcf	3987,2,c	;volatile
  2384                           
  2385                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2386  001B70  9693               	bcf	3987,3,c	;volatile
  2387                           
  2388                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2389  001B72  908A               	bcf	3978,0,c	;volatile
  2390                           
  2391                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2392  001B74  928A               	bcf	3978,1,c	;volatile
  2393                           
  2394                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2395  001B76  948A               	bcf	3978,2,c	;volatile
  2396                           
  2397                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2398  001B78  968A               	bcf	3978,3,c	;volatile
  2399  001B7A  0012               	return		;funcret
  2400  001B7C                     __end_of_initMotorPWM:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           intcon	equ	0xFF2
  2406                           postinc0	equ	0xFEE
  2407                           wreg	equ	0xFE8
  2408                           indf1	equ	0xFE7
  2409                           plusw1	equ	0xFE3
  2410                           fsr1h	equ	0xFE2
  2411                           fsr1l	equ	0xFE1
  2412                           indf2	equ	0xFDF
  2413                           postinc2	equ	0xFDE
  2414                           postdec2	equ	0xFDD
  2415                           plusw2	equ	0xFDB
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _initLCD *****************
  2421 ;; Defined at:
  2422 ;;		line 38 in file "LCD.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;		None               void
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2436 ;;      Params:         0       0       0       0
  2437 ;;      Locals:         0       0       0       0
  2438 ;;      Temps:          1       0       0       0
  2439 ;;      Totals:         1       0       0       0
  2440 ;;Total ram usage:        1 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    6
  2443 ;; This function calls:
  2444 ;;		_LCDout
  2445 ;;		_SendLCD
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text4
  2452  00157C                     __ptext4:
  2453                           	opt stack 0
  2454  00157C                     _initLCD:
  2455                           	opt stack 24
  2456                           
  2457                           ;LCD.c: 44: TRISAbits.RA6=0;
  2458                           
  2459                           ;incstack = 0
  2460  00157C  9C92               	bcf	3986,6,c	;volatile
  2461                           
  2462                           ;LCD.c: 45: TRISCbits.RC0=0;
  2463  00157E  9094               	bcf	3988,0,c	;volatile
  2464                           
  2465                           ;LCD.c: 46: TRISCbits.RC1=0;
  2466  001580  9294               	bcf	3988,1,c	;volatile
  2467                           
  2468                           ;LCD.c: 47: TRISCbits.RC2=0;
  2469  001582  9494               	bcf	3988,2,c	;volatile
  2470                           
  2471                           ;LCD.c: 48: TRISDbits.RD0=0;
  2472  001584  9095               	bcf	3989,0,c	;volatile
  2473                           
  2474                           ;LCD.c: 49: TRISDbits.RD1=0;
  2475  001586  9295               	bcf	3989,1,c	;volatile
  2476                           
  2477                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2478  001588  0E27               	movlw	39
  2479  00158A  6E2A               	movwf	??_initLCD& (0+255),c
  2480  00158C  0EF5               	movlw	245
  2481  00158E                     u3087:
  2482  00158E  2EE8               	decfsz	wreg,f,c
  2483  001590  D7FE               	goto	u3087
  2484  001592  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2485  001594  D7FC               	goto	u3087
  2486  001596  F000               	nop	
  2487                           
  2488                           ;LCD.c: 52: LCDout(0b0011);
  2489  001598  0E03               	movlw	3
  2490  00159A  EC5B  F00A         	call	_LCDout
  2491                           
  2492                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2493  00159E  0E0D               	movlw	13
  2494  0015A0  6E2A               	movwf	??_initLCD& (0+255),c
  2495  0015A2  0EFC               	movlw	252
  2496  0015A4                     u3097:
  2497  0015A4  2EE8               	decfsz	wreg,f,c
  2498  0015A6  D7FE               	goto	u3097
  2499  0015A8  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2500  0015AA  D7FC               	goto	u3097
  2501                           
  2502                           ;LCD.c: 54: LCDout(0b0011);
  2503  0015AC  0E03               	movlw	3
  2504  0015AE  EC5B  F00A         	call	_LCDout
  2505                           
  2506                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2507  0015B2  0E85               	movlw	133
  2508  0015B4                     u3107:
  2509  0015B4  2EE8               	decfsz	wreg,f,c
  2510  0015B6  D7FE               	goto	u3107
  2511  0015B8  F000               	nop	
  2512                           
  2513                           ;LCD.c: 56: LCDout(0b0011);
  2514  0015BA  0E03               	movlw	3
  2515  0015BC  EC5B  F00A         	call	_LCDout
  2516                           
  2517                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2518  0015C0  0E21               	movlw	33
  2519  0015C2                     u3117:
  2520  0015C2  2EE8               	decfsz	wreg,f,c
  2521  0015C4  D7FE               	goto	u3117
  2522  0015C6  F000               	nop	
  2523                           
  2524                           ;LCD.c: 58: LCDout(0b0010);
  2525  0015C8  0E02               	movlw	2
  2526  0015CA  EC5B  F00A         	call	_LCDout
  2527                           
  2528                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2529  0015CE  0E21               	movlw	33
  2530  0015D0                     u3127:
  2531  0015D0  2EE8               	decfsz	wreg,f,c
  2532  0015D2  D7FE               	goto	u3127
  2533  0015D4  F000               	nop	
  2534                           
  2535                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2536  0015D6  0E00               	movlw	0
  2537  0015D8  6E28               	movwf	SendLCD@type,c
  2538  0015DA  0E28               	movlw	40
  2539  0015DC  EC29  F00E         	call	_SendLCD
  2540                           
  2541                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2542  0015E0  0E21               	movlw	33
  2543  0015E2                     u3137:
  2544  0015E2  2EE8               	decfsz	wreg,f,c
  2545  0015E4  D7FE               	goto	u3137
  2546  0015E6  F000               	nop	
  2547                           
  2548                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2549  0015E8  0E00               	movlw	0
  2550  0015EA  6E28               	movwf	SendLCD@type,c
  2551  0015EC  0E08               	movlw	8
  2552  0015EE  EC29  F00E         	call	_SendLCD
  2553                           
  2554                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2555  0015F2  0E21               	movlw	33
  2556  0015F4                     u3147:
  2557  0015F4  2EE8               	decfsz	wreg,f,c
  2558  0015F6  D7FE               	goto	u3147
  2559  0015F8  F000               	nop	
  2560                           
  2561                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2562  0015FA  0E00               	movlw	0
  2563  0015FC  6E28               	movwf	SendLCD@type,c
  2564  0015FE  0E01               	movlw	1
  2565  001600  EC29  F00E         	call	_SendLCD
  2566                           
  2567                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2568  001604  0E0D               	movlw	13
  2569  001606  6E2A               	movwf	??_initLCD& (0+255),c
  2570  001608  0EFC               	movlw	252
  2571  00160A                     u3157:
  2572  00160A  2EE8               	decfsz	wreg,f,c
  2573  00160C  D7FE               	goto	u3157
  2574  00160E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2575  001610  D7FC               	goto	u3157
  2576                           
  2577                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2578  001612  0E00               	movlw	0
  2579  001614  6E28               	movwf	SendLCD@type,c
  2580  001616  0E06               	movlw	6
  2581  001618  EC29  F00E         	call	_SendLCD
  2582                           
  2583                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2584  00161C  0E21               	movlw	33
  2585  00161E                     u3167:
  2586  00161E  2EE8               	decfsz	wreg,f,c
  2587  001620  D7FE               	goto	u3167
  2588  001622  F000               	nop	
  2589                           
  2590                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2591  001624  0E00               	movlw	0
  2592  001626  6E28               	movwf	SendLCD@type,c
  2593  001628  0E0C               	movlw	12
  2594  00162A  EC29  F00E         	call	_SendLCD
  2595                           
  2596                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2597  00162E  0E21               	movlw	33
  2598  001630                     u3177:
  2599  001630  2EE8               	decfsz	wreg,f,c
  2600  001632  D7FE               	goto	u3177
  2601  001634  F000               	nop	
  2602  001636  0012               	return		;funcret
  2603  001638                     __end_of_initLCD:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           postinc0	equ	0xFEE
  2610                           wreg	equ	0xFE8
  2611                           indf1	equ	0xFE7
  2612                           plusw1	equ	0xFE3
  2613                           fsr1h	equ	0xFE2
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           postinc2	equ	0xFDE
  2617                           postdec2	equ	0xFDD
  2618                           plusw2	equ	0xFDB
  2619                           fsr2h	equ	0xFDA
  2620                           fsr2l	equ	0xFD9
  2621                           status	equ	0xFD8
  2622                           
  2623 ;; *************** function _initIR *****************
  2624 ;; Defined at:
  2625 ;;		line 30 in file "IR_Reading.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;		None               void
  2632 ;; Registers used:
  2633 ;;		wreg, status,2
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2639 ;;      Params:         0       0       0       0
  2640 ;;      Locals:         0       0       0       0
  2641 ;;      Temps:          0       0       0       0
  2642 ;;      Totals:         0       0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    3
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text5
  2654  001CCE                     __ptext5:
  2655                           	opt stack 0
  2656  001CCE                     _initIR:
  2657                           	opt stack 27
  2658                           
  2659                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2660                           
  2661                           ;incstack = 0
  2662  001CCE  9489               	bcf	3977,2,c	;volatile
  2663                           
  2664                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2665  001CD0  9689               	bcf	3977,3,c	;volatile
  2666                           
  2667                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2668  001CD2  8492               	bsf	3986,2,c	;volatile
  2669                           
  2670                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2671  001CD4  8692               	bsf	3986,3,c	;volatile
  2672                           
  2673                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2674  001CD6  94B8               	bcf	4024,2,c	;volatile
  2675                           
  2676                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2677  001CD8  96B8               	bcf	4024,3,c	;volatile
  2678                           
  2679                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2680  001CDA  9CB8               	bcf	4024,6,c	;volatile
  2681                           
  2682                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2683  001CDC  9EB8               	bcf	4024,7,c	;volatile
  2684                           
  2685                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2686  001CDE  0E06               	movlw	6
  2687  001CE0  6E63               	movwf	3939,c	;volatile
  2688                           
  2689                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2690  001CE2  0E06               	movlw	6
  2691  001CE4  6E62               	movwf	3938,c	;volatile
  2692                           
  2693                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2694  001CE6  9096               	bcf	3990,0,c	;volatile
  2695                           
  2696                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2697  001CE8  9296               	bcf	3990,1,c	;volatile
  2698                           
  2699                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2700  001CEA  0E59               	movlw	89
  2701  001CEC  6EB7               	movwf	4023,c	;volatile
  2702  001CEE  0012               	return		;funcret
  2703  001CF0                     __end_of_initIR:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           prodh	equ	0xFF4
  2707                           prodl	equ	0xFF3
  2708                           intcon	equ	0xFF2
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           indf1	equ	0xFE7
  2712                           plusw1	equ	0xFE3
  2713                           fsr1h	equ	0xFE2
  2714                           fsr1l	equ	0xFE1
  2715                           indf2	equ	0xFDF
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           plusw2	equ	0xFDB
  2719                           fsr2h	equ	0xFDA
  2720                           fsr2l	equ	0xFD9
  2721                           status	equ	0xFD8
  2722                           
  2723 ;; *************** function _fullSpeedBack *****************
  2724 ;; Defined at:
  2725 ;;		line 138 in file "dc_motor.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2728 ;;		 -> main@mL(9), 
  2729 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2730 ;;		 -> main@mR(9), 
  2731 ;;  power           1   11[BANK0 ] unsigned char 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;		None               void
  2736 ;; Registers used:
  2737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2743 ;;      Params:         0       5       0       0
  2744 ;;      Locals:         0       0       0       0
  2745 ;;      Temps:          0       0       0       0
  2746 ;;      Totals:         0       5       0       0
  2747 ;;Total ram usage:        5 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    6
  2750 ;; This function calls:
  2751 ;;		_fullSpeed
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text6
  2758  001A88                     __ptext6:
  2759                           	opt stack 0
  2760  001A88                     _fullSpeedBack:
  2761                           	opt stack 24
  2762                           
  2763                           ;dc_motor.c: 141: mL->direction=0;
  2764                           
  2765                           ;incstack = 0
  2766  001A88  0100               	movlb	0	; () banked
  2767  001A8A  EE20 F001          	lfsr	2,1
  2768  001A8E  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2769  001A90  26D9               	addwf	fsr2l,f,c
  2770  001A92  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2771  001A94  22DA               	addwfc	fsr2h,f,c
  2772  001A96  0E00               	movlw	0
  2773  001A98  6EDF               	movwf	indf2,c
  2774                           
  2775                           ;dc_motor.c: 142: mR->direction=0;
  2776  001A9A  0100               	movlb	0	; () banked
  2777  001A9C  EE20 F001          	lfsr	2,1
  2778  001AA0  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2779  001AA2  26D9               	addwf	fsr2l,f,c
  2780  001AA4  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2781  001AA6  22DA               	addwfc	fsr2h,f,c
  2782  001AA8  0E00               	movlw	0
  2783  001AAA  6EDF               	movwf	indf2,c
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2787  001AAC  C067  F062         	movff	fullSpeedBack@mL,fullSpeed@mL
  2788  001AB0  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2789  001AB4  C069  F064         	movff	fullSpeedBack@mR,fullSpeed@mR
  2790  001AB8  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2791  001ABC  C06B  F066         	movff	fullSpeedBack@power,fullSpeed@power
  2792  001AC0  ECED  F00B         	call	_fullSpeed	;wreg free
  2793  001AC4  0012               	return		;funcret
  2794  001AC6                     __end_of_fullSpeedBack:
  2795                           	opt stack 0
  2796                           tblptru	equ	0xFF8
  2797                           prodh	equ	0xFF4
  2798                           prodl	equ	0xFF3
  2799                           intcon	equ	0xFF2
  2800                           postinc0	equ	0xFEE
  2801                           wreg	equ	0xFE8
  2802                           indf1	equ	0xFE7
  2803                           plusw1	equ	0xFE3
  2804                           fsr1h	equ	0xFE2
  2805                           fsr1l	equ	0xFE1
  2806                           indf2	equ	0xFDF
  2807                           postinc2	equ	0xFDE
  2808                           postdec2	equ	0xFDD
  2809                           plusw2	equ	0xFDB
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _enableSensor *****************
  2815 ;; Defined at:
  2816 ;;		line 106 in file "IR_Reading.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  sensor          1    wreg     unsigned char 
  2819 ;;  status          1   35[COMRAM] unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  sensor          1   36[COMRAM] unsigned char 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;		None               void
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2831 ;;      Params:         1       0       0       0
  2832 ;;      Locals:         1       0       0       0
  2833 ;;      Temps:          0       0       0       0
  2834 ;;      Totals:         2       0       0       0
  2835 ;;Total ram usage:        2 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    3
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text7
  2846  001C82                     __ptext7:
  2847                           	opt stack 0
  2848  001C82                     _enableSensor:
  2849                           	opt stack 27
  2850                           
  2851                           ;incstack = 0
  2852                           ;enableSensor@sensor stored from wreg
  2853  001C82  6E25               	movwf	enableSensor@sensor,c
  2854                           
  2855                           ;IR_Reading.c: 108: if (sensor==0){
  2856  001C84  5025               	movf	enableSensor@sensor,w,c
  2857  001C86  A4D8               	btfss	status,2,c
  2858  001C88  D006               	goto	l2414
  2859                           
  2860                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2861  001C8A  B024               	btfsc	enableSensor@status,0,c
  2862  001C8C  D002               	bra	u1845
  2863  001C8E  908D               	bcf	3981,0,c	;volatile
  2864  001C90  D001               	bra	u1846
  2865  001C92                     u1845:
  2866  001C92  808D               	bsf	3981,0,c	;volatile
  2867  001C94                     u1846:
  2868                           
  2869                           ;IR_Reading.c: 110: } else if (sensor==1){
  2870  001C94  0012               	return	
  2871  001C96                     l2414:
  2872  001C96  0425               	decf	enableSensor@sensor,w,c
  2873  001C98  A4D8               	btfss	status,2,c
  2874  001C9A  0012               	return	
  2875                           
  2876                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2877  001C9C  B024               	btfsc	enableSensor@status,0,c
  2878  001C9E  D002               	bra	u1865
  2879  001CA0  928D               	bcf	3981,1,c	;volatile
  2880  001CA2  D001               	bra	u1866
  2881  001CA4                     u1865:
  2882  001CA4  828D               	bsf	3981,1,c	;volatile
  2883  001CA6                     u1866:
  2884  001CA6  0012               	return	
  2885  001CA8                     __end_of_enableSensor:
  2886                           	opt stack 0
  2887                           tblptru	equ	0xFF8
  2888                           prodh	equ	0xFF4
  2889                           prodl	equ	0xFF3
  2890                           intcon	equ	0xFF2
  2891                           postinc0	equ	0xFEE
  2892                           wreg	equ	0xFE8
  2893                           indf1	equ	0xFE7
  2894                           plusw1	equ	0xFE3
  2895                           fsr1h	equ	0xFE2
  2896                           fsr1l	equ	0xFE1
  2897                           indf2	equ	0xFDF
  2898                           postinc2	equ	0xFDE
  2899                           postdec2	equ	0xFDD
  2900                           plusw2	equ	0xFDB
  2901                           fsr2h	equ	0xFDA
  2902                           fsr2l	equ	0xFD9
  2903                           status	equ	0xFD8
  2904                           
  2905 ;; *************** function _VerifySignal *****************
  2906 ;; Defined at:
  2907 ;;		line 58 in file "RFID_Reader.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2910 ;;		 -> ReceivedString(16), 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  ptr             3    0        PTR unsigned char 
  2913 ;;  hexByte         2   43[COMRAM] unsigned int 
  2914 ;;  checksum        1   42[COMRAM] unsigned char 
  2915 ;;  i               1   41[COMRAM] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      unsigned char 
  2918 ;; Registers used:
  2919 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2925 ;;      Params:         2       0       0       0
  2926 ;;      Locals:         4       0       0       0
  2927 ;;      Temps:          4       0       0       0
  2928 ;;      Totals:        10       0       0       0
  2929 ;;Total ram usage:       10 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    3
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text8
  2940  00199C                     __ptext8:
  2941                           	opt stack 0
  2942  00199C                     _VerifySignal:
  2943                           	opt stack 27
  2944                           
  2945                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2946                           
  2947                           ;incstack = 0
  2948  00199C  0E00               	movlw	0
  2949  00199E  6E2B               	movwf	VerifySignal@checksum,c
  2950                           
  2951                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2952  0019A0  0E00               	movlw	0
  2953  0019A2  6E2D               	movwf	VerifySignal@hexByte+1,c
  2954  0019A4  0E00               	movlw	0
  2955  0019A6  6E2C               	movwf	VerifySignal@hexByte,c
  2956                           
  2957                           ;RFID_Reader.c: 61: unsigned char i=0;
  2958  0019A8  0E00               	movlw	0
  2959  0019AA  6E2A               	movwf	VerifySignal@i,c
  2960                           
  2961                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2962                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2963  0019AC  EE20 F004          	lfsr	2,4
  2964  0019B0  5024               	movf	VerifySignal@Signal,w,c
  2965  0019B2  26D9               	addwf	fsr2l,f,c
  2966  0019B4  5025               	movf	VerifySignal@Signal+1,w,c
  2967  0019B6  22DA               	addwfc	fsr2h,f,c
  2968  0019B8  50DF               	movf	indf2,w,c
  2969  0019BA  6E26               	movwf	??_VerifySignal& (0+255),c
  2970  0019BC  EE20 F003          	lfsr	2,3
  2971  0019C0  5024               	movf	VerifySignal@Signal,w,c
  2972  0019C2  26D9               	addwf	fsr2l,f,c
  2973  0019C4  5025               	movf	VerifySignal@Signal+1,w,c
  2974  0019C6  22DA               	addwfc	fsr2h,f,c
  2975  0019C8  50DF               	movf	indf2,w,c
  2976  0019CA  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2977  0019CC  5027               	movf	??_VerifySignal+1,w,c
  2978  0019CE  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2979  0019D0  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2980  0019D2  5026               	movf	??_VerifySignal,w,c
  2981  0019D4  2428               	addwf	??_VerifySignal+2,w,c
  2982  0019D6  6E2C               	movwf	VerifySignal@hexByte,c
  2983  0019D8  0E00               	movlw	0
  2984  0019DA  2029               	addwfc	??_VerifySignal+3,w,c
  2985  0019DC  6E2D               	movwf	VerifySignal@hexByte+1,c
  2986                           
  2987                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2988  0019DE  EE20 F002          	lfsr	2,2
  2989  0019E2  5024               	movf	VerifySignal@Signal,w,c
  2990  0019E4  26D9               	addwf	fsr2l,f,c
  2991  0019E6  5025               	movf	VerifySignal@Signal+1,w,c
  2992  0019E8  22DA               	addwfc	fsr2h,f,c
  2993  0019EA  50DF               	movf	indf2,w,c
  2994  0019EC  182C               	xorwf	VerifySignal@hexByte,w,c
  2995  0019EE  6E2B               	movwf	VerifySignal@checksum,c
  2996                           
  2997                           ;RFID_Reader.c: 75: return 1;
  2998  0019F0  0E01               	movlw	1
  2999  0019F2  0012               	return	
  3000  0019F4                     __end_of_VerifySignal:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           prodh	equ	0xFF4
  3004                           prodl	equ	0xFF3
  3005                           intcon	equ	0xFF2
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           indf1	equ	0xFE7
  3009                           plusw1	equ	0xFE3
  3010                           fsr1h	equ	0xFE2
  3011                           fsr1l	equ	0xFE1
  3012                           indf2	equ	0xFDF
  3013                           postinc2	equ	0xFDE
  3014                           postdec2	equ	0xFDD
  3015                           plusw2	equ	0xFDB
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _ScanWithRange *****************
  3021 ;; Defined at:
  3022 ;;		line 98 in file "Movement.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3025 ;;		 -> main@mL(9), 
  3026 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3027 ;;		 -> main@mR(9), 
  3028 ;;  loops           2   17[BANK0 ] int 
  3029 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3030 ;;		 -> main@MoveTime(100), 
  3031 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  3032 ;;		 -> main@Move(1), 
  3033 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  3034 ;;		 -> main@MoveType(50), 
  3035 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  3036 ;;		 -> RFID_Read(1), 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  buf            40   32[BANK0 ] unsigned char [40]
  3039 ;;  SensorResult    4   84[BANK0 ] unsigned int [2]
  3040 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  3041 ;;  LeftFlag        2   81[BANK0 ] unsigned int 
  3042 ;;  DirectionFou    2   78[BANK0 ] const unsigned int 
  3043 ;;  i               2   76[BANK0 ] unsigned int 
  3044 ;;  n               2   72[BANK0 ] unsigned int 
  3045 ;;  TimeAboveThr    1   83[BANK0 ] unsigned char 
  3046 ;;  MotorPower      1   80[BANK0 ] const unsigned char 
  3047 ;;  MiniLeftFlic    1   75[BANK0 ] const unsigned char 
  3048 ;;  LeftFlick       1   74[BANK0 ] const char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      unsigned char 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3058 ;;      Params:         0      14       0       0
  3059 ;;      Locals:         0      58       0       0
  3060 ;;      Temps:          0       5       0       0
  3061 ;;      Totals:         0      77       0       0
  3062 ;;Total ram usage:       77 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    7
  3065 ;; This function calls:
  3066 ;;		_LCD_String
  3067 ;;		_SendLCD
  3068 ;;		_SetLine
  3069 ;;		_delay_tenth_s
  3070 ;;		_grabLeftIR
  3071 ;;		_grabRightIR
  3072 ;;		_sprintf
  3073 ;;		_stop
  3074 ;;		_turnLeft
  3075 ;;		_turnRight
  3076 ;; This function is called by:
  3077 ;;		_main
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text9
  3082  000B20                     __ptext9:
  3083                           	opt stack 0
  3084  000B20                     _ScanWithRange:
  3085                           	opt stack 23
  3086                           
  3087                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3088                           
  3089                           ;incstack = 0
  3090  000B20  C0F5  F0B4         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3091  000B24  C0F6  F0B5         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3092  000B28  C0F7  F0B6         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3093  000B2C  C0F8  F0B7         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3094                           
  3095                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3096  000B30  0E00               	movlw	0
  3097  000B32  0100               	movlb	0	; () banked
  3098  000B34  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3099  000B36  0E00               	movlw	0
  3100  000B38  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3101                           
  3102                           ;Movement.c: 104: unsigned int RightFlag=0;
  3103  000B3A  0E00               	movlw	0
  3104  000B3C  0100               	movlb	0	; () banked
  3105  000B3E  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3106  000B40  0E00               	movlw	0
  3107  000B42  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3108                           
  3109                           ;Movement.c: 105: char buf[40];
  3110                           ;Movement.c: 106: unsigned int i=0;
  3111  000B44  0E00               	movlw	0
  3112  000B46  0100               	movlb	0	; () banked
  3113  000B48  6FAD               	movwf	(ScanWithRange@i+1)& (0+255),b
  3114  000B4A  0E00               	movlw	0
  3115  000B4C  6FAC               	movwf	ScanWithRange@i& (0+255),b
  3116                           
  3117                           ;Movement.c: 107: unsigned int n=0;
  3118  000B4E  0E00               	movlw	0
  3119  000B50  0100               	movlb	0	; () banked
  3120  000B52  6FA9               	movwf	(ScanWithRange@n+1)& (0+255),b
  3121  000B54  0E00               	movlw	0
  3122  000B56  6FA8               	movwf	ScanWithRange@n& (0+255),b
  3123                           
  3124                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  3125  000B58  0E00               	movlw	0
  3126  000B5A  0100               	movlb	0	; () banked
  3127  000B5C  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3128                           
  3129                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3130  000B5E  0E03               	movlw	3
  3131  000B60  0100               	movlb	0	; () banked
  3132  000B62  6FAF               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3133  000B64  0EE8               	movlw	232
  3134  000B66  6FAE               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3135                           
  3136                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3137  000B68  0E28               	movlw	40
  3138  000B6A  0100               	movlb	0	; () banked
  3139  000B6C  6FB0               	movwf	ScanWithRange@MotorPower& (0+255),b
  3140                           
  3141                           ;Movement.c: 114: const signed char LeftFlick=2;
  3142  000B6E  0E02               	movlw	2
  3143  000B70  0100               	movlb	0	; () banked
  3144  000B72  6FAA               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3145                           
  3146                           ;Movement.c: 118: const unsigned char MiniLeftFlick=1;
  3147  000B74  0E01               	movlw	1
  3148  000B76  0100               	movlb	0	; () banked
  3149  000B78  6FAB               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;Movement.c: 132: turnRight(mL,mR, MotorPower);
  3153  000B7A  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3154  000B7E  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3155  000B82  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3156  000B86  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3157  000B8A  C0B0  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3158  000B8E  EC63  F00D         	call	_turnRight	;wreg free
  3159                           
  3160                           ;Movement.c: 135: TMR0L = 0;
  3161  000B92  0E00               	movlw	0
  3162  000B94  6ED6               	movwf	4054,c	;volatile
  3163                           
  3164                           ;Movement.c: 136: TMR0H = 0;
  3165  000B96  0E00               	movlw	0
  3166  000B98  6ED7               	movwf	4055,c	;volatile
  3167                           
  3168                           ;Movement.c: 137: T0CONbits.TMR0ON=1;
  3169  000B9A  8ED5               	bsf	4053,7,c	;volatile
  3170                           
  3171                           ;Movement.c: 139: for (i=1; i<=loops; i++) {
  3172  000B9C  0E00               	movlw	0
  3173  000B9E  0100               	movlb	0	; () banked
  3174  000BA0  6FAD               	movwf	(ScanWithRange@i+1)& (0+255),b
  3175  000BA2  0E01               	movlw	1
  3176  000BA4  6FAC               	movwf	ScanWithRange@i& (0+255),b
  3177  000BA6  D18C               	goto	l3274
  3178  000BA8                     l3198:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;Movement.c: 142: SensorResult[0]=grabLeftIR();
  3182  000BA8  EC66  F00C         	call	_grabLeftIR	;wreg free
  3183  000BAC  C024  F0B4         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3184  000BB0  C025  F0B5         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3185                           
  3186                           ;Movement.c: 143: SensorResult[1]=grabRightIR();
  3187  000BB4  EC2D  F00C         	call	_grabRightIR	;wreg free
  3188  000BB8  C024  F0B6         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3189  000BBC  C025  F0B7         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3190                           
  3191                           ;Movement.c: 147: CAP1BUFH=0;
  3192  000BC0  0E00               	movlw	0
  3193  000BC2  6E69               	movwf	3945,c	;volatile
  3194                           
  3195                           ;Movement.c: 148: CAP1BUFL=0;
  3196  000BC4  0E00               	movlw	0
  3197  000BC6  6E68               	movwf	3944,c	;volatile
  3198                           
  3199                           ;Movement.c: 149: CAP2BUFH=0;
  3200  000BC8  0E00               	movlw	0
  3201  000BCA  6E67               	movwf	3943,c	;volatile
  3202                           
  3203                           ;Movement.c: 150: CAP2BUFL=0;
  3204  000BCC  0E00               	movlw	0
  3205  000BCE  6E66               	movwf	3942,c	;volatile
  3206                           
  3207                           ;Movement.c: 154: SendLCD(0b00000001,0);
  3208  000BD0  0E00               	movlw	0
  3209  000BD2  6E28               	movwf	SendLCD@type,c
  3210  000BD4  0E01               	movlw	1
  3211  000BD6  EC29  F00E         	call	_SendLCD
  3212                           
  3213                           ;Movement.c: 155: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3214  000BDA  0E21               	movlw	33
  3215  000BDC                     u3187:
  3216  000BDC  2EE8               	decfsz	wreg,f,c
  3217  000BDE  D7FE               	goto	u3187
  3218  000BE0  F000               	nop	
  3219                           
  3220                           ;Movement.c: 156: SendLCD(0b00000010,0);
  3221  000BE2  0E00               	movlw	0
  3222  000BE4  6E28               	movwf	SendLCD@type,c
  3223  000BE6  0E02               	movlw	2
  3224  000BE8  EC29  F00E         	call	_SendLCD
  3225                           
  3226                           ;Movement.c: 157: _delay((unsigned long)((2)*(8000000/4000.0)));
  3227  000BEC  0E06               	movlw	6
  3228  000BEE  0100               	movlb	0	; () banked
  3229  000BF0  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3230  000BF2  0E30               	movlw	48
  3231  000BF4                     u3197:
  3232  000BF4  2EE8               	decfsz	wreg,f,c
  3233  000BF6  D7FE               	goto	u3197
  3234  000BF8  2F7B               	decfsz	??_ScanWithRange& (0+255),f,b
  3235  000BFA  D7FC               	goto	u3197
  3236  000BFC  D000               	nop2	
  3237                           
  3238                           ;Movement.c: 158: SetLine(1);
  3239  000BFE  0E01               	movlw	1
  3240  000C00  EC11  F00E         	call	_SetLine
  3241                           
  3242                           ;Movement.c: 159: LCD_String("     ScanIR");
  3243  000C04  0E2D               	movlw	low STR_1
  3244  000C06  6E2A               	movwf	LCD_String@string,c
  3245  000C08  0E03               	movlw	high STR_1
  3246  000C0A  6E2B               	movwf	LCD_String@string+1,c
  3247  000C0C  EC9F  F00C         	call	_LCD_String	;wreg free
  3248                           
  3249                           ;Movement.c: 160: SetLine(2);
  3250  000C10  0E02               	movlw	2
  3251  000C12  EC11  F00E         	call	_SetLine
  3252                           
  3253                           ;Movement.c: 161: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3254  000C16  0E80               	movlw	low ScanWithRange@buf
  3255  000C18  6E30               	movwf	sprintf@sp,c
  3256  000C1A  0E00               	movlw	high ScanWithRange@buf
  3257  000C1C  6E31               	movwf	sprintf@sp+1,c
  3258  000C1E  0E0C               	movlw	low (STR_6+1)
  3259  000C20  6E32               	movwf	sprintf@f,c
  3260  000C22  0E03               	movlw	high (STR_6+1)
  3261  000C24  6E33               	movwf	sprintf@f+1,c
  3262  000C26  C0B4  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3263  000C2A  C0B5  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3264  000C2E  C0B6  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3265  000C32  C0B7  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3266  000C36  ECBE  F007         	call	_sprintf	;wreg free
  3267                           
  3268                           ;Movement.c: 162: LCD_String(buf);
  3269  000C3A  0E80               	movlw	low ScanWithRange@buf
  3270  000C3C  6E2A               	movwf	LCD_String@string,c
  3271  000C3E  0E00               	movlw	high ScanWithRange@buf
  3272  000C40  6E2B               	movwf	LCD_String@string+1,c
  3273  000C42  EC9F  F00C         	call	_LCD_String	;wreg free
  3274                           
  3275                           ;Movement.c: 166: if (SensorResult[1]>DirectionFoundThreshold) {
  3276  000C46  0100               	movlb	0	; () banked
  3277  000C48  51B6               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3278  000C4A  0100               	movlb	0	; () banked
  3279  000C4C  5DAE               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3280  000C4E  0100               	movlb	0	; () banked
  3281  000C50  51B7               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3282  000C52  0100               	movlb	0	; () banked
  3283  000C54  59AF               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3284  000C56  B0D8               	btfsc	status,0,c
  3285  000C58  D00E               	goto	l226
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;Movement.c: 167: RightFlag= (TMR0H<<8)+TMR0L;
  3289  000C5A  50D7               	movf	4055,w,c	;volatile
  3290  000C5C  0100               	movlb	0	; () banked
  3291  000C5E  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3292  000C60  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3293  000C62  50D6               	movf	4054,w,c	;volatile
  3294  000C64  0100               	movlb	0	; () banked
  3295  000C66  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3296  000C68  0100               	movlb	0	; () banked
  3297  000C6A  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3298  000C6C  0E00               	movlw	0
  3299  000C6E  0100               	movlb	0	; () banked
  3300  000C70  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3301  000C72  0100               	movlb	0	; () banked
  3302  000C74  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3303  000C76                     l226:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;Movement.c: 168: }
  3307                           ;Movement.c: 170: if (SensorResult[0]>DirectionFoundThreshold) {
  3308  000C76  0100               	movlb	0	; () banked
  3309  000C78  51B4               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3310  000C7A  0100               	movlb	0	; () banked
  3311  000C7C  5DAE               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3312  000C7E  0100               	movlb	0	; () banked
  3313  000C80  51B5               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3314  000C82  0100               	movlb	0	; () banked
  3315  000C84  59AF               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3316  000C86  B0D8               	btfsc	status,0,c
  3317  000C88  D00E               	goto	l227
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;Movement.c: 171: LeftFlag=(TMR0H<<8)+TMR0L;
  3321  000C8A  50D7               	movf	4055,w,c	;volatile
  3322  000C8C  0100               	movlb	0	; () banked
  3323  000C8E  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3324  000C90  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3325  000C92  50D6               	movf	4054,w,c	;volatile
  3326  000C94  0100               	movlb	0	; () banked
  3327  000C96  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3328  000C98  0100               	movlb	0	; () banked
  3329  000C9A  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3330  000C9C  0E00               	movlw	0
  3331  000C9E  0100               	movlb	0	; () banked
  3332  000CA0  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3333  000CA2  0100               	movlb	0	; () banked
  3334  000CA4  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3335  000CA6                     l227:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;Movement.c: 172: }
  3339                           ;Movement.c: 179: if (LeftFlag>0) {
  3340  000CA6  0100               	movlb	0	; () banked
  3341  000CA8  51B1               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3342  000CAA  0100               	movlb	0	; () banked
  3343  000CAC  11B2               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3344  000CAE  B4D8               	btfsc	status,2,c
  3345  000CB0  D0FB               	goto	l3266
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;Movement.c: 182: if (RightFlag>0) {
  3349  000CB2  0100               	movlb	0	; () banked
  3350  000CB4  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3351  000CB6  0100               	movlb	0	; () banked
  3352  000CB8  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3353  000CBA  B4D8               	btfsc	status,2,c
  3354  000CBC  D09F               	goto	l229
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;Movement.c: 183: TimeAboveThreshold = LeftFlag - RightFlag;
  3358  000CBE  0100               	movlb	0	; () banked
  3359  000CC0  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3360  000CC2  0800               	sublw	0
  3361  000CC4  0100               	movlb	0	; () banked
  3362  000CC6  25B1               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3363  000CC8  0100               	movlb	0	; () banked
  3364  000CCA  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;Movement.c: 184: TMR0L = 0;
  3368  000CCC  0E00               	movlw	0
  3369  000CCE  6ED6               	movwf	4054,c	;volatile
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;Movement.c: 185: TMR0H = 0;
  3373  000CD0  0E00               	movlw	0
  3374  000CD2  6ED7               	movwf	4055,c	;volatile
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;Movement.c: 186: stop(mL,mR);
  3378  000CD4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3379  000CD8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3380  000CDC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3381  000CE0  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3382  000CE4  EC1C  F00B         	call	_stop	;wreg free
  3383                           
  3384                           ;Movement.c: 187: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3385  000CE8  D00C               	goto	l3240
  3386  000CEA                     l3238:
  3387                           
  3388                           ;Movement.c: 188: turnLeft(mL,mR, MotorPower);
  3389  000CEA  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3390  000CEE  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3391  000CF2  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3392  000CF6  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3393  000CFA  C0B0  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3394  000CFE  EC82  F00D         	call	_turnLeft	;wreg free
  3395  000D02                     l3240:
  3396  000D02  0100               	movlb	0	; () banked
  3397  000D04  90D8               	bcf	status,0,c
  3398  000D06  31B3               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3399  000D08  0100               	movlb	0	; () banked
  3400  000D0A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3401  000D0C  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3402  000D0E  50D6               	movf	4054,w,c	;volatile
  3403  000D10  CFD7 F07D          	movff	4055,??_ScanWithRange+2	;volatile
  3404  000D14  0100               	movlb	0	; () banked
  3405  000D16  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3406  000D18  C07D  F07E         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3407  000D1C  0100               	movlb	0	; () banked
  3408  000D1E  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3409  000D20  0100               	movlb	0	; () banked
  3410  000D22  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3411  000D24  0E00               	movlw	0
  3412  000D26  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3413  000D28  0100               	movlb	0	; () banked
  3414  000D2A  517B               	movf	??_ScanWithRange& (0+255),w,b
  3415  000D2C  0100               	movlb	0	; () banked
  3416  000D2E  5D7D               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3417  000D30  0100               	movlb	0	; () banked
  3418  000D32  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3419  000D34  0A80               	xorlw	128
  3420  000D36  0100               	movlb	0	; () banked
  3421  000D38  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3422  000D3A  0100               	movlb	0	; () banked
  3423  000D3C  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3424  000D3E  0A80               	xorlw	128
  3425  000D40  0100               	movlb	0	; () banked
  3426  000D42  597F               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3427  000D44  A0D8               	btfss	status,0,c
  3428  000D46  D7D1               	goto	l3238
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;Movement.c: 189: }
  3432                           ;Movement.c: 190: T0CONbits.TMR0ON=0;
  3433  000D48  9ED5               	bcf	4053,7,c	;volatile
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;Movement.c: 191: stop(mL,mR);
  3437  000D4A  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3438  000D4E  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3439  000D52  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3440  000D56  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3441  000D5A  EC1C  F00B         	call	_stop	;wreg free
  3442                           
  3443                           ;Movement.c: 193: (MoveType[*Move]) = 1;
  3444  000D5E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3445  000D62  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3446  000D66  50DF               	movf	indf2,w,c
  3447  000D68  0100               	movlb	0	; () banked
  3448  000D6A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3449  000D6C  0100               	movlb	0	; () banked
  3450  000D6E  517B               	movf	??_ScanWithRange& (0+255),w,b
  3451  000D70  0D01               	mullw	1
  3452  000D72  50F3               	movf	prodl,w,c
  3453  000D74  0100               	movlb	0	; () banked
  3454  000D76  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3455  000D78  6ED9               	movwf	fsr2l,c
  3456  000D7A  50F4               	movf	prodh,w,c
  3457  000D7C  0100               	movlb	0	; () banked
  3458  000D7E  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3459  000D80  6EDA               	movwf	fsr2h,c
  3460  000D82  0E01               	movlw	1
  3461  000D84  6EDF               	movwf	indf2,c
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;Movement.c: 194: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3465  000D86  C0B3  F07B         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3466  000D8A  0100               	movlb	0	; () banked
  3467  000D8C  90D8               	bcf	status,0,c
  3468  000D8E  337B               	rrcf	??_ScanWithRange& (0+255),f,b
  3469  000D90  0100               	movlb	0	; () banked
  3470  000D92  517B               	movf	??_ScanWithRange& (0+255),w,b
  3471  000D94  0100               	movlb	0	; () banked
  3472  000D96  25B8               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3473  000D98  0100               	movlb	0	; () banked
  3474  000D9A  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3475  000D9C  0E00               	movlw	0
  3476  000D9E  0100               	movlb	0	; () banked
  3477  000DA0  21B9               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3478  000DA2  0100               	movlb	0	; () banked
  3479  000DA4  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3480  000DA6  0100               	movlb	0	; () banked
  3481  000DA8  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3482  000DAA  1F7D               	comf	(??_ScanWithRange+2)& (0+255),f,b
  3483  000DAC  4B7C               	infsnz	(??_ScanWithRange+1)& (0+255),f,b
  3484  000DAE  2B7D               	incf	(??_ScanWithRange+2)& (0+255),f,b
  3485  000DB0  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3486  000DB4  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3487  000DB8  50DF               	movf	indf2,w,c
  3488  000DBA  0100               	movlb	0	; () banked
  3489  000DBC  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3490  000DBE  0100               	movlb	0	; () banked
  3491  000DC0  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3492  000DC2  0D02               	mullw	2
  3493  000DC4  50F3               	movf	prodl,w,c
  3494  000DC6  0100               	movlb	0	; () banked
  3495  000DC8  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3496  000DCA  6ED9               	movwf	fsr2l,c
  3497  000DCC  50F4               	movf	prodh,w,c
  3498  000DCE  0100               	movlb	0	; () banked
  3499  000DD0  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3500  000DD2  6EDA               	movwf	fsr2h,c
  3501  000DD4  C07C  FFDE         	movff	??_ScanWithRange+1,postinc2
  3502  000DD8  C07D  FFDD         	movff	??_ScanWithRange+2,postdec2
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;Movement.c: 195: *Move = *Move+1;
  3506  000DDC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3507  000DE0  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3508  000DE4  50DF               	movf	indf2,w,c
  3509  000DE6  0100               	movlb	0	; () banked
  3510  000DE8  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3511  000DEA  0100               	movlb	0	; () banked
  3512  000DEC  297B               	incf	??_ScanWithRange& (0+255),w,b
  3513  000DEE  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3514  000DF2  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3515  000DF6  6EDF               	movwf	indf2,c
  3516  000DF8                     l3250:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;Movement.c: 197: return 2;
  3520  000DF8  0E02               	movlw	2
  3521                           
  3522                           ; BSR set to: 0
  3523  000DFA  0012               	return	
  3524  000DFC                     l229:
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;Movement.c: 199: T0CONbits.TMR0ON=0;
  3528  000DFC  9ED5               	bcf	4053,7,c	;volatile
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;Movement.c: 203: (MoveType[*Move]) = 1;
  3532  000DFE  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3533  000E02  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3534  000E06  50DF               	movf	indf2,w,c
  3535  000E08  0100               	movlb	0	; () banked
  3536  000E0A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3537  000E0C  0100               	movlb	0	; () banked
  3538  000E0E  517B               	movf	??_ScanWithRange& (0+255),w,b
  3539  000E10  0D01               	mullw	1
  3540  000E12  50F3               	movf	prodl,w,c
  3541  000E14  0100               	movlb	0	; () banked
  3542  000E16  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3543  000E18  6ED9               	movwf	fsr2l,c
  3544  000E1A  50F4               	movf	prodh,w,c
  3545  000E1C  0100               	movlb	0	; () banked
  3546  000E1E  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3547  000E20  6EDA               	movwf	fsr2h,c
  3548  000E22  0E01               	movlw	1
  3549  000E24  6EDF               	movwf	indf2,c
  3550                           
  3551                           ;Movement.c: 204: (MoveTime[*Move]) = -((TMR0H<<8)+TMR0L);
  3552  000E26  50D6               	movf	4054,w,c	;volatile
  3553  000E28  CFD7 F07B          	movff	4055,??_ScanWithRange	;volatile
  3554  000E2C  0100               	movlb	0	; () banked
  3555  000E2E  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3556  000E30  C07B  F07C         	movff	??_ScanWithRange,??_ScanWithRange+1
  3557  000E34  0100               	movlb	0	; () banked
  3558  000E36  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3559  000E38  0100               	movlb	0	; () banked
  3560  000E3A  277B               	addwf	??_ScanWithRange& (0+255),f,b
  3561  000E3C  0E00               	movlw	0
  3562  000E3E  237C               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3563  000E40  0100               	movlb	0	; () banked
  3564  000E42  1F7B               	comf	??_ScanWithRange& (0+255),f,b
  3565  000E44  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3566  000E46  4B7B               	infsnz	??_ScanWithRange& (0+255),f,b
  3567  000E48  2B7C               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3568  000E4A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3569  000E4E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3570  000E52  50DF               	movf	indf2,w,c
  3571  000E54  0100               	movlb	0	; () banked
  3572  000E56  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3573  000E58  0100               	movlb	0	; () banked
  3574  000E5A  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3575  000E5C  0D02               	mullw	2
  3576  000E5E  50F3               	movf	prodl,w,c
  3577  000E60  0100               	movlb	0	; () banked
  3578  000E62  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3579  000E64  6ED9               	movwf	fsr2l,c
  3580  000E66  50F4               	movf	prodh,w,c
  3581  000E68  0100               	movlb	0	; () banked
  3582  000E6A  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3583  000E6C  6EDA               	movwf	fsr2h,c
  3584  000E6E  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3585  000E72  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;Movement.c: 205: *Move = *Move+1;
  3589  000E76  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3590  000E7A  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3591  000E7E  50DF               	movf	indf2,w,c
  3592  000E80  0100               	movlb	0	; () banked
  3593  000E82  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3594  000E84  0100               	movlb	0	; () banked
  3595  000E86  297B               	incf	??_ScanWithRange& (0+255),w,b
  3596  000E88  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3597  000E8C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3598  000E90  6EDF               	movwf	indf2,c
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;Movement.c: 206: stop(mL,mR);
  3602  000E92  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3603  000E96  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3604  000E9A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3605  000E9E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3606  000EA2  EC1C  F00B         	call	_stop	;wreg free
  3607  000EA6  D7A8               	goto	l3250
  3608  000EA8                     l3266:
  3609                           
  3610                           ;Movement.c: 218: }
  3611                           ;Movement.c: 219: }
  3612                           ;Movement.c: 221: if (*RFID_Read==1) {
  3613  000EA8  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3614  000EAC  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3615  000EB0  04DE               	decf	postinc2,w,c
  3616  000EB2  A4D8               	btfss	status,2,c
  3617  000EB4  D002               	goto	l3272
  3618                           
  3619                           ;Movement.c: 222: return 2;
  3620  000EB6  0E02               	movlw	2
  3621  000EB8  0012               	return	
  3622  000EBA                     l3272:
  3623  000EBA  0100               	movlb	0	; () banked
  3624  000EBC  4BAC               	infsnz	ScanWithRange@i& (0+255),f,b
  3625  000EBE  2BAD               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3626  000EC0                     l3274:
  3627                           
  3628                           ; BSR set to: 0
  3629  000EC0  0100               	movlb	0	; () banked
  3630  000EC2  51AC               	movf	ScanWithRange@i& (0+255),w,b
  3631  000EC4  0100               	movlb	0	; () banked
  3632  000EC6  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3633  000EC8  0100               	movlb	0	; () banked
  3634  000ECA  51AD               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3635  000ECC  0100               	movlb	0	; () banked
  3636  000ECE  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3637  000ED0  B0D8               	btfsc	status,0,c
  3638  000ED2  D66A               	goto	l3198
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;Movement.c: 223: }
  3642                           ;Movement.c: 224: }
  3643                           ;Movement.c: 227: (MoveType[*Move]) = 2;
  3644                           
  3645                           ; BSR set to: 0
  3646  000ED4  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3647  000ED8  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3648  000EDC  50DF               	movf	indf2,w,c
  3649  000EDE  0100               	movlb	0	; () banked
  3650  000EE0  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3651  000EE2  0100               	movlb	0	; () banked
  3652  000EE4  517B               	movf	??_ScanWithRange& (0+255),w,b
  3653  000EE6  0D01               	mullw	1
  3654  000EE8  50F3               	movf	prodl,w,c
  3655  000EEA  0100               	movlb	0	; () banked
  3656  000EEC  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3657  000EEE  6ED9               	movwf	fsr2l,c
  3658  000EF0  50F4               	movf	prodh,w,c
  3659  000EF2  0100               	movlb	0	; () banked
  3660  000EF4  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3661  000EF6  6EDA               	movwf	fsr2h,c
  3662  000EF8  0E02               	movlw	2
  3663  000EFA  6EDF               	movwf	indf2,c
  3664                           
  3665                           ;Movement.c: 228: (MoveTime[*Move]) = -2;
  3666  000EFC  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3667  000F00  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3668  000F04  50DF               	movf	indf2,w,c
  3669  000F06  0100               	movlb	0	; () banked
  3670  000F08  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3671  000F0A  0100               	movlb	0	; () banked
  3672  000F0C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3673  000F0E  0D02               	mullw	2
  3674  000F10  50F3               	movf	prodl,w,c
  3675  000F12  0100               	movlb	0	; () banked
  3676  000F14  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3677  000F16  6ED9               	movwf	fsr2l,c
  3678  000F18  50F4               	movf	prodh,w,c
  3679  000F1A  0100               	movlb	0	; () banked
  3680  000F1C  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3681  000F1E  6EDA               	movwf	fsr2h,c
  3682  000F20  0EFE               	movlw	254
  3683  000F22  6EDE               	movwf	postinc2,c
  3684  000F24  0EFF               	movlw	255
  3685  000F26  6EDD               	movwf	postdec2,c
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;Movement.c: 229: *Move = *Move+1;
  3689  000F28  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3690  000F2C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3691  000F30  50DF               	movf	indf2,w,c
  3692  000F32  0100               	movlb	0	; () banked
  3693  000F34  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3694  000F36  0100               	movlb	0	; () banked
  3695  000F38  297B               	incf	??_ScanWithRange& (0+255),w,b
  3696  000F3A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3697  000F3E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3698  000F42  6EDF               	movwf	indf2,c
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;Movement.c: 230: turnRight(mL,mR, 100);
  3702  000F44  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3703  000F48  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3704  000F4C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3705  000F50  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3706  000F54  0E64               	movlw	100
  3707  000F56  0100               	movlb	0	; () banked
  3708  000F58  6F6B               	movwf	turnRight@power& (0+255),b
  3709  000F5A  EC63  F00D         	call	_turnRight	;wreg free
  3710                           
  3711                           ;Movement.c: 231: delay_tenth_s(2);
  3712  000F5E  0E02               	movlw	2
  3713  000F60  ECBE  F00D         	call	_delay_tenth_s
  3714                           
  3715                           ;Movement.c: 232: stop(mL,mR);
  3716  000F64  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3717  000F68  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3718  000F6C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3719  000F70  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3720  000F74  EC1C  F00B         	call	_stop	;wreg free
  3721                           
  3722                           ;Movement.c: 233: return -1;
  3723  000F78  0EFF               	movlw	255
  3724  000F7A  0012               	return	
  3725  000F7C                     __end_of_ScanWithRange:
  3726                           	opt stack 0
  3727                           tblptru	equ	0xFF8
  3728                           prodh	equ	0xFF4
  3729                           prodl	equ	0xFF3
  3730                           intcon	equ	0xFF2
  3731                           postinc0	equ	0xFEE
  3732                           wreg	equ	0xFE8
  3733                           indf1	equ	0xFE7
  3734                           plusw1	equ	0xFE3
  3735                           fsr1h	equ	0xFE2
  3736                           fsr1l	equ	0xFE1
  3737                           indf2	equ	0xFDF
  3738                           postinc2	equ	0xFDE
  3739                           postdec2	equ	0xFDD
  3740                           plusw2	equ	0xFDB
  3741                           fsr2h	equ	0xFDA
  3742                           fsr2l	equ	0xFD9
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function _turnRight *****************
  3746 ;; Defined at:
  3747 ;;		line 103 in file "dc_motor.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3750 ;;		 -> main@mL(9), 
  3751 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3752 ;;		 -> main@mR(9), 
  3753 ;;  power           1   11[BANK0 ] unsigned char 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;		None               void
  3758 ;; Registers used:
  3759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3765 ;;      Params:         0       5       0       0
  3766 ;;      Locals:         0       0       0       0
  3767 ;;      Temps:          0       0       0       0
  3768 ;;      Totals:         0       5       0       0
  3769 ;;Total ram usage:        5 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    6
  3772 ;; This function calls:
  3773 ;;		_fullSpeed
  3774 ;; This function is called by:
  3775 ;;		_ScanWithRange
  3776 ;;		_main
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text10
  3781  001AC6                     __ptext10:
  3782                           	opt stack 0
  3783  001AC6                     _turnRight:
  3784                           	opt stack 24
  3785                           
  3786                           ;dc_motor.c: 107: mL->direction=0;
  3787                           
  3788                           ;incstack = 0
  3789  001AC6  0100               	movlb	0	; () banked
  3790  001AC8  EE20 F001          	lfsr	2,1
  3791  001ACC  5167               	movf	turnRight@mL& (0+255),w,b
  3792  001ACE  26D9               	addwf	fsr2l,f,c
  3793  001AD0  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3794  001AD2  22DA               	addwfc	fsr2h,f,c
  3795  001AD4  0E00               	movlw	0
  3796  001AD6  6EDF               	movwf	indf2,c
  3797                           
  3798                           ;dc_motor.c: 108: mR->direction=1;
  3799  001AD8  0100               	movlb	0	; () banked
  3800  001ADA  EE20 F001          	lfsr	2,1
  3801  001ADE  5169               	movf	turnRight@mR& (0+255),w,b
  3802  001AE0  26D9               	addwf	fsr2l,f,c
  3803  001AE2  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3804  001AE4  22DA               	addwfc	fsr2h,f,c
  3805  001AE6  0E01               	movlw	1
  3806  001AE8  6EDF               	movwf	indf2,c
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3810  001AEA  C067  F062         	movff	turnRight@mL,fullSpeed@mL
  3811  001AEE  C068  F063         	movff	turnRight@mL+1,fullSpeed@mL+1
  3812  001AF2  C069  F064         	movff	turnRight@mR,fullSpeed@mR
  3813  001AF6  C06A  F065         	movff	turnRight@mR+1,fullSpeed@mR+1
  3814  001AFA  C06B  F066         	movff	turnRight@power,fullSpeed@power
  3815  001AFE  ECED  F00B         	call	_fullSpeed	;wreg free
  3816  001B02  0012               	return		;funcret
  3817  001B04                     __end_of_turnRight:
  3818                           	opt stack 0
  3819                           tblptru	equ	0xFF8
  3820                           prodh	equ	0xFF4
  3821                           prodl	equ	0xFF3
  3822                           intcon	equ	0xFF2
  3823                           postinc0	equ	0xFEE
  3824                           wreg	equ	0xFE8
  3825                           indf1	equ	0xFE7
  3826                           plusw1	equ	0xFE3
  3827                           fsr1h	equ	0xFE2
  3828                           fsr1l	equ	0xFE1
  3829                           indf2	equ	0xFDF
  3830                           postinc2	equ	0xFDE
  3831                           postdec2	equ	0xFDD
  3832                           plusw2	equ	0xFDB
  3833                           fsr2h	equ	0xFDA
  3834                           fsr2l	equ	0xFD9
  3835                           status	equ	0xFD8
  3836                           
  3837 ;; *************** function _turnLeft *****************
  3838 ;; Defined at:
  3839 ;;		line 92 in file "dc_motor.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3842 ;;		 -> main@mL(9), 
  3843 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3844 ;;		 -> main@mR(9), 
  3845 ;;  power           1   11[BANK0 ] unsigned char 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;		None
  3848 ;; Return value:  Size  Location     Type
  3849 ;;		None               void
  3850 ;; Registers used:
  3851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3857 ;;      Params:         0       5       0       0
  3858 ;;      Locals:         0       0       0       0
  3859 ;;      Temps:          0       0       0       0
  3860 ;;      Totals:         0       5       0       0
  3861 ;;Total ram usage:        5 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    6
  3864 ;; This function calls:
  3865 ;;		_fullSpeed
  3866 ;; This function is called by:
  3867 ;;		_ScanWithRange
  3868 ;;		_main
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text11
  3873  001B04                     __ptext11:
  3874                           	opt stack 0
  3875  001B04                     _turnLeft:
  3876                           	opt stack 24
  3877                           
  3878                           ;dc_motor.c: 96: mL->direction=1;
  3879                           
  3880                           ;incstack = 0
  3881  001B04  0100               	movlb	0	; () banked
  3882  001B06  EE20 F001          	lfsr	2,1
  3883  001B0A  5167               	movf	turnLeft@mL& (0+255),w,b
  3884  001B0C  26D9               	addwf	fsr2l,f,c
  3885  001B0E  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3886  001B10  22DA               	addwfc	fsr2h,f,c
  3887  001B12  0E01               	movlw	1
  3888  001B14  6EDF               	movwf	indf2,c
  3889                           
  3890                           ;dc_motor.c: 97: mR->direction=0;
  3891  001B16  0100               	movlb	0	; () banked
  3892  001B18  EE20 F001          	lfsr	2,1
  3893  001B1C  5169               	movf	turnLeft@mR& (0+255),w,b
  3894  001B1E  26D9               	addwf	fsr2l,f,c
  3895  001B20  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3896  001B22  22DA               	addwfc	fsr2h,f,c
  3897  001B24  0E00               	movlw	0
  3898  001B26  6EDF               	movwf	indf2,c
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  3902  001B28  C067  F062         	movff	turnLeft@mL,fullSpeed@mL
  3903  001B2C  C068  F063         	movff	turnLeft@mL+1,fullSpeed@mL+1
  3904  001B30  C069  F064         	movff	turnLeft@mR,fullSpeed@mR
  3905  001B34  C06A  F065         	movff	turnLeft@mR+1,fullSpeed@mR+1
  3906  001B38  C06B  F066         	movff	turnLeft@power,fullSpeed@power
  3907  001B3C  ECED  F00B         	call	_fullSpeed	;wreg free
  3908  001B40  0012               	return		;funcret
  3909  001B42                     __end_of_turnLeft:
  3910                           	opt stack 0
  3911                           tblptru	equ	0xFF8
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           intcon	equ	0xFF2
  3915                           postinc0	equ	0xFEE
  3916                           wreg	equ	0xFE8
  3917                           indf1	equ	0xFE7
  3918                           plusw1	equ	0xFE3
  3919                           fsr1h	equ	0xFE2
  3920                           fsr1l	equ	0xFE1
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           plusw2	equ	0xFDB
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _fullSpeed *****************
  3930 ;; Defined at:
  3931 ;;		line 113 in file "dc_motor.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3934 ;;		 -> main@mL(9), 
  3935 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3936 ;;		 -> main@mR(9), 
  3937 ;;  power           1    6[BANK0 ] unsigned char 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;		None               void
  3942 ;; Registers used:
  3943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3949 ;;      Params:         0       5       0       0
  3950 ;;      Locals:         0       0       0       0
  3951 ;;      Temps:          1       0       0       0
  3952 ;;      Totals:         1       5       0       0
  3953 ;;Total ram usage:        6 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    5
  3956 ;; This function calls:
  3957 ;;		_setMotorPWM
  3958 ;; This function is called by:
  3959 ;;		_turnLeft
  3960 ;;		_turnRight
  3961 ;;		_fullSpeedBack
  3962 ;;		_main
  3963 ;;		_fullSpeedForward
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text12
  3968  0017DA                     __ptext12:
  3969                           	opt stack 0
  3970  0017DA                     _fullSpeed:
  3971                           	opt stack 24
  3972                           
  3973                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  3974                           
  3975                           ;incstack = 0
  3976  0017DA  D02C               	goto	l67
  3977  0017DC                     l2978:
  3978                           
  3979                           ;dc_motor.c: 117: if(mL->power<power){
  3980  0017DC  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  3981  0017E0  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  3982  0017E4  0100               	movlb	0	; () banked
  3983  0017E6  5166               	movf	fullSpeed@power& (0+255),w,b
  3984  0017E8  5CDE               	subwf	postinc2,w,c
  3985  0017EA  B0D8               	btfsc	status,0,c
  3986  0017EC  D005               	goto	l2982
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;dc_motor.c: 118: mL->power++;
  3990  0017EE  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  3991  0017F2  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  3992  0017F6  2ADF               	incf	indf2,f,c
  3993  0017F8                     l2982:
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;dc_motor.c: 119: }
  3997                           ;dc_motor.c: 120: if(mR->power<power){
  3998  0017F8  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  3999  0017FC  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4000  001800  0100               	movlb	0	; () banked
  4001  001802  5166               	movf	fullSpeed@power& (0+255),w,b
  4002  001804  5CDE               	subwf	postinc2,w,c
  4003  001806  B0D8               	btfsc	status,0,c
  4004  001808  D005               	goto	l2986
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;dc_motor.c: 121: mR->power++;
  4008  00180A  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4009  00180E  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4010  001812  2ADF               	incf	indf2,f,c
  4011  001814                     l2986:
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;dc_motor.c: 122: }
  4015                           ;dc_motor.c: 123: setMotorPWM(mL);
  4016  001814  C062  F032         	movff	fullSpeed@mL,setMotorPWM@m
  4017  001818  C063  F033         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4018  00181C  EC41  F009         	call	_setMotorPWM	;wreg free
  4019                           
  4020                           ;dc_motor.c: 124: setMotorPWM(mR);
  4021  001820  C064  F032         	movff	fullSpeed@mR,setMotorPWM@m
  4022  001824  C065  F033         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4023  001828  EC41  F009         	call	_setMotorPWM	;wreg free
  4024                           
  4025                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4026  00182C  0E21               	movlw	33
  4027  00182E                     u3207:
  4028  00182E  2EE8               	decfsz	wreg,f,c
  4029  001830  D7FE               	goto	u3207
  4030  001832  F000               	nop	
  4031  001834                     l67:
  4032  001834  C062  FFD9         	movff	fullSpeed@mL,fsr2l
  4033  001838  C063  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4034  00183C  0100               	movlb	0	; () banked
  4035  00183E  5166               	movf	fullSpeed@power& (0+255),w,b
  4036  001840  5CDE               	subwf	postinc2,w,c
  4037  001842  A0D8               	btfss	status,0,c
  4038  001844  D7CB               	goto	l2978
  4039                           
  4040                           ; BSR set to: 0
  4041  001846  C064  FFD9         	movff	fullSpeed@mR,fsr2l
  4042  00184A  C065  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4043  00184E  0100               	movlb	0	; () banked
  4044  001850  5166               	movf	fullSpeed@power& (0+255),w,b
  4045  001852  5CDE               	subwf	postinc2,w,c
  4046  001854  B0D8               	btfsc	status,0,c
  4047  001856  0012               	return	
  4048  001858  D7C1               	goto	l2978
  4049  00185A                     __end_of_fullSpeed:
  4050                           	opt stack 0
  4051                           tblptru	equ	0xFF8
  4052                           prodh	equ	0xFF4
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           postinc0	equ	0xFEE
  4056                           wreg	equ	0xFE8
  4057                           indf1	equ	0xFE7
  4058                           plusw1	equ	0xFE3
  4059                           fsr1h	equ	0xFE2
  4060                           fsr1l	equ	0xFE1
  4061                           indf2	equ	0xFDF
  4062                           postinc2	equ	0xFDE
  4063                           postdec2	equ	0xFDD
  4064                           plusw2	equ	0xFDB
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069 ;; *************** function _delay_tenth_s *****************
  4070 ;; Defined at:
  4071 ;;		line 32 in file "Movement.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;  tenth_second    1    wreg     unsigned char 
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4076 ;;  i               2   37[COMRAM] unsigned int 
  4077 ;; Return value:  Size  Location     Type
  4078 ;;		None               void
  4079 ;; Registers used:
  4080 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4086 ;;      Params:         0       0       0       0
  4087 ;;      Locals:         3       0       0       0
  4088 ;;      Temps:          1       0       0       0
  4089 ;;      Totals:         4       0       0       0
  4090 ;;Total ram usage:        4 bytes
  4091 ;; Hardware stack levels used:    1
  4092 ;; Hardware stack levels required when called:    3
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		_ScanWithRange
  4097 ;;		_main
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           	psect	text13
  4102  001B7C                     __ptext13:
  4103                           	opt stack 0
  4104  001B7C                     _delay_tenth_s:
  4105                           	opt stack 27
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;incstack = 0
  4109                           ;delay_tenth_s@tenth_seconds stored from wreg
  4110  001B7C  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4111                           
  4112                           ;Movement.c: 33: unsigned int i=0;
  4113  001B7E  0E00               	movlw	0
  4114  001B80  6E27               	movwf	delay_tenth_s@i+1,c
  4115  001B82  0E00               	movlw	0
  4116  001B84  6E26               	movwf	delay_tenth_s@i,c
  4117                           
  4118                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4119  001B86  0E00               	movlw	0
  4120  001B88  6E27               	movwf	delay_tenth_s@i+1,c
  4121  001B8A  0E01               	movlw	1
  4122  001B8C  6E26               	movwf	delay_tenth_s@i,c
  4123  001B8E  D009               	goto	l2264
  4124  001B90                     l2260:
  4125                           
  4126                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4127  001B90  0E82               	movlw	130
  4128  001B92  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4129  001B94  0EDE               	movlw	222
  4130  001B96                     u3217:
  4131  001B96  2EE8               	decfsz	wreg,f,c
  4132  001B98  D7FE               	goto	u3217
  4133  001B9A  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4134  001B9C  D7FC               	goto	u3217
  4135  001B9E  4A26               	infsnz	delay_tenth_s@i,f,c
  4136  001BA0  2A27               	incf	delay_tenth_s@i+1,f,c
  4137  001BA2                     l2264:
  4138  001BA2  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4139  001BA4  0D02               	mullw	2
  4140  001BA6  5026               	movf	delay_tenth_s@i,w,c
  4141  001BA8  5CF3               	subwf	prodl,w,c
  4142  001BAA  5027               	movf	delay_tenth_s@i+1,w,c
  4143  001BAC  58F4               	subwfb	prodh,w,c
  4144  001BAE  A0D8               	btfss	status,0,c
  4145  001BB0  0012               	return	
  4146  001BB2  D7EE               	goto	l2260
  4147  001BB4                     __end_of_delay_tenth_s:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           intcon	equ	0xFF2
  4153                           postinc0	equ	0xFEE
  4154                           wreg	equ	0xFE8
  4155                           indf1	equ	0xFE7
  4156                           plusw1	equ	0xFE3
  4157                           fsr1h	equ	0xFE2
  4158                           fsr1l	equ	0xFE1
  4159                           indf2	equ	0xFDF
  4160                           postinc2	equ	0xFDE
  4161                           postdec2	equ	0xFDD
  4162                           plusw2	equ	0xFDB
  4163                           fsr2h	equ	0xFDA
  4164                           fsr2l	equ	0xFD9
  4165                           status	equ	0xFD8
  4166                           
  4167 ;; *************** function _ScanIR *****************
  4168 ;; Defined at:
  4169 ;;		line 44 in file "Movement.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4172 ;;		 -> main@mL(9), 
  4173 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4174 ;;		 -> main@mR(9), 
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4177 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4178 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      unsigned char 
  4181 ;; Registers used:
  4182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4188 ;;      Params:         0       4       0       0
  4189 ;;      Locals:         0      46       0       0
  4190 ;;      Temps:          1       0       0       0
  4191 ;;      Totals:         1      50       0       0
  4192 ;;Total ram usage:       51 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    7
  4195 ;; This function calls:
  4196 ;;		_LCD_String
  4197 ;;		_SendLCD
  4198 ;;		_SetLine
  4199 ;;		_grabLeftIR
  4200 ;;		_grabRightIR
  4201 ;;		_sprintf
  4202 ;;		_stop
  4203 ;; This function is called by:
  4204 ;;		_main
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           	psect	text14
  4209  0013BC                     __ptext14:
  4210                           	opt stack 0
  4211  0013BC                     _ScanIR:
  4212                           	opt stack 23
  4213                           
  4214                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4215                           
  4216                           ;incstack = 0
  4217  0013BC  C0F1  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4218  0013C0  C0F2  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4219  0013C4  C0F3  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4220  0013C8  C0F4  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4221                           
  4222                           ;Movement.c: 48: char buf[40];
  4223                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4224  0013CC  0E03               	movlw	3
  4225  0013CE  0100               	movlb	0	; () banked
  4226  0013D0  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4227  0013D2  0EE8               	movlw	232
  4228  0013D4  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4232  0013D6  EC66  F00C         	call	_grabLeftIR	;wreg free
  4233  0013DA  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4234  0013DE  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4235                           
  4236                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4237  0013E2  EC2D  F00C         	call	_grabRightIR	;wreg free
  4238  0013E6  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4239  0013EA  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4240                           
  4241                           ;Movement.c: 60: CAP1BUFH=0;
  4242  0013EE  0E00               	movlw	0
  4243  0013F0  6E69               	movwf	3945,c	;volatile
  4244                           
  4245                           ;Movement.c: 61: CAP1BUFL=0;
  4246  0013F2  0E00               	movlw	0
  4247  0013F4  6E68               	movwf	3944,c	;volatile
  4248                           
  4249                           ;Movement.c: 62: CAP2BUFH=0;
  4250  0013F6  0E00               	movlw	0
  4251  0013F8  6E67               	movwf	3943,c	;volatile
  4252                           
  4253                           ;Movement.c: 63: CAP2BUFL=0;
  4254  0013FA  0E00               	movlw	0
  4255  0013FC  6E66               	movwf	3942,c	;volatile
  4256                           
  4257                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4258  0013FE  0E00               	movlw	0
  4259  001400  6E28               	movwf	SendLCD@type,c
  4260  001402  0E01               	movlw	1
  4261  001404  EC29  F00E         	call	_SendLCD
  4262                           
  4263                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4264  001408  0E21               	movlw	33
  4265  00140A                     u3227:
  4266  00140A  2EE8               	decfsz	wreg,f,c
  4267  00140C  D7FE               	goto	u3227
  4268  00140E  F000               	nop	
  4269                           
  4270                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4271  001410  0E00               	movlw	0
  4272  001412  6E28               	movwf	SendLCD@type,c
  4273  001414  0E02               	movlw	2
  4274  001416  EC29  F00E         	call	_SendLCD
  4275                           
  4276                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4277  00141A  0E06               	movlw	6
  4278  00141C  6E39               	movwf	??_ScanIR& (0+255),c
  4279  00141E  0E30               	movlw	48
  4280  001420                     u3237:
  4281  001420  2EE8               	decfsz	wreg,f,c
  4282  001422  D7FE               	goto	u3237
  4283  001424  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4284  001426  D7FC               	goto	u3237
  4285  001428  D000               	nop2	
  4286                           
  4287                           ;Movement.c: 70: SetLine(1);
  4288  00142A  0E01               	movlw	1
  4289  00142C  EC11  F00E         	call	_SetLine
  4290                           
  4291                           ;Movement.c: 71: LCD_String("     ScanIR");
  4292  001430  0E2D               	movlw	low STR_1
  4293  001432  6E2A               	movwf	LCD_String@string,c
  4294  001434  0E03               	movlw	high STR_1
  4295  001436  6E2B               	movwf	LCD_String@string+1,c
  4296  001438  EC9F  F00C         	call	_LCD_String	;wreg free
  4297                           
  4298                           ;Movement.c: 72: SetLine(2);
  4299  00143C  0E02               	movlw	2
  4300  00143E  EC11  F00E         	call	_SetLine
  4301                           
  4302                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4303  001442  0E71               	movlw	low ScanIR@buf
  4304  001444  6E30               	movwf	sprintf@sp,c
  4305  001446  0E00               	movlw	high ScanIR@buf
  4306  001448  6E31               	movwf	sprintf@sp+1,c
  4307  00144A  0E0C               	movlw	low (STR_6+1)
  4308  00144C  6E32               	movwf	sprintf@f,c
  4309  00144E  0E03               	movlw	high (STR_6+1)
  4310  001450  6E33               	movwf	sprintf@f+1,c
  4311  001452  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4312  001456  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4313  00145A  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4314  00145E  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4315  001462  ECBE  F007         	call	_sprintf	;wreg free
  4316                           
  4317                           ;Movement.c: 74: LCD_String(buf);
  4318  001466  0E71               	movlw	low ScanIR@buf
  4319  001468  6E2A               	movwf	LCD_String@string,c
  4320  00146A  0E00               	movlw	high ScanIR@buf
  4321  00146C  6E2B               	movwf	LCD_String@string+1,c
  4322  00146E  EC9F  F00C         	call	_LCD_String	;wreg free
  4323                           
  4324                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4325                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4326  001472  0100               	movlb	0	; () banked
  4327  001474  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4328  001476  0100               	movlb	0	; () banked
  4329  001478  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4330  00147A  0100               	movlb	0	; () banked
  4331  00147C  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4332  00147E  0100               	movlb	0	; () banked
  4333  001480  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4334  001482  B0D8               	btfsc	status,0,c
  4335  001484  D00C               	goto	l3178
  4336                           
  4337                           ; BSR set to: 0
  4338  001486  0100               	movlb	0	; () banked
  4339  001488  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4340  00148A  0100               	movlb	0	; () banked
  4341  00148C  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4342  00148E  0100               	movlb	0	; () banked
  4343  001490  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4344  001492  0100               	movlb	0	; () banked
  4345  001494  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4346  001496  B0D8               	btfsc	status,0,c
  4347  001498  D002               	goto	l3178
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;Movement.c: 80: return 2;
  4351  00149A  0E02               	movlw	2
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;Movement.c: 81: } else {
  4355                           
  4356                           ; BSR set to: 0
  4357  00149C  0012               	return	
  4358  00149E                     l3178:
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;Movement.c: 82: stop(mL,mR);
  4362  00149E  C06D  F062         	movff	ScanIR@mL,stop@mL
  4363  0014A2  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4364  0014A6  C06F  F064         	movff	ScanIR@mR,stop@mR
  4365  0014AA  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4366  0014AE  EC1C  F00B         	call	_stop	;wreg free
  4367                           
  4368                           ;Movement.c: 83: return 0;
  4369  0014B2  0E00               	movlw	0
  4370  0014B4  0012               	return	
  4371  0014B6                     __end_of_ScanIR:
  4372                           	opt stack 0
  4373                           tblptru	equ	0xFF8
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           intcon	equ	0xFF2
  4377                           postinc0	equ	0xFEE
  4378                           wreg	equ	0xFE8
  4379                           indf1	equ	0xFE7
  4380                           plusw1	equ	0xFE3
  4381                           fsr1h	equ	0xFE2
  4382                           fsr1l	equ	0xFE1
  4383                           indf2	equ	0xFDF
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           plusw2	equ	0xFDB
  4387                           fsr2h	equ	0xFDA
  4388                           fsr2l	equ	0xFD9
  4389                           status	equ	0xFD8
  4390                           
  4391 ;; *************** function _stop *****************
  4392 ;; Defined at:
  4393 ;;		line 72 in file "dc_motor.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4396 ;;		 -> main@mL(9), 
  4397 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4398 ;;		 -> main@mR(9), 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;		None
  4401 ;; Return value:  Size  Location     Type
  4402 ;;		None               void
  4403 ;; Registers used:
  4404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4410 ;;      Params:         0       4       0       0
  4411 ;;      Locals:         0       0       0       0
  4412 ;;      Temps:          0       0       0       0
  4413 ;;      Totals:         0       4       0       0
  4414 ;;Total ram usage:        4 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    5
  4417 ;; This function calls:
  4418 ;;		_setMotorPWM
  4419 ;; This function is called by:
  4420 ;;		_ScanIR
  4421 ;;		_ScanWithRange
  4422 ;;		_main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text15
  4427  001638                     __ptext15:
  4428                           	opt stack 0
  4429  001638                     _stop:
  4430                           	opt stack 25
  4431                           
  4432                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4433                           
  4434                           ;incstack = 0
  4435  001638  D028               	goto	l3010
  4436  00163A                     l2996:
  4437                           
  4438                           ;dc_motor.c: 76: if(mL->power>0){
  4439  00163A  C062  FFD9         	movff	stop@mL,fsr2l
  4440  00163E  C063  FFDA         	movff	stop@mL+1,fsr2h
  4441  001642  50DF               	movf	indf2,w,c
  4442  001644  B4D8               	btfsc	status,2,c
  4443  001646  D005               	goto	l3000
  4444                           
  4445                           ;dc_motor.c: 77: mL->power--;
  4446  001648  C062  FFD9         	movff	stop@mL,fsr2l
  4447  00164C  C063  FFDA         	movff	stop@mL+1,fsr2h
  4448  001650  06DF               	decf	indf2,f,c
  4449  001652                     l3000:
  4450                           
  4451                           ;dc_motor.c: 78: }
  4452                           ;dc_motor.c: 79: if(mR->power>0){
  4453  001652  C064  FFD9         	movff	stop@mR,fsr2l
  4454  001656  C065  FFDA         	movff	stop@mR+1,fsr2h
  4455  00165A  50DF               	movf	indf2,w,c
  4456  00165C  B4D8               	btfsc	status,2,c
  4457  00165E  D005               	goto	l3004
  4458                           
  4459                           ;dc_motor.c: 80: mR->power--;
  4460  001660  C064  FFD9         	movff	stop@mR,fsr2l
  4461  001664  C065  FFDA         	movff	stop@mR+1,fsr2h
  4462  001668  06DF               	decf	indf2,f,c
  4463  00166A                     l3004:
  4464                           
  4465                           ;dc_motor.c: 81: }
  4466                           ;dc_motor.c: 82: setMotorPWM(mL);
  4467  00166A  C062  F032         	movff	stop@mL,setMotorPWM@m
  4468  00166E  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4469  001672  EC41  F009         	call	_setMotorPWM	;wreg free
  4470                           
  4471                           ;dc_motor.c: 83: setMotorPWM(mR);
  4472  001676  C064  F032         	movff	stop@mR,setMotorPWM@m
  4473  00167A  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4474  00167E  EC41  F009         	call	_setMotorPWM	;wreg free
  4475                           
  4476                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4477  001682  0E21               	movlw	33
  4478  001684                     u3247:
  4479  001684  2EE8               	decfsz	wreg,f,c
  4480  001686  D7FE               	goto	u3247
  4481  001688  F000               	nop	
  4482  00168A                     l3010:
  4483  00168A  C062  FFD9         	movff	stop@mL,fsr2l
  4484  00168E  C063  FFDA         	movff	stop@mL+1,fsr2h
  4485  001692  50DF               	movf	indf2,w,c
  4486  001694  A4D8               	btfss	status,2,c
  4487  001696  D7D1               	goto	l2996
  4488  001698  C064  FFD9         	movff	stop@mR,fsr2l
  4489  00169C  C065  FFDA         	movff	stop@mR+1,fsr2h
  4490  0016A0  50DF               	movf	indf2,w,c
  4491  0016A2  A4D8               	btfss	status,2,c
  4492  0016A4  D7CA               	goto	l2996
  4493                           
  4494                           ;dc_motor.c: 85: }
  4495                           ;dc_motor.c: 86: mL->direction=1;
  4496  0016A6  0100               	movlb	0	; () banked
  4497  0016A8  EE20 F001          	lfsr	2,1
  4498  0016AC  5162               	movf	stop@mL& (0+255),w,b
  4499  0016AE  26D9               	addwf	fsr2l,f,c
  4500  0016B0  5163               	movf	(stop@mL+1)& (0+255),w,b
  4501  0016B2  22DA               	addwfc	fsr2h,f,c
  4502  0016B4  0E01               	movlw	1
  4503  0016B6  6EDF               	movwf	indf2,c
  4504                           
  4505                           ;dc_motor.c: 87: mR->direction=1;
  4506  0016B8  0100               	movlb	0	; () banked
  4507  0016BA  EE20 F001          	lfsr	2,1
  4508  0016BE  5164               	movf	stop@mR& (0+255),w,b
  4509  0016C0  26D9               	addwf	fsr2l,f,c
  4510  0016C2  5165               	movf	(stop@mR+1)& (0+255),w,b
  4511  0016C4  22DA               	addwfc	fsr2h,f,c
  4512  0016C6  0E01               	movlw	1
  4513  0016C8  6EDF               	movwf	indf2,c
  4514                           
  4515                           ; BSR set to: 0
  4516  0016CA  0012               	return		;funcret
  4517  0016CC                     __end_of_stop:
  4518                           	opt stack 0
  4519                           tblptru	equ	0xFF8
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon	equ	0xFF2
  4523                           postinc0	equ	0xFEE
  4524                           wreg	equ	0xFE8
  4525                           indf1	equ	0xFE7
  4526                           plusw1	equ	0xFE3
  4527                           fsr1h	equ	0xFE2
  4528                           fsr1l	equ	0xFE1
  4529                           indf2	equ	0xFDF
  4530                           postinc2	equ	0xFDE
  4531                           postdec2	equ	0xFDD
  4532                           plusw2	equ	0xFDB
  4533                           fsr2h	equ	0xFDA
  4534                           fsr2l	equ	0xFD9
  4535                           status	equ	0xFD8
  4536                           
  4537 ;; *************** function _setMotorPWM *****************
  4538 ;; Defined at:
  4539 ;;		line 31 in file "dc_motor.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4542 ;;		 -> main@mR(9), main@mL(9), 
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;  PWMduty         2    0[BANK0 ] int 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;		None               void
  4547 ;; Registers used:
  4548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4554 ;;      Params:         2       0       0       0
  4555 ;;      Locals:         0       2       0       0
  4556 ;;      Temps:          5       0       0       0
  4557 ;;      Totals:         7       2       0       0
  4558 ;;Total ram usage:        9 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    4
  4561 ;; This function calls:
  4562 ;;		___awdiv
  4563 ;;		___wmul
  4564 ;; This function is called by:
  4565 ;;		_stop
  4566 ;;		_fullSpeed
  4567 ;;		_setMotorFullSpeed
  4568 ;;		_stopMotor
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text16
  4573  001282                     __ptext16:
  4574                           	opt stack 0
  4575  001282                     _setMotorPWM:
  4576                           	opt stack 24
  4577                           
  4578                           ;dc_motor.c: 33: int PWMduty;
  4579                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;incstack = 0
  4583  001282  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4584  001286  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4585  00128A  50DF               	movf	indf2,w,c
  4586  00128C  6E34               	movwf	??_setMotorPWM& (0+255),c
  4587  00128E  5034               	movf	??_setMotorPWM,w,c
  4588  001290  6E24               	movwf	___wmul@multiplier,c
  4589  001292  6A25               	clrf	___wmul@multiplier+1,c
  4590  001294  EE20 F007          	lfsr	2,7
  4591  001298  5032               	movf	setMotorPWM@m,w,c
  4592  00129A  26D9               	addwf	fsr2l,f,c
  4593  00129C  5033               	movf	setMotorPWM@m+1,w,c
  4594  00129E  22DA               	addwfc	fsr2h,f,c
  4595  0012A0  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4596  0012A4  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4597  0012A8  EC54  F00E         	call	___wmul	;wreg free
  4598  0012AC  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4599  0012B0  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4600  0012B4  0E00               	movlw	0
  4601  0012B6  6E2D               	movwf	___awdiv@divisor+1,c
  4602  0012B8  0E64               	movlw	100
  4603  0012BA  6E2C               	movwf	___awdiv@divisor,c
  4604  0012BC  ECAB  F00B         	call	___awdiv	;wreg free
  4605  0012C0  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4606  0012C4  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4607                           
  4608                           ;dc_motor.c: 37: if (m->direction)
  4609  0012C8  EE20 F001          	lfsr	2,1
  4610  0012CC  5032               	movf	setMotorPWM@m,w,c
  4611  0012CE  26D9               	addwf	fsr2l,f,c
  4612  0012D0  5033               	movf	setMotorPWM@m+1,w,c
  4613  0012D2  22DA               	addwfc	fsr2h,f,c
  4614  0012D4  50DF               	movf	indf2,w,c
  4615  0012D6  B4D8               	btfsc	status,2,c
  4616  0012D8  D02E               	goto	l2974
  4617                           
  4618                           ;dc_motor.c: 38: {
  4619                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4620  0012DA  EE20 F006          	lfsr	2,6
  4621  0012DE  5032               	movf	setMotorPWM@m,w,c
  4622  0012E0  26D9               	addwf	fsr2l,f,c
  4623  0012E2  5033               	movf	setMotorPWM@m+1,w,c
  4624  0012E4  22DA               	addwfc	fsr2h,f,c
  4625  0012E6  50DF               	movf	indf2,w,c
  4626  0012E8  6E34               	movwf	??_setMotorPWM& (0+255),c
  4627  0012EA  0E01               	movlw	1
  4628  0012EC  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4629  0012EE  2A34               	incf	??_setMotorPWM,f,c
  4630  0012F0  D002               	goto	u2384
  4631  0012F2                     u2385:
  4632  0012F2  90D8               	bcf	status,0,c
  4633  0012F4  3635               	rlcf	??_setMotorPWM+1,f,c
  4634  0012F6                     u2384:
  4635  0012F6  2E34               	decfsz	??_setMotorPWM,f,c
  4636  0012F8  D7FC               	goto	u2385
  4637  0012FA  5035               	movf	??_setMotorPWM+1,w,c
  4638  0012FC  108A               	iorwf	3978,w,c	;volatile
  4639  0012FE  6E8A               	movwf	3978,c	;volatile
  4640                           
  4641                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4642  001300  EE20 F007          	lfsr	2,7
  4643  001304  5032               	movf	setMotorPWM@m,w,c
  4644  001306  26D9               	addwf	fsr2l,f,c
  4645  001308  5033               	movf	setMotorPWM@m+1,w,c
  4646  00130A  22DA               	addwfc	fsr2h,f,c
  4647  00130C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4648  001310  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4649  001314  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4650  001318  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4651  00131C  1E36               	comf	??_setMotorPWM+2,f,c
  4652  00131E  1E37               	comf	??_setMotorPWM+3,f,c
  4653  001320  4A36               	infsnz	??_setMotorPWM+2,f,c
  4654  001322  2A37               	incf	??_setMotorPWM+3,f,c
  4655  001324  5034               	movf	??_setMotorPWM,w,c
  4656  001326  2436               	addwf	??_setMotorPWM+2,w,c
  4657  001328  0100               	movlb	0	; () banked
  4658  00132A  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4659  00132C  5035               	movf	??_setMotorPWM+1,w,c
  4660  00132E  2037               	addwfc	??_setMotorPWM+3,w,c
  4661  001330  0100               	movlb	0	; () banked
  4662  001332  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4663                           
  4664                           ;dc_motor.c: 41: }
  4665  001334  D014               	goto	l37
  4666  001336                     l2974:
  4667                           
  4668                           ;dc_motor.c: 42: else
  4669                           ;dc_motor.c: 43: {
  4670                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4671  001336  EE20 F006          	lfsr	2,6
  4672  00133A  5032               	movf	setMotorPWM@m,w,c
  4673  00133C  26D9               	addwf	fsr2l,f,c
  4674  00133E  5033               	movf	setMotorPWM@m+1,w,c
  4675  001340  22DA               	addwfc	fsr2h,f,c
  4676  001342  50DF               	movf	indf2,w,c
  4677  001344  6E34               	movwf	??_setMotorPWM& (0+255),c
  4678  001346  0E01               	movlw	1
  4679  001348  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4680  00134A  2A34               	incf	??_setMotorPWM,f,c
  4681  00134C  D002               	goto	u2394
  4682  00134E                     u2395:
  4683  00134E  90D8               	bcf	status,0,c
  4684  001350  3635               	rlcf	??_setMotorPWM+1,f,c
  4685  001352                     u2394:
  4686  001352  2E34               	decfsz	??_setMotorPWM,f,c
  4687  001354  D7FC               	goto	u2395
  4688  001356  5035               	movf	??_setMotorPWM+1,w,c
  4689  001358  0AFF               	xorlw	255
  4690  00135A  148A               	andwf	3978,w,c	;volatile
  4691  00135C  6E8A               	movwf	3978,c	;volatile
  4692  00135E                     l37:
  4693                           
  4694                           ;dc_motor.c: 45: }
  4695                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4696  00135E  EE20 F002          	lfsr	2,2
  4697  001362  5032               	movf	setMotorPWM@m,w,c
  4698  001364  26D9               	addwf	fsr2l,f,c
  4699  001366  5033               	movf	setMotorPWM@m+1,w,c
  4700  001368  22DA               	addwfc	fsr2h,f,c
  4701  00136A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4702  00136E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4703  001372  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4704  001376  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4705  00137A  0100               	movlb	0	; () banked
  4706  00137C  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4707  00137E  46E8               	rlncf	wreg,f,c
  4708  001380  0BFC               	andlw	252
  4709  001382  6EDF               	movwf	indf2,c
  4710                           
  4711                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4712  001384  EE20 F004          	lfsr	2,4
  4713  001388  5032               	movf	setMotorPWM@m,w,c
  4714  00138A  26D9               	addwf	fsr2l,f,c
  4715  00138C  5033               	movf	setMotorPWM@m+1,w,c
  4716  00138E  22DA               	addwfc	fsr2h,f,c
  4717  001390  CFDE F034          	movff	postinc2,??_setMotorPWM
  4718  001394  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4719  001398  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4720  00139C  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4721  0013A0  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4722  0013A4  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4723  0013A8  0E06               	movlw	6
  4724  0013AA  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4725  0013AC                     u2405:
  4726  0013AC  3437               	rlcf	??_setMotorPWM+3,w,c
  4727  0013AE  3237               	rrcf	??_setMotorPWM+3,f,c
  4728  0013B0  3236               	rrcf	??_setMotorPWM+2,f,c
  4729  0013B2  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4730  0013B4  D7FB               	goto	u2405
  4731  0013B6  5036               	movf	??_setMotorPWM+2,w,c
  4732  0013B8  6EDF               	movwf	indf2,c
  4733                           
  4734                           ; BSR set to: 0
  4735  0013BA  0012               	return		;funcret
  4736  0013BC                     __end_of_setMotorPWM:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           intcon	equ	0xFF2
  4742                           postinc0	equ	0xFEE
  4743                           wreg	equ	0xFE8
  4744                           indf1	equ	0xFE7
  4745                           plusw1	equ	0xFE3
  4746                           fsr1h	equ	0xFE2
  4747                           fsr1l	equ	0xFE1
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           plusw2	equ	0xFDB
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function ___awdiv *****************
  4757 ;; Defined at:
  4758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  dividend        2   41[COMRAM] int 
  4761 ;;  divisor         2   43[COMRAM] int 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  quotient        2   47[COMRAM] int 
  4764 ;;  sign            1   46[COMRAM] unsigned char 
  4765 ;;  counter         1   45[COMRAM] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  2   41[COMRAM] int 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4775 ;;      Params:         4       0       0       0
  4776 ;;      Locals:         4       0       0       0
  4777 ;;      Temps:          0       0       0       0
  4778 ;;      Totals:         8       0       0       0
  4779 ;;Total ram usage:        8 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    3
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_setMotorPWM
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text17
  4790  001756                     __ptext17:
  4791                           	opt stack 0
  4792  001756                     ___awdiv:
  4793                           	opt stack 24
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;incstack = 0
  4797  001756  0E00               	movlw	0
  4798  001758  6E2F               	movwf	___awdiv@sign,c
  4799  00175A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4800  00175C  D006               	goto	l2932
  4801  00175E  6C2C               	negf	___awdiv@divisor,c
  4802  001760  1E2D               	comf	___awdiv@divisor+1,f,c
  4803  001762  B0D8               	btfsc	status,0,c
  4804  001764  2A2D               	incf	___awdiv@divisor+1,f,c
  4805  001766  0E01               	movlw	1
  4806  001768  6E2F               	movwf	___awdiv@sign,c
  4807  00176A                     l2932:
  4808  00176A  AE2B               	btfss	___awdiv@dividend+1,7,c
  4809  00176C  D006               	goto	l2938
  4810  00176E  6C2A               	negf	___awdiv@dividend,c
  4811  001770  1E2B               	comf	___awdiv@dividend+1,f,c
  4812  001772  B0D8               	btfsc	status,0,c
  4813  001774  2A2B               	incf	___awdiv@dividend+1,f,c
  4814  001776  0E01               	movlw	1
  4815  001778  1A2F               	xorwf	___awdiv@sign,f,c
  4816  00177A                     l2938:
  4817  00177A  0E00               	movlw	0
  4818  00177C  6E31               	movwf	___awdiv@quotient+1,c
  4819  00177E  0E00               	movlw	0
  4820  001780  6E30               	movwf	___awdiv@quotient,c
  4821  001782  502C               	movf	___awdiv@divisor,w,c
  4822  001784  102D               	iorwf	___awdiv@divisor+1,w,c
  4823  001786  B4D8               	btfsc	status,2,c
  4824  001788  D01C               	goto	l2960
  4825  00178A  0E01               	movlw	1
  4826  00178C  6E2E               	movwf	___awdiv@counter,c
  4827  00178E  D004               	goto	l2946
  4828  001790                     l2944:
  4829  001790  90D8               	bcf	status,0,c
  4830  001792  362C               	rlcf	___awdiv@divisor,f,c
  4831  001794  362D               	rlcf	___awdiv@divisor+1,f,c
  4832  001796  2A2E               	incf	___awdiv@counter,f,c
  4833  001798                     l2946:
  4834  001798  AE2D               	btfss	___awdiv@divisor+1,7,c
  4835  00179A  D7FA               	goto	l2944
  4836  00179C                     l2948:
  4837  00179C  90D8               	bcf	status,0,c
  4838  00179E  3630               	rlcf	___awdiv@quotient,f,c
  4839  0017A0  3631               	rlcf	___awdiv@quotient+1,f,c
  4840  0017A2  502C               	movf	___awdiv@divisor,w,c
  4841  0017A4  5C2A               	subwf	___awdiv@dividend,w,c
  4842  0017A6  502D               	movf	___awdiv@divisor+1,w,c
  4843  0017A8  582B               	subwfb	___awdiv@dividend+1,w,c
  4844  0017AA  A0D8               	btfss	status,0,c
  4845  0017AC  D005               	goto	l2956
  4846  0017AE  502C               	movf	___awdiv@divisor,w,c
  4847  0017B0  5E2A               	subwf	___awdiv@dividend,f,c
  4848  0017B2  502D               	movf	___awdiv@divisor+1,w,c
  4849  0017B4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4850  0017B6  8030               	bsf	___awdiv@quotient,0,c
  4851  0017B8                     l2956:
  4852  0017B8  90D8               	bcf	status,0,c
  4853  0017BA  322D               	rrcf	___awdiv@divisor+1,f,c
  4854  0017BC  322C               	rrcf	___awdiv@divisor,f,c
  4855  0017BE  2E2E               	decfsz	___awdiv@counter,f,c
  4856  0017C0  D7ED               	goto	l2948
  4857  0017C2                     l2960:
  4858  0017C2  502F               	movf	___awdiv@sign,w,c
  4859  0017C4  B4D8               	btfsc	status,2,c
  4860  0017C6  D004               	goto	l2964
  4861  0017C8  6C30               	negf	___awdiv@quotient,c
  4862  0017CA  1E31               	comf	___awdiv@quotient+1,f,c
  4863  0017CC  B0D8               	btfsc	status,0,c
  4864  0017CE  2A31               	incf	___awdiv@quotient+1,f,c
  4865  0017D0                     l2964:
  4866  0017D0  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4867  0017D4  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4868  0017D8  0012               	return	
  4869  0017DA                     __end_of___awdiv:
  4870                           	opt stack 0
  4871                           tblptru	equ	0xFF8
  4872                           prodh	equ	0xFF4
  4873                           prodl	equ	0xFF3
  4874                           intcon	equ	0xFF2
  4875                           postinc0	equ	0xFEE
  4876                           wreg	equ	0xFE8
  4877                           indf1	equ	0xFE7
  4878                           plusw1	equ	0xFE3
  4879                           fsr1h	equ	0xFE2
  4880                           fsr1l	equ	0xFE1
  4881                           indf2	equ	0xFDF
  4882                           postinc2	equ	0xFDE
  4883                           postdec2	equ	0xFDD
  4884                           plusw2	equ	0xFDB
  4885                           fsr2h	equ	0xFDA
  4886                           fsr2l	equ	0xFD9
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _sprintf *****************
  4890 ;; Defined at:
  4891 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4894 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4895 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4896 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;  tmpval          4    0        struct .
  4899 ;;  cp              3    0        PTR const unsigned char 
  4900 ;;  width           2   10[BANK0 ] int 
  4901 ;;  val             2    7[BANK0 ] unsigned int 
  4902 ;;  ap              2    4[BANK0 ] PTR void [1]
  4903 ;;		 -> ?_sprintf(2), 
  4904 ;;  len             2    0        unsigned int 
  4905 ;;  c               1   12[BANK0 ] char 
  4906 ;;  flag            1    9[BANK0 ] unsigned char 
  4907 ;;  prec            1    6[BANK0 ] char 
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  2   47[COMRAM] int 
  4910 ;; Registers used:
  4911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4917 ;;      Params:         8       0       0       0
  4918 ;;      Locals:         0       9       0       0
  4919 ;;      Temps:          0       4       0       0
  4920 ;;      Totals:         8      13       0       0
  4921 ;;Total ram usage:       21 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    4
  4924 ;; This function calls:
  4925 ;;		___lwdiv
  4926 ;;		___lwmod
  4927 ;;		___wmul
  4928 ;;		_isdigit
  4929 ;; This function is called by:
  4930 ;;		_ScanIR
  4931 ;;		_ScanWithRange
  4932 ;;		_main
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text18
  4937  000F7C                     __ptext18:
  4938                           	opt stack 0
  4939  000F7C                     _sprintf:
  4940                           	opt stack 26
  4941                           
  4942                           ;doprnt.c: 494: va_list ap;
  4943                           ;doprnt.c: 499: signed char c;
  4944                           ;doprnt.c: 501: int width;
  4945                           ;doprnt.c: 506: signed char prec;
  4946                           ;doprnt.c: 508: unsigned char flag;
  4947                           ;doprnt.c: 523: union {
  4948                           ;doprnt.c: 524: unsigned long vd;
  4949                           ;doprnt.c: 525: double integ;
  4950                           ;doprnt.c: 526: } tmpval;
  4951                           ;doprnt.c: 528: unsigned int val;
  4952                           ;doprnt.c: 529: unsigned len;
  4953                           ;doprnt.c: 530: const char * cp;
  4954                           ;doprnt.c: 533: *ap = __va_start();
  4955                           
  4956                           ;incstack = 0
  4957  000F7C  0E34               	movlw	low (?_sprintf+4)
  4958  000F7E  0100               	movlb	0	; () banked
  4959  000F80  6F64               	movwf	sprintf@ap& (0+255),b
  4960  000F82  0E00               	movlw	high (?_sprintf+4)
  4961  000F84  0100               	movlb	0	; () banked
  4962  000F86  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4963                           
  4964                           ;doprnt.c: 536: while(c = *f++) {
  4965  000F88  D168               	goto	l3132
  4966  000F8A                     l3026:
  4967                           
  4968                           ; BSR set to: 0
  4969                           ;doprnt.c: 538: if(c != '%')
  4970  000F8A  0E25               	movlw	37
  4971  000F8C  0100               	movlb	0	; () banked
  4972  000F8E  196C               	xorwf	sprintf@c& (0+255),w,b
  4973  000F90  B4D8               	btfsc	status,2,c
  4974  000F92  D009               	goto	l3032
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;doprnt.c: 540: {
  4978                           ;doprnt.c: 541: ((*sp++ = (c)));
  4979  000F94  C030  FFD9         	movff	sprintf@sp,fsr2l
  4980  000F98  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4981  000F9C  C06C  FFDF         	movff	sprintf@c,indf2
  4982                           
  4983                           ; BSR set to: 0
  4984  000FA0  4A30               	infsnz	sprintf@sp,f,c
  4985  000FA2  2A31               	incf	sprintf@sp+1,f,c
  4986                           
  4987                           ;doprnt.c: 542: continue;
  4988  000FA4  D15A               	goto	l3132
  4989  000FA6                     l3032:
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;doprnt.c: 543: }
  4993                           ;doprnt.c: 546: width = 0;
  4994  000FA6  0E00               	movlw	0
  4995  000FA8  0100               	movlb	0	; () banked
  4996  000FAA  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4997  000FAC  0E00               	movlw	0
  4998  000FAE  6F6A               	movwf	sprintf@width& (0+255),b
  4999                           
  5000                           ;doprnt.c: 548: flag = 0;
  5001  000FB0  0E00               	movlw	0
  5002  000FB2  0100               	movlb	0	; () banked
  5003  000FB4  6F69               	movwf	sprintf@flag& (0+255),b
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;doprnt.c: 551: switch(*f) {
  5007                           
  5008                           ;doprnt.c: 550: for(;;) {
  5009  000FB6  D004               	goto	l3038
  5010  000FB8                     l3034:
  5011                           
  5012                           ;doprnt.c: 580: flag |= 0x04;
  5013  000FB8  0100               	movlb	0	; () banked
  5014  000FBA  8569               	bsf	sprintf@flag& (0+255),2,b
  5015                           
  5016                           ;doprnt.c: 581: f++;
  5017  000FBC  4A32               	infsnz	sprintf@f,f,c
  5018  000FBE  2A33               	incf	sprintf@f+1,f,c
  5019  000FC0                     l3038:
  5020  000FC0  C032  FFF6         	movff	sprintf@f,tblptrl
  5021  000FC4  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5022  000FC8                     	if	0	;tblptru may be non-zero
  5023  000FC8                     	endif
  5024  000FC8                     	if	0	;tblptru may be non-zero
  5025  000FC8                     	endif
  5026  000FC8  0008               	tblrd		*
  5027  000FCA  50F5               	movf	tablat,w,c
  5028                           
  5029                           ; Switch size 1, requested type "space"
  5030                           ; Number of cases is 1, Range of values is 48 to 48
  5031                           ; switch strategies available:
  5032                           ; Name         Instructions Cycles
  5033                           ; simple_byte            4     3 (average)
  5034                           ;	Chosen strategy is simple_byte
  5035  000FCC  0A30               	xorlw	48	; case 48
  5036  000FCE  B4D8               	btfsc	status,2,c
  5037  000FD0  D7F3               	goto	l3034
  5038                           
  5039                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5040                           
  5041                           ;doprnt.c: 586: }
  5042                           
  5043                           ;doprnt.c: 585: break;
  5044  000FD2  C032  FFF6         	movff	sprintf@f,tblptrl
  5045  000FD6  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5046  000FDA                     	if	0	;tblptru may be non-zero
  5047  000FDA                     	endif
  5048  000FDA                     	if	0	;tblptru may be non-zero
  5049  000FDA                     	endif
  5050  000FDA  0008               	tblrd		*
  5051  000FDC  50F5               	movf	tablat,w,c
  5052  000FDE  EC78  F00E         	call	_isdigit
  5053  000FE2  A0D8               	btfss	status,0,c
  5054  000FE4  D03E               	goto	l3054
  5055                           
  5056                           ;doprnt.c: 598: width = 0;
  5057  000FE6  0E00               	movlw	0
  5058  000FE8  0100               	movlb	0	; () banked
  5059  000FEA  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5060  000FEC  0E00               	movlw	0
  5061  000FEE  6F6A               	movwf	sprintf@width& (0+255),b
  5062  000FF0                     l3044:
  5063                           
  5064                           ;doprnt.c: 600: width *= 10;
  5065  000FF0  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5066  000FF4  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5067  000FF8  0E00               	movlw	0
  5068  000FFA  6E27               	movwf	___wmul@multiplicand+1,c
  5069  000FFC  0E0A               	movlw	10
  5070  000FFE  6E26               	movwf	___wmul@multiplicand,c
  5071  001000  EC54  F00E         	call	___wmul	;wreg free
  5072  001004  C024  F06A         	movff	?___wmul,sprintf@width
  5073  001008  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5074                           
  5075                           ;doprnt.c: 601: width += *f++ - '0';
  5076  00100C  0ED0               	movlw	208
  5077  00100E  0100               	movlb	0	; () banked
  5078  001010  6F60               	movwf	??_sprintf& (0+255),b
  5079  001012  0EFF               	movlw	255
  5080  001014  0100               	movlb	0	; () banked
  5081  001016  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5082  001018  C032  FFF6         	movff	sprintf@f,tblptrl
  5083  00101C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5084  001020                     	if	0	;tblptru may be non-zero
  5085  001020                     	endif
  5086  001020                     	if	0	;tblptru may be non-zero
  5087  001020                     	endif
  5088  001020  0008               	tblrd		*
  5089  001022  50F5               	movf	tablat,w,c
  5090  001024  0100               	movlb	0	; () banked
  5091  001026  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5092  001028  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5093  00102A  0100               	movlb	0	; () banked
  5094  00102C  5160               	movf	??_sprintf& (0+255),w,b
  5095  00102E  0100               	movlb	0	; () banked
  5096  001030  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5097  001032  0100               	movlb	0	; () banked
  5098  001034  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5099  001036  0100               	movlb	0	; () banked
  5100  001038  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5101  00103A  0100               	movlb	0	; () banked
  5102  00103C  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5103  00103E  0100               	movlb	0	; () banked
  5104  001040  276A               	addwf	sprintf@width& (0+255),f,b
  5105  001042  0100               	movlb	0	; () banked
  5106  001044  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5107  001046  0100               	movlb	0	; () banked
  5108  001048  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5109                           
  5110                           ; BSR set to: 0
  5111  00104A  4A32               	infsnz	sprintf@f,f,c
  5112  00104C  2A33               	incf	sprintf@f+1,f,c
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5116  00104E  C032  FFF6         	movff	sprintf@f,tblptrl
  5117  001052  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5118  001056                     	if	0	;tblptru may be non-zero
  5119  001056                     	endif
  5120  001056                     	if	0	;tblptru may be non-zero
  5121  001056                     	endif
  5122  001056  0008               	tblrd		*
  5123  001058  50F5               	movf	tablat,w,c
  5124  00105A  EC78  F00E         	call	_isdigit
  5125  00105E  B0D8               	btfsc	status,0,c
  5126  001060  D7C7               	goto	l3044
  5127  001062                     l3054:
  5128  001062  C032  FFF6         	movff	sprintf@f,tblptrl
  5129  001066  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5130  00106A  4A32               	infsnz	sprintf@f,f,c
  5131  00106C  2A33               	incf	sprintf@f+1,f,c
  5132  00106E                     	if	0	;tblptru may be non-zero
  5133  00106E                     	endif
  5134  00106E                     	if	0	;tblptru may be non-zero
  5135  00106E                     	endif
  5136  00106E  0008               	tblrd		*
  5137  001070  CFF5 F06C          	movff	tablat,sprintf@c
  5138  001074  0100               	movlb	0	; () banked
  5139  001076  516C               	movf	sprintf@c& (0+255),w,b
  5140                           
  5141                           ; Switch size 1, requested type "space"
  5142                           ; Number of cases is 3, Range of values is 0 to 105
  5143                           ; switch strategies available:
  5144                           ; Name         Instructions Cycles
  5145                           ; simple_byte           10     6 (average)
  5146                           ;	Chosen strategy is simple_byte
  5147  001078  0A00               	xorlw	0	; case 0
  5148  00107A  B4D8               	btfsc	status,2,c
  5149  00107C  D0FB               	goto	l3134
  5150  00107E  0A64               	xorlw	100	; case 100
  5151  001080  B4D8               	btfsc	status,2,c
  5152  001082  D003               	goto	l3056
  5153  001084  0A0D               	xorlw	13	; case 105
  5154  001086  A4D8               	btfss	status,2,c
  5155  001088  D0E8               	goto	l3132
  5156  00108A                     l3056:
  5157                           
  5158                           ;doprnt.c: 1253: {
  5159                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5160  00108A  C064  FFD9         	movff	sprintf@ap,fsr2l
  5161  00108E  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5162  001092  CFDE F067          	movff	postinc2,sprintf@val
  5163  001096  CFDD F068          	movff	postdec2,sprintf@val+1
  5164  00109A  0E02               	movlw	2
  5165  00109C  0100               	movlb	0	; () banked
  5166  00109E  2764               	addwf	sprintf@ap& (0+255),f,b
  5167  0010A0  0E00               	movlw	0
  5168  0010A2  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;doprnt.c: 1261: if((int)val < 0) {
  5172  0010A4  0100               	movlb	0	; () banked
  5173  0010A6  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5174  0010A8  D008               	goto	l3066
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;doprnt.c: 1262: flag |= 0x03;
  5178  0010AA  0E03               	movlw	3
  5179  0010AC  0100               	movlb	0	; () banked
  5180  0010AE  1369               	iorwf	sprintf@flag& (0+255),f,b
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;doprnt.c: 1263: val = -val;
  5184  0010B0  0100               	movlb	0	; () banked
  5185  0010B2  6D67               	negf	sprintf@val& (0+255),b
  5186  0010B4  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5187  0010B6  B0D8               	btfsc	status,0,c
  5188  0010B8  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5189  0010BA                     l3066:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;doprnt.c: 1264: }
  5193                           ;doprnt.c: 1266: }
  5194                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5195  0010BA  0E01               	movlw	1
  5196  0010BC  0100               	movlb	0	; () banked
  5197  0010BE  6F6C               	movwf	sprintf@c& (0+255),b
  5198  0010C0                     l3068:
  5199                           
  5200                           ; BSR set to: 0
  5201  0010C0  0E05               	movlw	5
  5202  0010C2  0100               	movlb	0	; () banked
  5203  0010C4  196C               	xorwf	sprintf@c& (0+255),w,b
  5204  0010C6  B4D8               	btfsc	status,2,c
  5205  0010C8  D016               	goto	l3080
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;doprnt.c: 1306: if(val < dpowers[c])
  5209                           
  5210                           ; BSR set to: 0
  5211                           
  5212                           ; BSR set to: 0
  5213  0010CA  0100               	movlb	0	; () banked
  5214  0010CC  516C               	movf	sprintf@c& (0+255),w,b
  5215  0010CE  0D02               	mullw	2
  5216  0010D0  0E01               	movlw	low _dpowers
  5217  0010D2  24F3               	addwf	prodl,w,c
  5218  0010D4  6EF6               	movwf	tblptrl,c
  5219  0010D6  0E03               	movlw	high _dpowers
  5220  0010D8  20F4               	addwfc	prodh,w,c
  5221  0010DA  6EF7               	movwf	tblptrh,c
  5222  0010DC                     	if	0	;There are less than 3 active tblptr bytes
  5223  0010DC                     	endif
  5224  0010DC  0009               	tblrd		*+
  5225  0010DE  50F5               	movf	tablat,w,c
  5226  0010E0  0100               	movlb	0	; () banked
  5227  0010E2  5D67               	subwf	sprintf@val& (0+255),w,b
  5228  0010E4  0009               	tblrd		*+
  5229  0010E6  50F5               	movf	tablat,w,c
  5230  0010E8  0100               	movlb	0	; () banked
  5231  0010EA  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5232  0010EC  A0D8               	btfss	status,0,c
  5233  0010EE  D003               	goto	l3080
  5234                           
  5235                           ; BSR set to: 0
  5236                           
  5237                           ; BSR set to: 0
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;doprnt.c: 1307: break;
  5241  0010F0  0100               	movlb	0	; () banked
  5242  0010F2  2B6C               	incf	sprintf@c& (0+255),f,b
  5243  0010F4  D7E5               	goto	l3068
  5244  0010F6                     l3080:
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5248  0010F6  0100               	movlb	0	; () banked
  5249  0010F8  516A               	movf	sprintf@width& (0+255),w,b
  5250  0010FA  0100               	movlb	0	; () banked
  5251  0010FC  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5252  0010FE  B4D8               	btfsc	status,2,c
  5253  001100  D00B               	goto	l3086
  5254                           
  5255                           ; BSR set to: 0
  5256  001102  C069  F060         	movff	sprintf@flag,??_sprintf
  5257  001106  0E03               	movlw	3
  5258  001108  0100               	movlb	0	; () banked
  5259  00110A  1760               	andwf	??_sprintf& (0+255),f,b
  5260  00110C  B4D8               	btfsc	status,2,c
  5261  00110E  D004               	goto	l3086
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;doprnt.c: 1346: width--;
  5265  001110  0100               	movlb	0	; () banked
  5266  001112  076A               	decf	sprintf@width& (0+255),f,b
  5267  001114  A0D8               	btfss	status,0,c
  5268  001116  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5269  001118                     l3086:
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;doprnt.c: 1381: if(width > c)
  5273  001118  0E80               	movlw	128
  5274  00111A  0100               	movlb	0	; () banked
  5275  00111C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5276  00111E  0E7F               	movlw	127
  5277  001120  0100               	movlb	0	; () banked
  5278  001122  6F60               	movwf	??_sprintf& (0+255),b
  5279  001124  0100               	movlb	0	; () banked
  5280  001126  516A               	movf	sprintf@width& (0+255),w,b
  5281  001128  0100               	movlb	0	; () banked
  5282  00112A  5D6C               	subwf	sprintf@c& (0+255),w,b
  5283  00112C  0100               	movlb	0	; () banked
  5284  00112E  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5285  001130  0A80               	xorlw	128
  5286  001132  0100               	movlb	0	; () banked
  5287  001134  5960               	subwfb	??_sprintf& (0+255),w,b
  5288  001136  B0D8               	btfsc	status,0,c
  5289  001138  D00B               	goto	l3090
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;doprnt.c: 1382: width -= c;
  5293  00113A  0100               	movlb	0	; () banked
  5294  00113C  516C               	movf	sprintf@c& (0+255),w,b
  5295  00113E  0100               	movlb	0	; () banked
  5296  001140  5F6A               	subwf	sprintf@width& (0+255),f,b
  5297  001142  0E00               	movlw	0
  5298  001144  0100               	movlb	0	; () banked
  5299  001146  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5300  001148  0EFF               	movlw	255
  5301  00114A  0100               	movlb	0	; () banked
  5302  00114C  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5303  00114E  D005               	goto	l3092
  5304  001150                     l3090:
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;doprnt.c: 1383: else
  5308                           ;doprnt.c: 1384: width = 0;
  5309  001150  0E00               	movlw	0
  5310  001152  0100               	movlb	0	; () banked
  5311  001154  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5312  001156  0E00               	movlw	0
  5313  001158  6F6A               	movwf	sprintf@width& (0+255),b
  5314  00115A                     l3092:
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;doprnt.c: 1387: if(flag & 0x04) {
  5318  00115A  0100               	movlb	0	; () banked
  5319  00115C  A569               	btfss	sprintf@flag& (0+255),2,b
  5320  00115E  D022               	goto	l3108
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;doprnt.c: 1392: if(flag & 0x03)
  5324  001160  C069  F060         	movff	sprintf@flag,??_sprintf
  5325  001164  0E03               	movlw	3
  5326  001166  0100               	movlb	0	; () banked
  5327  001168  1760               	andwf	??_sprintf& (0+255),f,b
  5328  00116A  B4D8               	btfsc	status,2,c
  5329  00116C  D008               	goto	l3100
  5330                           
  5331                           ; BSR set to: 0
  5332                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5333  00116E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5334  001172  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5335  001176  0E2D               	movlw	45
  5336  001178  6EDF               	movwf	indf2,c
  5337                           
  5338                           ; BSR set to: 0
  5339  00117A  4A30               	infsnz	sprintf@sp,f,c
  5340  00117C  2A31               	incf	sprintf@sp+1,f,c
  5341  00117E                     l3100:
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;doprnt.c: 1415: if(width)
  5345  00117E  0100               	movlb	0	; () banked
  5346  001180  516A               	movf	sprintf@width& (0+255),w,b
  5347  001182  0100               	movlb	0	; () banked
  5348  001184  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5349  001186  B4D8               	btfsc	status,2,c
  5350  001188  D034               	goto	l3122
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5354                           
  5355                           ; BSR set to: 0
  5356                           
  5357                           ;doprnt.c: 1416: do
  5358  00118A  C030  FFD9         	movff	sprintf@sp,fsr2l
  5359  00118E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5360  001192  0E30               	movlw	48
  5361  001194  6EDF               	movwf	indf2,c
  5362                           
  5363                           ; BSR set to: 0
  5364  001196  4A30               	infsnz	sprintf@sp,f,c
  5365  001198  2A31               	incf	sprintf@sp+1,f,c
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;doprnt.c: 1418: while(--width);
  5369  00119A  0100               	movlb	0	; () banked
  5370  00119C  076A               	decf	sprintf@width& (0+255),f,b
  5371  00119E  A0D8               	btfss	status,0,c
  5372  0011A0  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5373  0011A2  D7ED               	goto	l3100
  5374  0011A4                     l3108:
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;doprnt.c: 1422: {
  5378                           ;doprnt.c: 1424: if(width
  5379                           ;doprnt.c: 1428: )
  5380  0011A4  0100               	movlb	0	; () banked
  5381  0011A6  516A               	movf	sprintf@width& (0+255),w,b
  5382  0011A8  0100               	movlb	0	; () banked
  5383  0011AA  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5384  0011AC  B4D8               	btfsc	status,2,c
  5385  0011AE  D012               	goto	l3116
  5386  0011B0                     l3110:
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5390  0011B0  C030  FFD9         	movff	sprintf@sp,fsr2l
  5391  0011B4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5392  0011B8  0E20               	movlw	32
  5393  0011BA  6EDF               	movwf	indf2,c
  5394                           
  5395                           ; BSR set to: 0
  5396  0011BC  4A30               	infsnz	sprintf@sp,f,c
  5397  0011BE  2A31               	incf	sprintf@sp+1,f,c
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;doprnt.c: 1431: while(--width);
  5401  0011C0  0100               	movlb	0	; () banked
  5402  0011C2  076A               	decf	sprintf@width& (0+255),f,b
  5403  0011C4  A0D8               	btfss	status,0,c
  5404  0011C6  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5405  0011C8  0100               	movlb	0	; () banked
  5406  0011CA  516A               	movf	sprintf@width& (0+255),w,b
  5407  0011CC  0100               	movlb	0	; () banked
  5408  0011CE  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5409  0011D0  A4D8               	btfss	status,2,c
  5410  0011D2  D7EE               	goto	l3110
  5411  0011D4                     l3116:
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;doprnt.c: 1438: if(flag & 0x03)
  5415  0011D4  C069  F060         	movff	sprintf@flag,??_sprintf
  5416  0011D8  0E03               	movlw	3
  5417  0011DA  0100               	movlb	0	; () banked
  5418  0011DC  1760               	andwf	??_sprintf& (0+255),f,b
  5419  0011DE  B4D8               	btfsc	status,2,c
  5420  0011E0  D008               	goto	l3122
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5424  0011E2  C030  FFD9         	movff	sprintf@sp,fsr2l
  5425  0011E6  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5426  0011EA  0E2D               	movlw	45
  5427  0011EC  6EDF               	movwf	indf2,c
  5428                           
  5429                           ; BSR set to: 0
  5430  0011EE  4A30               	infsnz	sprintf@sp,f,c
  5431  0011F0  2A31               	incf	sprintf@sp+1,f,c
  5432  0011F2                     l3122:
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;doprnt.c: 1469: }
  5436                           ;doprnt.c: 1472: prec = c;
  5437  0011F2  C06C  F066         	movff	sprintf@c,sprintf@prec
  5438                           
  5439                           ;doprnt.c: 1474: while(prec--) {
  5440  0011F6  D02B               	goto	l3130
  5441  0011F8                     l3124:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;doprnt.c: 1478: {
  5445                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5446  0011F8  0100               	movlb	0	; () banked
  5447  0011FA  5166               	movf	sprintf@prec& (0+255),w,b
  5448  0011FC  0D02               	mullw	2
  5449  0011FE  0E01               	movlw	low _dpowers
  5450  001200  24F3               	addwf	prodl,w,c
  5451  001202  6EF6               	movwf	tblptrl,c
  5452  001204  0E03               	movlw	high _dpowers
  5453  001206  20F4               	addwfc	prodh,w,c
  5454  001208  6EF7               	movwf	tblptrh,c
  5455  00120A                     	if	0	;There are less than 3 active tblptr bytes
  5456  00120A                     	endif
  5457  00120A  0009               	tblrd		*+
  5458  00120C  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5459  001210  000A               	tblrd		*-
  5460  001212  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5461  001216  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5462  00121A  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5463  00121E  ECFA  F00C         	call	___lwdiv	;wreg free
  5464  001222  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5465  001226  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5466  00122A  0E00               	movlw	0
  5467  00122C  6E2E               	movwf	___lwmod@divisor+1,c
  5468  00122E  0E0A               	movlw	10
  5469  001230  6E2D               	movwf	___lwmod@divisor,c
  5470  001232  EC23  F00D         	call	___lwmod	;wreg free
  5471  001236  502B               	movf	?___lwmod,w,c
  5472  001238  0F30               	addlw	48
  5473  00123A  0100               	movlb	0	; () banked
  5474  00123C  6F6C               	movwf	sprintf@c& (0+255),b
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;doprnt.c: 1523: }
  5478                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5479  00123E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5480  001242  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5481  001246  C06C  FFDF         	movff	sprintf@c,indf2
  5482                           
  5483                           ; BSR set to: 0
  5484  00124A  4A30               	infsnz	sprintf@sp,f,c
  5485  00124C  2A31               	incf	sprintf@sp+1,f,c
  5486  00124E                     l3130:
  5487                           
  5488                           ; BSR set to: 0
  5489  00124E  0100               	movlb	0	; () banked
  5490  001250  0766               	decf	sprintf@prec& (0+255),f,b
  5491  001252  0100               	movlb	0	; () banked
  5492  001254  2966               	incf	sprintf@prec& (0+255),w,b
  5493  001256  A4D8               	btfss	status,2,c
  5494  001258  D7CF               	goto	l3124
  5495  00125A                     l3132:
  5496  00125A  C032  FFF6         	movff	sprintf@f,tblptrl
  5497  00125E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5498  001262  4A32               	infsnz	sprintf@f,f,c
  5499  001264  2A33               	incf	sprintf@f+1,f,c
  5500  001266                     	if	0	;tblptru may be non-zero
  5501  001266                     	endif
  5502  001266                     	if	0	;tblptru may be non-zero
  5503  001266                     	endif
  5504  001266  0008               	tblrd		*
  5505  001268  CFF5 F06C          	movff	tablat,sprintf@c
  5506  00126C  0100               	movlb	0	; () banked
  5507  00126E  516C               	movf	sprintf@c& (0+255),w,b
  5508  001270  A4D8               	btfss	status,2,c
  5509  001272  D68B               	goto	l3026
  5510  001274                     l3134:
  5511                           
  5512                           ;doprnt.c: 1538: *sp = 0;
  5513  001274  C030  FFD9         	movff	sprintf@sp,fsr2l
  5514  001278  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5515  00127C  0E00               	movlw	0
  5516  00127E  6EDF               	movwf	indf2,c
  5517  001280  0012               	return	
  5518  001282                     __end_of_sprintf:
  5519                           	opt stack 0
  5520                           tblptru	equ	0xFF8
  5521                           tblptrh	equ	0xFF7
  5522                           tblptrl	equ	0xFF6
  5523                           tablat	equ	0xFF5
  5524                           prodh	equ	0xFF4
  5525                           prodl	equ	0xFF3
  5526                           intcon	equ	0xFF2
  5527                           postinc0	equ	0xFEE
  5528                           wreg	equ	0xFE8
  5529                           indf1	equ	0xFE7
  5530                           plusw1	equ	0xFE3
  5531                           fsr1h	equ	0xFE2
  5532                           fsr1l	equ	0xFE1
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           plusw2	equ	0xFDB
  5537                           fsr2h	equ	0xFDA
  5538                           fsr2l	equ	0xFD9
  5539                           status	equ	0xFD8
  5540                           
  5541 ;; *************** function _isdigit *****************
  5542 ;; Defined at:
  5543 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;  c               1    wreg     unsigned char 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  c               1   37[COMRAM] unsigned char 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;		None               void
  5550 ;; Registers used:
  5551 ;;		wreg, status,2, status,0
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5557 ;;      Params:         0       0       0       0
  5558 ;;      Locals:         2       0       0       0
  5559 ;;      Temps:          1       0       0       0
  5560 ;;      Totals:         3       0       0       0
  5561 ;;Total ram usage:        3 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:    3
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		_sprintf
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text19
  5572  001CF0                     __ptext19:
  5573                           	opt stack 0
  5574  001CF0                     _isdigit:
  5575                           	opt stack 26
  5576                           
  5577                           ;incstack = 0
  5578                           ;isdigit@c stored from wreg
  5579  001CF0  6E26               	movwf	isdigit@c,c
  5580  001CF2  0E00               	movlw	0
  5581  001CF4  6E25               	movwf	_isdigit$2085,c
  5582  001CF6  0E3A               	movlw	58
  5583  001CF8  6026               	cpfslt	isdigit@c,c
  5584  001CFA  D005               	goto	l2134
  5585  001CFC  0E2F               	movlw	47
  5586  001CFE  6426               	cpfsgt	isdigit@c,c
  5587  001D00  D002               	goto	l2134
  5588  001D02  0E01               	movlw	1
  5589  001D04  6E25               	movwf	_isdigit$2085,c
  5590  001D06                     l2134:
  5591  001D06  C025  F024         	movff	_isdigit$2085,??_isdigit
  5592  001D0A  3024               	rrcf	??_isdigit,w,c
  5593  001D0C  0012               	return	
  5594  001D0E                     __end_of_isdigit:
  5595                           	opt stack 0
  5596                           tblptru	equ	0xFF8
  5597                           tblptrh	equ	0xFF7
  5598                           tblptrl	equ	0xFF6
  5599                           tablat	equ	0xFF5
  5600                           prodh	equ	0xFF4
  5601                           prodl	equ	0xFF3
  5602                           intcon	equ	0xFF2
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           indf1	equ	0xFE7
  5606                           plusw1	equ	0xFE3
  5607                           fsr1h	equ	0xFE2
  5608                           fsr1l	equ	0xFE1
  5609                           indf2	equ	0xFDF
  5610                           postinc2	equ	0xFDE
  5611                           postdec2	equ	0xFDD
  5612                           plusw2	equ	0xFDB
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function ___wmul *****************
  5618 ;; Defined at:
  5619 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  multiplier      2   35[COMRAM] unsigned int 
  5622 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  product         2   39[COMRAM] unsigned int 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  2   35[COMRAM] unsigned int 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, prodl, prodh
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5634 ;;      Params:         4       0       0       0
  5635 ;;      Locals:         2       0       0       0
  5636 ;;      Temps:          0       0       0       0
  5637 ;;      Totals:         6       0       0       0
  5638 ;;Total ram usage:        6 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    3
  5641 ;; This function calls:
  5642 ;;		Nothing
  5643 ;; This function is called by:
  5644 ;;		_setMotorPWM
  5645 ;;		_sprintf
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           	psect	text20
  5650  001CA8                     __ptext20:
  5651                           	opt stack 0
  5652  001CA8                     ___wmul:
  5653                           	opt stack 24
  5654                           
  5655                           ;incstack = 0
  5656  001CA8  5024               	movf	___wmul@multiplier,w,c
  5657  001CAA  0226               	mulwf	___wmul@multiplicand,c
  5658  001CAC  CFF3 F028          	movff	prodl,___wmul@product
  5659  001CB0  CFF4 F029          	movff	prodh,___wmul@product+1
  5660  001CB4  5024               	movf	___wmul@multiplier,w,c
  5661  001CB6  0227               	mulwf	___wmul@multiplicand+1,c
  5662  001CB8  50F3               	movf	prodl,w,c
  5663  001CBA  2629               	addwf	___wmul@product+1,f,c
  5664  001CBC  5025               	movf	___wmul@multiplier+1,w,c
  5665  001CBE  0226               	mulwf	___wmul@multiplicand,c
  5666  001CC0  50F3               	movf	prodl,w,c
  5667  001CC2  2629               	addwf	___wmul@product+1,f,c
  5668  001CC4  C028  F024         	movff	___wmul@product,?___wmul
  5669  001CC8  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5670  001CCC  0012               	return	
  5671  001CCE                     __end_of___wmul:
  5672                           	opt stack 0
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon	equ	0xFF2
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           indf1	equ	0xFE7
  5683                           plusw1	equ	0xFE3
  5684                           fsr1h	equ	0xFE2
  5685                           fsr1l	equ	0xFE1
  5686                           indf2	equ	0xFDF
  5687                           postinc2	equ	0xFDE
  5688                           postdec2	equ	0xFDD
  5689                           plusw2	equ	0xFDB
  5690                           fsr2h	equ	0xFDA
  5691                           fsr2l	equ	0xFD9
  5692                           status	equ	0xFD8
  5693                           
  5694 ;; *************** function ___lwmod *****************
  5695 ;; Defined at:
  5696 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;  dividend        2   42[COMRAM] unsigned int 
  5699 ;;  divisor         2   44[COMRAM] unsigned int 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  counter         1   46[COMRAM] unsigned char 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  2   42[COMRAM] unsigned int 
  5704 ;; Registers used:
  5705 ;;		wreg, status,2, status,0
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5711 ;;      Params:         4       0       0       0
  5712 ;;      Locals:         1       0       0       0
  5713 ;;      Temps:          0       0       0       0
  5714 ;;      Totals:         5       0       0       0
  5715 ;;Total ram usage:        5 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    3
  5718 ;; This function calls:
  5719 ;;		Nothing
  5720 ;; This function is called by:
  5721 ;;		_sprintf
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text21
  5726  001A46                     __ptext21:
  5727                           	opt stack 0
  5728  001A46                     ___lwmod:
  5729                           	opt stack 26
  5730                           
  5731                           ;incstack = 0
  5732  001A46  502D               	movf	___lwmod@divisor,w,c
  5733  001A48  102E               	iorwf	___lwmod@divisor+1,w,c
  5734  001A4A  B4D8               	btfsc	status,2,c
  5735  001A4C  D018               	goto	l913
  5736  001A4E  0E01               	movlw	1
  5737  001A50  6E2F               	movwf	___lwmod@counter,c
  5738  001A52  D004               	goto	l2166
  5739  001A54                     l2164:
  5740  001A54  90D8               	bcf	status,0,c
  5741  001A56  362D               	rlcf	___lwmod@divisor,f,c
  5742  001A58  362E               	rlcf	___lwmod@divisor+1,f,c
  5743  001A5A  2A2F               	incf	___lwmod@counter,f,c
  5744  001A5C                     l2166:
  5745  001A5C  AE2E               	btfss	___lwmod@divisor+1,7,c
  5746  001A5E  D7FA               	goto	l2164
  5747  001A60                     l2168:
  5748  001A60  502D               	movf	___lwmod@divisor,w,c
  5749  001A62  5C2B               	subwf	___lwmod@dividend,w,c
  5750  001A64  502E               	movf	___lwmod@divisor+1,w,c
  5751  001A66  582C               	subwfb	___lwmod@dividend+1,w,c
  5752  001A68  A0D8               	btfss	status,0,c
  5753  001A6A  D004               	goto	l2172
  5754  001A6C  502D               	movf	___lwmod@divisor,w,c
  5755  001A6E  5E2B               	subwf	___lwmod@dividend,f,c
  5756  001A70  502E               	movf	___lwmod@divisor+1,w,c
  5757  001A72  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5758  001A74                     l2172:
  5759  001A74  90D8               	bcf	status,0,c
  5760  001A76  322E               	rrcf	___lwmod@divisor+1,f,c
  5761  001A78  322D               	rrcf	___lwmod@divisor,f,c
  5762  001A7A  2E2F               	decfsz	___lwmod@counter,f,c
  5763  001A7C  D7F1               	goto	l2168
  5764  001A7E                     l913:
  5765  001A7E  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5766  001A82  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5767  001A86  0012               	return		;funcret
  5768  001A88                     __end_of___lwmod:
  5769                           	opt stack 0
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           postinc0	equ	0xFEE
  5778                           wreg	equ	0xFE8
  5779                           indf1	equ	0xFE7
  5780                           plusw1	equ	0xFE3
  5781                           fsr1h	equ	0xFE2
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           postdec2	equ	0xFDD
  5786                           plusw2	equ	0xFDB
  5787                           fsr2h	equ	0xFDA
  5788                           fsr2l	equ	0xFD9
  5789                           status	equ	0xFD8
  5790                           
  5791 ;; *************** function ___lwdiv *****************
  5792 ;; Defined at:
  5793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;  dividend        2   35[COMRAM] unsigned int 
  5796 ;;  divisor         2   37[COMRAM] unsigned int 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  quotient        2   39[COMRAM] unsigned int 
  5799 ;;  counter         1   41[COMRAM] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  2   35[COMRAM] unsigned int 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5809 ;;      Params:         4       0       0       0
  5810 ;;      Locals:         3       0       0       0
  5811 ;;      Temps:          0       0       0       0
  5812 ;;      Totals:         7       0       0       0
  5813 ;;Total ram usage:        7 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    3
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_sprintf
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text22
  5824  0019F4                     __ptext22:
  5825                           	opt stack 0
  5826  0019F4                     ___lwdiv:
  5827                           	opt stack 26
  5828                           
  5829                           ;incstack = 0
  5830  0019F4  0E00               	movlw	0
  5831  0019F6  6E29               	movwf	___lwdiv@quotient+1,c
  5832  0019F8  0E00               	movlw	0
  5833  0019FA  6E28               	movwf	___lwdiv@quotient,c
  5834  0019FC  5026               	movf	___lwdiv@divisor,w,c
  5835  0019FE  1027               	iorwf	___lwdiv@divisor+1,w,c
  5836  001A00  B4D8               	btfsc	status,2,c
  5837  001A02  D01C               	goto	l903
  5838  001A04  0E01               	movlw	1
  5839  001A06  6E2A               	movwf	___lwdiv@counter,c
  5840  001A08  D004               	goto	l2146
  5841  001A0A                     l2144:
  5842  001A0A  90D8               	bcf	status,0,c
  5843  001A0C  3626               	rlcf	___lwdiv@divisor,f,c
  5844  001A0E  3627               	rlcf	___lwdiv@divisor+1,f,c
  5845  001A10  2A2A               	incf	___lwdiv@counter,f,c
  5846  001A12                     l2146:
  5847  001A12  AE27               	btfss	___lwdiv@divisor+1,7,c
  5848  001A14  D7FA               	goto	l2144
  5849  001A16                     l2148:
  5850  001A16  90D8               	bcf	status,0,c
  5851  001A18  3628               	rlcf	___lwdiv@quotient,f,c
  5852  001A1A  3629               	rlcf	___lwdiv@quotient+1,f,c
  5853  001A1C  5026               	movf	___lwdiv@divisor,w,c
  5854  001A1E  5C24               	subwf	___lwdiv@dividend,w,c
  5855  001A20  5027               	movf	___lwdiv@divisor+1,w,c
  5856  001A22  5825               	subwfb	___lwdiv@dividend+1,w,c
  5857  001A24  A0D8               	btfss	status,0,c
  5858  001A26  D005               	goto	l2156
  5859  001A28  5026               	movf	___lwdiv@divisor,w,c
  5860  001A2A  5E24               	subwf	___lwdiv@dividend,f,c
  5861  001A2C  5027               	movf	___lwdiv@divisor+1,w,c
  5862  001A2E  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5863  001A30  8028               	bsf	___lwdiv@quotient,0,c
  5864  001A32                     l2156:
  5865  001A32  90D8               	bcf	status,0,c
  5866  001A34  3227               	rrcf	___lwdiv@divisor+1,f,c
  5867  001A36  3226               	rrcf	___lwdiv@divisor,f,c
  5868  001A38  2E2A               	decfsz	___lwdiv@counter,f,c
  5869  001A3A  D7ED               	goto	l2148
  5870  001A3C                     l903:
  5871  001A3C  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5872  001A40  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5873  001A44  0012               	return		;funcret
  5874  001A46                     __end_of___lwdiv:
  5875                           	opt stack 0
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           indf1	equ	0xFE7
  5886                           plusw1	equ	0xFE3
  5887                           fsr1h	equ	0xFE2
  5888                           fsr1l	equ	0xFE1
  5889                           indf2	equ	0xFDF
  5890                           postinc2	equ	0xFDE
  5891                           postdec2	equ	0xFDD
  5892                           plusw2	equ	0xFDB
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function _grabRightIR *****************
  5898 ;; Defined at:
  5899 ;;		line 74 in file "IR_Reading.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;		None
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5904 ;;  i               1   42[COMRAM] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  2   35[COMRAM] unsigned int 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0
  5909 ;; Tracked objects:
  5910 ;;		On entry : 0/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5914 ;;      Params:         2       0       0       0
  5915 ;;      Locals:         3       0       0       0
  5916 ;;      Temps:          3       0       0       0
  5917 ;;      Totals:         8       0       0       0
  5918 ;;Total ram usage:        8 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    3
  5921 ;; This function calls:
  5922 ;;		Nothing
  5923 ;; This function is called by:
  5924 ;;		_ScanIR
  5925 ;;		_ScanWithRange
  5926 ;;		_main
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text23
  5931  00185A                     __ptext23:
  5932                           	opt stack 0
  5933  00185A                     _grabRightIR:
  5934                           	opt stack 27
  5935                           
  5936                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5937                           
  5938                           ;incstack = 0
  5939  00185A  0E00               	movlw	0
  5940  00185C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5941  00185E  0E00               	movlw	0
  5942  001860  6E29               	movwf	grabRightIR@IR_signal,c
  5943                           
  5944                           ;IR_Reading.c: 77: unsigned char i=0;
  5945  001862  0E00               	movlw	0
  5946  001864  6E2B               	movwf	grabRightIR@i,c
  5947                           
  5948                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5949  001866  0E00               	movlw	0
  5950  001868  6E2B               	movwf	grabRightIR@i,c
  5951  00186A                     l2208:
  5952  00186A  0E03               	movlw	3
  5953  00186C  642B               	cpfsgt	grabRightIR@i,c
  5954  00186E  D001               	goto	l2212
  5955  001870  D01E               	goto	l2218
  5956  001872                     l2212:
  5957                           
  5958                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5959  001872  5069               	movf	3945,w,c	;volatile
  5960  001874  6E26               	movwf	??_grabRightIR& (0+255),c
  5961  001876  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5962  001878  0E07               	movlw	7
  5963  00187A                     u1535:
  5964  00187A  90D8               	bcf	status,0,c
  5965  00187C  3626               	rlcf	??_grabRightIR,f,c
  5966  00187E  3627               	rlcf	??_grabRightIR+1,f,c
  5967  001880  2EE8               	decfsz	wreg,f,c
  5968  001882  D7FB               	goto	u1535
  5969  001884  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5970  001888  90D8               	bcf	status,0,c
  5971  00188A  3228               	rrcf	??_grabRightIR+2,f,c
  5972  00188C  5028               	movf	??_grabRightIR+2,w,c
  5973  00188E  1226               	iorwf	??_grabRightIR,f,c
  5974  001890  0E00               	movlw	0
  5975  001892  1227               	iorwf	??_grabRightIR+1,f,c
  5976  001894  5026               	movf	??_grabRightIR,w,c
  5977  001896  2629               	addwf	grabRightIR@IR_signal,f,c
  5978  001898  5027               	movf	??_grabRightIR+1,w,c
  5979  00189A  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5980                           
  5981                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5982  00189C  0E82               	movlw	130
  5983  00189E  6E26               	movwf	??_grabRightIR& (0+255),c
  5984  0018A0  0EDE               	movlw	222
  5985  0018A2                     u3257:
  5986  0018A2  2EE8               	decfsz	wreg,f,c
  5987  0018A4  D7FE               	goto	u3257
  5988  0018A6  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5989  0018A8  D7FC               	goto	u3257
  5990  0018AA  2A2B               	incf	grabRightIR@i,f,c
  5991  0018AC  D7DE               	goto	l2208
  5992  0018AE                     l2218:
  5993                           
  5994                           ;IR_Reading.c: 83: }
  5995                           ;IR_Reading.c: 85: return IR_signal>>2;
  5996  0018AE  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5997  0018B2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5998  0018B6  90D8               	bcf	status,0,c
  5999  0018B8  3227               	rrcf	??_grabRightIR+1,f,c
  6000  0018BA  3226               	rrcf	??_grabRightIR,f,c
  6001  0018BC  90D8               	bcf	status,0,c
  6002  0018BE  3227               	rrcf	??_grabRightIR+1,f,c
  6003  0018C0  3226               	rrcf	??_grabRightIR,f,c
  6004  0018C2  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6005  0018C6  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6006  0018CA  0012               	return	
  6007  0018CC                     __end_of_grabRightIR:
  6008                           	opt stack 0
  6009                           tblptru	equ	0xFF8
  6010                           tblptrh	equ	0xFF7
  6011                           tblptrl	equ	0xFF6
  6012                           tablat	equ	0xFF5
  6013                           prodh	equ	0xFF4
  6014                           prodl	equ	0xFF3
  6015                           intcon	equ	0xFF2
  6016                           postinc0	equ	0xFEE
  6017                           wreg	equ	0xFE8
  6018                           indf1	equ	0xFE7
  6019                           plusw1	equ	0xFE3
  6020                           fsr1h	equ	0xFE2
  6021                           fsr1l	equ	0xFE1
  6022                           indf2	equ	0xFDF
  6023                           postinc2	equ	0xFDE
  6024                           postdec2	equ	0xFDD
  6025                           plusw2	equ	0xFDB
  6026                           fsr2h	equ	0xFDA
  6027                           fsr2l	equ	0xFD9
  6028                           status	equ	0xFD8
  6029                           
  6030 ;; *************** function _grabLeftIR *****************
  6031 ;; Defined at:
  6032 ;;		line 90 in file "IR_Reading.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;		None
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6037 ;;  i               1   42[COMRAM] unsigned char 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  2   35[COMRAM] unsigned int 
  6040 ;; Registers used:
  6041 ;;		wreg, status,2, status,0
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6047 ;;      Params:         2       0       0       0
  6048 ;;      Locals:         3       0       0       0
  6049 ;;      Temps:          3       0       0       0
  6050 ;;      Totals:         8       0       0       0
  6051 ;;Total ram usage:        8 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    3
  6054 ;; This function calls:
  6055 ;;		Nothing
  6056 ;; This function is called by:
  6057 ;;		_ScanIR
  6058 ;;		_ScanWithRange
  6059 ;;		_main
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text24
  6064  0018CC                     __ptext24:
  6065                           	opt stack 0
  6066  0018CC                     _grabLeftIR:
  6067                           	opt stack 27
  6068                           
  6069                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6070                           
  6071                           ;incstack = 0
  6072  0018CC  0E00               	movlw	0
  6073  0018CE  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6074  0018D0  0E00               	movlw	0
  6075  0018D2  6E29               	movwf	grabLeftIR@IR_signal,c
  6076                           
  6077                           ;IR_Reading.c: 93: unsigned char i=0;
  6078  0018D4  0E00               	movlw	0
  6079  0018D6  6E2B               	movwf	grabLeftIR@i,c
  6080                           
  6081                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6082  0018D8  0E00               	movlw	0
  6083  0018DA  6E2B               	movwf	grabLeftIR@i,c
  6084  0018DC                     l2224:
  6085  0018DC  0E03               	movlw	3
  6086  0018DE  642B               	cpfsgt	grabLeftIR@i,c
  6087  0018E0  D001               	goto	l2228
  6088  0018E2  D01E               	goto	l2234
  6089  0018E4                     l2228:
  6090                           
  6091                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6092  0018E4  5067               	movf	3943,w,c	;volatile
  6093  0018E6  6E26               	movwf	??_grabLeftIR& (0+255),c
  6094  0018E8  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6095  0018EA  0E07               	movlw	7
  6096  0018EC                     u1565:
  6097  0018EC  90D8               	bcf	status,0,c
  6098  0018EE  3626               	rlcf	??_grabLeftIR,f,c
  6099  0018F0  3627               	rlcf	??_grabLeftIR+1,f,c
  6100  0018F2  2EE8               	decfsz	wreg,f,c
  6101  0018F4  D7FB               	goto	u1565
  6102  0018F6  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6103  0018FA  90D8               	bcf	status,0,c
  6104  0018FC  3228               	rrcf	??_grabLeftIR+2,f,c
  6105  0018FE  5028               	movf	??_grabLeftIR+2,w,c
  6106  001900  1226               	iorwf	??_grabLeftIR,f,c
  6107  001902  0E00               	movlw	0
  6108  001904  1227               	iorwf	??_grabLeftIR+1,f,c
  6109  001906  5026               	movf	??_grabLeftIR,w,c
  6110  001908  2629               	addwf	grabLeftIR@IR_signal,f,c
  6111  00190A  5027               	movf	??_grabLeftIR+1,w,c
  6112  00190C  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6113                           
  6114                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6115  00190E  0E82               	movlw	130
  6116  001910  6E26               	movwf	??_grabLeftIR& (0+255),c
  6117  001912  0EDE               	movlw	222
  6118  001914                     u3267:
  6119  001914  2EE8               	decfsz	wreg,f,c
  6120  001916  D7FE               	goto	u3267
  6121  001918  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6122  00191A  D7FC               	goto	u3267
  6123  00191C  2A2B               	incf	grabLeftIR@i,f,c
  6124  00191E  D7DE               	goto	l2224
  6125  001920                     l2234:
  6126                           
  6127                           ;IR_Reading.c: 99: }
  6128                           ;IR_Reading.c: 101: return IR_signal>>2;
  6129  001920  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6130  001924  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6131  001928  90D8               	bcf	status,0,c
  6132  00192A  3227               	rrcf	??_grabLeftIR+1,f,c
  6133  00192C  3226               	rrcf	??_grabLeftIR,f,c
  6134  00192E  90D8               	bcf	status,0,c
  6135  001930  3227               	rrcf	??_grabLeftIR+1,f,c
  6136  001932  3226               	rrcf	??_grabLeftIR,f,c
  6137  001934  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6138  001938  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6139  00193C  0012               	return	
  6140  00193E                     __end_of_grabLeftIR:
  6141                           	opt stack 0
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           intcon	equ	0xFF2
  6149                           postinc0	equ	0xFEE
  6150                           wreg	equ	0xFE8
  6151                           indf1	equ	0xFE7
  6152                           plusw1	equ	0xFE3
  6153                           fsr1h	equ	0xFE2
  6154                           fsr1l	equ	0xFE1
  6155                           indf2	equ	0xFDF
  6156                           postinc2	equ	0xFDE
  6157                           postdec2	equ	0xFDD
  6158                           plusw2	equ	0xFDB
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _SetLine *****************
  6164 ;; Defined at:
  6165 ;;		line 74 in file "LCD.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  line            1    wreg     unsigned char 
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;  line            1   41[COMRAM] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;		None               void
  6172 ;; Registers used:
  6173 ;;		wreg, status,2, status,0, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6179 ;;      Params:         0       0       0       0
  6180 ;;      Locals:         1       0       0       0
  6181 ;;      Temps:          0       0       0       0
  6182 ;;      Totals:         1       0       0       0
  6183 ;;Total ram usage:        1 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    6
  6186 ;; This function calls:
  6187 ;;		_SendLCD
  6188 ;; This function is called by:
  6189 ;;		_ScanIR
  6190 ;;		_ScanWithRange
  6191 ;;		_main
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text25
  6196  001C22                     __ptext25:
  6197                           	opt stack 0
  6198  001C22                     _SetLine:
  6199                           	opt stack 24
  6200                           
  6201                           ;incstack = 0
  6202                           ;SetLine@line stored from wreg
  6203  001C22  6E2A               	movwf	SetLine@line,c
  6204                           
  6205                           ;LCD.c: 75: if (line==1) {
  6206  001C24  042A               	decf	SetLine@line,w,c
  6207  001C26  A4D8               	btfss	status,2,c
  6208  001C28  D006               	goto	l2242
  6209                           
  6210                           ;LCD.c: 76: SendLCD(0x80,0);
  6211  001C2A  0E00               	movlw	0
  6212  001C2C  6E28               	movwf	SendLCD@type,c
  6213  001C2E  0E80               	movlw	128
  6214  001C30  EC29  F00E         	call	_SendLCD
  6215                           
  6216                           ;LCD.c: 77: } else if (line==2) {
  6217  001C34  D009               	goto	l2246
  6218  001C36                     l2242:
  6219  001C36  0E02               	movlw	2
  6220  001C38  182A               	xorwf	SetLine@line,w,c
  6221  001C3A  A4D8               	btfss	status,2,c
  6222  001C3C  D005               	goto	l2246
  6223                           
  6224                           ;LCD.c: 78: SendLCD(0xC0,0);
  6225  001C3E  0E00               	movlw	0
  6226  001C40  6E28               	movwf	SendLCD@type,c
  6227  001C42  0EC0               	movlw	192
  6228  001C44  EC29  F00E         	call	_SendLCD
  6229  001C48                     l2246:
  6230                           
  6231                           ;LCD.c: 79: }
  6232                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6233  001C48  0E21               	movlw	33
  6234  001C4A                     u3277:
  6235  001C4A  2EE8               	decfsz	wreg,f,c
  6236  001C4C  D7FE               	goto	u3277
  6237  001C4E  F000               	nop	
  6238  001C50  0012               	return		;funcret
  6239  001C52                     __end_of_SetLine:
  6240                           	opt stack 0
  6241                           tblptru	equ	0xFF8
  6242                           tblptrh	equ	0xFF7
  6243                           tblptrl	equ	0xFF6
  6244                           tablat	equ	0xFF5
  6245                           prodh	equ	0xFF4
  6246                           prodl	equ	0xFF3
  6247                           intcon	equ	0xFF2
  6248                           postinc0	equ	0xFEE
  6249                           wreg	equ	0xFE8
  6250                           indf1	equ	0xFE7
  6251                           plusw1	equ	0xFE3
  6252                           fsr1h	equ	0xFE2
  6253                           fsr1l	equ	0xFE1
  6254                           indf2	equ	0xFDF
  6255                           postinc2	equ	0xFDE
  6256                           postdec2	equ	0xFDD
  6257                           plusw2	equ	0xFDB
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _LCD_String *****************
  6263 ;; Defined at:
  6264 ;;		line 83 in file "LCD.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  string          2   41[COMRAM] PTR unsigned char 
  6267 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6268 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6269 ;;		 -> STR_1(12), 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;		None
  6272 ;; Return value:  Size  Location     Type
  6273 ;;		None               void
  6274 ;; Registers used:
  6275 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6281 ;;      Params:         2       0       0       0
  6282 ;;      Locals:         0       0       0       0
  6283 ;;      Temps:          0       0       0       0
  6284 ;;      Totals:         2       0       0       0
  6285 ;;Total ram usage:        2 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    6
  6288 ;; This function calls:
  6289 ;;		_SendLCD
  6290 ;; This function is called by:
  6291 ;;		_ScanIR
  6292 ;;		_ScanWithRange
  6293 ;;		_main
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text26
  6298  00193E                     __ptext26:
  6299                           	opt stack 0
  6300  00193E                     _LCD_String:
  6301                           	opt stack 23
  6302                           
  6303                           ;LCD.c: 85: while(*string != 0){
  6304                           
  6305                           ;incstack = 0
  6306  00193E  D01A               	goto	l2256
  6307  001940                     l2250:
  6308                           
  6309                           ;LCD.c: 88: SendLCD(*string++,1);
  6310  001940  0E01               	movlw	1
  6311  001942  6E28               	movwf	SendLCD@type,c
  6312  001944  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6313  001948  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6314  00194C  6AF8               	clrf	tblptru,c
  6315  00194E  0E02               	movlw	(high __ramtop+-1)
  6316  001950  64F7               	cpfsgt	tblptrh,c
  6317  001952  D003               	bra	u1607
  6318  001954  0008               	tblrd		*
  6319  001956  50F5               	movf	tablat,w,c
  6320  001958  D005               	bra	u1600
  6321  00195A                     u1607:
  6322  00195A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6323  00195E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6324  001962  50E7               	movf	indf1,w,c
  6325  001964                     u1600:
  6326  001964  EC29  F00E         	call	_SendLCD
  6327  001968  4A2A               	infsnz	LCD_String@string,f,c
  6328  00196A  2A2B               	incf	LCD_String@string+1,f,c
  6329                           
  6330                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6331  00196C  0E21               	movlw	33
  6332  00196E                     u3287:
  6333  00196E  2EE8               	decfsz	wreg,f,c
  6334  001970  D7FE               	goto	u3287
  6335  001972  F000               	nop	
  6336  001974                     l2256:
  6337  001974  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6338  001978  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6339  00197C  6AF8               	clrf	tblptru,c
  6340  00197E  0E02               	movlw	(high __ramtop+-1)
  6341  001980  64F7               	cpfsgt	tblptrh,c
  6342  001982  D003               	bra	u1617
  6343  001984  0008               	tblrd		*
  6344  001986  50F5               	movf	tablat,w,c
  6345  001988  D005               	bra	u1610
  6346  00198A                     u1617:
  6347  00198A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6348  00198E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6349  001992  50E7               	movf	indf1,w,c
  6350  001994                     u1610:
  6351  001994  0900               	iorlw	0
  6352  001996  B4D8               	btfsc	status,2,c
  6353  001998  0012               	return	
  6354  00199A  D7D2               	goto	l2250
  6355  00199C                     __end_of_LCD_String:
  6356                           	opt stack 0
  6357                           tblptru	equ	0xFF8
  6358                           tblptrh	equ	0xFF7
  6359                           tblptrl	equ	0xFF6
  6360                           tablat	equ	0xFF5
  6361                           prodh	equ	0xFF4
  6362                           prodl	equ	0xFF3
  6363                           intcon	equ	0xFF2
  6364                           postinc0	equ	0xFEE
  6365                           wreg	equ	0xFE8
  6366                           indf1	equ	0xFE7
  6367                           plusw1	equ	0xFE3
  6368                           fsr1h	equ	0xFE2
  6369                           fsr1l	equ	0xFE1
  6370                           indf2	equ	0xFDF
  6371                           postinc2	equ	0xFDE
  6372                           postdec2	equ	0xFDD
  6373                           plusw2	equ	0xFDB
  6374                           fsr2h	equ	0xFDA
  6375                           fsr2l	equ	0xFD9
  6376                           status	equ	0xFD8
  6377                           
  6378 ;; *************** function _SendLCD *****************
  6379 ;; Defined at:
  6380 ;;		line 27 in file "LCD.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  Byte            1    wreg     unsigned char 
  6383 ;;  type            1   39[COMRAM] unsigned char 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  Byte            1   40[COMRAM] unsigned char 
  6386 ;; Return value:  Size  Location     Type
  6387 ;;		None               void
  6388 ;; Registers used:
  6389 ;;		wreg, status,2, status,0, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6395 ;;      Params:         1       0       0       0
  6396 ;;      Locals:         1       0       0       0
  6397 ;;      Temps:          0       0       0       0
  6398 ;;      Totals:         2       0       0       0
  6399 ;;Total ram usage:        2 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    5
  6402 ;; This function calls:
  6403 ;;		_LCDout
  6404 ;; This function is called by:
  6405 ;;		_initLCD
  6406 ;;		_SetLine
  6407 ;;		_LCD_String
  6408 ;;		_ScanIR
  6409 ;;		_ScanWithRange
  6410 ;;		_main
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           	psect	text27
  6415  001C52                     __ptext27:
  6416                           	opt stack 0
  6417  001C52                     _SendLCD:
  6418                           	opt stack 24
  6419                           
  6420                           ;incstack = 0
  6421                           ;SendLCD@Byte stored from wreg
  6422  001C52  6E29               	movwf	SendLCD@Byte,c
  6423                           
  6424                           ;LCD.c: 30: LATAbits.LATA6=type;
  6425  001C54  B028               	btfsc	SendLCD@type,0,c
  6426  001C56  D002               	bra	u1395
  6427  001C58  9C89               	bcf	3977,6,c	;volatile
  6428  001C5A  D001               	bra	u1396
  6429  001C5C                     u1395:
  6430  001C5C  8C89               	bsf	3977,6,c	;volatile
  6431  001C5E                     u1396:
  6432                           
  6433                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6434  001C5E  3829               	swapf	SendLCD@Byte,w,c
  6435  001C60  0B0F               	andlw	15
  6436  001C62  0B0F               	andlw	15
  6437  001C64  EC5B  F00A         	call	_LCDout
  6438                           
  6439                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6440  001C68  0E06               	movlw	6
  6441  001C6A                     u3297:
  6442  001C6A  2EE8               	decfsz	wreg,f,c
  6443  001C6C  D7FE               	goto	u3297
  6444  001C6E  D000               	nop2		;nop
  6445                           
  6446                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6447  001C70  5029               	movf	SendLCD@Byte,w,c
  6448  001C72  0B0F               	andlw	15
  6449  001C74  EC5B  F00A         	call	_LCDout
  6450                           
  6451                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6452  001C78  0E21               	movlw	33
  6453  001C7A                     u3307:
  6454  001C7A  2EE8               	decfsz	wreg,f,c
  6455  001C7C  D7FE               	goto	u3307
  6456  001C7E  F000               	nop	
  6457  001C80  0012               	return		;funcret
  6458  001C82                     __end_of_SendLCD:
  6459                           	opt stack 0
  6460                           tblptru	equ	0xFF8
  6461                           tblptrh	equ	0xFF7
  6462                           tblptrl	equ	0xFF6
  6463                           tablat	equ	0xFF5
  6464                           prodh	equ	0xFF4
  6465                           prodl	equ	0xFF3
  6466                           intcon	equ	0xFF2
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           indf1	equ	0xFE7
  6470                           plusw1	equ	0xFE3
  6471                           fsr1h	equ	0xFE2
  6472                           fsr1l	equ	0xFE1
  6473                           indf2	equ	0xFDF
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           plusw2	equ	0xFDB
  6477                           fsr2h	equ	0xFDA
  6478                           fsr2l	equ	0xFD9
  6479                           status	equ	0xFD8
  6480                           
  6481 ;; *************** function _LCDout *****************
  6482 ;; Defined at:
  6483 ;;		line 14 in file "LCD.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;  number          1    wreg     unsigned char 
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;  number          1   38[COMRAM] unsigned char 
  6488 ;; Return value:  Size  Location     Type
  6489 ;;		None               void
  6490 ;; Registers used:
  6491 ;;		wreg, status,2, status,0, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6497 ;;      Params:         0       0       0       0
  6498 ;;      Locals:         1       0       0       0
  6499 ;;      Temps:          3       0       0       0
  6500 ;;      Totals:         4       0       0       0
  6501 ;;Total ram usage:        4 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    4
  6504 ;; This function calls:
  6505 ;;		_E_TOG
  6506 ;; This function is called by:
  6507 ;;		_SendLCD
  6508 ;;		_initLCD
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           	psect	text28
  6513  0014B6                     __ptext28:
  6514                           	opt stack 0
  6515  0014B6                     _LCDout:
  6516                           	opt stack 24
  6517                           
  6518                           ;incstack = 0
  6519                           ;LCDout@number stored from wreg
  6520  0014B6  6E27               	movwf	LCDout@number,c
  6521                           
  6522                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6523  0014B8  5027               	movf	LCDout@number,w,c
  6524  0014BA  6E24               	movwf	??_LCDout& (0+255),c
  6525  0014BC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6526  0014BE  0E07               	movlw	7
  6527  0014C0                     u1285:
  6528  0014C0  90D8               	bcf	status,0,c
  6529  0014C2  3624               	rlcf	??_LCDout,f,c
  6530  0014C4  3625               	rlcf	??_LCDout+1,f,c
  6531  0014C6  2EE8               	decfsz	wreg,f,c
  6532  0014C8  D7FB               	goto	u1285
  6533  0014CA  0E07               	movlw	7
  6534  0014CC  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6535  0014CE                     u1295:
  6536  0014CE  3425               	rlcf	??_LCDout+1,w,c
  6537  0014D0  3225               	rrcf	??_LCDout+1,f,c
  6538  0014D2  3224               	rrcf	??_LCDout,f,c
  6539  0014D4  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6540  0014D6  D7FB               	goto	u1295
  6541  0014D8  4624               	rlncf	??_LCDout,f,c
  6542  0014DA  508B               	movf	3979,w,c	;volatile
  6543  0014DC  1824               	xorwf	??_LCDout,w,c
  6544  0014DE  0BFD               	andlw	-3
  6545  0014E0  1824               	xorwf	??_LCDout,w,c
  6546  0014E2  6E8B               	movwf	3979,c	;volatile
  6547                           
  6548                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6549  0014E4  5027               	movf	LCDout@number,w,c
  6550  0014E6  6E24               	movwf	??_LCDout& (0+255),c
  6551  0014E8  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6552  0014EA  0E06               	movlw	6
  6553  0014EC                     u1305:
  6554  0014EC  90D8               	bcf	status,0,c
  6555  0014EE  3624               	rlcf	??_LCDout,f,c
  6556  0014F0  3625               	rlcf	??_LCDout+1,f,c
  6557  0014F2  2EE8               	decfsz	wreg,f,c
  6558  0014F4  D7FB               	goto	u1305
  6559  0014F6  0E07               	movlw	7
  6560  0014F8  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6561  0014FA                     u1315:
  6562  0014FA  3425               	rlcf	??_LCDout+1,w,c
  6563  0014FC  3225               	rrcf	??_LCDout+1,f,c
  6564  0014FE  3224               	rrcf	??_LCDout,f,c
  6565  001500  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6566  001502  D7FB               	goto	u1315
  6567  001504  4624               	rlncf	??_LCDout,f,c
  6568  001506  4624               	rlncf	??_LCDout,f,c
  6569  001508  508B               	movf	3979,w,c	;volatile
  6570  00150A  1824               	xorwf	??_LCDout,w,c
  6571  00150C  0BFB               	andlw	-5
  6572  00150E  1824               	xorwf	??_LCDout,w,c
  6573  001510  6E8B               	movwf	3979,c	;volatile
  6574                           
  6575                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6576  001512  5027               	movf	LCDout@number,w,c
  6577  001514  6E24               	movwf	??_LCDout& (0+255),c
  6578  001516  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6579  001518  0E05               	movlw	5
  6580  00151A                     u1325:
  6581  00151A  90D8               	bcf	status,0,c
  6582  00151C  3624               	rlcf	??_LCDout,f,c
  6583  00151E  3625               	rlcf	??_LCDout+1,f,c
  6584  001520  2EE8               	decfsz	wreg,f,c
  6585  001522  D7FB               	goto	u1325
  6586  001524  0E07               	movlw	7
  6587  001526  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6588  001528                     u1335:
  6589  001528  3425               	rlcf	??_LCDout+1,w,c
  6590  00152A  3225               	rrcf	??_LCDout+1,f,c
  6591  00152C  3224               	rrcf	??_LCDout,f,c
  6592  00152E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6593  001530  D7FB               	goto	u1335
  6594  001532  508C               	movf	3980,w,c	;volatile
  6595  001534  1824               	xorwf	??_LCDout,w,c
  6596  001536  0BFE               	andlw	-2
  6597  001538  1824               	xorwf	??_LCDout,w,c
  6598  00153A  6E8C               	movwf	3980,c	;volatile
  6599                           
  6600                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6601  00153C  5027               	movf	LCDout@number,w,c
  6602  00153E  6E24               	movwf	??_LCDout& (0+255),c
  6603  001540  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6604  001542  3A24               	swapf	??_LCDout,f,c
  6605  001544  3A25               	swapf	??_LCDout+1,f,c
  6606  001546  0EF0               	movlw	240
  6607  001548  1625               	andwf	??_LCDout+1,f,c
  6608  00154A  5024               	movf	??_LCDout,w,c
  6609  00154C  0B0F               	andlw	15
  6610  00154E  1225               	iorwf	??_LCDout+1,f,c
  6611  001550  0EF0               	movlw	240
  6612  001552  1624               	andwf	??_LCDout,f,c
  6613  001554  0E07               	movlw	7
  6614  001556  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6615  001558                     u1345:
  6616  001558  3425               	rlcf	??_LCDout+1,w,c
  6617  00155A  3225               	rrcf	??_LCDout+1,f,c
  6618  00155C  3224               	rrcf	??_LCDout,f,c
  6619  00155E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6620  001560  D7FB               	goto	u1345
  6621  001562  4624               	rlncf	??_LCDout,f,c
  6622  001564  508C               	movf	3980,w,c	;volatile
  6623  001566  1824               	xorwf	??_LCDout,w,c
  6624  001568  0BFD               	andlw	-3
  6625  00156A  1824               	xorwf	??_LCDout,w,c
  6626  00156C  6E8C               	movwf	3980,c	;volatile
  6627                           
  6628                           ;LCD.c: 21: E_TOG();
  6629  00156E  EC9E  F00E         	call	_E_TOG	;wreg free
  6630                           
  6631                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6632  001572  0E03               	movlw	3
  6633  001574                     u3317:
  6634  001574  2EE8               	decfsz	wreg,f,c
  6635  001576  D7FE               	goto	u3317
  6636  001578  F000               	nop	
  6637  00157A  0012               	return		;funcret
  6638  00157C                     __end_of_LCDout:
  6639                           	opt stack 0
  6640                           tblptru	equ	0xFF8
  6641                           tblptrh	equ	0xFF7
  6642                           tblptrl	equ	0xFF6
  6643                           tablat	equ	0xFF5
  6644                           prodh	equ	0xFF4
  6645                           prodl	equ	0xFF3
  6646                           intcon	equ	0xFF2
  6647                           postinc0	equ	0xFEE
  6648                           wreg	equ	0xFE8
  6649                           indf1	equ	0xFE7
  6650                           plusw1	equ	0xFE3
  6651                           fsr1h	equ	0xFE2
  6652                           fsr1l	equ	0xFE1
  6653                           indf2	equ	0xFDF
  6654                           postinc2	equ	0xFDE
  6655                           postdec2	equ	0xFDD
  6656                           plusw2	equ	0xFDB
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function _E_TOG *****************
  6662 ;; Defined at:
  6663 ;;		line 5 in file "LCD.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;		None
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;		None               void
  6670 ;; Registers used:
  6671 ;;		wreg
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6677 ;;      Params:         0       0       0       0
  6678 ;;      Locals:         0       0       0       0
  6679 ;;      Temps:          0       0       0       0
  6680 ;;      Totals:         0       0       0       0
  6681 ;;Total ram usage:        0 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    3
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_LCDout
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text29
  6692  001D3C                     __ptext29:
  6693                           	opt stack 0
  6694  001D3C                     _E_TOG:
  6695                           	opt stack 24
  6696                           
  6697                           ;LCD.c: 8: LATCbits.LATC0=1;
  6698                           
  6699                           ;incstack = 0
  6700  001D3C  808B               	bsf	3979,0,c	;volatile
  6701                           
  6702                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6703  001D3E  0E03               	movlw	3
  6704  001D40                     u3327:
  6705  001D40  2EE8               	decfsz	wreg,f,c
  6706  001D42  D7FE               	goto	u3327
  6707  001D44  F000               	nop	
  6708                           
  6709                           ;LCD.c: 10: LATCbits.LATC0=0;
  6710  001D46  908B               	bcf	3979,0,c	;volatile
  6711  001D48  0012               	return		;funcret
  6712  001D4A                     __end_of_E_TOG:
  6713                           	opt stack 0
  6714                           tblptru	equ	0xFF8
  6715                           tblptrh	equ	0xFF7
  6716                           tblptrl	equ	0xFF6
  6717                           tablat	equ	0xFF5
  6718                           prodh	equ	0xFF4
  6719                           prodl	equ	0xFF3
  6720                           intcon	equ	0xFF2
  6721                           postinc0	equ	0xFEE
  6722                           wreg	equ	0xFE8
  6723                           indf1	equ	0xFE7
  6724                           plusw1	equ	0xFE3
  6725                           fsr1h	equ	0xFE2
  6726                           fsr1l	equ	0xFE1
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           postdec2	equ	0xFDD
  6730                           plusw2	equ	0xFDB
  6731                           fsr2h	equ	0xFDA
  6732                           fsr2l	equ	0xFD9
  6733                           status	equ	0xFD8
  6734                           
  6735 ;; *************** function _InterruptHandlerLow *****************
  6736 ;; Defined at:
  6737 ;;		line 18 in file "main.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;		None
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;		None
  6742 ;; Return value:  Size  Location     Type
  6743 ;;		None               void
  6744 ;; Registers used:
  6745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6751 ;;      Params:         0       0       0       0
  6752 ;;      Locals:         0       0       0       0
  6753 ;;      Temps:         17       0       0       0
  6754 ;;      Totals:        17       0       0       0
  6755 ;;Total ram usage:       17 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    2
  6758 ;; This function calls:
  6759 ;;		Nothing
  6760 ;; This function is called by:
  6761 ;;		Interrupt level 1
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	intcodelo
  6766  000018                     __pintcodelo:
  6767                           	opt stack 0
  6768  000018                     _InterruptHandlerLow:
  6769                           	opt stack 23
  6770                           
  6771                           ;incstack = 0
  6772  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6773  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6774  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6775  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6776  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6777  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6778  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6779  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6780  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6781  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6782  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6783  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6784  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6785  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6786  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6787  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6788  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6789  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6790                           
  6791                           ;main.c: 20: if (PIR1bits.RCIF) {
  6792  00005E  AA9E               	btfss	3998,5,c	;volatile
  6793  000060  D016               	goto	i1l378
  6794                           
  6795                           ;main.c: 21: ReceivedString[i]=RCREG;
  6796  000062  503A               	movf	_i,w,c	;volatile
  6797  000064  0D01               	mullw	1
  6798  000066  0EE6               	movlw	low _ReceivedString
  6799  000068  24F3               	addwf	prodl,w,c
  6800  00006A  6ED9               	movwf	fsr2l,c
  6801  00006C  0E01               	movlw	high _ReceivedString
  6802  00006E  20F4               	addwfc	prodh,w,c
  6803  000070  6EDA               	movwf	fsr2h,c
  6804  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6805                           
  6806                           ;main.c: 22: RFID_Read=1;
  6807  000076  0E01               	movlw	1
  6808  000078  0101               	movlb	1	; () banked
  6809  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6810                           
  6811                           ; BSR set to: 1
  6812                           ;main.c: 23: if (i==15){
  6813  00007C  0E0F               	movlw	15
  6814  00007E  183A               	xorwf	_i,w,c	;volatile
  6815  000080  A4D8               	btfss	status,2,c
  6816  000082  D003               	goto	i1l2660
  6817                           
  6818                           ; BSR set to: 1
  6819                           ;main.c: 24: i=0;
  6820  000084  0E00               	movlw	0
  6821  000086  6E3A               	movwf	_i,c	;volatile
  6822                           
  6823                           ;main.c: 25: }else{
  6824  000088  D001               	goto	i1l2662
  6825  00008A                     i1l2660:
  6826                           
  6827                           ; BSR set to: 1
  6828                           ;main.c: 26: i++;
  6829  00008A  2A3A               	incf	_i,f,c	;volatile
  6830  00008C                     i1l2662:
  6831                           
  6832                           ; BSR set to: 1
  6833                           ;main.c: 27: }
  6834                           ;main.c: 28: PIR1bits.RCIF=0;
  6835  00008C  9A9E               	bcf	3998,5,c	;volatile
  6836  00008E                     i1l378:
  6837  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6838  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6839  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6840  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6841  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6842  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6843  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6844  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6845  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6846  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6847  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6848  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6849  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6850  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6851  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6852  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6853  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6854  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6855  0000D4  0010               	retfie	
  6856  0000D6                     __end_of_InterruptHandlerLow:
  6857                           	opt stack 0
  6858                           pclatu	equ	0xFFB
  6859                           pclath	equ	0xFFA
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           prodh	equ	0xFF4
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           postinc0	equ	0xFEE
  6868                           fsr0h	equ	0xFEA
  6869                           fsr0l	equ	0xFE9
  6870                           wreg	equ	0xFE8
  6871                           indf1	equ	0xFE7
  6872                           plusw1	equ	0xFE3
  6873                           fsr1h	equ	0xFE2
  6874                           fsr1l	equ	0xFE1
  6875                           bsr	equ	0xFE0
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           plusw2	equ	0xFDB
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _InterruptHandlerHigh *****************
  6885 ;; Defined at:
  6886 ;;		line 34 in file "main.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;		None
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;		None
  6891 ;; Return value:  Size  Location     Type
  6892 ;;		None               void
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6900 ;;      Params:         0       0       0       0
  6901 ;;      Locals:         0       0       0       0
  6902 ;;      Temps:         14       0       0       0
  6903 ;;      Totals:        14       0       0       0
  6904 ;;Total ram usage:       14 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    1
  6907 ;; This function calls:
  6908 ;;		i2_delay_tenth_s
  6909 ;; This function is called by:
  6910 ;;		Interrupt level 2
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	intcode
  6915  000008                     __pintcode:
  6916                           	opt stack 0
  6917  000008                     _InterruptHandlerHigh:
  6918                           	opt stack 23
  6919                           
  6920                           ;incstack = 0
  6921  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6922  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6923  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6924  000012  EF66  F00B         	goto	int_func
  6925                           pclatu	equ	0xFFB
  6926                           pclath	equ	0xFFA
  6927                           tblptru	equ	0xFF8
  6928                           tblptrh	equ	0xFF7
  6929                           tblptrl	equ	0xFF6
  6930                           tablat	equ	0xFF5
  6931                           prodh	equ	0xFF4
  6932                           prodl	equ	0xFF3
  6933                           intcon	equ	0xFF2
  6934                           postinc0	equ	0xFEE
  6935                           fsr0h	equ	0xFEA
  6936                           fsr0l	equ	0xFE9
  6937                           wreg	equ	0xFE8
  6938                           indf1	equ	0xFE7
  6939                           plusw1	equ	0xFE3
  6940                           fsr1h	equ	0xFE2
  6941                           fsr1l	equ	0xFE1
  6942                           bsr	equ	0xFE0
  6943                           indf2	equ	0xFDF
  6944                           postinc2	equ	0xFDE
  6945                           postdec2	equ	0xFDD
  6946                           plusw2	equ	0xFDB
  6947                           fsr2h	equ	0xFDA
  6948                           fsr2l	equ	0xFD9
  6949                           status	equ	0xFD8
  6950                           
  6951                           	psect	intcode_body
  6952  0016CC                     __pintcode_body:
  6953                           	opt stack 23
  6954  0016CC                     int_func:
  6955                           	opt stack 23
  6956  0016CC  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6957  0016D0  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6958  0016D4  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6959  0016D8  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6960  0016DC  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6961  0016E0  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6962  0016E4  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6963  0016E8  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6964  0016EC  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6965  0016F0  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6966  0016F4  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6967  0016F8  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6968                           
  6969                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6970  0016FC  A2F2               	btfss	intcon,1,c	;volatile
  6971  0016FE  D00D               	goto	i2l386
  6972                           
  6973                           ;main.c: 36: if (mode==-1) {
  6974  001700  283B               	incf	_mode,w,c	;volatile
  6975  001702  A4D8               	btfss	status,2,c
  6976  001704  D003               	goto	i2l2670
  6977                           
  6978                           ;main.c: 38: mode=1;
  6979  001706  0E01               	movlw	1
  6980  001708  6E3B               	movwf	_mode,c	;volatile
  6981                           
  6982                           ;main.c: 39: } else if (mode==0) {
  6983  00170A  D003               	goto	i2l2674
  6984  00170C                     i2l2670:
  6985  00170C  503B               	movf	_mode,w,c	;volatile
  6986  00170E  A4D8               	btfss	status,2,c
  6987                           
  6988                           ;main.c: 43: mode=-1;
  6989                           
  6990                           ;main.c: 41: } else {
  6991  001710  683B               	setf	_mode,c	;volatile
  6992  001712                     i2l2674:
  6993                           
  6994                           ;main.c: 44: }
  6995                           ;main.c: 46: delay_tenth_s(2);
  6996  001712  0E02               	movlw	2
  6997  001714  ECDA  F00D         	call	i2_delay_tenth_s
  6998                           
  6999                           ;main.c: 47: INTCONbits.INT0IF=0;
  7000  001718  92F2               	bcf	intcon,1,c	;volatile
  7001  00171A                     i2l386:
  7002  00171A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7003  00171E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7004  001722  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7005  001726  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7006  00172A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7007  00172E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7008  001732  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7009  001736  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7010  00173A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7011  00173E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7012  001742  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7013  001746  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7014  00174A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7015  00174E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7016  001752  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7017  001754  0011               	retfie		f
  7018  001756                     __end_of_InterruptHandlerHigh:
  7019                           	opt stack 0
  7020                           pclatu	equ	0xFFB
  7021                           pclath	equ	0xFFA
  7022                           tblptru	equ	0xFF8
  7023                           tblptrh	equ	0xFF7
  7024                           tblptrl	equ	0xFF6
  7025                           tablat	equ	0xFF5
  7026                           prodh	equ	0xFF4
  7027                           prodl	equ	0xFF3
  7028                           intcon	equ	0xFF2
  7029                           postinc0	equ	0xFEE
  7030                           fsr0h	equ	0xFEA
  7031                           fsr0l	equ	0xFE9
  7032                           wreg	equ	0xFE8
  7033                           indf1	equ	0xFE7
  7034                           plusw1	equ	0xFE3
  7035                           fsr1h	equ	0xFE2
  7036                           fsr1l	equ	0xFE1
  7037                           bsr	equ	0xFE0
  7038                           indf2	equ	0xFDF
  7039                           postinc2	equ	0xFDE
  7040                           postdec2	equ	0xFDD
  7041                           plusw2	equ	0xFDB
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function i2_delay_tenth_s *****************
  7047 ;; Defined at:
  7048 ;;		line 32 in file "Movement.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  tenth_second    1    wreg     unsigned char 
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7053 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7054 ;; Return value:  Size  Location     Type
  7055 ;;		None               void
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7063 ;;      Params:         0       0       0       0
  7064 ;;      Locals:         3       0       0       0
  7065 ;;      Temps:          1       0       0       0
  7066 ;;      Totals:         4       0       0       0
  7067 ;;Total ram usage:        4 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; This function calls:
  7070 ;;		Nothing
  7071 ;; This function is called by:
  7072 ;;		_InterruptHandlerHigh
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text32
  7077  001BB4                     __ptext32:
  7078                           	opt stack 0
  7079  001BB4                     i2_delay_tenth_s:
  7080                           	opt stack 23
  7081                           
  7082                           ;incstack = 0
  7083                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7084  001BB4  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7085                           
  7086                           ;Movement.c: 33: unsigned int i=0;
  7087  001BB6  0E00               	movlw	0
  7088  001BB8  6E04               	movwf	i2delay_tenth_s@i+1,c
  7089  001BBA  0E00               	movlw	0
  7090  001BBC  6E03               	movwf	i2delay_tenth_s@i,c
  7091                           
  7092                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7093  001BBE  0E00               	movlw	0
  7094  001BC0  6E04               	movwf	i2delay_tenth_s@i+1,c
  7095  001BC2  0E01               	movlw	1
  7096  001BC4  6E03               	movwf	i2delay_tenth_s@i,c
  7097  001BC6  D009               	goto	i2l2630
  7098  001BC8                     i2l2626:
  7099                           
  7100                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7101  001BC8  0E82               	movlw	130
  7102  001BCA  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7103  001BCC  0EDE               	movlw	222
  7104  001BCE                     i2u333_47:
  7105  001BCE  2EE8               	decfsz	wreg,f,c
  7106  001BD0  D7FE               	goto	i2u333_47
  7107  001BD2  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7108  001BD4  D7FC               	goto	i2u333_47
  7109  001BD6  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7110  001BD8  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7111  001BDA                     i2l2630:
  7112  001BDA  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7113  001BDC  0D02               	mullw	2
  7114  001BDE  5003               	movf	i2delay_tenth_s@i,w,c
  7115  001BE0  5CF3               	subwf	prodl,w,c
  7116  001BE2  5004               	movf	i2delay_tenth_s@i+1,w,c
  7117  001BE4  58F4               	subwfb	prodh,w,c
  7118  001BE6  A0D8               	btfss	status,0,c
  7119  001BE8  0012               	return	
  7120  001BEA  D7EE               	goto	i2l2626
  7121  001BEC                     __end_ofi2_delay_tenth_s:
  7122                           	opt stack 0
  7123                           pclatu	equ	0xFFB
  7124                           pclath	equ	0xFFA
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           intcon	equ	0xFF2
  7132                           postinc0	equ	0xFEE
  7133                           fsr0h	equ	0xFEA
  7134                           fsr0l	equ	0xFE9
  7135                           wreg	equ	0xFE8
  7136                           indf1	equ	0xFE7
  7137                           plusw1	equ	0xFE3
  7138                           fsr1h	equ	0xFE2
  7139                           fsr1l	equ	0xFE1
  7140                           bsr	equ	0xFE0
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           plusw2	equ	0xFDB
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           pclatu	equ	0xFFB
  7149                           pclath	equ	0xFFA
  7150                           tblptru	equ	0xFF8
  7151                           tblptrh	equ	0xFF7
  7152                           tblptrl	equ	0xFF6
  7153                           tablat	equ	0xFF5
  7154                           prodh	equ	0xFF4
  7155                           prodl	equ	0xFF3
  7156                           intcon	equ	0xFF2
  7157                           postinc0	equ	0xFEE
  7158                           fsr0h	equ	0xFEA
  7159                           fsr0l	equ	0xFE9
  7160                           wreg	equ	0xFE8
  7161                           indf1	equ	0xFE7
  7162                           plusw1	equ	0xFE3
  7163                           fsr1h	equ	0xFE2
  7164                           fsr1l	equ	0xFE1
  7165                           bsr	equ	0xFE0
  7166                           indf2	equ	0xFDF
  7167                           postinc2	equ	0xFDE
  7168                           postdec2	equ	0xFDD
  7169                           plusw2	equ	0xFDB
  7170                           fsr2h	equ	0xFDA
  7171                           fsr2l	equ	0xFD9
  7172                           status	equ	0xFD8
  7173                           
  7174                           	psect	rparam
  7175  0000                     pclatu	equ	0xFFB
  7176                           pclath	equ	0xFFA
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           intcon	equ	0xFF2
  7184                           postinc0	equ	0xFEE
  7185                           fsr0h	equ	0xFEA
  7186                           fsr0l	equ	0xFE9
  7187                           wreg	equ	0xFE8
  7188                           indf1	equ	0xFE7
  7189                           plusw1	equ	0xFE3
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           bsr	equ	0xFE0
  7193                           indf2	equ	0xFDF
  7194                           postinc2	equ	0xFDE
  7195                           postdec2	equ	0xFDD
  7196                           plusw2	equ	0xFDB
  7197                           fsr2h	equ	0xFDA
  7198                           fsr2l	equ	0xFD9
  7199                           status	equ	0xFD8
  7200                           
  7201                           	psect	temp
  7202  00003C                     btemp:
  7203                           	opt stack 0
  7204  00003C                     	ds	1
  7205  0000                     int$flags	set	btemp
  7206                           pclatu	equ	0xFFB
  7207                           pclath	equ	0xFFA
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           intcon	equ	0xFF2
  7215                           postinc0	equ	0xFEE
  7216                           fsr0h	equ	0xFEA
  7217                           fsr0l	equ	0xFE9
  7218                           wreg	equ	0xFE8
  7219                           indf1	equ	0xFE7
  7220                           plusw1	equ	0xFE3
  7221                           fsr1h	equ	0xFE2
  7222                           fsr1l	equ	0xFE1
  7223                           bsr	equ	0xFE0
  7224                           indf2	equ	0xFDF
  7225                           postinc2	equ	0xFDE
  7226                           postdec2	equ	0xFDD
  7227                           plusw2	equ	0xFDB
  7228                           fsr2h	equ	0xFDA
  7229                           fsr2l	equ	0xFD9
  7230                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     153
    BANK1           256    226     247
    BANK2           256      0     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S146DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S146DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeed
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeed
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   69583
                                             90 BANK0      5     5      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4709
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   23278
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5171
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    4940
                                              7 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4092
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11394
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    3876
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F       3        0.0%
DATA                 0      0     22F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 19:00:50 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l37 135E  
                                  l67 1834                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01BE                           ?_LCD_String 002A  
                                 l226 0C76                                   l227 0CA6  
                                 l229 0DFC                                   l436 0A1C  
                                 l429 099A                                   l395 041C  
                                 l903 1A3C                                   l913 1A7E  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3000 1652                                  l3010 168A  
                                l2212 1872                                  l3100 117E  
                                l3004 166A                                  l2134 1D06  
                                l3110 11B0                                  l2224 18DC  
                                l2208 186A                                  l2144 1A0A  
                                l3032 0FA6                                  l2250 1940  
                                l2242 1C36                                  l2234 1920  
                                l2218 18AE                                  l2146 1A12  
                                l3130 124E                                  l3122 11F2  
                                l3034 0FB8                                  l3026 0F8A  
                                l2228 18E4                                  l2156 1A32  
                                l2148 1A16                                  l2172 1A74  
                                l2164 1A54                                  l3124 11F8  
                                l3116 11D4                                  l3108 11A4  
                                l3044 0FF0                                  l3132 125A  
                                l2260 1B90                                  l2246 1C48  
                                l2166 1A5C                                  l3134 1274  
                                l3054 1062                                  l3038 0FC0  
                                l2414 1C96                                  l2256 1974  
                                l2168 1A60                                  l3080 10F6  
                                l3056 108A                                  l2264 1BA2  
                                l3240 0D02                                  l3090 1150  
                                l3066 10BA                                  l3250 0DF8  
                                l3092 115A                                  l3068 10C0  
                                l3404 0552                                  l3086 1118  
                                l3238 0CEA                                  l3430 0672  
                                l3422 05E8                                  l3272 0EBA  
                                l3344 0422                                  l3178 149E  
                                l3266 0EA8                                  l3274 0EC0  
                                l3530 0A9A                                  l3522 09BE  
                                l3506 08E6                                  l3450 070A  
                                l3426 0648                                  l3524 0A20  
                                l3532 0AD4                                  l3540 0AE0  
                                l3436 0698                                  l3380 04CE  
                                l3198 0BA8                                  l3542 0AFC  
                                l3518 0950                                  l3462 075A  
                                l3446 0700                                  l3470 077C  
                                l3456 074A                                  l3384 0500  
                                l3490 084C                                  l3458 0750  
                                l3546 0AFE                                  l2932 176A  
                                l3468 0776                                  l3478 07E4  
                                l2944 1790                                  l2960 17C2  
                                l3496 0870                                  l2946 1798  
                                l2938 177A                                  l2964 17D0  
                                l2956 17B8                                  l2948 179C  
                                l2974 1336                                  l2982 17F8  
                                l2986 1814                                  l2978 17DC  
                                l2996 163A                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1305 14EC  
                                u1315 14FA                                  u1325 151A  
                                u3030 0A5E                                  _LATB 000F8A  
                                u1335 1528                                  u1600 1964  
                                u1345 1558                                  u1610 1994  
                                u3107 15B4                                  u1285 14C0  
                                u2405 13AC                                  u3117 15C2  
                                u1295 14CE                                  u1607 195A  
                                u1535 187A                                  u3207 182E  
                                u3127 15D0                                  u1617 198A  
                                u3217 1B96                                  u3137 15E2  
                                u3307 1C7A                                  u1395 1C5C  
                                u3227 140A                                  u3147 15F4  
                                u3067 047E                                  u1396 1C5E  
                                u3317 1574                                  u1565 18EC  
                                u3237 1420                                  u3157 160A  
                                u3077 0496                                  u3327 1D40  
                                u3247 1684                                  u3167 161E  
                                u3087 158E                                  u2384 12F6  
                                u3257 18A2                                  u2385 12F2  
                                u3177 1630                                  u3097 15A4  
                                u2801 0378                                  u2394 1352  
                                u3267 1914                                  u2395 134E  
                                u3187 0BDC                                  u3277 1C4A  
                                u3197 0BF4                                  u1845 1C92  
                                u1846 1C94                                  u3287 196E  
                                u3297 1C6A                                  u1865 1CA4  
                                u1866 1CA6                                  u2791 0366  
                                u2880 06CA                                  u2890 06DE  
                                u2882 06CC                                  u2892 06E0  
                                u2990 092C                                  _main 0350  
                                _mode 003B                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 1638  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00B0                          ___param_bank 000010  
                     i2_delay_tenth_s 1BB4                       __end_of_SendLCD 1C82  
                     __end_of_SetLine 1C52                    ScanWithRange@F3892 00F5  
                         ScanIR@F3879 00F1                                 ?_main 0001  
                     __end_of___awdiv 17DA                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1A46  
                     __end_of___lwmod 1A88                                 i1l378 008E  
                               i2l386 171A                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1D3C  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1638  
                  ScanWithRange@loops 0071                       __end_of_dpowers 030B  
                     __end_of_isdigit 1D0E                                 main@i 01CE  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 1282  
              __size_of_ScanWithRange 045C                        __CFG_MCLRE$OFF 000000  
                     __initialization 1BEC                          __end_of_main 0B20  
                        __end_of_stop 16CC                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 0099                  __end_of_enableSensor 1CA8  
                 VerifySignal@hexByte 002C                                ??_main 00BA  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2660 008A  
                              i1l2662 008C                                i2l2630 1BDA  
                      __CFG_WDTEN$OFF 000000                                i2l2626 1BC8  
                              i2l2670 170C                                i2l2674 1712  
               __end_of_delay_tenth_s 1BB4                                _LCDout 14B6  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00AB  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1BEC                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 13BC  
                           ??_SetLine 002A                           fullSpeed@mL 0062  
                         fullSpeed@mR 0064                                ___wmul 1CA8  
                           ??___awdiv 002E                      __end_of_initRFID 1D2A  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1CCE                  __size_of_grabRightIR 0072  
                              clear_0 1BF2                                clear_1 1BFE  
                              clear_2 1C0A                      ___awdiv@quotient 0030  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0B20                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00B3                      __end_of_turnLeft 1B42  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1C14  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1D4A                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1A88                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002B  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 174E  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BF  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __size_of_fullSpeed 0080  
                  __end_of_LCD_String 199C                               ?_ScanIR 006D  
                      ?_fullSpeedBack 0067                 __size_of_enableSensor 0026  
                             ?___wmul 0024                   grabLeftIR@IR_signal 0029  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                            _grabLeftIR 18CC  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 1C82  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1B7C  
              ScanWithRange@RFID_Read 0079                               _SendLCD 1C52  
                             __Hparam 0000                               _SetLine 1C22  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 1756                       __size_of___wmul 0026  
                             ___lwdiv 19F4                               ___lwmod 1A46  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1BEC                       ??_ScanWithRange 007B  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 1D2A  
                             __ptext2 1D0E                               __ptext3 1B42  
                             __ptext4 157C                               __ptext5 1CCE  
                             __ptext6 1A88                               __ptext7 1C82  
                             __ptext8 199C                               __ptext9 0B20  
                           _T0CONbits 000FD5                               _initLCD 157C  
                   __end_of_initTimer 1D3C                               _dpowers 0301  
                   __end_of_fullSpeed 185A                               _isdigit 1CF0  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 0100                               _sprintf 0F7C  
                      __pintcode_body 16CC                  end_of_initialization 1C14  
                      ScanWithRange@i 00AC                        ScanWithRange@n 00A8  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 16CC  
                  ScanIR@SensorResult 009B                       ??_fullSpeedBack 003A  
                           _RFID_Read 01F6                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
              ScanWithRange@LeftFlick 00AA                     __end_of_turnRight 1B04  
                         ?_grabLeftIR 0024                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0026                ScanWithRange@RightFlag 00B8  
                      __end_of_LCDout 157C                             _TXSTAbits 000FAC  
                           ScanIR@buf 0071                         ??_grabRightIR 0026  
                      __end_of_ScanIR 14B6                        _ReceivedString 01E6  
                      __end_of___wmul 1CCE                     ScanWithRange@Move 0075  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1CF0  
              __size_of_delay_tenth_s 0038                   start_initialization 1BEC  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 003A  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1756  
                            ??_ScanIR 0039                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 18CC                          _initMotorPWM 1B42  
                         __pbssCOMRAM 003A                        fullSpeed@power 0066  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$2085 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1B7C                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                             __pintcode 0008  
                __end_of_VerifySignal 19F4                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 01C9  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003E  
                       ??_setMotorPWM 0034                             _initTimer 1D2A  
                           _fullSpeed 17DA                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATBbits 000F8A                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u333_47 1BCE                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3893 0200  
                           main@F3895 00BF                             main@F3898 01E2  
                         _grabRightIR 185A                 ScanWithRange@LeftFlag 00B1  
                grabRightIR@IR_signal 0029                     ___wmul@multiplier 0024  
               __end_of_ScanWithRange 0F7C                          setMotorPWM@m 0032  
               ScanWithRange@MoveTime 0073                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 0077                              ScanIR@mL 006D  
                            ScanIR@mR 006F                          ??_grabLeftIR 0026  
                          ?_initTimer 0001                             _turnRight 1AC6  
                          ?_fullSpeed 0062                      ScanWithRange@buf 0080  
                 __end_of_setMotorPWM 13BC                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1AC6                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 193E                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1AC6  
                            __ptext11 1B04                              __ptext20 1CA8  
                            __ptext12 17DA                              __ptext21 1A46  
                            __ptext13 1B7C                              __ptext22 19F4  
                            __ptext14 13BC                              __ptext23 185A  
                            __ptext15 1638                              __ptext32 1BB4  
                            __ptext24 18CC                              __ptext16 1282  
                            __ptext25 1C22                              __ptext17 1756  
                            __ptext26 193E                              __ptext18 0F7C  
                            __ptext27 1C52                              __ptext19 1CF0  
                            __ptext28 14B6                              __ptext29 1D3C  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 1D0E             ScanWithRange@SensorResult 00B4  
                      turnRight@power 006B                         __size_of_main 07D0  
                  main@DirectionFound 01CD                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 0058  
                            int$flags 003C                              main@Move 01CF  
                 _InterruptHandlerLow 0018                            _LCD_String 193E  
                            _turnLeft 1B04                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002A  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           ??_fullSpeed 0039  
                         _setMotorPWM 1282                          _VerifySignal 199C  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00AE                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
