

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Mon Mar 19 16:43:48 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISBbits	set	3987
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISDbits	set	3989
   104  0000                     _TRISEbits	set	3990
   105  0000                     _TXREG	set	4013
   106  0000                     _TXSTAbits	set	4012
   107  0000                     _PDC0H	set	3960
   108  0000                     _PDC0L	set	3961
   109  0000                     _PDC1H	set	3958
   110  0000                     _PDC1L	set	3959
   111  00030B                     STR_6:
   112  00030B  20                 	db	32
   113  00030C  20                 	db	32
   114  00030D  20                 	db	32
   115  00030E  20                 	db	32
   116  00030F  20                 	db	32
   117  000310  20                 	db	32
   118  000311  25                 	db	37
   119  000312  30                 	db	48	;'0'
   120  000313  34                 	db	52	;'4'
   121  000314  64                 	db	100	;'d'
   122  000315  2C                 	db	44
   123  000316  20                 	db	32
   124  000317  25                 	db	37
   125  000318  30                 	db	48	;'0'
   126  000319  34                 	db	52	;'4'
   127  00031A  64                 	db	100	;'d'
   128  00031B  00                 	db	0
   129  00031C                     STR_5:
   130  00031C  20                 	db	32
   131  00031D  20                 	db	32
   132  00031E  20                 	db	32
   133  00031F  20                 	db	32
   134  000320  20                 	db	32
   135  000321  20                 	db	32
   136  000322  49                 	db	73	;'I'
   137  000323  6E                 	db	110	;'n'
   138  000324  65                 	db	101	;'e'
   139  000325  72                 	db	114	;'r'
   140  000326  74                 	db	116	;'t'
   141  000327  20                 	db	32
   142  000328  4D                 	db	77	;'M'
   143  000329  6F                 	db	111	;'o'
   144  00032A  64                 	db	100	;'d'
   145  00032B  65                 	db	101	;'e'
   146  00032C  00                 	db	0
   147  00032D                     STR_1:
   148  00032D  20                 	db	32
   149  00032E  20                 	db	32
   150  00032F  20                 	db	32
   151  000330  20                 	db	32
   152  000331  20                 	db	32
   153  000332  53                 	db	83	;'S'
   154  000333  63                 	db	99	;'c'
   155  000334  61                 	db	97	;'a'
   156  000335  6E                 	db	110	;'n'
   157  000336  49                 	db	73	;'I'
   158  000337  52                 	db	82	;'R'
   159  000338  00                 	db	0
   160  000339                     STR_8:
   161  000339  47                 	db	71	;'G'
   162  00033A  6F                 	db	111	;'o'
   163  00033B  69                 	db	105	;'i'
   164  00033C  6E                 	db	110	;'n'
   165  00033D  67                 	db	103	;'g'
   166  00033E  20                 	db	32
   167  00033F  48                 	db	72	;'H'
   168  000340  6F                 	db	111	;'o'
   169  000341  6D                 	db	109	;'m'
   170  000342  65                 	db	101	;'e'
   171  000343  00                 	db	0
   172  000344                     STR_7:
   173  000344  53                 	db	83	;'S'
   174  000345  65                 	db	101	;'e'
   175  000346  61                 	db	97	;'a'
   176  000347  72                 	db	114	;'r'
   177  000348  63                 	db	99	;'c'
   178  000349  68                 	db	104	;'h'
   179  00034A  69                 	db	105	;'i'
   180  00034B  6E                 	db	110	;'n'
   181  00034C  67                 	db	103	;'g'
   182  00034D  00                 	db	0
   183  0000                     
   184                           ; #config settings
   185  00034E  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001CF2                     __pcinit:
   189                           	opt stack 0
   190  001CF2                     start_initialization:
   191                           	opt stack 0
   192  001CF2                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK2 (100 bytes)
   196  001CF2  EE02  F000         	lfsr	0,__pbssBANK2
   197  001CF6  0E64               	movlw	100
   198  001CF8                     clear_0:
   199  001CF8  6AEE               	clrf	postinc0,c
   200  001CFA  06E8               	decf	wreg,f,c
   201  001CFC  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK1 (21 bytes)
   204  001CFE  EE01  F0E2         	lfsr	0,__pbssBANK1
   205  001D02  0E15               	movlw	21
   206  001D04                     clear_1:
   207  001D04  6AEE               	clrf	postinc0,c
   208  001D06  06E8               	decf	wreg,f,c
   209  001D08  E1FD               	bnz	clear_1
   210                           
   211                           ; Clear objects allocated to BANK0 (58 bytes)
   212  001D0A  EE00  F0BF         	lfsr	0,__pbssBANK0
   213  001D0E  0E3A               	movlw	58
   214  001D10                     clear_2:
   215  001D10  6AEE               	clrf	postinc0,c
   216  001D12  06E8               	decf	wreg,f,c
   217  001D14  E1FD               	bnz	clear_2
   218                           
   219                           ; Clear objects allocated to COMRAM (2 bytes)
   220  001D16  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   221  001D18  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   222  001D1A                     end_of_initialization:
   223                           	opt stack 0
   224  001D1A                     __end_of__initialization:
   225                           	opt stack 0
   226  001D1A  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   227  001D1C  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   228  001D1E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   229  001D20  6EF8               	movwf	tblptru,c
   230  001D22  0100               	movlb	0
   231  001D24  EFA8  F001         	goto	_main	;jump to C main() function
   232                           tblptru	equ	0xFF8
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssCOMRAM
   237  00003A                     __pbssCOMRAM:
   238                           	opt stack 0
   239  00003A                     _i:
   240                           	opt stack 0
   241  00003A                     	ds	1
   242  00003B                     _mode:
   243                           	opt stack 0
   244  00003B                     	ds	1
   245                           tblptru	equ	0xFF8
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           
   249                           	psect	bssBANK0
   250  0000BF                     __pbssBANK0:
   251                           	opt stack 0
   252  0000BF                     main@F3895:
   253                           	opt stack 0
   254  0000BF                     	ds	50
   255  0000F1                     ScanIR@F3879:
   256                           	opt stack 0
   257  0000F1                     	ds	4
   258  0000F5                     ScanWithRange@F3892:
   259                           	opt stack 0
   260  0000F5                     	ds	4
   261                           tblptru	equ	0xFF8
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265                           	psect	bssBANK1
   266  0001E2                     __pbssBANK1:
   267                           	opt stack 0
   268  0001E2                     main@F3898:
   269                           	opt stack 0
   270  0001E2                     	ds	4
   271  0001E6                     _ReceivedString:
   272                           	opt stack 0
   273  0001E6                     	ds	16
   274  0001F6                     _RFID_Read:
   275                           	opt stack 0
   276  0001F6                     	ds	1
   277                           tblptru	equ	0xFF8
   278                           postinc0	equ	0xFEE
   279                           wreg	equ	0xFE8
   280                           
   281                           	psect	bssBANK2
   282  000200                     __pbssBANK2:
   283                           	opt stack 0
   284  000200                     main@F3893:
   285                           	opt stack 0
   286  000200                     	ds	100
   287                           tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           	psect	cstackBANK1
   292  000100                     __pcstackBANK1:
   293                           	opt stack 0
   294  000100                     main@buf:
   295                           	opt stack 0
   296                           
   297                           ; 40 bytes @ 0x0
   298  000100                     	ds	40
   299  000128                     main@MoveType:
   300                           	opt stack 0
   301                           
   302                           ; 50 bytes @ 0x28
   303  000128                     	ds	50
   304  00015A                     main@MoveTime:
   305                           	opt stack 0
   306                           
   307                           ; 100 bytes @ 0x5A
   308  00015A                     	ds	100
   309  0001BE                     main@Message:
   310                           	opt stack 0
   311                           
   312                           ; 10 bytes @ 0xBE
   313  0001BE                     	ds	10
   314  0001C8                     main@ScanAngle:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0xC8
   318  0001C8                     	ds	1
   319  0001C9                     main@SensorResult:
   320                           	opt stack 0
   321                           
   322                           ; 4 bytes @ 0xC9
   323  0001C9                     	ds	4
   324  0001CD                     main@DirectionFound:
   325                           	opt stack 0
   326                           
   327                           ; 1 bytes @ 0xCD
   328  0001CD                     	ds	1
   329  0001CE                     main@i:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0xCE
   333  0001CE                     	ds	1
   334  0001CF                     main@Move:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0xCF
   338  0001CF                     	ds	1
   339  0001D0                     main@mL:
   340                           	opt stack 0
   341                           
   342                           ; 9 bytes @ 0xD0
   343  0001D0                     	ds	9
   344  0001D9                     main@mR:
   345                           	opt stack 0
   346                           
   347                           ; 9 bytes @ 0xD9
   348  0001D9                     	ds	9
   349                           tblptru	equ	0xFF8
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	cstackBANK0
   354  000060                     __pcstackBANK0:
   355                           	opt stack 0
   356  000060                     ??_sprintf:
   357  000060                     setMotorPWM@PWMduty:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x0
   361  000060                     	ds	2
   362  000062                     stop@mL:
   363                           	opt stack 0
   364  000062                     fullSpeedAhead@mL:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x2
   368  000062                     	ds	2
   369  000064                     stop@mR:
   370                           	opt stack 0
   371  000064                     fullSpeedAhead@mR:
   372                           	opt stack 0
   373  000064                     sprintf@ap:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x4
   377  000064                     	ds	2
   378  000066                     fullSpeedAhead@power:
   379                           	opt stack 0
   380  000066                     sprintf@prec:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x6
   384  000066                     	ds	1
   385  000067                     turnLeft@mL:
   386                           	opt stack 0
   387  000067                     turnRight@mL:
   388                           	opt stack 0
   389  000067                     fullSpeedBack@mL:
   390                           	opt stack 0
   391  000067                     sprintf@val:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x7
   395  000067                     	ds	2
   396  000069                     sprintf@flag:
   397                           	opt stack 0
   398  000069                     turnLeft@mR:
   399                           	opt stack 0
   400  000069                     turnRight@mR:
   401                           	opt stack 0
   402  000069                     fullSpeedBack@mR:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x9
   406  000069                     	ds	1
   407  00006A                     sprintf@width:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0xA
   411  00006A                     	ds	1
   412  00006B                     turnLeft@power:
   413                           	opt stack 0
   414  00006B                     turnRight@power:
   415                           	opt stack 0
   416  00006B                     fullSpeedBack@power:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xB
   420  00006B                     	ds	1
   421  00006C                     sprintf@c:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0xC
   425  00006C                     	ds	1
   426  00006D                     ScanIR@mL:
   427                           	opt stack 0
   428  00006D                     ScanWithRange@mL:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0xD
   432  00006D                     	ds	2
   433  00006F                     ScanIR@mR:
   434                           	opt stack 0
   435  00006F                     ScanWithRange@mR:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0xF
   439  00006F                     	ds	2
   440  000071                     ScanWithRange@loops:
   441                           	opt stack 0
   442  000071                     ScanIR@buf:
   443                           	opt stack 0
   444                           
   445                           ; 40 bytes @ 0x11
   446  000071                     	ds	2
   447  000073                     ScanWithRange@MoveTime:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x13
   451  000073                     	ds	2
   452  000075                     ScanWithRange@Move:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x15
   456  000075                     	ds	2
   457  000077                     ScanWithRange@MoveType:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x17
   461  000077                     	ds	2
   462  000079                     ScanWithRange@RFID_Read:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x19
   466  000079                     	ds	2
   467  00007B                     ??_ScanWithRange:
   468                           
   469                           ; 0 bytes @ 0x1B
   470  00007B                     	ds	5
   471  000080                     ScanWithRange@buf:
   472                           	opt stack 0
   473                           
   474                           ; 40 bytes @ 0x20
   475  000080                     	ds	25
   476  000099                     ScanIR@DirectionMoveThreshold:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x39
   480  000099                     	ds	2
   481  00009B                     ScanIR@SensorResult:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x3B
   485  00009B                     	ds	13
   486  0000A8                     ScanWithRange@n:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x48
   490  0000A8                     	ds	2
   491  0000AA                     ScanWithRange@i:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x4A
   495  0000AA                     	ds	2
   496  0000AC                     ScanWithRange@DirectionFoundThreshold:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x4C
   500  0000AC                     	ds	2
   501  0000AE                     ScanWithRange@MotorPower:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x4E
   505  0000AE                     	ds	1
   506  0000AF                     ScanWithRange@LeftFlick:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x4F
   510  0000AF                     	ds	1
   511  0000B0                     ScanWithRange@MiniLeftFlick:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x50
   515  0000B0                     	ds	1
   516  0000B1                     ScanWithRange@LeftFlag:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x51
   520  0000B1                     	ds	2
   521  0000B3                     ScanWithRange@TimeAboveThreshold:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x53
   525  0000B3                     	ds	1
   526  0000B4                     ScanWithRange@SensorResult:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x54
   530  0000B4                     	ds	4
   531  0000B8                     ScanWithRange@RightFlag:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x58
   535  0000B8                     	ds	2
   536  0000BA                     ??_main:
   537                           
   538                           ; 0 bytes @ 0x5A
   539  0000BA                     	ds	5
   540                           tblptru	equ	0xFF8
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           
   544                           	psect	cstackCOMRAM
   545  000001                     __pcstackCOMRAM:
   546                           	opt stack 0
   547  000001                     ??i2_delay_tenth_s:
   548                           
   549                           ; 0 bytes @ 0x0
   550  000001                     	ds	1
   551  000002                     i2delay_tenth_s@tenth_seconds:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x1
   555  000002                     	ds	1
   556  000003                     i2delay_tenth_s@i:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     ??_InterruptHandlerHigh:
   562                           
   563                           ; 0 bytes @ 0x4
   564  000005                     	ds	14
   565  000013                     ??_InterruptHandlerLow:
   566                           
   567                           ; 0 bytes @ 0x12
   568  000013                     	ds	17
   569  000024                     ??_isdigit:
   570  000024                     ??_LCDout:
   571  000024                     ??_delay_tenth_s:
   572  000024                     ?_grabRightIR:
   573                           	opt stack 0
   574  000024                     ?_grabLeftIR:
   575                           	opt stack 0
   576  000024                     ?___wmul:
   577                           	opt stack 0
   578  000024                     ?___lwdiv:
   579                           	opt stack 0
   580  000024                     enableSensor@status:
   581                           	opt stack 0
   582  000024                     VerifySignal@Signal:
   583                           	opt stack 0
   584  000024                     ___wmul@multiplier:
   585                           	opt stack 0
   586  000024                     ___lwdiv@dividend:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x23
   590  000024                     	ds	1
   591  000025                     enableSensor@sensor:
   592                           	opt stack 0
   593  000025                     delay_tenth_s@tenth_seconds:
   594                           	opt stack 0
   595  000025                     _isdigit$1986:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x24
   599  000025                     	ds	1
   600  000026                     ??_grabRightIR:
   601  000026                     ??_grabLeftIR:
   602  000026                     ??_VerifySignal:
   603  000026                     isdigit@c:
   604                           	opt stack 0
   605  000026                     delay_tenth_s@i:
   606                           	opt stack 0
   607  000026                     ___wmul@multiplicand:
   608                           	opt stack 0
   609  000026                     ___lwdiv@divisor:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x25
   613  000026                     	ds	1
   614  000027                     LCDout@number:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x26
   618  000027                     	ds	1
   619  000028                     SendLCD@type:
   620                           	opt stack 0
   621  000028                     ___wmul@product:
   622                           	opt stack 0
   623  000028                     ___lwdiv@quotient:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x27
   627  000028                     	ds	1
   628  000029                     SendLCD@Byte:
   629                           	opt stack 0
   630  000029                     grabRightIR@IR_signal:
   631                           	opt stack 0
   632  000029                     grabLeftIR@IR_signal:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x28
   636  000029                     	ds	1
   637  00002A                     ??_initLCD:
   638  00002A                     ?___awdiv:
   639                           	opt stack 0
   640  00002A                     SetLine@line:
   641                           	opt stack 0
   642  00002A                     VerifySignal@i:
   643                           	opt stack 0
   644  00002A                     ___lwdiv@counter:
   645                           	opt stack 0
   646  00002A                     LCD_String@string:
   647                           	opt stack 0
   648  00002A                     ___awdiv@dividend:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x29
   652  00002A                     	ds	1
   653  00002B                     ?___lwmod:
   654                           	opt stack 0
   655  00002B                     grabRightIR@i:
   656                           	opt stack 0
   657  00002B                     grabLeftIR@i:
   658                           	opt stack 0
   659  00002B                     VerifySignal@checksum:
   660                           	opt stack 0
   661  00002B                     ___lwmod@dividend:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x2A
   665  00002B                     	ds	1
   666  00002C                     VerifySignal@hexByte:
   667                           	opt stack 0
   668  00002C                     ___awdiv@divisor:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x2B
   672  00002C                     	ds	1
   673  00002D                     ___lwmod@divisor:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x2C
   677  00002D                     	ds	1
   678  00002E                     ___awdiv@counter:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x2D
   682  00002E                     	ds	1
   683  00002F                     ___awdiv@sign:
   684                           	opt stack 0
   685  00002F                     ___lwmod@counter:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x2E
   689  00002F                     	ds	1
   690  000030                     ?_sprintf:
   691                           	opt stack 0
   692  000030                     sprintf@sp:
   693                           	opt stack 0
   694  000030                     ___awdiv@quotient:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x2F
   698  000030                     	ds	2
   699  000032                     setMotorPWM@m:
   700                           	opt stack 0
   701  000032                     sprintf@f:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x31
   705  000032                     	ds	2
   706  000034                     ??_setMotorPWM:
   707                           
   708                           ; 0 bytes @ 0x33
   709  000034                     	ds	5
   710  000039                     ??_ScanIR:
   711                           
   712                           ; 0 bytes @ 0x38
   713  000039                     	ds	1
   714  00003A                     tblptru	equ	0xFF8
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           
   718                           ; 0 bytes @ 0x39
   719 ;;
   720 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   721 ;;
   722 ;; *************** function _main *****************
   723 ;; Defined at:
   724 ;;		line 51 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  MoveTime      100   90[BANK1 ] int [50]
   729 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   730 ;;  buf            40    0[BANK1 ] unsigned char [40]
   731 ;;  Message        10  190[BANK1 ] unsigned char [10]
   732 ;;  mR              9  217[BANK1 ] struct DC_motor
   733 ;;  mL              9  208[BANK1 ] struct DC_motor
   734 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   735 ;;  Move            1  207[BANK1 ] char 
   736 ;;  i               1  206[BANK1 ] unsigned char 
   737 ;;  DirectionFou    1  205[BANK1 ] char 
   738 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   739 ;; Return value:  Size  Location     Type
   740 ;;		None               void
   741 ;; Registers used:
   742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   748 ;;      Params:         0       0       0       0
   749 ;;      Locals:         0       0     226       0
   750 ;;      Temps:          0       5       0       0
   751 ;;      Totals:         0       5     226       0
   752 ;;Total ram usage:      231 bytes
   753 ;; Hardware stack levels required when called:    8
   754 ;; This function calls:
   755 ;;		_LCD_String
   756 ;;		_ScanIR
   757 ;;		_ScanWithRange
   758 ;;		_SendLCD
   759 ;;		_SetLine
   760 ;;		_VerifySignal
   761 ;;		_delay_tenth_s
   762 ;;		_enableSensor
   763 ;;		_fullSpeedAhead
   764 ;;		_fullSpeedBack
   765 ;;		_grabLeftIR
   766 ;;		_grabRightIR
   767 ;;		_initIR
   768 ;;		_initLCD
   769 ;;		_initMotorPWM
   770 ;;		_initRFID
   771 ;;		_initTimer
   772 ;;		_sprintf
   773 ;;		_stop
   774 ;;		_turnLeft
   775 ;;		_turnRight
   776 ;; This function is called by:
   777 ;;		Startup code after reset
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text0
   782  000350                     __ptext0:
   783                           	opt stack 0
   784  000350                     _main:
   785                           	opt stack 23
   786                           
   787                           ;main.c: 54: unsigned char Message[10];
   788                           ;main.c: 55: unsigned char i=0;
   789                           
   790                           ;incstack = 0
   791  000350  0E00               	movlw	0
   792  000352  0101               	movlb	1	; () banked
   793  000354  6FCE               	movwf	main@i& (0+255),b
   794                           
   795                           ;main.c: 56: signed char DirectionFound=0;
   796  000356  0E00               	movlw	0
   797  000358  0101               	movlb	1	; () banked
   798  00035A  6FCD               	movwf	main@DirectionFound& (0+255),b
   799                           
   800                           ; BSR set to: 1
   801                           ;main.c: 57: int MoveTime[50] = { 0 };
   802  00035C  EE22  F000         	lfsr	2,main@F3893
   803  000360  EE11  F05A         	lfsr	1,main@MoveTime
   804  000364  0E63               	movlw	99
   805  000366                     u2771:
   806  000366  CFDB FFE3          	movff	plusw2,plusw1
   807  00036A  06E8               	decf	wreg,f,c
   808  00036C  E2FC               	bc	u2771
   809                           
   810                           ; BSR set to: 1
   811                           ;main.c: 60: char MoveType[50] = { 0 };
   812  00036E  EE20  F0BF         	lfsr	2,main@F3895
   813  000372  EE11  F028         	lfsr	1,main@MoveType
   814  000376  0E31               	movlw	49
   815  000378                     u2781:
   816  000378  CFDB FFE3          	movff	plusw2,plusw1
   817  00037C  06E8               	decf	wreg,f,c
   818  00037E  E2FC               	bc	u2781
   819                           
   820                           ;main.c: 63: signed char Move=0;
   821  000380  0E00               	movlw	0
   822  000382  0101               	movlb	1	; () banked
   823  000384  6FCF               	movwf	main@Move& (0+255),b
   824                           
   825                           ; BSR set to: 1
   826                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   827  000386  C1E2  F1C9         	movff	main@F3898,main@SensorResult
   828  00038A  C1E3  F1CA         	movff	main@F3898+1,main@SensorResult+1
   829  00038E  C1E4  F1CB         	movff	main@F3898+2,main@SensorResult+2
   830  000392  C1E5  F1CC         	movff	main@F3898+3,main@SensorResult+3
   831                           
   832                           ;main.c: 65: char buf[40];
   833                           ;main.c: 67: unsigned char ScanAngle=60;
   834  000396  0E3C               	movlw	60
   835  000398  0101               	movlb	1	; () banked
   836  00039A  6FC8               	movwf	main@ScanAngle& (0+255),b
   837                           
   838                           ; BSR set to: 1
   839                           ;main.c: 76: INTCONbits.GIEH=1;
   840  00039C  8EF2               	bsf	intcon,7,c	;volatile
   841                           
   842                           ; BSR set to: 1
   843                           ;main.c: 77: INTCONbits.GIEL=1;
   844  00039E  8CF2               	bsf	intcon,6,c	;volatile
   845                           
   846                           ; BSR set to: 1
   847                           ;main.c: 78: INTCONbits.PEIE=1;
   848  0003A0  8CF2               	bsf	intcon,6,c	;volatile
   849                           
   850                           ; BSR set to: 1
   851                           ;main.c: 79: RCONbits.IPEN=1;
   852  0003A2  8ED0               	bsf	4048,7,c	;volatile
   853                           
   854                           ; BSR set to: 1
   855                           ;main.c: 82: IPR1bits.RCIP=0;
   856  0003A4  9A9F               	bcf	3999,5,c	;volatile
   857                           
   858                           ; BSR set to: 1
   859                           ;main.c: 83: PIE1bits.RCIE=1;
   860  0003A6  8A9D               	bsf	3997,5,c	;volatile
   861                           
   862                           ; BSR set to: 1
   863                           ;main.c: 86: TRISCbits.RC3=1;
   864  0003A8  8694               	bsf	3988,3,c	;volatile
   865                           
   866                           ; BSR set to: 1
   867                           ;main.c: 87: INTCONbits.INT0IE=1;
   868  0003AA  88F2               	bsf	intcon,4,c	;volatile
   869                           
   870                           ; BSR set to: 1
   871                           ;main.c: 90: PIR1bits.RC1IF=0;
   872  0003AC  9A9E               	bcf	3998,5,c	;volatile
   873                           
   874                           ; BSR set to: 1
   875                           ;main.c: 91: INTCONbits.INT0IF=0;
   876  0003AE  92F2               	bcf	intcon,1,c	;volatile
   877                           
   878                           ;main.c: 94: struct DC_motor mL, mR;
   879                           ;main.c: 95: mL.power=0;
   880  0003B0  0E00               	movlw	0
   881  0003B2  0101               	movlb	1	; () banked
   882  0003B4  6FD0               	movwf	main@mL& (0+255),b
   883                           
   884                           ;main.c: 96: mL.direction=1;
   885  0003B6  0E01               	movlw	1
   886  0003B8  0101               	movlb	1	; () banked
   887  0003BA  6FD1               	movwf	(main@mL+1)& (0+255),b
   888                           
   889                           ; BSR set to: 1
   890                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   891  0003BC  0E79               	movlw	121
   892  0003BE  0101               	movlb	1	; () banked
   893  0003C0  6FD2               	movwf	(main@mL+2)& (0+255),b
   894  0003C2  0E0F               	movlw	15
   895  0003C4  0101               	movlb	1	; () banked
   896  0003C6  6FD3               	movwf	(main@mL+3)& (0+255),b
   897                           
   898                           ; BSR set to: 1
   899                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   900  0003C8  0E78               	movlw	120
   901  0003CA  0101               	movlb	1	; () banked
   902  0003CC  6FD4               	movwf	(main@mL+4)& (0+255),b
   903  0003CE  0E0F               	movlw	15
   904  0003D0  0101               	movlb	1	; () banked
   905  0003D2  6FD5               	movwf	(main@mL+5)& (0+255),b
   906                           
   907                           ;main.c: 99: mL.dir_pin=0;
   908  0003D4  0E00               	movlw	0
   909  0003D6  0101               	movlb	1	; () banked
   910  0003D8  6FD6               	movwf	(main@mL+6)& (0+255),b
   911                           
   912                           ;main.c: 100: mL.PWMperiod=199;
   913  0003DA  0E00               	movlw	0
   914  0003DC  0101               	movlb	1	; () banked
   915  0003DE  6FD8               	movwf	(main@mL+8)& (0+255),b
   916  0003E0  0EC7               	movlw	199
   917  0003E2  6FD7               	movwf	(main@mL+7)& (0+255),b
   918                           
   919                           ;main.c: 102: mR.power=0;
   920  0003E4  0E00               	movlw	0
   921  0003E6  0101               	movlb	1	; () banked
   922  0003E8  6FD9               	movwf	main@mR& (0+255),b
   923                           
   924                           ;main.c: 103: mR.direction=1;
   925  0003EA  0E01               	movlw	1
   926  0003EC  0101               	movlb	1	; () banked
   927  0003EE  6FDA               	movwf	(main@mR+1)& (0+255),b
   928                           
   929                           ; BSR set to: 1
   930                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   931  0003F0  0E77               	movlw	119
   932  0003F2  0101               	movlb	1	; () banked
   933  0003F4  6FDB               	movwf	(main@mR+2)& (0+255),b
   934  0003F6  0E0F               	movlw	15
   935  0003F8  0101               	movlb	1	; () banked
   936  0003FA  6FDC               	movwf	(main@mR+3)& (0+255),b
   937                           
   938                           ; BSR set to: 1
   939                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   940  0003FC  0E76               	movlw	118
   941  0003FE  0101               	movlb	1	; () banked
   942  000400  6FDD               	movwf	(main@mR+4)& (0+255),b
   943  000402  0E0F               	movlw	15
   944  000404  0101               	movlb	1	; () banked
   945  000406  6FDE               	movwf	(main@mR+5)& (0+255),b
   946                           
   947                           ;main.c: 106: mR.dir_pin=2;
   948  000408  0E02               	movlw	2
   949  00040A  0101               	movlb	1	; () banked
   950  00040C  6FDF               	movwf	(main@mR+6)& (0+255),b
   951                           
   952                           ;main.c: 107: mR.PWMperiod=199;
   953  00040E  0E00               	movlw	0
   954  000410  0101               	movlb	1	; () banked
   955  000412  6FE1               	movwf	(main@mR+8)& (0+255),b
   956  000414  0EC7               	movlw	199
   957  000416  6FE0               	movwf	(main@mR+7)& (0+255),b
   958                           
   959                           ;main.c: 109: OSCCON = 0x72;
   960  000418  0E72               	movlw	114
   961  00041A  6ED3               	movwf	4051,c	;volatile
   962  00041C                     l390:
   963  00041C  B4D3               	btfsc	4051,2,c	;volatile
   964  00041E  D36C               	goto	l3578
   965  000420  D7FD               	goto	l390
   966  000422                     l3380:
   967                           
   968                           ;main.c: 121: stop(&mL, &mR);
   969  000422  0ED0               	movlw	low main@mL
   970  000424  0100               	movlb	0	; () banked
   971  000426  6F62               	movwf	stop@mL& (0+255),b
   972  000428  0E01               	movlw	high main@mL
   973  00042A  0100               	movlb	0	; () banked
   974  00042C  6F63               	movwf	(stop@mL+1)& (0+255),b
   975  00042E  0ED9               	movlw	low main@mR
   976  000430  0100               	movlb	0	; () banked
   977  000432  6F64               	movwf	stop@mR& (0+255),b
   978  000434  0E01               	movlw	high main@mR
   979  000436  0100               	movlb	0	; () banked
   980  000438  6F65               	movwf	(stop@mR+1)& (0+255),b
   981  00043A  ECBC  F00B         	call	_stop	;wreg free
   982                           
   983                           ;main.c: 124: RFID_Read=0;
   984  00043E  0E00               	movlw	0
   985  000440  0101               	movlb	1	; () banked
   986  000442  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
   987                           
   988                           ; BSR set to: 1
   989                           ;main.c: 125: Move=0;
   990  000444  0E00               	movlw	0
   991  000446  0101               	movlb	1	; () banked
   992  000448  6FCF               	movwf	main@Move& (0+255),b
   993                           
   994                           ; BSR set to: 1
   995                           ;main.c: 128: SensorResult[0]=grabLeftIR();
   996  00044A  EC06  F00D         	call	_grabLeftIR	;wreg free
   997  00044E  C024  F1C9         	movff	?_grabLeftIR,main@SensorResult
   998  000452  C025  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
   999                           
  1000                           ;main.c: 129: SensorResult[1]=grabRightIR();
  1001  000456  ECCD  F00C         	call	_grabRightIR	;wreg free
  1002  00045A  C024  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1003  00045E  C025  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1004                           
  1005                           ;main.c: 133: CAP1BUFH=0;
  1006  000462  0E00               	movlw	0
  1007  000464  6E69               	movwf	3945,c	;volatile
  1008                           
  1009                           ;main.c: 134: CAP1BUFL=0;
  1010  000466  0E00               	movlw	0
  1011  000468  6E68               	movwf	3944,c	;volatile
  1012                           
  1013                           ;main.c: 135: CAP2BUFH=0;
  1014  00046A  0E00               	movlw	0
  1015  00046C  6E67               	movwf	3943,c	;volatile
  1016                           
  1017                           ;main.c: 136: CAP2BUFL=0;
  1018  00046E  0E00               	movlw	0
  1019  000470  6E66               	movwf	3942,c	;volatile
  1020                           
  1021                           ;main.c: 139: SendLCD(0b00000001,0);
  1022  000472  0E00               	movlw	0
  1023  000474  6E28               	movwf	SendLCD@type,c
  1024  000476  0E01               	movlw	1
  1025  000478  ECC5  F00E         	call	_SendLCD
  1026                           
  1027                           ;main.c: 140: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1028  00047C  0E21               	movlw	33
  1029  00047E                     u3037:
  1030  00047E  2EE8               	decfsz	wreg,f,c
  1031  000480  D7FE               	goto	u3037
  1032  000482  F000               	nop	
  1033                           
  1034                           ;main.c: 141: SendLCD(0b00000010,0);
  1035  000484  0E00               	movlw	0
  1036  000486  6E28               	movwf	SendLCD@type,c
  1037  000488  0E02               	movlw	2
  1038  00048A  ECC5  F00E         	call	_SendLCD
  1039                           
  1040                           ;main.c: 142: _delay((unsigned long)((2)*(8000000/4000.0)));
  1041  00048E  0E06               	movlw	6
  1042  000490  0100               	movlb	0	; () banked
  1043  000492  6FBA               	movwf	??_main& (0+255),b
  1044  000494  0E30               	movlw	48
  1045  000496                     u3047:
  1046  000496  2EE8               	decfsz	wreg,f,c
  1047  000498  D7FE               	goto	u3047
  1048  00049A  2FBA               	decfsz	??_main& (0+255),f,b
  1049  00049C  D7FC               	goto	u3047
  1050  00049E  D000               	nop2	
  1051                           
  1052                           ;main.c: 143: SetLine(1);
  1053  0004A0  0E01               	movlw	1
  1054  0004A2  ECAD  F00E         	call	_SetLine
  1055                           
  1056                           ;main.c: 144: LCD_String("      Inert Mode");
  1057  0004A6  0E1C               	movlw	low STR_5
  1058  0004A8  6E2A               	movwf	LCD_String@string,c
  1059  0004AA  0E03               	movlw	high STR_5
  1060  0004AC  6E2B               	movwf	LCD_String@string+1,c
  1061  0004AE  EC3F  F00D         	call	_LCD_String	;wreg free
  1062                           
  1063                           ;main.c: 145: SetLine(2);
  1064  0004B2  0E02               	movlw	2
  1065  0004B4  ECAD  F00E         	call	_SetLine
  1066                           
  1067                           ;main.c: 146: if (RFID_Read) {
  1068  0004B8  0101               	movlb	1	; () banked
  1069  0004BA  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1070  0004BC  B4D8               	btfsc	status,2,c
  1071  0004BE  D007               	goto	l3416
  1072                           
  1073                           ; BSR set to: 1
  1074                           ;main.c: 147: LCD_String(Message);
  1075  0004C0  0EBE               	movlw	low main@Message
  1076  0004C2  6E2A               	movwf	LCD_String@string,c
  1077  0004C4  0E01               	movlw	high main@Message
  1078  0004C6  6E2B               	movwf	LCD_String@string+1,c
  1079  0004C8  EC3F  F00D         	call	_LCD_String	;wreg free
  1080                           
  1081                           ;main.c: 148: } else {
  1082  0004CC  D315               	goto	l3578
  1083  0004CE                     l3416:
  1084                           
  1085                           ;main.c: 149: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1086  0004CE  0E00               	movlw	low main@buf
  1087  0004D0  6E30               	movwf	sprintf@sp,c
  1088  0004D2  0E01               	movlw	high main@buf
  1089  0004D4  6E31               	movwf	sprintf@sp+1,c
  1090  0004D6  0E0B               	movlw	low STR_6
  1091  0004D8  6E32               	movwf	sprintf@f,c
  1092  0004DA  0E03               	movlw	high STR_6
  1093  0004DC  6E33               	movwf	sprintf@f+1,c
  1094  0004DE  C1C9  F034         	movff	main@SensorResult,?_sprintf+4
  1095  0004E2  C1CA  F035         	movff	main@SensorResult+1,?_sprintf+5
  1096  0004E6  C1CB  F036         	movff	main@SensorResult+2,?_sprintf+6
  1097  0004EA  C1CC  F037         	movff	main@SensorResult+3,?_sprintf+7
  1098  0004EE  EC5E  F008         	call	_sprintf	;wreg free
  1099                           
  1100                           ;main.c: 150: LCD_String(buf);
  1101  0004F2  0E00               	movlw	low main@buf
  1102  0004F4  6E2A               	movwf	LCD_String@string,c
  1103  0004F6  0E01               	movlw	high main@buf
  1104  0004F8  6E2B               	movwf	LCD_String@string+1,c
  1105  0004FA  EC3F  F00D         	call	_LCD_String	;wreg free
  1106                           
  1107                           ;main.c: 151: }
  1108                           ;main.c: 153: break;
  1109  0004FE  D2FC               	goto	l3578
  1110  000500                     l3420:
  1111                           
  1112                           ;main.c: 157: initMotorPWM();
  1113  000500  EC94  F00E         	call	_initMotorPWM	;wreg free
  1114                           
  1115                           ;main.c: 158: initTimer();
  1116  000504  EC31  F00F         	call	_initTimer	;wreg free
  1117                           
  1118                           ;main.c: 159: initRFID();
  1119  000508  EC23  F00F         	call	_initRFID	;wreg free
  1120                           
  1121                           ;main.c: 160: initLCD();
  1122  00050C  EC5E  F00B         	call	_initLCD	;wreg free
  1123                           
  1124                           ;main.c: 161: initIR();
  1125  000510  EC03  F00F         	call	_initIR	;wreg free
  1126                           
  1127                           ;main.c: 163: enableSensor(0, 1);
  1128  000514  0E01               	movlw	1
  1129  000516  6E24               	movwf	enableSensor@status,c
  1130  000518  0E00               	movlw	0
  1131  00051A  ECDD  F00E         	call	_enableSensor
  1132                           
  1133                           ;main.c: 164: enableSensor(1, 1);
  1134  00051E  0E01               	movlw	1
  1135  000520  6E24               	movwf	enableSensor@status,c
  1136  000522  0E01               	movlw	1
  1137  000524  ECDD  F00E         	call	_enableSensor
  1138                           
  1139                           ;main.c: 167: fullSpeedAhead(&mL, &mR, 100);
  1140  000528  0ED0               	movlw	low main@mL
  1141  00052A  0100               	movlb	0	; () banked
  1142  00052C  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1143  00052E  0E01               	movlw	high main@mL
  1144  000530  0100               	movlb	0	; () banked
  1145  000532  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1146  000534  0ED9               	movlw	low main@mR
  1147  000536  0100               	movlb	0	; () banked
  1148  000538  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1149  00053A  0E01               	movlw	high main@mR
  1150  00053C  0100               	movlb	0	; () banked
  1151  00053E  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1152  000540  0E64               	movlw	100
  1153  000542  0100               	movlb	0	; () banked
  1154  000544  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1155  000546  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  1156                           
  1157                           ;main.c: 168: delay_tenth_s(1);
  1158  00054A  0E01               	movlw	1
  1159  00054C  EC41  F00E         	call	_delay_tenth_s
  1160  000550  D2D2               	goto	l3574
  1161  000552                     l3440:
  1162                           
  1163                           ;main.c: 176: SetLine(1);
  1164  000552  0E01               	movlw	1
  1165  000554  ECAD  F00E         	call	_SetLine
  1166                           
  1167                           ;main.c: 177: LCD_String("Searching");
  1168  000558  0E44               	movlw	low STR_7
  1169  00055A  6E2A               	movwf	LCD_String@string,c
  1170  00055C  0E03               	movlw	high STR_7
  1171  00055E  6E2B               	movwf	LCD_String@string+1,c
  1172  000560  EC3F  F00D         	call	_LCD_String	;wreg free
  1173                           
  1174                           ;main.c: 179: if (DirectionFound==-1) {
  1175  000564  0101               	movlb	1	; () banked
  1176  000566  29CD               	incf	main@DirectionFound& (0+255),w,b
  1177  000568  A4D8               	btfss	status,2,c
  1178  00056A  D03E               	goto	l3458
  1179                           
  1180                           ; BSR set to: 1
  1181                           ;main.c: 184: MoveType[Move]=0;
  1182  00056C  0101               	movlb	1	; () banked
  1183  00056E  51CF               	movf	main@Move& (0+255),w,b
  1184  000570  0D01               	mullw	1
  1185  000572  0E28               	movlw	low main@MoveType
  1186  000574  24F3               	addwf	prodl,w,c
  1187  000576  6ED9               	movwf	fsr2l,c
  1188  000578  0E01               	movlw	high main@MoveType
  1189  00057A  20F4               	addwfc	prodh,w,c
  1190  00057C  6EDA               	movwf	fsr2h,c
  1191  00057E  0E00               	movlw	0
  1192  000580  6EDF               	movwf	indf2,c
  1193                           
  1194                           ;main.c: 185: MoveTime[Move]=6;
  1195  000582  0101               	movlb	1	; () banked
  1196  000584  51CF               	movf	main@Move& (0+255),w,b
  1197  000586  0D02               	mullw	2
  1198  000588  0E5A               	movlw	low main@MoveTime
  1199  00058A  24F3               	addwf	prodl,w,c
  1200  00058C  6ED9               	movwf	fsr2l,c
  1201  00058E  0E01               	movlw	high main@MoveTime
  1202  000590  20F4               	addwfc	prodh,w,c
  1203  000592  6EDA               	movwf	fsr2h,c
  1204  000594  0E06               	movlw	6
  1205  000596  6EDE               	movwf	postinc2,c
  1206  000598  0E00               	movlw	0
  1207  00059A  6EDD               	movwf	postdec2,c
  1208                           
  1209                           ; BSR set to: 1
  1210                           ;main.c: 186: Move++;
  1211  00059C  0101               	movlb	1	; () banked
  1212  00059E  2BCF               	incf	main@Move& (0+255),f,b
  1213                           
  1214                           ; BSR set to: 1
  1215                           ;main.c: 187: fullSpeedAhead(&mL, &mR, 100);
  1216  0005A0  0ED0               	movlw	low main@mL
  1217  0005A2  0100               	movlb	0	; () banked
  1218  0005A4  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1219  0005A6  0E01               	movlw	high main@mL
  1220  0005A8  0100               	movlb	0	; () banked
  1221  0005AA  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1222  0005AC  0ED9               	movlw	low main@mR
  1223  0005AE  0100               	movlb	0	; () banked
  1224  0005B0  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1225  0005B2  0E01               	movlw	high main@mR
  1226  0005B4  0100               	movlb	0	; () banked
  1227  0005B6  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1228  0005B8  0E64               	movlw	100
  1229  0005BA  0100               	movlb	0	; () banked
  1230  0005BC  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1231  0005BE  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  1232                           
  1233                           ;main.c: 188: delay_tenth_s(6);
  1234  0005C2  0E06               	movlw	6
  1235  0005C4  EC41  F00E         	call	_delay_tenth_s
  1236                           
  1237                           ;main.c: 189: stop(&mL,&mR);
  1238  0005C8  0ED0               	movlw	low main@mL
  1239  0005CA  0100               	movlb	0	; () banked
  1240  0005CC  6F62               	movwf	stop@mL& (0+255),b
  1241  0005CE  0E01               	movlw	high main@mL
  1242  0005D0  0100               	movlb	0	; () banked
  1243  0005D2  6F63               	movwf	(stop@mL+1)& (0+255),b
  1244  0005D4  0ED9               	movlw	low main@mR
  1245  0005D6  0100               	movlb	0	; () banked
  1246  0005D8  6F64               	movwf	stop@mR& (0+255),b
  1247  0005DA  0E01               	movlw	high main@mR
  1248  0005DC  0100               	movlb	0	; () banked
  1249  0005DE  6F65               	movwf	(stop@mR+1)& (0+255),b
  1250  0005E0  ECBC  F00B         	call	_stop	;wreg free
  1251                           
  1252                           ;main.c: 190: DirectionFound=0;
  1253  0005E4  0E00               	movlw	0
  1254  0005E6  D042               	goto	L2
  1255  0005E8                     l3458:
  1256                           
  1257                           ; BSR set to: 1
  1258  0005E8  0101               	movlb	1	; () banked
  1259  0005EA  51CD               	movf	main@DirectionFound& (0+255),w,b
  1260  0005EC  0101               	movlb	1	; () banked
  1261  0005EE  A4D8               	btfss	status,2,c
  1262  0005F0  D02B               	goto	l3462
  1263                           
  1264                           ; BSR set to: 1
  1265                           ;main.c: 193: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1266                           ;main.c: 194: &MoveTime, &Move, &MoveType, &RFID_Read);
  1267  0005F2  0ED0               	movlw	low main@mL
  1268  0005F4  0100               	movlb	0	; () banked
  1269  0005F6  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1270  0005F8  0E01               	movlw	high main@mL
  1271  0005FA  0100               	movlb	0	; () banked
  1272  0005FC  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1273  0005FE  0ED9               	movlw	low main@mR
  1274  000600  0100               	movlb	0	; () banked
  1275  000602  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1276  000604  0E01               	movlw	high main@mR
  1277  000606  0100               	movlb	0	; () banked
  1278  000608  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1279  00060A  C1C8  F071         	movff	main@ScanAngle,ScanWithRange@loops
  1280  00060E  0100               	movlb	0	; () banked
  1281  000610  6B72               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1282  000612  0E5A               	movlw	low main@MoveTime
  1283  000614  0100               	movlb	0	; () banked
  1284  000616  6F73               	movwf	ScanWithRange@MoveTime& (0+255),b
  1285  000618  0E01               	movlw	high main@MoveTime
  1286  00061A  0100               	movlb	0	; () banked
  1287  00061C  6F74               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1288  00061E  0ECF               	movlw	low main@Move
  1289  000620  0100               	movlb	0	; () banked
  1290  000622  6F75               	movwf	ScanWithRange@Move& (0+255),b
  1291  000624  0E01               	movlw	high main@Move
  1292  000626  0100               	movlb	0	; () banked
  1293  000628  6F76               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1294  00062A  0E28               	movlw	low main@MoveType
  1295  00062C  0100               	movlb	0	; () banked
  1296  00062E  6F77               	movwf	ScanWithRange@MoveType& (0+255),b
  1297  000630  0E01               	movlw	high main@MoveType
  1298  000632  0100               	movlb	0	; () banked
  1299  000634  6F78               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1300  000636  0EF6               	movlw	low _RFID_Read
  1301  000638  0100               	movlb	0	; () banked
  1302  00063A  6F79               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1303  00063C  0E01               	movlw	high _RFID_Read
  1304  00063E  0100               	movlb	0	; () banked
  1305  000640  6F7A               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1306  000642  EC8D  F005         	call	_ScanWithRange	;wreg free
  1307  000646  D012               	goto	L2
  1308  000648                     l3462:
  1309                           
  1310                           ; BSR set to: 1
  1311  000648  0101               	movlb	1	; () banked
  1312  00064A  05CD               	decf	main@DirectionFound& (0+255),w,b
  1313  00064C  A4D8               	btfss	status,2,c
  1314  00064E  D011               	goto	l3466
  1315                           
  1316                           ; BSR set to: 1
  1317                           ;main.c: 197: DirectionFound=ScanIR(&mL, &mR);
  1318  000650  0ED0               	movlw	low main@mL
  1319  000652  0100               	movlb	0	; () banked
  1320  000654  6F6D               	movwf	ScanIR@mL& (0+255),b
  1321  000656  0E01               	movlw	high main@mL
  1322  000658  0100               	movlb	0	; () banked
  1323  00065A  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1324  00065C  0ED9               	movlw	low main@mR
  1325  00065E  0100               	movlb	0	; () banked
  1326  000660  6F6F               	movwf	ScanIR@mR& (0+255),b
  1327  000662  0E01               	movlw	high main@mR
  1328  000664  0100               	movlb	0	; () banked
  1329  000666  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1330  000668  EC7E  F00A         	call	_ScanIR	;wreg free
  1331  00066C                     L2:
  1332  00066C  0101               	movlb	1	; () banked
  1333  00066E  6FCD               	movwf	main@DirectionFound& (0+255),b
  1334                           
  1335                           ;main.c: 198: } else if (DirectionFound==2) {
  1336  000670  D243               	goto	l3578
  1337  000672                     l3466:
  1338                           
  1339                           ; BSR set to: 1
  1340  000672  0E02               	movlw	2
  1341  000674  0101               	movlb	1	; () banked
  1342  000676  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1343  000678  A4D8               	btfss	status,2,c
  1344  00067A  D23E               	goto	l3578
  1345                           
  1346                           ; BSR set to: 1
  1347                           ;main.c: 200: mode=2;
  1348  00067C  0E02               	movlw	2
  1349  00067E  6E3B               	movwf	_mode,c	;volatile
  1350                           
  1351                           ; BSR set to: 1
  1352                           ;main.c: 201: MoveType[Move]=1;
  1353  000680  0101               	movlb	1	; () banked
  1354  000682  51CF               	movf	main@Move& (0+255),w,b
  1355  000684  0D01               	mullw	1
  1356  000686  0E28               	movlw	low main@MoveType
  1357  000688  24F3               	addwf	prodl,w,c
  1358  00068A  6ED9               	movwf	fsr2l,c
  1359  00068C  0E01               	movlw	high main@MoveType
  1360  00068E  20F4               	addwfc	prodh,w,c
  1361  000690  6EDA               	movwf	fsr2h,c
  1362  000692  0E01               	movlw	1
  1363  000694  6EDF               	movwf	indf2,c
  1364                           
  1365                           ; BSR set to: 1
  1366                           ;main.c: 202: }
  1367                           ;main.c: 204: break;
  1368                           
  1369                           ; BSR set to: 1
  1370                           
  1371                           ; BSR set to: 1
  1372                           
  1373                           ; BSR set to: 1
  1374  000696  D230               	goto	l3578
  1375  000698                     l3472:
  1376                           
  1377                           ;main.c: 211: if (RFID_Read) {
  1378  000698  0101               	movlb	1	; () banked
  1379  00069A  51F6               	movf	_RFID_Read& (0+255),w,b	;volatile
  1380  00069C  B4D8               	btfsc	status,2,c
  1381  00069E  D0A2               	goto	l3514
  1382                           
  1383                           ; BSR set to: 1
  1384                           ;main.c: 212: stop(&mL, &mR);
  1385  0006A0  0ED0               	movlw	low main@mL
  1386  0006A2  0100               	movlb	0	; () banked
  1387  0006A4  6F62               	movwf	stop@mL& (0+255),b
  1388  0006A6  0E01               	movlw	high main@mL
  1389  0006A8  0100               	movlb	0	; () banked
  1390  0006AA  6F63               	movwf	(stop@mL+1)& (0+255),b
  1391  0006AC  0ED9               	movlw	low main@mR
  1392  0006AE  0100               	movlb	0	; () banked
  1393  0006B0  6F64               	movwf	stop@mR& (0+255),b
  1394  0006B2  0E01               	movlw	high main@mR
  1395  0006B4  0100               	movlb	0	; () banked
  1396  0006B6  6F65               	movwf	(stop@mR+1)& (0+255),b
  1397  0006B8  ECBC  F00B         	call	_stop	;wreg free
  1398                           
  1399                           ;main.c: 213: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1400  0006BC  0E03               	movlw	3
  1401  0006BE  0101               	movlb	1	; () banked
  1402  0006C0  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1403  0006C2  A4D8               	btfss	status,2,c
  1404  0006C4  D002               	goto	u2860
  1405  0006C6  0E01               	movlw	1
  1406  0006C8  D001               	goto	u2862
  1407  0006CA                     u2860:
  1408  0006CA  0E00               	movlw	0
  1409  0006CC                     u2862:
  1410  0006CC  0100               	movlb	0	; () banked
  1411  0006CE  6FBA               	movwf	??_main& (0+255),b
  1412  0006D0  0E02               	movlw	2
  1413  0006D2  0101               	movlb	1	; () banked
  1414  0006D4  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1415  0006D6  A4D8               	btfss	status,2,c
  1416  0006D8  D002               	goto	u2870
  1417  0006DA  0E01               	movlw	1
  1418  0006DC  D001               	goto	u2872
  1419  0006DE                     u2870:
  1420  0006DE  0E00               	movlw	0
  1421  0006E0                     u2872:
  1422  0006E0  0100               	movlb	0	; () banked
  1423  0006E2  15BA               	andwf	??_main& (0+255),w,b
  1424  0006E4  A0E8               	btfss	wreg,0,c
  1425  0006E6  D208               	goto	l3578
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;main.c: 214: if (VerifySignal(&ReceivedString)){
  1429  0006E8  0EE6               	movlw	low _ReceivedString
  1430  0006EA  6E24               	movwf	VerifySignal@Signal,c
  1431  0006EC  0E01               	movlw	high _ReceivedString
  1432  0006EE  6E25               	movwf	VerifySignal@Signal+1,c
  1433  0006F0  EC6E  F00D         	call	_VerifySignal	;wreg free
  1434  0006F4  0900               	iorlw	0
  1435  0006F6  B4D8               	btfsc	status,2,c
  1436  0006F8  D041               	goto	l3506
  1437                           
  1438                           ;main.c: 216: for (i=0; i<10; i++){
  1439  0006FA  0E00               	movlw	0
  1440  0006FC  0101               	movlb	1	; () banked
  1441  0006FE  6FCE               	movwf	main@i& (0+255),b
  1442  000700                     l3482:
  1443                           
  1444                           ; BSR set to: 1
  1445  000700  0E09               	movlw	9
  1446  000702  0101               	movlb	1	; () banked
  1447  000704  65CE               	cpfsgt	main@i& (0+255),b
  1448  000706  D001               	goto	l3486
  1449  000708  D020               	goto	l3492
  1450  00070A                     l3486:
  1451                           
  1452                           ; BSR set to: 1
  1453                           ;main.c: 217: Message[i] = ReceivedString[i+1];
  1454  00070A  0101               	movlb	1	; () banked
  1455  00070C  51CE               	movf	main@i& (0+255),w,b
  1456  00070E  0100               	movlb	0	; () banked
  1457  000710  6FBA               	movwf	??_main& (0+255),b
  1458  000712  6BBB               	clrf	(??_main+1)& (0+255),b
  1459  000714  0E01               	movlw	1
  1460  000716  0100               	movlb	0	; () banked
  1461  000718  27BA               	addwf	??_main& (0+255),f,b
  1462  00071A  0E00               	movlw	0
  1463  00071C  23BB               	addwfc	(??_main+1)& (0+255),f,b
  1464  00071E  0EE6               	movlw	low _ReceivedString
  1465  000720  0100               	movlb	0	; () banked
  1466  000722  25BA               	addwf	??_main& (0+255),w,b
  1467  000724  6ED9               	movwf	fsr2l,c
  1468  000726  0E01               	movlw	high _ReceivedString
  1469  000728  0100               	movlb	0	; () banked
  1470  00072A  21BB               	addwfc	(??_main+1)& (0+255),w,b
  1471  00072C  6EDA               	movwf	fsr2h,c
  1472  00072E  0101               	movlb	1	; () banked
  1473  000730  51CE               	movf	main@i& (0+255),w,b
  1474  000732  0D01               	mullw	1
  1475  000734  0EBE               	movlw	low main@Message
  1476  000736  24F3               	addwf	prodl,w,c
  1477  000738  6EE1               	movwf	fsr1l,c
  1478  00073A  0E01               	movlw	high main@Message
  1479  00073C  20F4               	addwfc	prodh,w,c
  1480  00073E  6EE2               	movwf	fsr1h,c
  1481  000740  CFDF FFE7          	movff	indf2,indf1
  1482                           
  1483                           ; BSR set to: 1
  1484  000744  0101               	movlb	1	; () banked
  1485  000746  2BCE               	incf	main@i& (0+255),f,b
  1486  000748  D7DB               	goto	l3482
  1487  00074A                     l3492:
  1488                           
  1489                           ; BSR set to: 1
  1490                           ;main.c: 218: }
  1491                           ;main.c: 221: for (i=0; i<16; i++) {
  1492  00074A  0E00               	movlw	0
  1493  00074C  0101               	movlb	1	; () banked
  1494  00074E  6FCE               	movwf	main@i& (0+255),b
  1495  000750                     l3494:
  1496                           
  1497                           ; BSR set to: 1
  1498  000750  0E0F               	movlw	15
  1499  000752  0101               	movlb	1	; () banked
  1500  000754  65CE               	cpfsgt	main@i& (0+255),b
  1501  000756  D001               	goto	l3498
  1502  000758  D00E               	goto	l3504
  1503  00075A                     l3498:
  1504                           
  1505                           ; BSR set to: 1
  1506                           ;main.c: 222: ReceivedString[i]=0;
  1507  00075A  0101               	movlb	1	; () banked
  1508  00075C  51CE               	movf	main@i& (0+255),w,b
  1509  00075E  0D01               	mullw	1
  1510  000760  0EE6               	movlw	low _ReceivedString
  1511  000762  24F3               	addwf	prodl,w,c
  1512  000764  6ED9               	movwf	fsr2l,c
  1513  000766  0E01               	movlw	high _ReceivedString
  1514  000768  20F4               	addwfc	prodh,w,c
  1515  00076A  6EDA               	movwf	fsr2h,c
  1516  00076C  0E00               	movlw	0
  1517  00076E  6EDF               	movwf	indf2,c
  1518                           
  1519                           ; BSR set to: 1
  1520  000770  0101               	movlb	1	; () banked
  1521  000772  2BCE               	incf	main@i& (0+255),f,b
  1522  000774  D7ED               	goto	l3494
  1523  000776                     l3504:
  1524                           
  1525                           ; BSR set to: 1
  1526                           ;main.c: 223: }
  1527                           ;main.c: 224: mode=3;
  1528  000776  0E03               	movlw	3
  1529  000778  6E3B               	movwf	_mode,c	;volatile
  1530                           
  1531                           ;main.c: 226: } else {
  1532  00077A  D1BE               	goto	l3578
  1533  00077C                     l3506:
  1534                           
  1535                           ;main.c: 227: fullSpeedBack(&mL,&mR, 100);
  1536  00077C  0ED0               	movlw	low main@mL
  1537  00077E  0100               	movlb	0	; () banked
  1538  000780  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1539  000782  0E01               	movlw	high main@mL
  1540  000784  0100               	movlb	0	; () banked
  1541  000786  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1542  000788  0ED9               	movlw	low main@mR
  1543  00078A  0100               	movlb	0	; () banked
  1544  00078C  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1545  00078E  0E01               	movlw	high main@mR
  1546  000790  0100               	movlb	0	; () banked
  1547  000792  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1548  000794  0E64               	movlw	100
  1549  000796  0100               	movlb	0	; () banked
  1550  000798  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1551  00079A  ECE4  F00D         	call	_fullSpeedBack	;wreg free
  1552                           
  1553                           ;main.c: 228: delay_tenth_s(5);
  1554  00079E  0E05               	movlw	5
  1555  0007A0  EC41  F00E         	call	_delay_tenth_s
  1556                           
  1557                           ;main.c: 229: stop(&mL,&mR);
  1558  0007A4  0ED0               	movlw	low main@mL
  1559  0007A6  0100               	movlb	0	; () banked
  1560  0007A8  6F62               	movwf	stop@mL& (0+255),b
  1561  0007AA  0E01               	movlw	high main@mL
  1562  0007AC  0100               	movlb	0	; () banked
  1563  0007AE  6F63               	movwf	(stop@mL+1)& (0+255),b
  1564  0007B0  0ED9               	movlw	low main@mR
  1565  0007B2  0100               	movlb	0	; () banked
  1566  0007B4  6F64               	movwf	stop@mR& (0+255),b
  1567  0007B6  0E01               	movlw	high main@mR
  1568  0007B8  0100               	movlb	0	; () banked
  1569  0007BA  6F65               	movwf	(stop@mR+1)& (0+255),b
  1570  0007BC  ECBC  F00B         	call	_stop	;wreg free
  1571                           
  1572                           ;main.c: 230: fullSpeedAhead(&mL,&mR, 100);
  1573  0007C0  0ED0               	movlw	low main@mL
  1574  0007C2  0100               	movlb	0	; () banked
  1575  0007C4  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1576  0007C6  0E01               	movlw	high main@mL
  1577  0007C8  0100               	movlb	0	; () banked
  1578  0007CA  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1579  0007CC  0ED9               	movlw	low main@mR
  1580  0007CE  0100               	movlb	0	; () banked
  1581  0007D0  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1582  0007D2  0E01               	movlw	high main@mR
  1583  0007D4  0100               	movlb	0	; () banked
  1584  0007D6  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1585  0007D8  0E64               	movlw	100
  1586  0007DA  0100               	movlb	0	; () banked
  1587  0007DC  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1588  0007DE  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  1589                           
  1590                           ;main.c: 231: }
  1591                           ;main.c: 232: }
  1592                           ;main.c: 233: } else {
  1593  0007E2  D18A               	goto	l3578
  1594  0007E4                     l3514:
  1595                           
  1596                           ;main.c: 234: DirectionFound=1;
  1597  0007E4  0E01               	movlw	1
  1598  0007E6  0101               	movlb	1	; () banked
  1599  0007E8  6FCD               	movwf	main@DirectionFound& (0+255),b
  1600                           
  1601                           ;main.c: 235: mode=1;
  1602  0007EA  0E01               	movlw	1
  1603  0007EC  6E3B               	movwf	_mode,c	;volatile
  1604                           
  1605                           ; BSR set to: 1
  1606                           ;main.c: 237: fullSpeedAhead(&mL,&mR, 100);
  1607  0007EE  0ED0               	movlw	low main@mL
  1608  0007F0  0100               	movlb	0	; () banked
  1609  0007F2  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1610  0007F4  0E01               	movlw	high main@mL
  1611  0007F6  0100               	movlb	0	; () banked
  1612  0007F8  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1613  0007FA  0ED9               	movlw	low main@mR
  1614  0007FC  0100               	movlb	0	; () banked
  1615  0007FE  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1616  000800  0E01               	movlw	high main@mR
  1617  000802  0100               	movlb	0	; () banked
  1618  000804  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1619  000806  0E64               	movlw	100
  1620  000808  0100               	movlb	0	; () banked
  1621  00080A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1622  00080C  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  1623                           
  1624                           ;main.c: 238: delay_tenth_s(1);
  1625  000810  0E01               	movlw	1
  1626  000812  EC41  F00E         	call	_delay_tenth_s
  1627                           
  1628                           ;main.c: 239: MoveType[Move] = 0;
  1629  000816  0101               	movlb	1	; () banked
  1630  000818  51CF               	movf	main@Move& (0+255),w,b
  1631  00081A  0D01               	mullw	1
  1632  00081C  0E28               	movlw	low main@MoveType
  1633  00081E  24F3               	addwf	prodl,w,c
  1634  000820  6ED9               	movwf	fsr2l,c
  1635  000822  0E01               	movlw	high main@MoveType
  1636  000824  20F4               	addwfc	prodh,w,c
  1637  000826  6EDA               	movwf	fsr2h,c
  1638  000828  0E00               	movlw	0
  1639  00082A  6EDF               	movwf	indf2,c
  1640                           
  1641                           ; BSR set to: 1
  1642                           ;main.c: 240: MoveTime[Move] = 5;
  1643  00082C  0101               	movlb	1	; () banked
  1644  00082E  51CF               	movf	main@Move& (0+255),w,b
  1645  000830  0D02               	mullw	2
  1646  000832  0E5A               	movlw	low main@MoveTime
  1647  000834  24F3               	addwf	prodl,w,c
  1648  000836  6ED9               	movwf	fsr2l,c
  1649  000838  0E01               	movlw	high main@MoveTime
  1650  00083A  20F4               	addwfc	prodh,w,c
  1651  00083C  6EDA               	movwf	fsr2h,c
  1652  00083E  0E05               	movlw	5
  1653  000840  6EDE               	movwf	postinc2,c
  1654  000842  0E00               	movlw	0
  1655  000844  6EDD               	movwf	postdec2,c
  1656                           
  1657                           ; BSR set to: 1
  1658                           ;main.c: 241: Move++;
  1659  000846  0101               	movlb	1	; () banked
  1660  000848  2BCF               	incf	main@Move& (0+255),f,b
  1661                           
  1662                           ; BSR set to: 1
  1663                           ;main.c: 242: }
  1664                           ;main.c: 244: break;
  1665  00084A  D156               	goto	l3578
  1666  00084C                     l3526:
  1667                           
  1668                           ;main.c: 249: SetLine(1);
  1669  00084C  0E01               	movlw	1
  1670  00084E  ECAD  F00E         	call	_SetLine
  1671                           
  1672                           ;main.c: 250: LCD_String(Message);
  1673  000852  0EBE               	movlw	low main@Message
  1674  000854  6E2A               	movwf	LCD_String@string,c
  1675  000856  0E01               	movlw	high main@Message
  1676  000858  6E2B               	movwf	LCD_String@string+1,c
  1677  00085A  EC3F  F00D         	call	_LCD_String	;wreg free
  1678                           
  1679                           ;main.c: 251: SetLine(2);
  1680  00085E  0E02               	movlw	2
  1681  000860  ECAD  F00E         	call	_SetLine
  1682                           
  1683                           ;main.c: 252: LCD_String("Going Home");
  1684  000864  0E39               	movlw	low STR_8
  1685  000866  6E2A               	movwf	LCD_String@string,c
  1686  000868  0E03               	movlw	high STR_8
  1687  00086A  6E2B               	movwf	LCD_String@string+1,c
  1688  00086C  EC3F  F00D         	call	_LCD_String	;wreg free
  1689  000870                     l3532:
  1690  000870  0101               	movlb	1	; () banked
  1691  000872  BFCF               	btfsc	main@Move& (0+255),7,b
  1692  000874  D132               	goto	l3572
  1693                           
  1694                           ; BSR set to: 1
  1695                           ;main.c: 255: stop(&mL,&mR);
  1696                           
  1697                           ; BSR set to: 1
  1698                           
  1699                           ; BSR set to: 1
  1700  000876  0ED0               	movlw	low main@mL
  1701  000878  0100               	movlb	0	; () banked
  1702  00087A  6F62               	movwf	stop@mL& (0+255),b
  1703  00087C  0E01               	movlw	high main@mL
  1704  00087E  0100               	movlb	0	; () banked
  1705  000880  6F63               	movwf	(stop@mL+1)& (0+255),b
  1706  000882  0ED9               	movlw	low main@mR
  1707  000884  0100               	movlb	0	; () banked
  1708  000886  6F64               	movwf	stop@mR& (0+255),b
  1709  000888  0E01               	movlw	high main@mR
  1710  00088A  0100               	movlb	0	; () banked
  1711  00088C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1712  00088E  ECBC  F00B         	call	_stop	;wreg free
  1713                           
  1714                           ;main.c: 256: if (MoveType[Move]==0) {
  1715  000892  0101               	movlb	1	; () banked
  1716  000894  51CF               	movf	main@Move& (0+255),w,b
  1717  000896  0D01               	mullw	1
  1718  000898  0E28               	movlw	low main@MoveType
  1719  00089A  24F3               	addwf	prodl,w,c
  1720  00089C  6ED9               	movwf	fsr2l,c
  1721  00089E  0E01               	movlw	high main@MoveType
  1722  0008A0  20F4               	addwfc	prodh,w,c
  1723  0008A2  6EDA               	movwf	fsr2h,c
  1724  0008A4  50DF               	movf	indf2,w,c
  1725  0008A6  A4D8               	btfss	status,2,c
  1726  0008A8  D01E               	goto	l3542
  1727                           
  1728                           ; BSR set to: 1
  1729                           ;main.c: 257: fullSpeedBack(&mL,&mR,100);
  1730  0008AA  0ED0               	movlw	low main@mL
  1731  0008AC  0100               	movlb	0	; () banked
  1732  0008AE  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1733  0008B0  0E01               	movlw	high main@mL
  1734  0008B2  0100               	movlb	0	; () banked
  1735  0008B4  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1736  0008B6  0ED9               	movlw	low main@mR
  1737  0008B8  0100               	movlb	0	; () banked
  1738  0008BA  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1739  0008BC  0E01               	movlw	high main@mR
  1740  0008BE  0100               	movlb	0	; () banked
  1741  0008C0  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1742  0008C2  0E64               	movlw	100
  1743  0008C4  0100               	movlb	0	; () banked
  1744  0008C6  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1745  0008C8  ECE4  F00D         	call	_fullSpeedBack	;wreg free
  1746                           
  1747                           ;main.c: 258: delay_tenth_s(MoveTime[Move]);
  1748  0008CC  0101               	movlb	1	; () banked
  1749  0008CE  51CF               	movf	main@Move& (0+255),w,b
  1750  0008D0  0D02               	mullw	2
  1751  0008D2  0E5A               	movlw	low main@MoveTime
  1752  0008D4  24F3               	addwf	prodl,w,c
  1753  0008D6  6ED9               	movwf	fsr2l,c
  1754  0008D8  0E01               	movlw	high main@MoveTime
  1755  0008DA  20F4               	addwfc	prodh,w,c
  1756  0008DC  6EDA               	movwf	fsr2h,c
  1757  0008DE  50DF               	movf	indf2,w,c
  1758  0008E0  EC41  F00E         	call	_delay_tenth_s
  1759                           
  1760                           ;main.c: 259: } else if (MoveType[Move]==1) {
  1761  0008E4  D0F7               	goto	l3568
  1762  0008E6                     l3542:
  1763  0008E6  0101               	movlb	1	; () banked
  1764  0008E8  51CF               	movf	main@Move& (0+255),w,b
  1765  0008EA  0D01               	mullw	1
  1766  0008EC  0E28               	movlw	low main@MoveType
  1767  0008EE  24F3               	addwf	prodl,w,c
  1768  0008F0  6ED9               	movwf	fsr2l,c
  1769  0008F2  0E01               	movlw	high main@MoveType
  1770  0008F4  20F4               	addwfc	prodh,w,c
  1771  0008F6  6EDA               	movwf	fsr2h,c
  1772  0008F8  04DE               	decf	postinc2,w,c
  1773  0008FA  A4D8               	btfss	status,2,c
  1774  0008FC  D091               	goto	l3560
  1775                           
  1776                           ; BSR set to: 1
  1777                           ;main.c: 260: T0CONbits.TMR0ON=0;
  1778  0008FE  9ED5               	bcf	4053,7,c	;volatile
  1779                           
  1780                           ; BSR set to: 1
  1781                           ;main.c: 261: TMR0L = 0;
  1782  000900  0E00               	movlw	0
  1783  000902  6ED6               	movwf	4054,c	;volatile
  1784                           
  1785                           ;main.c: 262: TMR0H = 0;
  1786  000904  0E00               	movlw	0
  1787  000906  6ED7               	movwf	4055,c	;volatile
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;main.c: 263: if (MoveTime[Move]>0) {
  1791  000908  0101               	movlb	1	; () banked
  1792  00090A  51CF               	movf	main@Move& (0+255),w,b
  1793  00090C  0D02               	mullw	2
  1794  00090E  0E5A               	movlw	low main@MoveTime
  1795  000910  24F3               	addwf	prodl,w,c
  1796  000912  6ED9               	movwf	fsr2l,c
  1797  000914  0E01               	movlw	high main@MoveTime
  1798  000916  20F4               	addwfc	prodh,w,c
  1799  000918  6EDA               	movwf	fsr2h,c
  1800  00091A  0E01               	movlw	1
  1801  00091C  BEDB               	btfsc	plusw2,7,c
  1802  00091E  D03D               	goto	l424
  1803  000920  0E01               	movlw	1
  1804  000922  50DB               	movf	plusw2,w,c
  1805  000924  E103               	bnz	u2970
  1806  000926  04DE               	decf	postinc2,w,c
  1807  000928  A0D8               	btfss	status,0,c
  1808  00092A  D037               	goto	l424
  1809  00092C                     u2970:
  1810                           
  1811                           ; BSR set to: 1
  1812                           ;main.c: 264: T0CONbits.TMR0ON=1;
  1813  00092C  8ED5               	bsf	4053,7,c	;volatile
  1814                           
  1815                           ; BSR set to: 1
  1816                           ;main.c: 265: turnRight(&mL,&mR,40);
  1817  00092E  0ED0               	movlw	low main@mL
  1818  000930  0100               	movlb	0	; () banked
  1819  000932  6F67               	movwf	turnRight@mL& (0+255),b
  1820  000934  0E01               	movlw	high main@mL
  1821  000936  0100               	movlb	0	; () banked
  1822  000938  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1823  00093A  0ED9               	movlw	low main@mR
  1824  00093C  0100               	movlb	0	; () banked
  1825  00093E  6F69               	movwf	turnRight@mR& (0+255),b
  1826  000940  0E01               	movlw	high main@mR
  1827  000942  0100               	movlb	0	; () banked
  1828  000944  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1829  000946  0E28               	movlw	40
  1830  000948  0100               	movlb	0	; () banked
  1831  00094A  6F6B               	movwf	turnRight@power& (0+255),b
  1832  00094C  EC03  F00E         	call	_turnRight	;wreg free
  1833  000950                     l3554:
  1834  000950  0101               	movlb	1	; () banked
  1835  000952  51CF               	movf	main@Move& (0+255),w,b
  1836  000954  0D02               	mullw	2
  1837  000956  0E5A               	movlw	low main@MoveTime
  1838  000958  24F3               	addwf	prodl,w,c
  1839  00095A  6ED9               	movwf	fsr2l,c
  1840  00095C  0E01               	movlw	high main@MoveTime
  1841  00095E  20F4               	addwfc	prodh,w,c
  1842  000960  6EDA               	movwf	fsr2h,c
  1843  000962  50D6               	movf	4054,w,c	;volatile
  1844  000964  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1845  000968  0100               	movlb	0	; () banked
  1846  00096A  6BBD               	clrf	(??_main+3)& (0+255),b
  1847  00096C  C0BC  F0BD         	movff	??_main+2,??_main+3
  1848  000970  0100               	movlb	0	; () banked
  1849  000972  6BBC               	clrf	(??_main+2)& (0+255),b
  1850  000974  0100               	movlb	0	; () banked
  1851  000976  27BC               	addwf	(??_main+2)& (0+255),f,b
  1852  000978  0E00               	movlw	0
  1853  00097A  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1854  00097C  50DE               	movf	postinc2,w,c
  1855  00097E  0100               	movlb	0	; () banked
  1856  000980  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1857  000982  0100               	movlb	0	; () banked
  1858  000984  51BD               	movf	(??_main+3)& (0+255),w,b
  1859  000986  0A80               	xorlw	128
  1860  000988  0100               	movlb	0	; () banked
  1861  00098A  6FBE               	movwf	(??_main+4)& (0+255),b
  1862  00098C  50DE               	movf	postinc2,w,c
  1863  00098E  0A80               	xorlw	128
  1864  000990  0100               	movlb	0	; () banked
  1865  000992  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1866  000994  A0D8               	btfss	status,0,c
  1867  000996  D7DC               	goto	l3554
  1868  000998  D041               	goto	l431
  1869  00099A                     l424:
  1870                           
  1871                           ; BSR set to: 1
  1872                           ;main.c: 270: T0CONbits.TMR0ON=1;
  1873  00099A  8ED5               	bsf	4053,7,c	;volatile
  1874                           
  1875                           ; BSR set to: 1
  1876                           ;main.c: 271: turnLeft(&mL,&mR,40);
  1877  00099C  0ED0               	movlw	low main@mL
  1878  00099E  0100               	movlb	0	; () banked
  1879  0009A0  6F67               	movwf	turnLeft@mL& (0+255),b
  1880  0009A2  0E01               	movlw	high main@mL
  1881  0009A4  0100               	movlb	0	; () banked
  1882  0009A6  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  1883  0009A8  0ED9               	movlw	low main@mR
  1884  0009AA  0100               	movlb	0	; () banked
  1885  0009AC  6F69               	movwf	turnLeft@mR& (0+255),b
  1886  0009AE  0E01               	movlw	high main@mR
  1887  0009B0  0100               	movlb	0	; () banked
  1888  0009B2  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  1889  0009B4  0E28               	movlw	40
  1890  0009B6  0100               	movlb	0	; () banked
  1891  0009B8  6F6B               	movwf	turnLeft@power& (0+255),b
  1892  0009BA  EC22  F00E         	call	_turnLeft	;wreg free
  1893  0009BE                     l3558:
  1894  0009BE  0101               	movlb	1	; () banked
  1895  0009C0  51CF               	movf	main@Move& (0+255),w,b
  1896  0009C2  0D02               	mullw	2
  1897  0009C4  0E5A               	movlw	low main@MoveTime
  1898  0009C6  24F3               	addwf	prodl,w,c
  1899  0009C8  6ED9               	movwf	fsr2l,c
  1900  0009CA  0E01               	movlw	high main@MoveTime
  1901  0009CC  20F4               	addwfc	prodh,w,c
  1902  0009CE  6EDA               	movwf	fsr2h,c
  1903  0009D0  CFDE F0BA          	movff	postinc2,??_main
  1904  0009D4  CFDD F0BB          	movff	postdec2,??_main+1
  1905  0009D8  0100               	movlb	0	; () banked
  1906  0009DA  1FBA               	comf	??_main& (0+255),f,b
  1907  0009DC  1FBB               	comf	(??_main+1)& (0+255),f,b
  1908  0009DE  4BBA               	infsnz	??_main& (0+255),f,b
  1909  0009E0  2BBB               	incf	(??_main+1)& (0+255),f,b
  1910  0009E2  50D6               	movf	4054,w,c	;volatile
  1911  0009E4  CFD7 F0BC          	movff	4055,??_main+2	;volatile
  1912  0009E8  0100               	movlb	0	; () banked
  1913  0009EA  6BBD               	clrf	(??_main+3)& (0+255),b
  1914  0009EC  C0BC  F0BD         	movff	??_main+2,??_main+3
  1915  0009F0  0100               	movlb	0	; () banked
  1916  0009F2  6BBC               	clrf	(??_main+2)& (0+255),b
  1917  0009F4  0100               	movlb	0	; () banked
  1918  0009F6  27BC               	addwf	(??_main+2)& (0+255),f,b
  1919  0009F8  0E00               	movlw	0
  1920  0009FA  23BD               	addwfc	(??_main+3)& (0+255),f,b
  1921  0009FC  0100               	movlb	0	; () banked
  1922  0009FE  51BA               	movf	??_main& (0+255),w,b
  1923  000A00  0100               	movlb	0	; () banked
  1924  000A02  5DBC               	subwf	(??_main+2)& (0+255),w,b
  1925  000A04  0100               	movlb	0	; () banked
  1926  000A06  51BD               	movf	(??_main+3)& (0+255),w,b
  1927  000A08  0A80               	xorlw	128
  1928  000A0A  0100               	movlb	0	; () banked
  1929  000A0C  6FBE               	movwf	(??_main+4)& (0+255),b
  1930  000A0E  0100               	movlb	0	; () banked
  1931  000A10  51BB               	movf	(??_main+1)& (0+255),w,b
  1932  000A12  0A80               	xorlw	128
  1933  000A14  0100               	movlb	0	; () banked
  1934  000A16  59BE               	subwfb	(??_main+4)& (0+255),w,b
  1935  000A18  A0D8               	btfss	status,0,c
  1936  000A1A  D7D1               	goto	l3558
  1937  000A1C                     l431:
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;main.c: 274: T0CONbits.TMR0ON=0;
  1941  000A1C  9ED5               	bcf	4053,7,c	;volatile
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;main.c: 275: }
  1945                           ;main.c: 276: } else if (MoveType[Move]==2) {
  1946  000A1E  D05A               	goto	l3568
  1947  000A20                     l3560:
  1948  000A20  0101               	movlb	1	; () banked
  1949  000A22  51CF               	movf	main@Move& (0+255),w,b
  1950  000A24  0D01               	mullw	1
  1951  000A26  0E28               	movlw	low main@MoveType
  1952  000A28  24F3               	addwf	prodl,w,c
  1953  000A2A  6ED9               	movwf	fsr2l,c
  1954  000A2C  0E01               	movlw	high main@MoveType
  1955  000A2E  20F4               	addwfc	prodh,w,c
  1956  000A30  6EDA               	movwf	fsr2h,c
  1957  000A32  0E02               	movlw	2
  1958  000A34  18DE               	xorwf	postinc2,w,c
  1959  000A36  A4D8               	btfss	status,2,c
  1960  000A38  D04D               	goto	l3568
  1961                           
  1962                           ; BSR set to: 1
  1963                           ;main.c: 277: if (MoveTime[Move]>0) {
  1964  000A3A  0101               	movlb	1	; () banked
  1965  000A3C  51CF               	movf	main@Move& (0+255),w,b
  1966  000A3E  0D02               	mullw	2
  1967  000A40  0E5A               	movlw	low main@MoveTime
  1968  000A42  24F3               	addwf	prodl,w,c
  1969  000A44  6ED9               	movwf	fsr2l,c
  1970  000A46  0E01               	movlw	high main@MoveTime
  1971  000A48  20F4               	addwfc	prodh,w,c
  1972  000A4A  6EDA               	movwf	fsr2h,c
  1973  000A4C  0E01               	movlw	1
  1974  000A4E  BEDB               	btfsc	plusw2,7,c
  1975  000A50  D024               	goto	l3566
  1976  000A52  0E01               	movlw	1
  1977  000A54  50DB               	movf	plusw2,w,c
  1978  000A56  E103               	bnz	u3010
  1979  000A58  04DE               	decf	postinc2,w,c
  1980  000A5A  A0D8               	btfss	status,0,c
  1981  000A5C  D01E               	goto	l3566
  1982  000A5E                     u3010:
  1983                           
  1984                           ; BSR set to: 1
  1985                           ;main.c: 278: turnRight(&mL,&mR,100);
  1986  000A5E  0ED0               	movlw	low main@mL
  1987  000A60  0100               	movlb	0	; () banked
  1988  000A62  6F67               	movwf	turnRight@mL& (0+255),b
  1989  000A64  0E01               	movlw	high main@mL
  1990  000A66  0100               	movlb	0	; () banked
  1991  000A68  6F68               	movwf	(turnRight@mL+1)& (0+255),b
  1992  000A6A  0ED9               	movlw	low main@mR
  1993  000A6C  0100               	movlb	0	; () banked
  1994  000A6E  6F69               	movwf	turnRight@mR& (0+255),b
  1995  000A70  0E01               	movlw	high main@mR
  1996  000A72  0100               	movlb	0	; () banked
  1997  000A74  6F6A               	movwf	(turnRight@mR+1)& (0+255),b
  1998  000A76  0E64               	movlw	100
  1999  000A78  0100               	movlb	0	; () banked
  2000  000A7A  6F6B               	movwf	turnRight@power& (0+255),b
  2001  000A7C  EC03  F00E         	call	_turnRight	;wreg free
  2002                           
  2003                           ;main.c: 279: delay_tenth_s(MoveTime[Move]);
  2004  000A80  0101               	movlb	1	; () banked
  2005  000A82  51CF               	movf	main@Move& (0+255),w,b
  2006  000A84  0D02               	mullw	2
  2007  000A86  0E5A               	movlw	low main@MoveTime
  2008  000A88  24F3               	addwf	prodl,w,c
  2009  000A8A  6ED9               	movwf	fsr2l,c
  2010  000A8C  0E01               	movlw	high main@MoveTime
  2011  000A8E  20F4               	addwfc	prodh,w,c
  2012  000A90  6EDA               	movwf	fsr2h,c
  2013  000A92  50DF               	movf	indf2,w,c
  2014  000A94  EC41  F00E         	call	_delay_tenth_s
  2015                           
  2016                           ;main.c: 280: } else {
  2017  000A98  D01D               	goto	l3568
  2018  000A9A                     l3566:
  2019                           
  2020                           ;main.c: 281: turnLeft(&mL,&mR,100);
  2021  000A9A  0ED0               	movlw	low main@mL
  2022  000A9C  0100               	movlb	0	; () banked
  2023  000A9E  6F67               	movwf	turnLeft@mL& (0+255),b
  2024  000AA0  0E01               	movlw	high main@mL
  2025  000AA2  0100               	movlb	0	; () banked
  2026  000AA4  6F68               	movwf	(turnLeft@mL+1)& (0+255),b
  2027  000AA6  0ED9               	movlw	low main@mR
  2028  000AA8  0100               	movlb	0	; () banked
  2029  000AAA  6F69               	movwf	turnLeft@mR& (0+255),b
  2030  000AAC  0E01               	movlw	high main@mR
  2031  000AAE  0100               	movlb	0	; () banked
  2032  000AB0  6F6A               	movwf	(turnLeft@mR+1)& (0+255),b
  2033  000AB2  0E64               	movlw	100
  2034  000AB4  0100               	movlb	0	; () banked
  2035  000AB6  6F6B               	movwf	turnLeft@power& (0+255),b
  2036  000AB8  EC22  F00E         	call	_turnLeft	;wreg free
  2037                           
  2038                           ;main.c: 282: delay_tenth_s(MoveTime[Move]);
  2039  000ABC  0101               	movlb	1	; () banked
  2040  000ABE  51CF               	movf	main@Move& (0+255),w,b
  2041  000AC0  0D02               	mullw	2
  2042  000AC2  0E5A               	movlw	low main@MoveTime
  2043  000AC4  24F3               	addwf	prodl,w,c
  2044  000AC6  6ED9               	movwf	fsr2l,c
  2045  000AC8  0E01               	movlw	high main@MoveTime
  2046  000ACA  20F4               	addwfc	prodh,w,c
  2047  000ACC  6EDA               	movwf	fsr2h,c
  2048  000ACE  50DF               	movf	indf2,w,c
  2049  000AD0  EC41  F00E         	call	_delay_tenth_s
  2050  000AD4                     l3568:
  2051  000AD4  0101               	movlb	1	; () banked
  2052  000AD6  07CF               	decf	main@Move& (0+255),f,b
  2053  000AD8  D6CB               	goto	l3532
  2054  000ADA                     l3572:
  2055                           
  2056                           ; BSR set to: 1
  2057                           ;main.c: 283: }
  2058                           ;main.c: 284: }
  2059                           ;main.c: 285: }
  2060                           ;main.c: 286: stop(&mL,&mR);
  2061  000ADA  0ED0               	movlw	low main@mL
  2062  000ADC  0100               	movlb	0	; () banked
  2063  000ADE  6F62               	movwf	stop@mL& (0+255),b
  2064  000AE0  0E01               	movlw	high main@mL
  2065  000AE2  0100               	movlb	0	; () banked
  2066  000AE4  6F63               	movwf	(stop@mL+1)& (0+255),b
  2067  000AE6  0ED9               	movlw	low main@mR
  2068  000AE8  0100               	movlb	0	; () banked
  2069  000AEA  6F64               	movwf	stop@mR& (0+255),b
  2070  000AEC  0E01               	movlw	high main@mR
  2071  000AEE  0100               	movlb	0	; () banked
  2072  000AF0  6F65               	movwf	(stop@mR+1)& (0+255),b
  2073  000AF2  ECBC  F00B         	call	_stop	;wreg free
  2074  000AF6                     l3574:
  2075                           
  2076                           ;main.c: 287: mode=-1;
  2077  000AF6  683B               	setf	_mode,c	;volatile
  2078  000AF8                     l3578:
  2079  000AF8  503B               	movf	_mode,w,c	;volatile
  2080                           
  2081                           ; Switch size 1, requested type "space"
  2082                           ; Number of cases is 5, Range of values is 0 to 255
  2083                           ; switch strategies available:
  2084                           ; Name         Instructions Cycles
  2085                           ; simple_byte           16     9 (average)
  2086                           ;	Chosen strategy is simple_byte
  2087  000AFA  0A00               	xorlw	0	; case 0
  2088  000AFC  B4D8               	btfsc	status,2,c
  2089  000AFE  D500               	goto	l3420
  2090  000B00  0A01               	xorlw	1	; case 1
  2091  000B02  B4D8               	btfsc	status,2,c
  2092  000B04  D526               	goto	l3440
  2093  000B06  0A03               	xorlw	3	; case 2
  2094  000B08  B4D8               	btfsc	status,2,c
  2095  000B0A  D5C6               	goto	l3472
  2096  000B0C  0A01               	xorlw	1	; case 3
  2097  000B0E  B4D8               	btfsc	status,2,c
  2098  000B10  D69D               	goto	l3526
  2099  000B12  0AFC               	xorlw	252	; case 255
  2100  000B14  B4D8               	btfsc	status,2,c
  2101  000B16  D485               	goto	l3380
  2102  000B18  D7EF               	goto	l3578
  2103  000B1A                     __end_of_main:
  2104                           	opt stack 0
  2105                           tblptru	equ	0xFF8
  2106                           prodh	equ	0xFF4
  2107                           prodl	equ	0xFF3
  2108                           intcon	equ	0xFF2
  2109                           postinc0	equ	0xFEE
  2110                           wreg	equ	0xFE8
  2111                           indf1	equ	0xFE7
  2112                           plusw1	equ	0xFE3
  2113                           fsr1h	equ	0xFE2
  2114                           fsr1l	equ	0xFE1
  2115                           indf2	equ	0xFDF
  2116                           postinc2	equ	0xFDE
  2117                           postdec2	equ	0xFDD
  2118                           plusw2	equ	0xFDB
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _initTimer *****************
  2124 ;; Defined at:
  2125 ;;		line 8 in file "Movement.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;		None
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;		None
  2130 ;; Return value:  Size  Location     Type
  2131 ;;		None               void
  2132 ;; Registers used:
  2133 ;;		None
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2139 ;;      Params:         0       0       0       0
  2140 ;;      Locals:         0       0       0       0
  2141 ;;      Temps:          0       0       0       0
  2142 ;;      Totals:         0       0       0       0
  2143 ;;Total ram usage:        0 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    3
  2146 ;; This function calls:
  2147 ;;		Nothing
  2148 ;; This function is called by:
  2149 ;;		_main
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text1
  2154  001E62                     __ptext1:
  2155                           	opt stack 0
  2156  001E62                     _initTimer:
  2157                           	opt stack 27
  2158                           
  2159                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2160                           
  2161                           ;incstack = 0
  2162  001E62  9ED5               	bcf	4053,7,c	;volatile
  2163                           
  2164                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  2165  001E64  9CD5               	bcf	4053,6,c	;volatile
  2166                           
  2167                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2168  001E66  9AD5               	bcf	4053,5,c	;volatile
  2169                           
  2170                           ;Movement.c: 13: T0CONbits.PSA=0;
  2171  001E68  96D5               	bcf	4053,3,c	;volatile
  2172                           
  2173                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  2174  001E6A  80D5               	bsf	4053,0,c	;volatile
  2175  001E6C  82D5               	bsf	4053,1,c	;volatile
  2176  001E6E  84D5               	bsf	4053,2,c	;volatile
  2177                           
  2178                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  2179  001E70  9AF2               	bcf	intcon,5,c	;volatile
  2180  001E72  0012               	return		;funcret
  2181  001E74                     __end_of_initTimer:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           prodh	equ	0xFF4
  2185                           prodl	equ	0xFF3
  2186                           intcon	equ	0xFF2
  2187                           postinc0	equ	0xFEE
  2188                           wreg	equ	0xFE8
  2189                           indf1	equ	0xFE7
  2190                           plusw1	equ	0xFE3
  2191                           fsr1h	equ	0xFE2
  2192                           fsr1l	equ	0xFE1
  2193                           indf2	equ	0xFDF
  2194                           postinc2	equ	0xFDE
  2195                           postdec2	equ	0xFDD
  2196                           plusw2	equ	0xFDB
  2197                           fsr2h	equ	0xFDA
  2198                           fsr2l	equ	0xFD9
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function _initRFID *****************
  2202 ;; Defined at:
  2203 ;;		line 8 in file "RFID_Reader.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;		None               void
  2210 ;; Registers used:
  2211 ;;		wreg, status,2, status,0
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2217 ;;      Params:         0       0       0       0
  2218 ;;      Locals:         0       0       0       0
  2219 ;;      Temps:          0       0       0       0
  2220 ;;      Totals:         0       0       0       0
  2221 ;;Total ram usage:        0 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    3
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text2
  2232  001E46                     __ptext2:
  2233                           	opt stack 0
  2234  001E46                     _initRFID:
  2235                           	opt stack 27
  2236                           
  2237                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2238                           
  2239                           ;incstack = 0
  2240  001E46  5094               	movf	3988,w,c	;volatile
  2241  001E48  09C0               	iorlw	192
  2242  001E4A  6E94               	movwf	3988,c	;volatile
  2243                           
  2244                           ;RFID_Reader.c: 13: SPBRG=205;
  2245  001E4C  0ECD               	movlw	205
  2246  001E4E  6EAF               	movwf	4015,c	;volatile
  2247                           
  2248                           ;RFID_Reader.c: 14: SPBRGH=0;
  2249  001E50  0E00               	movlw	0
  2250  001E52  6EB0               	movwf	4016,c	;volatile
  2251                           
  2252                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2253  001E54  86AA               	bsf	4010,3,c	;volatile
  2254                           
  2255                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2256  001E56  84AC               	bsf	4012,2,c	;volatile
  2257                           
  2258                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2259  001E58  88AB               	bsf	4011,4,c	;volatile
  2260                           
  2261                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2262  001E5A  8EAB               	bsf	4011,7,c	;volatile
  2263                           
  2264                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2265  001E5C  98AC               	bcf	4012,4,c	;volatile
  2266                           
  2267                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2268  001E5E  9CAB               	bcf	4011,6,c	;volatile
  2269  001E60  0012               	return		;funcret
  2270  001E62                     __end_of_initRFID:
  2271                           	opt stack 0
  2272                           tblptru	equ	0xFF8
  2273                           prodh	equ	0xFF4
  2274                           prodl	equ	0xFF3
  2275                           intcon	equ	0xFF2
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           indf1	equ	0xFE7
  2279                           plusw1	equ	0xFE3
  2280                           fsr1h	equ	0xFE2
  2281                           fsr1l	equ	0xFE1
  2282                           indf2	equ	0xFDF
  2283                           postinc2	equ	0xFDE
  2284                           postdec2	equ	0xFDD
  2285                           plusw2	equ	0xFDB
  2286                           fsr2h	equ	0xFDA
  2287                           fsr2l	equ	0xFD9
  2288                           status	equ	0xFD8
  2289                           
  2290 ;; *************** function _initMotorPWM *****************
  2291 ;; Defined at:
  2292 ;;		line 4 in file "dc_motor.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;		None
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;		None
  2297 ;; Return value:  Size  Location     Type
  2298 ;;		None               void
  2299 ;; Registers used:
  2300 ;;		wreg, status,2
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2306 ;;      Params:         0       0       0       0
  2307 ;;      Locals:         0       0       0       0
  2308 ;;      Temps:          0       0       0       0
  2309 ;;      Totals:         0       0       0       0
  2310 ;;Total ram usage:        0 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    3
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_main
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text3
  2321  001D28                     __ptext3:
  2322                           	opt stack 0
  2323  001D28                     _initMotorPWM:
  2324                           	opt stack 27
  2325                           
  2326                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2327                           
  2328                           ;incstack = 0
  2329  001D28  0E00               	movlw	0
  2330  001D2A  6E7F               	movwf	3967,c	;volatile
  2331                           
  2332                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2333  001D2C  0E80               	movlw	128
  2334  001D2E  6E7E               	movwf	3966,c	;volatile
  2335                           
  2336                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2337  001D30  0E6F               	movlw	111
  2338  001D32  6E6F               	movwf	3951,c	;volatile
  2339                           
  2340                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2341  001D34  0E00               	movlw	0
  2342  001D36  6E6E               	movwf	3950,c	;volatile
  2343                           
  2344                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2345  001D38  0EC7               	movlw	199
  2346  001D3A  6E7B               	movwf	3963,c	;volatile
  2347                           
  2348                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2349  001D3C  0E00               	movlw	0
  2350  001D3E  6E7A               	movwf	3962,c	;volatile
  2351                           
  2352                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2353  001D40  0E00               	movlw	0
  2354  001D42  6E79               	movwf	3961,c	;volatile
  2355                           
  2356                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2357  001D44  0E00               	movlw	0
  2358  001D46  6E78               	movwf	3960,c	;volatile
  2359                           
  2360                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2361  001D48  0E00               	movlw	0
  2362  001D4A  6E77               	movwf	3959,c	;volatile
  2363                           
  2364                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2365  001D4C  0E00               	movlw	0
  2366  001D4E  6E76               	movwf	3958,c	;volatile
  2367                           
  2368                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2369  001D50  9093               	bcf	3987,0,c	;volatile
  2370                           
  2371                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2372  001D52  9293               	bcf	3987,1,c	;volatile
  2373                           
  2374                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2375  001D54  9493               	bcf	3987,2,c	;volatile
  2376                           
  2377                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2378  001D56  9693               	bcf	3987,3,c	;volatile
  2379  001D58  0012               	return		;funcret
  2380  001D5A                     __end_of_initMotorPWM:
  2381                           	opt stack 0
  2382                           tblptru	equ	0xFF8
  2383                           prodh	equ	0xFF4
  2384                           prodl	equ	0xFF3
  2385                           intcon	equ	0xFF2
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           indf1	equ	0xFE7
  2389                           plusw1	equ	0xFE3
  2390                           fsr1h	equ	0xFE2
  2391                           fsr1l	equ	0xFE1
  2392                           indf2	equ	0xFDF
  2393                           postinc2	equ	0xFDE
  2394                           postdec2	equ	0xFDD
  2395                           plusw2	equ	0xFDB
  2396                           fsr2h	equ	0xFDA
  2397                           fsr2l	equ	0xFD9
  2398                           status	equ	0xFD8
  2399                           
  2400 ;; *************** function _initLCD *****************
  2401 ;; Defined at:
  2402 ;;		line 38 in file "LCD.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;		None
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;		None
  2407 ;; Return value:  Size  Location     Type
  2408 ;;		None               void
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2416 ;;      Params:         0       0       0       0
  2417 ;;      Locals:         0       0       0       0
  2418 ;;      Temps:          1       0       0       0
  2419 ;;      Totals:         1       0       0       0
  2420 ;;Total ram usage:        1 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    6
  2423 ;; This function calls:
  2424 ;;		_LCDout
  2425 ;;		_SendLCD
  2426 ;; This function is called by:
  2427 ;;		_main
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text4
  2432  0016BC                     __ptext4:
  2433                           	opt stack 0
  2434  0016BC                     _initLCD:
  2435                           	opt stack 24
  2436                           
  2437                           ;LCD.c: 44: TRISAbits.RA6=0;
  2438                           
  2439                           ;incstack = 0
  2440  0016BC  9C92               	bcf	3986,6,c	;volatile
  2441                           
  2442                           ;LCD.c: 45: TRISCbits.RC0=0;
  2443  0016BE  9094               	bcf	3988,0,c	;volatile
  2444                           
  2445                           ;LCD.c: 46: TRISCbits.RC1=0;
  2446  0016C0  9294               	bcf	3988,1,c	;volatile
  2447                           
  2448                           ;LCD.c: 47: TRISCbits.RC2=0;
  2449  0016C2  9494               	bcf	3988,2,c	;volatile
  2450                           
  2451                           ;LCD.c: 48: TRISDbits.RD0=0;
  2452  0016C4  9095               	bcf	3989,0,c	;volatile
  2453                           
  2454                           ;LCD.c: 49: TRISDbits.RD1=0;
  2455  0016C6  9295               	bcf	3989,1,c	;volatile
  2456                           
  2457                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2458  0016C8  0E27               	movlw	39
  2459  0016CA  6E2A               	movwf	??_initLCD& (0+255),c
  2460  0016CC  0EF5               	movlw	245
  2461  0016CE                     u3057:
  2462  0016CE  2EE8               	decfsz	wreg,f,c
  2463  0016D0  D7FE               	goto	u3057
  2464  0016D2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2465  0016D4  D7FC               	goto	u3057
  2466  0016D6  F000               	nop	
  2467                           
  2468                           ;LCD.c: 52: LCDout(0b0011);
  2469  0016D8  0E03               	movlw	3
  2470  0016DA  ECFB  F00A         	call	_LCDout
  2471                           
  2472                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2473  0016DE  0E0D               	movlw	13
  2474  0016E0  6E2A               	movwf	??_initLCD& (0+255),c
  2475  0016E2  0EFC               	movlw	252
  2476  0016E4                     u3067:
  2477  0016E4  2EE8               	decfsz	wreg,f,c
  2478  0016E6  D7FE               	goto	u3067
  2479  0016E8  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2480  0016EA  D7FC               	goto	u3067
  2481                           
  2482                           ;LCD.c: 54: LCDout(0b0011);
  2483  0016EC  0E03               	movlw	3
  2484  0016EE  ECFB  F00A         	call	_LCDout
  2485                           
  2486                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2487  0016F2  0E85               	movlw	133
  2488  0016F4                     u3077:
  2489  0016F4  2EE8               	decfsz	wreg,f,c
  2490  0016F6  D7FE               	goto	u3077
  2491  0016F8  F000               	nop	
  2492                           
  2493                           ;LCD.c: 56: LCDout(0b0011);
  2494  0016FA  0E03               	movlw	3
  2495  0016FC  ECFB  F00A         	call	_LCDout
  2496                           
  2497                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2498  001700  0E21               	movlw	33
  2499  001702                     u3087:
  2500  001702  2EE8               	decfsz	wreg,f,c
  2501  001704  D7FE               	goto	u3087
  2502  001706  F000               	nop	
  2503                           
  2504                           ;LCD.c: 58: LCDout(0b0010);
  2505  001708  0E02               	movlw	2
  2506  00170A  ECFB  F00A         	call	_LCDout
  2507                           
  2508                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2509  00170E  0E21               	movlw	33
  2510  001710                     u3097:
  2511  001710  2EE8               	decfsz	wreg,f,c
  2512  001712  D7FE               	goto	u3097
  2513  001714  F000               	nop	
  2514                           
  2515                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2516  001716  0E00               	movlw	0
  2517  001718  6E28               	movwf	SendLCD@type,c
  2518  00171A  0E28               	movlw	40
  2519  00171C  ECC5  F00E         	call	_SendLCD
  2520                           
  2521                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2522  001720  0E21               	movlw	33
  2523  001722                     u3107:
  2524  001722  2EE8               	decfsz	wreg,f,c
  2525  001724  D7FE               	goto	u3107
  2526  001726  F000               	nop	
  2527                           
  2528                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2529  001728  0E00               	movlw	0
  2530  00172A  6E28               	movwf	SendLCD@type,c
  2531  00172C  0E08               	movlw	8
  2532  00172E  ECC5  F00E         	call	_SendLCD
  2533                           
  2534                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2535  001732  0E21               	movlw	33
  2536  001734                     u3117:
  2537  001734  2EE8               	decfsz	wreg,f,c
  2538  001736  D7FE               	goto	u3117
  2539  001738  F000               	nop	
  2540                           
  2541                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2542  00173A  0E00               	movlw	0
  2543  00173C  6E28               	movwf	SendLCD@type,c
  2544  00173E  0E01               	movlw	1
  2545  001740  ECC5  F00E         	call	_SendLCD
  2546                           
  2547                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2548  001744  0E0D               	movlw	13
  2549  001746  6E2A               	movwf	??_initLCD& (0+255),c
  2550  001748  0EFC               	movlw	252
  2551  00174A                     u3127:
  2552  00174A  2EE8               	decfsz	wreg,f,c
  2553  00174C  D7FE               	goto	u3127
  2554  00174E  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2555  001750  D7FC               	goto	u3127
  2556                           
  2557                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2558  001752  0E00               	movlw	0
  2559  001754  6E28               	movwf	SendLCD@type,c
  2560  001756  0E06               	movlw	6
  2561  001758  ECC5  F00E         	call	_SendLCD
  2562                           
  2563                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2564  00175C  0E21               	movlw	33
  2565  00175E                     u3137:
  2566  00175E  2EE8               	decfsz	wreg,f,c
  2567  001760  D7FE               	goto	u3137
  2568  001762  F000               	nop	
  2569                           
  2570                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2571  001764  0E00               	movlw	0
  2572  001766  6E28               	movwf	SendLCD@type,c
  2573  001768  0E0C               	movlw	12
  2574  00176A  ECC5  F00E         	call	_SendLCD
  2575                           
  2576                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2577  00176E  0E21               	movlw	33
  2578  001770                     u3147:
  2579  001770  2EE8               	decfsz	wreg,f,c
  2580  001772  D7FE               	goto	u3147
  2581  001774  F000               	nop	
  2582  001776  0012               	return		;funcret
  2583  001778                     __end_of_initLCD:
  2584                           	opt stack 0
  2585                           tblptru	equ	0xFF8
  2586                           prodh	equ	0xFF4
  2587                           prodl	equ	0xFF3
  2588                           intcon	equ	0xFF2
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           indf1	equ	0xFE7
  2592                           plusw1	equ	0xFE3
  2593                           fsr1h	equ	0xFE2
  2594                           fsr1l	equ	0xFE1
  2595                           indf2	equ	0xFDF
  2596                           postinc2	equ	0xFDE
  2597                           postdec2	equ	0xFDD
  2598                           plusw2	equ	0xFDB
  2599                           fsr2h	equ	0xFDA
  2600                           fsr2l	equ	0xFD9
  2601                           status	equ	0xFD8
  2602                           
  2603 ;; *************** function _initIR *****************
  2604 ;; Defined at:
  2605 ;;		line 30 in file "IR_Reading.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;		None               void
  2612 ;; Registers used:
  2613 ;;		wreg, status,2
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2619 ;;      Params:         0       0       0       0
  2620 ;;      Locals:         0       0       0       0
  2621 ;;      Temps:          0       0       0       0
  2622 ;;      Totals:         0       0       0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    3
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_main
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           	psect	text5
  2634  001E06                     __ptext5:
  2635                           	opt stack 0
  2636  001E06                     _initIR:
  2637                           	opt stack 27
  2638                           
  2639                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2640                           
  2641                           ;incstack = 0
  2642  001E06  9489               	bcf	3977,2,c	;volatile
  2643                           
  2644                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2645  001E08  9689               	bcf	3977,3,c	;volatile
  2646                           
  2647                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2648  001E0A  8492               	bsf	3986,2,c	;volatile
  2649                           
  2650                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2651  001E0C  8692               	bsf	3986,3,c	;volatile
  2652                           
  2653                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2654  001E0E  94B8               	bcf	4024,2,c	;volatile
  2655                           
  2656                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2657  001E10  96B8               	bcf	4024,3,c	;volatile
  2658                           
  2659                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2660  001E12  9CB8               	bcf	4024,6,c	;volatile
  2661                           
  2662                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2663  001E14  9EB8               	bcf	4024,7,c	;volatile
  2664                           
  2665                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2666  001E16  0E06               	movlw	6
  2667  001E18  6E63               	movwf	3939,c	;volatile
  2668                           
  2669                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2670  001E1A  0E06               	movlw	6
  2671  001E1C  6E62               	movwf	3938,c	;volatile
  2672                           
  2673                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2674  001E1E  9096               	bcf	3990,0,c	;volatile
  2675                           
  2676                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2677  001E20  9296               	bcf	3990,1,c	;volatile
  2678                           
  2679                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2680  001E22  0E59               	movlw	89
  2681  001E24  6EB7               	movwf	4023,c	;volatile
  2682  001E26  0012               	return		;funcret
  2683  001E28                     __end_of_initIR:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           prodh	equ	0xFF4
  2687                           prodl	equ	0xFF3
  2688                           intcon	equ	0xFF2
  2689                           postinc0	equ	0xFEE
  2690                           wreg	equ	0xFE8
  2691                           indf1	equ	0xFE7
  2692                           plusw1	equ	0xFE3
  2693                           fsr1h	equ	0xFE2
  2694                           fsr1l	equ	0xFE1
  2695                           indf2	equ	0xFDF
  2696                           postinc2	equ	0xFDE
  2697                           postdec2	equ	0xFDD
  2698                           plusw2	equ	0xFDB
  2699                           fsr2h	equ	0xFDA
  2700                           fsr2l	equ	0xFD9
  2701                           status	equ	0xFD8
  2702                           
  2703 ;; *************** function _fullSpeedBack *****************
  2704 ;; Defined at:
  2705 ;;		line 125 in file "dc_motor.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2708 ;;		 -> main@mL(9), 
  2709 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2710 ;;		 -> main@mR(9), 
  2711 ;;  power           1   11[BANK0 ] unsigned char 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;		None               void
  2716 ;; Registers used:
  2717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2723 ;;      Params:         0       5       0       0
  2724 ;;      Locals:         0       0       0       0
  2725 ;;      Temps:          0       0       0       0
  2726 ;;      Totals:         0       5       0       0
  2727 ;;Total ram usage:        5 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    6
  2730 ;; This function calls:
  2731 ;;		_fullSpeedAhead
  2732 ;; This function is called by:
  2733 ;;		_main
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text6
  2738  001BC8                     __ptext6:
  2739                           	opt stack 0
  2740  001BC8                     _fullSpeedBack:
  2741                           	opt stack 24
  2742                           
  2743                           ;dc_motor.c: 128: mL->direction=0;
  2744                           
  2745                           ;incstack = 0
  2746  001BC8  0100               	movlb	0	; () banked
  2747  001BCA  EE20 F001          	lfsr	2,1
  2748  001BCE  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2749  001BD0  26D9               	addwf	fsr2l,f,c
  2750  001BD2  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2751  001BD4  22DA               	addwfc	fsr2h,f,c
  2752  001BD6  0E00               	movlw	0
  2753  001BD8  6EDF               	movwf	indf2,c
  2754                           
  2755                           ;dc_motor.c: 129: mR->direction=0;
  2756  001BDA  0100               	movlb	0	; () banked
  2757  001BDC  EE20 F001          	lfsr	2,1
  2758  001BE0  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2759  001BE2  26D9               	addwf	fsr2l,f,c
  2760  001BE4  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2761  001BE6  22DA               	addwfc	fsr2h,f,c
  2762  001BE8  0E00               	movlw	0
  2763  001BEA  6EDF               	movwf	indf2,c
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2767  001BEC  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2768  001BF0  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2769  001BF4  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2770  001BF8  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2771  001BFC  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2772  001C00  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  2773  001C04  0012               	return		;funcret
  2774  001C06                     __end_of_fullSpeedBack:
  2775                           	opt stack 0
  2776                           tblptru	equ	0xFF8
  2777                           prodh	equ	0xFF4
  2778                           prodl	equ	0xFF3
  2779                           intcon	equ	0xFF2
  2780                           postinc0	equ	0xFEE
  2781                           wreg	equ	0xFE8
  2782                           indf1	equ	0xFE7
  2783                           plusw1	equ	0xFE3
  2784                           fsr1h	equ	0xFE2
  2785                           fsr1l	equ	0xFE1
  2786                           indf2	equ	0xFDF
  2787                           postinc2	equ	0xFDE
  2788                           postdec2	equ	0xFDD
  2789                           plusw2	equ	0xFDB
  2790                           fsr2h	equ	0xFDA
  2791                           fsr2l	equ	0xFD9
  2792                           status	equ	0xFD8
  2793                           
  2794 ;; *************** function _enableSensor *****************
  2795 ;; Defined at:
  2796 ;;		line 106 in file "IR_Reading.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  sensor          1    wreg     unsigned char 
  2799 ;;  status          1   35[COMRAM] unsigned char 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  sensor          1   36[COMRAM] unsigned char 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;		None               void
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2811 ;;      Params:         1       0       0       0
  2812 ;;      Locals:         1       0       0       0
  2813 ;;      Temps:          0       0       0       0
  2814 ;;      Totals:         2       0       0       0
  2815 ;;Total ram usage:        2 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    3
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_main
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text7
  2826  001DBA                     __ptext7:
  2827                           	opt stack 0
  2828  001DBA                     _enableSensor:
  2829                           	opt stack 27
  2830                           
  2831                           ;incstack = 0
  2832                           ;enableSensor@sensor stored from wreg
  2833  001DBA  6E25               	movwf	enableSensor@sensor,c
  2834                           
  2835                           ;IR_Reading.c: 108: if (sensor==0){
  2836  001DBC  5025               	movf	enableSensor@sensor,w,c
  2837  001DBE  A4D8               	btfss	status,2,c
  2838  001DC0  D006               	goto	l2410
  2839                           
  2840                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2841  001DC2  B024               	btfsc	enableSensor@status,0,c
  2842  001DC4  D002               	bra	u1835
  2843  001DC6  908D               	bcf	3981,0,c	;volatile
  2844  001DC8  D001               	bra	u1836
  2845  001DCA                     u1835:
  2846  001DCA  808D               	bsf	3981,0,c	;volatile
  2847  001DCC                     u1836:
  2848                           
  2849                           ;IR_Reading.c: 110: } else if (sensor==1){
  2850  001DCC  0012               	return	
  2851  001DCE                     l2410:
  2852  001DCE  0425               	decf	enableSensor@sensor,w,c
  2853  001DD0  A4D8               	btfss	status,2,c
  2854  001DD2  0012               	return	
  2855                           
  2856                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2857  001DD4  B024               	btfsc	enableSensor@status,0,c
  2858  001DD6  D002               	bra	u1855
  2859  001DD8  928D               	bcf	3981,1,c	;volatile
  2860  001DDA  D001               	bra	u1856
  2861  001DDC                     u1855:
  2862  001DDC  828D               	bsf	3981,1,c	;volatile
  2863  001DDE                     u1856:
  2864  001DDE  0012               	return	
  2865  001DE0                     __end_of_enableSensor:
  2866                           	opt stack 0
  2867                           tblptru	equ	0xFF8
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           indf1	equ	0xFE7
  2874                           plusw1	equ	0xFE3
  2875                           fsr1h	equ	0xFE2
  2876                           fsr1l	equ	0xFE1
  2877                           indf2	equ	0xFDF
  2878                           postinc2	equ	0xFDE
  2879                           postdec2	equ	0xFDD
  2880                           plusw2	equ	0xFDB
  2881                           fsr2h	equ	0xFDA
  2882                           fsr2l	equ	0xFD9
  2883                           status	equ	0xFD8
  2884                           
  2885 ;; *************** function _VerifySignal *****************
  2886 ;; Defined at:
  2887 ;;		line 58 in file "RFID_Reader.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2890 ;;		 -> ReceivedString(16), 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  ptr             3    0        PTR unsigned char 
  2893 ;;  hexByte         2   43[COMRAM] unsigned int 
  2894 ;;  checksum        1   42[COMRAM] unsigned char 
  2895 ;;  i               1   41[COMRAM] unsigned char 
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      unsigned char 
  2898 ;; Registers used:
  2899 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2905 ;;      Params:         2       0       0       0
  2906 ;;      Locals:         4       0       0       0
  2907 ;;      Temps:          4       0       0       0
  2908 ;;      Totals:        10       0       0       0
  2909 ;;Total ram usage:       10 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    3
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text8
  2920  001ADC                     __ptext8:
  2921                           	opt stack 0
  2922  001ADC                     _VerifySignal:
  2923                           	opt stack 27
  2924                           
  2925                           ;RFID_Reader.c: 59: unsigned char checksum=0;
  2926                           
  2927                           ;incstack = 0
  2928  001ADC  0E00               	movlw	0
  2929  001ADE  6E2B               	movwf	VerifySignal@checksum,c
  2930                           
  2931                           ;RFID_Reader.c: 60: unsigned int hexByte=0;
  2932  001AE0  0E00               	movlw	0
  2933  001AE2  6E2D               	movwf	VerifySignal@hexByte+1,c
  2934  001AE4  0E00               	movlw	0
  2935  001AE6  6E2C               	movwf	VerifySignal@hexByte,c
  2936                           
  2937                           ;RFID_Reader.c: 61: unsigned char i=0;
  2938  001AE8  0E00               	movlw	0
  2939  001AEA  6E2A               	movwf	VerifySignal@i,c
  2940                           
  2941                           ;RFID_Reader.c: 62: unsigned char *ptr;
  2942                           ;RFID_Reader.c: 65: hexByte = (Signal[3]<<8) + Signal[4];
  2943  001AEC  EE20 F004          	lfsr	2,4
  2944  001AF0  5024               	movf	VerifySignal@Signal,w,c
  2945  001AF2  26D9               	addwf	fsr2l,f,c
  2946  001AF4  5025               	movf	VerifySignal@Signal+1,w,c
  2947  001AF6  22DA               	addwfc	fsr2h,f,c
  2948  001AF8  50DF               	movf	indf2,w,c
  2949  001AFA  6E26               	movwf	??_VerifySignal& (0+255),c
  2950  001AFC  EE20 F003          	lfsr	2,3
  2951  001B00  5024               	movf	VerifySignal@Signal,w,c
  2952  001B02  26D9               	addwf	fsr2l,f,c
  2953  001B04  5025               	movf	VerifySignal@Signal+1,w,c
  2954  001B06  22DA               	addwfc	fsr2h,f,c
  2955  001B08  50DF               	movf	indf2,w,c
  2956  001B0A  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2957  001B0C  5027               	movf	??_VerifySignal+1,w,c
  2958  001B0E  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2959  001B10  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2960  001B12  5026               	movf	??_VerifySignal,w,c
  2961  001B14  2428               	addwf	??_VerifySignal+2,w,c
  2962  001B16  6E2C               	movwf	VerifySignal@hexByte,c
  2963  001B18  0E00               	movlw	0
  2964  001B1A  2029               	addwfc	??_VerifySignal+3,w,c
  2965  001B1C  6E2D               	movwf	VerifySignal@hexByte+1,c
  2966                           
  2967                           ;RFID_Reader.c: 66: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2968  001B1E  EE20 F002          	lfsr	2,2
  2969  001B22  5024               	movf	VerifySignal@Signal,w,c
  2970  001B24  26D9               	addwf	fsr2l,f,c
  2971  001B26  5025               	movf	VerifySignal@Signal+1,w,c
  2972  001B28  22DA               	addwfc	fsr2h,f,c
  2973  001B2A  50DF               	movf	indf2,w,c
  2974  001B2C  182C               	xorwf	VerifySignal@hexByte,w,c
  2975  001B2E  6E2B               	movwf	VerifySignal@checksum,c
  2976                           
  2977                           ;RFID_Reader.c: 75: return 1;
  2978  001B30  0E01               	movlw	1
  2979  001B32  0012               	return	
  2980  001B34                     __end_of_VerifySignal:
  2981                           	opt stack 0
  2982                           tblptru	equ	0xFF8
  2983                           prodh	equ	0xFF4
  2984                           prodl	equ	0xFF3
  2985                           intcon	equ	0xFF2
  2986                           postinc0	equ	0xFEE
  2987                           wreg	equ	0xFE8
  2988                           indf1	equ	0xFE7
  2989                           plusw1	equ	0xFE3
  2990                           fsr1h	equ	0xFE2
  2991                           fsr1l	equ	0xFE1
  2992                           indf2	equ	0xFDF
  2993                           postinc2	equ	0xFDE
  2994                           postdec2	equ	0xFDD
  2995                           plusw2	equ	0xFDB
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _ScanWithRange *****************
  3001 ;; Defined at:
  3002 ;;		line 98 in file "Movement.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3005 ;;		 -> main@mL(9), 
  3006 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3007 ;;		 -> main@mR(9), 
  3008 ;;  loops           2   17[BANK0 ] int 
  3009 ;;  MoveTime        2   19[BANK0 ] PTR int 
  3010 ;;		 -> main@MoveTime(100), 
  3011 ;;  Move            2   21[BANK0 ] PTR unsigned char 
  3012 ;;		 -> main@Move(1), 
  3013 ;;  MoveType        2   23[BANK0 ] PTR unsigned char 
  3014 ;;		 -> main@MoveType(50), 
  3015 ;;  RFID_Read       2   25[BANK0 ] PTR unsigned char 
  3016 ;;		 -> RFID_Read(1), 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  buf            40   32[BANK0 ] unsigned char [40]
  3019 ;;  SensorResult    4   84[BANK0 ] unsigned int [2]
  3020 ;;  RightFlag       2   88[BANK0 ] unsigned int 
  3021 ;;  LeftFlag        2   81[BANK0 ] unsigned int 
  3022 ;;  DirectionFou    2   76[BANK0 ] const unsigned int 
  3023 ;;  i               2   74[BANK0 ] unsigned int 
  3024 ;;  n               2   72[BANK0 ] unsigned int 
  3025 ;;  TimeAboveThr    1   83[BANK0 ] unsigned char 
  3026 ;;  MiniLeftFlic    1   80[BANK0 ] const unsigned char 
  3027 ;;  LeftFlick       1   79[BANK0 ] const unsigned char 
  3028 ;;  MotorPower      1   78[BANK0 ] const unsigned char 
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      unsigned char 
  3031 ;; Registers used:
  3032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3038 ;;      Params:         0      14       0       0
  3039 ;;      Locals:         0      58       0       0
  3040 ;;      Temps:          0       5       0       0
  3041 ;;      Totals:         0      77       0       0
  3042 ;;Total ram usage:       77 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    7
  3045 ;; This function calls:
  3046 ;;		_LCD_String
  3047 ;;		_SendLCD
  3048 ;;		_SetLine
  3049 ;;		_delay_tenth_s
  3050 ;;		_grabLeftIR
  3051 ;;		_grabRightIR
  3052 ;;		_sprintf
  3053 ;;		_stop
  3054 ;;		_turnLeft
  3055 ;;		_turnRight
  3056 ;; This function is called by:
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text9
  3062  000B1A                     __ptext9:
  3063                           	opt stack 0
  3064  000B1A                     _ScanWithRange:
  3065                           	opt stack 23
  3066                           
  3067                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  3068                           
  3069                           ;incstack = 0
  3070  000B1A  C0F5  F0B4         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  3071  000B1E  C0F6  F0B5         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  3072  000B22  C0F7  F0B6         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  3073  000B26  C0F8  F0B7         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  3074                           
  3075                           ;Movement.c: 103: unsigned int LeftFlag=0;
  3076  000B2A  0E00               	movlw	0
  3077  000B2C  0100               	movlb	0	; () banked
  3078  000B2E  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3079  000B30  0E00               	movlw	0
  3080  000B32  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3081                           
  3082                           ;Movement.c: 104: unsigned int RightFlag=0;
  3083  000B34  0E00               	movlw	0
  3084  000B36  0100               	movlb	0	; () banked
  3085  000B38  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3086  000B3A  0E00               	movlw	0
  3087  000B3C  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3088                           
  3089                           ;Movement.c: 105: char buf[40];
  3090                           ;Movement.c: 106: unsigned int i=0;
  3091  000B3E  0E00               	movlw	0
  3092  000B40  0100               	movlb	0	; () banked
  3093  000B42  6FAB               	movwf	(ScanWithRange@i+1)& (0+255),b
  3094  000B44  0E00               	movlw	0
  3095  000B46  6FAA               	movwf	ScanWithRange@i& (0+255),b
  3096                           
  3097                           ;Movement.c: 107: unsigned int n=0;
  3098  000B48  0E00               	movlw	0
  3099  000B4A  0100               	movlb	0	; () banked
  3100  000B4C  6FA9               	movwf	(ScanWithRange@n+1)& (0+255),b
  3101  000B4E  0E00               	movlw	0
  3102  000B50  6FA8               	movwf	ScanWithRange@n& (0+255),b
  3103                           
  3104                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  3105  000B52  0E00               	movlw	0
  3106  000B54  0100               	movlb	0	; () banked
  3107  000B56  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3108                           
  3109                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3110  000B58  0E03               	movlw	3
  3111  000B5A  0100               	movlb	0	; () banked
  3112  000B5C  6FAD               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3113  000B5E  0EE8               	movlw	232
  3114  000B60  6FAC               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3115                           
  3116                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3117  000B62  0E28               	movlw	40
  3118  000B64  0100               	movlb	0	; () banked
  3119  000B66  6FAE               	movwf	ScanWithRange@MotorPower& (0+255),b
  3120                           
  3121                           ;Movement.c: 114: const unsigned char LeftFlick=2;
  3122  000B68  0E02               	movlw	2
  3123  000B6A  0100               	movlb	0	; () banked
  3124  000B6C  6FAF               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3125                           
  3126                           ;Movement.c: 116: const unsigned char MiniLeftFlick=1;
  3127  000B6E  0E01               	movlw	1
  3128  000B70  0100               	movlb	0	; () banked
  3129  000B72  6FB0               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;Movement.c: 121: (MoveType[*Move]) = 2;
  3133  000B74  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3134  000B78  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3135  000B7C  50DF               	movf	indf2,w,c
  3136  000B7E  0100               	movlb	0	; () banked
  3137  000B80  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3138  000B82  0100               	movlb	0	; () banked
  3139  000B84  517B               	movf	??_ScanWithRange& (0+255),w,b
  3140  000B86  0D01               	mullw	1
  3141  000B88  50F3               	movf	prodl,w,c
  3142  000B8A  0100               	movlb	0	; () banked
  3143  000B8C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3144  000B8E  6ED9               	movwf	fsr2l,c
  3145  000B90  50F4               	movf	prodh,w,c
  3146  000B92  0100               	movlb	0	; () banked
  3147  000B94  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3148  000B96  6EDA               	movwf	fsr2h,c
  3149  000B98  0E02               	movlw	2
  3150  000B9A  6EDF               	movwf	indf2,c
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;Movement.c: 122: (MoveTime[*Move]) = LeftFlick;
  3154  000B9C  0100               	movlb	0	; () banked
  3155  000B9E  51AF               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3156  000BA0  0100               	movlb	0	; () banked
  3157  000BA2  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3158  000BA4  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3159  000BA6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3160  000BAA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3161  000BAE  50DF               	movf	indf2,w,c
  3162  000BB0  0100               	movlb	0	; () banked
  3163  000BB2  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3164  000BB4  0100               	movlb	0	; () banked
  3165  000BB6  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3166  000BB8  0D02               	mullw	2
  3167  000BBA  50F3               	movf	prodl,w,c
  3168  000BBC  0100               	movlb	0	; () banked
  3169  000BBE  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3170  000BC0  6ED9               	movwf	fsr2l,c
  3171  000BC2  50F4               	movf	prodh,w,c
  3172  000BC4  0100               	movlb	0	; () banked
  3173  000BC6  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3174  000BC8  6EDA               	movwf	fsr2h,c
  3175  000BCA  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3176  000BCE  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;Movement.c: 123: *Move = *Move+1;
  3180  000BD2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3181  000BD6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3182  000BDA  50DF               	movf	indf2,w,c
  3183  000BDC  0100               	movlb	0	; () banked
  3184  000BDE  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3185  000BE0  0100               	movlb	0	; () banked
  3186  000BE2  297B               	incf	??_ScanWithRange& (0+255),w,b
  3187  000BE4  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3188  000BE8  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3189  000BEC  6EDF               	movwf	indf2,c
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;Movement.c: 124: turnLeft(mL,mR, 100);
  3193  000BEE  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3194  000BF2  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3195  000BF6  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3196  000BFA  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3197  000BFE  0E64               	movlw	100
  3198  000C00  0100               	movlb	0	; () banked
  3199  000C02  6F6B               	movwf	turnLeft@power& (0+255),b
  3200  000C04  EC22  F00E         	call	_turnLeft	;wreg free
  3201                           
  3202                           ;Movement.c: 125: delay_tenth_s(LeftFlick);
  3203  000C08  0100               	movlb	0	; () banked
  3204  000C0A  51AF               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3205  000C0C  EC41  F00E         	call	_delay_tenth_s
  3206                           
  3207                           ;Movement.c: 126: stop(mL,mR);
  3208  000C10  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3209  000C14  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3210  000C18  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3211  000C1C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3212  000C20  ECBC  F00B         	call	_stop	;wreg free
  3213                           
  3214                           ;Movement.c: 129: turnRight(mL,mR, MotorPower);
  3215  000C24  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3216  000C28  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3217  000C2C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3218  000C30  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3219  000C34  C0AE  F06B         	movff	ScanWithRange@MotorPower,turnRight@power
  3220  000C38  EC03  F00E         	call	_turnRight	;wreg free
  3221                           
  3222                           ;Movement.c: 132: TMR0L = 0;
  3223  000C3C  0E00               	movlw	0
  3224  000C3E  6ED6               	movwf	4054,c	;volatile
  3225                           
  3226                           ;Movement.c: 133: TMR0H = 0;
  3227  000C40  0E00               	movlw	0
  3228  000C42  6ED7               	movwf	4055,c	;volatile
  3229                           
  3230                           ;Movement.c: 134: T0CONbits.TMR0ON=1;
  3231  000C44  8ED5               	bsf	4053,7,c	;volatile
  3232                           
  3233                           ;Movement.c: 136: for (i=1; i<=loops; i++) {
  3234  000C46  0E00               	movlw	0
  3235  000C48  0100               	movlb	0	; () banked
  3236  000C4A  6FAB               	movwf	(ScanWithRange@i+1)& (0+255),b
  3237  000C4C  0E01               	movlw	1
  3238  000C4E  6FAA               	movwf	ScanWithRange@i& (0+255),b
  3239  000C50  D1D7               	goto	l3312
  3240  000C52                     l3224:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;Movement.c: 139: SensorResult[0]=grabLeftIR();
  3244  000C52  EC06  F00D         	call	_grabLeftIR	;wreg free
  3245  000C56  C024  F0B4         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3246  000C5A  C025  F0B5         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3247                           
  3248                           ;Movement.c: 140: SensorResult[1]=grabRightIR();
  3249  000C5E  ECCD  F00C         	call	_grabRightIR	;wreg free
  3250  000C62  C024  F0B6         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3251  000C66  C025  F0B7         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3252                           
  3253                           ;Movement.c: 144: CAP1BUFH=0;
  3254  000C6A  0E00               	movlw	0
  3255  000C6C  6E69               	movwf	3945,c	;volatile
  3256                           
  3257                           ;Movement.c: 145: CAP1BUFL=0;
  3258  000C6E  0E00               	movlw	0
  3259  000C70  6E68               	movwf	3944,c	;volatile
  3260                           
  3261                           ;Movement.c: 146: CAP2BUFH=0;
  3262  000C72  0E00               	movlw	0
  3263  000C74  6E67               	movwf	3943,c	;volatile
  3264                           
  3265                           ;Movement.c: 147: CAP2BUFL=0;
  3266  000C76  0E00               	movlw	0
  3267  000C78  6E66               	movwf	3942,c	;volatile
  3268                           
  3269                           ;Movement.c: 151: SendLCD(0b00000001,0);
  3270  000C7A  0E00               	movlw	0
  3271  000C7C  6E28               	movwf	SendLCD@type,c
  3272  000C7E  0E01               	movlw	1
  3273  000C80  ECC5  F00E         	call	_SendLCD
  3274                           
  3275                           ;Movement.c: 152: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3276  000C84  0E21               	movlw	33
  3277  000C86                     u3157:
  3278  000C86  2EE8               	decfsz	wreg,f,c
  3279  000C88  D7FE               	goto	u3157
  3280  000C8A  F000               	nop	
  3281                           
  3282                           ;Movement.c: 153: SendLCD(0b00000010,0);
  3283  000C8C  0E00               	movlw	0
  3284  000C8E  6E28               	movwf	SendLCD@type,c
  3285  000C90  0E02               	movlw	2
  3286  000C92  ECC5  F00E         	call	_SendLCD
  3287                           
  3288                           ;Movement.c: 154: _delay((unsigned long)((2)*(8000000/4000.0)));
  3289  000C96  0E06               	movlw	6
  3290  000C98  0100               	movlb	0	; () banked
  3291  000C9A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3292  000C9C  0E30               	movlw	48
  3293  000C9E                     u3167:
  3294  000C9E  2EE8               	decfsz	wreg,f,c
  3295  000CA0  D7FE               	goto	u3167
  3296  000CA2  2F7B               	decfsz	??_ScanWithRange& (0+255),f,b
  3297  000CA4  D7FC               	goto	u3167
  3298  000CA6  D000               	nop2	
  3299                           
  3300                           ;Movement.c: 155: SetLine(1);
  3301  000CA8  0E01               	movlw	1
  3302  000CAA  ECAD  F00E         	call	_SetLine
  3303                           
  3304                           ;Movement.c: 156: LCD_String("     ScanIR");
  3305  000CAE  0E2D               	movlw	low STR_1
  3306  000CB0  6E2A               	movwf	LCD_String@string,c
  3307  000CB2  0E03               	movlw	high STR_1
  3308  000CB4  6E2B               	movwf	LCD_String@string+1,c
  3309  000CB6  EC3F  F00D         	call	_LCD_String	;wreg free
  3310                           
  3311                           ;Movement.c: 157: SetLine(2);
  3312  000CBA  0E02               	movlw	2
  3313  000CBC  ECAD  F00E         	call	_SetLine
  3314                           
  3315                           ;Movement.c: 158: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3316  000CC0  0E80               	movlw	low ScanWithRange@buf
  3317  000CC2  6E30               	movwf	sprintf@sp,c
  3318  000CC4  0E00               	movlw	high ScanWithRange@buf
  3319  000CC6  6E31               	movwf	sprintf@sp+1,c
  3320  000CC8  0E0C               	movlw	low (STR_6+1)
  3321  000CCA  6E32               	movwf	sprintf@f,c
  3322  000CCC  0E03               	movlw	high (STR_6+1)
  3323  000CCE  6E33               	movwf	sprintf@f+1,c
  3324  000CD0  C0B4  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3325  000CD4  C0B5  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3326  000CD8  C0B6  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3327  000CDC  C0B7  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3328  000CE0  EC5E  F008         	call	_sprintf	;wreg free
  3329                           
  3330                           ;Movement.c: 159: LCD_String(buf);
  3331  000CE4  0E80               	movlw	low ScanWithRange@buf
  3332  000CE6  6E2A               	movwf	LCD_String@string,c
  3333  000CE8  0E00               	movlw	high ScanWithRange@buf
  3334  000CEA  6E2B               	movwf	LCD_String@string+1,c
  3335  000CEC  EC3F  F00D         	call	_LCD_String	;wreg free
  3336                           
  3337                           ;Movement.c: 163: if (SensorResult[1]>DirectionFoundThreshold) {
  3338  000CF0  0100               	movlb	0	; () banked
  3339  000CF2  51B6               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3340  000CF4  0100               	movlb	0	; () banked
  3341  000CF6  5DAC               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3342  000CF8  0100               	movlb	0	; () banked
  3343  000CFA  51B7               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3344  000CFC  0100               	movlb	0	; () banked
  3345  000CFE  59AD               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3346  000D00  B0D8               	btfsc	status,0,c
  3347  000D02  D00E               	goto	l221
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;Movement.c: 164: RightFlag= (TMR0H<<8)+TMR0L;
  3351  000D04  50D7               	movf	4055,w,c	;volatile
  3352  000D06  0100               	movlb	0	; () banked
  3353  000D08  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3354  000D0A  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3355  000D0C  50D6               	movf	4054,w,c	;volatile
  3356  000D0E  0100               	movlb	0	; () banked
  3357  000D10  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3358  000D12  0100               	movlb	0	; () banked
  3359  000D14  6FB8               	movwf	ScanWithRange@RightFlag& (0+255),b
  3360  000D16  0E00               	movlw	0
  3361  000D18  0100               	movlb	0	; () banked
  3362  000D1A  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3363  000D1C  0100               	movlb	0	; () banked
  3364  000D1E  6FB9               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3365  000D20                     l221:
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;Movement.c: 165: }
  3369                           ;Movement.c: 167: if (SensorResult[0]>DirectionFoundThreshold) {
  3370  000D20  0100               	movlb	0	; () banked
  3371  000D22  51B4               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3372  000D24  0100               	movlb	0	; () banked
  3373  000D26  5DAC               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3374  000D28  0100               	movlb	0	; () banked
  3375  000D2A  51B5               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3376  000D2C  0100               	movlb	0	; () banked
  3377  000D2E  59AD               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3378  000D30  B0D8               	btfsc	status,0,c
  3379  000D32  D00E               	goto	l222
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;Movement.c: 168: LeftFlag=(TMR0H<<8)+TMR0L;
  3383  000D34  50D7               	movf	4055,w,c	;volatile
  3384  000D36  0100               	movlb	0	; () banked
  3385  000D38  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3386  000D3A  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3387  000D3C  50D6               	movf	4054,w,c	;volatile
  3388  000D3E  0100               	movlb	0	; () banked
  3389  000D40  257B               	addwf	??_ScanWithRange& (0+255),w,b
  3390  000D42  0100               	movlb	0	; () banked
  3391  000D44  6FB1               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3392  000D46  0E00               	movlw	0
  3393  000D48  0100               	movlb	0	; () banked
  3394  000D4A  217C               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3395  000D4C  0100               	movlb	0	; () banked
  3396  000D4E  6FB2               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3397  000D50                     l222:
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;Movement.c: 169: }
  3401                           ;Movement.c: 176: if (LeftFlag>0) {
  3402  000D50  0100               	movlb	0	; () banked
  3403  000D52  51B1               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3404  000D54  0100               	movlb	0	; () banked
  3405  000D56  11B2               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3406  000D58  B4D8               	btfsc	status,2,c
  3407  000D5A  D146               	goto	l3304
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;Movement.c: 179: if (RightFlag>0) {
  3411  000D5C  0100               	movlb	0	; () banked
  3412  000D5E  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3413  000D60  0100               	movlb	0	; () banked
  3414  000D62  11B9               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3415  000D64  B4D8               	btfsc	status,2,c
  3416  000D66  D09E               	goto	l224
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;Movement.c: 180: TimeAboveThreshold = LeftFlag - RightFlag;
  3420  000D68  0100               	movlb	0	; () banked
  3421  000D6A  51B8               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3422  000D6C  0800               	sublw	0
  3423  000D6E  0100               	movlb	0	; () banked
  3424  000D70  25B1               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3425  000D72  0100               	movlb	0	; () banked
  3426  000D74  6FB3               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;Movement.c: 181: TMR0L = 0;
  3430  000D76  0E00               	movlw	0
  3431  000D78  6ED6               	movwf	4054,c	;volatile
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;Movement.c: 182: TMR0H = 0;
  3435  000D7A  0E00               	movlw	0
  3436  000D7C  6ED7               	movwf	4055,c	;volatile
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;Movement.c: 183: stop(mL,mR);
  3440  000D7E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3441  000D82  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3442  000D86  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3443  000D8A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3444  000D8E  ECBC  F00B         	call	_stop	;wreg free
  3445                           
  3446                           ;Movement.c: 184: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3447  000D92  D00C               	goto	l3266
  3448  000D94                     l3264:
  3449                           
  3450                           ;Movement.c: 185: turnLeft(mL,mR, MotorPower);
  3451  000D94  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3452  000D98  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3453  000D9C  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3454  000DA0  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3455  000DA4  C0AE  F06B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3456  000DA8  EC22  F00E         	call	_turnLeft	;wreg free
  3457  000DAC                     l3266:
  3458  000DAC  0100               	movlb	0	; () banked
  3459  000DAE  90D8               	bcf	status,0,c
  3460  000DB0  31B3               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3461  000DB2  0100               	movlb	0	; () banked
  3462  000DB4  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3463  000DB6  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3464  000DB8  50D6               	movf	4054,w,c	;volatile
  3465  000DBA  CFD7 F07D          	movff	4055,??_ScanWithRange+2	;volatile
  3466  000DBE  0100               	movlb	0	; () banked
  3467  000DC0  6B7E               	clrf	(??_ScanWithRange+3)& (0+255),b
  3468  000DC2  C07D  F07E         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3469  000DC6  0100               	movlb	0	; () banked
  3470  000DC8  6B7D               	clrf	(??_ScanWithRange+2)& (0+255),b
  3471  000DCA  0100               	movlb	0	; () banked
  3472  000DCC  277D               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3473  000DCE  0E00               	movlw	0
  3474  000DD0  237E               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3475  000DD2  0100               	movlb	0	; () banked
  3476  000DD4  517B               	movf	??_ScanWithRange& (0+255),w,b
  3477  000DD6  0100               	movlb	0	; () banked
  3478  000DD8  5D7D               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3479  000DDA  0100               	movlb	0	; () banked
  3480  000DDC  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3481  000DDE  0A80               	xorlw	128
  3482  000DE0  0100               	movlb	0	; () banked
  3483  000DE2  6F7F               	movwf	(??_ScanWithRange+4)& (0+255),b
  3484  000DE4  0100               	movlb	0	; () banked
  3485  000DE6  517C               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3486  000DE8  0A80               	xorlw	128
  3487  000DEA  0100               	movlb	0	; () banked
  3488  000DEC  597F               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3489  000DEE  A0D8               	btfss	status,0,c
  3490  000DF0  D7D1               	goto	l3264
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;Movement.c: 186: }
  3494                           ;Movement.c: 187: T0CONbits.TMR0ON=0;
  3495  000DF2  9ED5               	bcf	4053,7,c	;volatile
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;Movement.c: 188: stop(mL,mR);
  3499  000DF4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3500  000DF8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3501  000DFC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3502  000E00  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3503  000E04  ECBC  F00B         	call	_stop	;wreg free
  3504                           
  3505                           ;Movement.c: 190: (MoveType[*Move]) = 1;
  3506  000E08  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3507  000E0C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3508  000E10  50DF               	movf	indf2,w,c
  3509  000E12  0100               	movlb	0	; () banked
  3510  000E14  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3511  000E16  0100               	movlb	0	; () banked
  3512  000E18  517B               	movf	??_ScanWithRange& (0+255),w,b
  3513  000E1A  0D01               	mullw	1
  3514  000E1C  50F3               	movf	prodl,w,c
  3515  000E1E  0100               	movlb	0	; () banked
  3516  000E20  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3517  000E22  6ED9               	movwf	fsr2l,c
  3518  000E24  50F4               	movf	prodh,w,c
  3519  000E26  0100               	movlb	0	; () banked
  3520  000E28  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3521  000E2A  6EDA               	movwf	fsr2h,c
  3522  000E2C  0E01               	movlw	1
  3523  000E2E  6EDF               	movwf	indf2,c
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;Movement.c: 191: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3527  000E30  C0B3  F07B         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3528  000E34  0100               	movlb	0	; () banked
  3529  000E36  90D8               	bcf	status,0,c
  3530  000E38  337B               	rrcf	??_ScanWithRange& (0+255),f,b
  3531  000E3A  0100               	movlb	0	; () banked
  3532  000E3C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3533  000E3E  0100               	movlb	0	; () banked
  3534  000E40  25B8               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3535  000E42  0100               	movlb	0	; () banked
  3536  000E44  6F7C               	movwf	(??_ScanWithRange+1)& (0+255),b
  3537  000E46  0E00               	movlw	0
  3538  000E48  0100               	movlb	0	; () banked
  3539  000E4A  21B9               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3540  000E4C  0100               	movlb	0	; () banked
  3541  000E4E  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3542  000E50  0100               	movlb	0	; () banked
  3543  000E52  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3544  000E54  1F7D               	comf	(??_ScanWithRange+2)& (0+255),f,b
  3545  000E56  4B7C               	infsnz	(??_ScanWithRange+1)& (0+255),f,b
  3546  000E58  2B7D               	incf	(??_ScanWithRange+2)& (0+255),f,b
  3547  000E5A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3548  000E5E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3549  000E62  50DF               	movf	indf2,w,c
  3550  000E64  0100               	movlb	0	; () banked
  3551  000E66  6F7E               	movwf	(??_ScanWithRange+3)& (0+255),b
  3552  000E68  0100               	movlb	0	; () banked
  3553  000E6A  517E               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3554  000E6C  0D02               	mullw	2
  3555  000E6E  50F3               	movf	prodl,w,c
  3556  000E70  0100               	movlb	0	; () banked
  3557  000E72  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3558  000E74  6ED9               	movwf	fsr2l,c
  3559  000E76  50F4               	movf	prodh,w,c
  3560  000E78  0100               	movlb	0	; () banked
  3561  000E7A  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3562  000E7C  6EDA               	movwf	fsr2h,c
  3563  000E7E  C07C  FFDE         	movff	??_ScanWithRange+1,postinc2
  3564  000E82  C07D  FFDD         	movff	??_ScanWithRange+2,postdec2
  3565  000E86                     l3274:
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;Movement.c: 192: *Move = *Move+1;
  3569  000E86  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3570  000E8A  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3571  000E8E  50DF               	movf	indf2,w,c
  3572  000E90  0100               	movlb	0	; () banked
  3573  000E92  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3574  000E94  0100               	movlb	0	; () banked
  3575  000E96  297B               	incf	??_ScanWithRange& (0+255),w,b
  3576  000E98  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3577  000E9C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3578  000EA0  6EDF               	movwf	indf2,c
  3579  000EA2  D0A0               	goto	l3300
  3580  000EA4                     l224:
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;Movement.c: 196: T0CONbits.TMR0ON=0;
  3584  000EA4  9ED5               	bcf	4053,7,c	;volatile
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;Movement.c: 200: (MoveType[*Move]) = 1;
  3588  000EA6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3589  000EAA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3590  000EAE  50DF               	movf	indf2,w,c
  3591  000EB0  0100               	movlb	0	; () banked
  3592  000EB2  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3593  000EB4  0100               	movlb	0	; () banked
  3594  000EB6  517B               	movf	??_ScanWithRange& (0+255),w,b
  3595  000EB8  0D01               	mullw	1
  3596  000EBA  50F3               	movf	prodl,w,c
  3597  000EBC  0100               	movlb	0	; () banked
  3598  000EBE  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3599  000EC0  6ED9               	movwf	fsr2l,c
  3600  000EC2  50F4               	movf	prodh,w,c
  3601  000EC4  0100               	movlb	0	; () banked
  3602  000EC6  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3603  000EC8  6EDA               	movwf	fsr2h,c
  3604  000ECA  0E01               	movlw	1
  3605  000ECC  6EDF               	movwf	indf2,c
  3606                           
  3607                           ;Movement.c: 201: (MoveTime[*Move]) = -((TMR0H<<8)+TMR0L);
  3608  000ECE  50D6               	movf	4054,w,c	;volatile
  3609  000ED0  CFD7 F07B          	movff	4055,??_ScanWithRange	;volatile
  3610  000ED4  0100               	movlb	0	; () banked
  3611  000ED6  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3612  000ED8  C07B  F07C         	movff	??_ScanWithRange,??_ScanWithRange+1
  3613  000EDC  0100               	movlb	0	; () banked
  3614  000EDE  6B7B               	clrf	??_ScanWithRange& (0+255),b
  3615  000EE0  0100               	movlb	0	; () banked
  3616  000EE2  277B               	addwf	??_ScanWithRange& (0+255),f,b
  3617  000EE4  0E00               	movlw	0
  3618  000EE6  237C               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3619  000EE8  0100               	movlb	0	; () banked
  3620  000EEA  1F7B               	comf	??_ScanWithRange& (0+255),f,b
  3621  000EEC  1F7C               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3622  000EEE  4B7B               	infsnz	??_ScanWithRange& (0+255),f,b
  3623  000EF0  2B7C               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3624  000EF2  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3625  000EF6  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3626  000EFA  50DF               	movf	indf2,w,c
  3627  000EFC  0100               	movlb	0	; () banked
  3628  000EFE  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3629  000F00  0100               	movlb	0	; () banked
  3630  000F02  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3631  000F04  0D02               	mullw	2
  3632  000F06  50F3               	movf	prodl,w,c
  3633  000F08  0100               	movlb	0	; () banked
  3634  000F0A  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3635  000F0C  6ED9               	movwf	fsr2l,c
  3636  000F0E  50F4               	movf	prodh,w,c
  3637  000F10  0100               	movlb	0	; () banked
  3638  000F12  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3639  000F14  6EDA               	movwf	fsr2h,c
  3640  000F16  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3641  000F1A  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;Movement.c: 202: *Move = *Move+1;
  3645  000F1E  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3646  000F22  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3647  000F26  50DF               	movf	indf2,w,c
  3648  000F28  0100               	movlb	0	; () banked
  3649  000F2A  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3650  000F2C  0100               	movlb	0	; () banked
  3651  000F2E  297B               	incf	??_ScanWithRange& (0+255),w,b
  3652  000F30  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3653  000F34  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3654  000F38  6EDF               	movwf	indf2,c
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;Movement.c: 203: stop(mL,mR);
  3658  000F3A  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3659  000F3E  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3660  000F42  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3661  000F46  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3662  000F4A  ECBC  F00B         	call	_stop	;wreg free
  3663                           
  3664                           ;Movement.c: 206: turnLeft(mL,mR,100);
  3665  000F4E  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  3666  000F52  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3667  000F56  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  3668  000F5A  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3669  000F5E  0E64               	movlw	100
  3670  000F60  0100               	movlb	0	; () banked
  3671  000F62  6F6B               	movwf	turnLeft@power& (0+255),b
  3672  000F64  EC22  F00E         	call	_turnLeft	;wreg free
  3673                           
  3674                           ;Movement.c: 207: delay_tenth_s(MiniLeftFlick);
  3675  000F68  0100               	movlb	0	; () banked
  3676  000F6A  51B0               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3677  000F6C  EC41  F00E         	call	_delay_tenth_s
  3678                           
  3679                           ;Movement.c: 208: stop(mL,mR);
  3680  000F70  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3681  000F74  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3682  000F78  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3683  000F7C  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3684  000F80  ECBC  F00B         	call	_stop	;wreg free
  3685                           
  3686                           ;Movement.c: 209: (MoveType[*Move]) = 2;
  3687  000F84  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3688  000F88  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3689  000F8C  50DF               	movf	indf2,w,c
  3690  000F8E  0100               	movlb	0	; () banked
  3691  000F90  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3692  000F92  0100               	movlb	0	; () banked
  3693  000F94  517B               	movf	??_ScanWithRange& (0+255),w,b
  3694  000F96  0D01               	mullw	1
  3695  000F98  50F3               	movf	prodl,w,c
  3696  000F9A  0100               	movlb	0	; () banked
  3697  000F9C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3698  000F9E  6ED9               	movwf	fsr2l,c
  3699  000FA0  50F4               	movf	prodh,w,c
  3700  000FA2  0100               	movlb	0	; () banked
  3701  000FA4  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3702  000FA6  6EDA               	movwf	fsr2h,c
  3703  000FA8  0E02               	movlw	2
  3704  000FAA  6EDF               	movwf	indf2,c
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;Movement.c: 210: (MoveTime[*Move]) = MiniLeftFlick;
  3708  000FAC  0100               	movlb	0	; () banked
  3709  000FAE  51B0               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3710  000FB0  0100               	movlb	0	; () banked
  3711  000FB2  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3712  000FB4  6B7C               	clrf	(??_ScanWithRange+1)& (0+255),b
  3713  000FB6  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3714  000FBA  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3715  000FBE  50DF               	movf	indf2,w,c
  3716  000FC0  0100               	movlb	0	; () banked
  3717  000FC2  6F7D               	movwf	(??_ScanWithRange+2)& (0+255),b
  3718  000FC4  0100               	movlb	0	; () banked
  3719  000FC6  517D               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3720  000FC8  0D02               	mullw	2
  3721  000FCA  50F3               	movf	prodl,w,c
  3722  000FCC  0100               	movlb	0	; () banked
  3723  000FCE  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3724  000FD0  6ED9               	movwf	fsr2l,c
  3725  000FD2  50F4               	movf	prodh,w,c
  3726  000FD4  0100               	movlb	0	; () banked
  3727  000FD6  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3728  000FD8  6EDA               	movwf	fsr2h,c
  3729  000FDA  C07B  FFDE         	movff	??_ScanWithRange,postinc2
  3730  000FDE  C07C  FFDD         	movff	??_ScanWithRange+1,postdec2
  3731  000FE2  D751               	goto	l3274
  3732  000FE4                     l3300:
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;Movement.c: 214: return 2;
  3736  000FE4  0E02               	movlw	2
  3737                           
  3738                           ; BSR set to: 0
  3739  000FE6  0012               	return	
  3740  000FE8                     l3304:
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;Movement.c: 215: }
  3744                           ;Movement.c: 216: }
  3745                           ;Movement.c: 218: if (*RFID_Read==1) {
  3746  000FE8  C079  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3747  000FEC  C07A  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3748  000FF0  04DE               	decf	postinc2,w,c
  3749  000FF2  A4D8               	btfss	status,2,c
  3750  000FF4  D002               	goto	l3310
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;Movement.c: 219: return 2;
  3754  000FF6  0E02               	movlw	2
  3755                           
  3756                           ; BSR set to: 0
  3757  000FF8  0012               	return	
  3758  000FFA                     l3310:
  3759                           
  3760                           ; BSR set to: 0
  3761  000FFA  0100               	movlb	0	; () banked
  3762  000FFC  4BAA               	infsnz	ScanWithRange@i& (0+255),f,b
  3763  000FFE  2BAB               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3764  001000                     l3312:
  3765                           
  3766                           ; BSR set to: 0
  3767  001000  0100               	movlb	0	; () banked
  3768  001002  51AA               	movf	ScanWithRange@i& (0+255),w,b
  3769  001004  0100               	movlb	0	; () banked
  3770  001006  5D71               	subwf	ScanWithRange@loops& (0+255),w,b
  3771  001008  0100               	movlb	0	; () banked
  3772  00100A  51AB               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3773  00100C  0100               	movlb	0	; () banked
  3774  00100E  5972               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3775  001010  B0D8               	btfsc	status,0,c
  3776  001012  D61F               	goto	l3224
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;Movement.c: 220: }
  3780                           ;Movement.c: 221: }
  3781                           ;Movement.c: 224: (MoveType[*Move]) = 2;
  3782                           
  3783                           ; BSR set to: 0
  3784  001014  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3785  001018  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3786  00101C  50DF               	movf	indf2,w,c
  3787  00101E  0100               	movlb	0	; () banked
  3788  001020  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3789  001022  0100               	movlb	0	; () banked
  3790  001024  517B               	movf	??_ScanWithRange& (0+255),w,b
  3791  001026  0D01               	mullw	1
  3792  001028  50F3               	movf	prodl,w,c
  3793  00102A  0100               	movlb	0	; () banked
  3794  00102C  2577               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3795  00102E  6ED9               	movwf	fsr2l,c
  3796  001030  50F4               	movf	prodh,w,c
  3797  001032  0100               	movlb	0	; () banked
  3798  001034  2178               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3799  001036  6EDA               	movwf	fsr2h,c
  3800  001038  0E02               	movlw	2
  3801  00103A  6EDF               	movwf	indf2,c
  3802                           
  3803                           ;Movement.c: 225: (MoveTime[*Move]) = -2;
  3804  00103C  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3805  001040  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3806  001044  50DF               	movf	indf2,w,c
  3807  001046  0100               	movlb	0	; () banked
  3808  001048  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3809  00104A  0100               	movlb	0	; () banked
  3810  00104C  517B               	movf	??_ScanWithRange& (0+255),w,b
  3811  00104E  0D02               	mullw	2
  3812  001050  50F3               	movf	prodl,w,c
  3813  001052  0100               	movlb	0	; () banked
  3814  001054  2573               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3815  001056  6ED9               	movwf	fsr2l,c
  3816  001058  50F4               	movf	prodh,w,c
  3817  00105A  0100               	movlb	0	; () banked
  3818  00105C  2174               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3819  00105E  6EDA               	movwf	fsr2h,c
  3820  001060  0EFE               	movlw	254
  3821  001062  6EDE               	movwf	postinc2,c
  3822  001064  0EFF               	movlw	255
  3823  001066  6EDD               	movwf	postdec2,c
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;Movement.c: 226: *Move = *Move+1;
  3827  001068  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3828  00106C  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3829  001070  50DF               	movf	indf2,w,c
  3830  001072  0100               	movlb	0	; () banked
  3831  001074  6F7B               	movwf	??_ScanWithRange& (0+255),b
  3832  001076  0100               	movlb	0	; () banked
  3833  001078  297B               	incf	??_ScanWithRange& (0+255),w,b
  3834  00107A  C075  FFD9         	movff	ScanWithRange@Move,fsr2l
  3835  00107E  C076  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3836  001082  6EDF               	movwf	indf2,c
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;Movement.c: 227: turnRight(mL,mR, 100);
  3840  001084  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3841  001088  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3842  00108C  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3843  001090  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3844  001094  0E64               	movlw	100
  3845  001096  0100               	movlb	0	; () banked
  3846  001098  6F6B               	movwf	turnRight@power& (0+255),b
  3847  00109A  EC03  F00E         	call	_turnRight	;wreg free
  3848                           
  3849                           ;Movement.c: 228: delay_tenth_s(2);
  3850  00109E  0E02               	movlw	2
  3851  0010A0  EC41  F00E         	call	_delay_tenth_s
  3852                           
  3853                           ;Movement.c: 229: stop(mL,mR);
  3854  0010A4  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3855  0010A8  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3856  0010AC  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3857  0010B0  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3858  0010B4  ECBC  F00B         	call	_stop	;wreg free
  3859                           
  3860                           ;Movement.c: 230: return -1;
  3861  0010B8  0EFF               	movlw	255
  3862  0010BA  0012               	return	
  3863  0010BC                     __end_of_ScanWithRange:
  3864                           	opt stack 0
  3865                           tblptru	equ	0xFF8
  3866                           prodh	equ	0xFF4
  3867                           prodl	equ	0xFF3
  3868                           intcon	equ	0xFF2
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           indf1	equ	0xFE7
  3872                           plusw1	equ	0xFE3
  3873                           fsr1h	equ	0xFE2
  3874                           fsr1l	equ	0xFE1
  3875                           indf2	equ	0xFDF
  3876                           postinc2	equ	0xFDE
  3877                           postdec2	equ	0xFDD
  3878                           plusw2	equ	0xFDB
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function _turnRight *****************
  3884 ;; Defined at:
  3885 ;;		line 98 in file "dc_motor.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3888 ;;		 -> main@mL(9), 
  3889 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3890 ;;		 -> main@mR(9), 
  3891 ;;  power           1   11[BANK0 ] unsigned char 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;		None
  3894 ;; Return value:  Size  Location     Type
  3895 ;;		None               void
  3896 ;; Registers used:
  3897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3903 ;;      Params:         0       5       0       0
  3904 ;;      Locals:         0       0       0       0
  3905 ;;      Temps:          0       0       0       0
  3906 ;;      Totals:         0       5       0       0
  3907 ;;Total ram usage:        5 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:    6
  3910 ;; This function calls:
  3911 ;;		_fullSpeedAhead
  3912 ;; This function is called by:
  3913 ;;		_ScanWithRange
  3914 ;;		_main
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text10
  3919  001C06                     __ptext10:
  3920                           	opt stack 0
  3921  001C06                     _turnRight:
  3922                           	opt stack 24
  3923                           
  3924                           ;dc_motor.c: 102: mL->direction=0;
  3925                           
  3926                           ;incstack = 0
  3927  001C06  0100               	movlb	0	; () banked
  3928  001C08  EE20 F001          	lfsr	2,1
  3929  001C0C  5167               	movf	turnRight@mL& (0+255),w,b
  3930  001C0E  26D9               	addwf	fsr2l,f,c
  3931  001C10  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3932  001C12  22DA               	addwfc	fsr2h,f,c
  3933  001C14  0E00               	movlw	0
  3934  001C16  6EDF               	movwf	indf2,c
  3935                           
  3936                           ;dc_motor.c: 103: mR->direction=1;
  3937  001C18  0100               	movlb	0	; () banked
  3938  001C1A  EE20 F001          	lfsr	2,1
  3939  001C1E  5169               	movf	turnRight@mR& (0+255),w,b
  3940  001C20  26D9               	addwf	fsr2l,f,c
  3941  001C22  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3942  001C24  22DA               	addwfc	fsr2h,f,c
  3943  001C26  0E01               	movlw	1
  3944  001C28  6EDF               	movwf	indf2,c
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3948  001C2A  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3949  001C2E  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3950  001C32  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3951  001C36  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3952  001C3A  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3953  001C3E  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  3954  001C42  0012               	return		;funcret
  3955  001C44                     __end_of_turnRight:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           indf1	equ	0xFE7
  3964                           plusw1	equ	0xFE3
  3965                           fsr1h	equ	0xFE2
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           postinc2	equ	0xFDE
  3969                           postdec2	equ	0xFDD
  3970                           plusw2	equ	0xFDB
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _turnLeft *****************
  3976 ;; Defined at:
  3977 ;;		line 87 in file "dc_motor.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3980 ;;		 -> main@mL(9), 
  3981 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3982 ;;		 -> main@mR(9), 
  3983 ;;  power           1   11[BANK0 ] unsigned char 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;		None
  3986 ;; Return value:  Size  Location     Type
  3987 ;;		None               void
  3988 ;; Registers used:
  3989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3995 ;;      Params:         0       5       0       0
  3996 ;;      Locals:         0       0       0       0
  3997 ;;      Temps:          0       0       0       0
  3998 ;;      Totals:         0       5       0       0
  3999 ;;Total ram usage:        5 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    6
  4002 ;; This function calls:
  4003 ;;		_fullSpeedAhead
  4004 ;; This function is called by:
  4005 ;;		_ScanWithRange
  4006 ;;		_main
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           	psect	text11
  4011  001C44                     __ptext11:
  4012                           	opt stack 0
  4013  001C44                     _turnLeft:
  4014                           	opt stack 24
  4015                           
  4016                           ;dc_motor.c: 91: mL->direction=1;
  4017                           
  4018                           ;incstack = 0
  4019  001C44  0100               	movlb	0	; () banked
  4020  001C46  EE20 F001          	lfsr	2,1
  4021  001C4A  5167               	movf	turnLeft@mL& (0+255),w,b
  4022  001C4C  26D9               	addwf	fsr2l,f,c
  4023  001C4E  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  4024  001C50  22DA               	addwfc	fsr2h,f,c
  4025  001C52  0E01               	movlw	1
  4026  001C54  6EDF               	movwf	indf2,c
  4027                           
  4028                           ;dc_motor.c: 92: mR->direction=0;
  4029  001C56  0100               	movlb	0	; () banked
  4030  001C58  EE20 F001          	lfsr	2,1
  4031  001C5C  5169               	movf	turnLeft@mR& (0+255),w,b
  4032  001C5E  26D9               	addwf	fsr2l,f,c
  4033  001C60  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  4034  001C62  22DA               	addwfc	fsr2h,f,c
  4035  001C64  0E00               	movlw	0
  4036  001C66  6EDF               	movwf	indf2,c
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  4040  001C68  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  4041  001C6C  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  4042  001C70  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  4043  001C74  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  4044  001C78  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  4045  001C7C  EC8D  F00C         	call	_fullSpeedAhead	;wreg free
  4046  001C80  0012               	return		;funcret
  4047  001C82                     __end_of_turnLeft:
  4048                           	opt stack 0
  4049                           tblptru	equ	0xFF8
  4050                           prodh	equ	0xFF4
  4051                           prodl	equ	0xFF3
  4052                           intcon	equ	0xFF2
  4053                           postinc0	equ	0xFEE
  4054                           wreg	equ	0xFE8
  4055                           indf1	equ	0xFE7
  4056                           plusw1	equ	0xFE3
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           plusw2	equ	0xFDB
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _fullSpeedAhead *****************
  4068 ;; Defined at:
  4069 ;;		line 108 in file "dc_motor.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4072 ;;		 -> main@mL(9), 
  4073 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4074 ;;		 -> main@mR(9), 
  4075 ;;  power           1    6[BANK0 ] unsigned char 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;		None               void
  4080 ;; Registers used:
  4081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4087 ;;      Params:         0       5       0       0
  4088 ;;      Locals:         0       0       0       0
  4089 ;;      Temps:          1       0       0       0
  4090 ;;      Totals:         1       5       0       0
  4091 ;;Total ram usage:        6 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    5
  4094 ;; This function calls:
  4095 ;;		_setMotorPWM
  4096 ;; This function is called by:
  4097 ;;		_turnLeft
  4098 ;;		_turnRight
  4099 ;;		_fullSpeedBack
  4100 ;;		_main
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text12
  4105  00191A                     __ptext12:
  4106                           	opt stack 0
  4107  00191A                     _fullSpeedAhead:
  4108                           	opt stack 24
  4109                           
  4110                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  4111                           
  4112                           ;incstack = 0
  4113  00191A  D02C               	goto	l65
  4114  00191C                     l2992:
  4115                           
  4116                           ;dc_motor.c: 112: if(mL->power<power){
  4117  00191C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4118  001920  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4119  001924  0100               	movlb	0	; () banked
  4120  001926  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4121  001928  5CDE               	subwf	postinc2,w,c
  4122  00192A  B0D8               	btfsc	status,0,c
  4123  00192C  D005               	goto	l2996
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;dc_motor.c: 113: mL->power++;
  4127  00192E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4128  001932  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4129  001936  2ADF               	incf	indf2,f,c
  4130  001938                     l2996:
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;dc_motor.c: 114: }
  4134                           ;dc_motor.c: 115: if(mR->power<power){
  4135  001938  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4136  00193C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4137  001940  0100               	movlb	0	; () banked
  4138  001942  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4139  001944  5CDE               	subwf	postinc2,w,c
  4140  001946  B0D8               	btfsc	status,0,c
  4141  001948  D005               	goto	l3000
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;dc_motor.c: 116: mR->power++;
  4145  00194A  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4146  00194E  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4147  001952  2ADF               	incf	indf2,f,c
  4148  001954                     l3000:
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;dc_motor.c: 117: }
  4152                           ;dc_motor.c: 118: setMotorPWM(mL);
  4153  001954  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  4154  001958  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  4155  00195C  ECE1  F009         	call	_setMotorPWM	;wreg free
  4156                           
  4157                           ;dc_motor.c: 119: setMotorPWM(mR);
  4158  001960  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  4159  001964  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  4160  001968  ECE1  F009         	call	_setMotorPWM	;wreg free
  4161                           
  4162                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4163  00196C  0E21               	movlw	33
  4164  00196E                     u3177:
  4165  00196E  2EE8               	decfsz	wreg,f,c
  4166  001970  D7FE               	goto	u3177
  4167  001972  F000               	nop	
  4168  001974                     l65:
  4169  001974  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  4170  001978  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  4171  00197C  0100               	movlb	0	; () banked
  4172  00197E  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4173  001980  5CDE               	subwf	postinc2,w,c
  4174  001982  A0D8               	btfss	status,0,c
  4175  001984  D7CB               	goto	l2992
  4176                           
  4177                           ; BSR set to: 0
  4178  001986  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  4179  00198A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  4180  00198E  0100               	movlb	0	; () banked
  4181  001990  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  4182  001992  5CDE               	subwf	postinc2,w,c
  4183  001994  B0D8               	btfsc	status,0,c
  4184  001996  0012               	return	
  4185  001998  D7C1               	goto	l2992
  4186  00199A                     __end_of_fullSpeedAhead:
  4187                           	opt stack 0
  4188                           tblptru	equ	0xFF8
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           intcon	equ	0xFF2
  4192                           postinc0	equ	0xFEE
  4193                           wreg	equ	0xFE8
  4194                           indf1	equ	0xFE7
  4195                           plusw1	equ	0xFE3
  4196                           fsr1h	equ	0xFE2
  4197                           fsr1l	equ	0xFE1
  4198                           indf2	equ	0xFDF
  4199                           postinc2	equ	0xFDE
  4200                           postdec2	equ	0xFDD
  4201                           plusw2	equ	0xFDB
  4202                           fsr2h	equ	0xFDA
  4203                           fsr2l	equ	0xFD9
  4204                           status	equ	0xFD8
  4205                           
  4206 ;; *************** function _delay_tenth_s *****************
  4207 ;; Defined at:
  4208 ;;		line 32 in file "Movement.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  tenth_second    1    wreg     unsigned char 
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;  tenth_second    1   36[COMRAM] unsigned char 
  4213 ;;  i               2   37[COMRAM] unsigned int 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;		None               void
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4223 ;;      Params:         0       0       0       0
  4224 ;;      Locals:         3       0       0       0
  4225 ;;      Temps:          1       0       0       0
  4226 ;;      Totals:         4       0       0       0
  4227 ;;Total ram usage:        4 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    3
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_ScanWithRange
  4234 ;;		_main
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text13
  4239  001C82                     __ptext13:
  4240                           	opt stack 0
  4241  001C82                     _delay_tenth_s:
  4242                           	opt stack 27
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;incstack = 0
  4246                           ;delay_tenth_s@tenth_seconds stored from wreg
  4247  001C82  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  4248                           
  4249                           ;Movement.c: 33: unsigned int i=0;
  4250  001C84  0E00               	movlw	0
  4251  001C86  6E27               	movwf	delay_tenth_s@i+1,c
  4252  001C88  0E00               	movlw	0
  4253  001C8A  6E26               	movwf	delay_tenth_s@i,c
  4254                           
  4255                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4256  001C8C  0E00               	movlw	0
  4257  001C8E  6E27               	movwf	delay_tenth_s@i+1,c
  4258  001C90  0E01               	movlw	1
  4259  001C92  6E26               	movwf	delay_tenth_s@i,c
  4260  001C94  D009               	goto	l2268
  4261  001C96                     l2264:
  4262                           
  4263                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4264  001C96  0E82               	movlw	130
  4265  001C98  6E24               	movwf	??_delay_tenth_s& (0+255),c
  4266  001C9A  0EDE               	movlw	222
  4267  001C9C                     u3187:
  4268  001C9C  2EE8               	decfsz	wreg,f,c
  4269  001C9E  D7FE               	goto	u3187
  4270  001CA0  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  4271  001CA2  D7FC               	goto	u3187
  4272  001CA4  4A26               	infsnz	delay_tenth_s@i,f,c
  4273  001CA6  2A27               	incf	delay_tenth_s@i+1,f,c
  4274  001CA8                     l2268:
  4275  001CA8  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  4276  001CAA  0D02               	mullw	2
  4277  001CAC  5026               	movf	delay_tenth_s@i,w,c
  4278  001CAE  5CF3               	subwf	prodl,w,c
  4279  001CB0  5027               	movf	delay_tenth_s@i+1,w,c
  4280  001CB2  58F4               	subwfb	prodh,w,c
  4281  001CB4  A0D8               	btfss	status,0,c
  4282  001CB6  0012               	return	
  4283  001CB8  D7EE               	goto	l2264
  4284  001CBA                     __end_of_delay_tenth_s:
  4285                           	opt stack 0
  4286                           tblptru	equ	0xFF8
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           indf1	equ	0xFE7
  4293                           plusw1	equ	0xFE3
  4294                           fsr1h	equ	0xFE2
  4295                           fsr1l	equ	0xFE1
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           plusw2	equ	0xFDB
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _ScanIR *****************
  4305 ;; Defined at:
  4306 ;;		line 44 in file "Movement.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  4309 ;;		 -> main@mL(9), 
  4310 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  4311 ;;		 -> main@mR(9), 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  buf            40   17[BANK0 ] unsigned char [40]
  4314 ;;  SensorResult    4   59[BANK0 ] unsigned int [2]
  4315 ;;  DirectionMov    2   57[BANK0 ] const unsigned int 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      unsigned char 
  4318 ;; Registers used:
  4319 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4325 ;;      Params:         0       4       0       0
  4326 ;;      Locals:         0      46       0       0
  4327 ;;      Temps:          1       0       0       0
  4328 ;;      Totals:         1      50       0       0
  4329 ;;Total ram usage:       51 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    7
  4332 ;; This function calls:
  4333 ;;		_LCD_String
  4334 ;;		_SendLCD
  4335 ;;		_SetLine
  4336 ;;		_grabLeftIR
  4337 ;;		_grabRightIR
  4338 ;;		_sprintf
  4339 ;;		_stop
  4340 ;; This function is called by:
  4341 ;;		_main
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text14
  4346  0014FC                     __ptext14:
  4347                           	opt stack 0
  4348  0014FC                     _ScanIR:
  4349                           	opt stack 23
  4350                           
  4351                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4352                           
  4353                           ;incstack = 0
  4354  0014FC  C0F1  F09B         	movff	ScanIR@F3879,ScanIR@SensorResult
  4355  001500  C0F2  F09C         	movff	ScanIR@F3879+1,ScanIR@SensorResult+1
  4356  001504  C0F3  F09D         	movff	ScanIR@F3879+2,ScanIR@SensorResult+2
  4357  001508  C0F4  F09E         	movff	ScanIR@F3879+3,ScanIR@SensorResult+3
  4358                           
  4359                           ;Movement.c: 48: char buf[40];
  4360                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4361  00150C  0E03               	movlw	3
  4362  00150E  0100               	movlb	0	; () banked
  4363  001510  6F9A               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4364  001512  0EE8               	movlw	232
  4365  001514  6F99               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4369  001516  EC06  F00D         	call	_grabLeftIR	;wreg free
  4370  00151A  C024  F09B         	movff	?_grabLeftIR,ScanIR@SensorResult
  4371  00151E  C025  F09C         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4372                           
  4373                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4374  001522  ECCD  F00C         	call	_grabRightIR	;wreg free
  4375  001526  C024  F09D         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4376  00152A  C025  F09E         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4377                           
  4378                           ;Movement.c: 60: CAP1BUFH=0;
  4379  00152E  0E00               	movlw	0
  4380  001530  6E69               	movwf	3945,c	;volatile
  4381                           
  4382                           ;Movement.c: 61: CAP1BUFL=0;
  4383  001532  0E00               	movlw	0
  4384  001534  6E68               	movwf	3944,c	;volatile
  4385                           
  4386                           ;Movement.c: 62: CAP2BUFH=0;
  4387  001536  0E00               	movlw	0
  4388  001538  6E67               	movwf	3943,c	;volatile
  4389                           
  4390                           ;Movement.c: 63: CAP2BUFL=0;
  4391  00153A  0E00               	movlw	0
  4392  00153C  6E66               	movwf	3942,c	;volatile
  4393                           
  4394                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4395  00153E  0E00               	movlw	0
  4396  001540  6E28               	movwf	SendLCD@type,c
  4397  001542  0E01               	movlw	1
  4398  001544  ECC5  F00E         	call	_SendLCD
  4399                           
  4400                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4401  001548  0E21               	movlw	33
  4402  00154A                     u3197:
  4403  00154A  2EE8               	decfsz	wreg,f,c
  4404  00154C  D7FE               	goto	u3197
  4405  00154E  F000               	nop	
  4406                           
  4407                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4408  001550  0E00               	movlw	0
  4409  001552  6E28               	movwf	SendLCD@type,c
  4410  001554  0E02               	movlw	2
  4411  001556  ECC5  F00E         	call	_SendLCD
  4412                           
  4413                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4414  00155A  0E06               	movlw	6
  4415  00155C  6E39               	movwf	??_ScanIR& (0+255),c
  4416  00155E  0E30               	movlw	48
  4417  001560                     u3207:
  4418  001560  2EE8               	decfsz	wreg,f,c
  4419  001562  D7FE               	goto	u3207
  4420  001564  2E39               	decfsz	??_ScanIR& (0+255),f,c
  4421  001566  D7FC               	goto	u3207
  4422  001568  D000               	nop2	
  4423                           
  4424                           ;Movement.c: 70: SetLine(1);
  4425  00156A  0E01               	movlw	1
  4426  00156C  ECAD  F00E         	call	_SetLine
  4427                           
  4428                           ;Movement.c: 71: LCD_String("     ScanIR");
  4429  001570  0E2D               	movlw	low STR_1
  4430  001572  6E2A               	movwf	LCD_String@string,c
  4431  001574  0E03               	movlw	high STR_1
  4432  001576  6E2B               	movwf	LCD_String@string+1,c
  4433  001578  EC3F  F00D         	call	_LCD_String	;wreg free
  4434                           
  4435                           ;Movement.c: 72: SetLine(2);
  4436  00157C  0E02               	movlw	2
  4437  00157E  ECAD  F00E         	call	_SetLine
  4438                           
  4439                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4440  001582  0E71               	movlw	low ScanIR@buf
  4441  001584  6E30               	movwf	sprintf@sp,c
  4442  001586  0E00               	movlw	high ScanIR@buf
  4443  001588  6E31               	movwf	sprintf@sp+1,c
  4444  00158A  0E0C               	movlw	low (STR_6+1)
  4445  00158C  6E32               	movwf	sprintf@f,c
  4446  00158E  0E03               	movlw	high (STR_6+1)
  4447  001590  6E33               	movwf	sprintf@f+1,c
  4448  001592  C09B  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  4449  001596  C09C  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4450  00159A  C09D  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4451  00159E  C09E  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4452  0015A2  EC5E  F008         	call	_sprintf	;wreg free
  4453                           
  4454                           ;Movement.c: 74: LCD_String(buf);
  4455  0015A6  0E71               	movlw	low ScanIR@buf
  4456  0015A8  6E2A               	movwf	LCD_String@string,c
  4457  0015AA  0E00               	movlw	high ScanIR@buf
  4458  0015AC  6E2B               	movwf	LCD_String@string+1,c
  4459  0015AE  EC3F  F00D         	call	_LCD_String	;wreg free
  4460                           
  4461                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4462                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4463  0015B2  0100               	movlb	0	; () banked
  4464  0015B4  519B               	movf	ScanIR@SensorResult& (0+255),w,b
  4465  0015B6  0100               	movlb	0	; () banked
  4466  0015B8  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4467  0015BA  0100               	movlb	0	; () banked
  4468  0015BC  519C               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4469  0015BE  0100               	movlb	0	; () banked
  4470  0015C0  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4471  0015C2  B0D8               	btfsc	status,0,c
  4472  0015C4  D00C               	goto	l3192
  4473                           
  4474                           ; BSR set to: 0
  4475  0015C6  0100               	movlb	0	; () banked
  4476  0015C8  519D               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4477  0015CA  0100               	movlb	0	; () banked
  4478  0015CC  5D99               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4479  0015CE  0100               	movlb	0	; () banked
  4480  0015D0  519E               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4481  0015D2  0100               	movlb	0	; () banked
  4482  0015D4  599A               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4483  0015D6  B0D8               	btfsc	status,0,c
  4484  0015D8  D002               	goto	l3192
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;Movement.c: 80: return 2;
  4488  0015DA  0E02               	movlw	2
  4489                           
  4490                           ; BSR set to: 0
  4491                           ;Movement.c: 81: } else {
  4492                           
  4493                           ; BSR set to: 0
  4494  0015DC  0012               	return	
  4495  0015DE                     l3192:
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;Movement.c: 82: stop(mL,mR);
  4499  0015DE  C06D  F062         	movff	ScanIR@mL,stop@mL
  4500  0015E2  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  4501  0015E6  C06F  F064         	movff	ScanIR@mR,stop@mR
  4502  0015EA  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  4503  0015EE  ECBC  F00B         	call	_stop	;wreg free
  4504                           
  4505                           ;Movement.c: 83: return 0;
  4506  0015F2  0E00               	movlw	0
  4507  0015F4  0012               	return	
  4508  0015F6                     __end_of_ScanIR:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           intcon	equ	0xFF2
  4514                           postinc0	equ	0xFEE
  4515                           wreg	equ	0xFE8
  4516                           indf1	equ	0xFE7
  4517                           plusw1	equ	0xFE3
  4518                           fsr1h	equ	0xFE2
  4519                           fsr1l	equ	0xFE1
  4520                           indf2	equ	0xFDF
  4521                           postinc2	equ	0xFDE
  4522                           postdec2	equ	0xFDD
  4523                           plusw2	equ	0xFDB
  4524                           fsr2h	equ	0xFDA
  4525                           fsr2l	equ	0xFD9
  4526                           status	equ	0xFD8
  4527                           
  4528 ;; *************** function _stop *****************
  4529 ;; Defined at:
  4530 ;;		line 67 in file "dc_motor.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  4533 ;;		 -> main@mL(9), 
  4534 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  4535 ;;		 -> main@mR(9), 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;		None               void
  4540 ;; Registers used:
  4541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4547 ;;      Params:         0       4       0       0
  4548 ;;      Locals:         0       0       0       0
  4549 ;;      Temps:          0       0       0       0
  4550 ;;      Totals:         0       4       0       0
  4551 ;;Total ram usage:        4 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    5
  4554 ;; This function calls:
  4555 ;;		_setMotorPWM
  4556 ;; This function is called by:
  4557 ;;		_ScanIR
  4558 ;;		_ScanWithRange
  4559 ;;		_main
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text15
  4564  001778                     __ptext15:
  4565                           	opt stack 0
  4566  001778                     _stop:
  4567                           	opt stack 25
  4568                           
  4569                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4570                           
  4571                           ;incstack = 0
  4572  001778  D028               	goto	l3024
  4573  00177A                     l3010:
  4574                           
  4575                           ;dc_motor.c: 71: if(mL->power>0){
  4576  00177A  C062  FFD9         	movff	stop@mL,fsr2l
  4577  00177E  C063  FFDA         	movff	stop@mL+1,fsr2h
  4578  001782  50DF               	movf	indf2,w,c
  4579  001784  B4D8               	btfsc	status,2,c
  4580  001786  D005               	goto	l3014
  4581                           
  4582                           ;dc_motor.c: 72: mL->power--;
  4583  001788  C062  FFD9         	movff	stop@mL,fsr2l
  4584  00178C  C063  FFDA         	movff	stop@mL+1,fsr2h
  4585  001790  06DF               	decf	indf2,f,c
  4586  001792                     l3014:
  4587                           
  4588                           ;dc_motor.c: 73: }
  4589                           ;dc_motor.c: 74: if(mR->power>0){
  4590  001792  C064  FFD9         	movff	stop@mR,fsr2l
  4591  001796  C065  FFDA         	movff	stop@mR+1,fsr2h
  4592  00179A  50DF               	movf	indf2,w,c
  4593  00179C  B4D8               	btfsc	status,2,c
  4594  00179E  D005               	goto	l3018
  4595                           
  4596                           ;dc_motor.c: 75: mR->power--;
  4597  0017A0  C064  FFD9         	movff	stop@mR,fsr2l
  4598  0017A4  C065  FFDA         	movff	stop@mR+1,fsr2h
  4599  0017A8  06DF               	decf	indf2,f,c
  4600  0017AA                     l3018:
  4601                           
  4602                           ;dc_motor.c: 76: }
  4603                           ;dc_motor.c: 77: setMotorPWM(mL);
  4604  0017AA  C062  F032         	movff	stop@mL,setMotorPWM@m
  4605  0017AE  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  4606  0017B2  ECE1  F009         	call	_setMotorPWM	;wreg free
  4607                           
  4608                           ;dc_motor.c: 78: setMotorPWM(mR);
  4609  0017B6  C064  F032         	movff	stop@mR,setMotorPWM@m
  4610  0017BA  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  4611  0017BE  ECE1  F009         	call	_setMotorPWM	;wreg free
  4612                           
  4613                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4614  0017C2  0E21               	movlw	33
  4615  0017C4                     u3217:
  4616  0017C4  2EE8               	decfsz	wreg,f,c
  4617  0017C6  D7FE               	goto	u3217
  4618  0017C8  F000               	nop	
  4619  0017CA                     l3024:
  4620  0017CA  C062  FFD9         	movff	stop@mL,fsr2l
  4621  0017CE  C063  FFDA         	movff	stop@mL+1,fsr2h
  4622  0017D2  50DF               	movf	indf2,w,c
  4623  0017D4  A4D8               	btfss	status,2,c
  4624  0017D6  D7D1               	goto	l3010
  4625  0017D8  C064  FFD9         	movff	stop@mR,fsr2l
  4626  0017DC  C065  FFDA         	movff	stop@mR+1,fsr2h
  4627  0017E0  50DF               	movf	indf2,w,c
  4628  0017E2  A4D8               	btfss	status,2,c
  4629  0017E4  D7CA               	goto	l3010
  4630                           
  4631                           ;dc_motor.c: 80: }
  4632                           ;dc_motor.c: 81: mL->direction=1;
  4633  0017E6  0100               	movlb	0	; () banked
  4634  0017E8  EE20 F001          	lfsr	2,1
  4635  0017EC  5162               	movf	stop@mL& (0+255),w,b
  4636  0017EE  26D9               	addwf	fsr2l,f,c
  4637  0017F0  5163               	movf	(stop@mL+1)& (0+255),w,b
  4638  0017F2  22DA               	addwfc	fsr2h,f,c
  4639  0017F4  0E01               	movlw	1
  4640  0017F6  6EDF               	movwf	indf2,c
  4641                           
  4642                           ;dc_motor.c: 82: mR->direction=1;
  4643  0017F8  0100               	movlb	0	; () banked
  4644  0017FA  EE20 F001          	lfsr	2,1
  4645  0017FE  5164               	movf	stop@mR& (0+255),w,b
  4646  001800  26D9               	addwf	fsr2l,f,c
  4647  001802  5165               	movf	(stop@mR+1)& (0+255),w,b
  4648  001804  22DA               	addwfc	fsr2h,f,c
  4649  001806  0E01               	movlw	1
  4650  001808  6EDF               	movwf	indf2,c
  4651                           
  4652                           ; BSR set to: 0
  4653  00180A  0012               	return		;funcret
  4654  00180C                     __end_of_stop:
  4655                           	opt stack 0
  4656                           tblptru	equ	0xFF8
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           intcon	equ	0xFF2
  4660                           postinc0	equ	0xFEE
  4661                           wreg	equ	0xFE8
  4662                           indf1	equ	0xFE7
  4663                           plusw1	equ	0xFE3
  4664                           fsr1h	equ	0xFE2
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           plusw2	equ	0xFDB
  4670                           fsr2h	equ	0xFDA
  4671                           fsr2l	equ	0xFD9
  4672                           status	equ	0xFD8
  4673                           
  4674 ;; *************** function _setMotorPWM *****************
  4675 ;; Defined at:
  4676 ;;		line 26 in file "dc_motor.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  m               2   49[COMRAM] PTR struct DC_motor
  4679 ;;		 -> main@mR(9), main@mL(9), 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  PWMduty         2    0[BANK0 ] int 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;		None               void
  4684 ;; Registers used:
  4685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4691 ;;      Params:         2       0       0       0
  4692 ;;      Locals:         0       2       0       0
  4693 ;;      Temps:          5       0       0       0
  4694 ;;      Totals:         7       2       0       0
  4695 ;;Total ram usage:        9 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    4
  4698 ;; This function calls:
  4699 ;;		___awdiv
  4700 ;;		___wmul
  4701 ;; This function is called by:
  4702 ;;		_stop
  4703 ;;		_fullSpeedAhead
  4704 ;;		_setMotorFullSpeed
  4705 ;;		_stopMotor
  4706 ;; This function uses a non-reentrant model
  4707 ;;
  4708                           
  4709                           	psect	text16
  4710  0013C2                     __ptext16:
  4711                           	opt stack 0
  4712  0013C2                     _setMotorPWM:
  4713                           	opt stack 24
  4714                           
  4715                           ;dc_motor.c: 28: int PWMduty;
  4716                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;incstack = 0
  4720  0013C2  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  4721  0013C6  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4722  0013CA  50DF               	movf	indf2,w,c
  4723  0013CC  6E34               	movwf	??_setMotorPWM& (0+255),c
  4724  0013CE  5034               	movf	??_setMotorPWM,w,c
  4725  0013D0  6E24               	movwf	___wmul@multiplier,c
  4726  0013D2  6A25               	clrf	___wmul@multiplier+1,c
  4727  0013D4  EE20 F007          	lfsr	2,7
  4728  0013D8  5032               	movf	setMotorPWM@m,w,c
  4729  0013DA  26D9               	addwf	fsr2l,f,c
  4730  0013DC  5033               	movf	setMotorPWM@m+1,w,c
  4731  0013DE  22DA               	addwfc	fsr2h,f,c
  4732  0013E0  CFDE F026          	movff	postinc2,___wmul@multiplicand
  4733  0013E4  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  4734  0013E8  ECF0  F00E         	call	___wmul	;wreg free
  4735  0013EC  C024  F02A         	movff	?___wmul,___awdiv@dividend
  4736  0013F0  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  4737  0013F4  0E00               	movlw	0
  4738  0013F6  6E2D               	movwf	___awdiv@divisor+1,c
  4739  0013F8  0E64               	movlw	100
  4740  0013FA  6E2C               	movwf	___awdiv@divisor,c
  4741  0013FC  EC4B  F00C         	call	___awdiv	;wreg free
  4742  001400  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  4743  001404  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4744                           
  4745                           ;dc_motor.c: 32: if (m->direction)
  4746  001408  EE20 F001          	lfsr	2,1
  4747  00140C  5032               	movf	setMotorPWM@m,w,c
  4748  00140E  26D9               	addwf	fsr2l,f,c
  4749  001410  5033               	movf	setMotorPWM@m+1,w,c
  4750  001412  22DA               	addwfc	fsr2h,f,c
  4751  001414  50DF               	movf	indf2,w,c
  4752  001416  B4D8               	btfsc	status,2,c
  4753  001418  D02E               	goto	l2988
  4754                           
  4755                           ;dc_motor.c: 33: {
  4756                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4757  00141A  EE20 F006          	lfsr	2,6
  4758  00141E  5032               	movf	setMotorPWM@m,w,c
  4759  001420  26D9               	addwf	fsr2l,f,c
  4760  001422  5033               	movf	setMotorPWM@m+1,w,c
  4761  001424  22DA               	addwfc	fsr2h,f,c
  4762  001426  50DF               	movf	indf2,w,c
  4763  001428  6E34               	movwf	??_setMotorPWM& (0+255),c
  4764  00142A  0E01               	movlw	1
  4765  00142C  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4766  00142E  2A34               	incf	??_setMotorPWM,f,c
  4767  001430  D002               	goto	u2364
  4768  001432                     u2365:
  4769  001432  90D8               	bcf	status,0,c
  4770  001434  3635               	rlcf	??_setMotorPWM+1,f,c
  4771  001436                     u2364:
  4772  001436  2E34               	decfsz	??_setMotorPWM,f,c
  4773  001438  D7FC               	goto	u2365
  4774  00143A  5035               	movf	??_setMotorPWM+1,w,c
  4775  00143C  108A               	iorwf	3978,w,c	;volatile
  4776  00143E  6E8A               	movwf	3978,c	;volatile
  4777                           
  4778                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4779  001440  EE20 F007          	lfsr	2,7
  4780  001444  5032               	movf	setMotorPWM@m,w,c
  4781  001446  26D9               	addwf	fsr2l,f,c
  4782  001448  5033               	movf	setMotorPWM@m+1,w,c
  4783  00144A  22DA               	addwfc	fsr2h,f,c
  4784  00144C  CFDE F034          	movff	postinc2,??_setMotorPWM
  4785  001450  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4786  001454  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4787  001458  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4788  00145C  1E36               	comf	??_setMotorPWM+2,f,c
  4789  00145E  1E37               	comf	??_setMotorPWM+3,f,c
  4790  001460  4A36               	infsnz	??_setMotorPWM+2,f,c
  4791  001462  2A37               	incf	??_setMotorPWM+3,f,c
  4792  001464  5034               	movf	??_setMotorPWM,w,c
  4793  001466  2436               	addwf	??_setMotorPWM+2,w,c
  4794  001468  0100               	movlb	0	; () banked
  4795  00146A  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  4796  00146C  5035               	movf	??_setMotorPWM+1,w,c
  4797  00146E  2037               	addwfc	??_setMotorPWM+3,w,c
  4798  001470  0100               	movlb	0	; () banked
  4799  001472  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4800                           
  4801                           ;dc_motor.c: 36: }
  4802  001474  D014               	goto	l35
  4803  001476                     l2988:
  4804                           
  4805                           ;dc_motor.c: 37: else
  4806                           ;dc_motor.c: 38: {
  4807                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4808  001476  EE20 F006          	lfsr	2,6
  4809  00147A  5032               	movf	setMotorPWM@m,w,c
  4810  00147C  26D9               	addwf	fsr2l,f,c
  4811  00147E  5033               	movf	setMotorPWM@m+1,w,c
  4812  001480  22DA               	addwfc	fsr2h,f,c
  4813  001482  50DF               	movf	indf2,w,c
  4814  001484  6E34               	movwf	??_setMotorPWM& (0+255),c
  4815  001486  0E01               	movlw	1
  4816  001488  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  4817  00148A  2A34               	incf	??_setMotorPWM,f,c
  4818  00148C  D002               	goto	u2374
  4819  00148E                     u2375:
  4820  00148E  90D8               	bcf	status,0,c
  4821  001490  3635               	rlcf	??_setMotorPWM+1,f,c
  4822  001492                     u2374:
  4823  001492  2E34               	decfsz	??_setMotorPWM,f,c
  4824  001494  D7FC               	goto	u2375
  4825  001496  5035               	movf	??_setMotorPWM+1,w,c
  4826  001498  0AFF               	xorlw	255
  4827  00149A  148A               	andwf	3978,w,c	;volatile
  4828  00149C  6E8A               	movwf	3978,c	;volatile
  4829  00149E                     l35:
  4830                           
  4831                           ;dc_motor.c: 40: }
  4832                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4833  00149E  EE20 F002          	lfsr	2,2
  4834  0014A2  5032               	movf	setMotorPWM@m,w,c
  4835  0014A4  26D9               	addwf	fsr2l,f,c
  4836  0014A6  5033               	movf	setMotorPWM@m+1,w,c
  4837  0014A8  22DA               	addwfc	fsr2h,f,c
  4838  0014AA  CFDE F034          	movff	postinc2,??_setMotorPWM
  4839  0014AE  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4840  0014B2  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4841  0014B6  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4842  0014BA  0100               	movlb	0	; () banked
  4843  0014BC  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4844  0014BE  46E8               	rlncf	wreg,f,c
  4845  0014C0  0BFC               	andlw	252
  4846  0014C2  6EDF               	movwf	indf2,c
  4847                           
  4848                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4849  0014C4  EE20 F004          	lfsr	2,4
  4850  0014C8  5032               	movf	setMotorPWM@m,w,c
  4851  0014CA  26D9               	addwf	fsr2l,f,c
  4852  0014CC  5033               	movf	setMotorPWM@m+1,w,c
  4853  0014CE  22DA               	addwfc	fsr2h,f,c
  4854  0014D0  CFDE F034          	movff	postinc2,??_setMotorPWM
  4855  0014D4  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4856  0014D8  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4857  0014DC  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4858  0014E0  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4859  0014E4  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4860  0014E8  0E06               	movlw	6
  4861  0014EA  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4862  0014EC                     u2385:
  4863  0014EC  3437               	rlcf	??_setMotorPWM+3,w,c
  4864  0014EE  3237               	rrcf	??_setMotorPWM+3,f,c
  4865  0014F0  3236               	rrcf	??_setMotorPWM+2,f,c
  4866  0014F2  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4867  0014F4  D7FB               	goto	u2385
  4868  0014F6  5036               	movf	??_setMotorPWM+2,w,c
  4869  0014F8  6EDF               	movwf	indf2,c
  4870                           
  4871                           ; BSR set to: 0
  4872  0014FA  0012               	return		;funcret
  4873  0014FC                     __end_of_setMotorPWM:
  4874                           	opt stack 0
  4875                           tblptru	equ	0xFF8
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           postinc0	equ	0xFEE
  4880                           wreg	equ	0xFE8
  4881                           indf1	equ	0xFE7
  4882                           plusw1	equ	0xFE3
  4883                           fsr1h	equ	0xFE2
  4884                           fsr1l	equ	0xFE1
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           plusw2	equ	0xFDB
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function ___awdiv *****************
  4894 ;; Defined at:
  4895 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  dividend        2   41[COMRAM] int 
  4898 ;;  divisor         2   43[COMRAM] int 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  quotient        2   47[COMRAM] int 
  4901 ;;  sign            1   46[COMRAM] unsigned char 
  4902 ;;  counter         1   45[COMRAM] unsigned char 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  2   41[COMRAM] int 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4912 ;;      Params:         4       0       0       0
  4913 ;;      Locals:         4       0       0       0
  4914 ;;      Temps:          0       0       0       0
  4915 ;;      Totals:         8       0       0       0
  4916 ;;Total ram usage:        8 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; Hardware stack levels required when called:    3
  4919 ;; This function calls:
  4920 ;;		Nothing
  4921 ;; This function is called by:
  4922 ;;		_setMotorPWM
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text17
  4927  001896                     __ptext17:
  4928                           	opt stack 0
  4929  001896                     ___awdiv:
  4930                           	opt stack 24
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;incstack = 0
  4934  001896  0E00               	movlw	0
  4935  001898  6E2F               	movwf	___awdiv@sign,c
  4936  00189A  AE2D               	btfss	___awdiv@divisor+1,7,c
  4937  00189C  D006               	goto	l2946
  4938  00189E  6C2C               	negf	___awdiv@divisor,c
  4939  0018A0  1E2D               	comf	___awdiv@divisor+1,f,c
  4940  0018A2  B0D8               	btfsc	status,0,c
  4941  0018A4  2A2D               	incf	___awdiv@divisor+1,f,c
  4942  0018A6  0E01               	movlw	1
  4943  0018A8  6E2F               	movwf	___awdiv@sign,c
  4944  0018AA                     l2946:
  4945  0018AA  AE2B               	btfss	___awdiv@dividend+1,7,c
  4946  0018AC  D006               	goto	l2952
  4947  0018AE  6C2A               	negf	___awdiv@dividend,c
  4948  0018B0  1E2B               	comf	___awdiv@dividend+1,f,c
  4949  0018B2  B0D8               	btfsc	status,0,c
  4950  0018B4  2A2B               	incf	___awdiv@dividend+1,f,c
  4951  0018B6  0E01               	movlw	1
  4952  0018B8  1A2F               	xorwf	___awdiv@sign,f,c
  4953  0018BA                     l2952:
  4954  0018BA  0E00               	movlw	0
  4955  0018BC  6E31               	movwf	___awdiv@quotient+1,c
  4956  0018BE  0E00               	movlw	0
  4957  0018C0  6E30               	movwf	___awdiv@quotient,c
  4958  0018C2  502C               	movf	___awdiv@divisor,w,c
  4959  0018C4  102D               	iorwf	___awdiv@divisor+1,w,c
  4960  0018C6  B4D8               	btfsc	status,2,c
  4961  0018C8  D01C               	goto	l2974
  4962  0018CA  0E01               	movlw	1
  4963  0018CC  6E2E               	movwf	___awdiv@counter,c
  4964  0018CE  D004               	goto	l2960
  4965  0018D0                     l2958:
  4966  0018D0  90D8               	bcf	status,0,c
  4967  0018D2  362C               	rlcf	___awdiv@divisor,f,c
  4968  0018D4  362D               	rlcf	___awdiv@divisor+1,f,c
  4969  0018D6  2A2E               	incf	___awdiv@counter,f,c
  4970  0018D8                     l2960:
  4971  0018D8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4972  0018DA  D7FA               	goto	l2958
  4973  0018DC                     l2962:
  4974  0018DC  90D8               	bcf	status,0,c
  4975  0018DE  3630               	rlcf	___awdiv@quotient,f,c
  4976  0018E0  3631               	rlcf	___awdiv@quotient+1,f,c
  4977  0018E2  502C               	movf	___awdiv@divisor,w,c
  4978  0018E4  5C2A               	subwf	___awdiv@dividend,w,c
  4979  0018E6  502D               	movf	___awdiv@divisor+1,w,c
  4980  0018E8  582B               	subwfb	___awdiv@dividend+1,w,c
  4981  0018EA  A0D8               	btfss	status,0,c
  4982  0018EC  D005               	goto	l2970
  4983  0018EE  502C               	movf	___awdiv@divisor,w,c
  4984  0018F0  5E2A               	subwf	___awdiv@dividend,f,c
  4985  0018F2  502D               	movf	___awdiv@divisor+1,w,c
  4986  0018F4  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4987  0018F6  8030               	bsf	___awdiv@quotient,0,c
  4988  0018F8                     l2970:
  4989  0018F8  90D8               	bcf	status,0,c
  4990  0018FA  322D               	rrcf	___awdiv@divisor+1,f,c
  4991  0018FC  322C               	rrcf	___awdiv@divisor,f,c
  4992  0018FE  2E2E               	decfsz	___awdiv@counter,f,c
  4993  001900  D7ED               	goto	l2962
  4994  001902                     l2974:
  4995  001902  502F               	movf	___awdiv@sign,w,c
  4996  001904  B4D8               	btfsc	status,2,c
  4997  001906  D004               	goto	l2978
  4998  001908  6C30               	negf	___awdiv@quotient,c
  4999  00190A  1E31               	comf	___awdiv@quotient+1,f,c
  5000  00190C  B0D8               	btfsc	status,0,c
  5001  00190E  2A31               	incf	___awdiv@quotient+1,f,c
  5002  001910                     l2978:
  5003  001910  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  5004  001914  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  5005  001918  0012               	return	
  5006  00191A                     __end_of___awdiv:
  5007                           	opt stack 0
  5008                           tblptru	equ	0xFF8
  5009                           prodh	equ	0xFF4
  5010                           prodl	equ	0xFF3
  5011                           intcon	equ	0xFF2
  5012                           postinc0	equ	0xFEE
  5013                           wreg	equ	0xFE8
  5014                           indf1	equ	0xFE7
  5015                           plusw1	equ	0xFE3
  5016                           fsr1h	equ	0xFE2
  5017                           fsr1l	equ	0xFE1
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           plusw2	equ	0xFDB
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _sprintf *****************
  5027 ;; Defined at:
  5028 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  sp              2   47[COMRAM] PTR unsigned char 
  5031 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  5032 ;;  f               2   49[COMRAM] PTR const unsigned char 
  5033 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;  tmpval          4    0        struct .
  5036 ;;  cp              3    0        PTR const unsigned char 
  5037 ;;  width           2   10[BANK0 ] int 
  5038 ;;  val             2    7[BANK0 ] unsigned int 
  5039 ;;  ap              2    4[BANK0 ] PTR void [1]
  5040 ;;		 -> ?_sprintf(2), 
  5041 ;;  len             2    0        unsigned int 
  5042 ;;  c               1   12[BANK0 ] char 
  5043 ;;  flag            1    9[BANK0 ] unsigned char 
  5044 ;;  prec            1    6[BANK0 ] char 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  2   47[COMRAM] int 
  5047 ;; Registers used:
  5048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5054 ;;      Params:         8       0       0       0
  5055 ;;      Locals:         0       9       0       0
  5056 ;;      Temps:          0       4       0       0
  5057 ;;      Totals:         8      13       0       0
  5058 ;;Total ram usage:       21 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    4
  5061 ;; This function calls:
  5062 ;;		___lwdiv
  5063 ;;		___lwmod
  5064 ;;		___wmul
  5065 ;;		_isdigit
  5066 ;; This function is called by:
  5067 ;;		_ScanIR
  5068 ;;		_ScanWithRange
  5069 ;;		_main
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text18
  5074  0010BC                     __ptext18:
  5075                           	opt stack 0
  5076  0010BC                     _sprintf:
  5077                           	opt stack 26
  5078                           
  5079                           ;doprnt.c: 494: va_list ap;
  5080                           ;doprnt.c: 499: signed char c;
  5081                           ;doprnt.c: 501: int width;
  5082                           ;doprnt.c: 506: signed char prec;
  5083                           ;doprnt.c: 508: unsigned char flag;
  5084                           ;doprnt.c: 523: union {
  5085                           ;doprnt.c: 524: unsigned long vd;
  5086                           ;doprnt.c: 525: double integ;
  5087                           ;doprnt.c: 526: } tmpval;
  5088                           ;doprnt.c: 528: unsigned int val;
  5089                           ;doprnt.c: 529: unsigned len;
  5090                           ;doprnt.c: 530: const char * cp;
  5091                           ;doprnt.c: 533: *ap = __va_start();
  5092                           
  5093                           ;incstack = 0
  5094  0010BC  0E34               	movlw	low (?_sprintf+4)
  5095  0010BE  0100               	movlb	0	; () banked
  5096  0010C0  6F64               	movwf	sprintf@ap& (0+255),b
  5097  0010C2  0E00               	movlw	high (?_sprintf+4)
  5098  0010C4  0100               	movlb	0	; () banked
  5099  0010C6  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  5100                           
  5101                           ;doprnt.c: 536: while(c = *f++) {
  5102  0010C8  D168               	goto	l3146
  5103  0010CA                     l3040:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;doprnt.c: 538: if(c != '%')
  5107  0010CA  0E25               	movlw	37
  5108  0010CC  0100               	movlb	0	; () banked
  5109  0010CE  196C               	xorwf	sprintf@c& (0+255),w,b
  5110  0010D0  B4D8               	btfsc	status,2,c
  5111  0010D2  D009               	goto	l3046
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;doprnt.c: 540: {
  5115                           ;doprnt.c: 541: ((*sp++ = (c)));
  5116  0010D4  C030  FFD9         	movff	sprintf@sp,fsr2l
  5117  0010D8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5118  0010DC  C06C  FFDF         	movff	sprintf@c,indf2
  5119                           
  5120                           ; BSR set to: 0
  5121  0010E0  4A30               	infsnz	sprintf@sp,f,c
  5122  0010E2  2A31               	incf	sprintf@sp+1,f,c
  5123                           
  5124                           ;doprnt.c: 542: continue;
  5125  0010E4  D15A               	goto	l3146
  5126  0010E6                     l3046:
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;doprnt.c: 543: }
  5130                           ;doprnt.c: 546: width = 0;
  5131  0010E6  0E00               	movlw	0
  5132  0010E8  0100               	movlb	0	; () banked
  5133  0010EA  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5134  0010EC  0E00               	movlw	0
  5135  0010EE  6F6A               	movwf	sprintf@width& (0+255),b
  5136                           
  5137                           ;doprnt.c: 548: flag = 0;
  5138  0010F0  0E00               	movlw	0
  5139  0010F2  0100               	movlb	0	; () banked
  5140  0010F4  6F69               	movwf	sprintf@flag& (0+255),b
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;doprnt.c: 551: switch(*f) {
  5144                           
  5145                           ;doprnt.c: 550: for(;;) {
  5146  0010F6  D004               	goto	l3052
  5147  0010F8                     l3048:
  5148                           
  5149                           ;doprnt.c: 580: flag |= 0x04;
  5150  0010F8  0100               	movlb	0	; () banked
  5151  0010FA  8569               	bsf	sprintf@flag& (0+255),2,b
  5152                           
  5153                           ;doprnt.c: 581: f++;
  5154  0010FC  4A32               	infsnz	sprintf@f,f,c
  5155  0010FE  2A33               	incf	sprintf@f+1,f,c
  5156  001100                     l3052:
  5157  001100  C032  FFF6         	movff	sprintf@f,tblptrl
  5158  001104  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5159  001108                     	if	0	;tblptru may be non-zero
  5160  001108                     	endif
  5161  001108                     	if	0	;tblptru may be non-zero
  5162  001108                     	endif
  5163  001108  0008               	tblrd		*
  5164  00110A  50F5               	movf	tablat,w,c
  5165                           
  5166                           ; Switch size 1, requested type "space"
  5167                           ; Number of cases is 1, Range of values is 48 to 48
  5168                           ; switch strategies available:
  5169                           ; Name         Instructions Cycles
  5170                           ; simple_byte            4     3 (average)
  5171                           ;	Chosen strategy is simple_byte
  5172  00110C  0A30               	xorlw	48	; case 48
  5173  00110E  B4D8               	btfsc	status,2,c
  5174  001110  D7F3               	goto	l3048
  5175                           
  5176                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5177                           
  5178                           ;doprnt.c: 586: }
  5179                           
  5180                           ;doprnt.c: 585: break;
  5181  001112  C032  FFF6         	movff	sprintf@f,tblptrl
  5182  001116  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5183  00111A                     	if	0	;tblptru may be non-zero
  5184  00111A                     	endif
  5185  00111A                     	if	0	;tblptru may be non-zero
  5186  00111A                     	endif
  5187  00111A  0008               	tblrd		*
  5188  00111C  50F5               	movf	tablat,w,c
  5189  00111E  EC14  F00F         	call	_isdigit
  5190  001122  A0D8               	btfss	status,0,c
  5191  001124  D03E               	goto	l3068
  5192                           
  5193                           ;doprnt.c: 598: width = 0;
  5194  001126  0E00               	movlw	0
  5195  001128  0100               	movlb	0	; () banked
  5196  00112A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5197  00112C  0E00               	movlw	0
  5198  00112E  6F6A               	movwf	sprintf@width& (0+255),b
  5199  001130                     l3058:
  5200                           
  5201                           ;doprnt.c: 600: width *= 10;
  5202  001130  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  5203  001134  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  5204  001138  0E00               	movlw	0
  5205  00113A  6E27               	movwf	___wmul@multiplicand+1,c
  5206  00113C  0E0A               	movlw	10
  5207  00113E  6E26               	movwf	___wmul@multiplicand,c
  5208  001140  ECF0  F00E         	call	___wmul	;wreg free
  5209  001144  C024  F06A         	movff	?___wmul,sprintf@width
  5210  001148  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  5211                           
  5212                           ;doprnt.c: 601: width += *f++ - '0';
  5213  00114C  0ED0               	movlw	208
  5214  00114E  0100               	movlb	0	; () banked
  5215  001150  6F60               	movwf	??_sprintf& (0+255),b
  5216  001152  0EFF               	movlw	255
  5217  001154  0100               	movlb	0	; () banked
  5218  001156  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5219  001158  C032  FFF6         	movff	sprintf@f,tblptrl
  5220  00115C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5221  001160                     	if	0	;tblptru may be non-zero
  5222  001160                     	endif
  5223  001160                     	if	0	;tblptru may be non-zero
  5224  001160                     	endif
  5225  001160  0008               	tblrd		*
  5226  001162  50F5               	movf	tablat,w,c
  5227  001164  0100               	movlb	0	; () banked
  5228  001166  6F62               	movwf	(??_sprintf+2)& (0+255),b
  5229  001168  6B63               	clrf	(??_sprintf+3)& (0+255),b
  5230  00116A  0100               	movlb	0	; () banked
  5231  00116C  5160               	movf	??_sprintf& (0+255),w,b
  5232  00116E  0100               	movlb	0	; () banked
  5233  001170  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  5234  001172  0100               	movlb	0	; () banked
  5235  001174  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5236  001176  0100               	movlb	0	; () banked
  5237  001178  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  5238  00117A  0100               	movlb	0	; () banked
  5239  00117C  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5240  00117E  0100               	movlb	0	; () banked
  5241  001180  276A               	addwf	sprintf@width& (0+255),f,b
  5242  001182  0100               	movlb	0	; () banked
  5243  001184  5163               	movf	(??_sprintf+3)& (0+255),w,b
  5244  001186  0100               	movlb	0	; () banked
  5245  001188  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  5246                           
  5247                           ; BSR set to: 0
  5248  00118A  4A32               	infsnz	sprintf@f,f,c
  5249  00118C  2A33               	incf	sprintf@f+1,f,c
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5253  00118E  C032  FFF6         	movff	sprintf@f,tblptrl
  5254  001192  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5255  001196                     	if	0	;tblptru may be non-zero
  5256  001196                     	endif
  5257  001196                     	if	0	;tblptru may be non-zero
  5258  001196                     	endif
  5259  001196  0008               	tblrd		*
  5260  001198  50F5               	movf	tablat,w,c
  5261  00119A  EC14  F00F         	call	_isdigit
  5262  00119E  B0D8               	btfsc	status,0,c
  5263  0011A0  D7C7               	goto	l3058
  5264  0011A2                     l3068:
  5265  0011A2  C032  FFF6         	movff	sprintf@f,tblptrl
  5266  0011A6  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5267  0011AA  4A32               	infsnz	sprintf@f,f,c
  5268  0011AC  2A33               	incf	sprintf@f+1,f,c
  5269  0011AE                     	if	0	;tblptru may be non-zero
  5270  0011AE                     	endif
  5271  0011AE                     	if	0	;tblptru may be non-zero
  5272  0011AE                     	endif
  5273  0011AE  0008               	tblrd		*
  5274  0011B0  CFF5 F06C          	movff	tablat,sprintf@c
  5275  0011B4  0100               	movlb	0	; () banked
  5276  0011B6  516C               	movf	sprintf@c& (0+255),w,b
  5277                           
  5278                           ; Switch size 1, requested type "space"
  5279                           ; Number of cases is 3, Range of values is 0 to 105
  5280                           ; switch strategies available:
  5281                           ; Name         Instructions Cycles
  5282                           ; simple_byte           10     6 (average)
  5283                           ;	Chosen strategy is simple_byte
  5284  0011B8  0A00               	xorlw	0	; case 0
  5285  0011BA  B4D8               	btfsc	status,2,c
  5286  0011BC  D0FB               	goto	l3148
  5287  0011BE  0A64               	xorlw	100	; case 100
  5288  0011C0  B4D8               	btfsc	status,2,c
  5289  0011C2  D003               	goto	l3070
  5290  0011C4  0A0D               	xorlw	13	; case 105
  5291  0011C6  A4D8               	btfss	status,2,c
  5292  0011C8  D0E8               	goto	l3146
  5293  0011CA                     l3070:
  5294                           
  5295                           ;doprnt.c: 1253: {
  5296                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5297  0011CA  C064  FFD9         	movff	sprintf@ap,fsr2l
  5298  0011CE  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  5299  0011D2  CFDE F067          	movff	postinc2,sprintf@val
  5300  0011D6  CFDD F068          	movff	postdec2,sprintf@val+1
  5301  0011DA  0E02               	movlw	2
  5302  0011DC  0100               	movlb	0	; () banked
  5303  0011DE  2764               	addwf	sprintf@ap& (0+255),f,b
  5304  0011E0  0E00               	movlw	0
  5305  0011E2  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;doprnt.c: 1261: if((int)val < 0) {
  5309  0011E4  0100               	movlb	0	; () banked
  5310  0011E6  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  5311  0011E8  D008               	goto	l3080
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;doprnt.c: 1262: flag |= 0x03;
  5315  0011EA  0E03               	movlw	3
  5316  0011EC  0100               	movlb	0	; () banked
  5317  0011EE  1369               	iorwf	sprintf@flag& (0+255),f,b
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;doprnt.c: 1263: val = -val;
  5321  0011F0  0100               	movlb	0	; () banked
  5322  0011F2  6D67               	negf	sprintf@val& (0+255),b
  5323  0011F4  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  5324  0011F6  B0D8               	btfsc	status,0,c
  5325  0011F8  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  5326  0011FA                     l3080:
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;doprnt.c: 1264: }
  5330                           ;doprnt.c: 1266: }
  5331                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5332  0011FA  0E01               	movlw	1
  5333  0011FC  0100               	movlb	0	; () banked
  5334  0011FE  6F6C               	movwf	sprintf@c& (0+255),b
  5335  001200                     l3082:
  5336                           
  5337                           ; BSR set to: 0
  5338  001200  0E05               	movlw	5
  5339  001202  0100               	movlb	0	; () banked
  5340  001204  196C               	xorwf	sprintf@c& (0+255),w,b
  5341  001206  B4D8               	btfsc	status,2,c
  5342  001208  D016               	goto	l3094
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;doprnt.c: 1306: if(val < dpowers[c])
  5346                           
  5347                           ; BSR set to: 0
  5348                           
  5349                           ; BSR set to: 0
  5350  00120A  0100               	movlb	0	; () banked
  5351  00120C  516C               	movf	sprintf@c& (0+255),w,b
  5352  00120E  0D02               	mullw	2
  5353  001210  0E01               	movlw	low _dpowers
  5354  001212  24F3               	addwf	prodl,w,c
  5355  001214  6EF6               	movwf	tblptrl,c
  5356  001216  0E03               	movlw	high _dpowers
  5357  001218  20F4               	addwfc	prodh,w,c
  5358  00121A  6EF7               	movwf	tblptrh,c
  5359  00121C                     	if	0	;There are less than 3 active tblptr bytes
  5360  00121C                     	endif
  5361  00121C  0009               	tblrd		*+
  5362  00121E  50F5               	movf	tablat,w,c
  5363  001220  0100               	movlb	0	; () banked
  5364  001222  5D67               	subwf	sprintf@val& (0+255),w,b
  5365  001224  0009               	tblrd		*+
  5366  001226  50F5               	movf	tablat,w,c
  5367  001228  0100               	movlb	0	; () banked
  5368  00122A  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  5369  00122C  A0D8               	btfss	status,0,c
  5370  00122E  D003               	goto	l3094
  5371                           
  5372                           ; BSR set to: 0
  5373                           
  5374                           ; BSR set to: 0
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;doprnt.c: 1307: break;
  5378  001230  0100               	movlb	0	; () banked
  5379  001232  2B6C               	incf	sprintf@c& (0+255),f,b
  5380  001234  D7E5               	goto	l3082
  5381  001236                     l3094:
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5385  001236  0100               	movlb	0	; () banked
  5386  001238  516A               	movf	sprintf@width& (0+255),w,b
  5387  00123A  0100               	movlb	0	; () banked
  5388  00123C  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5389  00123E  B4D8               	btfsc	status,2,c
  5390  001240  D00B               	goto	l3100
  5391                           
  5392                           ; BSR set to: 0
  5393  001242  C069  F060         	movff	sprintf@flag,??_sprintf
  5394  001246  0E03               	movlw	3
  5395  001248  0100               	movlb	0	; () banked
  5396  00124A  1760               	andwf	??_sprintf& (0+255),f,b
  5397  00124C  B4D8               	btfsc	status,2,c
  5398  00124E  D004               	goto	l3100
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;doprnt.c: 1346: width--;
  5402  001250  0100               	movlb	0	; () banked
  5403  001252  076A               	decf	sprintf@width& (0+255),f,b
  5404  001254  A0D8               	btfss	status,0,c
  5405  001256  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5406  001258                     l3100:
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;doprnt.c: 1381: if(width > c)
  5410  001258  0E80               	movlw	128
  5411  00125A  0100               	movlb	0	; () banked
  5412  00125C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5413  00125E  0E7F               	movlw	127
  5414  001260  0100               	movlb	0	; () banked
  5415  001262  6F60               	movwf	??_sprintf& (0+255),b
  5416  001264  0100               	movlb	0	; () banked
  5417  001266  516A               	movf	sprintf@width& (0+255),w,b
  5418  001268  0100               	movlb	0	; () banked
  5419  00126A  5D6C               	subwf	sprintf@c& (0+255),w,b
  5420  00126C  0100               	movlb	0	; () banked
  5421  00126E  516B               	movf	(sprintf@width+1)& (0+255),w,b
  5422  001270  0A80               	xorlw	128
  5423  001272  0100               	movlb	0	; () banked
  5424  001274  5960               	subwfb	??_sprintf& (0+255),w,b
  5425  001276  B0D8               	btfsc	status,0,c
  5426  001278  D00B               	goto	l3104
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 1382: width -= c;
  5430  00127A  0100               	movlb	0	; () banked
  5431  00127C  516C               	movf	sprintf@c& (0+255),w,b
  5432  00127E  0100               	movlb	0	; () banked
  5433  001280  5F6A               	subwf	sprintf@width& (0+255),f,b
  5434  001282  0E00               	movlw	0
  5435  001284  0100               	movlb	0	; () banked
  5436  001286  BF6C               	btfsc	sprintf@c& (0+255),7,b
  5437  001288  0EFF               	movlw	255
  5438  00128A  0100               	movlb	0	; () banked
  5439  00128C  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  5440  00128E  D005               	goto	l3106
  5441  001290                     l3104:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;doprnt.c: 1383: else
  5445                           ;doprnt.c: 1384: width = 0;
  5446  001290  0E00               	movlw	0
  5447  001292  0100               	movlb	0	; () banked
  5448  001294  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  5449  001296  0E00               	movlw	0
  5450  001298  6F6A               	movwf	sprintf@width& (0+255),b
  5451  00129A                     l3106:
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;doprnt.c: 1387: if(flag & 0x04) {
  5455  00129A  0100               	movlb	0	; () banked
  5456  00129C  A569               	btfss	sprintf@flag& (0+255),2,b
  5457  00129E  D022               	goto	l3122
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;doprnt.c: 1392: if(flag & 0x03)
  5461  0012A0  C069  F060         	movff	sprintf@flag,??_sprintf
  5462  0012A4  0E03               	movlw	3
  5463  0012A6  0100               	movlb	0	; () banked
  5464  0012A8  1760               	andwf	??_sprintf& (0+255),f,b
  5465  0012AA  B4D8               	btfsc	status,2,c
  5466  0012AC  D008               	goto	l3114
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5470  0012AE  C030  FFD9         	movff	sprintf@sp,fsr2l
  5471  0012B2  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5472  0012B6  0E2D               	movlw	45
  5473  0012B8  6EDF               	movwf	indf2,c
  5474                           
  5475                           ; BSR set to: 0
  5476  0012BA  4A30               	infsnz	sprintf@sp,f,c
  5477  0012BC  2A31               	incf	sprintf@sp+1,f,c
  5478  0012BE                     l3114:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;doprnt.c: 1415: if(width)
  5482  0012BE  0100               	movlb	0	; () banked
  5483  0012C0  516A               	movf	sprintf@width& (0+255),w,b
  5484  0012C2  0100               	movlb	0	; () banked
  5485  0012C4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5486  0012C6  B4D8               	btfsc	status,2,c
  5487  0012C8  D034               	goto	l3136
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5491                           
  5492                           ; BSR set to: 0
  5493                           
  5494                           ;doprnt.c: 1416: do
  5495  0012CA  C030  FFD9         	movff	sprintf@sp,fsr2l
  5496  0012CE  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5497  0012D2  0E30               	movlw	48
  5498  0012D4  6EDF               	movwf	indf2,c
  5499                           
  5500                           ; BSR set to: 0
  5501  0012D6  4A30               	infsnz	sprintf@sp,f,c
  5502  0012D8  2A31               	incf	sprintf@sp+1,f,c
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;doprnt.c: 1418: while(--width);
  5506  0012DA  0100               	movlb	0	; () banked
  5507  0012DC  076A               	decf	sprintf@width& (0+255),f,b
  5508  0012DE  A0D8               	btfss	status,0,c
  5509  0012E0  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5510  0012E2  D7ED               	goto	l3114
  5511  0012E4                     l3122:
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;doprnt.c: 1422: {
  5515                           ;doprnt.c: 1424: if(width
  5516                           ;doprnt.c: 1428: )
  5517  0012E4  0100               	movlb	0	; () banked
  5518  0012E6  516A               	movf	sprintf@width& (0+255),w,b
  5519  0012E8  0100               	movlb	0	; () banked
  5520  0012EA  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5521  0012EC  B4D8               	btfsc	status,2,c
  5522  0012EE  D012               	goto	l3130
  5523  0012F0                     l3124:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5527  0012F0  C030  FFD9         	movff	sprintf@sp,fsr2l
  5528  0012F4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5529  0012F8  0E20               	movlw	32
  5530  0012FA  6EDF               	movwf	indf2,c
  5531                           
  5532                           ; BSR set to: 0
  5533  0012FC  4A30               	infsnz	sprintf@sp,f,c
  5534  0012FE  2A31               	incf	sprintf@sp+1,f,c
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;doprnt.c: 1431: while(--width);
  5538  001300  0100               	movlb	0	; () banked
  5539  001302  076A               	decf	sprintf@width& (0+255),f,b
  5540  001304  A0D8               	btfss	status,0,c
  5541  001306  076B               	decf	(sprintf@width+1)& (0+255),f,b
  5542  001308  0100               	movlb	0	; () banked
  5543  00130A  516A               	movf	sprintf@width& (0+255),w,b
  5544  00130C  0100               	movlb	0	; () banked
  5545  00130E  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  5546  001310  A4D8               	btfss	status,2,c
  5547  001312  D7EE               	goto	l3124
  5548  001314                     l3130:
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;doprnt.c: 1438: if(flag & 0x03)
  5552  001314  C069  F060         	movff	sprintf@flag,??_sprintf
  5553  001318  0E03               	movlw	3
  5554  00131A  0100               	movlb	0	; () banked
  5555  00131C  1760               	andwf	??_sprintf& (0+255),f,b
  5556  00131E  B4D8               	btfsc	status,2,c
  5557  001320  D008               	goto	l3136
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5561  001322  C030  FFD9         	movff	sprintf@sp,fsr2l
  5562  001326  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5563  00132A  0E2D               	movlw	45
  5564  00132C  6EDF               	movwf	indf2,c
  5565                           
  5566                           ; BSR set to: 0
  5567  00132E  4A30               	infsnz	sprintf@sp,f,c
  5568  001330  2A31               	incf	sprintf@sp+1,f,c
  5569  001332                     l3136:
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;doprnt.c: 1469: }
  5573                           ;doprnt.c: 1472: prec = c;
  5574  001332  C06C  F066         	movff	sprintf@c,sprintf@prec
  5575                           
  5576                           ;doprnt.c: 1474: while(prec--) {
  5577  001336  D02B               	goto	l3144
  5578  001338                     l3138:
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;doprnt.c: 1478: {
  5582                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5583  001338  0100               	movlb	0	; () banked
  5584  00133A  5166               	movf	sprintf@prec& (0+255),w,b
  5585  00133C  0D02               	mullw	2
  5586  00133E  0E01               	movlw	low _dpowers
  5587  001340  24F3               	addwf	prodl,w,c
  5588  001342  6EF6               	movwf	tblptrl,c
  5589  001344  0E03               	movlw	high _dpowers
  5590  001346  20F4               	addwfc	prodh,w,c
  5591  001348  6EF7               	movwf	tblptrh,c
  5592  00134A                     	if	0	;There are less than 3 active tblptr bytes
  5593  00134A                     	endif
  5594  00134A  0009               	tblrd		*+
  5595  00134C  CFF5 F026          	movff	tablat,___lwdiv@divisor
  5596  001350  000A               	tblrd		*-
  5597  001352  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  5598  001356  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  5599  00135A  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  5600  00135E  EC9A  F00D         	call	___lwdiv	;wreg free
  5601  001362  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  5602  001366  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5603  00136A  0E00               	movlw	0
  5604  00136C  6E2E               	movwf	___lwmod@divisor+1,c
  5605  00136E  0E0A               	movlw	10
  5606  001370  6E2D               	movwf	___lwmod@divisor,c
  5607  001372  ECC3  F00D         	call	___lwmod	;wreg free
  5608  001376  502B               	movf	?___lwmod,w,c
  5609  001378  0F30               	addlw	48
  5610  00137A  0100               	movlb	0	; () banked
  5611  00137C  6F6C               	movwf	sprintf@c& (0+255),b
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;doprnt.c: 1523: }
  5615                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5616  00137E  C030  FFD9         	movff	sprintf@sp,fsr2l
  5617  001382  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5618  001386  C06C  FFDF         	movff	sprintf@c,indf2
  5619                           
  5620                           ; BSR set to: 0
  5621  00138A  4A30               	infsnz	sprintf@sp,f,c
  5622  00138C  2A31               	incf	sprintf@sp+1,f,c
  5623  00138E                     l3144:
  5624                           
  5625                           ; BSR set to: 0
  5626  00138E  0100               	movlb	0	; () banked
  5627  001390  0766               	decf	sprintf@prec& (0+255),f,b
  5628  001392  0100               	movlb	0	; () banked
  5629  001394  2966               	incf	sprintf@prec& (0+255),w,b
  5630  001396  A4D8               	btfss	status,2,c
  5631  001398  D7CF               	goto	l3138
  5632  00139A                     l3146:
  5633  00139A  C032  FFF6         	movff	sprintf@f,tblptrl
  5634  00139E  C033  FFF7         	movff	sprintf@f+1,tblptrh
  5635  0013A2  4A32               	infsnz	sprintf@f,f,c
  5636  0013A4  2A33               	incf	sprintf@f+1,f,c
  5637  0013A6                     	if	0	;tblptru may be non-zero
  5638  0013A6                     	endif
  5639  0013A6                     	if	0	;tblptru may be non-zero
  5640  0013A6                     	endif
  5641  0013A6  0008               	tblrd		*
  5642  0013A8  CFF5 F06C          	movff	tablat,sprintf@c
  5643  0013AC  0100               	movlb	0	; () banked
  5644  0013AE  516C               	movf	sprintf@c& (0+255),w,b
  5645  0013B0  A4D8               	btfss	status,2,c
  5646  0013B2  D68B               	goto	l3040
  5647  0013B4                     l3148:
  5648                           
  5649                           ;doprnt.c: 1538: *sp = 0;
  5650  0013B4  C030  FFD9         	movff	sprintf@sp,fsr2l
  5651  0013B8  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  5652  0013BC  0E00               	movlw	0
  5653  0013BE  6EDF               	movwf	indf2,c
  5654  0013C0  0012               	return	
  5655  0013C2                     __end_of_sprintf:
  5656                           	opt stack 0
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           intcon	equ	0xFF2
  5664                           postinc0	equ	0xFEE
  5665                           wreg	equ	0xFE8
  5666                           indf1	equ	0xFE7
  5667                           plusw1	equ	0xFE3
  5668                           fsr1h	equ	0xFE2
  5669                           fsr1l	equ	0xFE1
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           postdec2	equ	0xFDD
  5673                           plusw2	equ	0xFDB
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function _isdigit *****************
  5679 ;; Defined at:
  5680 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  c               1    wreg     unsigned char 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  c               1   37[COMRAM] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;		None               void
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5694 ;;      Params:         0       0       0       0
  5695 ;;      Locals:         2       0       0       0
  5696 ;;      Temps:          1       0       0       0
  5697 ;;      Totals:         3       0       0       0
  5698 ;;Total ram usage:        3 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    3
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_sprintf
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text19
  5709  001E28                     __ptext19:
  5710                           	opt stack 0
  5711  001E28                     _isdigit:
  5712                           	opt stack 26
  5713                           
  5714                           ;incstack = 0
  5715                           ;isdigit@c stored from wreg
  5716  001E28  6E26               	movwf	isdigit@c,c
  5717  001E2A  0E00               	movlw	0
  5718  001E2C  6E25               	movwf	_isdigit$1986,c
  5719  001E2E  0E3A               	movlw	58
  5720  001E30  6026               	cpfslt	isdigit@c,c
  5721  001E32  D005               	goto	l2138
  5722  001E34  0E2F               	movlw	47
  5723  001E36  6426               	cpfsgt	isdigit@c,c
  5724  001E38  D002               	goto	l2138
  5725  001E3A  0E01               	movlw	1
  5726  001E3C  6E25               	movwf	_isdigit$1986,c
  5727  001E3E                     l2138:
  5728  001E3E  C025  F024         	movff	_isdigit$1986,??_isdigit
  5729  001E42  3024               	rrcf	??_isdigit,w,c
  5730  001E44  0012               	return	
  5731  001E46                     __end_of_isdigit:
  5732                           	opt stack 0
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           prodh	equ	0xFF4
  5738                           prodl	equ	0xFF3
  5739                           intcon	equ	0xFF2
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           indf1	equ	0xFE7
  5743                           plusw1	equ	0xFE3
  5744                           fsr1h	equ	0xFE2
  5745                           fsr1l	equ	0xFE1
  5746                           indf2	equ	0xFDF
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           plusw2	equ	0xFDB
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function ___wmul *****************
  5755 ;; Defined at:
  5756 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;  multiplier      2   35[COMRAM] unsigned int 
  5759 ;;  multiplicand    2   37[COMRAM] unsigned int 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  product         2   39[COMRAM] unsigned int 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  2   35[COMRAM] unsigned int 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0, prodl, prodh
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5771 ;;      Params:         4       0       0       0
  5772 ;;      Locals:         2       0       0       0
  5773 ;;      Temps:          0       0       0       0
  5774 ;;      Totals:         6       0       0       0
  5775 ;;Total ram usage:        6 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    3
  5778 ;; This function calls:
  5779 ;;		Nothing
  5780 ;; This function is called by:
  5781 ;;		_setMotorPWM
  5782 ;;		_sprintf
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text20
  5787  001DE0                     __ptext20:
  5788                           	opt stack 0
  5789  001DE0                     ___wmul:
  5790                           	opt stack 24
  5791                           
  5792                           ;incstack = 0
  5793  001DE0  5024               	movf	___wmul@multiplier,w,c
  5794  001DE2  0226               	mulwf	___wmul@multiplicand,c
  5795  001DE4  CFF3 F028          	movff	prodl,___wmul@product
  5796  001DE8  CFF4 F029          	movff	prodh,___wmul@product+1
  5797  001DEC  5024               	movf	___wmul@multiplier,w,c
  5798  001DEE  0227               	mulwf	___wmul@multiplicand+1,c
  5799  001DF0  50F3               	movf	prodl,w,c
  5800  001DF2  2629               	addwf	___wmul@product+1,f,c
  5801  001DF4  5025               	movf	___wmul@multiplier+1,w,c
  5802  001DF6  0226               	mulwf	___wmul@multiplicand,c
  5803  001DF8  50F3               	movf	prodl,w,c
  5804  001DFA  2629               	addwf	___wmul@product+1,f,c
  5805  001DFC  C028  F024         	movff	___wmul@product,?___wmul
  5806  001E00  C029  F025         	movff	___wmul@product+1,?___wmul+1
  5807  001E04  0012               	return	
  5808  001E06                     __end_of___wmul:
  5809                           	opt stack 0
  5810                           tblptru	equ	0xFF8
  5811                           tblptrh	equ	0xFF7
  5812                           tblptrl	equ	0xFF6
  5813                           tablat	equ	0xFF5
  5814                           prodh	equ	0xFF4
  5815                           prodl	equ	0xFF3
  5816                           intcon	equ	0xFF2
  5817                           postinc0	equ	0xFEE
  5818                           wreg	equ	0xFE8
  5819                           indf1	equ	0xFE7
  5820                           plusw1	equ	0xFE3
  5821                           fsr1h	equ	0xFE2
  5822                           fsr1l	equ	0xFE1
  5823                           indf2	equ	0xFDF
  5824                           postinc2	equ	0xFDE
  5825                           postdec2	equ	0xFDD
  5826                           plusw2	equ	0xFDB
  5827                           fsr2h	equ	0xFDA
  5828                           fsr2l	equ	0xFD9
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function ___lwmod *****************
  5832 ;; Defined at:
  5833 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  dividend        2   42[COMRAM] unsigned int 
  5836 ;;  divisor         2   44[COMRAM] unsigned int 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  counter         1   46[COMRAM] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  2   42[COMRAM] unsigned int 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5848 ;;      Params:         4       0       0       0
  5849 ;;      Locals:         1       0       0       0
  5850 ;;      Temps:          0       0       0       0
  5851 ;;      Totals:         5       0       0       0
  5852 ;;Total ram usage:        5 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    3
  5855 ;; This function calls:
  5856 ;;		Nothing
  5857 ;; This function is called by:
  5858 ;;		_sprintf
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text21
  5863  001B86                     __ptext21:
  5864                           	opt stack 0
  5865  001B86                     ___lwmod:
  5866                           	opt stack 26
  5867                           
  5868                           ;incstack = 0
  5869  001B86  502D               	movf	___lwmod@divisor,w,c
  5870  001B88  102E               	iorwf	___lwmod@divisor+1,w,c
  5871  001B8A  B4D8               	btfsc	status,2,c
  5872  001B8C  D018               	goto	l907
  5873  001B8E  0E01               	movlw	1
  5874  001B90  6E2F               	movwf	___lwmod@counter,c
  5875  001B92  D004               	goto	l2170
  5876  001B94                     l2168:
  5877  001B94  90D8               	bcf	status,0,c
  5878  001B96  362D               	rlcf	___lwmod@divisor,f,c
  5879  001B98  362E               	rlcf	___lwmod@divisor+1,f,c
  5880  001B9A  2A2F               	incf	___lwmod@counter,f,c
  5881  001B9C                     l2170:
  5882  001B9C  AE2E               	btfss	___lwmod@divisor+1,7,c
  5883  001B9E  D7FA               	goto	l2168
  5884  001BA0                     l2172:
  5885  001BA0  502D               	movf	___lwmod@divisor,w,c
  5886  001BA2  5C2B               	subwf	___lwmod@dividend,w,c
  5887  001BA4  502E               	movf	___lwmod@divisor+1,w,c
  5888  001BA6  582C               	subwfb	___lwmod@dividend+1,w,c
  5889  001BA8  A0D8               	btfss	status,0,c
  5890  001BAA  D004               	goto	l2176
  5891  001BAC  502D               	movf	___lwmod@divisor,w,c
  5892  001BAE  5E2B               	subwf	___lwmod@dividend,f,c
  5893  001BB0  502E               	movf	___lwmod@divisor+1,w,c
  5894  001BB2  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5895  001BB4                     l2176:
  5896  001BB4  90D8               	bcf	status,0,c
  5897  001BB6  322E               	rrcf	___lwmod@divisor+1,f,c
  5898  001BB8  322D               	rrcf	___lwmod@divisor,f,c
  5899  001BBA  2E2F               	decfsz	___lwmod@counter,f,c
  5900  001BBC  D7F1               	goto	l2172
  5901  001BBE                     l907:
  5902  001BBE  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5903  001BC2  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5904  001BC6  0012               	return		;funcret
  5905  001BC8                     __end_of___lwmod:
  5906                           	opt stack 0
  5907                           tblptru	equ	0xFF8
  5908                           tblptrh	equ	0xFF7
  5909                           tblptrl	equ	0xFF6
  5910                           tablat	equ	0xFF5
  5911                           prodh	equ	0xFF4
  5912                           prodl	equ	0xFF3
  5913                           intcon	equ	0xFF2
  5914                           postinc0	equ	0xFEE
  5915                           wreg	equ	0xFE8
  5916                           indf1	equ	0xFE7
  5917                           plusw1	equ	0xFE3
  5918                           fsr1h	equ	0xFE2
  5919                           fsr1l	equ	0xFE1
  5920                           indf2	equ	0xFDF
  5921                           postinc2	equ	0xFDE
  5922                           postdec2	equ	0xFDD
  5923                           plusw2	equ	0xFDB
  5924                           fsr2h	equ	0xFDA
  5925                           fsr2l	equ	0xFD9
  5926                           status	equ	0xFD8
  5927                           
  5928 ;; *************** function ___lwdiv *****************
  5929 ;; Defined at:
  5930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;  dividend        2   35[COMRAM] unsigned int 
  5933 ;;  divisor         2   37[COMRAM] unsigned int 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;  quotient        2   39[COMRAM] unsigned int 
  5936 ;;  counter         1   41[COMRAM] unsigned char 
  5937 ;; Return value:  Size  Location     Type
  5938 ;;                  2   35[COMRAM] unsigned int 
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, status,0
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5946 ;;      Params:         4       0       0       0
  5947 ;;      Locals:         3       0       0       0
  5948 ;;      Temps:          0       0       0       0
  5949 ;;      Totals:         7       0       0       0
  5950 ;;Total ram usage:        7 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    3
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		_sprintf
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text22
  5961  001B34                     __ptext22:
  5962                           	opt stack 0
  5963  001B34                     ___lwdiv:
  5964                           	opt stack 26
  5965                           
  5966                           ;incstack = 0
  5967  001B34  0E00               	movlw	0
  5968  001B36  6E29               	movwf	___lwdiv@quotient+1,c
  5969  001B38  0E00               	movlw	0
  5970  001B3A  6E28               	movwf	___lwdiv@quotient,c
  5971  001B3C  5026               	movf	___lwdiv@divisor,w,c
  5972  001B3E  1027               	iorwf	___lwdiv@divisor+1,w,c
  5973  001B40  B4D8               	btfsc	status,2,c
  5974  001B42  D01C               	goto	l897
  5975  001B44  0E01               	movlw	1
  5976  001B46  6E2A               	movwf	___lwdiv@counter,c
  5977  001B48  D004               	goto	l2150
  5978  001B4A                     l2148:
  5979  001B4A  90D8               	bcf	status,0,c
  5980  001B4C  3626               	rlcf	___lwdiv@divisor,f,c
  5981  001B4E  3627               	rlcf	___lwdiv@divisor+1,f,c
  5982  001B50  2A2A               	incf	___lwdiv@counter,f,c
  5983  001B52                     l2150:
  5984  001B52  AE27               	btfss	___lwdiv@divisor+1,7,c
  5985  001B54  D7FA               	goto	l2148
  5986  001B56                     l2152:
  5987  001B56  90D8               	bcf	status,0,c
  5988  001B58  3628               	rlcf	___lwdiv@quotient,f,c
  5989  001B5A  3629               	rlcf	___lwdiv@quotient+1,f,c
  5990  001B5C  5026               	movf	___lwdiv@divisor,w,c
  5991  001B5E  5C24               	subwf	___lwdiv@dividend,w,c
  5992  001B60  5027               	movf	___lwdiv@divisor+1,w,c
  5993  001B62  5825               	subwfb	___lwdiv@dividend+1,w,c
  5994  001B64  A0D8               	btfss	status,0,c
  5995  001B66  D005               	goto	l2160
  5996  001B68  5026               	movf	___lwdiv@divisor,w,c
  5997  001B6A  5E24               	subwf	___lwdiv@dividend,f,c
  5998  001B6C  5027               	movf	___lwdiv@divisor+1,w,c
  5999  001B6E  5A25               	subwfb	___lwdiv@dividend+1,f,c
  6000  001B70  8028               	bsf	___lwdiv@quotient,0,c
  6001  001B72                     l2160:
  6002  001B72  90D8               	bcf	status,0,c
  6003  001B74  3227               	rrcf	___lwdiv@divisor+1,f,c
  6004  001B76  3226               	rrcf	___lwdiv@divisor,f,c
  6005  001B78  2E2A               	decfsz	___lwdiv@counter,f,c
  6006  001B7A  D7ED               	goto	l2152
  6007  001B7C                     l897:
  6008  001B7C  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  6009  001B80  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6010  001B84  0012               	return		;funcret
  6011  001B86                     __end_of___lwdiv:
  6012                           	opt stack 0
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           intcon	equ	0xFF2
  6020                           postinc0	equ	0xFEE
  6021                           wreg	equ	0xFE8
  6022                           indf1	equ	0xFE7
  6023                           plusw1	equ	0xFE3
  6024                           fsr1h	equ	0xFE2
  6025                           fsr1l	equ	0xFE1
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           postdec2	equ	0xFDD
  6029                           plusw2	equ	0xFDB
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _grabRightIR *****************
  6035 ;; Defined at:
  6036 ;;		line 74 in file "IR_Reading.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;		None
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6041 ;;  i               1   42[COMRAM] unsigned char 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  2   35[COMRAM] unsigned int 
  6044 ;; Registers used:
  6045 ;;		wreg, status,2, status,0
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6051 ;;      Params:         2       0       0       0
  6052 ;;      Locals:         3       0       0       0
  6053 ;;      Temps:          3       0       0       0
  6054 ;;      Totals:         8       0       0       0
  6055 ;;Total ram usage:        8 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    3
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		_ScanIR
  6062 ;;		_ScanWithRange
  6063 ;;		_main
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text23
  6068  00199A                     __ptext23:
  6069                           	opt stack 0
  6070  00199A                     _grabRightIR:
  6071                           	opt stack 27
  6072                           
  6073                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6074                           
  6075                           ;incstack = 0
  6076  00199A  0E00               	movlw	0
  6077  00199C  6E2A               	movwf	grabRightIR@IR_signal+1,c
  6078  00199E  0E00               	movlw	0
  6079  0019A0  6E29               	movwf	grabRightIR@IR_signal,c
  6080                           
  6081                           ;IR_Reading.c: 77: unsigned char i=0;
  6082  0019A2  0E00               	movlw	0
  6083  0019A4  6E2B               	movwf	grabRightIR@i,c
  6084                           
  6085                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6086  0019A6  0E00               	movlw	0
  6087  0019A8  6E2B               	movwf	grabRightIR@i,c
  6088  0019AA                     l2212:
  6089  0019AA  0E03               	movlw	3
  6090  0019AC  642B               	cpfsgt	grabRightIR@i,c
  6091  0019AE  D001               	goto	l2216
  6092  0019B0  D01E               	goto	l2222
  6093  0019B2                     l2216:
  6094                           
  6095                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6096  0019B2  5069               	movf	3945,w,c	;volatile
  6097  0019B4  6E26               	movwf	??_grabRightIR& (0+255),c
  6098  0019B6  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  6099  0019B8  0E07               	movlw	7
  6100  0019BA                     u1525:
  6101  0019BA  90D8               	bcf	status,0,c
  6102  0019BC  3626               	rlcf	??_grabRightIR,f,c
  6103  0019BE  3627               	rlcf	??_grabRightIR+1,f,c
  6104  0019C0  2EE8               	decfsz	wreg,f,c
  6105  0019C2  D7FB               	goto	u1525
  6106  0019C4  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  6107  0019C8  90D8               	bcf	status,0,c
  6108  0019CA  3228               	rrcf	??_grabRightIR+2,f,c
  6109  0019CC  5028               	movf	??_grabRightIR+2,w,c
  6110  0019CE  1226               	iorwf	??_grabRightIR,f,c
  6111  0019D0  0E00               	movlw	0
  6112  0019D2  1227               	iorwf	??_grabRightIR+1,f,c
  6113  0019D4  5026               	movf	??_grabRightIR,w,c
  6114  0019D6  2629               	addwf	grabRightIR@IR_signal,f,c
  6115  0019D8  5027               	movf	??_grabRightIR+1,w,c
  6116  0019DA  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  6117                           
  6118                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6119  0019DC  0E82               	movlw	130
  6120  0019DE  6E26               	movwf	??_grabRightIR& (0+255),c
  6121  0019E0  0EDE               	movlw	222
  6122  0019E2                     u3227:
  6123  0019E2  2EE8               	decfsz	wreg,f,c
  6124  0019E4  D7FE               	goto	u3227
  6125  0019E6  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  6126  0019E8  D7FC               	goto	u3227
  6127  0019EA  2A2B               	incf	grabRightIR@i,f,c
  6128  0019EC  D7DE               	goto	l2212
  6129  0019EE                     l2222:
  6130                           
  6131                           ;IR_Reading.c: 83: }
  6132                           ;IR_Reading.c: 85: return IR_signal>>2;
  6133  0019EE  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  6134  0019F2  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6135  0019F6  90D8               	bcf	status,0,c
  6136  0019F8  3227               	rrcf	??_grabRightIR+1,f,c
  6137  0019FA  3226               	rrcf	??_grabRightIR,f,c
  6138  0019FC  90D8               	bcf	status,0,c
  6139  0019FE  3227               	rrcf	??_grabRightIR+1,f,c
  6140  001A00  3226               	rrcf	??_grabRightIR,f,c
  6141  001A02  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  6142  001A06  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  6143  001A0A  0012               	return	
  6144  001A0C                     __end_of_grabRightIR:
  6145                           	opt stack 0
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           prodh	equ	0xFF4
  6151                           prodl	equ	0xFF3
  6152                           intcon	equ	0xFF2
  6153                           postinc0	equ	0xFEE
  6154                           wreg	equ	0xFE8
  6155                           indf1	equ	0xFE7
  6156                           plusw1	equ	0xFE3
  6157                           fsr1h	equ	0xFE2
  6158                           fsr1l	equ	0xFE1
  6159                           indf2	equ	0xFDF
  6160                           postinc2	equ	0xFDE
  6161                           postdec2	equ	0xFDD
  6162                           plusw2	equ	0xFDB
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167 ;; *************** function _grabLeftIR *****************
  6168 ;; Defined at:
  6169 ;;		line 90 in file "IR_Reading.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;		None
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  IR_signal       2   40[COMRAM] unsigned int 
  6174 ;;  i               1   42[COMRAM] unsigned char 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  2   35[COMRAM] unsigned int 
  6177 ;; Registers used:
  6178 ;;		wreg, status,2, status,0
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6184 ;;      Params:         2       0       0       0
  6185 ;;      Locals:         3       0       0       0
  6186 ;;      Temps:          3       0       0       0
  6187 ;;      Totals:         8       0       0       0
  6188 ;;Total ram usage:        8 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    3
  6191 ;; This function calls:
  6192 ;;		Nothing
  6193 ;; This function is called by:
  6194 ;;		_ScanIR
  6195 ;;		_ScanWithRange
  6196 ;;		_main
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text24
  6201  001A0C                     __ptext24:
  6202                           	opt stack 0
  6203  001A0C                     _grabLeftIR:
  6204                           	opt stack 27
  6205                           
  6206                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6207                           
  6208                           ;incstack = 0
  6209  001A0C  0E00               	movlw	0
  6210  001A0E  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  6211  001A10  0E00               	movlw	0
  6212  001A12  6E29               	movwf	grabLeftIR@IR_signal,c
  6213                           
  6214                           ;IR_Reading.c: 93: unsigned char i=0;
  6215  001A14  0E00               	movlw	0
  6216  001A16  6E2B               	movwf	grabLeftIR@i,c
  6217                           
  6218                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6219  001A18  0E00               	movlw	0
  6220  001A1A  6E2B               	movwf	grabLeftIR@i,c
  6221  001A1C                     l2228:
  6222  001A1C  0E03               	movlw	3
  6223  001A1E  642B               	cpfsgt	grabLeftIR@i,c
  6224  001A20  D001               	goto	l2232
  6225  001A22  D01E               	goto	l2238
  6226  001A24                     l2232:
  6227                           
  6228                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6229  001A24  5067               	movf	3943,w,c	;volatile
  6230  001A26  6E26               	movwf	??_grabLeftIR& (0+255),c
  6231  001A28  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  6232  001A2A  0E07               	movlw	7
  6233  001A2C                     u1555:
  6234  001A2C  90D8               	bcf	status,0,c
  6235  001A2E  3626               	rlcf	??_grabLeftIR,f,c
  6236  001A30  3627               	rlcf	??_grabLeftIR+1,f,c
  6237  001A32  2EE8               	decfsz	wreg,f,c
  6238  001A34  D7FB               	goto	u1555
  6239  001A36  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  6240  001A3A  90D8               	bcf	status,0,c
  6241  001A3C  3228               	rrcf	??_grabLeftIR+2,f,c
  6242  001A3E  5028               	movf	??_grabLeftIR+2,w,c
  6243  001A40  1226               	iorwf	??_grabLeftIR,f,c
  6244  001A42  0E00               	movlw	0
  6245  001A44  1227               	iorwf	??_grabLeftIR+1,f,c
  6246  001A46  5026               	movf	??_grabLeftIR,w,c
  6247  001A48  2629               	addwf	grabLeftIR@IR_signal,f,c
  6248  001A4A  5027               	movf	??_grabLeftIR+1,w,c
  6249  001A4C  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  6250                           
  6251                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6252  001A4E  0E82               	movlw	130
  6253  001A50  6E26               	movwf	??_grabLeftIR& (0+255),c
  6254  001A52  0EDE               	movlw	222
  6255  001A54                     u3237:
  6256  001A54  2EE8               	decfsz	wreg,f,c
  6257  001A56  D7FE               	goto	u3237
  6258  001A58  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  6259  001A5A  D7FC               	goto	u3237
  6260  001A5C  2A2B               	incf	grabLeftIR@i,f,c
  6261  001A5E  D7DE               	goto	l2228
  6262  001A60                     l2238:
  6263                           
  6264                           ;IR_Reading.c: 99: }
  6265                           ;IR_Reading.c: 101: return IR_signal>>2;
  6266  001A60  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6267  001A64  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6268  001A68  90D8               	bcf	status,0,c
  6269  001A6A  3227               	rrcf	??_grabLeftIR+1,f,c
  6270  001A6C  3226               	rrcf	??_grabLeftIR,f,c
  6271  001A6E  90D8               	bcf	status,0,c
  6272  001A70  3227               	rrcf	??_grabLeftIR+1,f,c
  6273  001A72  3226               	rrcf	??_grabLeftIR,f,c
  6274  001A74  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  6275  001A78  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6276  001A7C  0012               	return	
  6277  001A7E                     __end_of_grabLeftIR:
  6278                           	opt stack 0
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           postinc0	equ	0xFEE
  6287                           wreg	equ	0xFE8
  6288                           indf1	equ	0xFE7
  6289                           plusw1	equ	0xFE3
  6290                           fsr1h	equ	0xFE2
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           postinc2	equ	0xFDE
  6294                           postdec2	equ	0xFDD
  6295                           plusw2	equ	0xFDB
  6296                           fsr2h	equ	0xFDA
  6297                           fsr2l	equ	0xFD9
  6298                           status	equ	0xFD8
  6299                           
  6300 ;; *************** function _SetLine *****************
  6301 ;; Defined at:
  6302 ;;		line 74 in file "LCD.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  line            1    wreg     unsigned char 
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  line            1   41[COMRAM] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;		None               void
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0, cstack
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6316 ;;      Params:         0       0       0       0
  6317 ;;      Locals:         1       0       0       0
  6318 ;;      Temps:          0       0       0       0
  6319 ;;      Totals:         1       0       0       0
  6320 ;;Total ram usage:        1 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    6
  6323 ;; This function calls:
  6324 ;;		_SendLCD
  6325 ;; This function is called by:
  6326 ;;		_ScanIR
  6327 ;;		_ScanWithRange
  6328 ;;		_main
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           	psect	text25
  6333  001D5A                     __ptext25:
  6334                           	opt stack 0
  6335  001D5A                     _SetLine:
  6336                           	opt stack 24
  6337                           
  6338                           ;incstack = 0
  6339                           ;SetLine@line stored from wreg
  6340  001D5A  6E2A               	movwf	SetLine@line,c
  6341                           
  6342                           ;LCD.c: 75: if (line==1) {
  6343  001D5C  042A               	decf	SetLine@line,w,c
  6344  001D5E  A4D8               	btfss	status,2,c
  6345  001D60  D006               	goto	l2246
  6346                           
  6347                           ;LCD.c: 76: SendLCD(0x80,0);
  6348  001D62  0E00               	movlw	0
  6349  001D64  6E28               	movwf	SendLCD@type,c
  6350  001D66  0E80               	movlw	128
  6351  001D68  ECC5  F00E         	call	_SendLCD
  6352                           
  6353                           ;LCD.c: 77: } else if (line==2) {
  6354  001D6C  D009               	goto	l2250
  6355  001D6E                     l2246:
  6356  001D6E  0E02               	movlw	2
  6357  001D70  182A               	xorwf	SetLine@line,w,c
  6358  001D72  A4D8               	btfss	status,2,c
  6359  001D74  D005               	goto	l2250
  6360                           
  6361                           ;LCD.c: 78: SendLCD(0xC0,0);
  6362  001D76  0E00               	movlw	0
  6363  001D78  6E28               	movwf	SendLCD@type,c
  6364  001D7A  0EC0               	movlw	192
  6365  001D7C  ECC5  F00E         	call	_SendLCD
  6366  001D80                     l2250:
  6367                           
  6368                           ;LCD.c: 79: }
  6369                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6370  001D80  0E21               	movlw	33
  6371  001D82                     u3247:
  6372  001D82  2EE8               	decfsz	wreg,f,c
  6373  001D84  D7FE               	goto	u3247
  6374  001D86  F000               	nop	
  6375  001D88  0012               	return		;funcret
  6376  001D8A                     __end_of_SetLine:
  6377                           	opt stack 0
  6378                           tblptru	equ	0xFF8
  6379                           tblptrh	equ	0xFF7
  6380                           tblptrl	equ	0xFF6
  6381                           tablat	equ	0xFF5
  6382                           prodh	equ	0xFF4
  6383                           prodl	equ	0xFF3
  6384                           intcon	equ	0xFF2
  6385                           postinc0	equ	0xFEE
  6386                           wreg	equ	0xFE8
  6387                           indf1	equ	0xFE7
  6388                           plusw1	equ	0xFE3
  6389                           fsr1h	equ	0xFE2
  6390                           fsr1l	equ	0xFE1
  6391                           indf2	equ	0xFDF
  6392                           postinc2	equ	0xFDE
  6393                           postdec2	equ	0xFDD
  6394                           plusw2	equ	0xFDB
  6395                           fsr2h	equ	0xFDA
  6396                           fsr2l	equ	0xFD9
  6397                           status	equ	0xFD8
  6398                           
  6399 ;; *************** function _LCD_String *****************
  6400 ;; Defined at:
  6401 ;;		line 83 in file "LCD.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;  string          2   41[COMRAM] PTR unsigned char 
  6404 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6405 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6406 ;;		 -> STR_1(12), 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;		None
  6409 ;; Return value:  Size  Location     Type
  6410 ;;		None               void
  6411 ;; Registers used:
  6412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6418 ;;      Params:         2       0       0       0
  6419 ;;      Locals:         0       0       0       0
  6420 ;;      Temps:          0       0       0       0
  6421 ;;      Totals:         2       0       0       0
  6422 ;;Total ram usage:        2 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    6
  6425 ;; This function calls:
  6426 ;;		_SendLCD
  6427 ;; This function is called by:
  6428 ;;		_ScanIR
  6429 ;;		_ScanWithRange
  6430 ;;		_main
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text26
  6435  001A7E                     __ptext26:
  6436                           	opt stack 0
  6437  001A7E                     _LCD_String:
  6438                           	opt stack 23
  6439                           
  6440                           ;LCD.c: 85: while(*string != 0){
  6441                           
  6442                           ;incstack = 0
  6443  001A7E  D01A               	goto	l2260
  6444  001A80                     l2254:
  6445                           
  6446                           ;LCD.c: 88: SendLCD(*string++,1);
  6447  001A80  0E01               	movlw	1
  6448  001A82  6E28               	movwf	SendLCD@type,c
  6449  001A84  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6450  001A88  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6451  001A8C  6AF8               	clrf	tblptru,c
  6452  001A8E  0E02               	movlw	(high __ramtop+-1)
  6453  001A90  64F7               	cpfsgt	tblptrh,c
  6454  001A92  D003               	bra	u1597
  6455  001A94  0008               	tblrd		*
  6456  001A96  50F5               	movf	tablat,w,c
  6457  001A98  D005               	bra	u1590
  6458  001A9A                     u1597:
  6459  001A9A  CFF6 FFE1          	movff	tblptrl,fsr1l
  6460  001A9E  CFF7 FFE2          	movff	tblptrh,fsr1h
  6461  001AA2  50E7               	movf	indf1,w,c
  6462  001AA4                     u1590:
  6463  001AA4  ECC5  F00E         	call	_SendLCD
  6464  001AA8  4A2A               	infsnz	LCD_String@string,f,c
  6465  001AAA  2A2B               	incf	LCD_String@string+1,f,c
  6466                           
  6467                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6468  001AAC  0E21               	movlw	33
  6469  001AAE                     u3257:
  6470  001AAE  2EE8               	decfsz	wreg,f,c
  6471  001AB0  D7FE               	goto	u3257
  6472  001AB2  F000               	nop	
  6473  001AB4                     l2260:
  6474  001AB4  C02A  FFF6         	movff	LCD_String@string,tblptrl
  6475  001AB8  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  6476  001ABC  6AF8               	clrf	tblptru,c
  6477  001ABE  0E02               	movlw	(high __ramtop+-1)
  6478  001AC0  64F7               	cpfsgt	tblptrh,c
  6479  001AC2  D003               	bra	u1607
  6480  001AC4  0008               	tblrd		*
  6481  001AC6  50F5               	movf	tablat,w,c
  6482  001AC8  D005               	bra	u1600
  6483  001ACA                     u1607:
  6484  001ACA  CFF6 FFE1          	movff	tblptrl,fsr1l
  6485  001ACE  CFF7 FFE2          	movff	tblptrh,fsr1h
  6486  001AD2  50E7               	movf	indf1,w,c
  6487  001AD4                     u1600:
  6488  001AD4  0900               	iorlw	0
  6489  001AD6  B4D8               	btfsc	status,2,c
  6490  001AD8  0012               	return	
  6491  001ADA  D7D2               	goto	l2254
  6492  001ADC                     __end_of_LCD_String:
  6493                           	opt stack 0
  6494                           tblptru	equ	0xFF8
  6495                           tblptrh	equ	0xFF7
  6496                           tblptrl	equ	0xFF6
  6497                           tablat	equ	0xFF5
  6498                           prodh	equ	0xFF4
  6499                           prodl	equ	0xFF3
  6500                           intcon	equ	0xFF2
  6501                           postinc0	equ	0xFEE
  6502                           wreg	equ	0xFE8
  6503                           indf1	equ	0xFE7
  6504                           plusw1	equ	0xFE3
  6505                           fsr1h	equ	0xFE2
  6506                           fsr1l	equ	0xFE1
  6507                           indf2	equ	0xFDF
  6508                           postinc2	equ	0xFDE
  6509                           postdec2	equ	0xFDD
  6510                           plusw2	equ	0xFDB
  6511                           fsr2h	equ	0xFDA
  6512                           fsr2l	equ	0xFD9
  6513                           status	equ	0xFD8
  6514                           
  6515 ;; *************** function _SendLCD *****************
  6516 ;; Defined at:
  6517 ;;		line 27 in file "LCD.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;  Byte            1    wreg     unsigned char 
  6520 ;;  type            1   39[COMRAM] unsigned char 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  Byte            1   40[COMRAM] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;		None               void
  6525 ;; Registers used:
  6526 ;;		wreg, status,2, status,0, cstack
  6527 ;; Tracked objects:
  6528 ;;		On entry : 0/0
  6529 ;;		On exit  : 0/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6532 ;;      Params:         1       0       0       0
  6533 ;;      Locals:         1       0       0       0
  6534 ;;      Temps:          0       0       0       0
  6535 ;;      Totals:         2       0       0       0
  6536 ;;Total ram usage:        2 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:    5
  6539 ;; This function calls:
  6540 ;;		_LCDout
  6541 ;; This function is called by:
  6542 ;;		_initLCD
  6543 ;;		_SetLine
  6544 ;;		_LCD_String
  6545 ;;		_ScanIR
  6546 ;;		_ScanWithRange
  6547 ;;		_main
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text27
  6552  001D8A                     __ptext27:
  6553                           	opt stack 0
  6554  001D8A                     _SendLCD:
  6555                           	opt stack 24
  6556                           
  6557                           ;incstack = 0
  6558                           ;SendLCD@Byte stored from wreg
  6559  001D8A  6E29               	movwf	SendLCD@Byte,c
  6560                           
  6561                           ;LCD.c: 30: LATAbits.LATA6=type;
  6562  001D8C  B028               	btfsc	SendLCD@type,0,c
  6563  001D8E  D002               	bra	u1385
  6564  001D90  9C89               	bcf	3977,6,c	;volatile
  6565  001D92  D001               	bra	u1386
  6566  001D94                     u1385:
  6567  001D94  8C89               	bsf	3977,6,c	;volatile
  6568  001D96                     u1386:
  6569                           
  6570                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6571  001D96  3829               	swapf	SendLCD@Byte,w,c
  6572  001D98  0B0F               	andlw	15
  6573  001D9A  0B0F               	andlw	15
  6574  001D9C  ECFB  F00A         	call	_LCDout
  6575                           
  6576                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6577  001DA0  0E06               	movlw	6
  6578  001DA2                     u3267:
  6579  001DA2  2EE8               	decfsz	wreg,f,c
  6580  001DA4  D7FE               	goto	u3267
  6581  001DA6  D000               	nop2		;nop
  6582                           
  6583                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6584  001DA8  5029               	movf	SendLCD@Byte,w,c
  6585  001DAA  0B0F               	andlw	15
  6586  001DAC  ECFB  F00A         	call	_LCDout
  6587                           
  6588                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6589  001DB0  0E21               	movlw	33
  6590  001DB2                     u3277:
  6591  001DB2  2EE8               	decfsz	wreg,f,c
  6592  001DB4  D7FE               	goto	u3277
  6593  001DB6  F000               	nop	
  6594  001DB8  0012               	return		;funcret
  6595  001DBA                     __end_of_SendLCD:
  6596                           	opt stack 0
  6597                           tblptru	equ	0xFF8
  6598                           tblptrh	equ	0xFF7
  6599                           tblptrl	equ	0xFF6
  6600                           tablat	equ	0xFF5
  6601                           prodh	equ	0xFF4
  6602                           prodl	equ	0xFF3
  6603                           intcon	equ	0xFF2
  6604                           postinc0	equ	0xFEE
  6605                           wreg	equ	0xFE8
  6606                           indf1	equ	0xFE7
  6607                           plusw1	equ	0xFE3
  6608                           fsr1h	equ	0xFE2
  6609                           fsr1l	equ	0xFE1
  6610                           indf2	equ	0xFDF
  6611                           postinc2	equ	0xFDE
  6612                           postdec2	equ	0xFDD
  6613                           plusw2	equ	0xFDB
  6614                           fsr2h	equ	0xFDA
  6615                           fsr2l	equ	0xFD9
  6616                           status	equ	0xFD8
  6617                           
  6618 ;; *************** function _LCDout *****************
  6619 ;; Defined at:
  6620 ;;		line 14 in file "LCD.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;  number          1    wreg     unsigned char 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  number          1   38[COMRAM] unsigned char 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;		None               void
  6627 ;; Registers used:
  6628 ;;		wreg, status,2, status,0, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6634 ;;      Params:         0       0       0       0
  6635 ;;      Locals:         1       0       0       0
  6636 ;;      Temps:          3       0       0       0
  6637 ;;      Totals:         4       0       0       0
  6638 ;;Total ram usage:        4 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    4
  6641 ;; This function calls:
  6642 ;;		_E_TOG
  6643 ;; This function is called by:
  6644 ;;		_SendLCD
  6645 ;;		_initLCD
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text28
  6650  0015F6                     __ptext28:
  6651                           	opt stack 0
  6652  0015F6                     _LCDout:
  6653                           	opt stack 24
  6654                           
  6655                           ;incstack = 0
  6656                           ;LCDout@number stored from wreg
  6657  0015F6  6E27               	movwf	LCDout@number,c
  6658                           
  6659                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6660  0015F8  5027               	movf	LCDout@number,w,c
  6661  0015FA  6E24               	movwf	??_LCDout& (0+255),c
  6662  0015FC  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6663  0015FE  0E07               	movlw	7
  6664  001600                     u1275:
  6665  001600  90D8               	bcf	status,0,c
  6666  001602  3624               	rlcf	??_LCDout,f,c
  6667  001604  3625               	rlcf	??_LCDout+1,f,c
  6668  001606  2EE8               	decfsz	wreg,f,c
  6669  001608  D7FB               	goto	u1275
  6670  00160A  0E07               	movlw	7
  6671  00160C  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6672  00160E                     u1285:
  6673  00160E  3425               	rlcf	??_LCDout+1,w,c
  6674  001610  3225               	rrcf	??_LCDout+1,f,c
  6675  001612  3224               	rrcf	??_LCDout,f,c
  6676  001614  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6677  001616  D7FB               	goto	u1285
  6678  001618  4624               	rlncf	??_LCDout,f,c
  6679  00161A  508B               	movf	3979,w,c	;volatile
  6680  00161C  1824               	xorwf	??_LCDout,w,c
  6681  00161E  0BFD               	andlw	-3
  6682  001620  1824               	xorwf	??_LCDout,w,c
  6683  001622  6E8B               	movwf	3979,c	;volatile
  6684                           
  6685                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6686  001624  5027               	movf	LCDout@number,w,c
  6687  001626  6E24               	movwf	??_LCDout& (0+255),c
  6688  001628  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6689  00162A  0E06               	movlw	6
  6690  00162C                     u1295:
  6691  00162C  90D8               	bcf	status,0,c
  6692  00162E  3624               	rlcf	??_LCDout,f,c
  6693  001630  3625               	rlcf	??_LCDout+1,f,c
  6694  001632  2EE8               	decfsz	wreg,f,c
  6695  001634  D7FB               	goto	u1295
  6696  001636  0E07               	movlw	7
  6697  001638  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6698  00163A                     u1305:
  6699  00163A  3425               	rlcf	??_LCDout+1,w,c
  6700  00163C  3225               	rrcf	??_LCDout+1,f,c
  6701  00163E  3224               	rrcf	??_LCDout,f,c
  6702  001640  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6703  001642  D7FB               	goto	u1305
  6704  001644  4624               	rlncf	??_LCDout,f,c
  6705  001646  4624               	rlncf	??_LCDout,f,c
  6706  001648  508B               	movf	3979,w,c	;volatile
  6707  00164A  1824               	xorwf	??_LCDout,w,c
  6708  00164C  0BFB               	andlw	-5
  6709  00164E  1824               	xorwf	??_LCDout,w,c
  6710  001650  6E8B               	movwf	3979,c	;volatile
  6711                           
  6712                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6713  001652  5027               	movf	LCDout@number,w,c
  6714  001654  6E24               	movwf	??_LCDout& (0+255),c
  6715  001656  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6716  001658  0E05               	movlw	5
  6717  00165A                     u1315:
  6718  00165A  90D8               	bcf	status,0,c
  6719  00165C  3624               	rlcf	??_LCDout,f,c
  6720  00165E  3625               	rlcf	??_LCDout+1,f,c
  6721  001660  2EE8               	decfsz	wreg,f,c
  6722  001662  D7FB               	goto	u1315
  6723  001664  0E07               	movlw	7
  6724  001666  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6725  001668                     u1325:
  6726  001668  3425               	rlcf	??_LCDout+1,w,c
  6727  00166A  3225               	rrcf	??_LCDout+1,f,c
  6728  00166C  3224               	rrcf	??_LCDout,f,c
  6729  00166E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6730  001670  D7FB               	goto	u1325
  6731  001672  508C               	movf	3980,w,c	;volatile
  6732  001674  1824               	xorwf	??_LCDout,w,c
  6733  001676  0BFE               	andlw	-2
  6734  001678  1824               	xorwf	??_LCDout,w,c
  6735  00167A  6E8C               	movwf	3980,c	;volatile
  6736                           
  6737                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6738  00167C  5027               	movf	LCDout@number,w,c
  6739  00167E  6E24               	movwf	??_LCDout& (0+255),c
  6740  001680  6A25               	clrf	(??_LCDout+1)& (0+255),c
  6741  001682  3A24               	swapf	??_LCDout,f,c
  6742  001684  3A25               	swapf	??_LCDout+1,f,c
  6743  001686  0EF0               	movlw	240
  6744  001688  1625               	andwf	??_LCDout+1,f,c
  6745  00168A  5024               	movf	??_LCDout,w,c
  6746  00168C  0B0F               	andlw	15
  6747  00168E  1225               	iorwf	??_LCDout+1,f,c
  6748  001690  0EF0               	movlw	240
  6749  001692  1624               	andwf	??_LCDout,f,c
  6750  001694  0E07               	movlw	7
  6751  001696  6E26               	movwf	(??_LCDout+2)& (0+255),c
  6752  001698                     u1335:
  6753  001698  3425               	rlcf	??_LCDout+1,w,c
  6754  00169A  3225               	rrcf	??_LCDout+1,f,c
  6755  00169C  3224               	rrcf	??_LCDout,f,c
  6756  00169E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  6757  0016A0  D7FB               	goto	u1335
  6758  0016A2  4624               	rlncf	??_LCDout,f,c
  6759  0016A4  508C               	movf	3980,w,c	;volatile
  6760  0016A6  1824               	xorwf	??_LCDout,w,c
  6761  0016A8  0BFD               	andlw	-3
  6762  0016AA  1824               	xorwf	??_LCDout,w,c
  6763  0016AC  6E8C               	movwf	3980,c	;volatile
  6764                           
  6765                           ;LCD.c: 21: E_TOG();
  6766  0016AE  EC3A  F00F         	call	_E_TOG	;wreg free
  6767                           
  6768                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6769  0016B2  0E03               	movlw	3
  6770  0016B4                     u3287:
  6771  0016B4  2EE8               	decfsz	wreg,f,c
  6772  0016B6  D7FE               	goto	u3287
  6773  0016B8  F000               	nop	
  6774  0016BA  0012               	return		;funcret
  6775  0016BC                     __end_of_LCDout:
  6776                           	opt stack 0
  6777                           tblptru	equ	0xFF8
  6778                           tblptrh	equ	0xFF7
  6779                           tblptrl	equ	0xFF6
  6780                           tablat	equ	0xFF5
  6781                           prodh	equ	0xFF4
  6782                           prodl	equ	0xFF3
  6783                           intcon	equ	0xFF2
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           indf1	equ	0xFE7
  6787                           plusw1	equ	0xFE3
  6788                           fsr1h	equ	0xFE2
  6789                           fsr1l	equ	0xFE1
  6790                           indf2	equ	0xFDF
  6791                           postinc2	equ	0xFDE
  6792                           postdec2	equ	0xFDD
  6793                           plusw2	equ	0xFDB
  6794                           fsr2h	equ	0xFDA
  6795                           fsr2l	equ	0xFD9
  6796                           status	equ	0xFD8
  6797                           
  6798 ;; *************** function _E_TOG *****************
  6799 ;; Defined at:
  6800 ;;		line 5 in file "LCD.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;		None
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;		None
  6805 ;; Return value:  Size  Location     Type
  6806 ;;		None               void
  6807 ;; Registers used:
  6808 ;;		wreg
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6814 ;;      Params:         0       0       0       0
  6815 ;;      Locals:         0       0       0       0
  6816 ;;      Temps:          0       0       0       0
  6817 ;;      Totals:         0       0       0       0
  6818 ;;Total ram usage:        0 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    3
  6821 ;; This function calls:
  6822 ;;		Nothing
  6823 ;; This function is called by:
  6824 ;;		_LCDout
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text29
  6829  001E74                     __ptext29:
  6830                           	opt stack 0
  6831  001E74                     _E_TOG:
  6832                           	opt stack 24
  6833                           
  6834                           ;LCD.c: 8: LATCbits.LATC0=1;
  6835                           
  6836                           ;incstack = 0
  6837  001E74  808B               	bsf	3979,0,c	;volatile
  6838                           
  6839                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6840  001E76  0E03               	movlw	3
  6841  001E78                     u3297:
  6842  001E78  2EE8               	decfsz	wreg,f,c
  6843  001E7A  D7FE               	goto	u3297
  6844  001E7C  F000               	nop	
  6845                           
  6846                           ;LCD.c: 10: LATCbits.LATC0=0;
  6847  001E7E  908B               	bcf	3979,0,c	;volatile
  6848  001E80  0012               	return		;funcret
  6849  001E82                     __end_of_E_TOG:
  6850                           	opt stack 0
  6851                           tblptru	equ	0xFF8
  6852                           tblptrh	equ	0xFF7
  6853                           tblptrl	equ	0xFF6
  6854                           tablat	equ	0xFF5
  6855                           prodh	equ	0xFF4
  6856                           prodl	equ	0xFF3
  6857                           intcon	equ	0xFF2
  6858                           postinc0	equ	0xFEE
  6859                           wreg	equ	0xFE8
  6860                           indf1	equ	0xFE7
  6861                           plusw1	equ	0xFE3
  6862                           fsr1h	equ	0xFE2
  6863                           fsr1l	equ	0xFE1
  6864                           indf2	equ	0xFDF
  6865                           postinc2	equ	0xFDE
  6866                           postdec2	equ	0xFDD
  6867                           plusw2	equ	0xFDB
  6868                           fsr2h	equ	0xFDA
  6869                           fsr2l	equ	0xFD9
  6870                           status	equ	0xFD8
  6871                           
  6872 ;; *************** function _InterruptHandlerLow *****************
  6873 ;; Defined at:
  6874 ;;		line 18 in file "main.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;		None
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;		None
  6879 ;; Return value:  Size  Location     Type
  6880 ;;		None               void
  6881 ;; Registers used:
  6882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6888 ;;      Params:         0       0       0       0
  6889 ;;      Locals:         0       0       0       0
  6890 ;;      Temps:         17       0       0       0
  6891 ;;      Totals:        17       0       0       0
  6892 ;;Total ram usage:       17 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    2
  6895 ;; This function calls:
  6896 ;;		Nothing
  6897 ;; This function is called by:
  6898 ;;		Interrupt level 1
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           	psect	intcodelo
  6903  000018                     __pintcodelo:
  6904                           	opt stack 0
  6905  000018                     _InterruptHandlerLow:
  6906                           	opt stack 23
  6907                           
  6908                           ;incstack = 0
  6909  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6910  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6911  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6912  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6913  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6914  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6915  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6916  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6917  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6918  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6919  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6920  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6921  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6922  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6923  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6924  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6925  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6926  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6927                           
  6928                           ;main.c: 20: if (PIR1bits.RCIF) {
  6929  00005E  AA9E               	btfss	3998,5,c	;volatile
  6930  000060  D016               	goto	i1l373
  6931                           
  6932                           ;main.c: 21: ReceivedString[i]=RCREG;
  6933  000062  503A               	movf	_i,w,c	;volatile
  6934  000064  0D01               	mullw	1
  6935  000066  0EE6               	movlw	low _ReceivedString
  6936  000068  24F3               	addwf	prodl,w,c
  6937  00006A  6ED9               	movwf	fsr2l,c
  6938  00006C  0E01               	movlw	high _ReceivedString
  6939  00006E  20F4               	addwfc	prodh,w,c
  6940  000070  6EDA               	movwf	fsr2h,c
  6941  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6942                           
  6943                           ;main.c: 22: RFID_Read=1;
  6944  000076  0E01               	movlw	1
  6945  000078  0101               	movlb	1	; () banked
  6946  00007A  6FF6               	movwf	_RFID_Read& (0+255),b	;volatile
  6947                           
  6948                           ; BSR set to: 1
  6949                           ;main.c: 23: if (i==15){
  6950  00007C  0E0F               	movlw	15
  6951  00007E  183A               	xorwf	_i,w,c	;volatile
  6952  000080  A4D8               	btfss	status,2,c
  6953  000082  D003               	goto	i1l2678
  6954                           
  6955                           ; BSR set to: 1
  6956                           ;main.c: 24: i=0;
  6957  000084  0E00               	movlw	0
  6958  000086  6E3A               	movwf	_i,c	;volatile
  6959                           
  6960                           ;main.c: 25: }else{
  6961  000088  D001               	goto	i1l2680
  6962  00008A                     i1l2678:
  6963                           
  6964                           ; BSR set to: 1
  6965                           ;main.c: 26: i++;
  6966  00008A  2A3A               	incf	_i,f,c	;volatile
  6967  00008C                     i1l2680:
  6968                           
  6969                           ; BSR set to: 1
  6970                           ;main.c: 27: }
  6971                           ;main.c: 28: PIR1bits.RCIF=0;
  6972  00008C  9A9E               	bcf	3998,5,c	;volatile
  6973  00008E                     i1l373:
  6974  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6975  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6976  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6977  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6978  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6979  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6980  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6981  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6982  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6983  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6984  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6985  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6986  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6987  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6988  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6989  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6990  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6991  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6992  0000D4  0010               	retfie	
  6993  0000D6                     __end_of_InterruptHandlerLow:
  6994                           	opt stack 0
  6995                           pclatu	equ	0xFFB
  6996                           pclath	equ	0xFFA
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           postinc0	equ	0xFEE
  7005                           fsr0h	equ	0xFEA
  7006                           fsr0l	equ	0xFE9
  7007                           wreg	equ	0xFE8
  7008                           indf1	equ	0xFE7
  7009                           plusw1	equ	0xFE3
  7010                           fsr1h	equ	0xFE2
  7011                           fsr1l	equ	0xFE1
  7012                           bsr	equ	0xFE0
  7013                           indf2	equ	0xFDF
  7014                           postinc2	equ	0xFDE
  7015                           postdec2	equ	0xFDD
  7016                           plusw2	equ	0xFDB
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function _InterruptHandlerHigh *****************
  7022 ;; Defined at:
  7023 ;;		line 34 in file "main.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;		None
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;		None
  7028 ;; Return value:  Size  Location     Type
  7029 ;;		None               void
  7030 ;; Registers used:
  7031 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7037 ;;      Params:         0       0       0       0
  7038 ;;      Locals:         0       0       0       0
  7039 ;;      Temps:         14       0       0       0
  7040 ;;      Totals:        14       0       0       0
  7041 ;;Total ram usage:       14 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:    1
  7044 ;; This function calls:
  7045 ;;		i2_delay_tenth_s
  7046 ;; This function is called by:
  7047 ;;		Interrupt level 2
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           	psect	intcode
  7052  000008                     __pintcode:
  7053                           	opt stack 0
  7054  000008                     _InterruptHandlerHigh:
  7055                           	opt stack 23
  7056                           
  7057                           ;incstack = 0
  7058  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7059  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7060  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7061  000012  EF06  F00C         	goto	int_func
  7062                           pclatu	equ	0xFFB
  7063                           pclath	equ	0xFFA
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           postinc0	equ	0xFEE
  7072                           fsr0h	equ	0xFEA
  7073                           fsr0l	equ	0xFE9
  7074                           wreg	equ	0xFE8
  7075                           indf1	equ	0xFE7
  7076                           plusw1	equ	0xFE3
  7077                           fsr1h	equ	0xFE2
  7078                           fsr1l	equ	0xFE1
  7079                           bsr	equ	0xFE0
  7080                           indf2	equ	0xFDF
  7081                           postinc2	equ	0xFDE
  7082                           postdec2	equ	0xFDD
  7083                           plusw2	equ	0xFDB
  7084                           fsr2h	equ	0xFDA
  7085                           fsr2l	equ	0xFD9
  7086                           status	equ	0xFD8
  7087                           
  7088                           	psect	intcode_body
  7089  00180C                     __pintcode_body:
  7090                           	opt stack 23
  7091  00180C                     int_func:
  7092                           	opt stack 23
  7093  00180C  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7094  001810  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7095  001814  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7096  001818  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7097  00181C  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7098  001820  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7099  001824  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7100  001828  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7101  00182C  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7102  001830  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7103  001834  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7104  001838  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7105                           
  7106                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7107  00183C  A2F2               	btfss	intcon,1,c	;volatile
  7108  00183E  D00D               	goto	i2l381
  7109                           
  7110                           ;main.c: 36: if (mode==-1) {
  7111  001840  283B               	incf	_mode,w,c	;volatile
  7112  001842  A4D8               	btfss	status,2,c
  7113  001844  D003               	goto	i2l2688
  7114                           
  7115                           ;main.c: 38: mode=1;
  7116  001846  0E01               	movlw	1
  7117  001848  6E3B               	movwf	_mode,c	;volatile
  7118                           
  7119                           ;main.c: 39: } else if (mode==0) {
  7120  00184A  D003               	goto	i2l2692
  7121  00184C                     i2l2688:
  7122  00184C  503B               	movf	_mode,w,c	;volatile
  7123  00184E  A4D8               	btfss	status,2,c
  7124                           
  7125                           ;main.c: 43: mode=-1;
  7126                           
  7127                           ;main.c: 41: } else {
  7128  001850  683B               	setf	_mode,c	;volatile
  7129  001852                     i2l2692:
  7130                           
  7131                           ;main.c: 44: }
  7132                           ;main.c: 46: delay_tenth_s(2);
  7133  001852  0E02               	movlw	2
  7134  001854  EC5D  F00E         	call	i2_delay_tenth_s
  7135                           
  7136                           ;main.c: 47: INTCONbits.INT0IF=0;
  7137  001858  92F2               	bcf	intcon,1,c	;volatile
  7138  00185A                     i2l381:
  7139  00185A  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7140  00185E  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7141  001862  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7142  001866  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7143  00186A  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7144  00186E  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7145  001872  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7146  001876  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7147  00187A  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7148  00187E  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7149  001882  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7150  001886  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7151  00188A  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7152  00188E  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7153  001892  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7154  001894  0011               	retfie		f
  7155  001896                     __end_of_InterruptHandlerHigh:
  7156                           	opt stack 0
  7157                           pclatu	equ	0xFFB
  7158                           pclath	equ	0xFFA
  7159                           tblptru	equ	0xFF8
  7160                           tblptrh	equ	0xFF7
  7161                           tblptrl	equ	0xFF6
  7162                           tablat	equ	0xFF5
  7163                           prodh	equ	0xFF4
  7164                           prodl	equ	0xFF3
  7165                           intcon	equ	0xFF2
  7166                           postinc0	equ	0xFEE
  7167                           fsr0h	equ	0xFEA
  7168                           fsr0l	equ	0xFE9
  7169                           wreg	equ	0xFE8
  7170                           indf1	equ	0xFE7
  7171                           plusw1	equ	0xFE3
  7172                           fsr1h	equ	0xFE2
  7173                           fsr1l	equ	0xFE1
  7174                           bsr	equ	0xFE0
  7175                           indf2	equ	0xFDF
  7176                           postinc2	equ	0xFDE
  7177                           postdec2	equ	0xFDD
  7178                           plusw2	equ	0xFDB
  7179                           fsr2h	equ	0xFDA
  7180                           fsr2l	equ	0xFD9
  7181                           status	equ	0xFD8
  7182                           
  7183 ;; *************** function i2_delay_tenth_s *****************
  7184 ;; Defined at:
  7185 ;;		line 32 in file "Movement.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;  tenth_second    1    wreg     unsigned char 
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7190 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7191 ;; Return value:  Size  Location     Type
  7192 ;;		None               void
  7193 ;; Registers used:
  7194 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7195 ;; Tracked objects:
  7196 ;;		On entry : 0/0
  7197 ;;		On exit  : 0/0
  7198 ;;		Unchanged: 0/0
  7199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7200 ;;      Params:         0       0       0       0
  7201 ;;      Locals:         3       0       0       0
  7202 ;;      Temps:          1       0       0       0
  7203 ;;      Totals:         4       0       0       0
  7204 ;;Total ram usage:        4 bytes
  7205 ;; Hardware stack levels used:    1
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_InterruptHandlerHigh
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           	psect	text32
  7214  001CBA                     __ptext32:
  7215                           	opt stack 0
  7216  001CBA                     i2_delay_tenth_s:
  7217                           	opt stack 23
  7218                           
  7219                           ;incstack = 0
  7220                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7221  001CBA  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7222                           
  7223                           ;Movement.c: 33: unsigned int i=0;
  7224  001CBC  0E00               	movlw	0
  7225  001CBE  6E04               	movwf	i2delay_tenth_s@i+1,c
  7226  001CC0  0E00               	movlw	0
  7227  001CC2  6E03               	movwf	i2delay_tenth_s@i,c
  7228                           
  7229                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7230  001CC4  0E00               	movlw	0
  7231  001CC6  6E04               	movwf	i2delay_tenth_s@i+1,c
  7232  001CC8  0E01               	movlw	1
  7233  001CCA  6E03               	movwf	i2delay_tenth_s@i,c
  7234  001CCC  D009               	goto	i2l2650
  7235  001CCE                     i2l2646:
  7236                           
  7237                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7238  001CCE  0E82               	movlw	130
  7239  001CD0  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7240  001CD2  0EDE               	movlw	222
  7241  001CD4                     i2u330_47:
  7242  001CD4  2EE8               	decfsz	wreg,f,c
  7243  001CD6  D7FE               	goto	i2u330_47
  7244  001CD8  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7245  001CDA  D7FC               	goto	i2u330_47
  7246  001CDC  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7247  001CDE  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7248  001CE0                     i2l2650:
  7249  001CE0  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7250  001CE2  0D02               	mullw	2
  7251  001CE4  5003               	movf	i2delay_tenth_s@i,w,c
  7252  001CE6  5CF3               	subwf	prodl,w,c
  7253  001CE8  5004               	movf	i2delay_tenth_s@i+1,w,c
  7254  001CEA  58F4               	subwfb	prodh,w,c
  7255  001CEC  A0D8               	btfss	status,0,c
  7256  001CEE  0012               	return	
  7257  001CF0  D7EE               	goto	i2l2646
  7258  001CF2                     __end_ofi2_delay_tenth_s:
  7259                           	opt stack 0
  7260                           pclatu	equ	0xFFB
  7261                           pclath	equ	0xFFA
  7262                           tblptru	equ	0xFF8
  7263                           tblptrh	equ	0xFF7
  7264                           tblptrl	equ	0xFF6
  7265                           tablat	equ	0xFF5
  7266                           prodh	equ	0xFF4
  7267                           prodl	equ	0xFF3
  7268                           intcon	equ	0xFF2
  7269                           postinc0	equ	0xFEE
  7270                           fsr0h	equ	0xFEA
  7271                           fsr0l	equ	0xFE9
  7272                           wreg	equ	0xFE8
  7273                           indf1	equ	0xFE7
  7274                           plusw1	equ	0xFE3
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           bsr	equ	0xFE0
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           plusw2	equ	0xFDB
  7282                           fsr2h	equ	0xFDA
  7283                           fsr2l	equ	0xFD9
  7284                           status	equ	0xFD8
  7285                           pclatu	equ	0xFFB
  7286                           pclath	equ	0xFFA
  7287                           tblptru	equ	0xFF8
  7288                           tblptrh	equ	0xFF7
  7289                           tblptrl	equ	0xFF6
  7290                           tablat	equ	0xFF5
  7291                           prodh	equ	0xFF4
  7292                           prodl	equ	0xFF3
  7293                           intcon	equ	0xFF2
  7294                           postinc0	equ	0xFEE
  7295                           fsr0h	equ	0xFEA
  7296                           fsr0l	equ	0xFE9
  7297                           wreg	equ	0xFE8
  7298                           indf1	equ	0xFE7
  7299                           plusw1	equ	0xFE3
  7300                           fsr1h	equ	0xFE2
  7301                           fsr1l	equ	0xFE1
  7302                           bsr	equ	0xFE0
  7303                           indf2	equ	0xFDF
  7304                           postinc2	equ	0xFDE
  7305                           postdec2	equ	0xFDD
  7306                           plusw2	equ	0xFDB
  7307                           fsr2h	equ	0xFDA
  7308                           fsr2l	equ	0xFD9
  7309                           status	equ	0xFD8
  7310                           
  7311                           	psect	rparam
  7312  0000                     pclatu	equ	0xFFB
  7313                           pclath	equ	0xFFA
  7314                           tblptru	equ	0xFF8
  7315                           tblptrh	equ	0xFF7
  7316                           tblptrl	equ	0xFF6
  7317                           tablat	equ	0xFF5
  7318                           prodh	equ	0xFF4
  7319                           prodl	equ	0xFF3
  7320                           intcon	equ	0xFF2
  7321                           postinc0	equ	0xFEE
  7322                           fsr0h	equ	0xFEA
  7323                           fsr0l	equ	0xFE9
  7324                           wreg	equ	0xFE8
  7325                           indf1	equ	0xFE7
  7326                           plusw1	equ	0xFE3
  7327                           fsr1h	equ	0xFE2
  7328                           fsr1l	equ	0xFE1
  7329                           bsr	equ	0xFE0
  7330                           indf2	equ	0xFDF
  7331                           postinc2	equ	0xFDE
  7332                           postdec2	equ	0xFDD
  7333                           plusw2	equ	0xFDB
  7334                           fsr2h	equ	0xFDA
  7335                           fsr2l	equ	0xFD9
  7336                           status	equ	0xFD8
  7337                           
  7338                           	psect	temp
  7339  00003C                     btemp:
  7340                           	opt stack 0
  7341  00003C                     	ds	1
  7342  0000                     int$flags	set	btemp
  7343                           pclatu	equ	0xFFB
  7344                           pclath	equ	0xFFA
  7345                           tblptru	equ	0xFF8
  7346                           tblptrh	equ	0xFF7
  7347                           tblptrl	equ	0xFF6
  7348                           tablat	equ	0xFF5
  7349                           prodh	equ	0xFF4
  7350                           prodl	equ	0xFF3
  7351                           intcon	equ	0xFF2
  7352                           postinc0	equ	0xFEE
  7353                           fsr0h	equ	0xFEA
  7354                           fsr0l	equ	0xFE9
  7355                           wreg	equ	0xFE8
  7356                           indf1	equ	0xFE7
  7357                           plusw1	equ	0xFE3
  7358                           fsr1h	equ	0xFE2
  7359                           fsr1l	equ	0xFE1
  7360                           bsr	equ	0xFE0
  7361                           indf2	equ	0xFDF
  7362                           postinc2	equ	0xFDE
  7363                           postdec2	equ	0xFDD
  7364                           plusw2	equ	0xFDB
  7365                           fsr2h	equ	0xFDA
  7366                           fsr2l	equ	0xFD9
  7367                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     95     153
    BANK1           256    226     247
    BANK2           256      0     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   70843
                                             90 BANK0      5     5      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4478
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     157
                                             35 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    63     14   24330
                                             13 BANK0     77    63     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    4940
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5171
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   11702
                                             56 COMRAM     1     1      0
                                             13 BANK0     50    46      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     22F       3        0.0%
DATA                 0      0     22F      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Mon Mar 19 16:43:48 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 149E  
                                  l65 1974                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01BE                           ?_LCD_String 002A  
                                 l221 0D20                                   l222 0D50  
                                 l224 0EA4                                   l431 0A1C  
                                 l424 099A                                   l390 041C  
                                 l907 1BBE                                   l897 1B7C  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3000 1954                                  l3010 177A  
                                l2212 19AA                                  l3100 1258  
                                l2222 19EE                                  l2150 1B52  
                                l3014 1792                                  l2232 1A24  
                                l2216 19B2                                  l2160 1B72  
                                l2152 1B56                                  l3104 1290  
                                l3040 10CA                                  l3024 17CA  
                                l2250 1D80                                  l2170 1B9C  
                                l2138 1E3E                                  l3130 1314  
                                l3114 12BE                                  l3122 12E4  
                                l3106 129A                                  l3018 17AA  
                                l2410 1DCE                                  l2260 1AB4  
                                l2228 1A1C                                  l2148 1B4A  
                                l2172 1BA0                                  l3124 12F0  
                                l3052 1100                                  l3300 0FE4  
                                l2254 1A80                                  l2246 1D6E  
                                l2238 1A60                                  l3070 11CA  
                                l3046 10E6                                  l3310 0FFA  
                                l2176 1BB4                                  l2168 1B94  
                                l3144 138E                                  l3136 1332  
                                l3080 11FA                                  l3048 10F8  
                                l2264 1C96                                  l3304 0FE8  
                                l3224 0C52                                  l3312 1000  
                                l3138 1338                                  l3082 1200  
                                l3058 1130                                  l3146 139A  
                                l3148 13B4                                  l3068 11A2  
                                l2268 1CA8                                  l3420 0500  
                                l3094 1236                                  l3192 15DE  
                                l3264 0D94                                  l3504 0776  
                                l3440 0552                                  l3416 04CE  
                                l3274 0E86                                  l3266 0DAC  
                                l3506 077C                                  l3514 07E4  
                                l3532 0870                                  l3380 0422  
                                l3542 08E6                                  l3526 084C  
                                l3462 0648                                  l3560 0A20  
                                l3472 0698                                  l3554 0950  
                                l3482 0700                                  l3466 0672  
                                l3458 05E8                                  l3572 0ADA  
                                l3492 074A                                  l3574 0AF6  
                                l3566 0A9A                                  l3558 09BE  
                                l3494 0750                                  l3486 070A  
                                l2960 18D8                                  l2952 18BA  
                                l3568 0AD4                                  l2970 18F8  
                                l2962 18DC                                  l2946 18AA  
                                l3498 075A                                  l3578 0AF8  
                                l2958 18D0                                  l2974 1902  
                                l2992 191C                                  l2978 1910  
                                l2988 1476                                  l2996 1938  
                                STR_1 032D                                  STR_2 030C  
                                STR_3 032D                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0344                                  STR_8 0339  
                                u1305 163A                                  u3010 0A5E  
                                u1315 165A                                  u1325 1668  
                                _LATB 000F8A                                  u1335 1698  
                                u1600 1AD4                                  u1275 1600  
                                u3107 1722                                  u1285 160E  
                                u1525 19BA                                  u3117 1734  
                                u3037 047E                                  u1295 162C  
                                u1607 1ACA                                  u3207 1560  
                                u3127 174A                                  u3047 0496  
                                u1385 1D94                                  u3217 17C4  
                                u3137 175E                                  u3057 16CE  
                                u1386 1D96                                  u1555 1A2C  
                                u3227 19E2                                  u3147 1770  
                                u3067 16E4                                  u2364 1436  
                                u3237 1A54                                  u2365 1432  
                                u3157 0C86                                  u3077 16F4  
                                u1590 1AA4                                  u2374 1492  
                                u3247 1D82                                  u2375 148E  
                                u3167 0C9E                                  u3087 1702  
                                u3257 1AAE                                  u2385 14EC  
                                u3177 196E                                  u3097 1710  
                                u3267 1DA2                                  u3187 1C9C  
                                u1835 1DCA                                  u1836 1DCC  
                                u3277 1DB2                                  u1597 1A9A  
                                u3197 154A                                  u3287 16B4  
                                u1855 1DDC                                  u1856 1DDE  
                                u3297 1E78                                  u2771 0366  
                                u2860 06CA                                  u2781 0378  
                                u2870 06DE                                  u2862 06CC  
                                u2872 06E0                                  u2970 092C  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 01C8                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1778                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
             ScanWithRange@MotorPower 00AE                          ___param_bank 000010  
                     i2_delay_tenth_s 1CBA                       __end_of_SendLCD 1DBA  
                     __end_of_SetLine 1D8A                    ScanWithRange@F3892 00F5  
                         ScanIR@F3879 00F1                                 ?_main 0001  
                     __end_of___awdiv 191A                                 ?_stop 0062  
                     ___awdiv@divisor 002C                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 002B                       __end_of___lwdiv 1B86  
                     __end_of___lwmod 1BC8                                 i1l373 008E  
                               i2l381 185A                       ___awdiv@counter 002E  
                               _RCREG 000FAE                                 _E_TOG 1E74  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                               _TXREG 000FAD                       __end_of_initLCD 1778  
                  ScanWithRange@loops 0071                       __end_of_dpowers 030B  
                     __end_of_isdigit 1E46                                 main@i 01CE  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 13C2  
              __size_of_ScanWithRange 05A2                        __CFG_MCLRE$OFF 000000  
                     __initialization 1CF2                          __end_of_main 0B1A  
                        __end_of_stop 180C                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 0099                  __end_of_enableSensor 1DE0  
                 VerifySignal@hexByte 002C                                ??_main 00BA  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2680 008C  
                              i1l2678 008A                        __CFG_WDTEN$OFF 000000  
                              i2l2650 1CE0                                i2l2646 1CCE  
                              i2l2692 1852                                i2l2688 184C  
               __end_of_delay_tenth_s 1CBA                                _LCDout 15F6  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00B0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1CF2                           SendLCD@type 0028  
                           ??_SendLCD 0029                                _ScanIR 14FC  
                           ??_SetLine 002A                                ___wmul 1DE0  
                           ??___awdiv 002E                      __end_of_initRFID 1E62  
                           ??___lwdiv 0028                             ??___lwmod 002F  
                              _initIR 1E06                  __size_of_grabRightIR 0072  
                              clear_0 1CF8                                clear_1 1D04  
                              clear_2 1D10                      ___awdiv@quotient 0030  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 0024                             ??_initLCD 002A  
                       _ScanWithRange 0B1A                             ??_isdigit 0024  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0062  
                              stop@mR 0064                             ??_sprintf 0060  
     ScanWithRange@TimeAboveThreshold 00B3                      __end_of_turnLeft 1C82  
                     fullSpeedBack@mL 0067                       fullSpeedBack@mR 0069  
                          __accesstop 0060               __end_of__initialization 1D1A  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1E82                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 1BC8                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002B  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 188E  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00BF  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 1ADC  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 1A0C  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 1DBA  
                  __size_of_turnRight 003E                  __end_of_initMotorPWM 1D5A  
              ScanWithRange@RFID_Read 0079                               _SendLCD 1D8A  
                             __Hparam 0000                               _SetLine 1D5A  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 1896                       __size_of___wmul 0026  
                             ___lwdiv 1B34                               ___lwmod 1B86  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1CF2                       ??_ScanWithRange 007B  
                             __ramtop 0300                             ?_turnLeft 0067  
                             __ptext0 0350                               __ptext1 1E62  
                             __ptext2 1E46                               __ptext3 1D28  
                             __ptext4 16BC                               __ptext5 1E06  
                             __ptext6 1BC8                               __ptext7 1DBA  
                             __ptext8 1ADC                               __ptext9 0B1A  
                           _T0CONbits 000FD5                               _initLCD 16BC  
                   __end_of_initTimer 1E74                               _dpowers 0301  
                             _isdigit 1E28                          LCDout@number 0027  
                       ?_VerifySignal 0024                               main@buf 0100  
                             _sprintf 10BC                        __pintcode_body 180C  
                end_of_initialization 1D1A                        ScanWithRange@i 00AA  
                      ScanWithRange@n 00A8                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 180C                    ScanIR@SensorResult 009B  
                     ??_fullSpeedBack 003A                             _RFID_Read 01F6  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                ScanWithRange@LeftFlick 00AF  
                   __end_of_turnRight 1C44                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00B8                        __end_of_LCDout 16BC  
                           _TXSTAbits 000FAC                             ScanIR@buf 0071  
                       ??_grabRightIR 0026                        __end_of_ScanIR 15F6  
                      _fullSpeedAhead 191A                        _ReceivedString 01E6  
                      __end_of___wmul 1E06                     ScanWithRange@Move 0075  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1E28  
              __size_of_delay_tenth_s 0038                   start_initialization 1CF2  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 1896  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 199A  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 1A0C  
                        _initMotorPWM 1D28                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                        _isdigit$1986 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 1C82                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0062  
                           __pintcode 0008                  __end_of_VerifySignal 1B34  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 01C9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003E                         ??_setMotorPWM 0034  
                           _initTimer 1E62                      ___lwdiv@quotient 0028  
                            ?_sprintf 0030                        ?_delay_tenth_s 0001  
                      ___wmul@product 0028                              _LATAbits 000F89  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0067  
                         turnRight@mR 0069                              i2u330_47 1CD4  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3893 0200                             main@F3895 00BF  
                           main@F3898 01E2                           _grabRightIR 199A  
               ScanWithRange@LeftFlag 00B1                  grabRightIR@IR_signal 0029  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 10BC  
                        setMotorPWM@m 0032                 ScanWithRange@MoveTime 0073  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0077  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 1C06                      ScanWithRange@buf 0080  
                 __end_of_setMotorPWM 14FC                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1C06                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 1A7E                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 1C06  
                            __ptext11 1C44                              __ptext20 1DE0  
                            __ptext12 191A                              __ptext21 1B86  
                            __ptext13 1C82                              __ptext22 1B34  
                            __ptext14 14FC                              __ptext23 199A  
                            __ptext15 1778                              __ptext32 1CBA  
                            __ptext24 1A0C                              __ptext16 13C2  
                            __ptext25 1D5A                              __ptext17 1896  
                            __ptext26 1A7E                              __ptext18 10BC  
                            __ptext27 1D8A                              __ptext19 1E28  
                            __ptext28 15F6                              __ptext29 1E74  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 1E46             ScanWithRange@SensorResult 00B4  
                      turnRight@power 006B                         __size_of_main 07CA  
                  main@DirectionFound 01CD                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 0058  
                            int$flags 003C                              main@Move 01CF  
                 _InterruptHandlerLow 0018                            _LCD_String 1A7E  
                            _turnLeft 1C44                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002A  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 13C2  
                        _VerifySignal 1ADC                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00AC                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
