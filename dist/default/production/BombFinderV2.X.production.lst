

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 18 23:48:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F4331 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	smallconst
    87  000300                     __psmallconst:
    88                           	opt stack 0
    89  000300  00                 	db	0
    90  000301                     _dpowers:
    91                           	opt stack 0
    92  000301  0001               	dw	1
    93  000303  000A               	dw	10
    94  000305  0064               	dw	100
    95  000307  03E8               	dw	1000
    96  000309  2710               	dw	10000
    97  00030B                     __end_of_dpowers:
    98                           	opt stack 0
    99  0000                     _OSCCONbits	set	4051
   100  0000                     _OSCCON	set	4051
   101  0000                     _PIE1bits	set	3997
   102  0000                     _IPR1bits	set	3999
   103  0000                     _RCONbits	set	4048
   104  0000                     _RCREG	set	4014
   105  0000                     _TXREG	set	4013
   106  0000                     _PIR1bits	set	3998
   107  0000                     _RCSTAbits	set	4011
   108  0000                     _TXSTAbits	set	4012
   109  0000                     _BAUDCONbits	set	4010
   110  0000                     _SPBRGH	set	4016
   111  0000                     _SPBRG	set	4015
   112  0000                     _TRISC	set	3988
   113  0000                     _TMR0H	set	4055
   114  0000                     _TMR0L	set	4054
   115  0000                     _INTCONbits	set	4082
   116  0000                     _T0CONbits	set	4053
   117  0000                     _TRISDbits	set	3989
   118  0000                     _TRISCbits	set	3988
   119  0000                     _LATDbits	set	3980
   120  0000                     _LATCbits	set	3979
   121  0000                     _LATEbits	set	3981
   122  0000                     _CAP2BUFL	set	3942
   123  0000                     _CAP2BUFH	set	3943
   124  0000                     _CAP1BUFL	set	3944
   125  0000                     _CAP1BUFH	set	3945
   126  0000                     _T5CON	set	4023
   127  0000                     _TRISEbits	set	3990
   128  0000                     _CAP2CON	set	3938
   129  0000                     _CAP1CON	set	3939
   130  0000                     _ANSEL0bits	set	4024
   131  0000                     _TRISAbits	set	3986
   132  0000                     _LATAbits	set	3977
   133  0000                     _LATB	set	3978
   134  0000                     _TRISBbits	set	3987
   135  0000                     _PTPERH	set	3962
   136  0000                     _PTPERL	set	3963
   137  0000                     _PWMCON1	set	3950
   138  0000                     _PWMCON0	set	3951
   139  0000                     _PTCON1	set	3966
   140  0000                     _PTCON0	set	3967
   141  0000                     _PDC1H	set	3958
   142  0000                     _PDC1L	set	3959
   143  0000                     _PDC0H	set	3960
   144  0000                     _PDC0L	set	3961
   145  00030B                     STR_6:
   146  00030B  20                 	db	32
   147  00030C  20                 	db	32
   148  00030D  20                 	db	32
   149  00030E  20                 	db	32
   150  00030F  20                 	db	32
   151  000310  20                 	db	32
   152  000311  25                 	db	37
   153  000312  30                 	db	48	;'0'
   154  000313  34                 	db	52	;'4'
   155  000314  64                 	db	100	;'d'
   156  000315  2C                 	db	44
   157  000316  20                 	db	32
   158  000317  25                 	db	37
   159  000318  30                 	db	48	;'0'
   160  000319  34                 	db	52	;'4'
   161  00031A  64                 	db	100	;'d'
   162  00031B  00                 	db	0
   163  00031C                     STR_5:
   164  00031C  20                 	db	32
   165  00031D  20                 	db	32
   166  00031E  20                 	db	32
   167  00031F  20                 	db	32
   168  000320  20                 	db	32
   169  000321  20                 	db	32
   170  000322  49                 	db	73	;'I'
   171  000323  6E                 	db	110	;'n'
   172  000324  65                 	db	101	;'e'
   173  000325  72                 	db	114	;'r'
   174  000326  74                 	db	116	;'t'
   175  000327  20                 	db	32
   176  000328  4D                 	db	77	;'M'
   177  000329  6F                 	db	111	;'o'
   178  00032A  64                 	db	100	;'d'
   179  00032B  65                 	db	101	;'e'
   180  00032C  00                 	db	0
   181  00032D                     STR_1:
   182  00032D  20                 	db	32
   183  00032E  20                 	db	32
   184  00032F  20                 	db	32
   185  000330  20                 	db	32
   186  000331  20                 	db	32
   187  000332  53                 	db	83	;'S'
   188  000333  63                 	db	99	;'c'
   189  000334  61                 	db	97	;'a'
   190  000335  6E                 	db	110	;'n'
   191  000336  49                 	db	73	;'I'
   192  000337  52                 	db	82	;'R'
   193  000338  00                 	db	0
   194  000339                     STR_8:
   195  000339  47                 	db	71	;'G'
   196  00033A  6F                 	db	111	;'o'
   197  00033B  69                 	db	105	;'i'
   198  00033C  6E                 	db	110	;'n'
   199  00033D  67                 	db	103	;'g'
   200  00033E  20                 	db	32
   201  00033F  48                 	db	72	;'H'
   202  000340  6F                 	db	111	;'o'
   203  000341  6D                 	db	109	;'m'
   204  000342  65                 	db	101	;'e'
   205  000343  00                 	db	0
   206  000344                     STR_7:
   207  000344  53                 	db	83	;'S'
   208  000345  65                 	db	101	;'e'
   209  000346  61                 	db	97	;'a'
   210  000347  72                 	db	114	;'r'
   211  000348  63                 	db	99	;'c'
   212  000349  68                 	db	104	;'h'
   213  00034A  69                 	db	105	;'i'
   214  00034B  6E                 	db	110	;'n'
   215  00034C  67                 	db	103	;'g'
   216  00034D  00                 	db	0
   217  0000                     
   218                           ; #config settings
   219  00034E  00                 	db	0	; dummy byte at the end
   220  0000                     
   221                           	psect	cinit
   222  001AA2                     __pcinit:
   223                           	opt stack 0
   224  001AA2                     start_initialization:
   225                           	opt stack 0
   226  001AA2                     __initialization:
   227                           	opt stack 0
   228                           
   229                           ; Clear objects allocated to BANK1 (21 bytes)
   230  001AA2  EE01  F0E5         	lfsr	0,__pbssBANK1
   231  001AA6  0E15               	movlw	21
   232  001AA8                     clear_0:
   233  001AA8  6AEE               	clrf	postinc0,c
   234  001AAA  06E8               	decf	wreg,f,c
   235  001AAC  E1FD               	bnz	clear_0
   236                           
   237                           ; Clear objects allocated to COMRAM (10 bytes)
   238  001AAE  EE00  F02C         	lfsr	0,__pbssCOMRAM
   239  001AB2  0E0A               	movlw	10
   240  001AB4                     clear_1:
   241  001AB4  6AEE               	clrf	postinc0,c
   242  001AB6  06E8               	decf	wreg,f,c
   243  001AB8  E1FD               	bnz	clear_1
   244  001ABA                     end_of_initialization:
   245                           	opt stack 0
   246  001ABA                     __end_of__initialization:
   247                           	opt stack 0
   248  001ABA  9036               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   249  001ABC  9236               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   250  001ABE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   251  001AC0  6EF8               	movwf	tblptru,c
   252  001AC2  0100               	movlb	0
   253  001AC4  EFA8  F001         	goto	_main	;jump to C main() function
   254                           tblptru	equ	0xFF8
   255                           postinc0	equ	0xFEE
   256                           wreg	equ	0xFE8
   257                           
   258                           	psect	bssCOMRAM
   259  00002C                     __pbssCOMRAM:
   260                           	opt stack 0
   261  00002C                     ScanWithRange@F3553:
   262                           	opt stack 0
   263  00002C                     	ds	4
   264  000030                     ScanIR@F3540:
   265                           	opt stack 0
   266  000030                     	ds	4
   267  000034                     _mode:
   268                           	opt stack 0
   269  000034                     	ds	1
   270  000035                     _i:
   271                           	opt stack 0
   272  000035                     	ds	1
   273                           tblptru	equ	0xFF8
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           
   277                           	psect	bssBANK1
   278  0001E5                     __pbssBANK1:
   279                           	opt stack 0
   280  0001E5                     main@F3557:
   281                           	opt stack 0
   282  0001E5                     	ds	4
   283  0001E9                     _ReceivedString:
   284                           	opt stack 0
   285  0001E9                     	ds	16
   286  0001F9                     _RFID_Read:
   287                           	opt stack 0
   288  0001F9                     	ds	1
   289                           tblptru	equ	0xFF8
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	cstackBANK2
   294  000200                     __pcstackBANK2:
   295                           	opt stack 0
   296  000200                     main@MoveType:
   297                           	opt stack 0
   298                           
   299                           ; 100 bytes @ 0x0
   300  000200                     	ds	100
   301                           tblptru	equ	0xFF8
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           
   305                           	psect	cstackBANK1
   306  000100                     __pcstackBANK1:
   307                           	opt stack 0
   308  000100                     main@MoveTime:
   309                           	opt stack 0
   310                           
   311                           ; 200 bytes @ 0x0
   312  000100                     	ds	200
   313  0001C8                     main@Message:
   314                           	opt stack 0
   315                           
   316                           ; 10 bytes @ 0xC8
   317  0001C8                     	ds	10
   318  0001D2                     main@Move:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0xD2
   322  0001D2                     	ds	1
   323  0001D3                     main@mL:
   324                           	opt stack 0
   325                           
   326                           ; 9 bytes @ 0xD3
   327  0001D3                     	ds	9
   328  0001DC                     main@mR:
   329                           	opt stack 0
   330                           
   331                           ; 9 bytes @ 0xDC
   332  0001DC                     	ds	9
   333                           tblptru	equ	0xFF8
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           	psect	cstackBANK0
   338  000060                     __pcstackBANK0:
   339                           	opt stack 0
   340  000060                     ??_isdigit:
   341  000060                     ??_LCDout:
   342  000060                     ??_delay_tenth_s:
   343  000060                     ?_grabRightIR:
   344                           	opt stack 0
   345  000060                     ?_grabLeftIR:
   346                           	opt stack 0
   347  000060                     ?___wmul:
   348                           	opt stack 0
   349  000060                     ?___lwdiv:
   350                           	opt stack 0
   351  000060                     enableSensor@status:
   352                           	opt stack 0
   353  000060                     VerifySignal@Signal:
   354                           	opt stack 0
   355  000060                     ___wmul@multiplier:
   356                           	opt stack 0
   357  000060                     ___lwdiv@dividend:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x0
   361  000060                     	ds	1
   362  000061                     enableSensor@sensor:
   363                           	opt stack 0
   364  000061                     delay_tenth_s@tenth_seconds:
   365                           	opt stack 0
   366  000061                     _isdigit$1693:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x1
   370  000061                     	ds	1
   371  000062                     ??_grabRightIR:
   372  000062                     ??_grabLeftIR:
   373  000062                     ??_VerifySignal:
   374  000062                     isdigit@c:
   375                           	opt stack 0
   376  000062                     delay_tenth_s@i:
   377                           	opt stack 0
   378  000062                     ___wmul@multiplicand:
   379                           	opt stack 0
   380  000062                     ___lwdiv@divisor:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x2
   384  000062                     	ds	1
   385  000063                     LCDout@number:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x3
   389  000063                     	ds	1
   390  000064                     SendLCD@type:
   391                           	opt stack 0
   392  000064                     ___lwdiv@counter:
   393                           	opt stack 0
   394  000064                     ___wmul@product:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x4
   398  000064                     	ds	1
   399  000065                     SendLCD@Byte:
   400                           	opt stack 0
   401  000065                     grabRightIR@IR_signal:
   402                           	opt stack 0
   403  000065                     grabLeftIR@IR_signal:
   404                           	opt stack 0
   405  000065                     ___lwdiv@quotient:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x5
   409  000065                     	ds	1
   410  000066                     ??_initLCD:
   411  000066                     ?___awdiv:
   412                           	opt stack 0
   413  000066                     SetLine@line:
   414                           	opt stack 0
   415  000066                     LCD_String@string:
   416                           	opt stack 0
   417  000066                     ___awdiv@dividend:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x6
   421  000066                     	ds	1
   422  000067                     ?___lwmod:
   423                           	opt stack 0
   424  000067                     grabRightIR@i:
   425                           	opt stack 0
   426  000067                     grabLeftIR@i:
   427                           	opt stack 0
   428  000067                     ___lwmod@dividend:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x7
   432  000067                     	ds	1
   433  000068                     VerifySignal@hexByte:
   434                           	opt stack 0
   435  000068                     ___awdiv@divisor:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x8
   439  000068                     	ds	1
   440  000069                     ___lwmod@divisor:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x9
   444  000069                     	ds	1
   445  00006A                     VerifySignal@checksum:
   446                           	opt stack 0
   447  00006A                     ___awdiv@counter:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0xA
   451  00006A                     	ds	1
   452  00006B                     VerifySignal@i:
   453                           	opt stack 0
   454  00006B                     ___awdiv@sign:
   455                           	opt stack 0
   456  00006B                     ___lwmod@counter:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0xB
   460  00006B                     	ds	1
   461  00006C                     ?_sprintf:
   462                           	opt stack 0
   463  00006C                     sprintf@sp:
   464                           	opt stack 0
   465  00006C                     ___awdiv@quotient:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0xC
   469  00006C                     	ds	2
   470  00006E                     setMotorPWM@m:
   471                           	opt stack 0
   472  00006E                     sprintf@f:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0xE
   476  00006E                     	ds	2
   477  000070                     ??_setMotorPWM:
   478                           
   479                           ; 1 bytes @ 0x10
   480  000070                     	ds	4
   481  000074                     ??_sprintf:
   482                           
   483                           ; 1 bytes @ 0x14
   484  000074                     	ds	1
   485  000075                     setMotorPWM@PWMduty:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x15
   489  000075                     	ds	2
   490  000077                     stop@mL:
   491                           	opt stack 0
   492  000077                     fullSpeedAhead@mL:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x17
   496  000077                     	ds	1
   497  000078                     sprintf@ap:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x18
   501  000078                     	ds	1
   502  000079                     stop@mR:
   503                           	opt stack 0
   504  000079                     fullSpeedAhead@mR:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x19
   508  000079                     	ds	1
   509  00007A                     sprintf@prec:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x1A
   513  00007A                     	ds	1
   514  00007B                     fullSpeedAhead@power:
   515                           	opt stack 0
   516  00007B                     sprintf@val:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x1B
   520  00007B                     	ds	1
   521  00007C                     
   522                           ; 1 bytes @ 0x1C
   523  00007C                     	ds	1
   524  00007D                     sprintf@flag:
   525                           	opt stack 0
   526  00007D                     turnLeft@mL:
   527                           	opt stack 0
   528  00007D                     turnRight@mL:
   529                           	opt stack 0
   530  00007D                     fullSpeedBack@mL:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x1D
   534  00007D                     	ds	1
   535  00007E                     sprintf@width:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x1E
   539  00007E                     	ds	1
   540  00007F                     turnLeft@mR:
   541                           	opt stack 0
   542  00007F                     turnRight@mR:
   543                           	opt stack 0
   544  00007F                     fullSpeedBack@mR:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x1F
   548  00007F                     	ds	1
   549  000080                     sprintf@c:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x20
   553  000080                     	ds	1
   554  000081                     turnLeft@power:
   555                           	opt stack 0
   556  000081                     turnRight@power:
   557                           	opt stack 0
   558  000081                     fullSpeedBack@power:
   559                           	opt stack 0
   560  000081                     ScanIR@mL:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x21
   564  000081                     	ds	1
   565  000082                     ScanWithRange@mL:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x22
   569  000082                     	ds	1
   570  000083                     ScanIR@mR:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x23
   574  000083                     	ds	1
   575  000084                     ScanWithRange@mR:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x24
   579  000084                     	ds	1
   580  000085                     ??_ScanIR:
   581                           
   582                           ; 1 bytes @ 0x25
   583  000085                     	ds	1
   584  000086                     ScanWithRange@loops:
   585                           	opt stack 0
   586  000086                     ScanIR@buf:
   587                           	opt stack 0
   588                           
   589                           ; 40 bytes @ 0x26
   590  000086                     	ds	2
   591  000088                     ScanWithRange@MoveTime:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x28
   595  000088                     	ds	2
   596  00008A                     ScanWithRange@Move:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x2A
   600  00008A                     	ds	2
   601  00008C                     ScanWithRange@MoveType:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x2C
   605  00008C                     	ds	2
   606  00008E                     ScanWithRange@RFID_Read:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x2E
   610  00008E                     	ds	2
   611  000090                     ??_ScanWithRange:
   612                           
   613                           ; 1 bytes @ 0x30
   614  000090                     	ds	5
   615  000095                     ScanWithRange@buf:
   616                           	opt stack 0
   617                           
   618                           ; 40 bytes @ 0x35
   619  000095                     	ds	25
   620  0000AE                     ScanIR@DirectionMoveThreshold:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x4E
   624  0000AE                     	ds	2
   625  0000B0                     ScanIR@SensorResult:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x50
   629  0000B0                     	ds	13
   630  0000BD                     ScanWithRange@n:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x5D
   634  0000BD                     	ds	2
   635  0000BF                     ScanWithRange@i:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x5F
   639  0000BF                     	ds	2
   640  0000C1                     ScanWithRange@DirectionFoundThreshold:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x61
   644  0000C1                     	ds	2
   645  0000C3                     ScanWithRange@power:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x63
   649  0000C3                     	ds	1
   650  0000C4                     ScanWithRange@LeftFlag:
   651                           	opt stack 0
   652                           
   653                           ; 2 bytes @ 0x64
   654  0000C4                     	ds	2
   655  0000C6                     ScanWithRange@TimeAboveThreshold:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x66
   659  0000C6                     	ds	1
   660  0000C7                     ScanWithRange@SensorResult:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x67
   664  0000C7                     	ds	4
   665  0000CB                     ScanWithRange@RightFlag:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x6B
   669  0000CB                     	ds	2
   670  0000CD                     ??_main:
   671                           
   672                           ; 1 bytes @ 0x6D
   673  0000CD                     	ds	2
   674  0000CF                     main@buf:
   675                           	opt stack 0
   676                           
   677                           ; 40 bytes @ 0x6F
   678  0000CF                     	ds	40
   679  0000F7                     main@ScanAngle:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x97
   683  0000F7                     	ds	1
   684  0000F8                     main@SensorResult:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0x98
   688  0000F8                     	ds	4
   689  0000FC                     main@DirectionFound:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x9C
   693  0000FC                     	ds	1
   694  0000FD                     main@i:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x9D
   698  0000FD                     	ds	1
   699                           tblptru	equ	0xFF8
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           
   703                           	psect	cstackCOMRAM
   704  000001                     __pcstackCOMRAM:
   705                           	opt stack 0
   706  000001                     ??i2_delay_tenth_s:
   707                           
   708                           ; 1 bytes @ 0x0
   709  000001                     	ds	1
   710  000002                     i2delay_tenth_s@tenth_seconds:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x1
   714  000002                     	ds	1
   715  000003                     i2delay_tenth_s@i:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x2
   719  000003                     	ds	2
   720  000005                     ??_InterruptHandlerHigh:
   721                           
   722                           ; 1 bytes @ 0x4
   723  000005                     	ds	18
   724  000017                     ??_InterruptHandlerLow:
   725                           
   726                           ; 1 bytes @ 0x16
   727  000017                     	ds	21
   728                           tblptru	equ	0xFF8
   729                           postinc0	equ	0xFEE
   730                           wreg	equ	0xFE8
   731                           
   732 ;;
   733 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   734 ;;
   735 ;; *************** function _main *****************
   736 ;; Defined at:
   737 ;;		line 51 in file "main.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  MoveTime      200    0[BANK1 ] int [100]
   742 ;;  MoveType      100    0[BANK2 ] unsigned char [100]
   743 ;;  buf            40  111[BANK0 ] unsigned char [40]
   744 ;;  Message        10  200[BANK1 ] unsigned char [10]
   745 ;;  mR              9  220[BANK1 ] struct DC_motor
   746 ;;  mL              9  211[BANK1 ] struct DC_motor
   747 ;;  SensorResult    4  152[BANK0 ] unsigned int [2]
   748 ;;  Move            1  210[BANK1 ] unsigned char 
   749 ;;  i               1  157[BANK0 ] unsigned char 
   750 ;;  DirectionFou    1  156[BANK0 ] char 
   751 ;;  ScanAngle       1  151[BANK0 ] unsigned char 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  1    wreg      void 
   754 ;; Registers used:
   755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   761 ;;      Params:         0       0       0       0
   762 ;;      Locals:         0      47     229     100
   763 ;;      Temps:          0       2       0       0
   764 ;;      Totals:         0      49     229     100
   765 ;;Total ram usage:      378 bytes
   766 ;; Hardware stack levels required when called:    8
   767 ;; This function calls:
   768 ;;		_LCD_String
   769 ;;		_ScanIR
   770 ;;		_ScanWithRange
   771 ;;		_SendLCD
   772 ;;		_SetLine
   773 ;;		_VerifySignal
   774 ;;		_delay_tenth_s
   775 ;;		_enableSensor
   776 ;;		_fullSpeedAhead
   777 ;;		_fullSpeedBack
   778 ;;		_grabLeftIR
   779 ;;		_grabRightIR
   780 ;;		_initIR
   781 ;;		_initLCD
   782 ;;		_initMotorPWM
   783 ;;		_initRFID
   784 ;;		_initTimer
   785 ;;		_sprintf
   786 ;;		_stop
   787 ;;		_turnLeft
   788 ;;		_turnRight
   789 ;; This function is called by:
   790 ;;		Startup code after reset
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text0
   795  000350                     __ptext0:
   796                           	opt stack 0
   797  000350                     _main:
   798                           	opt stack 23
   799                           
   800                           ;main.c: 54: unsigned char Message[10];
   801                           ;main.c: 55: unsigned char i=0;
   802                           
   803                           ;incstack = 0
   804  000350  0E00               	movlw	0
   805  000352  0100               	movlb	0	; () banked
   806  000354  6FFD               	movwf	main@i& (0+255),b
   807                           
   808                           ;main.c: 56: signed char DirectionFound=0;
   809  000356  0E00               	movlw	0
   810  000358  6FFC               	movwf	main@DirectionFound& (0+255),b
   811                           
   812                           ;main.c: 57: int MoveTime[100];
   813                           ;main.c: 60: char MoveType[100];
   814                           ;main.c: 63: char Move=0;
   815  00035A  0E00               	movlw	0
   816  00035C  0101               	movlb	1	; () banked
   817  00035E  6FD2               	movwf	main@Move& (0+255),b
   818                           
   819                           ; BSR set to: 1
   820                           ;main.c: 64: unsigned int SensorResult[2]={0,0};
   821  000360  C1E5  F0F8         	movff	main@F3557,main@SensorResult
   822  000364  C1E6  F0F9         	movff	main@F3557+1,main@SensorResult+1
   823  000368  C1E7  F0FA         	movff	main@F3557+2,main@SensorResult+2
   824  00036C  C1E8  F0FB         	movff	main@F3557+3,main@SensorResult+3
   825                           
   826                           ;main.c: 65: char buf[40];
   827                           ;main.c: 67: unsigned char ScanAngle=60;
   828  000370  0E3C               	movlw	60
   829  000372  0100               	movlb	0	; () banked
   830  000374  6FF7               	movwf	main@ScanAngle& (0+255),b
   831                           
   832                           ; BSR set to: 0
   833                           ;main.c: 76: INTCONbits.GIEH=1;
   834  000376  8EF2               	bsf	intcon,7,c	;volatile
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 77: INTCONbits.GIEL=1;
   838  000378  8CF2               	bsf	intcon,6,c	;volatile
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 78: INTCONbits.PEIE=1;
   842  00037A  8CF2               	bsf	intcon,6,c	;volatile
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 79: RCONbits.IPEN=1;
   846  00037C  8ED0               	bsf	4048,7,c	;volatile
   847                           
   848                           ; BSR set to: 0
   849                           ;main.c: 82: IPR1bits.RCIP=0;
   850  00037E  9A9F               	bcf	3999,5,c	;volatile
   851                           
   852                           ; BSR set to: 0
   853                           ;main.c: 83: PIE1bits.RCIE=1;
   854  000380  8A9D               	bsf	3997,5,c	;volatile
   855                           
   856                           ; BSR set to: 0
   857                           ;main.c: 86: TRISCbits.RC3=1;
   858  000382  8694               	bsf	3988,3,c	;volatile
   859                           
   860                           ; BSR set to: 0
   861                           ;main.c: 87: INTCONbits.INT0IE=1;
   862  000384  88F2               	bsf	intcon,4,c	;volatile
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 90: PIR1bits.RC1IF=0;
   866  000386  9A9E               	bcf	3998,5,c	;volatile
   867                           
   868                           ; BSR set to: 0
   869                           ;main.c: 91: INTCONbits.INT0IF=0;
   870  000388  92F2               	bcf	intcon,1,c	;volatile
   871                           
   872                           ;main.c: 94: struct DC_motor mL, mR;
   873                           ;main.c: 95: mL.power=0;
   874  00038A  0E00               	movlw	0
   875  00038C  0101               	movlb	1	; () banked
   876  00038E  6FD3               	movwf	main@mL& (0+255),b
   877                           
   878                           ;main.c: 96: mL.direction=1;
   879  000390  0E01               	movlw	1
   880  000392  6FD4               	movwf	(main@mL+1)& (0+255),b
   881                           
   882                           ; BSR set to: 1
   883                           ;main.c: 97: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   884  000394  0E79               	movlw	121
   885  000396  6FD5               	movwf	(main@mL+2)& (0+255),b
   886  000398  0E0F               	movlw	15
   887  00039A  6FD6               	movwf	(main@mL+3)& (0+255),b
   888                           
   889                           ; BSR set to: 1
   890                           ;main.c: 98: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   891  00039C  0E78               	movlw	120
   892  00039E  6FD7               	movwf	(main@mL+4)& (0+255),b
   893  0003A0  0E0F               	movlw	15
   894  0003A2  6FD8               	movwf	(main@mL+5)& (0+255),b
   895                           
   896                           ;main.c: 99: mL.dir_pin=0;
   897  0003A4  0E00               	movlw	0
   898  0003A6  6FD9               	movwf	(main@mL+6)& (0+255),b
   899                           
   900                           ;main.c: 100: mL.PWMperiod=199;
   901  0003A8  0E00               	movlw	0
   902  0003AA  6FDB               	movwf	(main@mL+8)& (0+255),b
   903  0003AC  0EC7               	movlw	199
   904  0003AE  6FDA               	movwf	(main@mL+7)& (0+255),b
   905                           
   906                           ;main.c: 102: mR.power=0;
   907  0003B0  0E00               	movlw	0
   908  0003B2  6FDC               	movwf	main@mR& (0+255),b
   909                           
   910                           ;main.c: 103: mR.direction=1;
   911  0003B4  0E01               	movlw	1
   912  0003B6  6FDD               	movwf	(main@mR+1)& (0+255),b
   913                           
   914                           ; BSR set to: 1
   915                           ;main.c: 104: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   916  0003B8  0E77               	movlw	119
   917  0003BA  6FDE               	movwf	(main@mR+2)& (0+255),b
   918  0003BC  0E0F               	movlw	15
   919  0003BE  6FDF               	movwf	(main@mR+3)& (0+255),b
   920                           
   921                           ; BSR set to: 1
   922                           ;main.c: 105: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   923  0003C0  0E76               	movlw	118
   924  0003C2  6FE0               	movwf	(main@mR+4)& (0+255),b
   925  0003C4  0E0F               	movlw	15
   926  0003C6  6FE1               	movwf	(main@mR+5)& (0+255),b
   927                           
   928                           ;main.c: 106: mR.dir_pin=2;
   929  0003C8  0E02               	movlw	2
   930  0003CA  6FE2               	movwf	(main@mR+6)& (0+255),b
   931                           
   932                           ;main.c: 107: mR.PWMperiod=199;
   933  0003CC  0E00               	movlw	0
   934  0003CE  6FE4               	movwf	(main@mR+8)& (0+255),b
   935  0003D0  0EC7               	movlw	199
   936  0003D2  6FE3               	movwf	(main@mR+7)& (0+255),b
   937                           
   938                           ;main.c: 109: OSCCON = 0x72;
   939  0003D4  0E72               	movlw	114
   940  0003D6  6ED3               	movwf	4051,c	;volatile
   941  0003D8                     
   942                           ; BSR set to: 1
   943  0003D8  B4D3               	btfsc	4051,2,c	;volatile
   944  0003DA  D271               	goto	l3758
   945  0003DC  D7FD               	goto	l391
   946  0003DE                     
   947                           ;main.c: 122: stop(&mL, &mR);
   948  0003DE  0ED3               	movlw	low main@mL
   949  0003E0  0100               	movlb	0	; () banked
   950  0003E2  6F77               	movwf	stop@mL& (0+255),b
   951  0003E4  0E01               	movlw	high main@mL
   952  0003E6  6F78               	movwf	(stop@mL+1)& (0+255),b
   953  0003E8  0EDC               	movlw	low main@mR
   954  0003EA  6F79               	movwf	stop@mR& (0+255),b
   955  0003EC  0E01               	movlw	high main@mR
   956  0003EE  6F7A               	movwf	(stop@mR+1)& (0+255),b
   957  0003F0  EC7F  F00A         	call	_stop	;wreg free
   958                           
   959                           ;main.c: 123: RFID_Read=0;
   960  0003F4  0E00               	movlw	0
   961  0003F6  0101               	movlb	1	; () banked
   962  0003F8  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
   963                           
   964                           ; BSR set to: 1
   965                           ;main.c: 126: SensorResult[0]=grabLeftIR();
   966  0003FA  EC86  F00B         	call	_grabLeftIR	;wreg free
   967  0003FE  C060  F0F8         	movff	?_grabLeftIR,main@SensorResult
   968  000402  C061  F0F9         	movff	?_grabLeftIR+1,main@SensorResult+1
   969                           
   970                           ;main.c: 127: SensorResult[1]=grabRightIR();
   971  000406  EC49  F00B         	call	_grabRightIR	;wreg free
   972  00040A  C060  F0FA         	movff	?_grabRightIR,main@SensorResult+2
   973  00040E  C061  F0FB         	movff	?_grabRightIR+1,main@SensorResult+3
   974                           
   975                           ;main.c: 131: CAP1BUFH=0;
   976  000412  0E00               	movlw	0
   977  000414  6E69               	movwf	3945,c	;volatile
   978                           
   979                           ;main.c: 132: CAP1BUFL=0;
   980  000416  0E00               	movlw	0
   981  000418  6E68               	movwf	3944,c	;volatile
   982                           
   983                           ;main.c: 133: CAP2BUFH=0;
   984  00041A  0E00               	movlw	0
   985  00041C  6E67               	movwf	3943,c	;volatile
   986                           
   987                           ;main.c: 134: CAP2BUFL=0;
   988  00041E  0E00               	movlw	0
   989  000420  6E66               	movwf	3942,c	;volatile
   990                           
   991                           ;main.c: 137: SendLCD(0b00000001,0);
   992  000422  0E00               	movlw	0
   993  000424  0100               	movlb	0	; () banked
   994  000426  6F64               	movwf	SendLCD@type& (0+255),b
   995  000428  0E01               	movlw	1
   996  00042A  ECBB  F00C         	call	_SendLCD
   997                           
   998                           ;main.c: 138: _delay((unsigned long)((50)*(8000000/4000000.0)));
   999  00042E  0E21               	movlw	33
  1000  000430                     u3207:
  1001  000430  2EE8               	decfsz	wreg,f,c
  1002  000432  D7FE               	bra	u3207
  1003  000434  F000               	nop	
  1004                           
  1005                           ;main.c: 139: SendLCD(0b00000010,0);
  1006  000436  0E00               	movlw	0
  1007  000438  0100               	movlb	0	; () banked
  1008  00043A  6F64               	movwf	SendLCD@type& (0+255),b
  1009  00043C  0E02               	movlw	2
  1010  00043E  ECBB  F00C         	call	_SendLCD
  1011                           
  1012                           ;main.c: 140: _delay((unsigned long)((2)*(8000000/4000.0)));
  1013  000442  0E06               	movlw	6
  1014  000444  0100               	movlb	0	; () banked
  1015  000446  6FCD               	movwf	??_main& (0+255),b
  1016  000448  0E30               	movlw	48
  1017  00044A                     u3217:
  1018  00044A  2EE8               	decfsz	wreg,f,c
  1019  00044C  D7FE               	bra	u3217
  1020  00044E  2FCD               	decfsz	??_main& (0+255),f,b
  1021  000450  D7FC               	bra	u3217
  1022  000452  F000               	nop	
  1023                           
  1024                           ;main.c: 141: SetLine(1);
  1025  000454  0E01               	movlw	1
  1026  000456  ECF3  F00C         	call	_SetLine
  1027                           
  1028                           ;main.c: 142: LCD_String("      Inert Mode");
  1029  00045A  0E1C               	movlw	low STR_5
  1030  00045C  0100               	movlb	0	; () banked
  1031  00045E  6F66               	movwf	LCD_String@string& (0+255),b
  1032  000460  0E03               	movlw	high STR_5
  1033  000462  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1034  000464  ECC3  F00B         	call	_LCD_String	;wreg free
  1035                           
  1036                           ;main.c: 143: SetLine(2);
  1037  000468  0E02               	movlw	2
  1038  00046A  ECF3  F00C         	call	_SetLine
  1039                           
  1040                           ;main.c: 144: if (RFID_Read) {
  1041  00046E  0101               	movlb	1	; () banked
  1042  000470  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1043  000472  B4D8               	btfsc	status,2,c
  1044  000474  D008               	goto	l396
  1045                           
  1046                           ; BSR set to: 1
  1047                           ;main.c: 145: LCD_String(Message);
  1048  000476  0EC8               	movlw	low main@Message
  1049  000478  0100               	movlb	0	; () banked
  1050  00047A  6F66               	movwf	LCD_String@string& (0+255),b
  1051  00047C  0E01               	movlw	high main@Message
  1052  00047E  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1053  000480  ECC3  F00B         	call	_LCD_String	;wreg free
  1054                           
  1055                           ;main.c: 146: } else {
  1056  000484  D21C               	goto	l3758
  1057  000486                     l396:
  1058                           
  1059                           ;main.c: 147: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1060  000486  0ECF               	movlw	low main@buf
  1061  000488  0100               	movlb	0	; () banked
  1062  00048A  6F6C               	movwf	sprintf@sp& (0+255),b
  1063  00048C  0E00               	movlw	high main@buf
  1064  00048E  6F6D               	movwf	(sprintf@sp+1)& (0+255),b
  1065  000490  0E0B               	movlw	low STR_6
  1066  000492  6F6E               	movwf	sprintf@f& (0+255),b
  1067  000494  0E03               	movlw	high STR_6
  1068  000496  6F6F               	movwf	(sprintf@f+1)& (0+255),b
  1069  000498  C0F8  F070         	movff	main@SensorResult,?_sprintf+4
  1070  00049C  C0F9  F071         	movff	main@SensorResult+1,?_sprintf+5
  1071  0004A0  C0FA  F072         	movff	main@SensorResult+2,?_sprintf+6
  1072  0004A4  C0FB  F073         	movff	main@SensorResult+3,?_sprintf+7
  1073  0004A8  EC70  F006         	call	_sprintf	;wreg free
  1074                           
  1075                           ;main.c: 148: LCD_String(buf);
  1076  0004AC  0ECF               	movlw	low main@buf
  1077  0004AE  0100               	movlb	0	; () banked
  1078  0004B0  6F66               	movwf	LCD_String@string& (0+255),b
  1079  0004B2  0E00               	movlw	high main@buf
  1080  0004B4  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1081  0004B6  ECC3  F00B         	call	_LCD_String	;wreg free
  1082                           
  1083                           ;main.c: 149: }
  1084                           ;main.c: 152: break;
  1085  0004BA  D201               	goto	l3758
  1086  0004BC                     
  1087                           ;main.c: 157: initMotorPWM();
  1088  0004BC  EC0E  F00D         	call	_initMotorPWM	;wreg free
  1089                           
  1090                           ;main.c: 158: initTimer();
  1091  0004C0  EC94  F00D         	call	_initTimer	;wreg free
  1092                           
  1093                           ;main.c: 159: initRFID();
  1094  0004C4  EC86  F00D         	call	_initRFID	;wreg free
  1095                           
  1096                           ;main.c: 160: initLCD();
  1097  0004C8  EC5A  F009         	call	_initLCD	;wreg free
  1098                           
  1099                           ;main.c: 161: initIR();
  1100  0004CC  EC64  F00D         	call	_initIR	;wreg free
  1101                           
  1102                           ;main.c: 163: enableSensor(0, 1);
  1103  0004D0  0E01               	movlw	1
  1104  0004D2  0100               	movlb	0	; () banked
  1105  0004D4  6F60               	movwf	enableSensor@status& (0+255),b
  1106  0004D6  0E00               	movlw	0
  1107  0004D8  EC27  F00D         	call	_enableSensor
  1108                           
  1109                           ;main.c: 164: enableSensor(1, 1);
  1110  0004DC  0E01               	movlw	1
  1111  0004DE  0100               	movlb	0	; () banked
  1112  0004E0  6F60               	movwf	enableSensor@status& (0+255),b
  1113  0004E2  0E01               	movlw	1
  1114  0004E4  EC27  F00D         	call	_enableSensor
  1115                           
  1116                           ;main.c: 167: fullSpeedAhead(&mL, &mR, 100);
  1117  0004E8  0ED3               	movlw	low main@mL
  1118  0004EA  0100               	movlb	0	; () banked
  1119  0004EC  6F77               	movwf	fullSpeedAhead@mL& (0+255),b
  1120  0004EE  0E01               	movlw	high main@mL
  1121  0004F0  6F78               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1122  0004F2  0EDC               	movlw	low main@mR
  1123  0004F4  6F79               	movwf	fullSpeedAhead@mR& (0+255),b
  1124  0004F6  0E01               	movlw	high main@mR
  1125  0004F8  6F7A               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1126  0004FA  0E64               	movlw	100
  1127  0004FC  6F7B               	movwf	fullSpeedAhead@power& (0+255),b
  1128  0004FE  EC0B  F00B         	call	_fullSpeedAhead	;wreg free
  1129                           
  1130                           ;main.c: 168: delay_tenth_s(1);
  1131  000502  0E01               	movlw	1
  1132  000504  EC40  F00C         	call	_delay_tenth_s
  1133  000508  D1D9               	goto	l420
  1134  00050A                     
  1135                           ;main.c: 180: SetLine(1);
  1136  00050A  0E01               	movlw	1
  1137  00050C  ECF3  F00C         	call	_SetLine
  1138                           
  1139                           ;main.c: 181: LCD_String("Searching");
  1140  000510  0E44               	movlw	low STR_7
  1141  000512  0100               	movlb	0	; () banked
  1142  000514  6F66               	movwf	LCD_String@string& (0+255),b
  1143  000516  0E03               	movlw	high STR_7
  1144  000518  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1145  00051A  ECC3  F00B         	call	_LCD_String	;wreg free
  1146                           
  1147                           ;main.c: 183: if (DirectionFound==-1) {
  1148  00051E  0100               	movlb	0	; () banked
  1149  000520  29FC               	incf	main@DirectionFound& (0+255),w,b
  1150  000522  A4D8               	btfss	status,2,c
  1151  000524  D035               	goto	l401
  1152                           
  1153                           ; BSR set to: 0
  1154                           ;main.c: 188: Move++;
  1155  000526  0101               	movlb	1	; () banked
  1156  000528  2BD2               	incf	main@Move& (0+255),f,b
  1157                           
  1158                           ; BSR set to: 1
  1159                           ;main.c: 189: MoveType[Move]=0;
  1160  00052A  51D2               	movf	main@Move& (0+255),w,b
  1161  00052C  0D01               	mullw	1
  1162  00052E  0E00               	movlw	low main@MoveType
  1163  000530  24F3               	addwf	prodl,w,c
  1164  000532  6ED9               	movwf	fsr2l,c
  1165  000534  0E02               	movlw	high main@MoveType
  1166  000536  20F4               	addwfc	prodh,w,c
  1167  000538  6EDA               	movwf	fsr2h,c
  1168  00053A  0E00               	movlw	0
  1169  00053C  6EDF               	movwf	indf2,c
  1170                           
  1171                           ; BSR set to: 1
  1172                           ;main.c: 190: MoveTime[Move]=6;
  1173  00053E  51D2               	movf	main@Move& (0+255),w,b
  1174  000540  0D02               	mullw	2
  1175  000542  0E00               	movlw	low main@MoveTime
  1176  000544  24F3               	addwf	prodl,w,c
  1177  000546  6ED9               	movwf	fsr2l,c
  1178  000548  0E01               	movlw	high main@MoveTime
  1179  00054A  20F4               	addwfc	prodh,w,c
  1180  00054C  6EDA               	movwf	fsr2h,c
  1181  00054E  0E06               	movlw	6
  1182  000550  6EDE               	movwf	postinc2,c
  1183  000552  0E00               	movlw	0
  1184  000554  6EDD               	movwf	postdec2,c
  1185                           
  1186                           ; BSR set to: 1
  1187                           ;main.c: 191: fullSpeedAhead(&mL, &mR, 100);
  1188  000556  0ED3               	movlw	low main@mL
  1189  000558  0100               	movlb	0	; () banked
  1190  00055A  6F77               	movwf	fullSpeedAhead@mL& (0+255),b
  1191  00055C  0E01               	movlw	high main@mL
  1192  00055E  6F78               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1193  000560  0EDC               	movlw	low main@mR
  1194  000562  6F79               	movwf	fullSpeedAhead@mR& (0+255),b
  1195  000564  0E01               	movlw	high main@mR
  1196  000566  6F7A               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1197  000568  0E64               	movlw	100
  1198  00056A  6F7B               	movwf	fullSpeedAhead@power& (0+255),b
  1199  00056C  EC0B  F00B         	call	_fullSpeedAhead	;wreg free
  1200                           
  1201                           ;main.c: 192: delay_tenth_s(6);
  1202  000570  0E06               	movlw	6
  1203  000572  EC40  F00C         	call	_delay_tenth_s
  1204                           
  1205                           ;main.c: 193: stop(&mL,&mR);
  1206  000576  0ED3               	movlw	low main@mL
  1207  000578  0100               	movlb	0	; () banked
  1208  00057A  6F77               	movwf	stop@mL& (0+255),b
  1209  00057C  0E01               	movlw	high main@mL
  1210  00057E  6F78               	movwf	(stop@mL+1)& (0+255),b
  1211  000580  0EDC               	movlw	low main@mR
  1212  000582  6F79               	movwf	stop@mR& (0+255),b
  1213  000584  0E01               	movlw	high main@mR
  1214  000586  6F7A               	movwf	(stop@mR+1)& (0+255),b
  1215  000588  EC7F  F00A         	call	_stop	;wreg free
  1216                           
  1217                           ;main.c: 194: DirectionFound=0;
  1218  00058C  0E00               	movlw	0
  1219  00058E  D031               	goto	L1
  1220  000590                     l401:
  1221                           
  1222                           ; BSR set to: 0
  1223                           
  1224                           ; BSR set to: 0
  1225  000590  51FC               	movf	main@DirectionFound& (0+255),w,b
  1226  000592  A4D8               	btfss	status,2,c
  1227  000594  D020               	goto	l403
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 197: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1231                           ;main.c: 198: &MoveTime, &Move, &MoveType, &RFID_Read);
  1232  000596  0ED3               	movlw	low main@mL
  1233  000598  6F82               	movwf	ScanWithRange@mL& (0+255),b
  1234  00059A  0E01               	movlw	high main@mL
  1235  00059C  6F83               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1236  00059E  0EDC               	movlw	low main@mR
  1237  0005A0  6F84               	movwf	ScanWithRange@mR& (0+255),b
  1238  0005A2  0E01               	movlw	high main@mR
  1239  0005A4  6F85               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1240  0005A6  C0F7  F086         	movff	main@ScanAngle,ScanWithRange@loops
  1241  0005AA  6B87               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1242  0005AC  0E00               	movlw	low main@MoveTime
  1243  0005AE  6F88               	movwf	ScanWithRange@MoveTime& (0+255),b
  1244  0005B0  0E01               	movlw	high main@MoveTime
  1245  0005B2  6F89               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1246  0005B4  0ED2               	movlw	low main@Move
  1247  0005B6  6F8A               	movwf	ScanWithRange@Move& (0+255),b
  1248  0005B8  0E01               	movlw	high main@Move
  1249  0005BA  6F8B               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1250  0005BC  0E00               	movlw	low main@MoveType
  1251  0005BE  6F8C               	movwf	ScanWithRange@MoveType& (0+255),b
  1252  0005C0  0E02               	movlw	high main@MoveType
  1253  0005C2  6F8D               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1254  0005C4  0EF9               	movlw	low _RFID_Read
  1255  0005C6  6F8E               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1256  0005C8  0E01               	movlw	high _RFID_Read
  1257  0005CA  6F8F               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1258  0005CC  EC70  F004         	call	_ScanWithRange	;wreg free
  1259  0005D0  0100               	movlb	0	; () banked
  1260  0005D2  6FFC               	movwf	main@DirectionFound& (0+255),b
  1261  0005D4  D017               	goto	l3680
  1262  0005D6                     l403:
  1263                           
  1264                           ; BSR set to: 1
  1265  0005D6  0100               	movlb	0	; () banked
  1266  0005D8  05FC               	decf	main@DirectionFound& (0+255),w,b
  1267  0005DA  A4D8               	btfss	status,2,c
  1268  0005DC  D00D               	goto	l405
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;main.c: 202: DirectionFound=ScanIR(&mL, &mR);
  1272  0005DE  0ED3               	movlw	low main@mL
  1273  0005E0  6F81               	movwf	ScanIR@mL& (0+255),b
  1274  0005E2  0E01               	movlw	high main@mL
  1275  0005E4  6F82               	movwf	(ScanIR@mL+1)& (0+255),b
  1276  0005E6  0EDC               	movlw	low main@mR
  1277  0005E8  6F83               	movwf	ScanIR@mR& (0+255),b
  1278  0005EA  0E01               	movlw	high main@mR
  1279  0005EC  6F84               	movwf	(ScanIR@mR+1)& (0+255),b
  1280  0005EE  ECDE  F008         	call	_ScanIR	;wreg free
  1281  0005F2                     L1:
  1282  0005F2  0100               	movlb	0	; () banked
  1283  0005F4  6FFC               	movwf	main@DirectionFound& (0+255),b
  1284                           
  1285                           ;main.c: 203: } else if (DirectionFound==2) {
  1286  0005F6  D163               	goto	l3758
  1287  0005F8                     l405:
  1288                           
  1289                           ; BSR set to: 0
  1290                           
  1291                           ; BSR set to: 0
  1292  0005F8  0E02               	movlw	2
  1293  0005FA  19FC               	xorwf	main@DirectionFound& (0+255),w,b
  1294  0005FC  A4D8               	btfss	status,2,c
  1295  0005FE  D15F               	goto	l3758
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;main.c: 205: mode=2;
  1299  000600  0E02               	movlw	2
  1300  000602  6E34               	movwf	_mode,c	;volatile
  1301  000604                     l3680:
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;main.c: 206: MoveType[Move]=1;
  1305  000604  0101               	movlb	1	; () banked
  1306  000606  51D2               	movf	main@Move& (0+255),w,b
  1307  000608  0D01               	mullw	1
  1308  00060A  0E00               	movlw	low main@MoveType
  1309  00060C  24F3               	addwf	prodl,w,c
  1310  00060E  6ED9               	movwf	fsr2l,c
  1311  000610  0E02               	movlw	high main@MoveType
  1312  000612  20F4               	addwfc	prodh,w,c
  1313  000614  6EDA               	movwf	fsr2h,c
  1314  000616  0E01               	movlw	1
  1315  000618  6EDF               	movwf	indf2,c
  1316                           
  1317                           ; BSR set to: 1
  1318                           ;main.c: 207: }
  1319                           ;main.c: 209: break;
  1320                           
  1321                           ; BSR set to: 1
  1322                           
  1323                           ; BSR set to: 1
  1324                           
  1325                           ; BSR set to: 1
  1326  00061A  D151               	goto	l3758
  1327  00061C                     
  1328                           ;main.c: 216: if (RFID_Read) {
  1329                           
  1330                           ; BSR set to: 1
  1331  00061C  0101               	movlb	1	; () banked
  1332  00061E  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1333  000620  B4D8               	btfsc	status,2,c
  1334  000622  D088               	goto	l409
  1335                           
  1336                           ; BSR set to: 1
  1337                           ;main.c: 217: stop(&mL, &mR);
  1338  000624  0ED3               	movlw	low main@mL
  1339  000626  0100               	movlb	0	; () banked
  1340  000628  6F77               	movwf	stop@mL& (0+255),b
  1341  00062A  0E01               	movlw	high main@mL
  1342  00062C  6F78               	movwf	(stop@mL+1)& (0+255),b
  1343  00062E  0EDC               	movlw	low main@mR
  1344  000630  6F79               	movwf	stop@mR& (0+255),b
  1345  000632  0E01               	movlw	high main@mR
  1346  000634  6F7A               	movwf	(stop@mR+1)& (0+255),b
  1347  000636  EC7F  F00A         	call	_stop	;wreg free
  1348                           
  1349                           ;main.c: 218: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1350  00063A  0E03               	movlw	3
  1351  00063C  0101               	movlb	1	; () banked
  1352  00063E  19F8               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1353  000640  A4D8               	btfss	status,2,c
  1354  000642  D002               	goto	u3090
  1355  000644  0E01               	movlw	1
  1356  000646  D001               	goto	u3092
  1357  000648                     u3090:
  1358  000648  0E00               	movlw	0
  1359  00064A                     u3092:
  1360  00064A  0100               	movlb	0	; () banked
  1361  00064C  6FCD               	movwf	??_main& (0+255),b
  1362  00064E  0E02               	movlw	2
  1363  000650  0101               	movlb	1	; () banked
  1364  000652  19E9               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1365  000654  A4D8               	btfss	status,2,c
  1366  000656  D002               	goto	u3100
  1367  000658  0E01               	movlw	1
  1368  00065A  D001               	goto	u3102
  1369  00065C                     u3100:
  1370  00065C  0E00               	movlw	0
  1371  00065E                     u3102:
  1372  00065E  0100               	movlb	0	; () banked
  1373  000660  15CD               	andwf	??_main& (0+255),w,b
  1374  000662  A0E8               	btfss	wreg,0,c
  1375  000664  D12C               	goto	l3758
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 219: if (VerifySignal(ReceivedString)){
  1379  000666  0EE9               	movlw	low _ReceivedString
  1380  000668  6F60               	movwf	VerifySignal@Signal& (0+255),b
  1381  00066A  0E01               	movlw	high _ReceivedString
  1382  00066C  6F61               	movwf	(VerifySignal@Signal+1)& (0+255),b
  1383  00066E  EC60  F008         	call	_VerifySignal	;wreg free
  1384  000672  0900               	iorlw	0
  1385  000674  B4D8               	btfsc	status,2,c
  1386  000676  D035               	goto	l411
  1387                           
  1388                           ;main.c: 221: for (i=0; i<10; i++){
  1389  000678  0E00               	movlw	0
  1390  00067A  0100               	movlb	0	; () banked
  1391  00067C  6FFD               	movwf	main@i& (0+255),b
  1392  00067E                     l3692:
  1393                           
  1394                           ; BSR set to: 0
  1395  00067E  0E09               	movlw	9
  1396  000680  65FD               	cpfsgt	main@i& (0+255),b
  1397  000682  D001               	goto	l412
  1398  000684  D019               	goto	u3140
  1399  000686                     l412:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 222: Message[i] = ReceivedString[i+1];
  1403                           
  1404                           ; BSR set to: 0
  1405  000686  51FD               	movf	main@i& (0+255),w,b
  1406  000688  6FCD               	movwf	??_main& (0+255),b
  1407  00068A  6BCE               	clrf	(??_main+1)& (0+255),b
  1408  00068C  0E01               	movlw	1
  1409  00068E  27CD               	addwf	??_main& (0+255),f,b
  1410  000690  0E00               	movlw	0
  1411  000692  23CE               	addwfc	(??_main+1)& (0+255),f,b
  1412  000694  0EE9               	movlw	low _ReceivedString
  1413  000696  25CD               	addwf	??_main& (0+255),w,b
  1414  000698  6ED9               	movwf	fsr2l,c
  1415  00069A  0E01               	movlw	high _ReceivedString
  1416  00069C  21CE               	addwfc	(??_main+1)& (0+255),w,b
  1417  00069E  6EDA               	movwf	fsr2h,c
  1418  0006A0  51FD               	movf	main@i& (0+255),w,b
  1419  0006A2  0D01               	mullw	1
  1420  0006A4  0EC8               	movlw	low main@Message
  1421  0006A6  24F3               	addwf	prodl,w,c
  1422  0006A8  6EE1               	movwf	fsr1l,c
  1423  0006AA  0E01               	movlw	high main@Message
  1424  0006AC  20F4               	addwfc	prodh,w,c
  1425  0006AE  6EE2               	movwf	fsr1h,c
  1426  0006B0  CFDF FFE7          	movff	indf2,indf1
  1427                           
  1428                           ; BSR set to: 0
  1429  0006B4  2BFD               	incf	main@i& (0+255),f,b
  1430  0006B6  D7E3               	goto	l3692
  1431  0006B8                     u3140:
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;main.c: 223: }
  1435                           ;main.c: 226: for (i=0; i<16; i++) {
  1436                           
  1437                           ; BSR set to: 0
  1438  0006B8  0E00               	movlw	0
  1439  0006BA  6FFD               	movwf	main@i& (0+255),b
  1440  0006BC                     l3704:
  1441                           
  1442                           ; BSR set to: 0
  1443  0006BC  0E0F               	movlw	15
  1444  0006BE  65FD               	cpfsgt	main@i& (0+255),b
  1445  0006C0  D001               	goto	l414
  1446  0006C2  D00C               	goto	u3160
  1447  0006C4                     l414:
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 227: ReceivedString[i]=0;
  1451                           
  1452                           ; BSR set to: 0
  1453  0006C4  51FD               	movf	main@i& (0+255),w,b
  1454  0006C6  0D01               	mullw	1
  1455  0006C8  0EE9               	movlw	low _ReceivedString
  1456  0006CA  24F3               	addwf	prodl,w,c
  1457  0006CC  6ED9               	movwf	fsr2l,c
  1458  0006CE  0E01               	movlw	high _ReceivedString
  1459  0006D0  20F4               	addwfc	prodh,w,c
  1460  0006D2  6EDA               	movwf	fsr2h,c
  1461  0006D4  0E00               	movlw	0
  1462  0006D6  6EDF               	movwf	indf2,c
  1463                           
  1464                           ; BSR set to: 0
  1465  0006D8  2BFD               	incf	main@i& (0+255),f,b
  1466  0006DA  D7F0               	goto	l3704
  1467  0006DC                     u3160:
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;main.c: 228: }
  1471                           ;main.c: 229: mode=3;
  1472                           
  1473                           ; BSR set to: 0
  1474  0006DC  0E03               	movlw	3
  1475  0006DE  6E34               	movwf	_mode,c	;volatile
  1476                           
  1477                           ;main.c: 231: } else {
  1478  0006E0  D0EE               	goto	l3758
  1479  0006E2                     l411:
  1480                           
  1481                           ;main.c: 232: fullSpeedBack(&mL,&mR, 100);
  1482                           
  1483                           ; BSR set to: 0
  1484  0006E2  0ED3               	movlw	low main@mL
  1485  0006E4  0100               	movlb	0	; () banked
  1486  0006E6  6F7D               	movwf	fullSpeedBack@mL& (0+255),b
  1487  0006E8  0E01               	movlw	high main@mL
  1488  0006EA  6F7E               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1489  0006EC  0EDC               	movlw	low main@mR
  1490  0006EE  6F7F               	movwf	fullSpeedBack@mR& (0+255),b
  1491  0006F0  0E01               	movlw	high main@mR
  1492  0006F2  6F80               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1493  0006F4  0E64               	movlw	100
  1494  0006F6  6F81               	movwf	fullSpeedBack@power& (0+255),b
  1495  0006F8  EC61  F00C         	call	_fullSpeedBack	;wreg free
  1496                           
  1497                           ;main.c: 233: delay_tenth_s(5);
  1498  0006FC  0E05               	movlw	5
  1499  0006FE  EC40  F00C         	call	_delay_tenth_s
  1500                           
  1501                           ;main.c: 234: stop(&mL,&mR);
  1502  000702  0ED3               	movlw	low main@mL
  1503  000704  0100               	movlb	0	; () banked
  1504  000706  6F77               	movwf	stop@mL& (0+255),b
  1505  000708  0E01               	movlw	high main@mL
  1506  00070A  6F78               	movwf	(stop@mL+1)& (0+255),b
  1507  00070C  0EDC               	movlw	low main@mR
  1508  00070E  6F79               	movwf	stop@mR& (0+255),b
  1509  000710  0E01               	movlw	high main@mR
  1510  000712  6F7A               	movwf	(stop@mR+1)& (0+255),b
  1511  000714  EC7F  F00A         	call	_stop	;wreg free
  1512                           
  1513                           ;main.c: 235: fullSpeedAhead(&mL,&mR, 100);
  1514  000718  0ED3               	movlw	low main@mL
  1515  00071A  0100               	movlb	0	; () banked
  1516  00071C  6F77               	movwf	fullSpeedAhead@mL& (0+255),b
  1517  00071E  0E01               	movlw	high main@mL
  1518  000720  6F78               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1519  000722  0EDC               	movlw	low main@mR
  1520  000724  6F79               	movwf	fullSpeedAhead@mR& (0+255),b
  1521  000726  0E01               	movlw	high main@mR
  1522  000728  6F7A               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1523  00072A  0E64               	movlw	100
  1524  00072C  6F7B               	movwf	fullSpeedAhead@power& (0+255),b
  1525  00072E  EC0B  F00B         	call	_fullSpeedAhead	;wreg free
  1526                           
  1527                           ;main.c: 236: }
  1528                           ;main.c: 237: }
  1529                           ;main.c: 238: } else {
  1530  000732  D0C5               	goto	l3758
  1531  000734                     l409:
  1532                           
  1533                           ;main.c: 239: DirectionFound=1;
  1534  000734  0E01               	movlw	1
  1535  000736  0100               	movlb	0	; () banked
  1536  000738  6FFC               	movwf	main@DirectionFound& (0+255),b
  1537                           
  1538                           ;main.c: 240: mode=1;
  1539  00073A  0E01               	movlw	1
  1540  00073C  6E34               	movwf	_mode,c	;volatile
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;main.c: 242: fullSpeedAhead(&mL,&mR, 100);
  1544  00073E  0ED3               	movlw	low main@mL
  1545  000740  6F77               	movwf	fullSpeedAhead@mL& (0+255),b
  1546  000742  0E01               	movlw	high main@mL
  1547  000744  6F78               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1548  000746  0EDC               	movlw	low main@mR
  1549  000748  6F79               	movwf	fullSpeedAhead@mR& (0+255),b
  1550  00074A  0E01               	movlw	high main@mR
  1551  00074C  6F7A               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1552  00074E  0E64               	movlw	100
  1553  000750  6F7B               	movwf	fullSpeedAhead@power& (0+255),b
  1554  000752  EC0B  F00B         	call	_fullSpeedAhead	;wreg free
  1555                           
  1556                           ;main.c: 243: delay_tenth_s(5);
  1557  000756  0E05               	movlw	5
  1558  000758  EC40  F00C         	call	_delay_tenth_s
  1559                           
  1560                           ;main.c: 244: MoveType[Move] = 0;
  1561  00075C  0101               	movlb	1	; () banked
  1562  00075E  51D2               	movf	main@Move& (0+255),w,b
  1563  000760  0D01               	mullw	1
  1564  000762  0E00               	movlw	low main@MoveType
  1565  000764  24F3               	addwf	prodl,w,c
  1566  000766  6ED9               	movwf	fsr2l,c
  1567  000768  0E02               	movlw	high main@MoveType
  1568  00076A  20F4               	addwfc	prodh,w,c
  1569  00076C  6EDA               	movwf	fsr2h,c
  1570  00076E  0E00               	movlw	0
  1571  000770  6EDF               	movwf	indf2,c
  1572                           
  1573                           ; BSR set to: 1
  1574                           ;main.c: 245: MoveTime[Move] = 5;
  1575  000772  51D2               	movf	main@Move& (0+255),w,b
  1576  000774  0D02               	mullw	2
  1577  000776  0E00               	movlw	low main@MoveTime
  1578  000778  24F3               	addwf	prodl,w,c
  1579  00077A  6ED9               	movwf	fsr2l,c
  1580  00077C  0E01               	movlw	high main@MoveTime
  1581  00077E  20F4               	addwfc	prodh,w,c
  1582  000780  6EDA               	movwf	fsr2h,c
  1583  000782  0E05               	movlw	5
  1584  000784  6EDE               	movwf	postinc2,c
  1585  000786  0E00               	movlw	0
  1586  000788  6EDD               	movwf	postdec2,c
  1587                           
  1588                           ; BSR set to: 1
  1589                           ;main.c: 246: }
  1590                           ;main.c: 248: break;
  1591  00078A  D099               	goto	l3758
  1592  00078C                     
  1593                           ;main.c: 253: SetLine(1);
  1594                           
  1595                           ; BSR set to: 1
  1596  00078C  0E01               	movlw	1
  1597  00078E  ECF3  F00C         	call	_SetLine
  1598                           
  1599                           ;main.c: 254: LCD_String(Message);
  1600  000792  0EC8               	movlw	low main@Message
  1601  000794  0100               	movlb	0	; () banked
  1602  000796  6F66               	movwf	LCD_String@string& (0+255),b
  1603  000798  0E01               	movlw	high main@Message
  1604  00079A  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1605  00079C  ECC3  F00B         	call	_LCD_String	;wreg free
  1606                           
  1607                           ;main.c: 255: SetLine(2);
  1608  0007A0  0E02               	movlw	2
  1609  0007A2  ECF3  F00C         	call	_SetLine
  1610                           
  1611                           ;main.c: 256: LCD_String("Going Home");
  1612  0007A6  0E39               	movlw	low STR_8
  1613  0007A8  0100               	movlb	0	; () banked
  1614  0007AA  6F66               	movwf	LCD_String@string& (0+255),b
  1615  0007AC  0E03               	movlw	high STR_8
  1616  0007AE  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  1617  0007B0  ECC3  F00B         	call	_LCD_String	;wreg free
  1618                           
  1619                           ;main.c: 257: stop(&mL,&mR);
  1620  0007B4  0ED3               	movlw	low main@mL
  1621  0007B6  0100               	movlb	0	; () banked
  1622  0007B8  6F77               	movwf	stop@mL& (0+255),b
  1623  0007BA  0E01               	movlw	high main@mL
  1624  0007BC  6F78               	movwf	(stop@mL+1)& (0+255),b
  1625  0007BE  0EDC               	movlw	low main@mR
  1626  0007C0  6F79               	movwf	stop@mR& (0+255),b
  1627  0007C2  0E01               	movlw	high main@mR
  1628  0007C4  6F7A               	movwf	(stop@mR+1)& (0+255),b
  1629  0007C6  EC7F  F00A         	call	_stop	;wreg free
  1630  0007CA                     
  1631                           ;main.c: 260: if (MoveType[Move]==0) {
  1632  0007CA  0101               	movlb	1	; () banked
  1633  0007CC  51D2               	movf	main@Move& (0+255),w,b
  1634  0007CE  0D01               	mullw	1
  1635  0007D0  0E00               	movlw	low main@MoveType
  1636  0007D2  24F3               	addwf	prodl,w,c
  1637  0007D4  6ED9               	movwf	fsr2l,c
  1638  0007D6  0E02               	movlw	high main@MoveType
  1639  0007D8  20F4               	addwfc	prodh,w,c
  1640  0007DA  6EDA               	movwf	fsr2h,c
  1641  0007DC  50DF               	movf	indf2,w,c
  1642  0007DE  A4D8               	btfss	status,2,c
  1643  0007E0  D01A               	goto	l421
  1644                           
  1645                           ; BSR set to: 1
  1646                           ;main.c: 261: fullSpeedBack(&mL,&mR,100);
  1647  0007E2  0ED3               	movlw	low main@mL
  1648  0007E4  0100               	movlb	0	; () banked
  1649  0007E6  6F7D               	movwf	fullSpeedBack@mL& (0+255),b
  1650  0007E8  0E01               	movlw	high main@mL
  1651  0007EA  6F7E               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1652  0007EC  0EDC               	movlw	low main@mR
  1653  0007EE  6F7F               	movwf	fullSpeedBack@mR& (0+255),b
  1654  0007F0  0E01               	movlw	high main@mR
  1655  0007F2  6F80               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1656  0007F4  0E64               	movlw	100
  1657  0007F6  6F81               	movwf	fullSpeedBack@power& (0+255),b
  1658  0007F8  EC61  F00C         	call	_fullSpeedBack	;wreg free
  1659                           
  1660                           ;main.c: 262: delay_tenth_s(MoveTime[Move]);
  1661  0007FC  0101               	movlb	1	; () banked
  1662  0007FE  51D2               	movf	main@Move& (0+255),w,b
  1663  000800  0D02               	mullw	2
  1664  000802  0E00               	movlw	low main@MoveTime
  1665  000804  24F3               	addwf	prodl,w,c
  1666  000806  6ED9               	movwf	fsr2l,c
  1667  000808  0E01               	movlw	high main@MoveTime
  1668  00080A  20F4               	addwfc	prodh,w,c
  1669  00080C  6EDA               	movwf	fsr2h,c
  1670  00080E  50DF               	movf	indf2,w,c
  1671  000810  EC40  F00C         	call	_delay_tenth_s
  1672                           
  1673                           ;main.c: 263: } else if (MoveType[Move]==1) {
  1674  000814  D050               	goto	l425
  1675  000816                     l421:
  1676  000816  0101               	movlb	1	; () banked
  1677  000818  51D2               	movf	main@Move& (0+255),w,b
  1678  00081A  0D01               	mullw	1
  1679  00081C  0E00               	movlw	low main@MoveType
  1680  00081E  24F3               	addwf	prodl,w,c
  1681  000820  6ED9               	movwf	fsr2l,c
  1682  000822  0E02               	movlw	high main@MoveType
  1683  000824  20F4               	addwfc	prodh,w,c
  1684  000826  6EDA               	movwf	fsr2h,c
  1685  000828  04DE               	decf	postinc2,w,c
  1686  00082A  A4D8               	btfss	status,2,c
  1687  00082C  D044               	goto	l425
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;main.c: 264: if (MoveTime[Move]>0) {
  1691  00082E  51D2               	movf	main@Move& (0+255),w,b
  1692  000830  0D02               	mullw	2
  1693  000832  0E00               	movlw	low main@MoveTime
  1694  000834  24F3               	addwf	prodl,w,c
  1695  000836  6ED9               	movwf	fsr2l,c
  1696  000838  0E01               	movlw	high main@MoveTime
  1697  00083A  20F4               	addwfc	prodh,w,c
  1698  00083C  6EDA               	movwf	fsr2h,c
  1699  00083E  0E01               	movlw	1
  1700  000840  BEDB               	btfsc	plusw2,7,c
  1701  000842  D020               	goto	l424
  1702  000844  0E01               	movlw	1
  1703  000846  50DB               	movf	plusw2,w,c
  1704  000848  E103               	bnz	u3190
  1705  00084A  04DE               	decf	postinc2,w,c
  1706  00084C  A0D8               	btfss	status,0,c
  1707  00084E  D01A               	goto	l424
  1708  000850                     u3190:
  1709                           
  1710                           ; BSR set to: 1
  1711                           ;main.c: 265: turnRight(&mL,&mR,100);
  1712  000850  0ED3               	movlw	low main@mL
  1713  000852  0100               	movlb	0	; () banked
  1714  000854  6F7D               	movwf	turnRight@mL& (0+255),b
  1715  000856  0E01               	movlw	high main@mL
  1716  000858  6F7E               	movwf	(turnRight@mL+1)& (0+255),b
  1717  00085A  0EDC               	movlw	low main@mR
  1718  00085C  6F7F               	movwf	turnRight@mR& (0+255),b
  1719  00085E  0E01               	movlw	high main@mR
  1720  000860  6F80               	movwf	(turnRight@mR+1)& (0+255),b
  1721  000862  0E64               	movlw	100
  1722  000864  6F81               	movwf	turnRight@power& (0+255),b
  1723  000866  EC7F  F00C         	call	_turnRight	;wreg free
  1724                           
  1725                           ;main.c: 266: delay_tenth_s(MoveTime[Move]);
  1726  00086A  0101               	movlb	1	; () banked
  1727  00086C  51D2               	movf	main@Move& (0+255),w,b
  1728  00086E  0D02               	mullw	2
  1729  000870  0E00               	movlw	low main@MoveTime
  1730  000872  24F3               	addwf	prodl,w,c
  1731  000874  6ED9               	movwf	fsr2l,c
  1732  000876  0E01               	movlw	high main@MoveTime
  1733  000878  20F4               	addwfc	prodh,w,c
  1734  00087A  6EDA               	movwf	fsr2h,c
  1735  00087C  50DF               	movf	indf2,w,c
  1736  00087E  EC40  F00C         	call	_delay_tenth_s
  1737                           
  1738                           ;main.c: 267: } else {
  1739  000882  D019               	goto	l425
  1740  000884                     l424:
  1741                           
  1742                           ;main.c: 268: turnLeft(&mL,&mR,100);
  1743  000884  0ED3               	movlw	low main@mL
  1744  000886  0100               	movlb	0	; () banked
  1745  000888  6F7D               	movwf	turnLeft@mL& (0+255),b
  1746  00088A  0E01               	movlw	high main@mL
  1747  00088C  6F7E               	movwf	(turnLeft@mL+1)& (0+255),b
  1748  00088E  0EDC               	movlw	low main@mR
  1749  000890  6F7F               	movwf	turnLeft@mR& (0+255),b
  1750  000892  0E01               	movlw	high main@mR
  1751  000894  6F80               	movwf	(turnLeft@mR+1)& (0+255),b
  1752  000896  0E64               	movlw	100
  1753  000898  6F81               	movwf	turnLeft@power& (0+255),b
  1754  00089A  EC9D  F00C         	call	_turnLeft	;wreg free
  1755                           
  1756                           ;main.c: 269: delay_tenth_s(MoveTime[Move]);
  1757  00089E  0101               	movlb	1	; () banked
  1758  0008A0  51D2               	movf	main@Move& (0+255),w,b
  1759  0008A2  0D02               	mullw	2
  1760  0008A4  0E00               	movlw	low main@MoveTime
  1761  0008A6  24F3               	addwf	prodl,w,c
  1762  0008A8  6ED9               	movwf	fsr2l,c
  1763  0008AA  0E01               	movlw	high main@MoveTime
  1764  0008AC  20F4               	addwfc	prodh,w,c
  1765  0008AE  6EDA               	movwf	fsr2h,c
  1766  0008B0  50DF               	movf	indf2,w,c
  1767  0008B2  EC40  F00C         	call	_delay_tenth_s
  1768  0008B6                     l425:
  1769  0008B6  0101               	movlb	1	; () banked
  1770  0008B8  07D2               	decf	main@Move& (0+255),f,b
  1771  0008BA  D787               	goto	l419
  1772  0008BC                     l420:
  1773                           
  1774                           ;main.c: 270: }
  1775                           ;main.c: 271: }
  1776                           ;main.c: 272: }
  1777                           ;main.c: 273: mode=-1;
  1778  0008BC  6834               	setf	_mode,c	;volatile
  1779  0008BE                     l3758:
  1780                           
  1781                           ;main.c: 276: }
  1782  0008BE  5034               	movf	_mode,w,c	;volatile
  1783                           
  1784                           ; Switch size 1, requested type "space"
  1785                           ; Number of cases is 5, Range of values is 0 to 255
  1786                           ; switch strategies available:
  1787                           ; Name         Instructions Cycles
  1788                           ; simple_byte           16     9 (average)
  1789                           ;	Chosen strategy is simple_byte
  1790  0008C0  0A00               	xorlw	0	; case 0
  1791  0008C2  B4D8               	btfsc	status,2,c
  1792  0008C4  D5FB               	goto	l399
  1793  0008C6  0A01               	xorlw	1	; case 1
  1794  0008C8  B4D8               	btfsc	status,2,c
  1795  0008CA  D61F               	goto	l400
  1796  0008CC  0A03               	xorlw	3	; case 2
  1797  0008CE  B4D8               	btfsc	status,2,c
  1798  0008D0  D6A5               	goto	l408
  1799  0008D2  0A01               	xorlw	1	; case 3
  1800  0008D4  B4D8               	btfsc	status,2,c
  1801  0008D6  D75A               	goto	l418
  1802  0008D8  0AFC               	xorlw	252	; case 255
  1803  0008DA  B4D8               	btfsc	status,2,c
  1804  0008DC  D580               	goto	l395
  1805  0008DE  D7EF               	goto	l3758
  1806  0008E0                     __end_of_main:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           prodh	equ	0xFF4
  1810                           prodl	equ	0xFF3
  1811                           intcon	equ	0xFF2
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           indf1	equ	0xFE7
  1815                           fsr1h	equ	0xFE2
  1816                           fsr1l	equ	0xFE1
  1817                           indf2	equ	0xFDF
  1818                           postinc2	equ	0xFDE
  1819                           postdec2	equ	0xFDD
  1820                           plusw2	equ	0xFDB
  1821                           fsr2h	equ	0xFDA
  1822                           fsr2l	equ	0xFD9
  1823                           status	equ	0xFD8
  1824                           
  1825 ;; *************** function _initTimer *****************
  1826 ;; Defined at:
  1827 ;;		line 8 in file "Movement.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		None
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1841 ;;      Params:         0       0       0       0
  1842 ;;      Locals:         0       0       0       0
  1843 ;;      Temps:          0       0       0       0
  1844 ;;      Totals:         0       0       0       0
  1845 ;;Total ram usage:        0 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    3
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text1
  1856  001B28                     __ptext1:
  1857                           	opt stack 0
  1858  001B28                     _initTimer:
  1859                           	opt stack 27
  1860                           
  1861                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1862                           
  1863                           ;incstack = 0
  1864  001B28  9ED5               	bcf	4053,7,c	;volatile
  1865                           
  1866                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1867  001B2A  9CD5               	bcf	4053,6,c	;volatile
  1868                           
  1869                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1870  001B2C  9AD5               	bcf	4053,5,c	;volatile
  1871                           
  1872                           ;Movement.c: 13: T0CONbits.PSA=0;
  1873  001B2E  96D5               	bcf	4053,3,c	;volatile
  1874                           
  1875                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1876  001B30  80D5               	bsf	4053,0,c	;volatile
  1877  001B32  82D5               	bsf	4053,1,c	;volatile
  1878  001B34  84D5               	bsf	4053,2,c	;volatile
  1879                           
  1880                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1881  001B36  9AF2               	bcf	intcon,5,c	;volatile
  1882  001B38  0012               	return		;funcret
  1883  001B3A                     __end_of_initTimer:
  1884                           	opt stack 0
  1885                           tblptru	equ	0xFF8
  1886                           prodh	equ	0xFF4
  1887                           prodl	equ	0xFF3
  1888                           intcon	equ	0xFF2
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           indf1	equ	0xFE7
  1892                           fsr1h	equ	0xFE2
  1893                           fsr1l	equ	0xFE1
  1894                           indf2	equ	0xFDF
  1895                           postinc2	equ	0xFDE
  1896                           postdec2	equ	0xFDD
  1897                           plusw2	equ	0xFDB
  1898                           fsr2h	equ	0xFDA
  1899                           fsr2l	equ	0xFD9
  1900                           status	equ	0xFD8
  1901                           
  1902 ;; *************** function _initRFID *****************
  1903 ;; Defined at:
  1904 ;;		line 5 in file "RFID_Reader.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;		None
  1907 ;; Auto vars:     Size  Location     Type
  1908 ;;		None
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, status,2, status,0
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1918 ;;      Params:         0       0       0       0
  1919 ;;      Locals:         0       0       0       0
  1920 ;;      Temps:          0       0       0       0
  1921 ;;      Totals:         0       0       0       0
  1922 ;;Total ram usage:        0 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    3
  1925 ;; This function calls:
  1926 ;;		Nothing
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text2
  1933  001B0C                     __ptext2:
  1934                           	opt stack 0
  1935  001B0C                     _initRFID:
  1936                           	opt stack 27
  1937                           
  1938                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1939                           
  1940                           ;incstack = 0
  1941  001B0C  5094               	movf	3988,w,c	;volatile
  1942  001B0E  09C0               	iorlw	192
  1943  001B10  6E94               	movwf	3988,c	;volatile
  1944                           
  1945                           ;RFID_Reader.c: 10: SPBRG=205;
  1946  001B12  0ECD               	movlw	205
  1947  001B14  6EAF               	movwf	4015,c	;volatile
  1948                           
  1949                           ;RFID_Reader.c: 11: SPBRGH=0;
  1950  001B16  0E00               	movlw	0
  1951  001B18  6EB0               	movwf	4016,c	;volatile
  1952                           
  1953                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1954  001B1A  86AA               	bsf	4010,3,c	;volatile
  1955                           
  1956                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1957  001B1C  84AC               	bsf	4012,2,c	;volatile
  1958                           
  1959                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1960  001B1E  88AB               	bsf	4011,4,c	;volatile
  1961                           
  1962                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1963  001B20  8EAB               	bsf	4011,7,c	;volatile
  1964                           
  1965                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1966  001B22  98AC               	bcf	4012,4,c	;volatile
  1967                           
  1968                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1969  001B24  9CAB               	bcf	4011,6,c	;volatile
  1970  001B26  0012               	return		;funcret
  1971  001B28                     __end_of_initRFID:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           prodh	equ	0xFF4
  1975                           prodl	equ	0xFF3
  1976                           intcon	equ	0xFF2
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           indf1	equ	0xFE7
  1980                           fsr1h	equ	0xFE2
  1981                           fsr1l	equ	0xFE1
  1982                           indf2	equ	0xFDF
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           plusw2	equ	0xFDB
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _initMotorPWM *****************
  1991 ;; Defined at:
  1992 ;;		line 4 in file "dc_motor.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;		None
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;		None
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2006 ;;      Params:         0       0       0       0
  2007 ;;      Locals:         0       0       0       0
  2008 ;;      Temps:          0       0       0       0
  2009 ;;      Totals:         0       0       0       0
  2010 ;;Total ram usage:        0 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    3
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text3
  2021  001A1C                     __ptext3:
  2022                           	opt stack 0
  2023  001A1C                     _initMotorPWM:
  2024                           	opt stack 27
  2025                           
  2026                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2027                           
  2028                           ;incstack = 0
  2029  001A1C  0E00               	movlw	0
  2030  001A1E  6E7F               	movwf	3967,c	;volatile
  2031                           
  2032                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2033  001A20  0E80               	movlw	128
  2034  001A22  6E7E               	movwf	3966,c	;volatile
  2035                           
  2036                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2037  001A24  0E6F               	movlw	111
  2038  001A26  6E6F               	movwf	3951,c	;volatile
  2039                           
  2040                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2041  001A28  0E00               	movlw	0
  2042  001A2A  6E6E               	movwf	3950,c	;volatile
  2043                           
  2044                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2045  001A2C  0EC7               	movlw	199
  2046  001A2E  6E7B               	movwf	3963,c	;volatile
  2047                           
  2048                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2049  001A30  0E00               	movlw	0
  2050  001A32  6E7A               	movwf	3962,c	;volatile
  2051                           
  2052                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2053  001A34  0E00               	movlw	0
  2054  001A36  6E79               	movwf	3961,c	;volatile
  2055                           
  2056                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2057  001A38  0E00               	movlw	0
  2058  001A3A  6E78               	movwf	3960,c	;volatile
  2059                           
  2060                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2061  001A3C  0E00               	movlw	0
  2062  001A3E  6E77               	movwf	3959,c	;volatile
  2063                           
  2064                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2065  001A40  0E00               	movlw	0
  2066  001A42  6E76               	movwf	3958,c	;volatile
  2067                           
  2068                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2069  001A44  9093               	bcf	3987,0,c	;volatile
  2070                           
  2071                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2072  001A46  9293               	bcf	3987,1,c	;volatile
  2073                           
  2074                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2075  001A48  9493               	bcf	3987,2,c	;volatile
  2076                           
  2077                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2078  001A4A  9693               	bcf	3987,3,c	;volatile
  2079  001A4C  0012               	return		;funcret
  2080  001A4E                     __end_of_initMotorPWM:
  2081                           	opt stack 0
  2082                           tblptru	equ	0xFF8
  2083                           prodh	equ	0xFF4
  2084                           prodl	equ	0xFF3
  2085                           intcon	equ	0xFF2
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           indf1	equ	0xFE7
  2089                           fsr1h	equ	0xFE2
  2090                           fsr1l	equ	0xFE1
  2091                           indf2	equ	0xFDF
  2092                           postinc2	equ	0xFDE
  2093                           postdec2	equ	0xFDD
  2094                           plusw2	equ	0xFDB
  2095                           fsr2h	equ	0xFDA
  2096                           fsr2l	equ	0xFD9
  2097                           status	equ	0xFD8
  2098                           
  2099 ;; *************** function _initLCD *****************
  2100 ;; Defined at:
  2101 ;;		line 38 in file "LCD.c"
  2102 ;; Parameters:    Size  Location     Type
  2103 ;;		None
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2115 ;;      Params:         0       0       0       0
  2116 ;;      Locals:         0       0       0       0
  2117 ;;      Temps:          0       1       0       0
  2118 ;;      Totals:         0       1       0       0
  2119 ;;Total ram usage:        1 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    6
  2122 ;; This function calls:
  2123 ;;		_LCDout
  2124 ;;		_SendLCD
  2125 ;; This function is called by:
  2126 ;;		_main
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text4
  2131  0012B4                     __ptext4:
  2132                           	opt stack 0
  2133  0012B4                     _initLCD:
  2134                           	opt stack 24
  2135                           
  2136                           ;LCD.c: 44: TRISAbits.RA6=0;
  2137                           
  2138                           ;incstack = 0
  2139  0012B4  9C92               	bcf	3986,6,c	;volatile
  2140                           
  2141                           ;LCD.c: 45: TRISCbits.RC0=0;
  2142  0012B6  9094               	bcf	3988,0,c	;volatile
  2143                           
  2144                           ;LCD.c: 46: TRISCbits.RC1=0;
  2145  0012B8  9294               	bcf	3988,1,c	;volatile
  2146                           
  2147                           ;LCD.c: 47: TRISCbits.RC2=0;
  2148  0012BA  9494               	bcf	3988,2,c	;volatile
  2149                           
  2150                           ;LCD.c: 48: TRISDbits.RD0=0;
  2151  0012BC  9095               	bcf	3989,0,c	;volatile
  2152                           
  2153                           ;LCD.c: 49: TRISDbits.RD1=0;
  2154  0012BE  9295               	bcf	3989,1,c	;volatile
  2155                           
  2156                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2157  0012C0  0E27               	movlw	39
  2158  0012C2  0100               	movlb	0	; () banked
  2159  0012C4  6F66               	movwf	??_initLCD& (0+255),b
  2160  0012C6  0EF5               	movlw	245
  2161  0012C8                     u3227:
  2162  0012C8  2EE8               	decfsz	wreg,f,c
  2163  0012CA  D7FE               	bra	u3227
  2164  0012CC  2F66               	decfsz	??_initLCD& (0+255),f,b
  2165  0012CE  D7FC               	bra	u3227
  2166                           
  2167                           ;LCD.c: 52: LCDout(0b0011);
  2168  0012D0  0E03               	movlw	3
  2169  0012D2  ECC1  F009         	call	_LCDout
  2170                           
  2171                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2172  0012D6  0E0D               	movlw	13
  2173  0012D8  0100               	movlb	0	; () banked
  2174  0012DA  6F66               	movwf	??_initLCD& (0+255),b
  2175  0012DC  0EFB               	movlw	251
  2176  0012DE                     u3237:
  2177  0012DE  2EE8               	decfsz	wreg,f,c
  2178  0012E0  D7FE               	bra	u3237
  2179  0012E2  2F66               	decfsz	??_initLCD& (0+255),f,b
  2180  0012E4  D7FC               	bra	u3237
  2181  0012E6  D000               	nop2	
  2182                           
  2183                           ;LCD.c: 54: LCDout(0b0011);
  2184  0012E8  0E03               	movlw	3
  2185  0012EA  ECC1  F009         	call	_LCDout
  2186                           
  2187                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2188  0012EE  0E85               	movlw	133
  2189  0012F0                     u3247:
  2190  0012F0  2EE8               	decfsz	wreg,f,c
  2191  0012F2  D7FE               	bra	u3247
  2192  0012F4  F000               	nop	
  2193                           
  2194                           ;LCD.c: 56: LCDout(0b0011);
  2195  0012F6  0E03               	movlw	3
  2196  0012F8  ECC1  F009         	call	_LCDout
  2197                           
  2198                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2199  0012FC  0E21               	movlw	33
  2200  0012FE                     u3257:
  2201  0012FE  2EE8               	decfsz	wreg,f,c
  2202  001300  D7FE               	bra	u3257
  2203  001302  F000               	nop	
  2204                           
  2205                           ;LCD.c: 58: LCDout(0b0010);
  2206  001304  0E02               	movlw	2
  2207  001306  ECC1  F009         	call	_LCDout
  2208                           
  2209                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2210  00130A  0E21               	movlw	33
  2211  00130C                     u3267:
  2212  00130C  2EE8               	decfsz	wreg,f,c
  2213  00130E  D7FE               	bra	u3267
  2214  001310  F000               	nop	
  2215                           
  2216                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2217  001312  0E00               	movlw	0
  2218  001314  0100               	movlb	0	; () banked
  2219  001316  6F64               	movwf	SendLCD@type& (0+255),b
  2220  001318  0E28               	movlw	40
  2221  00131A  ECBB  F00C         	call	_SendLCD
  2222                           
  2223                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2224  00131E  0E21               	movlw	33
  2225  001320                     u3277:
  2226  001320  2EE8               	decfsz	wreg,f,c
  2227  001322  D7FE               	bra	u3277
  2228  001324  F000               	nop	
  2229                           
  2230                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2231  001326  0E00               	movlw	0
  2232  001328  0100               	movlb	0	; () banked
  2233  00132A  6F64               	movwf	SendLCD@type& (0+255),b
  2234  00132C  0E08               	movlw	8
  2235  00132E  ECBB  F00C         	call	_SendLCD
  2236                           
  2237                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2238  001332  0E21               	movlw	33
  2239  001334                     u3287:
  2240  001334  2EE8               	decfsz	wreg,f,c
  2241  001336  D7FE               	bra	u3287
  2242  001338  F000               	nop	
  2243                           
  2244                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2245  00133A  0E00               	movlw	0
  2246  00133C  0100               	movlb	0	; () banked
  2247  00133E  6F64               	movwf	SendLCD@type& (0+255),b
  2248  001340  0E01               	movlw	1
  2249  001342  ECBB  F00C         	call	_SendLCD
  2250                           
  2251                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2252  001346  0E0D               	movlw	13
  2253  001348  0100               	movlb	0	; () banked
  2254  00134A  6F66               	movwf	??_initLCD& (0+255),b
  2255  00134C  0EFB               	movlw	251
  2256  00134E                     u3297:
  2257  00134E  2EE8               	decfsz	wreg,f,c
  2258  001350  D7FE               	bra	u3297
  2259  001352  2F66               	decfsz	??_initLCD& (0+255),f,b
  2260  001354  D7FC               	bra	u3297
  2261  001356  D000               	nop2	
  2262                           
  2263                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2264  001358  0E00               	movlw	0
  2265  00135A  0100               	movlb	0	; () banked
  2266  00135C  6F64               	movwf	SendLCD@type& (0+255),b
  2267  00135E  0E06               	movlw	6
  2268  001360  ECBB  F00C         	call	_SendLCD
  2269                           
  2270                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2271  001364  0E21               	movlw	33
  2272  001366                     u3307:
  2273  001366  2EE8               	decfsz	wreg,f,c
  2274  001368  D7FE               	bra	u3307
  2275  00136A  F000               	nop	
  2276                           
  2277                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2278  00136C  0E00               	movlw	0
  2279  00136E  0100               	movlb	0	; () banked
  2280  001370  6F64               	movwf	SendLCD@type& (0+255),b
  2281  001372  0E0C               	movlw	12
  2282  001374  ECBB  F00C         	call	_SendLCD
  2283                           
  2284                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2285  001378  0E21               	movlw	33
  2286  00137A                     u3317:
  2287  00137A  2EE8               	decfsz	wreg,f,c
  2288  00137C  D7FE               	bra	u3317
  2289  00137E  F000               	nop	
  2290  001380  0012               	return		;funcret
  2291  001382                     __end_of_initLCD:
  2292                           	opt stack 0
  2293                           tblptru	equ	0xFF8
  2294                           prodh	equ	0xFF4
  2295                           prodl	equ	0xFF3
  2296                           intcon	equ	0xFF2
  2297                           postinc0	equ	0xFEE
  2298                           wreg	equ	0xFE8
  2299                           indf1	equ	0xFE7
  2300                           fsr1h	equ	0xFE2
  2301                           fsr1l	equ	0xFE1
  2302                           indf2	equ	0xFDF
  2303                           postinc2	equ	0xFDE
  2304                           postdec2	equ	0xFDD
  2305                           plusw2	equ	0xFDB
  2306                           fsr2h	equ	0xFDA
  2307                           fsr2l	equ	0xFD9
  2308                           status	equ	0xFD8
  2309                           
  2310 ;; *************** function _initIR *****************
  2311 ;; Defined at:
  2312 ;;		line 30 in file "IR_Reading.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2326 ;;      Params:         0       0       0       0
  2327 ;;      Locals:         0       0       0       0
  2328 ;;      Temps:          0       0       0       0
  2329 ;;      Totals:         0       0       0       0
  2330 ;;Total ram usage:        0 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    3
  2333 ;; This function calls:
  2334 ;;		Nothing
  2335 ;; This function is called by:
  2336 ;;		_main
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text5
  2341  001AC8                     __ptext5:
  2342                           	opt stack 0
  2343  001AC8                     _initIR:
  2344                           	opt stack 27
  2345                           
  2346                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2347                           
  2348                           ;incstack = 0
  2349  001AC8  9489               	bcf	3977,2,c	;volatile
  2350                           
  2351                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2352  001ACA  9689               	bcf	3977,3,c	;volatile
  2353                           
  2354                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2355  001ACC  8492               	bsf	3986,2,c	;volatile
  2356                           
  2357                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2358  001ACE  8692               	bsf	3986,3,c	;volatile
  2359                           
  2360                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2361  001AD0  94B8               	bcf	4024,2,c	;volatile
  2362                           
  2363                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2364  001AD2  96B8               	bcf	4024,3,c	;volatile
  2365                           
  2366                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2367  001AD4  9CB8               	bcf	4024,6,c	;volatile
  2368                           
  2369                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2370  001AD6  9EB8               	bcf	4024,7,c	;volatile
  2371                           
  2372                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2373  001AD8  0E06               	movlw	6
  2374  001ADA  6E63               	movwf	3939,c	;volatile
  2375                           
  2376                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2377  001ADC  0E06               	movlw	6
  2378  001ADE  6E62               	movwf	3938,c	;volatile
  2379                           
  2380                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2381  001AE0  9096               	bcf	3990,0,c	;volatile
  2382                           
  2383                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2384  001AE2  9296               	bcf	3990,1,c	;volatile
  2385                           
  2386                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2387  001AE4  0E59               	movlw	89
  2388  001AE6  6EB7               	movwf	4023,c	;volatile
  2389  001AE8  0012               	return		;funcret
  2390  001AEA                     __end_of_initIR:
  2391                           	opt stack 0
  2392                           tblptru	equ	0xFF8
  2393                           prodh	equ	0xFF4
  2394                           prodl	equ	0xFF3
  2395                           intcon	equ	0xFF2
  2396                           postinc0	equ	0xFEE
  2397                           wreg	equ	0xFE8
  2398                           indf1	equ	0xFE7
  2399                           fsr1h	equ	0xFE2
  2400                           fsr1l	equ	0xFE1
  2401                           indf2	equ	0xFDF
  2402                           postinc2	equ	0xFDE
  2403                           postdec2	equ	0xFDD
  2404                           plusw2	equ	0xFDB
  2405                           fsr2h	equ	0xFDA
  2406                           fsr2l	equ	0xFD9
  2407                           status	equ	0xFD8
  2408                           
  2409 ;; *************** function _fullSpeedBack *****************
  2410 ;; Defined at:
  2411 ;;		line 125 in file "dc_motor.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  mL              2   29[BANK0 ] PTR struct DC_motor
  2414 ;;		 -> main@mL(9), 
  2415 ;;  mR              2   31[BANK0 ] PTR struct DC_motor
  2416 ;;		 -> main@mR(9), 
  2417 ;;  power           1   33[BANK0 ] unsigned char 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  1    wreg      void 
  2422 ;; Registers used:
  2423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2429 ;;      Params:         0       5       0       0
  2430 ;;      Locals:         0       0       0       0
  2431 ;;      Temps:          0       0       0       0
  2432 ;;      Totals:         0       5       0       0
  2433 ;;Total ram usage:        5 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    6
  2436 ;; This function calls:
  2437 ;;		_fullSpeedAhead
  2438 ;; This function is called by:
  2439 ;;		_main
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text6
  2444  0018C2                     __ptext6:
  2445                           	opt stack 0
  2446  0018C2                     _fullSpeedBack:
  2447                           	opt stack 24
  2448                           
  2449                           ;dc_motor.c: 128: mL->direction=0;
  2450                           
  2451                           ;incstack = 0
  2452  0018C2  0100               	movlb	0	; () banked
  2453  0018C4  EE20 F001          	lfsr	2,1
  2454  0018C8  517D               	movf	fullSpeedBack@mL& (0+255),w,b
  2455  0018CA  26D9               	addwf	fsr2l,f,c
  2456  0018CC  517E               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2457  0018CE  22DA               	addwfc	fsr2h,f,c
  2458  0018D0  0E00               	movlw	0
  2459  0018D2  6EDF               	movwf	indf2,c
  2460                           
  2461                           ;dc_motor.c: 129: mR->direction=0;
  2462  0018D4  EE20 F001          	lfsr	2,1
  2463  0018D8  517F               	movf	fullSpeedBack@mR& (0+255),w,b
  2464  0018DA  26D9               	addwf	fsr2l,f,c
  2465  0018DC  5180               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2466  0018DE  22DA               	addwfc	fsr2h,f,c
  2467  0018E0  0E00               	movlw	0
  2468  0018E2  6EDF               	movwf	indf2,c
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2472  0018E4  C07D  F077         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2473  0018E8  C07E  F078         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2474  0018EC  C07F  F079         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2475  0018F0  C080  F07A         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2476  0018F4  C081  F07B         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2477  0018F8  EC0B  F00B         	call	_fullSpeedAhead	;wreg free
  2478  0018FC  0012               	return		;funcret
  2479  0018FE                     __end_of_fullSpeedBack:
  2480                           	opt stack 0
  2481                           tblptru	equ	0xFF8
  2482                           prodh	equ	0xFF4
  2483                           prodl	equ	0xFF3
  2484                           intcon	equ	0xFF2
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           indf1	equ	0xFE7
  2488                           fsr1h	equ	0xFE2
  2489                           fsr1l	equ	0xFE1
  2490                           indf2	equ	0xFDF
  2491                           postinc2	equ	0xFDE
  2492                           postdec2	equ	0xFDD
  2493                           plusw2	equ	0xFDB
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _enableSensor *****************
  2499 ;; Defined at:
  2500 ;;		line 106 in file "IR_Reading.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  sensor          1    wreg     unsigned char 
  2503 ;;  status          1    0[BANK0 ] unsigned char 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  sensor          1    1[BANK0 ] unsigned char 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2515 ;;      Params:         0       1       0       0
  2516 ;;      Locals:         0       1       0       0
  2517 ;;      Temps:          0       0       0       0
  2518 ;;      Totals:         0       2       0       0
  2519 ;;Total ram usage:        2 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    3
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text7
  2530  001A4E                     __ptext7:
  2531                           	opt stack 0
  2532  001A4E                     _enableSensor:
  2533                           	opt stack 27
  2534                           
  2535                           ;incstack = 0
  2536                           ;enableSensor@sensor stored from wreg
  2537  001A4E  0100               	movlb	0	; () banked
  2538  001A50  6F61               	movwf	enableSensor@sensor& (0+255),b
  2539                           
  2540                           ;IR_Reading.c: 108: if (sensor==0){
  2541  001A52  0100               	movlb	0	; () banked
  2542  001A54  5161               	movf	enableSensor@sensor& (0+255),w,b
  2543  001A56  A4D8               	btfss	status,2,c
  2544  001A58  D006               	goto	l115
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2548  001A5A  B160               	btfsc	enableSensor@status& (0+255),0,b
  2549  001A5C  D002               	bra	u2855
  2550  001A5E  908D               	bcf	3981,0,c	;volatile
  2551  001A60  D001               	bra	u2856
  2552  001A62                     u2855:
  2553  001A62  808D               	bsf	3981,0,c	;volatile
  2554  001A64                     u2856:
  2555                           
  2556                           ;IR_Reading.c: 110: } else if (sensor==1){
  2557  001A64  0012               	return	
  2558  001A66                     l115:
  2559  001A66  0100               	movlb	0	; () banked
  2560  001A68  0561               	decf	enableSensor@sensor& (0+255),w,b
  2561  001A6A  A4D8               	btfss	status,2,c
  2562  001A6C  0012               	return	
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2566  001A6E  B160               	btfsc	enableSensor@status& (0+255),0,b
  2567  001A70  D002               	bra	u2875
  2568  001A72  928D               	bcf	3981,1,c	;volatile
  2569  001A74  D001               	bra	u2876
  2570  001A76                     u2875:
  2571  001A76  828D               	bsf	3981,1,c	;volatile
  2572  001A78                     u2876:
  2573  001A78  0012               	return	
  2574  001A7A                     __end_of_enableSensor:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           prodh	equ	0xFF4
  2578                           prodl	equ	0xFF3
  2579                           intcon	equ	0xFF2
  2580                           postinc0	equ	0xFEE
  2581                           wreg	equ	0xFE8
  2582                           indf1	equ	0xFE7
  2583                           fsr1h	equ	0xFE2
  2584                           fsr1l	equ	0xFE1
  2585                           indf2	equ	0xFDF
  2586                           postinc2	equ	0xFDE
  2587                           postdec2	equ	0xFDD
  2588                           plusw2	equ	0xFDB
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _VerifySignal *****************
  2594 ;; Defined at:
  2595 ;;		line 55 in file "RFID_Reader.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  Signal          2    0[BANK0 ] PTR unsigned char 
  2598 ;;		 -> ReceivedString(16), 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  hexByte         2    8[BANK0 ] unsigned int 
  2601 ;;  i               1   11[BANK0 ] unsigned char 
  2602 ;;  checksum        1   10[BANK0 ] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      unsigned char 
  2605 ;; Registers used:
  2606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2612 ;;      Params:         0       2       0       0
  2613 ;;      Locals:         0       4       0       0
  2614 ;;      Temps:          0       6       0       0
  2615 ;;      Totals:         0      12       0       0
  2616 ;;Total ram usage:       12 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    3
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text8
  2627  0010C0                     __ptext8:
  2628                           	opt stack 0
  2629  0010C0                     _VerifySignal:
  2630                           	opt stack 27
  2631                           
  2632                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2633                           
  2634                           ;incstack = 0
  2635  0010C0  0E00               	movlw	0
  2636  0010C2  0100               	movlb	0	; () banked
  2637  0010C4  6F6A               	movwf	VerifySignal@checksum& (0+255),b
  2638                           
  2639                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2640  0010C6  0E00               	movlw	0
  2641  0010C8  6F69               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2642  0010CA  0E00               	movlw	0
  2643  0010CC  6F68               	movwf	VerifySignal@hexByte& (0+255),b
  2644                           
  2645                           ;RFID_Reader.c: 58: unsigned char i=0;
  2646  0010CE  0E00               	movlw	0
  2647  0010D0  6F6B               	movwf	VerifySignal@i& (0+255),b
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2651  0010D2  EE20 F004          	lfsr	2,4
  2652  0010D6  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2653  0010D8  26D9               	addwf	fsr2l,f,c
  2654  0010DA  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2655  0010DC  22DA               	addwfc	fsr2h,f,c
  2656  0010DE  50DF               	movf	indf2,w,c
  2657  0010E0  6F62               	movwf	??_VerifySignal& (0+255),b
  2658  0010E2  EE20 F003          	lfsr	2,3
  2659  0010E6  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2660  0010E8  26D9               	addwf	fsr2l,f,c
  2661  0010EA  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2662  0010EC  22DA               	addwfc	fsr2h,f,c
  2663  0010EE  50DF               	movf	indf2,w,c
  2664  0010F0  6F63               	movwf	(??_VerifySignal+1)& (0+255),b
  2665  0010F2  5163               	movf	(??_VerifySignal+1)& (0+255),w,b
  2666  0010F4  6F65               	movwf	(??_VerifySignal+3)& (0+255),b
  2667  0010F6  6B64               	clrf	(??_VerifySignal+2)& (0+255),b
  2668  0010F8  5162               	movf	??_VerifySignal& (0+255),w,b
  2669  0010FA  2564               	addwf	(??_VerifySignal+2)& (0+255),w,b
  2670  0010FC  6F68               	movwf	VerifySignal@hexByte& (0+255),b
  2671  0010FE  0E00               	movlw	0
  2672  001100  2165               	addwfc	(??_VerifySignal+3)& (0+255),w,b
  2673  001102  6F69               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2677  001104  EE20 F002          	lfsr	2,2
  2678  001108  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2679  00110A  26D9               	addwf	fsr2l,f,c
  2680  00110C  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2681  00110E  22DA               	addwfc	fsr2h,f,c
  2682  001110  50DF               	movf	indf2,w,c
  2683  001112  1968               	xorwf	VerifySignal@hexByte& (0+255),w,b
  2684  001114  6F6A               	movwf	VerifySignal@checksum& (0+255),b
  2685                           
  2686                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2687  001116  0E05               	movlw	5
  2688  001118  6F6B               	movwf	VerifySignal@i& (0+255),b
  2689  00111A                     l3516:
  2690                           
  2691                           ; BSR set to: 0
  2692  00111A  0E09               	movlw	9
  2693  00111C  656B               	cpfsgt	VerifySignal@i& (0+255),b
  2694  00111E  D001               	goto	l275
  2695  001120  D028               	goto	u2980
  2696  001122                     l275:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2700                           
  2701                           ; BSR set to: 0
  2702  001122  516B               	movf	VerifySignal@i& (0+255),w,b
  2703  001124  6F62               	movwf	??_VerifySignal& (0+255),b
  2704  001126  6B63               	clrf	(??_VerifySignal+1)& (0+255),b
  2705  001128  0E01               	movlw	1
  2706  00112A  2762               	addwf	??_VerifySignal& (0+255),f,b
  2707  00112C  0E00               	movlw	0
  2708  00112E  2363               	addwfc	(??_VerifySignal+1)& (0+255),f,b
  2709  001130  5162               	movf	??_VerifySignal& (0+255),w,b
  2710  001132  2560               	addwf	VerifySignal@Signal& (0+255),w,b
  2711  001134  6ED9               	movwf	fsr2l,c
  2712  001136  5163               	movf	(??_VerifySignal+1)& (0+255),w,b
  2713  001138  2161               	addwfc	(VerifySignal@Signal+1)& (0+255),w,b
  2714  00113A  6EDA               	movwf	fsr2h,c
  2715  00113C  50DF               	movf	indf2,w,c
  2716  00113E  6F64               	movwf	(??_VerifySignal+2)& (0+255),b
  2717  001140  516B               	movf	VerifySignal@i& (0+255),w,b
  2718  001142  0D01               	mullw	1
  2719  001144  50F3               	movf	prodl,w,c
  2720  001146  2560               	addwf	VerifySignal@Signal& (0+255),w,b
  2721  001148  6ED9               	movwf	fsr2l,c
  2722  00114A  50F4               	movf	prodh,w,c
  2723  00114C  2161               	addwfc	(VerifySignal@Signal+1)& (0+255),w,b
  2724  00114E  6EDA               	movwf	fsr2h,c
  2725  001150  50DF               	movf	indf2,w,c
  2726  001152  6F65               	movwf	(??_VerifySignal+3)& (0+255),b
  2727  001154  5165               	movf	(??_VerifySignal+3)& (0+255),w,b
  2728  001156  6F67               	movwf	(??_VerifySignal+5)& (0+255),b
  2729  001158  6B66               	clrf	(??_VerifySignal+4)& (0+255),b
  2730  00115A  5164               	movf	(??_VerifySignal+2)& (0+255),w,b
  2731  00115C  2566               	addwf	(??_VerifySignal+4)& (0+255),w,b
  2732  00115E  6F68               	movwf	VerifySignal@hexByte& (0+255),b
  2733  001160  0E00               	movlw	0
  2734  001162  2167               	addwfc	(??_VerifySignal+5)& (0+255),w,b
  2735  001164  6F69               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2739  001166  516A               	movf	VerifySignal@checksum& (0+255),w,b
  2740  001168  1968               	xorwf	VerifySignal@hexByte& (0+255),w,b
  2741  00116A  6F6A               	movwf	VerifySignal@checksum& (0+255),b
  2742                           
  2743                           ; BSR set to: 0
  2744  00116C  0E02               	movlw	2
  2745  00116E  276B               	addwf	VerifySignal@i& (0+255),f,b
  2746  001170  D7D4               	goto	l3516
  2747  001172                     u2980:
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;RFID_Reader.c: 68: }
  2751                           ;RFID_Reader.c: 70: if ((checksum==((Signal[11]<<8)+Signal[12]))){
  2752                           
  2753                           ; BSR set to: 0
  2754  001172  516A               	movf	VerifySignal@checksum& (0+255),w,b
  2755  001174  6F62               	movwf	??_VerifySignal& (0+255),b
  2756  001176  6B63               	clrf	(??_VerifySignal+1)& (0+255),b
  2757  001178  EE20 F00B          	lfsr	2,11
  2758  00117C  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2759  00117E  26D9               	addwf	fsr2l,f,c
  2760  001180  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2761  001182  22DA               	addwfc	fsr2h,f,c
  2762  001184  50DF               	movf	indf2,w,c
  2763  001186  6F64               	movwf	(??_VerifySignal+2)& (0+255),b
  2764  001188  5164               	movf	(??_VerifySignal+2)& (0+255),w,b
  2765  00118A  6F66               	movwf	(??_VerifySignal+4)& (0+255),b
  2766  00118C  6B65               	clrf	(??_VerifySignal+3)& (0+255),b
  2767  00118E  EE20 F00C          	lfsr	2,12
  2768  001192  5160               	movf	VerifySignal@Signal& (0+255),w,b
  2769  001194  26D9               	addwf	fsr2l,f,c
  2770  001196  5161               	movf	(VerifySignal@Signal+1)& (0+255),w,b
  2771  001198  22DA               	addwfc	fsr2h,f,c
  2772  00119A  50DF               	movf	indf2,w,c
  2773  00119C  6F67               	movwf	(??_VerifySignal+5)& (0+255),b
  2774  00119E  5167               	movf	(??_VerifySignal+5)& (0+255),w,b
  2775  0011A0  2765               	addwf	(??_VerifySignal+3)& (0+255),f,b
  2776  0011A2  0E00               	movlw	0
  2777  0011A4  2366               	addwfc	(??_VerifySignal+4)& (0+255),f,b
  2778  0011A6  5162               	movf	??_VerifySignal& (0+255),w,b
  2779  0011A8  1965               	xorwf	(??_VerifySignal+3)& (0+255),w,b
  2780  0011AA  E106               	bnz	l3536
  2781  0011AC  5163               	movf	(??_VerifySignal+1)& (0+255),w,b
  2782  0011AE  1966               	xorwf	(??_VerifySignal+4)& (0+255),w,b
  2783  0011B0  A4D8               	btfss	status,2,c
  2784  0011B2  D002               	goto	l277
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;RFID_Reader.c: 71: return 1;
  2788  0011B4  0E01               	movlw	1
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;RFID_Reader.c: 72: } else{
  2792                           
  2793                           ; BSR set to: 0
  2794  0011B6  0012               	return	
  2795  0011B8                     l277:
  2796  0011B8                     l3536:
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;RFID_Reader.c: 73: return 0;
  2800  0011B8  0E00               	movlw	0
  2801                           
  2802                           ; BSR set to: 0
  2803  0011BA  0012               	return	
  2804  0011BC                     __end_of_VerifySignal:
  2805                           	opt stack 0
  2806                           tblptru	equ	0xFF8
  2807                           prodh	equ	0xFF4
  2808                           prodl	equ	0xFF3
  2809                           intcon	equ	0xFF2
  2810                           postinc0	equ	0xFEE
  2811                           wreg	equ	0xFE8
  2812                           indf1	equ	0xFE7
  2813                           fsr1h	equ	0xFE2
  2814                           fsr1l	equ	0xFE1
  2815                           indf2	equ	0xFDF
  2816                           postinc2	equ	0xFDE
  2817                           postdec2	equ	0xFDD
  2818                           plusw2	equ	0xFDB
  2819                           fsr2h	equ	0xFDA
  2820                           fsr2l	equ	0xFD9
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function _ScanWithRange *****************
  2824 ;; Defined at:
  2825 ;;		line 98 in file "Movement.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  mL              2   34[BANK0 ] PTR struct DC_motor
  2828 ;;		 -> main@mL(9), 
  2829 ;;  mR              2   36[BANK0 ] PTR struct DC_motor
  2830 ;;		 -> main@mR(9), 
  2831 ;;  loops           2   38[BANK0 ] int 
  2832 ;;  MoveTime        2   40[BANK0 ] PTR int 
  2833 ;;		 -> main@MoveTime(200), 
  2834 ;;  Move            2   42[BANK0 ] PTR unsigned char 
  2835 ;;		 -> main@Move(1), 
  2836 ;;  MoveType        2   44[BANK0 ] PTR unsigned char 
  2837 ;;		 -> main@MoveType(100), 
  2838 ;;  RFID_Read       2   46[BANK0 ] PTR unsigned char 
  2839 ;;		 -> RFID_Read(1), 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  buf            40   53[BANK0 ] unsigned char [40]
  2842 ;;  SensorResult    4  103[BANK0 ] unsigned int [2]
  2843 ;;  RightFlag       2  107[BANK0 ] unsigned int 
  2844 ;;  LeftFlag        2  100[BANK0 ] unsigned int 
  2845 ;;  DirectionFou    2   97[BANK0 ] const unsigned int 
  2846 ;;  i               2   95[BANK0 ] unsigned int 
  2847 ;;  n               2   93[BANK0 ] unsigned int 
  2848 ;;  TimeAboveThr    1  102[BANK0 ] unsigned char 
  2849 ;;  power           1   99[BANK0 ] const unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      unsigned char 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2859 ;;      Params:         0      14       0       0
  2860 ;;      Locals:         0      56       0       0
  2861 ;;      Temps:          0       5       0       0
  2862 ;;      Totals:         0      75       0       0
  2863 ;;Total ram usage:       75 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    7
  2866 ;; This function calls:
  2867 ;;		_LCD_String
  2868 ;;		_SendLCD
  2869 ;;		_SetLine
  2870 ;;		_delay_tenth_s
  2871 ;;		_grabLeftIR
  2872 ;;		_grabRightIR
  2873 ;;		_sprintf
  2874 ;;		_stop
  2875 ;;		_turnLeft
  2876 ;;		_turnRight
  2877 ;; This function is called by:
  2878 ;;		_main
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text9
  2883  0008E0                     __ptext9:
  2884                           	opt stack 0
  2885  0008E0                     _ScanWithRange:
  2886                           	opt stack 23
  2887                           
  2888                           ;Movement.c: 102: unsigned int SensorResult[2]={0,0};
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;incstack = 0
  2892  0008E0  C02C  F0C7         	movff	ScanWithRange@F3553,ScanWithRange@SensorResult
  2893  0008E4  C02D  F0C8         	movff	ScanWithRange@F3553+1,ScanWithRange@SensorResult+1
  2894  0008E8  C02E  F0C9         	movff	ScanWithRange@F3553+2,ScanWithRange@SensorResult+2
  2895  0008EC  C02F  F0CA         	movff	ScanWithRange@F3553+3,ScanWithRange@SensorResult+3
  2896                           
  2897                           ;Movement.c: 103: unsigned int LeftFlag=0;
  2898  0008F0  0E00               	movlw	0
  2899  0008F2  0100               	movlb	0	; () banked
  2900  0008F4  6FC5               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  2901  0008F6  0E00               	movlw	0
  2902  0008F8  6FC4               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2903                           
  2904                           ;Movement.c: 104: unsigned int RightFlag=0;
  2905  0008FA  0E00               	movlw	0
  2906  0008FC  6FCC               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  2907  0008FE  0E00               	movlw	0
  2908  000900  6FCB               	movwf	ScanWithRange@RightFlag& (0+255),b
  2909                           
  2910                           ;Movement.c: 105: char buf[40];
  2911                           ;Movement.c: 106: unsigned int i=0;
  2912  000902  0E00               	movlw	0
  2913  000904  6FC0               	movwf	(ScanWithRange@i+1)& (0+255),b
  2914  000906  0E00               	movlw	0
  2915  000908  6FBF               	movwf	ScanWithRange@i& (0+255),b
  2916                           
  2917                           ;Movement.c: 107: unsigned int n=0;
  2918  00090A  0E00               	movlw	0
  2919  00090C  6FBE               	movwf	(ScanWithRange@n+1)& (0+255),b
  2920  00090E  0E00               	movlw	0
  2921  000910  6FBD               	movwf	ScanWithRange@n& (0+255),b
  2922                           
  2923                           ;Movement.c: 108: unsigned char TimeAboveThreshold=0;
  2924  000912  0E00               	movlw	0
  2925  000914  6FC6               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2926                           
  2927                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  2928  000916  0E03               	movlw	3
  2929  000918  6FC2               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2930  00091A  0EE8               	movlw	232
  2931  00091C  6FC1               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2932                           
  2933                           ;Movement.c: 112: const unsigned char power=40;
  2934  00091E  0E28               	movlw	40
  2935  000920  6FC3               	movwf	ScanWithRange@power& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;Movement.c: 122: *Move++;
  2939  000922  4B8A               	infsnz	ScanWithRange@Move& (0+255),f,b
  2940  000924  2B8B               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;Movement.c: 123: (MoveType[*Move]) = 2;
  2944  000926  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  2945  00092A  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  2946  00092E  50DF               	movf	indf2,w,c
  2947  000930  6F90               	movwf	??_ScanWithRange& (0+255),b
  2948  000932  5190               	movf	??_ScanWithRange& (0+255),w,b
  2949  000934  0D01               	mullw	1
  2950  000936  50F3               	movf	prodl,w,c
  2951  000938  258C               	addwf	ScanWithRange@MoveType& (0+255),w,b
  2952  00093A  6ED9               	movwf	fsr2l,c
  2953  00093C  50F4               	movf	prodh,w,c
  2954  00093E  218D               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  2955  000940  6EDA               	movwf	fsr2h,c
  2956  000942  0E02               	movlw	2
  2957  000944  6EDF               	movwf	indf2,c
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;Movement.c: 124: (MoveTime[*Move]) = -3;
  2961  000946  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  2962  00094A  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  2963  00094E  50DF               	movf	indf2,w,c
  2964  000950  6F90               	movwf	??_ScanWithRange& (0+255),b
  2965  000952  5190               	movf	??_ScanWithRange& (0+255),w,b
  2966  000954  0D02               	mullw	2
  2967  000956  50F3               	movf	prodl,w,c
  2968  000958  2588               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  2969  00095A  6ED9               	movwf	fsr2l,c
  2970  00095C  50F4               	movf	prodh,w,c
  2971  00095E  2189               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  2972  000960  6EDA               	movwf	fsr2h,c
  2973  000962  0EFD               	movlw	253
  2974  000964  6EDE               	movwf	postinc2,c
  2975  000966  0EFF               	movlw	255
  2976  000968  6EDD               	movwf	postdec2,c
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;Movement.c: 126: turnLeft(mL,mR, 100);
  2980  00096A  C082  F07D         	movff	ScanWithRange@mL,turnLeft@mL
  2981  00096E  C083  F07E         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2982  000972  C084  F07F         	movff	ScanWithRange@mR,turnLeft@mR
  2983  000976  C085  F080         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2984  00097A  0E64               	movlw	100
  2985  00097C  6F81               	movwf	turnLeft@power& (0+255),b
  2986  00097E  EC9D  F00C         	call	_turnLeft	;wreg free
  2987                           
  2988                           ;Movement.c: 127: delay_tenth_s(3);
  2989  000982  0E03               	movlw	3
  2990  000984  EC40  F00C         	call	_delay_tenth_s
  2991                           
  2992                           ;Movement.c: 128: stop(mL,mR);
  2993  000988  C082  F077         	movff	ScanWithRange@mL,stop@mL
  2994  00098C  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  2995  000990  C084  F079         	movff	ScanWithRange@mR,stop@mR
  2996  000994  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  2997  000998  EC7F  F00A         	call	_stop	;wreg free
  2998                           
  2999                           ;Movement.c: 131: turnRight(mL,mR, power);
  3000  00099C  C082  F07D         	movff	ScanWithRange@mL,turnRight@mL
  3001  0009A0  C083  F07E         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3002  0009A4  C084  F07F         	movff	ScanWithRange@mR,turnRight@mR
  3003  0009A8  C085  F080         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3004  0009AC  C0C3  F081         	movff	ScanWithRange@power,turnRight@power
  3005  0009B0  EC7F  F00C         	call	_turnRight	;wreg free
  3006                           
  3007                           ;Movement.c: 134: TMR0L = 0;
  3008  0009B4  0E00               	movlw	0
  3009  0009B6  6ED6               	movwf	4054,c	;volatile
  3010                           
  3011                           ;Movement.c: 135: TMR0H = 0;
  3012  0009B8  0E00               	movlw	0
  3013  0009BA  6ED7               	movwf	4055,c	;volatile
  3014                           
  3015                           ;Movement.c: 136: T0CONbits.TMR0ON=1;
  3016  0009BC  8ED5               	bsf	4053,7,c	;volatile
  3017                           
  3018                           ;Movement.c: 138: for (i=1; i<=loops; i++) {
  3019  0009BE  0E00               	movlw	0
  3020  0009C0  0100               	movlb	0	; () banked
  3021  0009C2  6FC0               	movwf	(ScanWithRange@i+1)& (0+255),b
  3022  0009C4  0E01               	movlw	1
  3023  0009C6  6FBF               	movwf	ScanWithRange@i& (0+255),b
  3024  0009C8  D146               	goto	l219
  3025  0009CA                     
  3026                           ; BSR set to: 0
  3027                           ;Movement.c: 141: SensorResult[0]=grabLeftIR();
  3028                           
  3029                           ; BSR set to: 0
  3030  0009CA  EC86  F00B         	call	_grabLeftIR	;wreg free
  3031  0009CE  C060  F0C7         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3032  0009D2  C061  F0C8         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3033                           
  3034                           ;Movement.c: 142: SensorResult[1]=grabRightIR();
  3035  0009D6  EC49  F00B         	call	_grabRightIR	;wreg free
  3036  0009DA  C060  F0C9         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3037  0009DE  C061  F0CA         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3038                           
  3039                           ;Movement.c: 146: CAP1BUFH=0;
  3040  0009E2  0E00               	movlw	0
  3041  0009E4  6E69               	movwf	3945,c	;volatile
  3042                           
  3043                           ;Movement.c: 147: CAP1BUFL=0;
  3044  0009E6  0E00               	movlw	0
  3045  0009E8  6E68               	movwf	3944,c	;volatile
  3046                           
  3047                           ;Movement.c: 148: CAP2BUFH=0;
  3048  0009EA  0E00               	movlw	0
  3049  0009EC  6E67               	movwf	3943,c	;volatile
  3050                           
  3051                           ;Movement.c: 149: CAP2BUFL=0;
  3052  0009EE  0E00               	movlw	0
  3053  0009F0  6E66               	movwf	3942,c	;volatile
  3054                           
  3055                           ;Movement.c: 153: SendLCD(0b00000001,0);
  3056  0009F2  0E00               	movlw	0
  3057  0009F4  0100               	movlb	0	; () banked
  3058  0009F6  6F64               	movwf	SendLCD@type& (0+255),b
  3059  0009F8  0E01               	movlw	1
  3060  0009FA  ECBB  F00C         	call	_SendLCD
  3061                           
  3062                           ;Movement.c: 154: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3063  0009FE  0E21               	movlw	33
  3064  000A00                     u3327:
  3065  000A00  2EE8               	decfsz	wreg,f,c
  3066  000A02  D7FE               	bra	u3327
  3067  000A04  F000               	nop	
  3068                           
  3069                           ;Movement.c: 155: SendLCD(0b00000010,0);
  3070  000A06  0E00               	movlw	0
  3071  000A08  0100               	movlb	0	; () banked
  3072  000A0A  6F64               	movwf	SendLCD@type& (0+255),b
  3073  000A0C  0E02               	movlw	2
  3074  000A0E  ECBB  F00C         	call	_SendLCD
  3075                           
  3076                           ;Movement.c: 156: _delay((unsigned long)((2)*(8000000/4000.0)));
  3077  000A12  0E06               	movlw	6
  3078  000A14  0100               	movlb	0	; () banked
  3079  000A16  6F90               	movwf	??_ScanWithRange& (0+255),b
  3080  000A18  0E30               	movlw	48
  3081  000A1A                     u3337:
  3082  000A1A  2EE8               	decfsz	wreg,f,c
  3083  000A1C  D7FE               	bra	u3337
  3084  000A1E  2F90               	decfsz	??_ScanWithRange& (0+255),f,b
  3085  000A20  D7FC               	bra	u3337
  3086  000A22  F000               	nop	
  3087                           
  3088                           ;Movement.c: 157: SetLine(1);
  3089  000A24  0E01               	movlw	1
  3090  000A26  ECF3  F00C         	call	_SetLine
  3091                           
  3092                           ;Movement.c: 158: LCD_String("     ScanIR");
  3093  000A2A  0E2D               	movlw	low STR_1
  3094  000A2C  0100               	movlb	0	; () banked
  3095  000A2E  6F66               	movwf	LCD_String@string& (0+255),b
  3096  000A30  0E03               	movlw	high STR_1
  3097  000A32  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  3098  000A34  ECC3  F00B         	call	_LCD_String	;wreg free
  3099                           
  3100                           ;Movement.c: 159: SetLine(2);
  3101  000A38  0E02               	movlw	2
  3102  000A3A  ECF3  F00C         	call	_SetLine
  3103                           
  3104                           ;Movement.c: 160: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3105  000A3E  0E95               	movlw	low ScanWithRange@buf
  3106  000A40  0100               	movlb	0	; () banked
  3107  000A42  6F6C               	movwf	sprintf@sp& (0+255),b
  3108  000A44  0E00               	movlw	high ScanWithRange@buf
  3109  000A46  6F6D               	movwf	(sprintf@sp+1)& (0+255),b
  3110  000A48  0E0C               	movlw	low (STR_6+1)
  3111  000A4A  6F6E               	movwf	sprintf@f& (0+255),b
  3112  000A4C  0E03               	movlw	high (STR_6+1)
  3113  000A4E  6F6F               	movwf	(sprintf@f+1)& (0+255),b
  3114  000A50  C0C7  F070         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3115  000A54  C0C8  F071         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3116  000A58  C0C9  F072         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3117  000A5C  C0CA  F073         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3118  000A60  EC70  F006         	call	_sprintf	;wreg free
  3119                           
  3120                           ;Movement.c: 161: LCD_String(buf);
  3121  000A64  0E95               	movlw	low ScanWithRange@buf
  3122  000A66  0100               	movlb	0	; () banked
  3123  000A68  6F66               	movwf	LCD_String@string& (0+255),b
  3124  000A6A  0E00               	movlw	high ScanWithRange@buf
  3125  000A6C  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  3126  000A6E  ECC3  F00B         	call	_LCD_String	;wreg free
  3127                           
  3128                           ;Movement.c: 163: if (SensorResult[1]>DirectionFoundThreshold) {
  3129  000A72  0100               	movlb	0	; () banked
  3130  000A74  51C9               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3131  000A76  5DC1               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3132  000A78  51CA               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3133  000A7A  59C2               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3134  000A7C  B0D8               	btfsc	status,0,c
  3135  000A7E  D009               	goto	l221
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;Movement.c: 164: RightFlag= (TMR0H<<8)+TMR0L;
  3139  000A80  50D7               	movf	4055,w,c	;volatile
  3140  000A82  6F91               	movwf	(??_ScanWithRange+1)& (0+255),b
  3141  000A84  6B90               	clrf	??_ScanWithRange& (0+255),b
  3142  000A86  50D6               	movf	4054,w,c	;volatile
  3143  000A88  2590               	addwf	??_ScanWithRange& (0+255),w,b
  3144  000A8A  6FCB               	movwf	ScanWithRange@RightFlag& (0+255),b
  3145  000A8C  0E00               	movlw	0
  3146  000A8E  2191               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3147  000A90  6FCC               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3148  000A92                     l221:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;Movement.c: 165: }
  3152                           ;Movement.c: 167: if (SensorResult[0]>DirectionFoundThreshold) {
  3153  000A92  51C7               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3154  000A94  5DC1               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3155  000A96  51C8               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3156  000A98  59C2               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3157  000A9A  B0D8               	btfsc	status,0,c
  3158  000A9C  D009               	goto	l222
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;Movement.c: 168: LeftFlag=(TMR0H<<8)+TMR0L;
  3162  000A9E  50D7               	movf	4055,w,c	;volatile
  3163  000AA0  6F91               	movwf	(??_ScanWithRange+1)& (0+255),b
  3164  000AA2  6B90               	clrf	??_ScanWithRange& (0+255),b
  3165  000AA4  50D6               	movf	4054,w,c	;volatile
  3166  000AA6  2590               	addwf	??_ScanWithRange& (0+255),w,b
  3167  000AA8  6FC4               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3168  000AAA  0E00               	movlw	0
  3169  000AAC  2191               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3170  000AAE  6FC5               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3171  000AB0                     l222:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;Movement.c: 169: }
  3175                           ;Movement.c: 176: if (LeftFlag>0) {
  3176  000AB0  51C4               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3177  000AB2  11C5               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3178  000AB4  B4D8               	btfsc	status,2,c
  3179  000AB6  D0C3               	goto	l229
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;Movement.c: 179: if (RightFlag>0) {
  3183  000AB8  51CB               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3184  000ABA  11CC               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3185  000ABC  B4D8               	btfsc	status,2,c
  3186  000ABE  D074               	goto	l224
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;Movement.c: 180: TimeAboveThreshold = LeftFlag - RightFlag;
  3190  000AC0  51CB               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3191  000AC2  0800               	sublw	0
  3192  000AC4  25C4               	addwf	ScanWithRange@LeftFlag& (0+255),w,b
  3193  000AC6  6FC6               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;Movement.c: 181: TMR0L = 0;
  3197  000AC8  0E00               	movlw	0
  3198  000ACA  6ED6               	movwf	4054,c	;volatile
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;Movement.c: 182: TMR0H = 0;
  3202  000ACC  0E00               	movlw	0
  3203  000ACE  6ED7               	movwf	4055,c	;volatile
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;Movement.c: 183: stop(mL,mR);
  3207  000AD0  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3208  000AD4  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3209  000AD8  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3210  000ADC  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3211  000AE0  EC7F  F00A         	call	_stop	;wreg free
  3212                           
  3213                           ;Movement.c: 184: while (((TMR0H<<8)+TMR0L)<(TimeAboveThreshold>>1)) {
  3214  000AE4  D00C               	goto	l225
  3215  000AE6                     
  3216                           ;Movement.c: 185: turnLeft(mL,mR, power);
  3217  000AE6  C082  F07D         	movff	ScanWithRange@mL,turnLeft@mL
  3218  000AEA  C083  F07E         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3219  000AEE  C084  F07F         	movff	ScanWithRange@mR,turnLeft@mR
  3220  000AF2  C085  F080         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3221  000AF6  C0C3  F081         	movff	ScanWithRange@power,turnLeft@power
  3222  000AFA  EC9D  F00C         	call	_turnLeft	;wreg free
  3223  000AFE                     l225:
  3224  000AFE  0100               	movlb	0	; () banked
  3225  000B00  90D8               	bcf	status,0,c
  3226  000B02  31C6               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3227  000B04  6F90               	movwf	??_ScanWithRange& (0+255),b
  3228  000B06  6B91               	clrf	(??_ScanWithRange+1)& (0+255),b
  3229  000B08  50D6               	movf	4054,w,c	;volatile
  3230  000B0A  CFD7 F092          	movff	4055,??_ScanWithRange+2	;volatile
  3231  000B0E  6B93               	clrf	(??_ScanWithRange+3)& (0+255),b
  3232  000B10  C092  F093         	movff	??_ScanWithRange+2,??_ScanWithRange+3
  3233  000B14  6B92               	clrf	(??_ScanWithRange+2)& (0+255),b
  3234  000B16  2792               	addwf	(??_ScanWithRange+2)& (0+255),f,b
  3235  000B18  0E00               	movlw	0
  3236  000B1A  2393               	addwfc	(??_ScanWithRange+3)& (0+255),f,b
  3237  000B1C  5190               	movf	??_ScanWithRange& (0+255),w,b
  3238  000B1E  5D92               	subwf	(??_ScanWithRange+2)& (0+255),w,b
  3239  000B20  5193               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3240  000B22  0A80               	xorlw	128
  3241  000B24  6F94               	movwf	(??_ScanWithRange+4)& (0+255),b
  3242  000B26  5191               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3243  000B28  0A80               	xorlw	128
  3244  000B2A  5994               	subwfb	(??_ScanWithRange+4)& (0+255),w,b
  3245  000B2C  A0D8               	btfss	status,0,c
  3246  000B2E  D7DB               	goto	l226
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;Movement.c: 186: }
  3250                           ;Movement.c: 187: T0CONbits.TMR0ON=0;
  3251  000B30  9ED5               	bcf	4053,7,c	;volatile
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;Movement.c: 188: stop(mL,mR);
  3255  000B32  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3256  000B36  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3257  000B3A  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3258  000B3E  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3259  000B42  EC7F  F00A         	call	_stop	;wreg free
  3260                           
  3261                           ;Movement.c: 190: *Move++;
  3262  000B46  0100               	movlb	0	; () banked
  3263  000B48  4B8A               	infsnz	ScanWithRange@Move& (0+255),f,b
  3264  000B4A  2B8B               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;Movement.c: 191: (MoveType[*Move]) = 1;
  3268  000B4C  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3269  000B50  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3270  000B54  50DF               	movf	indf2,w,c
  3271  000B56  6F90               	movwf	??_ScanWithRange& (0+255),b
  3272  000B58  5190               	movf	??_ScanWithRange& (0+255),w,b
  3273  000B5A  0D01               	mullw	1
  3274  000B5C  50F3               	movf	prodl,w,c
  3275  000B5E  258C               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3276  000B60  6ED9               	movwf	fsr2l,c
  3277  000B62  50F4               	movf	prodh,w,c
  3278  000B64  218D               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3279  000B66  6EDA               	movwf	fsr2h,c
  3280  000B68  0E01               	movlw	1
  3281  000B6A  6EDF               	movwf	indf2,c
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;Movement.c: 192: (MoveTime[*Move]) = RightFlag + (TimeAboveThreshold>>1);
  3285  000B6C  C0C6  F090         	movff	ScanWithRange@TimeAboveThreshold,??_ScanWithRange
  3286  000B70  90D8               	bcf	status,0,c
  3287  000B72  3390               	rrcf	??_ScanWithRange& (0+255),f,b
  3288  000B74  5190               	movf	??_ScanWithRange& (0+255),w,b
  3289  000B76  25CB               	addwf	ScanWithRange@RightFlag& (0+255),w,b
  3290  000B78  6F91               	movwf	(??_ScanWithRange+1)& (0+255),b
  3291  000B7A  0E00               	movlw	0
  3292  000B7C  21CC               	addwfc	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3293  000B7E  6F92               	movwf	(??_ScanWithRange+2)& (0+255),b
  3294  000B80  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3295  000B84  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3296  000B88  50DF               	movf	indf2,w,c
  3297  000B8A  6F93               	movwf	(??_ScanWithRange+3)& (0+255),b
  3298  000B8C  5193               	movf	(??_ScanWithRange+3)& (0+255),w,b
  3299  000B8E  0D02               	mullw	2
  3300  000B90  50F3               	movf	prodl,w,c
  3301  000B92  2588               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3302  000B94  6ED9               	movwf	fsr2l,c
  3303  000B96  50F4               	movf	prodh,w,c
  3304  000B98  2189               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3305  000B9A  6EDA               	movwf	fsr2h,c
  3306  000B9C  C091  FFDE         	movff	??_ScanWithRange+1,postinc2
  3307  000BA0  C092  FFDD         	movff	??_ScanWithRange+2,postdec2
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;Movement.c: 194: return 2;
  3311  000BA4  0E02               	movlw	2
  3312                           
  3313                           ; BSR set to: 0
  3314  000BA6  0012               	return	
  3315  000BA8                     l224:
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;Movement.c: 197: *Move++;
  3319                           
  3320                           ; BSR set to: 0
  3321  000BA8  4B8A               	infsnz	ScanWithRange@Move& (0+255),f,b
  3322  000BAA  2B8B               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;Movement.c: 198: (MoveType[*Move]) = 2;
  3326  000BAC  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3327  000BB0  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3328  000BB4  50DF               	movf	indf2,w,c
  3329  000BB6  6F90               	movwf	??_ScanWithRange& (0+255),b
  3330  000BB8  5190               	movf	??_ScanWithRange& (0+255),w,b
  3331  000BBA  0D01               	mullw	1
  3332  000BBC  50F3               	movf	prodl,w,c
  3333  000BBE  258C               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3334  000BC0  6ED9               	movwf	fsr2l,c
  3335  000BC2  50F4               	movf	prodh,w,c
  3336  000BC4  218D               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3337  000BC6  6EDA               	movwf	fsr2h,c
  3338  000BC8  0E02               	movlw	2
  3339  000BCA  6EDF               	movwf	indf2,c
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;Movement.c: 199: (MoveTime[*Move]) = 1;
  3343  000BCC  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3344  000BD0  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3345  000BD4  50DF               	movf	indf2,w,c
  3346  000BD6  6F90               	movwf	??_ScanWithRange& (0+255),b
  3347  000BD8  5190               	movf	??_ScanWithRange& (0+255),w,b
  3348  000BDA  0D02               	mullw	2
  3349  000BDC  50F3               	movf	prodl,w,c
  3350  000BDE  2588               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3351  000BE0  6ED9               	movwf	fsr2l,c
  3352  000BE2  50F4               	movf	prodh,w,c
  3353  000BE4  2189               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3354  000BE6  6EDA               	movwf	fsr2h,c
  3355  000BE8  0E01               	movlw	1
  3356  000BEA  6EDE               	movwf	postinc2,c
  3357  000BEC  0E00               	movlw	0
  3358  000BEE  6EDD               	movwf	postdec2,c
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;Movement.c: 200: stop(mL,mR);
  3362  000BF0  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3363  000BF4  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3364  000BF8  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3365  000BFC  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3366  000C00  EC7F  F00A         	call	_stop	;wreg free
  3367                           
  3368                           ;Movement.c: 201: turnLeft(mL,mR,100);
  3369  000C04  C082  F07D         	movff	ScanWithRange@mL,turnLeft@mL
  3370  000C08  C083  F07E         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3371  000C0C  C084  F07F         	movff	ScanWithRange@mR,turnLeft@mR
  3372  000C10  C085  F080         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3373  000C14  0E64               	movlw	100
  3374  000C16  0100               	movlb	0	; () banked
  3375  000C18  6F81               	movwf	turnLeft@power& (0+255),b
  3376  000C1A  EC9D  F00C         	call	_turnLeft	;wreg free
  3377                           
  3378                           ;Movement.c: 202: delay_tenth_s(1);
  3379  000C1E  0E01               	movlw	1
  3380  000C20  EC40  F00C         	call	_delay_tenth_s
  3381                           
  3382                           ;Movement.c: 203: T0CONbits.TMR0ON=0;
  3383  000C24  9ED5               	bcf	4053,7,c	;volatile
  3384                           
  3385                           ;Movement.c: 204: stop(mL,mR);
  3386  000C26  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3387  000C2A  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3388  000C2E  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3389  000C32  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3390  000C36  EC7F  F00A         	call	_stop	;wreg free
  3391                           
  3392                           ;Movement.c: 205: return 2;
  3393  000C3A  0E02               	movlw	2
  3394  000C3C  0012               	return	
  3395  000C3E                     l229:
  3396                           
  3397                           ;Movement.c: 206: }
  3398                           ;Movement.c: 207: }
  3399                           ;Movement.c: 209: if (*RFID_Read==1) {
  3400  000C3E  C08E  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3401  000C42  C08F  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3402  000C46  04DE               	decf	postinc2,w,c
  3403  000C48  A4D8               	btfss	status,2,c
  3404  000C4A  D002               	goto	l230
  3405                           
  3406                           ;Movement.c: 210: return 2;
  3407  000C4C  0E02               	movlw	2
  3408  000C4E  0012               	return	
  3409  000C50                     l230:
  3410  000C50  0100               	movlb	0	; () banked
  3411  000C52  4BBF               	infsnz	ScanWithRange@i& (0+255),f,b
  3412  000C54  2BC0               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3413  000C56                     l219:
  3414                           
  3415                           ; BSR set to: 0
  3416                           
  3417                           ; BSR set to: 0
  3418  000C56  51BF               	movf	ScanWithRange@i& (0+255),w,b
  3419  000C58  5D86               	subwf	ScanWithRange@loops& (0+255),w,b
  3420  000C5A  51C0               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3421  000C5C  5987               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3422  000C5E  B0D8               	btfsc	status,0,c
  3423  000C60  D6B4               	goto	l220
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;Movement.c: 211: }
  3427                           ;Movement.c: 212: }
  3428                           ;Movement.c: 215: *Move++;
  3429                           
  3430                           ; BSR set to: 0
  3431  000C62  4B8A               	infsnz	ScanWithRange@Move& (0+255),f,b
  3432  000C64  2B8B               	incf	(ScanWithRange@Move+1)& (0+255),f,b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;Movement.c: 216: (MoveType[*Move]) = 2;
  3436  000C66  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3437  000C6A  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3438  000C6E  50DF               	movf	indf2,w,c
  3439  000C70  6F90               	movwf	??_ScanWithRange& (0+255),b
  3440  000C72  5190               	movf	??_ScanWithRange& (0+255),w,b
  3441  000C74  0D01               	mullw	1
  3442  000C76  50F3               	movf	prodl,w,c
  3443  000C78  258C               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3444  000C7A  6ED9               	movwf	fsr2l,c
  3445  000C7C  50F4               	movf	prodh,w,c
  3446  000C7E  218D               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3447  000C80  6EDA               	movwf	fsr2h,c
  3448  000C82  0E02               	movlw	2
  3449  000C84  6EDF               	movwf	indf2,c
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;Movement.c: 217: (MoveTime[*Move]) = -2;
  3453  000C86  C08A  FFD9         	movff	ScanWithRange@Move,fsr2l
  3454  000C8A  C08B  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3455  000C8E  50DF               	movf	indf2,w,c
  3456  000C90  6F90               	movwf	??_ScanWithRange& (0+255),b
  3457  000C92  5190               	movf	??_ScanWithRange& (0+255),w,b
  3458  000C94  0D02               	mullw	2
  3459  000C96  50F3               	movf	prodl,w,c
  3460  000C98  2588               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3461  000C9A  6ED9               	movwf	fsr2l,c
  3462  000C9C  50F4               	movf	prodh,w,c
  3463  000C9E  2189               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3464  000CA0  6EDA               	movwf	fsr2h,c
  3465  000CA2  0EFE               	movlw	254
  3466  000CA4  6EDE               	movwf	postinc2,c
  3467  000CA6  0EFF               	movlw	255
  3468  000CA8  6EDD               	movwf	postdec2,c
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;Movement.c: 218: turnRight(mL,mR, 100);
  3472  000CAA  C082  F07D         	movff	ScanWithRange@mL,turnRight@mL
  3473  000CAE  C083  F07E         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3474  000CB2  C084  F07F         	movff	ScanWithRange@mR,turnRight@mR
  3475  000CB6  C085  F080         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3476  000CBA  0E64               	movlw	100
  3477  000CBC  6F81               	movwf	turnRight@power& (0+255),b
  3478  000CBE  EC7F  F00C         	call	_turnRight	;wreg free
  3479                           
  3480                           ;Movement.c: 219: delay_tenth_s(2);
  3481  000CC2  0E02               	movlw	2
  3482  000CC4  EC40  F00C         	call	_delay_tenth_s
  3483                           
  3484                           ;Movement.c: 220: stop(mL,mR);
  3485  000CC8  C082  F077         	movff	ScanWithRange@mL,stop@mL
  3486  000CCC  C083  F078         	movff	ScanWithRange@mL+1,stop@mL+1
  3487  000CD0  C084  F079         	movff	ScanWithRange@mR,stop@mR
  3488  000CD4  C085  F07A         	movff	ScanWithRange@mR+1,stop@mR+1
  3489  000CD8  EC7F  F00A         	call	_stop	;wreg free
  3490                           
  3491                           ;Movement.c: 221: return -1;
  3492  000CDC  0EFF               	movlw	255
  3493  000CDE  0012               	return	
  3494  000CE0                     __end_of_ScanWithRange:
  3495                           	opt stack 0
  3496                           tblptru	equ	0xFF8
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           postinc0	equ	0xFEE
  3501                           wreg	equ	0xFE8
  3502                           indf1	equ	0xFE7
  3503                           fsr1h	equ	0xFE2
  3504                           fsr1l	equ	0xFE1
  3505                           indf2	equ	0xFDF
  3506                           postinc2	equ	0xFDE
  3507                           postdec2	equ	0xFDD
  3508                           plusw2	equ	0xFDB
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _turnRight *****************
  3514 ;; Defined at:
  3515 ;;		line 98 in file "dc_motor.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  mL              2   29[BANK0 ] PTR struct DC_motor
  3518 ;;		 -> main@mL(9), 
  3519 ;;  mR              2   31[BANK0 ] PTR struct DC_motor
  3520 ;;		 -> main@mR(9), 
  3521 ;;  power           1   33[BANK0 ] unsigned char 
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;		None
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3533 ;;      Params:         0       5       0       0
  3534 ;;      Locals:         0       0       0       0
  3535 ;;      Temps:          0       0       0       0
  3536 ;;      Totals:         0       5       0       0
  3537 ;;Total ram usage:        5 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:    6
  3540 ;; This function calls:
  3541 ;;		_fullSpeedAhead
  3542 ;; This function is called by:
  3543 ;;		_ScanWithRange
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text10
  3549  0018FE                     __ptext10:
  3550                           	opt stack 0
  3551  0018FE                     _turnRight:
  3552                           	opt stack 24
  3553                           
  3554                           ;dc_motor.c: 102: mL->direction=0;
  3555                           
  3556                           ;incstack = 0
  3557  0018FE  0100               	movlb	0	; () banked
  3558  001900  EE20 F001          	lfsr	2,1
  3559  001904  517D               	movf	turnRight@mL& (0+255),w,b
  3560  001906  26D9               	addwf	fsr2l,f,c
  3561  001908  517E               	movf	(turnRight@mL+1)& (0+255),w,b
  3562  00190A  22DA               	addwfc	fsr2h,f,c
  3563  00190C  0E00               	movlw	0
  3564  00190E  6EDF               	movwf	indf2,c
  3565                           
  3566                           ;dc_motor.c: 103: mR->direction=1;
  3567  001910  EE20 F001          	lfsr	2,1
  3568  001914  517F               	movf	turnRight@mR& (0+255),w,b
  3569  001916  26D9               	addwf	fsr2l,f,c
  3570  001918  5180               	movf	(turnRight@mR+1)& (0+255),w,b
  3571  00191A  22DA               	addwfc	fsr2h,f,c
  3572  00191C  0E01               	movlw	1
  3573  00191E  6EDF               	movwf	indf2,c
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3577  001920  C07D  F077         	movff	turnRight@mL,fullSpeedAhead@mL
  3578  001924  C07E  F078         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3579  001928  C07F  F079         	movff	turnRight@mR,fullSpeedAhead@mR
  3580  00192C  C080  F07A         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3581  001930  C081  F07B         	movff	turnRight@power,fullSpeedAhead@power
  3582  001934  EC0B  F00B         	call	_fullSpeedAhead	;wreg free
  3583  001938  0012               	return		;funcret
  3584  00193A                     __end_of_turnRight:
  3585                           	opt stack 0
  3586                           tblptru	equ	0xFF8
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           intcon	equ	0xFF2
  3590                           postinc0	equ	0xFEE
  3591                           wreg	equ	0xFE8
  3592                           indf1	equ	0xFE7
  3593                           fsr1h	equ	0xFE2
  3594                           fsr1l	equ	0xFE1
  3595                           indf2	equ	0xFDF
  3596                           postinc2	equ	0xFDE
  3597                           postdec2	equ	0xFDD
  3598                           plusw2	equ	0xFDB
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _turnLeft *****************
  3604 ;; Defined at:
  3605 ;;		line 87 in file "dc_motor.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  mL              2   29[BANK0 ] PTR struct DC_motor
  3608 ;;		 -> main@mL(9), 
  3609 ;;  mR              2   31[BANK0 ] PTR struct DC_motor
  3610 ;;		 -> main@mR(9), 
  3611 ;;  power           1   33[BANK0 ] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;		None
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      void 
  3616 ;; Registers used:
  3617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3623 ;;      Params:         0       5       0       0
  3624 ;;      Locals:         0       0       0       0
  3625 ;;      Temps:          0       0       0       0
  3626 ;;      Totals:         0       5       0       0
  3627 ;;Total ram usage:        5 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    6
  3630 ;; This function calls:
  3631 ;;		_fullSpeedAhead
  3632 ;; This function is called by:
  3633 ;;		_ScanWithRange
  3634 ;;		_main
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text11
  3639  00193A                     __ptext11:
  3640                           	opt stack 0
  3641  00193A                     _turnLeft:
  3642                           	opt stack 24
  3643                           
  3644                           ;dc_motor.c: 91: mL->direction=1;
  3645                           
  3646                           ;incstack = 0
  3647  00193A  0100               	movlb	0	; () banked
  3648  00193C  EE20 F001          	lfsr	2,1
  3649  001940  517D               	movf	turnLeft@mL& (0+255),w,b
  3650  001942  26D9               	addwf	fsr2l,f,c
  3651  001944  517E               	movf	(turnLeft@mL+1)& (0+255),w,b
  3652  001946  22DA               	addwfc	fsr2h,f,c
  3653  001948  0E01               	movlw	1
  3654  00194A  6EDF               	movwf	indf2,c
  3655                           
  3656                           ;dc_motor.c: 92: mR->direction=0;
  3657  00194C  EE20 F001          	lfsr	2,1
  3658  001950  517F               	movf	turnLeft@mR& (0+255),w,b
  3659  001952  26D9               	addwf	fsr2l,f,c
  3660  001954  5180               	movf	(turnLeft@mR+1)& (0+255),w,b
  3661  001956  22DA               	addwfc	fsr2h,f,c
  3662  001958  0E00               	movlw	0
  3663  00195A  6EDF               	movwf	indf2,c
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3667  00195C  C07D  F077         	movff	turnLeft@mL,fullSpeedAhead@mL
  3668  001960  C07E  F078         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3669  001964  C07F  F079         	movff	turnLeft@mR,fullSpeedAhead@mR
  3670  001968  C080  F07A         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3671  00196C  C081  F07B         	movff	turnLeft@power,fullSpeedAhead@power
  3672  001970  EC0B  F00B         	call	_fullSpeedAhead	;wreg free
  3673  001974  0012               	return		;funcret
  3674  001976                     __end_of_turnLeft:
  3675                           	opt stack 0
  3676                           tblptru	equ	0xFF8
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           intcon	equ	0xFF2
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           indf1	equ	0xFE7
  3683                           fsr1h	equ	0xFE2
  3684                           fsr1l	equ	0xFE1
  3685                           indf2	equ	0xFDF
  3686                           postinc2	equ	0xFDE
  3687                           postdec2	equ	0xFDD
  3688                           plusw2	equ	0xFDB
  3689                           fsr2h	equ	0xFDA
  3690                           fsr2l	equ	0xFD9
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _fullSpeedAhead *****************
  3694 ;; Defined at:
  3695 ;;		line 108 in file "dc_motor.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3698 ;;		 -> main@mL(9), 
  3699 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3700 ;;		 -> main@mR(9), 
  3701 ;;  power           1   27[BANK0 ] unsigned char 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3713 ;;      Params:         0       5       0       0
  3714 ;;      Locals:         0       0       0       0
  3715 ;;      Temps:          0       1       0       0
  3716 ;;      Totals:         0       6       0       0
  3717 ;;Total ram usage:        6 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    5
  3720 ;; This function calls:
  3721 ;;		_setMotorPWM
  3722 ;; This function is called by:
  3723 ;;		_turnLeft
  3724 ;;		_turnRight
  3725 ;;		_fullSpeedBack
  3726 ;;		_main
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text12
  3731  001616                     __ptext12:
  3732                           	opt stack 0
  3733  001616                     _fullSpeedAhead:
  3734                           	opt stack 24
  3735                           
  3736                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3737                           
  3738                           ;incstack = 0
  3739  001616  D02B               	goto	l65
  3740  001618                     
  3741                           ;dc_motor.c: 112: if(mL->power<power){
  3742  001618  C077  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3743  00161C  C078  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3744  001620  0100               	movlb	0	; () banked
  3745  001622  517B               	movf	fullSpeedAhead@power& (0+255),w,b
  3746  001624  5CDE               	subwf	postinc2,w,c
  3747  001626  B0D8               	btfsc	status,0,c
  3748  001628  D005               	goto	l67
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;dc_motor.c: 113: mL->power++;
  3752  00162A  C077  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3753  00162E  C078  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3754  001632  2ADF               	incf	indf2,f,c
  3755  001634                     l67:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;dc_motor.c: 114: }
  3759                           ;dc_motor.c: 115: if(mR->power<power){
  3760                           
  3761                           ; BSR set to: 0
  3762  001634  C079  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3763  001638  C07A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3764  00163C  517B               	movf	fullSpeedAhead@power& (0+255),w,b
  3765  00163E  5CDE               	subwf	postinc2,w,c
  3766  001640  B0D8               	btfsc	status,0,c
  3767  001642  D005               	goto	l68
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;dc_motor.c: 116: mR->power++;
  3771  001644  C079  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3772  001648  C07A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3773  00164C  2ADF               	incf	indf2,f,c
  3774  00164E                     l68:
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;dc_motor.c: 117: }
  3778                           ;dc_motor.c: 118: setMotorPWM(mL);
  3779                           
  3780                           ; BSR set to: 0
  3781  00164E  C077  F06E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3782  001652  C078  F06F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3783  001656  ECC1  F007         	call	_setMotorPWM	;wreg free
  3784                           
  3785                           ;dc_motor.c: 119: setMotorPWM(mR);
  3786  00165A  C079  F06E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3787  00165E  C07A  F06F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3788  001662  ECC1  F007         	call	_setMotorPWM	;wreg free
  3789                           
  3790                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3791  001666  0E21               	movlw	33
  3792  001668                     u3347:
  3793  001668  2EE8               	decfsz	wreg,f,c
  3794  00166A  D7FE               	bra	u3347
  3795  00166C  F000               	nop	
  3796  00166E                     l65:
  3797  00166E  C077  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3798  001672  C078  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3799  001676  0100               	movlb	0	; () banked
  3800  001678  517B               	movf	fullSpeedAhead@power& (0+255),w,b
  3801  00167A  5CDE               	subwf	postinc2,w,c
  3802  00167C  A0D8               	btfss	status,0,c
  3803  00167E  D7CC               	goto	l66
  3804                           
  3805                           ; BSR set to: 0
  3806  001680  C079  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3807  001684  C07A  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3808  001688  517B               	movf	fullSpeedAhead@power& (0+255),w,b
  3809  00168A  5CDE               	subwf	postinc2,w,c
  3810  00168C  B0D8               	btfsc	status,0,c
  3811  00168E  0012               	return	
  3812  001690  D7C3               	goto	l66
  3813  001692                     __end_of_fullSpeedAhead:
  3814                           	opt stack 0
  3815                           tblptru	equ	0xFF8
  3816                           prodh	equ	0xFF4
  3817                           prodl	equ	0xFF3
  3818                           intcon	equ	0xFF2
  3819                           postinc0	equ	0xFEE
  3820                           wreg	equ	0xFE8
  3821                           indf1	equ	0xFE7
  3822                           fsr1h	equ	0xFE2
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           plusw2	equ	0xFDB
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _delay_tenth_s *****************
  3833 ;; Defined at:
  3834 ;;		line 32 in file "Movement.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  tenth_second    1    wreg     unsigned char 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  tenth_second    1    1[BANK0 ] unsigned char 
  3839 ;;  i               2    2[BANK0 ] unsigned int 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      void 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3849 ;;      Params:         0       0       0       0
  3850 ;;      Locals:         0       3       0       0
  3851 ;;      Temps:          0       1       0       0
  3852 ;;      Totals:         0       4       0       0
  3853 ;;Total ram usage:        4 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    3
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_ScanWithRange
  3860 ;;		_main
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text13
  3865  001880                     __ptext13:
  3866                           	opt stack 0
  3867  001880                     _delay_tenth_s:
  3868                           	opt stack 27
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;incstack = 0
  3872                           ;delay_tenth_s@tenth_seconds stored from wreg
  3873  001880  0100               	movlb	0	; () banked
  3874  001882  6F61               	movwf	delay_tenth_s@tenth_seconds& (0+255),b
  3875                           
  3876                           ;Movement.c: 33: unsigned int i=0;
  3877  001884  0E00               	movlw	0
  3878  001886  0100               	movlb	0	; () banked
  3879  001888  6F63               	movwf	(delay_tenth_s@i+1)& (0+255),b
  3880  00188A  0E00               	movlw	0
  3881  00188C  6F62               	movwf	delay_tenth_s@i& (0+255),b
  3882                           
  3883                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3884  00188E  0E00               	movlw	0
  3885  001890  6F63               	movwf	(delay_tenth_s@i+1)& (0+255),b
  3886  001892  0E01               	movlw	1
  3887  001894  6F62               	movwf	delay_tenth_s@i& (0+255),b
  3888  001896  D00C               	goto	l204
  3889  001898                     
  3890                           ; BSR set to: 0
  3891                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3892                           
  3893                           ; BSR set to: 0
  3894  001898  0E82               	movlw	130
  3895  00189A  0100               	movlb	0	; () banked
  3896  00189C  6F60               	movwf	??_delay_tenth_s& (0+255),b
  3897  00189E  0EDD               	movlw	221
  3898  0018A0                     u3357:
  3899  0018A0  2EE8               	decfsz	wreg,f,c
  3900  0018A2  D7FE               	bra	u3357
  3901  0018A4  2F60               	decfsz	??_delay_tenth_s& (0+255),f,b
  3902  0018A6  D7FC               	bra	u3357
  3903  0018A8  D000               	nop2	
  3904  0018AA  0100               	movlb	0	; () banked
  3905  0018AC  4B62               	infsnz	delay_tenth_s@i& (0+255),f,b
  3906  0018AE  2B63               	incf	(delay_tenth_s@i+1)& (0+255),f,b
  3907  0018B0                     l204:
  3908                           
  3909                           ; BSR set to: 0
  3910                           
  3911                           ; BSR set to: 0
  3912  0018B0  5161               	movf	delay_tenth_s@tenth_seconds& (0+255),w,b
  3913  0018B2  0D02               	mullw	2
  3914  0018B4  5162               	movf	delay_tenth_s@i& (0+255),w,b
  3915  0018B6  5CF3               	subwf	prodl,w,c
  3916  0018B8  5163               	movf	(delay_tenth_s@i+1)& (0+255),w,b
  3917  0018BA  58F4               	subwfb	prodh,w,c
  3918  0018BC  A0D8               	btfss	status,0,c
  3919  0018BE  0012               	return	
  3920  0018C0  D7EB               	goto	l205
  3921  0018C2                     __end_of_delay_tenth_s:
  3922                           	opt stack 0
  3923                           tblptru	equ	0xFF8
  3924                           prodh	equ	0xFF4
  3925                           prodl	equ	0xFF3
  3926                           intcon	equ	0xFF2
  3927                           postinc0	equ	0xFEE
  3928                           wreg	equ	0xFE8
  3929                           indf1	equ	0xFE7
  3930                           fsr1h	equ	0xFE2
  3931                           fsr1l	equ	0xFE1
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           plusw2	equ	0xFDB
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _ScanIR *****************
  3941 ;; Defined at:
  3942 ;;		line 44 in file "Movement.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;  mL              2   33[BANK0 ] PTR struct DC_motor
  3945 ;;		 -> main@mL(9), 
  3946 ;;  mR              2   35[BANK0 ] PTR struct DC_motor
  3947 ;;		 -> main@mR(9), 
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;  buf            40   38[BANK0 ] unsigned char [40]
  3950 ;;  SensorResult    4   80[BANK0 ] unsigned int [2]
  3951 ;;  DirectionMov    2   78[BANK0 ] const unsigned int 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  1    wreg      unsigned char 
  3954 ;; Registers used:
  3955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3961 ;;      Params:         0       4       0       0
  3962 ;;      Locals:         0      46       0       0
  3963 ;;      Temps:          0       1       0       0
  3964 ;;      Totals:         0      51       0       0
  3965 ;;Total ram usage:       51 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; Hardware stack levels required when called:    7
  3968 ;; This function calls:
  3969 ;;		_LCD_String
  3970 ;;		_SendLCD
  3971 ;;		_SetLine
  3972 ;;		_grabLeftIR
  3973 ;;		_grabRightIR
  3974 ;;		_sprintf
  3975 ;;		_stop
  3976 ;; This function is called by:
  3977 ;;		_main
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           	psect	text14
  3982  0011BC                     __ptext14:
  3983                           	opt stack 0
  3984  0011BC                     _ScanIR:
  3985                           	opt stack 23
  3986                           
  3987                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;incstack = 0
  3991  0011BC  C030  F0B0         	movff	ScanIR@F3540,ScanIR@SensorResult
  3992  0011C0  C031  F0B1         	movff	ScanIR@F3540+1,ScanIR@SensorResult+1
  3993  0011C4  C032  F0B2         	movff	ScanIR@F3540+2,ScanIR@SensorResult+2
  3994  0011C8  C033  F0B3         	movff	ScanIR@F3540+3,ScanIR@SensorResult+3
  3995                           
  3996                           ;Movement.c: 48: char buf[40];
  3997                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=2000;
  3998  0011CC  0E07               	movlw	7
  3999  0011CE  0100               	movlb	0	; () banked
  4000  0011D0  6FAF               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4001  0011D2  0ED0               	movlw	208
  4002  0011D4  6FAE               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4006  0011D6  EC86  F00B         	call	_grabLeftIR	;wreg free
  4007  0011DA  C060  F0B0         	movff	?_grabLeftIR,ScanIR@SensorResult
  4008  0011DE  C061  F0B1         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4009                           
  4010                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4011  0011E2  EC49  F00B         	call	_grabRightIR	;wreg free
  4012  0011E6  C060  F0B2         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4013  0011EA  C061  F0B3         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4014                           
  4015                           ;Movement.c: 60: CAP1BUFH=0;
  4016  0011EE  0E00               	movlw	0
  4017  0011F0  6E69               	movwf	3945,c	;volatile
  4018                           
  4019                           ;Movement.c: 61: CAP1BUFL=0;
  4020  0011F2  0E00               	movlw	0
  4021  0011F4  6E68               	movwf	3944,c	;volatile
  4022                           
  4023                           ;Movement.c: 62: CAP2BUFH=0;
  4024  0011F6  0E00               	movlw	0
  4025  0011F8  6E67               	movwf	3943,c	;volatile
  4026                           
  4027                           ;Movement.c: 63: CAP2BUFL=0;
  4028  0011FA  0E00               	movlw	0
  4029  0011FC  6E66               	movwf	3942,c	;volatile
  4030                           
  4031                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4032  0011FE  0E00               	movlw	0
  4033  001200  0100               	movlb	0	; () banked
  4034  001202  6F64               	movwf	SendLCD@type& (0+255),b
  4035  001204  0E01               	movlw	1
  4036  001206  ECBB  F00C         	call	_SendLCD
  4037                           
  4038                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4039  00120A  0E21               	movlw	33
  4040  00120C                     u3367:
  4041  00120C  2EE8               	decfsz	wreg,f,c
  4042  00120E  D7FE               	bra	u3367
  4043  001210  F000               	nop	
  4044                           
  4045                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4046  001212  0E00               	movlw	0
  4047  001214  0100               	movlb	0	; () banked
  4048  001216  6F64               	movwf	SendLCD@type& (0+255),b
  4049  001218  0E02               	movlw	2
  4050  00121A  ECBB  F00C         	call	_SendLCD
  4051                           
  4052                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4053  00121E  0E06               	movlw	6
  4054  001220  0100               	movlb	0	; () banked
  4055  001222  6F85               	movwf	??_ScanIR& (0+255),b
  4056  001224  0E30               	movlw	48
  4057  001226                     u3377:
  4058  001226  2EE8               	decfsz	wreg,f,c
  4059  001228  D7FE               	bra	u3377
  4060  00122A  2F85               	decfsz	??_ScanIR& (0+255),f,b
  4061  00122C  D7FC               	bra	u3377
  4062  00122E  F000               	nop	
  4063                           
  4064                           ;Movement.c: 70: SetLine(1);
  4065  001230  0E01               	movlw	1
  4066  001232  ECF3  F00C         	call	_SetLine
  4067                           
  4068                           ;Movement.c: 71: LCD_String("     ScanIR");
  4069  001236  0E2D               	movlw	low STR_1
  4070  001238  0100               	movlb	0	; () banked
  4071  00123A  6F66               	movwf	LCD_String@string& (0+255),b
  4072  00123C  0E03               	movlw	high STR_1
  4073  00123E  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  4074  001240  ECC3  F00B         	call	_LCD_String	;wreg free
  4075                           
  4076                           ;Movement.c: 72: SetLine(2);
  4077  001244  0E02               	movlw	2
  4078  001246  ECF3  F00C         	call	_SetLine
  4079                           
  4080                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4081  00124A  0E86               	movlw	low ScanIR@buf
  4082  00124C  0100               	movlb	0	; () banked
  4083  00124E  6F6C               	movwf	sprintf@sp& (0+255),b
  4084  001250  0E00               	movlw	high ScanIR@buf
  4085  001252  6F6D               	movwf	(sprintf@sp+1)& (0+255),b
  4086  001254  0E0C               	movlw	low (STR_6+1)
  4087  001256  6F6E               	movwf	sprintf@f& (0+255),b
  4088  001258  0E03               	movlw	high (STR_6+1)
  4089  00125A  6F6F               	movwf	(sprintf@f+1)& (0+255),b
  4090  00125C  C0B0  F070         	movff	ScanIR@SensorResult,?_sprintf+4
  4091  001260  C0B1  F071         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4092  001264  C0B2  F072         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4093  001268  C0B3  F073         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4094  00126C  EC70  F006         	call	_sprintf	;wreg free
  4095                           
  4096                           ;Movement.c: 74: LCD_String(buf);
  4097  001270  0E86               	movlw	low ScanIR@buf
  4098  001272  0100               	movlb	0	; () banked
  4099  001274  6F66               	movwf	LCD_String@string& (0+255),b
  4100  001276  0E00               	movlw	high ScanIR@buf
  4101  001278  6F67               	movwf	(LCD_String@string+1)& (0+255),b
  4102  00127A  ECC3  F00B         	call	_LCD_String	;wreg free
  4103                           
  4104                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4105                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4106  00127E  0100               	movlb	0	; () banked
  4107  001280  51B0               	movf	ScanIR@SensorResult& (0+255),w,b
  4108  001282  5DAE               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4109  001284  51B1               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4110  001286  59AF               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4111  001288  B0D8               	btfsc	status,0,c
  4112  00128A  D008               	goto	l212
  4113                           
  4114                           ; BSR set to: 0
  4115  00128C  51B2               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4116  00128E  5DAE               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4117  001290  51B3               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4118  001292  59AF               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4119  001294  B0D8               	btfsc	status,0,c
  4120  001296  D002               	goto	l212
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;Movement.c: 80: return 2;
  4124  001298  0E02               	movlw	2
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;Movement.c: 81: } else {
  4128                           
  4129                           ; BSR set to: 0
  4130  00129A  0012               	return	
  4131  00129C                     l212:
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;Movement.c: 82: stop(mL,mR);
  4135                           
  4136                           ; BSR set to: 0
  4137  00129C  C081  F077         	movff	ScanIR@mL,stop@mL
  4138  0012A0  C082  F078         	movff	ScanIR@mL+1,stop@mL+1
  4139  0012A4  C083  F079         	movff	ScanIR@mR,stop@mR
  4140  0012A8  C084  F07A         	movff	ScanIR@mR+1,stop@mR+1
  4141  0012AC  EC7F  F00A         	call	_stop	;wreg free
  4142                           
  4143                           ;Movement.c: 83: return 0;
  4144  0012B0  0E00               	movlw	0
  4145  0012B2  0012               	return	
  4146  0012B4                     __end_of_ScanIR:
  4147                           	opt stack 0
  4148                           tblptru	equ	0xFF8
  4149                           prodh	equ	0xFF4
  4150                           prodl	equ	0xFF3
  4151                           intcon	equ	0xFF2
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           indf1	equ	0xFE7
  4155                           fsr1h	equ	0xFE2
  4156                           fsr1l	equ	0xFE1
  4157                           indf2	equ	0xFDF
  4158                           postinc2	equ	0xFDE
  4159                           postdec2	equ	0xFDD
  4160                           plusw2	equ	0xFDB
  4161                           fsr2h	equ	0xFDA
  4162                           fsr2l	equ	0xFD9
  4163                           status	equ	0xFD8
  4164                           
  4165 ;; *************** function _stop *****************
  4166 ;; Defined at:
  4167 ;;		line 67 in file "dc_motor.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  4170 ;;		 -> main@mL(9), 
  4171 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  4172 ;;		 -> main@mR(9), 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4184 ;;      Params:         0       4       0       0
  4185 ;;      Locals:         0       0       0       0
  4186 ;;      Temps:          0       0       0       0
  4187 ;;      Totals:         0       4       0       0
  4188 ;;Total ram usage:        4 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    5
  4191 ;; This function calls:
  4192 ;;		_setMotorPWM
  4193 ;; This function is called by:
  4194 ;;		_ScanIR
  4195 ;;		_ScanWithRange
  4196 ;;		_main
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text15
  4201  0014FE                     __ptext15:
  4202                           	opt stack 0
  4203  0014FE                     _stop:
  4204                           	opt stack 25
  4205                           
  4206                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  4207                           
  4208                           ;incstack = 0
  4209  0014FE  D028               	goto	l51
  4210  001500                     
  4211                           ;dc_motor.c: 71: if(mL->power>0){
  4212  001500  C077  FFD9         	movff	stop@mL,fsr2l
  4213  001504  C078  FFDA         	movff	stop@mL+1,fsr2h
  4214  001508  50DF               	movf	indf2,w,c
  4215  00150A  B4D8               	btfsc	status,2,c
  4216  00150C  D005               	goto	l53
  4217                           
  4218                           ;dc_motor.c: 72: mL->power--;
  4219  00150E  C077  FFD9         	movff	stop@mL,fsr2l
  4220  001512  C078  FFDA         	movff	stop@mL+1,fsr2h
  4221  001516  06DF               	decf	indf2,f,c
  4222  001518                     l53:
  4223                           
  4224                           ;dc_motor.c: 73: }
  4225                           ;dc_motor.c: 74: if(mR->power>0){
  4226  001518  C079  FFD9         	movff	stop@mR,fsr2l
  4227  00151C  C07A  FFDA         	movff	stop@mR+1,fsr2h
  4228  001520  50DF               	movf	indf2,w,c
  4229  001522  B4D8               	btfsc	status,2,c
  4230  001524  D005               	goto	l54
  4231                           
  4232                           ;dc_motor.c: 75: mR->power--;
  4233  001526  C079  FFD9         	movff	stop@mR,fsr2l
  4234  00152A  C07A  FFDA         	movff	stop@mR+1,fsr2h
  4235  00152E  06DF               	decf	indf2,f,c
  4236  001530                     l54:
  4237                           
  4238                           ;dc_motor.c: 76: }
  4239                           ;dc_motor.c: 77: setMotorPWM(mL);
  4240  001530  C077  F06E         	movff	stop@mL,setMotorPWM@m
  4241  001534  C078  F06F         	movff	stop@mL+1,setMotorPWM@m+1
  4242  001538  ECC1  F007         	call	_setMotorPWM	;wreg free
  4243                           
  4244                           ;dc_motor.c: 78: setMotorPWM(mR);
  4245  00153C  C079  F06E         	movff	stop@mR,setMotorPWM@m
  4246  001540  C07A  F06F         	movff	stop@mR+1,setMotorPWM@m+1
  4247  001544  ECC1  F007         	call	_setMotorPWM	;wreg free
  4248                           
  4249                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4250  001548  0E21               	movlw	33
  4251  00154A                     u3387:
  4252  00154A  2EE8               	decfsz	wreg,f,c
  4253  00154C  D7FE               	bra	u3387
  4254  00154E  F000               	nop	
  4255  001550                     l51:
  4256  001550  C077  FFD9         	movff	stop@mL,fsr2l
  4257  001554  C078  FFDA         	movff	stop@mL+1,fsr2h
  4258  001558  50DF               	movf	indf2,w,c
  4259  00155A  A4D8               	btfss	status,2,c
  4260  00155C  D7D1               	goto	l52
  4261  00155E  C079  FFD9         	movff	stop@mR,fsr2l
  4262  001562  C07A  FFDA         	movff	stop@mR+1,fsr2h
  4263  001566  50DF               	movf	indf2,w,c
  4264  001568  A4D8               	btfss	status,2,c
  4265  00156A  D7CA               	goto	l52
  4266                           
  4267                           ;dc_motor.c: 80: }
  4268                           ;dc_motor.c: 81: mL->direction=1;
  4269  00156C  0100               	movlb	0	; () banked
  4270  00156E  EE20 F001          	lfsr	2,1
  4271  001572  5177               	movf	stop@mL& (0+255),w,b
  4272  001574  26D9               	addwf	fsr2l,f,c
  4273  001576  5178               	movf	(stop@mL+1)& (0+255),w,b
  4274  001578  22DA               	addwfc	fsr2h,f,c
  4275  00157A  0E01               	movlw	1
  4276  00157C  6EDF               	movwf	indf2,c
  4277                           
  4278                           ;dc_motor.c: 82: mR->direction=1;
  4279  00157E  EE20 F001          	lfsr	2,1
  4280  001582  5179               	movf	stop@mR& (0+255),w,b
  4281  001584  26D9               	addwf	fsr2l,f,c
  4282  001586  517A               	movf	(stop@mR+1)& (0+255),w,b
  4283  001588  22DA               	addwfc	fsr2h,f,c
  4284  00158A  0E01               	movlw	1
  4285  00158C  6EDF               	movwf	indf2,c
  4286                           
  4287                           ; BSR set to: 0
  4288  00158E  0012               	return		;funcret
  4289  001590                     __end_of_stop:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon	equ	0xFF2
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           indf1	equ	0xFE7
  4298                           fsr1h	equ	0xFE2
  4299                           fsr1l	equ	0xFE1
  4300                           indf2	equ	0xFDF
  4301                           postinc2	equ	0xFDE
  4302                           postdec2	equ	0xFDD
  4303                           plusw2	equ	0xFDB
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _setMotorPWM *****************
  4309 ;; Defined at:
  4310 ;;		line 26 in file "dc_motor.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  m               2   14[BANK0 ] PTR struct DC_motor
  4313 ;;		 -> main@mR(9), main@mL(9), 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  PWMduty         2   21[BANK0 ] int 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  1    wreg      void 
  4318 ;; Registers used:
  4319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4325 ;;      Params:         0       2       0       0
  4326 ;;      Locals:         0       2       0       0
  4327 ;;      Temps:          0       5       0       0
  4328 ;;      Totals:         0       9       0       0
  4329 ;;Total ram usage:        9 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    4
  4332 ;; This function calls:
  4333 ;;		___awdiv
  4334 ;;		___wmul
  4335 ;; This function is called by:
  4336 ;;		_stop
  4337 ;;		_fullSpeedAhead
  4338 ;;		_setMotorFullSpeed
  4339 ;;		_stopMotor
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           	psect	text16
  4344  000F82                     __ptext16:
  4345                           	opt stack 0
  4346  000F82                     _setMotorPWM:
  4347                           	opt stack 24
  4348                           
  4349                           ;dc_motor.c: 28: int PWMduty;
  4350                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;incstack = 0
  4354  000F82  C06E  FFD9         	movff	setMotorPWM@m,fsr2l
  4355  000F86  C06F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4356  000F8A  50DF               	movf	indf2,w,c
  4357  000F8C  0100               	movlb	0	; () banked
  4358  000F8E  6F70               	movwf	??_setMotorPWM& (0+255),b
  4359  000F90  5170               	movf	??_setMotorPWM& (0+255),w,b
  4360  000F92  6F60               	movwf	___wmul@multiplier& (0+255),b
  4361  000F94  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  4362  000F96  EE20 F007          	lfsr	2,7
  4363  000F9A  516E               	movf	setMotorPWM@m& (0+255),w,b
  4364  000F9C  26D9               	addwf	fsr2l,f,c
  4365  000F9E  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4366  000FA0  22DA               	addwfc	fsr2h,f,c
  4367  000FA2  CFDE F062          	movff	postinc2,___wmul@multiplicand
  4368  000FA6  CFDD F063          	movff	postdec2,___wmul@multiplicand+1
  4369  000FAA  EC3D  F00D         	call	___wmul	;wreg free
  4370  000FAE  C060  F066         	movff	?___wmul,___awdiv@dividend
  4371  000FB2  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
  4372  000FB6  0E00               	movlw	0
  4373  000FB8  0100               	movlb	0	; () banked
  4374  000FBA  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  4375  000FBC  0E64               	movlw	100
  4376  000FBE  6F68               	movwf	___awdiv@divisor& (0+255),b
  4377  000FC0  ECC8  F00A         	call	___awdiv	;wreg free
  4378  000FC4  C066  F075         	movff	?___awdiv,setMotorPWM@PWMduty
  4379  000FC8  C067  F076         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4380                           
  4381                           ;dc_motor.c: 32: if (m->direction)
  4382  000FCC  0100               	movlb	0	; () banked
  4383  000FCE  EE20 F001          	lfsr	2,1
  4384  000FD2  516E               	movf	setMotorPWM@m& (0+255),w,b
  4385  000FD4  26D9               	addwf	fsr2l,f,c
  4386  000FD6  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4387  000FD8  22DA               	addwfc	fsr2h,f,c
  4388  000FDA  50DF               	movf	indf2,w,c
  4389  000FDC  B4D8               	btfsc	status,2,c
  4390  000FDE  D02D               	goto	l34
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;dc_motor.c: 33: {
  4394                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  4395  000FE0  EE20 F006          	lfsr	2,6
  4396  000FE4  516E               	movf	setMotorPWM@m& (0+255),w,b
  4397  000FE6  26D9               	addwf	fsr2l,f,c
  4398  000FE8  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4399  000FEA  22DA               	addwfc	fsr2h,f,c
  4400  000FEC  50DF               	movf	indf2,w,c
  4401  000FEE  6F70               	movwf	??_setMotorPWM& (0+255),b
  4402  000FF0  0E01               	movlw	1
  4403  000FF2  6F71               	movwf	(??_setMotorPWM+1)& (0+255),b
  4404  000FF4  2B70               	incf	??_setMotorPWM& (0+255),f,b
  4405  000FF6  D002               	goto	u2264
  4406  000FF8                     u2265:
  4407  000FF8  90D8               	bcf	status,0,c
  4408  000FFA  3771               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4409  000FFC                     u2264:
  4410  000FFC  2F70               	decfsz	??_setMotorPWM& (0+255),f,b
  4411  000FFE  D7FC               	goto	u2265
  4412  001000  0100               	movlb	0	; () banked
  4413  001002  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4414  001004  108A               	iorwf	3978,w,c	;volatile
  4415  001006  6E8A               	movwf	3978,c	;volatile
  4416                           
  4417                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  4418  001008  EE20 F007          	lfsr	2,7
  4419  00100C  516E               	movf	setMotorPWM@m& (0+255),w,b
  4420  00100E  26D9               	addwf	fsr2l,f,c
  4421  001010  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4422  001012  22DA               	addwfc	fsr2h,f,c
  4423  001014  CFDE F070          	movff	postinc2,??_setMotorPWM
  4424  001018  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  4425  00101C  C075  F072         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4426  001020  C076  F073         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4427  001024  1F72               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4428  001026  1F73               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4429  001028  4B72               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4430  00102A  2B73               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4431  00102C  5170               	movf	??_setMotorPWM& (0+255),w,b
  4432  00102E  2572               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4433  001030  6F75               	movwf	setMotorPWM@PWMduty& (0+255),b
  4434  001032  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4435  001034  2173               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4436  001036  6F76               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4437                           
  4438                           ;dc_motor.c: 36: }
  4439  001038  D015               	goto	l35
  4440  00103A                     l34:
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;dc_motor.c: 37: else
  4444                           ;dc_motor.c: 38: {
  4445                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  4446                           
  4447                           ; BSR set to: 0
  4448  00103A  EE20 F006          	lfsr	2,6
  4449  00103E  516E               	movf	setMotorPWM@m& (0+255),w,b
  4450  001040  26D9               	addwf	fsr2l,f,c
  4451  001042  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4452  001044  22DA               	addwfc	fsr2h,f,c
  4453  001046  50DF               	movf	indf2,w,c
  4454  001048  6F70               	movwf	??_setMotorPWM& (0+255),b
  4455  00104A  0E01               	movlw	1
  4456  00104C  6F71               	movwf	(??_setMotorPWM+1)& (0+255),b
  4457  00104E  2B70               	incf	??_setMotorPWM& (0+255),f,b
  4458  001050  D002               	goto	u2274
  4459  001052                     u2275:
  4460  001052  90D8               	bcf	status,0,c
  4461  001054  3771               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4462  001056                     u2274:
  4463  001056  2F70               	decfsz	??_setMotorPWM& (0+255),f,b
  4464  001058  D7FC               	goto	u2275
  4465  00105A  0100               	movlb	0	; () banked
  4466  00105C  5171               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4467  00105E  0AFF               	xorlw	255
  4468  001060  148A               	andwf	3978,w,c	;volatile
  4469  001062  6E8A               	movwf	3978,c	;volatile
  4470  001064                     l35:
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;dc_motor.c: 40: }
  4474                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4475  001064  EE20 F002          	lfsr	2,2
  4476  001068  516E               	movf	setMotorPWM@m& (0+255),w,b
  4477  00106A  26D9               	addwf	fsr2l,f,c
  4478  00106C  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4479  00106E  22DA               	addwfc	fsr2h,f,c
  4480  001070  CFDE F070          	movff	postinc2,??_setMotorPWM
  4481  001074  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  4482  001078  C070  FFD9         	movff	??_setMotorPWM,fsr2l
  4483  00107C  C071  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4484  001080  4575               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4485  001082  46E8               	rlncf	wreg,f,c
  4486  001084  0BFC               	andlw	252
  4487  001086  6EDF               	movwf	indf2,c
  4488                           
  4489                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4490  001088  EE20 F004          	lfsr	2,4
  4491  00108C  516E               	movf	setMotorPWM@m& (0+255),w,b
  4492  00108E  26D9               	addwf	fsr2l,f,c
  4493  001090  516F               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4494  001092  22DA               	addwfc	fsr2h,f,c
  4495  001094  CFDE F070          	movff	postinc2,??_setMotorPWM
  4496  001098  CFDD F071          	movff	postdec2,??_setMotorPWM+1
  4497  00109C  C070  FFD9         	movff	??_setMotorPWM,fsr2l
  4498  0010A0  C071  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4499  0010A4  C075  F072         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4500  0010A8  C076  F073         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4501  0010AC  0E06               	movlw	6
  4502  0010AE  6F74               	movwf	(??_setMotorPWM+4)& (0+255),b
  4503  0010B0                     u2285:
  4504  0010B0  3573               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  4505  0010B2  3373               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  4506  0010B4  3372               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  4507  0010B6  2F74               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  4508  0010B8  D7FB               	goto	u2285
  4509  0010BA  5172               	movf	(??_setMotorPWM+2)& (0+255),w,b
  4510  0010BC  6EDF               	movwf	indf2,c
  4511                           
  4512                           ; BSR set to: 0
  4513  0010BE  0012               	return		;funcret
  4514  0010C0                     __end_of_setMotorPWM:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           intcon	equ	0xFF2
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           indf1	equ	0xFE7
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           indf2	equ	0xFDF
  4526                           postinc2	equ	0xFDE
  4527                           postdec2	equ	0xFDD
  4528                           plusw2	equ	0xFDB
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function ___awdiv *****************
  4534 ;; Defined at:
  4535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  dividend        2    6[BANK0 ] int 
  4538 ;;  divisor         2    8[BANK0 ] int 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  quotient        2   12[BANK0 ] int 
  4541 ;;  sign            1   11[BANK0 ] unsigned char 
  4542 ;;  counter         1   10[BANK0 ] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2    6[BANK0 ] int 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4552 ;;      Params:         0       4       0       0
  4553 ;;      Locals:         0       4       0       0
  4554 ;;      Temps:          0       0       0       0
  4555 ;;      Totals:         0       8       0       0
  4556 ;;Total ram usage:        8 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    3
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_setMotorPWM
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text17
  4567  001590                     __ptext17:
  4568                           	opt stack 0
  4569  001590                     ___awdiv:
  4570                           	opt stack 24
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;incstack = 0
  4574  001590  0E00               	movlw	0
  4575  001592  0100               	movlb	0	; () banked
  4576  001594  6F6B               	movwf	___awdiv@sign& (0+255),b
  4577                           
  4578                           ; BSR set to: 0
  4579  001596  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4580  001598  D006               	goto	l647
  4581                           
  4582                           ; BSR set to: 0
  4583  00159A  6D68               	negf	___awdiv@divisor& (0+255),b
  4584  00159C  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4585  00159E  B0D8               	btfsc	status,0,c
  4586  0015A0  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4587                           
  4588                           ; BSR set to: 0
  4589  0015A2  0E01               	movlw	1
  4590  0015A4  6F6B               	movwf	___awdiv@sign& (0+255),b
  4591  0015A6                     l647:
  4592                           
  4593                           ; BSR set to: 0
  4594                           
  4595                           ; BSR set to: 0
  4596  0015A6  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4597  0015A8  D006               	goto	l648
  4598                           
  4599                           ; BSR set to: 0
  4600  0015AA  6D66               	negf	___awdiv@dividend& (0+255),b
  4601  0015AC  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4602  0015AE  B0D8               	btfsc	status,0,c
  4603  0015B0  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4604                           
  4605                           ; BSR set to: 0
  4606  0015B2  0E01               	movlw	1
  4607  0015B4  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  4608  0015B6                     l648:
  4609                           
  4610                           ; BSR set to: 0
  4611                           
  4612                           ; BSR set to: 0
  4613  0015B6  0E00               	movlw	0
  4614  0015B8  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  4615  0015BA  0E00               	movlw	0
  4616  0015BC  6F6C               	movwf	___awdiv@quotient& (0+255),b
  4617                           
  4618                           ; BSR set to: 0
  4619  0015BE  5168               	movf	___awdiv@divisor& (0+255),w,b
  4620  0015C0  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4621  0015C2  B4D8               	btfsc	status,2,c
  4622  0015C4  D01C               	goto	l655
  4623                           
  4624                           ; BSR set to: 0
  4625  0015C6  0E01               	movlw	1
  4626  0015C8  6F6A               	movwf	___awdiv@counter& (0+255),b
  4627  0015CA  D004               	goto	l650
  4628  0015CC                     
  4629                           ; BSR set to: 0
  4630                           
  4631                           ; BSR set to: 0
  4632  0015CC  90D8               	bcf	status,0,c
  4633  0015CE  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  4634  0015D0  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4635  0015D2  2B6A               	incf	___awdiv@counter& (0+255),f,b
  4636  0015D4                     l650:
  4637                           
  4638                           ; BSR set to: 0
  4639                           
  4640                           ; BSR set to: 0
  4641  0015D4  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4642  0015D6  D7FA               	goto	l651
  4643  0015D8                     u2220:
  4644                           
  4645                           ; BSR set to: 0
  4646                           
  4647                           ; BSR set to: 0
  4648                           
  4649                           ; BSR set to: 0
  4650  0015D8  90D8               	bcf	status,0,c
  4651  0015DA  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  4652  0015DC  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4653                           
  4654                           ; BSR set to: 0
  4655  0015DE  5168               	movf	___awdiv@divisor& (0+255),w,b
  4656  0015E0  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  4657  0015E2  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4658  0015E4  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4659  0015E6  A0D8               	btfss	status,0,c
  4660  0015E8  D005               	goto	l654
  4661                           
  4662                           ; BSR set to: 0
  4663  0015EA  5168               	movf	___awdiv@divisor& (0+255),w,b
  4664  0015EC  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  4665  0015EE  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4666  0015F0  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4667                           
  4668                           ; BSR set to: 0
  4669  0015F2  816C               	bsf	___awdiv@quotient& (0+255),0,b
  4670  0015F4                     l654:
  4671                           
  4672                           ; BSR set to: 0
  4673                           
  4674                           ; BSR set to: 0
  4675  0015F4  90D8               	bcf	status,0,c
  4676  0015F6  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4677  0015F8  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  4678                           
  4679                           ; BSR set to: 0
  4680  0015FA  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  4681  0015FC  D7ED               	goto	u2220
  4682  0015FE                     l655:
  4683                           
  4684                           ; BSR set to: 0
  4685                           
  4686                           ; BSR set to: 0
  4687                           
  4688                           ; BSR set to: 0
  4689  0015FE  516B               	movf	___awdiv@sign& (0+255),w,b
  4690  001600  B4D8               	btfsc	status,2,c
  4691  001602  D004               	goto	l656
  4692                           
  4693                           ; BSR set to: 0
  4694  001604  6D6C               	negf	___awdiv@quotient& (0+255),b
  4695  001606  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4696  001608  B0D8               	btfsc	status,0,c
  4697  00160A  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4698  00160C                     l656:
  4699                           
  4700                           ; BSR set to: 0
  4701                           
  4702                           ; BSR set to: 0
  4703  00160C  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  4704  001610  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  4705  001614  0012               	return	
  4706  001616                     __end_of___awdiv:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           intcon	equ	0xFF2
  4712                           postinc0	equ	0xFEE
  4713                           wreg	equ	0xFE8
  4714                           indf1	equ	0xFE7
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           postinc2	equ	0xFDE
  4719                           postdec2	equ	0xFDD
  4720                           plusw2	equ	0xFDB
  4721                           fsr2h	equ	0xFDA
  4722                           fsr2l	equ	0xFD9
  4723                           status	equ	0xFD8
  4724                           
  4725 ;; *************** function _sprintf *****************
  4726 ;; Defined at:
  4727 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  sp              2   12[BANK0 ] PTR unsigned char 
  4730 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4731 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4732 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  tmpval          4    0        struct .
  4735 ;;  cp              3    0        PTR const unsigned char 
  4736 ;;  width           2   30[BANK0 ] int 
  4737 ;;  val             2   27[BANK0 ] unsigned int 
  4738 ;;  ap              2   24[BANK0 ] PTR void [1]
  4739 ;;		 -> ?_sprintf(2), 
  4740 ;;  len             2    0        unsigned int 
  4741 ;;  c               1   32[BANK0 ] char 
  4742 ;;  flag            1   29[BANK0 ] unsigned char 
  4743 ;;  prec            1   26[BANK0 ] char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  2   12[BANK0 ] int 
  4746 ;; Registers used:
  4747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4753 ;;      Params:         0       8       0       0
  4754 ;;      Locals:         0       9       0       0
  4755 ;;      Temps:          0       4       0       0
  4756 ;;      Totals:         0      21       0       0
  4757 ;;Total ram usage:       21 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    4
  4760 ;; This function calls:
  4761 ;;		___lwdiv
  4762 ;;		___lwmod
  4763 ;;		___wmul
  4764 ;;		_isdigit
  4765 ;; This function is called by:
  4766 ;;		_ScanIR
  4767 ;;		_ScanWithRange
  4768 ;;		_main
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           	psect	text18
  4773  000CE0                     __ptext18:
  4774                           	opt stack 0
  4775  000CE0                     _sprintf:
  4776                           	opt stack 26
  4777                           
  4778                           ;doprnt.c: 494: va_list ap;
  4779                           ;doprnt.c: 499: signed char c;
  4780                           ;doprnt.c: 501: int width;
  4781                           ;doprnt.c: 506: signed char prec;
  4782                           ;doprnt.c: 508: unsigned char flag;
  4783                           ;doprnt.c: 523: union {
  4784                           ;doprnt.c: 524: unsigned long vd;
  4785                           ;doprnt.c: 525: double integ;
  4786                           ;doprnt.c: 526: } tmpval;
  4787                           ;doprnt.c: 528: unsigned int val;
  4788                           ;doprnt.c: 529: unsigned len;
  4789                           ;doprnt.c: 530: const char * cp;
  4790                           ;doprnt.c: 533: *ap = __va_start();
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;incstack = 0
  4794  000CE0  0E70               	movlw	low (?_sprintf+4)
  4795  000CE2  0100               	movlb	0	; () banked
  4796  000CE4  6F78               	movwf	sprintf@ap& (0+255),b
  4797  000CE6  0E00               	movlw	high (?_sprintf+4)
  4798  000CE8  6F79               	movwf	(sprintf@ap+1)& (0+255),b
  4799                           
  4800                           ;doprnt.c: 536: while(c = *f++) {
  4801  000CEA  D137               	goto	u2820
  4802  000CEC                     
  4803                           ; BSR set to: 0
  4804                           ;doprnt.c: 538: if(c != '%')
  4805                           
  4806                           ; BSR set to: 0
  4807  000CEC  0E25               	movlw	37
  4808  000CEE  1980               	xorwf	sprintf@c& (0+255),w,b
  4809  000CF0  B4D8               	btfsc	status,2,c
  4810  000CF2  D009               	goto	l441
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;doprnt.c: 540: {
  4814                           ;doprnt.c: 541: ((*sp++ = (c)));
  4815  000CF4  C06C  FFD9         	movff	sprintf@sp,fsr2l
  4816  000CF8  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  4817  000CFC  C080  FFDF         	movff	sprintf@c,indf2
  4818                           
  4819                           ; BSR set to: 0
  4820  000D00  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  4821  000D02  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  4822                           
  4823                           ;doprnt.c: 542: continue;
  4824  000D04  D12A               	goto	u2820
  4825  000D06                     l441:
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;doprnt.c: 543: }
  4829                           ;doprnt.c: 546: width = 0;
  4830                           
  4831                           ; BSR set to: 0
  4832  000D06  0E00               	movlw	0
  4833  000D08  6F7F               	movwf	(sprintf@width+1)& (0+255),b
  4834  000D0A  0E00               	movlw	0
  4835  000D0C  6F7E               	movwf	sprintf@width& (0+255),b
  4836                           
  4837                           ;doprnt.c: 548: flag = 0;
  4838  000D0E  0E00               	movlw	0
  4839  000D10  6F7D               	movwf	sprintf@flag& (0+255),b
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;doprnt.c: 551: switch(*f) {
  4843                           
  4844                           ;doprnt.c: 550: for(;;) {
  4845  000D12  D004               	goto	l443
  4846  000D14                     
  4847                           ;doprnt.c: 580: flag |= 0x04;
  4848                           
  4849                           ; BSR set to: 0
  4850  000D14  0100               	movlb	0	; () banked
  4851  000D16  857D               	bsf	sprintf@flag& (0+255),2,b
  4852                           
  4853                           ;doprnt.c: 581: f++;
  4854  000D18  4B6E               	infsnz	sprintf@f& (0+255),f,b
  4855  000D1A  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  4856  000D1C                     l443:
  4857                           
  4858                           ; BSR set to: 0
  4859  000D1C  C06E  FFF6         	movff	sprintf@f,tblptrl
  4860  000D20  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4861  000D24                     	if	0	;tblptru may be non-zero
  4862  000D24                     	endif
  4863  000D24                     	if	0	;tblptru may be non-zero
  4864  000D24                     	endif
  4865  000D24  0008               	tblrd		*
  4866  000D26  50F5               	movf	tablat,w,c
  4867                           
  4868                           ; Switch size 1, requested type "space"
  4869                           ; Number of cases is 1, Range of values is 48 to 48
  4870                           ; switch strategies available:
  4871                           ; Name         Instructions Cycles
  4872                           ; simple_byte            4     3 (average)
  4873                           ;	Chosen strategy is simple_byte
  4874  000D28  0A30               	xorlw	48	; case 48
  4875  000D2A  B4D8               	btfsc	status,2,c
  4876  000D2C  D7F3               	goto	l444
  4877                           
  4878                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4879                           
  4880                           ;doprnt.c: 586: }
  4881                           
  4882                           ;doprnt.c: 585: break;
  4883  000D2E  C06E  FFF6         	movff	sprintf@f,tblptrl
  4884  000D32  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4885  000D36                     	if	0	;tblptru may be non-zero
  4886  000D36                     	endif
  4887  000D36                     	if	0	;tblptru may be non-zero
  4888  000D36                     	endif
  4889  000D36  0008               	tblrd		*
  4890  000D38  50F5               	movf	tablat,w,c
  4891  000D3A  EC75  F00D         	call	_isdigit
  4892  000D3E  A0D8               	btfss	status,0,c
  4893  000D40  D035               	goto	l451
  4894                           
  4895                           ;doprnt.c: 598: width = 0;
  4896  000D42  0E00               	movlw	0
  4897  000D44  0100               	movlb	0	; () banked
  4898  000D46  6F7F               	movwf	(sprintf@width+1)& (0+255),b
  4899  000D48  0E00               	movlw	0
  4900  000D4A  6F7E               	movwf	sprintf@width& (0+255),b
  4901  000D4C                     
  4902                           ;doprnt.c: 600: width *= 10;
  4903                           
  4904                           ; BSR set to: 0
  4905  000D4C  C07E  F060         	movff	sprintf@width,___wmul@multiplier
  4906  000D50  C07F  F061         	movff	sprintf@width+1,___wmul@multiplier+1
  4907  000D54  0E00               	movlw	0
  4908  000D56  0100               	movlb	0	; () banked
  4909  000D58  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4910  000D5A  0E0A               	movlw	10
  4911  000D5C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4912  000D5E  EC3D  F00D         	call	___wmul	;wreg free
  4913  000D62  C060  F07E         	movff	?___wmul,sprintf@width
  4914  000D66  C061  F07F         	movff	?___wmul+1,sprintf@width+1
  4915                           
  4916                           ;doprnt.c: 601: width += *f++ - '0';
  4917  000D6A  0ED0               	movlw	208
  4918  000D6C  0100               	movlb	0	; () banked
  4919  000D6E  6F74               	movwf	??_sprintf& (0+255),b
  4920  000D70  0EFF               	movlw	255
  4921  000D72  6F75               	movwf	(??_sprintf+1)& (0+255),b
  4922  000D74  C06E  FFF6         	movff	sprintf@f,tblptrl
  4923  000D78  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4924  000D7C                     	if	0	;tblptru may be non-zero
  4925  000D7C                     	endif
  4926  000D7C                     	if	0	;tblptru may be non-zero
  4927  000D7C                     	endif
  4928  000D7C  0008               	tblrd		*
  4929  000D7E  50F5               	movf	tablat,w,c
  4930  000D80  6F76               	movwf	(??_sprintf+2)& (0+255),b
  4931  000D82  6B77               	clrf	(??_sprintf+3)& (0+255),b
  4932  000D84  5174               	movf	??_sprintf& (0+255),w,b
  4933  000D86  2776               	addwf	(??_sprintf+2)& (0+255),f,b
  4934  000D88  5175               	movf	(??_sprintf+1)& (0+255),w,b
  4935  000D8A  2377               	addwfc	(??_sprintf+3)& (0+255),f,b
  4936  000D8C  5176               	movf	(??_sprintf+2)& (0+255),w,b
  4937  000D8E  277E               	addwf	sprintf@width& (0+255),f,b
  4938  000D90  5177               	movf	(??_sprintf+3)& (0+255),w,b
  4939  000D92  237F               	addwfc	(sprintf@width+1)& (0+255),f,b
  4940                           
  4941                           ; BSR set to: 0
  4942  000D94  4B6E               	infsnz	sprintf@f& (0+255),f,b
  4943  000D96  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4947  000D98  C06E  FFF6         	movff	sprintf@f,tblptrl
  4948  000D9C  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4949  000DA0                     	if	0	;tblptru may be non-zero
  4950  000DA0                     	endif
  4951  000DA0                     	if	0	;tblptru may be non-zero
  4952  000DA0                     	endif
  4953  000DA0  0008               	tblrd		*
  4954  000DA2  50F5               	movf	tablat,w,c
  4955  000DA4  EC75  F00D         	call	_isdigit
  4956  000DA8  B0D8               	btfsc	status,0,c
  4957  000DAA  D7D0               	goto	l449
  4958  000DAC                     l451:
  4959  000DAC  C06E  FFF6         	movff	sprintf@f,tblptrl
  4960  000DB0  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  4961  000DB4  0100               	movlb	0	; () banked
  4962  000DB6  4B6E               	infsnz	sprintf@f& (0+255),f,b
  4963  000DB8  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  4964  000DBA                     	if	0	;tblptru may be non-zero
  4965  000DBA                     	endif
  4966  000DBA                     	if	0	;tblptru may be non-zero
  4967  000DBA                     	endif
  4968  000DBA  0008               	tblrd		*
  4969  000DBC  CFF5 F080          	movff	tablat,sprintf@c
  4970  000DC0  5180               	movf	sprintf@c& (0+255),w,b
  4971                           
  4972                           ; Switch size 1, requested type "space"
  4973                           ; Number of cases is 3, Range of values is 0 to 105
  4974                           ; switch strategies available:
  4975                           ; Name         Instructions Cycles
  4976                           ; simple_byte           10     6 (average)
  4977                           ;	Chosen strategy is simple_byte
  4978  000DC2  0A00               	xorlw	0	; case 0
  4979  000DC4  B4D8               	btfsc	status,2,c
  4980  000DC6  D0D6               	goto	u2830
  4981  000DC8  0A64               	xorlw	100	; case 100
  4982  000DCA  B4D8               	btfsc	status,2,c
  4983  000DCC  D003               	goto	l456
  4984  000DCE  0A0D               	xorlw	13	; case 105
  4985  000DD0  A4D8               	btfss	status,2,c
  4986  000DD2  D0C3               	goto	u2820
  4987  000DD4                     l456:
  4988                           
  4989                           ;doprnt.c: 1253: {
  4990                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4991                           
  4992                           ; BSR set to: 0
  4993  000DD4  C078  FFD9         	movff	sprintf@ap,fsr2l
  4994  000DD8  C079  FFDA         	movff	sprintf@ap+1,fsr2h
  4995  000DDC  CFDE F07B          	movff	postinc2,sprintf@val
  4996  000DE0  CFDD F07C          	movff	postdec2,sprintf@val+1
  4997  000DE4  0E02               	movlw	2
  4998  000DE6  0100               	movlb	0	; () banked
  4999  000DE8  2778               	addwf	sprintf@ap& (0+255),f,b
  5000  000DEA  0E00               	movlw	0
  5001  000DEC  2379               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;doprnt.c: 1261: if((int)val < 0) {
  5005  000DEE  AF7C               	btfss	(sprintf@val+1)& (0+255),7,b
  5006  000DF0  D006               	goto	l458
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;doprnt.c: 1262: flag |= 0x03;
  5010  000DF2  0E03               	movlw	3
  5011  000DF4  137D               	iorwf	sprintf@flag& (0+255),f,b
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;doprnt.c: 1263: val = -val;
  5015  000DF6  6D7B               	negf	sprintf@val& (0+255),b
  5016  000DF8  1F7C               	comf	(sprintf@val+1)& (0+255),f,b
  5017  000DFA  B0D8               	btfsc	status,0,c
  5018  000DFC  2B7C               	incf	(sprintf@val+1)& (0+255),f,b
  5019  000DFE                     l458:
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;doprnt.c: 1264: }
  5023                           ;doprnt.c: 1266: }
  5024                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5025                           
  5026                           ; BSR set to: 0
  5027  000DFE  0E01               	movlw	1
  5028  000E00  6F80               	movwf	sprintf@c& (0+255),b
  5029  000E02                     l3190:
  5030                           
  5031                           ; BSR set to: 0
  5032  000E02  0E05               	movlw	5
  5033  000E04  1980               	xorwf	sprintf@c& (0+255),w,b
  5034  000E06  B4D8               	btfsc	status,2,c
  5035  000E08  D012               	goto	u2710
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;doprnt.c: 1306: if(val < dpowers[c])
  5039                           
  5040                           ; BSR set to: 0
  5041                           
  5042                           ; BSR set to: 0
  5043  000E0A  5180               	movf	sprintf@c& (0+255),w,b
  5044  000E0C  0D02               	mullw	2
  5045  000E0E  0E01               	movlw	low _dpowers
  5046  000E10  24F3               	addwf	prodl,w,c
  5047  000E12  6EF6               	movwf	tblptrl,c
  5048  000E14  0E03               	movlw	high _dpowers
  5049  000E16  20F4               	addwfc	prodh,w,c
  5050  000E18  6EF7               	movwf	tblptrh,c
  5051  000E1A                     	if	0	;There are less than 3 active tblptr bytes
  5052  000E1A                     	endif
  5053  000E1A  0009               	tblrd		*+
  5054  000E1C  50F5               	movf	tablat,w,c
  5055  000E1E  5D7B               	subwf	sprintf@val& (0+255),w,b
  5056  000E20  0009               	tblrd		*+
  5057  000E22  50F5               	movf	tablat,w,c
  5058  000E24  597C               	subwfb	(sprintf@val+1)& (0+255),w,b
  5059  000E26  A0D8               	btfss	status,0,c
  5060  000E28  D002               	goto	u2710
  5061                           
  5062                           ; BSR set to: 0
  5063                           
  5064                           ; BSR set to: 0
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;doprnt.c: 1307: break;
  5068  000E2A  2B80               	incf	sprintf@c& (0+255),f,b
  5069  000E2C  D7EA               	goto	l3190
  5070  000E2E                     u2710:
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5074                           
  5075                           ; BSR set to: 0
  5076  000E2E  517E               	movf	sprintf@width& (0+255),w,b
  5077  000E30  117F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5078  000E32  B4D8               	btfsc	status,2,c
  5079  000E34  D009               	goto	l462
  5080                           
  5081                           ; BSR set to: 0
  5082  000E36  C07D  F074         	movff	sprintf@flag,??_sprintf
  5083  000E3A  0E03               	movlw	3
  5084  000E3C  1774               	andwf	??_sprintf& (0+255),f,b
  5085  000E3E  B4D8               	btfsc	status,2,c
  5086  000E40  D003               	goto	l462
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;doprnt.c: 1346: width--;
  5090  000E42  077E               	decf	sprintf@width& (0+255),f,b
  5091  000E44  A0D8               	btfss	status,0,c
  5092  000E46  077F               	decf	(sprintf@width+1)& (0+255),f,b
  5093  000E48                     l462:
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;doprnt.c: 1381: if(width > c)
  5097                           
  5098                           ; BSR set to: 0
  5099  000E48  0E80               	movlw	128
  5100  000E4A  BF80               	btfsc	sprintf@c& (0+255),7,b
  5101  000E4C  0E7F               	movlw	127
  5102  000E4E  6F74               	movwf	??_sprintf& (0+255),b
  5103  000E50  517E               	movf	sprintf@width& (0+255),w,b
  5104  000E52  5D80               	subwf	sprintf@c& (0+255),w,b
  5105  000E54  517F               	movf	(sprintf@width+1)& (0+255),w,b
  5106  000E56  0A80               	xorlw	128
  5107  000E58  5974               	subwfb	??_sprintf& (0+255),w,b
  5108  000E5A  B0D8               	btfsc	status,0,c
  5109  000E5C  D007               	goto	l463
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;doprnt.c: 1382: width -= c;
  5113  000E5E  5180               	movf	sprintf@c& (0+255),w,b
  5114  000E60  5F7E               	subwf	sprintf@width& (0+255),f,b
  5115  000E62  0E00               	movlw	0
  5116  000E64  BF80               	btfsc	sprintf@c& (0+255),7,b
  5117  000E66  0EFF               	movlw	255
  5118  000E68  5B7F               	subwfb	(sprintf@width+1)& (0+255),f,b
  5119  000E6A  D004               	goto	l464
  5120  000E6C                     l463:
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;doprnt.c: 1383: else
  5124                           ;doprnt.c: 1384: width = 0;
  5125                           
  5126                           ; BSR set to: 0
  5127  000E6C  0E00               	movlw	0
  5128  000E6E  6F7F               	movwf	(sprintf@width+1)& (0+255),b
  5129  000E70  0E00               	movlw	0
  5130  000E72  6F7E               	movwf	sprintf@width& (0+255),b
  5131  000E74                     l464:
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;doprnt.c: 1387: if(flag & 0x04) {
  5135                           
  5136                           ; BSR set to: 0
  5137  000E74  A57D               	btfss	sprintf@flag& (0+255),2,b
  5138  000E76  D01E               	goto	l465
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;doprnt.c: 1392: if(flag & 0x03)
  5142  000E78  C07D  F074         	movff	sprintf@flag,??_sprintf
  5143  000E7C  0E03               	movlw	3
  5144  000E7E  1774               	andwf	??_sprintf& (0+255),f,b
  5145  000E80  B4D8               	btfsc	status,2,c
  5146  000E82  D008               	goto	l466
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5150  000E84  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5151  000E88  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5152  000E8C  0E2D               	movlw	45
  5153  000E8E  6EDF               	movwf	indf2,c
  5154                           
  5155                           ; BSR set to: 0
  5156  000E90  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5157  000E92  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5158  000E94                     l466:
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;doprnt.c: 1415: if(width)
  5162                           
  5163                           ; BSR set to: 0
  5164  000E94  517E               	movf	sprintf@width& (0+255),w,b
  5165  000E96  117F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5166  000E98  B4D8               	btfsc	status,2,c
  5167  000E9A  D02D               	goto	l474
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5171                           
  5172                           ; BSR set to: 0
  5173                           
  5174                           ;doprnt.c: 1416: do
  5175  000E9C  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5176  000EA0  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5177  000EA4  0E30               	movlw	48
  5178  000EA6  6EDF               	movwf	indf2,c
  5179                           
  5180                           ; BSR set to: 0
  5181  000EA8  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5182  000EAA  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;doprnt.c: 1418: while(--width);
  5186  000EAC  077E               	decf	sprintf@width& (0+255),f,b
  5187  000EAE  A0D8               	btfss	status,0,c
  5188  000EB0  077F               	decf	(sprintf@width+1)& (0+255),f,b
  5189  000EB2  D7F0               	goto	l466
  5190  000EB4                     l465:
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;doprnt.c: 1422: {
  5194                           ;doprnt.c: 1424: if(width
  5195                           ;doprnt.c: 1428: )
  5196                           
  5197                           ; BSR set to: 0
  5198  000EB4  517E               	movf	sprintf@width& (0+255),w,b
  5199  000EB6  117F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5200  000EB8  B4D8               	btfsc	status,2,c
  5201  000EBA  D00F               	goto	u2800
  5202  000EBC                     u2790:
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5206                           
  5207                           ; BSR set to: 0
  5208                           
  5209                           ;doprnt.c: 1429: do
  5210  000EBC  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5211  000EC0  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5212  000EC4  0E20               	movlw	32
  5213  000EC6  6EDF               	movwf	indf2,c
  5214                           
  5215                           ; BSR set to: 0
  5216  000EC8  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5217  000ECA  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;doprnt.c: 1431: while(--width);
  5221  000ECC  077E               	decf	sprintf@width& (0+255),f,b
  5222  000ECE  A0D8               	btfss	status,0,c
  5223  000ED0  077F               	decf	(sprintf@width+1)& (0+255),f,b
  5224  000ED2  517E               	movf	sprintf@width& (0+255),w,b
  5225  000ED4  117F               	iorwf	(sprintf@width+1)& (0+255),w,b
  5226  000ED6  A4D8               	btfss	status,2,c
  5227  000ED8  D7F1               	goto	u2790
  5228  000EDA                     u2800:
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;doprnt.c: 1438: if(flag & 0x03)
  5232                           
  5233                           ; BSR set to: 0
  5234                           
  5235                           ; BSR set to: 0
  5236  000EDA  C07D  F074         	movff	sprintf@flag,??_sprintf
  5237  000EDE  0E03               	movlw	3
  5238  000EE0  1774               	andwf	??_sprintf& (0+255),f,b
  5239  000EE2  B4D8               	btfsc	status,2,c
  5240  000EE4  D008               	goto	l474
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5244  000EE6  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5245  000EEA  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5246  000EEE  0E2D               	movlw	45
  5247  000EF0  6EDF               	movwf	indf2,c
  5248                           
  5249                           ; BSR set to: 0
  5250  000EF2  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5251  000EF4  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5252  000EF6                     l474:
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;doprnt.c: 1469: }
  5256                           ;doprnt.c: 1472: prec = c;
  5257                           
  5258                           ; BSR set to: 0
  5259                           
  5260                           ; BSR set to: 0
  5261  000EF6  C080  F07A         	movff	sprintf@c,sprintf@prec
  5262                           
  5263                           ;doprnt.c: 1474: while(prec--) {
  5264  000EFA  D02B               	goto	l475
  5265  000EFC                     
  5266                           ; BSR set to: 0
  5267                           ;doprnt.c: 1478: {
  5268                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5269                           
  5270                           ; BSR set to: 0
  5271  000EFC  517A               	movf	sprintf@prec& (0+255),w,b
  5272  000EFE  0D02               	mullw	2
  5273  000F00  0E01               	movlw	low _dpowers
  5274  000F02  24F3               	addwf	prodl,w,c
  5275  000F04  6EF6               	movwf	tblptrl,c
  5276  000F06  0E03               	movlw	high _dpowers
  5277  000F08  20F4               	addwfc	prodh,w,c
  5278  000F0A  6EF7               	movwf	tblptrh,c
  5279  000F0C                     	if	0	;There are less than 3 active tblptr bytes
  5280  000F0C                     	endif
  5281  000F0C  0009               	tblrd		*+
  5282  000F0E  CFF5 F062          	movff	tablat,___lwdiv@divisor
  5283  000F12  000A               	tblrd		*-
  5284  000F14  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  5285  000F18  C07B  F060         	movff	sprintf@val,___lwdiv@dividend
  5286  000F1C  C07C  F061         	movff	sprintf@val+1,___lwdiv@dividend+1
  5287  000F20  ECF4  F00B         	call	___lwdiv	;wreg free
  5288  000F24  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  5289  000F28  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  5290  000F2C  0E00               	movlw	0
  5291  000F2E  0100               	movlb	0	; () banked
  5292  000F30  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5293  000F32  0E0A               	movlw	10
  5294  000F34  6F69               	movwf	___lwmod@divisor& (0+255),b
  5295  000F36  EC1E  F00C         	call	___lwmod	;wreg free
  5296  000F3A  0100               	movlb	0	; () banked
  5297  000F3C  5167               	movf	?___lwmod& (0+255),w,b
  5298  000F3E  0F30               	addlw	48
  5299  000F40  6F80               	movwf	sprintf@c& (0+255),b
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;doprnt.c: 1523: }
  5303                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5304  000F42  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5305  000F46  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5306  000F4A  C080  FFDF         	movff	sprintf@c,indf2
  5307                           
  5308                           ; BSR set to: 0
  5309  000F4E  4B6C               	infsnz	sprintf@sp& (0+255),f,b
  5310  000F50  2B6D               	incf	(sprintf@sp+1)& (0+255),f,b
  5311  000F52                     l475:
  5312                           
  5313                           ; BSR set to: 0
  5314                           
  5315                           ; BSR set to: 0
  5316  000F52  077A               	decf	sprintf@prec& (0+255),f,b
  5317  000F54  297A               	incf	sprintf@prec& (0+255),w,b
  5318  000F56  A4D8               	btfss	status,2,c
  5319  000F58  D7D1               	goto	l476
  5320  000F5A                     u2820:
  5321                           
  5322                           ; BSR set to: 0
  5323                           
  5324                           ; BSR set to: 0
  5325  000F5A  C06E  FFF6         	movff	sprintf@f,tblptrl
  5326  000F5E  C06F  FFF7         	movff	sprintf@f+1,tblptrh
  5327  000F62  0100               	movlb	0	; () banked
  5328  000F64  4B6E               	infsnz	sprintf@f& (0+255),f,b
  5329  000F66  2B6F               	incf	(sprintf@f+1)& (0+255),f,b
  5330  000F68                     	if	0	;tblptru may be non-zero
  5331  000F68                     	endif
  5332  000F68                     	if	0	;tblptru may be non-zero
  5333  000F68                     	endif
  5334  000F68  0008               	tblrd		*
  5335  000F6A  CFF5 F080          	movff	tablat,sprintf@c
  5336  000F6E  5180               	movf	sprintf@c& (0+255),w,b
  5337  000F70  A4D8               	btfss	status,2,c
  5338  000F72  D6BC               	goto	l440
  5339  000F74                     u2830:
  5340                           
  5341                           ;doprnt.c: 1538: *sp = 0;
  5342                           
  5343                           ; BSR set to: 0
  5344                           
  5345                           ;doprnt.c: 1525: }
  5346                           ;doprnt.c: 1533: }
  5347                           ;doprnt.c: 1535: alldone:
  5348                           
  5349                           ; BSR set to: 0
  5350  000F74  C06C  FFD9         	movff	sprintf@sp,fsr2l
  5351  000F78  C06D  FFDA         	movff	sprintf@sp+1,fsr2h
  5352  000F7C  0E00               	movlw	0
  5353  000F7E  6EDF               	movwf	indf2,c
  5354  000F80  0012               	return	
  5355  000F82                     __end_of_sprintf:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           intcon	equ	0xFF2
  5364                           postinc0	equ	0xFEE
  5365                           wreg	equ	0xFE8
  5366                           indf1	equ	0xFE7
  5367                           fsr1h	equ	0xFE2
  5368                           fsr1l	equ	0xFE1
  5369                           indf2	equ	0xFDF
  5370                           postinc2	equ	0xFDE
  5371                           postdec2	equ	0xFDD
  5372                           plusw2	equ	0xFDB
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function _isdigit *****************
  5378 ;; Defined at:
  5379 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  c               1    wreg     unsigned char 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  c               1    2[BANK0 ] unsigned char 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;		None               void
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5393 ;;      Params:         0       0       0       0
  5394 ;;      Locals:         0       2       0       0
  5395 ;;      Temps:          0       1       0       0
  5396 ;;      Totals:         0       3       0       0
  5397 ;;Total ram usage:        3 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    3
  5400 ;; This function calls:
  5401 ;;		Nothing
  5402 ;; This function is called by:
  5403 ;;		_sprintf
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text19
  5408  001AEA                     __ptext19:
  5409                           	opt stack 0
  5410  001AEA                     _isdigit:
  5411                           	opt stack 26
  5412                           
  5413                           ;incstack = 0
  5414                           ;isdigit@c stored from wreg
  5415  001AEA  0100               	movlb	0	; () banked
  5416  001AEC  6F62               	movwf	isdigit@c& (0+255),b
  5417  001AEE  0E00               	movlw	0
  5418  001AF0  0100               	movlb	0	; () banked
  5419  001AF2  6F61               	movwf	_isdigit$1693& (0+255),b
  5420                           
  5421                           ; BSR set to: 0
  5422  001AF4  0E3A               	movlw	58
  5423  001AF6  6162               	cpfslt	isdigit@c& (0+255),b
  5424  001AF8  D005               	goto	l809
  5425                           
  5426                           ; BSR set to: 0
  5427  001AFA  0E2F               	movlw	47
  5428  001AFC  6562               	cpfsgt	isdigit@c& (0+255),b
  5429  001AFE  D002               	goto	l809
  5430                           
  5431                           ; BSR set to: 0
  5432  001B00  0E01               	movlw	1
  5433  001B02  6F61               	movwf	_isdigit$1693& (0+255),b
  5434  001B04                     l809:
  5435                           
  5436                           ; BSR set to: 0
  5437                           
  5438                           ; BSR set to: 0
  5439  001B04  C061  F060         	movff	_isdigit$1693,??_isdigit
  5440  001B08  3160               	rrcf	??_isdigit& (0+255),w,b
  5441  001B0A  0012               	return	
  5442  001B0C                     __end_of_isdigit:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           indf1	equ	0xFE7
  5454                           fsr1h	equ	0xFE2
  5455                           fsr1l	equ	0xFE1
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           postdec2	equ	0xFDD
  5459                           plusw2	equ	0xFDB
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function ___wmul *****************
  5465 ;; Defined at:
  5466 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5469 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  product         2    4[BANK0 ] unsigned int 
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  2    0[BANK0 ] unsigned int 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0, prodl, prodh
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5481 ;;      Params:         0       4       0       0
  5482 ;;      Locals:         0       2       0       0
  5483 ;;      Temps:          0       0       0       0
  5484 ;;      Totals:         0       6       0       0
  5485 ;;Total ram usage:        6 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    3
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_setMotorPWM
  5492 ;;		_sprintf
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text20
  5497  001A7A                     __ptext20:
  5498                           	opt stack 0
  5499  001A7A                     ___wmul:
  5500                           	opt stack 24
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;incstack = 0
  5504  001A7A  0100               	movlb	0	; () banked
  5505  001A7C  5160               	movf	___wmul@multiplier& (0+255),w,b
  5506  001A7E  0362               	mulwf	___wmul@multiplicand& (0+255),b
  5507  001A80  CFF3 F064          	movff	prodl,___wmul@product
  5508  001A84  CFF4 F065          	movff	prodh,___wmul@product+1
  5509  001A88  5160               	movf	___wmul@multiplier& (0+255),w,b
  5510  001A8A  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5511  001A8C  50F3               	movf	prodl,w,c
  5512  001A8E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  5513  001A90  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5514  001A92  0362               	mulwf	___wmul@multiplicand& (0+255),b
  5515  001A94  50F3               	movf	prodl,w,c
  5516  001A96  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  5517                           
  5518                           ; BSR set to: 0
  5519  001A98  C064  F060         	movff	___wmul@product,?___wmul
  5520  001A9C  C065  F061         	movff	___wmul@product+1,?___wmul+1
  5521  001AA0  0012               	return	
  5522  001AA2                     __end_of___wmul:
  5523                           	opt stack 0
  5524                           tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           prodh	equ	0xFF4
  5529                           prodl	equ	0xFF3
  5530                           intcon	equ	0xFF2
  5531                           postinc0	equ	0xFEE
  5532                           wreg	equ	0xFE8
  5533                           indf1	equ	0xFE7
  5534                           fsr1h	equ	0xFE2
  5535                           fsr1l	equ	0xFE1
  5536                           indf2	equ	0xFDF
  5537                           postinc2	equ	0xFDE
  5538                           postdec2	equ	0xFDD
  5539                           plusw2	equ	0xFDB
  5540                           fsr2h	equ	0xFDA
  5541                           fsr2l	equ	0xFD9
  5542                           status	equ	0xFD8
  5543                           
  5544 ;; *************** function ___lwmod *****************
  5545 ;; Defined at:
  5546 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  dividend        2    7[BANK0 ] unsigned int 
  5549 ;;  divisor         2    9[BANK0 ] unsigned int 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  counter         1   11[BANK0 ] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  2    7[BANK0 ] unsigned int 
  5554 ;; Registers used:
  5555 ;;		wreg, status,2, status,0
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5561 ;;      Params:         0       4       0       0
  5562 ;;      Locals:         0       1       0       0
  5563 ;;      Temps:          0       0       0       0
  5564 ;;      Totals:         0       5       0       0
  5565 ;;Total ram usage:        5 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    3
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_sprintf
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text21
  5576  00183C                     __ptext21:
  5577                           	opt stack 0
  5578  00183C                     ___lwmod:
  5579                           	opt stack 26
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;incstack = 0
  5583  00183C  0100               	movlb	0	; () banked
  5584  00183E  5169               	movf	___lwmod@divisor& (0+255),w,b
  5585  001840  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5586  001842  B4D8               	btfsc	status,2,c
  5587  001844  D018               	goto	l903
  5588                           
  5589                           ; BSR set to: 0
  5590  001846  0E01               	movlw	1
  5591  001848  6F6B               	movwf	___lwmod@counter& (0+255),b
  5592  00184A  D004               	goto	l898
  5593  00184C                     
  5594                           ; BSR set to: 0
  5595                           
  5596                           ; BSR set to: 0
  5597  00184C  90D8               	bcf	status,0,c
  5598  00184E  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  5599  001850  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5600  001852  2B6B               	incf	___lwmod@counter& (0+255),f,b
  5601  001854                     l898:
  5602                           
  5603                           ; BSR set to: 0
  5604                           
  5605                           ; BSR set to: 0
  5606  001854  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5607  001856  D7FA               	goto	l899
  5608  001858                     u2470:
  5609                           
  5610                           ; BSR set to: 0
  5611                           
  5612                           ; BSR set to: 0
  5613                           
  5614                           ; BSR set to: 0
  5615  001858  5169               	movf	___lwmod@divisor& (0+255),w,b
  5616  00185A  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  5617  00185C  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5618  00185E  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5619  001860  A0D8               	btfss	status,0,c
  5620  001862  D004               	goto	l902
  5621                           
  5622                           ; BSR set to: 0
  5623  001864  5169               	movf	___lwmod@divisor& (0+255),w,b
  5624  001866  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  5625  001868  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5626  00186A  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5627  00186C                     l902:
  5628                           
  5629                           ; BSR set to: 0
  5630                           
  5631                           ; BSR set to: 0
  5632  00186C  90D8               	bcf	status,0,c
  5633  00186E  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5634  001870  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  5635                           
  5636                           ; BSR set to: 0
  5637  001872  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
  5638  001874  D7F1               	goto	u2470
  5639  001876                     l903:
  5640                           
  5641                           ; BSR set to: 0
  5642                           
  5643                           ; BSR set to: 0
  5644  001876  C067  F067         	movff	___lwmod@dividend,?___lwmod
  5645  00187A  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  5646                           
  5647                           ; BSR set to: 0
  5648  00187E  0012               	return		;funcret
  5649  001880                     __end_of___lwmod:
  5650                           	opt stack 0
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           postinc0	equ	0xFEE
  5659                           wreg	equ	0xFE8
  5660                           indf1	equ	0xFE7
  5661                           fsr1h	equ	0xFE2
  5662                           fsr1l	equ	0xFE1
  5663                           indf2	equ	0xFDF
  5664                           postinc2	equ	0xFDE
  5665                           postdec2	equ	0xFDD
  5666                           plusw2	equ	0xFDB
  5667                           fsr2h	equ	0xFDA
  5668                           fsr2l	equ	0xFD9
  5669                           status	equ	0xFD8
  5670                           
  5671 ;; *************** function ___lwdiv *****************
  5672 ;; Defined at:
  5673 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  dividend        2    0[BANK0 ] unsigned int 
  5676 ;;  divisor         2    2[BANK0 ] unsigned int 
  5677 ;; Auto vars:     Size  Location     Type
  5678 ;;  quotient        2    5[BANK0 ] unsigned int 
  5679 ;;  counter         1    4[BANK0 ] unsigned char 
  5680 ;; Return value:  Size  Location     Type
  5681 ;;                  2    0[BANK0 ] unsigned int 
  5682 ;; Registers used:
  5683 ;;		wreg, status,2, status,0
  5684 ;; Tracked objects:
  5685 ;;		On entry : 0/0
  5686 ;;		On exit  : 0/0
  5687 ;;		Unchanged: 0/0
  5688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5689 ;;      Params:         0       4       0       0
  5690 ;;      Locals:         0       3       0       0
  5691 ;;      Temps:          0       0       0       0
  5692 ;;      Totals:         0       7       0       0
  5693 ;;Total ram usage:        7 bytes
  5694 ;; Hardware stack levels used:    1
  5695 ;; Hardware stack levels required when called:    3
  5696 ;; This function calls:
  5697 ;;		Nothing
  5698 ;; This function is called by:
  5699 ;;		_sprintf
  5700 ;; This function uses a non-reentrant model
  5701 ;;
  5702                           
  5703                           	psect	text22
  5704  0017E8                     __ptext22:
  5705                           	opt stack 0
  5706  0017E8                     ___lwdiv:
  5707                           	opt stack 26
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;incstack = 0
  5711  0017E8  0E00               	movlw	0
  5712  0017EA  0100               	movlb	0	; () banked
  5713  0017EC  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5714  0017EE  0E00               	movlw	0
  5715  0017F0  6F65               	movwf	___lwdiv@quotient& (0+255),b
  5716                           
  5717                           ; BSR set to: 0
  5718  0017F2  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5719  0017F4  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5720  0017F6  B4D8               	btfsc	status,2,c
  5721  0017F8  D01C               	goto	l893
  5722                           
  5723                           ; BSR set to: 0
  5724  0017FA  0E01               	movlw	1
  5725  0017FC  6F64               	movwf	___lwdiv@counter& (0+255),b
  5726  0017FE  D004               	goto	l888
  5727  001800                     
  5728                           ; BSR set to: 0
  5729                           
  5730                           ; BSR set to: 0
  5731  001800  90D8               	bcf	status,0,c
  5732  001802  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  5733  001804  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5734  001806  2B64               	incf	___lwdiv@counter& (0+255),f,b
  5735  001808                     l888:
  5736                           
  5737                           ; BSR set to: 0
  5738                           
  5739                           ; BSR set to: 0
  5740  001808  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5741  00180A  D7FA               	goto	l889
  5742  00180C                     u2440:
  5743                           
  5744                           ; BSR set to: 0
  5745                           
  5746                           ; BSR set to: 0
  5747                           
  5748                           ; BSR set to: 0
  5749  00180C  90D8               	bcf	status,0,c
  5750  00180E  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  5751  001810  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5752                           
  5753                           ; BSR set to: 0
  5754  001812  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5755  001814  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  5756  001816  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5757  001818  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5758  00181A  A0D8               	btfss	status,0,c
  5759  00181C  D005               	goto	l892
  5760                           
  5761                           ; BSR set to: 0
  5762  00181E  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5763  001820  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  5764  001822  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5765  001824  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5766                           
  5767                           ; BSR set to: 0
  5768  001826  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  5769  001828                     l892:
  5770                           
  5771                           ; BSR set to: 0
  5772                           
  5773                           ; BSR set to: 0
  5774  001828  90D8               	bcf	status,0,c
  5775  00182A  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5776  00182C  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  5777                           
  5778                           ; BSR set to: 0
  5779  00182E  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  5780  001830  D7ED               	goto	u2440
  5781  001832                     l893:
  5782                           
  5783                           ; BSR set to: 0
  5784                           
  5785                           ; BSR set to: 0
  5786  001832  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  5787  001836  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5788                           
  5789                           ; BSR set to: 0
  5790  00183A  0012               	return		;funcret
  5791  00183C                     __end_of___lwdiv:
  5792                           	opt stack 0
  5793                           tblptru	equ	0xFF8
  5794                           tblptrh	equ	0xFF7
  5795                           tblptrl	equ	0xFF6
  5796                           tablat	equ	0xFF5
  5797                           prodh	equ	0xFF4
  5798                           prodl	equ	0xFF3
  5799                           intcon	equ	0xFF2
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           indf1	equ	0xFE7
  5803                           fsr1h	equ	0xFE2
  5804                           fsr1l	equ	0xFE1
  5805                           indf2	equ	0xFDF
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           plusw2	equ	0xFDB
  5809                           fsr2h	equ	0xFDA
  5810                           fsr2l	equ	0xFD9
  5811                           status	equ	0xFD8
  5812                           
  5813 ;; *************** function _grabRightIR *****************
  5814 ;; Defined at:
  5815 ;;		line 74 in file "IR_Reading.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;		None
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  IR_signal       2    5[BANK0 ] unsigned int 
  5820 ;;  i               1    7[BANK0 ] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  2    0[BANK0 ] unsigned int 
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5830 ;;      Params:         0       2       0       0
  5831 ;;      Locals:         0       3       0       0
  5832 ;;      Temps:          0       3       0       0
  5833 ;;      Totals:         0       8       0       0
  5834 ;;Total ram usage:        8 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    3
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_ScanIR
  5841 ;;		_ScanWithRange
  5842 ;;		_main
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           	psect	text23
  5847  001692                     __ptext23:
  5848                           	opt stack 0
  5849  001692                     _grabRightIR:
  5850                           	opt stack 27
  5851                           
  5852                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;incstack = 0
  5856  001692  0E00               	movlw	0
  5857  001694  0100               	movlb	0	; () banked
  5858  001696  6F66               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  5859  001698  0E00               	movlw	0
  5860  00169A  6F65               	movwf	grabRightIR@IR_signal& (0+255),b
  5861                           
  5862                           ;IR_Reading.c: 77: unsigned char i=0;
  5863  00169C  0E00               	movlw	0
  5864  00169E  6F67               	movwf	grabRightIR@i& (0+255),b
  5865                           
  5866                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5867  0016A0  0E00               	movlw	0
  5868  0016A2  6F67               	movwf	grabRightIR@i& (0+255),b
  5869  0016A4                     l3088:
  5870                           
  5871                           ; BSR set to: 0
  5872  0016A4  0E03               	movlw	3
  5873  0016A6  6567               	cpfsgt	grabRightIR@i& (0+255),b
  5874  0016A8  D001               	goto	l105
  5875  0016AA  D021               	goto	u2550
  5876  0016AC                     l105:
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5880                           
  5881                           ; BSR set to: 0
  5882  0016AC  5069               	movf	3945,w,c	;volatile
  5883  0016AE  6F62               	movwf	??_grabRightIR& (0+255),b
  5884  0016B0  6B63               	clrf	(??_grabRightIR+1)& (0+255),b
  5885  0016B2  0E07               	movlw	7
  5886  0016B4                     u2545:
  5887  0016B4  90D8               	bcf	status,0,c
  5888  0016B6  3762               	rlcf	??_grabRightIR& (0+255),f,b
  5889  0016B8  3763               	rlcf	(??_grabRightIR+1)& (0+255),f,b
  5890  0016BA  2EE8               	decfsz	wreg,f,c
  5891  0016BC  D7FB               	goto	u2545
  5892  0016BE  CF68 F064          	movff	3944,??_grabRightIR+2	;volatile
  5893  0016C2  90D8               	bcf	status,0,c
  5894  0016C4  3364               	rrcf	(??_grabRightIR+2)& (0+255),f,b
  5895  0016C6  5164               	movf	(??_grabRightIR+2)& (0+255),w,b
  5896  0016C8  1362               	iorwf	??_grabRightIR& (0+255),f,b
  5897  0016CA  0E00               	movlw	0
  5898  0016CC  1363               	iorwf	(??_grabRightIR+1)& (0+255),f,b
  5899  0016CE  5162               	movf	??_grabRightIR& (0+255),w,b
  5900  0016D0  2765               	addwf	grabRightIR@IR_signal& (0+255),f,b
  5901  0016D2  5163               	movf	(??_grabRightIR+1)& (0+255),w,b
  5902  0016D4  2366               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5906  0016D6  0E82               	movlw	130
  5907  0016D8  0100               	movlb	0	; () banked
  5908  0016DA  6F62               	movwf	??_grabRightIR& (0+255),b
  5909  0016DC  0EDD               	movlw	221
  5910  0016DE                     u3397:
  5911  0016DE  2EE8               	decfsz	wreg,f,c
  5912  0016E0  D7FE               	bra	u3397
  5913  0016E2  2F62               	decfsz	??_grabRightIR& (0+255),f,b
  5914  0016E4  D7FC               	bra	u3397
  5915  0016E6  D000               	nop2	
  5916  0016E8  0100               	movlb	0	; () banked
  5917  0016EA  2B67               	incf	grabRightIR@i& (0+255),f,b
  5918  0016EC  D7DB               	goto	l3088
  5919  0016EE                     u2550:
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;IR_Reading.c: 83: }
  5923                           ;IR_Reading.c: 85: return IR_signal>>2;
  5924                           
  5925                           ; BSR set to: 0
  5926  0016EE  C065  F062         	movff	grabRightIR@IR_signal,??_grabRightIR
  5927  0016F2  C066  F063         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5928  0016F6  90D8               	bcf	status,0,c
  5929  0016F8  3363               	rrcf	(??_grabRightIR+1)& (0+255),f,b
  5930  0016FA  3362               	rrcf	??_grabRightIR& (0+255),f,b
  5931  0016FC  90D8               	bcf	status,0,c
  5932  0016FE  3363               	rrcf	(??_grabRightIR+1)& (0+255),f,b
  5933  001700  3362               	rrcf	??_grabRightIR& (0+255),f,b
  5934  001702  C062  F060         	movff	??_grabRightIR,?_grabRightIR
  5935  001706  C063  F061         	movff	??_grabRightIR+1,?_grabRightIR+1
  5936  00170A  0012               	return	
  5937  00170C                     __end_of_grabRightIR:
  5938                           	opt stack 0
  5939                           tblptru	equ	0xFF8
  5940                           tblptrh	equ	0xFF7
  5941                           tblptrl	equ	0xFF6
  5942                           tablat	equ	0xFF5
  5943                           prodh	equ	0xFF4
  5944                           prodl	equ	0xFF3
  5945                           intcon	equ	0xFF2
  5946                           postinc0	equ	0xFEE
  5947                           wreg	equ	0xFE8
  5948                           indf1	equ	0xFE7
  5949                           fsr1h	equ	0xFE2
  5950                           fsr1l	equ	0xFE1
  5951                           indf2	equ	0xFDF
  5952                           postinc2	equ	0xFDE
  5953                           postdec2	equ	0xFDD
  5954                           plusw2	equ	0xFDB
  5955                           fsr2h	equ	0xFDA
  5956                           fsr2l	equ	0xFD9
  5957                           status	equ	0xFD8
  5958                           
  5959 ;; *************** function _grabLeftIR *****************
  5960 ;; Defined at:
  5961 ;;		line 90 in file "IR_Reading.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;		None
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;  IR_signal       2    5[BANK0 ] unsigned int 
  5966 ;;  i               1    7[BANK0 ] unsigned char 
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  2    0[BANK0 ] unsigned int 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5976 ;;      Params:         0       2       0       0
  5977 ;;      Locals:         0       3       0       0
  5978 ;;      Temps:          0       3       0       0
  5979 ;;      Totals:         0       8       0       0
  5980 ;;Total ram usage:        8 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    3
  5983 ;; This function calls:
  5984 ;;		Nothing
  5985 ;; This function is called by:
  5986 ;;		_ScanIR
  5987 ;;		_ScanWithRange
  5988 ;;		_main
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text24
  5993  00170C                     __ptext24:
  5994                           	opt stack 0
  5995  00170C                     _grabLeftIR:
  5996                           	opt stack 27
  5997                           
  5998                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;incstack = 0
  6002  00170C  0E00               	movlw	0
  6003  00170E  0100               	movlb	0	; () banked
  6004  001710  6F66               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  6005  001712  0E00               	movlw	0
  6006  001714  6F65               	movwf	grabLeftIR@IR_signal& (0+255),b
  6007                           
  6008                           ;IR_Reading.c: 93: unsigned char i=0;
  6009  001716  0E00               	movlw	0
  6010  001718  6F67               	movwf	grabLeftIR@i& (0+255),b
  6011                           
  6012                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6013  00171A  0E00               	movlw	0
  6014  00171C  6F67               	movwf	grabLeftIR@i& (0+255),b
  6015  00171E                     l3104:
  6016                           
  6017                           ; BSR set to: 0
  6018  00171E  0E03               	movlw	3
  6019  001720  6567               	cpfsgt	grabLeftIR@i& (0+255),b
  6020  001722  D001               	goto	l110
  6021  001724  D021               	goto	u2580
  6022  001726                     l110:
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6026                           
  6027                           ; BSR set to: 0
  6028  001726  5067               	movf	3943,w,c	;volatile
  6029  001728  6F62               	movwf	??_grabLeftIR& (0+255),b
  6030  00172A  6B63               	clrf	(??_grabLeftIR+1)& (0+255),b
  6031  00172C  0E07               	movlw	7
  6032  00172E                     u2575:
  6033  00172E  90D8               	bcf	status,0,c
  6034  001730  3762               	rlcf	??_grabLeftIR& (0+255),f,b
  6035  001732  3763               	rlcf	(??_grabLeftIR+1)& (0+255),f,b
  6036  001734  2EE8               	decfsz	wreg,f,c
  6037  001736  D7FB               	goto	u2575
  6038  001738  CF66 F064          	movff	3942,??_grabLeftIR+2	;volatile
  6039  00173C  90D8               	bcf	status,0,c
  6040  00173E  3364               	rrcf	(??_grabLeftIR+2)& (0+255),f,b
  6041  001740  5164               	movf	(??_grabLeftIR+2)& (0+255),w,b
  6042  001742  1362               	iorwf	??_grabLeftIR& (0+255),f,b
  6043  001744  0E00               	movlw	0
  6044  001746  1363               	iorwf	(??_grabLeftIR+1)& (0+255),f,b
  6045  001748  5162               	movf	??_grabLeftIR& (0+255),w,b
  6046  00174A  2765               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  6047  00174C  5163               	movf	(??_grabLeftIR+1)& (0+255),w,b
  6048  00174E  2366               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6052  001750  0E82               	movlw	130
  6053  001752  0100               	movlb	0	; () banked
  6054  001754  6F62               	movwf	??_grabLeftIR& (0+255),b
  6055  001756  0EDD               	movlw	221
  6056  001758                     u3407:
  6057  001758  2EE8               	decfsz	wreg,f,c
  6058  00175A  D7FE               	bra	u3407
  6059  00175C  2F62               	decfsz	??_grabLeftIR& (0+255),f,b
  6060  00175E  D7FC               	bra	u3407
  6061  001760  D000               	nop2	
  6062  001762  0100               	movlb	0	; () banked
  6063  001764  2B67               	incf	grabLeftIR@i& (0+255),f,b
  6064  001766  D7DB               	goto	l3104
  6065  001768                     u2580:
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;IR_Reading.c: 99: }
  6069                           ;IR_Reading.c: 101: return IR_signal>>2;
  6070                           
  6071                           ; BSR set to: 0
  6072  001768  C065  F062         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6073  00176C  C066  F063         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6074  001770  90D8               	bcf	status,0,c
  6075  001772  3363               	rrcf	(??_grabLeftIR+1)& (0+255),f,b
  6076  001774  3362               	rrcf	??_grabLeftIR& (0+255),f,b
  6077  001776  90D8               	bcf	status,0,c
  6078  001778  3363               	rrcf	(??_grabLeftIR+1)& (0+255),f,b
  6079  00177A  3362               	rrcf	??_grabLeftIR& (0+255),f,b
  6080  00177C  C062  F060         	movff	??_grabLeftIR,?_grabLeftIR
  6081  001780  C063  F061         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6082  001784  0012               	return	
  6083  001786                     __end_of_grabLeftIR:
  6084                           	opt stack 0
  6085                           tblptru	equ	0xFF8
  6086                           tblptrh	equ	0xFF7
  6087                           tblptrl	equ	0xFF6
  6088                           tablat	equ	0xFF5
  6089                           prodh	equ	0xFF4
  6090                           prodl	equ	0xFF3
  6091                           intcon	equ	0xFF2
  6092                           postinc0	equ	0xFEE
  6093                           wreg	equ	0xFE8
  6094                           indf1	equ	0xFE7
  6095                           fsr1h	equ	0xFE2
  6096                           fsr1l	equ	0xFE1
  6097                           indf2	equ	0xFDF
  6098                           postinc2	equ	0xFDE
  6099                           postdec2	equ	0xFDD
  6100                           plusw2	equ	0xFDB
  6101                           fsr2h	equ	0xFDA
  6102                           fsr2l	equ	0xFD9
  6103                           status	equ	0xFD8
  6104                           
  6105 ;; *************** function _SetLine *****************
  6106 ;; Defined at:
  6107 ;;		line 74 in file "LCD.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  line            1    wreg     unsigned char 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  line            1    6[BANK0 ] unsigned char 
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  1    wreg      void 
  6114 ;; Registers used:
  6115 ;;		wreg, status,2, status,0, cstack
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6121 ;;      Params:         0       0       0       0
  6122 ;;      Locals:         0       1       0       0
  6123 ;;      Temps:          0       0       0       0
  6124 ;;      Totals:         0       1       0       0
  6125 ;;Total ram usage:        1 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    6
  6128 ;; This function calls:
  6129 ;;		_SendLCD
  6130 ;; This function is called by:
  6131 ;;		_ScanIR
  6132 ;;		_ScanWithRange
  6133 ;;		_main
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text25
  6138  0019E6                     __ptext25:
  6139                           	opt stack 0
  6140  0019E6                     _SetLine:
  6141                           	opt stack 24
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;incstack = 0
  6145                           ;SetLine@line stored from wreg
  6146  0019E6  0100               	movlb	0	; () banked
  6147  0019E8  6F66               	movwf	SetLine@line& (0+255),b
  6148                           
  6149                           ;LCD.c: 75: if (line==1) {
  6150  0019EA  0100               	movlb	0	; () banked
  6151  0019EC  0566               	decf	SetLine@line& (0+255),w,b
  6152  0019EE  A4D8               	btfss	status,2,c
  6153  0019F0  D006               	goto	l147
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;LCD.c: 76: SendLCD(0x80,0);
  6157  0019F2  0E00               	movlw	0
  6158  0019F4  6F64               	movwf	SendLCD@type& (0+255),b
  6159  0019F6  0E80               	movlw	128
  6160  0019F8  ECBB  F00C         	call	_SendLCD
  6161                           
  6162                           ;LCD.c: 77: } else if (line==2) {
  6163  0019FC  D00A               	goto	l149
  6164  0019FE                     l147:
  6165  0019FE  0E02               	movlw	2
  6166  001A00  0100               	movlb	0	; () banked
  6167  001A02  1966               	xorwf	SetLine@line& (0+255),w,b
  6168  001A04  A4D8               	btfss	status,2,c
  6169  001A06  D005               	goto	l149
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;LCD.c: 78: SendLCD(0xC0,0);
  6173  001A08  0E00               	movlw	0
  6174  001A0A  6F64               	movwf	SendLCD@type& (0+255),b
  6175  001A0C  0EC0               	movlw	192
  6176  001A0E  ECBB  F00C         	call	_SendLCD
  6177  001A12                     l149:
  6178                           
  6179                           ;LCD.c: 79: }
  6180                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6181  001A12  0E21               	movlw	33
  6182  001A14                     u3417:
  6183  001A14  2EE8               	decfsz	wreg,f,c
  6184  001A16  D7FE               	bra	u3417
  6185  001A18  F000               	nop	
  6186  001A1A  0012               	return		;funcret
  6187  001A1C                     __end_of_SetLine:
  6188                           	opt stack 0
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           prodh	equ	0xFF4
  6194                           prodl	equ	0xFF3
  6195                           intcon	equ	0xFF2
  6196                           postinc0	equ	0xFEE
  6197                           wreg	equ	0xFE8
  6198                           indf1	equ	0xFE7
  6199                           fsr1h	equ	0xFE2
  6200                           fsr1l	equ	0xFE1
  6201                           indf2	equ	0xFDF
  6202                           postinc2	equ	0xFDE
  6203                           postdec2	equ	0xFDD
  6204                           plusw2	equ	0xFDB
  6205                           fsr2h	equ	0xFDA
  6206                           fsr2l	equ	0xFD9
  6207                           status	equ	0xFD8
  6208                           
  6209 ;; *************** function _LCD_String *****************
  6210 ;; Defined at:
  6211 ;;		line 83 in file "LCD.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;  string          2    6[BANK0 ] PTR unsigned char 
  6214 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6215 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6216 ;;		 -> STR_1(12), 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;		None
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  1    wreg      void 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6228 ;;      Params:         0       2       0       0
  6229 ;;      Locals:         0       0       0       0
  6230 ;;      Temps:          0       0       0       0
  6231 ;;      Totals:         0       2       0       0
  6232 ;;Total ram usage:        2 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    6
  6235 ;; This function calls:
  6236 ;;		_SendLCD
  6237 ;; This function is called by:
  6238 ;;		_ScanIR
  6239 ;;		_ScanWithRange
  6240 ;;		_main
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           	psect	text26
  6245  001786                     __ptext26:
  6246                           	opt stack 0
  6247  001786                     _LCD_String:
  6248                           	opt stack 23
  6249                           
  6250                           ;LCD.c: 85: while(*string != 0){
  6251                           
  6252                           ;incstack = 0
  6253  001786  D01C               	goto	l153
  6254  001788                     
  6255                           ;LCD.c: 88: SendLCD(*string++,1);
  6256  001788  0E01               	movlw	1
  6257  00178A  0100               	movlb	0	; () banked
  6258  00178C  6F64               	movwf	SendLCD@type& (0+255),b
  6259  00178E  C066  FFF6         	movff	LCD_String@string,tblptrl
  6260  001792  C067  FFF7         	movff	LCD_String@string+1,tblptrh
  6261  001796  6AF8               	clrf	tblptru,c
  6262  001798  0E02               	movlw	(high __ramtop+-1)
  6263  00179A  64F7               	cpfsgt	tblptrh,c
  6264  00179C  D003               	bra	u2617
  6265  00179E  0008               	tblrd		*
  6266  0017A0  50F5               	movf	tablat,w,c
  6267  0017A2  D005               	bra	u2610
  6268  0017A4                     u2617:
  6269  0017A4  CFF6 FFE1          	movff	tblptrl,fsr1l
  6270  0017A8  CFF7 FFE2          	movff	tblptrh,fsr1h
  6271  0017AC  50E7               	movf	indf1,w,c
  6272  0017AE                     u2610:
  6273  0017AE  ECBB  F00C         	call	_SendLCD
  6274  0017B2  0100               	movlb	0	; () banked
  6275  0017B4  4B66               	infsnz	LCD_String@string& (0+255),f,b
  6276  0017B6  2B67               	incf	(LCD_String@string+1)& (0+255),f,b
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6280  0017B8  0E21               	movlw	33
  6281  0017BA                     u3427:
  6282  0017BA  2EE8               	decfsz	wreg,f,c
  6283  0017BC  D7FE               	bra	u3427
  6284  0017BE  F000               	nop	
  6285  0017C0                     l153:
  6286  0017C0  C066  FFF6         	movff	LCD_String@string,tblptrl
  6287  0017C4  C067  FFF7         	movff	LCD_String@string+1,tblptrh
  6288  0017C8  6AF8               	clrf	tblptru,c
  6289  0017CA  0E02               	movlw	(high __ramtop+-1)
  6290  0017CC  64F7               	cpfsgt	tblptrh,c
  6291  0017CE  D003               	bra	u2627
  6292  0017D0  0008               	tblrd		*
  6293  0017D2  50F5               	movf	tablat,w,c
  6294  0017D4  D005               	bra	u2620
  6295  0017D6                     u2627:
  6296  0017D6  CFF6 FFE1          	movff	tblptrl,fsr1l
  6297  0017DA  CFF7 FFE2          	movff	tblptrh,fsr1h
  6298  0017DE  50E7               	movf	indf1,w,c
  6299  0017E0                     u2620:
  6300  0017E0  0900               	iorlw	0
  6301  0017E2  B4D8               	btfsc	status,2,c
  6302  0017E4  0012               	return	
  6303  0017E6  D7D0               	goto	l154
  6304  0017E8                     __end_of_LCD_String:
  6305                           	opt stack 0
  6306                           tblptru	equ	0xFF8
  6307                           tblptrh	equ	0xFF7
  6308                           tblptrl	equ	0xFF6
  6309                           tablat	equ	0xFF5
  6310                           prodh	equ	0xFF4
  6311                           prodl	equ	0xFF3
  6312                           intcon	equ	0xFF2
  6313                           postinc0	equ	0xFEE
  6314                           wreg	equ	0xFE8
  6315                           indf1	equ	0xFE7
  6316                           fsr1h	equ	0xFE2
  6317                           fsr1l	equ	0xFE1
  6318                           indf2	equ	0xFDF
  6319                           postinc2	equ	0xFDE
  6320                           postdec2	equ	0xFDD
  6321                           plusw2	equ	0xFDB
  6322                           fsr2h	equ	0xFDA
  6323                           fsr2l	equ	0xFD9
  6324                           status	equ	0xFD8
  6325                           
  6326 ;; *************** function _SendLCD *****************
  6327 ;; Defined at:
  6328 ;;		line 27 in file "LCD.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;  Byte            1    wreg     unsigned char 
  6331 ;;  type            1    4[BANK0 ] unsigned char 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  Byte            1    5[BANK0 ] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;                  1    wreg      void 
  6336 ;; Registers used:
  6337 ;;		wreg, status,2, status,0, cstack
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6343 ;;      Params:         0       1       0       0
  6344 ;;      Locals:         0       1       0       0
  6345 ;;      Temps:          0       0       0       0
  6346 ;;      Totals:         0       2       0       0
  6347 ;;Total ram usage:        2 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    5
  6350 ;; This function calls:
  6351 ;;		_LCDout
  6352 ;; This function is called by:
  6353 ;;		_initLCD
  6354 ;;		_SetLine
  6355 ;;		_LCD_String
  6356 ;;		_ScanIR
  6357 ;;		_ScanWithRange
  6358 ;;		_main
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text27
  6363  001976                     __ptext27:
  6364                           	opt stack 0
  6365  001976                     _SendLCD:
  6366                           	opt stack 24
  6367                           
  6368                           ;incstack = 0
  6369                           ;SendLCD@Byte stored from wreg
  6370  001976  0100               	movlb	0	; () banked
  6371  001978  6F65               	movwf	SendLCD@Byte& (0+255),b
  6372                           
  6373                           ;LCD.c: 30: LATAbits.LATA6=type;
  6374  00197A  0100               	movlb	0	; () banked
  6375  00197C  B164               	btfsc	SendLCD@type& (0+255),0,b
  6376  00197E  D002               	bra	u2405
  6377  001980  9C89               	bcf	3977,6,c	;volatile
  6378  001982  D001               	bra	u2406
  6379  001984                     u2405:
  6380  001984  8C89               	bsf	3977,6,c	;volatile
  6381  001986                     u2406:
  6382                           
  6383                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6384  001986  0100               	movlb	0	; () banked
  6385  001988  3965               	swapf	SendLCD@Byte& (0+255),w,b
  6386  00198A  0B0F               	andlw	15
  6387  00198C  0B0F               	andlw	15
  6388  00198E  ECC1  F009         	call	_LCDout
  6389                           
  6390                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6391  001992  0E06               	movlw	6
  6392  001994                     u3437:
  6393  001994  2EE8               	decfsz	wreg,f,c
  6394  001996  D7FE               	bra	u3437
  6395  001998  D000               	nop2	
  6396                           
  6397                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6398  00199A  0100               	movlb	0	; () banked
  6399  00199C  5165               	movf	SendLCD@Byte& (0+255),w,b
  6400  00199E  0B0F               	andlw	15
  6401  0019A0  ECC1  F009         	call	_LCDout
  6402                           
  6403                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6404  0019A4  0E21               	movlw	33
  6405  0019A6                     u3447:
  6406  0019A6  2EE8               	decfsz	wreg,f,c
  6407  0019A8  D7FE               	bra	u3447
  6408  0019AA  F000               	nop	
  6409  0019AC  0012               	return		;funcret
  6410  0019AE                     __end_of_SendLCD:
  6411                           	opt stack 0
  6412                           tblptru	equ	0xFF8
  6413                           tblptrh	equ	0xFF7
  6414                           tblptrl	equ	0xFF6
  6415                           tablat	equ	0xFF5
  6416                           prodh	equ	0xFF4
  6417                           prodl	equ	0xFF3
  6418                           intcon	equ	0xFF2
  6419                           postinc0	equ	0xFEE
  6420                           wreg	equ	0xFE8
  6421                           indf1	equ	0xFE7
  6422                           fsr1h	equ	0xFE2
  6423                           fsr1l	equ	0xFE1
  6424                           indf2	equ	0xFDF
  6425                           postinc2	equ	0xFDE
  6426                           postdec2	equ	0xFDD
  6427                           plusw2	equ	0xFDB
  6428                           fsr2h	equ	0xFDA
  6429                           fsr2l	equ	0xFD9
  6430                           status	equ	0xFD8
  6431                           
  6432 ;; *************** function _LCDout *****************
  6433 ;; Defined at:
  6434 ;;		line 14 in file "LCD.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  number          1    wreg     unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  number          1    3[BANK0 ] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6448 ;;      Params:         0       0       0       0
  6449 ;;      Locals:         0       1       0       0
  6450 ;;      Temps:          0       3       0       0
  6451 ;;      Totals:         0       4       0       0
  6452 ;;Total ram usage:        4 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    4
  6455 ;; This function calls:
  6456 ;;		_E_TOG
  6457 ;; This function is called by:
  6458 ;;		_SendLCD
  6459 ;;		_initLCD
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           	psect	text28
  6464  001382                     __ptext28:
  6465                           	opt stack 0
  6466  001382                     _LCDout:
  6467                           	opt stack 24
  6468                           
  6469                           ;incstack = 0
  6470                           ;LCDout@number stored from wreg
  6471  001382  0100               	movlb	0	; () banked
  6472  001384  6F63               	movwf	LCDout@number& (0+255),b
  6473                           
  6474                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6475  001386  0100               	movlb	0	; () banked
  6476  001388  5163               	movf	LCDout@number& (0+255),w,b
  6477  00138A  6F60               	movwf	??_LCDout& (0+255),b
  6478  00138C  6B61               	clrf	(??_LCDout+1)& (0+255),b
  6479  00138E  0E07               	movlw	7
  6480  001390                     u2295:
  6481  001390  90D8               	bcf	status,0,c
  6482  001392  3760               	rlcf	??_LCDout& (0+255),f,b
  6483  001394  3761               	rlcf	(??_LCDout+1)& (0+255),f,b
  6484  001396  2EE8               	decfsz	wreg,f,c
  6485  001398  D7FB               	goto	u2295
  6486  00139A  0E07               	movlw	7
  6487  00139C  6F62               	movwf	(??_LCDout+2)& (0+255),b
  6488  00139E                     u2305:
  6489  00139E  3561               	rlcf	(??_LCDout+1)& (0+255),w,b
  6490  0013A0  3361               	rrcf	(??_LCDout+1)& (0+255),f,b
  6491  0013A2  3360               	rrcf	??_LCDout& (0+255),f,b
  6492  0013A4  2F62               	decfsz	(??_LCDout+2)& (0+255),f,b
  6493  0013A6  D7FB               	goto	u2305
  6494  0013A8  4760               	rlncf	??_LCDout& (0+255),f,b
  6495  0013AA  508B               	movf	3979,w,c	;volatile
  6496  0013AC  1960               	xorwf	??_LCDout& (0+255),w,b
  6497  0013AE  0BFD               	andlw	-3
  6498  0013B0  1960               	xorwf	??_LCDout& (0+255),w,b
  6499  0013B2  6E8B               	movwf	3979,c	;volatile
  6500                           
  6501                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6502  0013B4  5163               	movf	LCDout@number& (0+255),w,b
  6503  0013B6  6F60               	movwf	??_LCDout& (0+255),b
  6504  0013B8  6B61               	clrf	(??_LCDout+1)& (0+255),b
  6505  0013BA  0E06               	movlw	6
  6506  0013BC                     u2315:
  6507  0013BC  90D8               	bcf	status,0,c
  6508  0013BE  3760               	rlcf	??_LCDout& (0+255),f,b
  6509  0013C0  3761               	rlcf	(??_LCDout+1)& (0+255),f,b
  6510  0013C2  2EE8               	decfsz	wreg,f,c
  6511  0013C4  D7FB               	goto	u2315
  6512  0013C6  0E07               	movlw	7
  6513  0013C8  6F62               	movwf	(??_LCDout+2)& (0+255),b
  6514  0013CA                     u2325:
  6515  0013CA  3561               	rlcf	(??_LCDout+1)& (0+255),w,b
  6516  0013CC  3361               	rrcf	(??_LCDout+1)& (0+255),f,b
  6517  0013CE  3360               	rrcf	??_LCDout& (0+255),f,b
  6518  0013D0  2F62               	decfsz	(??_LCDout+2)& (0+255),f,b
  6519  0013D2  D7FB               	goto	u2325
  6520  0013D4  4760               	rlncf	??_LCDout& (0+255),f,b
  6521  0013D6  4760               	rlncf	??_LCDout& (0+255),f,b
  6522  0013D8  508B               	movf	3979,w,c	;volatile
  6523  0013DA  1960               	xorwf	??_LCDout& (0+255),w,b
  6524  0013DC  0BFB               	andlw	-5
  6525  0013DE  1960               	xorwf	??_LCDout& (0+255),w,b
  6526  0013E0  6E8B               	movwf	3979,c	;volatile
  6527                           
  6528                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6529  0013E2  5163               	movf	LCDout@number& (0+255),w,b
  6530  0013E4  6F60               	movwf	??_LCDout& (0+255),b
  6531  0013E6  6B61               	clrf	(??_LCDout+1)& (0+255),b
  6532  0013E8  0E05               	movlw	5
  6533  0013EA                     u2335:
  6534  0013EA  90D8               	bcf	status,0,c
  6535  0013EC  3760               	rlcf	??_LCDout& (0+255),f,b
  6536  0013EE  3761               	rlcf	(??_LCDout+1)& (0+255),f,b
  6537  0013F0  2EE8               	decfsz	wreg,f,c
  6538  0013F2  D7FB               	goto	u2335
  6539  0013F4  0E07               	movlw	7
  6540  0013F6  6F62               	movwf	(??_LCDout+2)& (0+255),b
  6541  0013F8                     u2345:
  6542  0013F8  3561               	rlcf	(??_LCDout+1)& (0+255),w,b
  6543  0013FA  3361               	rrcf	(??_LCDout+1)& (0+255),f,b
  6544  0013FC  3360               	rrcf	??_LCDout& (0+255),f,b
  6545  0013FE  2F62               	decfsz	(??_LCDout+2)& (0+255),f,b
  6546  001400  D7FB               	goto	u2345
  6547  001402  508C               	movf	3980,w,c	;volatile
  6548  001404  1960               	xorwf	??_LCDout& (0+255),w,b
  6549  001406  0BFE               	andlw	-2
  6550  001408  1960               	xorwf	??_LCDout& (0+255),w,b
  6551  00140A  6E8C               	movwf	3980,c	;volatile
  6552                           
  6553                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6554  00140C  5163               	movf	LCDout@number& (0+255),w,b
  6555  00140E  6F60               	movwf	??_LCDout& (0+255),b
  6556  001410  6B61               	clrf	(??_LCDout+1)& (0+255),b
  6557  001412  3B60               	swapf	??_LCDout& (0+255),f,b
  6558  001414  3B61               	swapf	(??_LCDout+1)& (0+255),f,b
  6559  001416  0EF0               	movlw	240
  6560  001418  1761               	andwf	(??_LCDout+1)& (0+255),f,b
  6561  00141A  5160               	movf	??_LCDout& (0+255),w,b
  6562  00141C  0B0F               	andlw	15
  6563  00141E  1361               	iorwf	(??_LCDout+1)& (0+255),f,b
  6564  001420  0EF0               	movlw	240
  6565  001422  1760               	andwf	??_LCDout& (0+255),f,b
  6566  001424  0E07               	movlw	7
  6567  001426  6F62               	movwf	(??_LCDout+2)& (0+255),b
  6568  001428                     u2355:
  6569  001428  3561               	rlcf	(??_LCDout+1)& (0+255),w,b
  6570  00142A  3361               	rrcf	(??_LCDout+1)& (0+255),f,b
  6571  00142C  3360               	rrcf	??_LCDout& (0+255),f,b
  6572  00142E  2F62               	decfsz	(??_LCDout+2)& (0+255),f,b
  6573  001430  D7FB               	goto	u2355
  6574  001432  4760               	rlncf	??_LCDout& (0+255),f,b
  6575  001434  508C               	movf	3980,w,c	;volatile
  6576  001436  1960               	xorwf	??_LCDout& (0+255),w,b
  6577  001438  0BFD               	andlw	-3
  6578  00143A  1960               	xorwf	??_LCDout& (0+255),w,b
  6579  00143C  6E8C               	movwf	3980,c	;volatile
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;LCD.c: 21: E_TOG();
  6583  00143E  EC9D  F00D         	call	_E_TOG	;wreg free
  6584                           
  6585                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6586  001442  0E03               	movlw	3
  6587  001444                     u3457:
  6588  001444  2EE8               	decfsz	wreg,f,c
  6589  001446  D7FE               	bra	u3457
  6590  001448  F000               	nop	
  6591  00144A  0012               	return		;funcret
  6592  00144C                     __end_of_LCDout:
  6593                           	opt stack 0
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           prodh	equ	0xFF4
  6599                           prodl	equ	0xFF3
  6600                           intcon	equ	0xFF2
  6601                           postinc0	equ	0xFEE
  6602                           wreg	equ	0xFE8
  6603                           indf1	equ	0xFE7
  6604                           fsr1h	equ	0xFE2
  6605                           fsr1l	equ	0xFE1
  6606                           indf2	equ	0xFDF
  6607                           postinc2	equ	0xFDE
  6608                           postdec2	equ	0xFDD
  6609                           plusw2	equ	0xFDB
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _E_TOG *****************
  6615 ;; Defined at:
  6616 ;;		line 5 in file "LCD.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6630 ;;      Params:         0       0       0       0
  6631 ;;      Locals:         0       0       0       0
  6632 ;;      Temps:          0       0       0       0
  6633 ;;      Totals:         0       0       0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    3
  6637 ;; This function calls:
  6638 ;;		Nothing
  6639 ;; This function is called by:
  6640 ;;		_LCDout
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text29
  6645  001B3A                     __ptext29:
  6646                           	opt stack 0
  6647  001B3A                     _E_TOG:
  6648                           	opt stack 24
  6649                           
  6650                           ;LCD.c: 8: LATCbits.LATC0=1;
  6651                           
  6652                           ;incstack = 0
  6653  001B3A  808B               	bsf	3979,0,c	;volatile
  6654                           
  6655                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6656  001B3C  0E03               	movlw	3
  6657  001B3E                     u3467:
  6658  001B3E  2EE8               	decfsz	wreg,f,c
  6659  001B40  D7FE               	bra	u3467
  6660  001B42  F000               	nop	
  6661                           
  6662                           ;LCD.c: 10: LATCbits.LATC0=0;
  6663  001B44  908B               	bcf	3979,0,c	;volatile
  6664  001B46  0012               	return		;funcret
  6665  001B48                     __end_of_E_TOG:
  6666                           	opt stack 0
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodh	equ	0xFF4
  6672                           prodl	equ	0xFF3
  6673                           intcon	equ	0xFF2
  6674                           postinc0	equ	0xFEE
  6675                           wreg	equ	0xFE8
  6676                           indf1	equ	0xFE7
  6677                           fsr1h	equ	0xFE2
  6678                           fsr1l	equ	0xFE1
  6679                           indf2	equ	0xFDF
  6680                           postinc2	equ	0xFDE
  6681                           postdec2	equ	0xFDD
  6682                           plusw2	equ	0xFDB
  6683                           fsr2h	equ	0xFDA
  6684                           fsr2l	equ	0xFD9
  6685                           status	equ	0xFD8
  6686                           
  6687 ;; *************** function _InterruptHandlerLow *****************
  6688 ;; Defined at:
  6689 ;;		line 18 in file "main.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;		None
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;		None
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6703 ;;      Params:         0       0       0       0
  6704 ;;      Locals:         0       0       0       0
  6705 ;;      Temps:         21       0       0       0
  6706 ;;      Totals:        21       0       0       0
  6707 ;;Total ram usage:       21 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    2
  6710 ;; This function calls:
  6711 ;;		Nothing
  6712 ;; This function is called by:
  6713 ;;		Interrupt level 1
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	intcodelo
  6718  000018                     __pintcodelo:
  6719                           	opt stack 0
  6720  000018                     _InterruptHandlerLow:
  6721                           	opt stack 23
  6722                           
  6723                           ;incstack = 0
  6724  000018  8036               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6725  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  6726  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  6727  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  6728  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  6729  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  6730  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  6731  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  6732  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  6733  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  6734  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  6735  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  6736  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  6737  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  6738  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  6739  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  6740  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  6741  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  6742  00005E  C036  F028         	movff	btemp,??_InterruptHandlerLow+17
  6743  000062  C037  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  6744  000066  C038  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  6745  00006A  C039  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  6746                           
  6747                           ;main.c: 20: if (PIR1bits.RCIF) {
  6748  00006E  AA9E               	btfss	3998,5,c	;volatile
  6749  000070  D016               	goto	i1l370
  6750                           
  6751                           ;main.c: 21: ReceivedString[i]=RCREG;
  6752  000072  5035               	movf	_i,w,c	;volatile
  6753  000074  0D01               	mullw	1
  6754  000076  0EE9               	movlw	low _ReceivedString
  6755  000078  24F3               	addwf	prodl,w,c
  6756  00007A  6ED9               	movwf	fsr2l,c
  6757  00007C  0E01               	movlw	high _ReceivedString
  6758  00007E  20F4               	addwfc	prodh,w,c
  6759  000080  6EDA               	movwf	fsr2h,c
  6760  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  6761                           
  6762                           ;main.c: 22: RFID_Read=1;
  6763  000086  0E01               	movlw	1
  6764  000088  0101               	movlb	1	; () banked
  6765  00008A  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
  6766                           
  6767                           ; BSR set to: 1
  6768                           ;main.c: 23: if (i==15){
  6769  00008C  0E0F               	movlw	15
  6770  00008E  1835               	xorwf	_i,w,c	;volatile
  6771  000090  A4D8               	btfss	status,2,c
  6772  000092  D003               	goto	i1l371
  6773                           
  6774                           ; BSR set to: 1
  6775                           ;main.c: 24: i=0;
  6776  000094  0E00               	movlw	0
  6777  000096  6E35               	movwf	_i,c	;volatile
  6778                           
  6779                           ;main.c: 25: }else{
  6780  000098  D001               	goto	i1l372
  6781  00009A                     i1l371:
  6782                           
  6783                           ; BSR set to: 1
  6784                           ;main.c: 26: i++;
  6785                           
  6786                           ; BSR set to: 1
  6787  00009A  2A35               	incf	_i,f,c	;volatile
  6788  00009C                     i1l372:
  6789                           
  6790                           ; BSR set to: 1
  6791                           ;main.c: 27: }
  6792                           ;main.c: 28: PIR1bits.RCIF=0;
  6793                           
  6794                           ; BSR set to: 1
  6795  00009C  9A9E               	bcf	3998,5,c	;volatile
  6796  00009E                     i1l370:
  6797                           
  6798                           ; BSR set to: 1
  6799  00009E  C02B  F039         	movff	??_InterruptHandlerLow+20,btemp+3
  6800  0000A2  C02A  F038         	movff	??_InterruptHandlerLow+19,btemp+2
  6801  0000A6  C029  F037         	movff	??_InterruptHandlerLow+18,btemp+1
  6802  0000AA  C028  F036         	movff	??_InterruptHandlerLow+17,btemp
  6803  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6804  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6805  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6806  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6807  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6808  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6809  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6810  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6811  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6812  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6813  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6814  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6815  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6816  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6817  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6818  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6819  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  6820  0000F2  9036               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6821  0000F4  0010               	retfie	
  6822  0000F6                     __end_of_InterruptHandlerLow:
  6823                           	opt stack 0
  6824                           pclatu	equ	0xFFB
  6825                           pclath	equ	0xFFA
  6826                           tblptru	equ	0xFF8
  6827                           tblptrh	equ	0xFF7
  6828                           tblptrl	equ	0xFF6
  6829                           tablat	equ	0xFF5
  6830                           prodh	equ	0xFF4
  6831                           prodl	equ	0xFF3
  6832                           intcon	equ	0xFF2
  6833                           postinc0	equ	0xFEE
  6834                           fsr0h	equ	0xFEA
  6835                           fsr0l	equ	0xFE9
  6836                           wreg	equ	0xFE8
  6837                           indf1	equ	0xFE7
  6838                           fsr1h	equ	0xFE2
  6839                           fsr1l	equ	0xFE1
  6840                           bsr	equ	0xFE0
  6841                           indf2	equ	0xFDF
  6842                           postinc2	equ	0xFDE
  6843                           postdec2	equ	0xFDD
  6844                           plusw2	equ	0xFDB
  6845                           fsr2h	equ	0xFDA
  6846                           fsr2l	equ	0xFD9
  6847                           status	equ	0xFD8
  6848                           
  6849 ;; *************** function _InterruptHandlerHigh *****************
  6850 ;; Defined at:
  6851 ;;		line 34 in file "main.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6865 ;;      Params:         0       0       0       0
  6866 ;;      Locals:         0       0       0       0
  6867 ;;      Temps:         18       0       0       0
  6868 ;;      Totals:        18       0       0       0
  6869 ;;Total ram usage:       18 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    1
  6872 ;; This function calls:
  6873 ;;		i2_delay_tenth_s
  6874 ;; This function is called by:
  6875 ;;		Interrupt level 2
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	intcode
  6880  000008                     __pintcode:
  6881                           	opt stack 0
  6882  000008                     _InterruptHandlerHigh:
  6883                           	opt stack 23
  6884                           
  6885                           ;incstack = 0
  6886  000008  8236               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6887  00000A  EF26  F00A         	goto	int_func
  6888                           pclatu	equ	0xFFB
  6889                           pclath	equ	0xFFA
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           postinc0	equ	0xFEE
  6898                           fsr0h	equ	0xFEA
  6899                           fsr0l	equ	0xFE9
  6900                           wreg	equ	0xFE8
  6901                           indf1	equ	0xFE7
  6902                           fsr1h	equ	0xFE2
  6903                           fsr1l	equ	0xFE1
  6904                           bsr	equ	0xFE0
  6905                           indf2	equ	0xFDF
  6906                           postinc2	equ	0xFDE
  6907                           postdec2	equ	0xFDD
  6908                           plusw2	equ	0xFDB
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913                           	psect	intcode_body
  6914  00144C                     __pintcode_body:
  6915                           	opt stack 23
  6916  00144C                     int_func:
  6917                           	opt stack 23
  6918  00144C  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6919  001450  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6920  001454  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6921  001458  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6922  00145C  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6923  001460  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6924  001464  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6925  001468  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6926  00146C  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6927  001470  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6928  001474  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6929  001478  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6930  00147C  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6931  001480  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6932  001484  C036  F013         	movff	btemp,??_InterruptHandlerHigh+14
  6933  001488  C037  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  6934  00148C  C038  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  6935  001490  C039  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  6936                           
  6937                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6938  001494  A2F2               	btfss	intcon,1,c	;volatile
  6939  001496  D00D               	goto	i2l378
  6940                           
  6941                           ;main.c: 36: if (mode==-1) {
  6942  001498  2834               	incf	_mode,w,c	;volatile
  6943  00149A  A4D8               	btfss	status,2,c
  6944  00149C  D003               	goto	i2l379
  6945                           
  6946                           ;main.c: 38: mode=1;
  6947  00149E  0E01               	movlw	1
  6948  0014A0  6E34               	movwf	_mode,c	;volatile
  6949                           
  6950                           ;main.c: 39: } else if (mode==0) {
  6951  0014A2  D003               	goto	i2l382
  6952  0014A4                     i2l379:
  6953  0014A4  5034               	movf	_mode,w,c	;volatile
  6954  0014A6  A4D8               	btfss	status,2,c
  6955                           
  6956                           ;main.c: 43: mode=-1;
  6957                           
  6958                           ;main.c: 41: } else {
  6959  0014A8  6834               	setf	_mode,c	;volatile
  6960  0014AA                     i2l382:
  6961                           
  6962                           ;main.c: 44: }
  6963                           ;main.c: 46: delay_tenth_s(2);
  6964  0014AA  0E02               	movlw	2
  6965  0014AC  ECD7  F00C         	call	i2_delay_tenth_s
  6966                           
  6967                           ;main.c: 47: INTCONbits.INT0IF=0;
  6968  0014B0  92F2               	bcf	intcon,1,c	;volatile
  6969  0014B2                     i2l378:
  6970  0014B2  C016  F039         	movff	??_InterruptHandlerHigh+17,btemp+3
  6971  0014B6  C015  F038         	movff	??_InterruptHandlerHigh+16,btemp+2
  6972  0014BA  C014  F037         	movff	??_InterruptHandlerHigh+15,btemp+1
  6973  0014BE  C013  F036         	movff	??_InterruptHandlerHigh+14,btemp
  6974  0014C2  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6975  0014C6  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6976  0014CA  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6977  0014CE  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6978  0014D2  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6979  0014D6  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6980  0014DA  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6981  0014DE  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6982  0014E2  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6983  0014E6  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6984  0014EA  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6985  0014EE  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6986  0014F2  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6987  0014F6  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6988  0014FA  9236               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6989  0014FC  0011               	retfie		f
  6990  0014FE                     __end_of_InterruptHandlerHigh:
  6991                           	opt stack 0
  6992                           pclatu	equ	0xFFB
  6993                           pclath	equ	0xFFA
  6994                           tblptru	equ	0xFF8
  6995                           tblptrh	equ	0xFF7
  6996                           tblptrl	equ	0xFF6
  6997                           tablat	equ	0xFF5
  6998                           prodh	equ	0xFF4
  6999                           prodl	equ	0xFF3
  7000                           intcon	equ	0xFF2
  7001                           postinc0	equ	0xFEE
  7002                           fsr0h	equ	0xFEA
  7003                           fsr0l	equ	0xFE9
  7004                           wreg	equ	0xFE8
  7005                           indf1	equ	0xFE7
  7006                           fsr1h	equ	0xFE2
  7007                           fsr1l	equ	0xFE1
  7008                           bsr	equ	0xFE0
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           plusw2	equ	0xFDB
  7013                           fsr2h	equ	0xFDA
  7014                           fsr2l	equ	0xFD9
  7015                           status	equ	0xFD8
  7016                           
  7017 ;; *************** function i2_delay_tenth_s *****************
  7018 ;; Defined at:
  7019 ;;		line 32 in file "Movement.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  tenth_second    1    wreg     unsigned char 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7024 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;                  1    wreg      void 
  7027 ;; Registers used:
  7028 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7034 ;;      Params:         0       0       0       0
  7035 ;;      Locals:         3       0       0       0
  7036 ;;      Temps:          1       0       0       0
  7037 ;;      Totals:         4       0       0       0
  7038 ;;Total ram usage:        4 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; This function calls:
  7041 ;;		Nothing
  7042 ;; This function is called by:
  7043 ;;		_InterruptHandlerHigh
  7044 ;; This function uses a non-reentrant model
  7045 ;;
  7046                           
  7047                           	psect	text32
  7048  0019AE                     __ptext32:
  7049                           	opt stack 0
  7050  0019AE                     i2_delay_tenth_s:
  7051                           	opt stack 23
  7052                           
  7053                           ;incstack = 0
  7054                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7055  0019AE  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7056                           
  7057                           ;Movement.c: 33: unsigned int i=0;
  7058  0019B0  0E00               	movlw	0
  7059  0019B2  6E04               	movwf	i2delay_tenth_s@i+1,c
  7060  0019B4  0E00               	movlw	0
  7061  0019B6  6E03               	movwf	i2delay_tenth_s@i,c
  7062                           
  7063                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7064  0019B8  0E00               	movlw	0
  7065  0019BA  6E04               	movwf	i2delay_tenth_s@i+1,c
  7066  0019BC  0E01               	movlw	1
  7067  0019BE  6E03               	movwf	i2delay_tenth_s@i,c
  7068  0019C0  D009               	goto	i2l204
  7069  0019C2                     
  7070                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7071  0019C2  0E82               	movlw	130
  7072  0019C4  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7073  0019C6  0EDE               	movlw	222
  7074  0019C8                     i2u347_47:
  7075  0019C8  2EE8               	decfsz	wreg,f,c
  7076  0019CA  D7FE               	bra	i2u347_47
  7077  0019CC  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7078  0019CE  D7FC               	bra	i2u347_47
  7079  0019D0  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7080  0019D2  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7081  0019D4                     i2l204:
  7082  0019D4  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7083  0019D6  0D02               	mullw	2
  7084  0019D8  5003               	movf	i2delay_tenth_s@i,w,c
  7085  0019DA  5CF3               	subwf	prodl,w,c
  7086  0019DC  5004               	movf	i2delay_tenth_s@i+1,w,c
  7087  0019DE  58F4               	subwfb	prodh,w,c
  7088  0019E0  A0D8               	btfss	status,0,c
  7089  0019E2  0012               	return	
  7090  0019E4  D7EE               	goto	i2l205
  7091  0019E6                     __end_ofi2_delay_tenth_s:
  7092                           	opt stack 0
  7093                           pclatu	equ	0xFFB
  7094                           pclath	equ	0xFFA
  7095                           tblptru	equ	0xFF8
  7096                           tblptrh	equ	0xFF7
  7097                           tblptrl	equ	0xFF6
  7098                           tablat	equ	0xFF5
  7099                           prodh	equ	0xFF4
  7100                           prodl	equ	0xFF3
  7101                           intcon	equ	0xFF2
  7102                           postinc0	equ	0xFEE
  7103                           fsr0h	equ	0xFEA
  7104                           fsr0l	equ	0xFE9
  7105                           wreg	equ	0xFE8
  7106                           indf1	equ	0xFE7
  7107                           fsr1h	equ	0xFE2
  7108                           fsr1l	equ	0xFE1
  7109                           bsr	equ	0xFE0
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           plusw2	equ	0xFDB
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           pclatu	equ	0xFFB
  7118                           pclath	equ	0xFFA
  7119                           tblptru	equ	0xFF8
  7120                           tblptrh	equ	0xFF7
  7121                           tblptrl	equ	0xFF6
  7122                           tablat	equ	0xFF5
  7123                           prodh	equ	0xFF4
  7124                           prodl	equ	0xFF3
  7125                           intcon	equ	0xFF2
  7126                           postinc0	equ	0xFEE
  7127                           fsr0h	equ	0xFEA
  7128                           fsr0l	equ	0xFE9
  7129                           wreg	equ	0xFE8
  7130                           indf1	equ	0xFE7
  7131                           fsr1h	equ	0xFE2
  7132                           fsr1l	equ	0xFE1
  7133                           bsr	equ	0xFE0
  7134                           indf2	equ	0xFDF
  7135                           postinc2	equ	0xFDE
  7136                           postdec2	equ	0xFDD
  7137                           plusw2	equ	0xFDB
  7138                           fsr2h	equ	0xFDA
  7139                           fsr2l	equ	0xFD9
  7140                           status	equ	0xFD8
  7141                           
  7142                           	psect	rparam
  7143  0000                     pclatu	equ	0xFFB
  7144                           pclath	equ	0xFFA
  7145                           tblptru	equ	0xFF8
  7146                           tblptrh	equ	0xFF7
  7147                           tblptrl	equ	0xFF6
  7148                           tablat	equ	0xFF5
  7149                           prodh	equ	0xFF4
  7150                           prodl	equ	0xFF3
  7151                           intcon	equ	0xFF2
  7152                           postinc0	equ	0xFEE
  7153                           fsr0h	equ	0xFEA
  7154                           fsr0l	equ	0xFE9
  7155                           wreg	equ	0xFE8
  7156                           indf1	equ	0xFE7
  7157                           fsr1h	equ	0xFE2
  7158                           fsr1l	equ	0xFE1
  7159                           bsr	equ	0xFE0
  7160                           indf2	equ	0xFDF
  7161                           postinc2	equ	0xFDE
  7162                           postdec2	equ	0xFDD
  7163                           plusw2	equ	0xFDB
  7164                           fsr2h	equ	0xFDA
  7165                           fsr2l	equ	0xFD9
  7166                           status	equ	0xFD8
  7167                           
  7168                           	psect	temp
  7169  000036                     btemp:
  7170                           	opt stack 0
  7171  000036                     	ds	1
  7172  0000                     int$flags	set	btemp
  7173  0000                     wtemp6	set	btemp+1
  7174                           pclatu	equ	0xFFB
  7175                           pclath	equ	0xFFA
  7176                           tblptru	equ	0xFF8
  7177                           tblptrh	equ	0xFF7
  7178                           tblptrl	equ	0xFF6
  7179                           tablat	equ	0xFF5
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           postinc0	equ	0xFEE
  7184                           fsr0h	equ	0xFEA
  7185                           fsr0l	equ	0xFE9
  7186                           wreg	equ	0xFE8
  7187                           indf1	equ	0xFE7
  7188                           fsr1h	equ	0xFE2
  7189                           fsr1l	equ	0xFE1
  7190                           bsr	equ	0xFE0
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           postdec2	equ	0xFDD
  7194                           plusw2	equ	0xFDB
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      53
    BANK0           160    158     158
    BANK1           256    229     250
    BANK2           256    100     100

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK0[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 200
		 -> main@MoveTime(BANK1[200]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK2[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK0[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               378   378      0   79881
                                            109 BANK0     49    49      0
                                              0 BANK1    229   229      0
                                              0 BANK2    100   100      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              6 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4941
                                             29 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     304
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     582
                                              0 BANK0     12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       75    61     14   26792
                                             34 BANK0     75    61     14
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5211
                                             29 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5481
                                             29 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    4246
                                             23 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      71
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   14046
                                             33 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4454
                                             23 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1984
                                             14 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     565
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3328
                                             12 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     532
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              6 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2442
                                              6 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                              4 BANK0      2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                              0 BANK0      4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     64      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E5      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9E      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      35       1       56.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     231       3        0.0%
DATA                 0      0     231      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 18 23:48:57 2018

                        ?_grabRightIR 0060                                     _i 0035  
                  fullSpeedBack@power 0081                                    l34 103A  
                                  l35 1064                                    l51 1550  
                                  l52 1500                                    l53 1518  
                                  l54 1530                                    l65 166E  
                                  l66 1618                                    l67 1634  
                                  l68 164E                          ___awdiv@sign 006B  
                                  bsr 000FE0                   ___wmul@multiplicand 0062  
                         main@Message 01C8                           ?_LCD_String 0066  
                                 l110 1726                                   l105 16AC  
                                 l115 1A66                                   l212 129C  
                                 l204 18B0                                   l220 09CA  
                                 l205 1898                                   l221 0A92  
                                 l230 0C50                                   l222 0AB0  
                                 l224 0BA8                                   l400 050A  
                                 l153 17C0                                   l225 0AFE  
                                 l401 0590                                   l154 1788  
                                 l226 0AE6                                   l147 19FE  
                                 l219 0C56                                   l411 06E2  
                                 l403 05D6                                   l420 08BC  
                                 l412 0686                                   l149 1A12  
                                 l229 0C3E                                   l421 0816  
                                 l405 05F8                                   l414 06C4  
                                 l440 0CEC                                   l424 0884  
                                 l408 061C                                   l441 0D06  
                                 l425 08B6                                   l409 0734  
                                 l418 078C                                   l451 0DAC  
                                 l443 0D1C                                   l275 1122  
                                 l419 07CA                                   l444 0D14  
                                 l277 11B8                                   l462 0E48  
                                 l463 0E6C                                   l391 03D8  
                                 l464 0E74                                   l456 0DD4  
                                 l465 0EB4                                   l449 0D4C  
                                 l474 0EF6                                   l466 0E94  
                                 l458 0DFE                                   l650 15D4  
                                 l475 0F52                                   l651 15CC  
                                 l395 03DE                                   l476 0EFC  
                                 l396 0486                                   l902 186C  
                                 l654 15F4                                   l903 1876  
                                 l655 15FE                                   l647 15A6  
                                 l399 04BC                                   l656 160C  
                                 l648 15B6                                   l809 1B04  
                                 l892 1828                                   l893 1832  
                                 l888 1808                                   l889 1800  
                                 l898 1854                                   l899 184C  
                         grabLeftIR@i 0067                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0200  
                                l3104 171E                                  l3190 0E02  
                                l3088 16A4                                  l3516 111A  
                                l3536 11B8                                  l3704 06BC  
                                l3680 0604                                  l3692 067E  
                                l3758 08BE                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u2220 15D8  
                                u3100 065C                                  u3102 065E  
                                _LATB 000F8A                                  u2305 139E  
                                u2315 13BC                                  u3140 06B8  
                                u2325 13CA                                  u2405 1984  
                                u2406 1986                                  u2335 13EA  
                                u3207 0430                                  u2440 180C  
                                u2264 0FFC                                  u3160 06DC  
                                u2345 13F8                                  u2265 0FF8  
                                u3217 044A                                  u2610 17AE  
                                u2274 1056                                  u3090 0648  
                                u2355 1428                                  u2275 1052  
                                u3307 1366                                  u3227 12C8  
                                u2620 17E0                                  u3092 064A  
                                u2285 10B0                                  u3317 137A  
                                u3237 12DE                                  u2550 16EE  
                                u2470 1858                                  u2710 0E2E  
                                u3190 0850                                  u2295 1390  
                                u3407 1758                                  u3327 0A00  
                                u3247 12F0                                  u2800 0EDA  
                                u2617 17A4                                  u3417 1A14  
                                u2545 16B4                                  u3337 0A1A  
                                u3257 12FE                                  u2627 17D6  
                                u3427 17BA                                  u3347 1668  
                                u3267 130C                                  u2580 1768  
                                u2820 0F5A                                  u3437 1994  
                                u3357 18A0                                  u3277 1320  
                                u2830 0F74                                  u3447 19A6  
                                u2575 172E                                  u3367 120C  
                                u3287 1334                                  u3457 1444  
                                u3377 1226                                  u3297 134E  
                                u3467 1B3E                                  u3387 154A  
                                u3397 16DE                                  u2790 0EBC  
                                u2855 1A62                                  u2856 1A64  
                                u2875 1A76                                  u2980 1172  
                                u2876 1A78                                  _main 0350  
                                _mode 0034                         main@ScanAngle 00F7  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0036                                  _stop 14FE  
                 fullSpeedAhead@power 007B                                  prodh 000FF4  
                                prodl 000FF3                                  start 00F6  
                        ___param_bank 000000                       i2_delay_tenth_s 19AE  
                     __end_of_SendLCD 19AE                       __end_of_SetLine 1A1C  
                  ScanWithRange@F3553 002C                           ScanIR@F3540 0030  
                               ?_main 0001                       __end_of___awdiv 1616  
                               ?_stop 0077                       ___awdiv@divisor 0068  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0067  
                     __end_of___lwdiv 183C                       __end_of___lwmod 1880  
                               i1l370 009E                                 i1l371 009A  
                               i2l204 19D4                                 i1l372 009C  
                               i2l205 19C2                                 i2l382 14AA  
                               i2l378 14B2                                 i2l379 14A4  
                     ___awdiv@counter 006A                                 _RCREG 000FAE  
                               _E_TOG 1B3A                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 1382                    ScanWithRange@loops 0086  
                  ScanWithRange@power 00C3                       __end_of_dpowers 030B  
                     __end_of_isdigit 1B0C                                 main@i 00FD  
                               pclath 000FFA                                 tablat 000FF5  
                               plusw2 000FDB                                 status 000FD8  
                               wtemp6 0037                   __size_of_LCD_String 0062  
                     __end_of_sprintf 0F82                __size_of_ScanWithRange 0400  
                      __CFG_MCLRE$OFF 000000                       __initialization 1AA2  
                        __end_of_main 08E0                          __end_of_stop 1590  
                      delay_tenth_s@i 0062                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 0066          ScanIR@DirectionMoveThreshold 00AE  
                __end_of_enableSensor 1A7A                   VerifySignal@hexByte 0068  
                              ??_main 00CD                                ??_stop 007B  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001                          ?_setMotorPWM 006E  
              __size_of_fullSpeedBack 003C                      ___awdiv@dividend 0066  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 18C2  
                              _LCDout 1382                           SendLCD@Byte 0065  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 19E6                           SendLCD@type 0064  
                           ??_SendLCD 0065                                _ScanIR 11BC  
                           ??_SetLine 0066                                ___wmul 1A7A  
                           ??___awdiv 006A                      __end_of_initRFID 1B28  
                           ??___lwdiv 0064                             ??___lwmod 006B  
                              _initIR 1AC8                  __size_of_grabRightIR 007A  
                              clear_0 1AA8                                clear_1 1AB4  
                    ___awdiv@quotient 006C                                main@mL 01D3  
                              main@mR 01DC                        ??_initMotorPWM 0060  
                           ??_initLCD 0066                         _ScanWithRange 08E0  
                           ??_isdigit 0060          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0077                                stop@mR 0079  
                           ??_sprintf 0074       ScanWithRange@TimeAboveThreshold 00C6  
                    __end_of_turnLeft 1976                       fullSpeedBack@mL 007D  
                     fullSpeedBack@mR 007F                            __accesstop 0060  
             __end_of__initialization 1ABA                         ___rparam_used 000001  
                         SetLine@line 0066                         __end_of_E_TOG 1B48  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 18C2  
                        ??_LCD_String 0068                        ?_ScanWithRange 0082  
                VerifySignal@checksum 006A                               ??_E_TOG 0060  
       __size_of_InterruptHandlerHigh 14F6           __end_of_InterruptHandlerLow 00F6  
          delay_tenth_s@tenth_seconds 0061                          sprintf@width 007E  
                          __pbssBANK1 01E5                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0012  
                  __end_of_LCD_String 17E8                               ?_ScanIR 0081  
                      ?_fullSpeedBack 007D                 __size_of_enableSensor 002C  
                             ?___wmul 0060                   grabLeftIR@IR_signal 0065  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001               __size_of_fullSpeedAhead 007C  
                          _grabLeftIR 170C                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013E                       __size_of_LCDout 00CA  
                        _enableSensor 1A4E                    __size_of_turnRight 003C  
                __end_of_initMotorPWM 1A4E                ScanWithRange@RFID_Read 008E  
                             _SendLCD 1976                               __Hparam 0000  
                             _SetLine 19E6                               __Lparam 0000  
                     __size_of_ScanIR 00F8                               ___awdiv 1590  
                     __size_of___wmul 0028                               ___lwdiv 17E8  
                             ___lwmod 183C                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1AA2  
                     ??_ScanWithRange 0090                               __ramtop 0300  
                           ?_turnLeft 007D                               __ptext0 0350  
                             __ptext1 1B28                               __ptext2 1B0C  
                             __ptext3 1A1C                               __ptext4 12B4  
                             __ptext5 1AC8                               __ptext6 18C2  
                             __ptext7 1A4E                               __ptext8 10C0  
                             __ptext9 08E0                             _T0CONbits 000FD5  
                             _initLCD 12B4                     __end_of_initTimer 1B3A  
                             _dpowers 0301                               _isdigit 1AEA  
                        LCDout@number 0063                         ?_VerifySignal 0060  
                             main@buf 00CF                               _sprintf 0CE0  
                      __pintcode_body 144C                  end_of_initialization 1ABA  
                      ScanWithRange@i 00BF                        ScanWithRange@n 00BD  
                  setMotorPWM@PWMduty 0075                            ??_initRFID 0060  
                       __Lmediumconst 0000                               int_func 144C  
                  ScanIR@SensorResult 00B0                       ??_fullSpeedBack 0082  
                           _RFID_Read 01F9                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 0082  
                   __end_of_turnRight 193A                           ?_grabLeftIR 0060  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0062  
                    fullSpeedAhead@mL 0077                      fullSpeedAhead@mR 0079  
              ScanWithRange@RightFlag 00CB                        __end_of_LCDout 144C  
                           _TXSTAbits 000FAC                             ScanIR@buf 0086  
                       ??_grabRightIR 0062                        __end_of_ScanIR 12B4  
                      _fullSpeedAhead 1616                        _ReceivedString 01E9  
                      __end_of___wmul 1AA2                     ScanWithRange@Move 008A  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1AEA  
              __size_of_delay_tenth_s 0042                   start_initialization 1AA2  
                  VerifySignal@Signal 0060                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0060          __end_of_InterruptHandlerHigh 14FE  
                            ??_ScanIR 0085                __end_of_fullSpeedAhead 1692  
                 __size_of_grabLeftIR 007A                              ??___wmul 0064  
                            ??_initIR 0060                   __end_of_grabRightIR 170C  
                        _initMotorPWM 1A1C                           __pbssCOMRAM 002C  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1693 0061  
        __size_of_InterruptHandlerLow 00DE                         _delay_tenth_s 1880  
                         sprintf@flag 007D                           sprintf@prec 007A  
                   __size_of_initRFID 001C                              ?_SendLCD 0064  
                            ?_SetLine 0001                      ___lwdiv@dividend 0060  
                     ?_fullSpeedAhead 0077                             __pintcode 0008  
                __end_of_VerifySignal 11BC                              ?___awdiv 0066  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0060  
                            ?___lwmod 0067                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00F8  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 003C  
                       ??_setMotorPWM 0070                             _initTimer 1B28  
                    ___lwdiv@quotient 0065                              ?_sprintf 006C  
                      ?_delay_tenth_s 0001                        ___wmul@product 0064  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 007D                           turnRight@mR 007F  
                            _PIR1bits 000F9E                              i2u347_47 19C8  
                            _RCONbits 000FD0                             main@F3557 01E5  
                         _grabRightIR 1692                 ScanWithRange@LeftFlag 00C4  
                grabRightIR@IR_signal 0065                     ___wmul@multiplier 0060  
               __end_of_ScanWithRange 0CE0                          setMotorPWM@m 006E  
               ScanWithRange@MoveTime 0088                  _InterruptHandlerHigh 0008  
               ScanWithRange@MoveType 008C                              ScanIR@mL 0081  
                            ScanIR@mR 0083                          ??_grabLeftIR 0062  
                          ?_initTimer 0001                             _turnRight 18FE  
                    ScanWithRange@buf 0095                   __end_of_setMotorPWM 10C0  
                            __Hrparam 0000                      __size_of_SendLCD 0038  
                            __Lrparam 0000                 __end_of_fullSpeedBack 18FE  
                    __size_of_SetLine 0036                    __end_of_grabLeftIR 1786  
                    __size_of___awdiv 0086                      __size_of___lwdiv 0054  
                    __size_of___lwmod 0044                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 007B                      __size_of_initLCD 00CE  
                    __size_of_isdigit 0022                       ___lwdiv@divisor 0062  
                     ___lwdiv@counter 0064                            ?_turnRight 007D  
                            __ptext10 18FE                              __ptext11 193A  
                            __ptext20 1A7A                              __ptext12 1616  
                            __ptext21 183C                              __ptext13 1880  
                            __ptext22 17E8                              __ptext14 11BC  
                            __ptext23 1692                              __ptext15 14FE  
                            __ptext32 19AE                              __ptext24 170C  
                            __ptext16 0F82                              __ptext25 19E6  
                            __ptext17 1590                              __ptext26 1786  
                            __ptext18 0CE0                              __ptext27 1976  
                            __ptext19 1AEA                              __ptext28 1382  
                            __ptext29 1B3A                       ??_delay_tenth_s 0060  
                    __size_of_sprintf 02A2                              _initRFID 1B0C  
           ScanWithRange@SensorResult 00C7                        turnRight@power 0081  
                       __size_of_main 0590                    main@DirectionFound 00FC  
                       turnLeft@power 0081                         __size_of_stop 0092  
                          turnLeft@mL 007D                            turnLeft@mR 007F  
               __size_of_VerifySignal 00FC                              int$flags 0036  
                            main@Move 01D2                   _InterruptHandlerLow 0018  
                          _LCD_String 1786                              _turnLeft 193A  
                     ScanWithRange@mL 0082                       ScanWithRange@mR 0084  
                  enableSensor@sensor 0061                    enableSensor@status 0060  
                       VerifySignal@i 006B                            _INTCONbits 000FF2  
                         ??_initTimer 0060                              isdigit@c 0062  
                         _setMotorPWM 0F82                          _VerifySignal 10C0  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0078                             sprintf@sp 006C  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0060  
                    ___lwmod@dividend 0067                      ??_fullSpeedAhead 007C  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00C1  
              ??_InterruptHandlerHigh 0005                              sprintf@c 0080  
                            sprintf@f 006E                       ___lwmod@divisor 0069  
                     ___lwmod@counter 006B                           ??_turnRight 0082  
               ??_InterruptHandlerLow 0017                        ??_enableSensor 0061  
                    i2delay_tenth_s@i 0003  
