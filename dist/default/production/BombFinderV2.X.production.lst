

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 19 23:17:43 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4331 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	smallconst
    88  000300                     __psmallconst:
    89                           	opt stack 0
    90  000300  00                 	db	0
    91  000301                     _dpowers:
    92                           	opt stack 0
    93  000301  0001               	dw	1
    94  000303  000A               	dw	10
    95  000305  0064               	dw	100
    96  000307  03E8               	dw	1000
    97  000309  2710               	dw	10000
    98  00030B                     __end_of_dpowers:
    99                           	opt stack 0
   100  0000                     _OSCCONbits	set	4051
   101  0000                     _OSCCON	set	4051
   102  0000                     _PIE1bits	set	3997
   103  0000                     _IPR1bits	set	3999
   104  0000                     _RCONbits	set	4048
   105  0000                     _RCREG	set	4014
   106  0000                     _PIR1bits	set	3998
   107  0000                     _RCSTAbits	set	4011
   108  0000                     _TXSTAbits	set	4012
   109  0000                     _BAUDCONbits	set	4010
   110  0000                     _SPBRGH	set	4016
   111  0000                     _SPBRG	set	4015
   112  0000                     _TRISC	set	3988
   113  0000                     _TMR0H	set	4055
   114  0000                     _TMR0L	set	4054
   115  0000                     _INTCONbits	set	4082
   116  0000                     _T0CONbits	set	4053
   117  0000                     _TRISDbits	set	3989
   118  0000                     _TRISCbits	set	3988
   119  0000                     _LATDbits	set	3980
   120  0000                     _LATCbits	set	3979
   121  0000                     _LATEbits	set	3981
   122  0000                     _CAP2BUFL	set	3942
   123  0000                     _CAP2BUFH	set	3943
   124  0000                     _CAP1BUFL	set	3944
   125  0000                     _CAP1BUFH	set	3945
   126  0000                     _T5CON	set	4023
   127  0000                     _TRISEbits	set	3990
   128  0000                     _CAP2CON	set	3938
   129  0000                     _CAP1CON	set	3939
   130  0000                     _ANSEL0bits	set	4024
   131  0000                     _TRISAbits	set	3986
   132  0000                     _LATAbits	set	3977
   133  0000                     _LATB	set	3978
   134  0000                     _LATBbits	set	3978
   135  0000                     _TRISBbits	set	3987
   136  0000                     _PTPERH	set	3962
   137  0000                     _PTPERL	set	3963
   138  0000                     _PWMCON1	set	3950
   139  0000                     _PWMCON0	set	3951
   140  0000                     _PTCON1	set	3966
   141  0000                     _PTCON0	set	3967
   142  0000                     _PDC1H	set	3958
   143  0000                     _PDC1L	set	3959
   144  0000                     _PDC0H	set	3960
   145  0000                     _PDC0L	set	3961
   146  00030B                     STR_6:
   147  00030B  20                 	db	32
   148  00030C  20                 	db	32
   149  00030D  20                 	db	32
   150  00030E  20                 	db	32
   151  00030F  20                 	db	32
   152  000310  20                 	db	32
   153  000311  25                 	db	37
   154  000312  30                 	db	48	;'0'
   155  000313  34                 	db	52	;'4'
   156  000314  64                 	db	100	;'d'
   157  000315  2C                 	db	44
   158  000316  20                 	db	32
   159  000317  25                 	db	37
   160  000318  30                 	db	48	;'0'
   161  000319  34                 	db	52	;'4'
   162  00031A  64                 	db	100	;'d'
   163  00031B  00                 	db	0
   164  00031C                     STR_5:
   165  00031C  20                 	db	32
   166  00031D  20                 	db	32
   167  00031E  20                 	db	32
   168  00031F  20                 	db	32
   169  000320  20                 	db	32
   170  000321  20                 	db	32
   171  000322  49                 	db	73	;'I'
   172  000323  6E                 	db	110	;'n'
   173  000324  65                 	db	101	;'e'
   174  000325  72                 	db	114	;'r'
   175  000326  74                 	db	116	;'t'
   176  000327  20                 	db	32
   177  000328  4D                 	db	77	;'M'
   178  000329  6F                 	db	111	;'o'
   179  00032A  64                 	db	100	;'d'
   180  00032B  65                 	db	101	;'e'
   181  00032C  00                 	db	0
   182  00032D                     STR_1:
   183  00032D  20                 	db	32
   184  00032E  20                 	db	32
   185  00032F  20                 	db	32
   186  000330  20                 	db	32
   187  000331  20                 	db	32
   188  000332  53                 	db	83	;'S'
   189  000333  63                 	db	99	;'c'
   190  000334  61                 	db	97	;'a'
   191  000335  6E                 	db	110	;'n'
   192  000336  49                 	db	73	;'I'
   193  000337  52                 	db	82	;'R'
   194  000338  00                 	db	0
   195  000339                     STR_8:
   196  000339  47                 	db	71	;'G'
   197  00033A  6F                 	db	111	;'o'
   198  00033B  69                 	db	105	;'i'
   199  00033C  6E                 	db	110	;'n'
   200  00033D  67                 	db	103	;'g'
   201  00033E  20                 	db	32
   202  00033F  48                 	db	72	;'H'
   203  000340  6F                 	db	111	;'o'
   204  000341  6D                 	db	109	;'m'
   205  000342  65                 	db	101	;'e'
   206  000343  00                 	db	0
   207  000344                     STR_7:
   208  000344  53                 	db	83	;'S'
   209  000345  65                 	db	101	;'e'
   210  000346  61                 	db	97	;'a'
   211  000347  72                 	db	114	;'r'
   212  000348  63                 	db	99	;'c'
   213  000349  68                 	db	104	;'h'
   214  00034A  69                 	db	105	;'i'
   215  00034B  6E                 	db	110	;'n'
   216  00034C  67                 	db	103	;'g'
   217  00034D  00                 	db	0
   218  0000                     
   219                           ; #config settings
   220  00034E  00                 	db	0	; dummy byte at the end
   221  0000                     
   222                           	psect	cinit
   223  001B4C                     __pcinit:
   224                           	opt stack 0
   225  001B4C                     start_initialization:
   226                           	opt stack 0
   227  001B4C                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Clear objects allocated to BANK2 (150 bytes)
   231  001B4C  EE02  F000         	lfsr	0,__pbssBANK2
   232  001B50  0E96               	movlw	150
   233  001B52                     clear_0:
   234  001B52  6AEE               	clrf	postinc0,c
   235  001B54  06E8               	decf	wreg,f,c
   236  001B56  E1FD               	bnz	clear_0
   237                           
   238                           ; Clear objects allocated to BANK1 (23 bytes)
   239  001B58  EE01  F0E2         	lfsr	0,__pbssBANK1
   240  001B5C  0E17               	movlw	23
   241  001B5E                     clear_1:
   242  001B5E  6AEE               	clrf	postinc0,c
   243  001B60  06E8               	decf	wreg,f,c
   244  001B62  E1FD               	bnz	clear_1
   245                           
   246                           ; Clear objects allocated to BANK0 (8 bytes)
   247  001B64  EE00  F0CB         	lfsr	0,__pbssBANK0
   248  001B68  0E08               	movlw	8
   249  001B6A                     clear_2:
   250  001B6A  6AEE               	clrf	postinc0,c
   251  001B6C  06E8               	decf	wreg,f,c
   252  001B6E  E1FD               	bnz	clear_2
   253                           
   254                           ; Clear objects allocated to COMRAM (2 bytes)
   255  001B70  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   256  001B72  6A32               	clrf	__pbssCOMRAM& (0+255),c
   257  001B74                     end_of_initialization:
   258                           	opt stack 0
   259  001B74                     __end_of__initialization:
   260                           	opt stack 0
   261  001B74  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   262  001B76  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   263  001B78  0E00               	movlw	low (__Lmediumconst shr (0+16))
   264  001B7A  6EF8               	movwf	tblptru,c
   265  001B7C  0100               	movlb	0
   266  001B7E  EFA8  F001         	goto	_main	;jump to C main() function
   267                           tblptru	equ	0xFF8
   268                           postinc0	equ	0xFEE
   269                           wreg	equ	0xFE8
   270                           
   271                           	psect	bssCOMRAM
   272  000032                     __pbssCOMRAM:
   273                           	opt stack 0
   274  000032                     _mode:
   275                           	opt stack 0
   276  000032                     	ds	1
   277  000033                     _i:
   278                           	opt stack 0
   279  000033                     	ds	1
   280                           tblptru	equ	0xFF8
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284                           	psect	bssBANK0
   285  0000CB                     __pbssBANK0:
   286                           	opt stack 0
   287  0000CB                     ScanWithRange@F3555:
   288                           	opt stack 0
   289  0000CB                     	ds	4
   290  0000CF                     ScanIR@F3541:
   291                           	opt stack 0
   292  0000CF                     	ds	4
   293                           tblptru	equ	0xFF8
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssBANK1
   298  0001E2                     __pbssBANK1:
   299                           	opt stack 0
   300  0001E2                     main@F3559:
   301                           	opt stack 0
   302  0001E2                     	ds	4
   303  0001E6                     _ReceivedString:
   304                           	opt stack 0
   305  0001E6                     	ds	16
   306  0001F6                     _millis:
   307                           	opt stack 0
   308  0001F6                     	ds	2
   309  0001F8                     _RFID_Read:
   310                           	opt stack 0
   311  0001F8                     	ds	1
   312                           tblptru	equ	0xFF8
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           
   316                           	psect	bssBANK2
   317  000200                     __pbssBANK2:
   318                           	opt stack 0
   319  000200                     main@F3554:
   320                           	opt stack 0
   321  000200                     	ds	100
   322  000264                     main@F3556:
   323                           	opt stack 0
   324  000264                     	ds	50
   325                           tblptru	equ	0xFF8
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	cstackBANK1
   330  000100                     __pcstackBANK1:
   331                           	opt stack 0
   332  000100                     main@buf:
   333                           	opt stack 0
   334                           
   335                           ; 40 bytes @ 0x0
   336  000100                     	ds	40
   337  000128                     main@MoveType:
   338                           	opt stack 0
   339                           
   340                           ; 50 bytes @ 0x28
   341  000128                     	ds	50
   342  00015A                     main@MoveTime:
   343                           	opt stack 0
   344                           
   345                           ; 100 bytes @ 0x5A
   346  00015A                     	ds	100
   347  0001BE                     main@Message:
   348                           	opt stack 0
   349                           
   350                           ; 10 bytes @ 0xBE
   351  0001BE                     	ds	10
   352  0001C8                     main@ScanAngle:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0xC8
   356  0001C8                     	ds	1
   357  0001C9                     main@SensorResult:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0xC9
   361  0001C9                     	ds	4
   362  0001CD                     main@DirectionFound:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0xCD
   366  0001CD                     	ds	1
   367  0001CE                     main@i:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0xCE
   371  0001CE                     	ds	1
   372  0001CF                     main@Move:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0xCF
   376  0001CF                     	ds	1
   377  0001D0                     main@mL:
   378                           	opt stack 0
   379                           
   380                           ; 9 bytes @ 0xD0
   381  0001D0                     	ds	9
   382  0001D9                     main@mR:
   383                           	opt stack 0
   384                           
   385                           ; 9 bytes @ 0xD9
   386  0001D9                     	ds	9
   387                           tblptru	equ	0xFF8
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           
   391                           	psect	cstackBANK0
   392  000060                     __pcstackBANK0:
   393                           	opt stack 0
   394  000060                     ??_initLCD:
   395  000060                     ?___awdiv:
   396                           	opt stack 0
   397  000060                     SetLine@line:
   398                           	opt stack 0
   399  000060                     VerifySignal@i:
   400                           	opt stack 0
   401  000060                     ___lwdiv@counter:
   402                           	opt stack 0
   403  000060                     grabRightIR@IR_signal:
   404                           	opt stack 0
   405  000060                     grabLeftIR@IR_signal:
   406                           	opt stack 0
   407  000060                     LCD_String@string:
   408                           	opt stack 0
   409  000060                     ___awdiv@dividend:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x0
   413  000060                     	ds	1
   414  000061                     VerifySignal@checksum:
   415                           	opt stack 0
   416  000061                     ___lwdiv@quotient:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x1
   420  000061                     	ds	1
   421  000062                     grabRightIR@i:
   422                           	opt stack 0
   423  000062                     grabLeftIR@i:
   424                           	opt stack 0
   425  000062                     VerifySignal@hexByte:
   426                           	opt stack 0
   427  000062                     ___awdiv@divisor:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x2
   431  000062                     	ds	1
   432  000063                     ?___lwmod:
   433                           	opt stack 0
   434  000063                     ___lwmod@dividend:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x3
   438  000063                     	ds	1
   439  000064                     ___awdiv@counter:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x4
   443  000064                     	ds	1
   444  000065                     ___awdiv@sign:
   445                           	opt stack 0
   446  000065                     ___lwmod@divisor:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x5
   450  000065                     	ds	1
   451  000066                     ___awdiv@quotient:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x6
   455  000066                     	ds	1
   456  000067                     ?_sprintf:
   457                           	opt stack 0
   458  000067                     sprintf@sp:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x7
   462  000067                     	ds	1
   463  000068                     setMotorPWM@m:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x8
   467  000068                     	ds	1
   468  000069                     sprintf@f:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x9
   472  000069                     	ds	1
   473  00006A                     ??_setMotorPWM:
   474                           
   475                           ; 1 bytes @ 0xA
   476  00006A                     	ds	5
   477  00006F                     ??_sprintf:
   478  00006F                     setMotorPWM@PWMduty:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0xF
   482  00006F                     	ds	2
   483  000071                     stop@mL:
   484                           	opt stack 0
   485  000071                     fullSpeed@mL:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x11
   489  000071                     	ds	2
   490  000073                     stop@mR:
   491                           	opt stack 0
   492  000073                     fullSpeed@mR:
   493                           	opt stack 0
   494  000073                     sprintf@ap:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x13
   498  000073                     	ds	2
   499  000075                     fullSpeed@power:
   500                           	opt stack 0
   501  000075                     sprintf@prec:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x15
   505  000075                     	ds	1
   506  000076                     sprintf@val:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x16
   510  000076                     	ds	1
   511  000077                     turnLeft@mL:
   512                           	opt stack 0
   513  000077                     turnRight@mL:
   514                           	opt stack 0
   515  000077                     fullSpeedBack@mL:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x17
   519  000077                     	ds	1
   520  000078                     sprintf@flag:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x18
   524  000078                     	ds	1
   525  000079                     turnLeft@mR:
   526                           	opt stack 0
   527  000079                     turnRight@mR:
   528                           	opt stack 0
   529  000079                     fullSpeedBack@mR:
   530                           	opt stack 0
   531  000079                     sprintf@width:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x19
   535  000079                     	ds	2
   536  00007B                     turnLeft@power:
   537                           	opt stack 0
   538  00007B                     turnRight@power:
   539                           	opt stack 0
   540  00007B                     fullSpeedBack@power:
   541                           	opt stack 0
   542  00007B                     sprintf@c:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x1B
   546  00007B                     	ds	1
   547  00007C                     ScanIR@mL:
   548                           	opt stack 0
   549  00007C                     ScanWithRange@mL:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x1C
   553  00007C                     	ds	2
   554  00007E                     ScanIR@mR:
   555                           	opt stack 0
   556  00007E                     ScanWithRange@mR:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x1E
   560  00007E                     	ds	2
   561  000080                     ??_ScanIR:
   562  000080                     ScanWithRange@loops:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x20
   566  000080                     	ds	1
   567  000081                     ScanIR@buf:
   568                           	opt stack 0
   569                           
   570                           ; 40 bytes @ 0x21
   571  000081                     	ds	1
   572  000082                     ScanWithRange@MoveTime:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x22
   576  000082                     	ds	2
   577  000084                     ScanWithRange@Move:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x24
   581  000084                     	ds	2
   582  000086                     ScanWithRange@MoveType:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x26
   586  000086                     	ds	2
   587  000088                     ScanWithRange@RFID_Read:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x28
   591  000088                     	ds	2
   592  00008A                     ScanWithRange@millis:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x2A
   596  00008A                     	ds	2
   597  00008C                     ??_ScanWithRange:
   598                           
   599                           ; 1 bytes @ 0x2C
   600  00008C                     	ds	4
   601  000090                     ScanWithRange@buf:
   602                           	opt stack 0
   603                           
   604                           ; 40 bytes @ 0x30
   605  000090                     	ds	25
   606  0000A9                     ScanIR@DirectionMoveThreshold:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x49
   610  0000A9                     	ds	2
   611  0000AB                     ScanIR@SensorResult:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x4B
   615  0000AB                     	ds	13
   616  0000B8                     ScanWithRange@i:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x58
   620  0000B8                     	ds	2
   621  0000BA                     ScanWithRange@DirectionFoundThreshold:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x5A
   625  0000BA                     	ds	2
   626  0000BC                     ScanWithRange@MotorPower:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x5C
   630  0000BC                     	ds	1
   631  0000BD                     ScanWithRange@MiniLeftFlick:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x5D
   635  0000BD                     	ds	1
   636  0000BE                     ScanWithRange@LeftFlag:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x5E
   640  0000BE                     	ds	2
   641  0000C0                     ScanWithRange@TimeAboveThreshold:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x60
   645  0000C0                     	ds	2
   646  0000C2                     ScanWithRange@SensorResult:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x62
   650  0000C2                     	ds	4
   651  0000C6                     ScanWithRange@LeftFlick:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x66
   655  0000C6                     	ds	1
   656  0000C7                     ScanWithRange@RightFlag:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x67
   660  0000C7                     	ds	2
   661  0000C9                     ??_main:
   662                           
   663                           ; 1 bytes @ 0x69
   664  0000C9                     	ds	2
   665                           tblptru	equ	0xFF8
   666                           postinc0	equ	0xFEE
   667                           wreg	equ	0xFE8
   668                           
   669                           	psect	cstackCOMRAM
   670  000001                     __pcstackCOMRAM:
   671                           	opt stack 0
   672  000001                     ??i2_delay_tenth_s:
   673                           
   674                           ; 1 bytes @ 0x0
   675  000001                     	ds	1
   676  000002                     i2delay_tenth_s@tenth_seconds:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x1
   680  000002                     	ds	1
   681  000003                     i2delay_tenth_s@i:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x2
   685  000003                     	ds	2
   686  000005                     ??_InterruptHandlerHigh:
   687                           
   688                           ; 1 bytes @ 0x4
   689  000005                     	ds	18
   690  000017                     ??_InterruptHandlerLow:
   691                           
   692                           ; 1 bytes @ 0x16
   693  000017                     	ds	21
   694  00002C                     ??_isdigit:
   695  00002C                     ??_LCDout:
   696  00002C                     ??_delay_tenth_s:
   697  00002C                     ?_grabRightIR:
   698                           	opt stack 0
   699  00002C                     ?_grabLeftIR:
   700                           	opt stack 0
   701  00002C                     ?___wmul:
   702                           	opt stack 0
   703  00002C                     ?___lwdiv:
   704                           	opt stack 0
   705  00002C                     enableSensor@status:
   706                           	opt stack 0
   707  00002C                     VerifySignal@Signal:
   708                           	opt stack 0
   709  00002C                     ___wmul@multiplier:
   710                           	opt stack 0
   711  00002C                     ___lwdiv@dividend:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x2B
   715  00002C                     	ds	1
   716  00002D                     enableSensor@sensor:
   717                           	opt stack 0
   718  00002D                     delay_tenth_s@tenth_seconds:
   719                           	opt stack 0
   720  00002D                     _isdigit$1781:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x2C
   724  00002D                     	ds	1
   725  00002E                     ??_grabRightIR:
   726  00002E                     ??_grabLeftIR:
   727  00002E                     ??_VerifySignal:
   728  00002E                     isdigit@c:
   729                           	opt stack 0
   730  00002E                     delay_tenth_s@i:
   731                           	opt stack 0
   732  00002E                     ___wmul@multiplicand:
   733                           	opt stack 0
   734  00002E                     ___lwdiv@divisor:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x2D
   738  00002E                     	ds	1
   739  00002F                     LCDout@number:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x2E
   743  00002F                     	ds	1
   744  000030                     SendLCD@type:
   745                           	opt stack 0
   746  000030                     ___lwmod@counter:
   747                           	opt stack 0
   748  000030                     ___wmul@product:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x2F
   752  000030                     	ds	1
   753  000031                     SendLCD@Byte:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x30
   757  000031                     	ds	1
   758  000032                     tblptru	equ	0xFF8
   759                           postinc0	equ	0xFEE
   760                           wreg	equ	0xFE8
   761                           
   762                           ; 1 bytes @ 0x31
   763 ;;
   764 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   765 ;;
   766 ;; *************** function _main *****************
   767 ;; Defined at:
   768 ;;		line 55 in file "main.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;		None
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  MoveTime      100   90[BANK1 ] int [50]
   773 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   774 ;;  buf            40    0[BANK1 ] unsigned char [40]
   775 ;;  Message        10  190[BANK1 ] unsigned char [10]
   776 ;;  mR              9  217[BANK1 ] struct DC_motor
   777 ;;  mL              9  208[BANK1 ] struct DC_motor
   778 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   779 ;;  Move            1  207[BANK1 ] char 
   780 ;;  i               1  206[BANK1 ] unsigned char 
   781 ;;  DirectionFou    1  205[BANK1 ] char 
   782 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   792 ;;      Params:         0       0       0       0
   793 ;;      Locals:         0       0     226       0
   794 ;;      Temps:          0       2       0       0
   795 ;;      Totals:         0       2     226       0
   796 ;;Total ram usage:      228 bytes
   797 ;; Hardware stack levels required when called:    8
   798 ;; This function calls:
   799 ;;		_LCD_String
   800 ;;		_ScanIR
   801 ;;		_ScanWithRange
   802 ;;		_SendLCD
   803 ;;		_SetLine
   804 ;;		_VerifySignal
   805 ;;		_delay_tenth_s
   806 ;;		_enableSensor
   807 ;;		_fullSpeed
   808 ;;		_fullSpeedBack
   809 ;;		_grabLeftIR
   810 ;;		_grabRightIR
   811 ;;		_initIR
   812 ;;		_initLCD
   813 ;;		_initMotorPWM
   814 ;;		_initRFID
   815 ;;		_initTimer
   816 ;;		_sprintf
   817 ;;		_stop
   818 ;;		_turnLeft
   819 ;;		_turnRight
   820 ;; This function is called by:
   821 ;;		Startup code after reset
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text0
   826  000350                     __ptext0:
   827                           	opt stack 0
   828  000350                     _main:
   829                           	opt stack 23
   830                           
   831                           ;main.c: 58: unsigned char Message[10];
   832                           ;main.c: 59: unsigned char i=0;
   833                           
   834                           ;incstack = 0
   835  000350  0E00               	movlw	0
   836  000352  0101               	movlb	1	; () banked
   837  000354  6FCE               	movwf	main@i& (0+255),b
   838                           
   839                           ;main.c: 60: signed char DirectionFound=0;
   840  000356  0E00               	movlw	0
   841  000358  6FCD               	movwf	main@DirectionFound& (0+255),b
   842                           
   843                           ; BSR set to: 1
   844                           ;main.c: 61: signed int MoveTime[50] = { 0 };
   845  00035A  EE22  F000         	lfsr	2,main@F3554
   846  00035E  EE11  F05A         	lfsr	1,main@MoveTime
   847  000362  0E63               	movlw	99
   848  000364                     u2961:
   849  000364  CFDB FFE3          	movff	plusw2,plusw1
   850  000368  06E8               	decf	wreg,f,c
   851  00036A  E2FC               	bc	u2961
   852                           
   853                           ; BSR set to: 1
   854                           ;main.c: 64: unsigned char MoveType[50] = { 0 };
   855  00036C  EE22  F064         	lfsr	2,main@F3556
   856  000370  EE11  F028         	lfsr	1,main@MoveType
   857  000374  0E31               	movlw	49
   858  000376                     u2971:
   859  000376  CFDB FFE3          	movff	plusw2,plusw1
   860  00037A  06E8               	decf	wreg,f,c
   861  00037C  E2FC               	bc	u2971
   862                           
   863                           ;main.c: 67: signed char Move=0;
   864  00037E  0E00               	movlw	0
   865  000380  6FCF               	movwf	main@Move& (0+255),b
   866                           
   867                           ; BSR set to: 1
   868                           ;main.c: 68: unsigned int SensorResult[2]={0,0};
   869  000382  C1E2  F1C9         	movff	main@F3559,main@SensorResult
   870  000386  C1E3  F1CA         	movff	main@F3559+1,main@SensorResult+1
   871  00038A  C1E4  F1CB         	movff	main@F3559+2,main@SensorResult+2
   872  00038E  C1E5  F1CC         	movff	main@F3559+3,main@SensorResult+3
   873                           
   874                           ;main.c: 69: char buf[40];
   875                           ;main.c: 71: unsigned char ScanAngle=60;
   876  000392  0E3C               	movlw	60
   877  000394  6FC8               	movwf	main@ScanAngle& (0+255),b
   878                           
   879                           ; BSR set to: 1
   880                           ;main.c: 80: INTCONbits.GIEH=1;
   881  000396  8EF2               	bsf	intcon,7,c	;volatile
   882                           
   883                           ; BSR set to: 1
   884                           ;main.c: 81: INTCONbits.GIEL=1;
   885  000398  8CF2               	bsf	intcon,6,c	;volatile
   886                           
   887                           ; BSR set to: 1
   888                           ;main.c: 82: INTCONbits.PEIE=1;
   889  00039A  8CF2               	bsf	intcon,6,c	;volatile
   890                           
   891                           ; BSR set to: 1
   892                           ;main.c: 83: RCONbits.IPEN=1;
   893  00039C  8ED0               	bsf	4048,7,c	;volatile
   894                           
   895                           ; BSR set to: 1
   896                           ;main.c: 86: IPR1bits.RCIP=0;
   897  00039E  9A9F               	bcf	3999,5,c	;volatile
   898                           
   899                           ; BSR set to: 1
   900                           ;main.c: 87: PIE1bits.RCIE=1;
   901  0003A0  8A9D               	bsf	3997,5,c	;volatile
   902                           
   903                           ; BSR set to: 1
   904                           ;main.c: 90: TRISCbits.RC3=1;
   905  0003A2  8694               	bsf	3988,3,c	;volatile
   906                           
   907                           ; BSR set to: 1
   908                           ;main.c: 91: INTCONbits.INT0IE=1;
   909  0003A4  88F2               	bsf	intcon,4,c	;volatile
   910                           
   911                           ; BSR set to: 1
   912                           ;main.c: 94: PIR1bits.RC1IF=0;
   913  0003A6  9A9E               	bcf	3998,5,c	;volatile
   914                           
   915                           ; BSR set to: 1
   916                           ;main.c: 95: INTCONbits.INT0IF=0;
   917  0003A8  92F2               	bcf	intcon,1,c	;volatile
   918                           
   919                           ;main.c: 98: struct DC_motor mL, mR;
   920                           ;main.c: 99: mL.power=0;
   921  0003AA  0E00               	movlw	0
   922  0003AC  6FD0               	movwf	main@mL& (0+255),b
   923                           
   924                           ;main.c: 100: mL.direction=1;
   925  0003AE  0E01               	movlw	1
   926  0003B0  6FD1               	movwf	(main@mL+1)& (0+255),b
   927                           
   928                           ; BSR set to: 1
   929                           ;main.c: 101: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   930  0003B2  0E79               	movlw	121
   931  0003B4  6FD2               	movwf	(main@mL+2)& (0+255),b
   932  0003B6  0E0F               	movlw	15
   933  0003B8  6FD3               	movwf	(main@mL+3)& (0+255),b
   934                           
   935                           ; BSR set to: 1
   936                           ;main.c: 102: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   937  0003BA  0E78               	movlw	120
   938  0003BC  6FD4               	movwf	(main@mL+4)& (0+255),b
   939  0003BE  0E0F               	movlw	15
   940  0003C0  6FD5               	movwf	(main@mL+5)& (0+255),b
   941                           
   942                           ;main.c: 103: mL.dir_pin=0;
   943  0003C2  0E00               	movlw	0
   944  0003C4  6FD6               	movwf	(main@mL+6)& (0+255),b
   945                           
   946                           ;main.c: 104: mL.PWMperiod=199;
   947  0003C6  0E00               	movlw	0
   948  0003C8  6FD8               	movwf	(main@mL+8)& (0+255),b
   949  0003CA  0EC7               	movlw	199
   950  0003CC  6FD7               	movwf	(main@mL+7)& (0+255),b
   951                           
   952                           ;main.c: 106: mR.power=0;
   953  0003CE  0E00               	movlw	0
   954  0003D0  6FD9               	movwf	main@mR& (0+255),b
   955                           
   956                           ;main.c: 107: mR.direction=1;
   957  0003D2  0E01               	movlw	1
   958  0003D4  6FDA               	movwf	(main@mR+1)& (0+255),b
   959                           
   960                           ; BSR set to: 1
   961                           ;main.c: 108: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   962  0003D6  0E77               	movlw	119
   963  0003D8  6FDB               	movwf	(main@mR+2)& (0+255),b
   964  0003DA  0E0F               	movlw	15
   965  0003DC  6FDC               	movwf	(main@mR+3)& (0+255),b
   966                           
   967                           ; BSR set to: 1
   968                           ;main.c: 109: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   969  0003DE  0E76               	movlw	118
   970  0003E0  6FDD               	movwf	(main@mR+4)& (0+255),b
   971  0003E2  0E0F               	movlw	15
   972  0003E4  6FDE               	movwf	(main@mR+5)& (0+255),b
   973                           
   974                           ;main.c: 110: mR.dir_pin=2;
   975  0003E6  0E02               	movlw	2
   976  0003E8  6FDF               	movwf	(main@mR+6)& (0+255),b
   977                           
   978                           ;main.c: 111: mR.PWMperiod=199;
   979  0003EA  0E00               	movlw	0
   980  0003EC  6FE1               	movwf	(main@mR+8)& (0+255),b
   981  0003EE  0EC7               	movlw	199
   982  0003F0  6FE0               	movwf	(main@mR+7)& (0+255),b
   983                           
   984                           ;main.c: 113: OSCCON = 0b1110010;
   985  0003F2  0E72               	movlw	114
   986  0003F4  6ED3               	movwf	4051,c	;volatile
   987  0003F6                     
   988                           ; BSR set to: 1
   989  0003F6  B4D3               	btfsc	4051,2,c	;volatile
   990  0003F8  D2F4               	goto	l3727
   991  0003FA  D7FD               	goto	l399
   992  0003FC                     
   993                           ;main.c: 125: stop(&mL, &mR);
   994  0003FC  0ED0               	movlw	low main@mL
   995  0003FE  0100               	movlb	0	; () banked
   996  000400  6F71               	movwf	stop@mL& (0+255),b
   997  000402  0E01               	movlw	high main@mL
   998  000404  6F72               	movwf	(stop@mL+1)& (0+255),b
   999  000406  0ED9               	movlw	low main@mR
  1000  000408  6F73               	movwf	stop@mR& (0+255),b
  1001  00040A  0E01               	movlw	high main@mR
  1002  00040C  6F74               	movwf	(stop@mR+1)& (0+255),b
  1003  00040E  EC0E  F00B         	call	_stop	;wreg free
  1004                           
  1005                           ;main.c: 128: RFID_Read=0;
  1006  000412  0E00               	movlw	0
  1007  000414  0101               	movlb	1	; () banked
  1008  000416  6FF8               	movwf	_RFID_Read& (0+255),b	;volatile
  1009                           
  1010                           ; BSR set to: 1
  1011                           ;main.c: 129: Move=0;
  1012  000418  0E00               	movlw	0
  1013  00041A  6FCF               	movwf	main@Move& (0+255),b
  1014                           
  1015                           ; BSR set to: 1
  1016                           ;main.c: 132: SensorResult[0]=grabLeftIR();
  1017  00041C  EC13  F00C         	call	_grabLeftIR	;wreg free
  1018  000420  C02C  F1C9         	movff	?_grabLeftIR,main@SensorResult
  1019  000424  C02D  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1020                           
  1021                           ;main.c: 133: SensorResult[1]=grabRightIR();
  1022  000428  ECD8  F00B         	call	_grabRightIR	;wreg free
  1023  00042C  C02C  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1024  000430  C02D  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1025                           
  1026                           ;main.c: 137: CAP1BUFH=0;
  1027  000434  0E00               	movlw	0
  1028  000436  6E69               	movwf	3945,c	;volatile
  1029                           
  1030                           ;main.c: 138: CAP1BUFL=0;
  1031  000438  0E00               	movlw	0
  1032  00043A  6E68               	movwf	3944,c	;volatile
  1033                           
  1034                           ;main.c: 139: CAP2BUFH=0;
  1035  00043C  0E00               	movlw	0
  1036  00043E  6E67               	movwf	3943,c	;volatile
  1037                           
  1038                           ;main.c: 140: CAP2BUFL=0;
  1039  000440  0E00               	movlw	0
  1040  000442  6E66               	movwf	3942,c	;volatile
  1041                           
  1042                           ;main.c: 143: SendLCD(0b00000001,0);
  1043  000444  0E00               	movlw	0
  1044  000446  6E30               	movwf	SendLCD@type,c
  1045  000448  0E01               	movlw	1
  1046  00044A  ECDC  F00D         	call	_SendLCD
  1047                           
  1048                           ;main.c: 144: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1049  00044E  0E21               	movlw	33
  1050  000450                     u3237:
  1051  000450  2EE8               	decfsz	wreg,f,c
  1052  000452  D7FE               	bra	u3237
  1053  000454  F000               	nop	
  1054                           
  1055                           ;main.c: 145: SendLCD(0b00000010,0);
  1056  000456  0E00               	movlw	0
  1057  000458  6E30               	movwf	SendLCD@type,c
  1058  00045A  0E02               	movlw	2
  1059  00045C  ECDC  F00D         	call	_SendLCD
  1060                           
  1061                           ;main.c: 146: _delay((unsigned long)((2)*(8000000/4000.0)));
  1062  000460  0E06               	movlw	6
  1063  000462  0100               	movlb	0	; () banked
  1064  000464  6FC9               	movwf	??_main& (0+255),b
  1065  000466  0E30               	movlw	48
  1066  000468                     u3247:
  1067  000468  2EE8               	decfsz	wreg,f,c
  1068  00046A  D7FE               	bra	u3247
  1069  00046C  2FC9               	decfsz	??_main& (0+255),f,b
  1070  00046E  D7FC               	bra	u3247
  1071  000470  F000               	nop	
  1072                           
  1073                           ;main.c: 147: SetLine(1);
  1074  000472  0E01               	movlw	1
  1075  000474  ECC1  F00D         	call	_SetLine
  1076                           
  1077                           ;main.c: 148: LCD_String("      Inert Mode");
  1078  000478  0E1C               	movlw	low STR_5
  1079  00047A  0100               	movlb	0	; () banked
  1080  00047C  6F60               	movwf	LCD_String@string& (0+255),b
  1081  00047E  0E03               	movlw	high STR_5
  1082  000480  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1083  000482  EC4E  F00C         	call	_LCD_String	;wreg free
  1084                           
  1085                           ;main.c: 149: SetLine(2);
  1086  000486  0E02               	movlw	2
  1087  000488  ECC1  F00D         	call	_SetLine
  1088                           
  1089                           ;main.c: 150: if (RFID_Read) {
  1090  00048C  0101               	movlb	1	; () banked
  1091  00048E  51F8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1092  000490  B4D8               	btfsc	status,2,c
  1093  000492  D008               	goto	l404
  1094                           
  1095                           ; BSR set to: 1
  1096                           ;main.c: 151: LCD_String(Message);
  1097  000494  0EBE               	movlw	low main@Message
  1098  000496  0100               	movlb	0	; () banked
  1099  000498  6F60               	movwf	LCD_String@string& (0+255),b
  1100  00049A  0E01               	movlw	high main@Message
  1101  00049C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1102  00049E  EC4E  F00C         	call	_LCD_String	;wreg free
  1103                           
  1104                           ;main.c: 152: } else {
  1105  0004A2  D29F               	goto	l3727
  1106  0004A4                     l404:
  1107                           
  1108                           ;main.c: 153: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1109  0004A4  0E00               	movlw	low main@buf
  1110  0004A6  0100               	movlb	0	; () banked
  1111  0004A8  6F67               	movwf	sprintf@sp& (0+255),b
  1112  0004AA  0E01               	movlw	high main@buf
  1113  0004AC  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  1114  0004AE  0E0B               	movlw	low STR_6
  1115  0004B0  6F69               	movwf	sprintf@f& (0+255),b
  1116  0004B2  0E03               	movlw	high STR_6
  1117  0004B4  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  1118  0004B6  C1C9  F06B         	movff	main@SensorResult,?_sprintf+4
  1119  0004BA  C1CA  F06C         	movff	main@SensorResult+1,?_sprintf+5
  1120  0004BE  C1CB  F06D         	movff	main@SensorResult+2,?_sprintf+6
  1121  0004C2  C1CC  F06E         	movff	main@SensorResult+3,?_sprintf+7
  1122  0004C6  EC81  F007         	call	_sprintf	;wreg free
  1123                           
  1124                           ;main.c: 154: LCD_String(buf);
  1125  0004CA  0E00               	movlw	low main@buf
  1126  0004CC  0100               	movlb	0	; () banked
  1127  0004CE  6F60               	movwf	LCD_String@string& (0+255),b
  1128  0004D0  0E01               	movlw	high main@buf
  1129  0004D2  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1130  0004D4  EC4E  F00C         	call	_LCD_String	;wreg free
  1131                           
  1132                           ;main.c: 155: }
  1133                           ;main.c: 157: break;
  1134  0004D8  D284               	goto	l3727
  1135  0004DA                     
  1136                           ;main.c: 161: initMotorPWM();
  1137  0004DA  EC51  F00D         	call	_initMotorPWM	;wreg free
  1138                           
  1139                           ;main.c: 162: initTimer();
  1140  0004DE  EC48  F00E         	call	_initTimer	;wreg free
  1141                           
  1142                           ;main.c: 163: initRFID();
  1143  0004E2  EC3A  F00E         	call	_initRFID	;wreg free
  1144                           
  1145                           ;main.c: 164: initLCD();
  1146  0004E6  EC4D  F00A         	call	_initLCD	;wreg free
  1147                           
  1148                           ;main.c: 165: initIR();
  1149  0004EA  EC1A  F00E         	call	_initIR	;wreg free
  1150                           
  1151                           ;main.c: 167: enableSensor(0, 1);
  1152  0004EE  0E01               	movlw	1
  1153  0004F0  6E2C               	movwf	enableSensor@status,c
  1154  0004F2  0E00               	movlw	0
  1155  0004F4  ECF4  F00D         	call	_enableSensor
  1156                           
  1157                           ;main.c: 168: enableSensor(1, 1);
  1158  0004F8  0E01               	movlw	1
  1159  0004FA  6E2C               	movwf	enableSensor@status,c
  1160  0004FC  0E01               	movlw	1
  1161  0004FE  ECF4  F00D         	call	_enableSensor
  1162                           
  1163                           ;main.c: 171: fullSpeed(&mL, &mR, 100);
  1164  000502  0ED0               	movlw	low main@mL
  1165  000504  0100               	movlb	0	; () banked
  1166  000506  6F71               	movwf	fullSpeed@mL& (0+255),b
  1167  000508  0E01               	movlw	high main@mL
  1168  00050A  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1169  00050C  0ED9               	movlw	low main@mR
  1170  00050E  6F73               	movwf	fullSpeed@mR& (0+255),b
  1171  000510  0E01               	movlw	high main@mR
  1172  000512  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1173  000514  0E64               	movlw	100
  1174  000516  6F75               	movwf	fullSpeed@power& (0+255),b
  1175  000518  EC9A  F00B         	call	_fullSpeed	;wreg free
  1176                           
  1177                           ;main.c: 172: delay_tenth_s(1);
  1178  00051C  0E01               	movlw	1
  1179  00051E  EC6E  F00D         	call	_delay_tenth_s
  1180  000522  D25E               	goto	l3725
  1181  000524                     
  1182                           ;main.c: 180: SetLine(1);
  1183  000524  0E01               	movlw	1
  1184  000526  ECC1  F00D         	call	_SetLine
  1185                           
  1186                           ;main.c: 181: LCD_String("Searching");
  1187  00052A  0E44               	movlw	low STR_7
  1188  00052C  0100               	movlb	0	; () banked
  1189  00052E  6F60               	movwf	LCD_String@string& (0+255),b
  1190  000530  0E03               	movlw	high STR_7
  1191  000532  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1192  000534  EC4E  F00C         	call	_LCD_String	;wreg free
  1193                           
  1194                           ;main.c: 183: if (DirectionFound==-1) {
  1195  000538  0101               	movlb	1	; () banked
  1196  00053A  29CD               	incf	main@DirectionFound& (0+255),w,b
  1197  00053C  A4D8               	btfss	status,2,c
  1198  00053E  D034               	goto	l409
  1199                           
  1200                           ; BSR set to: 1
  1201                           ;main.c: 188: MoveType[Move]=0;
  1202  000540  51CF               	movf	main@Move& (0+255),w,b
  1203  000542  0D01               	mullw	1
  1204  000544  0E28               	movlw	low main@MoveType
  1205  000546  24F3               	addwf	prodl,w,c
  1206  000548  6ED9               	movwf	fsr2l,c
  1207  00054A  0E01               	movlw	high main@MoveType
  1208  00054C  20F4               	addwfc	prodh,w,c
  1209  00054E  6EDA               	movwf	fsr2h,c
  1210  000550  0E00               	movlw	0
  1211  000552  6EDF               	movwf	indf2,c
  1212                           
  1213                           ;main.c: 189: MoveTime[Move]=6;
  1214  000554  51CF               	movf	main@Move& (0+255),w,b
  1215  000556  0D02               	mullw	2
  1216  000558  0E5A               	movlw	low main@MoveTime
  1217  00055A  24F3               	addwf	prodl,w,c
  1218  00055C  6ED9               	movwf	fsr2l,c
  1219  00055E  0E01               	movlw	high main@MoveTime
  1220  000560  20F4               	addwfc	prodh,w,c
  1221  000562  6EDA               	movwf	fsr2h,c
  1222  000564  0E06               	movlw	6
  1223  000566  6EDE               	movwf	postinc2,c
  1224  000568  0E00               	movlw	0
  1225  00056A  6EDD               	movwf	postdec2,c
  1226                           
  1227                           ; BSR set to: 1
  1228                           ;main.c: 190: Move++;
  1229  00056C  2BCF               	incf	main@Move& (0+255),f,b
  1230                           
  1231                           ; BSR set to: 1
  1232                           ;main.c: 191: fullSpeed(&mL, &mR, 100);
  1233  00056E  0ED0               	movlw	low main@mL
  1234  000570  0100               	movlb	0	; () banked
  1235  000572  6F71               	movwf	fullSpeed@mL& (0+255),b
  1236  000574  0E01               	movlw	high main@mL
  1237  000576  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1238  000578  0ED9               	movlw	low main@mR
  1239  00057A  6F73               	movwf	fullSpeed@mR& (0+255),b
  1240  00057C  0E01               	movlw	high main@mR
  1241  00057E  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1242  000580  0E64               	movlw	100
  1243  000582  6F75               	movwf	fullSpeed@power& (0+255),b
  1244  000584  EC9A  F00B         	call	_fullSpeed	;wreg free
  1245                           
  1246                           ;main.c: 192: delay_tenth_s(6);
  1247  000588  0E06               	movlw	6
  1248  00058A  EC6E  F00D         	call	_delay_tenth_s
  1249                           
  1250                           ;main.c: 193: stop(&mL,&mR);
  1251  00058E  0ED0               	movlw	low main@mL
  1252  000590  0100               	movlb	0	; () banked
  1253  000592  6F71               	movwf	stop@mL& (0+255),b
  1254  000594  0E01               	movlw	high main@mL
  1255  000596  6F72               	movwf	(stop@mL+1)& (0+255),b
  1256  000598  0ED9               	movlw	low main@mR
  1257  00059A  6F73               	movwf	stop@mR& (0+255),b
  1258  00059C  0E01               	movlw	high main@mR
  1259  00059E  6F74               	movwf	(stop@mR+1)& (0+255),b
  1260  0005A0  EC0E  F00B         	call	_stop	;wreg free
  1261                           
  1262                           ;main.c: 194: DirectionFound=0;
  1263  0005A4  0E00               	movlw	0
  1264  0005A6  D034               	goto	L2
  1265  0005A8                     l409:
  1266                           
  1267                           ; BSR set to: 1
  1268                           
  1269                           ; BSR set to: 1
  1270  0005A8  51CD               	movf	main@DirectionFound& (0+255),w,b
  1271  0005AA  A4D8               	btfss	status,2,c
  1272  0005AC  D023               	goto	l411
  1273                           
  1274                           ; BSR set to: 1
  1275                           ;main.c: 197: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1276                           ;main.c: 198: &MoveTime, &Move, &MoveType, &RFID_Read, &millis);
  1277  0005AE  0ED0               	movlw	low main@mL
  1278  0005B0  0100               	movlb	0	; () banked
  1279  0005B2  6F7C               	movwf	ScanWithRange@mL& (0+255),b
  1280  0005B4  0E01               	movlw	high main@mL
  1281  0005B6  6F7D               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1282  0005B8  0ED9               	movlw	low main@mR
  1283  0005BA  6F7E               	movwf	ScanWithRange@mR& (0+255),b
  1284  0005BC  0E01               	movlw	high main@mR
  1285  0005BE  6F7F               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1286  0005C0  C1C8  F080         	movff	main@ScanAngle,ScanWithRange@loops
  1287  0005C4  6B81               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1288  0005C6  0E5A               	movlw	low main@MoveTime
  1289  0005C8  6F82               	movwf	ScanWithRange@MoveTime& (0+255),b
  1290  0005CA  0E01               	movlw	high main@MoveTime
  1291  0005CC  6F83               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1292  0005CE  0ECF               	movlw	low main@Move
  1293  0005D0  6F84               	movwf	ScanWithRange@Move& (0+255),b
  1294  0005D2  0E01               	movlw	high main@Move
  1295  0005D4  6F85               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1296  0005D6  0E28               	movlw	low main@MoveType
  1297  0005D8  6F86               	movwf	ScanWithRange@MoveType& (0+255),b
  1298  0005DA  0E01               	movlw	high main@MoveType
  1299  0005DC  6F87               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1300  0005DE  0EF8               	movlw	low _RFID_Read
  1301  0005E0  6F88               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1302  0005E2  0E01               	movlw	high _RFID_Read
  1303  0005E4  6F89               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1304  0005E6  0EF6               	movlw	low _millis
  1305  0005E8  6F8A               	movwf	ScanWithRange@millis& (0+255),b
  1306  0005EA  0E01               	movlw	high _millis
  1307  0005EC  6F8B               	movwf	(ScanWithRange@millis+1)& (0+255),b
  1308  0005EE  EC02  F005         	call	_ScanWithRange	;wreg free
  1309  0005F2  D00E               	goto	L2
  1310  0005F4                     l411:
  1311                           
  1312                           ; BSR set to: 1
  1313                           
  1314                           ; BSR set to: 1
  1315  0005F4  05CD               	decf	main@DirectionFound& (0+255),w,b
  1316  0005F6  A4D8               	btfss	status,2,c
  1317  0005F8  D00E               	goto	l413
  1318                           
  1319                           ; BSR set to: 1
  1320                           ;main.c: 201: DirectionFound=ScanIR(&mL, &mR);
  1321  0005FA  0ED0               	movlw	low main@mL
  1322  0005FC  0100               	movlb	0	; () banked
  1323  0005FE  6F7C               	movwf	ScanIR@mL& (0+255),b
  1324  000600  0E01               	movlw	high main@mL
  1325  000602  6F7D               	movwf	(ScanIR@mL+1)& (0+255),b
  1326  000604  0ED9               	movlw	low main@mR
  1327  000606  6F7E               	movwf	ScanIR@mR& (0+255),b
  1328  000608  0E01               	movlw	high main@mR
  1329  00060A  6F7F               	movwf	(ScanIR@mR+1)& (0+255),b
  1330  00060C  EC70  F009         	call	_ScanIR	;wreg free
  1331  000610                     L2:
  1332  000610  0101               	movlb	1	; () banked
  1333  000612  6FCD               	movwf	main@DirectionFound& (0+255),b
  1334                           
  1335                           ;main.c: 202: } else if (DirectionFound==2) {
  1336  000614  D1E6               	goto	l3727
  1337  000616                     l413:
  1338                           
  1339                           ; BSR set to: 1
  1340                           
  1341                           ; BSR set to: 1
  1342  000616  0E02               	movlw	2
  1343  000618  19CD               	xorwf	main@DirectionFound& (0+255),w,b
  1344  00061A  A4D8               	btfss	status,2,c
  1345  00061C  D1E2               	goto	l3727
  1346                           
  1347                           ; BSR set to: 1
  1348                           ;main.c: 204: mode=2;
  1349  00061E  0E02               	movlw	2
  1350  000620  6E32               	movwf	_mode,c	;volatile
  1351                           
  1352                           ; BSR set to: 1
  1353                           ;main.c: 205: MoveType[Move]=1;
  1354  000622  51CF               	movf	main@Move& (0+255),w,b
  1355  000624  0D01               	mullw	1
  1356  000626  0E28               	movlw	low main@MoveType
  1357  000628  24F3               	addwf	prodl,w,c
  1358  00062A  6ED9               	movwf	fsr2l,c
  1359  00062C  0E01               	movlw	high main@MoveType
  1360  00062E  20F4               	addwfc	prodh,w,c
  1361  000630  6EDA               	movwf	fsr2h,c
  1362  000632  0E01               	movlw	1
  1363  000634  6EDF               	movwf	indf2,c
  1364                           
  1365                           ; BSR set to: 1
  1366                           ;main.c: 206: }
  1367                           ;main.c: 208: break;
  1368                           
  1369                           ; BSR set to: 1
  1370                           
  1371                           ; BSR set to: 1
  1372                           
  1373                           ; BSR set to: 1
  1374  000636  D1D5               	goto	l3727
  1375  000638                     
  1376                           ;main.c: 215: if (RFID_Read) {
  1377                           
  1378                           ; BSR set to: 1
  1379  000638  0101               	movlb	1	; () banked
  1380  00063A  51F8               	movf	_RFID_Read& (0+255),w,b	;volatile
  1381  00063C  B4D8               	btfsc	status,2,c
  1382  00063E  D08A               	goto	l417
  1383                           
  1384                           ; BSR set to: 1
  1385                           ;main.c: 216: stop(&mL, &mR);
  1386  000640  0ED0               	movlw	low main@mL
  1387  000642  0100               	movlb	0	; () banked
  1388  000644  6F71               	movwf	stop@mL& (0+255),b
  1389  000646  0E01               	movlw	high main@mL
  1390  000648  6F72               	movwf	(stop@mL+1)& (0+255),b
  1391  00064A  0ED9               	movlw	low main@mR
  1392  00064C  6F73               	movwf	stop@mR& (0+255),b
  1393  00064E  0E01               	movlw	high main@mR
  1394  000650  6F74               	movwf	(stop@mR+1)& (0+255),b
  1395  000652  EC0E  F00B         	call	_stop	;wreg free
  1396                           
  1397                           ;main.c: 217: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1398  000656  0E03               	movlw	3
  1399  000658  0101               	movlb	1	; () banked
  1400  00065A  19F5               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1401  00065C  A4D8               	btfss	status,2,c
  1402  00065E  D002               	goto	u3050
  1403  000660  0E01               	movlw	1
  1404  000662  D001               	goto	u3052
  1405  000664                     u3050:
  1406  000664  0E00               	movlw	0
  1407  000666                     u3052:
  1408  000666  0100               	movlb	0	; () banked
  1409  000668  6FC9               	movwf	??_main& (0+255),b
  1410  00066A  0E02               	movlw	2
  1411  00066C  0101               	movlb	1	; () banked
  1412  00066E  19E6               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1413  000670  A4D8               	btfss	status,2,c
  1414  000672  D002               	goto	u3060
  1415  000674  0E01               	movlw	1
  1416  000676  D001               	goto	u3062
  1417  000678                     u3060:
  1418  000678  0E00               	movlw	0
  1419  00067A                     u3062:
  1420  00067A  0100               	movlb	0	; () banked
  1421  00067C  15C9               	andwf	??_main& (0+255),w,b
  1422  00067E  A0E8               	btfss	wreg,0,c
  1423  000680  D1B0               	goto	l3727
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 218: if (VerifySignal(&ReceivedString)){
  1427  000682  0EE6               	movlw	low _ReceivedString
  1428  000684  6E2C               	movwf	VerifySignal@Signal,c
  1429  000686  0E01               	movlw	high _ReceivedString
  1430  000688  6E2D               	movwf	VerifySignal@Signal+1,c
  1431  00068A  EC7E  F00C         	call	_VerifySignal	;wreg free
  1432  00068E  0900               	iorlw	0
  1433  000690  B4D8               	btfsc	status,2,c
  1434  000692  D037               	goto	l419
  1435                           
  1436                           ;main.c: 220: for (i=0; i<10; i++){
  1437  000694  0E00               	movlw	0
  1438  000696  0101               	movlb	1	; () banked
  1439  000698  6FCE               	movwf	main@i& (0+255),b
  1440  00069A                     l3629:
  1441                           
  1442                           ; BSR set to: 1
  1443  00069A  0E09               	movlw	9
  1444  00069C  65CE               	cpfsgt	main@i& (0+255),b
  1445  00069E  D001               	goto	l420
  1446  0006A0  D01B               	goto	u3100
  1447  0006A2                     l420:
  1448                           
  1449                           ; BSR set to: 1
  1450                           ;main.c: 221: Message[i] = ReceivedString[i+1];
  1451                           
  1452                           ; BSR set to: 1
  1453  0006A2  51CE               	movf	main@i& (0+255),w,b
  1454  0006A4  0100               	movlb	0	; () banked
  1455  0006A6  6FC9               	movwf	??_main& (0+255),b
  1456  0006A8  6BCA               	clrf	(??_main+1)& (0+255),b
  1457  0006AA  0E01               	movlw	1
  1458  0006AC  27C9               	addwf	??_main& (0+255),f,b
  1459  0006AE  0E00               	movlw	0
  1460  0006B0  23CA               	addwfc	(??_main+1)& (0+255),f,b
  1461  0006B2  0EE6               	movlw	low _ReceivedString
  1462  0006B4  25C9               	addwf	??_main& (0+255),w,b
  1463  0006B6  6ED9               	movwf	fsr2l,c
  1464  0006B8  0E01               	movlw	high _ReceivedString
  1465  0006BA  21CA               	addwfc	(??_main+1)& (0+255),w,b
  1466  0006BC  6EDA               	movwf	fsr2h,c
  1467  0006BE  0101               	movlb	1	; () banked
  1468  0006C0  51CE               	movf	main@i& (0+255),w,b
  1469  0006C2  0D01               	mullw	1
  1470  0006C4  0EBE               	movlw	low main@Message
  1471  0006C6  24F3               	addwf	prodl,w,c
  1472  0006C8  6EE1               	movwf	fsr1l,c
  1473  0006CA  0E01               	movlw	high main@Message
  1474  0006CC  20F4               	addwfc	prodh,w,c
  1475  0006CE  6EE2               	movwf	fsr1h,c
  1476  0006D0  CFDF FFE7          	movff	indf2,indf1
  1477                           
  1478                           ; BSR set to: 1
  1479  0006D4  2BCE               	incf	main@i& (0+255),f,b
  1480  0006D6  D7E1               	goto	l3629
  1481  0006D8                     u3100:
  1482                           
  1483                           ; BSR set to: 1
  1484                           ;main.c: 222: }
  1485                           ;main.c: 225: for (i=0; i<16; i++) {
  1486                           
  1487                           ; BSR set to: 1
  1488  0006D8  0E00               	movlw	0
  1489  0006DA  6FCE               	movwf	main@i& (0+255),b
  1490  0006DC                     l3641:
  1491                           
  1492                           ; BSR set to: 1
  1493  0006DC  0E0F               	movlw	15
  1494  0006DE  65CE               	cpfsgt	main@i& (0+255),b
  1495  0006E0  D001               	goto	l422
  1496  0006E2  D00C               	goto	u3120
  1497  0006E4                     l422:
  1498                           
  1499                           ; BSR set to: 1
  1500                           ;main.c: 226: ReceivedString[i]=0;
  1501                           
  1502                           ; BSR set to: 1
  1503  0006E4  51CE               	movf	main@i& (0+255),w,b
  1504  0006E6  0D01               	mullw	1
  1505  0006E8  0EE6               	movlw	low _ReceivedString
  1506  0006EA  24F3               	addwf	prodl,w,c
  1507  0006EC  6ED9               	movwf	fsr2l,c
  1508  0006EE  0E01               	movlw	high _ReceivedString
  1509  0006F0  20F4               	addwfc	prodh,w,c
  1510  0006F2  6EDA               	movwf	fsr2h,c
  1511  0006F4  0E00               	movlw	0
  1512  0006F6  6EDF               	movwf	indf2,c
  1513                           
  1514                           ; BSR set to: 1
  1515  0006F8  2BCE               	incf	main@i& (0+255),f,b
  1516  0006FA  D7F0               	goto	l3641
  1517  0006FC                     u3120:
  1518                           
  1519                           ; BSR set to: 1
  1520                           ;main.c: 227: }
  1521                           ;main.c: 228: mode=3;
  1522                           
  1523                           ; BSR set to: 1
  1524  0006FC  0E03               	movlw	3
  1525  0006FE  6E32               	movwf	_mode,c	;volatile
  1526                           
  1527                           ;main.c: 230: } else {
  1528  000700  D170               	goto	l3727
  1529  000702                     l419:
  1530                           
  1531                           ;main.c: 231: fullSpeedBack(&mL,&mR, 100);
  1532                           
  1533                           ; BSR set to: 1
  1534  000702  0ED0               	movlw	low main@mL
  1535  000704  0100               	movlb	0	; () banked
  1536  000706  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1537  000708  0E01               	movlw	high main@mL
  1538  00070A  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1539  00070C  0ED9               	movlw	low main@mR
  1540  00070E  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1541  000710  0E01               	movlw	high main@mR
  1542  000712  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1543  000714  0E64               	movlw	100
  1544  000716  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1545  000718  ECF7  F00C         	call	_fullSpeedBack	;wreg free
  1546                           
  1547                           ;main.c: 232: delay_tenth_s(5);
  1548  00071C  0E05               	movlw	5
  1549  00071E  EC6E  F00D         	call	_delay_tenth_s
  1550                           
  1551                           ;main.c: 233: stop(&mL,&mR);
  1552  000722  0ED0               	movlw	low main@mL
  1553  000724  0100               	movlb	0	; () banked
  1554  000726  6F71               	movwf	stop@mL& (0+255),b
  1555  000728  0E01               	movlw	high main@mL
  1556  00072A  6F72               	movwf	(stop@mL+1)& (0+255),b
  1557  00072C  0ED9               	movlw	low main@mR
  1558  00072E  6F73               	movwf	stop@mR& (0+255),b
  1559  000730  0E01               	movlw	high main@mR
  1560  000732  6F74               	movwf	(stop@mR+1)& (0+255),b
  1561  000734  EC0E  F00B         	call	_stop	;wreg free
  1562                           
  1563                           ;main.c: 234: fullSpeed(&mL,&mR, 100);
  1564  000738  0ED0               	movlw	low main@mL
  1565  00073A  0100               	movlb	0	; () banked
  1566  00073C  6F71               	movwf	fullSpeed@mL& (0+255),b
  1567  00073E  0E01               	movlw	high main@mL
  1568  000740  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1569  000742  0ED9               	movlw	low main@mR
  1570  000744  6F73               	movwf	fullSpeed@mR& (0+255),b
  1571  000746  0E01               	movlw	high main@mR
  1572  000748  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1573  00074A  0E64               	movlw	100
  1574  00074C  6F75               	movwf	fullSpeed@power& (0+255),b
  1575  00074E  EC9A  F00B         	call	_fullSpeed	;wreg free
  1576                           
  1577                           ;main.c: 235: }
  1578                           ;main.c: 236: }
  1579                           ;main.c: 237: } else {
  1580  000752  D147               	goto	l3727
  1581  000754                     l417:
  1582                           
  1583                           ;main.c: 238: DirectionFound=1;
  1584  000754  0E01               	movlw	1
  1585  000756  0101               	movlb	1	; () banked
  1586  000758  6FCD               	movwf	main@DirectionFound& (0+255),b
  1587                           
  1588                           ;main.c: 239: mode=1;
  1589  00075A  0E01               	movlw	1
  1590  00075C  6E32               	movwf	_mode,c	;volatile
  1591                           
  1592                           ; BSR set to: 1
  1593                           ;main.c: 241: fullSpeed(&mL,&mR, 100);
  1594  00075E  0ED0               	movlw	low main@mL
  1595  000760  0100               	movlb	0	; () banked
  1596  000762  6F71               	movwf	fullSpeed@mL& (0+255),b
  1597  000764  0E01               	movlw	high main@mL
  1598  000766  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1599  000768  0ED9               	movlw	low main@mR
  1600  00076A  6F73               	movwf	fullSpeed@mR& (0+255),b
  1601  00076C  0E01               	movlw	high main@mR
  1602  00076E  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1603  000770  0E64               	movlw	100
  1604  000772  6F75               	movwf	fullSpeed@power& (0+255),b
  1605  000774  EC9A  F00B         	call	_fullSpeed	;wreg free
  1606                           
  1607                           ;main.c: 242: delay_tenth_s(1);
  1608  000778  0E01               	movlw	1
  1609  00077A  EC6E  F00D         	call	_delay_tenth_s
  1610                           
  1611                           ;main.c: 243: MoveType[Move] = 0;
  1612  00077E  0101               	movlb	1	; () banked
  1613  000780  51CF               	movf	main@Move& (0+255),w,b
  1614  000782  0D01               	mullw	1
  1615  000784  0E28               	movlw	low main@MoveType
  1616  000786  24F3               	addwf	prodl,w,c
  1617  000788  6ED9               	movwf	fsr2l,c
  1618  00078A  0E01               	movlw	high main@MoveType
  1619  00078C  20F4               	addwfc	prodh,w,c
  1620  00078E  6EDA               	movwf	fsr2h,c
  1621  000790  0E00               	movlw	0
  1622  000792  6EDF               	movwf	indf2,c
  1623                           
  1624                           ; BSR set to: 1
  1625                           ;main.c: 244: MoveTime[Move] = 5;
  1626  000794  51CF               	movf	main@Move& (0+255),w,b
  1627  000796  0D02               	mullw	2
  1628  000798  0E5A               	movlw	low main@MoveTime
  1629  00079A  24F3               	addwf	prodl,w,c
  1630  00079C  6ED9               	movwf	fsr2l,c
  1631  00079E  0E01               	movlw	high main@MoveTime
  1632  0007A0  20F4               	addwfc	prodh,w,c
  1633  0007A2  6EDA               	movwf	fsr2h,c
  1634  0007A4  0E05               	movlw	5
  1635  0007A6  6EDE               	movwf	postinc2,c
  1636  0007A8  0E00               	movlw	0
  1637  0007AA  6EDD               	movwf	postdec2,c
  1638                           
  1639                           ; BSR set to: 1
  1640                           ;main.c: 245: Move++;
  1641  0007AC  2BCF               	incf	main@Move& (0+255),f,b
  1642                           
  1643                           ; BSR set to: 1
  1644                           ;main.c: 246: }
  1645                           ;main.c: 248: break;
  1646  0007AE  D119               	goto	l3727
  1647  0007B0                     
  1648                           ;main.c: 253: SetLine(1);
  1649                           
  1650                           ; BSR set to: 1
  1651  0007B0  0E01               	movlw	1
  1652  0007B2  ECC1  F00D         	call	_SetLine
  1653                           
  1654                           ;main.c: 254: LCD_String(Message);
  1655  0007B6  0EBE               	movlw	low main@Message
  1656  0007B8  0100               	movlb	0	; () banked
  1657  0007BA  6F60               	movwf	LCD_String@string& (0+255),b
  1658  0007BC  0E01               	movlw	high main@Message
  1659  0007BE  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1660  0007C0  EC4E  F00C         	call	_LCD_String	;wreg free
  1661                           
  1662                           ;main.c: 255: SetLine(2);
  1663  0007C4  0E02               	movlw	2
  1664  0007C6  ECC1  F00D         	call	_SetLine
  1665                           
  1666                           ;main.c: 256: LCD_String("Going Home");
  1667  0007CA  0E39               	movlw	low STR_8
  1668  0007CC  0100               	movlb	0	; () banked
  1669  0007CE  6F60               	movwf	LCD_String@string& (0+255),b
  1670  0007D0  0E03               	movlw	high STR_8
  1671  0007D2  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1672  0007D4  EC4E  F00C         	call	_LCD_String	;wreg free
  1673  0007D8  0101               	movlb	1	; () banked
  1674  0007DA  BFCF               	btfsc	main@Move& (0+255),7,b
  1675  0007DC  D0F6               	goto	u3220
  1676                           
  1677                           ; BSR set to: 1
  1678                           ;main.c: 259: stop(&mL,&mR);
  1679                           
  1680                           ; BSR set to: 1
  1681                           
  1682                           ; BSR set to: 1
  1683  0007DE  0ED0               	movlw	low main@mL
  1684  0007E0  0100               	movlb	0	; () banked
  1685  0007E2  6F71               	movwf	stop@mL& (0+255),b
  1686  0007E4  0E01               	movlw	high main@mL
  1687  0007E6  6F72               	movwf	(stop@mL+1)& (0+255),b
  1688  0007E8  0ED9               	movlw	low main@mR
  1689  0007EA  6F73               	movwf	stop@mR& (0+255),b
  1690  0007EC  0E01               	movlw	high main@mR
  1691  0007EE  6F74               	movwf	(stop@mR+1)& (0+255),b
  1692  0007F0  EC0E  F00B         	call	_stop	;wreg free
  1693                           
  1694                           ;main.c: 260: if (MoveType[Move]==0) {
  1695  0007F4  0101               	movlb	1	; () banked
  1696  0007F6  51CF               	movf	main@Move& (0+255),w,b
  1697  0007F8  0D01               	mullw	1
  1698  0007FA  0E28               	movlw	low main@MoveType
  1699  0007FC  24F3               	addwf	prodl,w,c
  1700  0007FE  6ED9               	movwf	fsr2l,c
  1701  000800  0E01               	movlw	high main@MoveType
  1702  000802  20F4               	addwfc	prodh,w,c
  1703  000804  6EDA               	movwf	fsr2h,c
  1704  000806  50DF               	movf	indf2,w,c
  1705  000808  A4D8               	btfss	status,2,c
  1706  00080A  D01A               	goto	l429
  1707                           
  1708                           ; BSR set to: 1
  1709                           ;main.c: 261: fullSpeedBack(&mL,&mR,100);
  1710  00080C  0ED0               	movlw	low main@mL
  1711  00080E  0100               	movlb	0	; () banked
  1712  000810  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1713  000812  0E01               	movlw	high main@mL
  1714  000814  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1715  000816  0ED9               	movlw	low main@mR
  1716  000818  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1717  00081A  0E01               	movlw	high main@mR
  1718  00081C  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1719  00081E  0E64               	movlw	100
  1720  000820  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1721  000822  ECF7  F00C         	call	_fullSpeedBack	;wreg free
  1722                           
  1723                           ;main.c: 262: delay_tenth_s(MoveTime[Move]);
  1724  000826  0101               	movlb	1	; () banked
  1725  000828  51CF               	movf	main@Move& (0+255),w,b
  1726  00082A  0D02               	mullw	2
  1727  00082C  0E5A               	movlw	low main@MoveTime
  1728  00082E  24F3               	addwf	prodl,w,c
  1729  000830  6ED9               	movwf	fsr2l,c
  1730  000832  0E01               	movlw	high main@MoveTime
  1731  000834  20F4               	addwfc	prodh,w,c
  1732  000836  6EDA               	movwf	fsr2h,c
  1733  000838  50DF               	movf	indf2,w,c
  1734  00083A  EC6E  F00D         	call	_delay_tenth_s
  1735                           
  1736                           ;main.c: 263: } else if (MoveType[Move]==1) {
  1737  00083E  D0BF               	goto	l443
  1738  000840                     l429:
  1739  000840  0101               	movlb	1	; () banked
  1740  000842  51CF               	movf	main@Move& (0+255),w,b
  1741  000844  0D01               	mullw	1
  1742  000846  0E28               	movlw	low main@MoveType
  1743  000848  24F3               	addwf	prodl,w,c
  1744  00084A  6ED9               	movwf	fsr2l,c
  1745  00084C  0E01               	movlw	high main@MoveType
  1746  00084E  20F4               	addwfc	prodh,w,c
  1747  000850  6EDA               	movwf	fsr2h,c
  1748  000852  04DE               	decf	postinc2,w,c
  1749  000854  A4D8               	btfss	status,2,c
  1750  000856  D063               	goto	l431
  1751                           
  1752                           ; BSR set to: 1
  1753                           ;main.c: 264: T0CONbits.TMR0ON=0;
  1754  000858  9ED5               	bcf	4053,7,c	;volatile
  1755                           
  1756                           ; BSR set to: 1
  1757                           ;main.c: 265: TMR0L = 0;
  1758  00085A  0E00               	movlw	0
  1759  00085C  6ED6               	movwf	4054,c	;volatile
  1760                           
  1761                           ;main.c: 266: TMR0H = 0;
  1762  00085E  0E00               	movlw	0
  1763  000860  6ED7               	movwf	4055,c	;volatile
  1764                           
  1765                           ;main.c: 267: millis = 0;
  1766  000862  0E00               	movlw	0
  1767  000864  6FF7               	movwf	(_millis+1)& (0+255),b	;volatile
  1768  000866  0E00               	movlw	0
  1769  000868  6FF6               	movwf	_millis& (0+255),b	;volatile
  1770                           
  1771                           ; BSR set to: 1
  1772                           ;main.c: 268: if (MoveTime[Move]>0) {
  1773  00086A  51CF               	movf	main@Move& (0+255),w,b
  1774  00086C  0D02               	mullw	2
  1775  00086E  0E5A               	movlw	low main@MoveTime
  1776  000870  24F3               	addwf	prodl,w,c
  1777  000872  6ED9               	movwf	fsr2l,c
  1778  000874  0E01               	movlw	high main@MoveTime
  1779  000876  20F4               	addwfc	prodh,w,c
  1780  000878  6EDA               	movwf	fsr2h,c
  1781  00087A  0E01               	movlw	1
  1782  00087C  BEDB               	btfsc	plusw2,7,c
  1783  00087E  D024               	goto	l432
  1784  000880  0E01               	movlw	1
  1785  000882  50DB               	movf	plusw2,w,c
  1786  000884  E103               	bnz	u3160
  1787  000886  04DE               	decf	postinc2,w,c
  1788  000888  A0D8               	btfss	status,0,c
  1789  00088A  D01E               	goto	l432
  1790  00088C                     u3160:
  1791                           
  1792                           ; BSR set to: 1
  1793                           ;main.c: 269: T0CONbits.TMR0ON=1;
  1794  00088C  8ED5               	bsf	4053,7,c	;volatile
  1795                           
  1796                           ; BSR set to: 1
  1797                           ;main.c: 270: turnRight(&mL,&mR,40);
  1798  00088E  0ED0               	movlw	low main@mL
  1799  000890  0100               	movlb	0	; () banked
  1800  000892  6F77               	movwf	turnRight@mL& (0+255),b
  1801  000894  0E01               	movlw	high main@mL
  1802  000896  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1803  000898  0ED9               	movlw	low main@mR
  1804  00089A  6F79               	movwf	turnRight@mR& (0+255),b
  1805  00089C  0E01               	movlw	high main@mR
  1806  00089E  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1807  0008A0  0E28               	movlw	40
  1808  0008A2  6F7B               	movwf	turnRight@power& (0+255),b
  1809  0008A4  EC15  F00D         	call	_turnRight	;wreg free
  1810  0008A8  0101               	movlb	1	; () banked
  1811  0008AA  51CF               	movf	main@Move& (0+255),w,b
  1812  0008AC  0D02               	mullw	2
  1813  0008AE  0E5A               	movlw	low main@MoveTime
  1814  0008B0  24F3               	addwf	prodl,w,c
  1815  0008B2  6ED9               	movwf	fsr2l,c
  1816  0008B4  0E01               	movlw	high main@MoveTime
  1817  0008B6  20F4               	addwfc	prodh,w,c
  1818  0008B8  6EDA               	movwf	fsr2h,c
  1819  0008BA  50DE               	movf	postinc2,w,c
  1820  0008BC  5DF6               	subwf	_millis& (0+255),w,b	;volatile
  1821  0008BE  50DE               	movf	postinc2,w,c
  1822  0008C0  59F7               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1823  0008C2  A0D8               	btfss	status,0,c
  1824  0008C4  D7F1               	goto	l434
  1825  0008C6  D029               	goto	u3180
  1826  0008C8                     l432:
  1827                           
  1828                           ; BSR set to: 1
  1829                           ;main.c: 275: T0CONbits.TMR0ON=1;
  1830  0008C8  8ED5               	bsf	4053,7,c	;volatile
  1831                           
  1832                           ; BSR set to: 1
  1833                           ;main.c: 276: turnLeft(&mL,&mR,40);
  1834  0008CA  0ED0               	movlw	low main@mL
  1835  0008CC  0100               	movlb	0	; () banked
  1836  0008CE  6F77               	movwf	turnLeft@mL& (0+255),b
  1837  0008D0  0E01               	movlw	high main@mL
  1838  0008D2  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1839  0008D4  0ED9               	movlw	low main@mR
  1840  0008D6  6F79               	movwf	turnLeft@mR& (0+255),b
  1841  0008D8  0E01               	movlw	high main@mR
  1842  0008DA  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1843  0008DC  0E28               	movlw	40
  1844  0008DE  6F7B               	movwf	turnLeft@power& (0+255),b
  1845  0008E0  EC33  F00D         	call	_turnLeft	;wreg free
  1846  0008E4  0101               	movlb	1	; () banked
  1847  0008E6  51CF               	movf	main@Move& (0+255),w,b
  1848  0008E8  0D02               	mullw	2
  1849  0008EA  0E5A               	movlw	low main@MoveTime
  1850  0008EC  24F3               	addwf	prodl,w,c
  1851  0008EE  6ED9               	movwf	fsr2l,c
  1852  0008F0  0E01               	movlw	high main@MoveTime
  1853  0008F2  20F4               	addwfc	prodh,w,c
  1854  0008F4  6EDA               	movwf	fsr2h,c
  1855  0008F6  CFDE F0C9          	movff	postinc2,??_main
  1856  0008FA  CFDD F0CA          	movff	postdec2,??_main+1
  1857  0008FE  0100               	movlb	0	; () banked
  1858  000900  1FC9               	comf	??_main& (0+255),f,b
  1859  000902  1FCA               	comf	(??_main+1)& (0+255),f,b
  1860  000904  4BC9               	infsnz	??_main& (0+255),f,b
  1861  000906  2BCA               	incf	(??_main+1)& (0+255),f,b
  1862  000908  51C9               	movf	??_main& (0+255),w,b
  1863  00090A  0101               	movlb	1	; () banked
  1864  00090C  5DF6               	subwf	_millis& (0+255),w,b	;volatile
  1865  00090E  0100               	movlb	0	; () banked
  1866  000910  51CA               	movf	(??_main+1)& (0+255),w,b
  1867  000912  0101               	movlb	1	; () banked
  1868  000914  59F7               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1869  000916  A0D8               	btfss	status,0,c
  1870  000918  D7E5               	goto	l438
  1871  00091A                     u3180:
  1872                           
  1873                           ; BSR set to: 1
  1874                           ;main.c: 279: T0CONbits.TMR0ON=0;
  1875  00091A  9ED5               	bcf	4053,7,c	;volatile
  1876                           
  1877                           ; BSR set to: 1
  1878                           ;main.c: 280: }
  1879                           ;main.c: 281: } else if (MoveType[Move]==2) {
  1880  00091C  D050               	goto	l443
  1881  00091E                     l431:
  1882                           
  1883                           ; BSR set to: 1
  1884                           
  1885                           ; BSR set to: 1
  1886  00091E  51CF               	movf	main@Move& (0+255),w,b
  1887  000920  0D01               	mullw	1
  1888  000922  0E28               	movlw	low main@MoveType
  1889  000924  24F3               	addwf	prodl,w,c
  1890  000926  6ED9               	movwf	fsr2l,c
  1891  000928  0E01               	movlw	high main@MoveType
  1892  00092A  20F4               	addwfc	prodh,w,c
  1893  00092C  6EDA               	movwf	fsr2h,c
  1894  00092E  0E02               	movlw	2
  1895  000930  18DE               	xorwf	postinc2,w,c
  1896  000932  A4D8               	btfss	status,2,c
  1897  000934  D044               	goto	l443
  1898                           
  1899                           ; BSR set to: 1
  1900                           ;main.c: 282: if (MoveTime[Move]>0) {
  1901  000936  51CF               	movf	main@Move& (0+255),w,b
  1902  000938  0D02               	mullw	2
  1903  00093A  0E5A               	movlw	low main@MoveTime
  1904  00093C  24F3               	addwf	prodl,w,c
  1905  00093E  6ED9               	movwf	fsr2l,c
  1906  000940  0E01               	movlw	high main@MoveTime
  1907  000942  20F4               	addwfc	prodh,w,c
  1908  000944  6EDA               	movwf	fsr2h,c
  1909  000946  0E01               	movlw	1
  1910  000948  BEDB               	btfsc	plusw2,7,c
  1911  00094A  D020               	goto	l442
  1912  00094C  0E01               	movlw	1
  1913  00094E  50DB               	movf	plusw2,w,c
  1914  000950  E103               	bnz	u3200
  1915  000952  04DE               	decf	postinc2,w,c
  1916  000954  A0D8               	btfss	status,0,c
  1917  000956  D01A               	goto	l442
  1918  000958                     u3200:
  1919                           
  1920                           ; BSR set to: 1
  1921                           ;main.c: 283: turnRight(&mL,&mR,78);
  1922  000958  0ED0               	movlw	low main@mL
  1923  00095A  0100               	movlb	0	; () banked
  1924  00095C  6F77               	movwf	turnRight@mL& (0+255),b
  1925  00095E  0E01               	movlw	high main@mL
  1926  000960  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1927  000962  0ED9               	movlw	low main@mR
  1928  000964  6F79               	movwf	turnRight@mR& (0+255),b
  1929  000966  0E01               	movlw	high main@mR
  1930  000968  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1931  00096A  0E4E               	movlw	78
  1932  00096C  6F7B               	movwf	turnRight@power& (0+255),b
  1933  00096E  EC15  F00D         	call	_turnRight	;wreg free
  1934                           
  1935                           ;main.c: 285: delay_tenth_s(MoveTime[Move]);
  1936  000972  0101               	movlb	1	; () banked
  1937  000974  51CF               	movf	main@Move& (0+255),w,b
  1938  000976  0D02               	mullw	2
  1939  000978  0E5A               	movlw	low main@MoveTime
  1940  00097A  24F3               	addwf	prodl,w,c
  1941  00097C  6ED9               	movwf	fsr2l,c
  1942  00097E  0E01               	movlw	high main@MoveTime
  1943  000980  20F4               	addwfc	prodh,w,c
  1944  000982  6EDA               	movwf	fsr2h,c
  1945  000984  50DF               	movf	indf2,w,c
  1946  000986  EC6E  F00D         	call	_delay_tenth_s
  1947                           
  1948                           ;main.c: 286: } else {
  1949  00098A  D019               	goto	l443
  1950  00098C                     l442:
  1951                           
  1952                           ;main.c: 287: turnLeft(&mL,&mR,100);
  1953  00098C  0ED0               	movlw	low main@mL
  1954  00098E  0100               	movlb	0	; () banked
  1955  000990  6F77               	movwf	turnLeft@mL& (0+255),b
  1956  000992  0E01               	movlw	high main@mL
  1957  000994  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1958  000996  0ED9               	movlw	low main@mR
  1959  000998  6F79               	movwf	turnLeft@mR& (0+255),b
  1960  00099A  0E01               	movlw	high main@mR
  1961  00099C  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1962  00099E  0E64               	movlw	100
  1963  0009A0  6F7B               	movwf	turnLeft@power& (0+255),b
  1964  0009A2  EC33  F00D         	call	_turnLeft	;wreg free
  1965                           
  1966                           ;main.c: 288: delay_tenth_s(MoveTime[Move]);
  1967  0009A6  0101               	movlb	1	; () banked
  1968  0009A8  51CF               	movf	main@Move& (0+255),w,b
  1969  0009AA  0D02               	mullw	2
  1970  0009AC  0E5A               	movlw	low main@MoveTime
  1971  0009AE  24F3               	addwf	prodl,w,c
  1972  0009B0  6ED9               	movwf	fsr2l,c
  1973  0009B2  0E01               	movlw	high main@MoveTime
  1974  0009B4  20F4               	addwfc	prodh,w,c
  1975  0009B6  6EDA               	movwf	fsr2h,c
  1976  0009B8  50DF               	movf	indf2,w,c
  1977  0009BA  EC6E  F00D         	call	_delay_tenth_s
  1978  0009BE                     l443:
  1979                           
  1980                           ;main.c: 289: }
  1981                           ;main.c: 290: }
  1982                           ;main.c: 291: if (mode==-1) {
  1983  0009BE  2832               	incf	_mode,w,c	;volatile
  1984  0009C0  B4D8               	btfsc	status,2,c
  1985  0009C2  D003               	goto	u3220
  1986                           
  1987                           ;main.c: 292: break;
  1988  0009C4  0101               	movlb	1	; () banked
  1989  0009C6  07CF               	decf	main@Move& (0+255),f,b
  1990  0009C8  D708               	goto	L3
  1991  0009CA                     u3220:
  1992                           
  1993                           ;main.c: 293: }
  1994                           ;main.c: 294: }
  1995                           ;main.c: 295: stop(&mL,&mR);
  1996                           
  1997                           ; BSR set to: 1
  1998  0009CA  0ED0               	movlw	low main@mL
  1999  0009CC  0100               	movlb	0	; () banked
  2000  0009CE  6F71               	movwf	stop@mL& (0+255),b
  2001  0009D0  0E01               	movlw	high main@mL
  2002  0009D2  6F72               	movwf	(stop@mL+1)& (0+255),b
  2003  0009D4  0ED9               	movlw	low main@mR
  2004  0009D6  6F73               	movwf	stop@mR& (0+255),b
  2005  0009D8  0E01               	movlw	high main@mR
  2006  0009DA  6F74               	movwf	(stop@mR+1)& (0+255),b
  2007  0009DC  EC0E  F00B         	call	_stop	;wreg free
  2008  0009E0                     l3725:
  2009                           
  2010                           ;main.c: 296: mode=-1;
  2011  0009E0  6832               	setf	_mode,c	;volatile
  2012  0009E2                     l3727:
  2013                           
  2014                           ;main.c: 299: }
  2015  0009E2  5032               	movf	_mode,w,c	;volatile
  2016                           
  2017                           ; Switch size 1, requested type "space"
  2018                           ; Number of cases is 5, Range of values is 0 to 255
  2019                           ; switch strategies available:
  2020                           ; Name         Instructions Cycles
  2021                           ; simple_byte           16     9 (average)
  2022                           ;	Chosen strategy is simple_byte
  2023  0009E4  0A00               	xorlw	0	; case 0
  2024  0009E6  B4D8               	btfsc	status,2,c
  2025  0009E8  D578               	goto	l407
  2026  0009EA  0A01               	xorlw	1	; case 1
  2027  0009EC  B4D8               	btfsc	status,2,c
  2028  0009EE  D59A               	goto	l408
  2029  0009F0  0A03               	xorlw	3	; case 2
  2030  0009F2  B4D8               	btfsc	status,2,c
  2031  0009F4  D621               	goto	l416
  2032  0009F6  0A01               	xorlw	1	; case 3
  2033  0009F8  B4D8               	btfsc	status,2,c
  2034  0009FA  D6DA               	goto	l426
  2035  0009FC  0AFC               	xorlw	252	; case 255
  2036  0009FE  B4D8               	btfsc	status,2,c
  2037  000A00  D4FD               	goto	l403
  2038  000A02  D7EF               	goto	l3727
  2039  000A04                     __end_of_main:
  2040                           	opt stack 0
  2041                           tblptru	equ	0xFF8
  2042                           prodh	equ	0xFF4
  2043                           prodl	equ	0xFF3
  2044                           intcon	equ	0xFF2
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           indf1	equ	0xFE7
  2048                           plusw1	equ	0xFE3
  2049                           fsr1h	equ	0xFE2
  2050                           fsr1l	equ	0xFE1
  2051                           indf2	equ	0xFDF
  2052                           postinc2	equ	0xFDE
  2053                           postdec2	equ	0xFDD
  2054                           plusw2	equ	0xFDB
  2055                           fsr2h	equ	0xFDA
  2056                           fsr2l	equ	0xFD9
  2057                           status	equ	0xFD8
  2058                           
  2059 ;; *************** function _initTimer *****************
  2060 ;; Defined at:
  2061 ;;		line 8 in file "Movement.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;		None
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2075 ;;      Params:         0       0       0       0
  2076 ;;      Locals:         0       0       0       0
  2077 ;;      Temps:          0       0       0       0
  2078 ;;      Totals:         0       0       0       0
  2079 ;;Total ram usage:        0 bytes
  2080 ;; Hardware stack levels used:    1
  2081 ;; Hardware stack levels required when called:    3
  2082 ;; This function calls:
  2083 ;;		Nothing
  2084 ;; This function is called by:
  2085 ;;		_main
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text1
  2090  001C90                     __ptext1:
  2091                           	opt stack 0
  2092  001C90                     _initTimer:
  2093                           	opt stack 27
  2094                           
  2095                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2096                           
  2097                           ;incstack = 0
  2098  001C90  9ED5               	bcf	4053,7,c	;volatile
  2099                           
  2100                           ;Movement.c: 11: T0CONbits.T016BIT=1;
  2101  001C92  8CD5               	bsf	4053,6,c	;volatile
  2102                           
  2103                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2104  001C94  9AD5               	bcf	4053,5,c	;volatile
  2105                           
  2106                           ;Movement.c: 13: T0CONbits.PSA=0;
  2107  001C96  96D5               	bcf	4053,3,c	;volatile
  2108                           
  2109                           ;Movement.c: 14: T0CONbits.T0PS=0b010;
  2110  001C98  50D5               	movf	4053,w,c	;volatile
  2111  001C9A  0BF8               	andlw	-8
  2112  001C9C  0902               	iorlw	2
  2113  001C9E  6ED5               	movwf	4053,c	;volatile
  2114                           
  2115                           ;Movement.c: 17: INTCONbits.TMR0IE=1;
  2116  001CA0  8AF2               	bsf	intcon,5,c	;volatile
  2117  001CA2  0012               	return		;funcret
  2118  001CA4                     __end_of_initTimer:
  2119                           	opt stack 0
  2120                           tblptru	equ	0xFF8
  2121                           prodh	equ	0xFF4
  2122                           prodl	equ	0xFF3
  2123                           intcon	equ	0xFF2
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           indf1	equ	0xFE7
  2127                           plusw1	equ	0xFE3
  2128                           fsr1h	equ	0xFE2
  2129                           fsr1l	equ	0xFE1
  2130                           indf2	equ	0xFDF
  2131                           postinc2	equ	0xFDE
  2132                           postdec2	equ	0xFDD
  2133                           plusw2	equ	0xFDB
  2134                           fsr2h	equ	0xFDA
  2135                           fsr2l	equ	0xFD9
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _initRFID *****************
  2139 ;; Defined at:
  2140 ;;		line 8 in file "RFID_Reader.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;		None
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;		None
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      void 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2154 ;;      Params:         0       0       0       0
  2155 ;;      Locals:         0       0       0       0
  2156 ;;      Temps:          0       0       0       0
  2157 ;;      Totals:         0       0       0       0
  2158 ;;Total ram usage:        0 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    3
  2161 ;; This function calls:
  2162 ;;		Nothing
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text2
  2169  001C74                     __ptext2:
  2170                           	opt stack 0
  2171  001C74                     _initRFID:
  2172                           	opt stack 27
  2173                           
  2174                           ;RFID_Reader.c: 9: TRISC = TRISC | 0b11000000;
  2175                           
  2176                           ;incstack = 0
  2177  001C74  5094               	movf	3988,w,c	;volatile
  2178  001C76  09C0               	iorlw	192
  2179  001C78  6E94               	movwf	3988,c	;volatile
  2180                           
  2181                           ;RFID_Reader.c: 13: SPBRG=205;
  2182  001C7A  0ECD               	movlw	205
  2183  001C7C  6EAF               	movwf	4015,c	;volatile
  2184                           
  2185                           ;RFID_Reader.c: 14: SPBRGH=0;
  2186  001C7E  0E00               	movlw	0
  2187  001C80  6EB0               	movwf	4016,c	;volatile
  2188                           
  2189                           ;RFID_Reader.c: 15: BAUDCONbits.BRG16=1;
  2190  001C82  86AA               	bsf	4010,3,c	;volatile
  2191                           
  2192                           ;RFID_Reader.c: 16: TXSTAbits.BRGH=1;
  2193  001C84  84AC               	bsf	4012,2,c	;volatile
  2194                           
  2195                           ;RFID_Reader.c: 17: RCSTAbits.CREN=1;
  2196  001C86  88AB               	bsf	4011,4,c	;volatile
  2197                           
  2198                           ;RFID_Reader.c: 18: RCSTAbits.SPEN=1;
  2199  001C88  8EAB               	bsf	4011,7,c	;volatile
  2200                           
  2201                           ;RFID_Reader.c: 19: TXSTAbits.SYNC=0;
  2202  001C8A  98AC               	bcf	4012,4,c	;volatile
  2203                           
  2204                           ;RFID_Reader.c: 20: RCSTAbits.RX9=0;
  2205  001C8C  9CAB               	bcf	4011,6,c	;volatile
  2206  001C8E  0012               	return		;funcret
  2207  001C90                     __end_of_initRFID:
  2208                           	opt stack 0
  2209                           tblptru	equ	0xFF8
  2210                           prodh	equ	0xFF4
  2211                           prodl	equ	0xFF3
  2212                           intcon	equ	0xFF2
  2213                           postinc0	equ	0xFEE
  2214                           wreg	equ	0xFE8
  2215                           indf1	equ	0xFE7
  2216                           plusw1	equ	0xFE3
  2217                           fsr1h	equ	0xFE2
  2218                           fsr1l	equ	0xFE1
  2219                           indf2	equ	0xFDF
  2220                           postinc2	equ	0xFDE
  2221                           postdec2	equ	0xFDD
  2222                           plusw2	equ	0xFDB
  2223                           fsr2h	equ	0xFDA
  2224                           fsr2l	equ	0xFD9
  2225                           status	equ	0xFD8
  2226                           
  2227 ;; *************** function _initMotorPWM *****************
  2228 ;; Defined at:
  2229 ;;		line 4 in file "dc_motor.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;		None
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, status,2
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2243 ;;      Params:         0       0       0       0
  2244 ;;      Locals:         0       0       0       0
  2245 ;;      Temps:          0       0       0       0
  2246 ;;      Totals:         0       0       0       0
  2247 ;;Total ram usage:        0 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; Hardware stack levels required when called:    3
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text3
  2258  001AA2                     __ptext3:
  2259                           	opt stack 0
  2260  001AA2                     _initMotorPWM:
  2261                           	opt stack 27
  2262                           
  2263                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2264                           
  2265                           ;incstack = 0
  2266  001AA2  0E00               	movlw	0
  2267  001AA4  6E7F               	movwf	3967,c	;volatile
  2268                           
  2269                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2270  001AA6  0E80               	movlw	128
  2271  001AA8  6E7E               	movwf	3966,c	;volatile
  2272                           
  2273                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2274  001AAA  0E6F               	movlw	111
  2275  001AAC  6E6F               	movwf	3951,c	;volatile
  2276                           
  2277                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2278  001AAE  0E00               	movlw	0
  2279  001AB0  6E6E               	movwf	3950,c	;volatile
  2280                           
  2281                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2282  001AB2  0EC7               	movlw	199
  2283  001AB4  6E7B               	movwf	3963,c	;volatile
  2284                           
  2285                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2286  001AB6  0E00               	movlw	0
  2287  001AB8  6E7A               	movwf	3962,c	;volatile
  2288                           
  2289                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2290  001ABA  0E00               	movlw	0
  2291  001ABC  6E79               	movwf	3961,c	;volatile
  2292                           
  2293                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2294  001ABE  0E00               	movlw	0
  2295  001AC0  6E78               	movwf	3960,c	;volatile
  2296                           
  2297                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2298  001AC2  0E00               	movlw	0
  2299  001AC4  6E77               	movwf	3959,c	;volatile
  2300                           
  2301                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2302  001AC6  0E00               	movlw	0
  2303  001AC8  6E76               	movwf	3958,c	;volatile
  2304                           
  2305                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2306  001ACA  9093               	bcf	3987,0,c	;volatile
  2307                           
  2308                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2309  001ACC  9293               	bcf	3987,1,c	;volatile
  2310                           
  2311                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2312  001ACE  9493               	bcf	3987,2,c	;volatile
  2313                           
  2314                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2315  001AD0  9693               	bcf	3987,3,c	;volatile
  2316                           
  2317                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2318  001AD2  908A               	bcf	3978,0,c	;volatile
  2319                           
  2320                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2321  001AD4  928A               	bcf	3978,1,c	;volatile
  2322                           
  2323                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2324  001AD6  948A               	bcf	3978,2,c	;volatile
  2325                           
  2326                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2327  001AD8  968A               	bcf	3978,3,c	;volatile
  2328  001ADA  0012               	return		;funcret
  2329  001ADC                     __end_of_initMotorPWM:
  2330                           	opt stack 0
  2331                           tblptru	equ	0xFF8
  2332                           prodh	equ	0xFF4
  2333                           prodl	equ	0xFF3
  2334                           intcon	equ	0xFF2
  2335                           postinc0	equ	0xFEE
  2336                           wreg	equ	0xFE8
  2337                           indf1	equ	0xFE7
  2338                           plusw1	equ	0xFE3
  2339                           fsr1h	equ	0xFE2
  2340                           fsr1l	equ	0xFE1
  2341                           indf2	equ	0xFDF
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           plusw2	equ	0xFDB
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function _initLCD *****************
  2350 ;; Defined at:
  2351 ;;		line 38 in file "LCD.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;		None
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;		None
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2365 ;;      Params:         0       0       0       0
  2366 ;;      Locals:         0       0       0       0
  2367 ;;      Temps:          0       1       0       0
  2368 ;;      Totals:         0       1       0       0
  2369 ;;Total ram usage:        1 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    6
  2372 ;; This function calls:
  2373 ;;		_LCDout
  2374 ;;		_SendLCD
  2375 ;; This function is called by:
  2376 ;;		_main
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text4
  2381  00149A                     __ptext4:
  2382                           	opt stack 0
  2383  00149A                     _initLCD:
  2384                           	opt stack 24
  2385                           
  2386                           ;LCD.c: 44: TRISAbits.RA6=0;
  2387                           
  2388                           ;incstack = 0
  2389  00149A  9C92               	bcf	3986,6,c	;volatile
  2390                           
  2391                           ;LCD.c: 45: TRISCbits.RC0=0;
  2392  00149C  9094               	bcf	3988,0,c	;volatile
  2393                           
  2394                           ;LCD.c: 46: TRISCbits.RC1=0;
  2395  00149E  9294               	bcf	3988,1,c	;volatile
  2396                           
  2397                           ;LCD.c: 47: TRISCbits.RC2=0;
  2398  0014A0  9494               	bcf	3988,2,c	;volatile
  2399                           
  2400                           ;LCD.c: 48: TRISDbits.RD0=0;
  2401  0014A2  9095               	bcf	3989,0,c	;volatile
  2402                           
  2403                           ;LCD.c: 49: TRISDbits.RD1=0;
  2404  0014A4  9295               	bcf	3989,1,c	;volatile
  2405                           
  2406                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2407  0014A6  0E27               	movlw	39
  2408  0014A8  0100               	movlb	0	; () banked
  2409  0014AA  6F60               	movwf	??_initLCD& (0+255),b
  2410  0014AC  0EF5               	movlw	245
  2411  0014AE                     u3257:
  2412  0014AE  2EE8               	decfsz	wreg,f,c
  2413  0014B0  D7FE               	bra	u3257
  2414  0014B2  2F60               	decfsz	??_initLCD& (0+255),f,b
  2415  0014B4  D7FC               	bra	u3257
  2416                           
  2417                           ;LCD.c: 52: LCDout(0b0011);
  2418  0014B6  0E03               	movlw	3
  2419  0014B8  ECEA  F009         	call	_LCDout
  2420                           
  2421                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2422  0014BC  0E0D               	movlw	13
  2423  0014BE  0100               	movlb	0	; () banked
  2424  0014C0  6F60               	movwf	??_initLCD& (0+255),b
  2425  0014C2  0EFB               	movlw	251
  2426  0014C4                     u3267:
  2427  0014C4  2EE8               	decfsz	wreg,f,c
  2428  0014C6  D7FE               	bra	u3267
  2429  0014C8  2F60               	decfsz	??_initLCD& (0+255),f,b
  2430  0014CA  D7FC               	bra	u3267
  2431  0014CC  D000               	nop2	
  2432                           
  2433                           ;LCD.c: 54: LCDout(0b0011);
  2434  0014CE  0E03               	movlw	3
  2435  0014D0  ECEA  F009         	call	_LCDout
  2436                           
  2437                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2438  0014D4  0E85               	movlw	133
  2439  0014D6                     u3277:
  2440  0014D6  2EE8               	decfsz	wreg,f,c
  2441  0014D8  D7FE               	bra	u3277
  2442  0014DA  F000               	nop	
  2443                           
  2444                           ;LCD.c: 56: LCDout(0b0011);
  2445  0014DC  0E03               	movlw	3
  2446  0014DE  ECEA  F009         	call	_LCDout
  2447                           
  2448                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2449  0014E2  0E21               	movlw	33
  2450  0014E4                     u3287:
  2451  0014E4  2EE8               	decfsz	wreg,f,c
  2452  0014E6  D7FE               	bra	u3287
  2453  0014E8  F000               	nop	
  2454                           
  2455                           ;LCD.c: 58: LCDout(0b0010);
  2456  0014EA  0E02               	movlw	2
  2457  0014EC  ECEA  F009         	call	_LCDout
  2458                           
  2459                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2460  0014F0  0E21               	movlw	33
  2461  0014F2                     u3297:
  2462  0014F2  2EE8               	decfsz	wreg,f,c
  2463  0014F4  D7FE               	bra	u3297
  2464  0014F6  F000               	nop	
  2465                           
  2466                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2467  0014F8  0E00               	movlw	0
  2468  0014FA  6E30               	movwf	SendLCD@type,c
  2469  0014FC  0E28               	movlw	40
  2470  0014FE  ECDC  F00D         	call	_SendLCD
  2471                           
  2472                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2473  001502  0E21               	movlw	33
  2474  001504                     u3307:
  2475  001504  2EE8               	decfsz	wreg,f,c
  2476  001506  D7FE               	bra	u3307
  2477  001508  F000               	nop	
  2478                           
  2479                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2480  00150A  0E00               	movlw	0
  2481  00150C  6E30               	movwf	SendLCD@type,c
  2482  00150E  0E08               	movlw	8
  2483  001510  ECDC  F00D         	call	_SendLCD
  2484                           
  2485                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2486  001514  0E21               	movlw	33
  2487  001516                     u3317:
  2488  001516  2EE8               	decfsz	wreg,f,c
  2489  001518  D7FE               	bra	u3317
  2490  00151A  F000               	nop	
  2491                           
  2492                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2493  00151C  0E00               	movlw	0
  2494  00151E  6E30               	movwf	SendLCD@type,c
  2495  001520  0E01               	movlw	1
  2496  001522  ECDC  F00D         	call	_SendLCD
  2497                           
  2498                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2499  001526  0E0D               	movlw	13
  2500  001528  0100               	movlb	0	; () banked
  2501  00152A  6F60               	movwf	??_initLCD& (0+255),b
  2502  00152C  0EFB               	movlw	251
  2503  00152E                     u3327:
  2504  00152E  2EE8               	decfsz	wreg,f,c
  2505  001530  D7FE               	bra	u3327
  2506  001532  2F60               	decfsz	??_initLCD& (0+255),f,b
  2507  001534  D7FC               	bra	u3327
  2508  001536  D000               	nop2	
  2509                           
  2510                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2511  001538  0E00               	movlw	0
  2512  00153A  6E30               	movwf	SendLCD@type,c
  2513  00153C  0E06               	movlw	6
  2514  00153E  ECDC  F00D         	call	_SendLCD
  2515                           
  2516                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2517  001542  0E21               	movlw	33
  2518  001544                     u3337:
  2519  001544  2EE8               	decfsz	wreg,f,c
  2520  001546  D7FE               	bra	u3337
  2521  001548  F000               	nop	
  2522                           
  2523                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2524  00154A  0E00               	movlw	0
  2525  00154C  6E30               	movwf	SendLCD@type,c
  2526  00154E  0E0C               	movlw	12
  2527  001550  ECDC  F00D         	call	_SendLCD
  2528                           
  2529                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2530  001554  0E21               	movlw	33
  2531  001556                     u3347:
  2532  001556  2EE8               	decfsz	wreg,f,c
  2533  001558  D7FE               	bra	u3347
  2534  00155A  F000               	nop	
  2535  00155C  0012               	return		;funcret
  2536  00155E                     __end_of_initLCD:
  2537                           	opt stack 0
  2538                           tblptru	equ	0xFF8
  2539                           prodh	equ	0xFF4
  2540                           prodl	equ	0xFF3
  2541                           intcon	equ	0xFF2
  2542                           postinc0	equ	0xFEE
  2543                           wreg	equ	0xFE8
  2544                           indf1	equ	0xFE7
  2545                           plusw1	equ	0xFE3
  2546                           fsr1h	equ	0xFE2
  2547                           fsr1l	equ	0xFE1
  2548                           indf2	equ	0xFDF
  2549                           postinc2	equ	0xFDE
  2550                           postdec2	equ	0xFDD
  2551                           plusw2	equ	0xFDB
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8
  2555                           
  2556 ;; *************** function _initIR *****************
  2557 ;; Defined at:
  2558 ;;		line 30 in file "IR_Reading.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;		None
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg, status,2
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2572 ;;      Params:         0       0       0       0
  2573 ;;      Locals:         0       0       0       0
  2574 ;;      Temps:          0       0       0       0
  2575 ;;      Totals:         0       0       0       0
  2576 ;;Total ram usage:        0 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    3
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_main
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text5
  2587  001C34                     __ptext5:
  2588                           	opt stack 0
  2589  001C34                     _initIR:
  2590                           	opt stack 27
  2591                           
  2592                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2593                           
  2594                           ;incstack = 0
  2595  001C34  9489               	bcf	3977,2,c	;volatile
  2596                           
  2597                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2598  001C36  9689               	bcf	3977,3,c	;volatile
  2599                           
  2600                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2601  001C38  8492               	bsf	3986,2,c	;volatile
  2602                           
  2603                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2604  001C3A  8692               	bsf	3986,3,c	;volatile
  2605                           
  2606                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2607  001C3C  94B8               	bcf	4024,2,c	;volatile
  2608                           
  2609                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2610  001C3E  96B8               	bcf	4024,3,c	;volatile
  2611                           
  2612                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2613  001C40  9CB8               	bcf	4024,6,c	;volatile
  2614                           
  2615                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2616  001C42  9EB8               	bcf	4024,7,c	;volatile
  2617                           
  2618                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2619  001C44  0E06               	movlw	6
  2620  001C46  6E63               	movwf	3939,c	;volatile
  2621                           
  2622                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2623  001C48  0E06               	movlw	6
  2624  001C4A  6E62               	movwf	3938,c	;volatile
  2625                           
  2626                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2627  001C4C  9096               	bcf	3990,0,c	;volatile
  2628                           
  2629                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2630  001C4E  9296               	bcf	3990,1,c	;volatile
  2631                           
  2632                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2633  001C50  0E59               	movlw	89
  2634  001C52  6EB7               	movwf	4023,c	;volatile
  2635  001C54  0012               	return		;funcret
  2636  001C56                     __end_of_initIR:
  2637                           	opt stack 0
  2638                           tblptru	equ	0xFF8
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           intcon	equ	0xFF2
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           indf1	equ	0xFE7
  2645                           plusw1	equ	0xFE3
  2646                           fsr1h	equ	0xFE2
  2647                           fsr1l	equ	0xFE1
  2648                           indf2	equ	0xFDF
  2649                           postinc2	equ	0xFDE
  2650                           postdec2	equ	0xFDD
  2651                           plusw2	equ	0xFDB
  2652                           fsr2h	equ	0xFDA
  2653                           fsr2l	equ	0xFD9
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function _fullSpeedBack *****************
  2657 ;; Defined at:
  2658 ;;		line 138 in file "dc_motor.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  2661 ;;		 -> main@mL(9), 
  2662 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  2663 ;;		 -> main@mR(9), 
  2664 ;;  power           1   27[BANK0 ] unsigned char 
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;		None
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2676 ;;      Params:         0       5       0       0
  2677 ;;      Locals:         0       0       0       0
  2678 ;;      Temps:          0       0       0       0
  2679 ;;      Totals:         0       5       0       0
  2680 ;;Total ram usage:        5 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    6
  2683 ;; This function calls:
  2684 ;;		_fullSpeed
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text6
  2691  0019EE                     __ptext6:
  2692                           	opt stack 0
  2693  0019EE                     _fullSpeedBack:
  2694                           	opt stack 24
  2695                           
  2696                           ;dc_motor.c: 141: mL->direction=0;
  2697                           
  2698                           ;incstack = 0
  2699  0019EE  0100               	movlb	0	; () banked
  2700  0019F0  EE20 F001          	lfsr	2,1
  2701  0019F4  5177               	movf	fullSpeedBack@mL& (0+255),w,b
  2702  0019F6  26D9               	addwf	fsr2l,f,c
  2703  0019F8  5178               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2704  0019FA  22DA               	addwfc	fsr2h,f,c
  2705  0019FC  0E00               	movlw	0
  2706  0019FE  6EDF               	movwf	indf2,c
  2707                           
  2708                           ;dc_motor.c: 142: mR->direction=0;
  2709  001A00  EE20 F001          	lfsr	2,1
  2710  001A04  5179               	movf	fullSpeedBack@mR& (0+255),w,b
  2711  001A06  26D9               	addwf	fsr2l,f,c
  2712  001A08  517A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2713  001A0A  22DA               	addwfc	fsr2h,f,c
  2714  001A0C  0E00               	movlw	0
  2715  001A0E  6EDF               	movwf	indf2,c
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2719  001A10  C077  F071         	movff	fullSpeedBack@mL,fullSpeed@mL
  2720  001A14  C078  F072         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2721  001A18  C079  F073         	movff	fullSpeedBack@mR,fullSpeed@mR
  2722  001A1C  C07A  F074         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2723  001A20  C07B  F075         	movff	fullSpeedBack@power,fullSpeed@power
  2724  001A24  EC9A  F00B         	call	_fullSpeed	;wreg free
  2725  001A28  0012               	return		;funcret
  2726  001A2A                     __end_of_fullSpeedBack:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon	equ	0xFF2
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           indf1	equ	0xFE7
  2735                           plusw1	equ	0xFE3
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           indf2	equ	0xFDF
  2739                           postinc2	equ	0xFDE
  2740                           postdec2	equ	0xFDD
  2741                           plusw2	equ	0xFDB
  2742                           fsr2h	equ	0xFDA
  2743                           fsr2l	equ	0xFD9
  2744                           status	equ	0xFD8
  2745                           
  2746 ;; *************** function _enableSensor *****************
  2747 ;; Defined at:
  2748 ;;		line 106 in file "IR_Reading.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  sensor          1    wreg     unsigned char 
  2751 ;;  status          1   43[COMRAM] unsigned char 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  sensor          1   44[COMRAM] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  1    wreg      void 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2763 ;;      Params:         1       0       0       0
  2764 ;;      Locals:         1       0       0       0
  2765 ;;      Temps:          0       0       0       0
  2766 ;;      Totals:         2       0       0       0
  2767 ;;Total ram usage:        2 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    3
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_main
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text7
  2778  001BE8                     __ptext7:
  2779                           	opt stack 0
  2780  001BE8                     _enableSensor:
  2781                           	opt stack 27
  2782                           
  2783                           ;incstack = 0
  2784                           ;enableSensor@sensor stored from wreg
  2785  001BE8  6E2D               	movwf	enableSensor@sensor,c
  2786                           
  2787                           ;IR_Reading.c: 108: if (sensor==0){
  2788  001BEA  502D               	movf	enableSensor@sensor,w,c
  2789  001BEC  A4D8               	btfss	status,2,c
  2790  001BEE  D006               	goto	l120
  2791                           
  2792                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2793  001BF0  B02C               	btfsc	enableSensor@status,0,c
  2794  001BF2  D002               	bra	u1845
  2795  001BF4  908D               	bcf	3981,0,c	;volatile
  2796  001BF6  D001               	bra	u1846
  2797  001BF8                     u1845:
  2798  001BF8  808D               	bsf	3981,0,c	;volatile
  2799  001BFA                     u1846:
  2800                           
  2801                           ;IR_Reading.c: 110: } else if (sensor==1){
  2802  001BFA  0012               	return	
  2803  001BFC                     l120:
  2804  001BFC  042D               	decf	enableSensor@sensor,w,c
  2805  001BFE  A4D8               	btfss	status,2,c
  2806  001C00  0012               	return	
  2807                           
  2808                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2809  001C02  B02C               	btfsc	enableSensor@status,0,c
  2810  001C04  D002               	bra	u1865
  2811  001C06  928D               	bcf	3981,1,c	;volatile
  2812  001C08  D001               	bra	u1866
  2813  001C0A                     u1865:
  2814  001C0A  828D               	bsf	3981,1,c	;volatile
  2815  001C0C                     u1866:
  2816  001C0C  0012               	return	
  2817  001C0E                     __end_of_enableSensor:
  2818                           	opt stack 0
  2819                           tblptru	equ	0xFF8
  2820                           prodh	equ	0xFF4
  2821                           prodl	equ	0xFF3
  2822                           intcon	equ	0xFF2
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           indf1	equ	0xFE7
  2826                           plusw1	equ	0xFE3
  2827                           fsr1h	equ	0xFE2
  2828                           fsr1l	equ	0xFE1
  2829                           indf2	equ	0xFDF
  2830                           postinc2	equ	0xFDE
  2831                           postdec2	equ	0xFDD
  2832                           plusw2	equ	0xFDB
  2833                           fsr2h	equ	0xFDA
  2834                           fsr2l	equ	0xFD9
  2835                           status	equ	0xFD8
  2836                           
  2837 ;; *************** function _VerifySignal *****************
  2838 ;; Defined at:
  2839 ;;		line 53 in file "RFID_Reader.c"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;  Signal          2   43[COMRAM] PTR unsigned char 
  2842 ;;		 -> ReceivedString(16), 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;  ptr             3    0        PTR unsigned char 
  2845 ;;  hexByte         2    2[BANK0 ] unsigned int 
  2846 ;;  checksum        1    1[BANK0 ] unsigned char 
  2847 ;;  i               1    0[BANK0 ] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      unsigned char 
  2850 ;; Registers used:
  2851 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2857 ;;      Params:         2       0       0       0
  2858 ;;      Locals:         0       4       0       0
  2859 ;;      Temps:          4       0       0       0
  2860 ;;      Totals:         6       4       0       0
  2861 ;;Total ram usage:       10 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    3
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_main
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           	psect	text8
  2872  0018FC                     __ptext8:
  2873                           	opt stack 0
  2874  0018FC                     _VerifySignal:
  2875                           	opt stack 27
  2876                           
  2877                           ;RFID_Reader.c: 54: unsigned char checksum=0;
  2878                           
  2879                           ;incstack = 0
  2880  0018FC  0E00               	movlw	0
  2881  0018FE  0100               	movlb	0	; () banked
  2882  001900  6F61               	movwf	VerifySignal@checksum& (0+255),b
  2883                           
  2884                           ;RFID_Reader.c: 55: unsigned int hexByte=0;
  2885  001902  0E00               	movlw	0
  2886  001904  6F63               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2887  001906  0E00               	movlw	0
  2888  001908  6F62               	movwf	VerifySignal@hexByte& (0+255),b
  2889                           
  2890                           ;RFID_Reader.c: 56: unsigned char i=0;
  2891  00190A  0E00               	movlw	0
  2892  00190C  6F60               	movwf	VerifySignal@i& (0+255),b
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;RFID_Reader.c: 57: unsigned char *ptr;
  2896                           ;RFID_Reader.c: 60: hexByte = (Signal[3]<<8) + Signal[4];
  2897  00190E  EE20 F004          	lfsr	2,4
  2898  001912  502C               	movf	VerifySignal@Signal,w,c
  2899  001914  26D9               	addwf	fsr2l,f,c
  2900  001916  502D               	movf	VerifySignal@Signal+1,w,c
  2901  001918  22DA               	addwfc	fsr2h,f,c
  2902  00191A  50DF               	movf	indf2,w,c
  2903  00191C  6E2E               	movwf	??_VerifySignal& (0+255),c
  2904  00191E  EE20 F003          	lfsr	2,3
  2905  001922  502C               	movf	VerifySignal@Signal,w,c
  2906  001924  26D9               	addwf	fsr2l,f,c
  2907  001926  502D               	movf	VerifySignal@Signal+1,w,c
  2908  001928  22DA               	addwfc	fsr2h,f,c
  2909  00192A  50DF               	movf	indf2,w,c
  2910  00192C  6E2F               	movwf	(??_VerifySignal+1)& (0+255),c
  2911  00192E  502F               	movf	??_VerifySignal+1,w,c
  2912  001930  6E31               	movwf	(??_VerifySignal+3)& (0+255),c
  2913  001932  6A30               	clrf	(??_VerifySignal+2)& (0+255),c
  2914  001934  502E               	movf	??_VerifySignal,w,c
  2915  001936  2430               	addwf	??_VerifySignal+2,w,c
  2916  001938  6F62               	movwf	VerifySignal@hexByte& (0+255),b
  2917  00193A  0E00               	movlw	0
  2918  00193C  2031               	addwfc	??_VerifySignal+3,w,c
  2919  00193E  6F63               	movwf	(VerifySignal@hexByte+1)& (0+255),b
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;RFID_Reader.c: 61: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2923  001940  EE20 F002          	lfsr	2,2
  2924  001944  502C               	movf	VerifySignal@Signal,w,c
  2925  001946  26D9               	addwf	fsr2l,f,c
  2926  001948  502D               	movf	VerifySignal@Signal+1,w,c
  2927  00194A  22DA               	addwfc	fsr2h,f,c
  2928  00194C  50DF               	movf	indf2,w,c
  2929  00194E  1962               	xorwf	VerifySignal@hexByte& (0+255),w,b
  2930  001950  6F61               	movwf	VerifySignal@checksum& (0+255),b
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;RFID_Reader.c: 70: return 1;
  2934  001952  0E01               	movlw	1
  2935  001954  0012               	return	
  2936  001956                     __end_of_VerifySignal:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           prodh	equ	0xFF4
  2940                           prodl	equ	0xFF3
  2941                           intcon	equ	0xFF2
  2942                           postinc0	equ	0xFEE
  2943                           wreg	equ	0xFE8
  2944                           indf1	equ	0xFE7
  2945                           plusw1	equ	0xFE3
  2946                           fsr1h	equ	0xFE2
  2947                           fsr1l	equ	0xFE1
  2948                           indf2	equ	0xFDF
  2949                           postinc2	equ	0xFDE
  2950                           postdec2	equ	0xFDD
  2951                           plusw2	equ	0xFDB
  2952                           fsr2h	equ	0xFDA
  2953                           fsr2l	equ	0xFD9
  2954                           status	equ	0xFD8
  2955                           
  2956 ;; *************** function _ScanWithRange *****************
  2957 ;; Defined at:
  2958 ;;		line 98 in file "Movement.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  2961 ;;		 -> main@mL(9), 
  2962 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  2963 ;;		 -> main@mR(9), 
  2964 ;;  loops           2   32[BANK0 ] int 
  2965 ;;  MoveTime        2   34[BANK0 ] PTR int 
  2966 ;;		 -> main@MoveTime(100), 
  2967 ;;  Move            2   36[BANK0 ] PTR unsigned char 
  2968 ;;		 -> main@Move(1), 
  2969 ;;  MoveType        2   38[BANK0 ] PTR unsigned char 
  2970 ;;		 -> main@MoveType(50), 
  2971 ;;  RFID_Read       2   40[BANK0 ] PTR unsigned char 
  2972 ;;		 -> RFID_Read(1), 
  2973 ;;  millis          2   42[BANK0 ] PTR unsigned int 
  2974 ;;		 -> millis(2), 
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;  buf            40   48[BANK0 ] unsigned char [40]
  2977 ;;  SensorResult    4   98[BANK0 ] unsigned int [2]
  2978 ;;  RightFlag       2  103[BANK0 ] unsigned int 
  2979 ;;  TimeAboveThr    2   96[BANK0 ] unsigned int 
  2980 ;;  LeftFlag        2   94[BANK0 ] unsigned int 
  2981 ;;  DirectionFou    2   90[BANK0 ] const unsigned int 
  2982 ;;  i               2   88[BANK0 ] unsigned int 
  2983 ;;  LeftFlick       1  102[BANK0 ] const char 
  2984 ;;  MiniLeftFlic    1   93[BANK0 ] const unsigned char 
  2985 ;;  MotorPower      1   92[BANK0 ] const unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  1    wreg      unsigned char 
  2988 ;; Registers used:
  2989 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2995 ;;      Params:         0      16       0       0
  2996 ;;      Locals:         0      57       0       0
  2997 ;;      Temps:          0       4       0       0
  2998 ;;      Totals:         0      77       0       0
  2999 ;;Total ram usage:       77 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; Hardware stack levels required when called:    7
  3002 ;; This function calls:
  3003 ;;		_LCD_String
  3004 ;;		_SendLCD
  3005 ;;		_SetLine
  3006 ;;		_delay_tenth_s
  3007 ;;		_grabLeftIR
  3008 ;;		_grabRightIR
  3009 ;;		_sprintf
  3010 ;;		_stop
  3011 ;;		_turnLeft
  3012 ;;		_turnRight
  3013 ;; This function is called by:
  3014 ;;		_main
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text9
  3019  000A04                     __ptext9:
  3020                           	opt stack 0
  3021  000A04                     _ScanWithRange:
  3022                           	opt stack 23
  3023                           
  3024                           ;Movement.c: 103: unsigned int SensorResult[2]={0,0};
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;incstack = 0
  3028  000A04  C0CB  F0C2         	movff	ScanWithRange@F3555,ScanWithRange@SensorResult
  3029  000A08  C0CC  F0C3         	movff	ScanWithRange@F3555+1,ScanWithRange@SensorResult+1
  3030  000A0C  C0CD  F0C4         	movff	ScanWithRange@F3555+2,ScanWithRange@SensorResult+2
  3031  000A10  C0CE  F0C5         	movff	ScanWithRange@F3555+3,ScanWithRange@SensorResult+3
  3032                           
  3033                           ;Movement.c: 104: unsigned int LeftFlag=0;
  3034  000A14  0E00               	movlw	0
  3035  000A16  0100               	movlb	0	; () banked
  3036  000A18  6FBF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3037  000A1A  0E00               	movlw	0
  3038  000A1C  6FBE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3039                           
  3040                           ;Movement.c: 105: unsigned int RightFlag=0;
  3041  000A1E  0E00               	movlw	0
  3042  000A20  6FC8               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3043  000A22  0E00               	movlw	0
  3044  000A24  6FC7               	movwf	ScanWithRange@RightFlag& (0+255),b
  3045                           
  3046                           ;Movement.c: 106: char buf[40];
  3047                           ;Movement.c: 107: unsigned int i=0;
  3048  000A26  0E00               	movlw	0
  3049  000A28  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3050  000A2A  0E00               	movlw	0
  3051  000A2C  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3052                           
  3053                           ;Movement.c: 108: unsigned int TimeAboveThreshold=0;
  3054  000A2E  0E00               	movlw	0
  3055  000A30  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3056  000A32  0E00               	movlw	0
  3057  000A34  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3058                           
  3059                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=1000;
  3060  000A36  0E03               	movlw	3
  3061  000A38  6FBB               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3062  000A3A  0EE8               	movlw	232
  3063  000A3C  6FBA               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3064                           
  3065                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3066  000A3E  0E28               	movlw	40
  3067  000A40  6FBC               	movwf	ScanWithRange@MotorPower& (0+255),b
  3068                           
  3069                           ;Movement.c: 114: const signed char LeftFlick=2;
  3070  000A42  0E02               	movlw	2
  3071  000A44  6FC6               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3072                           
  3073                           ;Movement.c: 118: const unsigned char MiniLeftFlick=1;
  3074  000A46  0E01               	movlw	1
  3075  000A48  6FBD               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;Movement.c: 124: (MoveType[*Move]) = 2;
  3079  000A4A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3080  000A4E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3081  000A52  50DF               	movf	indf2,w,c
  3082  000A54  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3083  000A56  518C               	movf	??_ScanWithRange& (0+255),w,b
  3084  000A58  0D01               	mullw	1
  3085  000A5A  50F3               	movf	prodl,w,c
  3086  000A5C  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3087  000A5E  6ED9               	movwf	fsr2l,c
  3088  000A60  50F4               	movf	prodh,w,c
  3089  000A62  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3090  000A64  6EDA               	movwf	fsr2h,c
  3091  000A66  0E02               	movlw	2
  3092  000A68  6EDF               	movwf	indf2,c
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;Movement.c: 125: (MoveTime[*Move]) = LeftFlick;
  3096  000A6A  C0C6  F08C         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3097  000A6E  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3098  000A70  BF8C               	btfsc	??_ScanWithRange& (0+255),7,b
  3099  000A72  078D               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3100  000A74  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3101  000A78  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3102  000A7C  50DF               	movf	indf2,w,c
  3103  000A7E  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3104  000A80  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3105  000A82  0D02               	mullw	2
  3106  000A84  50F3               	movf	prodl,w,c
  3107  000A86  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3108  000A88  6ED9               	movwf	fsr2l,c
  3109  000A8A  50F4               	movf	prodh,w,c
  3110  000A8C  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3111  000A8E  6EDA               	movwf	fsr2h,c
  3112  000A90  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3113  000A94  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;Movement.c: 126: *Move = *Move+1;
  3117  000A98  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3118  000A9C  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3119  000AA0  50DF               	movf	indf2,w,c
  3120  000AA2  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3121  000AA4  298C               	incf	??_ScanWithRange& (0+255),w,b
  3122  000AA6  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3123  000AAA  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3124  000AAE  6EDF               	movwf	indf2,c
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;Movement.c: 127: turnLeft(mL,mR, 100);
  3128  000AB0  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3129  000AB4  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3130  000AB8  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3131  000ABC  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3132  000AC0  0E64               	movlw	100
  3133  000AC2  6F7B               	movwf	turnLeft@power& (0+255),b
  3134  000AC4  EC33  F00D         	call	_turnLeft	;wreg free
  3135                           
  3136                           ;Movement.c: 128: delay_tenth_s(LeftFlick);
  3137  000AC8  0100               	movlb	0	; () banked
  3138  000ACA  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3139  000ACC  EC6E  F00D         	call	_delay_tenth_s
  3140                           
  3141                           ;Movement.c: 129: stop(mL,mR);
  3142  000AD0  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3143  000AD4  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3144  000AD8  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3145  000ADC  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3146  000AE0  EC0E  F00B         	call	_stop	;wreg free
  3147                           
  3148                           ;Movement.c: 132: turnRight(mL,mR, MotorPower);
  3149  000AE4  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3150  000AE8  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3151  000AEC  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3152  000AF0  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3153  000AF4  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnRight@power
  3154  000AF8  EC15  F00D         	call	_turnRight	;wreg free
  3155                           
  3156                           ;Movement.c: 135: TMR0L = 0;
  3157  000AFC  0E00               	movlw	0
  3158  000AFE  6ED6               	movwf	4054,c	;volatile
  3159                           
  3160                           ;Movement.c: 136: TMR0H = 0;
  3161  000B00  0E00               	movlw	0
  3162  000B02  6ED7               	movwf	4055,c	;volatile
  3163                           
  3164                           ;Movement.c: 137: *millis = 0;
  3165  000B04  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3166  000B08  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3167  000B0C  0E00               	movlw	0
  3168  000B0E  6EDE               	movwf	postinc2,c
  3169  000B10  0E00               	movlw	0
  3170  000B12  6EDD               	movwf	postdec2,c
  3171                           
  3172                           ;Movement.c: 138: T0CONbits.TMR0ON=1;
  3173  000B14  8ED5               	bsf	4053,7,c	;volatile
  3174                           
  3175                           ;Movement.c: 140: for (i=1; i<=loops; i++) {
  3176  000B16  0E00               	movlw	0
  3177  000B18  0100               	movlb	0	; () banked
  3178  000B1A  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3179  000B1C  0E01               	movlw	1
  3180  000B1E  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3181  000B20  D1A0               	goto	l224
  3182  000B22                     
  3183                           ; BSR set to: 0
  3184                           ;Movement.c: 143: SensorResult[0]=grabLeftIR();
  3185                           
  3186                           ; BSR set to: 0
  3187  000B22  EC13  F00C         	call	_grabLeftIR	;wreg free
  3188  000B26  C02C  F0C2         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3189  000B2A  C02D  F0C3         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3190                           
  3191                           ;Movement.c: 144: SensorResult[1]=grabRightIR();
  3192  000B2E  ECD8  F00B         	call	_grabRightIR	;wreg free
  3193  000B32  C02C  F0C4         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3194  000B36  C02D  F0C5         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3195                           
  3196                           ;Movement.c: 148: CAP1BUFH=0;
  3197  000B3A  0E00               	movlw	0
  3198  000B3C  6E69               	movwf	3945,c	;volatile
  3199                           
  3200                           ;Movement.c: 149: CAP1BUFL=0;
  3201  000B3E  0E00               	movlw	0
  3202  000B40  6E68               	movwf	3944,c	;volatile
  3203                           
  3204                           ;Movement.c: 150: CAP2BUFH=0;
  3205  000B42  0E00               	movlw	0
  3206  000B44  6E67               	movwf	3943,c	;volatile
  3207                           
  3208                           ;Movement.c: 151: CAP2BUFL=0;
  3209  000B46  0E00               	movlw	0
  3210  000B48  6E66               	movwf	3942,c	;volatile
  3211                           
  3212                           ;Movement.c: 155: SendLCD(0b00000001,0);
  3213  000B4A  0E00               	movlw	0
  3214  000B4C  6E30               	movwf	SendLCD@type,c
  3215  000B4E  0E01               	movlw	1
  3216  000B50  ECDC  F00D         	call	_SendLCD
  3217                           
  3218                           ;Movement.c: 156: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3219  000B54  0E21               	movlw	33
  3220  000B56                     u3357:
  3221  000B56  2EE8               	decfsz	wreg,f,c
  3222  000B58  D7FE               	bra	u3357
  3223  000B5A  F000               	nop	
  3224                           
  3225                           ;Movement.c: 157: SendLCD(0b00000010,0);
  3226  000B5C  0E00               	movlw	0
  3227  000B5E  6E30               	movwf	SendLCD@type,c
  3228  000B60  0E02               	movlw	2
  3229  000B62  ECDC  F00D         	call	_SendLCD
  3230                           
  3231                           ;Movement.c: 158: _delay((unsigned long)((2)*(8000000/4000.0)));
  3232  000B66  0E06               	movlw	6
  3233  000B68  0100               	movlb	0	; () banked
  3234  000B6A  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3235  000B6C  0E30               	movlw	48
  3236  000B6E                     u3367:
  3237  000B6E  2EE8               	decfsz	wreg,f,c
  3238  000B70  D7FE               	bra	u3367
  3239  000B72  2F8C               	decfsz	??_ScanWithRange& (0+255),f,b
  3240  000B74  D7FC               	bra	u3367
  3241  000B76  F000               	nop	
  3242                           
  3243                           ;Movement.c: 159: SetLine(1);
  3244  000B78  0E01               	movlw	1
  3245  000B7A  ECC1  F00D         	call	_SetLine
  3246                           
  3247                           ;Movement.c: 160: LCD_String("     ScanIR");
  3248  000B7E  0E2D               	movlw	low STR_1
  3249  000B80  0100               	movlb	0	; () banked
  3250  000B82  6F60               	movwf	LCD_String@string& (0+255),b
  3251  000B84  0E03               	movlw	high STR_1
  3252  000B86  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3253  000B88  EC4E  F00C         	call	_LCD_String	;wreg free
  3254                           
  3255                           ;Movement.c: 161: SetLine(2);
  3256  000B8C  0E02               	movlw	2
  3257  000B8E  ECC1  F00D         	call	_SetLine
  3258                           
  3259                           ;Movement.c: 162: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3260  000B92  0E90               	movlw	low ScanWithRange@buf
  3261  000B94  0100               	movlb	0	; () banked
  3262  000B96  6F67               	movwf	sprintf@sp& (0+255),b
  3263  000B98  0E00               	movlw	high ScanWithRange@buf
  3264  000B9A  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  3265  000B9C  0E0C               	movlw	low (STR_6+1)
  3266  000B9E  6F69               	movwf	sprintf@f& (0+255),b
  3267  000BA0  0E03               	movlw	high (STR_6+1)
  3268  000BA2  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  3269  000BA4  C0C2  F06B         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3270  000BA8  C0C3  F06C         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3271  000BAC  C0C4  F06D         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3272  000BB0  C0C5  F06E         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3273  000BB4  EC81  F007         	call	_sprintf	;wreg free
  3274                           
  3275                           ;Movement.c: 163: LCD_String(buf);
  3276  000BB8  0E90               	movlw	low ScanWithRange@buf
  3277  000BBA  0100               	movlb	0	; () banked
  3278  000BBC  6F60               	movwf	LCD_String@string& (0+255),b
  3279  000BBE  0E00               	movlw	high ScanWithRange@buf
  3280  000BC0  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3281  000BC2  EC4E  F00C         	call	_LCD_String	;wreg free
  3282                           
  3283                           ;Movement.c: 167: if (SensorResult[1]>DirectionFoundThreshold) {
  3284  000BC6  0100               	movlb	0	; () banked
  3285  000BC8  51C4               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3286  000BCA  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3287  000BCC  51C5               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3288  000BCE  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3289  000BD0  B0D8               	btfsc	status,0,c
  3290  000BD2  D008               	goto	l226
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;Movement.c: 168: RightFlag=*millis;
  3294  000BD4  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3295  000BD8  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3296  000BDC  CFDE F0C7          	movff	postinc2,ScanWithRange@RightFlag
  3297  000BE0  CFDD F0C8          	movff	postdec2,ScanWithRange@RightFlag+1
  3298  000BE4                     l226:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;Movement.c: 169: }
  3302                           ;Movement.c: 171: if (SensorResult[0]>DirectionFoundThreshold) {
  3303                           
  3304                           ; BSR set to: 0
  3305  000BE4  51C2               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3306  000BE6  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3307  000BE8  51C3               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3308  000BEA  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3309  000BEC  B0D8               	btfsc	status,0,c
  3310  000BEE  D008               	goto	l227
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;Movement.c: 172: LeftFlag=*millis;
  3314  000BF0  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3315  000BF4  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3316  000BF8  CFDE F0BE          	movff	postinc2,ScanWithRange@LeftFlag
  3317  000BFC  CFDD F0BF          	movff	postdec2,ScanWithRange@LeftFlag+1
  3318  000C00                     l227:
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;Movement.c: 173: }
  3322                           ;Movement.c: 180: if (LeftFlag>0) {
  3323                           
  3324                           ; BSR set to: 0
  3325  000C00  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3326  000C02  11BF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3327  000C04  B4D8               	btfsc	status,2,c
  3328  000C06  D122               	goto	l234
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;Movement.c: 183: if (RightFlag>0) {
  3332  000C08  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3333  000C0A  11C8               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3334  000C0C  B4D8               	btfsc	status,2,c
  3335  000C0E  D08A               	goto	l229
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;Movement.c: 184: TimeAboveThreshold=LeftFlag-RightFlag;
  3339  000C10  C0C7  F08C         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3340  000C14  C0C8  F08D         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3341  000C18  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3342  000C1A  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3343  000C1C  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3344  000C1E  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3345  000C20  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3346  000C22  258C               	addwf	??_ScanWithRange& (0+255),w,b
  3347  000C24  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3348  000C26  51BF               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3349  000C28  218D               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3350  000C2A  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;Movement.c: 185: TMR0L = 0;
  3354  000C2C  0E00               	movlw	0
  3355  000C2E  6ED6               	movwf	4054,c	;volatile
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;Movement.c: 186: TMR0H = 0;
  3359  000C30  0E00               	movlw	0
  3360  000C32  6ED7               	movwf	4055,c	;volatile
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;Movement.c: 187: *millis = 0;
  3364  000C34  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3365  000C38  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3366  000C3C  0E00               	movlw	0
  3367  000C3E  6EDE               	movwf	postinc2,c
  3368  000C40  0E00               	movlw	0
  3369  000C42  6EDD               	movwf	postdec2,c
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;Movement.c: 188: stop(mL,mR);
  3373  000C44  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3374  000C48  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3375  000C4C  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3376  000C50  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3377  000C54  EC0E  F00B         	call	_stop	;wreg free
  3378                           
  3379                           ;Movement.c: 189: while (*millis<(TimeAboveThreshold>>1)) {
  3380  000C58  D00C               	goto	l230
  3381  000C5A                     
  3382                           ;Movement.c: 190: turnLeft(mL,mR, MotorPower);
  3383  000C5A  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3384  000C5E  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3385  000C62  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3386  000C66  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3387  000C6A  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3388  000C6E  EC33  F00D         	call	_turnLeft	;wreg free
  3389  000C72                     l230:
  3390  000C72  90D8               	bcf	status,0,c
  3391  000C74  0100               	movlb	0	; () banked
  3392  000C76  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3393  000C78  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3394  000C7A  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3395  000C7C  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3396  000C7E  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3397  000C82  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3398  000C86  518C               	movf	??_ScanWithRange& (0+255),w,b
  3399  000C88  5CDE               	subwf	postinc2,w,c
  3400  000C8A  518D               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3401  000C8C  58DE               	subwfb	postinc2,w,c
  3402  000C8E  A0D8               	btfss	status,0,c
  3403  000C90  D7E4               	goto	l231
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;Movement.c: 191: }
  3407                           ;Movement.c: 192: T0CONbits.TMR0ON=0;
  3408  000C92  9ED5               	bcf	4053,7,c	;volatile
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;Movement.c: 193: stop(mL,mR);
  3412  000C94  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3413  000C98  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3414  000C9C  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3415  000CA0  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3416  000CA4  EC0E  F00B         	call	_stop	;wreg free
  3417                           
  3418                           ;Movement.c: 195: (MoveType[*Move]) = 1;
  3419  000CA8  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3420  000CAC  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3421  000CB0  50DF               	movf	indf2,w,c
  3422  000CB2  0100               	movlb	0	; () banked
  3423  000CB4  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3424  000CB6  518C               	movf	??_ScanWithRange& (0+255),w,b
  3425  000CB8  0D01               	mullw	1
  3426  000CBA  50F3               	movf	prodl,w,c
  3427  000CBC  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3428  000CBE  6ED9               	movwf	fsr2l,c
  3429  000CC0  50F4               	movf	prodh,w,c
  3430  000CC2  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3431  000CC4  6EDA               	movwf	fsr2h,c
  3432  000CC6  0E01               	movlw	1
  3433  000CC8  6EDF               	movwf	indf2,c
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;Movement.c: 196: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3437  000CCA  90D8               	bcf	status,0,c
  3438  000CCC  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3439  000CCE  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3440  000CD0  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3441  000CD2  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3442  000CD4  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3443  000CD6  278C               	addwf	??_ScanWithRange& (0+255),f,b
  3444  000CD8  51C8               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3445  000CDA  238D               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3446  000CDC  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3447  000CDE  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3448  000CE0  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3449  000CE2  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3450  000CE4  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3451  000CE8  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3452  000CEC  50DF               	movf	indf2,w,c
  3453  000CEE  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3454  000CF0  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3455  000CF2  0D02               	mullw	2
  3456  000CF4  50F3               	movf	prodl,w,c
  3457  000CF6  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3458  000CF8  6ED9               	movwf	fsr2l,c
  3459  000CFA  50F4               	movf	prodh,w,c
  3460  000CFC  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3461  000CFE  6EDA               	movwf	fsr2h,c
  3462  000D00  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3463  000D04  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;Movement.c: 197: *Move = *Move+1;
  3467  000D08  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3468  000D0C  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3469  000D10  50DF               	movf	indf2,w,c
  3470  000D12  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3471  000D14  298C               	incf	??_ScanWithRange& (0+255),w,b
  3472  000D16  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3473  000D1A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3474  000D1E  6EDF               	movwf	indf2,c
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;Movement.c: 199: return 2;
  3478  000D20  0E02               	movlw	2
  3479                           
  3480                           ; BSR set to: 0
  3481  000D22  0012               	return	
  3482  000D24                     l229:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;Movement.c: 201: T0CONbits.TMR0ON=0;
  3486  000D24  9ED5               	bcf	4053,7,c	;volatile
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;Movement.c: 205: (MoveType[*Move]) = 1;
  3490  000D26  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3491  000D2A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3492  000D2E  50DF               	movf	indf2,w,c
  3493  000D30  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3494  000D32  518C               	movf	??_ScanWithRange& (0+255),w,b
  3495  000D34  0D01               	mullw	1
  3496  000D36  50F3               	movf	prodl,w,c
  3497  000D38  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3498  000D3A  6ED9               	movwf	fsr2l,c
  3499  000D3C  50F4               	movf	prodh,w,c
  3500  000D3E  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3501  000D40  6EDA               	movwf	fsr2h,c
  3502  000D42  0E01               	movlw	1
  3503  000D44  6EDF               	movwf	indf2,c
  3504                           
  3505                           ;Movement.c: 206: (MoveTime[*Move]) = -(*millis);
  3506  000D46  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3507  000D4A  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3508  000D4E  CFDE F08C          	movff	postinc2,??_ScanWithRange
  3509  000D52  CFDD F08D          	movff	postdec2,??_ScanWithRange+1
  3510  000D56  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3511  000D58  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3512  000D5A  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3513  000D5C  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3514  000D5E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3515  000D62  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3516  000D66  50DF               	movf	indf2,w,c
  3517  000D68  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3518  000D6A  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3519  000D6C  0D02               	mullw	2
  3520  000D6E  50F3               	movf	prodl,w,c
  3521  000D70  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3522  000D72  6ED9               	movwf	fsr2l,c
  3523  000D74  50F4               	movf	prodh,w,c
  3524  000D76  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3525  000D78  6EDA               	movwf	fsr2h,c
  3526  000D7A  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3527  000D7E  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;Movement.c: 207: *Move = *Move+1;
  3531  000D82  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3532  000D86  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3533  000D8A  50DF               	movf	indf2,w,c
  3534  000D8C  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3535  000D8E  298C               	incf	??_ScanWithRange& (0+255),w,b
  3536  000D90  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3537  000D94  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3538  000D98  6EDF               	movwf	indf2,c
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;Movement.c: 208: stop(mL,mR);
  3542  000D9A  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3543  000D9E  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3544  000DA2  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3545  000DA6  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3546  000DAA  EC0E  F00B         	call	_stop	;wreg free
  3547                           
  3548                           ;Movement.c: 211: turnLeft(mL,mR,100);
  3549  000DAE  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3550  000DB2  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3551  000DB6  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3552  000DBA  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3553  000DBE  0E64               	movlw	100
  3554  000DC0  0100               	movlb	0	; () banked
  3555  000DC2  6F7B               	movwf	turnLeft@power& (0+255),b
  3556  000DC4  EC33  F00D         	call	_turnLeft	;wreg free
  3557                           
  3558                           ;Movement.c: 212: delay_tenth_s(MiniLeftFlick);
  3559  000DC8  0100               	movlb	0	; () banked
  3560  000DCA  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3561  000DCC  EC6E  F00D         	call	_delay_tenth_s
  3562                           
  3563                           ;Movement.c: 213: stop(mL,mR);
  3564  000DD0  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3565  000DD4  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3566  000DD8  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3567  000DDC  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3568  000DE0  EC0E  F00B         	call	_stop	;wreg free
  3569                           
  3570                           ;Movement.c: 214: (MoveType[*Move]) = 2;
  3571  000DE4  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3572  000DE8  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3573  000DEC  50DF               	movf	indf2,w,c
  3574  000DEE  0100               	movlb	0	; () banked
  3575  000DF0  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3576  000DF2  518C               	movf	??_ScanWithRange& (0+255),w,b
  3577  000DF4  0D01               	mullw	1
  3578  000DF6  50F3               	movf	prodl,w,c
  3579  000DF8  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3580  000DFA  6ED9               	movwf	fsr2l,c
  3581  000DFC  50F4               	movf	prodh,w,c
  3582  000DFE  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3583  000E00  6EDA               	movwf	fsr2h,c
  3584  000E02  0E02               	movlw	2
  3585  000E04  6EDF               	movwf	indf2,c
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;Movement.c: 215: (MoveTime[*Move]) = MiniLeftFlick;
  3589  000E06  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3590  000E08  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3591  000E0A  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3592  000E0C  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3593  000E10  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3594  000E14  50DF               	movf	indf2,w,c
  3595  000E16  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3596  000E18  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3597  000E1A  0D02               	mullw	2
  3598  000E1C  50F3               	movf	prodl,w,c
  3599  000E1E  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3600  000E20  6ED9               	movwf	fsr2l,c
  3601  000E22  50F4               	movf	prodh,w,c
  3602  000E24  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3603  000E26  6EDA               	movwf	fsr2h,c
  3604  000E28  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3605  000E2C  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;Movement.c: 216: *Move = *Move+1;
  3609  000E30  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3610  000E34  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3611  000E38  50DF               	movf	indf2,w,c
  3612  000E3A  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3613  000E3C  298C               	incf	??_ScanWithRange& (0+255),w,b
  3614  000E3E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3615  000E42  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3616  000E46  6EDF               	movwf	indf2,c
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;Movement.c: 219: return 2;
  3620  000E48  0E02               	movlw	2
  3621                           
  3622                           ; BSR set to: 0
  3623  000E4A  0012               	return	
  3624  000E4C                     l234:
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;Movement.c: 220: }
  3628                           ;Movement.c: 221: }
  3629                           ;Movement.c: 223: if (*RFID_Read==1) {
  3630                           
  3631                           ; BSR set to: 0
  3632                           
  3633                           ; BSR set to: 0
  3634  000E4C  C088  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3635  000E50  C089  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3636  000E54  04DE               	decf	postinc2,w,c
  3637  000E56  A4D8               	btfss	status,2,c
  3638  000E58  D002               	goto	l235
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;Movement.c: 224: return 2;
  3642  000E5A  0E02               	movlw	2
  3643                           
  3644                           ; BSR set to: 0
  3645  000E5C  0012               	return	
  3646  000E5E                     l235:
  3647                           
  3648                           ; BSR set to: 0
  3649                           
  3650                           ; BSR set to: 0
  3651  000E5E  4BB8               	infsnz	ScanWithRange@i& (0+255),f,b
  3652  000E60  2BB9               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3653  000E62                     l224:
  3654                           
  3655                           ; BSR set to: 0
  3656                           
  3657                           ; BSR set to: 0
  3658  000E62  51B8               	movf	ScanWithRange@i& (0+255),w,b
  3659  000E64  5D80               	subwf	ScanWithRange@loops& (0+255),w,b
  3660  000E66  51B9               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3661  000E68  5981               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3662  000E6A  B0D8               	btfsc	status,0,c
  3663  000E6C  D65A               	goto	l225
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;Movement.c: 225: }
  3667                           ;Movement.c: 226: }
  3668                           ;Movement.c: 231: (MoveType[*Move]) = 2;
  3669                           
  3670                           ; BSR set to: 0
  3671  000E6E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3672  000E72  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3673  000E76  50DF               	movf	indf2,w,c
  3674  000E78  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3675  000E7A  518C               	movf	??_ScanWithRange& (0+255),w,b
  3676  000E7C  0D01               	mullw	1
  3677  000E7E  50F3               	movf	prodl,w,c
  3678  000E80  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3679  000E82  6ED9               	movwf	fsr2l,c
  3680  000E84  50F4               	movf	prodh,w,c
  3681  000E86  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3682  000E88  6EDA               	movwf	fsr2h,c
  3683  000E8A  0E02               	movlw	2
  3684  000E8C  6EDF               	movwf	indf2,c
  3685                           
  3686                           ;Movement.c: 232: (MoveTime[*Move]) = -2;
  3687  000E8E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3688  000E92  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3689  000E96  50DF               	movf	indf2,w,c
  3690  000E98  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3691  000E9A  518C               	movf	??_ScanWithRange& (0+255),w,b
  3692  000E9C  0D02               	mullw	2
  3693  000E9E  50F3               	movf	prodl,w,c
  3694  000EA0  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3695  000EA2  6ED9               	movwf	fsr2l,c
  3696  000EA4  50F4               	movf	prodh,w,c
  3697  000EA6  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3698  000EA8  6EDA               	movwf	fsr2h,c
  3699  000EAA  0EFE               	movlw	254
  3700  000EAC  6EDE               	movwf	postinc2,c
  3701  000EAE  0EFF               	movlw	255
  3702  000EB0  6EDD               	movwf	postdec2,c
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;Movement.c: 233: *Move = *Move+1;
  3706  000EB2  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3707  000EB6  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3708  000EBA  50DF               	movf	indf2,w,c
  3709  000EBC  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3710  000EBE  298C               	incf	??_ScanWithRange& (0+255),w,b
  3711  000EC0  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3712  000EC4  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3713  000EC8  6EDF               	movwf	indf2,c
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;Movement.c: 234: turnRight(mL,mR, 100);
  3717  000ECA  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3718  000ECE  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3719  000ED2  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3720  000ED6  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3721  000EDA  0E64               	movlw	100
  3722  000EDC  6F7B               	movwf	turnRight@power& (0+255),b
  3723  000EDE  EC15  F00D         	call	_turnRight	;wreg free
  3724                           
  3725                           ;Movement.c: 235: delay_tenth_s(LeftFlick);
  3726  000EE2  0100               	movlb	0	; () banked
  3727  000EE4  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3728  000EE6  EC6E  F00D         	call	_delay_tenth_s
  3729                           
  3730                           ;Movement.c: 236: stop(mL,mR);
  3731  000EEA  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3732  000EEE  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3733  000EF2  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3734  000EF6  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3735  000EFA  EC0E  F00B         	call	_stop	;wreg free
  3736                           
  3737                           ;Movement.c: 237: return -1;
  3738  000EFE  0EFF               	movlw	255
  3739  000F00  0012               	return	
  3740  000F02                     __end_of_ScanWithRange:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           prodh	equ	0xFF4
  3744                           prodl	equ	0xFF3
  3745                           intcon	equ	0xFF2
  3746                           postinc0	equ	0xFEE
  3747                           wreg	equ	0xFE8
  3748                           indf1	equ	0xFE7
  3749                           plusw1	equ	0xFE3
  3750                           fsr1h	equ	0xFE2
  3751                           fsr1l	equ	0xFE1
  3752                           indf2	equ	0xFDF
  3753                           postinc2	equ	0xFDE
  3754                           postdec2	equ	0xFDD
  3755                           plusw2	equ	0xFDB
  3756                           fsr2h	equ	0xFDA
  3757                           fsr2l	equ	0xFD9
  3758                           status	equ	0xFD8
  3759                           
  3760 ;; *************** function _turnRight *****************
  3761 ;; Defined at:
  3762 ;;		line 103 in file "dc_motor.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3765 ;;		 -> main@mL(9), 
  3766 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3767 ;;		 -> main@mR(9), 
  3768 ;;  power           1   27[BANK0 ] unsigned char 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3780 ;;      Params:         0       5       0       0
  3781 ;;      Locals:         0       0       0       0
  3782 ;;      Temps:          0       0       0       0
  3783 ;;      Totals:         0       5       0       0
  3784 ;;Total ram usage:        5 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    6
  3787 ;; This function calls:
  3788 ;;		_fullSpeed
  3789 ;; This function is called by:
  3790 ;;		_ScanWithRange
  3791 ;;		_main
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text10
  3796  001A2A                     __ptext10:
  3797                           	opt stack 0
  3798  001A2A                     _turnRight:
  3799                           	opt stack 24
  3800                           
  3801                           ;dc_motor.c: 107: mL->direction=0;
  3802                           
  3803                           ;incstack = 0
  3804  001A2A  0100               	movlb	0	; () banked
  3805  001A2C  EE20 F001          	lfsr	2,1
  3806  001A30  5177               	movf	turnRight@mL& (0+255),w,b
  3807  001A32  26D9               	addwf	fsr2l,f,c
  3808  001A34  5178               	movf	(turnRight@mL+1)& (0+255),w,b
  3809  001A36  22DA               	addwfc	fsr2h,f,c
  3810  001A38  0E00               	movlw	0
  3811  001A3A  6EDF               	movwf	indf2,c
  3812                           
  3813                           ;dc_motor.c: 108: mR->direction=1;
  3814  001A3C  EE20 F001          	lfsr	2,1
  3815  001A40  5179               	movf	turnRight@mR& (0+255),w,b
  3816  001A42  26D9               	addwf	fsr2l,f,c
  3817  001A44  517A               	movf	(turnRight@mR+1)& (0+255),w,b
  3818  001A46  22DA               	addwfc	fsr2h,f,c
  3819  001A48  0E01               	movlw	1
  3820  001A4A  6EDF               	movwf	indf2,c
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3824  001A4C  C077  F071         	movff	turnRight@mL,fullSpeed@mL
  3825  001A50  C078  F072         	movff	turnRight@mL+1,fullSpeed@mL+1
  3826  001A54  C079  F073         	movff	turnRight@mR,fullSpeed@mR
  3827  001A58  C07A  F074         	movff	turnRight@mR+1,fullSpeed@mR+1
  3828  001A5C  C07B  F075         	movff	turnRight@power,fullSpeed@power
  3829  001A60  EC9A  F00B         	call	_fullSpeed	;wreg free
  3830  001A64  0012               	return		;funcret
  3831  001A66                     __end_of_turnRight:
  3832                           	opt stack 0
  3833                           tblptru	equ	0xFF8
  3834                           prodh	equ	0xFF4
  3835                           prodl	equ	0xFF3
  3836                           intcon	equ	0xFF2
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           indf1	equ	0xFE7
  3840                           plusw1	equ	0xFE3
  3841                           fsr1h	equ	0xFE2
  3842                           fsr1l	equ	0xFE1
  3843                           indf2	equ	0xFDF
  3844                           postinc2	equ	0xFDE
  3845                           postdec2	equ	0xFDD
  3846                           plusw2	equ	0xFDB
  3847                           fsr2h	equ	0xFDA
  3848                           fsr2l	equ	0xFD9
  3849                           status	equ	0xFD8
  3850                           
  3851 ;; *************** function _turnLeft *****************
  3852 ;; Defined at:
  3853 ;;		line 92 in file "dc_motor.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3856 ;;		 -> main@mL(9), 
  3857 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3858 ;;		 -> main@mR(9), 
  3859 ;;  power           1   27[BANK0 ] unsigned char 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;		None
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 0/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3871 ;;      Params:         0       5       0       0
  3872 ;;      Locals:         0       0       0       0
  3873 ;;      Temps:          0       0       0       0
  3874 ;;      Totals:         0       5       0       0
  3875 ;;Total ram usage:        5 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    6
  3878 ;; This function calls:
  3879 ;;		_fullSpeed
  3880 ;; This function is called by:
  3881 ;;		_ScanWithRange
  3882 ;;		_main
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           	psect	text11
  3887  001A66                     __ptext11:
  3888                           	opt stack 0
  3889  001A66                     _turnLeft:
  3890                           	opt stack 24
  3891                           
  3892                           ;dc_motor.c: 96: mL->direction=1;
  3893                           
  3894                           ;incstack = 0
  3895  001A66  0100               	movlb	0	; () banked
  3896  001A68  EE20 F001          	lfsr	2,1
  3897  001A6C  5177               	movf	turnLeft@mL& (0+255),w,b
  3898  001A6E  26D9               	addwf	fsr2l,f,c
  3899  001A70  5178               	movf	(turnLeft@mL+1)& (0+255),w,b
  3900  001A72  22DA               	addwfc	fsr2h,f,c
  3901  001A74  0E01               	movlw	1
  3902  001A76  6EDF               	movwf	indf2,c
  3903                           
  3904                           ;dc_motor.c: 97: mR->direction=0;
  3905  001A78  EE20 F001          	lfsr	2,1
  3906  001A7C  5179               	movf	turnLeft@mR& (0+255),w,b
  3907  001A7E  26D9               	addwf	fsr2l,f,c
  3908  001A80  517A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3909  001A82  22DA               	addwfc	fsr2h,f,c
  3910  001A84  0E00               	movlw	0
  3911  001A86  6EDF               	movwf	indf2,c
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  3915  001A88  C077  F071         	movff	turnLeft@mL,fullSpeed@mL
  3916  001A8C  C078  F072         	movff	turnLeft@mL+1,fullSpeed@mL+1
  3917  001A90  C079  F073         	movff	turnLeft@mR,fullSpeed@mR
  3918  001A94  C07A  F074         	movff	turnLeft@mR+1,fullSpeed@mR+1
  3919  001A98  C07B  F075         	movff	turnLeft@power,fullSpeed@power
  3920  001A9C  EC9A  F00B         	call	_fullSpeed	;wreg free
  3921  001AA0  0012               	return		;funcret
  3922  001AA2                     __end_of_turnLeft:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           postinc0	equ	0xFEE
  3929                           wreg	equ	0xFE8
  3930                           indf1	equ	0xFE7
  3931                           plusw1	equ	0xFE3
  3932                           fsr1h	equ	0xFE2
  3933                           fsr1l	equ	0xFE1
  3934                           indf2	equ	0xFDF
  3935                           postinc2	equ	0xFDE
  3936                           postdec2	equ	0xFDD
  3937                           plusw2	equ	0xFDB
  3938                           fsr2h	equ	0xFDA
  3939                           fsr2l	equ	0xFD9
  3940                           status	equ	0xFD8
  3941                           
  3942 ;; *************** function _fullSpeed *****************
  3943 ;; Defined at:
  3944 ;;		line 113 in file "dc_motor.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  3947 ;;		 -> main@mL(9), 
  3948 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  3949 ;;		 -> main@mR(9), 
  3950 ;;  power           1   21[BANK0 ] unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;		None
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  1    wreg      void 
  3955 ;; Registers used:
  3956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 0/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3962 ;;      Params:         0       5       0       0
  3963 ;;      Locals:         0       0       0       0
  3964 ;;      Temps:          0       1       0       0
  3965 ;;      Totals:         0       6       0       0
  3966 ;;Total ram usage:        6 bytes
  3967 ;; Hardware stack levels used:    1
  3968 ;; Hardware stack levels required when called:    5
  3969 ;; This function calls:
  3970 ;;		_setMotorPWM
  3971 ;; This function is called by:
  3972 ;;		_turnLeft
  3973 ;;		_turnRight
  3974 ;;		_fullSpeedBack
  3975 ;;		_main
  3976 ;;		_fullSpeedForward
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text12
  3981  001734                     __ptext12:
  3982                           	opt stack 0
  3983  001734                     _fullSpeed:
  3984                           	opt stack 24
  3985                           
  3986                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  3987                           
  3988                           ;incstack = 0
  3989  001734  D02B               	goto	l67
  3990  001736                     
  3991                           ;dc_motor.c: 117: if(mL->power<power){
  3992  001736  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  3993  00173A  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  3994  00173E  0100               	movlb	0	; () banked
  3995  001740  5175               	movf	fullSpeed@power& (0+255),w,b
  3996  001742  5CDE               	subwf	postinc2,w,c
  3997  001744  B0D8               	btfsc	status,0,c
  3998  001746  D005               	goto	l69
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;dc_motor.c: 118: mL->power++;
  4002  001748  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4003  00174C  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4004  001750  2ADF               	incf	indf2,f,c
  4005  001752                     l69:
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;dc_motor.c: 119: }
  4009                           ;dc_motor.c: 120: if(mR->power<power){
  4010                           
  4011                           ; BSR set to: 0
  4012  001752  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4013  001756  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4014  00175A  5175               	movf	fullSpeed@power& (0+255),w,b
  4015  00175C  5CDE               	subwf	postinc2,w,c
  4016  00175E  B0D8               	btfsc	status,0,c
  4017  001760  D005               	goto	l70
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;dc_motor.c: 121: mR->power++;
  4021  001762  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4022  001766  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4023  00176A  2ADF               	incf	indf2,f,c
  4024  00176C                     l70:
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;dc_motor.c: 122: }
  4028                           ;dc_motor.c: 123: setMotorPWM(mL);
  4029                           
  4030                           ; BSR set to: 0
  4031  00176C  C071  F068         	movff	fullSpeed@mL,setMotorPWM@m
  4032  001770  C072  F069         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4033  001774  ECD1  F008         	call	_setMotorPWM	;wreg free
  4034                           
  4035                           ;dc_motor.c: 124: setMotorPWM(mR);
  4036  001778  C073  F068         	movff	fullSpeed@mR,setMotorPWM@m
  4037  00177C  C074  F069         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4038  001780  ECD1  F008         	call	_setMotorPWM	;wreg free
  4039                           
  4040                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4041  001784  0E21               	movlw	33
  4042  001786                     u3377:
  4043  001786  2EE8               	decfsz	wreg,f,c
  4044  001788  D7FE               	bra	u3377
  4045  00178A  F000               	nop	
  4046  00178C                     l67:
  4047  00178C  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4048  001790  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4049  001794  0100               	movlb	0	; () banked
  4050  001796  5175               	movf	fullSpeed@power& (0+255),w,b
  4051  001798  5CDE               	subwf	postinc2,w,c
  4052  00179A  A0D8               	btfss	status,0,c
  4053  00179C  D7CC               	goto	l68
  4054                           
  4055                           ; BSR set to: 0
  4056  00179E  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4057  0017A2  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4058  0017A6  5175               	movf	fullSpeed@power& (0+255),w,b
  4059  0017A8  5CDE               	subwf	postinc2,w,c
  4060  0017AA  B0D8               	btfsc	status,0,c
  4061  0017AC  0012               	return	
  4062  0017AE  D7C3               	goto	l68
  4063  0017B0                     __end_of_fullSpeed:
  4064                           	opt stack 0
  4065                           tblptru	equ	0xFF8
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           intcon	equ	0xFF2
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           indf1	equ	0xFE7
  4072                           plusw1	equ	0xFE3
  4073                           fsr1h	equ	0xFE2
  4074                           fsr1l	equ	0xFE1
  4075                           indf2	equ	0xFDF
  4076                           postinc2	equ	0xFDE
  4077                           postdec2	equ	0xFDD
  4078                           plusw2	equ	0xFDB
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function _delay_tenth_s *****************
  4084 ;; Defined at:
  4085 ;;		line 32 in file "Movement.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  tenth_second    1    wreg     unsigned char 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  tenth_second    1   44[COMRAM] unsigned char 
  4090 ;;  i               2   45[COMRAM] unsigned int 
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      void 
  4093 ;; Registers used:
  4094 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4100 ;;      Params:         0       0       0       0
  4101 ;;      Locals:         3       0       0       0
  4102 ;;      Temps:          1       0       0       0
  4103 ;;      Totals:         4       0       0       0
  4104 ;;Total ram usage:        4 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:    3
  4107 ;; This function calls:
  4108 ;;		Nothing
  4109 ;; This function is called by:
  4110 ;;		_ScanWithRange
  4111 ;;		_main
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text13
  4116  001ADC                     __ptext13:
  4117                           	opt stack 0
  4118  001ADC                     _delay_tenth_s:
  4119                           	opt stack 27
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;incstack = 0
  4123                           ;delay_tenth_s@tenth_seconds stored from wreg
  4124  001ADC  6E2D               	movwf	delay_tenth_s@tenth_seconds,c
  4125                           
  4126                           ;Movement.c: 33: unsigned int i=0;
  4127  001ADE  0E00               	movlw	0
  4128  001AE0  6E2F               	movwf	delay_tenth_s@i+1,c
  4129  001AE2  0E00               	movlw	0
  4130  001AE4  6E2E               	movwf	delay_tenth_s@i,c
  4131                           
  4132                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4133  001AE6  0E00               	movlw	0
  4134  001AE8  6E2F               	movwf	delay_tenth_s@i+1,c
  4135  001AEA  0E01               	movlw	1
  4136  001AEC  6E2E               	movwf	delay_tenth_s@i,c
  4137  001AEE  D009               	goto	l209
  4138  001AF0                     
  4139                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4140  001AF0  0E82               	movlw	130
  4141  001AF2  6E2C               	movwf	??_delay_tenth_s& (0+255),c
  4142  001AF4  0EDE               	movlw	222
  4143  001AF6                     u3387:
  4144  001AF6  2EE8               	decfsz	wreg,f,c
  4145  001AF8  D7FE               	bra	u3387
  4146  001AFA  2E2C               	decfsz	??_delay_tenth_s& (0+255),f,c
  4147  001AFC  D7FC               	bra	u3387
  4148  001AFE  4A2E               	infsnz	delay_tenth_s@i,f,c
  4149  001B00  2A2F               	incf	delay_tenth_s@i+1,f,c
  4150  001B02                     l209:
  4151  001B02  502D               	movf	delay_tenth_s@tenth_seconds,w,c
  4152  001B04  0D02               	mullw	2
  4153  001B06  502E               	movf	delay_tenth_s@i,w,c
  4154  001B08  5CF3               	subwf	prodl,w,c
  4155  001B0A  502F               	movf	delay_tenth_s@i+1,w,c
  4156  001B0C  58F4               	subwfb	prodh,w,c
  4157  001B0E  A0D8               	btfss	status,0,c
  4158  001B10  0012               	return	
  4159  001B12  D7EE               	goto	l210
  4160  001B14                     __end_of_delay_tenth_s:
  4161                           	opt stack 0
  4162                           tblptru	equ	0xFF8
  4163                           prodh	equ	0xFF4
  4164                           prodl	equ	0xFF3
  4165                           intcon	equ	0xFF2
  4166                           postinc0	equ	0xFEE
  4167                           wreg	equ	0xFE8
  4168                           indf1	equ	0xFE7
  4169                           plusw1	equ	0xFE3
  4170                           fsr1h	equ	0xFE2
  4171                           fsr1l	equ	0xFE1
  4172                           indf2	equ	0xFDF
  4173                           postinc2	equ	0xFDE
  4174                           postdec2	equ	0xFDD
  4175                           plusw2	equ	0xFDB
  4176                           fsr2h	equ	0xFDA
  4177                           fsr2l	equ	0xFD9
  4178                           status	equ	0xFD8
  4179                           
  4180 ;; *************** function _ScanIR *****************
  4181 ;; Defined at:
  4182 ;;		line 44 in file "Movement.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  4185 ;;		 -> main@mL(9), 
  4186 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  4187 ;;		 -> main@mR(9), 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  buf            40   33[BANK0 ] unsigned char [40]
  4190 ;;  SensorResult    4   75[BANK0 ] unsigned int [2]
  4191 ;;  DirectionMov    2   73[BANK0 ] const unsigned int 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      unsigned char 
  4194 ;; Registers used:
  4195 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4201 ;;      Params:         0       4       0       0
  4202 ;;      Locals:         0      46       0       0
  4203 ;;      Temps:          0       1       0       0
  4204 ;;      Totals:         0      51       0       0
  4205 ;;Total ram usage:       51 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    7
  4208 ;; This function calls:
  4209 ;;		_LCD_String
  4210 ;;		_SendLCD
  4211 ;;		_SetLine
  4212 ;;		_grabLeftIR
  4213 ;;		_grabRightIR
  4214 ;;		_sprintf
  4215 ;;		_stop
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text14
  4222  0012E0                     __ptext14:
  4223                           	opt stack 0
  4224  0012E0                     _ScanIR:
  4225                           	opt stack 23
  4226                           
  4227                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4228                           
  4229                           ;incstack = 0
  4230  0012E0  C0CF  F0AB         	movff	ScanIR@F3541,ScanIR@SensorResult
  4231  0012E4  C0D0  F0AC         	movff	ScanIR@F3541+1,ScanIR@SensorResult+1
  4232  0012E8  C0D1  F0AD         	movff	ScanIR@F3541+2,ScanIR@SensorResult+2
  4233  0012EC  C0D2  F0AE         	movff	ScanIR@F3541+3,ScanIR@SensorResult+3
  4234                           
  4235                           ;Movement.c: 48: char buf[40];
  4236                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=1000;
  4237  0012F0  0E03               	movlw	3
  4238  0012F2  0100               	movlb	0	; () banked
  4239  0012F4  6FAA               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4240  0012F6  0EE8               	movlw	232
  4241  0012F8  6FA9               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4245  0012FA  EC13  F00C         	call	_grabLeftIR	;wreg free
  4246  0012FE  C02C  F0AB         	movff	?_grabLeftIR,ScanIR@SensorResult
  4247  001302  C02D  F0AC         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4248                           
  4249                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4250  001306  ECD8  F00B         	call	_grabRightIR	;wreg free
  4251  00130A  C02C  F0AD         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4252  00130E  C02D  F0AE         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4253                           
  4254                           ;Movement.c: 60: CAP1BUFH=0;
  4255  001312  0E00               	movlw	0
  4256  001314  6E69               	movwf	3945,c	;volatile
  4257                           
  4258                           ;Movement.c: 61: CAP1BUFL=0;
  4259  001316  0E00               	movlw	0
  4260  001318  6E68               	movwf	3944,c	;volatile
  4261                           
  4262                           ;Movement.c: 62: CAP2BUFH=0;
  4263  00131A  0E00               	movlw	0
  4264  00131C  6E67               	movwf	3943,c	;volatile
  4265                           
  4266                           ;Movement.c: 63: CAP2BUFL=0;
  4267  00131E  0E00               	movlw	0
  4268  001320  6E66               	movwf	3942,c	;volatile
  4269                           
  4270                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4271  001322  0E00               	movlw	0
  4272  001324  6E30               	movwf	SendLCD@type,c
  4273  001326  0E01               	movlw	1
  4274  001328  ECDC  F00D         	call	_SendLCD
  4275                           
  4276                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4277  00132C  0E21               	movlw	33
  4278  00132E                     u3397:
  4279  00132E  2EE8               	decfsz	wreg,f,c
  4280  001330  D7FE               	bra	u3397
  4281  001332  F000               	nop	
  4282                           
  4283                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4284  001334  0E00               	movlw	0
  4285  001336  6E30               	movwf	SendLCD@type,c
  4286  001338  0E02               	movlw	2
  4287  00133A  ECDC  F00D         	call	_SendLCD
  4288                           
  4289                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4290  00133E  0E06               	movlw	6
  4291  001340  0100               	movlb	0	; () banked
  4292  001342  6F80               	movwf	??_ScanIR& (0+255),b
  4293  001344  0E30               	movlw	48
  4294  001346                     u3407:
  4295  001346  2EE8               	decfsz	wreg,f,c
  4296  001348  D7FE               	bra	u3407
  4297  00134A  2F80               	decfsz	??_ScanIR& (0+255),f,b
  4298  00134C  D7FC               	bra	u3407
  4299  00134E  F000               	nop	
  4300                           
  4301                           ;Movement.c: 70: SetLine(1);
  4302  001350  0E01               	movlw	1
  4303  001352  ECC1  F00D         	call	_SetLine
  4304                           
  4305                           ;Movement.c: 71: LCD_String("     ScanIR");
  4306  001356  0E2D               	movlw	low STR_1
  4307  001358  0100               	movlb	0	; () banked
  4308  00135A  6F60               	movwf	LCD_String@string& (0+255),b
  4309  00135C  0E03               	movlw	high STR_1
  4310  00135E  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4311  001360  EC4E  F00C         	call	_LCD_String	;wreg free
  4312                           
  4313                           ;Movement.c: 72: SetLine(2);
  4314  001364  0E02               	movlw	2
  4315  001366  ECC1  F00D         	call	_SetLine
  4316                           
  4317                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4318  00136A  0E81               	movlw	low ScanIR@buf
  4319  00136C  0100               	movlb	0	; () banked
  4320  00136E  6F67               	movwf	sprintf@sp& (0+255),b
  4321  001370  0E00               	movlw	high ScanIR@buf
  4322  001372  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  4323  001374  0E0C               	movlw	low (STR_6+1)
  4324  001376  6F69               	movwf	sprintf@f& (0+255),b
  4325  001378  0E03               	movlw	high (STR_6+1)
  4326  00137A  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  4327  00137C  C0AB  F06B         	movff	ScanIR@SensorResult,?_sprintf+4
  4328  001380  C0AC  F06C         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4329  001384  C0AD  F06D         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4330  001388  C0AE  F06E         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4331  00138C  EC81  F007         	call	_sprintf	;wreg free
  4332                           
  4333                           ;Movement.c: 74: LCD_String(buf);
  4334  001390  0E81               	movlw	low ScanIR@buf
  4335  001392  0100               	movlb	0	; () banked
  4336  001394  6F60               	movwf	LCD_String@string& (0+255),b
  4337  001396  0E00               	movlw	high ScanIR@buf
  4338  001398  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4339  00139A  EC4E  F00C         	call	_LCD_String	;wreg free
  4340                           
  4341                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4342                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4343  00139E  0100               	movlb	0	; () banked
  4344  0013A0  51AB               	movf	ScanIR@SensorResult& (0+255),w,b
  4345  0013A2  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4346  0013A4  51AC               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4347  0013A6  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4348  0013A8  B0D8               	btfsc	status,0,c
  4349  0013AA  D008               	goto	l217
  4350                           
  4351                           ; BSR set to: 0
  4352  0013AC  51AD               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4353  0013AE  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4354  0013B0  51AE               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4355  0013B2  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4356  0013B4  B0D8               	btfsc	status,0,c
  4357  0013B6  D002               	goto	l217
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;Movement.c: 80: return 2;
  4361  0013B8  0E02               	movlw	2
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;Movement.c: 81: } else {
  4365                           
  4366                           ; BSR set to: 0
  4367  0013BA  0012               	return	
  4368  0013BC                     l217:
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;Movement.c: 82: stop(mL,mR);
  4372                           
  4373                           ; BSR set to: 0
  4374  0013BC  C07C  F071         	movff	ScanIR@mL,stop@mL
  4375  0013C0  C07D  F072         	movff	ScanIR@mL+1,stop@mL+1
  4376  0013C4  C07E  F073         	movff	ScanIR@mR,stop@mR
  4377  0013C8  C07F  F074         	movff	ScanIR@mR+1,stop@mR+1
  4378  0013CC  EC0E  F00B         	call	_stop	;wreg free
  4379                           
  4380                           ;Movement.c: 83: return 0;
  4381  0013D0  0E00               	movlw	0
  4382  0013D2  0012               	return	
  4383  0013D4                     __end_of_ScanIR:
  4384                           	opt stack 0
  4385                           tblptru	equ	0xFF8
  4386                           prodh	equ	0xFF4
  4387                           prodl	equ	0xFF3
  4388                           intcon	equ	0xFF2
  4389                           postinc0	equ	0xFEE
  4390                           wreg	equ	0xFE8
  4391                           indf1	equ	0xFE7
  4392                           plusw1	equ	0xFE3
  4393                           fsr1h	equ	0xFE2
  4394                           fsr1l	equ	0xFE1
  4395                           indf2	equ	0xFDF
  4396                           postinc2	equ	0xFDE
  4397                           postdec2	equ	0xFDD
  4398                           plusw2	equ	0xFDB
  4399                           fsr2h	equ	0xFDA
  4400                           fsr2l	equ	0xFD9
  4401                           status	equ	0xFD8
  4402                           
  4403 ;; *************** function _stop *****************
  4404 ;; Defined at:
  4405 ;;		line 72 in file "dc_motor.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  4408 ;;		 -> main@mL(9), 
  4409 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  4410 ;;		 -> main@mR(9), 
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;		None
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4422 ;;      Params:         0       4       0       0
  4423 ;;      Locals:         0       0       0       0
  4424 ;;      Temps:          0       0       0       0
  4425 ;;      Totals:         0       4       0       0
  4426 ;;Total ram usage:        4 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    5
  4429 ;; This function calls:
  4430 ;;		_setMotorPWM
  4431 ;; This function is called by:
  4432 ;;		_ScanIR
  4433 ;;		_ScanWithRange
  4434 ;;		_main
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text15
  4439  00161C                     __ptext15:
  4440                           	opt stack 0
  4441  00161C                     _stop:
  4442                           	opt stack 25
  4443                           
  4444                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4445                           
  4446                           ;incstack = 0
  4447  00161C  D028               	goto	l53
  4448  00161E                     
  4449                           ;dc_motor.c: 76: if(mL->power>0){
  4450  00161E  C071  FFD9         	movff	stop@mL,fsr2l
  4451  001622  C072  FFDA         	movff	stop@mL+1,fsr2h
  4452  001626  50DF               	movf	indf2,w,c
  4453  001628  B4D8               	btfsc	status,2,c
  4454  00162A  D005               	goto	l55
  4455                           
  4456                           ;dc_motor.c: 77: mL->power--;
  4457  00162C  C071  FFD9         	movff	stop@mL,fsr2l
  4458  001630  C072  FFDA         	movff	stop@mL+1,fsr2h
  4459  001634  06DF               	decf	indf2,f,c
  4460  001636                     l55:
  4461                           
  4462                           ;dc_motor.c: 78: }
  4463                           ;dc_motor.c: 79: if(mR->power>0){
  4464  001636  C073  FFD9         	movff	stop@mR,fsr2l
  4465  00163A  C074  FFDA         	movff	stop@mR+1,fsr2h
  4466  00163E  50DF               	movf	indf2,w,c
  4467  001640  B4D8               	btfsc	status,2,c
  4468  001642  D005               	goto	l56
  4469                           
  4470                           ;dc_motor.c: 80: mR->power--;
  4471  001644  C073  FFD9         	movff	stop@mR,fsr2l
  4472  001648  C074  FFDA         	movff	stop@mR+1,fsr2h
  4473  00164C  06DF               	decf	indf2,f,c
  4474  00164E                     l56:
  4475                           
  4476                           ;dc_motor.c: 81: }
  4477                           ;dc_motor.c: 82: setMotorPWM(mL);
  4478  00164E  C071  F068         	movff	stop@mL,setMotorPWM@m
  4479  001652  C072  F069         	movff	stop@mL+1,setMotorPWM@m+1
  4480  001656  ECD1  F008         	call	_setMotorPWM	;wreg free
  4481                           
  4482                           ;dc_motor.c: 83: setMotorPWM(mR);
  4483  00165A  C073  F068         	movff	stop@mR,setMotorPWM@m
  4484  00165E  C074  F069         	movff	stop@mR+1,setMotorPWM@m+1
  4485  001662  ECD1  F008         	call	_setMotorPWM	;wreg free
  4486                           
  4487                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4488  001666  0E21               	movlw	33
  4489  001668                     u3417:
  4490  001668  2EE8               	decfsz	wreg,f,c
  4491  00166A  D7FE               	bra	u3417
  4492  00166C  F000               	nop	
  4493  00166E                     l53:
  4494  00166E  C071  FFD9         	movff	stop@mL,fsr2l
  4495  001672  C072  FFDA         	movff	stop@mL+1,fsr2h
  4496  001676  50DF               	movf	indf2,w,c
  4497  001678  A4D8               	btfss	status,2,c
  4498  00167A  D7D1               	goto	l54
  4499  00167C  C073  FFD9         	movff	stop@mR,fsr2l
  4500  001680  C074  FFDA         	movff	stop@mR+1,fsr2h
  4501  001684  50DF               	movf	indf2,w,c
  4502  001686  A4D8               	btfss	status,2,c
  4503  001688  D7CA               	goto	l54
  4504                           
  4505                           ;dc_motor.c: 85: }
  4506                           ;dc_motor.c: 86: mL->direction=1;
  4507  00168A  0100               	movlb	0	; () banked
  4508  00168C  EE20 F001          	lfsr	2,1
  4509  001690  5171               	movf	stop@mL& (0+255),w,b
  4510  001692  26D9               	addwf	fsr2l,f,c
  4511  001694  5172               	movf	(stop@mL+1)& (0+255),w,b
  4512  001696  22DA               	addwfc	fsr2h,f,c
  4513  001698  0E01               	movlw	1
  4514  00169A  6EDF               	movwf	indf2,c
  4515                           
  4516                           ;dc_motor.c: 87: mR->direction=1;
  4517  00169C  EE20 F001          	lfsr	2,1
  4518  0016A0  5173               	movf	stop@mR& (0+255),w,b
  4519  0016A2  26D9               	addwf	fsr2l,f,c
  4520  0016A4  5174               	movf	(stop@mR+1)& (0+255),w,b
  4521  0016A6  22DA               	addwfc	fsr2h,f,c
  4522  0016A8  0E01               	movlw	1
  4523  0016AA  6EDF               	movwf	indf2,c
  4524                           
  4525                           ; BSR set to: 0
  4526  0016AC  0012               	return		;funcret
  4527  0016AE                     __end_of_stop:
  4528                           	opt stack 0
  4529                           tblptru	equ	0xFF8
  4530                           prodh	equ	0xFF4
  4531                           prodl	equ	0xFF3
  4532                           intcon	equ	0xFF2
  4533                           postinc0	equ	0xFEE
  4534                           wreg	equ	0xFE8
  4535                           indf1	equ	0xFE7
  4536                           plusw1	equ	0xFE3
  4537                           fsr1h	equ	0xFE2
  4538                           fsr1l	equ	0xFE1
  4539                           indf2	equ	0xFDF
  4540                           postinc2	equ	0xFDE
  4541                           postdec2	equ	0xFDD
  4542                           plusw2	equ	0xFDB
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function _setMotorPWM *****************
  4548 ;; Defined at:
  4549 ;;		line 31 in file "dc_motor.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;  m               2    8[BANK0 ] PTR struct DC_motor
  4552 ;;		 -> main@mR(9), main@mL(9), 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  PWMduty         2   15[BANK0 ] int 
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      void 
  4557 ;; Registers used:
  4558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4564 ;;      Params:         0       2       0       0
  4565 ;;      Locals:         0       2       0       0
  4566 ;;      Temps:          0       5       0       0
  4567 ;;      Totals:         0       9       0       0
  4568 ;;Total ram usage:        9 bytes
  4569 ;; Hardware stack levels used:    1
  4570 ;; Hardware stack levels required when called:    4
  4571 ;; This function calls:
  4572 ;;		___awdiv
  4573 ;;		___wmul
  4574 ;; This function is called by:
  4575 ;;		_stop
  4576 ;;		_fullSpeed
  4577 ;;		_setMotorFullSpeed
  4578 ;;		_stopMotor
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text16
  4583  0011A2                     __ptext16:
  4584                           	opt stack 0
  4585  0011A2                     _setMotorPWM:
  4586                           	opt stack 24
  4587                           
  4588                           ;dc_motor.c: 33: int PWMduty;
  4589                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;incstack = 0
  4593  0011A2  C068  FFD9         	movff	setMotorPWM@m,fsr2l
  4594  0011A6  C069  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4595  0011AA  50DF               	movf	indf2,w,c
  4596  0011AC  0100               	movlb	0	; () banked
  4597  0011AE  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4598  0011B0  516A               	movf	??_setMotorPWM& (0+255),w,b
  4599  0011B2  6E2C               	movwf	___wmul@multiplier,c
  4600  0011B4  6A2D               	clrf	___wmul@multiplier+1,c
  4601  0011B6  EE20 F007          	lfsr	2,7
  4602  0011BA  5168               	movf	setMotorPWM@m& (0+255),w,b
  4603  0011BC  26D9               	addwf	fsr2l,f,c
  4604  0011BE  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4605  0011C0  22DA               	addwfc	fsr2h,f,c
  4606  0011C2  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  4607  0011C6  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  4608  0011CA  EC07  F00E         	call	___wmul	;wreg free
  4609  0011CE  C02C  F060         	movff	?___wmul,___awdiv@dividend
  4610  0011D2  C02D  F061         	movff	?___wmul+1,___awdiv@dividend+1
  4611  0011D6  0E00               	movlw	0
  4612  0011D8  0100               	movlb	0	; () banked
  4613  0011DA  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4614  0011DC  0E64               	movlw	100
  4615  0011DE  6F62               	movwf	___awdiv@divisor& (0+255),b
  4616  0011E0  EC57  F00B         	call	___awdiv	;wreg free
  4617  0011E4  C060  F06F         	movff	?___awdiv,setMotorPWM@PWMduty
  4618  0011E8  C061  F070         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4619                           
  4620                           ;dc_motor.c: 37: if (m->direction)
  4621  0011EC  0100               	movlb	0	; () banked
  4622  0011EE  EE20 F001          	lfsr	2,1
  4623  0011F2  5168               	movf	setMotorPWM@m& (0+255),w,b
  4624  0011F4  26D9               	addwf	fsr2l,f,c
  4625  0011F6  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4626  0011F8  22DA               	addwfc	fsr2h,f,c
  4627  0011FA  50DF               	movf	indf2,w,c
  4628  0011FC  B4D8               	btfsc	status,2,c
  4629  0011FE  D02D               	goto	l36
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;dc_motor.c: 38: {
  4633                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4634  001200  EE20 F006          	lfsr	2,6
  4635  001204  5168               	movf	setMotorPWM@m& (0+255),w,b
  4636  001206  26D9               	addwf	fsr2l,f,c
  4637  001208  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4638  00120A  22DA               	addwfc	fsr2h,f,c
  4639  00120C  50DF               	movf	indf2,w,c
  4640  00120E  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4641  001210  0E01               	movlw	1
  4642  001212  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4643  001214  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4644  001216  D002               	goto	u2334
  4645  001218                     u2335:
  4646  001218  90D8               	bcf	status,0,c
  4647  00121A  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4648  00121C                     u2334:
  4649  00121C  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4650  00121E  D7FC               	goto	u2335
  4651  001220  0100               	movlb	0	; () banked
  4652  001222  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4653  001224  108A               	iorwf	3978,w,c	;volatile
  4654  001226  6E8A               	movwf	3978,c	;volatile
  4655                           
  4656                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4657  001228  EE20 F007          	lfsr	2,7
  4658  00122C  5168               	movf	setMotorPWM@m& (0+255),w,b
  4659  00122E  26D9               	addwf	fsr2l,f,c
  4660  001230  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4661  001232  22DA               	addwfc	fsr2h,f,c
  4662  001234  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4663  001238  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4664  00123C  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4665  001240  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4666  001244  1F6C               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4667  001246  1F6D               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4668  001248  4B6C               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4669  00124A  2B6D               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4670  00124C  516A               	movf	??_setMotorPWM& (0+255),w,b
  4671  00124E  256C               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4672  001250  6F6F               	movwf	setMotorPWM@PWMduty& (0+255),b
  4673  001252  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4674  001254  216D               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4675  001256  6F70               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4676                           
  4677                           ;dc_motor.c: 41: }
  4678  001258  D015               	goto	l37
  4679  00125A                     l36:
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;dc_motor.c: 42: else
  4683                           ;dc_motor.c: 43: {
  4684                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4685                           
  4686                           ; BSR set to: 0
  4687  00125A  EE20 F006          	lfsr	2,6
  4688  00125E  5168               	movf	setMotorPWM@m& (0+255),w,b
  4689  001260  26D9               	addwf	fsr2l,f,c
  4690  001262  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4691  001264  22DA               	addwfc	fsr2h,f,c
  4692  001266  50DF               	movf	indf2,w,c
  4693  001268  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4694  00126A  0E01               	movlw	1
  4695  00126C  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4696  00126E  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4697  001270  D002               	goto	u2344
  4698  001272                     u2345:
  4699  001272  90D8               	bcf	status,0,c
  4700  001274  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4701  001276                     u2344:
  4702  001276  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4703  001278  D7FC               	goto	u2345
  4704  00127A  0100               	movlb	0	; () banked
  4705  00127C  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4706  00127E  0AFF               	xorlw	255
  4707  001280  148A               	andwf	3978,w,c	;volatile
  4708  001282  6E8A               	movwf	3978,c	;volatile
  4709  001284                     l37:
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;dc_motor.c: 45: }
  4713                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4714  001284  EE20 F002          	lfsr	2,2
  4715  001288  5168               	movf	setMotorPWM@m& (0+255),w,b
  4716  00128A  26D9               	addwf	fsr2l,f,c
  4717  00128C  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4718  00128E  22DA               	addwfc	fsr2h,f,c
  4719  001290  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4720  001294  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4721  001298  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4722  00129C  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4723  0012A0  456F               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4724  0012A2  46E8               	rlncf	wreg,f,c
  4725  0012A4  0BFC               	andlw	252
  4726  0012A6  6EDF               	movwf	indf2,c
  4727                           
  4728                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4729  0012A8  EE20 F004          	lfsr	2,4
  4730  0012AC  5168               	movf	setMotorPWM@m& (0+255),w,b
  4731  0012AE  26D9               	addwf	fsr2l,f,c
  4732  0012B0  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4733  0012B2  22DA               	addwfc	fsr2h,f,c
  4734  0012B4  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4735  0012B8  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4736  0012BC  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4737  0012C0  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4738  0012C4  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4739  0012C8  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4740  0012CC  0E06               	movlw	6
  4741  0012CE  6F6E               	movwf	(??_setMotorPWM+4)& (0+255),b
  4742  0012D0                     u2355:
  4743  0012D0  356D               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  4744  0012D2  336D               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  4745  0012D4  336C               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  4746  0012D6  2F6E               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  4747  0012D8  D7FB               	goto	u2355
  4748  0012DA  516C               	movf	(??_setMotorPWM+2)& (0+255),w,b
  4749  0012DC  6EDF               	movwf	indf2,c
  4750                           
  4751                           ; BSR set to: 0
  4752  0012DE  0012               	return		;funcret
  4753  0012E0                     __end_of_setMotorPWM:
  4754                           	opt stack 0
  4755                           tblptru	equ	0xFF8
  4756                           prodh	equ	0xFF4
  4757                           prodl	equ	0xFF3
  4758                           intcon	equ	0xFF2
  4759                           postinc0	equ	0xFEE
  4760                           wreg	equ	0xFE8
  4761                           indf1	equ	0xFE7
  4762                           plusw1	equ	0xFE3
  4763                           fsr1h	equ	0xFE2
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           plusw2	equ	0xFDB
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function ___awdiv *****************
  4774 ;; Defined at:
  4775 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  dividend        2    0[BANK0 ] int 
  4778 ;;  divisor         2    2[BANK0 ] int 
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;  quotient        2    6[BANK0 ] int 
  4781 ;;  sign            1    5[BANK0 ] unsigned char 
  4782 ;;  counter         1    4[BANK0 ] unsigned char 
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  2    0[BANK0 ] int 
  4785 ;; Registers used:
  4786 ;;		wreg, status,2, status,0
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4792 ;;      Params:         0       4       0       0
  4793 ;;      Locals:         0       4       0       0
  4794 ;;      Temps:          0       0       0       0
  4795 ;;      Totals:         0       8       0       0
  4796 ;;Total ram usage:        8 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; Hardware stack levels required when called:    3
  4799 ;; This function calls:
  4800 ;;		Nothing
  4801 ;; This function is called by:
  4802 ;;		_setMotorPWM
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text17
  4807  0016AE                     __ptext17:
  4808                           	opt stack 0
  4809  0016AE                     ___awdiv:
  4810                           	opt stack 24
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;incstack = 0
  4814  0016AE  0E00               	movlw	0
  4815  0016B0  0100               	movlb	0	; () banked
  4816  0016B2  6F65               	movwf	___awdiv@sign& (0+255),b
  4817                           
  4818                           ; BSR set to: 0
  4819  0016B4  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4820  0016B6  D006               	goto	l666
  4821                           
  4822                           ; BSR set to: 0
  4823  0016B8  6D62               	negf	___awdiv@divisor& (0+255),b
  4824  0016BA  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4825  0016BC  B0D8               	btfsc	status,0,c
  4826  0016BE  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4827                           
  4828                           ; BSR set to: 0
  4829  0016C0  0E01               	movlw	1
  4830  0016C2  6F65               	movwf	___awdiv@sign& (0+255),b
  4831  0016C4                     l666:
  4832                           
  4833                           ; BSR set to: 0
  4834                           
  4835                           ; BSR set to: 0
  4836  0016C4  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4837  0016C6  D006               	goto	l667
  4838                           
  4839                           ; BSR set to: 0
  4840  0016C8  6D60               	negf	___awdiv@dividend& (0+255),b
  4841  0016CA  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4842  0016CC  B0D8               	btfsc	status,0,c
  4843  0016CE  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4844                           
  4845                           ; BSR set to: 0
  4846  0016D0  0E01               	movlw	1
  4847  0016D2  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  4848  0016D4                     l667:
  4849                           
  4850                           ; BSR set to: 0
  4851                           
  4852                           ; BSR set to: 0
  4853  0016D4  0E00               	movlw	0
  4854  0016D6  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  4855  0016D8  0E00               	movlw	0
  4856  0016DA  6F66               	movwf	___awdiv@quotient& (0+255),b
  4857                           
  4858                           ; BSR set to: 0
  4859  0016DC  5162               	movf	___awdiv@divisor& (0+255),w,b
  4860  0016DE  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4861  0016E0  B4D8               	btfsc	status,2,c
  4862  0016E2  D01C               	goto	l674
  4863                           
  4864                           ; BSR set to: 0
  4865  0016E4  0E01               	movlw	1
  4866  0016E6  6F64               	movwf	___awdiv@counter& (0+255),b
  4867  0016E8  D004               	goto	l669
  4868  0016EA                     
  4869                           ; BSR set to: 0
  4870                           
  4871                           ; BSR set to: 0
  4872  0016EA  90D8               	bcf	status,0,c
  4873  0016EC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  4874  0016EE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4875  0016F0  2B64               	incf	___awdiv@counter& (0+255),f,b
  4876  0016F2                     l669:
  4877                           
  4878                           ; BSR set to: 0
  4879                           
  4880                           ; BSR set to: 0
  4881  0016F2  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4882  0016F4  D7FA               	goto	l670
  4883  0016F6                     u1210:
  4884                           
  4885                           ; BSR set to: 0
  4886                           
  4887                           ; BSR set to: 0
  4888                           
  4889                           ; BSR set to: 0
  4890  0016F6  90D8               	bcf	status,0,c
  4891  0016F8  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  4892  0016FA  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4893                           
  4894                           ; BSR set to: 0
  4895  0016FC  5162               	movf	___awdiv@divisor& (0+255),w,b
  4896  0016FE  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  4897  001700  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4898  001702  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4899  001704  A0D8               	btfss	status,0,c
  4900  001706  D005               	goto	l673
  4901                           
  4902                           ; BSR set to: 0
  4903  001708  5162               	movf	___awdiv@divisor& (0+255),w,b
  4904  00170A  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  4905  00170C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4906  00170E  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4907                           
  4908                           ; BSR set to: 0
  4909  001710  8166               	bsf	___awdiv@quotient& (0+255),0,b
  4910  001712                     l673:
  4911                           
  4912                           ; BSR set to: 0
  4913                           
  4914                           ; BSR set to: 0
  4915  001712  90D8               	bcf	status,0,c
  4916  001714  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4917  001716  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  4918                           
  4919                           ; BSR set to: 0
  4920  001718  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  4921  00171A  D7ED               	goto	u1210
  4922  00171C                     l674:
  4923                           
  4924                           ; BSR set to: 0
  4925                           
  4926                           ; BSR set to: 0
  4927                           
  4928                           ; BSR set to: 0
  4929  00171C  5165               	movf	___awdiv@sign& (0+255),w,b
  4930  00171E  B4D8               	btfsc	status,2,c
  4931  001720  D004               	goto	l675
  4932                           
  4933                           ; BSR set to: 0
  4934  001722  6D66               	negf	___awdiv@quotient& (0+255),b
  4935  001724  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4936  001726  B0D8               	btfsc	status,0,c
  4937  001728  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4938  00172A                     l675:
  4939                           
  4940                           ; BSR set to: 0
  4941                           
  4942                           ; BSR set to: 0
  4943  00172A  C066  F060         	movff	___awdiv@quotient,?___awdiv
  4944  00172E  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  4945  001732  0012               	return	
  4946  001734                     __end_of___awdiv:
  4947                           	opt stack 0
  4948                           tblptru	equ	0xFF8
  4949                           prodh	equ	0xFF4
  4950                           prodl	equ	0xFF3
  4951                           intcon	equ	0xFF2
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           indf1	equ	0xFE7
  4955                           plusw1	equ	0xFE3
  4956                           fsr1h	equ	0xFE2
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           plusw2	equ	0xFDB
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _sprintf *****************
  4967 ;; Defined at:
  4968 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  4971 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4972 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  4973 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  tmpval          4    0        struct .
  4976 ;;  cp              3    0        PTR const unsigned char 
  4977 ;;  width           2   25[BANK0 ] int 
  4978 ;;  val             2   22[BANK0 ] unsigned int 
  4979 ;;  ap              2   19[BANK0 ] PTR void [1]
  4980 ;;		 -> ?_sprintf(2), 
  4981 ;;  len             2    0        unsigned int 
  4982 ;;  c               1   27[BANK0 ] char 
  4983 ;;  flag            1   24[BANK0 ] unsigned char 
  4984 ;;  prec            1   21[BANK0 ] char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  2    7[BANK0 ] int 
  4987 ;; Registers used:
  4988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4994 ;;      Params:         0       8       0       0
  4995 ;;      Locals:         0       9       0       0
  4996 ;;      Temps:          0       4       0       0
  4997 ;;      Totals:         0      21       0       0
  4998 ;;Total ram usage:       21 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    4
  5001 ;; This function calls:
  5002 ;;		___lwdiv
  5003 ;;		___lwmod
  5004 ;;		___wmul
  5005 ;;		_isdigit
  5006 ;; This function is called by:
  5007 ;;		_ScanIR
  5008 ;;		_ScanWithRange
  5009 ;;		_main
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text18
  5014  000F02                     __ptext18:
  5015                           	opt stack 0
  5016  000F02                     _sprintf:
  5017                           	opt stack 26
  5018                           
  5019                           ;doprnt.c: 494: va_list ap;
  5020                           ;doprnt.c: 499: signed char c;
  5021                           ;doprnt.c: 501: int width;
  5022                           ;doprnt.c: 506: signed char prec;
  5023                           ;doprnt.c: 508: unsigned char flag;
  5024                           ;doprnt.c: 523: union {
  5025                           ;doprnt.c: 524: unsigned long vd;
  5026                           ;doprnt.c: 525: double integ;
  5027                           ;doprnt.c: 526: } tmpval;
  5028                           ;doprnt.c: 528: unsigned int val;
  5029                           ;doprnt.c: 529: unsigned len;
  5030                           ;doprnt.c: 530: const char * cp;
  5031                           ;doprnt.c: 533: *ap = __va_start();
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;incstack = 0
  5035  000F02  0E6B               	movlw	low (?_sprintf+4)
  5036  000F04  0100               	movlb	0	; () banked
  5037  000F06  6F73               	movwf	sprintf@ap& (0+255),b
  5038  000F08  0E00               	movlw	high (?_sprintf+4)
  5039  000F0A  6F74               	movwf	(sprintf@ap+1)& (0+255),b
  5040                           
  5041                           ;doprnt.c: 536: while(c = *f++) {
  5042  000F0C  D136               	goto	u2830
  5043  000F0E                     
  5044                           ; BSR set to: 0
  5045                           ;doprnt.c: 538: if(c != '%')
  5046                           
  5047                           ; BSR set to: 0
  5048  000F0E  0E25               	movlw	37
  5049  000F10  197B               	xorwf	sprintf@c& (0+255),w,b
  5050  000F12  B4D8               	btfsc	status,2,c
  5051  000F14  D009               	goto	l460
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;doprnt.c: 540: {
  5055                           ;doprnt.c: 541: ((*sp++ = (c)));
  5056  000F16  C067  FFD9         	movff	sprintf@sp,fsr2l
  5057  000F1A  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5058  000F1E  C07B  FFDF         	movff	sprintf@c,indf2
  5059                           
  5060                           ; BSR set to: 0
  5061  000F22  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5062  000F24  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5063                           
  5064                           ;doprnt.c: 542: continue;
  5065  000F26  D129               	goto	u2830
  5066  000F28                     l460:
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;doprnt.c: 543: }
  5070                           ;doprnt.c: 546: width = 0;
  5071                           
  5072                           ; BSR set to: 0
  5073  000F28  0E00               	movlw	0
  5074  000F2A  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5075  000F2C  0E00               	movlw	0
  5076  000F2E  6F79               	movwf	sprintf@width& (0+255),b
  5077                           
  5078                           ;doprnt.c: 548: flag = 0;
  5079  000F30  0E00               	movlw	0
  5080  000F32  6F78               	movwf	sprintf@flag& (0+255),b
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;doprnt.c: 551: switch(*f) {
  5084                           
  5085                           ;doprnt.c: 550: for(;;) {
  5086  000F34  D004               	goto	l462
  5087  000F36                     
  5088                           ;doprnt.c: 580: flag |= 0x04;
  5089                           
  5090                           ; BSR set to: 0
  5091  000F36  0100               	movlb	0	; () banked
  5092  000F38  8578               	bsf	sprintf@flag& (0+255),2,b
  5093                           
  5094                           ;doprnt.c: 581: f++;
  5095  000F3A  4B69               	infsnz	sprintf@f& (0+255),f,b
  5096  000F3C  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5097  000F3E                     l462:
  5098                           
  5099                           ; BSR set to: 0
  5100  000F3E  C069  FFF6         	movff	sprintf@f,tblptrl
  5101  000F42  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5102  000F46                     	if	0	;tblptru may be non-zero
  5103  000F46                     	endif
  5104  000F46                     	if	0	;tblptru may be non-zero
  5105  000F46                     	endif
  5106  000F46  0008               	tblrd		*
  5107  000F48  50F5               	movf	tablat,w,c
  5108                           
  5109                           ; Switch size 1, requested type "space"
  5110                           ; Number of cases is 1, Range of values is 48 to 48
  5111                           ; switch strategies available:
  5112                           ; Name         Instructions Cycles
  5113                           ; simple_byte            4     3 (average)
  5114                           ;	Chosen strategy is simple_byte
  5115  000F4A  0A30               	xorlw	48	; case 48
  5116  000F4C  B4D8               	btfsc	status,2,c
  5117  000F4E  D7F3               	goto	l463
  5118                           
  5119                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5120                           
  5121                           ;doprnt.c: 586: }
  5122                           
  5123                           ;doprnt.c: 585: break;
  5124  000F50  C069  FFF6         	movff	sprintf@f,tblptrl
  5125  000F54  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5126  000F58                     	if	0	;tblptru may be non-zero
  5127  000F58                     	endif
  5128  000F58                     	if	0	;tblptru may be non-zero
  5129  000F58                     	endif
  5130  000F58  0008               	tblrd		*
  5131  000F5A  50F5               	movf	tablat,w,c
  5132  000F5C  EC2B  F00E         	call	_isdigit
  5133  000F60  A0D8               	btfss	status,0,c
  5134  000F62  D034               	goto	l470
  5135                           
  5136                           ;doprnt.c: 598: width = 0;
  5137  000F64  0E00               	movlw	0
  5138  000F66  0100               	movlb	0	; () banked
  5139  000F68  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5140  000F6A  0E00               	movlw	0
  5141  000F6C  6F79               	movwf	sprintf@width& (0+255),b
  5142  000F6E                     
  5143                           ;doprnt.c: 600: width *= 10;
  5144                           
  5145                           ; BSR set to: 0
  5146  000F6E  C079  F02C         	movff	sprintf@width,___wmul@multiplier
  5147  000F72  C07A  F02D         	movff	sprintf@width+1,___wmul@multiplier+1
  5148  000F76  0E00               	movlw	0
  5149  000F78  6E2F               	movwf	___wmul@multiplicand+1,c
  5150  000F7A  0E0A               	movlw	10
  5151  000F7C  6E2E               	movwf	___wmul@multiplicand,c
  5152  000F7E  EC07  F00E         	call	___wmul	;wreg free
  5153  000F82  C02C  F079         	movff	?___wmul,sprintf@width
  5154  000F86  C02D  F07A         	movff	?___wmul+1,sprintf@width+1
  5155                           
  5156                           ;doprnt.c: 601: width += *f++ - '0';
  5157  000F8A  0ED0               	movlw	208
  5158  000F8C  0100               	movlb	0	; () banked
  5159  000F8E  6F6F               	movwf	??_sprintf& (0+255),b
  5160  000F90  0EFF               	movlw	255
  5161  000F92  6F70               	movwf	(??_sprintf+1)& (0+255),b
  5162  000F94  C069  FFF6         	movff	sprintf@f,tblptrl
  5163  000F98  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5164  000F9C                     	if	0	;tblptru may be non-zero
  5165  000F9C                     	endif
  5166  000F9C                     	if	0	;tblptru may be non-zero
  5167  000F9C                     	endif
  5168  000F9C  0008               	tblrd		*
  5169  000F9E  50F5               	movf	tablat,w,c
  5170  000FA0  6F71               	movwf	(??_sprintf+2)& (0+255),b
  5171  000FA2  6B72               	clrf	(??_sprintf+3)& (0+255),b
  5172  000FA4  516F               	movf	??_sprintf& (0+255),w,b
  5173  000FA6  2771               	addwf	(??_sprintf+2)& (0+255),f,b
  5174  000FA8  5170               	movf	(??_sprintf+1)& (0+255),w,b
  5175  000FAA  2372               	addwfc	(??_sprintf+3)& (0+255),f,b
  5176  000FAC  5171               	movf	(??_sprintf+2)& (0+255),w,b
  5177  000FAE  2779               	addwf	sprintf@width& (0+255),f,b
  5178  000FB0  5172               	movf	(??_sprintf+3)& (0+255),w,b
  5179  000FB2  237A               	addwfc	(sprintf@width+1)& (0+255),f,b
  5180                           
  5181                           ; BSR set to: 0
  5182  000FB4  4B69               	infsnz	sprintf@f& (0+255),f,b
  5183  000FB6  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5187  000FB8  C069  FFF6         	movff	sprintf@f,tblptrl
  5188  000FBC  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5189  000FC0                     	if	0	;tblptru may be non-zero
  5190  000FC0                     	endif
  5191  000FC0                     	if	0	;tblptru may be non-zero
  5192  000FC0                     	endif
  5193  000FC0  0008               	tblrd		*
  5194  000FC2  50F5               	movf	tablat,w,c
  5195  000FC4  EC2B  F00E         	call	_isdigit
  5196  000FC8  B0D8               	btfsc	status,0,c
  5197  000FCA  D7D1               	goto	l468
  5198  000FCC                     l470:
  5199  000FCC  C069  FFF6         	movff	sprintf@f,tblptrl
  5200  000FD0  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5201  000FD4  0100               	movlb	0	; () banked
  5202  000FD6  4B69               	infsnz	sprintf@f& (0+255),f,b
  5203  000FD8  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5204  000FDA                     	if	0	;tblptru may be non-zero
  5205  000FDA                     	endif
  5206  000FDA                     	if	0	;tblptru may be non-zero
  5207  000FDA                     	endif
  5208  000FDA  0008               	tblrd		*
  5209  000FDC  CFF5 F07B          	movff	tablat,sprintf@c
  5210  000FE0  517B               	movf	sprintf@c& (0+255),w,b
  5211                           
  5212                           ; Switch size 1, requested type "space"
  5213                           ; Number of cases is 3, Range of values is 0 to 105
  5214                           ; switch strategies available:
  5215                           ; Name         Instructions Cycles
  5216                           ; simple_byte           10     6 (average)
  5217                           ;	Chosen strategy is simple_byte
  5218  000FE2  0A00               	xorlw	0	; case 0
  5219  000FE4  B4D8               	btfsc	status,2,c
  5220  000FE6  D0D6               	goto	u2840
  5221  000FE8  0A64               	xorlw	100	; case 100
  5222  000FEA  B4D8               	btfsc	status,2,c
  5223  000FEC  D003               	goto	l475
  5224  000FEE  0A0D               	xorlw	13	; case 105
  5225  000FF0  A4D8               	btfss	status,2,c
  5226  000FF2  D0C3               	goto	u2830
  5227  000FF4                     l475:
  5228                           
  5229                           ;doprnt.c: 1253: {
  5230                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5231                           
  5232                           ; BSR set to: 0
  5233  000FF4  C073  FFD9         	movff	sprintf@ap,fsr2l
  5234  000FF8  C074  FFDA         	movff	sprintf@ap+1,fsr2h
  5235  000FFC  CFDE F076          	movff	postinc2,sprintf@val
  5236  001000  CFDD F077          	movff	postdec2,sprintf@val+1
  5237  001004  0E02               	movlw	2
  5238  001006  0100               	movlb	0	; () banked
  5239  001008  2773               	addwf	sprintf@ap& (0+255),f,b
  5240  00100A  0E00               	movlw	0
  5241  00100C  2374               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;doprnt.c: 1261: if((int)val < 0) {
  5245  00100E  AF77               	btfss	(sprintf@val+1)& (0+255),7,b
  5246  001010  D006               	goto	l477
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;doprnt.c: 1262: flag |= 0x03;
  5250  001012  0E03               	movlw	3
  5251  001014  1378               	iorwf	sprintf@flag& (0+255),f,b
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;doprnt.c: 1263: val = -val;
  5255  001016  6D76               	negf	sprintf@val& (0+255),b
  5256  001018  1F77               	comf	(sprintf@val+1)& (0+255),f,b
  5257  00101A  B0D8               	btfsc	status,0,c
  5258  00101C  2B77               	incf	(sprintf@val+1)& (0+255),f,b
  5259  00101E                     l477:
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;doprnt.c: 1264: }
  5263                           ;doprnt.c: 1266: }
  5264                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5265                           
  5266                           ; BSR set to: 0
  5267  00101E  0E01               	movlw	1
  5268  001020  6F7B               	movwf	sprintf@c& (0+255),b
  5269  001022                     l3195:
  5270                           
  5271                           ; BSR set to: 0
  5272  001022  0E05               	movlw	5
  5273  001024  197B               	xorwf	sprintf@c& (0+255),w,b
  5274  001026  B4D8               	btfsc	status,2,c
  5275  001028  D012               	goto	u2720
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;doprnt.c: 1306: if(val < dpowers[c])
  5279                           
  5280                           ; BSR set to: 0
  5281                           
  5282                           ; BSR set to: 0
  5283  00102A  517B               	movf	sprintf@c& (0+255),w,b
  5284  00102C  0D02               	mullw	2
  5285  00102E  0E01               	movlw	low _dpowers
  5286  001030  24F3               	addwf	prodl,w,c
  5287  001032  6EF6               	movwf	tblptrl,c
  5288  001034  0E03               	movlw	high _dpowers
  5289  001036  20F4               	addwfc	prodh,w,c
  5290  001038  6EF7               	movwf	tblptrh,c
  5291  00103A                     	if	0	;There are less than 3 active tblptr bytes
  5292  00103A                     	endif
  5293  00103A  0009               	tblrd		*+
  5294  00103C  50F5               	movf	tablat,w,c
  5295  00103E  5D76               	subwf	sprintf@val& (0+255),w,b
  5296  001040  0009               	tblrd		*+
  5297  001042  50F5               	movf	tablat,w,c
  5298  001044  5977               	subwfb	(sprintf@val+1)& (0+255),w,b
  5299  001046  A0D8               	btfss	status,0,c
  5300  001048  D002               	goto	u2720
  5301                           
  5302                           ; BSR set to: 0
  5303                           
  5304                           ; BSR set to: 0
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;doprnt.c: 1307: break;
  5308  00104A  2B7B               	incf	sprintf@c& (0+255),f,b
  5309  00104C  D7EA               	goto	l3195
  5310  00104E                     u2720:
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5314                           
  5315                           ; BSR set to: 0
  5316  00104E  5179               	movf	sprintf@width& (0+255),w,b
  5317  001050  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5318  001052  B4D8               	btfsc	status,2,c
  5319  001054  D009               	goto	l481
  5320                           
  5321                           ; BSR set to: 0
  5322  001056  C078  F06F         	movff	sprintf@flag,??_sprintf
  5323  00105A  0E03               	movlw	3
  5324  00105C  176F               	andwf	??_sprintf& (0+255),f,b
  5325  00105E  B4D8               	btfsc	status,2,c
  5326  001060  D003               	goto	l481
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;doprnt.c: 1346: width--;
  5330  001062  0779               	decf	sprintf@width& (0+255),f,b
  5331  001064  A0D8               	btfss	status,0,c
  5332  001066  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5333  001068                     l481:
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;doprnt.c: 1381: if(width > c)
  5337                           
  5338                           ; BSR set to: 0
  5339  001068  0E80               	movlw	128
  5340  00106A  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5341  00106C  0E7F               	movlw	127
  5342  00106E  6F6F               	movwf	??_sprintf& (0+255),b
  5343  001070  5179               	movf	sprintf@width& (0+255),w,b
  5344  001072  5D7B               	subwf	sprintf@c& (0+255),w,b
  5345  001074  517A               	movf	(sprintf@width+1)& (0+255),w,b
  5346  001076  0A80               	xorlw	128
  5347  001078  596F               	subwfb	??_sprintf& (0+255),w,b
  5348  00107A  B0D8               	btfsc	status,0,c
  5349  00107C  D007               	goto	l482
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;doprnt.c: 1382: width -= c;
  5353  00107E  517B               	movf	sprintf@c& (0+255),w,b
  5354  001080  5F79               	subwf	sprintf@width& (0+255),f,b
  5355  001082  0E00               	movlw	0
  5356  001084  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5357  001086  0EFF               	movlw	255
  5358  001088  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  5359  00108A  D004               	goto	l483
  5360  00108C                     l482:
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;doprnt.c: 1383: else
  5364                           ;doprnt.c: 1384: width = 0;
  5365                           
  5366                           ; BSR set to: 0
  5367  00108C  0E00               	movlw	0
  5368  00108E  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5369  001090  0E00               	movlw	0
  5370  001092  6F79               	movwf	sprintf@width& (0+255),b
  5371  001094                     l483:
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;doprnt.c: 1387: if(flag & 0x04) {
  5375                           
  5376                           ; BSR set to: 0
  5377  001094  A578               	btfss	sprintf@flag& (0+255),2,b
  5378  001096  D01E               	goto	l484
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;doprnt.c: 1392: if(flag & 0x03)
  5382  001098  C078  F06F         	movff	sprintf@flag,??_sprintf
  5383  00109C  0E03               	movlw	3
  5384  00109E  176F               	andwf	??_sprintf& (0+255),f,b
  5385  0010A0  B4D8               	btfsc	status,2,c
  5386  0010A2  D008               	goto	l485
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5390  0010A4  C067  FFD9         	movff	sprintf@sp,fsr2l
  5391  0010A8  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5392  0010AC  0E2D               	movlw	45
  5393  0010AE  6EDF               	movwf	indf2,c
  5394                           
  5395                           ; BSR set to: 0
  5396  0010B0  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5397  0010B2  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5398  0010B4                     l485:
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;doprnt.c: 1415: if(width)
  5402                           
  5403                           ; BSR set to: 0
  5404  0010B4  5179               	movf	sprintf@width& (0+255),w,b
  5405  0010B6  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5406  0010B8  B4D8               	btfsc	status,2,c
  5407  0010BA  D02D               	goto	l493
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5411                           
  5412                           ; BSR set to: 0
  5413                           
  5414                           ;doprnt.c: 1416: do
  5415  0010BC  C067  FFD9         	movff	sprintf@sp,fsr2l
  5416  0010C0  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5417  0010C4  0E30               	movlw	48
  5418  0010C6  6EDF               	movwf	indf2,c
  5419                           
  5420                           ; BSR set to: 0
  5421  0010C8  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5422  0010CA  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;doprnt.c: 1418: while(--width);
  5426  0010CC  0779               	decf	sprintf@width& (0+255),f,b
  5427  0010CE  A0D8               	btfss	status,0,c
  5428  0010D0  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5429  0010D2  D7F0               	goto	l485
  5430  0010D4                     l484:
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;doprnt.c: 1422: {
  5434                           ;doprnt.c: 1424: if(width
  5435                           ;doprnt.c: 1428: )
  5436                           
  5437                           ; BSR set to: 0
  5438  0010D4  5179               	movf	sprintf@width& (0+255),w,b
  5439  0010D6  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5440  0010D8  B4D8               	btfsc	status,2,c
  5441  0010DA  D00F               	goto	u2810
  5442  0010DC                     u2800:
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5446                           
  5447                           ; BSR set to: 0
  5448                           
  5449                           ;doprnt.c: 1429: do
  5450  0010DC  C067  FFD9         	movff	sprintf@sp,fsr2l
  5451  0010E0  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5452  0010E4  0E20               	movlw	32
  5453  0010E6  6EDF               	movwf	indf2,c
  5454                           
  5455                           ; BSR set to: 0
  5456  0010E8  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5457  0010EA  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;doprnt.c: 1431: while(--width);
  5461  0010EC  0779               	decf	sprintf@width& (0+255),f,b
  5462  0010EE  A0D8               	btfss	status,0,c
  5463  0010F0  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5464  0010F2  5179               	movf	sprintf@width& (0+255),w,b
  5465  0010F4  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5466  0010F6  A4D8               	btfss	status,2,c
  5467  0010F8  D7F1               	goto	u2800
  5468  0010FA                     u2810:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 1438: if(flag & 0x03)
  5472                           
  5473                           ; BSR set to: 0
  5474                           
  5475                           ; BSR set to: 0
  5476  0010FA  C078  F06F         	movff	sprintf@flag,??_sprintf
  5477  0010FE  0E03               	movlw	3
  5478  001100  176F               	andwf	??_sprintf& (0+255),f,b
  5479  001102  B4D8               	btfsc	status,2,c
  5480  001104  D008               	goto	l493
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5484  001106  C067  FFD9         	movff	sprintf@sp,fsr2l
  5485  00110A  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5486  00110E  0E2D               	movlw	45
  5487  001110  6EDF               	movwf	indf2,c
  5488                           
  5489                           ; BSR set to: 0
  5490  001112  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5491  001114  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5492  001116                     l493:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;doprnt.c: 1469: }
  5496                           ;doprnt.c: 1472: prec = c;
  5497                           
  5498                           ; BSR set to: 0
  5499                           
  5500                           ; BSR set to: 0
  5501  001116  C07B  F075         	movff	sprintf@c,sprintf@prec
  5502                           
  5503                           ;doprnt.c: 1474: while(prec--) {
  5504  00111A  D02B               	goto	l494
  5505  00111C                     
  5506                           ; BSR set to: 0
  5507                           ;doprnt.c: 1478: {
  5508                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5509                           
  5510                           ; BSR set to: 0
  5511  00111C  5175               	movf	sprintf@prec& (0+255),w,b
  5512  00111E  0D02               	mullw	2
  5513  001120  0E01               	movlw	low _dpowers
  5514  001122  24F3               	addwf	prodl,w,c
  5515  001124  6EF6               	movwf	tblptrl,c
  5516  001126  0E03               	movlw	high _dpowers
  5517  001128  20F4               	addwfc	prodh,w,c
  5518  00112A  6EF7               	movwf	tblptrh,c
  5519  00112C                     	if	0	;There are less than 3 active tblptr bytes
  5520  00112C                     	endif
  5521  00112C  0009               	tblrd		*+
  5522  00112E  CFF5 F02E          	movff	tablat,___lwdiv@divisor
  5523  001132  000A               	tblrd		*-
  5524  001134  CFF5 F02F          	movff	tablat,___lwdiv@divisor+1
  5525  001138  C076  F02C         	movff	sprintf@val,___lwdiv@dividend
  5526  00113C  C077  F02D         	movff	sprintf@val+1,___lwdiv@dividend+1
  5527  001140  ECAB  F00C         	call	___lwdiv	;wreg free
  5528  001144  C02C  F063         	movff	?___lwdiv,___lwmod@dividend
  5529  001148  C02D  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  5530  00114C  0E00               	movlw	0
  5531  00114E  0100               	movlb	0	; () banked
  5532  001150  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  5533  001152  0E0A               	movlw	10
  5534  001154  6F65               	movwf	___lwmod@divisor& (0+255),b
  5535  001156  ECD5  F00C         	call	___lwmod	;wreg free
  5536  00115A  0100               	movlb	0	; () banked
  5537  00115C  5163               	movf	?___lwmod& (0+255),w,b
  5538  00115E  0F30               	addlw	48
  5539  001160  6F7B               	movwf	sprintf@c& (0+255),b
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;doprnt.c: 1523: }
  5543                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5544  001162  C067  FFD9         	movff	sprintf@sp,fsr2l
  5545  001166  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5546  00116A  C07B  FFDF         	movff	sprintf@c,indf2
  5547                           
  5548                           ; BSR set to: 0
  5549  00116E  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5550  001170  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5551  001172                     l494:
  5552                           
  5553                           ; BSR set to: 0
  5554                           
  5555                           ; BSR set to: 0
  5556  001172  0775               	decf	sprintf@prec& (0+255),f,b
  5557  001174  2975               	incf	sprintf@prec& (0+255),w,b
  5558  001176  A4D8               	btfss	status,2,c
  5559  001178  D7D1               	goto	l495
  5560  00117A                     u2830:
  5561                           
  5562                           ; BSR set to: 0
  5563                           
  5564                           ; BSR set to: 0
  5565  00117A  C069  FFF6         	movff	sprintf@f,tblptrl
  5566  00117E  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5567  001182  0100               	movlb	0	; () banked
  5568  001184  4B69               	infsnz	sprintf@f& (0+255),f,b
  5569  001186  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5570  001188                     	if	0	;tblptru may be non-zero
  5571  001188                     	endif
  5572  001188                     	if	0	;tblptru may be non-zero
  5573  001188                     	endif
  5574  001188  0008               	tblrd		*
  5575  00118A  CFF5 F07B          	movff	tablat,sprintf@c
  5576  00118E  517B               	movf	sprintf@c& (0+255),w,b
  5577  001190  A4D8               	btfss	status,2,c
  5578  001192  D6BD               	goto	l459
  5579  001194                     u2840:
  5580                           
  5581                           ;doprnt.c: 1538: *sp = 0;
  5582                           
  5583                           ; BSR set to: 0
  5584                           
  5585                           ;doprnt.c: 1525: }
  5586                           ;doprnt.c: 1533: }
  5587                           ;doprnt.c: 1535: alldone:
  5588                           
  5589                           ; BSR set to: 0
  5590  001194  C067  FFD9         	movff	sprintf@sp,fsr2l
  5591  001198  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5592  00119C  0E00               	movlw	0
  5593  00119E  6EDF               	movwf	indf2,c
  5594  0011A0  0012               	return	
  5595  0011A2                     __end_of_sprintf:
  5596                           	opt stack 0
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           prodh	equ	0xFF4
  5602                           prodl	equ	0xFF3
  5603                           intcon	equ	0xFF2
  5604                           postinc0	equ	0xFEE
  5605                           wreg	equ	0xFE8
  5606                           indf1	equ	0xFE7
  5607                           plusw1	equ	0xFE3
  5608                           fsr1h	equ	0xFE2
  5609                           fsr1l	equ	0xFE1
  5610                           indf2	equ	0xFDF
  5611                           postinc2	equ	0xFDE
  5612                           postdec2	equ	0xFDD
  5613                           plusw2	equ	0xFDB
  5614                           fsr2h	equ	0xFDA
  5615                           fsr2l	equ	0xFD9
  5616                           status	equ	0xFD8
  5617                           
  5618 ;; *************** function _isdigit *****************
  5619 ;; Defined at:
  5620 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  c               1    wreg     unsigned char 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  c               1   45[COMRAM] unsigned char 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;		None               void
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5634 ;;      Params:         0       0       0       0
  5635 ;;      Locals:         2       0       0       0
  5636 ;;      Temps:          1       0       0       0
  5637 ;;      Totals:         3       0       0       0
  5638 ;;Total ram usage:        3 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    3
  5641 ;; This function calls:
  5642 ;;		Nothing
  5643 ;; This function is called by:
  5644 ;;		_sprintf
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text19
  5649  001C56                     __ptext19:
  5650                           	opt stack 0
  5651  001C56                     _isdigit:
  5652                           	opt stack 26
  5653                           
  5654                           ;incstack = 0
  5655                           ;isdigit@c stored from wreg
  5656  001C56  6E2E               	movwf	isdigit@c,c
  5657  001C58  0E00               	movlw	0
  5658  001C5A  6E2D               	movwf	_isdigit$1781,c
  5659  001C5C  0E3A               	movlw	58
  5660  001C5E  602E               	cpfslt	isdigit@c,c
  5661  001C60  D005               	goto	l828
  5662  001C62  0E2F               	movlw	47
  5663  001C64  642E               	cpfsgt	isdigit@c,c
  5664  001C66  D002               	goto	l828
  5665  001C68  0E01               	movlw	1
  5666  001C6A  6E2D               	movwf	_isdigit$1781,c
  5667  001C6C                     l828:
  5668  001C6C  C02D  F02C         	movff	_isdigit$1781,??_isdigit
  5669  001C70  302C               	rrcf	??_isdigit,w,c
  5670  001C72  0012               	return	
  5671  001C74                     __end_of_isdigit:
  5672                           	opt stack 0
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon	equ	0xFF2
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           indf1	equ	0xFE7
  5683                           plusw1	equ	0xFE3
  5684                           fsr1h	equ	0xFE2
  5685                           fsr1l	equ	0xFE1
  5686                           indf2	equ	0xFDF
  5687                           postinc2	equ	0xFDE
  5688                           postdec2	equ	0xFDD
  5689                           plusw2	equ	0xFDB
  5690                           fsr2h	equ	0xFDA
  5691                           fsr2l	equ	0xFD9
  5692                           status	equ	0xFD8
  5693                           
  5694 ;; *************** function ___wmul *****************
  5695 ;; Defined at:
  5696 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;  multiplier      2   43[COMRAM] unsigned int 
  5699 ;;  multiplicand    2   45[COMRAM] unsigned int 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;  product         2   47[COMRAM] unsigned int 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  2   43[COMRAM] unsigned int 
  5704 ;; Registers used:
  5705 ;;		wreg, status,2, status,0, prodl, prodh
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5711 ;;      Params:         4       0       0       0
  5712 ;;      Locals:         2       0       0       0
  5713 ;;      Temps:          0       0       0       0
  5714 ;;      Totals:         6       0       0       0
  5715 ;;Total ram usage:        6 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    3
  5718 ;; This function calls:
  5719 ;;		Nothing
  5720 ;; This function is called by:
  5721 ;;		_setMotorPWM
  5722 ;;		_sprintf
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           	psect	text20
  5727  001C0E                     __ptext20:
  5728                           	opt stack 0
  5729  001C0E                     ___wmul:
  5730                           	opt stack 24
  5731                           
  5732                           ;incstack = 0
  5733  001C0E  502C               	movf	___wmul@multiplier,w,c
  5734  001C10  022E               	mulwf	___wmul@multiplicand,c
  5735  001C12  CFF3 F030          	movff	prodl,___wmul@product
  5736  001C16  CFF4 F031          	movff	prodh,___wmul@product+1
  5737  001C1A  502C               	movf	___wmul@multiplier,w,c
  5738  001C1C  022F               	mulwf	___wmul@multiplicand+1,c
  5739  001C1E  50F3               	movf	prodl,w,c
  5740  001C20  2631               	addwf	___wmul@product+1,f,c
  5741  001C22  502D               	movf	___wmul@multiplier+1,w,c
  5742  001C24  022E               	mulwf	___wmul@multiplicand,c
  5743  001C26  50F3               	movf	prodl,w,c
  5744  001C28  2631               	addwf	___wmul@product+1,f,c
  5745  001C2A  C030  F02C         	movff	___wmul@product,?___wmul
  5746  001C2E  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  5747  001C32  0012               	return	
  5748  001C34                     __end_of___wmul:
  5749                           	opt stack 0
  5750                           tblptru	equ	0xFF8
  5751                           tblptrh	equ	0xFF7
  5752                           tblptrl	equ	0xFF6
  5753                           tablat	equ	0xFF5
  5754                           prodh	equ	0xFF4
  5755                           prodl	equ	0xFF3
  5756                           intcon	equ	0xFF2
  5757                           postinc0	equ	0xFEE
  5758                           wreg	equ	0xFE8
  5759                           indf1	equ	0xFE7
  5760                           plusw1	equ	0xFE3
  5761                           fsr1h	equ	0xFE2
  5762                           fsr1l	equ	0xFE1
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           postdec2	equ	0xFDD
  5766                           plusw2	equ	0xFDB
  5767                           fsr2h	equ	0xFDA
  5768                           fsr2l	equ	0xFD9
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function ___lwmod *****************
  5772 ;; Defined at:
  5773 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  dividend        2    3[BANK0 ] unsigned int 
  5776 ;;  divisor         2    5[BANK0 ] unsigned int 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  counter         1   47[COMRAM] unsigned char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;                  2    3[BANK0 ] unsigned int 
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5788 ;;      Params:         0       4       0       0
  5789 ;;      Locals:         1       0       0       0
  5790 ;;      Temps:          0       0       0       0
  5791 ;;      Totals:         1       4       0       0
  5792 ;;Total ram usage:        5 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    3
  5795 ;; This function calls:
  5796 ;;		Nothing
  5797 ;; This function is called by:
  5798 ;;		_sprintf
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text21
  5803  0019AA                     __ptext21:
  5804                           	opt stack 0
  5805  0019AA                     ___lwmod:
  5806                           	opt stack 26
  5807                           
  5808                           ;incstack = 0
  5809  0019AA  0100               	movlb	0	; () banked
  5810  0019AC  5165               	movf	___lwmod@divisor& (0+255),w,b
  5811  0019AE  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5812  0019B0  B4D8               	btfsc	status,2,c
  5813  0019B2  D018               	goto	l922
  5814                           
  5815                           ; BSR set to: 0
  5816  0019B4  0E01               	movlw	1
  5817  0019B6  6E30               	movwf	___lwmod@counter,c
  5818  0019B8  D004               	goto	l917
  5819  0019BA                     
  5820                           ; BSR set to: 0
  5821                           
  5822                           ; BSR set to: 0
  5823  0019BA  90D8               	bcf	status,0,c
  5824  0019BC  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  5825  0019BE  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5826  0019C0  2A30               	incf	___lwmod@counter,f,c
  5827  0019C2                     l917:
  5828                           
  5829                           ; BSR set to: 0
  5830                           
  5831                           ; BSR set to: 0
  5832  0019C2  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5833  0019C4  D7FA               	goto	l918
  5834  0019C6                     u1460:
  5835                           
  5836                           ; BSR set to: 0
  5837                           
  5838                           ; BSR set to: 0
  5839                           
  5840                           ; BSR set to: 0
  5841  0019C6  5165               	movf	___lwmod@divisor& (0+255),w,b
  5842  0019C8  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  5843  0019CA  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5844  0019CC  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5845  0019CE  A0D8               	btfss	status,0,c
  5846  0019D0  D004               	goto	l921
  5847                           
  5848                           ; BSR set to: 0
  5849  0019D2  5165               	movf	___lwmod@divisor& (0+255),w,b
  5850  0019D4  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  5851  0019D6  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5852  0019D8  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5853  0019DA                     l921:
  5854                           
  5855                           ; BSR set to: 0
  5856                           
  5857                           ; BSR set to: 0
  5858  0019DA  90D8               	bcf	status,0,c
  5859  0019DC  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5860  0019DE  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  5861                           
  5862                           ; BSR set to: 0
  5863  0019E0  2E30               	decfsz	___lwmod@counter,f,c
  5864  0019E2  D7F1               	goto	u1460
  5865  0019E4                     l922:
  5866                           
  5867                           ; BSR set to: 0
  5868                           
  5869                           ; BSR set to: 0
  5870  0019E4  C063  F063         	movff	___lwmod@dividend,?___lwmod
  5871  0019E8  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  5872                           
  5873                           ; BSR set to: 0
  5874  0019EC  0012               	return		;funcret
  5875  0019EE                     __end_of___lwmod:
  5876                           	opt stack 0
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           prodh	equ	0xFF4
  5882                           prodl	equ	0xFF3
  5883                           intcon	equ	0xFF2
  5884                           postinc0	equ	0xFEE
  5885                           wreg	equ	0xFE8
  5886                           indf1	equ	0xFE7
  5887                           plusw1	equ	0xFE3
  5888                           fsr1h	equ	0xFE2
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           plusw2	equ	0xFDB
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function ___lwdiv *****************
  5899 ;; Defined at:
  5900 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;  dividend        2   43[COMRAM] unsigned int 
  5903 ;;  divisor         2   45[COMRAM] unsigned int 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  quotient        2    1[BANK0 ] unsigned int 
  5906 ;;  counter         1    0[BANK0 ] unsigned char 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  2   43[COMRAM] unsigned int 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5916 ;;      Params:         4       0       0       0
  5917 ;;      Locals:         0       3       0       0
  5918 ;;      Temps:          0       0       0       0
  5919 ;;      Totals:         4       3       0       0
  5920 ;;Total ram usage:        7 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    3
  5923 ;; This function calls:
  5924 ;;		Nothing
  5925 ;; This function is called by:
  5926 ;;		_sprintf
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text22
  5931  001956                     __ptext22:
  5932                           	opt stack 0
  5933  001956                     ___lwdiv:
  5934                           	opt stack 26
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;incstack = 0
  5938  001956  0E00               	movlw	0
  5939  001958  0100               	movlb	0	; () banked
  5940  00195A  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5941  00195C  0E00               	movlw	0
  5942  00195E  6F61               	movwf	___lwdiv@quotient& (0+255),b
  5943                           
  5944                           ; BSR set to: 0
  5945  001960  502E               	movf	___lwdiv@divisor,w,c
  5946  001962  102F               	iorwf	___lwdiv@divisor+1,w,c
  5947  001964  B4D8               	btfsc	status,2,c
  5948  001966  D01C               	goto	l912
  5949                           
  5950                           ; BSR set to: 0
  5951  001968  0E01               	movlw	1
  5952  00196A  6F60               	movwf	___lwdiv@counter& (0+255),b
  5953  00196C  D004               	goto	l907
  5954  00196E                     
  5955                           ; BSR set to: 0
  5956                           
  5957                           ; BSR set to: 0
  5958  00196E  90D8               	bcf	status,0,c
  5959  001970  362E               	rlcf	___lwdiv@divisor,f,c
  5960  001972  362F               	rlcf	___lwdiv@divisor+1,f,c
  5961  001974  2B60               	incf	___lwdiv@counter& (0+255),f,b
  5962  001976                     l907:
  5963                           
  5964                           ; BSR set to: 0
  5965                           
  5966                           ; BSR set to: 0
  5967  001976  AE2F               	btfss	___lwdiv@divisor+1,7,c
  5968  001978  D7FA               	goto	l908
  5969  00197A                     u2490:
  5970                           
  5971                           ; BSR set to: 0
  5972                           
  5973                           ; BSR set to: 0
  5974                           
  5975                           ; BSR set to: 0
  5976  00197A  90D8               	bcf	status,0,c
  5977  00197C  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  5978  00197E  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5979                           
  5980                           ; BSR set to: 0
  5981  001980  502E               	movf	___lwdiv@divisor,w,c
  5982  001982  5C2C               	subwf	___lwdiv@dividend,w,c
  5983  001984  502F               	movf	___lwdiv@divisor+1,w,c
  5984  001986  582D               	subwfb	___lwdiv@dividend+1,w,c
  5985  001988  A0D8               	btfss	status,0,c
  5986  00198A  D005               	goto	l911
  5987                           
  5988                           ; BSR set to: 0
  5989  00198C  502E               	movf	___lwdiv@divisor,w,c
  5990  00198E  5E2C               	subwf	___lwdiv@dividend,f,c
  5991  001990  502F               	movf	___lwdiv@divisor+1,w,c
  5992  001992  5A2D               	subwfb	___lwdiv@dividend+1,f,c
  5993                           
  5994                           ; BSR set to: 0
  5995  001994  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  5996  001996                     l911:
  5997                           
  5998                           ; BSR set to: 0
  5999                           
  6000                           ; BSR set to: 0
  6001  001996  90D8               	bcf	status,0,c
  6002  001998  322F               	rrcf	___lwdiv@divisor+1,f,c
  6003  00199A  322E               	rrcf	___lwdiv@divisor,f,c
  6004                           
  6005                           ; BSR set to: 0
  6006  00199C  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  6007  00199E  D7ED               	goto	u2490
  6008  0019A0                     l912:
  6009                           
  6010                           ; BSR set to: 0
  6011                           
  6012                           ; BSR set to: 0
  6013  0019A0  C061  F02C         	movff	___lwdiv@quotient,?___lwdiv
  6014  0019A4  C062  F02D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6015                           
  6016                           ; BSR set to: 0
  6017  0019A8  0012               	return		;funcret
  6018  0019AA                     __end_of___lwdiv:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           intcon	equ	0xFF2
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           indf1	equ	0xFE7
  6030                           plusw1	equ	0xFE3
  6031                           fsr1h	equ	0xFE2
  6032                           fsr1l	equ	0xFE1
  6033                           indf2	equ	0xFDF
  6034                           postinc2	equ	0xFDE
  6035                           postdec2	equ	0xFDD
  6036                           plusw2	equ	0xFDB
  6037                           fsr2h	equ	0xFDA
  6038                           fsr2l	equ	0xFD9
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function _grabRightIR *****************
  6042 ;; Defined at:
  6043 ;;		line 74 in file "IR_Reading.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6048 ;;  i               1    2[BANK0 ] unsigned char 
  6049 ;; Return value:  Size  Location     Type
  6050 ;;                  2   43[COMRAM] unsigned int 
  6051 ;; Registers used:
  6052 ;;		wreg, status,2, status,0
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6058 ;;      Params:         2       0       0       0
  6059 ;;      Locals:         0       3       0       0
  6060 ;;      Temps:          3       0       0       0
  6061 ;;      Totals:         5       3       0       0
  6062 ;;Total ram usage:        8 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    3
  6065 ;; This function calls:
  6066 ;;		Nothing
  6067 ;; This function is called by:
  6068 ;;		_ScanIR
  6069 ;;		_ScanWithRange
  6070 ;;		_main
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text23
  6075  0017B0                     __ptext23:
  6076                           	opt stack 0
  6077  0017B0                     _grabRightIR:
  6078                           	opt stack 27
  6079                           
  6080                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;incstack = 0
  6084  0017B0  0E00               	movlw	0
  6085  0017B2  0100               	movlb	0	; () banked
  6086  0017B4  6F61               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  6087  0017B6  0E00               	movlw	0
  6088  0017B8  6F60               	movwf	grabRightIR@IR_signal& (0+255),b
  6089                           
  6090                           ;IR_Reading.c: 77: unsigned char i=0;
  6091  0017BA  0E00               	movlw	0
  6092  0017BC  6F62               	movwf	grabRightIR@i& (0+255),b
  6093                           
  6094                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6095  0017BE  0E00               	movlw	0
  6096  0017C0  6F62               	movwf	grabRightIR@i& (0+255),b
  6097  0017C2                     l3101:
  6098                           
  6099                           ; BSR set to: 0
  6100  0017C2  0E03               	movlw	3
  6101  0017C4  6562               	cpfsgt	grabRightIR@i& (0+255),b
  6102  0017C6  D001               	goto	l110
  6103  0017C8  D01F               	goto	u2570
  6104  0017CA                     l110:
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6108                           
  6109                           ; BSR set to: 0
  6110  0017CA  5069               	movf	3945,w,c	;volatile
  6111  0017CC  6E2E               	movwf	??_grabRightIR& (0+255),c
  6112  0017CE  6A2F               	clrf	(??_grabRightIR+1)& (0+255),c
  6113  0017D0  0E07               	movlw	7
  6114  0017D2                     u2565:
  6115  0017D2  90D8               	bcf	status,0,c
  6116  0017D4  362E               	rlcf	??_grabRightIR,f,c
  6117  0017D6  362F               	rlcf	??_grabRightIR+1,f,c
  6118  0017D8  2EE8               	decfsz	wreg,f,c
  6119  0017DA  D7FB               	goto	u2565
  6120  0017DC  CF68 F030          	movff	3944,??_grabRightIR+2	;volatile
  6121  0017E0  90D8               	bcf	status,0,c
  6122  0017E2  3230               	rrcf	??_grabRightIR+2,f,c
  6123  0017E4  5030               	movf	??_grabRightIR+2,w,c
  6124  0017E6  122E               	iorwf	??_grabRightIR,f,c
  6125  0017E8  0E00               	movlw	0
  6126  0017EA  122F               	iorwf	??_grabRightIR+1,f,c
  6127  0017EC  502E               	movf	??_grabRightIR,w,c
  6128  0017EE  2760               	addwf	grabRightIR@IR_signal& (0+255),f,b
  6129  0017F0  502F               	movf	??_grabRightIR+1,w,c
  6130  0017F2  2361               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6134  0017F4  0E82               	movlw	130
  6135  0017F6  6E2E               	movwf	??_grabRightIR& (0+255),c
  6136  0017F8  0EDE               	movlw	222
  6137  0017FA                     u3427:
  6138  0017FA  2EE8               	decfsz	wreg,f,c
  6139  0017FC  D7FE               	bra	u3427
  6140  0017FE  2E2E               	decfsz	??_grabRightIR& (0+255),f,c
  6141  001800  D7FC               	bra	u3427
  6142  001802  0100               	movlb	0	; () banked
  6143  001804  2B62               	incf	grabRightIR@i& (0+255),f,b
  6144  001806  D7DD               	goto	l3101
  6145  001808                     u2570:
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;IR_Reading.c: 83: }
  6149                           ;IR_Reading.c: 85: return IR_signal>>2;
  6150                           
  6151                           ; BSR set to: 0
  6152  001808  C060  F02E         	movff	grabRightIR@IR_signal,??_grabRightIR
  6153  00180C  C061  F02F         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6154  001810  90D8               	bcf	status,0,c
  6155  001812  322F               	rrcf	??_grabRightIR+1,f,c
  6156  001814  322E               	rrcf	??_grabRightIR,f,c
  6157  001816  90D8               	bcf	status,0,c
  6158  001818  322F               	rrcf	??_grabRightIR+1,f,c
  6159  00181A  322E               	rrcf	??_grabRightIR,f,c
  6160  00181C  C02E  F02C         	movff	??_grabRightIR,?_grabRightIR
  6161  001820  C02F  F02D         	movff	??_grabRightIR+1,?_grabRightIR+1
  6162  001824  0012               	return	
  6163  001826                     __end_of_grabRightIR:
  6164                           	opt stack 0
  6165                           tblptru	equ	0xFF8
  6166                           tblptrh	equ	0xFF7
  6167                           tblptrl	equ	0xFF6
  6168                           tablat	equ	0xFF5
  6169                           prodh	equ	0xFF4
  6170                           prodl	equ	0xFF3
  6171                           intcon	equ	0xFF2
  6172                           postinc0	equ	0xFEE
  6173                           wreg	equ	0xFE8
  6174                           indf1	equ	0xFE7
  6175                           plusw1	equ	0xFE3
  6176                           fsr1h	equ	0xFE2
  6177                           fsr1l	equ	0xFE1
  6178                           indf2	equ	0xFDF
  6179                           postinc2	equ	0xFDE
  6180                           postdec2	equ	0xFDD
  6181                           plusw2	equ	0xFDB
  6182                           fsr2h	equ	0xFDA
  6183                           fsr2l	equ	0xFD9
  6184                           status	equ	0xFD8
  6185                           
  6186 ;; *************** function _grabLeftIR *****************
  6187 ;; Defined at:
  6188 ;;		line 90 in file "IR_Reading.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;		None
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6193 ;;  i               1    2[BANK0 ] unsigned char 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  2   43[COMRAM] unsigned int 
  6196 ;; Registers used:
  6197 ;;		wreg, status,2, status,0
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6203 ;;      Params:         2       0       0       0
  6204 ;;      Locals:         0       3       0       0
  6205 ;;      Temps:          3       0       0       0
  6206 ;;      Totals:         5       3       0       0
  6207 ;;Total ram usage:        8 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    3
  6210 ;; This function calls:
  6211 ;;		Nothing
  6212 ;; This function is called by:
  6213 ;;		_ScanIR
  6214 ;;		_ScanWithRange
  6215 ;;		_main
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text24
  6220  001826                     __ptext24:
  6221                           	opt stack 0
  6222  001826                     _grabLeftIR:
  6223                           	opt stack 27
  6224                           
  6225                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;incstack = 0
  6229  001826  0E00               	movlw	0
  6230  001828  0100               	movlb	0	; () banked
  6231  00182A  6F61               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  6232  00182C  0E00               	movlw	0
  6233  00182E  6F60               	movwf	grabLeftIR@IR_signal& (0+255),b
  6234                           
  6235                           ;IR_Reading.c: 93: unsigned char i=0;
  6236  001830  0E00               	movlw	0
  6237  001832  6F62               	movwf	grabLeftIR@i& (0+255),b
  6238                           
  6239                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6240  001834  0E00               	movlw	0
  6241  001836  6F62               	movwf	grabLeftIR@i& (0+255),b
  6242  001838                     l3117:
  6243                           
  6244                           ; BSR set to: 0
  6245  001838  0E03               	movlw	3
  6246  00183A  6562               	cpfsgt	grabLeftIR@i& (0+255),b
  6247  00183C  D001               	goto	l115
  6248  00183E  D01F               	goto	u2600
  6249  001840                     l115:
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6253                           
  6254                           ; BSR set to: 0
  6255  001840  5067               	movf	3943,w,c	;volatile
  6256  001842  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6257  001844  6A2F               	clrf	(??_grabLeftIR+1)& (0+255),c
  6258  001846  0E07               	movlw	7
  6259  001848                     u2595:
  6260  001848  90D8               	bcf	status,0,c
  6261  00184A  362E               	rlcf	??_grabLeftIR,f,c
  6262  00184C  362F               	rlcf	??_grabLeftIR+1,f,c
  6263  00184E  2EE8               	decfsz	wreg,f,c
  6264  001850  D7FB               	goto	u2595
  6265  001852  CF66 F030          	movff	3942,??_grabLeftIR+2	;volatile
  6266  001856  90D8               	bcf	status,0,c
  6267  001858  3230               	rrcf	??_grabLeftIR+2,f,c
  6268  00185A  5030               	movf	??_grabLeftIR+2,w,c
  6269  00185C  122E               	iorwf	??_grabLeftIR,f,c
  6270  00185E  0E00               	movlw	0
  6271  001860  122F               	iorwf	??_grabLeftIR+1,f,c
  6272  001862  502E               	movf	??_grabLeftIR,w,c
  6273  001864  2760               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  6274  001866  502F               	movf	??_grabLeftIR+1,w,c
  6275  001868  2361               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6279  00186A  0E82               	movlw	130
  6280  00186C  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6281  00186E  0EDE               	movlw	222
  6282  001870                     u3437:
  6283  001870  2EE8               	decfsz	wreg,f,c
  6284  001872  D7FE               	bra	u3437
  6285  001874  2E2E               	decfsz	??_grabLeftIR& (0+255),f,c
  6286  001876  D7FC               	bra	u3437
  6287  001878  0100               	movlb	0	; () banked
  6288  00187A  2B62               	incf	grabLeftIR@i& (0+255),f,b
  6289  00187C  D7DD               	goto	l3117
  6290  00187E                     u2600:
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;IR_Reading.c: 99: }
  6294                           ;IR_Reading.c: 101: return IR_signal>>2;
  6295                           
  6296                           ; BSR set to: 0
  6297  00187E  C060  F02E         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6298  001882  C061  F02F         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6299  001886  90D8               	bcf	status,0,c
  6300  001888  322F               	rrcf	??_grabLeftIR+1,f,c
  6301  00188A  322E               	rrcf	??_grabLeftIR,f,c
  6302  00188C  90D8               	bcf	status,0,c
  6303  00188E  322F               	rrcf	??_grabLeftIR+1,f,c
  6304  001890  322E               	rrcf	??_grabLeftIR,f,c
  6305  001892  C02E  F02C         	movff	??_grabLeftIR,?_grabLeftIR
  6306  001896  C02F  F02D         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6307  00189A  0012               	return	
  6308  00189C                     __end_of_grabLeftIR:
  6309                           	opt stack 0
  6310                           tblptru	equ	0xFF8
  6311                           tblptrh	equ	0xFF7
  6312                           tblptrl	equ	0xFF6
  6313                           tablat	equ	0xFF5
  6314                           prodh	equ	0xFF4
  6315                           prodl	equ	0xFF3
  6316                           intcon	equ	0xFF2
  6317                           postinc0	equ	0xFEE
  6318                           wreg	equ	0xFE8
  6319                           indf1	equ	0xFE7
  6320                           plusw1	equ	0xFE3
  6321                           fsr1h	equ	0xFE2
  6322                           fsr1l	equ	0xFE1
  6323                           indf2	equ	0xFDF
  6324                           postinc2	equ	0xFDE
  6325                           postdec2	equ	0xFDD
  6326                           plusw2	equ	0xFDB
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _SetLine *****************
  6332 ;; Defined at:
  6333 ;;		line 74 in file "LCD.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  line            1    wreg     unsigned char 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  line            1    0[BANK0 ] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		wreg, status,2, status,0, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6347 ;;      Params:         0       0       0       0
  6348 ;;      Locals:         0       1       0       0
  6349 ;;      Temps:          0       0       0       0
  6350 ;;      Totals:         0       1       0       0
  6351 ;;Total ram usage:        1 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    6
  6354 ;; This function calls:
  6355 ;;		_SendLCD
  6356 ;; This function is called by:
  6357 ;;		_ScanIR
  6358 ;;		_ScanWithRange
  6359 ;;		_main
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           	psect	text25
  6364  001B82                     __ptext25:
  6365                           	opt stack 0
  6366  001B82                     _SetLine:
  6367                           	opt stack 24
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;incstack = 0
  6371                           ;SetLine@line stored from wreg
  6372  001B82  0100               	movlb	0	; () banked
  6373  001B84  6F60               	movwf	SetLine@line& (0+255),b
  6374                           
  6375                           ;LCD.c: 75: if (line==1) {
  6376  001B86  0100               	movlb	0	; () banked
  6377  001B88  0560               	decf	SetLine@line& (0+255),w,b
  6378  001B8A  A4D8               	btfss	status,2,c
  6379  001B8C  D006               	goto	l152
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;LCD.c: 76: SendLCD(0x80,0);
  6383  001B8E  0E00               	movlw	0
  6384  001B90  6E30               	movwf	SendLCD@type,c
  6385  001B92  0E80               	movlw	128
  6386  001B94  ECDC  F00D         	call	_SendLCD
  6387                           
  6388                           ;LCD.c: 77: } else if (line==2) {
  6389  001B98  D00A               	goto	l154
  6390  001B9A                     l152:
  6391  001B9A  0E02               	movlw	2
  6392  001B9C  0100               	movlb	0	; () banked
  6393  001B9E  1960               	xorwf	SetLine@line& (0+255),w,b
  6394  001BA0  A4D8               	btfss	status,2,c
  6395  001BA2  D005               	goto	l154
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;LCD.c: 78: SendLCD(0xC0,0);
  6399  001BA4  0E00               	movlw	0
  6400  001BA6  6E30               	movwf	SendLCD@type,c
  6401  001BA8  0EC0               	movlw	192
  6402  001BAA  ECDC  F00D         	call	_SendLCD
  6403  001BAE                     l154:
  6404                           
  6405                           ;LCD.c: 79: }
  6406                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6407  001BAE  0E21               	movlw	33
  6408  001BB0                     u3447:
  6409  001BB0  2EE8               	decfsz	wreg,f,c
  6410  001BB2  D7FE               	bra	u3447
  6411  001BB4  F000               	nop	
  6412  001BB6  0012               	return		;funcret
  6413  001BB8                     __end_of_SetLine:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           intcon	equ	0xFF2
  6422                           postinc0	equ	0xFEE
  6423                           wreg	equ	0xFE8
  6424                           indf1	equ	0xFE7
  6425                           plusw1	equ	0xFE3
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           plusw2	equ	0xFDB
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function _LCD_String *****************
  6437 ;; Defined at:
  6438 ;;		line 83 in file "LCD.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  string          2    0[BANK0 ] PTR unsigned char 
  6441 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  6442 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6443 ;;		 -> STR_1(12), 
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;		None
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      void 
  6448 ;; Registers used:
  6449 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6455 ;;      Params:         0       2       0       0
  6456 ;;      Locals:         0       0       0       0
  6457 ;;      Temps:          0       0       0       0
  6458 ;;      Totals:         0       2       0       0
  6459 ;;Total ram usage:        2 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    6
  6462 ;; This function calls:
  6463 ;;		_SendLCD
  6464 ;; This function is called by:
  6465 ;;		_ScanIR
  6466 ;;		_ScanWithRange
  6467 ;;		_main
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           	psect	text26
  6472  00189C                     __ptext26:
  6473                           	opt stack 0
  6474  00189C                     _LCD_String:
  6475                           	opt stack 23
  6476                           
  6477                           ;LCD.c: 85: while(*string != 0){
  6478                           
  6479                           ;incstack = 0
  6480  00189C  D01B               	goto	l158
  6481  00189E                     
  6482                           ;LCD.c: 88: SendLCD(*string++,1);
  6483  00189E  0E01               	movlw	1
  6484  0018A0  6E30               	movwf	SendLCD@type,c
  6485  0018A2  C060  FFF6         	movff	LCD_String@string,tblptrl
  6486  0018A6  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6487  0018AA  6AF8               	clrf	tblptru,c
  6488  0018AC  0E02               	movlw	(high __ramtop+-1)
  6489  0018AE  64F7               	cpfsgt	tblptrh,c
  6490  0018B0  D003               	bra	u2637
  6491  0018B2  0008               	tblrd		*
  6492  0018B4  50F5               	movf	tablat,w,c
  6493  0018B6  D005               	bra	u2630
  6494  0018B8                     u2637:
  6495  0018B8  CFF6 FFE9          	movff	tblptrl,fsr0l
  6496  0018BC  CFF7 FFEA          	movff	tblptrh,fsr0h
  6497  0018C0  50EF               	movf	indf0,w,c
  6498  0018C2                     u2630:
  6499  0018C2  ECDC  F00D         	call	_SendLCD
  6500  0018C6  0100               	movlb	0	; () banked
  6501  0018C8  4B60               	infsnz	LCD_String@string& (0+255),f,b
  6502  0018CA  2B61               	incf	(LCD_String@string+1)& (0+255),f,b
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6506  0018CC  0E21               	movlw	33
  6507  0018CE                     u3457:
  6508  0018CE  2EE8               	decfsz	wreg,f,c
  6509  0018D0  D7FE               	bra	u3457
  6510  0018D2  F000               	nop	
  6511  0018D4                     l158:
  6512  0018D4  C060  FFF6         	movff	LCD_String@string,tblptrl
  6513  0018D8  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6514  0018DC  6AF8               	clrf	tblptru,c
  6515  0018DE  0E02               	movlw	(high __ramtop+-1)
  6516  0018E0  64F7               	cpfsgt	tblptrh,c
  6517  0018E2  D003               	bra	u2647
  6518  0018E4  0008               	tblrd		*
  6519  0018E6  50F5               	movf	tablat,w,c
  6520  0018E8  D005               	bra	u2640
  6521  0018EA                     u2647:
  6522  0018EA  CFF6 FFE9          	movff	tblptrl,fsr0l
  6523  0018EE  CFF7 FFEA          	movff	tblptrh,fsr0h
  6524  0018F2  50EF               	movf	indf0,w,c
  6525  0018F4                     u2640:
  6526  0018F4  0900               	iorlw	0
  6527  0018F6  B4D8               	btfsc	status,2,c
  6528  0018F8  0012               	return	
  6529  0018FA  D7D1               	goto	l159
  6530  0018FC                     __end_of_LCD_String:
  6531                           	opt stack 0
  6532                           tblptru	equ	0xFF8
  6533                           tblptrh	equ	0xFF7
  6534                           tblptrl	equ	0xFF6
  6535                           tablat	equ	0xFF5
  6536                           prodh	equ	0xFF4
  6537                           prodl	equ	0xFF3
  6538                           intcon	equ	0xFF2
  6539                           indf0	equ	0xFEF
  6540                           postinc0	equ	0xFEE
  6541                           fsr0h	equ	0xFEA
  6542                           fsr0l	equ	0xFE9
  6543                           wreg	equ	0xFE8
  6544                           indf1	equ	0xFE7
  6545                           plusw1	equ	0xFE3
  6546                           fsr1h	equ	0xFE2
  6547                           fsr1l	equ	0xFE1
  6548                           indf2	equ	0xFDF
  6549                           postinc2	equ	0xFDE
  6550                           postdec2	equ	0xFDD
  6551                           plusw2	equ	0xFDB
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _SendLCD *****************
  6557 ;; Defined at:
  6558 ;;		line 27 in file "LCD.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  Byte            1    wreg     unsigned char 
  6561 ;;  type            1   47[COMRAM] unsigned char 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  Byte            1   48[COMRAM] unsigned char 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      void 
  6566 ;; Registers used:
  6567 ;;		wreg, status,2, status,0, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6573 ;;      Params:         1       0       0       0
  6574 ;;      Locals:         1       0       0       0
  6575 ;;      Temps:          0       0       0       0
  6576 ;;      Totals:         2       0       0       0
  6577 ;;Total ram usage:        2 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    5
  6580 ;; This function calls:
  6581 ;;		_LCDout
  6582 ;; This function is called by:
  6583 ;;		_initLCD
  6584 ;;		_SetLine
  6585 ;;		_LCD_String
  6586 ;;		_ScanIR
  6587 ;;		_ScanWithRange
  6588 ;;		_main
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text27
  6593  001BB8                     __ptext27:
  6594                           	opt stack 0
  6595  001BB8                     _SendLCD:
  6596                           	opt stack 24
  6597                           
  6598                           ;incstack = 0
  6599                           ;SendLCD@Byte stored from wreg
  6600  001BB8  6E31               	movwf	SendLCD@Byte,c
  6601                           
  6602                           ;LCD.c: 30: LATAbits.LATA6=type;
  6603  001BBA  B030               	btfsc	SendLCD@type,0,c
  6604  001BBC  D002               	bra	u2475
  6605  001BBE  9C89               	bcf	3977,6,c	;volatile
  6606  001BC0  D001               	bra	u2476
  6607  001BC2                     u2475:
  6608  001BC2  8C89               	bsf	3977,6,c	;volatile
  6609  001BC4                     u2476:
  6610                           
  6611                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6612  001BC4  3831               	swapf	SendLCD@Byte,w,c
  6613  001BC6  0B0F               	andlw	15
  6614  001BC8  0B0F               	andlw	15
  6615  001BCA  ECEA  F009         	call	_LCDout
  6616                           
  6617                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6618  001BCE  0E06               	movlw	6
  6619  001BD0                     u3467:
  6620  001BD0  2EE8               	decfsz	wreg,f,c
  6621  001BD2  D7FE               	bra	u3467
  6622  001BD4  D000               	nop2	
  6623                           
  6624                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6625  001BD6  5031               	movf	SendLCD@Byte,w,c
  6626  001BD8  0B0F               	andlw	15
  6627  001BDA  ECEA  F009         	call	_LCDout
  6628                           
  6629                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6630  001BDE  0E21               	movlw	33
  6631  001BE0                     u3477:
  6632  001BE0  2EE8               	decfsz	wreg,f,c
  6633  001BE2  D7FE               	bra	u3477
  6634  001BE4  F000               	nop	
  6635  001BE6  0012               	return		;funcret
  6636  001BE8                     __end_of_SendLCD:
  6637                           	opt stack 0
  6638                           tblptru	equ	0xFF8
  6639                           tblptrh	equ	0xFF7
  6640                           tblptrl	equ	0xFF6
  6641                           tablat	equ	0xFF5
  6642                           prodh	equ	0xFF4
  6643                           prodl	equ	0xFF3
  6644                           intcon	equ	0xFF2
  6645                           indf0	equ	0xFEF
  6646                           postinc0	equ	0xFEE
  6647                           fsr0h	equ	0xFEA
  6648                           fsr0l	equ	0xFE9
  6649                           wreg	equ	0xFE8
  6650                           indf1	equ	0xFE7
  6651                           plusw1	equ	0xFE3
  6652                           fsr1h	equ	0xFE2
  6653                           fsr1l	equ	0xFE1
  6654                           indf2	equ	0xFDF
  6655                           postinc2	equ	0xFDE
  6656                           postdec2	equ	0xFDD
  6657                           plusw2	equ	0xFDB
  6658                           fsr2h	equ	0xFDA
  6659                           fsr2l	equ	0xFD9
  6660                           status	equ	0xFD8
  6661                           
  6662 ;; *************** function _LCDout *****************
  6663 ;; Defined at:
  6664 ;;		line 14 in file "LCD.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;  number          1    wreg     unsigned char 
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  number          1   46[COMRAM] unsigned char 
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      void 
  6671 ;; Registers used:
  6672 ;;		wreg, status,2, status,0, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6678 ;;      Params:         0       0       0       0
  6679 ;;      Locals:         1       0       0       0
  6680 ;;      Temps:          3       0       0       0
  6681 ;;      Totals:         4       0       0       0
  6682 ;;Total ram usage:        4 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    4
  6685 ;; This function calls:
  6686 ;;		_E_TOG
  6687 ;; This function is called by:
  6688 ;;		_SendLCD
  6689 ;;		_initLCD
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text28
  6694  0013D4                     __ptext28:
  6695                           	opt stack 0
  6696  0013D4                     _LCDout:
  6697                           	opt stack 24
  6698                           
  6699                           ;incstack = 0
  6700                           ;LCDout@number stored from wreg
  6701  0013D4  6E2F               	movwf	LCDout@number,c
  6702                           
  6703                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6704  0013D6  502F               	movf	LCDout@number,w,c
  6705  0013D8  6E2C               	movwf	??_LCDout& (0+255),c
  6706  0013DA  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6707  0013DC  0E07               	movlw	7
  6708  0013DE                     u2365:
  6709  0013DE  90D8               	bcf	status,0,c
  6710  0013E0  362C               	rlcf	??_LCDout,f,c
  6711  0013E2  362D               	rlcf	??_LCDout+1,f,c
  6712  0013E4  2EE8               	decfsz	wreg,f,c
  6713  0013E6  D7FB               	goto	u2365
  6714  0013E8  0E07               	movlw	7
  6715  0013EA  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6716  0013EC                     u2375:
  6717  0013EC  342D               	rlcf	??_LCDout+1,w,c
  6718  0013EE  322D               	rrcf	??_LCDout+1,f,c
  6719  0013F0  322C               	rrcf	??_LCDout,f,c
  6720  0013F2  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6721  0013F4  D7FB               	goto	u2375
  6722  0013F6  462C               	rlncf	??_LCDout,f,c
  6723  0013F8  508B               	movf	3979,w,c	;volatile
  6724  0013FA  182C               	xorwf	??_LCDout,w,c
  6725  0013FC  0BFD               	andlw	-3
  6726  0013FE  182C               	xorwf	??_LCDout,w,c
  6727  001400  6E8B               	movwf	3979,c	;volatile
  6728                           
  6729                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6730  001402  502F               	movf	LCDout@number,w,c
  6731  001404  6E2C               	movwf	??_LCDout& (0+255),c
  6732  001406  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6733  001408  0E06               	movlw	6
  6734  00140A                     u2385:
  6735  00140A  90D8               	bcf	status,0,c
  6736  00140C  362C               	rlcf	??_LCDout,f,c
  6737  00140E  362D               	rlcf	??_LCDout+1,f,c
  6738  001410  2EE8               	decfsz	wreg,f,c
  6739  001412  D7FB               	goto	u2385
  6740  001414  0E07               	movlw	7
  6741  001416  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6742  001418                     u2395:
  6743  001418  342D               	rlcf	??_LCDout+1,w,c
  6744  00141A  322D               	rrcf	??_LCDout+1,f,c
  6745  00141C  322C               	rrcf	??_LCDout,f,c
  6746  00141E  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6747  001420  D7FB               	goto	u2395
  6748  001422  462C               	rlncf	??_LCDout,f,c
  6749  001424  462C               	rlncf	??_LCDout,f,c
  6750  001426  508B               	movf	3979,w,c	;volatile
  6751  001428  182C               	xorwf	??_LCDout,w,c
  6752  00142A  0BFB               	andlw	-5
  6753  00142C  182C               	xorwf	??_LCDout,w,c
  6754  00142E  6E8B               	movwf	3979,c	;volatile
  6755                           
  6756                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6757  001430  502F               	movf	LCDout@number,w,c
  6758  001432  6E2C               	movwf	??_LCDout& (0+255),c
  6759  001434  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6760  001436  0E05               	movlw	5
  6761  001438                     u2405:
  6762  001438  90D8               	bcf	status,0,c
  6763  00143A  362C               	rlcf	??_LCDout,f,c
  6764  00143C  362D               	rlcf	??_LCDout+1,f,c
  6765  00143E  2EE8               	decfsz	wreg,f,c
  6766  001440  D7FB               	goto	u2405
  6767  001442  0E07               	movlw	7
  6768  001444  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6769  001446                     u2415:
  6770  001446  342D               	rlcf	??_LCDout+1,w,c
  6771  001448  322D               	rrcf	??_LCDout+1,f,c
  6772  00144A  322C               	rrcf	??_LCDout,f,c
  6773  00144C  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6774  00144E  D7FB               	goto	u2415
  6775  001450  508C               	movf	3980,w,c	;volatile
  6776  001452  182C               	xorwf	??_LCDout,w,c
  6777  001454  0BFE               	andlw	-2
  6778  001456  182C               	xorwf	??_LCDout,w,c
  6779  001458  6E8C               	movwf	3980,c	;volatile
  6780                           
  6781                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6782  00145A  502F               	movf	LCDout@number,w,c
  6783  00145C  6E2C               	movwf	??_LCDout& (0+255),c
  6784  00145E  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6785  001460  3A2C               	swapf	??_LCDout,f,c
  6786  001462  3A2D               	swapf	??_LCDout+1,f,c
  6787  001464  0EF0               	movlw	240
  6788  001466  162D               	andwf	??_LCDout+1,f,c
  6789  001468  502C               	movf	??_LCDout,w,c
  6790  00146A  0B0F               	andlw	15
  6791  00146C  122D               	iorwf	??_LCDout+1,f,c
  6792  00146E  0EF0               	movlw	240
  6793  001470  162C               	andwf	??_LCDout,f,c
  6794  001472  0E07               	movlw	7
  6795  001474  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6796  001476                     u2425:
  6797  001476  342D               	rlcf	??_LCDout+1,w,c
  6798  001478  322D               	rrcf	??_LCDout+1,f,c
  6799  00147A  322C               	rrcf	??_LCDout,f,c
  6800  00147C  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6801  00147E  D7FB               	goto	u2425
  6802  001480  462C               	rlncf	??_LCDout,f,c
  6803  001482  508C               	movf	3980,w,c	;volatile
  6804  001484  182C               	xorwf	??_LCDout,w,c
  6805  001486  0BFD               	andlw	-3
  6806  001488  182C               	xorwf	??_LCDout,w,c
  6807  00148A  6E8C               	movwf	3980,c	;volatile
  6808                           
  6809                           ;LCD.c: 21: E_TOG();
  6810  00148C  EC52  F00E         	call	_E_TOG	;wreg free
  6811                           
  6812                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6813  001490  0E03               	movlw	3
  6814  001492                     u3487:
  6815  001492  2EE8               	decfsz	wreg,f,c
  6816  001494  D7FE               	bra	u3487
  6817  001496  F000               	nop	
  6818  001498  0012               	return		;funcret
  6819  00149A                     __end_of_LCDout:
  6820                           	opt stack 0
  6821                           tblptru	equ	0xFF8
  6822                           tblptrh	equ	0xFF7
  6823                           tblptrl	equ	0xFF6
  6824                           tablat	equ	0xFF5
  6825                           prodh	equ	0xFF4
  6826                           prodl	equ	0xFF3
  6827                           intcon	equ	0xFF2
  6828                           indf0	equ	0xFEF
  6829                           postinc0	equ	0xFEE
  6830                           fsr0h	equ	0xFEA
  6831                           fsr0l	equ	0xFE9
  6832                           wreg	equ	0xFE8
  6833                           indf1	equ	0xFE7
  6834                           plusw1	equ	0xFE3
  6835                           fsr1h	equ	0xFE2
  6836                           fsr1l	equ	0xFE1
  6837                           indf2	equ	0xFDF
  6838                           postinc2	equ	0xFDE
  6839                           postdec2	equ	0xFDD
  6840                           plusw2	equ	0xFDB
  6841                           fsr2h	equ	0xFDA
  6842                           fsr2l	equ	0xFD9
  6843                           status	equ	0xFD8
  6844                           
  6845 ;; *************** function _E_TOG *****************
  6846 ;; Defined at:
  6847 ;;		line 5 in file "LCD.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;		None
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      void 
  6854 ;; Registers used:
  6855 ;;		wreg
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/0
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6861 ;;      Params:         0       0       0       0
  6862 ;;      Locals:         0       0       0       0
  6863 ;;      Temps:          0       0       0       0
  6864 ;;      Totals:         0       0       0       0
  6865 ;;Total ram usage:        0 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    3
  6868 ;; This function calls:
  6869 ;;		Nothing
  6870 ;; This function is called by:
  6871 ;;		_LCDout
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           	psect	text29
  6876  001CA4                     __ptext29:
  6877                           	opt stack 0
  6878  001CA4                     _E_TOG:
  6879                           	opt stack 24
  6880                           
  6881                           ;LCD.c: 8: LATCbits.LATC0=1;
  6882                           
  6883                           ;incstack = 0
  6884  001CA4  808B               	bsf	3979,0,c	;volatile
  6885                           
  6886                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6887  001CA6  0E03               	movlw	3
  6888  001CA8                     u3497:
  6889  001CA8  2EE8               	decfsz	wreg,f,c
  6890  001CAA  D7FE               	bra	u3497
  6891  001CAC  F000               	nop	
  6892                           
  6893                           ;LCD.c: 10: LATCbits.LATC0=0;
  6894  001CAE  908B               	bcf	3979,0,c	;volatile
  6895  001CB0  0012               	return		;funcret
  6896  001CB2                     __end_of_E_TOG:
  6897                           	opt stack 0
  6898                           tblptru	equ	0xFF8
  6899                           tblptrh	equ	0xFF7
  6900                           tblptrl	equ	0xFF6
  6901                           tablat	equ	0xFF5
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           intcon	equ	0xFF2
  6905                           indf0	equ	0xFEF
  6906                           postinc0	equ	0xFEE
  6907                           fsr0h	equ	0xFEA
  6908                           fsr0l	equ	0xFE9
  6909                           wreg	equ	0xFE8
  6910                           indf1	equ	0xFE7
  6911                           plusw1	equ	0xFE3
  6912                           fsr1h	equ	0xFE2
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           plusw2	equ	0xFDB
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function _InterruptHandlerLow *****************
  6923 ;; Defined at:
  6924 ;;		line 18 in file "main.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      void 
  6931 ;; Registers used:
  6932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6938 ;;      Params:         0       0       0       0
  6939 ;;      Locals:         0       0       0       0
  6940 ;;      Temps:         21       0       0       0
  6941 ;;      Totals:        21       0       0       0
  6942 ;;Total ram usage:       21 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    2
  6945 ;; This function calls:
  6946 ;;		Nothing
  6947 ;; This function is called by:
  6948 ;;		Interrupt level 1
  6949 ;; This function uses a non-reentrant model
  6950 ;;
  6951                           
  6952                           	psect	intcodelo
  6953  000018                     __pintcodelo:
  6954                           	opt stack 0
  6955  000018                     _InterruptHandlerLow:
  6956                           	opt stack 23
  6957                           
  6958                           ;incstack = 0
  6959  000018  8034               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6960  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  6961  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  6962  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  6963  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  6964  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  6965  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  6966  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  6967  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  6968  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  6969  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  6970  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  6971  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  6972  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  6973  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  6974  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  6975  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  6976  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  6977  00005E  C034  F028         	movff	btemp,??_InterruptHandlerLow+17
  6978  000062  C035  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  6979  000066  C036  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  6980  00006A  C037  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  6981                           
  6982                           ;main.c: 20: if (PIR1bits.RCIF) {
  6983  00006E  AA9E               	btfss	3998,5,c	;volatile
  6984  000070  D016               	goto	i1l373
  6985                           
  6986                           ;main.c: 21: ReceivedString[i]=RCREG;
  6987  000072  5033               	movf	_i,w,c	;volatile
  6988  000074  0D01               	mullw	1
  6989  000076  0EE6               	movlw	low _ReceivedString
  6990  000078  24F3               	addwf	prodl,w,c
  6991  00007A  6ED9               	movwf	fsr2l,c
  6992  00007C  0E01               	movlw	high _ReceivedString
  6993  00007E  20F4               	addwfc	prodh,w,c
  6994  000080  6EDA               	movwf	fsr2h,c
  6995  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  6996                           
  6997                           ;main.c: 22: RFID_Read=1;
  6998  000086  0E01               	movlw	1
  6999  000088  0101               	movlb	1	; () banked
  7000  00008A  6FF8               	movwf	_RFID_Read& (0+255),b	;volatile
  7001                           
  7002                           ; BSR set to: 1
  7003                           ;main.c: 23: if (i==15){
  7004  00008C  0E0F               	movlw	15
  7005  00008E  1833               	xorwf	_i,w,c	;volatile
  7006  000090  A4D8               	btfss	status,2,c
  7007  000092  D003               	goto	i1l374
  7008                           
  7009                           ; BSR set to: 1
  7010                           ;main.c: 24: i=0;
  7011  000094  0E00               	movlw	0
  7012  000096  6E33               	movwf	_i,c	;volatile
  7013                           
  7014                           ;main.c: 25: }else{
  7015  000098  D001               	goto	i1l375
  7016  00009A                     i1l374:
  7017                           
  7018                           ; BSR set to: 1
  7019                           ;main.c: 26: i++;
  7020                           
  7021                           ; BSR set to: 1
  7022  00009A  2A33               	incf	_i,f,c	;volatile
  7023  00009C                     i1l375:
  7024                           
  7025                           ; BSR set to: 1
  7026                           ;main.c: 27: }
  7027                           ;main.c: 28: PIR1bits.RCIF=0;
  7028                           
  7029                           ; BSR set to: 1
  7030  00009C  9A9E               	bcf	3998,5,c	;volatile
  7031  00009E                     i1l373:
  7032                           
  7033                           ; BSR set to: 1
  7034  00009E  C02B  F037         	movff	??_InterruptHandlerLow+20,btemp+3
  7035  0000A2  C02A  F036         	movff	??_InterruptHandlerLow+19,btemp+2
  7036  0000A6  C029  F035         	movff	??_InterruptHandlerLow+18,btemp+1
  7037  0000AA  C028  F034         	movff	??_InterruptHandlerLow+17,btemp
  7038  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  7039  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  7040  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  7041  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  7042  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  7043  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  7044  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  7045  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  7046  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  7047  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  7048  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  7049  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  7050  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7051  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7052  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7053  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7054  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  7055  0000F2  9034               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7056  0000F4  0010               	retfie	
  7057  0000F6                     __end_of_InterruptHandlerLow:
  7058                           	opt stack 0
  7059                           pclatu	equ	0xFFB
  7060                           pclath	equ	0xFFA
  7061                           tblptru	equ	0xFF8
  7062                           tblptrh	equ	0xFF7
  7063                           tblptrl	equ	0xFF6
  7064                           tablat	equ	0xFF5
  7065                           prodh	equ	0xFF4
  7066                           prodl	equ	0xFF3
  7067                           intcon	equ	0xFF2
  7068                           indf0	equ	0xFEF
  7069                           postinc0	equ	0xFEE
  7070                           fsr0h	equ	0xFEA
  7071                           fsr0l	equ	0xFE9
  7072                           wreg	equ	0xFE8
  7073                           indf1	equ	0xFE7
  7074                           plusw1	equ	0xFE3
  7075                           fsr1h	equ	0xFE2
  7076                           fsr1l	equ	0xFE1
  7077                           bsr	equ	0xFE0
  7078                           indf2	equ	0xFDF
  7079                           postinc2	equ	0xFDE
  7080                           postdec2	equ	0xFDD
  7081                           plusw2	equ	0xFDB
  7082                           fsr2h	equ	0xFDA
  7083                           fsr2l	equ	0xFD9
  7084                           status	equ	0xFD8
  7085                           
  7086 ;; *************** function _InterruptHandlerHigh *****************
  7087 ;; Defined at:
  7088 ;;		line 34 in file "main.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;		None
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;		None
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7097 ;; Tracked objects:
  7098 ;;		On entry : 0/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7102 ;;      Params:         0       0       0       0
  7103 ;;      Locals:         0       0       0       0
  7104 ;;      Temps:         18       0       0       0
  7105 ;;      Totals:        18       0       0       0
  7106 ;;Total ram usage:       18 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:    1
  7109 ;; This function calls:
  7110 ;;		i2_delay_tenth_s
  7111 ;; This function is called by:
  7112 ;;		Interrupt level 2
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	intcode
  7117  000008                     __pintcode:
  7118                           	opt stack 0
  7119  000008                     _InterruptHandlerHigh:
  7120                           	opt stack 23
  7121                           
  7122                           ;incstack = 0
  7123  000008  8234               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7124  00000A  EFAF  F00A         	goto	int_func
  7125                           pclatu	equ	0xFFB
  7126                           pclath	equ	0xFFA
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           prodh	equ	0xFF4
  7132                           prodl	equ	0xFF3
  7133                           intcon	equ	0xFF2
  7134                           indf0	equ	0xFEF
  7135                           postinc0	equ	0xFEE
  7136                           fsr0h	equ	0xFEA
  7137                           fsr0l	equ	0xFE9
  7138                           wreg	equ	0xFE8
  7139                           indf1	equ	0xFE7
  7140                           plusw1	equ	0xFE3
  7141                           fsr1h	equ	0xFE2
  7142                           fsr1l	equ	0xFE1
  7143                           bsr	equ	0xFE0
  7144                           indf2	equ	0xFDF
  7145                           postinc2	equ	0xFDE
  7146                           postdec2	equ	0xFDD
  7147                           plusw2	equ	0xFDB
  7148                           fsr2h	equ	0xFDA
  7149                           fsr2l	equ	0xFD9
  7150                           status	equ	0xFD8
  7151                           
  7152                           	psect	intcode_body
  7153  00155E                     __pintcode_body:
  7154                           	opt stack 23
  7155  00155E                     int_func:
  7156                           	opt stack 23
  7157  00155E  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7158  001562  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7159  001566  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7160  00156A  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7161  00156E  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7162  001572  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7163  001576  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7164  00157A  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7165  00157E  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7166  001582  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7167  001586  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7168  00158A  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7169  00158E  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7170  001592  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7171  001596  C034  F013         	movff	btemp,??_InterruptHandlerHigh+14
  7172  00159A  C035  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  7173  00159E  C036  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  7174  0015A2  C037  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  7175                           
  7176                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7177  0015A6  A2F2               	btfss	intcon,1,c	;volatile
  7178  0015A8  D00D               	goto	i2l381
  7179                           
  7180                           ;main.c: 36: if (mode==-1) {
  7181  0015AA  2832               	incf	_mode,w,c	;volatile
  7182  0015AC  A4D8               	btfss	status,2,c
  7183  0015AE  D003               	goto	i2l382
  7184                           
  7185                           ;main.c: 38: mode=1;
  7186  0015B0  0E01               	movlw	1
  7187  0015B2  6E32               	movwf	_mode,c	;volatile
  7188                           
  7189                           ;main.c: 39: } else if (mode==0) {
  7190  0015B4  D003               	goto	i2l385
  7191  0015B6                     i2l382:
  7192  0015B6  5032               	movf	_mode,w,c	;volatile
  7193  0015B8  A4D8               	btfss	status,2,c
  7194                           
  7195                           ;main.c: 43: mode=-1;
  7196                           
  7197                           ;main.c: 41: } else {
  7198  0015BA  6832               	setf	_mode,c	;volatile
  7199  0015BC                     i2l385:
  7200                           
  7201                           ;main.c: 44: }
  7202                           ;main.c: 46: delay_tenth_s(2);
  7203  0015BC  0E02               	movlw	2
  7204  0015BE  EC8A  F00D         	call	i2_delay_tenth_s
  7205                           
  7206                           ;main.c: 47: INTCONbits.INT0IF=0;
  7207  0015C2  92F2               	bcf	intcon,1,c	;volatile
  7208  0015C4                     i2l381:
  7209                           
  7210                           ;main.c: 48: }
  7211                           ;main.c: 49: if (INTCONbits.TMR0IF) {
  7212  0015C4  A4F2               	btfss	intcon,2,c	;volatile
  7213  0015C6  D004               	goto	i2l386
  7214                           
  7215                           ;main.c: 50: millis++;
  7216  0015C8  0101               	movlb	1	; () banked
  7217  0015CA  4BF6               	infsnz	_millis& (0+255),f,b	;volatile
  7218  0015CC  2BF7               	incf	(_millis+1)& (0+255),f,b	;volatile
  7219                           
  7220                           ; BSR set to: 1
  7221                           ;main.c: 51: INTCONbits.TMR0IF = 0;
  7222  0015CE  94F2               	bcf	intcon,2,c	;volatile
  7223  0015D0                     i2l386:
  7224                           
  7225                           ; BSR set to: 1
  7226  0015D0  C016  F037         	movff	??_InterruptHandlerHigh+17,btemp+3
  7227  0015D4  C015  F036         	movff	??_InterruptHandlerHigh+16,btemp+2
  7228  0015D8  C014  F035         	movff	??_InterruptHandlerHigh+15,btemp+1
  7229  0015DC  C013  F034         	movff	??_InterruptHandlerHigh+14,btemp
  7230  0015E0  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7231  0015E4  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7232  0015E8  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7233  0015EC  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7234  0015F0  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7235  0015F4  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7236  0015F8  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7237  0015FC  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7238  001600  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7239  001604  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7240  001608  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7241  00160C  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7242  001610  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7243  001614  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7244  001618  9234               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7245  00161A  0011               	retfie		f
  7246  00161C                     __end_of_InterruptHandlerHigh:
  7247                           	opt stack 0
  7248                           pclatu	equ	0xFFB
  7249                           pclath	equ	0xFFA
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           intcon	equ	0xFF2
  7257                           indf0	equ	0xFEF
  7258                           postinc0	equ	0xFEE
  7259                           fsr0h	equ	0xFEA
  7260                           fsr0l	equ	0xFE9
  7261                           wreg	equ	0xFE8
  7262                           indf1	equ	0xFE7
  7263                           plusw1	equ	0xFE3
  7264                           fsr1h	equ	0xFE2
  7265                           fsr1l	equ	0xFE1
  7266                           bsr	equ	0xFE0
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           plusw2	equ	0xFDB
  7271                           fsr2h	equ	0xFDA
  7272                           fsr2l	equ	0xFD9
  7273                           status	equ	0xFD8
  7274                           
  7275 ;; *************** function i2_delay_tenth_s *****************
  7276 ;; Defined at:
  7277 ;;		line 32 in file "Movement.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  tenth_second    1    wreg     unsigned char 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7282 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  1    wreg      void 
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7292 ;;      Params:         0       0       0       0
  7293 ;;      Locals:         3       0       0       0
  7294 ;;      Temps:          1       0       0       0
  7295 ;;      Totals:         4       0       0       0
  7296 ;;Total ram usage:        4 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; This function calls:
  7299 ;;		Nothing
  7300 ;; This function is called by:
  7301 ;;		_InterruptHandlerHigh
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text32
  7306  001B14                     __ptext32:
  7307                           	opt stack 0
  7308  001B14                     i2_delay_tenth_s:
  7309                           	opt stack 23
  7310                           
  7311                           ;incstack = 0
  7312                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7313  001B14  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7314                           
  7315                           ;Movement.c: 33: unsigned int i=0;
  7316  001B16  0E00               	movlw	0
  7317  001B18  6E04               	movwf	i2delay_tenth_s@i+1,c
  7318  001B1A  0E00               	movlw	0
  7319  001B1C  6E03               	movwf	i2delay_tenth_s@i,c
  7320                           
  7321                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7322  001B1E  0E00               	movlw	0
  7323  001B20  6E04               	movwf	i2delay_tenth_s@i+1,c
  7324  001B22  0E01               	movlw	1
  7325  001B24  6E03               	movwf	i2delay_tenth_s@i,c
  7326  001B26  D009               	goto	i2l209
  7327  001B28                     
  7328                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7329  001B28  0E82               	movlw	130
  7330  001B2A  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7331  001B2C  0EDE               	movlw	222
  7332  001B2E                     i2u350_47:
  7333  001B2E  2EE8               	decfsz	wreg,f,c
  7334  001B30  D7FE               	bra	i2u350_47
  7335  001B32  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7336  001B34  D7FC               	bra	i2u350_47
  7337  001B36  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7338  001B38  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7339  001B3A                     i2l209:
  7340  001B3A  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7341  001B3C  0D02               	mullw	2
  7342  001B3E  5003               	movf	i2delay_tenth_s@i,w,c
  7343  001B40  5CF3               	subwf	prodl,w,c
  7344  001B42  5004               	movf	i2delay_tenth_s@i+1,w,c
  7345  001B44  58F4               	subwfb	prodh,w,c
  7346  001B46  A0D8               	btfss	status,0,c
  7347  001B48  0012               	return	
  7348  001B4A  D7EE               	goto	i2l210
  7349  001B4C                     __end_ofi2_delay_tenth_s:
  7350                           	opt stack 0
  7351                           pclatu	equ	0xFFB
  7352                           pclath	equ	0xFFA
  7353                           tblptru	equ	0xFF8
  7354                           tblptrh	equ	0xFF7
  7355                           tblptrl	equ	0xFF6
  7356                           tablat	equ	0xFF5
  7357                           prodh	equ	0xFF4
  7358                           prodl	equ	0xFF3
  7359                           intcon	equ	0xFF2
  7360                           indf0	equ	0xFEF
  7361                           postinc0	equ	0xFEE
  7362                           fsr0h	equ	0xFEA
  7363                           fsr0l	equ	0xFE9
  7364                           wreg	equ	0xFE8
  7365                           indf1	equ	0xFE7
  7366                           plusw1	equ	0xFE3
  7367                           fsr1h	equ	0xFE2
  7368                           fsr1l	equ	0xFE1
  7369                           bsr	equ	0xFE0
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           plusw2	equ	0xFDB
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8
  7377                           pclatu	equ	0xFFB
  7378                           pclath	equ	0xFFA
  7379                           tblptru	equ	0xFF8
  7380                           tblptrh	equ	0xFF7
  7381                           tblptrl	equ	0xFF6
  7382                           tablat	equ	0xFF5
  7383                           prodh	equ	0xFF4
  7384                           prodl	equ	0xFF3
  7385                           intcon	equ	0xFF2
  7386                           indf0	equ	0xFEF
  7387                           postinc0	equ	0xFEE
  7388                           fsr0h	equ	0xFEA
  7389                           fsr0l	equ	0xFE9
  7390                           wreg	equ	0xFE8
  7391                           indf1	equ	0xFE7
  7392                           plusw1	equ	0xFE3
  7393                           fsr1h	equ	0xFE2
  7394                           fsr1l	equ	0xFE1
  7395                           bsr	equ	0xFE0
  7396                           indf2	equ	0xFDF
  7397                           postinc2	equ	0xFDE
  7398                           postdec2	equ	0xFDD
  7399                           plusw2	equ	0xFDB
  7400                           fsr2h	equ	0xFDA
  7401                           fsr2l	equ	0xFD9
  7402                           status	equ	0xFD8
  7403                           
  7404                           	psect	rparam
  7405  0000                     pclatu	equ	0xFFB
  7406                           pclath	equ	0xFFA
  7407                           tblptru	equ	0xFF8
  7408                           tblptrh	equ	0xFF7
  7409                           tblptrl	equ	0xFF6
  7410                           tablat	equ	0xFF5
  7411                           prodh	equ	0xFF4
  7412                           prodl	equ	0xFF3
  7413                           intcon	equ	0xFF2
  7414                           indf0	equ	0xFEF
  7415                           postinc0	equ	0xFEE
  7416                           fsr0h	equ	0xFEA
  7417                           fsr0l	equ	0xFE9
  7418                           wreg	equ	0xFE8
  7419                           indf1	equ	0xFE7
  7420                           plusw1	equ	0xFE3
  7421                           fsr1h	equ	0xFE2
  7422                           fsr1l	equ	0xFE1
  7423                           bsr	equ	0xFE0
  7424                           indf2	equ	0xFDF
  7425                           postinc2	equ	0xFDE
  7426                           postdec2	equ	0xFDD
  7427                           plusw2	equ	0xFDB
  7428                           fsr2h	equ	0xFDA
  7429                           fsr2l	equ	0xFD9
  7430                           status	equ	0xFD8
  7431                           
  7432                           	psect	temp
  7433  000034                     btemp:
  7434                           	opt stack 0
  7435  000034                     	ds	1
  7436  0000                     int$flags	set	btemp
  7437  0000                     wtemp6	set	btemp+1
  7438                           pclatu	equ	0xFFB
  7439                           pclath	equ	0xFFA
  7440                           tblptru	equ	0xFF8
  7441                           tblptrh	equ	0xFF7
  7442                           tblptrl	equ	0xFF6
  7443                           tablat	equ	0xFF5
  7444                           prodh	equ	0xFF4
  7445                           prodl	equ	0xFF3
  7446                           intcon	equ	0xFF2
  7447                           indf0	equ	0xFEF
  7448                           postinc0	equ	0xFEE
  7449                           fsr0h	equ	0xFEA
  7450                           fsr0l	equ	0xFE9
  7451                           wreg	equ	0xFE8
  7452                           indf1	equ	0xFE7
  7453                           plusw1	equ	0xFE3
  7454                           fsr1h	equ	0xFE2
  7455                           fsr1l	equ	0xFE1
  7456                           bsr	equ	0xFE0
  7457                           indf2	equ	0xFDF
  7458                           postinc2	equ	0xFDE
  7459                           postdec2	equ	0xFDD
  7460                           plusw2	equ	0xFDB
  7461                           fsr2h	equ	0xFDA
  7462                           fsr2l	equ	0xFD9
  7463                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         183
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      51
    BANK0           160    107     115
    BANK1           256    226     249
    BANK2           256      0     150

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@millis	PTR unsigned int  size(2) Largest target is 2
		 -> millis(BANK1[2]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S111DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S111DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_SendLCD
    _main->_VerifySignal
    _initLCD->_SendLCD
    _ScanWithRange->_SendLCD
    _ScanIR->_SendLCD
    _setMotorPWM->___wmul
    ___awdiv->___wmul
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               228   228      0   80592
                                            105 BANK0      2     2      0
                                              0 BANK1    226   226      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              0 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4921
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     240
                                             43 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        13    11      2     169
                                             43 COMRAM     6     4      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    61     16   27759
                                             28 BANK0     77    61     16
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5461
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5731
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4226
                                             17 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             43 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   13681
                                             28 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4344
                                             17 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1694
                                              8 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3073
                                              7 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             43 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     409
                                             43 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             43 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              0 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2442
                                              0 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                             47 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                             43 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E2      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6B      73       5       71.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      33       1       54.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     235       3        0.0%
DATA                 0      0     235      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 19 23:17:43 2018

                        ?_grabRightIR 002C                                     _i 0033  
                  fullSpeedBack@power 007B                                    l36 125A  
                                  l37 1284                                    l53 166E  
                                  l54 161E                                    l70 176C  
                                  l55 1636                                    l56 164E  
                                  l67 178C                                    l68 1736  
                                  l69 1752                          ___awdiv@sign 0065  
                                  bsr 000FE0                   ___wmul@multiplicand 002E  
                         main@Message 01BE                           ?_LCD_String 0060  
                                 l110 17CA                                   l120 1BFC  
                                 l210 1AF0                                   l115 1840  
                                 l230 0C72                                   l231 0C5A  
                                 l152 1B9A                                   l224 0E62  
                                 l217 13BC                                   l209 1B02  
                                 l225 0B22                                   l154 1BAE  
                                 l234 0E4C                                   l226 0BE4  
                                 l235 0E5E                                   l227 0C00  
                                 l411 05F4                                   l403 03FC  
                                 l420 06A2                                   l404 04A4  
                                 l229 0D24                                   l413 0616  
                                 l158 18D4                                   l422 06E4  
                                 l159 189E                                   l431 091E  
                                 l407 04DA                                   l432 08C8  
                                 l416 0638                                   l408 0524  
                                 l417 0754                                   l409 05A8  
                                 l442 098C                                   l434 08A8  
                                 l426 07B0                                   l443 09BE  
                                 l419 0702                                   l460 0F28  
                                 l429 0840                                   l470 0FCC  
                                 l462 0F3E                                   l438 08E4  
                                 l463 0F36                                   l481 1068  
                                 l482 108C                                   l483 1094  
                                 l475 0FF4                                   l459 0F0E  
                                 l484 10D4                                   l468 0F6E  
                                 l493 1116                                   l485 10B4  
                                 l477 101E                                   l494 1172  
                                 l670 16EA                                   l911 1996  
                                 l495 111C                                   l399 03F6  
                                 l912 19A0                                   l921 19DA  
                                 l673 1712                                   l922 19E4  
                                 l674 171C                                   l666 16C4  
                                 l907 1976                                   l675 172A  
                                 l667 16D4                                   l908 196E  
                                 l828 1C6C                                   l917 19C2  
                                 l669 16F2                                   l918 19BA  
                         grabLeftIR@i 0062                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3101 17C2                                  l3117 1838  
                                l3195 1022                                  l3641 06DC  
                                l3725 09E0                                  l3629 069A  
                                l3727 09E2                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1210 16F6  
                                u3100 06D8                                  _LATB 000F8A  
                                u3200 0958                                  u3120 06FC  
                                u3050 0664                                  u1460 19C6  
                                u3220 09CA                                  u3060 0678  
                                u3052 0666                                  u2405 1438  
                                u2334 121C                                  u3062 067A  
                                u2415 1446                                  u2335 1218  
                                u2600 187E                                  u2344 1276  
                                u3160 088C                                  u2425 1476  
                                u2345 1272                                  u2355 12D0  
                                u3307 1504                                  u3180 091A  
                                u2365 13DE                                  u3317 1516  
                                u3237 0450                                  u2630 18C2  
                                u2375 13EC                                  u3407 1346  
                                u3327 152E                                  u3247 0468  
                                u2640 18F4                                  u2800 10DC  
                                u2720 104E                                  u2385 140A  
                                u3417 1668                                  u3337 1544  
                                u3257 14AE                                  u2570 1808  
                                u2490 197A                                  u2810 10FA  
                                u2395 1418                                  u2475 1BC2  
                                u3427 17FA                                  u3347 1556  
                                u3267 14C4                                  u2476 1BC4  
                                u2637 18B8                                  u3437 1870  
                                u2565 17D2                                  u3357 0B56  
                                u1845 1BF8                                  u3277 14D6  
                                u2830 117A                                  u1846 1BFA  
                                u2647 18EA                                  u3447 1BB0  
                                u3367 0B6E                                  u3287 14E4  
                                u2840 1194                                  u3457 18CE  
                                u3377 1786                                  u1865 1C0A  
                                u3297 14F2                                  u1866 1C0C  
                                u3467 1BD0                                  u2595 1848  
                                u3387 1AF6                                  u3477 1BE0  
                                u3397 132E                                  u3487 1492  
                                u3497 1CA8                                  u2961 0364  
                                u2971 0376                                  _main 0350  
                                _mode 0032                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                indf0 000FEF                                  fsr2h 000FDA  
                                fsr0l 000FE9                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 0034  
                                _stop 161C                                  prodh 000FF4  
                                prodl 000FF3                                  start 00F6  
             ScanWithRange@MotorPower 00BC                          ___param_bank 000000  
                     i2_delay_tenth_s 1B14                       __end_of_SendLCD 1BE8  
                     __end_of_SetLine 1BB8                    ScanWithRange@F3555 00CB  
                         ScanIR@F3541 00CF                                 ?_main 0001  
                     __end_of___awdiv 1734                                 ?_stop 0071  
                     ___awdiv@divisor 0062                                 _PDC0H 000F78  
                               _PDC1H 000F76                                 _PDC0L 000F79  
                               _PDC1L 000F77                                 _T5CON 000FB7  
                        grabRightIR@i 0062                       __end_of___lwdiv 19AA  
                     __end_of___lwmod 19EE                                 i2l210 1B28  
                               i1l373 009E                                 i1l374 009A  
                               i1l375 009C                                 i2l209 1B3A  
                               i2l381 15C4                                 i2l382 15B6  
                               i2l385 15BC                                 i2l386 15D0  
                     ___awdiv@counter 0064                                 _RCREG 000FAE  
                               _E_TOG 1CA4                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISC 000F94                       __end_of_initLCD 155E  
                  ScanWithRange@loops 0080                       __end_of_dpowers 030B  
                     __end_of_isdigit 1C74                                 main@i 01CE  
                               pclath 000FFA                                 tablat 000FF5  
                               plusw1 000FE3                                 plusw2 000FDB  
                               status 000FD8                                 wtemp6 0035  
                 __size_of_LCD_String 0060                       __end_of_sprintf 11A2  
              __size_of_ScanWithRange 04FE                        __CFG_MCLRE$OFF 000000  
                     __initialization 1B4C                          __end_of_main 0A04  
                        __end_of_stop 16AE                        delay_tenth_s@i 002E  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 0060  
        ScanIR@DirectionMoveThreshold 00A9                  __end_of_enableSensor 1C0E  
                 VerifySignal@hexByte 0062                                ??_main 00C9  
                              ??_stop 0032                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0068                __size_of_fullSpeedBack 003C  
                    ___awdiv@dividend 0060                        __CFG_WDTEN$OFF 000000  
               __end_of_delay_tenth_s 1B14                                _LCDout 13D4  
                         SendLCD@Byte 0031                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0            ScanWithRange@MiniLeftFlick 00BD  
                              _PTPERH 000F7A                                _PTPERL 000F7B  
             __end_ofi2_delay_tenth_s 1B4C                           SendLCD@type 0030  
                           ??_SendLCD 0031                                _ScanIR 12E0  
                           ??_SetLine 0032                           fullSpeed@mL 0071  
                         fullSpeed@mR 0073                   ScanWithRange@millis 008A  
                              ___wmul 1C0E                             ??___awdiv 0032  
                    __end_of_initRFID 1C90                             ??___lwdiv 0030  
                           ??___lwmod 0030                                _initIR 1C34  
                __size_of_grabRightIR 0076                                _millis 01F6  
                              clear_0 1B52                                clear_1 1B5E  
                              clear_2 1B6A                      ___awdiv@quotient 0066  
                              main@mL 01D0                                main@mR 01D9  
                      ??_initMotorPWM 002C                             ??_initLCD 0060  
                       _ScanWithRange 0A04                             ??_isdigit 002C  
        i2delay_tenth_s@tenth_seconds 0002                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                                stop@mL 0071  
                              stop@mR 0073                             ??_sprintf 006F  
     ScanWithRange@TimeAboveThreshold 00C0                      __end_of_turnLeft 1AA2  
                     fullSpeedBack@mL 0077                       fullSpeedBack@mR 0079  
                          __accesstop 0060               __end_of__initialization 1B74  
                       ___rparam_used 000001                           SetLine@line 0060  
                       __end_of_E_TOG 1CB2                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 19EE                          ??_LCD_String 0032  
                      ?_ScanWithRange 007C                  VerifySignal@checksum 0061  
                             ??_E_TOG 002C         __size_of_InterruptHandlerHigh 1614  
         __end_of_InterruptHandlerLow 00F6            delay_tenth_s@tenth_seconds 002D  
                        sprintf@width 0079                            __pbssBANK0 00CB  
                          __pbssBANK1 01E2                            __pbssBANK2 0200  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0014                    __size_of_fullSpeed 007C  
                  __end_of_LCD_String 18FC                               ?_ScanIR 007C  
                      ?_fullSpeedBack 0077                 __size_of_enableSensor 0026  
                             ?___wmul 002C                   grabLeftIR@IR_signal 0060  
                             _CAP1CON 000F63                               _CAP2CON 000F62  
                             ?_initIR 0001                            _grabLeftIR 1826  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013E  
                     __size_of_LCDout 00C6                          _enableSensor 1BE8  
                  __size_of_turnRight 003C                  __end_of_initMotorPWM 1ADC  
              ScanWithRange@RFID_Read 0088                               _SendLCD 1BB8  
                             __Hparam 0000                               _SetLine 1B82  
                             __Lparam 0000                       __size_of_ScanIR 00F4  
                             ___awdiv 16AE                       __size_of___wmul 0026  
                             ___lwdiv 1956                               ___lwmod 19AA  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 1B4C                       ??_ScanWithRange 008C  
                             __ramtop 0300                             ?_turnLeft 0077  
                             __ptext0 0350                               __ptext1 1C90  
                             __ptext2 1C74                               __ptext3 1AA2  
                             __ptext4 149A                               __ptext5 1C34  
                             __ptext6 19EE                               __ptext7 1BE8  
                             __ptext8 18FC                               __ptext9 0A04  
                           _T0CONbits 000FD5                               _initLCD 149A  
                   __end_of_initTimer 1CA4                               _dpowers 0301  
                   __end_of_fullSpeed 17B0                               _isdigit 1C56  
                        LCDout@number 002F                         ?_VerifySignal 002C  
                             main@buf 0100                               _sprintf 0F02  
                      __pintcode_body 155E                  end_of_initialization 1B74  
                      ScanWithRange@i 00B8                    setMotorPWM@PWMduty 006F  
                          ??_initRFID 002C                         __Lmediumconst 0000  
                             int_func 155E                    ScanIR@SensorResult 00AB  
                     ??_fullSpeedBack 0032                             _RFID_Read 01F8  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 0032                ScanWithRange@LeftFlick 00C6  
                   __end_of_turnRight 1A66                           ?_grabLeftIR 002C  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 002E  
              ScanWithRange@RightFlag 00C7                        __end_of_LCDout 149A  
                           _TXSTAbits 000FAC                             ScanIR@buf 0081  
                       ??_grabRightIR 002E                        __end_of_ScanIR 13D4  
                      _ReceivedString 01E6                        __end_of___wmul 1C34  
                   ScanWithRange@Move 0084                           _BAUDCONbits 000FAA  
                      __end_of_initIR 1C56                __size_of_delay_tenth_s 0038  
                 start_initialization 1B4C                    VerifySignal@Signal 002C  
               __size_of_initMotorPWM 003A                              ??_LCDout 002C  
        __end_of_InterruptHandlerHigh 161C                              ??_ScanIR 0080  
                 __size_of_grabLeftIR 0076                              ??___wmul 0030  
                            ??_initIR 002C                   __end_of_grabRightIR 1826  
                        _initMotorPWM 1AA2                           __pbssCOMRAM 0032  
                      fullSpeed@power 0075                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                          _isdigit$1781 002D  
        __size_of_InterruptHandlerLow 00DE                         _delay_tenth_s 1ADC  
                         sprintf@flag 0078                           sprintf@prec 0075  
                   __size_of_initRFID 001C                              ?_SendLCD 0030  
                            ?_SetLine 0001                      ___lwdiv@dividend 002C  
                           __pintcode 0008                  __end_of_VerifySignal 1956  
                            ?___awdiv 0060              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 002C                              ?___lwmod 0063  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 01C9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003C                         ??_setMotorPWM 006A  
                           _initTimer 1C90                             _fullSpeed 1734  
                    ___lwdiv@quotient 0061                              ?_sprintf 0067  
                      ?_delay_tenth_s 0001                        ___wmul@product 0030  
                            _LATAbits 000F89                              _LATBbits 000F8A  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0077  
                         turnRight@mR 0079                              i2u350_47 1B2E  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3554 0200                             main@F3556 0264  
                           main@F3559 01E2                           _grabRightIR 17B0  
               ScanWithRange@LeftFlag 00BE                  grabRightIR@IR_signal 0060  
                   ___wmul@multiplier 002C                 __end_of_ScanWithRange 0F02  
                        setMotorPWM@m 0068                 ScanWithRange@MoveTime 0082  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0086  
                            ScanIR@mL 007C                              ScanIR@mR 007E  
                        ??_grabLeftIR 002E                            ?_initTimer 0001  
                           _turnRight 1A2A                            ?_fullSpeed 0071  
                    ScanWithRange@buf 0090                   __end_of_setMotorPWM 12E0  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 1A2A  
                    __size_of_SetLine 0036                    __end_of_grabLeftIR 189C  
                    __size_of___awdiv 0086                      __size_of___lwdiv 0054  
                    __size_of___lwmod 0044                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0076                      __size_of_initLCD 00C4  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 002E  
                     ___lwdiv@counter 0060                            ?_turnRight 0077  
                            __ptext10 1A2A                              __ptext11 1A66  
                            __ptext20 1C0E                              __ptext12 1734  
                            __ptext21 19AA                              __ptext13 1ADC  
                            __ptext22 1956                              __ptext14 12E0  
                            __ptext23 17B0                              __ptext15 161C  
                            __ptext32 1B14                              __ptext24 1826  
                            __ptext16 11A2                              __ptext25 1B82  
                            __ptext17 16AE                              __ptext26 189C  
                            __ptext18 0F02                              __ptext27 1BB8  
                            __ptext19 1C56                              __ptext28 13D4  
                            __ptext29 1CA4                       ??_delay_tenth_s 002C  
                    __size_of_sprintf 02A0                              _initRFID 1C74  
           ScanWithRange@SensorResult 00C2                        turnRight@power 007B  
                       __size_of_main 06B4                    main@DirectionFound 01CD  
                       turnLeft@power 007B                         __size_of_stop 0092  
                          turnLeft@mL 0077                            turnLeft@mR 0079  
               __size_of_VerifySignal 005A                              int$flags 0034  
                            main@Move 01CF                   _InterruptHandlerLow 0018  
                          _LCD_String 189C                              _turnLeft 1A66  
                     ScanWithRange@mL 007C                       ScanWithRange@mR 007E  
                  enableSensor@sensor 002D                    enableSensor@status 002C  
                       VerifySignal@i 0060                            _INTCONbits 000FF2  
                         ??_initTimer 002C                              isdigit@c 002E  
                         ??_fullSpeed 0076                           _setMotorPWM 11A2  
                        _VerifySignal 18FC                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0073  
                           sprintf@sp 0067                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 002C                      ___lwmod@dividend 0063  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00BA  
              ??_InterruptHandlerHigh 0005                              sprintf@c 007B  
                            sprintf@f 0069                       ___lwmod@divisor 0065  
                     ___lwmod@counter 0030                           ??_turnRight 0032  
               ??_InterruptHandlerLow 0017                        ??_enableSensor 002D  
                    i2delay_tenth_s@i 0003  
