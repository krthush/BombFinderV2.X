

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 17:15:11 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           	psect	smallconst
    53  000300                     __psmallconst:
    54                           	opt stack 0
    55  000300  00                 	db	0
    56  000301                     _dpowers:
    57                           	opt stack 0
    58  000301  0001               	dw	1
    59  000303  000A               	dw	10
    60  000305  0064               	dw	100
    61  000307  03E8               	dw	1000
    62  000309  2710               	dw	10000
    63  00030B                     __end_of_dpowers:
    64                           	opt stack 0
    65  0000                     _ANSEL0bits	set	4024
    66  0000                     _BAUDCONbits	set	4010
    67  0000                     _CAP1BUFH	set	3945
    68  0000                     _CAP1BUFL	set	3944
    69  0000                     _CAP1CON	set	3939
    70  0000                     _CAP2BUFH	set	3943
    71  0000                     _CAP2BUFL	set	3942
    72  0000                     _CAP2CON	set	3938
    73  0000                     _INTCONbits	set	4082
    74  0000                     _IPR1bits	set	3999
    75  0000                     _LATAbits	set	3977
    76  0000                     _LATB	set	3978
    77  0000                     _LATCbits	set	3979
    78  0000                     _LATDbits	set	3980
    79  0000                     _LATEbits	set	3981
    80  0000                     _OSCCON	set	4051
    81  0000                     _OSCCONbits	set	4051
    82  0000                     _PIE1bits	set	3997
    83  0000                     _PIR1bits	set	3998
    84  0000                     _PTCON0	set	3967
    85  0000                     _PTCON1	set	3966
    86  0000                     _PTPERH	set	3962
    87  0000                     _PTPERL	set	3963
    88  0000                     _PWMCON0	set	3951
    89  0000                     _PWMCON1	set	3950
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG	set	4014
    92  0000                     _RCSTAbits	set	4011
    93  0000                     _SPBRG	set	4015
    94  0000                     _SPBRGH	set	4016
    95  0000                     _T0CONbits	set	4053
    96  0000                     _T5CON	set	4023
    97  0000                     _TRISAbits	set	3986
    98  0000                     _TRISBbits	set	3987
    99  0000                     _TRISC	set	3988
   100  0000                     _TRISCbits	set	3988
   101  0000                     _TRISDbits	set	3989
   102  0000                     _TRISEbits	set	3990
   103  0000                     _TXREG	set	4013
   104  0000                     _TXSTAbits	set	4012
   105  0000                     _PDC0H	set	3960
   106  0000                     _PDC0L	set	3961
   107  0000                     _PDC1H	set	3958
   108  0000                     _PDC1L	set	3959
   109  00030B                     STR_6:
   110  00030B  20                 	db	32
   111  00030C  20                 	db	32
   112  00030D  20                 	db	32
   113  00030E  20                 	db	32
   114  00030F  20                 	db	32
   115  000310  20                 	db	32
   116  000311  25                 	db	37
   117  000312  30                 	db	48	;'0'
   118  000313  34                 	db	52	;'4'
   119  000314  64                 	db	100	;'d'
   120  000315  2C                 	db	44
   121  000316  20                 	db	32
   122  000317  25                 	db	37
   123  000318  30                 	db	48	;'0'
   124  000319  34                 	db	52	;'4'
   125  00031A  64                 	db	100	;'d'
   126  00031B  00                 	db	0
   127  00031C                     STR_5:
   128  00031C  20                 	db	32
   129  00031D  20                 	db	32
   130  00031E  20                 	db	32
   131  00031F  20                 	db	32
   132  000320  20                 	db	32
   133  000321  20                 	db	32
   134  000322  49                 	db	73	;'I'
   135  000323  6E                 	db	110	;'n'
   136  000324  65                 	db	101	;'e'
   137  000325  72                 	db	114	;'r'
   138  000326  74                 	db	116	;'t'
   139  000327  20                 	db	32
   140  000328  4D                 	db	77	;'M'
   141  000329  6F                 	db	111	;'o'
   142  00032A  64                 	db	100	;'d'
   143  00032B  65                 	db	101	;'e'
   144  00032C  00                 	db	0
   145  00032D                     STR_1:
   146  00032D  20                 	db	32
   147  00032E  20                 	db	32
   148  00032F  20                 	db	32
   149  000330  20                 	db	32
   150  000331  20                 	db	32
   151  000332  53                 	db	83	;'S'
   152  000333  63                 	db	99	;'c'
   153  000334  61                 	db	97	;'a'
   154  000335  6E                 	db	110	;'n'
   155  000336  49                 	db	73	;'I'
   156  000337  52                 	db	82	;'R'
   157  000338  00                 	db	0
   158  000339                     STR_8:
   159  000339  47                 	db	71	;'G'
   160  00033A  6F                 	db	111	;'o'
   161  00033B  69                 	db	105	;'i'
   162  00033C  6E                 	db	110	;'n'
   163  00033D  67                 	db	103	;'g'
   164  00033E  20                 	db	32
   165  00033F  48                 	db	72	;'H'
   166  000340  6F                 	db	111	;'o'
   167  000341  6D                 	db	109	;'m'
   168  000342  65                 	db	101	;'e'
   169  000343  00                 	db	0
   170  000344                     STR_7:
   171  000344  53                 	db	83	;'S'
   172  000345  65                 	db	101	;'e'
   173  000346  61                 	db	97	;'a'
   174  000347  72                 	db	114	;'r'
   175  000348  63                 	db	99	;'c'
   176  000349  68                 	db	104	;'h'
   177  00034A  69                 	db	105	;'i'
   178  00034B  6E                 	db	110	;'n'
   179  00034C  67                 	db	103	;'g'
   180  00034D  00                 	db	0
   181  0000                     
   182                           ; #config settings
   183  00034E  00                 	db	0	; dummy byte at the end
   184  0000                     
   185                           	psect	cinit
   186  001862                     __pcinit:
   187                           	opt stack 0
   188  001862                     start_initialization:
   189                           	opt stack 0
   190  001862                     __initialization:
   191                           	opt stack 0
   192                           
   193                           ; Clear objects allocated to BANK1 (5 bytes)
   194  001862  0101               	movlb	1
   195  001864  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   196  001866  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   197  001868  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   198  00186A  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   199  00186C  6BFA               	clrf	__pbssBANK1& (0+255),b
   200                           
   201                           ; Clear objects allocated to BANK0 (24 bytes)
   202  00186E  EE00  F0B6         	lfsr	0,__pbssBANK0
   203  001872  0E18               	movlw	24
   204  001874                     clear_0:
   205  001874  6AEE               	clrf	postinc0,c
   206  001876  06E8               	decf	wreg,f,c
   207  001878  E1FD               	bnz	clear_0
   208                           
   209                           ; Clear objects allocated to COMRAM (2 bytes)
   210  00187A  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   211  00187C  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   212  00187E                     end_of_initialization:
   213                           	opt stack 0
   214  00187E                     __end_of__initialization:
   215                           	opt stack 0
   216  00187E  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   217  001880  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   218  001882  0E00               	movlw	low (__Lmediumconst shr (0+16))
   219  001884  6EF8               	movwf	tblptru,c
   220  001886  0100               	movlb	0
   221  001888  EFA8  F001         	goto	_main	;jump to C main() function
   222                           tblptru	equ	0xFF8
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           
   226                           	psect	bssCOMRAM
   227  00003A                     __pbssCOMRAM:
   228                           	opt stack 0
   229  00003A                     _i:
   230                           	opt stack 0
   231  00003A                     	ds	1
   232  00003B                     _mode:
   233                           	opt stack 0
   234  00003B                     	ds	1
   235                           tblptru	equ	0xFF8
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	bssBANK0
   240  0000B6                     __pbssBANK0:
   241                           	opt stack 0
   242  0000B6                     ScanIR@F3882:
   243                           	opt stack 0
   244  0000B6                     	ds	4
   245  0000BA                     ScanWithRange@F3892:
   246                           	opt stack 0
   247  0000BA                     	ds	4
   248  0000BE                     _ReceivedString:
   249                           	opt stack 0
   250  0000BE                     	ds	16
   251                           tblptru	equ	0xFF8
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK1
   256  0001FA                     __pbssBANK1:
   257                           	opt stack 0
   258  0001FA                     main@F3896:
   259                           	opt stack 0
   260  0001FA                     	ds	4
   261  0001FE                     _RFID_Read:
   262                           	opt stack 0
   263  0001FE                     	ds	1
   264                           tblptru	equ	0xFF8
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	cstackBANK2
   269  000200                     __pcstackBANK2:
   270                           	opt stack 0
   271  000200                     main@mL:
   272                           	opt stack 0
   273                           
   274                           ; 9 bytes @ 0x0
   275  000200                     	ds	9
   276  000209                     main@mR:
   277                           	opt stack 0
   278                           
   279                           ; 9 bytes @ 0x9
   280  000209                     	ds	9
   281                           tblptru	equ	0xFF8
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	cstackBANK1
   286  000100                     __pcstackBANK1:
   287                           	opt stack 0
   288  000100                     main@MoveTime:
   289                           	opt stack 0
   290                           
   291                           ; 100 bytes @ 0x0
   292  000100                     	ds	100
   293  000164                     main@MoveType:
   294                           	opt stack 0
   295                           
   296                           ; 100 bytes @ 0x64
   297  000164                     	ds	100
   298  0001C8                     main@buf:
   299                           	opt stack 0
   300                           
   301                           ; 40 bytes @ 0xC8
   302  0001C8                     	ds	40
   303  0001F0                     main@Message:
   304                           	opt stack 0
   305                           
   306                           ; 10 bytes @ 0xF0
   307  0001F0                     	ds	10
   308                           tblptru	equ	0xFF8
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           
   312                           	psect	cstackBANK0
   313  000060                     __pcstackBANK0:
   314                           	opt stack 0
   315  000060                     ??_sprintf:
   316  000060                     setMotorPWM@PWMduty:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x0
   320  000060                     	ds	2
   321  000062                     stop@mL:
   322                           	opt stack 0
   323  000062                     fullSpeedAhead@mL:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x2
   327  000062                     	ds	2
   328  000064                     stop@mR:
   329                           	opt stack 0
   330  000064                     fullSpeedAhead@mR:
   331                           	opt stack 0
   332  000064                     sprintf@ap:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x4
   336  000064                     	ds	2
   337  000066                     fullSpeedAhead@power:
   338                           	opt stack 0
   339  000066                     sprintf@prec:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x6
   343  000066                     	ds	1
   344  000067                     turnLeft@mL:
   345                           	opt stack 0
   346  000067                     turnRight@mL:
   347                           	opt stack 0
   348  000067                     fullSpeedBack@mL:
   349                           	opt stack 0
   350  000067                     sprintf@val:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x7
   354  000067                     	ds	2
   355  000069                     sprintf@flag:
   356                           	opt stack 0
   357  000069                     turnLeft@mR:
   358                           	opt stack 0
   359  000069                     turnRight@mR:
   360                           	opt stack 0
   361  000069                     fullSpeedBack@mR:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x9
   365  000069                     	ds	1
   366  00006A                     sprintf@width:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0xA
   370  00006A                     	ds	1
   371  00006B                     turnLeft@power:
   372                           	opt stack 0
   373  00006B                     turnRight@power:
   374                           	opt stack 0
   375  00006B                     fullSpeedBack@power:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0xB
   379  00006B                     	ds	1
   380  00006C                     sprintf@c:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0xC
   384  00006C                     	ds	1
   385  00006D                     ScanIR@mL:
   386                           	opt stack 0
   387  00006D                     ScanWithRange@mL:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0xD
   391  00006D                     	ds	2
   392  00006F                     ScanIR@mR:
   393                           	opt stack 0
   394  00006F                     ScanWithRange@mR:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0xF
   398  00006F                     	ds	2
   399  000071                     ScanIR@Move:
   400                           	opt stack 0
   401  000071                     ScanWithRange@milliseconds:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x11
   405  000071                     	ds	2
   406  000073                     ScanIR@MoveTime:
   407                           	opt stack 0
   408  000073                     ScanWithRange@MoveTimeEntry:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x13
   412  000073                     	ds	2
   413  000075                     ??_ScanWithRange:
   414  000075                     ScanIR@MoveType:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x15
   418  000075                     	ds	2
   419  000077                     ScanIR@buf:
   420                           	opt stack 0
   421  000077                     ScanWithRange@buf:
   422                           	opt stack 0
   423                           
   424                           ; 40 bytes @ 0x17
   425  000077                     	ds	40
   426  00009F                     ScanWithRange@TimeAboveThreshold:
   427                           	opt stack 0
   428  00009F                     ScanIR@DirectionMoveThreshold:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x3F
   432  00009F                     	ds	1
   433  0000A0                     ScanWithRange@i:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x40
   437  0000A0                     	ds	1
   438  0000A1                     ScanIR@SensorResult:
   439                           	opt stack 0
   440                           
   441                           ; 4 bytes @ 0x41
   442  0000A1                     	ds	1
   443  0000A2                     ScanWithRange@n:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x42
   447  0000A2                     	ds	2
   448  0000A4                     ScanWithRange@DirectionFoundThreshold:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x44
   452  0000A4                     	ds	2
   453  0000A6                     ScanWithRange@SensorResult:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0x46
   457  0000A6                     	ds	4
   458  0000AA                     ScanWithRange@LeftFlag:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x4A
   462  0000AA                     	ds	1
   463  0000AB                     ScanWithRange@RightFlag:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x4B
   467  0000AB                     	ds	1
   468  0000AC                     ??_main:
   469                           
   470                           ; 0 bytes @ 0x4C
   471  0000AC                     	ds	2
   472  0000AE                     main@ScanAngle:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x4E
   476  0000AE                     	ds	1
   477  0000AF                     main@SensorResult:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x4F
   481  0000AF                     	ds	4
   482  0000B3                     main@DirectionFound:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x53
   486  0000B3                     	ds	1
   487  0000B4                     main@Move:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x54
   491  0000B4                     	ds	1
   492  0000B5                     main@i:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x55
   496  0000B5                     	ds	1
   497                           tblptru	equ	0xFF8
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           
   501                           	psect	cstackCOMRAM
   502  000001                     __pcstackCOMRAM:
   503                           	opt stack 0
   504  000001                     ??i2_delay_tenth_s:
   505                           
   506                           ; 0 bytes @ 0x0
   507  000001                     	ds	1
   508  000002                     i2delay_tenth_s@tenth_seconds:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x1
   512  000002                     	ds	1
   513  000003                     i2delay_tenth_s@i:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x2
   517  000003                     	ds	2
   518  000005                     ??_InterruptHandlerHigh:
   519                           
   520                           ; 0 bytes @ 0x4
   521  000005                     	ds	14
   522  000013                     ??_InterruptHandlerLow:
   523                           
   524                           ; 0 bytes @ 0x12
   525  000013                     	ds	17
   526  000024                     ??_isdigit:
   527  000024                     ??_LCDout:
   528  000024                     ??_delay_tenth_s:
   529  000024                     ?_grabRightIR:
   530                           	opt stack 0
   531  000024                     ?_grabLeftIR:
   532                           	opt stack 0
   533  000024                     ?___wmul:
   534                           	opt stack 0
   535  000024                     ?___lwdiv:
   536                           	opt stack 0
   537  000024                     enableSensor@status:
   538                           	opt stack 0
   539  000024                     VerifySignal@Signal:
   540                           	opt stack 0
   541  000024                     ___wmul@multiplier:
   542                           	opt stack 0
   543  000024                     ___lwdiv@dividend:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x23
   547  000024                     	ds	1
   548  000025                     enableSensor@sensor:
   549                           	opt stack 0
   550  000025                     delay_tenth_s@tenth_seconds:
   551                           	opt stack 0
   552  000025                     _isdigit$1958:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x24
   556  000025                     	ds	1
   557  000026                     ??_grabRightIR:
   558  000026                     ??_grabLeftIR:
   559  000026                     ??_VerifySignal:
   560  000026                     isdigit@c:
   561                           	opt stack 0
   562  000026                     delay_tenth_s@i:
   563                           	opt stack 0
   564  000026                     ___wmul@multiplicand:
   565                           	opt stack 0
   566  000026                     ___lwdiv@divisor:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x25
   570  000026                     	ds	1
   571  000027                     LCDout@number:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x26
   575  000027                     	ds	1
   576  000028                     SendLCD@type:
   577                           	opt stack 0
   578  000028                     ___wmul@product:
   579                           	opt stack 0
   580  000028                     ___lwdiv@quotient:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x27
   584  000028                     	ds	1
   585  000029                     SendLCD@Byte:
   586                           	opt stack 0
   587  000029                     grabRightIR@IR_signal:
   588                           	opt stack 0
   589  000029                     grabLeftIR@IR_signal:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0x28
   593  000029                     	ds	1
   594  00002A                     ??_initLCD:
   595  00002A                     ?___awdiv:
   596                           	opt stack 0
   597  00002A                     SetLine@line:
   598                           	opt stack 0
   599  00002A                     ___lwdiv@counter:
   600                           	opt stack 0
   601  00002A                     LCD_String@string:
   602                           	opt stack 0
   603  00002A                     ___awdiv@dividend:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x29
   607  00002A                     	ds	1
   608  00002B                     ?___lwmod:
   609                           	opt stack 0
   610  00002B                     grabRightIR@i:
   611                           	opt stack 0
   612  00002B                     grabLeftIR@i:
   613                           	opt stack 0
   614  00002B                     ___lwmod@dividend:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x2A
   618  00002B                     	ds	1
   619  00002C                     VerifySignal@checksum:
   620                           	opt stack 0
   621  00002C                     ___awdiv@divisor:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x2B
   625  00002C                     	ds	1
   626  00002D                     VerifySignal@hexByte:
   627                           	opt stack 0
   628  00002D                     ___lwmod@divisor:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x2C
   632  00002D                     	ds	1
   633  00002E                     ___awdiv@counter:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x2D
   637  00002E                     	ds	1
   638  00002F                     VerifySignal@i:
   639                           	opt stack 0
   640  00002F                     ___awdiv@sign:
   641                           	opt stack 0
   642  00002F                     ___lwmod@counter:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x2E
   646  00002F                     	ds	1
   647  000030                     ?_sprintf:
   648                           	opt stack 0
   649  000030                     sprintf@sp:
   650                           	opt stack 0
   651  000030                     ___awdiv@quotient:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x2F
   655  000030                     	ds	2
   656  000032                     setMotorPWM@m:
   657                           	opt stack 0
   658  000032                     sprintf@f:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x31
   662  000032                     	ds	2
   663  000034                     ??_setMotorPWM:
   664                           
   665                           ; 0 bytes @ 0x33
   666  000034                     	ds	5
   667  000039                     ??_ScanIR:
   668                           
   669                           ; 0 bytes @ 0x38
   670  000039                     	ds	1
   671  00003A                     tblptru	equ	0xFF8
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           
   675                           ; 0 bytes @ 0x39
   676 ;;
   677 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   678 ;;
   679 ;; *************** function _main *****************
   680 ;; Defined at:
   681 ;;		line 51 in file "main.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;  MoveType      100  100[BANK1 ] unsigned char [100]
   686 ;;  MoveTime      100    0[BANK1 ] unsigned char [100]
   687 ;;  buf            40  200[BANK1 ] unsigned char [40]
   688 ;;  Message        10  240[BANK1 ] unsigned char [10]
   689 ;;  mR              9    9[BANK2 ] struct DC_motor
   690 ;;  mL              9    0[BANK2 ] struct DC_motor
   691 ;;  SensorResult    4   79[BANK0 ] unsigned int [2]
   692 ;;  i               1   85[BANK0 ] unsigned char 
   693 ;;  Move            1   84[BANK0 ] unsigned char 
   694 ;;  DirectionFou    1   83[BANK0 ] char 
   695 ;;  ScanAngle       1   78[BANK0 ] unsigned char 
   696 ;; Return value:  Size  Location     Type
   697 ;;		None               void
   698 ;; Registers used:
   699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   705 ;;      Params:         0       0       0       0
   706 ;;      Locals:         0       8     250      18
   707 ;;      Temps:          0       2       0       0
   708 ;;      Totals:         0      10     250      18
   709 ;;Total ram usage:      278 bytes
   710 ;; Hardware stack levels required when called:    8
   711 ;; This function calls:
   712 ;;		_LCD_String
   713 ;;		_ScanIR
   714 ;;		_ScanWithRange
   715 ;;		_SendLCD
   716 ;;		_SetLine
   717 ;;		_VerifySignal
   718 ;;		_delay_tenth_s
   719 ;;		_enableSensor
   720 ;;		_fullSpeedAhead
   721 ;;		_fullSpeedBack
   722 ;;		_grabLeftIR
   723 ;;		_grabRightIR
   724 ;;		_initIR
   725 ;;		_initLCD
   726 ;;		_initMotorPWM
   727 ;;		_initRFID
   728 ;;		_initTimer
   729 ;;		_sprintf
   730 ;;		_stop
   731 ;; This function is called by:
   732 ;;		Startup code after reset
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text0
   737  000350                     __ptext0:
   738                           	opt stack 0
   739  000350                     _main:
   740                           	opt stack 23
   741                           
   742                           ;main.c: 54: unsigned char Message[10];
   743                           ;main.c: 55: unsigned char i=0;
   744                           
   745                           ;incstack = 0
   746  000350  0E00               	movlw	0
   747  000352  0100               	movlb	0	; () banked
   748  000354  6FB5               	movwf	main@i& (0+255),b
   749                           
   750                           ;main.c: 56: signed char DirectionFound=0;
   751  000356  0E00               	movlw	0
   752  000358  0100               	movlb	0	; () banked
   753  00035A  6FB3               	movwf	main@DirectionFound& (0+255),b
   754                           
   755                           ;main.c: 57: char MoveTime[100];
   756                           ;main.c: 58: char MoveType[100];
   757                           ;main.c: 59: char Move=0;
   758  00035C  0E00               	movlw	0
   759  00035E  0100               	movlb	0	; () banked
   760  000360  6FB4               	movwf	main@Move& (0+255),b
   761                           
   762                           ; BSR set to: 0
   763                           ;main.c: 60: unsigned int SensorResult[2]={0,0};
   764  000362  C1FA  F0AF         	movff	main@F3896,main@SensorResult
   765  000366  C1FB  F0B0         	movff	main@F3896+1,main@SensorResult+1
   766  00036A  C1FC  F0B1         	movff	main@F3896+2,main@SensorResult+2
   767  00036E  C1FD  F0B2         	movff	main@F3896+3,main@SensorResult+3
   768                           
   769                           ;main.c: 61: char buf[40];
   770                           ;main.c: 63: unsigned char ScanAngle=60;
   771  000372  0E3C               	movlw	60
   772  000374  0100               	movlb	0	; () banked
   773  000376  6FAE               	movwf	main@ScanAngle& (0+255),b
   774                           
   775                           ; BSR set to: 0
   776                           ;main.c: 66: INTCONbits.GIEH=1;
   777  000378  8EF2               	bsf	intcon,7,c	;volatile
   778                           
   779                           ; BSR set to: 0
   780                           ;main.c: 67: INTCONbits.GIEL=1;
   781  00037A  8CF2               	bsf	intcon,6,c	;volatile
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 68: INTCONbits.PEIE=1;
   785  00037C  8CF2               	bsf	intcon,6,c	;volatile
   786                           
   787                           ; BSR set to: 0
   788                           ;main.c: 69: RCONbits.IPEN=1;
   789  00037E  8ED0               	bsf	4048,7,c	;volatile
   790                           
   791                           ; BSR set to: 0
   792                           ;main.c: 72: IPR1bits.RCIP=0;
   793  000380  9A9F               	bcf	3999,5,c	;volatile
   794                           
   795                           ; BSR set to: 0
   796                           ;main.c: 73: PIE1bits.RCIE=1;
   797  000382  8A9D               	bsf	3997,5,c	;volatile
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 76: TRISCbits.RC3=1;
   801  000384  8694               	bsf	3988,3,c	;volatile
   802                           
   803                           ; BSR set to: 0
   804                           ;main.c: 77: INTCONbits.INT0IE=1;
   805  000386  88F2               	bsf	intcon,4,c	;volatile
   806                           
   807                           ; BSR set to: 0
   808                           ;main.c: 80: PIR1bits.RC1IF=0;
   809  000388  9A9E               	bcf	3998,5,c	;volatile
   810                           
   811                           ; BSR set to: 0
   812                           ;main.c: 81: INTCONbits.INT0IF=0;
   813  00038A  92F2               	bcf	intcon,1,c	;volatile
   814                           
   815                           ;main.c: 84: struct DC_motor mL, mR;
   816                           ;main.c: 85: mL.power=0;
   817  00038C  0E00               	movlw	0
   818  00038E  0102               	movlb	2	; () banked
   819  000390  6F00               	movwf	main@mL& (0+255),b
   820                           
   821                           ;main.c: 86: mL.direction=1;
   822  000392  0E01               	movlw	1
   823  000394  0102               	movlb	2	; () banked
   824  000396  6F01               	movwf	(main@mL+1)& (0+255),b
   825                           
   826                           ; BSR set to: 2
   827                           ;main.c: 87: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   828  000398  0E79               	movlw	121
   829  00039A  0102               	movlb	2	; () banked
   830  00039C  6F02               	movwf	(main@mL+2)& (0+255),b
   831  00039E  0E0F               	movlw	15
   832  0003A0  0102               	movlb	2	; () banked
   833  0003A2  6F03               	movwf	(main@mL+3)& (0+255),b
   834                           
   835                           ; BSR set to: 2
   836                           ;main.c: 88: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   837  0003A4  0E78               	movlw	120
   838  0003A6  0102               	movlb	2	; () banked
   839  0003A8  6F04               	movwf	(main@mL+4)& (0+255),b
   840  0003AA  0E0F               	movlw	15
   841  0003AC  0102               	movlb	2	; () banked
   842  0003AE  6F05               	movwf	(main@mL+5)& (0+255),b
   843                           
   844                           ;main.c: 89: mL.dir_pin=0;
   845  0003B0  0E00               	movlw	0
   846  0003B2  0102               	movlb	2	; () banked
   847  0003B4  6F06               	movwf	(main@mL+6)& (0+255),b
   848                           
   849                           ;main.c: 90: mL.PWMperiod=199;
   850  0003B6  0E00               	movlw	0
   851  0003B8  0102               	movlb	2	; () banked
   852  0003BA  6F08               	movwf	(main@mL+8)& (0+255),b
   853  0003BC  0EC7               	movlw	199
   854  0003BE  6F07               	movwf	(main@mL+7)& (0+255),b
   855                           
   856                           ;main.c: 92: mR.power=0;
   857  0003C0  0E00               	movlw	0
   858  0003C2  0102               	movlb	2	; () banked
   859  0003C4  6F09               	movwf	main@mR& (0+255),b
   860                           
   861                           ;main.c: 93: mR.direction=1;
   862  0003C6  0E01               	movlw	1
   863  0003C8  0102               	movlb	2	; () banked
   864  0003CA  6F0A               	movwf	(main@mR+1)& (0+255),b
   865                           
   866                           ; BSR set to: 2
   867                           ;main.c: 94: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   868  0003CC  0E77               	movlw	119
   869  0003CE  0102               	movlb	2	; () banked
   870  0003D0  6F0B               	movwf	(main@mR+2)& (0+255),b
   871  0003D2  0E0F               	movlw	15
   872  0003D4  0102               	movlb	2	; () banked
   873  0003D6  6F0C               	movwf	(main@mR+3)& (0+255),b
   874                           
   875                           ; BSR set to: 2
   876                           ;main.c: 95: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   877  0003D8  0E76               	movlw	118
   878  0003DA  0102               	movlb	2	; () banked
   879  0003DC  6F0D               	movwf	(main@mR+4)& (0+255),b
   880  0003DE  0E0F               	movlw	15
   881  0003E0  0102               	movlb	2	; () banked
   882  0003E2  6F0E               	movwf	(main@mR+5)& (0+255),b
   883                           
   884                           ;main.c: 96: mR.dir_pin=2;
   885  0003E4  0E02               	movlw	2
   886  0003E6  0102               	movlb	2	; () banked
   887  0003E8  6F0F               	movwf	(main@mR+6)& (0+255),b
   888                           
   889                           ;main.c: 97: mR.PWMperiod=199;
   890  0003EA  0E00               	movlw	0
   891  0003EC  0102               	movlb	2	; () banked
   892  0003EE  6F11               	movwf	(main@mR+8)& (0+255),b
   893  0003F0  0EC7               	movlw	199
   894  0003F2  6F10               	movwf	(main@mR+7)& (0+255),b
   895                           
   896                           ;main.c: 99: OSCCON = 0x72;
   897  0003F4  0E72               	movlw	114
   898  0003F6  6ED3               	movwf	4051,c	;volatile
   899  0003F8                     l375:
   900  0003F8  B4D3               	btfsc	4051,2,c	;volatile
   901  0003FA  D22A               	goto	l3342
   902  0003FC  D7FD               	goto	l375
   903  0003FE                     l3186:
   904                           
   905                           ;main.c: 112: stop(&mL, &mR);
   906  0003FE  0E00               	movlw	low main@mL
   907  000400  0100               	movlb	0	; () banked
   908  000402  6F62               	movwf	stop@mL& (0+255),b
   909  000404  0E02               	movlw	high main@mL
   910  000406  0100               	movlb	0	; () banked
   911  000408  6F63               	movwf	(stop@mL+1)& (0+255),b
   912  00040A  0E09               	movlw	low main@mR
   913  00040C  0100               	movlb	0	; () banked
   914  00040E  6F64               	movwf	stop@mR& (0+255),b
   915  000410  0E02               	movlw	high main@mR
   916  000412  0100               	movlb	0	; () banked
   917  000414  6F65               	movwf	(stop@mR+1)& (0+255),b
   918  000416  EC43  F009         	call	_stop	;wreg free
   919                           
   920                           ;main.c: 113: RFID_Read=0;
   921  00041A  0E00               	movlw	0
   922  00041C  0101               	movlb	1	; () banked
   923  00041E  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   924                           
   925                           ; BSR set to: 1
   926                           ;main.c: 116: SensorResult[0]=grabLeftIR();
   927  000420  EC8D  F00A         	call	_grabLeftIR	;wreg free
   928  000424  C024  F0AF         	movff	?_grabLeftIR,main@SensorResult
   929  000428  C025  F0B0         	movff	?_grabLeftIR+1,main@SensorResult+1
   930                           
   931                           ;main.c: 117: SensorResult[1]=grabRightIR();
   932  00042C  EC54  F00A         	call	_grabRightIR	;wreg free
   933  000430  C024  F0B1         	movff	?_grabRightIR,main@SensorResult+2
   934  000434  C025  F0B2         	movff	?_grabRightIR+1,main@SensorResult+3
   935                           
   936                           ;main.c: 121: CAP1BUFH=0;
   937  000438  0E00               	movlw	0
   938  00043A  6E69               	movwf	3945,c	;volatile
   939                           
   940                           ;main.c: 122: CAP1BUFL=0;
   941  00043C  0E00               	movlw	0
   942  00043E  6E68               	movwf	3944,c	;volatile
   943                           
   944                           ;main.c: 123: CAP2BUFH=0;
   945  000440  0E00               	movlw	0
   946  000442  6E67               	movwf	3943,c	;volatile
   947                           
   948                           ;main.c: 124: CAP2BUFL=0;
   949  000444  0E00               	movlw	0
   950  000446  6E66               	movwf	3942,c	;volatile
   951                           
   952                           ;main.c: 127: SendLCD(0b00000001,0);
   953  000448  0E00               	movlw	0
   954  00044A  6E28               	movwf	SendLCD@type,c
   955  00044C  0E01               	movlw	1
   956  00044E  EC19  F00C         	call	_SendLCD
   957                           
   958                           ;main.c: 128: _delay((unsigned long)((50)*(8000000/4000000.0)));
   959  000452  0E21               	movlw	33
   960  000454                     u2837:
   961  000454  2EE8               	decfsz	wreg,f,c
   962  000456  D7FE               	goto	u2837
   963  000458  F000               	nop	
   964                           
   965                           ;main.c: 129: SendLCD(0b00000010,0);
   966  00045A  0E00               	movlw	0
   967  00045C  6E28               	movwf	SendLCD@type,c
   968  00045E  0E02               	movlw	2
   969  000460  EC19  F00C         	call	_SendLCD
   970                           
   971                           ;main.c: 130: _delay((unsigned long)((2)*(8000000/4000.0)));
   972  000464  0E06               	movlw	6
   973  000466  0100               	movlb	0	; () banked
   974  000468  6FAC               	movwf	??_main& (0+255),b
   975  00046A  0E30               	movlw	48
   976  00046C                     u2847:
   977  00046C  2EE8               	decfsz	wreg,f,c
   978  00046E  D7FE               	goto	u2847
   979  000470  2FAC               	decfsz	??_main& (0+255),f,b
   980  000472  D7FC               	goto	u2847
   981  000474  D000               	nop2	
   982                           
   983                           ;main.c: 131: SetLine(1);
   984  000476  0E01               	movlw	1
   985  000478  EC01  F00C         	call	_SetLine
   986                           
   987                           ;main.c: 132: LCD_String("      Inert Mode");
   988  00047C  0E1C               	movlw	low STR_5
   989  00047E  6E2A               	movwf	LCD_String@string,c
   990  000480  0E03               	movlw	high STR_5
   991  000482  6E2B               	movwf	LCD_String@string+1,c
   992  000484  ECC6  F00A         	call	_LCD_String	;wreg free
   993                           
   994                           ;main.c: 133: SetLine(2);
   995  000488  0E02               	movlw	2
   996  00048A  EC01  F00C         	call	_SetLine
   997                           
   998                           ;main.c: 134: if (RFID_Read) {
   999  00048E  0101               	movlb	1	; () banked
  1000  000490  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1001  000492  B4D8               	btfsc	status,2,c
  1002  000494  D007               	goto	l3220
  1003                           
  1004                           ; BSR set to: 1
  1005                           ;main.c: 135: LCD_String(Message);
  1006  000496  0EF0               	movlw	low main@Message
  1007  000498  6E2A               	movwf	LCD_String@string,c
  1008  00049A  0E01               	movlw	high main@Message
  1009  00049C  6E2B               	movwf	LCD_String@string+1,c
  1010  00049E  ECC6  F00A         	call	_LCD_String	;wreg free
  1011                           
  1012                           ;main.c: 136: } else {
  1013  0004A2  D1D6               	goto	l3342
  1014  0004A4                     l3220:
  1015                           
  1016                           ;main.c: 137: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1017  0004A4  0EC8               	movlw	low main@buf
  1018  0004A6  6E30               	movwf	sprintf@sp,c
  1019  0004A8  0E01               	movlw	high main@buf
  1020  0004AA  6E31               	movwf	sprintf@sp+1,c
  1021  0004AC  0E0B               	movlw	low STR_6
  1022  0004AE  6E32               	movwf	sprintf@f,c
  1023  0004B0  0E03               	movlw	high STR_6
  1024  0004B2  6E33               	movwf	sprintf@f+1,c
  1025  0004B4  C0AF  F034         	movff	main@SensorResult,?_sprintf+4
  1026  0004B8  C0B0  F035         	movff	main@SensorResult+1,?_sprintf+5
  1027  0004BC  C0B1  F036         	movff	main@SensorResult+2,?_sprintf+6
  1028  0004C0  C0B2  F037         	movff	main@SensorResult+3,?_sprintf+7
  1029  0004C4  EC39  F004         	call	_sprintf	;wreg free
  1030                           
  1031                           ;main.c: 138: LCD_String(buf);
  1032  0004C8  0EC8               	movlw	low main@buf
  1033  0004CA  6E2A               	movwf	LCD_String@string,c
  1034  0004CC  0E01               	movlw	high main@buf
  1035  0004CE  6E2B               	movwf	LCD_String@string+1,c
  1036  0004D0  ECC6  F00A         	call	_LCD_String	;wreg free
  1037                           
  1038                           ;main.c: 139: }
  1039                           ;main.c: 142: break;
  1040  0004D4  D1BD               	goto	l3342
  1041  0004D6                     l3224:
  1042                           
  1043                           ;main.c: 147: initMotorPWM();
  1044  0004D6  ECE8  F00B         	call	_initMotorPWM	;wreg free
  1045                           
  1046                           ;main.c: 148: initTimer();
  1047  0004DA  EC9A  F00C         	call	_initTimer	;wreg free
  1048                           
  1049                           ;main.c: 149: initRFID();
  1050  0004DE  EC8C  F00C         	call	_initRFID	;wreg free
  1051                           
  1052                           ;main.c: 150: initLCD();
  1053  0004E2  EC8B  F008         	call	_initLCD	;wreg free
  1054                           
  1055                           ;main.c: 151: initIR();
  1056  0004E6  EC6C  F00C         	call	_initIR	;wreg free
  1057                           
  1058                           ;main.c: 153: enableSensor(0, 1);
  1059  0004EA  0E01               	movlw	1
  1060  0004EC  6E24               	movwf	enableSensor@status,c
  1061  0004EE  0E00               	movlw	0
  1062  0004F0  EC46  F00C         	call	_enableSensor
  1063                           
  1064                           ;main.c: 154: enableSensor(1, 1);
  1065  0004F4  0E01               	movlw	1
  1066  0004F6  6E24               	movwf	enableSensor@status,c
  1067  0004F8  0E01               	movlw	1
  1068  0004FA  EC46  F00C         	call	_enableSensor
  1069                           
  1070                           ;main.c: 157: fullSpeedAhead(&mL, &mR, 100);
  1071  0004FE  0E00               	movlw	low main@mL
  1072  000500  0100               	movlb	0	; () banked
  1073  000502  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1074  000504  0E02               	movlw	high main@mL
  1075  000506  0100               	movlb	0	; () banked
  1076  000508  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1077  00050A  0E09               	movlw	low main@mR
  1078  00050C  0100               	movlb	0	; () banked
  1079  00050E  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1080  000510  0E02               	movlw	high main@mR
  1081  000512  0100               	movlb	0	; () banked
  1082  000514  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1083  000516  0E64               	movlw	100
  1084  000518  0100               	movlb	0	; () banked
  1085  00051A  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1086  00051C  EC14  F00A         	call	_fullSpeedAhead	;wreg free
  1087                           
  1088                           ;main.c: 158: delay_tenth_s(1);
  1089  000520  0E01               	movlw	1
  1090  000522  ECB0  F00B         	call	_delay_tenth_s
  1091                           
  1092                           ;main.c: 160: mode=-1;
  1093  000526  683B               	setf	_mode,c	;volatile
  1094                           
  1095                           ;main.c: 162: break;
  1096  000528  D193               	goto	l3342
  1097  00052A                     l3244:
  1098                           
  1099                           ;main.c: 170: SetLine(1);
  1100  00052A  0E01               	movlw	1
  1101  00052C  EC01  F00C         	call	_SetLine
  1102                           
  1103                           ;main.c: 171: LCD_String("Searching");
  1104  000530  0E44               	movlw	low STR_7
  1105  000532  6E2A               	movwf	LCD_String@string,c
  1106  000534  0E03               	movlw	high STR_7
  1107  000536  6E2B               	movwf	LCD_String@string+1,c
  1108  000538  ECC6  F00A         	call	_LCD_String	;wreg free
  1109                           
  1110                           ;main.c: 173: if (DirectionFound==-1) {
  1111  00053C  0100               	movlb	0	; () banked
  1112  00053E  29B3               	incf	main@DirectionFound& (0+255),w,b
  1113  000540  A4D8               	btfss	status,2,c
  1114  000542  D030               	goto	l3260
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;main.c: 178: fullSpeedAhead(&mL, &mR, 100);
  1118  000544  0E00               	movlw	low main@mL
  1119  000546  0100               	movlb	0	; () banked
  1120  000548  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1121  00054A  0E02               	movlw	high main@mL
  1122  00054C  0100               	movlb	0	; () banked
  1123  00054E  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1124  000550  0E09               	movlw	low main@mR
  1125  000552  0100               	movlb	0	; () banked
  1126  000554  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1127  000556  0E02               	movlw	high main@mR
  1128  000558  0100               	movlb	0	; () banked
  1129  00055A  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1130  00055C  0E64               	movlw	100
  1131  00055E  0100               	movlb	0	; () banked
  1132  000560  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1133  000562  EC14  F00A         	call	_fullSpeedAhead	;wreg free
  1134                           
  1135                           ;main.c: 179: delay_tenth_s(6);
  1136  000566  0E06               	movlw	6
  1137  000568  ECB0  F00B         	call	_delay_tenth_s
  1138                           
  1139                           ;main.c: 180: stop(&mL,&mR);
  1140  00056C  0E00               	movlw	low main@mL
  1141  00056E  0100               	movlb	0	; () banked
  1142  000570  6F62               	movwf	stop@mL& (0+255),b
  1143  000572  0E02               	movlw	high main@mL
  1144  000574  0100               	movlb	0	; () banked
  1145  000576  6F63               	movwf	(stop@mL+1)& (0+255),b
  1146  000578  0E09               	movlw	low main@mR
  1147  00057A  0100               	movlb	0	; () banked
  1148  00057C  6F64               	movwf	stop@mR& (0+255),b
  1149  00057E  0E02               	movlw	high main@mR
  1150  000580  0100               	movlb	0	; () banked
  1151  000582  6F65               	movwf	(stop@mR+1)& (0+255),b
  1152  000584  EC43  F009         	call	_stop	;wreg free
  1153                           
  1154                           ;main.c: 181: DirectionFound=0;
  1155  000588  0E00               	movlw	0
  1156  00058A  0100               	movlb	0	; () banked
  1157  00058C  6FB3               	movwf	main@DirectionFound& (0+255),b
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;main.c: 182: MoveType[Move]=0;
  1161  00058E  0100               	movlb	0	; () banked
  1162  000590  51B4               	movf	main@Move& (0+255),w,b
  1163  000592  0D01               	mullw	1
  1164  000594  0E64               	movlw	low main@MoveType
  1165  000596  24F3               	addwf	prodl,w,c
  1166  000598  6ED9               	movwf	fsr2l,c
  1167  00059A  0E01               	movlw	high main@MoveType
  1168  00059C  20F4               	addwfc	prodh,w,c
  1169  00059E  6EDA               	movwf	fsr2h,c
  1170  0005A0  0E00               	movlw	0
  1171  0005A2  D132               	goto	L2
  1172  0005A4                     l3260:
  1173                           
  1174                           ; BSR set to: 0
  1175  0005A4  0100               	movlb	0	; () banked
  1176  0005A6  51B3               	movf	main@DirectionFound& (0+255),w,b
  1177  0005A8  0100               	movlb	0	; () banked
  1178  0005AA  A4D8               	btfss	status,2,c
  1179  0005AC  D020               	goto	l3266
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;main.c: 185: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, &MoveTime[Move]);
  1183  0005AE  0E00               	movlw	low main@mL
  1184  0005B0  0100               	movlb	0	; () banked
  1185  0005B2  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1186  0005B4  0E02               	movlw	high main@mL
  1187  0005B6  0100               	movlb	0	; () banked
  1188  0005B8  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1189  0005BA  0E09               	movlw	low main@mR
  1190  0005BC  0100               	movlb	0	; () banked
  1191  0005BE  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1192  0005C0  0E02               	movlw	high main@mR
  1193  0005C2  0100               	movlb	0	; () banked
  1194  0005C4  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1195  0005C6  C0AE  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1196  0005CA  0100               	movlb	0	; () banked
  1197  0005CC  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1198  0005CE  0100               	movlb	0	; () banked
  1199  0005D0  51B4               	movf	main@Move& (0+255),w,b
  1200  0005D2  0D01               	mullw	1
  1201  0005D4  0E00               	movlw	low main@MoveTime
  1202  0005D6  24F3               	addwf	prodl,w,c
  1203  0005D8  0100               	movlb	0	; () banked
  1204  0005DA  6F73               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1205  0005DC  0E01               	movlw	high main@MoveTime
  1206  0005DE  20F4               	addwfc	prodh,w,c
  1207  0005E0  0100               	movlb	0	; () banked
  1208  0005E2  6F74               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1209  0005E4  ECBC  F005         	call	_ScanWithRange	;wreg free
  1210  0005E8  0100               	movlb	0	; () banked
  1211  0005EA  6FB3               	movwf	main@DirectionFound& (0+255),b
  1212  0005EC  D02E               	goto	l3274
  1213  0005EE                     l3266:
  1214                           
  1215                           ; BSR set to: 0
  1216  0005EE  0100               	movlb	0	; () banked
  1217  0005F0  05B3               	decf	main@DirectionFound& (0+255),w,b
  1218  0005F2  A4D8               	btfss	status,2,c
  1219  0005F4  D023               	goto	l3270
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;main.c: 189: DirectionFound=ScanIR(&mL, &mR, &Move, &MoveTime, &MoveType);
  1223  0005F6  0E00               	movlw	low main@mL
  1224  0005F8  0100               	movlb	0	; () banked
  1225  0005FA  6F6D               	movwf	ScanIR@mL& (0+255),b
  1226  0005FC  0E02               	movlw	high main@mL
  1227  0005FE  0100               	movlb	0	; () banked
  1228  000600  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1229  000602  0E09               	movlw	low main@mR
  1230  000604  0100               	movlb	0	; () banked
  1231  000606  6F6F               	movwf	ScanIR@mR& (0+255),b
  1232  000608  0E02               	movlw	high main@mR
  1233  00060A  0100               	movlb	0	; () banked
  1234  00060C  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1235  00060E  0EB4               	movlw	low main@Move
  1236  000610  0100               	movlb	0	; () banked
  1237  000612  6F71               	movwf	ScanIR@Move& (0+255),b
  1238  000614  0E00               	movlw	high main@Move
  1239  000616  0100               	movlb	0	; () banked
  1240  000618  6F72               	movwf	(ScanIR@Move+1)& (0+255),b
  1241  00061A  0E00               	movlw	low main@MoveTime
  1242  00061C  0100               	movlb	0	; () banked
  1243  00061E  6F73               	movwf	ScanIR@MoveTime& (0+255),b
  1244  000620  0E01               	movlw	high main@MoveTime
  1245  000622  0100               	movlb	0	; () banked
  1246  000624  6F74               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1247  000626  0E64               	movlw	low main@MoveType
  1248  000628  0100               	movlb	0	; () banked
  1249  00062A  6F75               	movwf	ScanIR@MoveType& (0+255),b
  1250  00062C  0E01               	movlw	high main@MoveType
  1251  00062E  0100               	movlb	0	; () banked
  1252  000630  6F76               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1253  000632  ECAB  F007         	call	_ScanIR	;wreg free
  1254  000636  0100               	movlb	0	; () banked
  1255  000638  6FB3               	movwf	main@DirectionFound& (0+255),b
  1256                           
  1257                           ;main.c: 190: } else if (DirectionFound==2) {
  1258  00063A  D0E7               	goto	l3330
  1259  00063C                     l3270:
  1260                           
  1261                           ; BSR set to: 0
  1262  00063C  0E02               	movlw	2
  1263  00063E  0100               	movlb	0	; () banked
  1264  000640  19B3               	xorwf	main@DirectionFound& (0+255),w,b
  1265  000642  A4D8               	btfss	status,2,c
  1266  000644  D0E2               	goto	l3330
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;main.c: 192: mode=2;
  1270  000646  0E02               	movlw	2
  1271  000648  6E3B               	movwf	_mode,c	;volatile
  1272  00064A                     l3274:
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;main.c: 193: MoveType[Move]=1;
  1276  00064A  0100               	movlb	0	; () banked
  1277  00064C  51B4               	movf	main@Move& (0+255),w,b
  1278  00064E  0D01               	mullw	1
  1279  000650  0E64               	movlw	low main@MoveType
  1280  000652  24F3               	addwf	prodl,w,c
  1281  000654  6ED9               	movwf	fsr2l,c
  1282  000656  0E01               	movlw	high main@MoveType
  1283  000658  20F4               	addwfc	prodh,w,c
  1284  00065A  6EDA               	movwf	fsr2h,c
  1285  00065C  0E01               	movlw	1
  1286  00065E  D0D4               	goto	L2
  1287  000660                     l3278:
  1288                           
  1289                           ;main.c: 205: if (RFID_Read) {
  1290  000660  0101               	movlb	1	; () banked
  1291  000662  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1292  000664  B4D8               	btfsc	status,2,c
  1293  000666  D0A2               	goto	l3320
  1294                           
  1295                           ; BSR set to: 1
  1296                           ;main.c: 206: stop(&mL, &mR);
  1297  000668  0E00               	movlw	low main@mL
  1298  00066A  0100               	movlb	0	; () banked
  1299  00066C  6F62               	movwf	stop@mL& (0+255),b
  1300  00066E  0E02               	movlw	high main@mL
  1301  000670  0100               	movlb	0	; () banked
  1302  000672  6F63               	movwf	(stop@mL+1)& (0+255),b
  1303  000674  0E09               	movlw	low main@mR
  1304  000676  0100               	movlb	0	; () banked
  1305  000678  6F64               	movwf	stop@mR& (0+255),b
  1306  00067A  0E02               	movlw	high main@mR
  1307  00067C  0100               	movlb	0	; () banked
  1308  00067E  6F65               	movwf	(stop@mR+1)& (0+255),b
  1309  000680  EC43  F009         	call	_stop	;wreg free
  1310                           
  1311                           ;main.c: 207: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1312  000684  0E03               	movlw	3
  1313  000686  0100               	movlb	0	; () banked
  1314  000688  19CD               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1315  00068A  A4D8               	btfss	status,2,c
  1316  00068C  D002               	goto	u2750
  1317  00068E  0E01               	movlw	1
  1318  000690  D001               	goto	u2752
  1319  000692                     u2750:
  1320  000692  0E00               	movlw	0
  1321  000694                     u2752:
  1322  000694  0100               	movlb	0	; () banked
  1323  000696  6FAC               	movwf	??_main& (0+255),b
  1324  000698  0E02               	movlw	2
  1325  00069A  0100               	movlb	0	; () banked
  1326  00069C  19BE               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1327  00069E  A4D8               	btfss	status,2,c
  1328  0006A0  D002               	goto	u2760
  1329  0006A2  0E01               	movlw	1
  1330  0006A4  D001               	goto	u2762
  1331  0006A6                     u2760:
  1332  0006A6  0E00               	movlw	0
  1333  0006A8                     u2762:
  1334  0006A8  0100               	movlb	0	; () banked
  1335  0006AA  15AC               	andwf	??_main& (0+255),w,b
  1336  0006AC  A0E8               	btfss	wreg,0,c
  1337  0006AE  D0D0               	goto	l3342
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;main.c: 208: if (VerifySignal(ReceivedString)){
  1341  0006B0  0EBE               	movlw	low _ReceivedString
  1342  0006B2  6E24               	movwf	VerifySignal@Signal,c
  1343  0006B4  0E00               	movlw	high _ReceivedString
  1344  0006B6  6E25               	movwf	VerifySignal@Signal+1,c
  1345  0006B8  ECE9  F008         	call	_VerifySignal	;wreg free
  1346  0006BC  0900               	iorlw	0
  1347  0006BE  B4D8               	btfsc	status,2,c
  1348  0006C0  D041               	goto	l3312
  1349                           
  1350                           ;main.c: 210: for (i=0; i<10; i++){
  1351  0006C2  0E00               	movlw	0
  1352  0006C4  0100               	movlb	0	; () banked
  1353  0006C6  6FB5               	movwf	main@i& (0+255),b
  1354  0006C8                     l3288:
  1355                           
  1356                           ; BSR set to: 0
  1357  0006C8  0E09               	movlw	9
  1358  0006CA  0100               	movlb	0	; () banked
  1359  0006CC  65B5               	cpfsgt	main@i& (0+255),b
  1360  0006CE  D001               	goto	l3292
  1361  0006D0  D020               	goto	l3298
  1362  0006D2                     l3292:
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 211: Message[i] = ReceivedString[i+1];
  1366  0006D2  0100               	movlb	0	; () banked
  1367  0006D4  51B5               	movf	main@i& (0+255),w,b
  1368  0006D6  0100               	movlb	0	; () banked
  1369  0006D8  6FAC               	movwf	??_main& (0+255),b
  1370  0006DA  6BAD               	clrf	(??_main+1)& (0+255),b
  1371  0006DC  0E01               	movlw	1
  1372  0006DE  0100               	movlb	0	; () banked
  1373  0006E0  27AC               	addwf	??_main& (0+255),f,b
  1374  0006E2  0E00               	movlw	0
  1375  0006E4  23AD               	addwfc	(??_main+1)& (0+255),f,b
  1376  0006E6  0EBE               	movlw	low _ReceivedString
  1377  0006E8  0100               	movlb	0	; () banked
  1378  0006EA  25AC               	addwf	??_main& (0+255),w,b
  1379  0006EC  6ED9               	movwf	fsr2l,c
  1380  0006EE  0E00               	movlw	high _ReceivedString
  1381  0006F0  0100               	movlb	0	; () banked
  1382  0006F2  21AD               	addwfc	(??_main+1)& (0+255),w,b
  1383  0006F4  6EDA               	movwf	fsr2h,c
  1384  0006F6  0100               	movlb	0	; () banked
  1385  0006F8  51B5               	movf	main@i& (0+255),w,b
  1386  0006FA  0D01               	mullw	1
  1387  0006FC  0EF0               	movlw	low main@Message
  1388  0006FE  24F3               	addwf	prodl,w,c
  1389  000700  6EE1               	movwf	fsr1l,c
  1390  000702  0E01               	movlw	high main@Message
  1391  000704  20F4               	addwfc	prodh,w,c
  1392  000706  6EE2               	movwf	fsr1h,c
  1393  000708  CFDF FFE7          	movff	indf2,indf1
  1394                           
  1395                           ; BSR set to: 0
  1396  00070C  0100               	movlb	0	; () banked
  1397  00070E  2BB5               	incf	main@i& (0+255),f,b
  1398  000710  D7DB               	goto	l3288
  1399  000712                     l3298:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 212: }
  1403                           ;main.c: 215: for (i=0; i<16; i++) {
  1404  000712  0E00               	movlw	0
  1405  000714  0100               	movlb	0	; () banked
  1406  000716  6FB5               	movwf	main@i& (0+255),b
  1407  000718                     l3300:
  1408                           
  1409                           ; BSR set to: 0
  1410  000718  0E0F               	movlw	15
  1411  00071A  0100               	movlb	0	; () banked
  1412  00071C  65B5               	cpfsgt	main@i& (0+255),b
  1413  00071E  D001               	goto	l3304
  1414  000720  D00E               	goto	l3310
  1415  000722                     l3304:
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;main.c: 216: ReceivedString[i]=0;
  1419  000722  0100               	movlb	0	; () banked
  1420  000724  51B5               	movf	main@i& (0+255),w,b
  1421  000726  0D01               	mullw	1
  1422  000728  0EBE               	movlw	low _ReceivedString
  1423  00072A  24F3               	addwf	prodl,w,c
  1424  00072C  6ED9               	movwf	fsr2l,c
  1425  00072E  0E00               	movlw	high _ReceivedString
  1426  000730  20F4               	addwfc	prodh,w,c
  1427  000732  6EDA               	movwf	fsr2h,c
  1428  000734  0E00               	movlw	0
  1429  000736  6EDF               	movwf	indf2,c
  1430                           
  1431                           ; BSR set to: 0
  1432  000738  0100               	movlb	0	; () banked
  1433  00073A  2BB5               	incf	main@i& (0+255),f,b
  1434  00073C  D7ED               	goto	l3300
  1435  00073E                     l3310:
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;main.c: 217: }
  1439                           ;main.c: 218: mode=3;
  1440  00073E  0E03               	movlw	3
  1441  000740  6E3B               	movwf	_mode,c	;volatile
  1442                           
  1443                           ;main.c: 220: } else {
  1444  000742  D086               	goto	l3342
  1445  000744                     l3312:
  1446                           
  1447                           ;main.c: 221: fullSpeedBack(&mL,&mR, 100);
  1448  000744  0E00               	movlw	low main@mL
  1449  000746  0100               	movlb	0	; () banked
  1450  000748  6F67               	movwf	fullSpeedBack@mL& (0+255),b
  1451  00074A  0E02               	movlw	high main@mL
  1452  00074C  0100               	movlb	0	; () banked
  1453  00074E  6F68               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1454  000750  0E09               	movlw	low main@mR
  1455  000752  0100               	movlb	0	; () banked
  1456  000754  6F69               	movwf	fullSpeedBack@mR& (0+255),b
  1457  000756  0E02               	movlw	high main@mR
  1458  000758  0100               	movlb	0	; () banked
  1459  00075A  6F6A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1460  00075C  0E64               	movlw	100
  1461  00075E  0100               	movlb	0	; () banked
  1462  000760  6F6B               	movwf	fullSpeedBack@power& (0+255),b
  1463  000762  EC91  F00B         	call	_fullSpeedBack	;wreg free
  1464                           
  1465                           ;main.c: 222: delay_tenth_s(5);
  1466  000766  0E05               	movlw	5
  1467  000768  ECB0  F00B         	call	_delay_tenth_s
  1468                           
  1469                           ;main.c: 223: stop(&mL,&mR);
  1470  00076C  0E00               	movlw	low main@mL
  1471  00076E  0100               	movlb	0	; () banked
  1472  000770  6F62               	movwf	stop@mL& (0+255),b
  1473  000772  0E02               	movlw	high main@mL
  1474  000774  0100               	movlb	0	; () banked
  1475  000776  6F63               	movwf	(stop@mL+1)& (0+255),b
  1476  000778  0E09               	movlw	low main@mR
  1477  00077A  0100               	movlb	0	; () banked
  1478  00077C  6F64               	movwf	stop@mR& (0+255),b
  1479  00077E  0E02               	movlw	high main@mR
  1480  000780  0100               	movlb	0	; () banked
  1481  000782  6F65               	movwf	(stop@mR+1)& (0+255),b
  1482  000784  EC43  F009         	call	_stop	;wreg free
  1483                           
  1484                           ;main.c: 224: fullSpeedAhead(&mL,&mR, 100);
  1485  000788  0E00               	movlw	low main@mL
  1486  00078A  0100               	movlb	0	; () banked
  1487  00078C  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1488  00078E  0E02               	movlw	high main@mL
  1489  000790  0100               	movlb	0	; () banked
  1490  000792  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1491  000794  0E09               	movlw	low main@mR
  1492  000796  0100               	movlb	0	; () banked
  1493  000798  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1494  00079A  0E02               	movlw	high main@mR
  1495  00079C  0100               	movlb	0	; () banked
  1496  00079E  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1497  0007A0  0E64               	movlw	100
  1498  0007A2  0100               	movlb	0	; () banked
  1499  0007A4  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1500  0007A6  EC14  F00A         	call	_fullSpeedAhead	;wreg free
  1501                           
  1502                           ;main.c: 225: }
  1503                           ;main.c: 226: }
  1504                           ;main.c: 227: } else {
  1505  0007AA  D052               	goto	l3342
  1506  0007AC                     l3320:
  1507                           
  1508                           ;main.c: 228: DirectionFound=1;
  1509  0007AC  0E01               	movlw	1
  1510  0007AE  0100               	movlb	0	; () banked
  1511  0007B0  6FB3               	movwf	main@DirectionFound& (0+255),b
  1512                           
  1513                           ;main.c: 229: mode=1;
  1514  0007B2  0E01               	movlw	1
  1515  0007B4  6E3B               	movwf	_mode,c	;volatile
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;main.c: 231: fullSpeedAhead(&mL,&mR, 100);
  1519  0007B6  0E00               	movlw	low main@mL
  1520  0007B8  0100               	movlb	0	; () banked
  1521  0007BA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1522  0007BC  0E02               	movlw	high main@mL
  1523  0007BE  0100               	movlb	0	; () banked
  1524  0007C0  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1525  0007C2  0E09               	movlw	low main@mR
  1526  0007C4  0100               	movlb	0	; () banked
  1527  0007C6  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1528  0007C8  0E02               	movlw	high main@mR
  1529  0007CA  0100               	movlb	0	; () banked
  1530  0007CC  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1531  0007CE  0E64               	movlw	100
  1532  0007D0  0100               	movlb	0	; () banked
  1533  0007D2  6F66               	movwf	fullSpeedAhead@power& (0+255),b
  1534  0007D4  EC14  F00A         	call	_fullSpeedAhead	;wreg free
  1535                           
  1536                           ;main.c: 232: delay_tenth_s(5);
  1537  0007D8  0E05               	movlw	5
  1538  0007DA  ECB0  F00B         	call	_delay_tenth_s
  1539                           
  1540                           ;main.c: 233: MoveType[Move] = 0;
  1541  0007DE  0100               	movlb	0	; () banked
  1542  0007E0  51B4               	movf	main@Move& (0+255),w,b
  1543  0007E2  0D01               	mullw	1
  1544  0007E4  0E64               	movlw	low main@MoveType
  1545  0007E6  24F3               	addwf	prodl,w,c
  1546  0007E8  6ED9               	movwf	fsr2l,c
  1547  0007EA  0E01               	movlw	high main@MoveType
  1548  0007EC  20F4               	addwfc	prodh,w,c
  1549  0007EE  6EDA               	movwf	fsr2h,c
  1550  0007F0  0E00               	movlw	0
  1551  0007F2  6EDF               	movwf	indf2,c
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 234: MoveTime[Move] = 5;
  1555  0007F4  0100               	movlb	0	; () banked
  1556  0007F6  51B4               	movf	main@Move& (0+255),w,b
  1557  0007F8  0D01               	mullw	1
  1558  0007FA  0E00               	movlw	low main@MoveTime
  1559  0007FC  24F3               	addwf	prodl,w,c
  1560  0007FE  6ED9               	movwf	fsr2l,c
  1561  000800  0E01               	movlw	high main@MoveTime
  1562  000802  20F4               	addwfc	prodh,w,c
  1563  000804  6EDA               	movwf	fsr2h,c
  1564  000806  0E05               	movlw	5
  1565  000808                     L2:
  1566  000808  6EDF               	movwf	indf2,c
  1567  00080A                     l3330:
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 235: Move++;
  1571  00080A  0100               	movlb	0	; () banked
  1572  00080C  2BB4               	incf	main@Move& (0+255),f,b
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;main.c: 236: }
  1576                           ;main.c: 238: break;
  1577  00080E  D020               	goto	l3342
  1578  000810                     l3332:
  1579                           
  1580                           ;main.c: 243: SetLine(1);
  1581  000810  0E01               	movlw	1
  1582  000812  EC01  F00C         	call	_SetLine
  1583                           
  1584                           ;main.c: 244: LCD_String(Message);
  1585  000816  0EF0               	movlw	low main@Message
  1586  000818  6E2A               	movwf	LCD_String@string,c
  1587  00081A  0E01               	movlw	high main@Message
  1588  00081C  6E2B               	movwf	LCD_String@string+1,c
  1589  00081E  ECC6  F00A         	call	_LCD_String	;wreg free
  1590                           
  1591                           ;main.c: 245: SetLine(2);
  1592  000822  0E02               	movlw	2
  1593  000824  EC01  F00C         	call	_SetLine
  1594                           
  1595                           ;main.c: 246: LCD_String("Going Home");
  1596  000828  0E39               	movlw	low STR_8
  1597  00082A  6E2A               	movwf	LCD_String@string,c
  1598  00082C  0E03               	movlw	high STR_8
  1599  00082E  6E2B               	movwf	LCD_String@string+1,c
  1600  000830  ECC6  F00A         	call	_LCD_String	;wreg free
  1601                           
  1602                           ;main.c: 247: stop(&mL,&mR);
  1603  000834  0E00               	movlw	low main@mL
  1604  000836  0100               	movlb	0	; () banked
  1605  000838  6F62               	movwf	stop@mL& (0+255),b
  1606  00083A  0E02               	movlw	high main@mL
  1607  00083C  0100               	movlb	0	; () banked
  1608  00083E  6F63               	movwf	(stop@mL+1)& (0+255),b
  1609  000840  0E09               	movlw	low main@mR
  1610  000842  0100               	movlb	0	; () banked
  1611  000844  6F64               	movwf	stop@mR& (0+255),b
  1612  000846  0E02               	movlw	high main@mR
  1613  000848  0100               	movlb	0	; () banked
  1614  00084A  6F65               	movwf	(stop@mR+1)& (0+255),b
  1615  00084C  EC43  F009         	call	_stop	;wreg free
  1616  000850                     l3342:
  1617  000850  503B               	movf	_mode,w,c	;volatile
  1618                           
  1619                           ; Switch size 1, requested type "space"
  1620                           ; Number of cases is 5, Range of values is 0 to 255
  1621                           ; switch strategies available:
  1622                           ; Name         Instructions Cycles
  1623                           ; simple_byte           16     9 (average)
  1624                           ;	Chosen strategy is simple_byte
  1625  000852  0A00               	xorlw	0	; case 0
  1626  000854  B4D8               	btfsc	status,2,c
  1627  000856  D63F               	goto	l3224
  1628  000858  0A01               	xorlw	1	; case 1
  1629  00085A  B4D8               	btfsc	status,2,c
  1630  00085C  D666               	goto	l3244
  1631  00085E  0A03               	xorlw	3	; case 2
  1632  000860  B4D8               	btfsc	status,2,c
  1633  000862  D6FE               	goto	l3278
  1634  000864  0A01               	xorlw	1	; case 3
  1635  000866  B4D8               	btfsc	status,2,c
  1636  000868  D7D3               	goto	l3332
  1637  00086A  0AFC               	xorlw	252	; case 255
  1638  00086C  B4D8               	btfsc	status,2,c
  1639  00086E  D5C7               	goto	l3186
  1640  000870  D7EF               	goto	l3342
  1641  000872                     __end_of_main:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           prodh	equ	0xFF4
  1645                           prodl	equ	0xFF3
  1646                           intcon	equ	0xFF2
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           indf1	equ	0xFE7
  1650                           fsr1h	equ	0xFE2
  1651                           fsr1l	equ	0xFE1
  1652                           indf2	equ	0xFDF
  1653                           fsr2h	equ	0xFDA
  1654                           fsr2l	equ	0xFD9
  1655                           status	equ	0xFD8
  1656                           
  1657 ;; *************** function _initTimer *****************
  1658 ;; Defined at:
  1659 ;;		line 8 in file "Movement.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;		None
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;		None
  1664 ;; Return value:  Size  Location     Type
  1665 ;;		None               void
  1666 ;; Registers used:
  1667 ;;		None
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1673 ;;      Params:         0       0       0       0
  1674 ;;      Locals:         0       0       0       0
  1675 ;;      Temps:          0       0       0       0
  1676 ;;      Totals:         0       0       0       0
  1677 ;;Total ram usage:        0 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    3
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_main
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text1
  1688  001934                     __ptext1:
  1689                           	opt stack 0
  1690  001934                     _initTimer:
  1691                           	opt stack 27
  1692                           
  1693                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  1694                           
  1695                           ;incstack = 0
  1696  001934  9ED5               	bcf	4053,7,c	;volatile
  1697                           
  1698                           ;Movement.c: 11: T0CONbits.T016BIT=0;
  1699  001936  9CD5               	bcf	4053,6,c	;volatile
  1700                           
  1701                           ;Movement.c: 12: T0CONbits.T0CS=0;
  1702  001938  9AD5               	bcf	4053,5,c	;volatile
  1703                           
  1704                           ;Movement.c: 13: T0CONbits.PSA=0;
  1705  00193A  96D5               	bcf	4053,3,c	;volatile
  1706                           
  1707                           ;Movement.c: 14: T0CONbits.T0PS=0b111;
  1708  00193C  80D5               	bsf	4053,0,c	;volatile
  1709  00193E  82D5               	bsf	4053,1,c	;volatile
  1710  001940  84D5               	bsf	4053,2,c	;volatile
  1711                           
  1712                           ;Movement.c: 17: INTCONbits.TMR0IE=0;
  1713  001942  9AF2               	bcf	intcon,5,c	;volatile
  1714  001944  0012               	return		;funcret
  1715  001946                     __end_of_initTimer:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           prodh	equ	0xFF4
  1719                           prodl	equ	0xFF3
  1720                           intcon	equ	0xFF2
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           indf1	equ	0xFE7
  1724                           fsr1h	equ	0xFE2
  1725                           fsr1l	equ	0xFE1
  1726                           indf2	equ	0xFDF
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function _initRFID *****************
  1732 ;; Defined at:
  1733 ;;		line 5 in file "RFID_Reader.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;		None
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;		None
  1738 ;; Return value:  Size  Location     Type
  1739 ;;		None               void
  1740 ;; Registers used:
  1741 ;;		wreg, status,2, status,0
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1747 ;;      Params:         0       0       0       0
  1748 ;;      Locals:         0       0       0       0
  1749 ;;      Temps:          0       0       0       0
  1750 ;;      Totals:         0       0       0       0
  1751 ;;Total ram usage:        0 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    3
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_main
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text2
  1762  001918                     __ptext2:
  1763                           	opt stack 0
  1764  001918                     _initRFID:
  1765                           	opt stack 27
  1766                           
  1767                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1768                           
  1769                           ;incstack = 0
  1770  001918  5094               	movf	3988,w,c	;volatile
  1771  00191A  09C0               	iorlw	192
  1772  00191C  6E94               	movwf	3988,c	;volatile
  1773                           
  1774                           ;RFID_Reader.c: 10: SPBRG=205;
  1775  00191E  0ECD               	movlw	205
  1776  001920  6EAF               	movwf	4015,c	;volatile
  1777                           
  1778                           ;RFID_Reader.c: 11: SPBRGH=0;
  1779  001922  0E00               	movlw	0
  1780  001924  6EB0               	movwf	4016,c	;volatile
  1781                           
  1782                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1783  001926  86AA               	bsf	4010,3,c	;volatile
  1784                           
  1785                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1786  001928  84AC               	bsf	4012,2,c	;volatile
  1787                           
  1788                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1789  00192A  88AB               	bsf	4011,4,c	;volatile
  1790                           
  1791                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1792  00192C  8EAB               	bsf	4011,7,c	;volatile
  1793                           
  1794                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1795  00192E  98AC               	bcf	4012,4,c	;volatile
  1796                           
  1797                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1798  001930  9CAB               	bcf	4011,6,c	;volatile
  1799  001932  0012               	return		;funcret
  1800  001934                     __end_of_initRFID:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           indf1	equ	0xFE7
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8
  1815                           
  1816 ;; *************** function _initMotorPWM *****************
  1817 ;; Defined at:
  1818 ;;		line 4 in file "dc_motor.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;		None
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;		None
  1823 ;; Return value:  Size  Location     Type
  1824 ;;		None               void
  1825 ;; Registers used:
  1826 ;;		wreg, status,2
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1832 ;;      Params:         0       0       0       0
  1833 ;;      Locals:         0       0       0       0
  1834 ;;      Temps:          0       0       0       0
  1835 ;;      Totals:         0       0       0       0
  1836 ;;Total ram usage:        0 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    3
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_main
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text3
  1847  0017D0                     __ptext3:
  1848                           	opt stack 0
  1849  0017D0                     _initMotorPWM:
  1850                           	opt stack 27
  1851                           
  1852                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1853                           
  1854                           ;incstack = 0
  1855  0017D0  0E00               	movlw	0
  1856  0017D2  6E7F               	movwf	3967,c	;volatile
  1857                           
  1858                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1859  0017D4  0E80               	movlw	128
  1860  0017D6  6E7E               	movwf	3966,c	;volatile
  1861                           
  1862                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1863  0017D8  0E6F               	movlw	111
  1864  0017DA  6E6F               	movwf	3951,c	;volatile
  1865                           
  1866                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1867  0017DC  0E00               	movlw	0
  1868  0017DE  6E6E               	movwf	3950,c	;volatile
  1869                           
  1870                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1871  0017E0  0EC7               	movlw	199
  1872  0017E2  6E7B               	movwf	3963,c	;volatile
  1873                           
  1874                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1875  0017E4  0E00               	movlw	0
  1876  0017E6  6E7A               	movwf	3962,c	;volatile
  1877                           
  1878                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1879  0017E8  0E00               	movlw	0
  1880  0017EA  6E79               	movwf	3961,c	;volatile
  1881                           
  1882                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1883  0017EC  0E00               	movlw	0
  1884  0017EE  6E78               	movwf	3960,c	;volatile
  1885                           
  1886                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1887  0017F0  0E00               	movlw	0
  1888  0017F2  6E77               	movwf	3959,c	;volatile
  1889                           
  1890                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1891  0017F4  0E00               	movlw	0
  1892  0017F6  6E76               	movwf	3958,c	;volatile
  1893                           
  1894                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1895  0017F8  9093               	bcf	3987,0,c	;volatile
  1896                           
  1897                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1898  0017FA  9293               	bcf	3987,1,c	;volatile
  1899                           
  1900                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1901  0017FC  9493               	bcf	3987,2,c	;volatile
  1902                           
  1903                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1904  0017FE  9693               	bcf	3987,3,c	;volatile
  1905  001800  0012               	return		;funcret
  1906  001802                     __end_of_initMotorPWM:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           prodh	equ	0xFF4
  1910                           prodl	equ	0xFF3
  1911                           intcon	equ	0xFF2
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           indf1	equ	0xFE7
  1915                           fsr1h	equ	0xFE2
  1916                           fsr1l	equ	0xFE1
  1917                           indf2	equ	0xFDF
  1918                           fsr2h	equ	0xFDA
  1919                           fsr2l	equ	0xFD9
  1920                           status	equ	0xFD8
  1921                           
  1922 ;; *************** function _initLCD *****************
  1923 ;; Defined at:
  1924 ;;		line 38 in file "LCD.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;		None               void
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1938 ;;      Params:         0       0       0       0
  1939 ;;      Locals:         0       0       0       0
  1940 ;;      Temps:          1       0       0       0
  1941 ;;      Totals:         1       0       0       0
  1942 ;;Total ram usage:        1 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    6
  1945 ;; This function calls:
  1946 ;;		_LCDout
  1947 ;;		_SendLCD
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text4
  1954  001116                     __ptext4:
  1955                           	opt stack 0
  1956  001116                     _initLCD:
  1957                           	opt stack 24
  1958                           
  1959                           ;LCD.c: 44: TRISAbits.RA6=0;
  1960                           
  1961                           ;incstack = 0
  1962  001116  9C92               	bcf	3986,6,c	;volatile
  1963                           
  1964                           ;LCD.c: 45: TRISCbits.RC0=0;
  1965  001118  9094               	bcf	3988,0,c	;volatile
  1966                           
  1967                           ;LCD.c: 46: TRISCbits.RC1=0;
  1968  00111A  9294               	bcf	3988,1,c	;volatile
  1969                           
  1970                           ;LCD.c: 47: TRISCbits.RC2=0;
  1971  00111C  9494               	bcf	3988,2,c	;volatile
  1972                           
  1973                           ;LCD.c: 48: TRISDbits.RD0=0;
  1974  00111E  9095               	bcf	3989,0,c	;volatile
  1975                           
  1976                           ;LCD.c: 49: TRISDbits.RD1=0;
  1977  001120  9295               	bcf	3989,1,c	;volatile
  1978                           
  1979                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1980  001122  0E27               	movlw	39
  1981  001124  6E2A               	movwf	??_initLCD& (0+255),c
  1982  001126  0EF5               	movlw	245
  1983  001128                     u2857:
  1984  001128  2EE8               	decfsz	wreg,f,c
  1985  00112A  D7FE               	goto	u2857
  1986  00112C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1987  00112E  D7FC               	goto	u2857
  1988  001130  F000               	nop	
  1989                           
  1990                           ;LCD.c: 52: LCDout(0b0011);
  1991  001132  0E03               	movlw	3
  1992  001134  EC28  F008         	call	_LCDout
  1993                           
  1994                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1995  001138  0E0D               	movlw	13
  1996  00113A  6E2A               	movwf	??_initLCD& (0+255),c
  1997  00113C  0EFC               	movlw	252
  1998  00113E                     u2867:
  1999  00113E  2EE8               	decfsz	wreg,f,c
  2000  001140  D7FE               	goto	u2867
  2001  001142  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2002  001144  D7FC               	goto	u2867
  2003                           
  2004                           ;LCD.c: 54: LCDout(0b0011);
  2005  001146  0E03               	movlw	3
  2006  001148  EC28  F008         	call	_LCDout
  2007                           
  2008                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2009  00114C  0E85               	movlw	133
  2010  00114E                     u2877:
  2011  00114E  2EE8               	decfsz	wreg,f,c
  2012  001150  D7FE               	goto	u2877
  2013  001152  F000               	nop	
  2014                           
  2015                           ;LCD.c: 56: LCDout(0b0011);
  2016  001154  0E03               	movlw	3
  2017  001156  EC28  F008         	call	_LCDout
  2018                           
  2019                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2020  00115A  0E21               	movlw	33
  2021  00115C                     u2887:
  2022  00115C  2EE8               	decfsz	wreg,f,c
  2023  00115E  D7FE               	goto	u2887
  2024  001160  F000               	nop	
  2025                           
  2026                           ;LCD.c: 58: LCDout(0b0010);
  2027  001162  0E02               	movlw	2
  2028  001164  EC28  F008         	call	_LCDout
  2029                           
  2030                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2031  001168  0E21               	movlw	33
  2032  00116A                     u2897:
  2033  00116A  2EE8               	decfsz	wreg,f,c
  2034  00116C  D7FE               	goto	u2897
  2035  00116E  F000               	nop	
  2036                           
  2037                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2038  001170  0E00               	movlw	0
  2039  001172  6E28               	movwf	SendLCD@type,c
  2040  001174  0E28               	movlw	40
  2041  001176  EC19  F00C         	call	_SendLCD
  2042                           
  2043                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2044  00117A  0E21               	movlw	33
  2045  00117C                     u2907:
  2046  00117C  2EE8               	decfsz	wreg,f,c
  2047  00117E  D7FE               	goto	u2907
  2048  001180  F000               	nop	
  2049                           
  2050                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2051  001182  0E00               	movlw	0
  2052  001184  6E28               	movwf	SendLCD@type,c
  2053  001186  0E08               	movlw	8
  2054  001188  EC19  F00C         	call	_SendLCD
  2055                           
  2056                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2057  00118C  0E21               	movlw	33
  2058  00118E                     u2917:
  2059  00118E  2EE8               	decfsz	wreg,f,c
  2060  001190  D7FE               	goto	u2917
  2061  001192  F000               	nop	
  2062                           
  2063                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2064  001194  0E00               	movlw	0
  2065  001196  6E28               	movwf	SendLCD@type,c
  2066  001198  0E01               	movlw	1
  2067  00119A  EC19  F00C         	call	_SendLCD
  2068                           
  2069                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2070  00119E  0E0D               	movlw	13
  2071  0011A0  6E2A               	movwf	??_initLCD& (0+255),c
  2072  0011A2  0EFC               	movlw	252
  2073  0011A4                     u2927:
  2074  0011A4  2EE8               	decfsz	wreg,f,c
  2075  0011A6  D7FE               	goto	u2927
  2076  0011A8  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2077  0011AA  D7FC               	goto	u2927
  2078                           
  2079                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2080  0011AC  0E00               	movlw	0
  2081  0011AE  6E28               	movwf	SendLCD@type,c
  2082  0011B0  0E06               	movlw	6
  2083  0011B2  EC19  F00C         	call	_SendLCD
  2084                           
  2085                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2086  0011B6  0E21               	movlw	33
  2087  0011B8                     u2937:
  2088  0011B8  2EE8               	decfsz	wreg,f,c
  2089  0011BA  D7FE               	goto	u2937
  2090  0011BC  F000               	nop	
  2091                           
  2092                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2093  0011BE  0E00               	movlw	0
  2094  0011C0  6E28               	movwf	SendLCD@type,c
  2095  0011C2  0E0C               	movlw	12
  2096  0011C4  EC19  F00C         	call	_SendLCD
  2097                           
  2098                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2099  0011C8  0E21               	movlw	33
  2100  0011CA                     u2947:
  2101  0011CA  2EE8               	decfsz	wreg,f,c
  2102  0011CC  D7FE               	goto	u2947
  2103  0011CE  F000               	nop	
  2104  0011D0  0012               	return		;funcret
  2105  0011D2                     __end_of_initLCD:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           prodh	equ	0xFF4
  2109                           prodl	equ	0xFF3
  2110                           intcon	equ	0xFF2
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           indf1	equ	0xFE7
  2114                           fsr1h	equ	0xFE2
  2115                           fsr1l	equ	0xFE1
  2116                           indf2	equ	0xFDF
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _initIR *****************
  2122 ;; Defined at:
  2123 ;;		line 30 in file "IR_Reading.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;		None               void
  2130 ;; Registers used:
  2131 ;;		wreg, status,2
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2137 ;;      Params:         0       0       0       0
  2138 ;;      Locals:         0       0       0       0
  2139 ;;      Temps:          0       0       0       0
  2140 ;;      Totals:         0       0       0       0
  2141 ;;Total ram usage:        0 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    3
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_main
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text5
  2152  0018D8                     __ptext5:
  2153                           	opt stack 0
  2154  0018D8                     _initIR:
  2155                           	opt stack 27
  2156                           
  2157                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2158                           
  2159                           ;incstack = 0
  2160  0018D8  9489               	bcf	3977,2,c	;volatile
  2161                           
  2162                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2163  0018DA  9689               	bcf	3977,3,c	;volatile
  2164                           
  2165                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2166  0018DC  8492               	bsf	3986,2,c	;volatile
  2167                           
  2168                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2169  0018DE  8692               	bsf	3986,3,c	;volatile
  2170                           
  2171                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2172  0018E0  94B8               	bcf	4024,2,c	;volatile
  2173                           
  2174                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2175  0018E2  96B8               	bcf	4024,3,c	;volatile
  2176                           
  2177                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2178  0018E4  9CB8               	bcf	4024,6,c	;volatile
  2179                           
  2180                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2181  0018E6  9EB8               	bcf	4024,7,c	;volatile
  2182                           
  2183                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2184  0018E8  0E06               	movlw	6
  2185  0018EA  6E63               	movwf	3939,c	;volatile
  2186                           
  2187                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2188  0018EC  0E06               	movlw	6
  2189  0018EE  6E62               	movwf	3938,c	;volatile
  2190                           
  2191                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2192  0018F0  9096               	bcf	3990,0,c	;volatile
  2193                           
  2194                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2195  0018F2  9296               	bcf	3990,1,c	;volatile
  2196                           
  2197                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2198  0018F4  0E59               	movlw	89
  2199  0018F6  6EB7               	movwf	4023,c	;volatile
  2200  0018F8  0012               	return		;funcret
  2201  0018FA                     __end_of_initIR:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           prodh	equ	0xFF4
  2205                           prodl	equ	0xFF3
  2206                           intcon	equ	0xFF2
  2207                           postinc0	equ	0xFEE
  2208                           wreg	equ	0xFE8
  2209                           indf1	equ	0xFE7
  2210                           fsr1h	equ	0xFE2
  2211                           fsr1l	equ	0xFE1
  2212                           indf2	equ	0xFDF
  2213                           fsr2h	equ	0xFDA
  2214                           fsr2l	equ	0xFD9
  2215                           status	equ	0xFD8
  2216                           
  2217 ;; *************** function _fullSpeedBack *****************
  2218 ;; Defined at:
  2219 ;;		line 125 in file "dc_motor.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  2222 ;;		 -> main@mL(9), 
  2223 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  2224 ;;		 -> main@mR(9), 
  2225 ;;  power           1   11[BANK0 ] unsigned char 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;		None
  2228 ;; Return value:  Size  Location     Type
  2229 ;;		None               void
  2230 ;; Registers used:
  2231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2237 ;;      Params:         0       5       0       0
  2238 ;;      Locals:         0       0       0       0
  2239 ;;      Temps:          0       0       0       0
  2240 ;;      Totals:         0       5       0       0
  2241 ;;Total ram usage:        5 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    6
  2244 ;; This function calls:
  2245 ;;		_fullSpeedAhead
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text6
  2252  001722                     __ptext6:
  2253                           	opt stack 0
  2254  001722                     _fullSpeedBack:
  2255                           	opt stack 24
  2256                           
  2257                           ;dc_motor.c: 128: mL->direction=0;
  2258                           
  2259                           ;incstack = 0
  2260  001722  0100               	movlb	0	; () banked
  2261  001724  EE20 F001          	lfsr	2,1
  2262  001728  5167               	movf	fullSpeedBack@mL& (0+255),w,b
  2263  00172A  26D9               	addwf	fsr2l,f,c
  2264  00172C  5168               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2265  00172E  22DA               	addwfc	fsr2h,f,c
  2266  001730  0E00               	movlw	0
  2267  001732  6EDF               	movwf	indf2,c
  2268                           
  2269                           ;dc_motor.c: 129: mR->direction=0;
  2270  001734  0100               	movlb	0	; () banked
  2271  001736  EE20 F001          	lfsr	2,1
  2272  00173A  5169               	movf	fullSpeedBack@mR& (0+255),w,b
  2273  00173C  26D9               	addwf	fsr2l,f,c
  2274  00173E  516A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2275  001740  22DA               	addwfc	fsr2h,f,c
  2276  001742  0E00               	movlw	0
  2277  001744  6EDF               	movwf	indf2,c
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR, power);
  2281  001746  C067  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2282  00174A  C068  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2283  00174E  C069  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2284  001752  C06A  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2285  001756  C06B  F066         	movff	fullSpeedBack@power,fullSpeedAhead@power
  2286  00175A  EC14  F00A         	call	_fullSpeedAhead	;wreg free
  2287  00175E  0012               	return		;funcret
  2288  001760                     __end_of_fullSpeedBack:
  2289                           	opt stack 0
  2290                           tblptru	equ	0xFF8
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           intcon	equ	0xFF2
  2294                           postinc0	equ	0xFEE
  2295                           wreg	equ	0xFE8
  2296                           indf1	equ	0xFE7
  2297                           fsr1h	equ	0xFE2
  2298                           fsr1l	equ	0xFE1
  2299                           indf2	equ	0xFDF
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _enableSensor *****************
  2305 ;; Defined at:
  2306 ;;		line 106 in file "IR_Reading.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  sensor          1    wreg     unsigned char 
  2309 ;;  status          1   35[COMRAM] unsigned char 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  sensor          1   36[COMRAM] unsigned char 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;		None               void
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2321 ;;      Params:         1       0       0       0
  2322 ;;      Locals:         1       0       0       0
  2323 ;;      Temps:          0       0       0       0
  2324 ;;      Totals:         2       0       0       0
  2325 ;;Total ram usage:        2 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    3
  2328 ;; This function calls:
  2329 ;;		Nothing
  2330 ;; This function is called by:
  2331 ;;		_main
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text7
  2336  00188C                     __ptext7:
  2337                           	opt stack 0
  2338  00188C                     _enableSensor:
  2339                           	opt stack 27
  2340                           
  2341                           ;incstack = 0
  2342                           ;enableSensor@sensor stored from wreg
  2343  00188C  6E25               	movwf	enableSensor@sensor,c
  2344                           
  2345                           ;IR_Reading.c: 108: if (sensor==0){
  2346  00188E  5025               	movf	enableSensor@sensor,w,c
  2347  001890  A4D8               	btfss	status,2,c
  2348  001892  D006               	goto	l2318
  2349                           
  2350                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2351  001894  B024               	btfsc	enableSensor@status,0,c
  2352  001896  D002               	bra	u1775
  2353  001898  908D               	bcf	3981,0,c	;volatile
  2354  00189A  D001               	bra	u1776
  2355  00189C                     u1775:
  2356  00189C  808D               	bsf	3981,0,c	;volatile
  2357  00189E                     u1776:
  2358                           
  2359                           ;IR_Reading.c: 110: } else if (sensor==1){
  2360  00189E  0012               	return	
  2361  0018A0                     l2318:
  2362  0018A0  0425               	decf	enableSensor@sensor,w,c
  2363  0018A2  A4D8               	btfss	status,2,c
  2364  0018A4  0012               	return	
  2365                           
  2366                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2367  0018A6  B024               	btfsc	enableSensor@status,0,c
  2368  0018A8  D002               	bra	u1795
  2369  0018AA  928D               	bcf	3981,1,c	;volatile
  2370  0018AC  D001               	bra	u1796
  2371  0018AE                     u1795:
  2372  0018AE  828D               	bsf	3981,1,c	;volatile
  2373  0018B0                     u1796:
  2374  0018B0  0012               	return	
  2375  0018B2                     __end_of_enableSensor:
  2376                           	opt stack 0
  2377                           tblptru	equ	0xFF8
  2378                           prodh	equ	0xFF4
  2379                           prodl	equ	0xFF3
  2380                           intcon	equ	0xFF2
  2381                           postinc0	equ	0xFEE
  2382                           wreg	equ	0xFE8
  2383                           indf1	equ	0xFE7
  2384                           fsr1h	equ	0xFE2
  2385                           fsr1l	equ	0xFE1
  2386                           indf2	equ	0xFDF
  2387                           fsr2h	equ	0xFDA
  2388                           fsr2l	equ	0xFD9
  2389                           status	equ	0xFD8
  2390                           
  2391 ;; *************** function _VerifySignal *****************
  2392 ;; Defined at:
  2393 ;;		line 55 in file "RFID_Reader.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2396 ;;		 -> ReceivedString(16), 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  hexByte         2   44[COMRAM] unsigned int 
  2399 ;;  i               1   46[COMRAM] unsigned char 
  2400 ;;  checksum        1   43[COMRAM] unsigned char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      unsigned char 
  2403 ;; Registers used:
  2404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2410 ;;      Params:         2       0       0       0
  2411 ;;      Locals:         4       0       0       0
  2412 ;;      Temps:          6       0       0       0
  2413 ;;      Totals:        12       0       0       0
  2414 ;;Total ram usage:       12 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    3
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text8
  2425  0011D2                     __ptext8:
  2426                           	opt stack 0
  2427  0011D2                     _VerifySignal:
  2428                           	opt stack 27
  2429                           
  2430                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2431                           
  2432                           ;incstack = 0
  2433  0011D2  0E00               	movlw	0
  2434  0011D4  6E2C               	movwf	VerifySignal@checksum,c
  2435                           
  2436                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2437  0011D6  0E00               	movlw	0
  2438  0011D8  6E2E               	movwf	VerifySignal@hexByte+1,c
  2439  0011DA  0E00               	movlw	0
  2440  0011DC  6E2D               	movwf	VerifySignal@hexByte,c
  2441                           
  2442                           ;RFID_Reader.c: 58: unsigned char i=0;
  2443  0011DE  0E00               	movlw	0
  2444  0011E0  6E2F               	movwf	VerifySignal@i,c
  2445                           
  2446                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2447  0011E2  EE20 F004          	lfsr	2,4
  2448  0011E6  5024               	movf	VerifySignal@Signal,w,c
  2449  0011E8  26D9               	addwf	fsr2l,f,c
  2450  0011EA  5025               	movf	VerifySignal@Signal+1,w,c
  2451  0011EC  22DA               	addwfc	fsr2h,f,c
  2452  0011EE  50DF               	movf	indf2,w,c
  2453  0011F0  6E26               	movwf	??_VerifySignal& (0+255),c
  2454  0011F2  EE20 F003          	lfsr	2,3
  2455  0011F6  5024               	movf	VerifySignal@Signal,w,c
  2456  0011F8  26D9               	addwf	fsr2l,f,c
  2457  0011FA  5025               	movf	VerifySignal@Signal+1,w,c
  2458  0011FC  22DA               	addwfc	fsr2h,f,c
  2459  0011FE  50DF               	movf	indf2,w,c
  2460  001200  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2461  001202  5027               	movf	??_VerifySignal+1,w,c
  2462  001204  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2463  001206  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2464  001208  5026               	movf	??_VerifySignal,w,c
  2465  00120A  2428               	addwf	??_VerifySignal+2,w,c
  2466  00120C  6E2D               	movwf	VerifySignal@hexByte,c
  2467  00120E  0E00               	movlw	0
  2468  001210  2029               	addwfc	??_VerifySignal+3,w,c
  2469  001212  6E2E               	movwf	VerifySignal@hexByte+1,c
  2470                           
  2471                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2472  001214  EE20 F002          	lfsr	2,2
  2473  001218  5024               	movf	VerifySignal@Signal,w,c
  2474  00121A  26D9               	addwf	fsr2l,f,c
  2475  00121C  5025               	movf	VerifySignal@Signal+1,w,c
  2476  00121E  22DA               	addwfc	fsr2h,f,c
  2477  001220  50DF               	movf	indf2,w,c
  2478  001222  182D               	xorwf	VerifySignal@hexByte,w,c
  2479  001224  6E2C               	movwf	VerifySignal@checksum,c
  2480                           
  2481                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2482  001226  0E05               	movlw	5
  2483  001228  6E2F               	movwf	VerifySignal@i,c
  2484  00122A                     l2514:
  2485  00122A  0E09               	movlw	9
  2486  00122C  642F               	cpfsgt	VerifySignal@i,c
  2487  00122E  D001               	goto	l2518
  2488  001230  D028               	goto	l2526
  2489  001232                     l2518:
  2490                           
  2491                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2492  001232  502F               	movf	VerifySignal@i,w,c
  2493  001234  6E26               	movwf	??_VerifySignal& (0+255),c
  2494  001236  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2495  001238  0E01               	movlw	1
  2496  00123A  2626               	addwf	??_VerifySignal,f,c
  2497  00123C  0E00               	movlw	0
  2498  00123E  2227               	addwfc	??_VerifySignal+1,f,c
  2499  001240  5026               	movf	??_VerifySignal,w,c
  2500  001242  2424               	addwf	VerifySignal@Signal,w,c
  2501  001244  6ED9               	movwf	fsr2l,c
  2502  001246  5027               	movf	??_VerifySignal+1,w,c
  2503  001248  2025               	addwfc	VerifySignal@Signal+1,w,c
  2504  00124A  6EDA               	movwf	fsr2h,c
  2505  00124C  50DF               	movf	indf2,w,c
  2506  00124E  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2507  001250  502F               	movf	VerifySignal@i,w,c
  2508  001252  0D01               	mullw	1
  2509  001254  50F3               	movf	prodl,w,c
  2510  001256  2424               	addwf	VerifySignal@Signal,w,c
  2511  001258  6ED9               	movwf	fsr2l,c
  2512  00125A  50F4               	movf	prodh,w,c
  2513  00125C  2025               	addwfc	VerifySignal@Signal+1,w,c
  2514  00125E  6EDA               	movwf	fsr2h,c
  2515  001260  50DF               	movf	indf2,w,c
  2516  001262  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2517  001264  5029               	movf	??_VerifySignal+3,w,c
  2518  001266  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2519  001268  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2520  00126A  5028               	movf	??_VerifySignal+2,w,c
  2521  00126C  242A               	addwf	??_VerifySignal+4,w,c
  2522  00126E  6E2D               	movwf	VerifySignal@hexByte,c
  2523  001270  0E00               	movlw	0
  2524  001272  202B               	addwfc	??_VerifySignal+5,w,c
  2525  001274  6E2E               	movwf	VerifySignal@hexByte+1,c
  2526                           
  2527                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2528  001276  502C               	movf	VerifySignal@checksum,w,c
  2529  001278  182D               	xorwf	VerifySignal@hexByte,w,c
  2530  00127A  6E2C               	movwf	VerifySignal@checksum,c
  2531  00127C  0E02               	movlw	2
  2532  00127E  262F               	addwf	VerifySignal@i,f,c
  2533  001280  D7D4               	goto	l2514
  2534  001282                     l2526:
  2535                           
  2536                           ;RFID_Reader.c: 68: }
  2537                           ;RFID_Reader.c: 71: return 1;
  2538  001282  0E01               	movlw	1
  2539  001284  0012               	return	
  2540  001286                     __end_of_VerifySignal:
  2541                           	opt stack 0
  2542                           tblptru	equ	0xFF8
  2543                           prodh	equ	0xFF4
  2544                           prodl	equ	0xFF3
  2545                           intcon	equ	0xFF2
  2546                           postinc0	equ	0xFEE
  2547                           wreg	equ	0xFE8
  2548                           indf1	equ	0xFE7
  2549                           fsr1h	equ	0xFE2
  2550                           fsr1l	equ	0xFE1
  2551                           indf2	equ	0xFDF
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8
  2555                           
  2556 ;; *************** function _ScanWithRange *****************
  2557 ;; Defined at:
  2558 ;;		line 88 in file "Movement.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2561 ;;		 -> main@mL(9), 
  2562 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2563 ;;		 -> main@mR(9), 
  2564 ;;  milliseconds    2   17[BANK0 ] int 
  2565 ;;  MoveTimeEntr    2   19[BANK0 ] PTR unsigned char 
  2566 ;;		 -> main@MoveTime(100), 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  buf            40   23[BANK0 ] unsigned char [40]
  2569 ;;  SensorResult    4   70[BANK0 ] unsigned int [2]
  2570 ;;  DirectionFou    2   68[BANK0 ] const unsigned int 
  2571 ;;  n               2   66[BANK0 ] unsigned int 
  2572 ;;  i               2   64[BANK0 ] unsigned int 
  2573 ;;  RightFlag       1   75[BANK0 ] unsigned char 
  2574 ;;  LeftFlag        1   74[BANK0 ] unsigned char 
  2575 ;;  TimeAboveThr    1   63[BANK0 ] unsigned char 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      unsigned char 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2585 ;;      Params:         0       8       0       0
  2586 ;;      Locals:         0      53       0       0
  2587 ;;      Temps:          0       2       0       0
  2588 ;;      Totals:         0      63       0       0
  2589 ;;Total ram usage:       63 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    7
  2592 ;; This function calls:
  2593 ;;		_LCD_String
  2594 ;;		_SendLCD
  2595 ;;		_SetLine
  2596 ;;		_delay_tenth_s
  2597 ;;		_grabLeftIR
  2598 ;;		_grabRightIR
  2599 ;;		_sprintf
  2600 ;;		_stop
  2601 ;;		_turnLeft
  2602 ;;		_turnRight
  2603 ;; This function is called by:
  2604 ;;		_main
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           	psect	text9
  2609  000B78                     __ptext9:
  2610                           	opt stack 0
  2611  000B78                     _ScanWithRange:
  2612                           	opt stack 23
  2613                           
  2614                           ;Movement.c: 91: unsigned int SensorResult[2]={0,0};
  2615                           
  2616                           ;incstack = 0
  2617  000B78  C0BA  F0A6         	movff	ScanWithRange@F3892,ScanWithRange@SensorResult
  2618  000B7C  C0BB  F0A7         	movff	ScanWithRange@F3892+1,ScanWithRange@SensorResult+1
  2619  000B80  C0BC  F0A8         	movff	ScanWithRange@F3892+2,ScanWithRange@SensorResult+2
  2620  000B84  C0BD  F0A9         	movff	ScanWithRange@F3892+3,ScanWithRange@SensorResult+3
  2621                           
  2622                           ;Movement.c: 92: unsigned char LeftFlag=0;
  2623  000B88  0E00               	movlw	0
  2624  000B8A  0100               	movlb	0	; () banked
  2625  000B8C  6FAA               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2626                           
  2627                           ;Movement.c: 93: unsigned char RightFlag=0;
  2628  000B8E  0E00               	movlw	0
  2629  000B90  0100               	movlb	0	; () banked
  2630  000B92  6FAB               	movwf	ScanWithRange@RightFlag& (0+255),b
  2631                           
  2632                           ;Movement.c: 94: char buf[40];
  2633                           ;Movement.c: 95: unsigned int i=0;
  2634  000B94  0E00               	movlw	0
  2635  000B96  0100               	movlb	0	; () banked
  2636  000B98  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2637  000B9A  0E00               	movlw	0
  2638  000B9C  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2639                           
  2640                           ;Movement.c: 96: unsigned int n=0;
  2641  000B9E  0E00               	movlw	0
  2642  000BA0  0100               	movlb	0	; () banked
  2643  000BA2  6FA3               	movwf	(ScanWithRange@n+1)& (0+255),b
  2644  000BA4  0E00               	movlw	0
  2645  000BA6  6FA2               	movwf	ScanWithRange@n& (0+255),b
  2646                           
  2647                           ;Movement.c: 97: unsigned char TimeAboveThreshold=0;
  2648  000BA8  0E00               	movlw	0
  2649  000BAA  0100               	movlb	0	; () banked
  2650  000BAC  6F9F               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  2651                           
  2652                           ;Movement.c: 100: const unsigned int DirectionFoundThreshold=4000;
  2653  000BAE  0E0F               	movlw	15
  2654  000BB0  0100               	movlb	0	; () banked
  2655  000BB2  6FA5               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2656  000BB4  0EA0               	movlw	160
  2657  000BB6  6FA4               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;Movement.c: 109: turnLeft(mL,mR, 100);
  2661  000BB8  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2662  000BBC  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2663  000BC0  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2664  000BC4  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2665  000BC8  0E64               	movlw	100
  2666  000BCA  0100               	movlb	0	; () banked
  2667  000BCC  6F6B               	movwf	turnLeft@power& (0+255),b
  2668  000BCE  EC1E  F00B         	call	_turnLeft	;wreg free
  2669                           
  2670                           ;Movement.c: 110: delay_tenth_s(5);
  2671  000BD2  0E05               	movlw	5
  2672  000BD4  ECB0  F00B         	call	_delay_tenth_s
  2673                           
  2674                           ;Movement.c: 111: stop(mL,mR);
  2675  000BD8  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2676  000BDC  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2677  000BE0  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2678  000BE4  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2679  000BE8  EC43  F009         	call	_stop	;wreg free
  2680                           
  2681                           ;Movement.c: 114: for (i=1; i<=milliseconds; i++) {
  2682  000BEC  0E00               	movlw	0
  2683  000BEE  0100               	movlb	0	; () banked
  2684  000BF0  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2685  000BF2  0E01               	movlw	1
  2686  000BF4  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2687  000BF6  D0EC               	goto	l3126
  2688  000BF8                     l3054:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;Movement.c: 117: SensorResult[0]=grabLeftIR();
  2692  000BF8  EC8D  F00A         	call	_grabLeftIR	;wreg free
  2693  000BFC  C024  F0A6         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2694  000C00  C025  F0A7         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2695                           
  2696                           ;Movement.c: 118: SensorResult[1]=grabRightIR();
  2697  000C04  EC54  F00A         	call	_grabRightIR	;wreg free
  2698  000C08  C024  F0A8         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2699  000C0C  C025  F0A9         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2700                           
  2701                           ;Movement.c: 122: CAP1BUFH=0;
  2702  000C10  0E00               	movlw	0
  2703  000C12  6E69               	movwf	3945,c	;volatile
  2704                           
  2705                           ;Movement.c: 123: CAP1BUFL=0;
  2706  000C14  0E00               	movlw	0
  2707  000C16  6E68               	movwf	3944,c	;volatile
  2708                           
  2709                           ;Movement.c: 124: CAP2BUFH=0;
  2710  000C18  0E00               	movlw	0
  2711  000C1A  6E67               	movwf	3943,c	;volatile
  2712                           
  2713                           ;Movement.c: 125: CAP2BUFL=0;
  2714  000C1C  0E00               	movlw	0
  2715  000C1E  6E66               	movwf	3942,c	;volatile
  2716                           
  2717                           ;Movement.c: 128: SendLCD(0b00000001,0);
  2718  000C20  0E00               	movlw	0
  2719  000C22  6E28               	movwf	SendLCD@type,c
  2720  000C24  0E01               	movlw	1
  2721  000C26  EC19  F00C         	call	_SendLCD
  2722                           
  2723                           ;Movement.c: 129: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2724  000C2A  0E21               	movlw	33
  2725  000C2C                     u2957:
  2726  000C2C  2EE8               	decfsz	wreg,f,c
  2727  000C2E  D7FE               	goto	u2957
  2728  000C30  F000               	nop	
  2729                           
  2730                           ;Movement.c: 130: SendLCD(0b00000010,0);
  2731  000C32  0E00               	movlw	0
  2732  000C34  6E28               	movwf	SendLCD@type,c
  2733  000C36  0E02               	movlw	2
  2734  000C38  EC19  F00C         	call	_SendLCD
  2735                           
  2736                           ;Movement.c: 131: _delay((unsigned long)((2)*(8000000/4000.0)));
  2737  000C3C  0E06               	movlw	6
  2738  000C3E  0100               	movlb	0	; () banked
  2739  000C40  6F75               	movwf	??_ScanWithRange& (0+255),b
  2740  000C42  0E30               	movlw	48
  2741  000C44                     u2967:
  2742  000C44  2EE8               	decfsz	wreg,f,c
  2743  000C46  D7FE               	goto	u2967
  2744  000C48  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2745  000C4A  D7FC               	goto	u2967
  2746  000C4C  D000               	nop2	
  2747                           
  2748                           ;Movement.c: 132: SetLine(1);
  2749  000C4E  0E01               	movlw	1
  2750  000C50  EC01  F00C         	call	_SetLine
  2751                           
  2752                           ;Movement.c: 133: LCD_String("     ScanIR");
  2753  000C54  0E2D               	movlw	low STR_1
  2754  000C56  6E2A               	movwf	LCD_String@string,c
  2755  000C58  0E03               	movlw	high STR_1
  2756  000C5A  6E2B               	movwf	LCD_String@string+1,c
  2757  000C5C  ECC6  F00A         	call	_LCD_String	;wreg free
  2758                           
  2759                           ;Movement.c: 134: SetLine(2);
  2760  000C60  0E02               	movlw	2
  2761  000C62  EC01  F00C         	call	_SetLine
  2762                           
  2763                           ;Movement.c: 135: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2764  000C66  0E77               	movlw	low ScanWithRange@buf
  2765  000C68  6E30               	movwf	sprintf@sp,c
  2766  000C6A  0E00               	movlw	high ScanWithRange@buf
  2767  000C6C  6E31               	movwf	sprintf@sp+1,c
  2768  000C6E  0E0C               	movlw	low (STR_6+1)
  2769  000C70  6E32               	movwf	sprintf@f,c
  2770  000C72  0E03               	movlw	high (STR_6+1)
  2771  000C74  6E33               	movwf	sprintf@f+1,c
  2772  000C76  C0A6  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2773  000C7A  C0A7  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2774  000C7E  C0A8  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2775  000C82  C0A9  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2776  000C86  EC39  F004         	call	_sprintf	;wreg free
  2777                           
  2778                           ;Movement.c: 136: LCD_String(buf);
  2779  000C8A  0E77               	movlw	low ScanWithRange@buf
  2780  000C8C  6E2A               	movwf	LCD_String@string,c
  2781  000C8E  0E00               	movlw	high ScanWithRange@buf
  2782  000C90  6E2B               	movwf	LCD_String@string+1,c
  2783  000C92  ECC6  F00A         	call	_LCD_String	;wreg free
  2784                           
  2785                           ;Movement.c: 139: turnRight(mL,mR, 70);
  2786  000C96  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  2787  000C9A  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2788  000C9E  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  2789  000CA2  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2790  000CA6  0E46               	movlw	70
  2791  000CA8  0100               	movlb	0	; () banked
  2792  000CAA  6F6B               	movwf	turnRight@power& (0+255),b
  2793  000CAC  ECF5  F00A         	call	_turnRight	;wreg free
  2794                           
  2795                           ;Movement.c: 140: _delay((unsigned long)((1)*(8000000/4000.0)));
  2796  000CB0  0E03               	movlw	3
  2797  000CB2  0100               	movlb	0	; () banked
  2798  000CB4  6F75               	movwf	??_ScanWithRange& (0+255),b
  2799  000CB6  0E98               	movlw	152
  2800  000CB8                     u2977:
  2801  000CB8  2EE8               	decfsz	wreg,f,c
  2802  000CBA  D7FE               	goto	u2977
  2803  000CBC  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2804  000CBE  D7FC               	goto	u2977
  2805                           
  2806                           ;Movement.c: 142: if (SensorResult[1]>DirectionFoundThreshold) {
  2807  000CC0  0100               	movlb	0	; () banked
  2808  000CC2  51A8               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2809  000CC4  0100               	movlb	0	; () banked
  2810  000CC6  5DA4               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2811  000CC8  0100               	movlb	0	; () banked
  2812  000CCA  51A9               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2813  000CCC  0100               	movlb	0	; () banked
  2814  000CCE  59A5               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2815  000CD0  B0D8               	btfsc	status,0,c
  2816  000CD2  D003               	goto	l3086
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;Movement.c: 143: RightFlag=1;
  2820  000CD4  0E01               	movlw	1
  2821  000CD6  0100               	movlb	0	; () banked
  2822  000CD8  6FAB               	movwf	ScanWithRange@RightFlag& (0+255),b
  2823  000CDA                     l3086:
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;Movement.c: 144: }
  2827                           ;Movement.c: 146: if (SensorResult[0]>DirectionFoundThreshold) {
  2828  000CDA  0100               	movlb	0	; () banked
  2829  000CDC  51A6               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2830  000CDE  0100               	movlb	0	; () banked
  2831  000CE0  5DA4               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2832  000CE2  0100               	movlb	0	; () banked
  2833  000CE4  51A7               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2834  000CE6  0100               	movlb	0	; () banked
  2835  000CE8  59A5               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2836  000CEA  B0D8               	btfsc	status,0,c
  2837  000CEC  D003               	goto	l3090
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;Movement.c: 147: LeftFlag=1;
  2841  000CEE  0E01               	movlw	1
  2842  000CF0  0100               	movlb	0	; () banked
  2843  000CF2  6FAA               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2844  000CF4                     l3090:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;Movement.c: 148: }
  2848                           ;Movement.c: 151: if ((LeftFlag==1)||(RightFlag==1)) {
  2849  000CF4  0100               	movlb	0	; () banked
  2850  000CF6  05AA               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2851  000CF8  B4D8               	btfsc	status,2,c
  2852  000CFA  D004               	goto	l3094
  2853                           
  2854                           ; BSR set to: 0
  2855  000CFC  0100               	movlb	0	; () banked
  2856  000CFE  05AB               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2857  000D00  A4D8               	btfss	status,2,c
  2858  000D02  D002               	goto	l3096
  2859  000D04                     l3094:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;Movement.c: 152: TimeAboveThreshold++;
  2863  000D04  0100               	movlb	0	; () banked
  2864  000D06  2B9F               	incf	ScanWithRange@TimeAboveThreshold& (0+255),f,b
  2865  000D08                     l3096:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;Movement.c: 153: }
  2869                           ;Movement.c: 157: if ((LeftFlag==1)&&(RightFlag==1)) {
  2870  000D08  0100               	movlb	0	; () banked
  2871  000D0A  05AA               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2872  000D0C  A4D8               	btfss	status,2,c
  2873  000D0E  D048               	goto	l3114
  2874                           
  2875                           ; BSR set to: 0
  2876  000D10  0100               	movlb	0	; () banked
  2877  000D12  05AB               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2878  000D14  A4D8               	btfss	status,2,c
  2879  000D16  D044               	goto	l3114
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;Movement.c: 158: for (n=1; n<=(TimeAboveThreshold>>1); n++) {
  2883  000D18  0E00               	movlw	0
  2884  000D1A  0100               	movlb	0	; () banked
  2885  000D1C  6FA3               	movwf	(ScanWithRange@n+1)& (0+255),b
  2886  000D1E  0E01               	movlw	1
  2887  000D20  6FA2               	movwf	ScanWithRange@n& (0+255),b
  2888  000D22  D02C               	goto	l223
  2889  000D24                     l3102:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;Movement.c: 159: stop(mL,mR);
  2893  000D24  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2894  000D28  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2895  000D2C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2896  000D30  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2897  000D34  EC43  F009         	call	_stop	;wreg free
  2898                           
  2899                           ;Movement.c: 160: turnLeft(mL,mR, 100);
  2900  000D38  C06D  F067         	movff	ScanWithRange@mL,turnLeft@mL
  2901  000D3C  C06E  F068         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2902  000D40  C06F  F069         	movff	ScanWithRange@mR,turnLeft@mR
  2903  000D44  C070  F06A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2904  000D48  0E64               	movlw	100
  2905  000D4A  0100               	movlb	0	; () banked
  2906  000D4C  6F6B               	movwf	turnLeft@power& (0+255),b
  2907  000D4E  EC1E  F00B         	call	_turnLeft	;wreg free
  2908                           
  2909                           ;Movement.c: 161: _delay((unsigned long)((1)*(8000000/4000.0)));
  2910  000D52  0E03               	movlw	3
  2911  000D54  0100               	movlb	0	; () banked
  2912  000D56  6F75               	movwf	??_ScanWithRange& (0+255),b
  2913  000D58  0E98               	movlw	152
  2914  000D5A                     u2987:
  2915  000D5A  2EE8               	decfsz	wreg,f,c
  2916  000D5C  D7FE               	goto	u2987
  2917  000D5E  2F75               	decfsz	??_ScanWithRange& (0+255),f,b
  2918  000D60  D7FC               	goto	u2987
  2919                           
  2920                           ;Movement.c: 162: stop(mL,mR);
  2921  000D62  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2922  000D66  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2923  000D6A  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2924  000D6E  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2925  000D72  EC43  F009         	call	_stop	;wreg free
  2926  000D76  0100               	movlb	0	; () banked
  2927  000D78  4BA2               	infsnz	ScanWithRange@n& (0+255),f,b
  2928  000D7A  2BA3               	incf	(ScanWithRange@n+1)& (0+255),f,b
  2929  000D7C                     l223:
  2930                           
  2931                           ; BSR set to: 0
  2932  000D7C  0100               	movlb	0	; () banked
  2933  000D7E  90D8               	bcf	status,0,c
  2934  000D80  319F               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  2935  000D82  0100               	movlb	0	; () banked
  2936  000D84  6F75               	movwf	??_ScanWithRange& (0+255),b
  2937  000D86  6B76               	clrf	(??_ScanWithRange+1)& (0+255),b
  2938  000D88  0100               	movlb	0	; () banked
  2939  000D8A  51A2               	movf	ScanWithRange@n& (0+255),w,b
  2940  000D8C  0100               	movlb	0	; () banked
  2941  000D8E  5D75               	subwf	??_ScanWithRange& (0+255),w,b
  2942  000D90  0100               	movlb	0	; () banked
  2943  000D92  51A3               	movf	(ScanWithRange@n+1)& (0+255),w,b
  2944  000D94  0100               	movlb	0	; () banked
  2945  000D96  5976               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2946  000D98  B0D8               	btfsc	status,0,c
  2947  000D9A  D7C4               	goto	l3102
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;Movement.c: 163: }
  2951                           ;Movement.c: 164: return 2;
  2952                           
  2953                           ; BSR set to: 0
  2954  000D9C  0E02               	movlw	2
  2955                           
  2956                           ; BSR set to: 0
  2957  000D9E  0012               	return	
  2958  000DA0                     l3114:
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;Movement.c: 165: }
  2962                           ;Movement.c: 168: if ((LeftFlag==1)&&(RightFlag==0)) {
  2963  000DA0  0100               	movlb	0	; () banked
  2964  000DA2  05AA               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2965  000DA4  A4D8               	btfss	status,2,c
  2966  000DA6  D011               	goto	l3124
  2967                           
  2968                           ; BSR set to: 0
  2969  000DA8  0100               	movlb	0	; () banked
  2970  000DAA  51AB               	movf	ScanWithRange@RightFlag& (0+255),w,b
  2971  000DAC  0100               	movlb	0	; () banked
  2972  000DAE  A4D8               	btfss	status,2,c
  2973  000DB0  D00C               	goto	l3124
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;Movement.c: 169: stop(mL,mR);
  2977  000DB2  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2978  000DB6  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2979  000DBA  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2980  000DBE  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2981  000DC2  EC43  F009         	call	_stop	;wreg free
  2982                           
  2983                           ;Movement.c: 170: return 2;
  2984  000DC6  0E02               	movlw	2
  2985  000DC8  0012               	return	
  2986  000DCA                     l3124:
  2987  000DCA  0100               	movlb	0	; () banked
  2988  000DCC  4BA0               	infsnz	ScanWithRange@i& (0+255),f,b
  2989  000DCE  2BA1               	incf	(ScanWithRange@i+1)& (0+255),f,b
  2990  000DD0                     l3126:
  2991                           
  2992                           ; BSR set to: 0
  2993  000DD0  0100               	movlb	0	; () banked
  2994  000DD2  51A0               	movf	ScanWithRange@i& (0+255),w,b
  2995  000DD4  0100               	movlb	0	; () banked
  2996  000DD6  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  2997  000DD8  0100               	movlb	0	; () banked
  2998  000DDA  51A1               	movf	(ScanWithRange@i+1)& (0+255),w,b
  2999  000DDC  0100               	movlb	0	; () banked
  3000  000DDE  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  3001  000DE0  B0D8               	btfsc	status,0,c
  3002  000DE2  D70A               	goto	l3054
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;Movement.c: 171: }
  3006                           ;Movement.c: 173: }
  3007                           ;Movement.c: 176: turnRight(mL,mR, 100);
  3008                           
  3009                           ; BSR set to: 0
  3010  000DE4  C06D  F067         	movff	ScanWithRange@mL,turnRight@mL
  3011  000DE8  C06E  F068         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3012  000DEC  C06F  F069         	movff	ScanWithRange@mR,turnRight@mR
  3013  000DF0  C070  F06A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3014  000DF4  0E64               	movlw	100
  3015  000DF6  0100               	movlb	0	; () banked
  3016  000DF8  6F6B               	movwf	turnRight@power& (0+255),b
  3017  000DFA  ECF5  F00A         	call	_turnRight	;wreg free
  3018                           
  3019                           ;Movement.c: 177: delay_tenth_s(5);
  3020  000DFE  0E05               	movlw	5
  3021  000E00  ECB0  F00B         	call	_delay_tenth_s
  3022                           
  3023                           ;Movement.c: 178: stop(mL,mR);
  3024  000E04  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3025  000E08  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3026  000E0C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3027  000E10  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3028  000E14  EC43  F009         	call	_stop	;wreg free
  3029                           
  3030                           ;Movement.c: 179: return -1;
  3031  000E18  0EFF               	movlw	255
  3032  000E1A  0012               	return	
  3033  000E1C                     __end_of_ScanWithRange:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           intcon	equ	0xFF2
  3039                           postinc0	equ	0xFEE
  3040                           wreg	equ	0xFE8
  3041                           indf1	equ	0xFE7
  3042                           fsr1h	equ	0xFE2
  3043                           fsr1l	equ	0xFE1
  3044                           indf2	equ	0xFDF
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _turnRight *****************
  3050 ;; Defined at:
  3051 ;;		line 98 in file "dc_motor.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3054 ;;		 -> main@mL(9), 
  3055 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3056 ;;		 -> main@mR(9), 
  3057 ;;  power           1   11[BANK0 ] unsigned char 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;		None               void
  3062 ;; Registers used:
  3063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3069 ;;      Params:         0       5       0       0
  3070 ;;      Locals:         0       0       0       0
  3071 ;;      Temps:          0       0       0       0
  3072 ;;      Totals:         0       5       0       0
  3073 ;;Total ram usage:        5 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    6
  3076 ;; This function calls:
  3077 ;;		_fullSpeedAhead
  3078 ;;		_stop
  3079 ;; This function is called by:
  3080 ;;		_ScanWithRange
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text10
  3085  0015EA                     __ptext10:
  3086                           	opt stack 0
  3087  0015EA                     _turnRight:
  3088                           	opt stack 23
  3089                           
  3090                           ;dc_motor.c: 100: stop(mL, mR);
  3091                           
  3092                           ;incstack = 0
  3093  0015EA  C067  F062         	movff	turnRight@mL,stop@mL
  3094  0015EE  C068  F063         	movff	turnRight@mL+1,stop@mL+1
  3095  0015F2  C069  F064         	movff	turnRight@mR,stop@mR
  3096  0015F6  C06A  F065         	movff	turnRight@mR+1,stop@mR+1
  3097  0015FA  EC43  F009         	call	_stop	;wreg free
  3098                           
  3099                           ;dc_motor.c: 102: mL->direction=0;
  3100  0015FE  0100               	movlb	0	; () banked
  3101  001600  EE20 F001          	lfsr	2,1
  3102  001604  5167               	movf	turnRight@mL& (0+255),w,b
  3103  001606  26D9               	addwf	fsr2l,f,c
  3104  001608  5168               	movf	(turnRight@mL+1)& (0+255),w,b
  3105  00160A  22DA               	addwfc	fsr2h,f,c
  3106  00160C  0E00               	movlw	0
  3107  00160E  6EDF               	movwf	indf2,c
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;dc_motor.c: 103: mR->direction=1;
  3111  001610  0100               	movlb	0	; () banked
  3112  001612  EE20 F001          	lfsr	2,1
  3113  001616  5169               	movf	turnRight@mR& (0+255),w,b
  3114  001618  26D9               	addwf	fsr2l,f,c
  3115  00161A  516A               	movf	(turnRight@mR+1)& (0+255),w,b
  3116  00161C  22DA               	addwfc	fsr2h,f,c
  3117  00161E  0E01               	movlw	1
  3118  001620  6EDF               	movwf	indf2,c
  3119                           
  3120                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR, power);
  3121  001622  C067  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3122  001626  C068  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3123  00162A  C069  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3124  00162E  C06A  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3125  001632  C06B  F066         	movff	turnRight@power,fullSpeedAhead@power
  3126  001636  EC14  F00A         	call	_fullSpeedAhead	;wreg free
  3127  00163A  0012               	return		;funcret
  3128  00163C                     __end_of_turnRight:
  3129                           	opt stack 0
  3130                           tblptru	equ	0xFF8
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           intcon	equ	0xFF2
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           indf1	equ	0xFE7
  3137                           fsr1h	equ	0xFE2
  3138                           fsr1l	equ	0xFE1
  3139                           indf2	equ	0xFDF
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _turnLeft *****************
  3145 ;; Defined at:
  3146 ;;		line 87 in file "dc_motor.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  mL              2    7[BANK0 ] PTR struct DC_motor
  3149 ;;		 -> main@mL(9), 
  3150 ;;  mR              2    9[BANK0 ] PTR struct DC_motor
  3151 ;;		 -> main@mR(9), 
  3152 ;;  power           1   11[BANK0 ] unsigned char 
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;		None               void
  3157 ;; Registers used:
  3158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3164 ;;      Params:         0       5       0       0
  3165 ;;      Locals:         0       0       0       0
  3166 ;;      Temps:          0       0       0       0
  3167 ;;      Totals:         0       5       0       0
  3168 ;;Total ram usage:        5 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    6
  3171 ;; This function calls:
  3172 ;;		_fullSpeedAhead
  3173 ;;		_stop
  3174 ;; This function is called by:
  3175 ;;		_ScanWithRange
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text11
  3180  00163C                     __ptext11:
  3181                           	opt stack 0
  3182  00163C                     _turnLeft:
  3183                           	opt stack 23
  3184                           
  3185                           ;dc_motor.c: 89: stop(mL, mR);
  3186                           
  3187                           ;incstack = 0
  3188  00163C  C067  F062         	movff	turnLeft@mL,stop@mL
  3189  001640  C068  F063         	movff	turnLeft@mL+1,stop@mL+1
  3190  001644  C069  F064         	movff	turnLeft@mR,stop@mR
  3191  001648  C06A  F065         	movff	turnLeft@mR+1,stop@mR+1
  3192  00164C  EC43  F009         	call	_stop	;wreg free
  3193                           
  3194                           ;dc_motor.c: 91: mL->direction=1;
  3195  001650  0100               	movlb	0	; () banked
  3196  001652  EE20 F001          	lfsr	2,1
  3197  001656  5167               	movf	turnLeft@mL& (0+255),w,b
  3198  001658  26D9               	addwf	fsr2l,f,c
  3199  00165A  5168               	movf	(turnLeft@mL+1)& (0+255),w,b
  3200  00165C  22DA               	addwfc	fsr2h,f,c
  3201  00165E  0E01               	movlw	1
  3202  001660  6EDF               	movwf	indf2,c
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;dc_motor.c: 92: mR->direction=0;
  3206  001662  0100               	movlb	0	; () banked
  3207  001664  EE20 F001          	lfsr	2,1
  3208  001668  5169               	movf	turnLeft@mR& (0+255),w,b
  3209  00166A  26D9               	addwf	fsr2l,f,c
  3210  00166C  516A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3211  00166E  22DA               	addwfc	fsr2h,f,c
  3212  001670  0E00               	movlw	0
  3213  001672  6EDF               	movwf	indf2,c
  3214                           
  3215                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR, power);
  3216  001674  C067  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3217  001678  C068  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3218  00167C  C069  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3219  001680  C06A  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3220  001684  C06B  F066         	movff	turnLeft@power,fullSpeedAhead@power
  3221  001688  EC14  F00A         	call	_fullSpeedAhead	;wreg free
  3222  00168C  0012               	return		;funcret
  3223  00168E                     __end_of_turnLeft:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           prodh	equ	0xFF4
  3227                           prodl	equ	0xFF3
  3228                           intcon	equ	0xFF2
  3229                           postinc0	equ	0xFEE
  3230                           wreg	equ	0xFE8
  3231                           indf1	equ	0xFE7
  3232                           fsr1h	equ	0xFE2
  3233                           fsr1l	equ	0xFE1
  3234                           indf2	equ	0xFDF
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _fullSpeedAhead *****************
  3240 ;; Defined at:
  3241 ;;		line 108 in file "dc_motor.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3244 ;;		 -> main@mL(9), 
  3245 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3246 ;;		 -> main@mR(9), 
  3247 ;;  power           1    6[BANK0 ] unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;		None
  3250 ;; Return value:  Size  Location     Type
  3251 ;;		None               void
  3252 ;; Registers used:
  3253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3259 ;;      Params:         0       5       0       0
  3260 ;;      Locals:         0       0       0       0
  3261 ;;      Temps:          1       0       0       0
  3262 ;;      Totals:         1       5       0       0
  3263 ;;Total ram usage:        6 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    5
  3266 ;; This function calls:
  3267 ;;		_setMotorPWM
  3268 ;; This function is called by:
  3269 ;;		_turnLeft
  3270 ;;		_turnRight
  3271 ;;		_fullSpeedBack
  3272 ;;		_main
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text12
  3277  001428                     __ptext12:
  3278                           	opt stack 0
  3279  001428                     _fullSpeedAhead:
  3280                           	opt stack 24
  3281                           
  3282                           ;dc_motor.c: 111: while(mL->power<power || mR->power<power){
  3283                           
  3284                           ;incstack = 0
  3285  001428  D02C               	goto	l65
  3286  00142A                     l2854:
  3287                           
  3288                           ;dc_motor.c: 112: if(mL->power<power){
  3289  00142A  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3290  00142E  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3291  001432  0100               	movlb	0	; () banked
  3292  001434  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3293  001436  5CDE               	subwf	postinc2,w,c
  3294  001438  B0D8               	btfsc	status,0,c
  3295  00143A  D005               	goto	l2858
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;dc_motor.c: 113: mL->power++;
  3299  00143C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3300  001440  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3301  001444  2ADF               	incf	indf2,f,c
  3302  001446                     l2858:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;dc_motor.c: 114: }
  3306                           ;dc_motor.c: 115: if(mR->power<power){
  3307  001446  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3308  00144A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3309  00144E  0100               	movlb	0	; () banked
  3310  001450  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3311  001452  5CDE               	subwf	postinc2,w,c
  3312  001454  B0D8               	btfsc	status,0,c
  3313  001456  D005               	goto	l2862
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;dc_motor.c: 116: mR->power++;
  3317  001458  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3318  00145C  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3319  001460  2ADF               	incf	indf2,f,c
  3320  001462                     l2862:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;dc_motor.c: 117: }
  3324                           ;dc_motor.c: 118: setMotorPWM(mL);
  3325  001462  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3326  001466  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3327  00146A  EC0E  F007         	call	_setMotorPWM	;wreg free
  3328                           
  3329                           ;dc_motor.c: 119: setMotorPWM(mR);
  3330  00146E  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3331  001472  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3332  001476  EC0E  F007         	call	_setMotorPWM	;wreg free
  3333                           
  3334                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3335  00147A  0E21               	movlw	33
  3336  00147C                     u2997:
  3337  00147C  2EE8               	decfsz	wreg,f,c
  3338  00147E  D7FE               	goto	u2997
  3339  001480  F000               	nop	
  3340  001482                     l65:
  3341  001482  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3342  001486  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3343  00148A  0100               	movlb	0	; () banked
  3344  00148C  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3345  00148E  5CDE               	subwf	postinc2,w,c
  3346  001490  A0D8               	btfss	status,0,c
  3347  001492  D7CB               	goto	l2854
  3348                           
  3349                           ; BSR set to: 0
  3350  001494  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3351  001498  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3352  00149C  0100               	movlb	0	; () banked
  3353  00149E  5166               	movf	fullSpeedAhead@power& (0+255),w,b
  3354  0014A0  5CDE               	subwf	postinc2,w,c
  3355  0014A2  B0D8               	btfsc	status,0,c
  3356  0014A4  0012               	return	
  3357  0014A6  D7C1               	goto	l2854
  3358  0014A8                     __end_of_fullSpeedAhead:
  3359                           	opt stack 0
  3360                           tblptru	equ	0xFF8
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           indf1	equ	0xFE7
  3367                           fsr1h	equ	0xFE2
  3368                           fsr1l	equ	0xFE1
  3369                           indf2	equ	0xFDF
  3370                           postinc2	equ	0xFDE
  3371                           fsr2h	equ	0xFDA
  3372                           fsr2l	equ	0xFD9
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function _delay_tenth_s *****************
  3376 ;; Defined at:
  3377 ;;		line 32 in file "Movement.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  tenth_second    1    wreg     unsigned char 
  3380 ;; Auto vars:     Size  Location     Type
  3381 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3382 ;;  i               2   37[COMRAM] unsigned int 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;		None               void
  3385 ;; Registers used:
  3386 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3392 ;;      Params:         0       0       0       0
  3393 ;;      Locals:         3       0       0       0
  3394 ;;      Temps:          1       0       0       0
  3395 ;;      Totals:         4       0       0       0
  3396 ;;Total ram usage:        4 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    3
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_ScanWithRange
  3403 ;;		_main
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	text13
  3408  001760                     __ptext13:
  3409                           	opt stack 0
  3410  001760                     _delay_tenth_s:
  3411                           	opt stack 27
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;incstack = 0
  3415                           ;delay_tenth_s@tenth_seconds stored from wreg
  3416  001760  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3417                           
  3418                           ;Movement.c: 33: unsigned int i=0;
  3419  001762  0E00               	movlw	0
  3420  001764  6E27               	movwf	delay_tenth_s@i+1,c
  3421  001766  0E00               	movlw	0
  3422  001768  6E26               	movwf	delay_tenth_s@i,c
  3423                           
  3424                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  3425  00176A  0E00               	movlw	0
  3426  00176C  6E27               	movwf	delay_tenth_s@i+1,c
  3427  00176E  0E01               	movlw	1
  3428  001770  6E26               	movwf	delay_tenth_s@i,c
  3429  001772  D009               	goto	l2176
  3430  001774                     l2172:
  3431                           
  3432                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  3433  001774  0E82               	movlw	130
  3434  001776  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3435  001778  0EDE               	movlw	222
  3436  00177A                     u3007:
  3437  00177A  2EE8               	decfsz	wreg,f,c
  3438  00177C  D7FE               	goto	u3007
  3439  00177E  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3440  001780  D7FC               	goto	u3007
  3441  001782  4A26               	infsnz	delay_tenth_s@i,f,c
  3442  001784  2A27               	incf	delay_tenth_s@i+1,f,c
  3443  001786                     l2176:
  3444  001786  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3445  001788  0D02               	mullw	2
  3446  00178A  5026               	movf	delay_tenth_s@i,w,c
  3447  00178C  5CF3               	subwf	prodl,w,c
  3448  00178E  5027               	movf	delay_tenth_s@i+1,w,c
  3449  001790  58F4               	subwfb	prodh,w,c
  3450  001792  A0D8               	btfss	status,0,c
  3451  001794  0012               	return	
  3452  001796  D7EE               	goto	l2172
  3453  001798                     __end_of_delay_tenth_s:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           prodh	equ	0xFF4
  3457                           prodl	equ	0xFF3
  3458                           intcon	equ	0xFF2
  3459                           postinc0	equ	0xFEE
  3460                           wreg	equ	0xFE8
  3461                           indf1	equ	0xFE7
  3462                           fsr1h	equ	0xFE2
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _ScanIR *****************
  3471 ;; Defined at:
  3472 ;;		line 45 in file "Movement.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3475 ;;		 -> main@mL(9), 
  3476 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3477 ;;		 -> main@mR(9), 
  3478 ;;  Move            2   17[BANK0 ] PTR unsigned char 
  3479 ;;		 -> main@Move(1), 
  3480 ;;  MoveTime        2   19[BANK0 ] PTR unsigned char 
  3481 ;;		 -> main@MoveTime(100), 
  3482 ;;  MoveType        2   21[BANK0 ] PTR unsigned char 
  3483 ;;		 -> main@MoveType(100), 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  buf            40   23[BANK0 ] unsigned char [40]
  3486 ;;  SensorResult    4   65[BANK0 ] unsigned int [2]
  3487 ;;  DirectionMov    2   63[BANK0 ] const unsigned int 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      unsigned char 
  3490 ;; Registers used:
  3491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3497 ;;      Params:         0      10       0       0
  3498 ;;      Locals:         0      46       0       0
  3499 ;;      Temps:          1       0       0       0
  3500 ;;      Totals:         1      56       0       0
  3501 ;;Total ram usage:       57 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    7
  3504 ;; This function calls:
  3505 ;;		_LCD_String
  3506 ;;		_SendLCD
  3507 ;;		_SetLine
  3508 ;;		_grabLeftIR
  3509 ;;		_grabRightIR
  3510 ;;		_sprintf
  3511 ;;		_stop
  3512 ;; This function is called by:
  3513 ;;		_main
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text14
  3518  000F56                     __ptext14:
  3519                           	opt stack 0
  3520  000F56                     _ScanIR:
  3521                           	opt stack 23
  3522                           
  3523                           ;Movement.c: 48: unsigned int SensorResult[2]={0,0};
  3524                           
  3525                           ;incstack = 0
  3526  000F56  C0B6  F0A1         	movff	ScanIR@F3882,ScanIR@SensorResult
  3527  000F5A  C0B7  F0A2         	movff	ScanIR@F3882+1,ScanIR@SensorResult+1
  3528  000F5E  C0B8  F0A3         	movff	ScanIR@F3882+2,ScanIR@SensorResult+2
  3529  000F62  C0B9  F0A4         	movff	ScanIR@F3882+3,ScanIR@SensorResult+3
  3530                           
  3531                           ;Movement.c: 49: char buf[40];
  3532                           ;Movement.c: 52: const unsigned int DirectionMoveThreshold=2500;
  3533  000F66  0E09               	movlw	9
  3534  000F68  0100               	movlb	0	; () banked
  3535  000F6A  6FA0               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3536  000F6C  0EC4               	movlw	196
  3537  000F6E  6F9F               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  3541  000F70  EC8D  F00A         	call	_grabLeftIR	;wreg free
  3542  000F74  C024  F0A1         	movff	?_grabLeftIR,ScanIR@SensorResult
  3543  000F78  C025  F0A2         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3544                           
  3545                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  3546  000F7C  EC54  F00A         	call	_grabRightIR	;wreg free
  3547  000F80  C024  F0A3         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3548  000F84  C025  F0A4         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3549                           
  3550                           ;Movement.c: 60: CAP1BUFH=0;
  3551  000F88  0E00               	movlw	0
  3552  000F8A  6E69               	movwf	3945,c	;volatile
  3553                           
  3554                           ;Movement.c: 61: CAP1BUFL=0;
  3555  000F8C  0E00               	movlw	0
  3556  000F8E  6E68               	movwf	3944,c	;volatile
  3557                           
  3558                           ;Movement.c: 62: CAP2BUFH=0;
  3559  000F90  0E00               	movlw	0
  3560  000F92  6E67               	movwf	3943,c	;volatile
  3561                           
  3562                           ;Movement.c: 63: CAP2BUFL=0;
  3563  000F94  0E00               	movlw	0
  3564  000F96  6E66               	movwf	3942,c	;volatile
  3565                           
  3566                           ;Movement.c: 66: SendLCD(0b00000001,0);
  3567  000F98  0E00               	movlw	0
  3568  000F9A  6E28               	movwf	SendLCD@type,c
  3569  000F9C  0E01               	movlw	1
  3570  000F9E  EC19  F00C         	call	_SendLCD
  3571                           
  3572                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3573  000FA2  0E21               	movlw	33
  3574  000FA4                     u3017:
  3575  000FA4  2EE8               	decfsz	wreg,f,c
  3576  000FA6  D7FE               	goto	u3017
  3577  000FA8  F000               	nop	
  3578                           
  3579                           ;Movement.c: 68: SendLCD(0b00000010,0);
  3580  000FAA  0E00               	movlw	0
  3581  000FAC  6E28               	movwf	SendLCD@type,c
  3582  000FAE  0E02               	movlw	2
  3583  000FB0  EC19  F00C         	call	_SendLCD
  3584                           
  3585                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  3586  000FB4  0E06               	movlw	6
  3587  000FB6  6E39               	movwf	??_ScanIR& (0+255),c
  3588  000FB8  0E30               	movlw	48
  3589  000FBA                     u3027:
  3590  000FBA  2EE8               	decfsz	wreg,f,c
  3591  000FBC  D7FE               	goto	u3027
  3592  000FBE  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3593  000FC0  D7FC               	goto	u3027
  3594  000FC2  D000               	nop2	
  3595                           
  3596                           ;Movement.c: 70: SetLine(1);
  3597  000FC4  0E01               	movlw	1
  3598  000FC6  EC01  F00C         	call	_SetLine
  3599                           
  3600                           ;Movement.c: 71: LCD_String("     ScanIR");
  3601  000FCA  0E2D               	movlw	low STR_1
  3602  000FCC  6E2A               	movwf	LCD_String@string,c
  3603  000FCE  0E03               	movlw	high STR_1
  3604  000FD0  6E2B               	movwf	LCD_String@string+1,c
  3605  000FD2  ECC6  F00A         	call	_LCD_String	;wreg free
  3606                           
  3607                           ;Movement.c: 72: SetLine(2);
  3608  000FD6  0E02               	movlw	2
  3609  000FD8  EC01  F00C         	call	_SetLine
  3610                           
  3611                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3612  000FDC  0E77               	movlw	low ScanIR@buf
  3613  000FDE  6E30               	movwf	sprintf@sp,c
  3614  000FE0  0E00               	movlw	high ScanIR@buf
  3615  000FE2  6E31               	movwf	sprintf@sp+1,c
  3616  000FE4  0E0C               	movlw	low (STR_6+1)
  3617  000FE6  6E32               	movwf	sprintf@f,c
  3618  000FE8  0E03               	movlw	high (STR_6+1)
  3619  000FEA  6E33               	movwf	sprintf@f+1,c
  3620  000FEC  C0A1  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3621  000FF0  C0A2  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3622  000FF4  C0A3  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3623  000FF8  C0A4  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3624  000FFC  EC39  F004         	call	_sprintf	;wreg free
  3625                           
  3626                           ;Movement.c: 74: LCD_String(buf);
  3627  001000  0E77               	movlw	low ScanIR@buf
  3628  001002  6E2A               	movwf	LCD_String@string,c
  3629  001004  0E00               	movlw	high ScanIR@buf
  3630  001006  6E2B               	movwf	LCD_String@string+1,c
  3631  001008  ECC6  F00A         	call	_LCD_String	;wreg free
  3632                           
  3633                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>Directio
      +                          nMoveThreshold)) {
  3634  00100C  0100               	movlb	0	; () banked
  3635  00100E  51A1               	movf	ScanIR@SensorResult& (0+255),w,b
  3636  001010  0100               	movlb	0	; () banked
  3637  001012  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3638  001014  0100               	movlb	0	; () banked
  3639  001016  51A2               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3640  001018  0100               	movlb	0	; () banked
  3641  00101A  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3642  00101C  B0D8               	btfsc	status,0,c
  3643  00101E  D00C               	goto	l3036
  3644                           
  3645                           ; BSR set to: 0
  3646  001020  0100               	movlb	0	; () banked
  3647  001022  51A3               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3648  001024  0100               	movlb	0	; () banked
  3649  001026  5D9F               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3650  001028  0100               	movlb	0	; () banked
  3651  00102A  51A4               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3652  00102C  0100               	movlb	0	; () banked
  3653  00102E  59A0               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3654  001030  B0D8               	btfsc	status,0,c
  3655  001032  D002               	goto	l3036
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;Movement.c: 79: return 2;
  3659  001034  0E02               	movlw	2
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;Movement.c: 80: } else {
  3663                           
  3664                           ; BSR set to: 0
  3665  001036  0012               	return	
  3666  001038                     l3036:
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;Movement.c: 81: stop(mL,mR);
  3670  001038  C06D  F062         	movff	ScanIR@mL,stop@mL
  3671  00103C  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3672  001040  C06F  F064         	movff	ScanIR@mR,stop@mR
  3673  001044  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3674  001048  EC43  F009         	call	_stop	;wreg free
  3675                           
  3676                           ;Movement.c: 82: return 0;
  3677  00104C  0E00               	movlw	0
  3678  00104E  0012               	return	
  3679  001050                     __end_of_ScanIR:
  3680                           	opt stack 0
  3681                           tblptru	equ	0xFF8
  3682                           prodh	equ	0xFF4
  3683                           prodl	equ	0xFF3
  3684                           intcon	equ	0xFF2
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           indf1	equ	0xFE7
  3688                           fsr1h	equ	0xFE2
  3689                           fsr1l	equ	0xFE1
  3690                           indf2	equ	0xFDF
  3691                           postinc2	equ	0xFDE
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _stop *****************
  3697 ;; Defined at:
  3698 ;;		line 67 in file "dc_motor.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3701 ;;		 -> main@mL(9), 
  3702 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3703 ;;		 -> main@mR(9), 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;		None               void
  3708 ;; Registers used:
  3709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3715 ;;      Params:         0       4       0       0
  3716 ;;      Locals:         0       0       0       0
  3717 ;;      Temps:          0       0       0       0
  3718 ;;      Totals:         0       4       0       0
  3719 ;;Total ram usage:        4 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    5
  3722 ;; This function calls:
  3723 ;;		_setMotorPWM
  3724 ;; This function is called by:
  3725 ;;		_turnLeft
  3726 ;;		_turnRight
  3727 ;;		_ScanIR
  3728 ;;		_ScanWithRange
  3729 ;;		_main
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text15
  3734  001286                     __ptext15:
  3735                           	opt stack 0
  3736  001286                     _stop:
  3737                           	opt stack 25
  3738                           
  3739                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3740                           
  3741                           ;incstack = 0
  3742  001286  D028               	goto	l2846
  3743  001288                     l2832:
  3744                           
  3745                           ;dc_motor.c: 71: if(mL->power>0){
  3746  001288  C062  FFD9         	movff	stop@mL,fsr2l
  3747  00128C  C063  FFDA         	movff	stop@mL+1,fsr2h
  3748  001290  50DF               	movf	indf2,w,c
  3749  001292  B4D8               	btfsc	status,2,c
  3750  001294  D005               	goto	l2836
  3751                           
  3752                           ;dc_motor.c: 72: mL->power--;
  3753  001296  C062  FFD9         	movff	stop@mL,fsr2l
  3754  00129A  C063  FFDA         	movff	stop@mL+1,fsr2h
  3755  00129E  06DF               	decf	indf2,f,c
  3756  0012A0                     l2836:
  3757                           
  3758                           ;dc_motor.c: 73: }
  3759                           ;dc_motor.c: 74: if(mR->power>0){
  3760  0012A0  C064  FFD9         	movff	stop@mR,fsr2l
  3761  0012A4  C065  FFDA         	movff	stop@mR+1,fsr2h
  3762  0012A8  50DF               	movf	indf2,w,c
  3763  0012AA  B4D8               	btfsc	status,2,c
  3764  0012AC  D005               	goto	l2840
  3765                           
  3766                           ;dc_motor.c: 75: mR->power--;
  3767  0012AE  C064  FFD9         	movff	stop@mR,fsr2l
  3768  0012B2  C065  FFDA         	movff	stop@mR+1,fsr2h
  3769  0012B6  06DF               	decf	indf2,f,c
  3770  0012B8                     l2840:
  3771                           
  3772                           ;dc_motor.c: 76: }
  3773                           ;dc_motor.c: 77: setMotorPWM(mL);
  3774  0012B8  C062  F032         	movff	stop@mL,setMotorPWM@m
  3775  0012BC  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3776  0012C0  EC0E  F007         	call	_setMotorPWM	;wreg free
  3777                           
  3778                           ;dc_motor.c: 78: setMotorPWM(mR);
  3779  0012C4  C064  F032         	movff	stop@mR,setMotorPWM@m
  3780  0012C8  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3781  0012CC  EC0E  F007         	call	_setMotorPWM	;wreg free
  3782                           
  3783                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3784  0012D0  0E21               	movlw	33
  3785  0012D2                     u3037:
  3786  0012D2  2EE8               	decfsz	wreg,f,c
  3787  0012D4  D7FE               	goto	u3037
  3788  0012D6  F000               	nop	
  3789  0012D8                     l2846:
  3790  0012D8  C062  FFD9         	movff	stop@mL,fsr2l
  3791  0012DC  C063  FFDA         	movff	stop@mL+1,fsr2h
  3792  0012E0  50DF               	movf	indf2,w,c
  3793  0012E2  A4D8               	btfss	status,2,c
  3794  0012E4  D7D1               	goto	l2832
  3795  0012E6  C064  FFD9         	movff	stop@mR,fsr2l
  3796  0012EA  C065  FFDA         	movff	stop@mR+1,fsr2h
  3797  0012EE  50DF               	movf	indf2,w,c
  3798  0012F0  A4D8               	btfss	status,2,c
  3799  0012F2  D7CA               	goto	l2832
  3800                           
  3801                           ;dc_motor.c: 80: }
  3802                           ;dc_motor.c: 81: mL->direction=1;
  3803  0012F4  0100               	movlb	0	; () banked
  3804  0012F6  EE20 F001          	lfsr	2,1
  3805  0012FA  5162               	movf	stop@mL& (0+255),w,b
  3806  0012FC  26D9               	addwf	fsr2l,f,c
  3807  0012FE  5163               	movf	(stop@mL+1)& (0+255),w,b
  3808  001300  22DA               	addwfc	fsr2h,f,c
  3809  001302  0E01               	movlw	1
  3810  001304  6EDF               	movwf	indf2,c
  3811                           
  3812                           ;dc_motor.c: 82: mR->direction=1;
  3813  001306  0100               	movlb	0	; () banked
  3814  001308  EE20 F001          	lfsr	2,1
  3815  00130C  5164               	movf	stop@mR& (0+255),w,b
  3816  00130E  26D9               	addwf	fsr2l,f,c
  3817  001310  5165               	movf	(stop@mR+1)& (0+255),w,b
  3818  001312  22DA               	addwfc	fsr2h,f,c
  3819  001314  0E01               	movlw	1
  3820  001316  6EDF               	movwf	indf2,c
  3821                           
  3822                           ; BSR set to: 0
  3823  001318  0012               	return		;funcret
  3824  00131A                     __end_of_stop:
  3825                           	opt stack 0
  3826                           tblptru	equ	0xFF8
  3827                           prodh	equ	0xFF4
  3828                           prodl	equ	0xFF3
  3829                           intcon	equ	0xFF2
  3830                           postinc0	equ	0xFEE
  3831                           wreg	equ	0xFE8
  3832                           indf1	equ	0xFE7
  3833                           fsr1h	equ	0xFE2
  3834                           fsr1l	equ	0xFE1
  3835                           indf2	equ	0xFDF
  3836                           postinc2	equ	0xFDE
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function _setMotorPWM *****************
  3842 ;; Defined at:
  3843 ;;		line 26 in file "dc_motor.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3846 ;;		 -> main@mR(9), main@mL(9), 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  PWMduty         2    0[BANK0 ] int 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;		None               void
  3851 ;; Registers used:
  3852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3858 ;;      Params:         2       0       0       0
  3859 ;;      Locals:         0       2       0       0
  3860 ;;      Temps:          5       0       0       0
  3861 ;;      Totals:         7       2       0       0
  3862 ;;Total ram usage:        9 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    4
  3865 ;; This function calls:
  3866 ;;		___awdiv
  3867 ;;		___wmul
  3868 ;; This function is called by:
  3869 ;;		_stop
  3870 ;;		_fullSpeedAhead
  3871 ;;		_setMotorFullSpeed
  3872 ;;		_stopMotor
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text16
  3877  000E1C                     __ptext16:
  3878                           	opt stack 0
  3879  000E1C                     _setMotorPWM:
  3880                           	opt stack 25
  3881                           
  3882                           ;dc_motor.c: 28: int PWMduty;
  3883                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;incstack = 0
  3887  000E1C  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  3888  000E20  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3889  000E24  50DF               	movf	indf2,w,c
  3890  000E26  6E34               	movwf	??_setMotorPWM& (0+255),c
  3891  000E28  5034               	movf	??_setMotorPWM,w,c
  3892  000E2A  6E24               	movwf	___wmul@multiplier,c
  3893  000E2C  6A25               	clrf	___wmul@multiplier+1,c
  3894  000E2E  EE20 F007          	lfsr	2,7
  3895  000E32  5032               	movf	setMotorPWM@m,w,c
  3896  000E34  26D9               	addwf	fsr2l,f,c
  3897  000E36  5033               	movf	setMotorPWM@m+1,w,c
  3898  000E38  22DA               	addwfc	fsr2h,f,c
  3899  000E3A  CFDE F026          	movff	postinc2,___wmul@multiplicand
  3900  000E3E  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  3901  000E42  EC59  F00C         	call	___wmul	;wreg free
  3902  000E46  C024  F02A         	movff	?___wmul,___awdiv@dividend
  3903  000E4A  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  3904  000E4E  0E00               	movlw	0
  3905  000E50  6E2D               	movwf	___awdiv@divisor+1,c
  3906  000E52  0E64               	movlw	100
  3907  000E54  6E2C               	movwf	___awdiv@divisor,c
  3908  000E56  ECD2  F009         	call	___awdiv	;wreg free
  3909  000E5A  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  3910  000E5E  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3911                           
  3912                           ;dc_motor.c: 32: if (m->direction)
  3913  000E62  EE20 F001          	lfsr	2,1
  3914  000E66  5032               	movf	setMotorPWM@m,w,c
  3915  000E68  26D9               	addwf	fsr2l,f,c
  3916  000E6A  5033               	movf	setMotorPWM@m+1,w,c
  3917  000E6C  22DA               	addwfc	fsr2h,f,c
  3918  000E6E  50DF               	movf	indf2,w,c
  3919  000E70  B4D8               	btfsc	status,2,c
  3920  000E72  D02E               	goto	l2828
  3921                           
  3922                           ;dc_motor.c: 33: {
  3923                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3924  000E74  EE20 F006          	lfsr	2,6
  3925  000E78  5032               	movf	setMotorPWM@m,w,c
  3926  000E7A  26D9               	addwf	fsr2l,f,c
  3927  000E7C  5033               	movf	setMotorPWM@m+1,w,c
  3928  000E7E  22DA               	addwfc	fsr2h,f,c
  3929  000E80  50DF               	movf	indf2,w,c
  3930  000E82  6E34               	movwf	??_setMotorPWM& (0+255),c
  3931  000E84  0E01               	movlw	1
  3932  000E86  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3933  000E88  2A34               	incf	??_setMotorPWM,f,c
  3934  000E8A  D002               	goto	u2244
  3935  000E8C                     u2245:
  3936  000E8C  90D8               	bcf	status,0,c
  3937  000E8E  3635               	rlcf	??_setMotorPWM+1,f,c
  3938  000E90                     u2244:
  3939  000E90  2E34               	decfsz	??_setMotorPWM,f,c
  3940  000E92  D7FC               	goto	u2245
  3941  000E94  5035               	movf	??_setMotorPWM+1,w,c
  3942  000E96  108A               	iorwf	3978,w,c	;volatile
  3943  000E98  6E8A               	movwf	3978,c	;volatile
  3944                           
  3945                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3946  000E9A  EE20 F007          	lfsr	2,7
  3947  000E9E  5032               	movf	setMotorPWM@m,w,c
  3948  000EA0  26D9               	addwf	fsr2l,f,c
  3949  000EA2  5033               	movf	setMotorPWM@m+1,w,c
  3950  000EA4  22DA               	addwfc	fsr2h,f,c
  3951  000EA6  CFDE F034          	movff	postinc2,??_setMotorPWM
  3952  000EAA  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3953  000EAE  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3954  000EB2  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3955  000EB6  1E36               	comf	??_setMotorPWM+2,f,c
  3956  000EB8  1E37               	comf	??_setMotorPWM+3,f,c
  3957  000EBA  4A36               	infsnz	??_setMotorPWM+2,f,c
  3958  000EBC  2A37               	incf	??_setMotorPWM+3,f,c
  3959  000EBE  5034               	movf	??_setMotorPWM,w,c
  3960  000EC0  2436               	addwf	??_setMotorPWM+2,w,c
  3961  000EC2  0100               	movlb	0	; () banked
  3962  000EC4  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  3963  000EC6  5035               	movf	??_setMotorPWM+1,w,c
  3964  000EC8  2037               	addwfc	??_setMotorPWM+3,w,c
  3965  000ECA  0100               	movlb	0	; () banked
  3966  000ECC  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  3967                           
  3968                           ;dc_motor.c: 36: }
  3969  000ECE  D014               	goto	l35
  3970  000ED0                     l2828:
  3971                           
  3972                           ;dc_motor.c: 37: else
  3973                           ;dc_motor.c: 38: {
  3974                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  3975  000ED0  EE20 F006          	lfsr	2,6
  3976  000ED4  5032               	movf	setMotorPWM@m,w,c
  3977  000ED6  26D9               	addwf	fsr2l,f,c
  3978  000ED8  5033               	movf	setMotorPWM@m+1,w,c
  3979  000EDA  22DA               	addwfc	fsr2h,f,c
  3980  000EDC  50DF               	movf	indf2,w,c
  3981  000EDE  6E34               	movwf	??_setMotorPWM& (0+255),c
  3982  000EE0  0E01               	movlw	1
  3983  000EE2  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3984  000EE4  2A34               	incf	??_setMotorPWM,f,c
  3985  000EE6  D002               	goto	u2254
  3986  000EE8                     u2255:
  3987  000EE8  90D8               	bcf	status,0,c
  3988  000EEA  3635               	rlcf	??_setMotorPWM+1,f,c
  3989  000EEC                     u2254:
  3990  000EEC  2E34               	decfsz	??_setMotorPWM,f,c
  3991  000EEE  D7FC               	goto	u2255
  3992  000EF0  5035               	movf	??_setMotorPWM+1,w,c
  3993  000EF2  0AFF               	xorlw	255
  3994  000EF4  148A               	andwf	3978,w,c	;volatile
  3995  000EF6  6E8A               	movwf	3978,c	;volatile
  3996  000EF8                     l35:
  3997                           
  3998                           ;dc_motor.c: 40: }
  3999                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  4000  000EF8  EE20 F002          	lfsr	2,2
  4001  000EFC  5032               	movf	setMotorPWM@m,w,c
  4002  000EFE  26D9               	addwf	fsr2l,f,c
  4003  000F00  5033               	movf	setMotorPWM@m+1,w,c
  4004  000F02  22DA               	addwfc	fsr2h,f,c
  4005  000F04  CFDE F034          	movff	postinc2,??_setMotorPWM
  4006  000F08  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4007  000F0C  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4008  000F10  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4009  000F14  0100               	movlb	0	; () banked
  4010  000F16  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4011  000F18  46E8               	rlncf	wreg,f,c
  4012  000F1A  0BFC               	andlw	252
  4013  000F1C  6EDF               	movwf	indf2,c
  4014                           
  4015                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  4016  000F1E  EE20 F004          	lfsr	2,4
  4017  000F22  5032               	movf	setMotorPWM@m,w,c
  4018  000F24  26D9               	addwf	fsr2l,f,c
  4019  000F26  5033               	movf	setMotorPWM@m+1,w,c
  4020  000F28  22DA               	addwfc	fsr2h,f,c
  4021  000F2A  CFDE F034          	movff	postinc2,??_setMotorPWM
  4022  000F2E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  4023  000F32  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  4024  000F36  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4025  000F3A  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4026  000F3E  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4027  000F42  0E06               	movlw	6
  4028  000F44  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4029  000F46                     u2265:
  4030  000F46  3437               	rlcf	??_setMotorPWM+3,w,c
  4031  000F48  3237               	rrcf	??_setMotorPWM+3,f,c
  4032  000F4A  3236               	rrcf	??_setMotorPWM+2,f,c
  4033  000F4C  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4034  000F4E  D7FB               	goto	u2265
  4035  000F50  5036               	movf	??_setMotorPWM+2,w,c
  4036  000F52  6EDF               	movwf	indf2,c
  4037                           
  4038                           ; BSR set to: 0
  4039  000F54  0012               	return		;funcret
  4040  000F56                     __end_of_setMotorPWM:
  4041                           	opt stack 0
  4042                           tblptru	equ	0xFF8
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           postinc0	equ	0xFEE
  4047                           wreg	equ	0xFE8
  4048                           indf1	equ	0xFE7
  4049                           fsr1h	equ	0xFE2
  4050                           fsr1l	equ	0xFE1
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function ___awdiv *****************
  4059 ;; Defined at:
  4060 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  dividend        2   41[COMRAM] int 
  4063 ;;  divisor         2   43[COMRAM] int 
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  quotient        2   47[COMRAM] int 
  4066 ;;  sign            1   46[COMRAM] unsigned char 
  4067 ;;  counter         1   45[COMRAM] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  2   41[COMRAM] int 
  4070 ;; Registers used:
  4071 ;;		wreg, status,2, status,0
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4077 ;;      Params:         4       0       0       0
  4078 ;;      Locals:         4       0       0       0
  4079 ;;      Temps:          0       0       0       0
  4080 ;;      Totals:         8       0       0       0
  4081 ;;Total ram usage:        8 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    3
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_setMotorPWM
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           	psect	text17
  4092  0013A4                     __ptext17:
  4093                           	opt stack 0
  4094  0013A4                     ___awdiv:
  4095                           	opt stack 25
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;incstack = 0
  4099  0013A4  0E00               	movlw	0
  4100  0013A6  6E2F               	movwf	___awdiv@sign,c
  4101  0013A8  AE2D               	btfss	___awdiv@divisor+1,7,c
  4102  0013AA  D006               	goto	l2786
  4103  0013AC  6C2C               	negf	___awdiv@divisor,c
  4104  0013AE  1E2D               	comf	___awdiv@divisor+1,f,c
  4105  0013B0  B0D8               	btfsc	status,0,c
  4106  0013B2  2A2D               	incf	___awdiv@divisor+1,f,c
  4107  0013B4  0E01               	movlw	1
  4108  0013B6  6E2F               	movwf	___awdiv@sign,c
  4109  0013B8                     l2786:
  4110  0013B8  AE2B               	btfss	___awdiv@dividend+1,7,c
  4111  0013BA  D006               	goto	l2792
  4112  0013BC  6C2A               	negf	___awdiv@dividend,c
  4113  0013BE  1E2B               	comf	___awdiv@dividend+1,f,c
  4114  0013C0  B0D8               	btfsc	status,0,c
  4115  0013C2  2A2B               	incf	___awdiv@dividend+1,f,c
  4116  0013C4  0E01               	movlw	1
  4117  0013C6  1A2F               	xorwf	___awdiv@sign,f,c
  4118  0013C8                     l2792:
  4119  0013C8  0E00               	movlw	0
  4120  0013CA  6E31               	movwf	___awdiv@quotient+1,c
  4121  0013CC  0E00               	movlw	0
  4122  0013CE  6E30               	movwf	___awdiv@quotient,c
  4123  0013D0  502C               	movf	___awdiv@divisor,w,c
  4124  0013D2  102D               	iorwf	___awdiv@divisor+1,w,c
  4125  0013D4  B4D8               	btfsc	status,2,c
  4126  0013D6  D01C               	goto	l2814
  4127  0013D8  0E01               	movlw	1
  4128  0013DA  6E2E               	movwf	___awdiv@counter,c
  4129  0013DC  D004               	goto	l2800
  4130  0013DE                     l2798:
  4131  0013DE  90D8               	bcf	status,0,c
  4132  0013E0  362C               	rlcf	___awdiv@divisor,f,c
  4133  0013E2  362D               	rlcf	___awdiv@divisor+1,f,c
  4134  0013E4  2A2E               	incf	___awdiv@counter,f,c
  4135  0013E6                     l2800:
  4136  0013E6  AE2D               	btfss	___awdiv@divisor+1,7,c
  4137  0013E8  D7FA               	goto	l2798
  4138  0013EA                     l2802:
  4139  0013EA  90D8               	bcf	status,0,c
  4140  0013EC  3630               	rlcf	___awdiv@quotient,f,c
  4141  0013EE  3631               	rlcf	___awdiv@quotient+1,f,c
  4142  0013F0  502C               	movf	___awdiv@divisor,w,c
  4143  0013F2  5C2A               	subwf	___awdiv@dividend,w,c
  4144  0013F4  502D               	movf	___awdiv@divisor+1,w,c
  4145  0013F6  582B               	subwfb	___awdiv@dividend+1,w,c
  4146  0013F8  A0D8               	btfss	status,0,c
  4147  0013FA  D005               	goto	l2810
  4148  0013FC  502C               	movf	___awdiv@divisor,w,c
  4149  0013FE  5E2A               	subwf	___awdiv@dividend,f,c
  4150  001400  502D               	movf	___awdiv@divisor+1,w,c
  4151  001402  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4152  001404  8030               	bsf	___awdiv@quotient,0,c
  4153  001406                     l2810:
  4154  001406  90D8               	bcf	status,0,c
  4155  001408  322D               	rrcf	___awdiv@divisor+1,f,c
  4156  00140A  322C               	rrcf	___awdiv@divisor,f,c
  4157  00140C  2E2E               	decfsz	___awdiv@counter,f,c
  4158  00140E  D7ED               	goto	l2802
  4159  001410                     l2814:
  4160  001410  502F               	movf	___awdiv@sign,w,c
  4161  001412  B4D8               	btfsc	status,2,c
  4162  001414  D004               	goto	l2818
  4163  001416  6C30               	negf	___awdiv@quotient,c
  4164  001418  1E31               	comf	___awdiv@quotient+1,f,c
  4165  00141A  B0D8               	btfsc	status,0,c
  4166  00141C  2A31               	incf	___awdiv@quotient+1,f,c
  4167  00141E                     l2818:
  4168  00141E  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4169  001422  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4170  001426  0012               	return	
  4171  001428                     __end_of___awdiv:
  4172                           	opt stack 0
  4173                           tblptru	equ	0xFF8
  4174                           prodh	equ	0xFF4
  4175                           prodl	equ	0xFF3
  4176                           intcon	equ	0xFF2
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           indf1	equ	0xFE7
  4180                           fsr1h	equ	0xFE2
  4181                           fsr1l	equ	0xFE1
  4182                           indf2	equ	0xFDF
  4183                           postinc2	equ	0xFDE
  4184                           postdec2	equ	0xFDD
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function _sprintf *****************
  4190 ;; Defined at:
  4191 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4194 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4195 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4196 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4197 ;; Auto vars:     Size  Location     Type
  4198 ;;  tmpval          4    0        struct .
  4199 ;;  cp              3    0        PTR const unsigned char 
  4200 ;;  width           2   10[BANK0 ] int 
  4201 ;;  val             2    7[BANK0 ] unsigned int 
  4202 ;;  ap              2    4[BANK0 ] PTR void [1]
  4203 ;;		 -> ?_sprintf(2), 
  4204 ;;  len             2    0        unsigned int 
  4205 ;;  c               1   12[BANK0 ] char 
  4206 ;;  flag            1    9[BANK0 ] unsigned char 
  4207 ;;  prec            1    6[BANK0 ] char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  2   47[COMRAM] int 
  4210 ;; Registers used:
  4211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4217 ;;      Params:         8       0       0       0
  4218 ;;      Locals:         0       9       0       0
  4219 ;;      Temps:          0       4       0       0
  4220 ;;      Totals:         8      13       0       0
  4221 ;;Total ram usage:       21 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    4
  4224 ;; This function calls:
  4225 ;;		___lwdiv
  4226 ;;		___lwmod
  4227 ;;		___wmul
  4228 ;;		_isdigit
  4229 ;; This function is called by:
  4230 ;;		_ScanIR
  4231 ;;		_ScanWithRange
  4232 ;;		_main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text18
  4237  000872                     __ptext18:
  4238                           	opt stack 0
  4239  000872                     _sprintf:
  4240                           	opt stack 26
  4241                           
  4242                           ;doprnt.c: 494: va_list ap;
  4243                           ;doprnt.c: 499: signed char c;
  4244                           ;doprnt.c: 501: int width;
  4245                           ;doprnt.c: 506: signed char prec;
  4246                           ;doprnt.c: 508: unsigned char flag;
  4247                           ;doprnt.c: 523: union {
  4248                           ;doprnt.c: 524: unsigned long vd;
  4249                           ;doprnt.c: 525: double integ;
  4250                           ;doprnt.c: 526: } tmpval;
  4251                           ;doprnt.c: 528: unsigned int val;
  4252                           ;doprnt.c: 529: unsigned len;
  4253                           ;doprnt.c: 530: const char * cp;
  4254                           ;doprnt.c: 533: *ap = __va_start();
  4255                           
  4256                           ;incstack = 0
  4257  000872  0E34               	movlw	low (?_sprintf+4)
  4258  000874  0100               	movlb	0	; () banked
  4259  000876  6F64               	movwf	sprintf@ap& (0+255),b
  4260  000878  0E00               	movlw	high (?_sprintf+4)
  4261  00087A  0100               	movlb	0	; () banked
  4262  00087C  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4263                           
  4264                           ;doprnt.c: 536: while(c = *f++) {
  4265  00087E  D168               	goto	l2990
  4266  000880                     l2884:
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;doprnt.c: 538: if(c != '%')
  4270  000880  0E25               	movlw	37
  4271  000882  0100               	movlb	0	; () banked
  4272  000884  196C               	xorwf	sprintf@c& (0+255),w,b
  4273  000886  B4D8               	btfsc	status,2,c
  4274  000888  D009               	goto	l2890
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;doprnt.c: 540: {
  4278                           ;doprnt.c: 541: ((*sp++ = (c)));
  4279  00088A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4280  00088E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4281  000892  C06C  FFDF         	movff	sprintf@c,indf2
  4282                           
  4283                           ; BSR set to: 0
  4284  000896  4A30               	infsnz	sprintf@sp,f,c
  4285  000898  2A31               	incf	sprintf@sp+1,f,c
  4286                           
  4287                           ;doprnt.c: 542: continue;
  4288  00089A  D15A               	goto	l2990
  4289  00089C                     l2890:
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;doprnt.c: 543: }
  4293                           ;doprnt.c: 546: width = 0;
  4294  00089C  0E00               	movlw	0
  4295  00089E  0100               	movlb	0	; () banked
  4296  0008A0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4297  0008A2  0E00               	movlw	0
  4298  0008A4  6F6A               	movwf	sprintf@width& (0+255),b
  4299                           
  4300                           ;doprnt.c: 548: flag = 0;
  4301  0008A6  0E00               	movlw	0
  4302  0008A8  0100               	movlb	0	; () banked
  4303  0008AA  6F69               	movwf	sprintf@flag& (0+255),b
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;doprnt.c: 551: switch(*f) {
  4307                           
  4308                           ;doprnt.c: 550: for(;;) {
  4309  0008AC  D004               	goto	l2896
  4310  0008AE                     l2892:
  4311                           
  4312                           ;doprnt.c: 580: flag |= 0x04;
  4313  0008AE  0100               	movlb	0	; () banked
  4314  0008B0  8569               	bsf	sprintf@flag& (0+255),2,b
  4315                           
  4316                           ;doprnt.c: 581: f++;
  4317  0008B2  4A32               	infsnz	sprintf@f,f,c
  4318  0008B4  2A33               	incf	sprintf@f+1,f,c
  4319  0008B6                     l2896:
  4320  0008B6  C032  FFF6         	movff	sprintf@f,tblptrl
  4321  0008BA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4322  0008BE                     	if	0	;tblptru may be non-zero
  4323  0008BE                     	endif
  4324  0008BE                     	if	0	;tblptru may be non-zero
  4325  0008BE                     	endif
  4326  0008BE  0008               	tblrd		*
  4327  0008C0  50F5               	movf	tablat,w,c
  4328                           
  4329                           ; Switch size 1, requested type "space"
  4330                           ; Number of cases is 1, Range of values is 48 to 48
  4331                           ; switch strategies available:
  4332                           ; Name         Instructions Cycles
  4333                           ; simple_byte            4     3 (average)
  4334                           ;	Chosen strategy is simple_byte
  4335  0008C2  0A30               	xorlw	48	; case 48
  4336  0008C4  B4D8               	btfsc	status,2,c
  4337  0008C6  D7F3               	goto	l2892
  4338                           
  4339                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4340                           
  4341                           ;doprnt.c: 586: }
  4342                           
  4343                           ;doprnt.c: 585: break;
  4344  0008C8  C032  FFF6         	movff	sprintf@f,tblptrl
  4345  0008CC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4346  0008D0                     	if	0	;tblptru may be non-zero
  4347  0008D0                     	endif
  4348  0008D0                     	if	0	;tblptru may be non-zero
  4349  0008D0                     	endif
  4350  0008D0  0008               	tblrd		*
  4351  0008D2  50F5               	movf	tablat,w,c
  4352  0008D4  EC7D  F00C         	call	_isdigit
  4353  0008D8  A0D8               	btfss	status,0,c
  4354  0008DA  D03E               	goto	l2912
  4355                           
  4356                           ;doprnt.c: 598: width = 0;
  4357  0008DC  0E00               	movlw	0
  4358  0008DE  0100               	movlb	0	; () banked
  4359  0008E0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4360  0008E2  0E00               	movlw	0
  4361  0008E4  6F6A               	movwf	sprintf@width& (0+255),b
  4362  0008E6                     l2902:
  4363                           
  4364                           ;doprnt.c: 600: width *= 10;
  4365  0008E6  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4366  0008EA  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4367  0008EE  0E00               	movlw	0
  4368  0008F0  6E27               	movwf	___wmul@multiplicand+1,c
  4369  0008F2  0E0A               	movlw	10
  4370  0008F4  6E26               	movwf	___wmul@multiplicand,c
  4371  0008F6  EC59  F00C         	call	___wmul	;wreg free
  4372  0008FA  C024  F06A         	movff	?___wmul,sprintf@width
  4373  0008FE  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4374                           
  4375                           ;doprnt.c: 601: width += *f++ - '0';
  4376  000902  0ED0               	movlw	208
  4377  000904  0100               	movlb	0	; () banked
  4378  000906  6F60               	movwf	??_sprintf& (0+255),b
  4379  000908  0EFF               	movlw	255
  4380  00090A  0100               	movlb	0	; () banked
  4381  00090C  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4382  00090E  C032  FFF6         	movff	sprintf@f,tblptrl
  4383  000912  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4384  000916                     	if	0	;tblptru may be non-zero
  4385  000916                     	endif
  4386  000916                     	if	0	;tblptru may be non-zero
  4387  000916                     	endif
  4388  000916  0008               	tblrd		*
  4389  000918  50F5               	movf	tablat,w,c
  4390  00091A  0100               	movlb	0	; () banked
  4391  00091C  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4392  00091E  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4393  000920  0100               	movlb	0	; () banked
  4394  000922  5160               	movf	??_sprintf& (0+255),w,b
  4395  000924  0100               	movlb	0	; () banked
  4396  000926  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4397  000928  0100               	movlb	0	; () banked
  4398  00092A  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4399  00092C  0100               	movlb	0	; () banked
  4400  00092E  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4401  000930  0100               	movlb	0	; () banked
  4402  000932  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4403  000934  0100               	movlb	0	; () banked
  4404  000936  276A               	addwf	sprintf@width& (0+255),f,b
  4405  000938  0100               	movlb	0	; () banked
  4406  00093A  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4407  00093C  0100               	movlb	0	; () banked
  4408  00093E  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4409                           
  4410                           ; BSR set to: 0
  4411  000940  4A32               	infsnz	sprintf@f,f,c
  4412  000942  2A33               	incf	sprintf@f+1,f,c
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4416  000944  C032  FFF6         	movff	sprintf@f,tblptrl
  4417  000948  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4418  00094C                     	if	0	;tblptru may be non-zero
  4419  00094C                     	endif
  4420  00094C                     	if	0	;tblptru may be non-zero
  4421  00094C                     	endif
  4422  00094C  0008               	tblrd		*
  4423  00094E  50F5               	movf	tablat,w,c
  4424  000950  EC7D  F00C         	call	_isdigit
  4425  000954  B0D8               	btfsc	status,0,c
  4426  000956  D7C7               	goto	l2902
  4427  000958                     l2912:
  4428  000958  C032  FFF6         	movff	sprintf@f,tblptrl
  4429  00095C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4430  000960  4A32               	infsnz	sprintf@f,f,c
  4431  000962  2A33               	incf	sprintf@f+1,f,c
  4432  000964                     	if	0	;tblptru may be non-zero
  4433  000964                     	endif
  4434  000964                     	if	0	;tblptru may be non-zero
  4435  000964                     	endif
  4436  000964  0008               	tblrd		*
  4437  000966  CFF5 F06C          	movff	tablat,sprintf@c
  4438  00096A  0100               	movlb	0	; () banked
  4439  00096C  516C               	movf	sprintf@c& (0+255),w,b
  4440                           
  4441                           ; Switch size 1, requested type "space"
  4442                           ; Number of cases is 3, Range of values is 0 to 105
  4443                           ; switch strategies available:
  4444                           ; Name         Instructions Cycles
  4445                           ; simple_byte           10     6 (average)
  4446                           ;	Chosen strategy is simple_byte
  4447  00096E  0A00               	xorlw	0	; case 0
  4448  000970  B4D8               	btfsc	status,2,c
  4449  000972  D0FB               	goto	l2992
  4450  000974  0A64               	xorlw	100	; case 100
  4451  000976  B4D8               	btfsc	status,2,c
  4452  000978  D003               	goto	l2914
  4453  00097A  0A0D               	xorlw	13	; case 105
  4454  00097C  A4D8               	btfss	status,2,c
  4455  00097E  D0E8               	goto	l2990
  4456  000980                     l2914:
  4457                           
  4458                           ;doprnt.c: 1253: {
  4459                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4460  000980  C064  FFD9         	movff	sprintf@ap,fsr2l
  4461  000984  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4462  000988  CFDE F067          	movff	postinc2,sprintf@val
  4463  00098C  CFDD F068          	movff	postdec2,sprintf@val+1
  4464  000990  0E02               	movlw	2
  4465  000992  0100               	movlb	0	; () banked
  4466  000994  2764               	addwf	sprintf@ap& (0+255),f,b
  4467  000996  0E00               	movlw	0
  4468  000998  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;doprnt.c: 1261: if((int)val < 0) {
  4472  00099A  0100               	movlb	0	; () banked
  4473  00099C  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4474  00099E  D008               	goto	l2924
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;doprnt.c: 1262: flag |= 0x03;
  4478  0009A0  0E03               	movlw	3
  4479  0009A2  0100               	movlb	0	; () banked
  4480  0009A4  1369               	iorwf	sprintf@flag& (0+255),f,b
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;doprnt.c: 1263: val = -val;
  4484  0009A6  0100               	movlb	0	; () banked
  4485  0009A8  6D67               	negf	sprintf@val& (0+255),b
  4486  0009AA  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4487  0009AC  B0D8               	btfsc	status,0,c
  4488  0009AE  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4489  0009B0                     l2924:
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;doprnt.c: 1264: }
  4493                           ;doprnt.c: 1266: }
  4494                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4495  0009B0  0E01               	movlw	1
  4496  0009B2  0100               	movlb	0	; () banked
  4497  0009B4  6F6C               	movwf	sprintf@c& (0+255),b
  4498  0009B6                     l2926:
  4499                           
  4500                           ; BSR set to: 0
  4501  0009B6  0E05               	movlw	5
  4502  0009B8  0100               	movlb	0	; () banked
  4503  0009BA  196C               	xorwf	sprintf@c& (0+255),w,b
  4504  0009BC  B4D8               	btfsc	status,2,c
  4505  0009BE  D016               	goto	l2938
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;doprnt.c: 1306: if(val < dpowers[c])
  4509                           
  4510                           ; BSR set to: 0
  4511                           
  4512                           ; BSR set to: 0
  4513  0009C0  0100               	movlb	0	; () banked
  4514  0009C2  516C               	movf	sprintf@c& (0+255),w,b
  4515  0009C4  0D02               	mullw	2
  4516  0009C6  0E01               	movlw	low _dpowers
  4517  0009C8  24F3               	addwf	prodl,w,c
  4518  0009CA  6EF6               	movwf	tblptrl,c
  4519  0009CC  0E03               	movlw	high _dpowers
  4520  0009CE  20F4               	addwfc	prodh,w,c
  4521  0009D0  6EF7               	movwf	tblptrh,c
  4522  0009D2                     	if	0	;There are less than 3 active tblptr bytes
  4523  0009D2                     	endif
  4524  0009D2  0009               	tblrd		*+
  4525  0009D4  50F5               	movf	tablat,w,c
  4526  0009D6  0100               	movlb	0	; () banked
  4527  0009D8  5D67               	subwf	sprintf@val& (0+255),w,b
  4528  0009DA  0009               	tblrd		*+
  4529  0009DC  50F5               	movf	tablat,w,c
  4530  0009DE  0100               	movlb	0	; () banked
  4531  0009E0  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4532  0009E2  A0D8               	btfss	status,0,c
  4533  0009E4  D003               	goto	l2938
  4534                           
  4535                           ; BSR set to: 0
  4536                           
  4537                           ; BSR set to: 0
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;doprnt.c: 1307: break;
  4541  0009E6  0100               	movlb	0	; () banked
  4542  0009E8  2B6C               	incf	sprintf@c& (0+255),f,b
  4543  0009EA  D7E5               	goto	l2926
  4544  0009EC                     l2938:
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4548  0009EC  0100               	movlb	0	; () banked
  4549  0009EE  516A               	movf	sprintf@width& (0+255),w,b
  4550  0009F0  0100               	movlb	0	; () banked
  4551  0009F2  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4552  0009F4  B4D8               	btfsc	status,2,c
  4553  0009F6  D00B               	goto	l2944
  4554                           
  4555                           ; BSR set to: 0
  4556  0009F8  C069  F060         	movff	sprintf@flag,??_sprintf
  4557  0009FC  0E03               	movlw	3
  4558  0009FE  0100               	movlb	0	; () banked
  4559  000A00  1760               	andwf	??_sprintf& (0+255),f,b
  4560  000A02  B4D8               	btfsc	status,2,c
  4561  000A04  D004               	goto	l2944
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;doprnt.c: 1346: width--;
  4565  000A06  0100               	movlb	0	; () banked
  4566  000A08  076A               	decf	sprintf@width& (0+255),f,b
  4567  000A0A  A0D8               	btfss	status,0,c
  4568  000A0C  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4569  000A0E                     l2944:
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;doprnt.c: 1381: if(width > c)
  4573  000A0E  0E80               	movlw	128
  4574  000A10  0100               	movlb	0	; () banked
  4575  000A12  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4576  000A14  0E7F               	movlw	127
  4577  000A16  0100               	movlb	0	; () banked
  4578  000A18  6F60               	movwf	??_sprintf& (0+255),b
  4579  000A1A  0100               	movlb	0	; () banked
  4580  000A1C  516A               	movf	sprintf@width& (0+255),w,b
  4581  000A1E  0100               	movlb	0	; () banked
  4582  000A20  5D6C               	subwf	sprintf@c& (0+255),w,b
  4583  000A22  0100               	movlb	0	; () banked
  4584  000A24  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4585  000A26  0A80               	xorlw	128
  4586  000A28  0100               	movlb	0	; () banked
  4587  000A2A  5960               	subwfb	??_sprintf& (0+255),w,b
  4588  000A2C  B0D8               	btfsc	status,0,c
  4589  000A2E  D00B               	goto	l2948
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;doprnt.c: 1382: width -= c;
  4593  000A30  0100               	movlb	0	; () banked
  4594  000A32  516C               	movf	sprintf@c& (0+255),w,b
  4595  000A34  0100               	movlb	0	; () banked
  4596  000A36  5F6A               	subwf	sprintf@width& (0+255),f,b
  4597  000A38  0E00               	movlw	0
  4598  000A3A  0100               	movlb	0	; () banked
  4599  000A3C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4600  000A3E  0EFF               	movlw	255
  4601  000A40  0100               	movlb	0	; () banked
  4602  000A42  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4603  000A44  D005               	goto	l2950
  4604  000A46                     l2948:
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;doprnt.c: 1383: else
  4608                           ;doprnt.c: 1384: width = 0;
  4609  000A46  0E00               	movlw	0
  4610  000A48  0100               	movlb	0	; () banked
  4611  000A4A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4612  000A4C  0E00               	movlw	0
  4613  000A4E  6F6A               	movwf	sprintf@width& (0+255),b
  4614  000A50                     l2950:
  4615                           
  4616                           ; BSR set to: 0
  4617                           ;doprnt.c: 1387: if(flag & 0x04) {
  4618  000A50  0100               	movlb	0	; () banked
  4619  000A52  A569               	btfss	sprintf@flag& (0+255),2,b
  4620  000A54  D022               	goto	l2966
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;doprnt.c: 1392: if(flag & 0x03)
  4624  000A56  C069  F060         	movff	sprintf@flag,??_sprintf
  4625  000A5A  0E03               	movlw	3
  4626  000A5C  0100               	movlb	0	; () banked
  4627  000A5E  1760               	andwf	??_sprintf& (0+255),f,b
  4628  000A60  B4D8               	btfsc	status,2,c
  4629  000A62  D008               	goto	l2958
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4633  000A64  C030  FFD9         	movff	sprintf@sp,fsr2l
  4634  000A68  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4635  000A6C  0E2D               	movlw	45
  4636  000A6E  6EDF               	movwf	indf2,c
  4637                           
  4638                           ; BSR set to: 0
  4639  000A70  4A30               	infsnz	sprintf@sp,f,c
  4640  000A72  2A31               	incf	sprintf@sp+1,f,c
  4641  000A74                     l2958:
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;doprnt.c: 1415: if(width)
  4645  000A74  0100               	movlb	0	; () banked
  4646  000A76  516A               	movf	sprintf@width& (0+255),w,b
  4647  000A78  0100               	movlb	0	; () banked
  4648  000A7A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4649  000A7C  B4D8               	btfsc	status,2,c
  4650  000A7E  D034               	goto	l2980
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4654                           
  4655                           ; BSR set to: 0
  4656                           
  4657                           ;doprnt.c: 1416: do
  4658  000A80  C030  FFD9         	movff	sprintf@sp,fsr2l
  4659  000A84  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4660  000A88  0E30               	movlw	48
  4661  000A8A  6EDF               	movwf	indf2,c
  4662                           
  4663                           ; BSR set to: 0
  4664  000A8C  4A30               	infsnz	sprintf@sp,f,c
  4665  000A8E  2A31               	incf	sprintf@sp+1,f,c
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;doprnt.c: 1418: while(--width);
  4669  000A90  0100               	movlb	0	; () banked
  4670  000A92  076A               	decf	sprintf@width& (0+255),f,b
  4671  000A94  A0D8               	btfss	status,0,c
  4672  000A96  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4673  000A98  D7ED               	goto	l2958
  4674  000A9A                     l2966:
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;doprnt.c: 1422: {
  4678                           ;doprnt.c: 1424: if(width
  4679                           ;doprnt.c: 1428: )
  4680  000A9A  0100               	movlb	0	; () banked
  4681  000A9C  516A               	movf	sprintf@width& (0+255),w,b
  4682  000A9E  0100               	movlb	0	; () banked
  4683  000AA0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4684  000AA2  B4D8               	btfsc	status,2,c
  4685  000AA4  D012               	goto	l2974
  4686  000AA6                     l2968:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4690  000AA6  C030  FFD9         	movff	sprintf@sp,fsr2l
  4691  000AAA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4692  000AAE  0E20               	movlw	32
  4693  000AB0  6EDF               	movwf	indf2,c
  4694                           
  4695                           ; BSR set to: 0
  4696  000AB2  4A30               	infsnz	sprintf@sp,f,c
  4697  000AB4  2A31               	incf	sprintf@sp+1,f,c
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;doprnt.c: 1431: while(--width);
  4701  000AB6  0100               	movlb	0	; () banked
  4702  000AB8  076A               	decf	sprintf@width& (0+255),f,b
  4703  000ABA  A0D8               	btfss	status,0,c
  4704  000ABC  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4705  000ABE  0100               	movlb	0	; () banked
  4706  000AC0  516A               	movf	sprintf@width& (0+255),w,b
  4707  000AC2  0100               	movlb	0	; () banked
  4708  000AC4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4709  000AC6  A4D8               	btfss	status,2,c
  4710  000AC8  D7EE               	goto	l2968
  4711  000ACA                     l2974:
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;doprnt.c: 1438: if(flag & 0x03)
  4715  000ACA  C069  F060         	movff	sprintf@flag,??_sprintf
  4716  000ACE  0E03               	movlw	3
  4717  000AD0  0100               	movlb	0	; () banked
  4718  000AD2  1760               	andwf	??_sprintf& (0+255),f,b
  4719  000AD4  B4D8               	btfsc	status,2,c
  4720  000AD6  D008               	goto	l2980
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4724  000AD8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4725  000ADC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4726  000AE0  0E2D               	movlw	45
  4727  000AE2  6EDF               	movwf	indf2,c
  4728                           
  4729                           ; BSR set to: 0
  4730  000AE4  4A30               	infsnz	sprintf@sp,f,c
  4731  000AE6  2A31               	incf	sprintf@sp+1,f,c
  4732  000AE8                     l2980:
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;doprnt.c: 1469: }
  4736                           ;doprnt.c: 1472: prec = c;
  4737  000AE8  C06C  F066         	movff	sprintf@c,sprintf@prec
  4738                           
  4739                           ;doprnt.c: 1474: while(prec--) {
  4740  000AEC  D02B               	goto	l2988
  4741  000AEE                     l2982:
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;doprnt.c: 1478: {
  4745                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4746  000AEE  0100               	movlb	0	; () banked
  4747  000AF0  5166               	movf	sprintf@prec& (0+255),w,b
  4748  000AF2  0D02               	mullw	2
  4749  000AF4  0E01               	movlw	low _dpowers
  4750  000AF6  24F3               	addwf	prodl,w,c
  4751  000AF8  6EF6               	movwf	tblptrl,c
  4752  000AFA  0E03               	movlw	high _dpowers
  4753  000AFC  20F4               	addwfc	prodh,w,c
  4754  000AFE  6EF7               	movwf	tblptrh,c
  4755  000B00                     	if	0	;There are less than 3 active tblptr bytes
  4756  000B00                     	endif
  4757  000B00  0009               	tblrd		*+
  4758  000B02  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4759  000B06  000A               	tblrd		*-
  4760  000B08  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4761  000B0C  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4762  000B10  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4763  000B14  EC47  F00B         	call	___lwdiv	;wreg free
  4764  000B18  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4765  000B1C  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4766  000B20  0E00               	movlw	0
  4767  000B22  6E2E               	movwf	___lwmod@divisor+1,c
  4768  000B24  0E0A               	movlw	10
  4769  000B26  6E2D               	movwf	___lwmod@divisor,c
  4770  000B28  EC70  F00B         	call	___lwmod	;wreg free
  4771  000B2C  502B               	movf	?___lwmod,w,c
  4772  000B2E  0F30               	addlw	48
  4773  000B30  0100               	movlb	0	; () banked
  4774  000B32  6F6C               	movwf	sprintf@c& (0+255),b
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;doprnt.c: 1523: }
  4778                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4779  000B34  C030  FFD9         	movff	sprintf@sp,fsr2l
  4780  000B38  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4781  000B3C  C06C  FFDF         	movff	sprintf@c,indf2
  4782                           
  4783                           ; BSR set to: 0
  4784  000B40  4A30               	infsnz	sprintf@sp,f,c
  4785  000B42  2A31               	incf	sprintf@sp+1,f,c
  4786  000B44                     l2988:
  4787                           
  4788                           ; BSR set to: 0
  4789  000B44  0100               	movlb	0	; () banked
  4790  000B46  0766               	decf	sprintf@prec& (0+255),f,b
  4791  000B48  0100               	movlb	0	; () banked
  4792  000B4A  2966               	incf	sprintf@prec& (0+255),w,b
  4793  000B4C  A4D8               	btfss	status,2,c
  4794  000B4E  D7CF               	goto	l2982
  4795  000B50                     l2990:
  4796  000B50  C032  FFF6         	movff	sprintf@f,tblptrl
  4797  000B54  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4798  000B58  4A32               	infsnz	sprintf@f,f,c
  4799  000B5A  2A33               	incf	sprintf@f+1,f,c
  4800  000B5C                     	if	0	;tblptru may be non-zero
  4801  000B5C                     	endif
  4802  000B5C                     	if	0	;tblptru may be non-zero
  4803  000B5C                     	endif
  4804  000B5C  0008               	tblrd		*
  4805  000B5E  CFF5 F06C          	movff	tablat,sprintf@c
  4806  000B62  0100               	movlb	0	; () banked
  4807  000B64  516C               	movf	sprintf@c& (0+255),w,b
  4808  000B66  A4D8               	btfss	status,2,c
  4809  000B68  D68B               	goto	l2884
  4810  000B6A                     l2992:
  4811                           
  4812                           ;doprnt.c: 1538: *sp = 0;
  4813  000B6A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4814  000B6E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4815  000B72  0E00               	movlw	0
  4816  000B74  6EDF               	movwf	indf2,c
  4817  000B76  0012               	return	
  4818  000B78                     __end_of_sprintf:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           indf1	equ	0xFE7
  4830                           fsr1h	equ	0xFE2
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           fsr2h	equ	0xFDA
  4836                           fsr2l	equ	0xFD9
  4837                           status	equ	0xFD8
  4838                           
  4839 ;; *************** function _isdigit *****************
  4840 ;; Defined at:
  4841 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;  c               1    wreg     unsigned char 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  c               1   37[COMRAM] unsigned char 
  4846 ;; Return value:  Size  Location     Type
  4847 ;;		None               void
  4848 ;; Registers used:
  4849 ;;		wreg, status,2, status,0
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4855 ;;      Params:         0       0       0       0
  4856 ;;      Locals:         2       0       0       0
  4857 ;;      Temps:          1       0       0       0
  4858 ;;      Totals:         3       0       0       0
  4859 ;;Total ram usage:        3 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    3
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_sprintf
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text19
  4870  0018FA                     __ptext19:
  4871                           	opt stack 0
  4872  0018FA                     _isdigit:
  4873                           	opt stack 26
  4874                           
  4875                           ;incstack = 0
  4876                           ;isdigit@c stored from wreg
  4877  0018FA  6E26               	movwf	isdigit@c,c
  4878  0018FC  0E00               	movlw	0
  4879  0018FE  6E25               	movwf	_isdigit$1958,c
  4880  001900  0E3A               	movlw	58
  4881  001902  6026               	cpfslt	isdigit@c,c
  4882  001904  D005               	goto	l2064
  4883  001906  0E2F               	movlw	47
  4884  001908  6426               	cpfsgt	isdigit@c,c
  4885  00190A  D002               	goto	l2064
  4886  00190C  0E01               	movlw	1
  4887  00190E  6E25               	movwf	_isdigit$1958,c
  4888  001910                     l2064:
  4889  001910  C025  F024         	movff	_isdigit$1958,??_isdigit
  4890  001914  3024               	rrcf	??_isdigit,w,c
  4891  001916  0012               	return	
  4892  001918                     __end_of_isdigit:
  4893                           	opt stack 0
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           intcon	equ	0xFF2
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           indf1	equ	0xFE7
  4904                           fsr1h	equ	0xFE2
  4905                           fsr1l	equ	0xFE1
  4906                           indf2	equ	0xFDF
  4907                           postinc2	equ	0xFDE
  4908                           postdec2	equ	0xFDD
  4909                           fsr2h	equ	0xFDA
  4910                           fsr2l	equ	0xFD9
  4911                           status	equ	0xFD8
  4912                           
  4913 ;; *************** function ___wmul *****************
  4914 ;; Defined at:
  4915 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  multiplier      2   35[COMRAM] unsigned int 
  4918 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  product         2   39[COMRAM] unsigned int 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  2   35[COMRAM] unsigned int 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0, prodl, prodh
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4930 ;;      Params:         4       0       0       0
  4931 ;;      Locals:         2       0       0       0
  4932 ;;      Temps:          0       0       0       0
  4933 ;;      Totals:         6       0       0       0
  4934 ;;Total ram usage:        6 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    3
  4937 ;; This function calls:
  4938 ;;		Nothing
  4939 ;; This function is called by:
  4940 ;;		_setMotorPWM
  4941 ;;		_sprintf
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	text20
  4946  0018B2                     __ptext20:
  4947                           	opt stack 0
  4948  0018B2                     ___wmul:
  4949                           	opt stack 25
  4950                           
  4951                           ;incstack = 0
  4952  0018B2  5024               	movf	___wmul@multiplier,w,c
  4953  0018B4  0226               	mulwf	___wmul@multiplicand,c
  4954  0018B6  CFF3 F028          	movff	prodl,___wmul@product
  4955  0018BA  CFF4 F029          	movff	prodh,___wmul@product+1
  4956  0018BE  5024               	movf	___wmul@multiplier,w,c
  4957  0018C0  0227               	mulwf	___wmul@multiplicand+1,c
  4958  0018C2  50F3               	movf	prodl,w,c
  4959  0018C4  2629               	addwf	___wmul@product+1,f,c
  4960  0018C6  5025               	movf	___wmul@multiplier+1,w,c
  4961  0018C8  0226               	mulwf	___wmul@multiplicand,c
  4962  0018CA  50F3               	movf	prodl,w,c
  4963  0018CC  2629               	addwf	___wmul@product+1,f,c
  4964  0018CE  C028  F024         	movff	___wmul@product,?___wmul
  4965  0018D2  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4966  0018D6  0012               	return	
  4967  0018D8                     __end_of___wmul:
  4968                           	opt stack 0
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           postinc0	equ	0xFEE
  4977                           wreg	equ	0xFE8
  4978                           indf1	equ	0xFE7
  4979                           fsr1h	equ	0xFE2
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           postdec2	equ	0xFDD
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function ___lwmod *****************
  4989 ;; Defined at:
  4990 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;  dividend        2   42[COMRAM] unsigned int 
  4993 ;;  divisor         2   44[COMRAM] unsigned int 
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  counter         1   46[COMRAM] unsigned char 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  2   42[COMRAM] unsigned int 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5005 ;;      Params:         4       0       0       0
  5006 ;;      Locals:         1       0       0       0
  5007 ;;      Temps:          0       0       0       0
  5008 ;;      Totals:         5       0       0       0
  5009 ;;Total ram usage:        5 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    3
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_sprintf
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text21
  5020  0016E0                     __ptext21:
  5021                           	opt stack 0
  5022  0016E0                     ___lwmod:
  5023                           	opt stack 26
  5024                           
  5025                           ;incstack = 0
  5026  0016E0  502D               	movf	___lwmod@divisor,w,c
  5027  0016E2  102E               	iorwf	___lwmod@divisor+1,w,c
  5028  0016E4  B4D8               	btfsc	status,2,c
  5029  0016E6  D018               	goto	l875
  5030  0016E8  0E01               	movlw	1
  5031  0016EA  6E2F               	movwf	___lwmod@counter,c
  5032  0016EC  D004               	goto	l2096
  5033  0016EE                     l2094:
  5034  0016EE  90D8               	bcf	status,0,c
  5035  0016F0  362D               	rlcf	___lwmod@divisor,f,c
  5036  0016F2  362E               	rlcf	___lwmod@divisor+1,f,c
  5037  0016F4  2A2F               	incf	___lwmod@counter,f,c
  5038  0016F6                     l2096:
  5039  0016F6  AE2E               	btfss	___lwmod@divisor+1,7,c
  5040  0016F8  D7FA               	goto	l2094
  5041  0016FA                     l2098:
  5042  0016FA  502D               	movf	___lwmod@divisor,w,c
  5043  0016FC  5C2B               	subwf	___lwmod@dividend,w,c
  5044  0016FE  502E               	movf	___lwmod@divisor+1,w,c
  5045  001700  582C               	subwfb	___lwmod@dividend+1,w,c
  5046  001702  A0D8               	btfss	status,0,c
  5047  001704  D004               	goto	l2102
  5048  001706  502D               	movf	___lwmod@divisor,w,c
  5049  001708  5E2B               	subwf	___lwmod@dividend,f,c
  5050  00170A  502E               	movf	___lwmod@divisor+1,w,c
  5051  00170C  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5052  00170E                     l2102:
  5053  00170E  90D8               	bcf	status,0,c
  5054  001710  322E               	rrcf	___lwmod@divisor+1,f,c
  5055  001712  322D               	rrcf	___lwmod@divisor,f,c
  5056  001714  2E2F               	decfsz	___lwmod@counter,f,c
  5057  001716  D7F1               	goto	l2098
  5058  001718                     l875:
  5059  001718  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5060  00171C  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5061  001720  0012               	return		;funcret
  5062  001722                     __end_of___lwmod:
  5063                           	opt stack 0
  5064                           tblptru	equ	0xFF8
  5065                           tblptrh	equ	0xFF7
  5066                           tblptrl	equ	0xFF6
  5067                           tablat	equ	0xFF5
  5068                           prodh	equ	0xFF4
  5069                           prodl	equ	0xFF3
  5070                           intcon	equ	0xFF2
  5071                           postinc0	equ	0xFEE
  5072                           wreg	equ	0xFE8
  5073                           indf1	equ	0xFE7
  5074                           fsr1h	equ	0xFE2
  5075                           fsr1l	equ	0xFE1
  5076                           indf2	equ	0xFDF
  5077                           postinc2	equ	0xFDE
  5078                           postdec2	equ	0xFDD
  5079                           fsr2h	equ	0xFDA
  5080                           fsr2l	equ	0xFD9
  5081                           status	equ	0xFD8
  5082                           
  5083 ;; *************** function ___lwdiv *****************
  5084 ;; Defined at:
  5085 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  dividend        2   35[COMRAM] unsigned int 
  5088 ;;  divisor         2   37[COMRAM] unsigned int 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  quotient        2   39[COMRAM] unsigned int 
  5091 ;;  counter         1   41[COMRAM] unsigned char 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  2   35[COMRAM] unsigned int 
  5094 ;; Registers used:
  5095 ;;		wreg, status,2, status,0
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5101 ;;      Params:         4       0       0       0
  5102 ;;      Locals:         3       0       0       0
  5103 ;;      Temps:          0       0       0       0
  5104 ;;      Totals:         7       0       0       0
  5105 ;;Total ram usage:        7 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; Hardware stack levels required when called:    3
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_sprintf
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text22
  5116  00168E                     __ptext22:
  5117                           	opt stack 0
  5118  00168E                     ___lwdiv:
  5119                           	opt stack 26
  5120                           
  5121                           ;incstack = 0
  5122  00168E  0E00               	movlw	0
  5123  001690  6E29               	movwf	___lwdiv@quotient+1,c
  5124  001692  0E00               	movlw	0
  5125  001694  6E28               	movwf	___lwdiv@quotient,c
  5126  001696  5026               	movf	___lwdiv@divisor,w,c
  5127  001698  1027               	iorwf	___lwdiv@divisor+1,w,c
  5128  00169A  B4D8               	btfsc	status,2,c
  5129  00169C  D01C               	goto	l865
  5130  00169E  0E01               	movlw	1
  5131  0016A0  6E2A               	movwf	___lwdiv@counter,c
  5132  0016A2  D004               	goto	l2076
  5133  0016A4                     l2074:
  5134  0016A4  90D8               	bcf	status,0,c
  5135  0016A6  3626               	rlcf	___lwdiv@divisor,f,c
  5136  0016A8  3627               	rlcf	___lwdiv@divisor+1,f,c
  5137  0016AA  2A2A               	incf	___lwdiv@counter,f,c
  5138  0016AC                     l2076:
  5139  0016AC  AE27               	btfss	___lwdiv@divisor+1,7,c
  5140  0016AE  D7FA               	goto	l2074
  5141  0016B0                     l2078:
  5142  0016B0  90D8               	bcf	status,0,c
  5143  0016B2  3628               	rlcf	___lwdiv@quotient,f,c
  5144  0016B4  3629               	rlcf	___lwdiv@quotient+1,f,c
  5145  0016B6  5026               	movf	___lwdiv@divisor,w,c
  5146  0016B8  5C24               	subwf	___lwdiv@dividend,w,c
  5147  0016BA  5027               	movf	___lwdiv@divisor+1,w,c
  5148  0016BC  5825               	subwfb	___lwdiv@dividend+1,w,c
  5149  0016BE  A0D8               	btfss	status,0,c
  5150  0016C0  D005               	goto	l2086
  5151  0016C2  5026               	movf	___lwdiv@divisor,w,c
  5152  0016C4  5E24               	subwf	___lwdiv@dividend,f,c
  5153  0016C6  5027               	movf	___lwdiv@divisor+1,w,c
  5154  0016C8  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5155  0016CA  8028               	bsf	___lwdiv@quotient,0,c
  5156  0016CC                     l2086:
  5157  0016CC  90D8               	bcf	status,0,c
  5158  0016CE  3227               	rrcf	___lwdiv@divisor+1,f,c
  5159  0016D0  3226               	rrcf	___lwdiv@divisor,f,c
  5160  0016D2  2E2A               	decfsz	___lwdiv@counter,f,c
  5161  0016D4  D7ED               	goto	l2078
  5162  0016D6                     l865:
  5163  0016D6  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5164  0016DA  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5165  0016DE  0012               	return		;funcret
  5166  0016E0                     __end_of___lwdiv:
  5167                           	opt stack 0
  5168                           tblptru	equ	0xFF8
  5169                           tblptrh	equ	0xFF7
  5170                           tblptrl	equ	0xFF6
  5171                           tablat	equ	0xFF5
  5172                           prodh	equ	0xFF4
  5173                           prodl	equ	0xFF3
  5174                           intcon	equ	0xFF2
  5175                           postinc0	equ	0xFEE
  5176                           wreg	equ	0xFE8
  5177                           indf1	equ	0xFE7
  5178                           fsr1h	equ	0xFE2
  5179                           fsr1l	equ	0xFE1
  5180                           indf2	equ	0xFDF
  5181                           postinc2	equ	0xFDE
  5182                           postdec2	equ	0xFDD
  5183                           fsr2h	equ	0xFDA
  5184                           fsr2l	equ	0xFD9
  5185                           status	equ	0xFD8
  5186                           
  5187 ;; *************** function _grabRightIR *****************
  5188 ;; Defined at:
  5189 ;;		line 74 in file "IR_Reading.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;		None
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5194 ;;  i               1   42[COMRAM] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  2   35[COMRAM] unsigned int 
  5197 ;; Registers used:
  5198 ;;		wreg, status,2, status,0
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5204 ;;      Params:         2       0       0       0
  5205 ;;      Locals:         3       0       0       0
  5206 ;;      Temps:          3       0       0       0
  5207 ;;      Totals:         8       0       0       0
  5208 ;;Total ram usage:        8 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    3
  5211 ;; This function calls:
  5212 ;;		Nothing
  5213 ;; This function is called by:
  5214 ;;		_ScanIR
  5215 ;;		_ScanWithRange
  5216 ;;		_main
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text23
  5221  0014A8                     __ptext23:
  5222                           	opt stack 0
  5223  0014A8                     _grabRightIR:
  5224                           	opt stack 27
  5225                           
  5226                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5227                           
  5228                           ;incstack = 0
  5229  0014A8  0E00               	movlw	0
  5230  0014AA  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5231  0014AC  0E00               	movlw	0
  5232  0014AE  6E29               	movwf	grabRightIR@IR_signal,c
  5233                           
  5234                           ;IR_Reading.c: 77: unsigned char i=0;
  5235  0014B0  0E00               	movlw	0
  5236  0014B2  6E2B               	movwf	grabRightIR@i,c
  5237                           
  5238                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5239  0014B4  0E00               	movlw	0
  5240  0014B6  6E2B               	movwf	grabRightIR@i,c
  5241  0014B8                     l2120:
  5242  0014B8  0E03               	movlw	3
  5243  0014BA  642B               	cpfsgt	grabRightIR@i,c
  5244  0014BC  D001               	goto	l2124
  5245  0014BE  D01E               	goto	l2130
  5246  0014C0                     l2124:
  5247                           
  5248                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5249  0014C0  5069               	movf	3945,w,c	;volatile
  5250  0014C2  6E26               	movwf	??_grabRightIR& (0+255),c
  5251  0014C4  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5252  0014C6  0E07               	movlw	7
  5253  0014C8                     u1465:
  5254  0014C8  90D8               	bcf	status,0,c
  5255  0014CA  3626               	rlcf	??_grabRightIR,f,c
  5256  0014CC  3627               	rlcf	??_grabRightIR+1,f,c
  5257  0014CE  2EE8               	decfsz	wreg,f,c
  5258  0014D0  D7FB               	goto	u1465
  5259  0014D2  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5260  0014D6  90D8               	bcf	status,0,c
  5261  0014D8  3228               	rrcf	??_grabRightIR+2,f,c
  5262  0014DA  5028               	movf	??_grabRightIR+2,w,c
  5263  0014DC  1226               	iorwf	??_grabRightIR,f,c
  5264  0014DE  0E00               	movlw	0
  5265  0014E0  1227               	iorwf	??_grabRightIR+1,f,c
  5266  0014E2  5026               	movf	??_grabRightIR,w,c
  5267  0014E4  2629               	addwf	grabRightIR@IR_signal,f,c
  5268  0014E6  5027               	movf	??_grabRightIR+1,w,c
  5269  0014E8  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5270                           
  5271                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5272  0014EA  0E82               	movlw	130
  5273  0014EC  6E26               	movwf	??_grabRightIR& (0+255),c
  5274  0014EE  0EDE               	movlw	222
  5275  0014F0                     u3047:
  5276  0014F0  2EE8               	decfsz	wreg,f,c
  5277  0014F2  D7FE               	goto	u3047
  5278  0014F4  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5279  0014F6  D7FC               	goto	u3047
  5280  0014F8  2A2B               	incf	grabRightIR@i,f,c
  5281  0014FA  D7DE               	goto	l2120
  5282  0014FC                     l2130:
  5283                           
  5284                           ;IR_Reading.c: 83: }
  5285                           ;IR_Reading.c: 85: return IR_signal>>2;
  5286  0014FC  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5287  001500  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5288  001504  90D8               	bcf	status,0,c
  5289  001506  3227               	rrcf	??_grabRightIR+1,f,c
  5290  001508  3226               	rrcf	??_grabRightIR,f,c
  5291  00150A  90D8               	bcf	status,0,c
  5292  00150C  3227               	rrcf	??_grabRightIR+1,f,c
  5293  00150E  3226               	rrcf	??_grabRightIR,f,c
  5294  001510  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5295  001514  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5296  001518  0012               	return	
  5297  00151A                     __end_of_grabRightIR:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           intcon	equ	0xFF2
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           indf1	equ	0xFE7
  5309                           fsr1h	equ	0xFE2
  5310                           fsr1l	equ	0xFE1
  5311                           indf2	equ	0xFDF
  5312                           postinc2	equ	0xFDE
  5313                           postdec2	equ	0xFDD
  5314                           fsr2h	equ	0xFDA
  5315                           fsr2l	equ	0xFD9
  5316                           status	equ	0xFD8
  5317                           
  5318 ;; *************** function _grabLeftIR *****************
  5319 ;; Defined at:
  5320 ;;		line 90 in file "IR_Reading.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;		None
  5323 ;; Auto vars:     Size  Location     Type
  5324 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5325 ;;  i               1   42[COMRAM] unsigned char 
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  2   35[COMRAM] unsigned int 
  5328 ;; Registers used:
  5329 ;;		wreg, status,2, status,0
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5335 ;;      Params:         2       0       0       0
  5336 ;;      Locals:         3       0       0       0
  5337 ;;      Temps:          3       0       0       0
  5338 ;;      Totals:         8       0       0       0
  5339 ;;Total ram usage:        8 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    3
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_ScanIR
  5346 ;;		_ScanWithRange
  5347 ;;		_main
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text24
  5352  00151A                     __ptext24:
  5353                           	opt stack 0
  5354  00151A                     _grabLeftIR:
  5355                           	opt stack 27
  5356                           
  5357                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5358                           
  5359                           ;incstack = 0
  5360  00151A  0E00               	movlw	0
  5361  00151C  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5362  00151E  0E00               	movlw	0
  5363  001520  6E29               	movwf	grabLeftIR@IR_signal,c
  5364                           
  5365                           ;IR_Reading.c: 93: unsigned char i=0;
  5366  001522  0E00               	movlw	0
  5367  001524  6E2B               	movwf	grabLeftIR@i,c
  5368                           
  5369                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5370  001526  0E00               	movlw	0
  5371  001528  6E2B               	movwf	grabLeftIR@i,c
  5372  00152A                     l2136:
  5373  00152A  0E03               	movlw	3
  5374  00152C  642B               	cpfsgt	grabLeftIR@i,c
  5375  00152E  D001               	goto	l2140
  5376  001530  D01E               	goto	l2146
  5377  001532                     l2140:
  5378                           
  5379                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5380  001532  5067               	movf	3943,w,c	;volatile
  5381  001534  6E26               	movwf	??_grabLeftIR& (0+255),c
  5382  001536  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5383  001538  0E07               	movlw	7
  5384  00153A                     u1495:
  5385  00153A  90D8               	bcf	status,0,c
  5386  00153C  3626               	rlcf	??_grabLeftIR,f,c
  5387  00153E  3627               	rlcf	??_grabLeftIR+1,f,c
  5388  001540  2EE8               	decfsz	wreg,f,c
  5389  001542  D7FB               	goto	u1495
  5390  001544  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5391  001548  90D8               	bcf	status,0,c
  5392  00154A  3228               	rrcf	??_grabLeftIR+2,f,c
  5393  00154C  5028               	movf	??_grabLeftIR+2,w,c
  5394  00154E  1226               	iorwf	??_grabLeftIR,f,c
  5395  001550  0E00               	movlw	0
  5396  001552  1227               	iorwf	??_grabLeftIR+1,f,c
  5397  001554  5026               	movf	??_grabLeftIR,w,c
  5398  001556  2629               	addwf	grabLeftIR@IR_signal,f,c
  5399  001558  5027               	movf	??_grabLeftIR+1,w,c
  5400  00155A  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5401                           
  5402                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5403  00155C  0E82               	movlw	130
  5404  00155E  6E26               	movwf	??_grabLeftIR& (0+255),c
  5405  001560  0EDE               	movlw	222
  5406  001562                     u3057:
  5407  001562  2EE8               	decfsz	wreg,f,c
  5408  001564  D7FE               	goto	u3057
  5409  001566  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5410  001568  D7FC               	goto	u3057
  5411  00156A  2A2B               	incf	grabLeftIR@i,f,c
  5412  00156C  D7DE               	goto	l2136
  5413  00156E                     l2146:
  5414                           
  5415                           ;IR_Reading.c: 99: }
  5416                           ;IR_Reading.c: 101: return IR_signal>>2;
  5417  00156E  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5418  001572  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5419  001576  90D8               	bcf	status,0,c
  5420  001578  3227               	rrcf	??_grabLeftIR+1,f,c
  5421  00157A  3226               	rrcf	??_grabLeftIR,f,c
  5422  00157C  90D8               	bcf	status,0,c
  5423  00157E  3227               	rrcf	??_grabLeftIR+1,f,c
  5424  001580  3226               	rrcf	??_grabLeftIR,f,c
  5425  001582  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5426  001586  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5427  00158A  0012               	return	
  5428  00158C                     __end_of_grabLeftIR:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           postinc0	equ	0xFEE
  5438                           wreg	equ	0xFE8
  5439                           indf1	equ	0xFE7
  5440                           fsr1h	equ	0xFE2
  5441                           fsr1l	equ	0xFE1
  5442                           indf2	equ	0xFDF
  5443                           postinc2	equ	0xFDE
  5444                           postdec2	equ	0xFDD
  5445                           fsr2h	equ	0xFDA
  5446                           fsr2l	equ	0xFD9
  5447                           status	equ	0xFD8
  5448                           
  5449 ;; *************** function _SetLine *****************
  5450 ;; Defined at:
  5451 ;;		line 74 in file "LCD.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  line            1    wreg     unsigned char 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  line            1   41[COMRAM] unsigned char 
  5456 ;; Return value:  Size  Location     Type
  5457 ;;		None               void
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5465 ;;      Params:         0       0       0       0
  5466 ;;      Locals:         1       0       0       0
  5467 ;;      Temps:          0       0       0       0
  5468 ;;      Totals:         1       0       0       0
  5469 ;;Total ram usage:        1 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    6
  5472 ;; This function calls:
  5473 ;;		_SendLCD
  5474 ;; This function is called by:
  5475 ;;		_ScanIR
  5476 ;;		_ScanWithRange
  5477 ;;		_main
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text25
  5482  001802                     __ptext25:
  5483                           	opt stack 0
  5484  001802                     _SetLine:
  5485                           	opt stack 24
  5486                           
  5487                           ;incstack = 0
  5488                           ;SetLine@line stored from wreg
  5489  001802  6E2A               	movwf	SetLine@line,c
  5490                           
  5491                           ;LCD.c: 75: if (line==1) {
  5492  001804  042A               	decf	SetLine@line,w,c
  5493  001806  A4D8               	btfss	status,2,c
  5494  001808  D006               	goto	l2154
  5495                           
  5496                           ;LCD.c: 76: SendLCD(0x80,0);
  5497  00180A  0E00               	movlw	0
  5498  00180C  6E28               	movwf	SendLCD@type,c
  5499  00180E  0E80               	movlw	128
  5500  001810  EC19  F00C         	call	_SendLCD
  5501                           
  5502                           ;LCD.c: 77: } else if (line==2) {
  5503  001814  D009               	goto	l2158
  5504  001816                     l2154:
  5505  001816  0E02               	movlw	2
  5506  001818  182A               	xorwf	SetLine@line,w,c
  5507  00181A  A4D8               	btfss	status,2,c
  5508  00181C  D005               	goto	l2158
  5509                           
  5510                           ;LCD.c: 78: SendLCD(0xC0,0);
  5511  00181E  0E00               	movlw	0
  5512  001820  6E28               	movwf	SendLCD@type,c
  5513  001822  0EC0               	movlw	192
  5514  001824  EC19  F00C         	call	_SendLCD
  5515  001828                     l2158:
  5516                           
  5517                           ;LCD.c: 79: }
  5518                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5519  001828  0E21               	movlw	33
  5520  00182A                     u3067:
  5521  00182A  2EE8               	decfsz	wreg,f,c
  5522  00182C  D7FE               	goto	u3067
  5523  00182E  F000               	nop	
  5524  001830  0012               	return		;funcret
  5525  001832                     __end_of_SetLine:
  5526                           	opt stack 0
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           intcon	equ	0xFF2
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           indf1	equ	0xFE7
  5537                           fsr1h	equ	0xFE2
  5538                           fsr1l	equ	0xFE1
  5539                           indf2	equ	0xFDF
  5540                           postinc2	equ	0xFDE
  5541                           postdec2	equ	0xFDD
  5542                           fsr2h	equ	0xFDA
  5543                           fsr2l	equ	0xFD9
  5544                           status	equ	0xFD8
  5545                           
  5546 ;; *************** function _LCD_String *****************
  5547 ;; Defined at:
  5548 ;;		line 83 in file "LCD.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  string          2   41[COMRAM] PTR unsigned char 
  5551 ;;		 -> STR_8(11), STR_7(10), main@buf(40), main@Message(10), 
  5552 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5553 ;;		 -> STR_1(12), 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;		None               void
  5558 ;; Registers used:
  5559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5565 ;;      Params:         2       0       0       0
  5566 ;;      Locals:         0       0       0       0
  5567 ;;      Temps:          0       0       0       0
  5568 ;;      Totals:         2       0       0       0
  5569 ;;Total ram usage:        2 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    6
  5572 ;; This function calls:
  5573 ;;		_SendLCD
  5574 ;; This function is called by:
  5575 ;;		_ScanIR
  5576 ;;		_ScanWithRange
  5577 ;;		_main
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text26
  5582  00158C                     __ptext26:
  5583                           	opt stack 0
  5584  00158C                     _LCD_String:
  5585                           	opt stack 23
  5586                           
  5587                           ;LCD.c: 85: while(*string != 0){
  5588                           
  5589                           ;incstack = 0
  5590  00158C  D01A               	goto	l2168
  5591  00158E                     l2162:
  5592                           
  5593                           ;LCD.c: 88: SendLCD(*string++,1);
  5594  00158E  0E01               	movlw	1
  5595  001590  6E28               	movwf	SendLCD@type,c
  5596  001592  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5597  001596  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5598  00159A  6AF8               	clrf	tblptru,c
  5599  00159C  0E02               	movlw	(high __ramtop+-1)
  5600  00159E  64F7               	cpfsgt	tblptrh,c
  5601  0015A0  D003               	bra	u1537
  5602  0015A2  0008               	tblrd		*
  5603  0015A4  50F5               	movf	tablat,w,c
  5604  0015A6  D005               	bra	u1530
  5605  0015A8                     u1537:
  5606  0015A8  CFF6 FFE1          	movff	tblptrl,fsr1l
  5607  0015AC  CFF7 FFE2          	movff	tblptrh,fsr1h
  5608  0015B0  50E7               	movf	indf1,w,c
  5609  0015B2                     u1530:
  5610  0015B2  EC19  F00C         	call	_SendLCD
  5611  0015B6  4A2A               	infsnz	LCD_String@string,f,c
  5612  0015B8  2A2B               	incf	LCD_String@string+1,f,c
  5613                           
  5614                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5615  0015BA  0E21               	movlw	33
  5616  0015BC                     u3077:
  5617  0015BC  2EE8               	decfsz	wreg,f,c
  5618  0015BE  D7FE               	goto	u3077
  5619  0015C0  F000               	nop	
  5620  0015C2                     l2168:
  5621  0015C2  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5622  0015C6  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5623  0015CA  6AF8               	clrf	tblptru,c
  5624  0015CC  0E02               	movlw	(high __ramtop+-1)
  5625  0015CE  64F7               	cpfsgt	tblptrh,c
  5626  0015D0  D003               	bra	u1547
  5627  0015D2  0008               	tblrd		*
  5628  0015D4  50F5               	movf	tablat,w,c
  5629  0015D6  D005               	bra	u1540
  5630  0015D8                     u1547:
  5631  0015D8  CFF6 FFE1          	movff	tblptrl,fsr1l
  5632  0015DC  CFF7 FFE2          	movff	tblptrh,fsr1h
  5633  0015E0  50E7               	movf	indf1,w,c
  5634  0015E2                     u1540:
  5635  0015E2  0900               	iorlw	0
  5636  0015E4  B4D8               	btfsc	status,2,c
  5637  0015E6  0012               	return	
  5638  0015E8  D7D2               	goto	l2162
  5639  0015EA                     __end_of_LCD_String:
  5640                           	opt stack 0
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           postinc0	equ	0xFEE
  5649                           wreg	equ	0xFE8
  5650                           indf1	equ	0xFE7
  5651                           fsr1h	equ	0xFE2
  5652                           fsr1l	equ	0xFE1
  5653                           indf2	equ	0xFDF
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           fsr2h	equ	0xFDA
  5657                           fsr2l	equ	0xFD9
  5658                           status	equ	0xFD8
  5659                           
  5660 ;; *************** function _SendLCD *****************
  5661 ;; Defined at:
  5662 ;;		line 27 in file "LCD.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  Byte            1    wreg     unsigned char 
  5665 ;;  type            1   39[COMRAM] unsigned char 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;  Byte            1   40[COMRAM] unsigned char 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;		None               void
  5670 ;; Registers used:
  5671 ;;		wreg, status,2, status,0, cstack
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5677 ;;      Params:         1       0       0       0
  5678 ;;      Locals:         1       0       0       0
  5679 ;;      Temps:          0       0       0       0
  5680 ;;      Totals:         2       0       0       0
  5681 ;;Total ram usage:        2 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    5
  5684 ;; This function calls:
  5685 ;;		_LCDout
  5686 ;; This function is called by:
  5687 ;;		_initLCD
  5688 ;;		_SetLine
  5689 ;;		_LCD_String
  5690 ;;		_ScanIR
  5691 ;;		_ScanWithRange
  5692 ;;		_main
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	text27
  5697  001832                     __ptext27:
  5698                           	opt stack 0
  5699  001832                     _SendLCD:
  5700                           	opt stack 24
  5701                           
  5702                           ;incstack = 0
  5703                           ;SendLCD@Byte stored from wreg
  5704  001832  6E29               	movwf	SendLCD@Byte,c
  5705                           
  5706                           ;LCD.c: 30: LATAbits.LATA6=type;
  5707  001834  B028               	btfsc	SendLCD@type,0,c
  5708  001836  D002               	bra	u1365
  5709  001838  9C89               	bcf	3977,6,c	;volatile
  5710  00183A  D001               	bra	u1366
  5711  00183C                     u1365:
  5712  00183C  8C89               	bsf	3977,6,c	;volatile
  5713  00183E                     u1366:
  5714                           
  5715                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5716  00183E  3829               	swapf	SendLCD@Byte,w,c
  5717  001840  0B0F               	andlw	15
  5718  001842  0B0F               	andlw	15
  5719  001844  EC28  F008         	call	_LCDout
  5720                           
  5721                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5722  001848  0E06               	movlw	6
  5723  00184A                     u3087:
  5724  00184A  2EE8               	decfsz	wreg,f,c
  5725  00184C  D7FE               	goto	u3087
  5726  00184E  D000               	nop2		;nop
  5727                           
  5728                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5729  001850  5029               	movf	SendLCD@Byte,w,c
  5730  001852  0B0F               	andlw	15
  5731  001854  EC28  F008         	call	_LCDout
  5732                           
  5733                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5734  001858  0E21               	movlw	33
  5735  00185A                     u3097:
  5736  00185A  2EE8               	decfsz	wreg,f,c
  5737  00185C  D7FE               	goto	u3097
  5738  00185E  F000               	nop	
  5739  001860  0012               	return		;funcret
  5740  001862                     __end_of_SendLCD:
  5741                           	opt stack 0
  5742                           tblptru	equ	0xFF8
  5743                           tblptrh	equ	0xFF7
  5744                           tblptrl	equ	0xFF6
  5745                           tablat	equ	0xFF5
  5746                           prodh	equ	0xFF4
  5747                           prodl	equ	0xFF3
  5748                           intcon	equ	0xFF2
  5749                           postinc0	equ	0xFEE
  5750                           wreg	equ	0xFE8
  5751                           indf1	equ	0xFE7
  5752                           fsr1h	equ	0xFE2
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _LCDout *****************
  5762 ;; Defined at:
  5763 ;;		line 14 in file "LCD.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;  number          1    wreg     unsigned char 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  number          1   38[COMRAM] unsigned char 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;		None               void
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5777 ;;      Params:         0       0       0       0
  5778 ;;      Locals:         1       0       0       0
  5779 ;;      Temps:          3       0       0       0
  5780 ;;      Totals:         4       0       0       0
  5781 ;;Total ram usage:        4 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    4
  5784 ;; This function calls:
  5785 ;;		_E_TOG
  5786 ;; This function is called by:
  5787 ;;		_SendLCD
  5788 ;;		_initLCD
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           	psect	text28
  5793  001050                     __ptext28:
  5794                           	opt stack 0
  5795  001050                     _LCDout:
  5796                           	opt stack 24
  5797                           
  5798                           ;incstack = 0
  5799                           ;LCDout@number stored from wreg
  5800  001050  6E27               	movwf	LCDout@number,c
  5801                           
  5802                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5803  001052  5027               	movf	LCDout@number,w,c
  5804  001054  6E24               	movwf	??_LCDout& (0+255),c
  5805  001056  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5806  001058  0E07               	movlw	7
  5807  00105A                     u1215:
  5808  00105A  90D8               	bcf	status,0,c
  5809  00105C  3624               	rlcf	??_LCDout,f,c
  5810  00105E  3625               	rlcf	??_LCDout+1,f,c
  5811  001060  2EE8               	decfsz	wreg,f,c
  5812  001062  D7FB               	goto	u1215
  5813  001064  0E07               	movlw	7
  5814  001066  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5815  001068                     u1225:
  5816  001068  3425               	rlcf	??_LCDout+1,w,c
  5817  00106A  3225               	rrcf	??_LCDout+1,f,c
  5818  00106C  3224               	rrcf	??_LCDout,f,c
  5819  00106E  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5820  001070  D7FB               	goto	u1225
  5821  001072  4624               	rlncf	??_LCDout,f,c
  5822  001074  508B               	movf	3979,w,c	;volatile
  5823  001076  1824               	xorwf	??_LCDout,w,c
  5824  001078  0BFD               	andlw	-3
  5825  00107A  1824               	xorwf	??_LCDout,w,c
  5826  00107C  6E8B               	movwf	3979,c	;volatile
  5827                           
  5828                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5829  00107E  5027               	movf	LCDout@number,w,c
  5830  001080  6E24               	movwf	??_LCDout& (0+255),c
  5831  001082  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5832  001084  0E06               	movlw	6
  5833  001086                     u1235:
  5834  001086  90D8               	bcf	status,0,c
  5835  001088  3624               	rlcf	??_LCDout,f,c
  5836  00108A  3625               	rlcf	??_LCDout+1,f,c
  5837  00108C  2EE8               	decfsz	wreg,f,c
  5838  00108E  D7FB               	goto	u1235
  5839  001090  0E07               	movlw	7
  5840  001092  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5841  001094                     u1245:
  5842  001094  3425               	rlcf	??_LCDout+1,w,c
  5843  001096  3225               	rrcf	??_LCDout+1,f,c
  5844  001098  3224               	rrcf	??_LCDout,f,c
  5845  00109A  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5846  00109C  D7FB               	goto	u1245
  5847  00109E  4624               	rlncf	??_LCDout,f,c
  5848  0010A0  4624               	rlncf	??_LCDout,f,c
  5849  0010A2  508B               	movf	3979,w,c	;volatile
  5850  0010A4  1824               	xorwf	??_LCDout,w,c
  5851  0010A6  0BFB               	andlw	-5
  5852  0010A8  1824               	xorwf	??_LCDout,w,c
  5853  0010AA  6E8B               	movwf	3979,c	;volatile
  5854                           
  5855                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5856  0010AC  5027               	movf	LCDout@number,w,c
  5857  0010AE  6E24               	movwf	??_LCDout& (0+255),c
  5858  0010B0  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5859  0010B2  0E05               	movlw	5
  5860  0010B4                     u1255:
  5861  0010B4  90D8               	bcf	status,0,c
  5862  0010B6  3624               	rlcf	??_LCDout,f,c
  5863  0010B8  3625               	rlcf	??_LCDout+1,f,c
  5864  0010BA  2EE8               	decfsz	wreg,f,c
  5865  0010BC  D7FB               	goto	u1255
  5866  0010BE  0E07               	movlw	7
  5867  0010C0  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5868  0010C2                     u1265:
  5869  0010C2  3425               	rlcf	??_LCDout+1,w,c
  5870  0010C4  3225               	rrcf	??_LCDout+1,f,c
  5871  0010C6  3224               	rrcf	??_LCDout,f,c
  5872  0010C8  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5873  0010CA  D7FB               	goto	u1265
  5874  0010CC  508C               	movf	3980,w,c	;volatile
  5875  0010CE  1824               	xorwf	??_LCDout,w,c
  5876  0010D0  0BFE               	andlw	-2
  5877  0010D2  1824               	xorwf	??_LCDout,w,c
  5878  0010D4  6E8C               	movwf	3980,c	;volatile
  5879                           
  5880                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  5881  0010D6  5027               	movf	LCDout@number,w,c
  5882  0010D8  6E24               	movwf	??_LCDout& (0+255),c
  5883  0010DA  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5884  0010DC  3A24               	swapf	??_LCDout,f,c
  5885  0010DE  3A25               	swapf	??_LCDout+1,f,c
  5886  0010E0  0EF0               	movlw	240
  5887  0010E2  1625               	andwf	??_LCDout+1,f,c
  5888  0010E4  5024               	movf	??_LCDout,w,c
  5889  0010E6  0B0F               	andlw	15
  5890  0010E8  1225               	iorwf	??_LCDout+1,f,c
  5891  0010EA  0EF0               	movlw	240
  5892  0010EC  1624               	andwf	??_LCDout,f,c
  5893  0010EE  0E07               	movlw	7
  5894  0010F0  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5895  0010F2                     u1275:
  5896  0010F2  3425               	rlcf	??_LCDout+1,w,c
  5897  0010F4  3225               	rrcf	??_LCDout+1,f,c
  5898  0010F6  3224               	rrcf	??_LCDout,f,c
  5899  0010F8  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5900  0010FA  D7FB               	goto	u1275
  5901  0010FC  4624               	rlncf	??_LCDout,f,c
  5902  0010FE  508C               	movf	3980,w,c	;volatile
  5903  001100  1824               	xorwf	??_LCDout,w,c
  5904  001102  0BFD               	andlw	-3
  5905  001104  1824               	xorwf	??_LCDout,w,c
  5906  001106  6E8C               	movwf	3980,c	;volatile
  5907                           
  5908                           ;LCD.c: 21: E_TOG();
  5909  001108  ECA3  F00C         	call	_E_TOG	;wreg free
  5910                           
  5911                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5912  00110C  0E03               	movlw	3
  5913  00110E                     u3107:
  5914  00110E  2EE8               	decfsz	wreg,f,c
  5915  001110  D7FE               	goto	u3107
  5916  001112  F000               	nop	
  5917  001114  0012               	return		;funcret
  5918  001116                     __end_of_LCDout:
  5919                           	opt stack 0
  5920                           tblptru	equ	0xFF8
  5921                           tblptrh	equ	0xFF7
  5922                           tblptrl	equ	0xFF6
  5923                           tablat	equ	0xFF5
  5924                           prodh	equ	0xFF4
  5925                           prodl	equ	0xFF3
  5926                           intcon	equ	0xFF2
  5927                           postinc0	equ	0xFEE
  5928                           wreg	equ	0xFE8
  5929                           indf1	equ	0xFE7
  5930                           fsr1h	equ	0xFE2
  5931                           fsr1l	equ	0xFE1
  5932                           indf2	equ	0xFDF
  5933                           postinc2	equ	0xFDE
  5934                           postdec2	equ	0xFDD
  5935                           fsr2h	equ	0xFDA
  5936                           fsr2l	equ	0xFD9
  5937                           status	equ	0xFD8
  5938                           
  5939 ;; *************** function _E_TOG *****************
  5940 ;; Defined at:
  5941 ;;		line 5 in file "LCD.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;		None               void
  5948 ;; Registers used:
  5949 ;;		wreg
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5955 ;;      Params:         0       0       0       0
  5956 ;;      Locals:         0       0       0       0
  5957 ;;      Temps:          0       0       0       0
  5958 ;;      Totals:         0       0       0       0
  5959 ;;Total ram usage:        0 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    3
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_LCDout
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text29
  5970  001946                     __ptext29:
  5971                           	opt stack 0
  5972  001946                     _E_TOG:
  5973                           	opt stack 24
  5974                           
  5975                           ;LCD.c: 8: LATCbits.LATC0=1;
  5976                           
  5977                           ;incstack = 0
  5978  001946  808B               	bsf	3979,0,c	;volatile
  5979                           
  5980                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5981  001948  0E03               	movlw	3
  5982  00194A                     u3117:
  5983  00194A  2EE8               	decfsz	wreg,f,c
  5984  00194C  D7FE               	goto	u3117
  5985  00194E  F000               	nop	
  5986                           
  5987                           ;LCD.c: 10: LATCbits.LATC0=0;
  5988  001950  908B               	bcf	3979,0,c	;volatile
  5989  001952  0012               	return		;funcret
  5990  001954                     __end_of_E_TOG:
  5991                           	opt stack 0
  5992                           tblptru	equ	0xFF8
  5993                           tblptrh	equ	0xFF7
  5994                           tblptrl	equ	0xFF6
  5995                           tablat	equ	0xFF5
  5996                           prodh	equ	0xFF4
  5997                           prodl	equ	0xFF3
  5998                           intcon	equ	0xFF2
  5999                           postinc0	equ	0xFEE
  6000                           wreg	equ	0xFE8
  6001                           indf1	equ	0xFE7
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           postinc2	equ	0xFDE
  6006                           postdec2	equ	0xFDD
  6007                           fsr2h	equ	0xFDA
  6008                           fsr2l	equ	0xFD9
  6009                           status	equ	0xFD8
  6010                           
  6011 ;; *************** function _InterruptHandlerLow *****************
  6012 ;; Defined at:
  6013 ;;		line 18 in file "main.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;		None               void
  6020 ;; Registers used:
  6021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6027 ;;      Params:         0       0       0       0
  6028 ;;      Locals:         0       0       0       0
  6029 ;;      Temps:         17       0       0       0
  6030 ;;      Totals:        17       0       0       0
  6031 ;;Total ram usage:       17 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    2
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		Interrupt level 1
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	intcodelo
  6042  000018                     __pintcodelo:
  6043                           	opt stack 0
  6044  000018                     _InterruptHandlerLow:
  6045                           	opt stack 23
  6046                           
  6047                           ;incstack = 0
  6048  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6049  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6050  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6051  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6052  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6053  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6054  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6055  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6056  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6057  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6058  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6059  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6060  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6061  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6062  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6063  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6064  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6065  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6066                           
  6067                           ;main.c: 20: if (PIR1bits.RCIF) {
  6068  00005E  AA9E               	btfss	3998,5,c	;volatile
  6069  000060  D016               	goto	i1l362
  6070                           
  6071                           ;main.c: 21: ReceivedString[i]=RCREG;
  6072  000062  503A               	movf	_i,w,c	;volatile
  6073  000064  0D01               	mullw	1
  6074  000066  0EBE               	movlw	low _ReceivedString
  6075  000068  24F3               	addwf	prodl,w,c
  6076  00006A  6ED9               	movwf	fsr2l,c
  6077  00006C  0E00               	movlw	high _ReceivedString
  6078  00006E  20F4               	addwfc	prodh,w,c
  6079  000070  6EDA               	movwf	fsr2h,c
  6080  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6081                           
  6082                           ;main.c: 22: RFID_Read=1;
  6083  000076  0E01               	movlw	1
  6084  000078  0101               	movlb	1	; () banked
  6085  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6086                           
  6087                           ; BSR set to: 1
  6088                           ;main.c: 23: if (i==15){
  6089  00007C  0E0F               	movlw	15
  6090  00007E  183A               	xorwf	_i,w,c	;volatile
  6091  000080  A4D8               	btfss	status,2,c
  6092  000082  D003               	goto	i1l2564
  6093                           
  6094                           ; BSR set to: 1
  6095                           ;main.c: 24: i=0;
  6096  000084  0E00               	movlw	0
  6097  000086  6E3A               	movwf	_i,c	;volatile
  6098                           
  6099                           ;main.c: 25: }else{
  6100  000088  D001               	goto	i1l2566
  6101  00008A                     i1l2564:
  6102                           
  6103                           ; BSR set to: 1
  6104                           ;main.c: 26: i++;
  6105  00008A  2A3A               	incf	_i,f,c	;volatile
  6106  00008C                     i1l2566:
  6107                           
  6108                           ; BSR set to: 1
  6109                           ;main.c: 27: }
  6110                           ;main.c: 28: PIR1bits.RCIF=0;
  6111  00008C  9A9E               	bcf	3998,5,c	;volatile
  6112  00008E                     i1l362:
  6113  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6114  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6115  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6116  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6117  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6118  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6119  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6120  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6121  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6122  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6123  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6124  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6125  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6126  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6127  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6128  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6129  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6130  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6131  0000D4  0010               	retfie	
  6132  0000D6                     __end_of_InterruptHandlerLow:
  6133                           	opt stack 0
  6134                           pclatu	equ	0xFFB
  6135                           pclath	equ	0xFFA
  6136                           tblptru	equ	0xFF8
  6137                           tblptrh	equ	0xFF7
  6138                           tblptrl	equ	0xFF6
  6139                           tablat	equ	0xFF5
  6140                           prodh	equ	0xFF4
  6141                           prodl	equ	0xFF3
  6142                           intcon	equ	0xFF2
  6143                           postinc0	equ	0xFEE
  6144                           fsr0h	equ	0xFEA
  6145                           fsr0l	equ	0xFE9
  6146                           wreg	equ	0xFE8
  6147                           indf1	equ	0xFE7
  6148                           fsr1h	equ	0xFE2
  6149                           fsr1l	equ	0xFE1
  6150                           bsr	equ	0xFE0
  6151                           indf2	equ	0xFDF
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _InterruptHandlerHigh *****************
  6159 ;; Defined at:
  6160 ;;		line 34 in file "main.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;		None
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;		None
  6165 ;; Return value:  Size  Location     Type
  6166 ;;		None               void
  6167 ;; Registers used:
  6168 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6174 ;;      Params:         0       0       0       0
  6175 ;;      Locals:         0       0       0       0
  6176 ;;      Temps:         14       0       0       0
  6177 ;;      Totals:        14       0       0       0
  6178 ;;Total ram usage:       14 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    1
  6181 ;; This function calls:
  6182 ;;		i2_delay_tenth_s
  6183 ;; This function is called by:
  6184 ;;		Interrupt level 2
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           	psect	intcode
  6189  000008                     __pintcode:
  6190                           	opt stack 0
  6191  000008                     _InterruptHandlerHigh:
  6192                           	opt stack 23
  6193                           
  6194                           ;incstack = 0
  6195  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6196  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6197  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6198  000012  EF8D  F009         	goto	int_func
  6199                           pclatu	equ	0xFFB
  6200                           pclath	equ	0xFFA
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           postinc0	equ	0xFEE
  6209                           fsr0h	equ	0xFEA
  6210                           fsr0l	equ	0xFE9
  6211                           wreg	equ	0xFE8
  6212                           indf1	equ	0xFE7
  6213                           fsr1h	equ	0xFE2
  6214                           fsr1l	equ	0xFE1
  6215                           bsr	equ	0xFE0
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223                           	psect	intcode_body
  6224  00131A                     __pintcode_body:
  6225                           	opt stack 23
  6226  00131A                     int_func:
  6227                           	opt stack 23
  6228  00131A  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6229  00131E  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6230  001322  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6231  001326  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6232  00132A  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6233  00132E  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6234  001332  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6235  001336  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6236  00133A  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6237  00133E  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6238  001342  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6239  001346  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6240                           
  6241                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6242  00134A  A2F2               	btfss	intcon,1,c	;volatile
  6243  00134C  D00D               	goto	i2l370
  6244                           
  6245                           ;main.c: 36: if (mode==-1) {
  6246  00134E  283B               	incf	_mode,w,c	;volatile
  6247  001350  A4D8               	btfss	status,2,c
  6248  001352  D003               	goto	i2l2574
  6249                           
  6250                           ;main.c: 38: mode=1;
  6251  001354  0E01               	movlw	1
  6252  001356  6E3B               	movwf	_mode,c	;volatile
  6253                           
  6254                           ;main.c: 39: } else if (mode==0) {
  6255  001358  D003               	goto	i2l2578
  6256  00135A                     i2l2574:
  6257  00135A  503B               	movf	_mode,w,c	;volatile
  6258  00135C  A4D8               	btfss	status,2,c
  6259                           
  6260                           ;main.c: 43: mode=-1;
  6261                           
  6262                           ;main.c: 41: } else {
  6263  00135E  683B               	setf	_mode,c	;volatile
  6264  001360                     i2l2578:
  6265                           
  6266                           ;main.c: 44: }
  6267                           ;main.c: 46: delay_tenth_s(2);
  6268  001360  0E02               	movlw	2
  6269  001362  ECCC  F00B         	call	i2_delay_tenth_s
  6270                           
  6271                           ;main.c: 47: INTCONbits.INT0IF=0;
  6272  001366  92F2               	bcf	intcon,1,c	;volatile
  6273  001368                     i2l370:
  6274  001368  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6275  00136C  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6276  001370  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6277  001374  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6278  001378  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6279  00137C  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6280  001380  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6281  001384  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6282  001388  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6283  00138C  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6284  001390  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6285  001394  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6286  001398  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6287  00139C  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6288  0013A0  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6289  0013A2  0011               	retfie		f
  6290  0013A4                     __end_of_InterruptHandlerHigh:
  6291                           	opt stack 0
  6292                           pclatu	equ	0xFFB
  6293                           pclath	equ	0xFFA
  6294                           tblptru	equ	0xFF8
  6295                           tblptrh	equ	0xFF7
  6296                           tblptrl	equ	0xFF6
  6297                           tablat	equ	0xFF5
  6298                           prodh	equ	0xFF4
  6299                           prodl	equ	0xFF3
  6300                           intcon	equ	0xFF2
  6301                           postinc0	equ	0xFEE
  6302                           fsr0h	equ	0xFEA
  6303                           fsr0l	equ	0xFE9
  6304                           wreg	equ	0xFE8
  6305                           indf1	equ	0xFE7
  6306                           fsr1h	equ	0xFE2
  6307                           fsr1l	equ	0xFE1
  6308                           bsr	equ	0xFE0
  6309                           indf2	equ	0xFDF
  6310                           postinc2	equ	0xFDE
  6311                           postdec2	equ	0xFDD
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function i2_delay_tenth_s *****************
  6317 ;; Defined at:
  6318 ;;		line 32 in file "Movement.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  tenth_second    1    wreg     unsigned char 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6323 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6324 ;; Return value:  Size  Location     Type
  6325 ;;		None               void
  6326 ;; Registers used:
  6327 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6333 ;;      Params:         0       0       0       0
  6334 ;;      Locals:         3       0       0       0
  6335 ;;      Temps:          1       0       0       0
  6336 ;;      Totals:         4       0       0       0
  6337 ;;Total ram usage:        4 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_InterruptHandlerHigh
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text32
  6347  001798                     __ptext32:
  6348                           	opt stack 0
  6349  001798                     i2_delay_tenth_s:
  6350                           	opt stack 23
  6351                           
  6352                           ;incstack = 0
  6353                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6354  001798  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6355                           
  6356                           ;Movement.c: 33: unsigned int i=0;
  6357  00179A  0E00               	movlw	0
  6358  00179C  6E04               	movwf	i2delay_tenth_s@i+1,c
  6359  00179E  0E00               	movlw	0
  6360  0017A0  6E03               	movwf	i2delay_tenth_s@i,c
  6361                           
  6362                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  6363  0017A2  0E00               	movlw	0
  6364  0017A4  6E04               	movwf	i2delay_tenth_s@i+1,c
  6365  0017A6  0E01               	movlw	1
  6366  0017A8  6E03               	movwf	i2delay_tenth_s@i,c
  6367  0017AA  D009               	goto	i2l2536
  6368  0017AC                     i2l2532:
  6369                           
  6370                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  6371  0017AC  0E82               	movlw	130
  6372  0017AE  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6373  0017B0  0EDE               	movlw	222
  6374  0017B2                     i2u312_47:
  6375  0017B2  2EE8               	decfsz	wreg,f,c
  6376  0017B4  D7FE               	goto	i2u312_47
  6377  0017B6  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6378  0017B8  D7FC               	goto	i2u312_47
  6379  0017BA  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6380  0017BC  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6381  0017BE                     i2l2536:
  6382  0017BE  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6383  0017C0  0D02               	mullw	2
  6384  0017C2  5003               	movf	i2delay_tenth_s@i,w,c
  6385  0017C4  5CF3               	subwf	prodl,w,c
  6386  0017C6  5004               	movf	i2delay_tenth_s@i+1,w,c
  6387  0017C8  58F4               	subwfb	prodh,w,c
  6388  0017CA  A0D8               	btfss	status,0,c
  6389  0017CC  0012               	return	
  6390  0017CE  D7EE               	goto	i2l2532
  6391  0017D0                     __end_ofi2_delay_tenth_s:
  6392                           	opt stack 0
  6393                           pclatu	equ	0xFFB
  6394                           pclath	equ	0xFFA
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodh	equ	0xFF4
  6400                           prodl	equ	0xFF3
  6401                           intcon	equ	0xFF2
  6402                           postinc0	equ	0xFEE
  6403                           fsr0h	equ	0xFEA
  6404                           fsr0l	equ	0xFE9
  6405                           wreg	equ	0xFE8
  6406                           indf1	equ	0xFE7
  6407                           fsr1h	equ	0xFE2
  6408                           fsr1l	equ	0xFE1
  6409                           bsr	equ	0xFE0
  6410                           indf2	equ	0xFDF
  6411                           postinc2	equ	0xFDE
  6412                           postdec2	equ	0xFDD
  6413                           fsr2h	equ	0xFDA
  6414                           fsr2l	equ	0xFD9
  6415                           status	equ	0xFD8
  6416                           pclatu	equ	0xFFB
  6417                           pclath	equ	0xFFA
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           postinc0	equ	0xFEE
  6426                           fsr0h	equ	0xFEA
  6427                           fsr0l	equ	0xFE9
  6428                           wreg	equ	0xFE8
  6429                           indf1	equ	0xFE7
  6430                           fsr1h	equ	0xFE2
  6431                           fsr1l	equ	0xFE1
  6432                           bsr	equ	0xFE0
  6433                           indf2	equ	0xFDF
  6434                           postinc2	equ	0xFDE
  6435                           postdec2	equ	0xFDD
  6436                           fsr2h	equ	0xFDA
  6437                           fsr2l	equ	0xFD9
  6438                           status	equ	0xFD8
  6439                           
  6440                           	psect	rparam
  6441  0000                     pclatu	equ	0xFFB
  6442                           pclath	equ	0xFFA
  6443                           tblptru	equ	0xFF8
  6444                           tblptrh	equ	0xFF7
  6445                           tblptrl	equ	0xFF6
  6446                           tablat	equ	0xFF5
  6447                           prodh	equ	0xFF4
  6448                           prodl	equ	0xFF3
  6449                           intcon	equ	0xFF2
  6450                           postinc0	equ	0xFEE
  6451                           fsr0h	equ	0xFEA
  6452                           fsr0l	equ	0xFE9
  6453                           wreg	equ	0xFE8
  6454                           indf1	equ	0xFE7
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           bsr	equ	0xFE0
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           postdec2	equ	0xFDD
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465                           	psect	temp
  6466  00003C                     btemp:
  6467                           	opt stack 0
  6468  00003C                     	ds	1
  6469  0000                     int$flags	set	btemp
  6470                           pclatu	equ	0xFFB
  6471                           pclath	equ	0xFFA
  6472                           tblptru	equ	0xFF8
  6473                           tblptrh	equ	0xFF7
  6474                           tblptrl	equ	0xFF6
  6475                           tablat	equ	0xFF5
  6476                           prodh	equ	0xFF4
  6477                           prodl	equ	0xFF3
  6478                           intcon	equ	0xFF2
  6479                           postinc0	equ	0xFEE
  6480                           fsr0h	equ	0xFEA
  6481                           fsr0l	equ	0xFE9
  6482                           wreg	equ	0xFE8
  6483                           indf1	equ	0xFE7
  6484                           fsr1h	equ	0xFE2
  6485                           fsr1l	equ	0xFE1
  6486                           bsr	equ	0xFE0
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           fsr2h	equ	0xFDA
  6491                           fsr2l	equ	0xFD9
  6492                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     86     110
    BANK1           256    250     255
    BANK2           256     18      18

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), main@Message(BANK1[10]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               278   278      0   65606
                                             76 BANK0     10    10      0
                                              0 BANK1    250   250      0
                                              0 BANK2     18    18      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4247
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       63    55      8   30193
                                             13 BANK0     63    55      8
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            5     0      5    8724
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             5     0      5    8724
                                              7 BANK0      5     0      5
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       6     1      5    3861
                                             56 COMRAM     1     1      0
                                              2 BANK0      5     0      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              57    47     10   11933
                                             56 COMRAM     1     1      0
                                             13 BANK0     56    46     10
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4184
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1735
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     12      12       9        7.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     56      6E       5       68.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BA       3        0.0%
DATA                 0      0     1BA      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 17:15:11 2018

                        ?_grabRightIR 0024                                     _i 003A  
                  fullSpeedBack@power 006B                                    l35 0EF8  
                                  l65 1482                          ___awdiv@sign 002F  
                                  bsr 000FE0                   ___wmul@multiplicand 0026  
                         main@Message 01F0                           ?_LCD_String 002A  
                                 l223 0D7C                                   l375 03F8  
                                 l865 16D6                                   l875 1718  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        __CFG_LVP$OFF 000000                          main@MoveType 0164  
                                l2102 170E                                  l2120 14B8  
                                l2130 14FC                                  l2140 1532  
                                l2124 14C0                                  l3102 0D24  
                                l2136 152A                                  l2064 1910  
                                l2162 158E                                  l2154 1816  
                                l2146 156E                                  l2074 16A4  
                                l3114 0DA0                                  l2076 16AC  
                                l3036 1038                                  l2172 1774  
                                l3124 0DCA                                  l3300 0718  
                                l3220 04A4                                  l2158 1828  
                                l2086 16CC                                  l2078 16B0  
                                l2094 16EE                                  l3054 0BF8  
                                l3126 0DD0                                  l2318 18A0  
                                l3310 073E                                  l2168 15C2  
                                l2096 16F6                                  l2176 1786  
                                l3304 0722                                  l3312 0744  
                                l3320 07AC                                  l3224 04D6  
                                l2098 16FA                                  l3090 0CF4  
                                l2514 122A                                  l3330 080A  
                                l3332 0810                                  l3260 05A4  
                                l3244 052A                                  l3094 0D04  
                                l3086 0CDA                                  l2526 1282  
                                l2518 1232                                  l3270 063C  
                                l3342 0850                                  l2800 13E6  
                                l3096 0D08                                  l2810 1406  
                                l2802 13EA                                  l3274 064A  
                                l3266 05EE                                  l3186 03FE  
                                l3292 06D2                                  l2902 08E6  
                                l2814 1410                                  l3278 0660  
                                l2912 0958                                  l2840 12B8  
                                l2832 1288                                  l3288 06C8  
                                l2914 0980                                  l2818 141E  
                                l3298 0712                                  l2924 09B0  
                                l2828 0ED0                                  l2836 12A0  
                                l2950 0A50                                  l2926 09B6  
                                l2846 12D8                                  l2862 1462  
                                l2854 142A                                  l2944 0A0E  
                                l2792 13C8                                  l2938 09EC  
                                l2890 089C                                  l2786 13B8  
                                l2858 1446                                  l2980 0AE8  
                                l2948 0A46                                  l2892 08AE  
                                l2884 0880                                  l2982 0AEE  
                                l2974 0ACA                                  l2958 0A74  
                                l2966 0A9A                                  l2990 0B50  
                                l2798 13DE                                  l2968 0AA6  
                                l2992 0B6A                                  l2896 08B6  
                                l2988 0B44                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1215 105A  
                                u1225 1068                                  u1235 1086  
                                u1245 1094                                  _LATB 000F8A  
                                u1255 10B4                                  u3007 177A  
                                u1265 10C2                                  u3017 0FA4  
                                u1530 15B2                                  u3107 110E  
                                u1275 10F2                                  u3027 0FBA  
                                u1540 15E2                                  u2244 0E90  
                                u3117 194A                                  u1365 183C  
                                u2245 0E8C                                  u3037 12D2  
                                u1366 183E                                  u2254 0EEC  
                                u3047 14F0                                  u2255 0EE8  
                                u1537 15A8                                  u3057 1562  
                                u1465 14C8                                  u2265 0F46  
                                u1547 15D8                                  u3067 182A  
                                u3077 15BC                                  u3087 184A  
                                u1495 153A                                  u3097 185A  
                                u2750 0692                                  u1775 189C  
                                u1776 189E                                  u2760 06A6  
                                u2752 0694                                  u2762 06A8  
                                u1795 18AE                                  u2907 117C  
                                u1796 18B0                                  u2917 118E  
                                u2837 0454                                  u2927 11A4  
                                u2847 046C                                  u2937 11B8  
                                u2857 1128                                  u2947 11CA  
                                u2867 113E                                  u2957 0C2C  
                                u2877 114E                                  u2967 0C44  
                                u2887 115C                                  u2977 0CB8  
                                u2897 116A                                  u2987 0D5A  
                                u2997 147C                            ScanIR@Move 0071  
                                _main 0350                                  _mode 003B  
                       main@ScanAngle 00AE                                  fsr0h 000FEA  
                                fsr1h 000FE2                                  fsr0l 000FE9  
                                fsr2h 000FDA                                  indf1 000FE7  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                                  btemp 003C  
                                _stop 1286                                  pclat 000FFA  
                 fullSpeedAhead@power 0066                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 1798  
                     __end_of_SendLCD 1862                       __end_of_SetLine 1832  
                  ScanWithRange@F3892 00BA                           ScanIR@F3882 00B6  
                               ?_main 0001                       __end_of___awdiv 1428  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 16E0                       __end_of___lwmod 1722  
                               i1l362 008E                                 i2l370 1368  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 1946                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 11D2                       __end_of_dpowers 030B  
                     __end_of_isdigit 1918                                 main@i 00B5  
                               tablat 000FF5                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 0B78  
              __size_of_ScanWithRange 02A4                        __CFG_MCLRE$OFF 000000  
                     __initialization 1862                          __end_of_main 0872  
                        __end_of_stop 131A                        delay_tenth_s@i 0026  
                      __CFG_OSC$IRCIO 000000                      LCD_String@string 002A  
        ScanIR@DirectionMoveThreshold 009F                  __end_of_enableSensor 18B2  
                 VerifySignal@hexByte 002D                                ??_main 00AC  
                              ??_stop 0039                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003E  
                    ___awdiv@dividend 002A                                i1l2564 008A  
                              i1l2566 008C                                i2l2532 17AC  
                      __CFG_WDTEN$OFF 000000                                i2l2536 17BE  
                              i2l2574 135A                                i2l2578 1360  
               __end_of_delay_tenth_s 1798                                _LCDout 1050  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 17D0  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 0F56                             ??_SetLine 002A  
                              ___wmul 18B2                             ??___awdiv 002E  
                    __end_of_initRFID 1934                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 18D8  
                __size_of_grabRightIR 0072                                clear_0 1874  
                    ___awdiv@quotient 0030                                main@mL 0200  
                              main@mR 0209                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0B78  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060       ScanWithRange@TimeAboveThreshold 009F  
                    __end_of_turnLeft 168E                       fullSpeedBack@mL 0067  
                     fullSpeedBack@mR 0069                            __accesstop 0060  
             __end_of__initialization 187E                         ___rparam_used 000001  
                         SetLine@line 002A                         __end_of_E_TOG 1954  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 1722  
                        ??_LCD_String 002C                        ?_ScanWithRange 006D  
                VerifySignal@checksum 002C                               ??_E_TOG 0024  
       __size_of_InterruptHandlerHigh 139C           __end_of_InterruptHandlerLow 00D6  
          delay_tenth_s@tenth_seconds 0025                          sprintf@width 006A  
                          __pbssBANK0 00B6                            __pbssBANK1 01FA  
                             ?_LCDout 0001                      ?i2_delay_tenth_s 0001  
                  __size_of_initTimer 0012                    __end_of_LCD_String 15EA  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0067  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0080                            _grabLeftIR 151A  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                           ?_initRFID 0001                  __size_of_setMotorPWM 013A  
                     __size_of_LCDout 00C6                          _enableSensor 188C  
                  __size_of_turnRight 0052                  __end_of_initMotorPWM 1802  
                             _SendLCD 1832                               __Hparam 0000  
                             _SetLine 1802                               __Lparam 0000  
                     __size_of_ScanIR 00FA                               ___awdiv 13A4  
                     __size_of___wmul 0026                               ___lwdiv 168E  
                             ___lwmod 16E0                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1862  
                     ??_ScanWithRange 0075                               __ramtop 0300  
                           ?_turnLeft 0067                               __ptext0 0350  
                             __ptext1 1934                               __ptext2 1918  
                             __ptext3 17D0                               __ptext4 1116  
                             __ptext5 18D8                               __ptext6 1722  
                             __ptext7 188C                               __ptext8 11D2  
                             __ptext9 0B78                             _T0CONbits 000FD5  
                             _initLCD 1116                     __end_of_initTimer 1946  
                             _dpowers 0301                               _isdigit 18FA  
                        LCDout@number 0027                         ?_VerifySignal 0024  
                             main@buf 01C8                               _sprintf 0872  
                      __pintcode_body 131A                  end_of_initialization 187E  
                      ScanWithRange@i 00A0                        ScanWithRange@n 00A2  
                  setMotorPWM@PWMduty 0060                            ??_initRFID 0024  
                       __Lmediumconst 0000                               int_func 131A  
                  ScanIR@SensorResult 00A1                       ??_fullSpeedBack 003A  
                           _RFID_Read 01FE                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 003A  
                   __end_of_turnRight 163C                           ?_grabLeftIR 0024  
                           _TRISAbits 000F92                             _TRISBbits 000F93  
                           _TRISCbits 000F94                             _TRISDbits 000F95  
                           _TRISEbits 000F96                        ??_VerifySignal 0026  
                    fullSpeedAhead@mL 0062                      fullSpeedAhead@mR 0064  
              ScanWithRange@RightFlag 00AB                        __end_of_LCDout 1116  
                           _TXSTAbits 000FAC                             ScanIR@buf 0077  
          ScanWithRange@MoveTimeEntry 0073                         ??_grabRightIR 0026  
                      __end_of_ScanIR 1050                        _fullSpeedAhead 1428  
                      _ReceivedString 00BE                        __end_of___wmul 18D8  
                         _BAUDCONbits 000FAA                        __end_of_initIR 18FA  
              __size_of_delay_tenth_s 0038                   start_initialization 1862  
                  VerifySignal@Signal 0024                 __size_of_initMotorPWM 0032  
                            ??_LCDout 0024          __end_of_InterruptHandlerHigh 13A4  
                            ??_ScanIR 0039                __end_of_fullSpeedAhead 14A8  
                 __size_of_grabLeftIR 0072                              ??___wmul 0028  
                            ??_initIR 0024                   __end_of_grabRightIR 151A  
                        _initMotorPWM 17D0                           __pbssCOMRAM 003A  
                       __pcstackBANK0 0060                         __pcstackBANK1 0100  
                       __pcstackBANK2 0200                          _isdigit$1958 0025  
        __size_of_InterruptHandlerLow 00BE                         _delay_tenth_s 1760  
                         sprintf@flag 0069                           sprintf@prec 0066  
                   __size_of_initRFID 001C                              ?_SendLCD 0028  
                            ?_SetLine 0001                      ___lwdiv@dividend 0024  
                     ?_fullSpeedAhead 0062                             __pintcode 0008  
                __end_of_VerifySignal 1286                              ?___awdiv 002A  
            __size_ofi2_delay_tenth_s 0038                              ?___lwdiv 0024  
                            ?___lwmod 002B                           __pintcodelo 0018  
                            _CAP1BUFH 000F69                              _CAP1BUFL 000F68  
                            _CAP2BUFH 000F67                              _CAP2BUFL 000F66  
                            ?_initLCD 0001                      main@SensorResult 00AF  
                         __smallconst 0300                        __size_of_E_TOG 000E  
                            ?_isdigit 0001                     __size_of_turnLeft 0052  
                       ??_setMotorPWM 0034                             _initTimer 1934  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0067                           turnRight@mR 0069  
                            i2u312_47 17B2                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3896 01FA  
                         _grabRightIR 14A8                 ScanWithRange@LeftFlag 00AA  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0E1C  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                            ?_initTimer 0001  
                           _turnRight 15EA                        ScanIR@MoveTime 0073  
                      ScanIR@MoveType 0075                      ScanWithRange@buf 0077  
                 __end_of_setMotorPWM 0F56                              __Hrparam 0000  
                    __size_of_SendLCD 0030                              __Lrparam 0000  
               __end_of_fullSpeedBack 1760                      __size_of_SetLine 0030  
                  __end_of_grabLeftIR 158C                      __size_of___awdiv 0084  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                          _ANSEL0bits 000FB8                 ?_InterruptHandlerHigh 0001  
                   ??i2_delay_tenth_s 0001                            sprintf@val 0067  
                    __size_of_initLCD 00BC                      __size_of_isdigit 001E  
                     ___lwdiv@divisor 0026                       ___lwdiv@counter 002A  
                          ?_turnRight 0067                              __ptext10 15EA  
                            __ptext11 163C                              __ptext20 18B2  
                            __ptext12 1428                              __ptext21 16E0  
                            __ptext13 1760                              __ptext22 168E  
                            __ptext14 0F56                              __ptext23 14A8  
                            __ptext15 1286                              __ptext32 1798  
                            __ptext24 151A                              __ptext16 0E1C  
                            __ptext25 1802                              __ptext17 13A4  
                            __ptext26 158C                              __ptext18 0872  
                            __ptext27 1832                              __ptext19 18FA  
                            __ptext28 1050                              __ptext29 1946  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                            _initRFID 1918             ScanWithRange@SensorResult 00A6  
                      turnRight@power 006B                         __size_of_main 0522  
                  main@DirectionFound 00B3                         turnLeft@power 006B  
                       __size_of_stop 0094                            turnLeft@mL 0067  
                          turnLeft@mR 0069                 __size_of_VerifySignal 00B4  
                            int$flags 003C                              main@Move 00B4  
                 _InterruptHandlerLow 0018                            _LCD_String 158C  
                            _turnLeft 163C                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                           ??_initTimer 0024  
                            isdigit@c 0026                           _setMotorPWM 0E1C  
                        _VerifySignal 11D2                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0064  
                           sprintf@sp 0030                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 0024                      ___lwmod@dividend 002B  
                    ??_fullSpeedAhead 0039                            _OSCCONbits 000FD3  
ScanWithRange@DirectionFoundThreshold 00A4                ??_InterruptHandlerHigh 0005  
                            sprintf@c 006C                              sprintf@f 0032  
                     ___lwmod@divisor 002D                       ___lwmod@counter 002F  
                         ??_turnRight 003A                 ??_InterruptHandlerLow 0013  
                      ??_enableSensor 0025                      i2delay_tenth_s@i 0003  
