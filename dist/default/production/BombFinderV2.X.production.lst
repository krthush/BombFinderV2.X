

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 20 13:05:04 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F4331 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	smallconst
    88  000300                     __psmallconst:
    89                           	opt stack 0
    90  000300  00                 	db	0
    91  000301                     _dpowers:
    92                           	opt stack 0
    93  000301  0001               	dw	1
    94  000303  000A               	dw	10
    95  000305  0064               	dw	100
    96  000307  03E8               	dw	1000
    97  000309  2710               	dw	10000
    98  00030B                     __end_of_dpowers:
    99                           	opt stack 0
   100  0000                     _OSCCONbits	set	4051
   101  0000                     _OSCCON	set	4051
   102  0000                     _PIE1bits	set	3997
   103  0000                     _IPR1bits	set	3999
   104  0000                     _RCONbits	set	4048
   105  0000                     _RCREG	set	4014
   106  0000                     _PIR1bits	set	3998
   107  0000                     _RCSTAbits	set	4011
   108  0000                     _TXSTAbits	set	4012
   109  0000                     _BAUDCONbits	set	4010
   110  0000                     _SPBRGH	set	4016
   111  0000                     _SPBRG	set	4015
   112  0000                     _TRISC	set	3988
   113  0000                     _TMR0H	set	4055
   114  0000                     _TMR0L	set	4054
   115  0000                     _INTCONbits	set	4082
   116  0000                     _T0CONbits	set	4053
   117  0000                     _TRISDbits	set	3989
   118  0000                     _TRISCbits	set	3988
   119  0000                     _LATDbits	set	3980
   120  0000                     _LATCbits	set	3979
   121  0000                     _LATEbits	set	3981
   122  0000                     _CAP2BUFL	set	3942
   123  0000                     _CAP2BUFH	set	3943
   124  0000                     _CAP1BUFL	set	3944
   125  0000                     _CAP1BUFH	set	3945
   126  0000                     _T5CON	set	4023
   127  0000                     _TRISEbits	set	3990
   128  0000                     _CAP2CON	set	3938
   129  0000                     _CAP1CON	set	3939
   130  0000                     _ANSEL0bits	set	4024
   131  0000                     _TRISAbits	set	3986
   132  0000                     _LATAbits	set	3977
   133  0000                     _LATB	set	3978
   134  0000                     _LATBbits	set	3978
   135  0000                     _TRISBbits	set	3987
   136  0000                     _PTPERH	set	3962
   137  0000                     _PTPERL	set	3963
   138  0000                     _PWMCON1	set	3950
   139  0000                     _PWMCON0	set	3951
   140  0000                     _PTCON1	set	3966
   141  0000                     _PTCON0	set	3967
   142  0000                     _PDC1H	set	3958
   143  0000                     _PDC1L	set	3959
   144  0000                     _PDC0H	set	3960
   145  0000                     _PDC0L	set	3961
   146  00030B                     STR_6:
   147  00030B  20                 	db	32
   148  00030C  20                 	db	32
   149  00030D  20                 	db	32
   150  00030E  20                 	db	32
   151  00030F  20                 	db	32
   152  000310  20                 	db	32
   153  000311  25                 	db	37
   154  000312  30                 	db	48	;'0'
   155  000313  34                 	db	52	;'4'
   156  000314  64                 	db	100	;'d'
   157  000315  2C                 	db	44
   158  000316  20                 	db	32
   159  000317  25                 	db	37
   160  000318  30                 	db	48	;'0'
   161  000319  34                 	db	52	;'4'
   162  00031A  64                 	db	100	;'d'
   163  00031B  00                 	db	0
   164  00031C                     STR_5:
   165  00031C  20                 	db	32
   166  00031D  20                 	db	32
   167  00031E  20                 	db	32
   168  00031F  20                 	db	32
   169  000320  20                 	db	32
   170  000321  20                 	db	32
   171  000322  49                 	db	73	;'I'
   172  000323  6E                 	db	110	;'n'
   173  000324  65                 	db	101	;'e'
   174  000325  72                 	db	114	;'r'
   175  000326  74                 	db	116	;'t'
   176  000327  20                 	db	32
   177  000328  4D                 	db	77	;'M'
   178  000329  6F                 	db	111	;'o'
   179  00032A  64                 	db	100	;'d'
   180  00032B  65                 	db	101	;'e'
   181  00032C  00                 	db	0
   182  00032D                     STR_1:
   183  00032D  20                 	db	32
   184  00032E  20                 	db	32
   185  00032F  20                 	db	32
   186  000330  20                 	db	32
   187  000331  20                 	db	32
   188  000332  53                 	db	83	;'S'
   189  000333  63                 	db	99	;'c'
   190  000334  61                 	db	97	;'a'
   191  000335  6E                 	db	110	;'n'
   192  000336  49                 	db	73	;'I'
   193  000337  52                 	db	82	;'R'
   194  000338  00                 	db	0
   195  000339                     STR_8:
   196  000339  47                 	db	71	;'G'
   197  00033A  6F                 	db	111	;'o'
   198  00033B  69                 	db	105	;'i'
   199  00033C  6E                 	db	110	;'n'
   200  00033D  67                 	db	103	;'g'
   201  00033E  20                 	db	32
   202  00033F  48                 	db	72	;'H'
   203  000340  6F                 	db	111	;'o'
   204  000341  6D                 	db	109	;'m'
   205  000342  65                 	db	101	;'e'
   206  000343  00                 	db	0
   207  000344                     STR_7:
   208  000344  53                 	db	83	;'S'
   209  000345  65                 	db	101	;'e'
   210  000346  61                 	db	97	;'a'
   211  000347  72                 	db	114	;'r'
   212  000348  63                 	db	99	;'c'
   213  000349  68                 	db	104	;'h'
   214  00034A  69                 	db	105	;'i'
   215  00034B  6E                 	db	110	;'n'
   216  00034C  67                 	db	103	;'g'
   217  00034D  00                 	db	0
   218  0000                     
   219                           ; #config settings
   220  00034E  00                 	db	0	; dummy byte at the end
   221  0000                     
   222                           	psect	cinit
   223  001B0E                     __pcinit:
   224                           	opt stack 0
   225  001B0E                     start_initialization:
   226                           	opt stack 0
   227  001B0E                     __initialization:
   228                           	opt stack 0
   229                           
   230                           ; Clear objects allocated to BANK2 (150 bytes)
   231  001B0E  EE02  F000         	lfsr	0,__pbssBANK2
   232  001B12  0E96               	movlw	150
   233  001B14                     clear_0:
   234  001B14  6AEE               	clrf	postinc0,c
   235  001B16  06E8               	decf	wreg,f,c
   236  001B18  E1FD               	bnz	clear_0
   237                           
   238                           ; Clear objects allocated to BANK1 (23 bytes)
   239  001B1A  EE01  F0E3         	lfsr	0,__pbssBANK1
   240  001B1E  0E17               	movlw	23
   241  001B20                     clear_1:
   242  001B20  6AEE               	clrf	postinc0,c
   243  001B22  06E8               	decf	wreg,f,c
   244  001B24  E1FD               	bnz	clear_1
   245                           
   246                           ; Clear objects allocated to BANK0 (8 bytes)
   247  001B26  EE00  F0CB         	lfsr	0,__pbssBANK0
   248  001B2A  0E08               	movlw	8
   249  001B2C                     clear_2:
   250  001B2C  6AEE               	clrf	postinc0,c
   251  001B2E  06E8               	decf	wreg,f,c
   252  001B30  E1FD               	bnz	clear_2
   253                           
   254                           ; Clear objects allocated to COMRAM (2 bytes)
   255  001B32  6A33               	clrf	(__pbssCOMRAM+1)& (0+255),c
   256  001B34  6A32               	clrf	__pbssCOMRAM& (0+255),c
   257  001B36                     end_of_initialization:
   258                           	opt stack 0
   259  001B36                     __end_of__initialization:
   260                           	opt stack 0
   261  001B36  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   262  001B38  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   263  001B3A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   264  001B3C  6EF8               	movwf	tblptru,c
   265  001B3E  0100               	movlb	0
   266  001B40  EFA8  F001         	goto	_main	;jump to C main() function
   267                           tblptru	equ	0xFF8
   268                           postinc0	equ	0xFEE
   269                           wreg	equ	0xFE8
   270                           
   271                           	psect	bssCOMRAM
   272  000032                     __pbssCOMRAM:
   273                           	opt stack 0
   274  000032                     _mode:
   275                           	opt stack 0
   276  000032                     	ds	1
   277  000033                     _i:
   278                           	opt stack 0
   279  000033                     	ds	1
   280                           tblptru	equ	0xFF8
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284                           	psect	bssBANK0
   285  0000CB                     __pbssBANK0:
   286                           	opt stack 0
   287  0000CB                     ScanWithRange@F3555:
   288                           	opt stack 0
   289  0000CB                     	ds	4
   290  0000CF                     ScanIR@F3541:
   291                           	opt stack 0
   292  0000CF                     	ds	4
   293                           tblptru	equ	0xFF8
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssBANK1
   298  0001E3                     __pbssBANK1:
   299                           	opt stack 0
   300  0001E3                     main@F3557:
   301                           	opt stack 0
   302  0001E3                     	ds	4
   303  0001E7                     _ReceivedString:
   304                           	opt stack 0
   305  0001E7                     	ds	16
   306  0001F7                     _millis:
   307                           	opt stack 0
   308  0001F7                     	ds	2
   309  0001F9                     _RFID_Read:
   310                           	opt stack 0
   311  0001F9                     	ds	1
   312                           tblptru	equ	0xFF8
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           
   316                           	psect	bssBANK2
   317  000200                     __pbssBANK2:
   318                           	opt stack 0
   319  000200                     main@F3552:
   320                           	opt stack 0
   321  000200                     	ds	100
   322  000264                     main@F3554:
   323                           	opt stack 0
   324  000264                     	ds	50
   325                           tblptru	equ	0xFF8
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	cstackBANK1
   330  000100                     __pcstackBANK1:
   331                           	opt stack 0
   332  000100                     main@buf:
   333                           	opt stack 0
   334                           
   335                           ; 40 bytes @ 0x0
   336  000100                     	ds	40
   337  000128                     main@MoveType:
   338                           	opt stack 0
   339                           
   340                           ; 50 bytes @ 0x28
   341  000128                     	ds	50
   342  00015A                     main@MoveTime:
   343                           	opt stack 0
   344                           
   345                           ; 100 bytes @ 0x5A
   346  00015A                     	ds	100
   347  0001BE                     main@Message:
   348                           	opt stack 0
   349                           
   350                           ; 10 bytes @ 0xBE
   351  0001BE                     	ds	10
   352  0001C8                     main@ScanAngle:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0xC8
   356  0001C8                     	ds	1
   357  0001C9                     main@SensorResult:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0xC9
   361  0001C9                     	ds	4
   362  0001CD                     main@MotorPower:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0xCD
   366  0001CD                     	ds	1
   367  0001CE                     main@DirectionFound:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0xCE
   371  0001CE                     	ds	1
   372  0001CF                     main@i:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0xCF
   376  0001CF                     	ds	1
   377  0001D0                     main@Move:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0xD0
   381  0001D0                     	ds	1
   382  0001D1                     main@mL:
   383                           	opt stack 0
   384                           
   385                           ; 9 bytes @ 0xD1
   386  0001D1                     	ds	9
   387  0001DA                     main@mR:
   388                           	opt stack 0
   389                           
   390                           ; 9 bytes @ 0xDA
   391  0001DA                     	ds	9
   392                           tblptru	equ	0xFF8
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           
   396                           	psect	cstackBANK0
   397  000060                     __pcstackBANK0:
   398                           	opt stack 0
   399  000060                     ??_initLCD:
   400  000060                     ?___awdiv:
   401                           	opt stack 0
   402  000060                     SetLine@line:
   403                           	opt stack 0
   404  000060                     ___lwdiv@counter:
   405                           	opt stack 0
   406  000060                     grabRightIR@IR_signal:
   407                           	opt stack 0
   408  000060                     grabLeftIR@IR_signal:
   409                           	opt stack 0
   410  000060                     LCD_String@string:
   411                           	opt stack 0
   412  000060                     ___awdiv@dividend:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x0
   416  000060                     	ds	1
   417  000061                     ___lwdiv@quotient:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x1
   421  000061                     	ds	1
   422  000062                     grabRightIR@i:
   423                           	opt stack 0
   424  000062                     grabLeftIR@i:
   425                           	opt stack 0
   426  000062                     ___awdiv@divisor:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x2
   430  000062                     	ds	1
   431  000063                     ?___lwmod:
   432                           	opt stack 0
   433  000063                     ___lwmod@dividend:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x3
   437  000063                     	ds	1
   438  000064                     ___awdiv@counter:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x4
   442  000064                     	ds	1
   443  000065                     ___awdiv@sign:
   444                           	opt stack 0
   445  000065                     ___lwmod@divisor:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x5
   449  000065                     	ds	1
   450  000066                     ___awdiv@quotient:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x6
   454  000066                     	ds	1
   455  000067                     ?_sprintf:
   456                           	opt stack 0
   457  000067                     sprintf@sp:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x7
   461  000067                     	ds	1
   462  000068                     setMotorPWM@m:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x8
   466  000068                     	ds	1
   467  000069                     sprintf@f:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x9
   471  000069                     	ds	1
   472  00006A                     ??_setMotorPWM:
   473                           
   474                           ; 1 bytes @ 0xA
   475  00006A                     	ds	5
   476  00006F                     ??_sprintf:
   477  00006F                     setMotorPWM@PWMduty:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0xF
   481  00006F                     	ds	2
   482  000071                     stop@mL:
   483                           	opt stack 0
   484  000071                     fullSpeed@mL:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x11
   488  000071                     	ds	2
   489  000073                     stop@mR:
   490                           	opt stack 0
   491  000073                     fullSpeed@mR:
   492                           	opt stack 0
   493  000073                     sprintf@ap:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x13
   497  000073                     	ds	2
   498  000075                     fullSpeed@power:
   499                           	opt stack 0
   500  000075                     sprintf@prec:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x15
   504  000075                     	ds	1
   505  000076                     sprintf@val:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x16
   509  000076                     	ds	1
   510  000077                     turnLeft@mL:
   511                           	opt stack 0
   512  000077                     turnRight@mL:
   513                           	opt stack 0
   514  000077                     fullSpeedBack@mL:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x17
   518  000077                     	ds	1
   519  000078                     sprintf@flag:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x18
   523  000078                     	ds	1
   524  000079                     turnLeft@mR:
   525                           	opt stack 0
   526  000079                     turnRight@mR:
   527                           	opt stack 0
   528  000079                     fullSpeedBack@mR:
   529                           	opt stack 0
   530  000079                     sprintf@width:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x19
   534  000079                     	ds	2
   535  00007B                     turnLeft@power:
   536                           	opt stack 0
   537  00007B                     turnRight@power:
   538                           	opt stack 0
   539  00007B                     fullSpeedBack@power:
   540                           	opt stack 0
   541  00007B                     sprintf@c:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x1B
   545  00007B                     	ds	1
   546  00007C                     ScanIR@mL:
   547                           	opt stack 0
   548  00007C                     ScanWithRange@mL:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x1C
   552  00007C                     	ds	2
   553  00007E                     ScanIR@mR:
   554                           	opt stack 0
   555  00007E                     ScanWithRange@mR:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x1E
   559  00007E                     	ds	2
   560  000080                     ??_ScanIR:
   561  000080                     ScanWithRange@loops:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x20
   565  000080                     	ds	1
   566  000081                     ScanIR@buf:
   567                           	opt stack 0
   568                           
   569                           ; 40 bytes @ 0x21
   570  000081                     	ds	1
   571  000082                     ScanWithRange@MoveTime:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x22
   575  000082                     	ds	2
   576  000084                     ScanWithRange@Move:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x24
   580  000084                     	ds	2
   581  000086                     ScanWithRange@MoveType:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x26
   585  000086                     	ds	2
   586  000088                     ScanWithRange@RFID_Read:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x28
   590  000088                     	ds	2
   591  00008A                     ScanWithRange@millis:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x2A
   595  00008A                     	ds	2
   596  00008C                     ??_ScanWithRange:
   597                           
   598                           ; 1 bytes @ 0x2C
   599  00008C                     	ds	4
   600  000090                     ScanWithRange@buf:
   601                           	opt stack 0
   602                           
   603                           ; 40 bytes @ 0x30
   604  000090                     	ds	25
   605  0000A9                     ScanIR@DirectionMoveThreshold:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x49
   609  0000A9                     	ds	2
   610  0000AB                     ScanIR@SensorResult:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x4B
   614  0000AB                     	ds	13
   615  0000B8                     ScanWithRange@i:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x58
   619  0000B8                     	ds	2
   620  0000BA                     ScanWithRange@DirectionFoundThreshold:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x5A
   624  0000BA                     	ds	2
   625  0000BC                     ScanWithRange@MotorPower:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x5C
   629  0000BC                     	ds	1
   630  0000BD                     ScanWithRange@MiniLeftFlick:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x5D
   634  0000BD                     	ds	1
   635  0000BE                     ScanWithRange@LeftFlag:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x5E
   639  0000BE                     	ds	2
   640  0000C0                     ScanWithRange@TimeAboveThreshold:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x60
   644  0000C0                     	ds	2
   645  0000C2                     ScanWithRange@SensorResult:
   646                           	opt stack 0
   647                           
   648                           ; 4 bytes @ 0x62
   649  0000C2                     	ds	4
   650  0000C6                     ScanWithRange@LeftFlick:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x66
   654  0000C6                     	ds	1
   655  0000C7                     ScanWithRange@RightFlag:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x67
   659  0000C7                     	ds	2
   660  0000C9                     ??_main:
   661                           
   662                           ; 1 bytes @ 0x69
   663  0000C9                     	ds	2
   664                           tblptru	equ	0xFF8
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           
   668                           	psect	cstackCOMRAM
   669  000001                     __pcstackCOMRAM:
   670                           	opt stack 0
   671  000001                     ??i2_delay_tenth_s:
   672                           
   673                           ; 1 bytes @ 0x0
   674  000001                     	ds	1
   675  000002                     i2delay_tenth_s@tenth_seconds:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x1
   679  000002                     	ds	1
   680  000003                     i2delay_tenth_s@i:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x2
   684  000003                     	ds	2
   685  000005                     ??_InterruptHandlerHigh:
   686                           
   687                           ; 1 bytes @ 0x4
   688  000005                     	ds	18
   689  000017                     ??_InterruptHandlerLow:
   690                           
   691                           ; 1 bytes @ 0x16
   692  000017                     	ds	21
   693  00002C                     ??_isdigit:
   694  00002C                     ??_LCDout:
   695  00002C                     ??_delay_tenth_s:
   696  00002C                     ?_grabRightIR:
   697                           	opt stack 0
   698  00002C                     ?_grabLeftIR:
   699                           	opt stack 0
   700  00002C                     ?___wmul:
   701                           	opt stack 0
   702  00002C                     ?___lwdiv:
   703                           	opt stack 0
   704  00002C                     enableSensor@status:
   705                           	opt stack 0
   706  00002C                     VerifySignal@RecievedString:
   707                           	opt stack 0
   708  00002C                     ___wmul@multiplier:
   709                           	opt stack 0
   710  00002C                     ___lwdiv@dividend:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x2B
   714  00002C                     	ds	1
   715  00002D                     enableSensor@sensor:
   716                           	opt stack 0
   717  00002D                     delay_tenth_s@tenth_seconds:
   718                           	opt stack 0
   719  00002D                     _isdigit$1773:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x2C
   723  00002D                     	ds	1
   724  00002E                     ??_grabRightIR:
   725  00002E                     ??_grabLeftIR:
   726  00002E                     isdigit@c:
   727                           	opt stack 0
   728  00002E                     delay_tenth_s@i:
   729                           	opt stack 0
   730  00002E                     VerifySignal@hexByte:
   731                           	opt stack 0
   732  00002E                     ___wmul@multiplicand:
   733                           	opt stack 0
   734  00002E                     ___lwdiv@divisor:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x2D
   738  00002E                     	ds	1
   739  00002F                     LCDout@number:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x2E
   743  00002F                     	ds	1
   744  000030                     SendLCD@type:
   745                           	opt stack 0
   746  000030                     VerifySignal@checksum:
   747                           	opt stack 0
   748  000030                     ___lwmod@counter:
   749                           	opt stack 0
   750  000030                     ___wmul@product:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x2F
   754  000030                     	ds	1
   755  000031                     SendLCD@Byte:
   756                           	opt stack 0
   757  000031                     VerifySignal@i:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x30
   761  000031                     	ds	1
   762  000032                     tblptru	equ	0xFF8
   763                           postinc0	equ	0xFEE
   764                           wreg	equ	0xFE8
   765                           
   766                           ; 1 bytes @ 0x31
   767 ;;
   768 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   769 ;;
   770 ;; *************** function _main *****************
   771 ;; Defined at:
   772 ;;		line 55 in file "main.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  MoveTime      100   90[BANK1 ] int [50]
   777 ;;  MoveType       50   40[BANK1 ] unsigned char [50]
   778 ;;  buf            40    0[BANK1 ] unsigned char [40]
   779 ;;  Message        10  190[BANK1 ] unsigned char [10]
   780 ;;  mR              9  218[BANK1 ] struct DC_motor
   781 ;;  mL              9  209[BANK1 ] struct DC_motor
   782 ;;  SensorResult    4  201[BANK1 ] unsigned int [2]
   783 ;;  Move            1  208[BANK1 ] char 
   784 ;;  i               1  207[BANK1 ] unsigned char 
   785 ;;  DirectionFou    1  206[BANK1 ] char 
   786 ;;  MotorPower      1  205[BANK1 ] const unsigned char 
   787 ;;  ScanAngle       1  200[BANK1 ] unsigned char 
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   797 ;;      Params:         0       0       0       0
   798 ;;      Locals:         0       0     227       0
   799 ;;      Temps:          0       2       0       0
   800 ;;      Totals:         0       2     227       0
   801 ;;Total ram usage:      229 bytes
   802 ;; Hardware stack levels required when called:    8
   803 ;; This function calls:
   804 ;;		_LCD_String
   805 ;;		_ScanIR
   806 ;;		_ScanWithRange
   807 ;;		_SendLCD
   808 ;;		_SetLine
   809 ;;		_VerifySignal
   810 ;;		_delay_tenth_s
   811 ;;		_enableSensor
   812 ;;		_fullSpeed
   813 ;;		_fullSpeedBack
   814 ;;		_grabLeftIR
   815 ;;		_grabRightIR
   816 ;;		_initIR
   817 ;;		_initLCD
   818 ;;		_initMotorPWM
   819 ;;		_initRFID
   820 ;;		_initTimer
   821 ;;		_sprintf
   822 ;;		_stop
   823 ;;		_turnLeft
   824 ;;		_turnRight
   825 ;; This function is called by:
   826 ;;		Startup code after reset
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text0
   831  000350                     __ptext0:
   832                           	opt stack 0
   833  000350                     _main:
   834                           	opt stack 23
   835                           
   836                           ;main.c: 58: unsigned char Message[10];
   837                           ;main.c: 59: unsigned char i=0;
   838                           
   839                           ;incstack = 0
   840  000350  0E00               	movlw	0
   841  000352  0101               	movlb	1	; () banked
   842  000354  6FCF               	movwf	main@i& (0+255),b
   843                           
   844                           ;main.c: 60: signed char DirectionFound=0;
   845  000356  0E00               	movlw	0
   846  000358  6FCE               	movwf	main@DirectionFound& (0+255),b
   847                           
   848                           ; BSR set to: 1
   849                           ;main.c: 61: signed int MoveTime[50] = { 0 };
   850  00035A  EE22  F000         	lfsr	2,main@F3552
   851  00035E  EE11  F05A         	lfsr	1,main@MoveTime
   852  000362  0E63               	movlw	99
   853  000364                     u2971:
   854  000364  CFDB FFE3          	movff	plusw2,plusw1
   855  000368  06E8               	decf	wreg,f,c
   856  00036A  E2FC               	bc	u2971
   857                           
   858                           ; BSR set to: 1
   859                           ;main.c: 65: unsigned char MoveType[50] = { 0 };
   860  00036C  EE22  F064         	lfsr	2,main@F3554
   861  000370  EE11  F028         	lfsr	1,main@MoveType
   862  000374  0E31               	movlw	49
   863  000376                     u2981:
   864  000376  CFDB FFE3          	movff	plusw2,plusw1
   865  00037A  06E8               	decf	wreg,f,c
   866  00037C  E2FC               	bc	u2981
   867                           
   868                           ;main.c: 68: signed char Move=0;
   869  00037E  0E00               	movlw	0
   870  000380  6FD0               	movwf	main@Move& (0+255),b
   871                           
   872                           ; BSR set to: 1
   873                           ;main.c: 69: unsigned int SensorResult[2]={0,0};
   874  000382  C1E3  F1C9         	movff	main@F3557,main@SensorResult
   875  000386  C1E4  F1CA         	movff	main@F3557+1,main@SensorResult+1
   876  00038A  C1E5  F1CB         	movff	main@F3557+2,main@SensorResult+2
   877  00038E  C1E6  F1CC         	movff	main@F3557+3,main@SensorResult+3
   878                           
   879                           ;main.c: 70: char buf[40];
   880                           ;main.c: 72: unsigned char ScanAngle=60;
   881  000392  0E3C               	movlw	60
   882  000394  6FC8               	movwf	main@ScanAngle& (0+255),b
   883                           
   884                           ;main.c: 79: const unsigned char MotorPower=40;
   885  000396  0E28               	movlw	40
   886  000398  6FCD               	movwf	main@MotorPower& (0+255),b
   887                           
   888                           ; BSR set to: 1
   889                           ;main.c: 83: INTCONbits.GIEH=1;
   890  00039A  8EF2               	bsf	intcon,7,c	;volatile
   891                           
   892                           ; BSR set to: 1
   893                           ;main.c: 84: INTCONbits.GIEL=1;
   894  00039C  8CF2               	bsf	intcon,6,c	;volatile
   895                           
   896                           ; BSR set to: 1
   897                           ;main.c: 85: INTCONbits.PEIE=1;
   898  00039E  8CF2               	bsf	intcon,6,c	;volatile
   899                           
   900                           ; BSR set to: 1
   901                           ;main.c: 86: RCONbits.IPEN=1;
   902  0003A0  8ED0               	bsf	4048,7,c	;volatile
   903                           
   904                           ; BSR set to: 1
   905                           ;main.c: 89: IPR1bits.RCIP=0;
   906  0003A2  9A9F               	bcf	3999,5,c	;volatile
   907                           
   908                           ; BSR set to: 1
   909                           ;main.c: 90: PIE1bits.RCIE=1;
   910  0003A4  8A9D               	bsf	3997,5,c	;volatile
   911                           
   912                           ; BSR set to: 1
   913                           ;main.c: 93: TRISCbits.RC3=1;
   914  0003A6  8694               	bsf	3988,3,c	;volatile
   915                           
   916                           ; BSR set to: 1
   917                           ;main.c: 94: INTCONbits.INT0IE=1;
   918  0003A8  88F2               	bsf	intcon,4,c	;volatile
   919                           
   920                           ; BSR set to: 1
   921                           ;main.c: 97: PIR1bits.RC1IF=0;
   922  0003AA  9A9E               	bcf	3998,5,c	;volatile
   923                           
   924                           ; BSR set to: 1
   925                           ;main.c: 98: INTCONbits.INT0IF=0;
   926  0003AC  92F2               	bcf	intcon,1,c	;volatile
   927                           
   928                           ;main.c: 101: struct DC_motor mL, mR;
   929                           ;main.c: 102: mL.power=0;
   930  0003AE  0E00               	movlw	0
   931  0003B0  6FD1               	movwf	main@mL& (0+255),b
   932                           
   933                           ;main.c: 103: mL.direction=1;
   934  0003B2  0E01               	movlw	1
   935  0003B4  6FD2               	movwf	(main@mL+1)& (0+255),b
   936                           
   937                           ; BSR set to: 1
   938                           ;main.c: 104: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   939  0003B6  0E79               	movlw	121
   940  0003B8  6FD3               	movwf	(main@mL+2)& (0+255),b
   941  0003BA  0E0F               	movlw	15
   942  0003BC  6FD4               	movwf	(main@mL+3)& (0+255),b
   943                           
   944                           ; BSR set to: 1
   945                           ;main.c: 105: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   946  0003BE  0E78               	movlw	120
   947  0003C0  6FD5               	movwf	(main@mL+4)& (0+255),b
   948  0003C2  0E0F               	movlw	15
   949  0003C4  6FD6               	movwf	(main@mL+5)& (0+255),b
   950                           
   951                           ;main.c: 106: mL.dir_pin=0;
   952  0003C6  0E00               	movlw	0
   953  0003C8  6FD7               	movwf	(main@mL+6)& (0+255),b
   954                           
   955                           ;main.c: 107: mL.PWMperiod=199;
   956  0003CA  0E00               	movlw	0
   957  0003CC  6FD9               	movwf	(main@mL+8)& (0+255),b
   958  0003CE  0EC7               	movlw	199
   959  0003D0  6FD8               	movwf	(main@mL+7)& (0+255),b
   960                           
   961                           ;main.c: 109: mR.power=0;
   962  0003D2  0E00               	movlw	0
   963  0003D4  6FDA               	movwf	main@mR& (0+255),b
   964                           
   965                           ;main.c: 110: mR.direction=1;
   966  0003D6  0E01               	movlw	1
   967  0003D8  6FDB               	movwf	(main@mR+1)& (0+255),b
   968                           
   969                           ; BSR set to: 1
   970                           ;main.c: 111: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   971  0003DA  0E77               	movlw	119
   972  0003DC  6FDC               	movwf	(main@mR+2)& (0+255),b
   973  0003DE  0E0F               	movlw	15
   974  0003E0  6FDD               	movwf	(main@mR+3)& (0+255),b
   975                           
   976                           ; BSR set to: 1
   977                           ;main.c: 112: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   978  0003E2  0E76               	movlw	118
   979  0003E4  6FDE               	movwf	(main@mR+4)& (0+255),b
   980  0003E6  0E0F               	movlw	15
   981  0003E8  6FDF               	movwf	(main@mR+5)& (0+255),b
   982                           
   983                           ;main.c: 113: mR.dir_pin=2;
   984  0003EA  0E02               	movlw	2
   985  0003EC  6FE0               	movwf	(main@mR+6)& (0+255),b
   986                           
   987                           ;main.c: 114: mR.PWMperiod=199;
   988  0003EE  0E00               	movlw	0
   989  0003F0  6FE2               	movwf	(main@mR+8)& (0+255),b
   990  0003F2  0EC7               	movlw	199
   991  0003F4  6FE1               	movwf	(main@mR+7)& (0+255),b
   992                           
   993                           ;main.c: 116: OSCCON = 0b1110010;
   994  0003F6  0E72               	movlw	114
   995  0003F8  6ED3               	movwf	4051,c	;volatile
   996  0003FA                     
   997                           ; BSR set to: 1
   998  0003FA  B4D3               	btfsc	4051,2,c	;volatile
   999  0003FC  D300               	goto	l3705
  1000  0003FE  D7FD               	goto	l389
  1001  000400                     
  1002                           ;main.c: 128: stop(&mL, &mR);
  1003  000400  0ED1               	movlw	low main@mL
  1004  000402  0100               	movlb	0	; () banked
  1005  000404  6F71               	movwf	stop@mL& (0+255),b
  1006  000406  0E01               	movlw	high main@mL
  1007  000408  6F72               	movwf	(stop@mL+1)& (0+255),b
  1008  00040A  0EDA               	movlw	low main@mR
  1009  00040C  6F73               	movwf	stop@mR& (0+255),b
  1010  00040E  0E01               	movlw	high main@mR
  1011  000410  6F74               	movwf	(stop@mR+1)& (0+255),b
  1012  000412  EC1C  F00B         	call	_stop	;wreg free
  1013                           
  1014                           ;main.c: 131: RFID_Read=0;
  1015  000416  0E00               	movlw	0
  1016  000418  0101               	movlb	1	; () banked
  1017  00041A  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
  1018                           
  1019                           ; BSR set to: 1
  1020                           ;main.c: 132: Move=0;
  1021  00041C  0E00               	movlw	0
  1022  00041E  6FD0               	movwf	main@Move& (0+255),b
  1023                           
  1024                           ; BSR set to: 1
  1025                           ;main.c: 135: SensorResult[0]=grabLeftIR();
  1026  000420  EC21  F00C         	call	_grabLeftIR	;wreg free
  1027  000424  C02C  F1C9         	movff	?_grabLeftIR,main@SensorResult
  1028  000428  C02D  F1CA         	movff	?_grabLeftIR+1,main@SensorResult+1
  1029                           
  1030                           ;main.c: 136: SensorResult[1]=grabRightIR();
  1031  00042C  ECE6  F00B         	call	_grabRightIR	;wreg free
  1032  000430  C02C  F1CB         	movff	?_grabRightIR,main@SensorResult+2
  1033  000434  C02D  F1CC         	movff	?_grabRightIR+1,main@SensorResult+3
  1034                           
  1035                           ;main.c: 140: CAP1BUFH=0;
  1036  000438  0E00               	movlw	0
  1037  00043A  6E69               	movwf	3945,c	;volatile
  1038                           
  1039                           ;main.c: 141: CAP1BUFL=0;
  1040  00043C  0E00               	movlw	0
  1041  00043E  6E68               	movwf	3944,c	;volatile
  1042                           
  1043                           ;main.c: 142: CAP2BUFH=0;
  1044  000440  0E00               	movlw	0
  1045  000442  6E67               	movwf	3943,c	;volatile
  1046                           
  1047                           ;main.c: 143: CAP2BUFL=0;
  1048  000444  0E00               	movlw	0
  1049  000446  6E66               	movwf	3942,c	;volatile
  1050                           
  1051                           ;main.c: 146: SendLCD(0b00000001,0);
  1052  000448  0E00               	movlw	0
  1053  00044A  6E30               	movwf	SendLCD@type,c
  1054  00044C  0E01               	movlw	1
  1055  00044E  ECBD  F00D         	call	_SendLCD
  1056                           
  1057                           ;main.c: 147: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1058  000452  0E21               	movlw	33
  1059  000454                     u3257:
  1060  000454  2EE8               	decfsz	wreg,f,c
  1061  000456  D7FE               	bra	u3257
  1062  000458  F000               	nop	
  1063                           
  1064                           ;main.c: 148: SendLCD(0b00000010,0);
  1065  00045A  0E00               	movlw	0
  1066  00045C  6E30               	movwf	SendLCD@type,c
  1067  00045E  0E02               	movlw	2
  1068  000460  ECBD  F00D         	call	_SendLCD
  1069                           
  1070                           ;main.c: 149: _delay((unsigned long)((2)*(8000000/4000.0)));
  1071  000464  0E06               	movlw	6
  1072  000466  0100               	movlb	0	; () banked
  1073  000468  6FC9               	movwf	??_main& (0+255),b
  1074  00046A  0E30               	movlw	48
  1075  00046C                     u3267:
  1076  00046C  2EE8               	decfsz	wreg,f,c
  1077  00046E  D7FE               	bra	u3267
  1078  000470  2FC9               	decfsz	??_main& (0+255),f,b
  1079  000472  D7FC               	bra	u3267
  1080  000474  F000               	nop	
  1081                           
  1082                           ;main.c: 150: SetLine(1);
  1083  000476  0E01               	movlw	1
  1084  000478  ECA2  F00D         	call	_SetLine
  1085                           
  1086                           ;main.c: 151: if (Message[0]==0) {
  1087  00047C  0101               	movlb	1	; () banked
  1088  00047E  51BE               	movf	main@Message& (0+255),w,b
  1089  000480  A4D8               	btfss	status,2,c
  1090  000482  D008               	goto	l394
  1091                           
  1092                           ; BSR set to: 1
  1093                           ;main.c: 152: LCD_String("      Inert Mode");
  1094  000484  0E1C               	movlw	low STR_5
  1095  000486  0100               	movlb	0	; () banked
  1096  000488  6F60               	movwf	LCD_String@string& (0+255),b
  1097  00048A  0E03               	movlw	high STR_5
  1098  00048C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1099  00048E  EC5C  F00C         	call	_LCD_String	;wreg free
  1100                           
  1101                           ;main.c: 153: } else {
  1102  000492  D007               	goto	l395
  1103  000494                     l394:
  1104                           
  1105                           ;main.c: 154: LCD_String(Message);
  1106  000494  0EBE               	movlw	low main@Message
  1107  000496  0100               	movlb	0	; () banked
  1108  000498  6F60               	movwf	LCD_String@string& (0+255),b
  1109  00049A  0E01               	movlw	high main@Message
  1110  00049C  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1111  00049E  EC5C  F00C         	call	_LCD_String	;wreg free
  1112  0004A2                     l395:
  1113                           
  1114                           ;main.c: 155: }
  1115                           ;main.c: 156: SetLine(2);
  1116  0004A2  0E02               	movlw	2
  1117  0004A4  ECA2  F00D         	call	_SetLine
  1118                           
  1119                           ;main.c: 157: if (RFID_Read) {
  1120  0004A8  0101               	movlb	1	; () banked
  1121  0004AA  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1122  0004AC  B4D8               	btfsc	status,2,c
  1123  0004AE  D008               	goto	l396
  1124                           
  1125                           ; BSR set to: 1
  1126                           ;main.c: 158: LCD_String(Message);
  1127  0004B0  0EBE               	movlw	low main@Message
  1128  0004B2  0100               	movlb	0	; () banked
  1129  0004B4  6F60               	movwf	LCD_String@string& (0+255),b
  1130  0004B6  0E01               	movlw	high main@Message
  1131  0004B8  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1132  0004BA  EC5C  F00C         	call	_LCD_String	;wreg free
  1133                           
  1134                           ;main.c: 159: } else {
  1135  0004BE  D29F               	goto	l3705
  1136  0004C0                     l396:
  1137                           
  1138                           ;main.c: 160: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1139  0004C0  0E00               	movlw	low main@buf
  1140  0004C2  0100               	movlb	0	; () banked
  1141  0004C4  6F67               	movwf	sprintf@sp& (0+255),b
  1142  0004C6  0E01               	movlw	high main@buf
  1143  0004C8  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  1144  0004CA  0E0B               	movlw	low STR_6
  1145  0004CC  6F69               	movwf	sprintf@f& (0+255),b
  1146  0004CE  0E03               	movlw	high STR_6
  1147  0004D0  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  1148  0004D2  C1C9  F06B         	movff	main@SensorResult,?_sprintf+4
  1149  0004D6  C1CA  F06C         	movff	main@SensorResult+1,?_sprintf+5
  1150  0004DA  C1CB  F06D         	movff	main@SensorResult+2,?_sprintf+6
  1151  0004DE  C1CC  F06E         	movff	main@SensorResult+3,?_sprintf+7
  1152  0004E2  EC8F  F007         	call	_sprintf	;wreg free
  1153                           
  1154                           ;main.c: 161: LCD_String(buf);
  1155  0004E6  0E00               	movlw	low main@buf
  1156  0004E8  0100               	movlb	0	; () banked
  1157  0004EA  6F60               	movwf	LCD_String@string& (0+255),b
  1158  0004EC  0E01               	movlw	high main@buf
  1159  0004EE  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1160  0004F0  EC5C  F00C         	call	_LCD_String	;wreg free
  1161                           
  1162                           ;main.c: 162: }
  1163                           ;main.c: 164: break;
  1164  0004F4  D284               	goto	l3705
  1165  0004F6                     
  1166                           ;main.c: 168: initMotorPWM();
  1167  0004F6  EC32  F00D         	call	_initMotorPWM	;wreg free
  1168                           
  1169                           ;main.c: 169: initTimer();
  1170  0004FA  EC29  F00E         	call	_initTimer	;wreg free
  1171                           
  1172                           ;main.c: 170: initRFID();
  1173  0004FE  EC1B  F00E         	call	_initRFID	;wreg free
  1174                           
  1175                           ;main.c: 171: initLCD();
  1176  000502  EC5B  F00A         	call	_initLCD	;wreg free
  1177                           
  1178                           ;main.c: 172: initIR();
  1179  000506  ECFB  F00D         	call	_initIR	;wreg free
  1180                           
  1181                           ;main.c: 174: enableSensor(0, 1);
  1182  00050A  0E01               	movlw	1
  1183  00050C  6E2C               	movwf	enableSensor@status,c
  1184  00050E  0E00               	movlw	0
  1185  000510  ECD5  F00D         	call	_enableSensor
  1186                           
  1187                           ;main.c: 175: enableSensor(1, 1);
  1188  000514  0E01               	movlw	1
  1189  000516  6E2C               	movwf	enableSensor@status,c
  1190  000518  0E01               	movlw	1
  1191  00051A  ECD5  F00D         	call	_enableSensor
  1192                           
  1193                           ;main.c: 178: fullSpeed(&mL, &mR, 100);
  1194  00051E  0ED1               	movlw	low main@mL
  1195  000520  0100               	movlb	0	; () banked
  1196  000522  6F71               	movwf	fullSpeed@mL& (0+255),b
  1197  000524  0E01               	movlw	high main@mL
  1198  000526  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1199  000528  0EDA               	movlw	low main@mR
  1200  00052A  6F73               	movwf	fullSpeed@mR& (0+255),b
  1201  00052C  0E01               	movlw	high main@mR
  1202  00052E  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1203  000530  0E64               	movlw	100
  1204  000532  6F75               	movwf	fullSpeed@power& (0+255),b
  1205  000534  ECA8  F00B         	call	_fullSpeed	;wreg free
  1206                           
  1207                           ;main.c: 179: delay_tenth_s(1);
  1208  000538  0E01               	movlw	1
  1209  00053A  EC4F  F00D         	call	_delay_tenth_s
  1210  00053E  D25E               	goto	l3703
  1211  000540                     
  1212                           ;main.c: 187: SetLine(1);
  1213  000540  0E01               	movlw	1
  1214  000542  ECA2  F00D         	call	_SetLine
  1215                           
  1216                           ;main.c: 188: LCD_String("Searching");
  1217  000546  0E44               	movlw	low STR_7
  1218  000548  0100               	movlb	0	; () banked
  1219  00054A  6F60               	movwf	LCD_String@string& (0+255),b
  1220  00054C  0E03               	movlw	high STR_7
  1221  00054E  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1222  000550  EC5C  F00C         	call	_LCD_String	;wreg free
  1223                           
  1224                           ;main.c: 190: if (DirectionFound==-1) {
  1225  000554  0101               	movlb	1	; () banked
  1226  000556  29CE               	incf	main@DirectionFound& (0+255),w,b
  1227  000558  A4D8               	btfss	status,2,c
  1228  00055A  D034               	goto	l401
  1229                           
  1230                           ; BSR set to: 1
  1231                           ;main.c: 195: MoveType[Move]=0;
  1232  00055C  51D0               	movf	main@Move& (0+255),w,b
  1233  00055E  0D01               	mullw	1
  1234  000560  0E28               	movlw	low main@MoveType
  1235  000562  24F3               	addwf	prodl,w,c
  1236  000564  6ED9               	movwf	fsr2l,c
  1237  000566  0E01               	movlw	high main@MoveType
  1238  000568  20F4               	addwfc	prodh,w,c
  1239  00056A  6EDA               	movwf	fsr2h,c
  1240  00056C  0E00               	movlw	0
  1241  00056E  6EDF               	movwf	indf2,c
  1242                           
  1243                           ;main.c: 196: MoveTime[Move]=6;
  1244  000570  51D0               	movf	main@Move& (0+255),w,b
  1245  000572  0D02               	mullw	2
  1246  000574  0E5A               	movlw	low main@MoveTime
  1247  000576  24F3               	addwf	prodl,w,c
  1248  000578  6ED9               	movwf	fsr2l,c
  1249  00057A  0E01               	movlw	high main@MoveTime
  1250  00057C  20F4               	addwfc	prodh,w,c
  1251  00057E  6EDA               	movwf	fsr2h,c
  1252  000580  0E06               	movlw	6
  1253  000582  6EDE               	movwf	postinc2,c
  1254  000584  0E00               	movlw	0
  1255  000586  6EDD               	movwf	postdec2,c
  1256                           
  1257                           ; BSR set to: 1
  1258                           ;main.c: 197: Move++;
  1259  000588  2BD0               	incf	main@Move& (0+255),f,b
  1260                           
  1261                           ; BSR set to: 1
  1262                           ;main.c: 198: fullSpeed(&mL, &mR, 100);
  1263  00058A  0ED1               	movlw	low main@mL
  1264  00058C  0100               	movlb	0	; () banked
  1265  00058E  6F71               	movwf	fullSpeed@mL& (0+255),b
  1266  000590  0E01               	movlw	high main@mL
  1267  000592  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1268  000594  0EDA               	movlw	low main@mR
  1269  000596  6F73               	movwf	fullSpeed@mR& (0+255),b
  1270  000598  0E01               	movlw	high main@mR
  1271  00059A  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1272  00059C  0E64               	movlw	100
  1273  00059E  6F75               	movwf	fullSpeed@power& (0+255),b
  1274  0005A0  ECA8  F00B         	call	_fullSpeed	;wreg free
  1275                           
  1276                           ;main.c: 199: delay_tenth_s(6);
  1277  0005A4  0E06               	movlw	6
  1278  0005A6  EC4F  F00D         	call	_delay_tenth_s
  1279                           
  1280                           ;main.c: 200: stop(&mL,&mR);
  1281  0005AA  0ED1               	movlw	low main@mL
  1282  0005AC  0100               	movlb	0	; () banked
  1283  0005AE  6F71               	movwf	stop@mL& (0+255),b
  1284  0005B0  0E01               	movlw	high main@mL
  1285  0005B2  6F72               	movwf	(stop@mL+1)& (0+255),b
  1286  0005B4  0EDA               	movlw	low main@mR
  1287  0005B6  6F73               	movwf	stop@mR& (0+255),b
  1288  0005B8  0E01               	movlw	high main@mR
  1289  0005BA  6F74               	movwf	(stop@mR+1)& (0+255),b
  1290  0005BC  EC1C  F00B         	call	_stop	;wreg free
  1291                           
  1292                           ;main.c: 201: DirectionFound=0;
  1293  0005C0  0E00               	movlw	0
  1294  0005C2  D034               	goto	L2
  1295  0005C4                     l401:
  1296                           
  1297                           ; BSR set to: 1
  1298                           
  1299                           ; BSR set to: 1
  1300  0005C4  51CE               	movf	main@DirectionFound& (0+255),w,b
  1301  0005C6  A4D8               	btfss	status,2,c
  1302  0005C8  D023               	goto	l403
  1303                           
  1304                           ; BSR set to: 1
  1305                           ;main.c: 204: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle,
  1306                           ;main.c: 205: &MoveTime, &Move, &MoveType, &RFID_Read, &millis);
  1307  0005CA  0ED1               	movlw	low main@mL
  1308  0005CC  0100               	movlb	0	; () banked
  1309  0005CE  6F7C               	movwf	ScanWithRange@mL& (0+255),b
  1310  0005D0  0E01               	movlw	high main@mL
  1311  0005D2  6F7D               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1312  0005D4  0EDA               	movlw	low main@mR
  1313  0005D6  6F7E               	movwf	ScanWithRange@mR& (0+255),b
  1314  0005D8  0E01               	movlw	high main@mR
  1315  0005DA  6F7F               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1316  0005DC  C1C8  F080         	movff	main@ScanAngle,ScanWithRange@loops
  1317  0005E0  6B81               	clrf	(ScanWithRange@loops+1)& (0+255),b
  1318  0005E2  0E5A               	movlw	low main@MoveTime
  1319  0005E4  6F82               	movwf	ScanWithRange@MoveTime& (0+255),b
  1320  0005E6  0E01               	movlw	high main@MoveTime
  1321  0005E8  6F83               	movwf	(ScanWithRange@MoveTime+1)& (0+255),b
  1322  0005EA  0ED0               	movlw	low main@Move
  1323  0005EC  6F84               	movwf	ScanWithRange@Move& (0+255),b
  1324  0005EE  0E01               	movlw	high main@Move
  1325  0005F0  6F85               	movwf	(ScanWithRange@Move+1)& (0+255),b
  1326  0005F2  0E28               	movlw	low main@MoveType
  1327  0005F4  6F86               	movwf	ScanWithRange@MoveType& (0+255),b
  1328  0005F6  0E01               	movlw	high main@MoveType
  1329  0005F8  6F87               	movwf	(ScanWithRange@MoveType+1)& (0+255),b
  1330  0005FA  0EF9               	movlw	low _RFID_Read
  1331  0005FC  6F88               	movwf	ScanWithRange@RFID_Read& (0+255),b
  1332  0005FE  0E01               	movlw	high _RFID_Read
  1333  000600  6F89               	movwf	(ScanWithRange@RFID_Read+1)& (0+255),b
  1334  000602  0EF7               	movlw	low _millis
  1335  000604  6F8A               	movwf	ScanWithRange@millis& (0+255),b
  1336  000606  0E01               	movlw	high _millis
  1337  000608  6F8B               	movwf	(ScanWithRange@millis+1)& (0+255),b
  1338  00060A  EC10  F005         	call	_ScanWithRange	;wreg free
  1339  00060E  D00E               	goto	L2
  1340  000610                     l403:
  1341                           
  1342                           ; BSR set to: 1
  1343                           
  1344                           ; BSR set to: 1
  1345  000610  05CE               	decf	main@DirectionFound& (0+255),w,b
  1346  000612  A4D8               	btfss	status,2,c
  1347  000614  D00E               	goto	l405
  1348                           
  1349                           ; BSR set to: 1
  1350                           ;main.c: 208: DirectionFound=ScanIR(&mL, &mR);
  1351  000616  0ED1               	movlw	low main@mL
  1352  000618  0100               	movlb	0	; () banked
  1353  00061A  6F7C               	movwf	ScanIR@mL& (0+255),b
  1354  00061C  0E01               	movlw	high main@mL
  1355  00061E  6F7D               	movwf	(ScanIR@mL+1)& (0+255),b
  1356  000620  0EDA               	movlw	low main@mR
  1357  000622  6F7E               	movwf	ScanIR@mR& (0+255),b
  1358  000624  0E01               	movlw	high main@mR
  1359  000626  6F7F               	movwf	(ScanIR@mR+1)& (0+255),b
  1360  000628  EC7E  F009         	call	_ScanIR	;wreg free
  1361  00062C                     L2:
  1362  00062C  0101               	movlb	1	; () banked
  1363  00062E  6FCE               	movwf	main@DirectionFound& (0+255),b
  1364                           
  1365                           ;main.c: 209: } else if (DirectionFound==2) {
  1366  000630  D1E6               	goto	l3705
  1367  000632                     l405:
  1368                           
  1369                           ; BSR set to: 1
  1370                           
  1371                           ; BSR set to: 1
  1372  000632  0E02               	movlw	2
  1373  000634  19CE               	xorwf	main@DirectionFound& (0+255),w,b
  1374  000636  A4D8               	btfss	status,2,c
  1375  000638  D1E2               	goto	l3705
  1376                           
  1377                           ; BSR set to: 1
  1378                           ;main.c: 211: mode=2;
  1379  00063A  0E02               	movlw	2
  1380  00063C  6E32               	movwf	_mode,c	;volatile
  1381                           
  1382                           ; BSR set to: 1
  1383                           ;main.c: 212: MoveType[Move]=1;
  1384  00063E  51D0               	movf	main@Move& (0+255),w,b
  1385  000640  0D01               	mullw	1
  1386  000642  0E28               	movlw	low main@MoveType
  1387  000644  24F3               	addwf	prodl,w,c
  1388  000646  6ED9               	movwf	fsr2l,c
  1389  000648  0E01               	movlw	high main@MoveType
  1390  00064A  20F4               	addwfc	prodh,w,c
  1391  00064C  6EDA               	movwf	fsr2h,c
  1392  00064E  0E01               	movlw	1
  1393  000650  6EDF               	movwf	indf2,c
  1394                           
  1395                           ; BSR set to: 1
  1396                           ;main.c: 213: }
  1397                           ;main.c: 215: break;
  1398                           
  1399                           ; BSR set to: 1
  1400                           
  1401                           ; BSR set to: 1
  1402                           
  1403                           ; BSR set to: 1
  1404  000652  D1D5               	goto	l3705
  1405  000654                     
  1406                           ;main.c: 222: if (RFID_Read) {
  1407                           
  1408                           ; BSR set to: 1
  1409  000654  0101               	movlb	1	; () banked
  1410  000656  51F9               	movf	_RFID_Read& (0+255),w,b	;volatile
  1411  000658  B4D8               	btfsc	status,2,c
  1412  00065A  D08A               	goto	l409
  1413                           
  1414                           ; BSR set to: 1
  1415                           ;main.c: 223: stop(&mL, &mR);
  1416  00065C  0ED1               	movlw	low main@mL
  1417  00065E  0100               	movlb	0	; () banked
  1418  000660  6F71               	movwf	stop@mL& (0+255),b
  1419  000662  0E01               	movlw	high main@mL
  1420  000664  6F72               	movwf	(stop@mL+1)& (0+255),b
  1421  000666  0EDA               	movlw	low main@mR
  1422  000668  6F73               	movwf	stop@mR& (0+255),b
  1423  00066A  0E01               	movlw	high main@mR
  1424  00066C  6F74               	movwf	(stop@mR+1)& (0+255),b
  1425  00066E  EC1C  F00B         	call	_stop	;wreg free
  1426                           
  1427                           ;main.c: 224: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1428  000672  0E03               	movlw	3
  1429  000674  0101               	movlb	1	; () banked
  1430  000676  19F6               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1431  000678  A4D8               	btfss	status,2,c
  1432  00067A  D002               	goto	u3070
  1433  00067C  0E01               	movlw	1
  1434  00067E  D001               	goto	u3072
  1435  000680                     u3070:
  1436  000680  0E00               	movlw	0
  1437  000682                     u3072:
  1438  000682  0100               	movlb	0	; () banked
  1439  000684  6FC9               	movwf	??_main& (0+255),b
  1440  000686  0E02               	movlw	2
  1441  000688  0101               	movlb	1	; () banked
  1442  00068A  19E7               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1443  00068C  A4D8               	btfss	status,2,c
  1444  00068E  D002               	goto	u3080
  1445  000690  0E01               	movlw	1
  1446  000692  D001               	goto	u3082
  1447  000694                     u3080:
  1448  000694  0E00               	movlw	0
  1449  000696                     u3082:
  1450  000696  0100               	movlb	0	; () banked
  1451  000698  15C9               	andwf	??_main& (0+255),w,b
  1452  00069A  A0E8               	btfss	wreg,0,c
  1453  00069C  D1B0               	goto	l3705
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;main.c: 225: if (VerifySignal(&ReceivedString)){
  1457  00069E  0EE7               	movlw	low _ReceivedString
  1458  0006A0  6E2C               	movwf	VerifySignal@RecievedString,c
  1459  0006A2  0E01               	movlw	high _ReceivedString
  1460  0006A4  6E2D               	movwf	VerifySignal@RecievedString+1,c
  1461  0006A6  EC33  F00E         	call	_VerifySignal	;wreg free
  1462  0006AA  0900               	iorlw	0
  1463  0006AC  B4D8               	btfsc	status,2,c
  1464  0006AE  D037               	goto	l411
  1465                           
  1466                           ;main.c: 227: for (i=0; i<10; i++){
  1467  0006B0  0E00               	movlw	0
  1468  0006B2  0101               	movlb	1	; () banked
  1469  0006B4  6FCF               	movwf	main@i& (0+255),b
  1470  0006B6                     l3607:
  1471                           
  1472                           ; BSR set to: 1
  1473  0006B6  0E09               	movlw	9
  1474  0006B8  65CF               	cpfsgt	main@i& (0+255),b
  1475  0006BA  D001               	goto	l412
  1476  0006BC  D01B               	goto	u3120
  1477  0006BE                     l412:
  1478                           
  1479                           ; BSR set to: 1
  1480                           ;main.c: 228: Message[i] = ReceivedString[i+1];
  1481                           
  1482                           ; BSR set to: 1
  1483  0006BE  51CF               	movf	main@i& (0+255),w,b
  1484  0006C0  0100               	movlb	0	; () banked
  1485  0006C2  6FC9               	movwf	??_main& (0+255),b
  1486  0006C4  6BCA               	clrf	(??_main+1)& (0+255),b
  1487  0006C6  0E01               	movlw	1
  1488  0006C8  27C9               	addwf	??_main& (0+255),f,b
  1489  0006CA  0E00               	movlw	0
  1490  0006CC  23CA               	addwfc	(??_main+1)& (0+255),f,b
  1491  0006CE  0EE7               	movlw	low _ReceivedString
  1492  0006D0  25C9               	addwf	??_main& (0+255),w,b
  1493  0006D2  6ED9               	movwf	fsr2l,c
  1494  0006D4  0E01               	movlw	high _ReceivedString
  1495  0006D6  21CA               	addwfc	(??_main+1)& (0+255),w,b
  1496  0006D8  6EDA               	movwf	fsr2h,c
  1497  0006DA  0101               	movlb	1	; () banked
  1498  0006DC  51CF               	movf	main@i& (0+255),w,b
  1499  0006DE  0D01               	mullw	1
  1500  0006E0  0EBE               	movlw	low main@Message
  1501  0006E2  24F3               	addwf	prodl,w,c
  1502  0006E4  6EE1               	movwf	fsr1l,c
  1503  0006E6  0E01               	movlw	high main@Message
  1504  0006E8  20F4               	addwfc	prodh,w,c
  1505  0006EA  6EE2               	movwf	fsr1h,c
  1506  0006EC  CFDF FFE7          	movff	indf2,indf1
  1507                           
  1508                           ; BSR set to: 1
  1509  0006F0  2BCF               	incf	main@i& (0+255),f,b
  1510  0006F2  D7E1               	goto	l3607
  1511  0006F4                     u3120:
  1512                           
  1513                           ; BSR set to: 1
  1514                           ;main.c: 229: }
  1515                           ;main.c: 232: for (i=0; i<16; i++) {
  1516                           
  1517                           ; BSR set to: 1
  1518  0006F4  0E00               	movlw	0
  1519  0006F6  6FCF               	movwf	main@i& (0+255),b
  1520  0006F8                     l3619:
  1521                           
  1522                           ; BSR set to: 1
  1523  0006F8  0E0F               	movlw	15
  1524  0006FA  65CF               	cpfsgt	main@i& (0+255),b
  1525  0006FC  D001               	goto	l414
  1526  0006FE  D00C               	goto	u3140
  1527  000700                     l414:
  1528                           
  1529                           ; BSR set to: 1
  1530                           ;main.c: 233: ReceivedString[i]=0;
  1531                           
  1532                           ; BSR set to: 1
  1533  000700  51CF               	movf	main@i& (0+255),w,b
  1534  000702  0D01               	mullw	1
  1535  000704  0EE7               	movlw	low _ReceivedString
  1536  000706  24F3               	addwf	prodl,w,c
  1537  000708  6ED9               	movwf	fsr2l,c
  1538  00070A  0E01               	movlw	high _ReceivedString
  1539  00070C  20F4               	addwfc	prodh,w,c
  1540  00070E  6EDA               	movwf	fsr2h,c
  1541  000710  0E00               	movlw	0
  1542  000712  6EDF               	movwf	indf2,c
  1543                           
  1544                           ; BSR set to: 1
  1545  000714  2BCF               	incf	main@i& (0+255),f,b
  1546  000716  D7F0               	goto	l3619
  1547  000718                     u3140:
  1548                           
  1549                           ; BSR set to: 1
  1550                           ;main.c: 234: }
  1551                           ;main.c: 235: mode=3;
  1552                           
  1553                           ; BSR set to: 1
  1554  000718  0E03               	movlw	3
  1555  00071A  6E32               	movwf	_mode,c	;volatile
  1556                           
  1557                           ;main.c: 237: } else {
  1558  00071C  D170               	goto	l3705
  1559  00071E                     l411:
  1560                           
  1561                           ;main.c: 238: fullSpeedBack(&mL,&mR, 100);
  1562                           
  1563                           ; BSR set to: 1
  1564  00071E  0ED1               	movlw	low main@mL
  1565  000720  0100               	movlb	0	; () banked
  1566  000722  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1567  000724  0E01               	movlw	high main@mL
  1568  000726  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1569  000728  0EDA               	movlw	low main@mR
  1570  00072A  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1571  00072C  0E01               	movlw	high main@mR
  1572  00072E  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1573  000730  0E64               	movlw	100
  1574  000732  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1575  000734  ECD8  F00C         	call	_fullSpeedBack	;wreg free
  1576                           
  1577                           ;main.c: 239: delay_tenth_s(5);
  1578  000738  0E05               	movlw	5
  1579  00073A  EC4F  F00D         	call	_delay_tenth_s
  1580                           
  1581                           ;main.c: 240: stop(&mL,&mR);
  1582  00073E  0ED1               	movlw	low main@mL
  1583  000740  0100               	movlb	0	; () banked
  1584  000742  6F71               	movwf	stop@mL& (0+255),b
  1585  000744  0E01               	movlw	high main@mL
  1586  000746  6F72               	movwf	(stop@mL+1)& (0+255),b
  1587  000748  0EDA               	movlw	low main@mR
  1588  00074A  6F73               	movwf	stop@mR& (0+255),b
  1589  00074C  0E01               	movlw	high main@mR
  1590  00074E  6F74               	movwf	(stop@mR+1)& (0+255),b
  1591  000750  EC1C  F00B         	call	_stop	;wreg free
  1592                           
  1593                           ;main.c: 241: fullSpeed(&mL,&mR, 100);
  1594  000754  0ED1               	movlw	low main@mL
  1595  000756  0100               	movlb	0	; () banked
  1596  000758  6F71               	movwf	fullSpeed@mL& (0+255),b
  1597  00075A  0E01               	movlw	high main@mL
  1598  00075C  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1599  00075E  0EDA               	movlw	low main@mR
  1600  000760  6F73               	movwf	fullSpeed@mR& (0+255),b
  1601  000762  0E01               	movlw	high main@mR
  1602  000764  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1603  000766  0E64               	movlw	100
  1604  000768  6F75               	movwf	fullSpeed@power& (0+255),b
  1605  00076A  ECA8  F00B         	call	_fullSpeed	;wreg free
  1606                           
  1607                           ;main.c: 242: }
  1608                           ;main.c: 243: }
  1609                           ;main.c: 244: } else {
  1610  00076E  D147               	goto	l3705
  1611  000770                     l409:
  1612                           
  1613                           ;main.c: 245: DirectionFound=1;
  1614  000770  0E01               	movlw	1
  1615  000772  0101               	movlb	1	; () banked
  1616  000774  6FCE               	movwf	main@DirectionFound& (0+255),b
  1617                           
  1618                           ;main.c: 246: mode=1;
  1619  000776  0E01               	movlw	1
  1620  000778  6E32               	movwf	_mode,c	;volatile
  1621                           
  1622                           ; BSR set to: 1
  1623                           ;main.c: 248: fullSpeed(&mL,&mR, 100);
  1624  00077A  0ED1               	movlw	low main@mL
  1625  00077C  0100               	movlb	0	; () banked
  1626  00077E  6F71               	movwf	fullSpeed@mL& (0+255),b
  1627  000780  0E01               	movlw	high main@mL
  1628  000782  6F72               	movwf	(fullSpeed@mL+1)& (0+255),b
  1629  000784  0EDA               	movlw	low main@mR
  1630  000786  6F73               	movwf	fullSpeed@mR& (0+255),b
  1631  000788  0E01               	movlw	high main@mR
  1632  00078A  6F74               	movwf	(fullSpeed@mR+1)& (0+255),b
  1633  00078C  0E64               	movlw	100
  1634  00078E  6F75               	movwf	fullSpeed@power& (0+255),b
  1635  000790  ECA8  F00B         	call	_fullSpeed	;wreg free
  1636                           
  1637                           ;main.c: 249: delay_tenth_s(1);
  1638  000794  0E01               	movlw	1
  1639  000796  EC4F  F00D         	call	_delay_tenth_s
  1640                           
  1641                           ;main.c: 250: MoveType[Move] = 0;
  1642  00079A  0101               	movlb	1	; () banked
  1643  00079C  51D0               	movf	main@Move& (0+255),w,b
  1644  00079E  0D01               	mullw	1
  1645  0007A0  0E28               	movlw	low main@MoveType
  1646  0007A2  24F3               	addwf	prodl,w,c
  1647  0007A4  6ED9               	movwf	fsr2l,c
  1648  0007A6  0E01               	movlw	high main@MoveType
  1649  0007A8  20F4               	addwfc	prodh,w,c
  1650  0007AA  6EDA               	movwf	fsr2h,c
  1651  0007AC  0E00               	movlw	0
  1652  0007AE  6EDF               	movwf	indf2,c
  1653                           
  1654                           ; BSR set to: 1
  1655                           ;main.c: 251: MoveTime[Move] = 5;
  1656  0007B0  51D0               	movf	main@Move& (0+255),w,b
  1657  0007B2  0D02               	mullw	2
  1658  0007B4  0E5A               	movlw	low main@MoveTime
  1659  0007B6  24F3               	addwf	prodl,w,c
  1660  0007B8  6ED9               	movwf	fsr2l,c
  1661  0007BA  0E01               	movlw	high main@MoveTime
  1662  0007BC  20F4               	addwfc	prodh,w,c
  1663  0007BE  6EDA               	movwf	fsr2h,c
  1664  0007C0  0E05               	movlw	5
  1665  0007C2  6EDE               	movwf	postinc2,c
  1666  0007C4  0E00               	movlw	0
  1667  0007C6  6EDD               	movwf	postdec2,c
  1668                           
  1669                           ; BSR set to: 1
  1670                           ;main.c: 252: Move++;
  1671  0007C8  2BD0               	incf	main@Move& (0+255),f,b
  1672                           
  1673                           ; BSR set to: 1
  1674                           ;main.c: 253: }
  1675                           ;main.c: 255: break;
  1676  0007CA  D119               	goto	l3705
  1677  0007CC                     
  1678                           ;main.c: 260: SetLine(1);
  1679                           
  1680                           ; BSR set to: 1
  1681  0007CC  0E01               	movlw	1
  1682  0007CE  ECA2  F00D         	call	_SetLine
  1683                           
  1684                           ;main.c: 261: LCD_String(Message);
  1685  0007D2  0EBE               	movlw	low main@Message
  1686  0007D4  0100               	movlb	0	; () banked
  1687  0007D6  6F60               	movwf	LCD_String@string& (0+255),b
  1688  0007D8  0E01               	movlw	high main@Message
  1689  0007DA  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1690  0007DC  EC5C  F00C         	call	_LCD_String	;wreg free
  1691                           
  1692                           ;main.c: 262: SetLine(2);
  1693  0007E0  0E02               	movlw	2
  1694  0007E2  ECA2  F00D         	call	_SetLine
  1695                           
  1696                           ;main.c: 263: LCD_String("Going Home");
  1697  0007E6  0E39               	movlw	low STR_8
  1698  0007E8  0100               	movlb	0	; () banked
  1699  0007EA  6F60               	movwf	LCD_String@string& (0+255),b
  1700  0007EC  0E03               	movlw	high STR_8
  1701  0007EE  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  1702  0007F0  EC5C  F00C         	call	_LCD_String	;wreg free
  1703  0007F4  0101               	movlb	1	; () banked
  1704  0007F6  BFD0               	btfsc	main@Move& (0+255),7,b
  1705  0007F8  D0F6               	goto	u3240
  1706                           
  1707                           ; BSR set to: 1
  1708                           ;main.c: 266: stop(&mL,&mR);
  1709                           
  1710                           ; BSR set to: 1
  1711                           
  1712                           ; BSR set to: 1
  1713  0007FA  0ED1               	movlw	low main@mL
  1714  0007FC  0100               	movlb	0	; () banked
  1715  0007FE  6F71               	movwf	stop@mL& (0+255),b
  1716  000800  0E01               	movlw	high main@mL
  1717  000802  6F72               	movwf	(stop@mL+1)& (0+255),b
  1718  000804  0EDA               	movlw	low main@mR
  1719  000806  6F73               	movwf	stop@mR& (0+255),b
  1720  000808  0E01               	movlw	high main@mR
  1721  00080A  6F74               	movwf	(stop@mR+1)& (0+255),b
  1722  00080C  EC1C  F00B         	call	_stop	;wreg free
  1723                           
  1724                           ;main.c: 267: if (MoveType[Move]==0) {
  1725  000810  0101               	movlb	1	; () banked
  1726  000812  51D0               	movf	main@Move& (0+255),w,b
  1727  000814  0D01               	mullw	1
  1728  000816  0E28               	movlw	low main@MoveType
  1729  000818  24F3               	addwf	prodl,w,c
  1730  00081A  6ED9               	movwf	fsr2l,c
  1731  00081C  0E01               	movlw	high main@MoveType
  1732  00081E  20F4               	addwfc	prodh,w,c
  1733  000820  6EDA               	movwf	fsr2h,c
  1734  000822  50DF               	movf	indf2,w,c
  1735  000824  A4D8               	btfss	status,2,c
  1736  000826  D01A               	goto	l421
  1737                           
  1738                           ; BSR set to: 1
  1739                           ;main.c: 268: fullSpeedBack(&mL,&mR,100);
  1740  000828  0ED1               	movlw	low main@mL
  1741  00082A  0100               	movlb	0	; () banked
  1742  00082C  6F77               	movwf	fullSpeedBack@mL& (0+255),b
  1743  00082E  0E01               	movlw	high main@mL
  1744  000830  6F78               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1745  000832  0EDA               	movlw	low main@mR
  1746  000834  6F79               	movwf	fullSpeedBack@mR& (0+255),b
  1747  000836  0E01               	movlw	high main@mR
  1748  000838  6F7A               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1749  00083A  0E64               	movlw	100
  1750  00083C  6F7B               	movwf	fullSpeedBack@power& (0+255),b
  1751  00083E  ECD8  F00C         	call	_fullSpeedBack	;wreg free
  1752                           
  1753                           ;main.c: 269: delay_tenth_s(MoveTime[Move]);
  1754  000842  0101               	movlb	1	; () banked
  1755  000844  51D0               	movf	main@Move& (0+255),w,b
  1756  000846  0D02               	mullw	2
  1757  000848  0E5A               	movlw	low main@MoveTime
  1758  00084A  24F3               	addwf	prodl,w,c
  1759  00084C  6ED9               	movwf	fsr2l,c
  1760  00084E  0E01               	movlw	high main@MoveTime
  1761  000850  20F4               	addwfc	prodh,w,c
  1762  000852  6EDA               	movwf	fsr2h,c
  1763  000854  50DF               	movf	indf2,w,c
  1764  000856  EC4F  F00D         	call	_delay_tenth_s
  1765                           
  1766                           ;main.c: 270: } else if (MoveType[Move]==1) {
  1767  00085A  D0BF               	goto	l435
  1768  00085C                     l421:
  1769  00085C  0101               	movlb	1	; () banked
  1770  00085E  51D0               	movf	main@Move& (0+255),w,b
  1771  000860  0D01               	mullw	1
  1772  000862  0E28               	movlw	low main@MoveType
  1773  000864  24F3               	addwf	prodl,w,c
  1774  000866  6ED9               	movwf	fsr2l,c
  1775  000868  0E01               	movlw	high main@MoveType
  1776  00086A  20F4               	addwfc	prodh,w,c
  1777  00086C  6EDA               	movwf	fsr2h,c
  1778  00086E  04DE               	decf	postinc2,w,c
  1779  000870  A4D8               	btfss	status,2,c
  1780  000872  D063               	goto	l423
  1781                           
  1782                           ; BSR set to: 1
  1783                           ;main.c: 271: T0CONbits.TMR0ON=0;
  1784  000874  9ED5               	bcf	4053,7,c	;volatile
  1785                           
  1786                           ; BSR set to: 1
  1787                           ;main.c: 272: TMR0L = 0;
  1788  000876  0E00               	movlw	0
  1789  000878  6ED6               	movwf	4054,c	;volatile
  1790                           
  1791                           ;main.c: 273: TMR0H = 0;
  1792  00087A  0E00               	movlw	0
  1793  00087C  6ED7               	movwf	4055,c	;volatile
  1794                           
  1795                           ;main.c: 274: millis = 0;
  1796  00087E  0E00               	movlw	0
  1797  000880  6FF8               	movwf	(_millis+1)& (0+255),b	;volatile
  1798  000882  0E00               	movlw	0
  1799  000884  6FF7               	movwf	_millis& (0+255),b	;volatile
  1800                           
  1801                           ; BSR set to: 1
  1802                           ;main.c: 275: if (MoveTime[Move]>0) {
  1803  000886  51D0               	movf	main@Move& (0+255),w,b
  1804  000888  0D02               	mullw	2
  1805  00088A  0E5A               	movlw	low main@MoveTime
  1806  00088C  24F3               	addwf	prodl,w,c
  1807  00088E  6ED9               	movwf	fsr2l,c
  1808  000890  0E01               	movlw	high main@MoveTime
  1809  000892  20F4               	addwfc	prodh,w,c
  1810  000894  6EDA               	movwf	fsr2h,c
  1811  000896  0E01               	movlw	1
  1812  000898  BEDB               	btfsc	plusw2,7,c
  1813  00089A  D024               	goto	l424
  1814  00089C  0E01               	movlw	1
  1815  00089E  50DB               	movf	plusw2,w,c
  1816  0008A0  E103               	bnz	u3180
  1817  0008A2  04DE               	decf	postinc2,w,c
  1818  0008A4  A0D8               	btfss	status,0,c
  1819  0008A6  D01E               	goto	l424
  1820  0008A8                     u3180:
  1821                           
  1822                           ; BSR set to: 1
  1823                           ;main.c: 276: T0CONbits.TMR0ON=1;
  1824  0008A8  8ED5               	bsf	4053,7,c	;volatile
  1825                           
  1826                           ; BSR set to: 1
  1827                           ;main.c: 277: turnRight(&mL,&mR,MotorPower);
  1828  0008AA  0ED1               	movlw	low main@mL
  1829  0008AC  0100               	movlb	0	; () banked
  1830  0008AE  6F77               	movwf	turnRight@mL& (0+255),b
  1831  0008B0  0E01               	movlw	high main@mL
  1832  0008B2  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1833  0008B4  0EDA               	movlw	low main@mR
  1834  0008B6  6F79               	movwf	turnRight@mR& (0+255),b
  1835  0008B8  0E01               	movlw	high main@mR
  1836  0008BA  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1837  0008BC  C1CD  F07B         	movff	main@MotorPower,turnRight@power
  1838  0008C0  ECF6  F00C         	call	_turnRight	;wreg free
  1839  0008C4  0101               	movlb	1	; () banked
  1840  0008C6  51D0               	movf	main@Move& (0+255),w,b
  1841  0008C8  0D02               	mullw	2
  1842  0008CA  0E5A               	movlw	low main@MoveTime
  1843  0008CC  24F3               	addwf	prodl,w,c
  1844  0008CE  6ED9               	movwf	fsr2l,c
  1845  0008D0  0E01               	movlw	high main@MoveTime
  1846  0008D2  20F4               	addwfc	prodh,w,c
  1847  0008D4  6EDA               	movwf	fsr2h,c
  1848  0008D6  50DE               	movf	postinc2,w,c
  1849  0008D8  5DF7               	subwf	_millis& (0+255),w,b	;volatile
  1850  0008DA  50DE               	movf	postinc2,w,c
  1851  0008DC  59F8               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1852  0008DE  A0D8               	btfss	status,0,c
  1853  0008E0  D7F1               	goto	l426
  1854  0008E2  D029               	goto	u3200
  1855  0008E4                     l424:
  1856                           
  1857                           ; BSR set to: 1
  1858                           ;main.c: 282: T0CONbits.TMR0ON=1;
  1859  0008E4  8ED5               	bsf	4053,7,c	;volatile
  1860                           
  1861                           ; BSR set to: 1
  1862                           ;main.c: 283: turnLeft(&mL,&mR,MotorPower);
  1863  0008E6  0ED1               	movlw	low main@mL
  1864  0008E8  0100               	movlb	0	; () banked
  1865  0008EA  6F77               	movwf	turnLeft@mL& (0+255),b
  1866  0008EC  0E01               	movlw	high main@mL
  1867  0008EE  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1868  0008F0  0EDA               	movlw	low main@mR
  1869  0008F2  6F79               	movwf	turnLeft@mR& (0+255),b
  1870  0008F4  0E01               	movlw	high main@mR
  1871  0008F6  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1872  0008F8  C1CD  F07B         	movff	main@MotorPower,turnLeft@power
  1873  0008FC  EC14  F00D         	call	_turnLeft	;wreg free
  1874  000900  0101               	movlb	1	; () banked
  1875  000902  51D0               	movf	main@Move& (0+255),w,b
  1876  000904  0D02               	mullw	2
  1877  000906  0E5A               	movlw	low main@MoveTime
  1878  000908  24F3               	addwf	prodl,w,c
  1879  00090A  6ED9               	movwf	fsr2l,c
  1880  00090C  0E01               	movlw	high main@MoveTime
  1881  00090E  20F4               	addwfc	prodh,w,c
  1882  000910  6EDA               	movwf	fsr2h,c
  1883  000912  CFDE F0C9          	movff	postinc2,??_main
  1884  000916  CFDD F0CA          	movff	postdec2,??_main+1
  1885  00091A  0100               	movlb	0	; () banked
  1886  00091C  1FC9               	comf	??_main& (0+255),f,b
  1887  00091E  1FCA               	comf	(??_main+1)& (0+255),f,b
  1888  000920  4BC9               	infsnz	??_main& (0+255),f,b
  1889  000922  2BCA               	incf	(??_main+1)& (0+255),f,b
  1890  000924  51C9               	movf	??_main& (0+255),w,b
  1891  000926  0101               	movlb	1	; () banked
  1892  000928  5DF7               	subwf	_millis& (0+255),w,b	;volatile
  1893  00092A  0100               	movlb	0	; () banked
  1894  00092C  51CA               	movf	(??_main+1)& (0+255),w,b
  1895  00092E  0101               	movlb	1	; () banked
  1896  000930  59F8               	subwfb	(_millis+1)& (0+255),w,b	;volatile
  1897  000932  A0D8               	btfss	status,0,c
  1898  000934  D7E5               	goto	l430
  1899  000936                     u3200:
  1900                           
  1901                           ; BSR set to: 1
  1902                           ;main.c: 286: T0CONbits.TMR0ON=0;
  1903  000936  9ED5               	bcf	4053,7,c	;volatile
  1904                           
  1905                           ; BSR set to: 1
  1906                           ;main.c: 287: }
  1907                           ;main.c: 288: } else if (MoveType[Move]==2) {
  1908  000938  D050               	goto	l435
  1909  00093A                     l423:
  1910                           
  1911                           ; BSR set to: 1
  1912                           
  1913                           ; BSR set to: 1
  1914  00093A  51D0               	movf	main@Move& (0+255),w,b
  1915  00093C  0D01               	mullw	1
  1916  00093E  0E28               	movlw	low main@MoveType
  1917  000940  24F3               	addwf	prodl,w,c
  1918  000942  6ED9               	movwf	fsr2l,c
  1919  000944  0E01               	movlw	high main@MoveType
  1920  000946  20F4               	addwfc	prodh,w,c
  1921  000948  6EDA               	movwf	fsr2h,c
  1922  00094A  0E02               	movlw	2
  1923  00094C  18DE               	xorwf	postinc2,w,c
  1924  00094E  A4D8               	btfss	status,2,c
  1925  000950  D044               	goto	l435
  1926                           
  1927                           ; BSR set to: 1
  1928                           ;main.c: 289: if (MoveTime[Move]>0) {
  1929  000952  51D0               	movf	main@Move& (0+255),w,b
  1930  000954  0D02               	mullw	2
  1931  000956  0E5A               	movlw	low main@MoveTime
  1932  000958  24F3               	addwf	prodl,w,c
  1933  00095A  6ED9               	movwf	fsr2l,c
  1934  00095C  0E01               	movlw	high main@MoveTime
  1935  00095E  20F4               	addwfc	prodh,w,c
  1936  000960  6EDA               	movwf	fsr2h,c
  1937  000962  0E01               	movlw	1
  1938  000964  BEDB               	btfsc	plusw2,7,c
  1939  000966  D020               	goto	l434
  1940  000968  0E01               	movlw	1
  1941  00096A  50DB               	movf	plusw2,w,c
  1942  00096C  E103               	bnz	u3220
  1943  00096E  04DE               	decf	postinc2,w,c
  1944  000970  A0D8               	btfss	status,0,c
  1945  000972  D01A               	goto	l434
  1946  000974                     u3220:
  1947                           
  1948                           ; BSR set to: 1
  1949                           ;main.c: 290: turnRight(&mL,&mR,78);
  1950  000974  0ED1               	movlw	low main@mL
  1951  000976  0100               	movlb	0	; () banked
  1952  000978  6F77               	movwf	turnRight@mL& (0+255),b
  1953  00097A  0E01               	movlw	high main@mL
  1954  00097C  6F78               	movwf	(turnRight@mL+1)& (0+255),b
  1955  00097E  0EDA               	movlw	low main@mR
  1956  000980  6F79               	movwf	turnRight@mR& (0+255),b
  1957  000982  0E01               	movlw	high main@mR
  1958  000984  6F7A               	movwf	(turnRight@mR+1)& (0+255),b
  1959  000986  0E4E               	movlw	78
  1960  000988  6F7B               	movwf	turnRight@power& (0+255),b
  1961  00098A  ECF6  F00C         	call	_turnRight	;wreg free
  1962                           
  1963                           ;main.c: 292: delay_tenth_s(MoveTime[Move]);
  1964  00098E  0101               	movlb	1	; () banked
  1965  000990  51D0               	movf	main@Move& (0+255),w,b
  1966  000992  0D02               	mullw	2
  1967  000994  0E5A               	movlw	low main@MoveTime
  1968  000996  24F3               	addwf	prodl,w,c
  1969  000998  6ED9               	movwf	fsr2l,c
  1970  00099A  0E01               	movlw	high main@MoveTime
  1971  00099C  20F4               	addwfc	prodh,w,c
  1972  00099E  6EDA               	movwf	fsr2h,c
  1973  0009A0  50DF               	movf	indf2,w,c
  1974  0009A2  EC4F  F00D         	call	_delay_tenth_s
  1975                           
  1976                           ;main.c: 293: } else {
  1977  0009A6  D019               	goto	l435
  1978  0009A8                     l434:
  1979                           
  1980                           ;main.c: 294: turnLeft(&mL,&mR,100);
  1981  0009A8  0ED1               	movlw	low main@mL
  1982  0009AA  0100               	movlb	0	; () banked
  1983  0009AC  6F77               	movwf	turnLeft@mL& (0+255),b
  1984  0009AE  0E01               	movlw	high main@mL
  1985  0009B0  6F78               	movwf	(turnLeft@mL+1)& (0+255),b
  1986  0009B2  0EDA               	movlw	low main@mR
  1987  0009B4  6F79               	movwf	turnLeft@mR& (0+255),b
  1988  0009B6  0E01               	movlw	high main@mR
  1989  0009B8  6F7A               	movwf	(turnLeft@mR+1)& (0+255),b
  1990  0009BA  0E64               	movlw	100
  1991  0009BC  6F7B               	movwf	turnLeft@power& (0+255),b
  1992  0009BE  EC14  F00D         	call	_turnLeft	;wreg free
  1993                           
  1994                           ;main.c: 295: delay_tenth_s(MoveTime[Move]);
  1995  0009C2  0101               	movlb	1	; () banked
  1996  0009C4  51D0               	movf	main@Move& (0+255),w,b
  1997  0009C6  0D02               	mullw	2
  1998  0009C8  0E5A               	movlw	low main@MoveTime
  1999  0009CA  24F3               	addwf	prodl,w,c
  2000  0009CC  6ED9               	movwf	fsr2l,c
  2001  0009CE  0E01               	movlw	high main@MoveTime
  2002  0009D0  20F4               	addwfc	prodh,w,c
  2003  0009D2  6EDA               	movwf	fsr2h,c
  2004  0009D4  50DF               	movf	indf2,w,c
  2005  0009D6  EC4F  F00D         	call	_delay_tenth_s
  2006  0009DA                     l435:
  2007                           
  2008                           ;main.c: 296: }
  2009                           ;main.c: 297: }
  2010                           ;main.c: 298: if (mode==-1) {
  2011  0009DA  2832               	incf	_mode,w,c	;volatile
  2012  0009DC  B4D8               	btfsc	status,2,c
  2013  0009DE  D003               	goto	u3240
  2014                           
  2015                           ;main.c: 299: break;
  2016  0009E0  0101               	movlb	1	; () banked
  2017  0009E2  07D0               	decf	main@Move& (0+255),f,b
  2018  0009E4  D708               	goto	L3
  2019  0009E6                     u3240:
  2020                           
  2021                           ;main.c: 300: }
  2022                           ;main.c: 301: }
  2023                           ;main.c: 302: stop(&mL,&mR);
  2024                           
  2025                           ; BSR set to: 1
  2026  0009E6  0ED1               	movlw	low main@mL
  2027  0009E8  0100               	movlb	0	; () banked
  2028  0009EA  6F71               	movwf	stop@mL& (0+255),b
  2029  0009EC  0E01               	movlw	high main@mL
  2030  0009EE  6F72               	movwf	(stop@mL+1)& (0+255),b
  2031  0009F0  0EDA               	movlw	low main@mR
  2032  0009F2  6F73               	movwf	stop@mR& (0+255),b
  2033  0009F4  0E01               	movlw	high main@mR
  2034  0009F6  6F74               	movwf	(stop@mR+1)& (0+255),b
  2035  0009F8  EC1C  F00B         	call	_stop	;wreg free
  2036  0009FC                     l3703:
  2037                           
  2038                           ;main.c: 303: mode=-1;
  2039  0009FC  6832               	setf	_mode,c	;volatile
  2040  0009FE                     l3705:
  2041                           
  2042                           ;main.c: 306: }
  2043  0009FE  5032               	movf	_mode,w,c	;volatile
  2044                           
  2045                           ; Switch size 1, requested type "space"
  2046                           ; Number of cases is 5, Range of values is 0 to 255
  2047                           ; switch strategies available:
  2048                           ; Name         Instructions Cycles
  2049                           ; simple_byte           16     9 (average)
  2050                           ;	Chosen strategy is simple_byte
  2051  000A00  0A00               	xorlw	0	; case 0
  2052  000A02  B4D8               	btfsc	status,2,c
  2053  000A04  D578               	goto	l399
  2054  000A06  0A01               	xorlw	1	; case 1
  2055  000A08  B4D8               	btfsc	status,2,c
  2056  000A0A  D59A               	goto	l400
  2057  000A0C  0A03               	xorlw	3	; case 2
  2058  000A0E  B4D8               	btfsc	status,2,c
  2059  000A10  D621               	goto	l408
  2060  000A12  0A01               	xorlw	1	; case 3
  2061  000A14  B4D8               	btfsc	status,2,c
  2062  000A16  D6DA               	goto	l418
  2063  000A18  0AFC               	xorlw	252	; case 255
  2064  000A1A  B4D8               	btfsc	status,2,c
  2065  000A1C  D4F1               	goto	l393
  2066  000A1E  D7EF               	goto	l3705
  2067  000A20                     __end_of_main:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           prodh	equ	0xFF4
  2071                           prodl	equ	0xFF3
  2072                           intcon	equ	0xFF2
  2073                           postinc0	equ	0xFEE
  2074                           wreg	equ	0xFE8
  2075                           indf1	equ	0xFE7
  2076                           plusw1	equ	0xFE3
  2077                           fsr1h	equ	0xFE2
  2078                           fsr1l	equ	0xFE1
  2079                           indf2	equ	0xFDF
  2080                           postinc2	equ	0xFDE
  2081                           postdec2	equ	0xFDD
  2082                           plusw2	equ	0xFDB
  2083                           fsr2h	equ	0xFDA
  2084                           fsr2l	equ	0xFD9
  2085                           status	equ	0xFD8
  2086                           
  2087 ;; *************** function _initTimer *****************
  2088 ;; Defined at:
  2089 ;;		line 8 in file "Movement.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, status,2
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2103 ;;      Params:         0       0       0       0
  2104 ;;      Locals:         0       0       0       0
  2105 ;;      Temps:          0       0       0       0
  2106 ;;      Totals:         0       0       0       0
  2107 ;;Total ram usage:        0 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    3
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text1
  2118  001C52                     __ptext1:
  2119                           	opt stack 0
  2120  001C52                     _initTimer:
  2121                           	opt stack 27
  2122                           
  2123                           ;Movement.c: 10: T0CONbits.TMR0ON=0;
  2124                           
  2125                           ;incstack = 0
  2126  001C52  9ED5               	bcf	4053,7,c	;volatile
  2127                           
  2128                           ;Movement.c: 11: T0CONbits.T016BIT=1;
  2129  001C54  8CD5               	bsf	4053,6,c	;volatile
  2130                           
  2131                           ;Movement.c: 12: T0CONbits.T0CS=0;
  2132  001C56  9AD5               	bcf	4053,5,c	;volatile
  2133                           
  2134                           ;Movement.c: 13: T0CONbits.PSA=0;
  2135  001C58  96D5               	bcf	4053,3,c	;volatile
  2136                           
  2137                           ;Movement.c: 14: T0CONbits.T0PS=0b010;
  2138  001C5A  50D5               	movf	4053,w,c	;volatile
  2139  001C5C  0BF8               	andlw	-8
  2140  001C5E  0902               	iorlw	2
  2141  001C60  6ED5               	movwf	4053,c	;volatile
  2142                           
  2143                           ;Movement.c: 17: INTCONbits.TMR0IE=1;
  2144  001C62  8AF2               	bsf	intcon,5,c	;volatile
  2145  001C64  0012               	return		;funcret
  2146  001C66                     __end_of_initTimer:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           prodh	equ	0xFF4
  2150                           prodl	equ	0xFF3
  2151                           intcon	equ	0xFF2
  2152                           postinc0	equ	0xFEE
  2153                           wreg	equ	0xFE8
  2154                           indf1	equ	0xFE7
  2155                           plusw1	equ	0xFE3
  2156                           fsr1h	equ	0xFE2
  2157                           fsr1l	equ	0xFE1
  2158                           indf2	equ	0xFDF
  2159                           postinc2	equ	0xFDE
  2160                           postdec2	equ	0xFDD
  2161                           plusw2	equ	0xFDB
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           status	equ	0xFD8
  2165                           
  2166 ;; *************** function _initRFID *****************
  2167 ;; Defined at:
  2168 ;;		line 7 in file "RFID_Reader.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;		None
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2182 ;;      Params:         0       0       0       0
  2183 ;;      Locals:         0       0       0       0
  2184 ;;      Temps:          0       0       0       0
  2185 ;;      Totals:         0       0       0       0
  2186 ;;Total ram usage:        0 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    3
  2189 ;; This function calls:
  2190 ;;		Nothing
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           	psect	text2
  2197  001C36                     __ptext2:
  2198                           	opt stack 0
  2199  001C36                     _initRFID:
  2200                           	opt stack 27
  2201                           
  2202                           ;RFID_Reader.c: 8: TRISC = TRISC | 0b11000000;
  2203                           
  2204                           ;incstack = 0
  2205  001C36  5094               	movf	3988,w,c	;volatile
  2206  001C38  09C0               	iorlw	192
  2207  001C3A  6E94               	movwf	3988,c	;volatile
  2208                           
  2209                           ;RFID_Reader.c: 12: SPBRG=205;
  2210  001C3C  0ECD               	movlw	205
  2211  001C3E  6EAF               	movwf	4015,c	;volatile
  2212                           
  2213                           ;RFID_Reader.c: 13: SPBRGH=0;
  2214  001C40  0E00               	movlw	0
  2215  001C42  6EB0               	movwf	4016,c	;volatile
  2216                           
  2217                           ;RFID_Reader.c: 14: BAUDCONbits.BRG16=1;
  2218  001C44  86AA               	bsf	4010,3,c	;volatile
  2219                           
  2220                           ;RFID_Reader.c: 15: TXSTAbits.BRGH=1;
  2221  001C46  84AC               	bsf	4012,2,c	;volatile
  2222                           
  2223                           ;RFID_Reader.c: 16: RCSTAbits.CREN=1;
  2224  001C48  88AB               	bsf	4011,4,c	;volatile
  2225                           
  2226                           ;RFID_Reader.c: 17: RCSTAbits.SPEN=1;
  2227  001C4A  8EAB               	bsf	4011,7,c	;volatile
  2228                           
  2229                           ;RFID_Reader.c: 18: TXSTAbits.SYNC=0;
  2230  001C4C  98AC               	bcf	4012,4,c	;volatile
  2231                           
  2232                           ;RFID_Reader.c: 19: RCSTAbits.RX9=0;
  2233  001C4E  9CAB               	bcf	4011,6,c	;volatile
  2234  001C50  0012               	return		;funcret
  2235  001C52                     __end_of_initRFID:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           prodh	equ	0xFF4
  2239                           prodl	equ	0xFF3
  2240                           intcon	equ	0xFF2
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           indf1	equ	0xFE7
  2244                           plusw1	equ	0xFE3
  2245                           fsr1h	equ	0xFE2
  2246                           fsr1l	equ	0xFE1
  2247                           indf2	equ	0xFDF
  2248                           postinc2	equ	0xFDE
  2249                           postdec2	equ	0xFDD
  2250                           plusw2	equ	0xFDB
  2251                           fsr2h	equ	0xFDA
  2252                           fsr2l	equ	0xFD9
  2253                           status	equ	0xFD8
  2254                           
  2255 ;; *************** function _initMotorPWM *****************
  2256 ;; Defined at:
  2257 ;;		line 4 in file "dc_motor.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;		None
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2271 ;;      Params:         0       0       0       0
  2272 ;;      Locals:         0       0       0       0
  2273 ;;      Temps:          0       0       0       0
  2274 ;;      Totals:         0       0       0       0
  2275 ;;Total ram usage:        0 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    3
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           	psect	text3
  2286  001A64                     __ptext3:
  2287                           	opt stack 0
  2288  001A64                     _initMotorPWM:
  2289                           	opt stack 27
  2290                           
  2291                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  2292                           
  2293                           ;incstack = 0
  2294  001A64  0E00               	movlw	0
  2295  001A66  6E7F               	movwf	3967,c	;volatile
  2296                           
  2297                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  2298  001A68  0E80               	movlw	128
  2299  001A6A  6E7E               	movwf	3966,c	;volatile
  2300                           
  2301                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  2302  001A6C  0E6F               	movlw	111
  2303  001A6E  6E6F               	movwf	3951,c	;volatile
  2304                           
  2305                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  2306  001A70  0E00               	movlw	0
  2307  001A72  6E6E               	movwf	3950,c	;volatile
  2308                           
  2309                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  2310  001A74  0EC7               	movlw	199
  2311  001A76  6E7B               	movwf	3963,c	;volatile
  2312                           
  2313                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  2314  001A78  0E00               	movlw	0
  2315  001A7A  6E7A               	movwf	3962,c	;volatile
  2316                           
  2317                           ;dc_motor.c: 13: PDC0L = 0<<2;
  2318  001A7C  0E00               	movlw	0
  2319  001A7E  6E79               	movwf	3961,c	;volatile
  2320                           
  2321                           ;dc_motor.c: 14: PDC0H = 0>>6;
  2322  001A80  0E00               	movlw	0
  2323  001A82  6E78               	movwf	3960,c	;volatile
  2324                           
  2325                           ;dc_motor.c: 15: PDC1L = 0<<2;
  2326  001A84  0E00               	movlw	0
  2327  001A86  6E77               	movwf	3959,c	;volatile
  2328                           
  2329                           ;dc_motor.c: 16: PDC1H = 0>>6;
  2330  001A88  0E00               	movlw	0
  2331  001A8A  6E76               	movwf	3958,c	;volatile
  2332                           
  2333                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  2334  001A8C  9093               	bcf	3987,0,c	;volatile
  2335                           
  2336                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  2337  001A8E  9293               	bcf	3987,1,c	;volatile
  2338                           
  2339                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  2340  001A90  9493               	bcf	3987,2,c	;volatile
  2341                           
  2342                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  2343  001A92  9693               	bcf	3987,3,c	;volatile
  2344                           
  2345                           ;dc_motor.c: 24: LATBbits.LATB0=0;
  2346  001A94  908A               	bcf	3978,0,c	;volatile
  2347                           
  2348                           ;dc_motor.c: 25: LATBbits.LATB1=0;
  2349  001A96  928A               	bcf	3978,1,c	;volatile
  2350                           
  2351                           ;dc_motor.c: 26: LATBbits.LATB2=0;
  2352  001A98  948A               	bcf	3978,2,c	;volatile
  2353                           
  2354                           ;dc_motor.c: 27: LATBbits.LATB3=0;
  2355  001A9A  968A               	bcf	3978,3,c	;volatile
  2356  001A9C  0012               	return		;funcret
  2357  001A9E                     __end_of_initMotorPWM:
  2358                           	opt stack 0
  2359                           tblptru	equ	0xFF8
  2360                           prodh	equ	0xFF4
  2361                           prodl	equ	0xFF3
  2362                           intcon	equ	0xFF2
  2363                           postinc0	equ	0xFEE
  2364                           wreg	equ	0xFE8
  2365                           indf1	equ	0xFE7
  2366                           plusw1	equ	0xFE3
  2367                           fsr1h	equ	0xFE2
  2368                           fsr1l	equ	0xFE1
  2369                           indf2	equ	0xFDF
  2370                           postinc2	equ	0xFDE
  2371                           postdec2	equ	0xFDD
  2372                           plusw2	equ	0xFDB
  2373                           fsr2h	equ	0xFDA
  2374                           fsr2l	equ	0xFD9
  2375                           status	equ	0xFD8
  2376                           
  2377 ;; *************** function _initLCD *****************
  2378 ;; Defined at:
  2379 ;;		line 38 in file "LCD.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;		None
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2393 ;;      Params:         0       0       0       0
  2394 ;;      Locals:         0       0       0       0
  2395 ;;      Temps:          0       1       0       0
  2396 ;;      Totals:         0       1       0       0
  2397 ;;Total ram usage:        1 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    6
  2400 ;; This function calls:
  2401 ;;		_LCDout
  2402 ;;		_SendLCD
  2403 ;; This function is called by:
  2404 ;;		_main
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           	psect	text4
  2409  0014B6                     __ptext4:
  2410                           	opt stack 0
  2411  0014B6                     _initLCD:
  2412                           	opt stack 24
  2413                           
  2414                           ;LCD.c: 44: TRISAbits.RA6=0;
  2415                           
  2416                           ;incstack = 0
  2417  0014B6  9C92               	bcf	3986,6,c	;volatile
  2418                           
  2419                           ;LCD.c: 45: TRISCbits.RC0=0;
  2420  0014B8  9094               	bcf	3988,0,c	;volatile
  2421                           
  2422                           ;LCD.c: 46: TRISCbits.RC1=0;
  2423  0014BA  9294               	bcf	3988,1,c	;volatile
  2424                           
  2425                           ;LCD.c: 47: TRISCbits.RC2=0;
  2426  0014BC  9494               	bcf	3988,2,c	;volatile
  2427                           
  2428                           ;LCD.c: 48: TRISDbits.RD0=0;
  2429  0014BE  9095               	bcf	3989,0,c	;volatile
  2430                           
  2431                           ;LCD.c: 49: TRISDbits.RD1=0;
  2432  0014C0  9295               	bcf	3989,1,c	;volatile
  2433                           
  2434                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  2435  0014C2  0E27               	movlw	39
  2436  0014C4  0100               	movlb	0	; () banked
  2437  0014C6  6F60               	movwf	??_initLCD& (0+255),b
  2438  0014C8  0EF5               	movlw	245
  2439  0014CA                     u3277:
  2440  0014CA  2EE8               	decfsz	wreg,f,c
  2441  0014CC  D7FE               	bra	u3277
  2442  0014CE  2F60               	decfsz	??_initLCD& (0+255),f,b
  2443  0014D0  D7FC               	bra	u3277
  2444                           
  2445                           ;LCD.c: 52: LCDout(0b0011);
  2446  0014D2  0E03               	movlw	3
  2447  0014D4  ECF8  F009         	call	_LCDout
  2448                           
  2449                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  2450  0014D8  0E0D               	movlw	13
  2451  0014DA  0100               	movlb	0	; () banked
  2452  0014DC  6F60               	movwf	??_initLCD& (0+255),b
  2453  0014DE  0EFB               	movlw	251
  2454  0014E0                     u3287:
  2455  0014E0  2EE8               	decfsz	wreg,f,c
  2456  0014E2  D7FE               	bra	u3287
  2457  0014E4  2F60               	decfsz	??_initLCD& (0+255),f,b
  2458  0014E6  D7FC               	bra	u3287
  2459  0014E8  D000               	nop2	
  2460                           
  2461                           ;LCD.c: 54: LCDout(0b0011);
  2462  0014EA  0E03               	movlw	3
  2463  0014EC  ECF8  F009         	call	_LCDout
  2464                           
  2465                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  2466  0014F0  0E85               	movlw	133
  2467  0014F2                     u3297:
  2468  0014F2  2EE8               	decfsz	wreg,f,c
  2469  0014F4  D7FE               	bra	u3297
  2470  0014F6  F000               	nop	
  2471                           
  2472                           ;LCD.c: 56: LCDout(0b0011);
  2473  0014F8  0E03               	movlw	3
  2474  0014FA  ECF8  F009         	call	_LCDout
  2475                           
  2476                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2477  0014FE  0E21               	movlw	33
  2478  001500                     u3307:
  2479  001500  2EE8               	decfsz	wreg,f,c
  2480  001502  D7FE               	bra	u3307
  2481  001504  F000               	nop	
  2482                           
  2483                           ;LCD.c: 58: LCDout(0b0010);
  2484  001506  0E02               	movlw	2
  2485  001508  ECF8  F009         	call	_LCDout
  2486                           
  2487                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2488  00150C  0E21               	movlw	33
  2489  00150E                     u3317:
  2490  00150E  2EE8               	decfsz	wreg,f,c
  2491  001510  D7FE               	bra	u3317
  2492  001512  F000               	nop	
  2493                           
  2494                           ;LCD.c: 62: SendLCD(0b00101000,0);
  2495  001514  0E00               	movlw	0
  2496  001516  6E30               	movwf	SendLCD@type,c
  2497  001518  0E28               	movlw	40
  2498  00151A  ECBD  F00D         	call	_SendLCD
  2499                           
  2500                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2501  00151E  0E21               	movlw	33
  2502  001520                     u3327:
  2503  001520  2EE8               	decfsz	wreg,f,c
  2504  001522  D7FE               	bra	u3327
  2505  001524  F000               	nop	
  2506                           
  2507                           ;LCD.c: 64: SendLCD(0b00001000,0);
  2508  001526  0E00               	movlw	0
  2509  001528  6E30               	movwf	SendLCD@type,c
  2510  00152A  0E08               	movlw	8
  2511  00152C  ECBD  F00D         	call	_SendLCD
  2512                           
  2513                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2514  001530  0E21               	movlw	33
  2515  001532                     u3337:
  2516  001532  2EE8               	decfsz	wreg,f,c
  2517  001534  D7FE               	bra	u3337
  2518  001536  F000               	nop	
  2519                           
  2520                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2521  001538  0E00               	movlw	0
  2522  00153A  6E30               	movwf	SendLCD@type,c
  2523  00153C  0E01               	movlw	1
  2524  00153E  ECBD  F00D         	call	_SendLCD
  2525                           
  2526                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2527  001542  0E0D               	movlw	13
  2528  001544  0100               	movlb	0	; () banked
  2529  001546  6F60               	movwf	??_initLCD& (0+255),b
  2530  001548  0EFB               	movlw	251
  2531  00154A                     u3347:
  2532  00154A  2EE8               	decfsz	wreg,f,c
  2533  00154C  D7FE               	bra	u3347
  2534  00154E  2F60               	decfsz	??_initLCD& (0+255),f,b
  2535  001550  D7FC               	bra	u3347
  2536  001552  D000               	nop2	
  2537                           
  2538                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2539  001554  0E00               	movlw	0
  2540  001556  6E30               	movwf	SendLCD@type,c
  2541  001558  0E06               	movlw	6
  2542  00155A  ECBD  F00D         	call	_SendLCD
  2543                           
  2544                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2545  00155E  0E21               	movlw	33
  2546  001560                     u3357:
  2547  001560  2EE8               	decfsz	wreg,f,c
  2548  001562  D7FE               	bra	u3357
  2549  001564  F000               	nop	
  2550                           
  2551                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2552  001566  0E00               	movlw	0
  2553  001568  6E30               	movwf	SendLCD@type,c
  2554  00156A  0E0C               	movlw	12
  2555  00156C  ECBD  F00D         	call	_SendLCD
  2556                           
  2557                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2558  001570  0E21               	movlw	33
  2559  001572                     u3367:
  2560  001572  2EE8               	decfsz	wreg,f,c
  2561  001574  D7FE               	bra	u3367
  2562  001576  F000               	nop	
  2563  001578  0012               	return		;funcret
  2564  00157A                     __end_of_initLCD:
  2565                           	opt stack 0
  2566                           tblptru	equ	0xFF8
  2567                           prodh	equ	0xFF4
  2568                           prodl	equ	0xFF3
  2569                           intcon	equ	0xFF2
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           indf1	equ	0xFE7
  2573                           plusw1	equ	0xFE3
  2574                           fsr1h	equ	0xFE2
  2575                           fsr1l	equ	0xFE1
  2576                           indf2	equ	0xFDF
  2577                           postinc2	equ	0xFDE
  2578                           postdec2	equ	0xFDD
  2579                           plusw2	equ	0xFDB
  2580                           fsr2h	equ	0xFDA
  2581                           fsr2l	equ	0xFD9
  2582                           status	equ	0xFD8
  2583                           
  2584 ;; *************** function _initIR *****************
  2585 ;; Defined at:
  2586 ;;		line 30 in file "IR_Reading.c"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;		None
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;		None
  2591 ;; Return value:  Size  Location     Type
  2592 ;;                  1    wreg      void 
  2593 ;; Registers used:
  2594 ;;		wreg, status,2
  2595 ;; Tracked objects:
  2596 ;;		On entry : 0/0
  2597 ;;		On exit  : 0/0
  2598 ;;		Unchanged: 0/0
  2599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2600 ;;      Params:         0       0       0       0
  2601 ;;      Locals:         0       0       0       0
  2602 ;;      Temps:          0       0       0       0
  2603 ;;      Totals:         0       0       0       0
  2604 ;;Total ram usage:        0 bytes
  2605 ;; Hardware stack levels used:    1
  2606 ;; Hardware stack levels required when called:    3
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_main
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	text5
  2615  001BF6                     __ptext5:
  2616                           	opt stack 0
  2617  001BF6                     _initIR:
  2618                           	opt stack 27
  2619                           
  2620                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2621                           
  2622                           ;incstack = 0
  2623  001BF6  9489               	bcf	3977,2,c	;volatile
  2624                           
  2625                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2626  001BF8  9689               	bcf	3977,3,c	;volatile
  2627                           
  2628                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2629  001BFA  8492               	bsf	3986,2,c	;volatile
  2630                           
  2631                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2632  001BFC  8692               	bsf	3986,3,c	;volatile
  2633                           
  2634                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2635  001BFE  94B8               	bcf	4024,2,c	;volatile
  2636                           
  2637                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2638  001C00  96B8               	bcf	4024,3,c	;volatile
  2639                           
  2640                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2641  001C02  9CB8               	bcf	4024,6,c	;volatile
  2642                           
  2643                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2644  001C04  9EB8               	bcf	4024,7,c	;volatile
  2645                           
  2646                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2647  001C06  0E06               	movlw	6
  2648  001C08  6E63               	movwf	3939,c	;volatile
  2649                           
  2650                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2651  001C0A  0E06               	movlw	6
  2652  001C0C  6E62               	movwf	3938,c	;volatile
  2653                           
  2654                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2655  001C0E  9096               	bcf	3990,0,c	;volatile
  2656                           
  2657                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2658  001C10  9296               	bcf	3990,1,c	;volatile
  2659                           
  2660                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2661  001C12  0E59               	movlw	89
  2662  001C14  6EB7               	movwf	4023,c	;volatile
  2663  001C16  0012               	return		;funcret
  2664  001C18                     __end_of_initIR:
  2665                           	opt stack 0
  2666                           tblptru	equ	0xFF8
  2667                           prodh	equ	0xFF4
  2668                           prodl	equ	0xFF3
  2669                           intcon	equ	0xFF2
  2670                           postinc0	equ	0xFEE
  2671                           wreg	equ	0xFE8
  2672                           indf1	equ	0xFE7
  2673                           plusw1	equ	0xFE3
  2674                           fsr1h	equ	0xFE2
  2675                           fsr1l	equ	0xFE1
  2676                           indf2	equ	0xFDF
  2677                           postinc2	equ	0xFDE
  2678                           postdec2	equ	0xFDD
  2679                           plusw2	equ	0xFDB
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _fullSpeedBack *****************
  2685 ;; Defined at:
  2686 ;;		line 138 in file "dc_motor.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  2689 ;;		 -> main@mL(9), 
  2690 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  2691 ;;		 -> main@mR(9), 
  2692 ;;  power           1   27[BANK0 ] unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2704 ;;      Params:         0       5       0       0
  2705 ;;      Locals:         0       0       0       0
  2706 ;;      Temps:          0       0       0       0
  2707 ;;      Totals:         0       5       0       0
  2708 ;;Total ram usage:        5 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    6
  2711 ;; This function calls:
  2712 ;;		_fullSpeed
  2713 ;; This function is called by:
  2714 ;;		_main
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text6
  2719  0019B0                     __ptext6:
  2720                           	opt stack 0
  2721  0019B0                     _fullSpeedBack:
  2722                           	opt stack 24
  2723                           
  2724                           ;dc_motor.c: 141: mL->direction=0;
  2725                           
  2726                           ;incstack = 0
  2727  0019B0  0100               	movlb	0	; () banked
  2728  0019B2  EE20 F001          	lfsr	2,1
  2729  0019B6  5177               	movf	fullSpeedBack@mL& (0+255),w,b
  2730  0019B8  26D9               	addwf	fsr2l,f,c
  2731  0019BA  5178               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2732  0019BC  22DA               	addwfc	fsr2h,f,c
  2733  0019BE  0E00               	movlw	0
  2734  0019C0  6EDF               	movwf	indf2,c
  2735                           
  2736                           ;dc_motor.c: 142: mR->direction=0;
  2737  0019C2  EE20 F001          	lfsr	2,1
  2738  0019C6  5179               	movf	fullSpeedBack@mR& (0+255),w,b
  2739  0019C8  26D9               	addwf	fsr2l,f,c
  2740  0019CA  517A               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2741  0019CC  22DA               	addwfc	fsr2h,f,c
  2742  0019CE  0E00               	movlw	0
  2743  0019D0  6EDF               	movwf	indf2,c
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;dc_motor.c: 143: fullSpeed(mL, mR, power);
  2747  0019D2  C077  F071         	movff	fullSpeedBack@mL,fullSpeed@mL
  2748  0019D6  C078  F072         	movff	fullSpeedBack@mL+1,fullSpeed@mL+1
  2749  0019DA  C079  F073         	movff	fullSpeedBack@mR,fullSpeed@mR
  2750  0019DE  C07A  F074         	movff	fullSpeedBack@mR+1,fullSpeed@mR+1
  2751  0019E2  C07B  F075         	movff	fullSpeedBack@power,fullSpeed@power
  2752  0019E6  ECA8  F00B         	call	_fullSpeed	;wreg free
  2753  0019EA  0012               	return		;funcret
  2754  0019EC                     __end_of_fullSpeedBack:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           prodh	equ	0xFF4
  2758                           prodl	equ	0xFF3
  2759                           intcon	equ	0xFF2
  2760                           postinc0	equ	0xFEE
  2761                           wreg	equ	0xFE8
  2762                           indf1	equ	0xFE7
  2763                           plusw1	equ	0xFE3
  2764                           fsr1h	equ	0xFE2
  2765                           fsr1l	equ	0xFE1
  2766                           indf2	equ	0xFDF
  2767                           postinc2	equ	0xFDE
  2768                           postdec2	equ	0xFDD
  2769                           plusw2	equ	0xFDB
  2770                           fsr2h	equ	0xFDA
  2771                           fsr2l	equ	0xFD9
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _enableSensor *****************
  2775 ;; Defined at:
  2776 ;;		line 106 in file "IR_Reading.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  sensor          1    wreg     unsigned char 
  2779 ;;  status          1   43[COMRAM] unsigned char 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  sensor          1   44[COMRAM] unsigned char 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      void 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2791 ;;      Params:         1       0       0       0
  2792 ;;      Locals:         1       0       0       0
  2793 ;;      Temps:          0       0       0       0
  2794 ;;      Totals:         2       0       0       0
  2795 ;;Total ram usage:        2 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    3
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text7
  2806  001BAA                     __ptext7:
  2807                           	opt stack 0
  2808  001BAA                     _enableSensor:
  2809                           	opt stack 27
  2810                           
  2811                           ;incstack = 0
  2812                           ;enableSensor@sensor stored from wreg
  2813  001BAA  6E2D               	movwf	enableSensor@sensor,c
  2814                           
  2815                           ;IR_Reading.c: 108: if (sensor==0){
  2816  001BAC  502D               	movf	enableSensor@sensor,w,c
  2817  001BAE  A4D8               	btfss	status,2,c
  2818  001BB0  D006               	goto	l120
  2819                           
  2820                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2821  001BB2  B02C               	btfsc	enableSensor@status,0,c
  2822  001BB4  D002               	bra	u1845
  2823  001BB6  908D               	bcf	3981,0,c	;volatile
  2824  001BB8  D001               	bra	u1846
  2825  001BBA                     u1845:
  2826  001BBA  808D               	bsf	3981,0,c	;volatile
  2827  001BBC                     u1846:
  2828                           
  2829                           ;IR_Reading.c: 110: } else if (sensor==1){
  2830  001BBC  0012               	return	
  2831  001BBE                     l120:
  2832  001BBE  042D               	decf	enableSensor@sensor,w,c
  2833  001BC0  A4D8               	btfss	status,2,c
  2834  001BC2  0012               	return	
  2835                           
  2836                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2837  001BC4  B02C               	btfsc	enableSensor@status,0,c
  2838  001BC6  D002               	bra	u1865
  2839  001BC8  928D               	bcf	3981,1,c	;volatile
  2840  001BCA  D001               	bra	u1866
  2841  001BCC                     u1865:
  2842  001BCC  828D               	bsf	3981,1,c	;volatile
  2843  001BCE                     u1866:
  2844  001BCE  0012               	return	
  2845  001BD0                     __end_of_enableSensor:
  2846                           	opt stack 0
  2847                           tblptru	equ	0xFF8
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           intcon	equ	0xFF2
  2851                           postinc0	equ	0xFEE
  2852                           wreg	equ	0xFE8
  2853                           indf1	equ	0xFE7
  2854                           plusw1	equ	0xFE3
  2855                           fsr1h	equ	0xFE2
  2856                           fsr1l	equ	0xFE1
  2857                           indf2	equ	0xFDF
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           plusw2	equ	0xFDB
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function _VerifySignal *****************
  2866 ;; Defined at:
  2867 ;;		line 39 in file "RFID_Reader.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  RecievedStri    2   43[COMRAM] PTR unsigned char 
  2870 ;;		 -> ReceivedString(16), 
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  hexByte         2   45[COMRAM] unsigned int 
  2873 ;;  i               1   48[COMRAM] unsigned char 
  2874 ;;  checksum        1   47[COMRAM] unsigned char 
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      unsigned char 
  2877 ;; Registers used:
  2878 ;;		wreg, status,2
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2884 ;;      Params:         2       0       0       0
  2885 ;;      Locals:         4       0       0       0
  2886 ;;      Temps:          0       0       0       0
  2887 ;;      Totals:         6       0       0       0
  2888 ;;Total ram usage:        6 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; Hardware stack levels required when called:    3
  2891 ;; This function calls:
  2892 ;;		Nothing
  2893 ;; This function is called by:
  2894 ;;		_main
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text8
  2899  001C66                     __ptext8:
  2900                           	opt stack 0
  2901  001C66                     _VerifySignal:
  2902                           	opt stack 27
  2903                           
  2904                           ;RFID_Reader.c: 40: unsigned char checksum=0;
  2905                           
  2906                           ;incstack = 0
  2907  001C66  0E00               	movlw	0
  2908  001C68  6E30               	movwf	VerifySignal@checksum,c
  2909                           
  2910                           ;RFID_Reader.c: 41: unsigned int hexByte=0;
  2911  001C6A  0E00               	movlw	0
  2912  001C6C  6E2F               	movwf	VerifySignal@hexByte+1,c
  2913  001C6E  0E00               	movlw	0
  2914  001C70  6E2E               	movwf	VerifySignal@hexByte,c
  2915                           
  2916                           ;RFID_Reader.c: 42: unsigned char i=0;
  2917  001C72  0E00               	movlw	0
  2918  001C74  6E31               	movwf	VerifySignal@i,c
  2919  001C76  0012               	return		;funcret
  2920  001C78                     __end_of_VerifySignal:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           prodh	equ	0xFF4
  2924                           prodl	equ	0xFF3
  2925                           intcon	equ	0xFF2
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           indf1	equ	0xFE7
  2929                           plusw1	equ	0xFE3
  2930                           fsr1h	equ	0xFE2
  2931                           fsr1l	equ	0xFE1
  2932                           indf2	equ	0xFDF
  2933                           postinc2	equ	0xFDE
  2934                           postdec2	equ	0xFDD
  2935                           plusw2	equ	0xFDB
  2936                           fsr2h	equ	0xFDA
  2937                           fsr2l	equ	0xFD9
  2938                           status	equ	0xFD8
  2939                           
  2940 ;; *************** function _ScanWithRange *****************
  2941 ;; Defined at:
  2942 ;;		line 98 in file "Movement.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  2945 ;;		 -> main@mL(9), 
  2946 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  2947 ;;		 -> main@mR(9), 
  2948 ;;  loops           2   32[BANK0 ] int 
  2949 ;;  MoveTime        2   34[BANK0 ] PTR int 
  2950 ;;		 -> main@MoveTime(100), 
  2951 ;;  Move            2   36[BANK0 ] PTR unsigned char 
  2952 ;;		 -> main@Move(1), 
  2953 ;;  MoveType        2   38[BANK0 ] PTR unsigned char 
  2954 ;;		 -> main@MoveType(50), 
  2955 ;;  RFID_Read       2   40[BANK0 ] PTR unsigned char 
  2956 ;;		 -> RFID_Read(1), 
  2957 ;;  millis          2   42[BANK0 ] PTR unsigned int 
  2958 ;;		 -> millis(2), 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  buf            40   48[BANK0 ] unsigned char [40]
  2961 ;;  SensorResult    4   98[BANK0 ] unsigned int [2]
  2962 ;;  RightFlag       2  103[BANK0 ] unsigned int 
  2963 ;;  TimeAboveThr    2   96[BANK0 ] unsigned int 
  2964 ;;  LeftFlag        2   94[BANK0 ] unsigned int 
  2965 ;;  DirectionFou    2   90[BANK0 ] const unsigned int 
  2966 ;;  i               2   88[BANK0 ] unsigned int 
  2967 ;;  LeftFlick       1  102[BANK0 ] const char 
  2968 ;;  MiniLeftFlic    1   93[BANK0 ] const unsigned char 
  2969 ;;  MotorPower      1   92[BANK0 ] const unsigned char 
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      unsigned char 
  2972 ;; Registers used:
  2973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2979 ;;      Params:         0      16       0       0
  2980 ;;      Locals:         0      57       0       0
  2981 ;;      Temps:          0       4       0       0
  2982 ;;      Totals:         0      77       0       0
  2983 ;;Total ram usage:       77 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    7
  2986 ;; This function calls:
  2987 ;;		_LCD_String
  2988 ;;		_SendLCD
  2989 ;;		_SetLine
  2990 ;;		_delay_tenth_s
  2991 ;;		_grabLeftIR
  2992 ;;		_grabRightIR
  2993 ;;		_sprintf
  2994 ;;		_stop
  2995 ;;		_turnLeft
  2996 ;;		_turnRight
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text9
  3003  000A20                     __ptext9:
  3004                           	opt stack 0
  3005  000A20                     _ScanWithRange:
  3006                           	opt stack 23
  3007                           
  3008                           ;Movement.c: 103: unsigned int SensorResult[2]={0,0};
  3009                           
  3010                           ;incstack = 0
  3011  000A20  C0CB  F0C2         	movff	ScanWithRange@F3555,ScanWithRange@SensorResult
  3012  000A24  C0CC  F0C3         	movff	ScanWithRange@F3555+1,ScanWithRange@SensorResult+1
  3013  000A28  C0CD  F0C4         	movff	ScanWithRange@F3555+2,ScanWithRange@SensorResult+2
  3014  000A2C  C0CE  F0C5         	movff	ScanWithRange@F3555+3,ScanWithRange@SensorResult+3
  3015                           
  3016                           ;Movement.c: 104: unsigned int LeftFlag=0;
  3017  000A30  0E00               	movlw	0
  3018  000A32  0100               	movlb	0	; () banked
  3019  000A34  6FBF               	movwf	(ScanWithRange@LeftFlag+1)& (0+255),b
  3020  000A36  0E00               	movlw	0
  3021  000A38  6FBE               	movwf	ScanWithRange@LeftFlag& (0+255),b
  3022                           
  3023                           ;Movement.c: 105: unsigned int RightFlag=0;
  3024  000A3A  0E00               	movlw	0
  3025  000A3C  6FC8               	movwf	(ScanWithRange@RightFlag+1)& (0+255),b
  3026  000A3E  0E00               	movlw	0
  3027  000A40  6FC7               	movwf	ScanWithRange@RightFlag& (0+255),b
  3028                           
  3029                           ;Movement.c: 106: char buf[40];
  3030                           ;Movement.c: 107: unsigned int i=0;
  3031  000A42  0E00               	movlw	0
  3032  000A44  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3033  000A46  0E00               	movlw	0
  3034  000A48  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3035                           
  3036                           ;Movement.c: 108: unsigned int TimeAboveThreshold=0;
  3037  000A4A  0E00               	movlw	0
  3038  000A4C  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3039  000A4E  0E00               	movlw	0
  3040  000A50  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3041                           
  3042                           ;Movement.c: 110: const unsigned int DirectionFoundThreshold=500;
  3043  000A52  0E01               	movlw	1
  3044  000A54  6FBB               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  3045  000A56  0EF4               	movlw	244
  3046  000A58  6FBA               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  3047                           
  3048                           ;Movement.c: 112: const unsigned char MotorPower=40;
  3049  000A5A  0E28               	movlw	40
  3050  000A5C  6FBC               	movwf	ScanWithRange@MotorPower& (0+255),b
  3051                           
  3052                           ;Movement.c: 114: const signed char LeftFlick=2;
  3053  000A5E  0E02               	movlw	2
  3054  000A60  6FC6               	movwf	ScanWithRange@LeftFlick& (0+255),b
  3055                           
  3056                           ;Movement.c: 118: const unsigned char MiniLeftFlick=1;
  3057  000A62  0E01               	movlw	1
  3058  000A64  6FBD               	movwf	ScanWithRange@MiniLeftFlick& (0+255),b
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;Movement.c: 124: (MoveType[*Move]) = 2;
  3062  000A66  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3063  000A6A  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3064  000A6E  50DF               	movf	indf2,w,c
  3065  000A70  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3066  000A72  518C               	movf	??_ScanWithRange& (0+255),w,b
  3067  000A74  0D01               	mullw	1
  3068  000A76  50F3               	movf	prodl,w,c
  3069  000A78  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3070  000A7A  6ED9               	movwf	fsr2l,c
  3071  000A7C  50F4               	movf	prodh,w,c
  3072  000A7E  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3073  000A80  6EDA               	movwf	fsr2h,c
  3074  000A82  0E02               	movlw	2
  3075  000A84  6EDF               	movwf	indf2,c
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;Movement.c: 125: (MoveTime[*Move]) = LeftFlick;
  3079  000A86  C0C6  F08C         	movff	ScanWithRange@LeftFlick,??_ScanWithRange
  3080  000A8A  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3081  000A8C  BF8C               	btfsc	??_ScanWithRange& (0+255),7,b
  3082  000A8E  078D               	decf	(??_ScanWithRange+1)& (0+255),f,b
  3083  000A90  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3084  000A94  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3085  000A98  50DF               	movf	indf2,w,c
  3086  000A9A  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3087  000A9C  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3088  000A9E  0D02               	mullw	2
  3089  000AA0  50F3               	movf	prodl,w,c
  3090  000AA2  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3091  000AA4  6ED9               	movwf	fsr2l,c
  3092  000AA6  50F4               	movf	prodh,w,c
  3093  000AA8  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3094  000AAA  6EDA               	movwf	fsr2h,c
  3095  000AAC  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3096  000AB0  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;Movement.c: 126: *Move = *Move+1;
  3100  000AB4  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3101  000AB8  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3102  000ABC  50DF               	movf	indf2,w,c
  3103  000ABE  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3104  000AC0  298C               	incf	??_ScanWithRange& (0+255),w,b
  3105  000AC2  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3106  000AC6  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3107  000ACA  6EDF               	movwf	indf2,c
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;Movement.c: 127: turnLeft(mL,mR, 100);
  3111  000ACC  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3112  000AD0  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3113  000AD4  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3114  000AD8  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3115  000ADC  0E64               	movlw	100
  3116  000ADE  6F7B               	movwf	turnLeft@power& (0+255),b
  3117  000AE0  EC14  F00D         	call	_turnLeft	;wreg free
  3118                           
  3119                           ;Movement.c: 128: delay_tenth_s(LeftFlick);
  3120  000AE4  0100               	movlb	0	; () banked
  3121  000AE6  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3122  000AE8  EC4F  F00D         	call	_delay_tenth_s
  3123                           
  3124                           ;Movement.c: 129: stop(mL,mR);
  3125  000AEC  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3126  000AF0  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3127  000AF4  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3128  000AF8  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3129  000AFC  EC1C  F00B         	call	_stop	;wreg free
  3130                           
  3131                           ;Movement.c: 132: turnRight(mL,mR, MotorPower);
  3132  000B00  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3133  000B04  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3134  000B08  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3135  000B0C  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3136  000B10  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnRight@power
  3137  000B14  ECF6  F00C         	call	_turnRight	;wreg free
  3138                           
  3139                           ;Movement.c: 135: TMR0L = 0;
  3140  000B18  0E00               	movlw	0
  3141  000B1A  6ED6               	movwf	4054,c	;volatile
  3142                           
  3143                           ;Movement.c: 136: TMR0H = 0;
  3144  000B1C  0E00               	movlw	0
  3145  000B1E  6ED7               	movwf	4055,c	;volatile
  3146                           
  3147                           ;Movement.c: 137: *millis = 0;
  3148  000B20  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3149  000B24  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3150  000B28  0E00               	movlw	0
  3151  000B2A  6EDE               	movwf	postinc2,c
  3152  000B2C  0E00               	movlw	0
  3153  000B2E  6EDD               	movwf	postdec2,c
  3154                           
  3155                           ;Movement.c: 138: T0CONbits.TMR0ON=1;
  3156  000B30  8ED5               	bsf	4053,7,c	;volatile
  3157                           
  3158                           ;Movement.c: 140: for (i=1; i<=loops; i++) {
  3159  000B32  0E00               	movlw	0
  3160  000B34  0100               	movlb	0	; () banked
  3161  000B36  6FB9               	movwf	(ScanWithRange@i+1)& (0+255),b
  3162  000B38  0E01               	movlw	1
  3163  000B3A  6FB8               	movwf	ScanWithRange@i& (0+255),b
  3164  000B3C  D1A0               	goto	l224
  3165  000B3E                     
  3166                           ; BSR set to: 0
  3167                           ;Movement.c: 143: SensorResult[0]=grabLeftIR();
  3168                           
  3169                           ; BSR set to: 0
  3170  000B3E  EC21  F00C         	call	_grabLeftIR	;wreg free
  3171  000B42  C02C  F0C2         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  3172  000B46  C02D  F0C3         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  3173                           
  3174                           ;Movement.c: 144: SensorResult[1]=grabRightIR();
  3175  000B4A  ECE6  F00B         	call	_grabRightIR	;wreg free
  3176  000B4E  C02C  F0C4         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  3177  000B52  C02D  F0C5         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  3178                           
  3179                           ;Movement.c: 148: CAP1BUFH=0;
  3180  000B56  0E00               	movlw	0
  3181  000B58  6E69               	movwf	3945,c	;volatile
  3182                           
  3183                           ;Movement.c: 149: CAP1BUFL=0;
  3184  000B5A  0E00               	movlw	0
  3185  000B5C  6E68               	movwf	3944,c	;volatile
  3186                           
  3187                           ;Movement.c: 150: CAP2BUFH=0;
  3188  000B5E  0E00               	movlw	0
  3189  000B60  6E67               	movwf	3943,c	;volatile
  3190                           
  3191                           ;Movement.c: 151: CAP2BUFL=0;
  3192  000B62  0E00               	movlw	0
  3193  000B64  6E66               	movwf	3942,c	;volatile
  3194                           
  3195                           ;Movement.c: 155: SendLCD(0b00000001,0);
  3196  000B66  0E00               	movlw	0
  3197  000B68  6E30               	movwf	SendLCD@type,c
  3198  000B6A  0E01               	movlw	1
  3199  000B6C  ECBD  F00D         	call	_SendLCD
  3200                           
  3201                           ;Movement.c: 156: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3202  000B70  0E21               	movlw	33
  3203  000B72                     u3377:
  3204  000B72  2EE8               	decfsz	wreg,f,c
  3205  000B74  D7FE               	bra	u3377
  3206  000B76  F000               	nop	
  3207                           
  3208                           ;Movement.c: 157: SendLCD(0b00000010,0);
  3209  000B78  0E00               	movlw	0
  3210  000B7A  6E30               	movwf	SendLCD@type,c
  3211  000B7C  0E02               	movlw	2
  3212  000B7E  ECBD  F00D         	call	_SendLCD
  3213                           
  3214                           ;Movement.c: 158: _delay((unsigned long)((2)*(8000000/4000.0)));
  3215  000B82  0E06               	movlw	6
  3216  000B84  0100               	movlb	0	; () banked
  3217  000B86  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3218  000B88  0E30               	movlw	48
  3219  000B8A                     u3387:
  3220  000B8A  2EE8               	decfsz	wreg,f,c
  3221  000B8C  D7FE               	bra	u3387
  3222  000B8E  2F8C               	decfsz	??_ScanWithRange& (0+255),f,b
  3223  000B90  D7FC               	bra	u3387
  3224  000B92  F000               	nop	
  3225                           
  3226                           ;Movement.c: 159: SetLine(1);
  3227  000B94  0E01               	movlw	1
  3228  000B96  ECA2  F00D         	call	_SetLine
  3229                           
  3230                           ;Movement.c: 160: LCD_String("     ScanIR");
  3231  000B9A  0E2D               	movlw	low STR_1
  3232  000B9C  0100               	movlb	0	; () banked
  3233  000B9E  6F60               	movwf	LCD_String@string& (0+255),b
  3234  000BA0  0E03               	movlw	high STR_1
  3235  000BA2  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3236  000BA4  EC5C  F00C         	call	_LCD_String	;wreg free
  3237                           
  3238                           ;Movement.c: 161: SetLine(2);
  3239  000BA8  0E02               	movlw	2
  3240  000BAA  ECA2  F00D         	call	_SetLine
  3241                           
  3242                           ;Movement.c: 162: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3243  000BAE  0E90               	movlw	low ScanWithRange@buf
  3244  000BB0  0100               	movlb	0	; () banked
  3245  000BB2  6F67               	movwf	sprintf@sp& (0+255),b
  3246  000BB4  0E00               	movlw	high ScanWithRange@buf
  3247  000BB6  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  3248  000BB8  0E0C               	movlw	low (STR_6+1)
  3249  000BBA  6F69               	movwf	sprintf@f& (0+255),b
  3250  000BBC  0E03               	movlw	high (STR_6+1)
  3251  000BBE  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  3252  000BC0  C0C2  F06B         	movff	ScanWithRange@SensorResult,?_sprintf+4
  3253  000BC4  C0C3  F06C         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  3254  000BC8  C0C4  F06D         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  3255  000BCC  C0C5  F06E         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  3256  000BD0  EC8F  F007         	call	_sprintf	;wreg free
  3257                           
  3258                           ;Movement.c: 163: LCD_String(buf);
  3259  000BD4  0E90               	movlw	low ScanWithRange@buf
  3260  000BD6  0100               	movlb	0	; () banked
  3261  000BD8  6F60               	movwf	LCD_String@string& (0+255),b
  3262  000BDA  0E00               	movlw	high ScanWithRange@buf
  3263  000BDC  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  3264  000BDE  EC5C  F00C         	call	_LCD_String	;wreg free
  3265                           
  3266                           ;Movement.c: 167: if (SensorResult[1]>DirectionFoundThreshold) {
  3267  000BE2  0100               	movlb	0	; () banked
  3268  000BE4  51C4               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  3269  000BE6  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3270  000BE8  51C5               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  3271  000BEA  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3272  000BEC  B0D8               	btfsc	status,0,c
  3273  000BEE  D008               	goto	l226
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;Movement.c: 168: RightFlag=*millis;
  3277  000BF0  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3278  000BF4  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3279  000BF8  CFDE F0C7          	movff	postinc2,ScanWithRange@RightFlag
  3280  000BFC  CFDD F0C8          	movff	postdec2,ScanWithRange@RightFlag+1
  3281  000C00                     l226:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;Movement.c: 169: }
  3285                           ;Movement.c: 171: if (SensorResult[0]>DirectionFoundThreshold) {
  3286                           
  3287                           ; BSR set to: 0
  3288  000C00  51C2               	movf	ScanWithRange@SensorResult& (0+255),w,b
  3289  000C02  5DBA               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  3290  000C04  51C3               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  3291  000C06  59BB               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  3292  000C08  B0D8               	btfsc	status,0,c
  3293  000C0A  D008               	goto	l227
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;Movement.c: 172: LeftFlag=*millis;
  3297  000C0C  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3298  000C10  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3299  000C14  CFDE F0BE          	movff	postinc2,ScanWithRange@LeftFlag
  3300  000C18  CFDD F0BF          	movff	postdec2,ScanWithRange@LeftFlag+1
  3301  000C1C                     l227:
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;Movement.c: 173: }
  3305                           ;Movement.c: 180: if (LeftFlag>0) {
  3306                           
  3307                           ; BSR set to: 0
  3308  000C1C  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3309  000C1E  11BF               	iorwf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3310  000C20  B4D8               	btfsc	status,2,c
  3311  000C22  D122               	goto	l234
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;Movement.c: 183: if (RightFlag>0) {
  3315  000C24  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3316  000C26  11C8               	iorwf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3317  000C28  B4D8               	btfsc	status,2,c
  3318  000C2A  D08A               	goto	l229
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;Movement.c: 184: TimeAboveThreshold=LeftFlag-RightFlag;
  3322  000C2C  C0C7  F08C         	movff	ScanWithRange@RightFlag,??_ScanWithRange
  3323  000C30  C0C8  F08D         	movff	ScanWithRange@RightFlag+1,??_ScanWithRange+1
  3324  000C34  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3325  000C36  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3326  000C38  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3327  000C3A  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3328  000C3C  51BE               	movf	ScanWithRange@LeftFlag& (0+255),w,b
  3329  000C3E  258C               	addwf	??_ScanWithRange& (0+255),w,b
  3330  000C40  6FC0               	movwf	ScanWithRange@TimeAboveThreshold& (0+255),b
  3331  000C42  51BF               	movf	(ScanWithRange@LeftFlag+1)& (0+255),w,b
  3332  000C44  218D               	addwfc	(??_ScanWithRange+1)& (0+255),w,b
  3333  000C46  6FC1               	movwf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),b
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;Movement.c: 185: TMR0L = 0;
  3337  000C48  0E00               	movlw	0
  3338  000C4A  6ED6               	movwf	4054,c	;volatile
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;Movement.c: 186: TMR0H = 0;
  3342  000C4C  0E00               	movlw	0
  3343  000C4E  6ED7               	movwf	4055,c	;volatile
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;Movement.c: 187: *millis = 0;
  3347  000C50  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3348  000C54  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3349  000C58  0E00               	movlw	0
  3350  000C5A  6EDE               	movwf	postinc2,c
  3351  000C5C  0E00               	movlw	0
  3352  000C5E  6EDD               	movwf	postdec2,c
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;Movement.c: 188: stop(mL,mR);
  3356  000C60  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3357  000C64  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3358  000C68  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3359  000C6C  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3360  000C70  EC1C  F00B         	call	_stop	;wreg free
  3361                           
  3362                           ;Movement.c: 189: while (*millis<(TimeAboveThreshold>>1)) {
  3363  000C74  D00C               	goto	l230
  3364  000C76                     
  3365                           ;Movement.c: 190: turnLeft(mL,mR, MotorPower);
  3366  000C76  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3367  000C7A  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3368  000C7E  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3369  000C82  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3370  000C86  C0BC  F07B         	movff	ScanWithRange@MotorPower,turnLeft@power
  3371  000C8A  EC14  F00D         	call	_turnLeft	;wreg free
  3372  000C8E                     l230:
  3373  000C8E  90D8               	bcf	status,0,c
  3374  000C90  0100               	movlb	0	; () banked
  3375  000C92  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3376  000C94  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3377  000C96  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3378  000C98  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3379  000C9A  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3380  000C9E  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3381  000CA2  518C               	movf	??_ScanWithRange& (0+255),w,b
  3382  000CA4  5CDE               	subwf	postinc2,w,c
  3383  000CA6  518D               	movf	(??_ScanWithRange+1)& (0+255),w,b
  3384  000CA8  58DE               	subwfb	postinc2,w,c
  3385  000CAA  A0D8               	btfss	status,0,c
  3386  000CAC  D7E4               	goto	l231
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;Movement.c: 191: }
  3390                           ;Movement.c: 192: T0CONbits.TMR0ON=0;
  3391  000CAE  9ED5               	bcf	4053,7,c	;volatile
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;Movement.c: 193: stop(mL,mR);
  3395  000CB0  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3396  000CB4  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3397  000CB8  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3398  000CBC  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3399  000CC0  EC1C  F00B         	call	_stop	;wreg free
  3400                           
  3401                           ;Movement.c: 195: (MoveType[*Move]) = 1;
  3402  000CC4  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3403  000CC8  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3404  000CCC  50DF               	movf	indf2,w,c
  3405  000CCE  0100               	movlb	0	; () banked
  3406  000CD0  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3407  000CD2  518C               	movf	??_ScanWithRange& (0+255),w,b
  3408  000CD4  0D01               	mullw	1
  3409  000CD6  50F3               	movf	prodl,w,c
  3410  000CD8  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3411  000CDA  6ED9               	movwf	fsr2l,c
  3412  000CDC  50F4               	movf	prodh,w,c
  3413  000CDE  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3414  000CE0  6EDA               	movwf	fsr2h,c
  3415  000CE2  0E01               	movlw	1
  3416  000CE4  6EDF               	movwf	indf2,c
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;Movement.c: 196: (MoveTime[*Move]) = -(RightFlag + (TimeAboveThreshold>>1));
  3420  000CE6  90D8               	bcf	status,0,c
  3421  000CE8  31C1               	rrcf	(ScanWithRange@TimeAboveThreshold+1)& (0+255),w,b
  3422  000CEA  6F8D               	movwf	(??_ScanWithRange+1)& (0+255),b
  3423  000CEC  31C0               	rrcf	ScanWithRange@TimeAboveThreshold& (0+255),w,b
  3424  000CEE  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3425  000CF0  51C7               	movf	ScanWithRange@RightFlag& (0+255),w,b
  3426  000CF2  278C               	addwf	??_ScanWithRange& (0+255),f,b
  3427  000CF4  51C8               	movf	(ScanWithRange@RightFlag+1)& (0+255),w,b
  3428  000CF6  238D               	addwfc	(??_ScanWithRange+1)& (0+255),f,b
  3429  000CF8  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3430  000CFA  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3431  000CFC  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3432  000CFE  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3433  000D00  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3434  000D04  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3435  000D08  50DF               	movf	indf2,w,c
  3436  000D0A  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3437  000D0C  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3438  000D0E  0D02               	mullw	2
  3439  000D10  50F3               	movf	prodl,w,c
  3440  000D12  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3441  000D14  6ED9               	movwf	fsr2l,c
  3442  000D16  50F4               	movf	prodh,w,c
  3443  000D18  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3444  000D1A  6EDA               	movwf	fsr2h,c
  3445  000D1C  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3446  000D20  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;Movement.c: 197: *Move = *Move+1;
  3450  000D24  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3451  000D28  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3452  000D2C  50DF               	movf	indf2,w,c
  3453  000D2E  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3454  000D30  298C               	incf	??_ScanWithRange& (0+255),w,b
  3455  000D32  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3456  000D36  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3457  000D3A  6EDF               	movwf	indf2,c
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;Movement.c: 199: return 2;
  3461  000D3C  0E02               	movlw	2
  3462                           
  3463                           ; BSR set to: 0
  3464  000D3E  0012               	return	
  3465  000D40                     l229:
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;Movement.c: 201: T0CONbits.TMR0ON=0;
  3469  000D40  9ED5               	bcf	4053,7,c	;volatile
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;Movement.c: 205: (MoveType[*Move]) = 1;
  3473  000D42  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3474  000D46  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3475  000D4A  50DF               	movf	indf2,w,c
  3476  000D4C  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3477  000D4E  518C               	movf	??_ScanWithRange& (0+255),w,b
  3478  000D50  0D01               	mullw	1
  3479  000D52  50F3               	movf	prodl,w,c
  3480  000D54  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3481  000D56  6ED9               	movwf	fsr2l,c
  3482  000D58  50F4               	movf	prodh,w,c
  3483  000D5A  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3484  000D5C  6EDA               	movwf	fsr2h,c
  3485  000D5E  0E01               	movlw	1
  3486  000D60  6EDF               	movwf	indf2,c
  3487                           
  3488                           ;Movement.c: 206: (MoveTime[*Move]) = -(*millis);
  3489  000D62  C08A  FFD9         	movff	ScanWithRange@millis,fsr2l
  3490  000D66  C08B  FFDA         	movff	ScanWithRange@millis+1,fsr2h
  3491  000D6A  CFDE F08C          	movff	postinc2,??_ScanWithRange
  3492  000D6E  CFDD F08D          	movff	postdec2,??_ScanWithRange+1
  3493  000D72  1F8C               	comf	??_ScanWithRange& (0+255),f,b
  3494  000D74  1F8D               	comf	(??_ScanWithRange+1)& (0+255),f,b
  3495  000D76  4B8C               	infsnz	??_ScanWithRange& (0+255),f,b
  3496  000D78  2B8D               	incf	(??_ScanWithRange+1)& (0+255),f,b
  3497  000D7A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3498  000D7E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3499  000D82  50DF               	movf	indf2,w,c
  3500  000D84  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3501  000D86  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3502  000D88  0D02               	mullw	2
  3503  000D8A  50F3               	movf	prodl,w,c
  3504  000D8C  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3505  000D8E  6ED9               	movwf	fsr2l,c
  3506  000D90  50F4               	movf	prodh,w,c
  3507  000D92  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3508  000D94  6EDA               	movwf	fsr2h,c
  3509  000D96  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3510  000D9A  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;Movement.c: 207: *Move = *Move+1;
  3514  000D9E  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3515  000DA2  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3516  000DA6  50DF               	movf	indf2,w,c
  3517  000DA8  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3518  000DAA  298C               	incf	??_ScanWithRange& (0+255),w,b
  3519  000DAC  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3520  000DB0  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3521  000DB4  6EDF               	movwf	indf2,c
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;Movement.c: 208: stop(mL,mR);
  3525  000DB6  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3526  000DBA  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3527  000DBE  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3528  000DC2  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3529  000DC6  EC1C  F00B         	call	_stop	;wreg free
  3530                           
  3531                           ;Movement.c: 211: turnLeft(mL,mR,100);
  3532  000DCA  C07C  F077         	movff	ScanWithRange@mL,turnLeft@mL
  3533  000DCE  C07D  F078         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3534  000DD2  C07E  F079         	movff	ScanWithRange@mR,turnLeft@mR
  3535  000DD6  C07F  F07A         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3536  000DDA  0E64               	movlw	100
  3537  000DDC  0100               	movlb	0	; () banked
  3538  000DDE  6F7B               	movwf	turnLeft@power& (0+255),b
  3539  000DE0  EC14  F00D         	call	_turnLeft	;wreg free
  3540                           
  3541                           ;Movement.c: 212: delay_tenth_s(MiniLeftFlick);
  3542  000DE4  0100               	movlb	0	; () banked
  3543  000DE6  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3544  000DE8  EC4F  F00D         	call	_delay_tenth_s
  3545                           
  3546                           ;Movement.c: 213: stop(mL,mR);
  3547  000DEC  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3548  000DF0  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3549  000DF4  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3550  000DF8  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3551  000DFC  EC1C  F00B         	call	_stop	;wreg free
  3552                           
  3553                           ;Movement.c: 214: (MoveType[*Move]) = 2;
  3554  000E00  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3555  000E04  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3556  000E08  50DF               	movf	indf2,w,c
  3557  000E0A  0100               	movlb	0	; () banked
  3558  000E0C  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3559  000E0E  518C               	movf	??_ScanWithRange& (0+255),w,b
  3560  000E10  0D01               	mullw	1
  3561  000E12  50F3               	movf	prodl,w,c
  3562  000E14  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3563  000E16  6ED9               	movwf	fsr2l,c
  3564  000E18  50F4               	movf	prodh,w,c
  3565  000E1A  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3566  000E1C  6EDA               	movwf	fsr2h,c
  3567  000E1E  0E02               	movlw	2
  3568  000E20  6EDF               	movwf	indf2,c
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;Movement.c: 215: (MoveTime[*Move]) = MiniLeftFlick;
  3572  000E22  51BD               	movf	ScanWithRange@MiniLeftFlick& (0+255),w,b
  3573  000E24  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3574  000E26  6B8D               	clrf	(??_ScanWithRange+1)& (0+255),b
  3575  000E28  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3576  000E2C  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3577  000E30  50DF               	movf	indf2,w,c
  3578  000E32  6F8E               	movwf	(??_ScanWithRange+2)& (0+255),b
  3579  000E34  518E               	movf	(??_ScanWithRange+2)& (0+255),w,b
  3580  000E36  0D02               	mullw	2
  3581  000E38  50F3               	movf	prodl,w,c
  3582  000E3A  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3583  000E3C  6ED9               	movwf	fsr2l,c
  3584  000E3E  50F4               	movf	prodh,w,c
  3585  000E40  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3586  000E42  6EDA               	movwf	fsr2h,c
  3587  000E44  C08C  FFDE         	movff	??_ScanWithRange,postinc2
  3588  000E48  C08D  FFDD         	movff	??_ScanWithRange+1,postdec2
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;Movement.c: 216: *Move = *Move+1;
  3592  000E4C  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3593  000E50  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3594  000E54  50DF               	movf	indf2,w,c
  3595  000E56  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3596  000E58  298C               	incf	??_ScanWithRange& (0+255),w,b
  3597  000E5A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3598  000E5E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3599  000E62  6EDF               	movwf	indf2,c
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;Movement.c: 219: return 2;
  3603  000E64  0E02               	movlw	2
  3604                           
  3605                           ; BSR set to: 0
  3606  000E66  0012               	return	
  3607  000E68                     l234:
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;Movement.c: 220: }
  3611                           ;Movement.c: 221: }
  3612                           ;Movement.c: 223: if (*RFID_Read==1) {
  3613                           
  3614                           ; BSR set to: 0
  3615                           
  3616                           ; BSR set to: 0
  3617  000E68  C088  FFD9         	movff	ScanWithRange@RFID_Read,fsr2l
  3618  000E6C  C089  FFDA         	movff	ScanWithRange@RFID_Read+1,fsr2h
  3619  000E70  04DE               	decf	postinc2,w,c
  3620  000E72  A4D8               	btfss	status,2,c
  3621  000E74  D002               	goto	l235
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;Movement.c: 224: return 2;
  3625  000E76  0E02               	movlw	2
  3626                           
  3627                           ; BSR set to: 0
  3628  000E78  0012               	return	
  3629  000E7A                     l235:
  3630                           
  3631                           ; BSR set to: 0
  3632                           
  3633                           ; BSR set to: 0
  3634  000E7A  4BB8               	infsnz	ScanWithRange@i& (0+255),f,b
  3635  000E7C  2BB9               	incf	(ScanWithRange@i+1)& (0+255),f,b
  3636  000E7E                     l224:
  3637                           
  3638                           ; BSR set to: 0
  3639                           
  3640                           ; BSR set to: 0
  3641  000E7E  51B8               	movf	ScanWithRange@i& (0+255),w,b
  3642  000E80  5D80               	subwf	ScanWithRange@loops& (0+255),w,b
  3643  000E82  51B9               	movf	(ScanWithRange@i+1)& (0+255),w,b
  3644  000E84  5981               	subwfb	(ScanWithRange@loops+1)& (0+255),w,b
  3645  000E86  B0D8               	btfsc	status,0,c
  3646  000E88  D65A               	goto	l225
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;Movement.c: 225: }
  3650                           ;Movement.c: 226: }
  3651                           ;Movement.c: 231: (MoveType[*Move]) = 2;
  3652                           
  3653                           ; BSR set to: 0
  3654  000E8A  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3655  000E8E  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3656  000E92  50DF               	movf	indf2,w,c
  3657  000E94  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3658  000E96  518C               	movf	??_ScanWithRange& (0+255),w,b
  3659  000E98  0D01               	mullw	1
  3660  000E9A  50F3               	movf	prodl,w,c
  3661  000E9C  2586               	addwf	ScanWithRange@MoveType& (0+255),w,b
  3662  000E9E  6ED9               	movwf	fsr2l,c
  3663  000EA0  50F4               	movf	prodh,w,c
  3664  000EA2  2187               	addwfc	(ScanWithRange@MoveType+1)& (0+255),w,b
  3665  000EA4  6EDA               	movwf	fsr2h,c
  3666  000EA6  0E02               	movlw	2
  3667  000EA8  6EDF               	movwf	indf2,c
  3668                           
  3669                           ;Movement.c: 232: (MoveTime[*Move]) = -2;
  3670  000EAA  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3671  000EAE  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3672  000EB2  50DF               	movf	indf2,w,c
  3673  000EB4  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3674  000EB6  518C               	movf	??_ScanWithRange& (0+255),w,b
  3675  000EB8  0D02               	mullw	2
  3676  000EBA  50F3               	movf	prodl,w,c
  3677  000EBC  2582               	addwf	ScanWithRange@MoveTime& (0+255),w,b
  3678  000EBE  6ED9               	movwf	fsr2l,c
  3679  000EC0  50F4               	movf	prodh,w,c
  3680  000EC2  2183               	addwfc	(ScanWithRange@MoveTime+1)& (0+255),w,b
  3681  000EC4  6EDA               	movwf	fsr2h,c
  3682  000EC6  0EFE               	movlw	254
  3683  000EC8  6EDE               	movwf	postinc2,c
  3684  000ECA  0EFF               	movlw	255
  3685  000ECC  6EDD               	movwf	postdec2,c
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;Movement.c: 233: *Move = *Move+1;
  3689  000ECE  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3690  000ED2  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3691  000ED6  50DF               	movf	indf2,w,c
  3692  000ED8  6F8C               	movwf	??_ScanWithRange& (0+255),b
  3693  000EDA  298C               	incf	??_ScanWithRange& (0+255),w,b
  3694  000EDC  C084  FFD9         	movff	ScanWithRange@Move,fsr2l
  3695  000EE0  C085  FFDA         	movff	ScanWithRange@Move+1,fsr2h
  3696  000EE4  6EDF               	movwf	indf2,c
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;Movement.c: 234: turnRight(mL,mR, 100);
  3700  000EE6  C07C  F077         	movff	ScanWithRange@mL,turnRight@mL
  3701  000EEA  C07D  F078         	movff	ScanWithRange@mL+1,turnRight@mL+1
  3702  000EEE  C07E  F079         	movff	ScanWithRange@mR,turnRight@mR
  3703  000EF2  C07F  F07A         	movff	ScanWithRange@mR+1,turnRight@mR+1
  3704  000EF6  0E64               	movlw	100
  3705  000EF8  6F7B               	movwf	turnRight@power& (0+255),b
  3706  000EFA  ECF6  F00C         	call	_turnRight	;wreg free
  3707                           
  3708                           ;Movement.c: 235: delay_tenth_s(LeftFlick);
  3709  000EFE  0100               	movlb	0	; () banked
  3710  000F00  51C6               	movf	ScanWithRange@LeftFlick& (0+255),w,b
  3711  000F02  EC4F  F00D         	call	_delay_tenth_s
  3712                           
  3713                           ;Movement.c: 236: stop(mL,mR);
  3714  000F06  C07C  F071         	movff	ScanWithRange@mL,stop@mL
  3715  000F0A  C07D  F072         	movff	ScanWithRange@mL+1,stop@mL+1
  3716  000F0E  C07E  F073         	movff	ScanWithRange@mR,stop@mR
  3717  000F12  C07F  F074         	movff	ScanWithRange@mR+1,stop@mR+1
  3718  000F16  EC1C  F00B         	call	_stop	;wreg free
  3719                           
  3720                           ;Movement.c: 237: return -1;
  3721  000F1A  0EFF               	movlw	255
  3722  000F1C  0012               	return	
  3723  000F1E                     __end_of_ScanWithRange:
  3724                           	opt stack 0
  3725                           tblptru	equ	0xFF8
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           intcon	equ	0xFF2
  3729                           postinc0	equ	0xFEE
  3730                           wreg	equ	0xFE8
  3731                           indf1	equ	0xFE7
  3732                           plusw1	equ	0xFE3
  3733                           fsr1h	equ	0xFE2
  3734                           fsr1l	equ	0xFE1
  3735                           indf2	equ	0xFDF
  3736                           postinc2	equ	0xFDE
  3737                           postdec2	equ	0xFDD
  3738                           plusw2	equ	0xFDB
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           
  3743 ;; *************** function _turnRight *****************
  3744 ;; Defined at:
  3745 ;;		line 103 in file "dc_motor.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3748 ;;		 -> main@mL(9), 
  3749 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3750 ;;		 -> main@mR(9), 
  3751 ;;  power           1   27[BANK0 ] unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3763 ;;      Params:         0       5       0       0
  3764 ;;      Locals:         0       0       0       0
  3765 ;;      Temps:          0       0       0       0
  3766 ;;      Totals:         0       5       0       0
  3767 ;;Total ram usage:        5 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    6
  3770 ;; This function calls:
  3771 ;;		_fullSpeed
  3772 ;; This function is called by:
  3773 ;;		_ScanWithRange
  3774 ;;		_main
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text10
  3779  0019EC                     __ptext10:
  3780                           	opt stack 0
  3781  0019EC                     _turnRight:
  3782                           	opt stack 24
  3783                           
  3784                           ;dc_motor.c: 107: mL->direction=0;
  3785                           
  3786                           ;incstack = 0
  3787  0019EC  0100               	movlb	0	; () banked
  3788  0019EE  EE20 F001          	lfsr	2,1
  3789  0019F2  5177               	movf	turnRight@mL& (0+255),w,b
  3790  0019F4  26D9               	addwf	fsr2l,f,c
  3791  0019F6  5178               	movf	(turnRight@mL+1)& (0+255),w,b
  3792  0019F8  22DA               	addwfc	fsr2h,f,c
  3793  0019FA  0E00               	movlw	0
  3794  0019FC  6EDF               	movwf	indf2,c
  3795                           
  3796                           ;dc_motor.c: 108: mR->direction=1;
  3797  0019FE  EE20 F001          	lfsr	2,1
  3798  001A02  5179               	movf	turnRight@mR& (0+255),w,b
  3799  001A04  26D9               	addwf	fsr2l,f,c
  3800  001A06  517A               	movf	(turnRight@mR+1)& (0+255),w,b
  3801  001A08  22DA               	addwfc	fsr2h,f,c
  3802  001A0A  0E01               	movlw	1
  3803  001A0C  6EDF               	movwf	indf2,c
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;dc_motor.c: 109: fullSpeed(mL, mR, power);
  3807  001A0E  C077  F071         	movff	turnRight@mL,fullSpeed@mL
  3808  001A12  C078  F072         	movff	turnRight@mL+1,fullSpeed@mL+1
  3809  001A16  C079  F073         	movff	turnRight@mR,fullSpeed@mR
  3810  001A1A  C07A  F074         	movff	turnRight@mR+1,fullSpeed@mR+1
  3811  001A1E  C07B  F075         	movff	turnRight@power,fullSpeed@power
  3812  001A22  ECA8  F00B         	call	_fullSpeed	;wreg free
  3813  001A26  0012               	return		;funcret
  3814  001A28                     __end_of_turnRight:
  3815                           	opt stack 0
  3816                           tblptru	equ	0xFF8
  3817                           prodh	equ	0xFF4
  3818                           prodl	equ	0xFF3
  3819                           intcon	equ	0xFF2
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           indf1	equ	0xFE7
  3823                           plusw1	equ	0xFE3
  3824                           fsr1h	equ	0xFE2
  3825                           fsr1l	equ	0xFE1
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           postdec2	equ	0xFDD
  3829                           plusw2	equ	0xFDB
  3830                           fsr2h	equ	0xFDA
  3831                           fsr2l	equ	0xFD9
  3832                           status	equ	0xFD8
  3833                           
  3834 ;; *************** function _turnLeft *****************
  3835 ;; Defined at:
  3836 ;;		line 92 in file "dc_motor.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;  mL              2   23[BANK0 ] PTR struct DC_motor
  3839 ;;		 -> main@mL(9), 
  3840 ;;  mR              2   25[BANK0 ] PTR struct DC_motor
  3841 ;;		 -> main@mR(9), 
  3842 ;;  power           1   27[BANK0 ] unsigned char 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;		None
  3845 ;; Return value:  Size  Location     Type
  3846 ;;                  1    wreg      void 
  3847 ;; Registers used:
  3848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3854 ;;      Params:         0       5       0       0
  3855 ;;      Locals:         0       0       0       0
  3856 ;;      Temps:          0       0       0       0
  3857 ;;      Totals:         0       5       0       0
  3858 ;;Total ram usage:        5 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    6
  3861 ;; This function calls:
  3862 ;;		_fullSpeed
  3863 ;; This function is called by:
  3864 ;;		_ScanWithRange
  3865 ;;		_main
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text11
  3870  001A28                     __ptext11:
  3871                           	opt stack 0
  3872  001A28                     _turnLeft:
  3873                           	opt stack 24
  3874                           
  3875                           ;dc_motor.c: 96: mL->direction=1;
  3876                           
  3877                           ;incstack = 0
  3878  001A28  0100               	movlb	0	; () banked
  3879  001A2A  EE20 F001          	lfsr	2,1
  3880  001A2E  5177               	movf	turnLeft@mL& (0+255),w,b
  3881  001A30  26D9               	addwf	fsr2l,f,c
  3882  001A32  5178               	movf	(turnLeft@mL+1)& (0+255),w,b
  3883  001A34  22DA               	addwfc	fsr2h,f,c
  3884  001A36  0E01               	movlw	1
  3885  001A38  6EDF               	movwf	indf2,c
  3886                           
  3887                           ;dc_motor.c: 97: mR->direction=0;
  3888  001A3A  EE20 F001          	lfsr	2,1
  3889  001A3E  5179               	movf	turnLeft@mR& (0+255),w,b
  3890  001A40  26D9               	addwf	fsr2l,f,c
  3891  001A42  517A               	movf	(turnLeft@mR+1)& (0+255),w,b
  3892  001A44  22DA               	addwfc	fsr2h,f,c
  3893  001A46  0E00               	movlw	0
  3894  001A48  6EDF               	movwf	indf2,c
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;dc_motor.c: 98: fullSpeed(mL, mR, power);
  3898  001A4A  C077  F071         	movff	turnLeft@mL,fullSpeed@mL
  3899  001A4E  C078  F072         	movff	turnLeft@mL+1,fullSpeed@mL+1
  3900  001A52  C079  F073         	movff	turnLeft@mR,fullSpeed@mR
  3901  001A56  C07A  F074         	movff	turnLeft@mR+1,fullSpeed@mR+1
  3902  001A5A  C07B  F075         	movff	turnLeft@power,fullSpeed@power
  3903  001A5E  ECA8  F00B         	call	_fullSpeed	;wreg free
  3904  001A62  0012               	return		;funcret
  3905  001A64                     __end_of_turnLeft:
  3906                           	opt stack 0
  3907                           tblptru	equ	0xFF8
  3908                           prodh	equ	0xFF4
  3909                           prodl	equ	0xFF3
  3910                           intcon	equ	0xFF2
  3911                           postinc0	equ	0xFEE
  3912                           wreg	equ	0xFE8
  3913                           indf1	equ	0xFE7
  3914                           plusw1	equ	0xFE3
  3915                           fsr1h	equ	0xFE2
  3916                           fsr1l	equ	0xFE1
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           plusw2	equ	0xFDB
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925 ;; *************** function _fullSpeed *****************
  3926 ;; Defined at:
  3927 ;;		line 113 in file "dc_motor.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  3930 ;;		 -> main@mL(9), 
  3931 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  3932 ;;		 -> main@mR(9), 
  3933 ;;  power           1   21[BANK0 ] unsigned char 
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;		None
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      void 
  3938 ;; Registers used:
  3939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3945 ;;      Params:         0       5       0       0
  3946 ;;      Locals:         0       0       0       0
  3947 ;;      Temps:          0       1       0       0
  3948 ;;      Totals:         0       6       0       0
  3949 ;;Total ram usage:        6 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    5
  3952 ;; This function calls:
  3953 ;;		_setMotorPWM
  3954 ;; This function is called by:
  3955 ;;		_turnLeft
  3956 ;;		_turnRight
  3957 ;;		_fullSpeedBack
  3958 ;;		_main
  3959 ;;		_fullSpeedForward
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text12
  3964  001750                     __ptext12:
  3965                           	opt stack 0
  3966  001750                     _fullSpeed:
  3967                           	opt stack 24
  3968                           
  3969                           ;dc_motor.c: 116: while(mL->power<power || mR->power<power){
  3970                           
  3971                           ;incstack = 0
  3972  001750  D02B               	goto	l67
  3973  001752                     
  3974                           ;dc_motor.c: 117: if(mL->power<power){
  3975  001752  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  3976  001756  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  3977  00175A  0100               	movlb	0	; () banked
  3978  00175C  5175               	movf	fullSpeed@power& (0+255),w,b
  3979  00175E  5CDE               	subwf	postinc2,w,c
  3980  001760  B0D8               	btfsc	status,0,c
  3981  001762  D005               	goto	l69
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;dc_motor.c: 118: mL->power++;
  3985  001764  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  3986  001768  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  3987  00176C  2ADF               	incf	indf2,f,c
  3988  00176E                     l69:
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;dc_motor.c: 119: }
  3992                           ;dc_motor.c: 120: if(mR->power<power){
  3993                           
  3994                           ; BSR set to: 0
  3995  00176E  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  3996  001772  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  3997  001776  5175               	movf	fullSpeed@power& (0+255),w,b
  3998  001778  5CDE               	subwf	postinc2,w,c
  3999  00177A  B0D8               	btfsc	status,0,c
  4000  00177C  D005               	goto	l70
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;dc_motor.c: 121: mR->power++;
  4004  00177E  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4005  001782  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4006  001786  2ADF               	incf	indf2,f,c
  4007  001788                     l70:
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;dc_motor.c: 122: }
  4011                           ;dc_motor.c: 123: setMotorPWM(mL);
  4012                           
  4013                           ; BSR set to: 0
  4014  001788  C071  F068         	movff	fullSpeed@mL,setMotorPWM@m
  4015  00178C  C072  F069         	movff	fullSpeed@mL+1,setMotorPWM@m+1
  4016  001790  ECDF  F008         	call	_setMotorPWM	;wreg free
  4017                           
  4018                           ;dc_motor.c: 124: setMotorPWM(mR);
  4019  001794  C073  F068         	movff	fullSpeed@mR,setMotorPWM@m
  4020  001798  C074  F069         	movff	fullSpeed@mR+1,setMotorPWM@m+1
  4021  00179C  ECDF  F008         	call	_setMotorPWM	;wreg free
  4022                           
  4023                           ;dc_motor.c: 125: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4024  0017A0  0E21               	movlw	33
  4025  0017A2                     u3397:
  4026  0017A2  2EE8               	decfsz	wreg,f,c
  4027  0017A4  D7FE               	bra	u3397
  4028  0017A6  F000               	nop	
  4029  0017A8                     l67:
  4030  0017A8  C071  FFD9         	movff	fullSpeed@mL,fsr2l
  4031  0017AC  C072  FFDA         	movff	fullSpeed@mL+1,fsr2h
  4032  0017B0  0100               	movlb	0	; () banked
  4033  0017B2  5175               	movf	fullSpeed@power& (0+255),w,b
  4034  0017B4  5CDE               	subwf	postinc2,w,c
  4035  0017B6  A0D8               	btfss	status,0,c
  4036  0017B8  D7CC               	goto	l68
  4037                           
  4038                           ; BSR set to: 0
  4039  0017BA  C073  FFD9         	movff	fullSpeed@mR,fsr2l
  4040  0017BE  C074  FFDA         	movff	fullSpeed@mR+1,fsr2h
  4041  0017C2  5175               	movf	fullSpeed@power& (0+255),w,b
  4042  0017C4  5CDE               	subwf	postinc2,w,c
  4043  0017C6  B0D8               	btfsc	status,0,c
  4044  0017C8  0012               	return	
  4045  0017CA  D7C3               	goto	l68
  4046  0017CC                     __end_of_fullSpeed:
  4047                           	opt stack 0
  4048                           tblptru	equ	0xFF8
  4049                           prodh	equ	0xFF4
  4050                           prodl	equ	0xFF3
  4051                           intcon	equ	0xFF2
  4052                           postinc0	equ	0xFEE
  4053                           wreg	equ	0xFE8
  4054                           indf1	equ	0xFE7
  4055                           plusw1	equ	0xFE3
  4056                           fsr1h	equ	0xFE2
  4057                           fsr1l	equ	0xFE1
  4058                           indf2	equ	0xFDF
  4059                           postinc2	equ	0xFDE
  4060                           postdec2	equ	0xFDD
  4061                           plusw2	equ	0xFDB
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function _delay_tenth_s *****************
  4067 ;; Defined at:
  4068 ;;		line 32 in file "Movement.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  tenth_second    1    wreg     unsigned char 
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;  tenth_second    1   44[COMRAM] unsigned char 
  4073 ;;  i               2   45[COMRAM] unsigned int 
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4083 ;;      Params:         0       0       0       0
  4084 ;;      Locals:         3       0       0       0
  4085 ;;      Temps:          1       0       0       0
  4086 ;;      Totals:         4       0       0       0
  4087 ;;Total ram usage:        4 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    3
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_ScanWithRange
  4094 ;;		_main
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text13
  4099  001A9E                     __ptext13:
  4100                           	opt stack 0
  4101  001A9E                     _delay_tenth_s:
  4102                           	opt stack 27
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;incstack = 0
  4106                           ;delay_tenth_s@tenth_seconds stored from wreg
  4107  001A9E  6E2D               	movwf	delay_tenth_s@tenth_seconds,c
  4108                           
  4109                           ;Movement.c: 33: unsigned int i=0;
  4110  001AA0  0E00               	movlw	0
  4111  001AA2  6E2F               	movwf	delay_tenth_s@i+1,c
  4112  001AA4  0E00               	movlw	0
  4113  001AA6  6E2E               	movwf	delay_tenth_s@i,c
  4114                           
  4115                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  4116  001AA8  0E00               	movlw	0
  4117  001AAA  6E2F               	movwf	delay_tenth_s@i+1,c
  4118  001AAC  0E01               	movlw	1
  4119  001AAE  6E2E               	movwf	delay_tenth_s@i,c
  4120  001AB0  D009               	goto	l209
  4121  001AB2                     
  4122                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  4123  001AB2  0E82               	movlw	130
  4124  001AB4  6E2C               	movwf	??_delay_tenth_s& (0+255),c
  4125  001AB6  0EDE               	movlw	222
  4126  001AB8                     u3407:
  4127  001AB8  2EE8               	decfsz	wreg,f,c
  4128  001ABA  D7FE               	bra	u3407
  4129  001ABC  2E2C               	decfsz	??_delay_tenth_s& (0+255),f,c
  4130  001ABE  D7FC               	bra	u3407
  4131  001AC0  4A2E               	infsnz	delay_tenth_s@i,f,c
  4132  001AC2  2A2F               	incf	delay_tenth_s@i+1,f,c
  4133  001AC4                     l209:
  4134  001AC4  502D               	movf	delay_tenth_s@tenth_seconds,w,c
  4135  001AC6  0D02               	mullw	2
  4136  001AC8  502E               	movf	delay_tenth_s@i,w,c
  4137  001ACA  5CF3               	subwf	prodl,w,c
  4138  001ACC  502F               	movf	delay_tenth_s@i+1,w,c
  4139  001ACE  58F4               	subwfb	prodh,w,c
  4140  001AD0  A0D8               	btfss	status,0,c
  4141  001AD2  0012               	return	
  4142  001AD4  D7EE               	goto	l210
  4143  001AD6                     __end_of_delay_tenth_s:
  4144                           	opt stack 0
  4145                           tblptru	equ	0xFF8
  4146                           prodh	equ	0xFF4
  4147                           prodl	equ	0xFF3
  4148                           intcon	equ	0xFF2
  4149                           postinc0	equ	0xFEE
  4150                           wreg	equ	0xFE8
  4151                           indf1	equ	0xFE7
  4152                           plusw1	equ	0xFE3
  4153                           fsr1h	equ	0xFE2
  4154                           fsr1l	equ	0xFE1
  4155                           indf2	equ	0xFDF
  4156                           postinc2	equ	0xFDE
  4157                           postdec2	equ	0xFDD
  4158                           plusw2	equ	0xFDB
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function _ScanIR *****************
  4164 ;; Defined at:
  4165 ;;		line 44 in file "Movement.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  mL              2   28[BANK0 ] PTR struct DC_motor
  4168 ;;		 -> main@mL(9), 
  4169 ;;  mR              2   30[BANK0 ] PTR struct DC_motor
  4170 ;;		 -> main@mR(9), 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  buf            40   33[BANK0 ] unsigned char [40]
  4173 ;;  SensorResult    4   75[BANK0 ] unsigned int [2]
  4174 ;;  DirectionMov    2   73[BANK0 ] const unsigned int 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      unsigned char 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4184 ;;      Params:         0       4       0       0
  4185 ;;      Locals:         0      46       0       0
  4186 ;;      Temps:          0       1       0       0
  4187 ;;      Totals:         0      51       0       0
  4188 ;;Total ram usage:       51 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    7
  4191 ;; This function calls:
  4192 ;;		_LCD_String
  4193 ;;		_SendLCD
  4194 ;;		_SetLine
  4195 ;;		_grabLeftIR
  4196 ;;		_grabRightIR
  4197 ;;		_sprintf
  4198 ;;		_stop
  4199 ;; This function is called by:
  4200 ;;		_main
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text14
  4205  0012FC                     __ptext14:
  4206                           	opt stack 0
  4207  0012FC                     _ScanIR:
  4208                           	opt stack 23
  4209                           
  4210                           ;Movement.c: 47: unsigned int SensorResult[2]={0,0};
  4211                           
  4212                           ;incstack = 0
  4213  0012FC  C0CF  F0AB         	movff	ScanIR@F3541,ScanIR@SensorResult
  4214  001300  C0D0  F0AC         	movff	ScanIR@F3541+1,ScanIR@SensorResult+1
  4215  001304  C0D1  F0AD         	movff	ScanIR@F3541+2,ScanIR@SensorResult+2
  4216  001308  C0D2  F0AE         	movff	ScanIR@F3541+3,ScanIR@SensorResult+3
  4217                           
  4218                           ;Movement.c: 48: char buf[40];
  4219                           ;Movement.c: 50: const unsigned int DirectionMoveThreshold=500;
  4220  00130C  0E01               	movlw	1
  4221  00130E  0100               	movlb	0	; () banked
  4222  001310  6FAA               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  4223  001312  0EF4               	movlw	244
  4224  001314  6FA9               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;Movement.c: 55: SensorResult[0]=grabLeftIR();
  4228  001316  EC21  F00C         	call	_grabLeftIR	;wreg free
  4229  00131A  C02C  F0AB         	movff	?_grabLeftIR,ScanIR@SensorResult
  4230  00131E  C02D  F0AC         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  4231                           
  4232                           ;Movement.c: 56: SensorResult[1]=grabRightIR();
  4233  001322  ECE6  F00B         	call	_grabRightIR	;wreg free
  4234  001326  C02C  F0AD         	movff	?_grabRightIR,ScanIR@SensorResult+2
  4235  00132A  C02D  F0AE         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  4236                           
  4237                           ;Movement.c: 60: CAP1BUFH=0;
  4238  00132E  0E00               	movlw	0
  4239  001330  6E69               	movwf	3945,c	;volatile
  4240                           
  4241                           ;Movement.c: 61: CAP1BUFL=0;
  4242  001332  0E00               	movlw	0
  4243  001334  6E68               	movwf	3944,c	;volatile
  4244                           
  4245                           ;Movement.c: 62: CAP2BUFH=0;
  4246  001336  0E00               	movlw	0
  4247  001338  6E67               	movwf	3943,c	;volatile
  4248                           
  4249                           ;Movement.c: 63: CAP2BUFL=0;
  4250  00133A  0E00               	movlw	0
  4251  00133C  6E66               	movwf	3942,c	;volatile
  4252                           
  4253                           ;Movement.c: 66: SendLCD(0b00000001,0);
  4254  00133E  0E00               	movlw	0
  4255  001340  6E30               	movwf	SendLCD@type,c
  4256  001342  0E01               	movlw	1
  4257  001344  ECBD  F00D         	call	_SendLCD
  4258                           
  4259                           ;Movement.c: 67: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4260  001348  0E21               	movlw	33
  4261  00134A                     u3417:
  4262  00134A  2EE8               	decfsz	wreg,f,c
  4263  00134C  D7FE               	bra	u3417
  4264  00134E  F000               	nop	
  4265                           
  4266                           ;Movement.c: 68: SendLCD(0b00000010,0);
  4267  001350  0E00               	movlw	0
  4268  001352  6E30               	movwf	SendLCD@type,c
  4269  001354  0E02               	movlw	2
  4270  001356  ECBD  F00D         	call	_SendLCD
  4271                           
  4272                           ;Movement.c: 69: _delay((unsigned long)((2)*(8000000/4000.0)));
  4273  00135A  0E06               	movlw	6
  4274  00135C  0100               	movlb	0	; () banked
  4275  00135E  6F80               	movwf	??_ScanIR& (0+255),b
  4276  001360  0E30               	movlw	48
  4277  001362                     u3427:
  4278  001362  2EE8               	decfsz	wreg,f,c
  4279  001364  D7FE               	bra	u3427
  4280  001366  2F80               	decfsz	??_ScanIR& (0+255),f,b
  4281  001368  D7FC               	bra	u3427
  4282  00136A  F000               	nop	
  4283                           
  4284                           ;Movement.c: 70: SetLine(1);
  4285  00136C  0E01               	movlw	1
  4286  00136E  ECA2  F00D         	call	_SetLine
  4287                           
  4288                           ;Movement.c: 71: LCD_String("     ScanIR");
  4289  001372  0E2D               	movlw	low STR_1
  4290  001374  0100               	movlb	0	; () banked
  4291  001376  6F60               	movwf	LCD_String@string& (0+255),b
  4292  001378  0E03               	movlw	high STR_1
  4293  00137A  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4294  00137C  EC5C  F00C         	call	_LCD_String	;wreg free
  4295                           
  4296                           ;Movement.c: 72: SetLine(2);
  4297  001380  0E02               	movlw	2
  4298  001382  ECA2  F00D         	call	_SetLine
  4299                           
  4300                           ;Movement.c: 73: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  4301  001386  0E81               	movlw	low ScanIR@buf
  4302  001388  0100               	movlb	0	; () banked
  4303  00138A  6F67               	movwf	sprintf@sp& (0+255),b
  4304  00138C  0E00               	movlw	high ScanIR@buf
  4305  00138E  6F68               	movwf	(sprintf@sp+1)& (0+255),b
  4306  001390  0E0C               	movlw	low (STR_6+1)
  4307  001392  6F69               	movwf	sprintf@f& (0+255),b
  4308  001394  0E03               	movlw	high (STR_6+1)
  4309  001396  6F6A               	movwf	(sprintf@f+1)& (0+255),b
  4310  001398  C0AB  F06B         	movff	ScanIR@SensorResult,?_sprintf+4
  4311  00139C  C0AC  F06C         	movff	ScanIR@SensorResult+1,?_sprintf+5
  4312  0013A0  C0AD  F06D         	movff	ScanIR@SensorResult+2,?_sprintf+6
  4313  0013A4  C0AE  F06E         	movff	ScanIR@SensorResult+3,?_sprintf+7
  4314  0013A8  EC8F  F007         	call	_sprintf	;wreg free
  4315                           
  4316                           ;Movement.c: 74: LCD_String(buf);
  4317  0013AC  0E81               	movlw	low ScanIR@buf
  4318  0013AE  0100               	movlb	0	; () banked
  4319  0013B0  6F60               	movwf	LCD_String@string& (0+255),b
  4320  0013B2  0E00               	movlw	high ScanIR@buf
  4321  0013B4  6F61               	movwf	(LCD_String@string+1)& (0+255),b
  4322  0013B6  EC5C  F00C         	call	_LCD_String	;wreg free
  4323                           
  4324                           ;Movement.c: 78: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>
  4325                           ;Movement.c: 79: DirectionMoveThreshold)) {
  4326  0013BA  0100               	movlb	0	; () banked
  4327  0013BC  51AB               	movf	ScanIR@SensorResult& (0+255),w,b
  4328  0013BE  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4329  0013C0  51AC               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  4330  0013C2  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4331  0013C4  B0D8               	btfsc	status,0,c
  4332  0013C6  D008               	goto	l217
  4333                           
  4334                           ; BSR set to: 0
  4335  0013C8  51AD               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  4336  0013CA  5DA9               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  4337  0013CC  51AE               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  4338  0013CE  59AA               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  4339  0013D0  B0D8               	btfsc	status,0,c
  4340  0013D2  D002               	goto	l217
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;Movement.c: 80: return 2;
  4344  0013D4  0E02               	movlw	2
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;Movement.c: 81: } else {
  4348                           
  4349                           ; BSR set to: 0
  4350  0013D6  0012               	return	
  4351  0013D8                     l217:
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;Movement.c: 82: stop(mL,mR);
  4355                           
  4356                           ; BSR set to: 0
  4357  0013D8  C07C  F071         	movff	ScanIR@mL,stop@mL
  4358  0013DC  C07D  F072         	movff	ScanIR@mL+1,stop@mL+1
  4359  0013E0  C07E  F073         	movff	ScanIR@mR,stop@mR
  4360  0013E4  C07F  F074         	movff	ScanIR@mR+1,stop@mR+1
  4361  0013E8  EC1C  F00B         	call	_stop	;wreg free
  4362                           
  4363                           ;Movement.c: 83: return 0;
  4364  0013EC  0E00               	movlw	0
  4365  0013EE  0012               	return	
  4366  0013F0                     __end_of_ScanIR:
  4367                           	opt stack 0
  4368                           tblptru	equ	0xFF8
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           intcon	equ	0xFF2
  4372                           postinc0	equ	0xFEE
  4373                           wreg	equ	0xFE8
  4374                           indf1	equ	0xFE7
  4375                           plusw1	equ	0xFE3
  4376                           fsr1h	equ	0xFE2
  4377                           fsr1l	equ	0xFE1
  4378                           indf2	equ	0xFDF
  4379                           postinc2	equ	0xFDE
  4380                           postdec2	equ	0xFDD
  4381                           plusw2	equ	0xFDB
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8
  4385                           
  4386 ;; *************** function _stop *****************
  4387 ;; Defined at:
  4388 ;;		line 72 in file "dc_motor.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  mL              2   17[BANK0 ] PTR struct DC_motor
  4391 ;;		 -> main@mL(9), 
  4392 ;;  mR              2   19[BANK0 ] PTR struct DC_motor
  4393 ;;		 -> main@mR(9), 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;		None
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4405 ;;      Params:         0       4       0       0
  4406 ;;      Locals:         0       0       0       0
  4407 ;;      Temps:          0       0       0       0
  4408 ;;      Totals:         0       4       0       0
  4409 ;;Total ram usage:        4 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    5
  4412 ;; This function calls:
  4413 ;;		_setMotorPWM
  4414 ;; This function is called by:
  4415 ;;		_ScanIR
  4416 ;;		_ScanWithRange
  4417 ;;		_main
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text15
  4422  001638                     __ptext15:
  4423                           	opt stack 0
  4424  001638                     _stop:
  4425                           	opt stack 25
  4426                           
  4427                           ;dc_motor.c: 75: while(mL->power>0 || mR->power>0){
  4428                           
  4429                           ;incstack = 0
  4430  001638  D028               	goto	l53
  4431  00163A                     
  4432                           ;dc_motor.c: 76: if(mL->power>0){
  4433  00163A  C071  FFD9         	movff	stop@mL,fsr2l
  4434  00163E  C072  FFDA         	movff	stop@mL+1,fsr2h
  4435  001642  50DF               	movf	indf2,w,c
  4436  001644  B4D8               	btfsc	status,2,c
  4437  001646  D005               	goto	l55
  4438                           
  4439                           ;dc_motor.c: 77: mL->power--;
  4440  001648  C071  FFD9         	movff	stop@mL,fsr2l
  4441  00164C  C072  FFDA         	movff	stop@mL+1,fsr2h
  4442  001650  06DF               	decf	indf2,f,c
  4443  001652                     l55:
  4444                           
  4445                           ;dc_motor.c: 78: }
  4446                           ;dc_motor.c: 79: if(mR->power>0){
  4447  001652  C073  FFD9         	movff	stop@mR,fsr2l
  4448  001656  C074  FFDA         	movff	stop@mR+1,fsr2h
  4449  00165A  50DF               	movf	indf2,w,c
  4450  00165C  B4D8               	btfsc	status,2,c
  4451  00165E  D005               	goto	l56
  4452                           
  4453                           ;dc_motor.c: 80: mR->power--;
  4454  001660  C073  FFD9         	movff	stop@mR,fsr2l
  4455  001664  C074  FFDA         	movff	stop@mR+1,fsr2h
  4456  001668  06DF               	decf	indf2,f,c
  4457  00166A                     l56:
  4458                           
  4459                           ;dc_motor.c: 81: }
  4460                           ;dc_motor.c: 82: setMotorPWM(mL);
  4461  00166A  C071  F068         	movff	stop@mL,setMotorPWM@m
  4462  00166E  C072  F069         	movff	stop@mL+1,setMotorPWM@m+1
  4463  001672  ECDF  F008         	call	_setMotorPWM	;wreg free
  4464                           
  4465                           ;dc_motor.c: 83: setMotorPWM(mR);
  4466  001676  C073  F068         	movff	stop@mR,setMotorPWM@m
  4467  00167A  C074  F069         	movff	stop@mR+1,setMotorPWM@m+1
  4468  00167E  ECDF  F008         	call	_setMotorPWM	;wreg free
  4469                           
  4470                           ;dc_motor.c: 84: _delay((unsigned long)((50)*(8000000/4000000.0)));
  4471  001682  0E21               	movlw	33
  4472  001684                     u3437:
  4473  001684  2EE8               	decfsz	wreg,f,c
  4474  001686  D7FE               	bra	u3437
  4475  001688  F000               	nop	
  4476  00168A                     l53:
  4477  00168A  C071  FFD9         	movff	stop@mL,fsr2l
  4478  00168E  C072  FFDA         	movff	stop@mL+1,fsr2h
  4479  001692  50DF               	movf	indf2,w,c
  4480  001694  A4D8               	btfss	status,2,c
  4481  001696  D7D1               	goto	l54
  4482  001698  C073  FFD9         	movff	stop@mR,fsr2l
  4483  00169C  C074  FFDA         	movff	stop@mR+1,fsr2h
  4484  0016A0  50DF               	movf	indf2,w,c
  4485  0016A2  A4D8               	btfss	status,2,c
  4486  0016A4  D7CA               	goto	l54
  4487                           
  4488                           ;dc_motor.c: 85: }
  4489                           ;dc_motor.c: 86: mL->direction=1;
  4490  0016A6  0100               	movlb	0	; () banked
  4491  0016A8  EE20 F001          	lfsr	2,1
  4492  0016AC  5171               	movf	stop@mL& (0+255),w,b
  4493  0016AE  26D9               	addwf	fsr2l,f,c
  4494  0016B0  5172               	movf	(stop@mL+1)& (0+255),w,b
  4495  0016B2  22DA               	addwfc	fsr2h,f,c
  4496  0016B4  0E01               	movlw	1
  4497  0016B6  6EDF               	movwf	indf2,c
  4498                           
  4499                           ;dc_motor.c: 87: mR->direction=1;
  4500  0016B8  EE20 F001          	lfsr	2,1
  4501  0016BC  5173               	movf	stop@mR& (0+255),w,b
  4502  0016BE  26D9               	addwf	fsr2l,f,c
  4503  0016C0  5174               	movf	(stop@mR+1)& (0+255),w,b
  4504  0016C2  22DA               	addwfc	fsr2h,f,c
  4505  0016C4  0E01               	movlw	1
  4506  0016C6  6EDF               	movwf	indf2,c
  4507                           
  4508                           ; BSR set to: 0
  4509  0016C8  0012               	return		;funcret
  4510  0016CA                     __end_of_stop:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           intcon	equ	0xFF2
  4516                           postinc0	equ	0xFEE
  4517                           wreg	equ	0xFE8
  4518                           indf1	equ	0xFE7
  4519                           plusw1	equ	0xFE3
  4520                           fsr1h	equ	0xFE2
  4521                           fsr1l	equ	0xFE1
  4522                           indf2	equ	0xFDF
  4523                           postinc2	equ	0xFDE
  4524                           postdec2	equ	0xFDD
  4525                           plusw2	equ	0xFDB
  4526                           fsr2h	equ	0xFDA
  4527                           fsr2l	equ	0xFD9
  4528                           status	equ	0xFD8
  4529                           
  4530 ;; *************** function _setMotorPWM *****************
  4531 ;; Defined at:
  4532 ;;		line 31 in file "dc_motor.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  m               2    8[BANK0 ] PTR struct DC_motor
  4535 ;;		 -> main@mR(9), main@mL(9), 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  PWMduty         2   15[BANK0 ] int 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4547 ;;      Params:         0       2       0       0
  4548 ;;      Locals:         0       2       0       0
  4549 ;;      Temps:          0       5       0       0
  4550 ;;      Totals:         0       9       0       0
  4551 ;;Total ram usage:        9 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    4
  4554 ;; This function calls:
  4555 ;;		___awdiv
  4556 ;;		___wmul
  4557 ;; This function is called by:
  4558 ;;		_stop
  4559 ;;		_fullSpeed
  4560 ;;		_setMotorFullSpeed
  4561 ;;		_stopMotor
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text16
  4566  0011BE                     __ptext16:
  4567                           	opt stack 0
  4568  0011BE                     _setMotorPWM:
  4569                           	opt stack 24
  4570                           
  4571                           ;dc_motor.c: 33: int PWMduty;
  4572                           ;dc_motor.c: 35: PWMduty = (m->power*m->PWMperiod)/100;
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;incstack = 0
  4576  0011BE  C068  FFD9         	movff	setMotorPWM@m,fsr2l
  4577  0011C2  C069  FFDA         	movff	setMotorPWM@m+1,fsr2h
  4578  0011C6  50DF               	movf	indf2,w,c
  4579  0011C8  0100               	movlb	0	; () banked
  4580  0011CA  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4581  0011CC  516A               	movf	??_setMotorPWM& (0+255),w,b
  4582  0011CE  6E2C               	movwf	___wmul@multiplier,c
  4583  0011D0  6A2D               	clrf	___wmul@multiplier+1,c
  4584  0011D2  EE20 F007          	lfsr	2,7
  4585  0011D6  5168               	movf	setMotorPWM@m& (0+255),w,b
  4586  0011D8  26D9               	addwf	fsr2l,f,c
  4587  0011DA  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4588  0011DC  22DA               	addwfc	fsr2h,f,c
  4589  0011DE  CFDE F02E          	movff	postinc2,___wmul@multiplicand
  4590  0011E2  CFDD F02F          	movff	postdec2,___wmul@multiplicand+1
  4591  0011E6  ECE8  F00D         	call	___wmul	;wreg free
  4592  0011EA  C02C  F060         	movff	?___wmul,___awdiv@dividend
  4593  0011EE  C02D  F061         	movff	?___wmul+1,___awdiv@dividend+1
  4594  0011F2  0E00               	movlw	0
  4595  0011F4  0100               	movlb	0	; () banked
  4596  0011F6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4597  0011F8  0E64               	movlw	100
  4598  0011FA  6F62               	movwf	___awdiv@divisor& (0+255),b
  4599  0011FC  EC65  F00B         	call	___awdiv	;wreg free
  4600  001200  C060  F06F         	movff	?___awdiv,setMotorPWM@PWMduty
  4601  001204  C061  F070         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  4602                           
  4603                           ;dc_motor.c: 37: if (m->direction)
  4604  001208  0100               	movlb	0	; () banked
  4605  00120A  EE20 F001          	lfsr	2,1
  4606  00120E  5168               	movf	setMotorPWM@m& (0+255),w,b
  4607  001210  26D9               	addwf	fsr2l,f,c
  4608  001212  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4609  001214  22DA               	addwfc	fsr2h,f,c
  4610  001216  50DF               	movf	indf2,w,c
  4611  001218  B4D8               	btfsc	status,2,c
  4612  00121A  D02D               	goto	l36
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;dc_motor.c: 38: {
  4616                           ;dc_motor.c: 39: LATB=LATB|(1<<(m->dir_pin));
  4617  00121C  EE20 F006          	lfsr	2,6
  4618  001220  5168               	movf	setMotorPWM@m& (0+255),w,b
  4619  001222  26D9               	addwf	fsr2l,f,c
  4620  001224  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4621  001226  22DA               	addwfc	fsr2h,f,c
  4622  001228  50DF               	movf	indf2,w,c
  4623  00122A  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4624  00122C  0E01               	movlw	1
  4625  00122E  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4626  001230  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4627  001232  D002               	goto	u2344
  4628  001234                     u2345:
  4629  001234  90D8               	bcf	status,0,c
  4630  001236  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4631  001238                     u2344:
  4632  001238  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4633  00123A  D7FC               	goto	u2345
  4634  00123C  0100               	movlb	0	; () banked
  4635  00123E  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4636  001240  108A               	iorwf	3978,w,c	;volatile
  4637  001242  6E8A               	movwf	3978,c	;volatile
  4638                           
  4639                           ;dc_motor.c: 40: PWMduty=m->PWMperiod-PWMduty;
  4640  001244  EE20 F007          	lfsr	2,7
  4641  001248  5168               	movf	setMotorPWM@m& (0+255),w,b
  4642  00124A  26D9               	addwf	fsr2l,f,c
  4643  00124C  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4644  00124E  22DA               	addwfc	fsr2h,f,c
  4645  001250  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4646  001254  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4647  001258  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4648  00125C  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4649  001260  1F6C               	comf	(??_setMotorPWM+2)& (0+255),f,b
  4650  001262  1F6D               	comf	(??_setMotorPWM+3)& (0+255),f,b
  4651  001264  4B6C               	infsnz	(??_setMotorPWM+2)& (0+255),f,b
  4652  001266  2B6D               	incf	(??_setMotorPWM+3)& (0+255),f,b
  4653  001268  516A               	movf	??_setMotorPWM& (0+255),w,b
  4654  00126A  256C               	addwf	(??_setMotorPWM+2)& (0+255),w,b
  4655  00126C  6F6F               	movwf	setMotorPWM@PWMduty& (0+255),b
  4656  00126E  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4657  001270  216D               	addwfc	(??_setMotorPWM+3)& (0+255),w,b
  4658  001272  6F70               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  4659                           
  4660                           ;dc_motor.c: 41: }
  4661  001274  D015               	goto	l37
  4662  001276                     l36:
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;dc_motor.c: 42: else
  4666                           ;dc_motor.c: 43: {
  4667                           ;dc_motor.c: 44: LATB=LATB&(~(1<<(m->dir_pin)));
  4668                           
  4669                           ; BSR set to: 0
  4670  001276  EE20 F006          	lfsr	2,6
  4671  00127A  5168               	movf	setMotorPWM@m& (0+255),w,b
  4672  00127C  26D9               	addwf	fsr2l,f,c
  4673  00127E  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4674  001280  22DA               	addwfc	fsr2h,f,c
  4675  001282  50DF               	movf	indf2,w,c
  4676  001284  6F6A               	movwf	??_setMotorPWM& (0+255),b
  4677  001286  0E01               	movlw	1
  4678  001288  6F6B               	movwf	(??_setMotorPWM+1)& (0+255),b
  4679  00128A  2B6A               	incf	??_setMotorPWM& (0+255),f,b
  4680  00128C  D002               	goto	u2354
  4681  00128E                     u2355:
  4682  00128E  90D8               	bcf	status,0,c
  4683  001290  376B               	rlcf	(??_setMotorPWM+1)& (0+255),f,b
  4684  001292                     u2354:
  4685  001292  2F6A               	decfsz	??_setMotorPWM& (0+255),f,b
  4686  001294  D7FC               	goto	u2355
  4687  001296  0100               	movlb	0	; () banked
  4688  001298  516B               	movf	(??_setMotorPWM+1)& (0+255),w,b
  4689  00129A  0AFF               	xorlw	255
  4690  00129C  148A               	andwf	3978,w,c	;volatile
  4691  00129E  6E8A               	movwf	3978,c	;volatile
  4692  0012A0                     l37:
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;dc_motor.c: 45: }
  4696                           ;dc_motor.c: 48: *(m->dutyLowByte)=PWMduty<<2;
  4697  0012A0  EE20 F002          	lfsr	2,2
  4698  0012A4  5168               	movf	setMotorPWM@m& (0+255),w,b
  4699  0012A6  26D9               	addwf	fsr2l,f,c
  4700  0012A8  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4701  0012AA  22DA               	addwfc	fsr2h,f,c
  4702  0012AC  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4703  0012B0  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4704  0012B4  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4705  0012B8  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4706  0012BC  456F               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  4707  0012BE  46E8               	rlncf	wreg,f,c
  4708  0012C0  0BFC               	andlw	252
  4709  0012C2  6EDF               	movwf	indf2,c
  4710                           
  4711                           ;dc_motor.c: 49: *(m->dutyHighByte)=PWMduty>>6;
  4712  0012C4  EE20 F004          	lfsr	2,4
  4713  0012C8  5168               	movf	setMotorPWM@m& (0+255),w,b
  4714  0012CA  26D9               	addwf	fsr2l,f,c
  4715  0012CC  5169               	movf	(setMotorPWM@m+1)& (0+255),w,b
  4716  0012CE  22DA               	addwfc	fsr2h,f,c
  4717  0012D0  CFDE F06A          	movff	postinc2,??_setMotorPWM
  4718  0012D4  CFDD F06B          	movff	postdec2,??_setMotorPWM+1
  4719  0012D8  C06A  FFD9         	movff	??_setMotorPWM,fsr2l
  4720  0012DC  C06B  FFDA         	movff	??_setMotorPWM+1,fsr2h
  4721  0012E0  C06F  F06C         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  4722  0012E4  C070  F06D         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  4723  0012E8  0E06               	movlw	6
  4724  0012EA  6F6E               	movwf	(??_setMotorPWM+4)& (0+255),b
  4725  0012EC                     u2365:
  4726  0012EC  356D               	rlcf	(??_setMotorPWM+3)& (0+255),w,b
  4727  0012EE  336D               	rrcf	(??_setMotorPWM+3)& (0+255),f,b
  4728  0012F0  336C               	rrcf	(??_setMotorPWM+2)& (0+255),f,b
  4729  0012F2  2F6E               	decfsz	(??_setMotorPWM+4)& (0+255),f,b
  4730  0012F4  D7FB               	goto	u2365
  4731  0012F6  516C               	movf	(??_setMotorPWM+2)& (0+255),w,b
  4732  0012F8  6EDF               	movwf	indf2,c
  4733                           
  4734                           ; BSR set to: 0
  4735  0012FA  0012               	return		;funcret
  4736  0012FC                     __end_of_setMotorPWM:
  4737                           	opt stack 0
  4738                           tblptru	equ	0xFF8
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           intcon	equ	0xFF2
  4742                           postinc0	equ	0xFEE
  4743                           wreg	equ	0xFE8
  4744                           indf1	equ	0xFE7
  4745                           plusw1	equ	0xFE3
  4746                           fsr1h	equ	0xFE2
  4747                           fsr1l	equ	0xFE1
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           plusw2	equ	0xFDB
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function ___awdiv *****************
  4757 ;; Defined at:
  4758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  dividend        2    0[BANK0 ] int 
  4761 ;;  divisor         2    2[BANK0 ] int 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  quotient        2    6[BANK0 ] int 
  4764 ;;  sign            1    5[BANK0 ] unsigned char 
  4765 ;;  counter         1    4[BANK0 ] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  2    0[BANK0 ] int 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2, status,0
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4775 ;;      Params:         0       4       0       0
  4776 ;;      Locals:         0       4       0       0
  4777 ;;      Temps:          0       0       0       0
  4778 ;;      Totals:         0       8       0       0
  4779 ;;Total ram usage:        8 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    3
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_setMotorPWM
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text17
  4790  0016CA                     __ptext17:
  4791                           	opt stack 0
  4792  0016CA                     ___awdiv:
  4793                           	opt stack 24
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;incstack = 0
  4797  0016CA  0E00               	movlw	0
  4798  0016CC  0100               	movlb	0	; () banked
  4799  0016CE  6F65               	movwf	___awdiv@sign& (0+255),b
  4800                           
  4801                           ; BSR set to: 0
  4802  0016D0  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4803  0016D2  D006               	goto	l658
  4804                           
  4805                           ; BSR set to: 0
  4806  0016D4  6D62               	negf	___awdiv@divisor& (0+255),b
  4807  0016D6  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4808  0016D8  B0D8               	btfsc	status,0,c
  4809  0016DA  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4810                           
  4811                           ; BSR set to: 0
  4812  0016DC  0E01               	movlw	1
  4813  0016DE  6F65               	movwf	___awdiv@sign& (0+255),b
  4814  0016E0                     l658:
  4815                           
  4816                           ; BSR set to: 0
  4817                           
  4818                           ; BSR set to: 0
  4819  0016E0  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4820  0016E2  D006               	goto	l659
  4821                           
  4822                           ; BSR set to: 0
  4823  0016E4  6D60               	negf	___awdiv@dividend& (0+255),b
  4824  0016E6  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4825  0016E8  B0D8               	btfsc	status,0,c
  4826  0016EA  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4827                           
  4828                           ; BSR set to: 0
  4829  0016EC  0E01               	movlw	1
  4830  0016EE  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  4831  0016F0                     l659:
  4832                           
  4833                           ; BSR set to: 0
  4834                           
  4835                           ; BSR set to: 0
  4836  0016F0  0E00               	movlw	0
  4837  0016F2  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  4838  0016F4  0E00               	movlw	0
  4839  0016F6  6F66               	movwf	___awdiv@quotient& (0+255),b
  4840                           
  4841                           ; BSR set to: 0
  4842  0016F8  5162               	movf	___awdiv@divisor& (0+255),w,b
  4843  0016FA  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4844  0016FC  B4D8               	btfsc	status,2,c
  4845  0016FE  D01C               	goto	l666
  4846                           
  4847                           ; BSR set to: 0
  4848  001700  0E01               	movlw	1
  4849  001702  6F64               	movwf	___awdiv@counter& (0+255),b
  4850  001704  D004               	goto	l661
  4851  001706                     
  4852                           ; BSR set to: 0
  4853                           
  4854                           ; BSR set to: 0
  4855  001706  90D8               	bcf	status,0,c
  4856  001708  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  4857  00170A  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4858  00170C  2B64               	incf	___awdiv@counter& (0+255),f,b
  4859  00170E                     l661:
  4860                           
  4861                           ; BSR set to: 0
  4862                           
  4863                           ; BSR set to: 0
  4864  00170E  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4865  001710  D7FA               	goto	l662
  4866  001712                     u1210:
  4867                           
  4868                           ; BSR set to: 0
  4869                           
  4870                           ; BSR set to: 0
  4871                           
  4872                           ; BSR set to: 0
  4873  001712  90D8               	bcf	status,0,c
  4874  001714  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  4875  001716  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4876                           
  4877                           ; BSR set to: 0
  4878  001718  5162               	movf	___awdiv@divisor& (0+255),w,b
  4879  00171A  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  4880  00171C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4881  00171E  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4882  001720  A0D8               	btfss	status,0,c
  4883  001722  D005               	goto	l665
  4884                           
  4885                           ; BSR set to: 0
  4886  001724  5162               	movf	___awdiv@divisor& (0+255),w,b
  4887  001726  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  4888  001728  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4889  00172A  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4890                           
  4891                           ; BSR set to: 0
  4892  00172C  8166               	bsf	___awdiv@quotient& (0+255),0,b
  4893  00172E                     l665:
  4894                           
  4895                           ; BSR set to: 0
  4896                           
  4897                           ; BSR set to: 0
  4898  00172E  90D8               	bcf	status,0,c
  4899  001730  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4900  001732  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  4901                           
  4902                           ; BSR set to: 0
  4903  001734  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  4904  001736  D7ED               	goto	u1210
  4905  001738                     l666:
  4906                           
  4907                           ; BSR set to: 0
  4908                           
  4909                           ; BSR set to: 0
  4910                           
  4911                           ; BSR set to: 0
  4912  001738  5165               	movf	___awdiv@sign& (0+255),w,b
  4913  00173A  B4D8               	btfsc	status,2,c
  4914  00173C  D004               	goto	l667
  4915                           
  4916                           ; BSR set to: 0
  4917  00173E  6D66               	negf	___awdiv@quotient& (0+255),b
  4918  001740  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4919  001742  B0D8               	btfsc	status,0,c
  4920  001744  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4921  001746                     l667:
  4922                           
  4923                           ; BSR set to: 0
  4924                           
  4925                           ; BSR set to: 0
  4926  001746  C066  F060         	movff	___awdiv@quotient,?___awdiv
  4927  00174A  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  4928  00174E  0012               	return	
  4929  001750                     __end_of___awdiv:
  4930                           	opt stack 0
  4931                           tblptru	equ	0xFF8
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           indf1	equ	0xFE7
  4938                           plusw1	equ	0xFE3
  4939                           fsr1h	equ	0xFE2
  4940                           fsr1l	equ	0xFE1
  4941                           indf2	equ	0xFDF
  4942                           postinc2	equ	0xFDE
  4943                           postdec2	equ	0xFDD
  4944                           plusw2	equ	0xFDB
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _sprintf *****************
  4950 ;; Defined at:
  4951 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;  sp              2    7[BANK0 ] PTR unsigned char 
  4954 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4955 ;;  f               2    9[BANK0 ] PTR const unsigned char 
  4956 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  tmpval          4    0        struct .
  4959 ;;  cp              3    0        PTR const unsigned char 
  4960 ;;  width           2   25[BANK0 ] int 
  4961 ;;  val             2   22[BANK0 ] unsigned int 
  4962 ;;  ap              2   19[BANK0 ] PTR void [1]
  4963 ;;		 -> ?_sprintf(2), 
  4964 ;;  len             2    0        unsigned int 
  4965 ;;  c               1   27[BANK0 ] char 
  4966 ;;  flag            1   24[BANK0 ] unsigned char 
  4967 ;;  prec            1   21[BANK0 ] char 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  2    7[BANK0 ] int 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4977 ;;      Params:         0       8       0       0
  4978 ;;      Locals:         0       9       0       0
  4979 ;;      Temps:          0       4       0       0
  4980 ;;      Totals:         0      21       0       0
  4981 ;;Total ram usage:       21 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    4
  4984 ;; This function calls:
  4985 ;;		___lwdiv
  4986 ;;		___lwmod
  4987 ;;		___wmul
  4988 ;;		_isdigit
  4989 ;; This function is called by:
  4990 ;;		_ScanIR
  4991 ;;		_ScanWithRange
  4992 ;;		_main
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text18
  4997  000F1E                     __ptext18:
  4998                           	opt stack 0
  4999  000F1E                     _sprintf:
  5000                           	opt stack 26
  5001                           
  5002                           ;doprnt.c: 494: va_list ap;
  5003                           ;doprnt.c: 499: signed char c;
  5004                           ;doprnt.c: 501: int width;
  5005                           ;doprnt.c: 506: signed char prec;
  5006                           ;doprnt.c: 508: unsigned char flag;
  5007                           ;doprnt.c: 523: union {
  5008                           ;doprnt.c: 524: unsigned long vd;
  5009                           ;doprnt.c: 525: double integ;
  5010                           ;doprnt.c: 526: } tmpval;
  5011                           ;doprnt.c: 528: unsigned int val;
  5012                           ;doprnt.c: 529: unsigned len;
  5013                           ;doprnt.c: 530: const char * cp;
  5014                           ;doprnt.c: 533: *ap = __va_start();
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;incstack = 0
  5018  000F1E  0E6B               	movlw	low (?_sprintf+4)
  5019  000F20  0100               	movlb	0	; () banked
  5020  000F22  6F73               	movwf	sprintf@ap& (0+255),b
  5021  000F24  0E00               	movlw	high (?_sprintf+4)
  5022  000F26  6F74               	movwf	(sprintf@ap+1)& (0+255),b
  5023                           
  5024                           ;doprnt.c: 536: while(c = *f++) {
  5025  000F28  D136               	goto	u2840
  5026  000F2A                     
  5027                           ; BSR set to: 0
  5028                           ;doprnt.c: 538: if(c != '%')
  5029                           
  5030                           ; BSR set to: 0
  5031  000F2A  0E25               	movlw	37
  5032  000F2C  197B               	xorwf	sprintf@c& (0+255),w,b
  5033  000F2E  B4D8               	btfsc	status,2,c
  5034  000F30  D009               	goto	l452
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;doprnt.c: 540: {
  5038                           ;doprnt.c: 541: ((*sp++ = (c)));
  5039  000F32  C067  FFD9         	movff	sprintf@sp,fsr2l
  5040  000F36  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5041  000F3A  C07B  FFDF         	movff	sprintf@c,indf2
  5042                           
  5043                           ; BSR set to: 0
  5044  000F3E  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5045  000F40  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5046                           
  5047                           ;doprnt.c: 542: continue;
  5048  000F42  D129               	goto	u2840
  5049  000F44                     l452:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;doprnt.c: 543: }
  5053                           ;doprnt.c: 546: width = 0;
  5054                           
  5055                           ; BSR set to: 0
  5056  000F44  0E00               	movlw	0
  5057  000F46  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5058  000F48  0E00               	movlw	0
  5059  000F4A  6F79               	movwf	sprintf@width& (0+255),b
  5060                           
  5061                           ;doprnt.c: 548: flag = 0;
  5062  000F4C  0E00               	movlw	0
  5063  000F4E  6F78               	movwf	sprintf@flag& (0+255),b
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;doprnt.c: 551: switch(*f) {
  5067                           
  5068                           ;doprnt.c: 550: for(;;) {
  5069  000F50  D004               	goto	l454
  5070  000F52                     
  5071                           ;doprnt.c: 580: flag |= 0x04;
  5072                           
  5073                           ; BSR set to: 0
  5074  000F52  0100               	movlb	0	; () banked
  5075  000F54  8578               	bsf	sprintf@flag& (0+255),2,b
  5076                           
  5077                           ;doprnt.c: 581: f++;
  5078  000F56  4B69               	infsnz	sprintf@f& (0+255),f,b
  5079  000F58  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5080  000F5A                     l454:
  5081                           
  5082                           ; BSR set to: 0
  5083  000F5A  C069  FFF6         	movff	sprintf@f,tblptrl
  5084  000F5E  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5085  000F62                     	if	0	;tblptru may be non-zero
  5086  000F62                     	endif
  5087  000F62                     	if	0	;tblptru may be non-zero
  5088  000F62                     	endif
  5089  000F62  0008               	tblrd		*
  5090  000F64  50F5               	movf	tablat,w,c
  5091                           
  5092                           ; Switch size 1, requested type "space"
  5093                           ; Number of cases is 1, Range of values is 48 to 48
  5094                           ; switch strategies available:
  5095                           ; Name         Instructions Cycles
  5096                           ; simple_byte            4     3 (average)
  5097                           ;	Chosen strategy is simple_byte
  5098  000F66  0A30               	xorlw	48	; case 48
  5099  000F68  B4D8               	btfsc	status,2,c
  5100  000F6A  D7F3               	goto	l455
  5101                           
  5102                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5103                           
  5104                           ;doprnt.c: 586: }
  5105                           
  5106                           ;doprnt.c: 585: break;
  5107  000F6C  C069  FFF6         	movff	sprintf@f,tblptrl
  5108  000F70  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5109  000F74                     	if	0	;tblptru may be non-zero
  5110  000F74                     	endif
  5111  000F74                     	if	0	;tblptru may be non-zero
  5112  000F74                     	endif
  5113  000F74  0008               	tblrd		*
  5114  000F76  50F5               	movf	tablat,w,c
  5115  000F78  EC0C  F00E         	call	_isdigit
  5116  000F7C  A0D8               	btfss	status,0,c
  5117  000F7E  D034               	goto	l462
  5118                           
  5119                           ;doprnt.c: 598: width = 0;
  5120  000F80  0E00               	movlw	0
  5121  000F82  0100               	movlb	0	; () banked
  5122  000F84  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5123  000F86  0E00               	movlw	0
  5124  000F88  6F79               	movwf	sprintf@width& (0+255),b
  5125  000F8A                     
  5126                           ;doprnt.c: 600: width *= 10;
  5127                           
  5128                           ; BSR set to: 0
  5129  000F8A  C079  F02C         	movff	sprintf@width,___wmul@multiplier
  5130  000F8E  C07A  F02D         	movff	sprintf@width+1,___wmul@multiplier+1
  5131  000F92  0E00               	movlw	0
  5132  000F94  6E2F               	movwf	___wmul@multiplicand+1,c
  5133  000F96  0E0A               	movlw	10
  5134  000F98  6E2E               	movwf	___wmul@multiplicand,c
  5135  000F9A  ECE8  F00D         	call	___wmul	;wreg free
  5136  000F9E  C02C  F079         	movff	?___wmul,sprintf@width
  5137  000FA2  C02D  F07A         	movff	?___wmul+1,sprintf@width+1
  5138                           
  5139                           ;doprnt.c: 601: width += *f++ - '0';
  5140  000FA6  0ED0               	movlw	208
  5141  000FA8  0100               	movlb	0	; () banked
  5142  000FAA  6F6F               	movwf	??_sprintf& (0+255),b
  5143  000FAC  0EFF               	movlw	255
  5144  000FAE  6F70               	movwf	(??_sprintf+1)& (0+255),b
  5145  000FB0  C069  FFF6         	movff	sprintf@f,tblptrl
  5146  000FB4  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5147  000FB8                     	if	0	;tblptru may be non-zero
  5148  000FB8                     	endif
  5149  000FB8                     	if	0	;tblptru may be non-zero
  5150  000FB8                     	endif
  5151  000FB8  0008               	tblrd		*
  5152  000FBA  50F5               	movf	tablat,w,c
  5153  000FBC  6F71               	movwf	(??_sprintf+2)& (0+255),b
  5154  000FBE  6B72               	clrf	(??_sprintf+3)& (0+255),b
  5155  000FC0  516F               	movf	??_sprintf& (0+255),w,b
  5156  000FC2  2771               	addwf	(??_sprintf+2)& (0+255),f,b
  5157  000FC4  5170               	movf	(??_sprintf+1)& (0+255),w,b
  5158  000FC6  2372               	addwfc	(??_sprintf+3)& (0+255),f,b
  5159  000FC8  5171               	movf	(??_sprintf+2)& (0+255),w,b
  5160  000FCA  2779               	addwf	sprintf@width& (0+255),f,b
  5161  000FCC  5172               	movf	(??_sprintf+3)& (0+255),w,b
  5162  000FCE  237A               	addwfc	(sprintf@width+1)& (0+255),f,b
  5163                           
  5164                           ; BSR set to: 0
  5165  000FD0  4B69               	infsnz	sprintf@f& (0+255),f,b
  5166  000FD2  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5170  000FD4  C069  FFF6         	movff	sprintf@f,tblptrl
  5171  000FD8  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5172  000FDC                     	if	0	;tblptru may be non-zero
  5173  000FDC                     	endif
  5174  000FDC                     	if	0	;tblptru may be non-zero
  5175  000FDC                     	endif
  5176  000FDC  0008               	tblrd		*
  5177  000FDE  50F5               	movf	tablat,w,c
  5178  000FE0  EC0C  F00E         	call	_isdigit
  5179  000FE4  B0D8               	btfsc	status,0,c
  5180  000FE6  D7D1               	goto	l460
  5181  000FE8                     l462:
  5182  000FE8  C069  FFF6         	movff	sprintf@f,tblptrl
  5183  000FEC  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5184  000FF0  0100               	movlb	0	; () banked
  5185  000FF2  4B69               	infsnz	sprintf@f& (0+255),f,b
  5186  000FF4  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5187  000FF6                     	if	0	;tblptru may be non-zero
  5188  000FF6                     	endif
  5189  000FF6                     	if	0	;tblptru may be non-zero
  5190  000FF6                     	endif
  5191  000FF6  0008               	tblrd		*
  5192  000FF8  CFF5 F07B          	movff	tablat,sprintf@c
  5193  000FFC  517B               	movf	sprintf@c& (0+255),w,b
  5194                           
  5195                           ; Switch size 1, requested type "space"
  5196                           ; Number of cases is 3, Range of values is 0 to 105
  5197                           ; switch strategies available:
  5198                           ; Name         Instructions Cycles
  5199                           ; simple_byte           10     6 (average)
  5200                           ;	Chosen strategy is simple_byte
  5201  000FFE  0A00               	xorlw	0	; case 0
  5202  001000  B4D8               	btfsc	status,2,c
  5203  001002  D0D6               	goto	u2850
  5204  001004  0A64               	xorlw	100	; case 100
  5205  001006  B4D8               	btfsc	status,2,c
  5206  001008  D003               	goto	l467
  5207  00100A  0A0D               	xorlw	13	; case 105
  5208  00100C  A4D8               	btfss	status,2,c
  5209  00100E  D0C3               	goto	u2840
  5210  001010                     l467:
  5211                           
  5212                           ;doprnt.c: 1253: {
  5213                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5214                           
  5215                           ; BSR set to: 0
  5216  001010  C073  FFD9         	movff	sprintf@ap,fsr2l
  5217  001014  C074  FFDA         	movff	sprintf@ap+1,fsr2h
  5218  001018  CFDE F076          	movff	postinc2,sprintf@val
  5219  00101C  CFDD F077          	movff	postdec2,sprintf@val+1
  5220  001020  0E02               	movlw	2
  5221  001022  0100               	movlb	0	; () banked
  5222  001024  2773               	addwf	sprintf@ap& (0+255),f,b
  5223  001026  0E00               	movlw	0
  5224  001028  2374               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;doprnt.c: 1261: if((int)val < 0) {
  5228  00102A  AF77               	btfss	(sprintf@val+1)& (0+255),7,b
  5229  00102C  D006               	goto	l469
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;doprnt.c: 1262: flag |= 0x03;
  5233  00102E  0E03               	movlw	3
  5234  001030  1378               	iorwf	sprintf@flag& (0+255),f,b
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;doprnt.c: 1263: val = -val;
  5238  001032  6D76               	negf	sprintf@val& (0+255),b
  5239  001034  1F77               	comf	(sprintf@val+1)& (0+255),f,b
  5240  001036  B0D8               	btfsc	status,0,c
  5241  001038  2B77               	incf	(sprintf@val+1)& (0+255),f,b
  5242  00103A                     l469:
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;doprnt.c: 1264: }
  5246                           ;doprnt.c: 1266: }
  5247                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5248                           
  5249                           ; BSR set to: 0
  5250  00103A  0E01               	movlw	1
  5251  00103C  6F7B               	movwf	sprintf@c& (0+255),b
  5252  00103E                     l3169:
  5253                           
  5254                           ; BSR set to: 0
  5255  00103E  0E05               	movlw	5
  5256  001040  197B               	xorwf	sprintf@c& (0+255),w,b
  5257  001042  B4D8               	btfsc	status,2,c
  5258  001044  D012               	goto	u2730
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;doprnt.c: 1306: if(val < dpowers[c])
  5262                           
  5263                           ; BSR set to: 0
  5264                           
  5265                           ; BSR set to: 0
  5266  001046  517B               	movf	sprintf@c& (0+255),w,b
  5267  001048  0D02               	mullw	2
  5268  00104A  0E01               	movlw	low _dpowers
  5269  00104C  24F3               	addwf	prodl,w,c
  5270  00104E  6EF6               	movwf	tblptrl,c
  5271  001050  0E03               	movlw	high _dpowers
  5272  001052  20F4               	addwfc	prodh,w,c
  5273  001054  6EF7               	movwf	tblptrh,c
  5274  001056                     	if	0	;There are less than 3 active tblptr bytes
  5275  001056                     	endif
  5276  001056  0009               	tblrd		*+
  5277  001058  50F5               	movf	tablat,w,c
  5278  00105A  5D76               	subwf	sprintf@val& (0+255),w,b
  5279  00105C  0009               	tblrd		*+
  5280  00105E  50F5               	movf	tablat,w,c
  5281  001060  5977               	subwfb	(sprintf@val+1)& (0+255),w,b
  5282  001062  A0D8               	btfss	status,0,c
  5283  001064  D002               	goto	u2730
  5284                           
  5285                           ; BSR set to: 0
  5286                           
  5287                           ; BSR set to: 0
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;doprnt.c: 1307: break;
  5291  001066  2B7B               	incf	sprintf@c& (0+255),f,b
  5292  001068  D7EA               	goto	l3169
  5293  00106A                     u2730:
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5297                           
  5298                           ; BSR set to: 0
  5299  00106A  5179               	movf	sprintf@width& (0+255),w,b
  5300  00106C  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5301  00106E  B4D8               	btfsc	status,2,c
  5302  001070  D009               	goto	l473
  5303                           
  5304                           ; BSR set to: 0
  5305  001072  C078  F06F         	movff	sprintf@flag,??_sprintf
  5306  001076  0E03               	movlw	3
  5307  001078  176F               	andwf	??_sprintf& (0+255),f,b
  5308  00107A  B4D8               	btfsc	status,2,c
  5309  00107C  D003               	goto	l473
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;doprnt.c: 1346: width--;
  5313  00107E  0779               	decf	sprintf@width& (0+255),f,b
  5314  001080  A0D8               	btfss	status,0,c
  5315  001082  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5316  001084                     l473:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;doprnt.c: 1381: if(width > c)
  5320                           
  5321                           ; BSR set to: 0
  5322  001084  0E80               	movlw	128
  5323  001086  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5324  001088  0E7F               	movlw	127
  5325  00108A  6F6F               	movwf	??_sprintf& (0+255),b
  5326  00108C  5179               	movf	sprintf@width& (0+255),w,b
  5327  00108E  5D7B               	subwf	sprintf@c& (0+255),w,b
  5328  001090  517A               	movf	(sprintf@width+1)& (0+255),w,b
  5329  001092  0A80               	xorlw	128
  5330  001094  596F               	subwfb	??_sprintf& (0+255),w,b
  5331  001096  B0D8               	btfsc	status,0,c
  5332  001098  D007               	goto	l474
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;doprnt.c: 1382: width -= c;
  5336  00109A  517B               	movf	sprintf@c& (0+255),w,b
  5337  00109C  5F79               	subwf	sprintf@width& (0+255),f,b
  5338  00109E  0E00               	movlw	0
  5339  0010A0  BF7B               	btfsc	sprintf@c& (0+255),7,b
  5340  0010A2  0EFF               	movlw	255
  5341  0010A4  5B7A               	subwfb	(sprintf@width+1)& (0+255),f,b
  5342  0010A6  D004               	goto	l475
  5343  0010A8                     l474:
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;doprnt.c: 1383: else
  5347                           ;doprnt.c: 1384: width = 0;
  5348                           
  5349                           ; BSR set to: 0
  5350  0010A8  0E00               	movlw	0
  5351  0010AA  6F7A               	movwf	(sprintf@width+1)& (0+255),b
  5352  0010AC  0E00               	movlw	0
  5353  0010AE  6F79               	movwf	sprintf@width& (0+255),b
  5354  0010B0                     l475:
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;doprnt.c: 1387: if(flag & 0x04) {
  5358                           
  5359                           ; BSR set to: 0
  5360  0010B0  A578               	btfss	sprintf@flag& (0+255),2,b
  5361  0010B2  D01E               	goto	l476
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;doprnt.c: 1392: if(flag & 0x03)
  5365  0010B4  C078  F06F         	movff	sprintf@flag,??_sprintf
  5366  0010B8  0E03               	movlw	3
  5367  0010BA  176F               	andwf	??_sprintf& (0+255),f,b
  5368  0010BC  B4D8               	btfsc	status,2,c
  5369  0010BE  D008               	goto	l477
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5373  0010C0  C067  FFD9         	movff	sprintf@sp,fsr2l
  5374  0010C4  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5375  0010C8  0E2D               	movlw	45
  5376  0010CA  6EDF               	movwf	indf2,c
  5377                           
  5378                           ; BSR set to: 0
  5379  0010CC  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5380  0010CE  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5381  0010D0                     l477:
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;doprnt.c: 1415: if(width)
  5385                           
  5386                           ; BSR set to: 0
  5387  0010D0  5179               	movf	sprintf@width& (0+255),w,b
  5388  0010D2  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5389  0010D4  B4D8               	btfsc	status,2,c
  5390  0010D6  D02D               	goto	l485
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5394                           
  5395                           ; BSR set to: 0
  5396                           
  5397                           ;doprnt.c: 1416: do
  5398  0010D8  C067  FFD9         	movff	sprintf@sp,fsr2l
  5399  0010DC  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5400  0010E0  0E30               	movlw	48
  5401  0010E2  6EDF               	movwf	indf2,c
  5402                           
  5403                           ; BSR set to: 0
  5404  0010E4  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5405  0010E6  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;doprnt.c: 1418: while(--width);
  5409  0010E8  0779               	decf	sprintf@width& (0+255),f,b
  5410  0010EA  A0D8               	btfss	status,0,c
  5411  0010EC  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5412  0010EE  D7F0               	goto	l477
  5413  0010F0                     l476:
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;doprnt.c: 1422: {
  5417                           ;doprnt.c: 1424: if(width
  5418                           ;doprnt.c: 1428: )
  5419                           
  5420                           ; BSR set to: 0
  5421  0010F0  5179               	movf	sprintf@width& (0+255),w,b
  5422  0010F2  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5423  0010F4  B4D8               	btfsc	status,2,c
  5424  0010F6  D00F               	goto	u2820
  5425  0010F8                     u2810:
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5429                           
  5430                           ; BSR set to: 0
  5431                           
  5432                           ;doprnt.c: 1429: do
  5433  0010F8  C067  FFD9         	movff	sprintf@sp,fsr2l
  5434  0010FC  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5435  001100  0E20               	movlw	32
  5436  001102  6EDF               	movwf	indf2,c
  5437                           
  5438                           ; BSR set to: 0
  5439  001104  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5440  001106  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;doprnt.c: 1431: while(--width);
  5444  001108  0779               	decf	sprintf@width& (0+255),f,b
  5445  00110A  A0D8               	btfss	status,0,c
  5446  00110C  077A               	decf	(sprintf@width+1)& (0+255),f,b
  5447  00110E  5179               	movf	sprintf@width& (0+255),w,b
  5448  001110  117A               	iorwf	(sprintf@width+1)& (0+255),w,b
  5449  001112  A4D8               	btfss	status,2,c
  5450  001114  D7F1               	goto	u2810
  5451  001116                     u2820:
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;doprnt.c: 1438: if(flag & 0x03)
  5455                           
  5456                           ; BSR set to: 0
  5457                           
  5458                           ; BSR set to: 0
  5459  001116  C078  F06F         	movff	sprintf@flag,??_sprintf
  5460  00111A  0E03               	movlw	3
  5461  00111C  176F               	andwf	??_sprintf& (0+255),f,b
  5462  00111E  B4D8               	btfsc	status,2,c
  5463  001120  D008               	goto	l485
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5467  001122  C067  FFD9         	movff	sprintf@sp,fsr2l
  5468  001126  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5469  00112A  0E2D               	movlw	45
  5470  00112C  6EDF               	movwf	indf2,c
  5471                           
  5472                           ; BSR set to: 0
  5473  00112E  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5474  001130  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5475  001132                     l485:
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;doprnt.c: 1469: }
  5479                           ;doprnt.c: 1472: prec = c;
  5480                           
  5481                           ; BSR set to: 0
  5482                           
  5483                           ; BSR set to: 0
  5484  001132  C07B  F075         	movff	sprintf@c,sprintf@prec
  5485                           
  5486                           ;doprnt.c: 1474: while(prec--) {
  5487  001136  D02B               	goto	l486
  5488  001138                     
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 1478: {
  5491                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5492                           
  5493                           ; BSR set to: 0
  5494  001138  5175               	movf	sprintf@prec& (0+255),w,b
  5495  00113A  0D02               	mullw	2
  5496  00113C  0E01               	movlw	low _dpowers
  5497  00113E  24F3               	addwf	prodl,w,c
  5498  001140  6EF6               	movwf	tblptrl,c
  5499  001142  0E03               	movlw	high _dpowers
  5500  001144  20F4               	addwfc	prodh,w,c
  5501  001146  6EF7               	movwf	tblptrh,c
  5502  001148                     	if	0	;There are less than 3 active tblptr bytes
  5503  001148                     	endif
  5504  001148  0009               	tblrd		*+
  5505  00114A  CFF5 F02E          	movff	tablat,___lwdiv@divisor
  5506  00114E  000A               	tblrd		*-
  5507  001150  CFF5 F02F          	movff	tablat,___lwdiv@divisor+1
  5508  001154  C076  F02C         	movff	sprintf@val,___lwdiv@dividend
  5509  001158  C077  F02D         	movff	sprintf@val+1,___lwdiv@dividend+1
  5510  00115C  EC8C  F00C         	call	___lwdiv	;wreg free
  5511  001160  C02C  F063         	movff	?___lwdiv,___lwmod@dividend
  5512  001164  C02D  F064         	movff	?___lwdiv+1,___lwmod@dividend+1
  5513  001168  0E00               	movlw	0
  5514  00116A  0100               	movlb	0	; () banked
  5515  00116C  6F66               	movwf	(___lwmod@divisor+1)& (0+255),b
  5516  00116E  0E0A               	movlw	10
  5517  001170  6F65               	movwf	___lwmod@divisor& (0+255),b
  5518  001172  ECB6  F00C         	call	___lwmod	;wreg free
  5519  001176  0100               	movlb	0	; () banked
  5520  001178  5163               	movf	?___lwmod& (0+255),w,b
  5521  00117A  0F30               	addlw	48
  5522  00117C  6F7B               	movwf	sprintf@c& (0+255),b
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;doprnt.c: 1523: }
  5526                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5527  00117E  C067  FFD9         	movff	sprintf@sp,fsr2l
  5528  001182  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5529  001186  C07B  FFDF         	movff	sprintf@c,indf2
  5530                           
  5531                           ; BSR set to: 0
  5532  00118A  4B67               	infsnz	sprintf@sp& (0+255),f,b
  5533  00118C  2B68               	incf	(sprintf@sp+1)& (0+255),f,b
  5534  00118E                     l486:
  5535                           
  5536                           ; BSR set to: 0
  5537                           
  5538                           ; BSR set to: 0
  5539  00118E  0775               	decf	sprintf@prec& (0+255),f,b
  5540  001190  2975               	incf	sprintf@prec& (0+255),w,b
  5541  001192  A4D8               	btfss	status,2,c
  5542  001194  D7D1               	goto	l487
  5543  001196                     u2840:
  5544                           
  5545                           ; BSR set to: 0
  5546                           
  5547                           ; BSR set to: 0
  5548  001196  C069  FFF6         	movff	sprintf@f,tblptrl
  5549  00119A  C06A  FFF7         	movff	sprintf@f+1,tblptrh
  5550  00119E  0100               	movlb	0	; () banked
  5551  0011A0  4B69               	infsnz	sprintf@f& (0+255),f,b
  5552  0011A2  2B6A               	incf	(sprintf@f+1)& (0+255),f,b
  5553  0011A4                     	if	0	;tblptru may be non-zero
  5554  0011A4                     	endif
  5555  0011A4                     	if	0	;tblptru may be non-zero
  5556  0011A4                     	endif
  5557  0011A4  0008               	tblrd		*
  5558  0011A6  CFF5 F07B          	movff	tablat,sprintf@c
  5559  0011AA  517B               	movf	sprintf@c& (0+255),w,b
  5560  0011AC  A4D8               	btfss	status,2,c
  5561  0011AE  D6BD               	goto	l451
  5562  0011B0                     u2850:
  5563                           
  5564                           ;doprnt.c: 1538: *sp = 0;
  5565                           
  5566                           ; BSR set to: 0
  5567                           
  5568                           ;doprnt.c: 1525: }
  5569                           ;doprnt.c: 1533: }
  5570                           ;doprnt.c: 1535: alldone:
  5571                           
  5572                           ; BSR set to: 0
  5573  0011B0  C067  FFD9         	movff	sprintf@sp,fsr2l
  5574  0011B4  C068  FFDA         	movff	sprintf@sp+1,fsr2h
  5575  0011B8  0E00               	movlw	0
  5576  0011BA  6EDF               	movwf	indf2,c
  5577  0011BC  0012               	return	
  5578  0011BE                     __end_of_sprintf:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           indf1	equ	0xFE7
  5590                           plusw1	equ	0xFE3
  5591                           fsr1h	equ	0xFE2
  5592                           fsr1l	equ	0xFE1
  5593                           indf2	equ	0xFDF
  5594                           postinc2	equ	0xFDE
  5595                           postdec2	equ	0xFDD
  5596                           plusw2	equ	0xFDB
  5597                           fsr2h	equ	0xFDA
  5598                           fsr2l	equ	0xFD9
  5599                           status	equ	0xFD8
  5600                           
  5601 ;; *************** function _isdigit *****************
  5602 ;; Defined at:
  5603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  5604 ;; Parameters:    Size  Location     Type
  5605 ;;  c               1    wreg     unsigned char 
  5606 ;; Auto vars:     Size  Location     Type
  5607 ;;  c               1   45[COMRAM] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;		None               void
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5617 ;;      Params:         0       0       0       0
  5618 ;;      Locals:         2       0       0       0
  5619 ;;      Temps:          1       0       0       0
  5620 ;;      Totals:         3       0       0       0
  5621 ;;Total ram usage:        3 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    3
  5624 ;; This function calls:
  5625 ;;		Nothing
  5626 ;; This function is called by:
  5627 ;;		_sprintf
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text19
  5632  001C18                     __ptext19:
  5633                           	opt stack 0
  5634  001C18                     _isdigit:
  5635                           	opt stack 26
  5636                           
  5637                           ;incstack = 0
  5638                           ;isdigit@c stored from wreg
  5639  001C18  6E2E               	movwf	isdigit@c,c
  5640  001C1A  0E00               	movlw	0
  5641  001C1C  6E2D               	movwf	_isdigit$1773,c
  5642  001C1E  0E3A               	movlw	58
  5643  001C20  602E               	cpfslt	isdigit@c,c
  5644  001C22  D005               	goto	l820
  5645  001C24  0E2F               	movlw	47
  5646  001C26  642E               	cpfsgt	isdigit@c,c
  5647  001C28  D002               	goto	l820
  5648  001C2A  0E01               	movlw	1
  5649  001C2C  6E2D               	movwf	_isdigit$1773,c
  5650  001C2E                     l820:
  5651  001C2E  C02D  F02C         	movff	_isdigit$1773,??_isdigit
  5652  001C32  302C               	rrcf	??_isdigit,w,c
  5653  001C34  0012               	return	
  5654  001C36                     __end_of_isdigit:
  5655                           	opt stack 0
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodh	equ	0xFF4
  5661                           prodl	equ	0xFF3
  5662                           intcon	equ	0xFF2
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           indf1	equ	0xFE7
  5666                           plusw1	equ	0xFE3
  5667                           fsr1h	equ	0xFE2
  5668                           fsr1l	equ	0xFE1
  5669                           indf2	equ	0xFDF
  5670                           postinc2	equ	0xFDE
  5671                           postdec2	equ	0xFDD
  5672                           plusw2	equ	0xFDB
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function ___wmul *****************
  5678 ;; Defined at:
  5679 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  multiplier      2   43[COMRAM] unsigned int 
  5682 ;;  multiplicand    2   45[COMRAM] unsigned int 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  product         2   47[COMRAM] unsigned int 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  2   43[COMRAM] unsigned int 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0, prodl, prodh
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5694 ;;      Params:         4       0       0       0
  5695 ;;      Locals:         2       0       0       0
  5696 ;;      Temps:          0       0       0       0
  5697 ;;      Totals:         6       0       0       0
  5698 ;;Total ram usage:        6 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    3
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_setMotorPWM
  5705 ;;		_sprintf
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text20
  5710  001BD0                     __ptext20:
  5711                           	opt stack 0
  5712  001BD0                     ___wmul:
  5713                           	opt stack 24
  5714                           
  5715                           ;incstack = 0
  5716  001BD0  502C               	movf	___wmul@multiplier,w,c
  5717  001BD2  022E               	mulwf	___wmul@multiplicand,c
  5718  001BD4  CFF3 F030          	movff	prodl,___wmul@product
  5719  001BD8  CFF4 F031          	movff	prodh,___wmul@product+1
  5720  001BDC  502C               	movf	___wmul@multiplier,w,c
  5721  001BDE  022F               	mulwf	___wmul@multiplicand+1,c
  5722  001BE0  50F3               	movf	prodl,w,c
  5723  001BE2  2631               	addwf	___wmul@product+1,f,c
  5724  001BE4  502D               	movf	___wmul@multiplier+1,w,c
  5725  001BE6  022E               	mulwf	___wmul@multiplicand,c
  5726  001BE8  50F3               	movf	prodl,w,c
  5727  001BEA  2631               	addwf	___wmul@product+1,f,c
  5728  001BEC  C030  F02C         	movff	___wmul@product,?___wmul
  5729  001BF0  C031  F02D         	movff	___wmul@product+1,?___wmul+1
  5730  001BF4  0012               	return	
  5731  001BF6                     __end_of___wmul:
  5732                           	opt stack 0
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           prodh	equ	0xFF4
  5738                           prodl	equ	0xFF3
  5739                           intcon	equ	0xFF2
  5740                           postinc0	equ	0xFEE
  5741                           wreg	equ	0xFE8
  5742                           indf1	equ	0xFE7
  5743                           plusw1	equ	0xFE3
  5744                           fsr1h	equ	0xFE2
  5745                           fsr1l	equ	0xFE1
  5746                           indf2	equ	0xFDF
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           plusw2	equ	0xFDB
  5750                           fsr2h	equ	0xFDA
  5751                           fsr2l	equ	0xFD9
  5752                           status	equ	0xFD8
  5753                           
  5754 ;; *************** function ___lwmod *****************
  5755 ;; Defined at:
  5756 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  5757 ;; Parameters:    Size  Location     Type
  5758 ;;  dividend        2    3[BANK0 ] unsigned int 
  5759 ;;  divisor         2    5[BANK0 ] unsigned int 
  5760 ;; Auto vars:     Size  Location     Type
  5761 ;;  counter         1   47[COMRAM] unsigned char 
  5762 ;; Return value:  Size  Location     Type
  5763 ;;                  2    3[BANK0 ] unsigned int 
  5764 ;; Registers used:
  5765 ;;		wreg, status,2, status,0
  5766 ;; Tracked objects:
  5767 ;;		On entry : 0/0
  5768 ;;		On exit  : 0/0
  5769 ;;		Unchanged: 0/0
  5770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5771 ;;      Params:         0       4       0       0
  5772 ;;      Locals:         1       0       0       0
  5773 ;;      Temps:          0       0       0       0
  5774 ;;      Totals:         1       4       0       0
  5775 ;;Total ram usage:        5 bytes
  5776 ;; Hardware stack levels used:    1
  5777 ;; Hardware stack levels required when called:    3
  5778 ;; This function calls:
  5779 ;;		Nothing
  5780 ;; This function is called by:
  5781 ;;		_sprintf
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           	psect	text21
  5786  00196C                     __ptext21:
  5787                           	opt stack 0
  5788  00196C                     ___lwmod:
  5789                           	opt stack 26
  5790                           
  5791                           ;incstack = 0
  5792  00196C  0100               	movlb	0	; () banked
  5793  00196E  5165               	movf	___lwmod@divisor& (0+255),w,b
  5794  001970  1166               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5795  001972  B4D8               	btfsc	status,2,c
  5796  001974  D018               	goto	l914
  5797                           
  5798                           ; BSR set to: 0
  5799  001976  0E01               	movlw	1
  5800  001978  6E30               	movwf	___lwmod@counter,c
  5801  00197A  D004               	goto	l909
  5802  00197C                     
  5803                           ; BSR set to: 0
  5804                           
  5805                           ; BSR set to: 0
  5806  00197C  90D8               	bcf	status,0,c
  5807  00197E  3765               	rlcf	___lwmod@divisor& (0+255),f,b
  5808  001980  3766               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5809  001982  2A30               	incf	___lwmod@counter,f,c
  5810  001984                     l909:
  5811                           
  5812                           ; BSR set to: 0
  5813                           
  5814                           ; BSR set to: 0
  5815  001984  AF66               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5816  001986  D7FA               	goto	l910
  5817  001988                     u1460:
  5818                           
  5819                           ; BSR set to: 0
  5820                           
  5821                           ; BSR set to: 0
  5822                           
  5823                           ; BSR set to: 0
  5824  001988  5165               	movf	___lwmod@divisor& (0+255),w,b
  5825  00198A  5D63               	subwf	___lwmod@dividend& (0+255),w,b
  5826  00198C  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5827  00198E  5964               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5828  001990  A0D8               	btfss	status,0,c
  5829  001992  D004               	goto	l913
  5830                           
  5831                           ; BSR set to: 0
  5832  001994  5165               	movf	___lwmod@divisor& (0+255),w,b
  5833  001996  5F63               	subwf	___lwmod@dividend& (0+255),f,b
  5834  001998  5166               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5835  00199A  5B64               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5836  00199C                     l913:
  5837                           
  5838                           ; BSR set to: 0
  5839                           
  5840                           ; BSR set to: 0
  5841  00199C  90D8               	bcf	status,0,c
  5842  00199E  3366               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5843  0019A0  3365               	rrcf	___lwmod@divisor& (0+255),f,b
  5844                           
  5845                           ; BSR set to: 0
  5846  0019A2  2E30               	decfsz	___lwmod@counter,f,c
  5847  0019A4  D7F1               	goto	u1460
  5848  0019A6                     l914:
  5849                           
  5850                           ; BSR set to: 0
  5851                           
  5852                           ; BSR set to: 0
  5853  0019A6  C063  F063         	movff	___lwmod@dividend,?___lwmod
  5854  0019AA  C064  F064         	movff	___lwmod@dividend+1,?___lwmod+1
  5855                           
  5856                           ; BSR set to: 0
  5857  0019AE  0012               	return		;funcret
  5858  0019B0                     __end_of___lwmod:
  5859                           	opt stack 0
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           intcon	equ	0xFF2
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           indf1	equ	0xFE7
  5870                           plusw1	equ	0xFE3
  5871                           fsr1h	equ	0xFE2
  5872                           fsr1l	equ	0xFE1
  5873                           indf2	equ	0xFDF
  5874                           postinc2	equ	0xFDE
  5875                           postdec2	equ	0xFDD
  5876                           plusw2	equ	0xFDB
  5877                           fsr2h	equ	0xFDA
  5878                           fsr2l	equ	0xFD9
  5879                           status	equ	0xFD8
  5880                           
  5881 ;; *************** function ___lwdiv *****************
  5882 ;; Defined at:
  5883 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;  dividend        2   43[COMRAM] unsigned int 
  5886 ;;  divisor         2   45[COMRAM] unsigned int 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  quotient        2    1[BANK0 ] unsigned int 
  5889 ;;  counter         1    0[BANK0 ] unsigned char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  2   43[COMRAM] unsigned int 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5899 ;;      Params:         4       0       0       0
  5900 ;;      Locals:         0       3       0       0
  5901 ;;      Temps:          0       0       0       0
  5902 ;;      Totals:         4       3       0       0
  5903 ;;Total ram usage:        7 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    3
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_sprintf
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text22
  5914  001918                     __ptext22:
  5915                           	opt stack 0
  5916  001918                     ___lwdiv:
  5917                           	opt stack 26
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;incstack = 0
  5921  001918  0E00               	movlw	0
  5922  00191A  0100               	movlb	0	; () banked
  5923  00191C  6F62               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5924  00191E  0E00               	movlw	0
  5925  001920  6F61               	movwf	___lwdiv@quotient& (0+255),b
  5926                           
  5927                           ; BSR set to: 0
  5928  001922  502E               	movf	___lwdiv@divisor,w,c
  5929  001924  102F               	iorwf	___lwdiv@divisor+1,w,c
  5930  001926  B4D8               	btfsc	status,2,c
  5931  001928  D01C               	goto	l904
  5932                           
  5933                           ; BSR set to: 0
  5934  00192A  0E01               	movlw	1
  5935  00192C  6F60               	movwf	___lwdiv@counter& (0+255),b
  5936  00192E  D004               	goto	l899
  5937  001930                     
  5938                           ; BSR set to: 0
  5939                           
  5940                           ; BSR set to: 0
  5941  001930  90D8               	bcf	status,0,c
  5942  001932  362E               	rlcf	___lwdiv@divisor,f,c
  5943  001934  362F               	rlcf	___lwdiv@divisor+1,f,c
  5944  001936  2B60               	incf	___lwdiv@counter& (0+255),f,b
  5945  001938                     l899:
  5946                           
  5947                           ; BSR set to: 0
  5948                           
  5949                           ; BSR set to: 0
  5950  001938  AE2F               	btfss	___lwdiv@divisor+1,7,c
  5951  00193A  D7FA               	goto	l900
  5952  00193C                     u2500:
  5953                           
  5954                           ; BSR set to: 0
  5955                           
  5956                           ; BSR set to: 0
  5957                           
  5958                           ; BSR set to: 0
  5959  00193C  90D8               	bcf	status,0,c
  5960  00193E  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
  5961  001940  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5962                           
  5963                           ; BSR set to: 0
  5964  001942  502E               	movf	___lwdiv@divisor,w,c
  5965  001944  5C2C               	subwf	___lwdiv@dividend,w,c
  5966  001946  502F               	movf	___lwdiv@divisor+1,w,c
  5967  001948  582D               	subwfb	___lwdiv@dividend+1,w,c
  5968  00194A  A0D8               	btfss	status,0,c
  5969  00194C  D005               	goto	l903
  5970                           
  5971                           ; BSR set to: 0
  5972  00194E  502E               	movf	___lwdiv@divisor,w,c
  5973  001950  5E2C               	subwf	___lwdiv@dividend,f,c
  5974  001952  502F               	movf	___lwdiv@divisor+1,w,c
  5975  001954  5A2D               	subwfb	___lwdiv@dividend+1,f,c
  5976                           
  5977                           ; BSR set to: 0
  5978  001956  8161               	bsf	___lwdiv@quotient& (0+255),0,b
  5979  001958                     l903:
  5980                           
  5981                           ; BSR set to: 0
  5982                           
  5983                           ; BSR set to: 0
  5984  001958  90D8               	bcf	status,0,c
  5985  00195A  322F               	rrcf	___lwdiv@divisor+1,f,c
  5986  00195C  322E               	rrcf	___lwdiv@divisor,f,c
  5987                           
  5988                           ; BSR set to: 0
  5989  00195E  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
  5990  001960  D7ED               	goto	u2500
  5991  001962                     l904:
  5992                           
  5993                           ; BSR set to: 0
  5994                           
  5995                           ; BSR set to: 0
  5996  001962  C061  F02C         	movff	___lwdiv@quotient,?___lwdiv
  5997  001966  C062  F02D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5998                           
  5999                           ; BSR set to: 0
  6000  00196A  0012               	return		;funcret
  6001  00196C                     __end_of___lwdiv:
  6002                           	opt stack 0
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           intcon	equ	0xFF2
  6010                           postinc0	equ	0xFEE
  6011                           wreg	equ	0xFE8
  6012                           indf1	equ	0xFE7
  6013                           plusw1	equ	0xFE3
  6014                           fsr1h	equ	0xFE2
  6015                           fsr1l	equ	0xFE1
  6016                           indf2	equ	0xFDF
  6017                           postinc2	equ	0xFDE
  6018                           postdec2	equ	0xFDD
  6019                           plusw2	equ	0xFDB
  6020                           fsr2h	equ	0xFDA
  6021                           fsr2l	equ	0xFD9
  6022                           status	equ	0xFD8
  6023                           
  6024 ;; *************** function _grabRightIR *****************
  6025 ;; Defined at:
  6026 ;;		line 74 in file "IR_Reading.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;		None
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6031 ;;  i               1    2[BANK0 ] unsigned char 
  6032 ;; Return value:  Size  Location     Type
  6033 ;;                  2   43[COMRAM] unsigned int 
  6034 ;; Registers used:
  6035 ;;		wreg, status,2, status,0
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6041 ;;      Params:         2       0       0       0
  6042 ;;      Locals:         0       3       0       0
  6043 ;;      Temps:          3       0       0       0
  6044 ;;      Totals:         5       3       0       0
  6045 ;;Total ram usage:        8 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; Hardware stack levels required when called:    3
  6048 ;; This function calls:
  6049 ;;		Nothing
  6050 ;; This function is called by:
  6051 ;;		_ScanIR
  6052 ;;		_ScanWithRange
  6053 ;;		_main
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057                           	psect	text23
  6058  0017CC                     __ptext23:
  6059                           	opt stack 0
  6060  0017CC                     _grabRightIR:
  6061                           	opt stack 27
  6062                           
  6063                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;incstack = 0
  6067  0017CC  0E00               	movlw	0
  6068  0017CE  0100               	movlb	0	; () banked
  6069  0017D0  6F61               	movwf	(grabRightIR@IR_signal+1)& (0+255),b
  6070  0017D2  0E00               	movlw	0
  6071  0017D4  6F60               	movwf	grabRightIR@IR_signal& (0+255),b
  6072                           
  6073                           ;IR_Reading.c: 77: unsigned char i=0;
  6074  0017D6  0E00               	movlw	0
  6075  0017D8  6F62               	movwf	grabRightIR@i& (0+255),b
  6076                           
  6077                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  6078  0017DA  0E00               	movlw	0
  6079  0017DC  6F62               	movwf	grabRightIR@i& (0+255),b
  6080  0017DE                     l3075:
  6081                           
  6082                           ; BSR set to: 0
  6083  0017DE  0E03               	movlw	3
  6084  0017E0  6562               	cpfsgt	grabRightIR@i& (0+255),b
  6085  0017E2  D001               	goto	l110
  6086  0017E4  D01F               	goto	u2580
  6087  0017E6                     l110:
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  6091                           
  6092                           ; BSR set to: 0
  6093  0017E6  5069               	movf	3945,w,c	;volatile
  6094  0017E8  6E2E               	movwf	??_grabRightIR& (0+255),c
  6095  0017EA  6A2F               	clrf	(??_grabRightIR+1)& (0+255),c
  6096  0017EC  0E07               	movlw	7
  6097  0017EE                     u2575:
  6098  0017EE  90D8               	bcf	status,0,c
  6099  0017F0  362E               	rlcf	??_grabRightIR,f,c
  6100  0017F2  362F               	rlcf	??_grabRightIR+1,f,c
  6101  0017F4  2EE8               	decfsz	wreg,f,c
  6102  0017F6  D7FB               	goto	u2575
  6103  0017F8  CF68 F030          	movff	3944,??_grabRightIR+2	;volatile
  6104  0017FC  90D8               	bcf	status,0,c
  6105  0017FE  3230               	rrcf	??_grabRightIR+2,f,c
  6106  001800  5030               	movf	??_grabRightIR+2,w,c
  6107  001802  122E               	iorwf	??_grabRightIR,f,c
  6108  001804  0E00               	movlw	0
  6109  001806  122F               	iorwf	??_grabRightIR+1,f,c
  6110  001808  502E               	movf	??_grabRightIR,w,c
  6111  00180A  2760               	addwf	grabRightIR@IR_signal& (0+255),f,b
  6112  00180C  502F               	movf	??_grabRightIR+1,w,c
  6113  00180E  2361               	addwfc	(grabRightIR@IR_signal+1)& (0+255),f,b
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  6117  001810  0E82               	movlw	130
  6118  001812  6E2E               	movwf	??_grabRightIR& (0+255),c
  6119  001814  0EDE               	movlw	222
  6120  001816                     u3447:
  6121  001816  2EE8               	decfsz	wreg,f,c
  6122  001818  D7FE               	bra	u3447
  6123  00181A  2E2E               	decfsz	??_grabRightIR& (0+255),f,c
  6124  00181C  D7FC               	bra	u3447
  6125  00181E  0100               	movlb	0	; () banked
  6126  001820  2B62               	incf	grabRightIR@i& (0+255),f,b
  6127  001822  D7DD               	goto	l3075
  6128  001824                     u2580:
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;IR_Reading.c: 83: }
  6132                           ;IR_Reading.c: 85: return IR_signal>>2;
  6133                           
  6134                           ; BSR set to: 0
  6135  001824  C060  F02E         	movff	grabRightIR@IR_signal,??_grabRightIR
  6136  001828  C061  F02F         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  6137  00182C  90D8               	bcf	status,0,c
  6138  00182E  322F               	rrcf	??_grabRightIR+1,f,c
  6139  001830  322E               	rrcf	??_grabRightIR,f,c
  6140  001832  90D8               	bcf	status,0,c
  6141  001834  322F               	rrcf	??_grabRightIR+1,f,c
  6142  001836  322E               	rrcf	??_grabRightIR,f,c
  6143  001838  C02E  F02C         	movff	??_grabRightIR,?_grabRightIR
  6144  00183C  C02F  F02D         	movff	??_grabRightIR+1,?_grabRightIR+1
  6145  001840  0012               	return	
  6146  001842                     __end_of_grabRightIR:
  6147                           	opt stack 0
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodh	equ	0xFF4
  6153                           prodl	equ	0xFF3
  6154                           intcon	equ	0xFF2
  6155                           postinc0	equ	0xFEE
  6156                           wreg	equ	0xFE8
  6157                           indf1	equ	0xFE7
  6158                           plusw1	equ	0xFE3
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           indf2	equ	0xFDF
  6162                           postinc2	equ	0xFDE
  6163                           postdec2	equ	0xFDD
  6164                           plusw2	equ	0xFDB
  6165                           fsr2h	equ	0xFDA
  6166                           fsr2l	equ	0xFD9
  6167                           status	equ	0xFD8
  6168                           
  6169 ;; *************** function _grabLeftIR *****************
  6170 ;; Defined at:
  6171 ;;		line 90 in file "IR_Reading.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;  IR_signal       2    0[BANK0 ] unsigned int 
  6176 ;;  i               1    2[BANK0 ] unsigned char 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  2   43[COMRAM] unsigned int 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, status,0
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6186 ;;      Params:         2       0       0       0
  6187 ;;      Locals:         0       3       0       0
  6188 ;;      Temps:          3       0       0       0
  6189 ;;      Totals:         5       3       0       0
  6190 ;;Total ram usage:        8 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:    3
  6193 ;; This function calls:
  6194 ;;		Nothing
  6195 ;; This function is called by:
  6196 ;;		_ScanIR
  6197 ;;		_ScanWithRange
  6198 ;;		_main
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text24
  6203  001842                     __ptext24:
  6204                           	opt stack 0
  6205  001842                     _grabLeftIR:
  6206                           	opt stack 27
  6207                           
  6208                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;incstack = 0
  6212  001842  0E00               	movlw	0
  6213  001844  0100               	movlb	0	; () banked
  6214  001846  6F61               	movwf	(grabLeftIR@IR_signal+1)& (0+255),b
  6215  001848  0E00               	movlw	0
  6216  00184A  6F60               	movwf	grabLeftIR@IR_signal& (0+255),b
  6217                           
  6218                           ;IR_Reading.c: 93: unsigned char i=0;
  6219  00184C  0E00               	movlw	0
  6220  00184E  6F62               	movwf	grabLeftIR@i& (0+255),b
  6221                           
  6222                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  6223  001850  0E00               	movlw	0
  6224  001852  6F62               	movwf	grabLeftIR@i& (0+255),b
  6225  001854                     l3091:
  6226                           
  6227                           ; BSR set to: 0
  6228  001854  0E03               	movlw	3
  6229  001856  6562               	cpfsgt	grabLeftIR@i& (0+255),b
  6230  001858  D001               	goto	l115
  6231  00185A  D01F               	goto	u2610
  6232  00185C                     l115:
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  6236                           
  6237                           ; BSR set to: 0
  6238  00185C  5067               	movf	3943,w,c	;volatile
  6239  00185E  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6240  001860  6A2F               	clrf	(??_grabLeftIR+1)& (0+255),c
  6241  001862  0E07               	movlw	7
  6242  001864                     u2605:
  6243  001864  90D8               	bcf	status,0,c
  6244  001866  362E               	rlcf	??_grabLeftIR,f,c
  6245  001868  362F               	rlcf	??_grabLeftIR+1,f,c
  6246  00186A  2EE8               	decfsz	wreg,f,c
  6247  00186C  D7FB               	goto	u2605
  6248  00186E  CF66 F030          	movff	3942,??_grabLeftIR+2	;volatile
  6249  001872  90D8               	bcf	status,0,c
  6250  001874  3230               	rrcf	??_grabLeftIR+2,f,c
  6251  001876  5030               	movf	??_grabLeftIR+2,w,c
  6252  001878  122E               	iorwf	??_grabLeftIR,f,c
  6253  00187A  0E00               	movlw	0
  6254  00187C  122F               	iorwf	??_grabLeftIR+1,f,c
  6255  00187E  502E               	movf	??_grabLeftIR,w,c
  6256  001880  2760               	addwf	grabLeftIR@IR_signal& (0+255),f,b
  6257  001882  502F               	movf	??_grabLeftIR+1,w,c
  6258  001884  2361               	addwfc	(grabLeftIR@IR_signal+1)& (0+255),f,b
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  6262  001886  0E82               	movlw	130
  6263  001888  6E2E               	movwf	??_grabLeftIR& (0+255),c
  6264  00188A  0EDE               	movlw	222
  6265  00188C                     u3457:
  6266  00188C  2EE8               	decfsz	wreg,f,c
  6267  00188E  D7FE               	bra	u3457
  6268  001890  2E2E               	decfsz	??_grabLeftIR& (0+255),f,c
  6269  001892  D7FC               	bra	u3457
  6270  001894  0100               	movlb	0	; () banked
  6271  001896  2B62               	incf	grabLeftIR@i& (0+255),f,b
  6272  001898  D7DD               	goto	l3091
  6273  00189A                     u2610:
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;IR_Reading.c: 99: }
  6277                           ;IR_Reading.c: 101: return IR_signal>>2;
  6278                           
  6279                           ; BSR set to: 0
  6280  00189A  C060  F02E         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  6281  00189E  C061  F02F         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  6282  0018A2  90D8               	bcf	status,0,c
  6283  0018A4  322F               	rrcf	??_grabLeftIR+1,f,c
  6284  0018A6  322E               	rrcf	??_grabLeftIR,f,c
  6285  0018A8  90D8               	bcf	status,0,c
  6286  0018AA  322F               	rrcf	??_grabLeftIR+1,f,c
  6287  0018AC  322E               	rrcf	??_grabLeftIR,f,c
  6288  0018AE  C02E  F02C         	movff	??_grabLeftIR,?_grabLeftIR
  6289  0018B2  C02F  F02D         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  6290  0018B6  0012               	return	
  6291  0018B8                     __end_of_grabLeftIR:
  6292                           	opt stack 0
  6293                           tblptru	equ	0xFF8
  6294                           tblptrh	equ	0xFF7
  6295                           tblptrl	equ	0xFF6
  6296                           tablat	equ	0xFF5
  6297                           prodh	equ	0xFF4
  6298                           prodl	equ	0xFF3
  6299                           intcon	equ	0xFF2
  6300                           postinc0	equ	0xFEE
  6301                           wreg	equ	0xFE8
  6302                           indf1	equ	0xFE7
  6303                           plusw1	equ	0xFE3
  6304                           fsr1h	equ	0xFE2
  6305                           fsr1l	equ	0xFE1
  6306                           indf2	equ	0xFDF
  6307                           postinc2	equ	0xFDE
  6308                           postdec2	equ	0xFDD
  6309                           plusw2	equ	0xFDB
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function _SetLine *****************
  6315 ;; Defined at:
  6316 ;;		line 74 in file "LCD.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  line            1    wreg     unsigned char 
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  line            1    0[BANK0 ] unsigned char 
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2, status,0, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6330 ;;      Params:         0       0       0       0
  6331 ;;      Locals:         0       1       0       0
  6332 ;;      Temps:          0       0       0       0
  6333 ;;      Totals:         0       1       0       0
  6334 ;;Total ram usage:        1 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    6
  6337 ;; This function calls:
  6338 ;;		_SendLCD
  6339 ;; This function is called by:
  6340 ;;		_ScanIR
  6341 ;;		_ScanWithRange
  6342 ;;		_main
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text25
  6347  001B44                     __ptext25:
  6348                           	opt stack 0
  6349  001B44                     _SetLine:
  6350                           	opt stack 24
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;incstack = 0
  6354                           ;SetLine@line stored from wreg
  6355  001B44  0100               	movlb	0	; () banked
  6356  001B46  6F60               	movwf	SetLine@line& (0+255),b
  6357                           
  6358                           ;LCD.c: 75: if (line==1) {
  6359  001B48  0100               	movlb	0	; () banked
  6360  001B4A  0560               	decf	SetLine@line& (0+255),w,b
  6361  001B4C  A4D8               	btfss	status,2,c
  6362  001B4E  D006               	goto	l152
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;LCD.c: 76: SendLCD(0x80,0);
  6366  001B50  0E00               	movlw	0
  6367  001B52  6E30               	movwf	SendLCD@type,c
  6368  001B54  0E80               	movlw	128
  6369  001B56  ECBD  F00D         	call	_SendLCD
  6370                           
  6371                           ;LCD.c: 77: } else if (line==2) {
  6372  001B5A  D00A               	goto	l154
  6373  001B5C                     l152:
  6374  001B5C  0E02               	movlw	2
  6375  001B5E  0100               	movlb	0	; () banked
  6376  001B60  1960               	xorwf	SetLine@line& (0+255),w,b
  6377  001B62  A4D8               	btfss	status,2,c
  6378  001B64  D005               	goto	l154
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;LCD.c: 78: SendLCD(0xC0,0);
  6382  001B66  0E00               	movlw	0
  6383  001B68  6E30               	movwf	SendLCD@type,c
  6384  001B6A  0EC0               	movlw	192
  6385  001B6C  ECBD  F00D         	call	_SendLCD
  6386  001B70                     l154:
  6387                           
  6388                           ;LCD.c: 79: }
  6389                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6390  001B70  0E21               	movlw	33
  6391  001B72                     u3467:
  6392  001B72  2EE8               	decfsz	wreg,f,c
  6393  001B74  D7FE               	bra	u3467
  6394  001B76  F000               	nop	
  6395  001B78  0012               	return		;funcret
  6396  001B7A                     __end_of_SetLine:
  6397                           	opt stack 0
  6398                           tblptru	equ	0xFF8
  6399                           tblptrh	equ	0xFF7
  6400                           tblptrl	equ	0xFF6
  6401                           tablat	equ	0xFF5
  6402                           prodh	equ	0xFF4
  6403                           prodl	equ	0xFF3
  6404                           intcon	equ	0xFF2
  6405                           postinc0	equ	0xFEE
  6406                           wreg	equ	0xFE8
  6407                           indf1	equ	0xFE7
  6408                           plusw1	equ	0xFE3
  6409                           fsr1h	equ	0xFE2
  6410                           fsr1l	equ	0xFE1
  6411                           indf2	equ	0xFDF
  6412                           postinc2	equ	0xFDE
  6413                           postdec2	equ	0xFDD
  6414                           plusw2	equ	0xFDB
  6415                           fsr2h	equ	0xFDA
  6416                           fsr2l	equ	0xFD9
  6417                           status	equ	0xFD8
  6418                           
  6419 ;; *************** function _LCD_String *****************
  6420 ;; Defined at:
  6421 ;;		line 83 in file "LCD.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  string          2    0[BANK0 ] PTR unsigned char 
  6424 ;;		 -> STR_8(11), STR_7(10), main@buf(40), STR_5(17), 
  6425 ;;		 -> main@Message(10), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  6426 ;;		 -> STR_1(12), 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;		None
  6429 ;; Return value:  Size  Location     Type
  6430 ;;                  1    wreg      void 
  6431 ;; Registers used:
  6432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6433 ;; Tracked objects:
  6434 ;;		On entry : 0/0
  6435 ;;		On exit  : 0/0
  6436 ;;		Unchanged: 0/0
  6437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6438 ;;      Params:         0       2       0       0
  6439 ;;      Locals:         0       0       0       0
  6440 ;;      Temps:          0       0       0       0
  6441 ;;      Totals:         0       2       0       0
  6442 ;;Total ram usage:        2 bytes
  6443 ;; Hardware stack levels used:    1
  6444 ;; Hardware stack levels required when called:    6
  6445 ;; This function calls:
  6446 ;;		_SendLCD
  6447 ;; This function is called by:
  6448 ;;		_ScanIR
  6449 ;;		_ScanWithRange
  6450 ;;		_main
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           	psect	text26
  6455  0018B8                     __ptext26:
  6456                           	opt stack 0
  6457  0018B8                     _LCD_String:
  6458                           	opt stack 23
  6459                           
  6460                           ;LCD.c: 85: while(*string != 0){
  6461                           
  6462                           ;incstack = 0
  6463  0018B8  D01B               	goto	l158
  6464  0018BA                     
  6465                           ;LCD.c: 88: SendLCD(*string++,1);
  6466  0018BA  0E01               	movlw	1
  6467  0018BC  6E30               	movwf	SendLCD@type,c
  6468  0018BE  C060  FFF6         	movff	LCD_String@string,tblptrl
  6469  0018C2  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6470  0018C6  6AF8               	clrf	tblptru,c
  6471  0018C8  0E02               	movlw	(high __ramtop+-1)
  6472  0018CA  64F7               	cpfsgt	tblptrh,c
  6473  0018CC  D003               	bra	u2647
  6474  0018CE  0008               	tblrd		*
  6475  0018D0  50F5               	movf	tablat,w,c
  6476  0018D2  D005               	bra	u2640
  6477  0018D4                     u2647:
  6478  0018D4  CFF6 FFE1          	movff	tblptrl,fsr1l
  6479  0018D8  CFF7 FFE2          	movff	tblptrh,fsr1h
  6480  0018DC  50E7               	movf	indf1,w,c
  6481  0018DE                     u2640:
  6482  0018DE  ECBD  F00D         	call	_SendLCD
  6483  0018E2  0100               	movlb	0	; () banked
  6484  0018E4  4B60               	infsnz	LCD_String@string& (0+255),f,b
  6485  0018E6  2B61               	incf	(LCD_String@string+1)& (0+255),f,b
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6489  0018E8  0E21               	movlw	33
  6490  0018EA                     u3477:
  6491  0018EA  2EE8               	decfsz	wreg,f,c
  6492  0018EC  D7FE               	bra	u3477
  6493  0018EE  F000               	nop	
  6494  0018F0                     l158:
  6495  0018F0  C060  FFF6         	movff	LCD_String@string,tblptrl
  6496  0018F4  C061  FFF7         	movff	LCD_String@string+1,tblptrh
  6497  0018F8  6AF8               	clrf	tblptru,c
  6498  0018FA  0E02               	movlw	(high __ramtop+-1)
  6499  0018FC  64F7               	cpfsgt	tblptrh,c
  6500  0018FE  D003               	bra	u2657
  6501  001900  0008               	tblrd		*
  6502  001902  50F5               	movf	tablat,w,c
  6503  001904  D005               	bra	u2650
  6504  001906                     u2657:
  6505  001906  CFF6 FFE1          	movff	tblptrl,fsr1l
  6506  00190A  CFF7 FFE2          	movff	tblptrh,fsr1h
  6507  00190E  50E7               	movf	indf1,w,c
  6508  001910                     u2650:
  6509  001910  0900               	iorlw	0
  6510  001912  B4D8               	btfsc	status,2,c
  6511  001914  0012               	return	
  6512  001916  D7D1               	goto	l159
  6513  001918                     __end_of_LCD_String:
  6514                           	opt stack 0
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           intcon	equ	0xFF2
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           indf1	equ	0xFE7
  6525                           plusw1	equ	0xFE3
  6526                           fsr1h	equ	0xFE2
  6527                           fsr1l	equ	0xFE1
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           postdec2	equ	0xFDD
  6531                           plusw2	equ	0xFDB
  6532                           fsr2h	equ	0xFDA
  6533                           fsr2l	equ	0xFD9
  6534                           status	equ	0xFD8
  6535                           
  6536 ;; *************** function _SendLCD *****************
  6537 ;; Defined at:
  6538 ;;		line 27 in file "LCD.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;  Byte            1    wreg     unsigned char 
  6541 ;;  type            1   47[COMRAM] unsigned char 
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;  Byte            1   48[COMRAM] unsigned char 
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      void 
  6546 ;; Registers used:
  6547 ;;		wreg, status,2, status,0, cstack
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6553 ;;      Params:         1       0       0       0
  6554 ;;      Locals:         1       0       0       0
  6555 ;;      Temps:          0       0       0       0
  6556 ;;      Totals:         2       0       0       0
  6557 ;;Total ram usage:        2 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; Hardware stack levels required when called:    5
  6560 ;; This function calls:
  6561 ;;		_LCDout
  6562 ;; This function is called by:
  6563 ;;		_initLCD
  6564 ;;		_SetLine
  6565 ;;		_LCD_String
  6566 ;;		_ScanIR
  6567 ;;		_ScanWithRange
  6568 ;;		_main
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           	psect	text27
  6573  001B7A                     __ptext27:
  6574                           	opt stack 0
  6575  001B7A                     _SendLCD:
  6576                           	opt stack 24
  6577                           
  6578                           ;incstack = 0
  6579                           ;SendLCD@Byte stored from wreg
  6580  001B7A  6E31               	movwf	SendLCD@Byte,c
  6581                           
  6582                           ;LCD.c: 30: LATAbits.LATA6=type;
  6583  001B7C  B030               	btfsc	SendLCD@type,0,c
  6584  001B7E  D002               	bra	u2485
  6585  001B80  9C89               	bcf	3977,6,c	;volatile
  6586  001B82  D001               	bra	u2486
  6587  001B84                     u2485:
  6588  001B84  8C89               	bsf	3977,6,c	;volatile
  6589  001B86                     u2486:
  6590                           
  6591                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  6592  001B86  3831               	swapf	SendLCD@Byte,w,c
  6593  001B88  0B0F               	andlw	15
  6594  001B8A  0B0F               	andlw	15
  6595  001B8C  ECF8  F009         	call	_LCDout
  6596                           
  6597                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6598  001B90  0E06               	movlw	6
  6599  001B92                     u3487:
  6600  001B92  2EE8               	decfsz	wreg,f,c
  6601  001B94  D7FE               	bra	u3487
  6602  001B96  D000               	nop2	
  6603                           
  6604                           ;LCD.c: 35: LCDout(Byte&0x0F);
  6605  001B98  5031               	movf	SendLCD@Byte,w,c
  6606  001B9A  0B0F               	andlw	15
  6607  001B9C  ECF8  F009         	call	_LCDout
  6608                           
  6609                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  6610  001BA0  0E21               	movlw	33
  6611  001BA2                     u3497:
  6612  001BA2  2EE8               	decfsz	wreg,f,c
  6613  001BA4  D7FE               	bra	u3497
  6614  001BA6  F000               	nop	
  6615  001BA8  0012               	return		;funcret
  6616  001BAA                     __end_of_SendLCD:
  6617                           	opt stack 0
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           indf1	equ	0xFE7
  6628                           plusw1	equ	0xFE3
  6629                           fsr1h	equ	0xFE2
  6630                           fsr1l	equ	0xFE1
  6631                           indf2	equ	0xFDF
  6632                           postinc2	equ	0xFDE
  6633                           postdec2	equ	0xFDD
  6634                           plusw2	equ	0xFDB
  6635                           fsr2h	equ	0xFDA
  6636                           fsr2l	equ	0xFD9
  6637                           status	equ	0xFD8
  6638                           
  6639 ;; *************** function _LCDout *****************
  6640 ;; Defined at:
  6641 ;;		line 14 in file "LCD.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;  number          1    wreg     unsigned char 
  6644 ;; Auto vars:     Size  Location     Type
  6645 ;;  number          1   46[COMRAM] unsigned char 
  6646 ;; Return value:  Size  Location     Type
  6647 ;;                  1    wreg      void 
  6648 ;; Registers used:
  6649 ;;		wreg, status,2, status,0, cstack
  6650 ;; Tracked objects:
  6651 ;;		On entry : 0/0
  6652 ;;		On exit  : 0/0
  6653 ;;		Unchanged: 0/0
  6654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6655 ;;      Params:         0       0       0       0
  6656 ;;      Locals:         1       0       0       0
  6657 ;;      Temps:          3       0       0       0
  6658 ;;      Totals:         4       0       0       0
  6659 ;;Total ram usage:        4 bytes
  6660 ;; Hardware stack levels used:    1
  6661 ;; Hardware stack levels required when called:    4
  6662 ;; This function calls:
  6663 ;;		_E_TOG
  6664 ;; This function is called by:
  6665 ;;		_SendLCD
  6666 ;;		_initLCD
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text28
  6671  0013F0                     __ptext28:
  6672                           	opt stack 0
  6673  0013F0                     _LCDout:
  6674                           	opt stack 24
  6675                           
  6676                           ;incstack = 0
  6677                           ;LCDout@number stored from wreg
  6678  0013F0  6E2F               	movwf	LCDout@number,c
  6679                           
  6680                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  6681  0013F2  502F               	movf	LCDout@number,w,c
  6682  0013F4  6E2C               	movwf	??_LCDout& (0+255),c
  6683  0013F6  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6684  0013F8  0E07               	movlw	7
  6685  0013FA                     u2375:
  6686  0013FA  90D8               	bcf	status,0,c
  6687  0013FC  362C               	rlcf	??_LCDout,f,c
  6688  0013FE  362D               	rlcf	??_LCDout+1,f,c
  6689  001400  2EE8               	decfsz	wreg,f,c
  6690  001402  D7FB               	goto	u2375
  6691  001404  0E07               	movlw	7
  6692  001406  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6693  001408                     u2385:
  6694  001408  342D               	rlcf	??_LCDout+1,w,c
  6695  00140A  322D               	rrcf	??_LCDout+1,f,c
  6696  00140C  322C               	rrcf	??_LCDout,f,c
  6697  00140E  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6698  001410  D7FB               	goto	u2385
  6699  001412  462C               	rlncf	??_LCDout,f,c
  6700  001414  508B               	movf	3979,w,c	;volatile
  6701  001416  182C               	xorwf	??_LCDout,w,c
  6702  001418  0BFD               	andlw	-3
  6703  00141A  182C               	xorwf	??_LCDout,w,c
  6704  00141C  6E8B               	movwf	3979,c	;volatile
  6705                           
  6706                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  6707  00141E  502F               	movf	LCDout@number,w,c
  6708  001420  6E2C               	movwf	??_LCDout& (0+255),c
  6709  001422  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6710  001424  0E06               	movlw	6
  6711  001426                     u2395:
  6712  001426  90D8               	bcf	status,0,c
  6713  001428  362C               	rlcf	??_LCDout,f,c
  6714  00142A  362D               	rlcf	??_LCDout+1,f,c
  6715  00142C  2EE8               	decfsz	wreg,f,c
  6716  00142E  D7FB               	goto	u2395
  6717  001430  0E07               	movlw	7
  6718  001432  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6719  001434                     u2405:
  6720  001434  342D               	rlcf	??_LCDout+1,w,c
  6721  001436  322D               	rrcf	??_LCDout+1,f,c
  6722  001438  322C               	rrcf	??_LCDout,f,c
  6723  00143A  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6724  00143C  D7FB               	goto	u2405
  6725  00143E  462C               	rlncf	??_LCDout,f,c
  6726  001440  462C               	rlncf	??_LCDout,f,c
  6727  001442  508B               	movf	3979,w,c	;volatile
  6728  001444  182C               	xorwf	??_LCDout,w,c
  6729  001446  0BFB               	andlw	-5
  6730  001448  182C               	xorwf	??_LCDout,w,c
  6731  00144A  6E8B               	movwf	3979,c	;volatile
  6732                           
  6733                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  6734  00144C  502F               	movf	LCDout@number,w,c
  6735  00144E  6E2C               	movwf	??_LCDout& (0+255),c
  6736  001450  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6737  001452  0E05               	movlw	5
  6738  001454                     u2415:
  6739  001454  90D8               	bcf	status,0,c
  6740  001456  362C               	rlcf	??_LCDout,f,c
  6741  001458  362D               	rlcf	??_LCDout+1,f,c
  6742  00145A  2EE8               	decfsz	wreg,f,c
  6743  00145C  D7FB               	goto	u2415
  6744  00145E  0E07               	movlw	7
  6745  001460  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6746  001462                     u2425:
  6747  001462  342D               	rlcf	??_LCDout+1,w,c
  6748  001464  322D               	rrcf	??_LCDout+1,f,c
  6749  001466  322C               	rrcf	??_LCDout,f,c
  6750  001468  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6751  00146A  D7FB               	goto	u2425
  6752  00146C  508C               	movf	3980,w,c	;volatile
  6753  00146E  182C               	xorwf	??_LCDout,w,c
  6754  001470  0BFE               	andlw	-2
  6755  001472  182C               	xorwf	??_LCDout,w,c
  6756  001474  6E8C               	movwf	3980,c	;volatile
  6757                           
  6758                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  6759  001476  502F               	movf	LCDout@number,w,c
  6760  001478  6E2C               	movwf	??_LCDout& (0+255),c
  6761  00147A  6A2D               	clrf	(??_LCDout+1)& (0+255),c
  6762  00147C  3A2C               	swapf	??_LCDout,f,c
  6763  00147E  3A2D               	swapf	??_LCDout+1,f,c
  6764  001480  0EF0               	movlw	240
  6765  001482  162D               	andwf	??_LCDout+1,f,c
  6766  001484  502C               	movf	??_LCDout,w,c
  6767  001486  0B0F               	andlw	15
  6768  001488  122D               	iorwf	??_LCDout+1,f,c
  6769  00148A  0EF0               	movlw	240
  6770  00148C  162C               	andwf	??_LCDout,f,c
  6771  00148E  0E07               	movlw	7
  6772  001490  6E2E               	movwf	(??_LCDout+2)& (0+255),c
  6773  001492                     u2435:
  6774  001492  342D               	rlcf	??_LCDout+1,w,c
  6775  001494  322D               	rrcf	??_LCDout+1,f,c
  6776  001496  322C               	rrcf	??_LCDout,f,c
  6777  001498  2E2E               	decfsz	(??_LCDout+2)& (0+255),f,c
  6778  00149A  D7FB               	goto	u2435
  6779  00149C  462C               	rlncf	??_LCDout,f,c
  6780  00149E  508C               	movf	3980,w,c	;volatile
  6781  0014A0  182C               	xorwf	??_LCDout,w,c
  6782  0014A2  0BFD               	andlw	-3
  6783  0014A4  182C               	xorwf	??_LCDout,w,c
  6784  0014A6  6E8C               	movwf	3980,c	;volatile
  6785                           
  6786                           ;LCD.c: 21: E_TOG();
  6787  0014A8  EC3C  F00E         	call	_E_TOG	;wreg free
  6788                           
  6789                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6790  0014AC  0E03               	movlw	3
  6791  0014AE                     u3507:
  6792  0014AE  2EE8               	decfsz	wreg,f,c
  6793  0014B0  D7FE               	bra	u3507
  6794  0014B2  F000               	nop	
  6795  0014B4  0012               	return		;funcret
  6796  0014B6                     __end_of_LCDout:
  6797                           	opt stack 0
  6798                           tblptru	equ	0xFF8
  6799                           tblptrh	equ	0xFF7
  6800                           tblptrl	equ	0xFF6
  6801                           tablat	equ	0xFF5
  6802                           prodh	equ	0xFF4
  6803                           prodl	equ	0xFF3
  6804                           intcon	equ	0xFF2
  6805                           postinc0	equ	0xFEE
  6806                           wreg	equ	0xFE8
  6807                           indf1	equ	0xFE7
  6808                           plusw1	equ	0xFE3
  6809                           fsr1h	equ	0xFE2
  6810                           fsr1l	equ	0xFE1
  6811                           indf2	equ	0xFDF
  6812                           postinc2	equ	0xFDE
  6813                           postdec2	equ	0xFDD
  6814                           plusw2	equ	0xFDB
  6815                           fsr2h	equ	0xFDA
  6816                           fsr2l	equ	0xFD9
  6817                           status	equ	0xFD8
  6818                           
  6819 ;; *************** function _E_TOG *****************
  6820 ;; Defined at:
  6821 ;;		line 5 in file "LCD.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;		None
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;		None
  6826 ;; Return value:  Size  Location     Type
  6827 ;;                  1    wreg      void 
  6828 ;; Registers used:
  6829 ;;		wreg
  6830 ;; Tracked objects:
  6831 ;;		On entry : 0/0
  6832 ;;		On exit  : 0/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6835 ;;      Params:         0       0       0       0
  6836 ;;      Locals:         0       0       0       0
  6837 ;;      Temps:          0       0       0       0
  6838 ;;      Totals:         0       0       0       0
  6839 ;;Total ram usage:        0 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    3
  6842 ;; This function calls:
  6843 ;;		Nothing
  6844 ;; This function is called by:
  6845 ;;		_LCDout
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           	psect	text29
  6850  001C78                     __ptext29:
  6851                           	opt stack 0
  6852  001C78                     _E_TOG:
  6853                           	opt stack 24
  6854                           
  6855                           ;LCD.c: 8: LATCbits.LATC0=1;
  6856                           
  6857                           ;incstack = 0
  6858  001C78  808B               	bsf	3979,0,c	;volatile
  6859                           
  6860                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  6861  001C7A  0E03               	movlw	3
  6862  001C7C                     u3517:
  6863  001C7C  2EE8               	decfsz	wreg,f,c
  6864  001C7E  D7FE               	bra	u3517
  6865  001C80  F000               	nop	
  6866                           
  6867                           ;LCD.c: 10: LATCbits.LATC0=0;
  6868  001C82  908B               	bcf	3979,0,c	;volatile
  6869  001C84  0012               	return		;funcret
  6870  001C86                     __end_of_E_TOG:
  6871                           	opt stack 0
  6872                           tblptru	equ	0xFF8
  6873                           tblptrh	equ	0xFF7
  6874                           tblptrl	equ	0xFF6
  6875                           tablat	equ	0xFF5
  6876                           prodh	equ	0xFF4
  6877                           prodl	equ	0xFF3
  6878                           intcon	equ	0xFF2
  6879                           postinc0	equ	0xFEE
  6880                           wreg	equ	0xFE8
  6881                           indf1	equ	0xFE7
  6882                           plusw1	equ	0xFE3
  6883                           fsr1h	equ	0xFE2
  6884                           fsr1l	equ	0xFE1
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           plusw2	equ	0xFDB
  6889                           fsr2h	equ	0xFDA
  6890                           fsr2l	equ	0xFD9
  6891                           status	equ	0xFD8
  6892                           
  6893 ;; *************** function _InterruptHandlerLow *****************
  6894 ;; Defined at:
  6895 ;;		line 18 in file "main.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;		None
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;		None
  6900 ;; Return value:  Size  Location     Type
  6901 ;;                  1    wreg      void 
  6902 ;; Registers used:
  6903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6909 ;;      Params:         0       0       0       0
  6910 ;;      Locals:         0       0       0       0
  6911 ;;      Temps:         21       0       0       0
  6912 ;;      Totals:        21       0       0       0
  6913 ;;Total ram usage:       21 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    2
  6916 ;; This function calls:
  6917 ;;		Nothing
  6918 ;; This function is called by:
  6919 ;;		Interrupt level 1
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           	psect	intcodelo
  6924  000018                     __pintcodelo:
  6925                           	opt stack 0
  6926  000018                     _InterruptHandlerLow:
  6927                           	opt stack 23
  6928                           
  6929                           ;incstack = 0
  6930  000018  8034               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6931  00001A  CFD8 F017          	movff	status,??_InterruptHandlerLow
  6932  00001E  CFE8 F018          	movff	wreg,??_InterruptHandlerLow+1
  6933  000022  CFE0 F019          	movff	bsr,??_InterruptHandlerLow+2
  6934  000026  CFFA F01A          	movff	pclath,??_InterruptHandlerLow+3
  6935  00002A  CFFB F01B          	movff	pclatu,??_InterruptHandlerLow+4
  6936  00002E  CFE9 F01C          	movff	fsr0l,??_InterruptHandlerLow+5
  6937  000032  CFEA F01D          	movff	fsr0h,??_InterruptHandlerLow+6
  6938  000036  CFE1 F01E          	movff	fsr1l,??_InterruptHandlerLow+7
  6939  00003A  CFE2 F01F          	movff	fsr1h,??_InterruptHandlerLow+8
  6940  00003E  CFD9 F020          	movff	fsr2l,??_InterruptHandlerLow+9
  6941  000042  CFDA F021          	movff	fsr2h,??_InterruptHandlerLow+10
  6942  000046  CFF3 F022          	movff	prodl,??_InterruptHandlerLow+11
  6943  00004A  CFF4 F023          	movff	prodh,??_InterruptHandlerLow+12
  6944  00004E  CFF6 F024          	movff	tblptrl,??_InterruptHandlerLow+13
  6945  000052  CFF7 F025          	movff	tblptrh,??_InterruptHandlerLow+14
  6946  000056  CFF8 F026          	movff	tblptru,??_InterruptHandlerLow+15
  6947  00005A  CFF5 F027          	movff	tablat,??_InterruptHandlerLow+16
  6948  00005E  C034  F028         	movff	btemp,??_InterruptHandlerLow+17
  6949  000062  C035  F029         	movff	btemp+1,??_InterruptHandlerLow+18
  6950  000066  C036  F02A         	movff	btemp+2,??_InterruptHandlerLow+19
  6951  00006A  C037  F02B         	movff	btemp+3,??_InterruptHandlerLow+20
  6952                           
  6953                           ;main.c: 20: if (PIR1bits.RCIF) {
  6954  00006E  AA9E               	btfss	3998,5,c	;volatile
  6955  000070  D016               	goto	i1l363
  6956                           
  6957                           ;main.c: 21: ReceivedString[i]=RCREG;
  6958  000072  5033               	movf	_i,w,c	;volatile
  6959  000074  0D01               	mullw	1
  6960  000076  0EE7               	movlw	low _ReceivedString
  6961  000078  24F3               	addwf	prodl,w,c
  6962  00007A  6ED9               	movwf	fsr2l,c
  6963  00007C  0E01               	movlw	high _ReceivedString
  6964  00007E  20F4               	addwfc	prodh,w,c
  6965  000080  6EDA               	movwf	fsr2h,c
  6966  000082  CFAE FFDF          	movff	4014,indf2	;volatile
  6967                           
  6968                           ;main.c: 22: RFID_Read=1;
  6969  000086  0E01               	movlw	1
  6970  000088  0101               	movlb	1	; () banked
  6971  00008A  6FF9               	movwf	_RFID_Read& (0+255),b	;volatile
  6972                           
  6973                           ; BSR set to: 1
  6974                           ;main.c: 23: if (i==15){
  6975  00008C  0E0F               	movlw	15
  6976  00008E  1833               	xorwf	_i,w,c	;volatile
  6977  000090  A4D8               	btfss	status,2,c
  6978  000092  D003               	goto	i1l364
  6979                           
  6980                           ; BSR set to: 1
  6981                           ;main.c: 24: i=0;
  6982  000094  0E00               	movlw	0
  6983  000096  6E33               	movwf	_i,c	;volatile
  6984                           
  6985                           ;main.c: 25: }else{
  6986  000098  D001               	goto	i1l365
  6987  00009A                     i1l364:
  6988                           
  6989                           ; BSR set to: 1
  6990                           ;main.c: 26: i++;
  6991                           
  6992                           ; BSR set to: 1
  6993  00009A  2A33               	incf	_i,f,c	;volatile
  6994  00009C                     i1l365:
  6995                           
  6996                           ; BSR set to: 1
  6997                           ;main.c: 27: }
  6998                           ;main.c: 28: PIR1bits.RCIF=0;
  6999                           
  7000                           ; BSR set to: 1
  7001  00009C  9A9E               	bcf	3998,5,c	;volatile
  7002  00009E                     i1l363:
  7003                           
  7004                           ; BSR set to: 1
  7005  00009E  C02B  F037         	movff	??_InterruptHandlerLow+20,btemp+3
  7006  0000A2  C02A  F036         	movff	??_InterruptHandlerLow+19,btemp+2
  7007  0000A6  C029  F035         	movff	??_InterruptHandlerLow+18,btemp+1
  7008  0000AA  C028  F034         	movff	??_InterruptHandlerLow+17,btemp
  7009  0000AE  C027  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  7010  0000B2  C026  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  7011  0000B6  C025  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  7012  0000BA  C024  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  7013  0000BE  C023  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  7014  0000C2  C022  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  7015  0000C6  C021  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  7016  0000CA  C020  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  7017  0000CE  C01F  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  7018  0000D2  C01E  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  7019  0000D6  C01D  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  7020  0000DA  C01C  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  7021  0000DE  C01B  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  7022  0000E2  C01A  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  7023  0000E6  C019  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  7024  0000EA  C018  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  7025  0000EE  C017  FFD8         	movff	??_InterruptHandlerLow,status
  7026  0000F2  9034               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7027  0000F4  0010               	retfie	
  7028  0000F6                     __end_of_InterruptHandlerLow:
  7029                           	opt stack 0
  7030                           pclatu	equ	0xFFB
  7031                           pclath	equ	0xFFA
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           postinc0	equ	0xFEE
  7040                           fsr0h	equ	0xFEA
  7041                           fsr0l	equ	0xFE9
  7042                           wreg	equ	0xFE8
  7043                           indf1	equ	0xFE7
  7044                           plusw1	equ	0xFE3
  7045                           fsr1h	equ	0xFE2
  7046                           fsr1l	equ	0xFE1
  7047                           bsr	equ	0xFE0
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           plusw2	equ	0xFDB
  7052                           fsr2h	equ	0xFDA
  7053                           fsr2l	equ	0xFD9
  7054                           status	equ	0xFD8
  7055                           
  7056 ;; *************** function _InterruptHandlerHigh *****************
  7057 ;; Defined at:
  7058 ;;		line 34 in file "main.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;		None
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;		None
  7063 ;; Return value:  Size  Location     Type
  7064 ;;                  1    wreg      void 
  7065 ;; Registers used:
  7066 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7072 ;;      Params:         0       0       0       0
  7073 ;;      Locals:         0       0       0       0
  7074 ;;      Temps:         18       0       0       0
  7075 ;;      Totals:        18       0       0       0
  7076 ;;Total ram usage:       18 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    1
  7079 ;; This function calls:
  7080 ;;		i2_delay_tenth_s
  7081 ;; This function is called by:
  7082 ;;		Interrupt level 2
  7083 ;; This function uses a non-reentrant model
  7084 ;;
  7085                           
  7086                           	psect	intcode
  7087  000008                     __pintcode:
  7088                           	opt stack 0
  7089  000008                     _InterruptHandlerHigh:
  7090                           	opt stack 23
  7091                           
  7092                           ;incstack = 0
  7093  000008  8234               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7094  00000A  EFBD  F00A         	goto	int_func
  7095                           pclatu	equ	0xFFB
  7096                           pclath	equ	0xFFA
  7097                           tblptru	equ	0xFF8
  7098                           tblptrh	equ	0xFF7
  7099                           tblptrl	equ	0xFF6
  7100                           tablat	equ	0xFF5
  7101                           prodh	equ	0xFF4
  7102                           prodl	equ	0xFF3
  7103                           intcon	equ	0xFF2
  7104                           postinc0	equ	0xFEE
  7105                           fsr0h	equ	0xFEA
  7106                           fsr0l	equ	0xFE9
  7107                           wreg	equ	0xFE8
  7108                           indf1	equ	0xFE7
  7109                           plusw1	equ	0xFE3
  7110                           fsr1h	equ	0xFE2
  7111                           fsr1l	equ	0xFE1
  7112                           bsr	equ	0xFE0
  7113                           indf2	equ	0xFDF
  7114                           postinc2	equ	0xFDE
  7115                           postdec2	equ	0xFDD
  7116                           plusw2	equ	0xFDB
  7117                           fsr2h	equ	0xFDA
  7118                           fsr2l	equ	0xFD9
  7119                           status	equ	0xFD8
  7120                           
  7121                           	psect	intcode_body
  7122  00157A                     __pintcode_body:
  7123                           	opt stack 23
  7124  00157A                     int_func:
  7125                           	opt stack 23
  7126  00157A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  7127  00157E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  7128  001582  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  7129  001586  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  7130  00158A  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  7131  00158E  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  7132  001592  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  7133  001596  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  7134  00159A  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  7135  00159E  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  7136  0015A2  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  7137  0015A6  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  7138  0015AA  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  7139  0015AE  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  7140  0015B2  C034  F013         	movff	btemp,??_InterruptHandlerHigh+14
  7141  0015B6  C035  F014         	movff	btemp+1,??_InterruptHandlerHigh+15
  7142  0015BA  C036  F015         	movff	btemp+2,??_InterruptHandlerHigh+16
  7143  0015BE  C037  F016         	movff	btemp+3,??_InterruptHandlerHigh+17
  7144                           
  7145                           ;main.c: 35: if (INTCONbits.INT0IF) {
  7146  0015C2  A2F2               	btfss	intcon,1,c	;volatile
  7147  0015C4  D00D               	goto	i2l371
  7148                           
  7149                           ;main.c: 36: if (mode==-1) {
  7150  0015C6  2832               	incf	_mode,w,c	;volatile
  7151  0015C8  A4D8               	btfss	status,2,c
  7152  0015CA  D003               	goto	i2l372
  7153                           
  7154                           ;main.c: 38: mode=1;
  7155  0015CC  0E01               	movlw	1
  7156  0015CE  6E32               	movwf	_mode,c	;volatile
  7157                           
  7158                           ;main.c: 39: } else if (mode==0) {
  7159  0015D0  D003               	goto	i2l375
  7160  0015D2                     i2l372:
  7161  0015D2  5032               	movf	_mode,w,c	;volatile
  7162  0015D4  A4D8               	btfss	status,2,c
  7163                           
  7164                           ;main.c: 43: mode=-1;
  7165                           
  7166                           ;main.c: 41: } else {
  7167  0015D6  6832               	setf	_mode,c	;volatile
  7168  0015D8                     i2l375:
  7169                           
  7170                           ;main.c: 44: }
  7171                           ;main.c: 46: delay_tenth_s(2);
  7172  0015D8  0E02               	movlw	2
  7173  0015DA  EC6B  F00D         	call	i2_delay_tenth_s
  7174                           
  7175                           ;main.c: 47: INTCONbits.INT0IF=0;
  7176  0015DE  92F2               	bcf	intcon,1,c	;volatile
  7177  0015E0                     i2l371:
  7178                           
  7179                           ;main.c: 48: }
  7180                           ;main.c: 49: if (INTCONbits.TMR0IF) {
  7181  0015E0  A4F2               	btfss	intcon,2,c	;volatile
  7182  0015E2  D004               	goto	i2l376
  7183                           
  7184                           ;main.c: 50: millis++;
  7185  0015E4  0101               	movlb	1	; () banked
  7186  0015E6  4BF7               	infsnz	_millis& (0+255),f,b	;volatile
  7187  0015E8  2BF8               	incf	(_millis+1)& (0+255),f,b	;volatile
  7188                           
  7189                           ; BSR set to: 1
  7190                           ;main.c: 51: INTCONbits.TMR0IF = 0;
  7191  0015EA  94F2               	bcf	intcon,2,c	;volatile
  7192  0015EC                     i2l376:
  7193                           
  7194                           ; BSR set to: 1
  7195  0015EC  C016  F037         	movff	??_InterruptHandlerHigh+17,btemp+3
  7196  0015F0  C015  F036         	movff	??_InterruptHandlerHigh+16,btemp+2
  7197  0015F4  C014  F035         	movff	??_InterruptHandlerHigh+15,btemp+1
  7198  0015F8  C013  F034         	movff	??_InterruptHandlerHigh+14,btemp
  7199  0015FC  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  7200  001600  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  7201  001604  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  7202  001608  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  7203  00160C  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  7204  001610  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  7205  001614  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  7206  001618  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  7207  00161C  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  7208  001620  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  7209  001624  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  7210  001628  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  7211  00162C  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  7212  001630  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  7213  001634  9234               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7214  001636  0011               	retfie		f
  7215  001638                     __end_of_InterruptHandlerHigh:
  7216                           	opt stack 0
  7217                           pclatu	equ	0xFFB
  7218                           pclath	equ	0xFFA
  7219                           tblptru	equ	0xFF8
  7220                           tblptrh	equ	0xFF7
  7221                           tblptrl	equ	0xFF6
  7222                           tablat	equ	0xFF5
  7223                           prodh	equ	0xFF4
  7224                           prodl	equ	0xFF3
  7225                           intcon	equ	0xFF2
  7226                           postinc0	equ	0xFEE
  7227                           fsr0h	equ	0xFEA
  7228                           fsr0l	equ	0xFE9
  7229                           wreg	equ	0xFE8
  7230                           indf1	equ	0xFE7
  7231                           plusw1	equ	0xFE3
  7232                           fsr1h	equ	0xFE2
  7233                           fsr1l	equ	0xFE1
  7234                           bsr	equ	0xFE0
  7235                           indf2	equ	0xFDF
  7236                           postinc2	equ	0xFDE
  7237                           postdec2	equ	0xFDD
  7238                           plusw2	equ	0xFDB
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8
  7242                           
  7243 ;; *************** function i2_delay_tenth_s *****************
  7244 ;; Defined at:
  7245 ;;		line 32 in file "Movement.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  tenth_second    1    wreg     unsigned char 
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;  tenth_second    1    1[COMRAM] unsigned char 
  7250 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  7251 ;; Return value:  Size  Location     Type
  7252 ;;                  1    wreg      void 
  7253 ;; Registers used:
  7254 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7255 ;; Tracked objects:
  7256 ;;		On entry : 0/0
  7257 ;;		On exit  : 0/0
  7258 ;;		Unchanged: 0/0
  7259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7260 ;;      Params:         0       0       0       0
  7261 ;;      Locals:         3       0       0       0
  7262 ;;      Temps:          1       0       0       0
  7263 ;;      Totals:         4       0       0       0
  7264 ;;Total ram usage:        4 bytes
  7265 ;; Hardware stack levels used:    1
  7266 ;; This function calls:
  7267 ;;		Nothing
  7268 ;; This function is called by:
  7269 ;;		_InterruptHandlerHigh
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           	psect	text32
  7274  001AD6                     __ptext32:
  7275                           	opt stack 0
  7276  001AD6                     i2_delay_tenth_s:
  7277                           	opt stack 23
  7278                           
  7279                           ;incstack = 0
  7280                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  7281  001AD6  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  7282                           
  7283                           ;Movement.c: 33: unsigned int i=0;
  7284  001AD8  0E00               	movlw	0
  7285  001ADA  6E04               	movwf	i2delay_tenth_s@i+1,c
  7286  001ADC  0E00               	movlw	0
  7287  001ADE  6E03               	movwf	i2delay_tenth_s@i,c
  7288                           
  7289                           ;Movement.c: 34: for (i=1; i<=tenth_seconds*2; i++) {
  7290  001AE0  0E00               	movlw	0
  7291  001AE2  6E04               	movwf	i2delay_tenth_s@i+1,c
  7292  001AE4  0E01               	movlw	1
  7293  001AE6  6E03               	movwf	i2delay_tenth_s@i,c
  7294  001AE8  D009               	goto	i2l209
  7295  001AEA                     
  7296                           ;Movement.c: 36: _delay((unsigned long)((50)*(8000000/4000.0)));
  7297  001AEA  0E82               	movlw	130
  7298  001AEC  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  7299  001AEE  0EDE               	movlw	222
  7300  001AF0                     i2u352_47:
  7301  001AF0  2EE8               	decfsz	wreg,f,c
  7302  001AF2  D7FE               	bra	i2u352_47
  7303  001AF4  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  7304  001AF6  D7FC               	bra	i2u352_47
  7305  001AF8  4A03               	infsnz	i2delay_tenth_s@i,f,c
  7306  001AFA  2A04               	incf	i2delay_tenth_s@i+1,f,c
  7307  001AFC                     i2l209:
  7308  001AFC  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  7309  001AFE  0D02               	mullw	2
  7310  001B00  5003               	movf	i2delay_tenth_s@i,w,c
  7311  001B02  5CF3               	subwf	prodl,w,c
  7312  001B04  5004               	movf	i2delay_tenth_s@i+1,w,c
  7313  001B06  58F4               	subwfb	prodh,w,c
  7314  001B08  A0D8               	btfss	status,0,c
  7315  001B0A  0012               	return	
  7316  001B0C  D7EE               	goto	i2l210
  7317  001B0E                     __end_ofi2_delay_tenth_s:
  7318                           	opt stack 0
  7319                           pclatu	equ	0xFFB
  7320                           pclath	equ	0xFFA
  7321                           tblptru	equ	0xFF8
  7322                           tblptrh	equ	0xFF7
  7323                           tblptrl	equ	0xFF6
  7324                           tablat	equ	0xFF5
  7325                           prodh	equ	0xFF4
  7326                           prodl	equ	0xFF3
  7327                           intcon	equ	0xFF2
  7328                           postinc0	equ	0xFEE
  7329                           fsr0h	equ	0xFEA
  7330                           fsr0l	equ	0xFE9
  7331                           wreg	equ	0xFE8
  7332                           indf1	equ	0xFE7
  7333                           plusw1	equ	0xFE3
  7334                           fsr1h	equ	0xFE2
  7335                           fsr1l	equ	0xFE1
  7336                           bsr	equ	0xFE0
  7337                           indf2	equ	0xFDF
  7338                           postinc2	equ	0xFDE
  7339                           postdec2	equ	0xFDD
  7340                           plusw2	equ	0xFDB
  7341                           fsr2h	equ	0xFDA
  7342                           fsr2l	equ	0xFD9
  7343                           status	equ	0xFD8
  7344                           pclatu	equ	0xFFB
  7345                           pclath	equ	0xFFA
  7346                           tblptru	equ	0xFF8
  7347                           tblptrh	equ	0xFF7
  7348                           tblptrl	equ	0xFF6
  7349                           tablat	equ	0xFF5
  7350                           prodh	equ	0xFF4
  7351                           prodl	equ	0xFF3
  7352                           intcon	equ	0xFF2
  7353                           postinc0	equ	0xFEE
  7354                           fsr0h	equ	0xFEA
  7355                           fsr0l	equ	0xFE9
  7356                           wreg	equ	0xFE8
  7357                           indf1	equ	0xFE7
  7358                           plusw1	equ	0xFE3
  7359                           fsr1h	equ	0xFE2
  7360                           fsr1l	equ	0xFE1
  7361                           bsr	equ	0xFE0
  7362                           indf2	equ	0xFDF
  7363                           postinc2	equ	0xFDE
  7364                           postdec2	equ	0xFDD
  7365                           plusw2	equ	0xFDB
  7366                           fsr2h	equ	0xFDA
  7367                           fsr2l	equ	0xFD9
  7368                           status	equ	0xFD8
  7369                           
  7370                           	psect	rparam
  7371  0000                     pclatu	equ	0xFFB
  7372                           pclath	equ	0xFFA
  7373                           tblptru	equ	0xFF8
  7374                           tblptrh	equ	0xFF7
  7375                           tblptrl	equ	0xFF6
  7376                           tablat	equ	0xFF5
  7377                           prodh	equ	0xFF4
  7378                           prodl	equ	0xFF3
  7379                           intcon	equ	0xFF2
  7380                           postinc0	equ	0xFEE
  7381                           fsr0h	equ	0xFEA
  7382                           fsr0l	equ	0xFE9
  7383                           wreg	equ	0xFE8
  7384                           indf1	equ	0xFE7
  7385                           plusw1	equ	0xFE3
  7386                           fsr1h	equ	0xFE2
  7387                           fsr1l	equ	0xFE1
  7388                           bsr	equ	0xFE0
  7389                           indf2	equ	0xFDF
  7390                           postinc2	equ	0xFDE
  7391                           postdec2	equ	0xFDD
  7392                           plusw2	equ	0xFDB
  7393                           fsr2h	equ	0xFDA
  7394                           fsr2l	equ	0xFD9
  7395                           status	equ	0xFD8
  7396                           
  7397                           	psect	temp
  7398  000034                     btemp:
  7399                           	opt stack 0
  7400  000034                     	ds	1
  7401  0000                     int$flags	set	btemp
  7402  0000                     wtemp6	set	btemp+1
  7403                           pclatu	equ	0xFFB
  7404                           pclath	equ	0xFFA
  7405                           tblptru	equ	0xFF8
  7406                           tblptrh	equ	0xFF7
  7407                           tblptrl	equ	0xFF6
  7408                           tablat	equ	0xFF5
  7409                           prodh	equ	0xFF4
  7410                           prodl	equ	0xFF3
  7411                           intcon	equ	0xFF2
  7412                           postinc0	equ	0xFEE
  7413                           fsr0h	equ	0xFEA
  7414                           fsr0l	equ	0xFE9
  7415                           wreg	equ	0xFE8
  7416                           indf1	equ	0xFE7
  7417                           plusw1	equ	0xFE3
  7418                           fsr1h	equ	0xFE2
  7419                           fsr1l	equ	0xFE1
  7420                           bsr	equ	0xFE0
  7421                           indf2	equ	0xFDF
  7422                           postinc2	equ	0xFDE
  7423                           postdec2	equ	0xFDD
  7424                           plusw2	equ	0xFDB
  7425                           fsr2h	equ	0xFDA
  7426                           fsr2l	equ	0xFD9
  7427                           status	equ	0xFD8


Data Sizes:
    Strings     67
    Constant    10
    Data        0
    BSS         183
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      51
    BANK0           160    107     115
    BANK1           256    227     250
    BANK2           256      0     150

Pointer List with Targets:

    VerifySignal@RecievedString	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK1[16]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    ScanWithRange@RFID_Read	PTR unsigned char  size(2) Largest target is 1
		 -> RFID_Read(BANK1[1]), 

    ScanWithRange@millis	PTR unsigned int  size(2) Largest target is 2
		 -> millis(BANK1[2]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    ScanWithRange@MoveTime	PTR int  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanWithRange@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK1[1]), 

    ScanWithRange@MoveType	PTR unsigned char  size(2) Largest target is 50
		 -> main@MoveType(BANK1[50]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_8(CODE[11]), STR_7(CODE[10]), main@buf(BANK1[40]), STR_5(CODE[17]), 
		 -> main@Message(BANK1[10]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    fullSpeedForward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedForward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedForward@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    fullSpeed@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeed@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeed@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK1[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S111DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S111DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK1[9]), main@mL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_SendLCD
    _main->_VerifySignal
    _initLCD->_SendLCD
    _ScanWithRange->_SendLCD
    _ScanIR->_SendLCD
    _setMotorPWM->___wmul
    ___awdiv->___wmul
    _sprintf->___wmul
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeed
    _ScanWithRange->_sprintf
    _ScanWithRange->_turnLeft
    _ScanWithRange->_turnRight
    _turnRight->_fullSpeed
    _turnLeft->_fullSpeed
    _fullSpeed->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               229   229      0   80899
                                            105 BANK0      2     2      0
                                              0 BANK1    227   227      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                          _fullSpeed
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                          _initTimer
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1601
                                              0 BANK0      1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        5     0      5    4921
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     240
                                             43 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                         6     4      2      79
                                             43 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       77    61     16   27849
                                             28 BANK0     77    61     16
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (1) _turnRight                                            5     0      5    5461
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             5     0      5    5731
                                             23 BANK0      5     0      5
                          _fullSpeed
 ---------------------------------------------------------------------------------
 (2) _fullSpeed                                            6     1      5    4226
                                             17 BANK0      6     1      5
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             43 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              51    47      4   13771
                                             28 BANK0     51    47      4
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4344
                                             17 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                          9     7      2    1694
                                              8 BANK0      9     7      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    3073
                                              7 BANK0     21    13      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             43 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     409
                                             43 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             47 COMRAM     1     1      0
                                              3 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                             43 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2     108
                                             43 COMRAM     5     3      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1539
                                              0 BANK0      1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    2532
                                              0 BANK0      2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1477
                                             47 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0     124
                                             43 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 21    21      0       0
                                             22 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                18    18      0      47
                                              4 COMRAM    18    18      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeed
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeed
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _initTimer
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _turnLeft
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _turnRight
     _fullSpeed
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      96       9       58.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     E3      FA       7       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6B      73       5       71.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      33       1       54.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     236       3        0.0%
DATA                 0      0     236      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 20 13:05:04 2018

                        ?_grabRightIR 002C                                     _i 0033  
                  fullSpeedBack@power 007B                                    l36 1276  
                                  l37 12A0                                    l53 168A  
                                  l54 163A                                    l70 1788  
                                  l55 1652                                    l56 166A  
                                  l67 17A8                                    l68 1752  
                                  l69 176E                          ___awdiv@sign 0065  
                                  bsr 000FE0                   ___wmul@multiplicand 002E  
                         main@Message 01BE                           ?_LCD_String 0060  
                                 l110 17E6                                   l120 1BBE  
                                 l210 1AB2                                   l115 185C  
                                 l230 0C8E                                   l231 0C76  
                                 l152 1B5C                                   l224 0E7E  
                                 l400 0540                                   l217 13D8  
                                 l209 1AC4                                   l225 0B3E  
                                 l401 05C4                                   l154 1B70  
                                 l234 0E68                                   l226 0C00  
                                 l235 0E7A                                   l227 0C1C  
                                 l411 071E                                   l403 0610  
                                 l412 06BE                                   l229 0D40  
                                 l421 085C                                   l405 0632  
                                 l158 18F0                                   l430 0900  
                                 l414 0700                                   l159 18BA  
                                 l423 093A                                   l424 08E4  
                                 l408 0654                                   l409 0770  
                                 l434 09A8                                   l426 08C4  
                                 l418 07CC                                   l451 0F2A  
                                 l435 09DA                                   l460 0F8A  
                                 l452 0F44                                   l462 0FE8  
                                 l454 0F5A                                   l455 0F52  
                                 l473 1084                                   l393 0400  
                                 l474 10A8                                   l394 0494  
                                 l475 10B0                                   l467 1010  
                                 l395 04A2                                   l900 1930  
                                 l820 1C2E                                   l476 10F0  
                                 l396 04C0                                   l485 1132  
                                 l477 10D0                                   l469 103A  
                                 l661 170E                                   l389 03FA  
                                 l910 197C                                   l486 118E  
                                 l662 1706                                   l903 1958  
                                 l487 1138                                   l399 04F6  
                                 l904 1962                                   l913 199C  
                                 l665 172E                                   l914 19A6  
                                 l666 1738                                   l658 16E0  
                                 l667 1746                                   l659 16F0  
                                 l909 1984                                   l899 1938  
                         grabLeftIR@i 0062                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 015A  
                        __CFG_LVP$OFF 000000                          main@MoveType 0128  
                                l3091 1854                                  l3075 17DE  
                                l3169 103E                                  l3703 09FC  
                                l3607 06B6                                  l3705 09FE  
                                l3619 06F8                                  STR_1 032D  
                                STR_2 030C                                  STR_3 032D  
                                STR_4 030C                                  STR_5 031C  
                                STR_6 030B                                  STR_7 0344  
                                STR_8 0339                                  u1210 1712  
                                _LATB 000F8A                                  u3200 0936  
                                u3120 06F4                                  u2500 193C  
                                u1460 1988                                  u3220 0974  
                                u3140 0718                                  u2405 1434  
                                u3070 0680                                  u2415 1454  
                                u2344 1238                                  u3240 09E6  
                                u3080 0694                                  u3072 0682  
                                u2425 1462                                  u2345 1234  
                                u2610 189A                                  u2354 1292  
                                u3082 0696                                  u2435 1492  
                                u2355 128E                                  u3307 1500  
                                u3180 08A8                                  u2605 1864  
                                u2365 12EC                                  u3317 150E  
                                u2375 13FA                                  u3407 1AB8  
                                u3327 1520                                  u2640 18DE  
                                u2385 1408                                  u3417 134A  
                                u3337 1532                                  u3257 0454  
                                u2650 1910                                  u2810 10F8  
                                u2730 106A                                  u3507 14AE  
                                u2395 1426                                  u3427 1362  
                                u3347 154A                                  u3267 046C  
                                u2580 1824                                  u2820 1116  
                                u3517 1C7C                                  u2485 1B84  
                                u3437 1684                                  u1845 1BBA  
                                u3357 1560                                  u3277 14CA  
                                u2486 1B86                                  u1846 1BBC  
                                u2647 18D4                                  u3447 1816  
                                u2575 17EE                                  u3367 1572  
                                u3287 14E0                                  u2840 1196  
                                u2657 1906                                  u3457 188C  
                                u3377 0B72                                  u1865 1BCC  
                                u3297 14F2                                  u2850 11B0  
                                u1866 1BCE                                  u3467 1B72  
                                u3387 0B8A                                  u3477 18EA  
                                u3397 17A2                                  u3487 1B92  
                                u3497 1BA2                                  u2971 0364  
                                u2981 0376                                  _main 0350  
                                _mode 0032                         main@ScanAngle 01C8  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr0l 000FE9  
                                indf1 000FE7                                  indf2 000FDF  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0034                                  _stop 1638  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00F6               ScanWithRange@MotorPower 00BC  
                        ___param_bank 000000                       i2_delay_tenth_s 1AD6  
                     __end_of_SendLCD 1BAA                       __end_of_SetLine 1B7A  
                  ScanWithRange@F3555 00CB                           ScanIR@F3541 00CF  
                               ?_main 0001                       __end_of___awdiv 1750  
                               ?_stop 0071                       ___awdiv@divisor 0062  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 0062  
                     __end_of___lwdiv 196C                       __end_of___lwmod 19B0  
                               i2l210 1AEA                                 i1l363 009E  
                               i1l364 009A                                 i1l365 009C  
                               i2l209 1AFC                                 i2l371 15E0  
                               i2l372 15D2                                 i2l375 15D8  
                               i2l376 15EC                       ___awdiv@counter 0064  
                               _RCREG 000FAE                                 _E_TOG 1C78  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISC 000F94  
                     __end_of_initLCD 157A                    ScanWithRange@loops 0080  
                     __end_of_dpowers 030B                       __end_of_isdigit 1C36  
                               main@i 01CF                                 pclath 000FFA  
                               tablat 000FF5                                 plusw1 000FE3  
                               plusw2 000FDB                                 status 000FD8  
                               wtemp6 0035                   __size_of_LCD_String 0060  
                     __end_of_sprintf 11BE                __size_of_ScanWithRange 04FE  
                      __CFG_MCLRE$OFF 000000                       __initialization 1B0E  
                        __end_of_main 0A20                          __end_of_stop 16CA  
                      delay_tenth_s@i 002E                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 0060          ScanIR@DirectionMoveThreshold 00A9  
          VerifySignal@RecievedString 002C                  __end_of_enableSensor 1BD0  
                 VerifySignal@hexByte 002E                                ??_main 00C9  
                              ??_stop 0032                         __activetblptr 000002  
                       ?_initMotorPWM 0001                                ?_E_TOG 0001  
                      main@MotorPower 01CD                          ?_setMotorPWM 0068  
              __size_of_fullSpeedBack 003C                      ___awdiv@dividend 0060  
                      __CFG_WDTEN$OFF 000000                 __end_of_delay_tenth_s 1AD6  
                              _LCDout 13F0                           SendLCD@Byte 0031  
                              _OSCCON 000FD3                                _PTCON0 000F7F  
                              _PTCON1 000F7E                                _SPBRGH 000FB0  
          ScanWithRange@MiniLeftFlick 00BD                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 1B0E  
                         SendLCD@type 0030                             ??_SendLCD 0031  
                              _ScanIR 12FC                             ??_SetLine 0032  
                         fullSpeed@mL 0071                           fullSpeed@mR 0073  
                 ScanWithRange@millis 008A                                ___wmul 1BD0  
                           ??___awdiv 0032                      __end_of_initRFID 1C52  
                           ??___lwdiv 0030                             ??___lwmod 0030  
                              _initIR 1BF6                  __size_of_grabRightIR 0076  
                              _millis 01F7                                clear_0 1B14  
                              clear_1 1B20                                clear_2 1B2C  
                    ___awdiv@quotient 0066                                main@mL 01D1  
                              main@mR 01DA                        ??_initMotorPWM 002C  
                           ??_initLCD 0060                         _ScanWithRange 0A20  
                           ??_isdigit 002C          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0071                                stop@mR 0073  
                           ??_sprintf 006F       ScanWithRange@TimeAboveThreshold 00C0  
                    __end_of_turnLeft 1A64                       fullSpeedBack@mL 0077  
                     fullSpeedBack@mR 0079                            __accesstop 0060  
             __end_of__initialization 1B36                         ___rparam_used 000001  
                         SetLine@line 0060                         __end_of_E_TOG 1C86  
                      __pcstackCOMRAM 0001                         _fullSpeedBack 19B0  
                        ??_LCD_String 0032                        ?_ScanWithRange 007C  
                VerifySignal@checksum 0030                               ??_E_TOG 002C  
       __size_of_InterruptHandlerHigh 1630           __end_of_InterruptHandlerLow 00F6  
          delay_tenth_s@tenth_seconds 002D                          sprintf@width 0079  
                          __pbssBANK0 00CB                            __pbssBANK1 01E3  
                          __pbssBANK2 0200                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __size_of_initTimer 0014  
                  __size_of_fullSpeed 007C                    __end_of_LCD_String 1918  
                             ?_ScanIR 007C                        ?_fullSpeedBack 0077  
               __size_of_enableSensor 0026                               ?___wmul 002C  
                 grabLeftIR@IR_signal 0060                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
                          _grabLeftIR 1842                               _PWMCON0 000F6F  
                             _PWMCON1 000F6E                             ?_initRFID 0001  
                __size_of_setMotorPWM 013E                       __size_of_LCDout 00C6  
                        _enableSensor 1BAA                    __size_of_turnRight 003C  
                __end_of_initMotorPWM 1A9E                ScanWithRange@RFID_Read 0088  
                             _SendLCD 1B7A                               __Hparam 0000  
                             _SetLine 1B44                               __Lparam 0000  
                     __size_of_ScanIR 00F4                               ___awdiv 16CA  
                     __size_of___wmul 0026                               ___lwdiv 1918  
                             ___lwmod 196C                          __psmallconst 0300  
                     __size_of_initIR 0022                               __pcinit 1B0E  
                     ??_ScanWithRange 008C                               __ramtop 0300  
                           ?_turnLeft 0077                               __ptext0 0350  
                             __ptext1 1C52                               __ptext2 1C36  
                             __ptext3 1A64                               __ptext4 14B6  
                             __ptext5 1BF6                               __ptext6 19B0  
                             __ptext7 1BAA                               __ptext8 1C66  
                             __ptext9 0A20                             _T0CONbits 000FD5  
                             _initLCD 14B6                     __end_of_initTimer 1C66  
                             _dpowers 0301                     __end_of_fullSpeed 17CC  
                             _isdigit 1C18                          LCDout@number 002F  
                       ?_VerifySignal 002C                               main@buf 0100  
                             _sprintf 0F1E                        __pintcode_body 157A  
                end_of_initialization 1B36                        ScanWithRange@i 00B8  
                  setMotorPWM@PWMduty 006F                            ??_initRFID 002C  
                       __Lmediumconst 0000                               int_func 157A  
                  ScanIR@SensorResult 00AB                       ??_fullSpeedBack 0032  
                           _RFID_Read 01F9                             _RCSTAbits 000FAB  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                            ??_turnLeft 0032  
              ScanWithRange@LeftFlick 00C6                     __end_of_turnRight 1A28  
                         ?_grabLeftIR 002C                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 002E                ScanWithRange@RightFlag 00C7  
                      __end_of_LCDout 14B6                             _TXSTAbits 000FAC  
                           ScanIR@buf 0081                         ??_grabRightIR 002E  
                      __end_of_ScanIR 13F0                        _ReceivedString 01E7  
                      __end_of___wmul 1BF6                     ScanWithRange@Move 0084  
                         _BAUDCONbits 000FAA                        __end_of_initIR 1C18  
              __size_of_delay_tenth_s 0038                   start_initialization 1B0E  
               __size_of_initMotorPWM 003A                              ??_LCDout 002C  
        __end_of_InterruptHandlerHigh 1638                              ??_ScanIR 0080  
                 __size_of_grabLeftIR 0076                              ??___wmul 0030  
                            ??_initIR 002C                   __end_of_grabRightIR 1842  
                        _initMotorPWM 1A64                           __pbssCOMRAM 0032  
                      fullSpeed@power 0075                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                          _isdigit$1773 002D  
        __size_of_InterruptHandlerLow 00DE                         _delay_tenth_s 1A9E  
                         sprintf@flag 0078                           sprintf@prec 0075  
                   __size_of_initRFID 001C                              ?_SendLCD 0030  
                            ?_SetLine 0001                      ___lwdiv@dividend 002C  
                           __pintcode 0008                  __end_of_VerifySignal 1C78  
                            ?___awdiv 0060              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 002C                              ?___lwmod 0063  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 01C9                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 003C                         ??_setMotorPWM 006A  
                           _initTimer 1C52                             _fullSpeed 1750  
                    ___lwdiv@quotient 0061                              ?_sprintf 0067  
                      ?_delay_tenth_s 0001                        ___wmul@product 0030  
                            _LATAbits 000F89                              _LATBbits 000F8A  
                            _LATCbits 000F8B                              _LATDbits 000F8C  
                            _LATEbits 000F8D                              _IPR1bits 000F9F  
                            _PIE1bits 000F9D                           turnRight@mL 0077  
                         turnRight@mR 0079                              i2u352_47 1AF0  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           main@F3552 0200                             main@F3554 0264  
                           main@F3557 01E3                           _grabRightIR 17CC  
               ScanWithRange@LeftFlag 00BE                  grabRightIR@IR_signal 0060  
                   ___wmul@multiplier 002C                 __end_of_ScanWithRange 0F1E  
                        setMotorPWM@m 0068                 ScanWithRange@MoveTime 0082  
                _InterruptHandlerHigh 0008                 ScanWithRange@MoveType 0086  
                            ScanIR@mL 007C                              ScanIR@mR 007E  
                        ??_grabLeftIR 002E                            ?_initTimer 0001  
                           _turnRight 19EC                            ?_fullSpeed 0071  
                    ScanWithRange@buf 0090                   __end_of_setMotorPWM 12FC  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 19EC  
                    __size_of_SetLine 0036                    __end_of_grabLeftIR 18B8  
                    __size_of___awdiv 0086                      __size_of___lwdiv 0054  
                    __size_of___lwmod 0044                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0076                      __size_of_initLCD 00C4  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 002E  
                     ___lwdiv@counter 0060                            ?_turnRight 0077  
                            __ptext10 19EC                              __ptext11 1A28  
                            __ptext20 1BD0                              __ptext12 1750  
                            __ptext21 196C                              __ptext13 1A9E  
                            __ptext22 1918                              __ptext14 12FC  
                            __ptext23 17CC                              __ptext15 1638  
                            __ptext32 1AD6                              __ptext24 1842  
                            __ptext16 11BE                              __ptext25 1B44  
                            __ptext17 16CA                              __ptext26 18B8  
                            __ptext18 0F1E                              __ptext27 1B7A  
                            __ptext19 1C18                              __ptext28 13F0  
                            __ptext29 1C78                       ??_delay_tenth_s 002C  
                    __size_of_sprintf 02A0                              _initRFID 1C36  
           ScanWithRange@SensorResult 00C2                        turnRight@power 007B  
                       __size_of_main 06D0                    main@DirectionFound 01CE  
                       turnLeft@power 007B                         __size_of_stop 0092  
                          turnLeft@mL 0077                            turnLeft@mR 0079  
               __size_of_VerifySignal 0012                              int$flags 0034  
                            main@Move 01D0                   _InterruptHandlerLow 0018  
                          _LCD_String 18B8                              _turnLeft 1A28  
                     ScanWithRange@mL 007C                       ScanWithRange@mR 007E  
                  enableSensor@sensor 002D                    enableSensor@status 002C  
                       VerifySignal@i 0031                            _INTCONbits 000FF2  
                         ??_initTimer 002C                              isdigit@c 002E  
                         ??_fullSpeed 0076                           _setMotorPWM 11BE  
                        _VerifySignal 1C66                              intlevel1 0000  
                            intlevel2 0000                             sprintf@ap 0073  
                           sprintf@sp 0067                  ?_InterruptHandlerLow 0001  
                       ?_enableSensor 002C                      ___lwmod@dividend 0063  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00BA  
              ??_InterruptHandlerHigh 0005                              sprintf@c 007B  
                            sprintf@f 0069                       ___lwmod@divisor 0065  
                     ___lwmod@counter 0030                           ??_turnRight 0032  
               ??_InterruptHandlerLow 0017                        ??_enableSensor 002D  
                    i2delay_tenth_s@i 0003  
