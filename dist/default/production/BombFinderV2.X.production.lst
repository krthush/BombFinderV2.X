

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Mar 18 14:45:18 2018

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000300                     __psmallconst:
    53                           	opt stack 0
    54  000300  00                 	db	0
    55  000301                     _dpowers:
    56                           	opt stack 0
    57  000301  0001               	dw	1
    58  000303  000A               	dw	10
    59  000305  0064               	dw	100
    60  000307  03E8               	dw	1000
    61  000309  2710               	dw	10000
    62  00030B                     __end_of_dpowers:
    63                           	opt stack 0
    64  0000                     _ANSEL0bits	set	4024
    65  0000                     _BAUDCONbits	set	4010
    66  0000                     _CAP1BUFH	set	3945
    67  0000                     _CAP1BUFL	set	3944
    68  0000                     _CAP1CON	set	3939
    69  0000                     _CAP2BUFH	set	3943
    70  0000                     _CAP2BUFL	set	3942
    71  0000                     _CAP2CON	set	3938
    72  0000                     _INTCONbits	set	4082
    73  0000                     _IPR1bits	set	3999
    74  0000                     _LATAbits	set	3977
    75  0000                     _LATB	set	3978
    76  0000                     _LATCbits	set	3979
    77  0000                     _LATDbits	set	3980
    78  0000                     _LATEbits	set	3981
    79  0000                     _OSCCON	set	4051
    80  0000                     _OSCCONbits	set	4051
    81  0000                     _PIE1bits	set	3997
    82  0000                     _PIR1bits	set	3998
    83  0000                     _PTCON0	set	3967
    84  0000                     _PTCON1	set	3966
    85  0000                     _PTPERH	set	3962
    86  0000                     _PTPERL	set	3963
    87  0000                     _PWMCON0	set	3951
    88  0000                     _PWMCON1	set	3950
    89  0000                     _RCONbits	set	4048
    90  0000                     _RCREG	set	4014
    91  0000                     _RCSTAbits	set	4011
    92  0000                     _SPBRG	set	4015
    93  0000                     _SPBRGH	set	4016
    94  0000                     _T5CON	set	4023
    95  0000                     _TRISAbits	set	3986
    96  0000                     _TRISBbits	set	3987
    97  0000                     _TRISC	set	3988
    98  0000                     _TRISCbits	set	3988
    99  0000                     _TRISDbits	set	3989
   100  0000                     _TRISEbits	set	3990
   101  0000                     _TXREG	set	4013
   102  0000                     _TXSTAbits	set	4012
   103  0000                     _PDC0H	set	3960
   104  0000                     _PDC0L	set	3961
   105  0000                     _PDC1H	set	3958
   106  0000                     _PDC1L	set	3959
   107  00030B                     STR_6:
   108  00030B  20                 	db	32
   109  00030C  20                 	db	32
   110  00030D  20                 	db	32
   111  00030E  20                 	db	32
   112  00030F  20                 	db	32
   113  000310  20                 	db	32
   114  000311  25                 	db	37
   115  000312  30                 	db	48	;'0'
   116  000313  34                 	db	52	;'4'
   117  000314  64                 	db	100	;'d'
   118  000315  2C                 	db	44
   119  000316  20                 	db	32
   120  000317  25                 	db	37
   121  000318  30                 	db	48	;'0'
   122  000319  34                 	db	52	;'4'
   123  00031A  64                 	db	100	;'d'
   124  00031B  00                 	db	0
   125  00031C                     STR_5:
   126  00031C  20                 	db	32
   127  00031D  20                 	db	32
   128  00031E  20                 	db	32
   129  00031F  20                 	db	32
   130  000320  20                 	db	32
   131  000321  20                 	db	32
   132  000322  49                 	db	73	;'I'
   133  000323  6E                 	db	110	;'n'
   134  000324  65                 	db	101	;'e'
   135  000325  72                 	db	114	;'r'
   136  000326  74                 	db	116	;'t'
   137  000327  20                 	db	32
   138  000328  4D                 	db	77	;'M'
   139  000329  6F                 	db	111	;'o'
   140  00032A  64                 	db	100	;'d'
   141  00032B  65                 	db	101	;'e'
   142  00032C  00                 	db	0
   143  00032D                     STR_8:
   144  00032D  50                 	db	80	;'P'
   145  00032E  55                 	db	85	;'U'
   146  00032F  54                 	db	84	;'T'
   147  000330  20                 	db	32
   148  000331  4D                 	db	77	;'M'
   149  000332  45                 	db	69	;'E'
   150  000333  53                 	db	83	;'S'
   151  000334  53                 	db	83	;'S'
   152  000335  41                 	db	65	;'A'
   153  000336  47                 	db	71	;'G'
   154  000337  45                 	db	69	;'E'
   155  000338  00                 	db	0
   156  000339                     STR_1:
   157  000339  20                 	db	32
   158  00033A  20                 	db	32
   159  00033B  20                 	db	32
   160  00033C  20                 	db	32
   161  00033D  20                 	db	32
   162  00033E  53                 	db	83	;'S'
   163  00033F  63                 	db	99	;'c'
   164  000340  61                 	db	97	;'a'
   165  000341  6E                 	db	110	;'n'
   166  000342  49                 	db	73	;'I'
   167  000343  52                 	db	82	;'R'
   168  000344  00                 	db	0
   169  000345                     STR_9:
   170  000345  47                 	db	71	;'G'
   171  000346  6F                 	db	111	;'o'
   172  000347  69                 	db	105	;'i'
   173  000348  6E                 	db	110	;'n'
   174  000349  67                 	db	103	;'g'
   175  00034A  20                 	db	32
   176  00034B  48                 	db	72	;'H'
   177  00034C  6F                 	db	111	;'o'
   178  00034D  6D                 	db	109	;'m'
   179  00034E  65                 	db	101	;'e'
   180  00034F  00                 	db	0
   181  000350                     STR_7:
   182  000350  53                 	db	83	;'S'
   183  000351  65                 	db	101	;'e'
   184  000352  61                 	db	97	;'a'
   185  000353  72                 	db	114	;'r'
   186  000354  63                 	db	99	;'c'
   187  000355  68                 	db	104	;'h'
   188  000356  69                 	db	105	;'i'
   189  000357  6E                 	db	110	;'n'
   190  000358  67                 	db	103	;'g'
   191  000359  00                 	db	0
   192  0000                     
   193                           ; #config settings
   194  00035A  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	cinit
   197  0018A6                     __pcinit:
   198                           	opt stack 0
   199  0018A6                     start_initialization:
   200                           	opt stack 0
   201  0018A6                     __initialization:
   202                           	opt stack 0
   203                           
   204                           ; Clear objects allocated to BANK1 (5 bytes)
   205  0018A6  0101               	movlb	1
   206  0018A8  6BFE               	clrf	(__pbssBANK1+4)& (0+255),b
   207  0018AA  6BFD               	clrf	(__pbssBANK1+3)& (0+255),b
   208  0018AC  6BFC               	clrf	(__pbssBANK1+2)& (0+255),b
   209  0018AE  6BFB               	clrf	(__pbssBANK1+1)& (0+255),b
   210  0018B0  6BFA               	clrf	__pbssBANK1& (0+255),b
   211                           
   212                           ; Clear objects allocated to BANK0 (24 bytes)
   213  0018B2  EE00  F0B8         	lfsr	0,__pbssBANK0
   214  0018B6  0E18               	movlw	24
   215  0018B8                     clear_0:
   216  0018B8  6AEE               	clrf	postinc0,c
   217  0018BA  06E8               	decf	wreg,f,c
   218  0018BC  E1FD               	bnz	clear_0
   219                           
   220                           ; Clear objects allocated to COMRAM (2 bytes)
   221  0018BE  6A3B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   222  0018C0  6A3A               	clrf	__pbssCOMRAM& (0+255),c
   223  0018C2                     end_of_initialization:
   224                           	opt stack 0
   225  0018C2                     __end_of__initialization:
   226                           	opt stack 0
   227  0018C2  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   228  0018C4  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   229  0018C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   230  0018C8  6EF8               	movwf	tblptru,c
   231  0018CA  0100               	movlb	0
   232  0018CC  EFAE  F001         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           
   237                           	psect	bssCOMRAM
   238  00003A                     __pbssCOMRAM:
   239                           	opt stack 0
   240  00003A                     _i:
   241                           	opt stack 0
   242  00003A                     	ds	1
   243  00003B                     _mode:
   244                           	opt stack 0
   245  00003B                     	ds	1
   246                           tblptru	equ	0xFF8
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           
   250                           	psect	bssBANK0
   251  0000B8                     __pbssBANK0:
   252                           	opt stack 0
   253  0000B8                     ScanIR@F3878:
   254                           	opt stack 0
   255  0000B8                     	ds	4
   256  0000BC                     ScanWithRange@F3889:
   257                           	opt stack 0
   258  0000BC                     	ds	4
   259  0000C0                     _ReceivedString:
   260                           	opt stack 0
   261  0000C0                     	ds	16
   262                           tblptru	equ	0xFF8
   263                           postinc0	equ	0xFEE
   264                           wreg	equ	0xFE8
   265                           
   266                           	psect	bssBANK1
   267  0001FA                     __pbssBANK1:
   268                           	opt stack 0
   269  0001FA                     main@F3893:
   270                           	opt stack 0
   271  0001FA                     	ds	4
   272  0001FE                     _RFID_Read:
   273                           	opt stack 0
   274  0001FE                     	ds	1
   275                           tblptru	equ	0xFF8
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           
   279                           	psect	cstackBANK2
   280  000200                     __pcstackBANK2:
   281                           	opt stack 0
   282  000200                     main@mL:
   283                           	opt stack 0
   284                           
   285                           ; 9 bytes @ 0x0
   286  000200                     	ds	9
   287  000209                     main@mR:
   288                           	opt stack 0
   289                           
   290                           ; 9 bytes @ 0x9
   291  000209                     	ds	9
   292                           tblptru	equ	0xFF8
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	cstackBANK1
   297  000100                     __pcstackBANK1:
   298                           	opt stack 0
   299  000100                     main@MoveTime:
   300                           	opt stack 0
   301                           
   302                           ; 100 bytes @ 0x0
   303  000100                     	ds	100
   304  000164                     main@MoveType:
   305                           	opt stack 0
   306                           
   307                           ; 100 bytes @ 0x64
   308  000164                     	ds	100
   309  0001C8                     main@buf:
   310                           	opt stack 0
   311                           
   312                           ; 40 bytes @ 0xC8
   313  0001C8                     	ds	40
   314  0001F0                     main@Message:
   315                           	opt stack 0
   316                           
   317                           ; 10 bytes @ 0xF0
   318  0001F0                     	ds	10
   319                           tblptru	equ	0xFF8
   320                           postinc0	equ	0xFEE
   321                           wreg	equ	0xFE8
   322                           
   323                           	psect	cstackBANK0
   324  000060                     __pcstackBANK0:
   325                           	opt stack 0
   326  000060                     ??_sprintf:
   327  000060                     setMotorPWM@PWMduty:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x0
   331  000060                     	ds	2
   332  000062                     stop@mL:
   333                           	opt stack 0
   334  000062                     fullSpeedAhead@mL:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x2
   338  000062                     	ds	2
   339  000064                     stop@mR:
   340                           	opt stack 0
   341  000064                     fullSpeedAhead@mR:
   342                           	opt stack 0
   343  000064                     sprintf@ap:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x4
   347  000064                     	ds	2
   348  000066                     sprintf@prec:
   349                           	opt stack 0
   350  000066                     turnLeft@mL:
   351                           	opt stack 0
   352  000066                     turnRight@mL:
   353                           	opt stack 0
   354  000066                     fullSpeedBack@mL:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x6
   358  000066                     	ds	1
   359  000067                     sprintf@val:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x7
   363  000067                     	ds	1
   364  000068                     turnLeft@mR:
   365                           	opt stack 0
   366  000068                     turnRight@mR:
   367                           	opt stack 0
   368  000068                     fullSpeedBack@mR:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x8
   372  000068                     	ds	1
   373  000069                     sprintf@flag:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x9
   377  000069                     	ds	1
   378  00006A                     sprintf@width:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0xA
   382  00006A                     	ds	2
   383  00006C                     sprintf@c:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0xC
   387  00006C                     	ds	1
   388  00006D                     ScanIR@mL:
   389                           	opt stack 0
   390  00006D                     ScanWithRange@mL:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0xD
   394  00006D                     	ds	2
   395  00006F                     ScanIR@mR:
   396                           	opt stack 0
   397  00006F                     ScanWithRange@mR:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0xF
   401  00006F                     	ds	2
   402  000071                     ScanIR@TurnDirection:
   403                           	opt stack 0
   404  000071                     ScanWithRange@milliseconds:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x11
   408  000071                     	ds	1
   409  000072                     ScanIR@Move:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x12
   413  000072                     	ds	1
   414  000073                     ScanWithRange@TurnDirection:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x13
   418  000073                     	ds	1
   419  000074                     ScanIR@MoveTime:
   420                           	opt stack 0
   421  000074                     ScanWithRange@MoveTimeEntry:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x14
   425  000074                     	ds	2
   426  000076                     ??_ScanWithRange:
   427  000076                     ScanIR@MoveType:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x16
   431  000076                     	ds	2
   432  000078                     ScanIR@buf:
   433                           	opt stack 0
   434  000078                     ScanWithRange@buf:
   435                           	opt stack 0
   436                           
   437                           ; 40 bytes @ 0x18
   438  000078                     	ds	40
   439  0000A0                     ScanIR@DirectionMoveThreshold:
   440                           	opt stack 0
   441  0000A0                     ScanWithRange@i:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x40
   445  0000A0                     	ds	2
   446  0000A2                     ScanWithRange@DirectionFoundThreshold:
   447                           	opt stack 0
   448  0000A2                     ScanIR@SensorResult:
   449                           	opt stack 0
   450                           
   451                           ; 4 bytes @ 0x42
   452  0000A2                     	ds	2
   453  0000A4                     ScanWithRange@FlagCounter:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x44
   457  0000A4                     	ds	1
   458  0000A5                     ScanWithRange@SensorResult:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0x45
   462  0000A5                     	ds	4
   463  0000A9                     ScanWithRange@n:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x49
   467  0000A9                     	ds	2
   468  0000AB                     ScanWithRange@LeftFlag:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x4B
   472  0000AB                     	ds	1
   473  0000AC                     ScanWithRange@RightFlag:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x4C
   477  0000AC                     	ds	1
   478  0000AD                     ??_main:
   479                           
   480                           ; 0 bytes @ 0x4D
   481  0000AD                     	ds	2
   482  0000AF                     main@ScanAngle:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x4F
   486  0000AF                     	ds	1
   487  0000B0                     main@SensorResult:
   488                           	opt stack 0
   489                           
   490                           ; 4 bytes @ 0x50
   491  0000B0                     	ds	4
   492  0000B4                     main@TurnDirection:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x54
   496  0000B4                     	ds	1
   497  0000B5                     main@DirectionFound:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x55
   501  0000B5                     	ds	1
   502  0000B6                     main@Move:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x56
   506  0000B6                     	ds	1
   507  0000B7                     main@i:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x57
   511  0000B7                     	ds	1
   512                           tblptru	equ	0xFF8
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           
   516                           	psect	cstackCOMRAM
   517  000001                     __pcstackCOMRAM:
   518                           	opt stack 0
   519  000001                     ??i2_delay_tenth_s:
   520                           
   521                           ; 0 bytes @ 0x0
   522  000001                     	ds	1
   523  000002                     i2delay_tenth_s@tenth_seconds:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x1
   527  000002                     	ds	1
   528  000003                     i2delay_tenth_s@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x2
   532  000003                     	ds	2
   533  000005                     ??_InterruptHandlerHigh:
   534                           
   535                           ; 0 bytes @ 0x4
   536  000005                     	ds	14
   537  000013                     ??_InterruptHandlerLow:
   538                           
   539                           ; 0 bytes @ 0x12
   540  000013                     	ds	17
   541  000024                     ??_isdigit:
   542  000024                     ??_LCDout:
   543  000024                     ??_delay_tenth_s:
   544  000024                     ?_grabRightIR:
   545                           	opt stack 0
   546  000024                     ?_grabLeftIR:
   547                           	opt stack 0
   548  000024                     ?___wmul:
   549                           	opt stack 0
   550  000024                     ?___lwdiv:
   551                           	opt stack 0
   552  000024                     enableSensor@status:
   553                           	opt stack 0
   554  000024                     VerifySignal@Signal:
   555                           	opt stack 0
   556  000024                     ___wmul@multiplier:
   557                           	opt stack 0
   558  000024                     ___lwdiv@dividend:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x23
   562  000024                     	ds	1
   563  000025                     enableSensor@sensor:
   564                           	opt stack 0
   565  000025                     delay_tenth_s@tenth_seconds:
   566                           	opt stack 0
   567  000025                     _isdigit$1873:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x24
   571  000025                     	ds	1
   572  000026                     ??_grabRightIR:
   573  000026                     ??_grabLeftIR:
   574  000026                     ??_VerifySignal:
   575  000026                     isdigit@c:
   576                           	opt stack 0
   577  000026                     delay_tenth_s@i:
   578                           	opt stack 0
   579  000026                     ___wmul@multiplicand:
   580                           	opt stack 0
   581  000026                     ___lwdiv@divisor:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x25
   585  000026                     	ds	1
   586  000027                     LCDout@number:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x26
   590  000027                     	ds	1
   591  000028                     SendLCD@type:
   592                           	opt stack 0
   593  000028                     ___wmul@product:
   594                           	opt stack 0
   595  000028                     ___lwdiv@quotient:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x27
   599  000028                     	ds	1
   600  000029                     SendLCD@Byte:
   601                           	opt stack 0
   602  000029                     grabRightIR@IR_signal:
   603                           	opt stack 0
   604  000029                     grabLeftIR@IR_signal:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x28
   608  000029                     	ds	1
   609  00002A                     ??_initLCD:
   610  00002A                     ?___awdiv:
   611                           	opt stack 0
   612  00002A                     SetLine@line:
   613                           	opt stack 0
   614  00002A                     ___lwdiv@counter:
   615                           	opt stack 0
   616  00002A                     LCD_String@string:
   617                           	opt stack 0
   618  00002A                     ___awdiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x29
   622  00002A                     	ds	1
   623  00002B                     ?___lwmod:
   624                           	opt stack 0
   625  00002B                     grabRightIR@i:
   626                           	opt stack 0
   627  00002B                     grabLeftIR@i:
   628                           	opt stack 0
   629  00002B                     ___lwmod@dividend:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x2A
   633  00002B                     	ds	1
   634  00002C                     VerifySignal@checksum:
   635                           	opt stack 0
   636  00002C                     ___awdiv@divisor:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x2B
   640  00002C                     	ds	1
   641  00002D                     VerifySignal@hexByte:
   642                           	opt stack 0
   643  00002D                     ___lwmod@divisor:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x2C
   647  00002D                     	ds	1
   648  00002E                     ___awdiv@counter:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x2D
   652  00002E                     	ds	1
   653  00002F                     VerifySignal@i:
   654                           	opt stack 0
   655  00002F                     ___awdiv@sign:
   656                           	opt stack 0
   657  00002F                     ___lwmod@counter:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x2E
   661  00002F                     	ds	1
   662  000030                     ?_sprintf:
   663                           	opt stack 0
   664  000030                     sprintf@sp:
   665                           	opt stack 0
   666  000030                     ___awdiv@quotient:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2F
   670  000030                     	ds	2
   671  000032                     setMotorPWM@m:
   672                           	opt stack 0
   673  000032                     sprintf@f:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x31
   677  000032                     	ds	2
   678  000034                     ??_setMotorPWM:
   679                           
   680                           ; 0 bytes @ 0x33
   681  000034                     	ds	5
   682  000039                     ??_ScanIR:
   683                           
   684                           ; 0 bytes @ 0x38
   685  000039                     	ds	1
   686  00003A                     tblptru	equ	0xFF8
   687                           postinc0	equ	0xFEE
   688                           wreg	equ	0xFE8
   689                           
   690                           ; 0 bytes @ 0x39
   691 ;;
   692 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   693 ;;
   694 ;; *************** function _main *****************
   695 ;; Defined at:
   696 ;;		line 51 in file "main.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;		None
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  MoveType      100  100[BANK1 ] unsigned char [100]
   701 ;;  MoveTime      100    0[BANK1 ] unsigned char [100]
   702 ;;  buf            40  200[BANK1 ] unsigned char [40]
   703 ;;  Message        10  240[BANK1 ] unsigned char [10]
   704 ;;  mR              9    9[BANK2 ] struct DC_motor
   705 ;;  mL              9    0[BANK2 ] struct DC_motor
   706 ;;  SensorResult    4   80[BANK0 ] unsigned int [2]
   707 ;;  i               1   87[BANK0 ] unsigned char 
   708 ;;  Move            1   86[BANK0 ] unsigned char 
   709 ;;  DirectionFou    1   85[BANK0 ] char 
   710 ;;  TurnDirectio    1   84[BANK0 ] unsigned char 
   711 ;;  ScanAngle       1   79[BANK0 ] unsigned char 
   712 ;; Return value:  Size  Location     Type
   713 ;;		None               void
   714 ;; Registers used:
   715 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   721 ;;      Params:         0       0       0       0
   722 ;;      Locals:         0       9     250      18
   723 ;;      Temps:          0       2       0       0
   724 ;;      Totals:         0      11     250      18
   725 ;;Total ram usage:      279 bytes
   726 ;; Hardware stack levels required when called:    8
   727 ;; This function calls:
   728 ;;		_LCD_String
   729 ;;		_ScanIR
   730 ;;		_ScanWithRange
   731 ;;		_SendLCD
   732 ;;		_SetLine
   733 ;;		_VerifySignal
   734 ;;		_delay_tenth_s
   735 ;;		_enableSensor
   736 ;;		_fullSpeedAhead
   737 ;;		_fullSpeedBack
   738 ;;		_grabLeftIR
   739 ;;		_grabRightIR
   740 ;;		_initIR
   741 ;;		_initLCD
   742 ;;		_initMotorPWM
   743 ;;		_initRFID
   744 ;;		_sprintf
   745 ;;		_stop
   746 ;; This function is called by:
   747 ;;		Startup code after reset
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text0
   752  00035C                     __ptext0:
   753                           	opt stack 0
   754  00035C                     _main:
   755                           	opt stack 23
   756                           
   757                           ;main.c: 54: unsigned char Message[10];
   758                           ;main.c: 55: unsigned char i=0;
   759                           
   760                           ;incstack = 0
   761  00035C  0E00               	movlw	0
   762  00035E  0100               	movlb	0	; () banked
   763  000360  6FB7               	movwf	main@i& (0+255),b
   764                           
   765                           ;main.c: 56: signed char DirectionFound=0;
   766  000362  0E00               	movlw	0
   767  000364  0100               	movlb	0	; () banked
   768  000366  6FB5               	movwf	main@DirectionFound& (0+255),b
   769                           
   770                           ;main.c: 57: unsigned char TurnDirection=0;
   771  000368  0E00               	movlw	0
   772  00036A  0100               	movlb	0	; () banked
   773  00036C  6FB4               	movwf	main@TurnDirection& (0+255),b
   774                           
   775                           ;main.c: 58: char MoveTime[100];
   776                           ;main.c: 59: char MoveType[100];
   777                           ;main.c: 60: char Move=0;
   778  00036E  0E00               	movlw	0
   779  000370  0100               	movlb	0	; () banked
   780  000372  6FB6               	movwf	main@Move& (0+255),b
   781                           
   782                           ; BSR set to: 0
   783                           ;main.c: 61: unsigned int SensorResult[2]={0,0};
   784  000374  C1FA  F0B0         	movff	main@F3893,main@SensorResult
   785  000378  C1FB  F0B1         	movff	main@F3893+1,main@SensorResult+1
   786  00037C  C1FC  F0B2         	movff	main@F3893+2,main@SensorResult+2
   787  000380  C1FD  F0B3         	movff	main@F3893+3,main@SensorResult+3
   788                           
   789                           ;main.c: 62: char buf[40];
   790                           ;main.c: 64: unsigned char ScanAngle=60;
   791  000384  0E3C               	movlw	60
   792  000386  0100               	movlb	0	; () banked
   793  000388  6FAF               	movwf	main@ScanAngle& (0+255),b
   794                           
   795                           ; BSR set to: 0
   796                           ;main.c: 67: INTCONbits.GIEH=1;
   797  00038A  8EF2               	bsf	intcon,7,c	;volatile
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 68: INTCONbits.GIEL=1;
   801  00038C  8CF2               	bsf	intcon,6,c	;volatile
   802                           
   803                           ; BSR set to: 0
   804                           ;main.c: 69: INTCONbits.PEIE=1;
   805  00038E  8CF2               	bsf	intcon,6,c	;volatile
   806                           
   807                           ; BSR set to: 0
   808                           ;main.c: 70: RCONbits.IPEN=1;
   809  000390  8ED0               	bsf	4048,7,c	;volatile
   810                           
   811                           ; BSR set to: 0
   812                           ;main.c: 73: IPR1bits.RCIP=0;
   813  000392  9A9F               	bcf	3999,5,c	;volatile
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 74: PIE1bits.RCIE=1;
   817  000394  8A9D               	bsf	3997,5,c	;volatile
   818                           
   819                           ; BSR set to: 0
   820                           ;main.c: 77: TRISCbits.RC3=1;
   821  000396  8694               	bsf	3988,3,c	;volatile
   822                           
   823                           ; BSR set to: 0
   824                           ;main.c: 78: INTCONbits.INT0IE=1;
   825  000398  88F2               	bsf	intcon,4,c	;volatile
   826                           
   827                           ; BSR set to: 0
   828                           ;main.c: 81: PIR1bits.RC1IF=0;
   829  00039A  9A9E               	bcf	3998,5,c	;volatile
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 82: INTCONbits.INT0IF=0;
   833  00039C  92F2               	bcf	intcon,1,c	;volatile
   834                           
   835                           ;main.c: 85: struct DC_motor mL, mR;
   836                           ;main.c: 86: mL.power=0;
   837  00039E  0E00               	movlw	0
   838  0003A0  0102               	movlb	2	; () banked
   839  0003A2  6F00               	movwf	main@mL& (0+255),b
   840                           
   841                           ;main.c: 87: mL.direction=1;
   842  0003A4  0E01               	movlw	1
   843  0003A6  0102               	movlb	2	; () banked
   844  0003A8  6F01               	movwf	(main@mL+1)& (0+255),b
   845                           
   846                           ; BSR set to: 2
   847                           ;main.c: 88: mL.dutyLowByte=(unsigned char *)(&PDC0L);
   848  0003AA  0E79               	movlw	121
   849  0003AC  0102               	movlb	2	; () banked
   850  0003AE  6F02               	movwf	(main@mL+2)& (0+255),b
   851  0003B0  0E0F               	movlw	15
   852  0003B2  0102               	movlb	2	; () banked
   853  0003B4  6F03               	movwf	(main@mL+3)& (0+255),b
   854                           
   855                           ; BSR set to: 2
   856                           ;main.c: 89: mL.dutyHighByte=(unsigned char *)(&PDC0H);
   857  0003B6  0E78               	movlw	120
   858  0003B8  0102               	movlb	2	; () banked
   859  0003BA  6F04               	movwf	(main@mL+4)& (0+255),b
   860  0003BC  0E0F               	movlw	15
   861  0003BE  0102               	movlb	2	; () banked
   862  0003C0  6F05               	movwf	(main@mL+5)& (0+255),b
   863                           
   864                           ;main.c: 90: mL.dir_pin=0;
   865  0003C2  0E00               	movlw	0
   866  0003C4  0102               	movlb	2	; () banked
   867  0003C6  6F06               	movwf	(main@mL+6)& (0+255),b
   868                           
   869                           ;main.c: 91: mL.PWMperiod=199;
   870  0003C8  0E00               	movlw	0
   871  0003CA  0102               	movlb	2	; () banked
   872  0003CC  6F08               	movwf	(main@mL+8)& (0+255),b
   873  0003CE  0EC7               	movlw	199
   874  0003D0  6F07               	movwf	(main@mL+7)& (0+255),b
   875                           
   876                           ;main.c: 93: mR.power=0;
   877  0003D2  0E00               	movlw	0
   878  0003D4  0102               	movlb	2	; () banked
   879  0003D6  6F09               	movwf	main@mR& (0+255),b
   880                           
   881                           ;main.c: 94: mR.direction=1;
   882  0003D8  0E01               	movlw	1
   883  0003DA  0102               	movlb	2	; () banked
   884  0003DC  6F0A               	movwf	(main@mR+1)& (0+255),b
   885                           
   886                           ; BSR set to: 2
   887                           ;main.c: 95: mR.dutyLowByte=(unsigned char *)(&PDC1L);
   888  0003DE  0E77               	movlw	119
   889  0003E0  0102               	movlb	2	; () banked
   890  0003E2  6F0B               	movwf	(main@mR+2)& (0+255),b
   891  0003E4  0E0F               	movlw	15
   892  0003E6  0102               	movlb	2	; () banked
   893  0003E8  6F0C               	movwf	(main@mR+3)& (0+255),b
   894                           
   895                           ; BSR set to: 2
   896                           ;main.c: 96: mR.dutyHighByte=(unsigned char *)(&PDC1H);
   897  0003EA  0E76               	movlw	118
   898  0003EC  0102               	movlb	2	; () banked
   899  0003EE  6F0D               	movwf	(main@mR+4)& (0+255),b
   900  0003F0  0E0F               	movlw	15
   901  0003F2  0102               	movlb	2	; () banked
   902  0003F4  6F0E               	movwf	(main@mR+5)& (0+255),b
   903                           
   904                           ;main.c: 97: mR.dir_pin=2;
   905  0003F6  0E02               	movlw	2
   906  0003F8  0102               	movlb	2	; () banked
   907  0003FA  6F0F               	movwf	(main@mR+6)& (0+255),b
   908                           
   909                           ;main.c: 98: mR.PWMperiod=199;
   910  0003FC  0E00               	movlw	0
   911  0003FE  0102               	movlb	2	; () banked
   912  000400  6F11               	movwf	(main@mR+8)& (0+255),b
   913  000402  0EC7               	movlw	199
   914  000404  6F10               	movwf	(main@mR+7)& (0+255),b
   915                           
   916                           ;main.c: 100: OSCCON = 0x72;
   917  000406  0E72               	movlw	114
   918  000408  6ED3               	movwf	4051,c	;volatile
   919  00040A                     l371:
   920  00040A  B4D3               	btfsc	4051,2,c	;volatile
   921  00040C  D231               	goto	l3368
   922  00040E  D7FD               	goto	l371
   923  000410                     l3212:
   924                           
   925                           ;main.c: 113: stop(&mL, &mR);
   926  000410  0E00               	movlw	low main@mL
   927  000412  0100               	movlb	0	; () banked
   928  000414  6F62               	movwf	stop@mL& (0+255),b
   929  000416  0E02               	movlw	high main@mL
   930  000418  0100               	movlb	0	; () banked
   931  00041A  6F63               	movwf	(stop@mL+1)& (0+255),b
   932  00041C  0E09               	movlw	low main@mR
   933  00041E  0100               	movlb	0	; () banked
   934  000420  6F64               	movwf	stop@mR& (0+255),b
   935  000422  0E02               	movlw	high main@mR
   936  000424  0100               	movlb	0	; () banked
   937  000426  6F65               	movwf	(stop@mR+1)& (0+255),b
   938  000428  EC73  F009         	call	_stop	;wreg free
   939                           
   940                           ;main.c: 114: RFID_Read=0;
   941  00042C  0E00               	movlw	0
   942  00042E  0101               	movlb	1	; () banked
   943  000430  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
   944                           
   945                           ; BSR set to: 1
   946                           ;main.c: 117: SensorResult[0]=grabLeftIR();
   947  000432  EC7D  F00A         	call	_grabLeftIR	;wreg free
   948  000436  C024  F0B0         	movff	?_grabLeftIR,main@SensorResult
   949  00043A  C025  F0B1         	movff	?_grabLeftIR+1,main@SensorResult+1
   950                           
   951                           ;main.c: 118: SensorResult[1]=grabRightIR();
   952  00043E  EC44  F00A         	call	_grabRightIR	;wreg free
   953  000442  C024  F0B2         	movff	?_grabRightIR,main@SensorResult+2
   954  000446  C025  F0B3         	movff	?_grabRightIR+1,main@SensorResult+3
   955                           
   956                           ;main.c: 122: CAP1BUFH=0;
   957  00044A  0E00               	movlw	0
   958  00044C  6E69               	movwf	3945,c	;volatile
   959                           
   960                           ;main.c: 123: CAP1BUFL=0;
   961  00044E  0E00               	movlw	0
   962  000450  6E68               	movwf	3944,c	;volatile
   963                           
   964                           ;main.c: 124: CAP2BUFH=0;
   965  000452  0E00               	movlw	0
   966  000454  6E67               	movwf	3943,c	;volatile
   967                           
   968                           ;main.c: 125: CAP2BUFL=0;
   969  000456  0E00               	movlw	0
   970  000458  6E66               	movwf	3942,c	;volatile
   971                           
   972                           ;main.c: 128: SendLCD(0b00000001,0);
   973  00045A  0E00               	movlw	0
   974  00045C  6E28               	movwf	SendLCD@type,c
   975  00045E  0E01               	movlw	1
   976  000460  EC3B  F00C         	call	_SendLCD
   977                           
   978                           ;main.c: 129: _delay((unsigned long)((50)*(8000000/4000000.0)));
   979  000464  0E21               	movlw	33
   980  000466                     u2837:
   981  000466  2EE8               	decfsz	wreg,f,c
   982  000468  D7FE               	goto	u2837
   983  00046A  F000               	nop	
   984                           
   985                           ;main.c: 130: SendLCD(0b00000010,0);
   986  00046C  0E00               	movlw	0
   987  00046E  6E28               	movwf	SendLCD@type,c
   988  000470  0E02               	movlw	2
   989  000472  EC3B  F00C         	call	_SendLCD
   990                           
   991                           ;main.c: 131: _delay((unsigned long)((2)*(8000000/4000.0)));
   992  000476  0E06               	movlw	6
   993  000478  0100               	movlb	0	; () banked
   994  00047A  6FAD               	movwf	??_main& (0+255),b
   995  00047C  0E30               	movlw	48
   996  00047E                     u2847:
   997  00047E  2EE8               	decfsz	wreg,f,c
   998  000480  D7FE               	goto	u2847
   999  000482  2FAD               	decfsz	??_main& (0+255),f,b
  1000  000484  D7FC               	goto	u2847
  1001  000486  D000               	nop2	
  1002                           
  1003                           ;main.c: 132: SetLine(1);
  1004  000488  0E01               	movlw	1
  1005  00048A  EC23  F00C         	call	_SetLine
  1006                           
  1007                           ;main.c: 133: LCD_String("      Inert Mode");
  1008  00048E  0E1C               	movlw	low STR_5
  1009  000490  6E2A               	movwf	LCD_String@string,c
  1010  000492  0E03               	movlw	high STR_5
  1011  000494  6E2B               	movwf	LCD_String@string+1,c
  1012  000496  ECEE  F00A         	call	_LCD_String	;wreg free
  1013                           
  1014                           ;main.c: 134: SetLine(2);
  1015  00049A  0E02               	movlw	2
  1016  00049C  EC23  F00C         	call	_SetLine
  1017                           
  1018                           ;main.c: 135: sprintf(buf,"      %04d, %04d",SensorResult[0],SensorResult[1]);
  1019  0004A0  0EC8               	movlw	low main@buf
  1020  0004A2  6E30               	movwf	sprintf@sp,c
  1021  0004A4  0E01               	movlw	high main@buf
  1022  0004A6  6E31               	movwf	sprintf@sp+1,c
  1023  0004A8  0E0B               	movlw	low STR_6
  1024  0004AA  6E32               	movwf	sprintf@f,c
  1025  0004AC  0E03               	movlw	high STR_6
  1026  0004AE  6E33               	movwf	sprintf@f+1,c
  1027  0004B0  C0B0  F034         	movff	main@SensorResult,?_sprintf+4
  1028  0004B4  C0B1  F035         	movff	main@SensorResult+1,?_sprintf+5
  1029  0004B8  C0B2  F036         	movff	main@SensorResult+2,?_sprintf+6
  1030  0004BC  C0B3  F037         	movff	main@SensorResult+3,?_sprintf+7
  1031  0004C0  EC49  F004         	call	_sprintf	;wreg free
  1032                           
  1033                           ;main.c: 136: LCD_String(buf);
  1034  0004C4  0EC8               	movlw	low main@buf
  1035  0004C6  6E2A               	movwf	LCD_String@string,c
  1036  0004C8  0E01               	movlw	high main@buf
  1037  0004CA  6E2B               	movwf	LCD_String@string+1,c
  1038  0004CC  ECEE  F00A         	call	_LCD_String	;wreg free
  1039                           
  1040                           ;main.c: 138: break;
  1041  0004D0  D1CF               	goto	l3368
  1042  0004D2                     l3246:
  1043                           
  1044                           ;main.c: 143: initMotorPWM();
  1045  0004D2  EC0A  F00C         	call	_initMotorPWM	;wreg free
  1046                           
  1047                           ;main.c: 144: initRFID();
  1048  0004D6  ECAE  F00C         	call	_initRFID	;wreg free
  1049                           
  1050                           ;main.c: 145: initLCD();
  1051  0004DA  ECBB  F008         	call	_initLCD	;wreg free
  1052                           
  1053                           ;main.c: 146: initIR();
  1054  0004DE  EC8E  F00C         	call	_initIR	;wreg free
  1055                           
  1056                           ;main.c: 148: enableSensor(0, 1);
  1057  0004E2  0E01               	movlw	1
  1058  0004E4  6E24               	movwf	enableSensor@status,c
  1059  0004E6  0E00               	movlw	0
  1060  0004E8  EC68  F00C         	call	_enableSensor
  1061                           
  1062                           ;main.c: 149: enableSensor(1, 1);
  1063  0004EC  0E01               	movlw	1
  1064  0004EE  6E24               	movwf	enableSensor@status,c
  1065  0004F0  0E01               	movlw	1
  1066  0004F2  EC68  F00C         	call	_enableSensor
  1067                           
  1068                           ;main.c: 152: fullSpeedAhead(&mL, &mR);
  1069  0004F6  0E00               	movlw	low main@mL
  1070  0004F8  0100               	movlb	0	; () banked
  1071  0004FA  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1072  0004FC  0E02               	movlw	high main@mL
  1073  0004FE  0100               	movlb	0	; () banked
  1074  000500  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1075  000502  0E09               	movlw	low main@mR
  1076  000504  0100               	movlb	0	; () banked
  1077  000506  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1078  000508  0E02               	movlw	high main@mR
  1079  00050A  0100               	movlb	0	; () banked
  1080  00050C  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1081  00050E  ECB6  F00A         	call	_fullSpeedAhead	;wreg free
  1082                           
  1083                           ;main.c: 153: delay_tenth_s(1);
  1084  000512  0E01               	movlw	1
  1085  000514  ECD2  F00B         	call	_delay_tenth_s
  1086  000518  D1AA               	goto	l3364
  1087  00051A                     l3262:
  1088                           
  1089                           ;main.c: 165: SetLine(1);
  1090  00051A  0E01               	movlw	1
  1091  00051C  EC23  F00C         	call	_SetLine
  1092                           
  1093                           ;main.c: 166: LCD_String("Searching");
  1094  000520  0E50               	movlw	low STR_7
  1095  000522  6E2A               	movwf	LCD_String@string,c
  1096  000524  0E03               	movlw	high STR_7
  1097  000526  6E2B               	movwf	LCD_String@string+1,c
  1098  000528  ECEE  F00A         	call	_LCD_String	;wreg free
  1099                           
  1100                           ;main.c: 168: if (DirectionFound==-1) {
  1101  00052C  0100               	movlb	0	; () banked
  1102  00052E  29B5               	incf	main@DirectionFound& (0+255),w,b
  1103  000530  A4D8               	btfss	status,2,c
  1104  000532  D02D               	goto	l3278
  1105                           
  1106                           ; BSR set to: 0
  1107                           ;main.c: 173: fullSpeedAhead(&mL, &mR);
  1108  000534  0E00               	movlw	low main@mL
  1109  000536  0100               	movlb	0	; () banked
  1110  000538  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1111  00053A  0E02               	movlw	high main@mL
  1112  00053C  0100               	movlb	0	; () banked
  1113  00053E  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1114  000540  0E09               	movlw	low main@mR
  1115  000542  0100               	movlb	0	; () banked
  1116  000544  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1117  000546  0E02               	movlw	high main@mR
  1118  000548  0100               	movlb	0	; () banked
  1119  00054A  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1120  00054C  ECB6  F00A         	call	_fullSpeedAhead	;wreg free
  1121                           
  1122                           ;main.c: 174: delay_tenth_s(6);
  1123  000550  0E06               	movlw	6
  1124  000552  ECD2  F00B         	call	_delay_tenth_s
  1125                           
  1126                           ;main.c: 175: stop(&mL,&mR);
  1127  000556  0E00               	movlw	low main@mL
  1128  000558  0100               	movlb	0	; () banked
  1129  00055A  6F62               	movwf	stop@mL& (0+255),b
  1130  00055C  0E02               	movlw	high main@mL
  1131  00055E  0100               	movlb	0	; () banked
  1132  000560  6F63               	movwf	(stop@mL+1)& (0+255),b
  1133  000562  0E09               	movlw	low main@mR
  1134  000564  0100               	movlb	0	; () banked
  1135  000566  6F64               	movwf	stop@mR& (0+255),b
  1136  000568  0E02               	movlw	high main@mR
  1137  00056A  0100               	movlb	0	; () banked
  1138  00056C  6F65               	movwf	(stop@mR+1)& (0+255),b
  1139  00056E  EC73  F009         	call	_stop	;wreg free
  1140                           
  1141                           ;main.c: 176: DirectionFound=0;
  1142  000572  0E00               	movlw	0
  1143  000574  0100               	movlb	0	; () banked
  1144  000576  6FB5               	movwf	main@DirectionFound& (0+255),b
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;main.c: 177: MoveType[Move]=0;
  1148  000578  0100               	movlb	0	; () banked
  1149  00057A  51B6               	movf	main@Move& (0+255),w,b
  1150  00057C  0D01               	mullw	1
  1151  00057E  0E64               	movlw	low main@MoveType
  1152  000580  24F3               	addwf	prodl,w,c
  1153  000582  6ED9               	movwf	fsr2l,c
  1154  000584  0E01               	movlw	high main@MoveType
  1155  000586  20F4               	addwfc	prodh,w,c
  1156  000588  6EDA               	movwf	fsr2h,c
  1157  00058A  0E00               	movlw	0
  1158  00058C  D14C               	goto	L2
  1159  00058E                     l3278:
  1160                           
  1161                           ; BSR set to: 0
  1162  00058E  0100               	movlb	0	; () banked
  1163  000590  51B5               	movf	main@DirectionFound& (0+255),w,b
  1164  000592  0100               	movlb	0	; () banked
  1165  000594  A4D8               	btfss	status,2,c
  1166  000596  D041               	goto	l3290
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 180: fullSpeedBack(&mL, &mR);
  1170  000598  0E00               	movlw	low main@mL
  1171  00059A  0100               	movlb	0	; () banked
  1172  00059C  6F66               	movwf	fullSpeedBack@mL& (0+255),b
  1173  00059E  0E02               	movlw	high main@mL
  1174  0005A0  0100               	movlb	0	; () banked
  1175  0005A2  6F67               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1176  0005A4  0E09               	movlw	low main@mR
  1177  0005A6  0100               	movlb	0	; () banked
  1178  0005A8  6F68               	movwf	fullSpeedBack@mR& (0+255),b
  1179  0005AA  0E02               	movlw	high main@mR
  1180  0005AC  0100               	movlb	0	; () banked
  1181  0005AE  6F69               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1182  0005B0  ECB5  F00B         	call	_fullSpeedBack	;wreg free
  1183                           
  1184                           ;main.c: 181: delay_tenth_s(6);
  1185  0005B4  0E06               	movlw	6
  1186  0005B6  ECD2  F00B         	call	_delay_tenth_s
  1187                           
  1188                           ;main.c: 182: stop(&mL,&mR);
  1189  0005BA  0E00               	movlw	low main@mL
  1190  0005BC  0100               	movlb	0	; () banked
  1191  0005BE  6F62               	movwf	stop@mL& (0+255),b
  1192  0005C0  0E02               	movlw	high main@mL
  1193  0005C2  0100               	movlb	0	; () banked
  1194  0005C4  6F63               	movwf	(stop@mL+1)& (0+255),b
  1195  0005C6  0E09               	movlw	low main@mR
  1196  0005C8  0100               	movlb	0	; () banked
  1197  0005CA  6F64               	movwf	stop@mR& (0+255),b
  1198  0005CC  0E02               	movlw	high main@mR
  1199  0005CE  0100               	movlb	0	; () banked
  1200  0005D0  6F65               	movwf	(stop@mR+1)& (0+255),b
  1201  0005D2  EC73  F009         	call	_stop	;wreg free
  1202                           
  1203                           ;main.c: 184: DirectionFound=ScanWithRange(&mL, &mR, ScanAngle, TurnDirection, &MoveTime
      +                          [Move]);
  1204  0005D6  0E00               	movlw	low main@mL
  1205  0005D8  0100               	movlb	0	; () banked
  1206  0005DA  6F6D               	movwf	ScanWithRange@mL& (0+255),b
  1207  0005DC  0E02               	movlw	high main@mL
  1208  0005DE  0100               	movlb	0	; () banked
  1209  0005E0  6F6E               	movwf	(ScanWithRange@mL+1)& (0+255),b
  1210  0005E2  0E09               	movlw	low main@mR
  1211  0005E4  0100               	movlb	0	; () banked
  1212  0005E6  6F6F               	movwf	ScanWithRange@mR& (0+255),b
  1213  0005E8  0E02               	movlw	high main@mR
  1214  0005EA  0100               	movlb	0	; () banked
  1215  0005EC  6F70               	movwf	(ScanWithRange@mR+1)& (0+255),b
  1216  0005EE  C0AF  F071         	movff	main@ScanAngle,ScanWithRange@milliseconds
  1217  0005F2  0100               	movlb	0	; () banked
  1218  0005F4  6B72               	clrf	(ScanWithRange@milliseconds+1)& (0+255),b
  1219  0005F6  C0B4  F073         	movff	main@TurnDirection,ScanWithRange@TurnDirection
  1220  0005FA  0100               	movlb	0	; () banked
  1221  0005FC  51B6               	movf	main@Move& (0+255),w,b
  1222  0005FE  0D01               	mullw	1
  1223  000600  0E00               	movlw	low main@MoveTime
  1224  000602  24F3               	addwf	prodl,w,c
  1225  000604  0100               	movlb	0	; () banked
  1226  000606  6F74               	movwf	ScanWithRange@MoveTimeEntry& (0+255),b
  1227  000608  0E01               	movlw	high main@MoveTime
  1228  00060A  20F4               	addwfc	prodh,w,c
  1229  00060C  0100               	movlb	0	; () banked
  1230  00060E  6F75               	movwf	(ScanWithRange@MoveTimeEntry+1)& (0+255),b
  1231  000610  ECCC  F005         	call	_ScanWithRange	;wreg free
  1232  000614  0100               	movlb	0	; () banked
  1233  000616  6FB5               	movwf	main@DirectionFound& (0+255),b
  1234  000618  D030               	goto	l3298
  1235  00061A                     l3290:
  1236                           
  1237                           ; BSR set to: 0
  1238  00061A  0100               	movlb	0	; () banked
  1239  00061C  05B5               	decf	main@DirectionFound& (0+255),w,b
  1240  00061E  A4D8               	btfss	status,2,c
  1241  000620  D025               	goto	l3294
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 188: DirectionFound=ScanIR(&mL, &mR, TurnDirection, &Move, &MoveTime, &MoveType
      +                          );
  1245  000622  0E00               	movlw	low main@mL
  1246  000624  0100               	movlb	0	; () banked
  1247  000626  6F6D               	movwf	ScanIR@mL& (0+255),b
  1248  000628  0E02               	movlw	high main@mL
  1249  00062A  0100               	movlb	0	; () banked
  1250  00062C  6F6E               	movwf	(ScanIR@mL+1)& (0+255),b
  1251  00062E  0E09               	movlw	low main@mR
  1252  000630  0100               	movlb	0	; () banked
  1253  000632  6F6F               	movwf	ScanIR@mR& (0+255),b
  1254  000634  0E02               	movlw	high main@mR
  1255  000636  0100               	movlb	0	; () banked
  1256  000638  6F70               	movwf	(ScanIR@mR+1)& (0+255),b
  1257  00063A  C0B4  F071         	movff	main@TurnDirection,ScanIR@TurnDirection
  1258  00063E  0EB6               	movlw	low main@Move
  1259  000640  0100               	movlb	0	; () banked
  1260  000642  6F72               	movwf	ScanIR@Move& (0+255),b
  1261  000644  0E00               	movlw	high main@Move
  1262  000646  0100               	movlb	0	; () banked
  1263  000648  6F73               	movwf	(ScanIR@Move+1)& (0+255),b
  1264  00064A  0E00               	movlw	low main@MoveTime
  1265  00064C  0100               	movlb	0	; () banked
  1266  00064E  6F74               	movwf	ScanIR@MoveTime& (0+255),b
  1267  000650  0E01               	movlw	high main@MoveTime
  1268  000652  0100               	movlb	0	; () banked
  1269  000654  6F75               	movwf	(ScanIR@MoveTime+1)& (0+255),b
  1270  000656  0E64               	movlw	low main@MoveType
  1271  000658  0100               	movlb	0	; () banked
  1272  00065A  6F76               	movwf	ScanIR@MoveType& (0+255),b
  1273  00065C  0E01               	movlw	high main@MoveType
  1274  00065E  0100               	movlb	0	; () banked
  1275  000660  6F77               	movwf	(ScanIR@MoveType+1)& (0+255),b
  1276  000662  ECDB  F007         	call	_ScanIR	;wreg free
  1277  000666  0100               	movlb	0	; () banked
  1278  000668  6FB5               	movwf	main@DirectionFound& (0+255),b
  1279                           
  1280                           ;main.c: 189: } else if (DirectionFound==2) {
  1281  00066A  D0DE               	goto	l3354
  1282  00066C                     l3294:
  1283                           
  1284                           ; BSR set to: 0
  1285  00066C  0E02               	movlw	2
  1286  00066E  0100               	movlb	0	; () banked
  1287  000670  19B5               	xorwf	main@DirectionFound& (0+255),w,b
  1288  000672  A4D8               	btfss	status,2,c
  1289  000674  D0D9               	goto	l3354
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;main.c: 191: mode=2;
  1293  000676  0E02               	movlw	2
  1294  000678  6E3B               	movwf	_mode,c	;volatile
  1295  00067A                     l3298:
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;main.c: 192: MoveType[Move]=1;
  1299  00067A  0100               	movlb	0	; () banked
  1300  00067C  51B6               	movf	main@Move& (0+255),w,b
  1301  00067E  0D01               	mullw	1
  1302  000680  0E64               	movlw	low main@MoveType
  1303  000682  24F3               	addwf	prodl,w,c
  1304  000684  6ED9               	movwf	fsr2l,c
  1305  000686  0E01               	movlw	high main@MoveType
  1306  000688  20F4               	addwfc	prodh,w,c
  1307  00068A  6EDA               	movwf	fsr2h,c
  1308  00068C  0E01               	movlw	1
  1309  00068E  D0CB               	goto	L2
  1310  000690                     l3302:
  1311                           
  1312                           ;main.c: 204: if (RFID_Read) {
  1313  000690  0101               	movlb	1	; () banked
  1314  000692  51FE               	movf	_RFID_Read& (0+255),w,b	;volatile
  1315  000694  B4D8               	btfsc	status,2,c
  1316  000696  D09C               	goto	l3344
  1317                           
  1318                           ; BSR set to: 1
  1319                           ;main.c: 205: stop(&mL, &mR);
  1320  000698  0E00               	movlw	low main@mL
  1321  00069A  0100               	movlb	0	; () banked
  1322  00069C  6F62               	movwf	stop@mL& (0+255),b
  1323  00069E  0E02               	movlw	high main@mL
  1324  0006A0  0100               	movlb	0	; () banked
  1325  0006A2  6F63               	movwf	(stop@mL+1)& (0+255),b
  1326  0006A4  0E09               	movlw	low main@mR
  1327  0006A6  0100               	movlb	0	; () banked
  1328  0006A8  6F64               	movwf	stop@mR& (0+255),b
  1329  0006AA  0E02               	movlw	high main@mR
  1330  0006AC  0100               	movlb	0	; () banked
  1331  0006AE  6F65               	movwf	(stop@mR+1)& (0+255),b
  1332  0006B0  EC73  F009         	call	_stop	;wreg free
  1333                           
  1334                           ;main.c: 206: if (ReceivedString[0]==0x02 & ReceivedString[15]==0x03){
  1335  0006B4  0E03               	movlw	3
  1336  0006B6  0100               	movlb	0	; () banked
  1337  0006B8  19CF               	xorwf	(_ReceivedString+15)& (0+255),w,b	;volatile
  1338  0006BA  A4D8               	btfss	status,2,c
  1339  0006BC  D002               	goto	u2750
  1340  0006BE  0E01               	movlw	1
  1341  0006C0  D001               	goto	u2752
  1342  0006C2                     u2750:
  1343  0006C2  0E00               	movlw	0
  1344  0006C4                     u2752:
  1345  0006C4  0100               	movlb	0	; () banked
  1346  0006C6  6FAD               	movwf	??_main& (0+255),b
  1347  0006C8  0E02               	movlw	2
  1348  0006CA  0100               	movlb	0	; () banked
  1349  0006CC  19C0               	xorwf	_ReceivedString& (0+255),w,b	;volatile
  1350  0006CE  A4D8               	btfss	status,2,c
  1351  0006D0  D002               	goto	u2760
  1352  0006D2  0E01               	movlw	1
  1353  0006D4  D001               	goto	u2762
  1354  0006D6                     u2760:
  1355  0006D6  0E00               	movlw	0
  1356  0006D8                     u2762:
  1357  0006D8  0100               	movlb	0	; () banked
  1358  0006DA  15AD               	andwf	??_main& (0+255),w,b
  1359  0006DC  A0E8               	btfss	wreg,0,c
  1360  0006DE  D0C8               	goto	l3368
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;main.c: 207: if (VerifySignal(ReceivedString)){
  1364  0006E0  0EC0               	movlw	low _ReceivedString
  1365  0006E2  6E24               	movwf	VerifySignal@Signal,c
  1366  0006E4  0E00               	movlw	high _ReceivedString
  1367  0006E6  6E25               	movwf	VerifySignal@Signal+1,c
  1368  0006E8  EC19  F009         	call	_VerifySignal	;wreg free
  1369  0006EC  0900               	iorlw	0
  1370  0006EE  B4D8               	btfsc	status,2,c
  1371  0006F0  D041               	goto	l3336
  1372                           
  1373                           ;main.c: 209: for (i=0; i<10; i++){
  1374  0006F2  0E00               	movlw	0
  1375  0006F4  0100               	movlb	0	; () banked
  1376  0006F6  6FB7               	movwf	main@i& (0+255),b
  1377  0006F8                     l3312:
  1378                           
  1379                           ; BSR set to: 0
  1380  0006F8  0E09               	movlw	9
  1381  0006FA  0100               	movlb	0	; () banked
  1382  0006FC  65B7               	cpfsgt	main@i& (0+255),b
  1383  0006FE  D001               	goto	l3316
  1384  000700  D020               	goto	l3322
  1385  000702                     l3316:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;main.c: 210: Message[i] = ReceivedString[i+1];
  1389  000702  0100               	movlb	0	; () banked
  1390  000704  51B7               	movf	main@i& (0+255),w,b
  1391  000706  0100               	movlb	0	; () banked
  1392  000708  6FAD               	movwf	??_main& (0+255),b
  1393  00070A  6BAE               	clrf	(??_main+1)& (0+255),b
  1394  00070C  0E01               	movlw	1
  1395  00070E  0100               	movlb	0	; () banked
  1396  000710  27AD               	addwf	??_main& (0+255),f,b
  1397  000712  0E00               	movlw	0
  1398  000714  23AE               	addwfc	(??_main+1)& (0+255),f,b
  1399  000716  0EC0               	movlw	low _ReceivedString
  1400  000718  0100               	movlb	0	; () banked
  1401  00071A  25AD               	addwf	??_main& (0+255),w,b
  1402  00071C  6ED9               	movwf	fsr2l,c
  1403  00071E  0E00               	movlw	high _ReceivedString
  1404  000720  0100               	movlb	0	; () banked
  1405  000722  21AE               	addwfc	(??_main+1)& (0+255),w,b
  1406  000724  6EDA               	movwf	fsr2h,c
  1407  000726  0100               	movlb	0	; () banked
  1408  000728  51B7               	movf	main@i& (0+255),w,b
  1409  00072A  0D01               	mullw	1
  1410  00072C  0EF0               	movlw	low main@Message
  1411  00072E  24F3               	addwf	prodl,w,c
  1412  000730  6EE1               	movwf	fsr1l,c
  1413  000732  0E01               	movlw	high main@Message
  1414  000734  20F4               	addwfc	prodh,w,c
  1415  000736  6EE2               	movwf	fsr1h,c
  1416  000738  CFDF FFE7          	movff	indf2,indf1
  1417                           
  1418                           ; BSR set to: 0
  1419  00073C  0100               	movlb	0	; () banked
  1420  00073E  2BB7               	incf	main@i& (0+255),f,b
  1421  000740  D7DB               	goto	l3312
  1422  000742                     l3322:
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;main.c: 211: }
  1426                           ;main.c: 214: for (i=0; i<16; i++) {
  1427  000742  0E00               	movlw	0
  1428  000744  0100               	movlb	0	; () banked
  1429  000746  6FB7               	movwf	main@i& (0+255),b
  1430  000748                     l3324:
  1431                           
  1432                           ; BSR set to: 0
  1433  000748  0E0F               	movlw	15
  1434  00074A  0100               	movlb	0	; () banked
  1435  00074C  65B7               	cpfsgt	main@i& (0+255),b
  1436  00074E  D001               	goto	l3328
  1437  000750  D00E               	goto	l3334
  1438  000752                     l3328:
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;main.c: 215: ReceivedString[i]=0;
  1442  000752  0100               	movlb	0	; () banked
  1443  000754  51B7               	movf	main@i& (0+255),w,b
  1444  000756  0D01               	mullw	1
  1445  000758  0EC0               	movlw	low _ReceivedString
  1446  00075A  24F3               	addwf	prodl,w,c
  1447  00075C  6ED9               	movwf	fsr2l,c
  1448  00075E  0E00               	movlw	high _ReceivedString
  1449  000760  20F4               	addwfc	prodh,w,c
  1450  000762  6EDA               	movwf	fsr2h,c
  1451  000764  0E00               	movlw	0
  1452  000766  6EDF               	movwf	indf2,c
  1453                           
  1454                           ; BSR set to: 0
  1455  000768  0100               	movlb	0	; () banked
  1456  00076A  2BB7               	incf	main@i& (0+255),f,b
  1457  00076C  D7ED               	goto	l3324
  1458  00076E                     l3334:
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;main.c: 216: }
  1462                           ;main.c: 217: mode=3;
  1463  00076E  0E03               	movlw	3
  1464  000770  6E3B               	movwf	_mode,c	;volatile
  1465                           
  1466                           ;main.c: 219: } else {
  1467  000772  D07E               	goto	l3368
  1468  000774                     l3336:
  1469                           
  1470                           ;main.c: 220: fullSpeedBack(&mL,&mR);
  1471  000774  0E00               	movlw	low main@mL
  1472  000776  0100               	movlb	0	; () banked
  1473  000778  6F66               	movwf	fullSpeedBack@mL& (0+255),b
  1474  00077A  0E02               	movlw	high main@mL
  1475  00077C  0100               	movlb	0	; () banked
  1476  00077E  6F67               	movwf	(fullSpeedBack@mL+1)& (0+255),b
  1477  000780  0E09               	movlw	low main@mR
  1478  000782  0100               	movlb	0	; () banked
  1479  000784  6F68               	movwf	fullSpeedBack@mR& (0+255),b
  1480  000786  0E02               	movlw	high main@mR
  1481  000788  0100               	movlb	0	; () banked
  1482  00078A  6F69               	movwf	(fullSpeedBack@mR+1)& (0+255),b
  1483  00078C  ECB5  F00B         	call	_fullSpeedBack	;wreg free
  1484                           
  1485                           ;main.c: 221: delay_tenth_s(5);
  1486  000790  0E05               	movlw	5
  1487  000792  ECD2  F00B         	call	_delay_tenth_s
  1488                           
  1489                           ;main.c: 222: stop(&mL,&mR);
  1490  000796  0E00               	movlw	low main@mL
  1491  000798  0100               	movlb	0	; () banked
  1492  00079A  6F62               	movwf	stop@mL& (0+255),b
  1493  00079C  0E02               	movlw	high main@mL
  1494  00079E  0100               	movlb	0	; () banked
  1495  0007A0  6F63               	movwf	(stop@mL+1)& (0+255),b
  1496  0007A2  0E09               	movlw	low main@mR
  1497  0007A4  0100               	movlb	0	; () banked
  1498  0007A6  6F64               	movwf	stop@mR& (0+255),b
  1499  0007A8  0E02               	movlw	high main@mR
  1500  0007AA  0100               	movlb	0	; () banked
  1501  0007AC  6F65               	movwf	(stop@mR+1)& (0+255),b
  1502  0007AE  EC73  F009         	call	_stop	;wreg free
  1503                           
  1504                           ;main.c: 223: fullSpeedAhead(&mL,&mR);
  1505  0007B2  0E00               	movlw	low main@mL
  1506  0007B4  0100               	movlb	0	; () banked
  1507  0007B6  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1508  0007B8  0E02               	movlw	high main@mL
  1509  0007BA  0100               	movlb	0	; () banked
  1510  0007BC  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1511  0007BE  0E09               	movlw	low main@mR
  1512  0007C0  0100               	movlb	0	; () banked
  1513  0007C2  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1514  0007C4  0E02               	movlw	high main@mR
  1515  0007C6  0100               	movlb	0	; () banked
  1516  0007C8  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1517  0007CA  ECB6  F00A         	call	_fullSpeedAhead	;wreg free
  1518                           
  1519                           ;main.c: 224: }
  1520                           ;main.c: 225: }
  1521                           ;main.c: 226: } else {
  1522  0007CE  D050               	goto	l3368
  1523  0007D0                     l3344:
  1524                           
  1525                           ;main.c: 227: DirectionFound=1;
  1526  0007D0  0E01               	movlw	1
  1527  0007D2  0100               	movlb	0	; () banked
  1528  0007D4  6FB5               	movwf	main@DirectionFound& (0+255),b
  1529                           
  1530                           ;main.c: 228: mode=1;
  1531  0007D6  0E01               	movlw	1
  1532  0007D8  6E3B               	movwf	_mode,c	;volatile
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;main.c: 230: fullSpeedAhead(&mL,&mR);
  1536  0007DA  0E00               	movlw	low main@mL
  1537  0007DC  0100               	movlb	0	; () banked
  1538  0007DE  6F62               	movwf	fullSpeedAhead@mL& (0+255),b
  1539  0007E0  0E02               	movlw	high main@mL
  1540  0007E2  0100               	movlb	0	; () banked
  1541  0007E4  6F63               	movwf	(fullSpeedAhead@mL+1)& (0+255),b
  1542  0007E6  0E09               	movlw	low main@mR
  1543  0007E8  0100               	movlb	0	; () banked
  1544  0007EA  6F64               	movwf	fullSpeedAhead@mR& (0+255),b
  1545  0007EC  0E02               	movlw	high main@mR
  1546  0007EE  0100               	movlb	0	; () banked
  1547  0007F0  6F65               	movwf	(fullSpeedAhead@mR+1)& (0+255),b
  1548  0007F2  ECB6  F00A         	call	_fullSpeedAhead	;wreg free
  1549                           
  1550                           ;main.c: 231: delay_tenth_s(5);
  1551  0007F6  0E05               	movlw	5
  1552  0007F8  ECD2  F00B         	call	_delay_tenth_s
  1553                           
  1554                           ;main.c: 232: MoveType[Move] = 0;
  1555  0007FC  0100               	movlb	0	; () banked
  1556  0007FE  51B6               	movf	main@Move& (0+255),w,b
  1557  000800  0D01               	mullw	1
  1558  000802  0E64               	movlw	low main@MoveType
  1559  000804  24F3               	addwf	prodl,w,c
  1560  000806  6ED9               	movwf	fsr2l,c
  1561  000808  0E01               	movlw	high main@MoveType
  1562  00080A  20F4               	addwfc	prodh,w,c
  1563  00080C  6EDA               	movwf	fsr2h,c
  1564  00080E  0E00               	movlw	0
  1565  000810  6EDF               	movwf	indf2,c
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 233: MoveTime[Move] = 5;
  1569  000812  0100               	movlb	0	; () banked
  1570  000814  51B6               	movf	main@Move& (0+255),w,b
  1571  000816  0D01               	mullw	1
  1572  000818  0E00               	movlw	low main@MoveTime
  1573  00081A  24F3               	addwf	prodl,w,c
  1574  00081C  6ED9               	movwf	fsr2l,c
  1575  00081E  0E01               	movlw	high main@MoveTime
  1576  000820  20F4               	addwfc	prodh,w,c
  1577  000822  6EDA               	movwf	fsr2h,c
  1578  000824  0E05               	movlw	5
  1579  000826                     L2:
  1580  000826  6EDF               	movwf	indf2,c
  1581  000828                     l3354:
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;main.c: 234: Move++;
  1585  000828  0100               	movlb	0	; () banked
  1586  00082A  2BB6               	incf	main@Move& (0+255),f,b
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 235: }
  1590                           ;main.c: 237: break;
  1591  00082C  D021               	goto	l3368
  1592  00082E                     l3356:
  1593                           
  1594                           ;main.c: 242: SetLine(1);
  1595  00082E  0E01               	movlw	1
  1596  000830  EC23  F00C         	call	_SetLine
  1597                           
  1598                           ;main.c: 243: LCD_String("PUT MESSAGE");
  1599  000834  0E2D               	movlw	low STR_8
  1600  000836  6E2A               	movwf	LCD_String@string,c
  1601  000838  0E03               	movlw	high STR_8
  1602  00083A  6E2B               	movwf	LCD_String@string+1,c
  1603  00083C  ECEE  F00A         	call	_LCD_String	;wreg free
  1604                           
  1605                           ;main.c: 244: SetLine(2);
  1606  000840  0E02               	movlw	2
  1607  000842  EC23  F00C         	call	_SetLine
  1608                           
  1609                           ;main.c: 245: LCD_String("Going Home");
  1610  000846  0E45               	movlw	low STR_9
  1611  000848  6E2A               	movwf	LCD_String@string,c
  1612  00084A  0E03               	movlw	high STR_9
  1613  00084C  6E2B               	movwf	LCD_String@string+1,c
  1614  00084E  ECEE  F00A         	call	_LCD_String	;wreg free
  1615                           
  1616                           ;main.c: 246: stop(&mL,&mR);
  1617  000852  0E00               	movlw	low main@mL
  1618  000854  0100               	movlb	0	; () banked
  1619  000856  6F62               	movwf	stop@mL& (0+255),b
  1620  000858  0E02               	movlw	high main@mL
  1621  00085A  0100               	movlb	0	; () banked
  1622  00085C  6F63               	movwf	(stop@mL+1)& (0+255),b
  1623  00085E  0E09               	movlw	low main@mR
  1624  000860  0100               	movlb	0	; () banked
  1625  000862  6F64               	movwf	stop@mR& (0+255),b
  1626  000864  0E02               	movlw	high main@mR
  1627  000866  0100               	movlb	0	; () banked
  1628  000868  6F65               	movwf	(stop@mR+1)& (0+255),b
  1629  00086A  EC73  F009         	call	_stop	;wreg free
  1630  00086E                     l3364:
  1631                           
  1632                           ;main.c: 262: mode=-1;
  1633  00086E  683B               	setf	_mode,c	;volatile
  1634  000870                     l3368:
  1635  000870  503B               	movf	_mode,w,c	;volatile
  1636                           
  1637                           ; Switch size 1, requested type "space"
  1638                           ; Number of cases is 5, Range of values is 0 to 255
  1639                           ; switch strategies available:
  1640                           ; Name         Instructions Cycles
  1641                           ; simple_byte           16     9 (average)
  1642                           ;	Chosen strategy is simple_byte
  1643  000872  0A00               	xorlw	0	; case 0
  1644  000874  B4D8               	btfsc	status,2,c
  1645  000876  D62D               	goto	l3246
  1646  000878  0A01               	xorlw	1	; case 1
  1647  00087A  B4D8               	btfsc	status,2,c
  1648  00087C  D64E               	goto	l3262
  1649  00087E  0A03               	xorlw	3	; case 2
  1650  000880  B4D8               	btfsc	status,2,c
  1651  000882  D706               	goto	l3302
  1652  000884  0A01               	xorlw	1	; case 3
  1653  000886  B4D8               	btfsc	status,2,c
  1654  000888  D7D2               	goto	l3356
  1655  00088A  0AFC               	xorlw	252	; case 255
  1656  00088C  B4D8               	btfsc	status,2,c
  1657  00088E  D5C0               	goto	l3212
  1658  000890  D7EF               	goto	l3368
  1659  000892                     __end_of_main:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           prodh	equ	0xFF4
  1663                           prodl	equ	0xFF3
  1664                           intcon	equ	0xFF2
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           indf1	equ	0xFE7
  1668                           fsr1h	equ	0xFE2
  1669                           fsr1l	equ	0xFE1
  1670                           indf2	equ	0xFDF
  1671                           fsr2h	equ	0xFDA
  1672                           fsr2l	equ	0xFD9
  1673                           status	equ	0xFD8
  1674                           
  1675 ;; *************** function _initRFID *****************
  1676 ;; Defined at:
  1677 ;;		line 5 in file "RFID_Reader.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;		None
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;		None
  1682 ;; Return value:  Size  Location     Type
  1683 ;;		None               void
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1691 ;;      Params:         0       0       0       0
  1692 ;;      Locals:         0       0       0       0
  1693 ;;      Temps:          0       0       0       0
  1694 ;;      Totals:         0       0       0       0
  1695 ;;Total ram usage:        0 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    3
  1698 ;; This function calls:
  1699 ;;		Nothing
  1700 ;; This function is called by:
  1701 ;;		_main
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text1
  1706  00195C                     __ptext1:
  1707                           	opt stack 0
  1708  00195C                     _initRFID:
  1709                           	opt stack 27
  1710                           
  1711                           ;RFID_Reader.c: 6: TRISC = TRISC | 0b11000000;
  1712                           
  1713                           ;incstack = 0
  1714  00195C  5094               	movf	3988,w,c	;volatile
  1715  00195E  09C0               	iorlw	192
  1716  001960  6E94               	movwf	3988,c	;volatile
  1717                           
  1718                           ;RFID_Reader.c: 10: SPBRG=205;
  1719  001962  0ECD               	movlw	205
  1720  001964  6EAF               	movwf	4015,c	;volatile
  1721                           
  1722                           ;RFID_Reader.c: 11: SPBRGH=0;
  1723  001966  0E00               	movlw	0
  1724  001968  6EB0               	movwf	4016,c	;volatile
  1725                           
  1726                           ;RFID_Reader.c: 12: BAUDCONbits.BRG16=1;
  1727  00196A  86AA               	bsf	4010,3,c	;volatile
  1728                           
  1729                           ;RFID_Reader.c: 13: TXSTAbits.BRGH=1;
  1730  00196C  84AC               	bsf	4012,2,c	;volatile
  1731                           
  1732                           ;RFID_Reader.c: 14: RCSTAbits.CREN=1;
  1733  00196E  88AB               	bsf	4011,4,c	;volatile
  1734                           
  1735                           ;RFID_Reader.c: 15: RCSTAbits.SPEN=1;
  1736  001970  8EAB               	bsf	4011,7,c	;volatile
  1737                           
  1738                           ;RFID_Reader.c: 16: TXSTAbits.SYNC=0;
  1739  001972  98AC               	bcf	4012,4,c	;volatile
  1740                           
  1741                           ;RFID_Reader.c: 17: RCSTAbits.RX9=0;
  1742  001974  9CAB               	bcf	4011,6,c	;volatile
  1743  001976  0012               	return		;funcret
  1744  001978                     __end_of_initRFID:
  1745                           	opt stack 0
  1746                           tblptru	equ	0xFF8
  1747                           prodh	equ	0xFF4
  1748                           prodl	equ	0xFF3
  1749                           intcon	equ	0xFF2
  1750                           postinc0	equ	0xFEE
  1751                           wreg	equ	0xFE8
  1752                           indf1	equ	0xFE7
  1753                           fsr1h	equ	0xFE2
  1754                           fsr1l	equ	0xFE1
  1755                           indf2	equ	0xFDF
  1756                           fsr2h	equ	0xFDA
  1757                           fsr2l	equ	0xFD9
  1758                           status	equ	0xFD8
  1759                           
  1760 ;; *************** function _initMotorPWM *****************
  1761 ;; Defined at:
  1762 ;;		line 4 in file "dc_motor.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;		None               void
  1769 ;; Registers used:
  1770 ;;		wreg, status,2
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1776 ;;      Params:         0       0       0       0
  1777 ;;      Locals:         0       0       0       0
  1778 ;;      Temps:          0       0       0       0
  1779 ;;      Totals:         0       0       0       0
  1780 ;;Total ram usage:        0 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    3
  1783 ;; This function calls:
  1784 ;;		Nothing
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           	psect	text2
  1791  001814                     __ptext2:
  1792                           	opt stack 0
  1793  001814                     _initMotorPWM:
  1794                           	opt stack 27
  1795                           
  1796                           ;dc_motor.c: 6: PTCON0 = 0b00000000;
  1797                           
  1798                           ;incstack = 0
  1799  001814  0E00               	movlw	0
  1800  001816  6E7F               	movwf	3967,c	;volatile
  1801                           
  1802                           ;dc_motor.c: 7: PTCON1 = 0b10000000;
  1803  001818  0E80               	movlw	128
  1804  00181A  6E7E               	movwf	3966,c	;volatile
  1805                           
  1806                           ;dc_motor.c: 8: PWMCON0 = 0b01101111;
  1807  00181C  0E6F               	movlw	111
  1808  00181E  6E6F               	movwf	3951,c	;volatile
  1809                           
  1810                           ;dc_motor.c: 9: PWMCON1 = 0x00;
  1811  001820  0E00               	movlw	0
  1812  001822  6E6E               	movwf	3950,c	;volatile
  1813                           
  1814                           ;dc_motor.c: 11: PTPERL = 0b11000111;
  1815  001824  0EC7               	movlw	199
  1816  001826  6E7B               	movwf	3963,c	;volatile
  1817                           
  1818                           ;dc_motor.c: 12: PTPERH = 0b00000000;
  1819  001828  0E00               	movlw	0
  1820  00182A  6E7A               	movwf	3962,c	;volatile
  1821                           
  1822                           ;dc_motor.c: 13: PDC0L = 0<<2;
  1823  00182C  0E00               	movlw	0
  1824  00182E  6E79               	movwf	3961,c	;volatile
  1825                           
  1826                           ;dc_motor.c: 14: PDC0H = 0>>6;
  1827  001830  0E00               	movlw	0
  1828  001832  6E78               	movwf	3960,c	;volatile
  1829                           
  1830                           ;dc_motor.c: 15: PDC1L = 0<<2;
  1831  001834  0E00               	movlw	0
  1832  001836  6E77               	movwf	3959,c	;volatile
  1833                           
  1834                           ;dc_motor.c: 16: PDC1H = 0>>6;
  1835  001838  0E00               	movlw	0
  1836  00183A  6E76               	movwf	3958,c	;volatile
  1837                           
  1838                           ;dc_motor.c: 19: TRISBbits.RB0=0;
  1839  00183C  9093               	bcf	3987,0,c	;volatile
  1840                           
  1841                           ;dc_motor.c: 20: TRISBbits.RB1=0;
  1842  00183E  9293               	bcf	3987,1,c	;volatile
  1843                           
  1844                           ;dc_motor.c: 21: TRISBbits.RB2=0;
  1845  001840  9493               	bcf	3987,2,c	;volatile
  1846                           
  1847                           ;dc_motor.c: 22: TRISBbits.RB3=0;
  1848  001842  9693               	bcf	3987,3,c	;volatile
  1849  001844  0012               	return		;funcret
  1850  001846                     __end_of_initMotorPWM:
  1851                           	opt stack 0
  1852                           tblptru	equ	0xFF8
  1853                           prodh	equ	0xFF4
  1854                           prodl	equ	0xFF3
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           indf1	equ	0xFE7
  1859                           fsr1h	equ	0xFE2
  1860                           fsr1l	equ	0xFE1
  1861                           indf2	equ	0xFDF
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _initLCD *****************
  1867 ;; Defined at:
  1868 ;;		line 38 in file "LCD.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;		None               void
  1875 ;; Registers used:
  1876 ;;		wreg, status,2, status,0, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1882 ;;      Params:         0       0       0       0
  1883 ;;      Locals:         0       0       0       0
  1884 ;;      Temps:          1       0       0       0
  1885 ;;      Totals:         1       0       0       0
  1886 ;;Total ram usage:        1 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    6
  1889 ;; This function calls:
  1890 ;;		_LCDout
  1891 ;;		_SendLCD
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           	psect	text3
  1898  001176                     __ptext3:
  1899                           	opt stack 0
  1900  001176                     _initLCD:
  1901                           	opt stack 24
  1902                           
  1903                           ;LCD.c: 44: TRISAbits.RA6=0;
  1904                           
  1905                           ;incstack = 0
  1906  001176  9C92               	bcf	3986,6,c	;volatile
  1907                           
  1908                           ;LCD.c: 45: TRISCbits.RC0=0;
  1909  001178  9094               	bcf	3988,0,c	;volatile
  1910                           
  1911                           ;LCD.c: 46: TRISCbits.RC1=0;
  1912  00117A  9294               	bcf	3988,1,c	;volatile
  1913                           
  1914                           ;LCD.c: 47: TRISCbits.RC2=0;
  1915  00117C  9494               	bcf	3988,2,c	;volatile
  1916                           
  1917                           ;LCD.c: 48: TRISDbits.RD0=0;
  1918  00117E  9095               	bcf	3989,0,c	;volatile
  1919                           
  1920                           ;LCD.c: 49: TRISDbits.RD1=0;
  1921  001180  9295               	bcf	3989,1,c	;volatile
  1922                           
  1923                           ;LCD.c: 51: _delay((unsigned long)((15)*(8000000/4000.0)));
  1924  001182  0E27               	movlw	39
  1925  001184  6E2A               	movwf	??_initLCD& (0+255),c
  1926  001186  0EF5               	movlw	245
  1927  001188                     u2857:
  1928  001188  2EE8               	decfsz	wreg,f,c
  1929  00118A  D7FE               	goto	u2857
  1930  00118C  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1931  00118E  D7FC               	goto	u2857
  1932  001190  F000               	nop	
  1933                           
  1934                           ;LCD.c: 52: LCDout(0b0011);
  1935  001192  0E03               	movlw	3
  1936  001194  EC58  F008         	call	_LCDout
  1937                           
  1938                           ;LCD.c: 53: _delay((unsigned long)((5)*(8000000/4000.0)));
  1939  001198  0E0D               	movlw	13
  1940  00119A  6E2A               	movwf	??_initLCD& (0+255),c
  1941  00119C  0EFC               	movlw	252
  1942  00119E                     u2867:
  1943  00119E  2EE8               	decfsz	wreg,f,c
  1944  0011A0  D7FE               	goto	u2867
  1945  0011A2  2E2A               	decfsz	??_initLCD& (0+255),f,c
  1946  0011A4  D7FC               	goto	u2867
  1947                           
  1948                           ;LCD.c: 54: LCDout(0b0011);
  1949  0011A6  0E03               	movlw	3
  1950  0011A8  EC58  F008         	call	_LCDout
  1951                           
  1952                           ;LCD.c: 55: _delay((unsigned long)((200)*(8000000/4000000.0)));
  1953  0011AC  0E85               	movlw	133
  1954  0011AE                     u2877:
  1955  0011AE  2EE8               	decfsz	wreg,f,c
  1956  0011B0  D7FE               	goto	u2877
  1957  0011B2  F000               	nop	
  1958                           
  1959                           ;LCD.c: 56: LCDout(0b0011);
  1960  0011B4  0E03               	movlw	3
  1961  0011B6  EC58  F008         	call	_LCDout
  1962                           
  1963                           ;LCD.c: 57: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1964  0011BA  0E21               	movlw	33
  1965  0011BC                     u2887:
  1966  0011BC  2EE8               	decfsz	wreg,f,c
  1967  0011BE  D7FE               	goto	u2887
  1968  0011C0  F000               	nop	
  1969                           
  1970                           ;LCD.c: 58: LCDout(0b0010);
  1971  0011C2  0E02               	movlw	2
  1972  0011C4  EC58  F008         	call	_LCDout
  1973                           
  1974                           ;LCD.c: 59: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1975  0011C8  0E21               	movlw	33
  1976  0011CA                     u2897:
  1977  0011CA  2EE8               	decfsz	wreg,f,c
  1978  0011CC  D7FE               	goto	u2897
  1979  0011CE  F000               	nop	
  1980                           
  1981                           ;LCD.c: 62: SendLCD(0b00101000,0);
  1982  0011D0  0E00               	movlw	0
  1983  0011D2  6E28               	movwf	SendLCD@type,c
  1984  0011D4  0E28               	movlw	40
  1985  0011D6  EC3B  F00C         	call	_SendLCD
  1986                           
  1987                           ;LCD.c: 63: _delay((unsigned long)((50)*(8000000/4000000.0)));
  1988  0011DA  0E21               	movlw	33
  1989  0011DC                     u2907:
  1990  0011DC  2EE8               	decfsz	wreg,f,c
  1991  0011DE  D7FE               	goto	u2907
  1992  0011E0  F000               	nop	
  1993                           
  1994                           ;LCD.c: 64: SendLCD(0b00001000,0);
  1995  0011E2  0E00               	movlw	0
  1996  0011E4  6E28               	movwf	SendLCD@type,c
  1997  0011E6  0E08               	movlw	8
  1998  0011E8  EC3B  F00C         	call	_SendLCD
  1999                           
  2000                           ;LCD.c: 65: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2001  0011EC  0E21               	movlw	33
  2002  0011EE                     u2917:
  2003  0011EE  2EE8               	decfsz	wreg,f,c
  2004  0011F0  D7FE               	goto	u2917
  2005  0011F2  F000               	nop	
  2006                           
  2007                           ;LCD.c: 66: SendLCD(0b00000001,0);
  2008  0011F4  0E00               	movlw	0
  2009  0011F6  6E28               	movwf	SendLCD@type,c
  2010  0011F8  0E01               	movlw	1
  2011  0011FA  EC3B  F00C         	call	_SendLCD
  2012                           
  2013                           ;LCD.c: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2014  0011FE  0E0D               	movlw	13
  2015  001200  6E2A               	movwf	??_initLCD& (0+255),c
  2016  001202  0EFC               	movlw	252
  2017  001204                     u2927:
  2018  001204  2EE8               	decfsz	wreg,f,c
  2019  001206  D7FE               	goto	u2927
  2020  001208  2E2A               	decfsz	??_initLCD& (0+255),f,c
  2021  00120A  D7FC               	goto	u2927
  2022                           
  2023                           ;LCD.c: 68: SendLCD(0b00000110,0);
  2024  00120C  0E00               	movlw	0
  2025  00120E  6E28               	movwf	SendLCD@type,c
  2026  001210  0E06               	movlw	6
  2027  001212  EC3B  F00C         	call	_SendLCD
  2028                           
  2029                           ;LCD.c: 69: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2030  001216  0E21               	movlw	33
  2031  001218                     u2937:
  2032  001218  2EE8               	decfsz	wreg,f,c
  2033  00121A  D7FE               	goto	u2937
  2034  00121C  F000               	nop	
  2035                           
  2036                           ;LCD.c: 70: SendLCD(0b00001100,0);
  2037  00121E  0E00               	movlw	0
  2038  001220  6E28               	movwf	SendLCD@type,c
  2039  001222  0E0C               	movlw	12
  2040  001224  EC3B  F00C         	call	_SendLCD
  2041                           
  2042                           ;LCD.c: 71: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2043  001228  0E21               	movlw	33
  2044  00122A                     u2947:
  2045  00122A  2EE8               	decfsz	wreg,f,c
  2046  00122C  D7FE               	goto	u2947
  2047  00122E  F000               	nop	
  2048  001230  0012               	return		;funcret
  2049  001232                     __end_of_initLCD:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           prodh	equ	0xFF4
  2053                           prodl	equ	0xFF3
  2054                           intcon	equ	0xFF2
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           indf1	equ	0xFE7
  2058                           fsr1h	equ	0xFE2
  2059                           fsr1l	equ	0xFE1
  2060                           indf2	equ	0xFDF
  2061                           fsr2h	equ	0xFDA
  2062                           fsr2l	equ	0xFD9
  2063                           status	equ	0xFD8
  2064                           
  2065 ;; *************** function _initIR *****************
  2066 ;; Defined at:
  2067 ;;		line 30 in file "IR_Reading.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;		None
  2072 ;; Return value:  Size  Location     Type
  2073 ;;		None               void
  2074 ;; Registers used:
  2075 ;;		wreg, status,2
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2081 ;;      Params:         0       0       0       0
  2082 ;;      Locals:         0       0       0       0
  2083 ;;      Temps:          0       0       0       0
  2084 ;;      Totals:         0       0       0       0
  2085 ;;Total ram usage:        0 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    3
  2088 ;; This function calls:
  2089 ;;		Nothing
  2090 ;; This function is called by:
  2091 ;;		_main
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text4
  2096  00191C                     __ptext4:
  2097                           	opt stack 0
  2098  00191C                     _initIR:
  2099                           	opt stack 27
  2100                           
  2101                           ;IR_Reading.c: 36: LATAbits.LA2=0;
  2102                           
  2103                           ;incstack = 0
  2104  00191C  9489               	bcf	3977,2,c	;volatile
  2105                           
  2106                           ;IR_Reading.c: 37: LATAbits.LA3=0;
  2107  00191E  9689               	bcf	3977,3,c	;volatile
  2108                           
  2109                           ;IR_Reading.c: 39: TRISAbits.RA2=1;
  2110  001920  8492               	bsf	3986,2,c	;volatile
  2111                           
  2112                           ;IR_Reading.c: 40: TRISAbits.RA3=1;
  2113  001922  8692               	bsf	3986,3,c	;volatile
  2114                           
  2115                           ;IR_Reading.c: 42: ANSEL0bits.ANS2=0;
  2116  001924  94B8               	bcf	4024,2,c	;volatile
  2117                           
  2118                           ;IR_Reading.c: 43: ANSEL0bits.ANS3=0;
  2119  001926  96B8               	bcf	4024,3,c	;volatile
  2120                           
  2121                           ;IR_Reading.c: 46: ANSEL0bits.ANS6=0;
  2122  001928  9CB8               	bcf	4024,6,c	;volatile
  2123                           
  2124                           ;IR_Reading.c: 47: ANSEL0bits.ANS7=0;
  2125  00192A  9EB8               	bcf	4024,7,c	;volatile
  2126                           
  2127                           ;IR_Reading.c: 52: CAP1CON=0b00000110;
  2128  00192C  0E06               	movlw	6
  2129  00192E  6E63               	movwf	3939,c	;volatile
  2130                           
  2131                           ;IR_Reading.c: 53: CAP2CON=0b00000110;
  2132  001930  0E06               	movlw	6
  2133  001932  6E62               	movwf	3938,c	;volatile
  2134                           
  2135                           ;IR_Reading.c: 56: TRISEbits.RE0=0;
  2136  001934  9096               	bcf	3990,0,c	;volatile
  2137                           
  2138                           ;IR_Reading.c: 59: TRISEbits.RE1=0;
  2139  001936  9296               	bcf	3990,1,c	;volatile
  2140                           
  2141                           ;IR_Reading.c: 69: T5CON=0b01011001;
  2142  001938  0E59               	movlw	89
  2143  00193A  6EB7               	movwf	4023,c	;volatile
  2144  00193C  0012               	return		;funcret
  2145  00193E                     __end_of_initIR:
  2146                           	opt stack 0
  2147                           tblptru	equ	0xFF8
  2148                           prodh	equ	0xFF4
  2149                           prodl	equ	0xFF3
  2150                           intcon	equ	0xFF2
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           indf1	equ	0xFE7
  2154                           fsr1h	equ	0xFE2
  2155                           fsr1l	equ	0xFE1
  2156                           indf2	equ	0xFDF
  2157                           fsr2h	equ	0xFDA
  2158                           fsr2l	equ	0xFD9
  2159                           status	equ	0xFD8
  2160                           
  2161 ;; *************** function _fullSpeedBack *****************
  2162 ;; Defined at:
  2163 ;;		line 125 in file "dc_motor.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  2166 ;;		 -> main@mL(9), 
  2167 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  2168 ;;		 -> main@mR(9), 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;		None               void
  2173 ;; Registers used:
  2174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2180 ;;      Params:         0       4       0       0
  2181 ;;      Locals:         0       0       0       0
  2182 ;;      Temps:          0       0       0       0
  2183 ;;      Totals:         0       4       0       0
  2184 ;;Total ram usage:        4 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    6
  2187 ;; This function calls:
  2188 ;;		_fullSpeedAhead
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text5
  2195  00176A                     __ptext5:
  2196                           	opt stack 0
  2197  00176A                     _fullSpeedBack:
  2198                           	opt stack 24
  2199                           
  2200                           ;dc_motor.c: 128: mL->direction=0;
  2201                           
  2202                           ;incstack = 0
  2203  00176A  0100               	movlb	0	; () banked
  2204  00176C  EE20 F001          	lfsr	2,1
  2205  001770  5166               	movf	fullSpeedBack@mL& (0+255),w,b
  2206  001772  26D9               	addwf	fsr2l,f,c
  2207  001774  5167               	movf	(fullSpeedBack@mL+1)& (0+255),w,b
  2208  001776  22DA               	addwfc	fsr2h,f,c
  2209  001778  0E00               	movlw	0
  2210  00177A  6EDF               	movwf	indf2,c
  2211                           
  2212                           ;dc_motor.c: 129: mR->direction=0;
  2213  00177C  0100               	movlb	0	; () banked
  2214  00177E  EE20 F001          	lfsr	2,1
  2215  001782  5168               	movf	fullSpeedBack@mR& (0+255),w,b
  2216  001784  26D9               	addwf	fsr2l,f,c
  2217  001786  5169               	movf	(fullSpeedBack@mR+1)& (0+255),w,b
  2218  001788  22DA               	addwfc	fsr2h,f,c
  2219  00178A  0E00               	movlw	0
  2220  00178C  6EDF               	movwf	indf2,c
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;dc_motor.c: 130: fullSpeedAhead(mL, mR);
  2224  00178E  C066  F062         	movff	fullSpeedBack@mL,fullSpeedAhead@mL
  2225  001792  C067  F063         	movff	fullSpeedBack@mL+1,fullSpeedAhead@mL+1
  2226  001796  C068  F064         	movff	fullSpeedBack@mR,fullSpeedAhead@mR
  2227  00179A  C069  F065         	movff	fullSpeedBack@mR+1,fullSpeedAhead@mR+1
  2228  00179E  ECB6  F00A         	call	_fullSpeedAhead	;wreg free
  2229  0017A2  0012               	return		;funcret
  2230  0017A4                     __end_of_fullSpeedBack:
  2231                           	opt stack 0
  2232                           tblptru	equ	0xFF8
  2233                           prodh	equ	0xFF4
  2234                           prodl	equ	0xFF3
  2235                           intcon	equ	0xFF2
  2236                           postinc0	equ	0xFEE
  2237                           wreg	equ	0xFE8
  2238                           indf1	equ	0xFE7
  2239                           fsr1h	equ	0xFE2
  2240                           fsr1l	equ	0xFE1
  2241                           indf2	equ	0xFDF
  2242                           fsr2h	equ	0xFDA
  2243                           fsr2l	equ	0xFD9
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _enableSensor *****************
  2247 ;; Defined at:
  2248 ;;		line 106 in file "IR_Reading.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  sensor          1    wreg     unsigned char 
  2251 ;;  status          1   35[COMRAM] unsigned char 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;  sensor          1   36[COMRAM] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;		None               void
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, status,0
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2263 ;;      Params:         1       0       0       0
  2264 ;;      Locals:         1       0       0       0
  2265 ;;      Temps:          0       0       0       0
  2266 ;;      Totals:         2       0       0       0
  2267 ;;Total ram usage:        2 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    3
  2270 ;; This function calls:
  2271 ;;		Nothing
  2272 ;; This function is called by:
  2273 ;;		_main
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text6
  2278  0018D0                     __ptext6:
  2279                           	opt stack 0
  2280  0018D0                     _enableSensor:
  2281                           	opt stack 27
  2282                           
  2283                           ;incstack = 0
  2284                           ;enableSensor@sensor stored from wreg
  2285  0018D0  6E25               	movwf	enableSensor@sensor,c
  2286                           
  2287                           ;IR_Reading.c: 108: if (sensor==0){
  2288  0018D2  5025               	movf	enableSensor@sensor,w,c
  2289  0018D4  A4D8               	btfss	status,2,c
  2290  0018D6  D006               	goto	l2322
  2291                           
  2292                           ;IR_Reading.c: 109: LATEbits.LATE0 = status;
  2293  0018D8  B024               	btfsc	enableSensor@status,0,c
  2294  0018DA  D002               	bra	u1775
  2295  0018DC  908D               	bcf	3981,0,c	;volatile
  2296  0018DE  D001               	bra	u1776
  2297  0018E0                     u1775:
  2298  0018E0  808D               	bsf	3981,0,c	;volatile
  2299  0018E2                     u1776:
  2300                           
  2301                           ;IR_Reading.c: 110: } else if (sensor==1){
  2302  0018E2  0012               	return	
  2303  0018E4                     l2322:
  2304  0018E4  0425               	decf	enableSensor@sensor,w,c
  2305  0018E6  A4D8               	btfss	status,2,c
  2306  0018E8  0012               	return	
  2307                           
  2308                           ;IR_Reading.c: 111: LATEbits.LATE1 = status;
  2309  0018EA  B024               	btfsc	enableSensor@status,0,c
  2310  0018EC  D002               	bra	u1795
  2311  0018EE  928D               	bcf	3981,1,c	;volatile
  2312  0018F0  D001               	bra	u1796
  2313  0018F2                     u1795:
  2314  0018F2  828D               	bsf	3981,1,c	;volatile
  2315  0018F4                     u1796:
  2316  0018F4  0012               	return	
  2317  0018F6                     __end_of_enableSensor:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           prodh	equ	0xFF4
  2321                           prodl	equ	0xFF3
  2322                           intcon	equ	0xFF2
  2323                           postinc0	equ	0xFEE
  2324                           wreg	equ	0xFE8
  2325                           indf1	equ	0xFE7
  2326                           fsr1h	equ	0xFE2
  2327                           fsr1l	equ	0xFE1
  2328                           indf2	equ	0xFDF
  2329                           fsr2h	equ	0xFDA
  2330                           fsr2l	equ	0xFD9
  2331                           status	equ	0xFD8
  2332                           
  2333 ;; *************** function _VerifySignal *****************
  2334 ;; Defined at:
  2335 ;;		line 55 in file "RFID_Reader.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;  Signal          2   35[COMRAM] PTR unsigned char 
  2338 ;;		 -> ReceivedString(16), 
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  hexByte         2   44[COMRAM] unsigned int 
  2341 ;;  i               1   46[COMRAM] unsigned char 
  2342 ;;  checksum        1   43[COMRAM] unsigned char 
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      unsigned char 
  2345 ;; Registers used:
  2346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2352 ;;      Params:         2       0       0       0
  2353 ;;      Locals:         4       0       0       0
  2354 ;;      Temps:          6       0       0       0
  2355 ;;      Totals:        12       0       0       0
  2356 ;;Total ram usage:       12 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; Hardware stack levels required when called:    3
  2359 ;; This function calls:
  2360 ;;		Nothing
  2361 ;; This function is called by:
  2362 ;;		_main
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text7
  2367  001232                     __ptext7:
  2368                           	opt stack 0
  2369  001232                     _VerifySignal:
  2370                           	opt stack 27
  2371                           
  2372                           ;RFID_Reader.c: 56: unsigned char checksum=0;
  2373                           
  2374                           ;incstack = 0
  2375  001232  0E00               	movlw	0
  2376  001234  6E2C               	movwf	VerifySignal@checksum,c
  2377                           
  2378                           ;RFID_Reader.c: 57: unsigned int hexByte=0;
  2379  001236  0E00               	movlw	0
  2380  001238  6E2E               	movwf	VerifySignal@hexByte+1,c
  2381  00123A  0E00               	movlw	0
  2382  00123C  6E2D               	movwf	VerifySignal@hexByte,c
  2383                           
  2384                           ;RFID_Reader.c: 58: unsigned char i=0;
  2385  00123E  0E00               	movlw	0
  2386  001240  6E2F               	movwf	VerifySignal@i,c
  2387                           
  2388                           ;RFID_Reader.c: 61: hexByte = (Signal[3]<<8) + Signal[4];
  2389  001242  EE20 F004          	lfsr	2,4
  2390  001246  5024               	movf	VerifySignal@Signal,w,c
  2391  001248  26D9               	addwf	fsr2l,f,c
  2392  00124A  5025               	movf	VerifySignal@Signal+1,w,c
  2393  00124C  22DA               	addwfc	fsr2h,f,c
  2394  00124E  50DF               	movf	indf2,w,c
  2395  001250  6E26               	movwf	??_VerifySignal& (0+255),c
  2396  001252  EE20 F003          	lfsr	2,3
  2397  001256  5024               	movf	VerifySignal@Signal,w,c
  2398  001258  26D9               	addwf	fsr2l,f,c
  2399  00125A  5025               	movf	VerifySignal@Signal+1,w,c
  2400  00125C  22DA               	addwfc	fsr2h,f,c
  2401  00125E  50DF               	movf	indf2,w,c
  2402  001260  6E27               	movwf	(??_VerifySignal+1)& (0+255),c
  2403  001262  5027               	movf	??_VerifySignal+1,w,c
  2404  001264  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2405  001266  6A28               	clrf	(??_VerifySignal+2)& (0+255),c
  2406  001268  5026               	movf	??_VerifySignal,w,c
  2407  00126A  2428               	addwf	??_VerifySignal+2,w,c
  2408  00126C  6E2D               	movwf	VerifySignal@hexByte,c
  2409  00126E  0E00               	movlw	0
  2410  001270  2029               	addwfc	??_VerifySignal+3,w,c
  2411  001272  6E2E               	movwf	VerifySignal@hexByte+1,c
  2412                           
  2413                           ;RFID_Reader.c: 62: checksum = ((Signal[1]<<8) + Signal[2]) ^ hexByte;
  2414  001274  EE20 F002          	lfsr	2,2
  2415  001278  5024               	movf	VerifySignal@Signal,w,c
  2416  00127A  26D9               	addwf	fsr2l,f,c
  2417  00127C  5025               	movf	VerifySignal@Signal+1,w,c
  2418  00127E  22DA               	addwfc	fsr2h,f,c
  2419  001280  50DF               	movf	indf2,w,c
  2420  001282  182D               	xorwf	VerifySignal@hexByte,w,c
  2421  001284  6E2C               	movwf	VerifySignal@checksum,c
  2422                           
  2423                           ;RFID_Reader.c: 65: for (i=5; i<10; i+=2){
  2424  001286  0E05               	movlw	5
  2425  001288  6E2F               	movwf	VerifySignal@i,c
  2426  00128A                     l2528:
  2427  00128A  0E09               	movlw	9
  2428  00128C  642F               	cpfsgt	VerifySignal@i,c
  2429  00128E  D001               	goto	l2532
  2430  001290  D028               	goto	l2540
  2431  001292                     l2532:
  2432                           
  2433                           ;RFID_Reader.c: 66: hexByte = (Signal[i]<<8) + Signal[i+1];
  2434  001292  502F               	movf	VerifySignal@i,w,c
  2435  001294  6E26               	movwf	??_VerifySignal& (0+255),c
  2436  001296  6A27               	clrf	(??_VerifySignal+1)& (0+255),c
  2437  001298  0E01               	movlw	1
  2438  00129A  2626               	addwf	??_VerifySignal,f,c
  2439  00129C  0E00               	movlw	0
  2440  00129E  2227               	addwfc	??_VerifySignal+1,f,c
  2441  0012A0  5026               	movf	??_VerifySignal,w,c
  2442  0012A2  2424               	addwf	VerifySignal@Signal,w,c
  2443  0012A4  6ED9               	movwf	fsr2l,c
  2444  0012A6  5027               	movf	??_VerifySignal+1,w,c
  2445  0012A8  2025               	addwfc	VerifySignal@Signal+1,w,c
  2446  0012AA  6EDA               	movwf	fsr2h,c
  2447  0012AC  50DF               	movf	indf2,w,c
  2448  0012AE  6E28               	movwf	(??_VerifySignal+2)& (0+255),c
  2449  0012B0  502F               	movf	VerifySignal@i,w,c
  2450  0012B2  0D01               	mullw	1
  2451  0012B4  50F3               	movf	prodl,w,c
  2452  0012B6  2424               	addwf	VerifySignal@Signal,w,c
  2453  0012B8  6ED9               	movwf	fsr2l,c
  2454  0012BA  50F4               	movf	prodh,w,c
  2455  0012BC  2025               	addwfc	VerifySignal@Signal+1,w,c
  2456  0012BE  6EDA               	movwf	fsr2h,c
  2457  0012C0  50DF               	movf	indf2,w,c
  2458  0012C2  6E29               	movwf	(??_VerifySignal+3)& (0+255),c
  2459  0012C4  5029               	movf	??_VerifySignal+3,w,c
  2460  0012C6  6E2B               	movwf	(??_VerifySignal+5)& (0+255),c
  2461  0012C8  6A2A               	clrf	(??_VerifySignal+4)& (0+255),c
  2462  0012CA  5028               	movf	??_VerifySignal+2,w,c
  2463  0012CC  242A               	addwf	??_VerifySignal+4,w,c
  2464  0012CE  6E2D               	movwf	VerifySignal@hexByte,c
  2465  0012D0  0E00               	movlw	0
  2466  0012D2  202B               	addwfc	??_VerifySignal+5,w,c
  2467  0012D4  6E2E               	movwf	VerifySignal@hexByte+1,c
  2468                           
  2469                           ;RFID_Reader.c: 67: checksum = checksum ^ hexByte;
  2470  0012D6  502C               	movf	VerifySignal@checksum,w,c
  2471  0012D8  182D               	xorwf	VerifySignal@hexByte,w,c
  2472  0012DA  6E2C               	movwf	VerifySignal@checksum,c
  2473  0012DC  0E02               	movlw	2
  2474  0012DE  262F               	addwf	VerifySignal@i,f,c
  2475  0012E0  D7D4               	goto	l2528
  2476  0012E2                     l2540:
  2477                           
  2478                           ;RFID_Reader.c: 68: }
  2479                           ;RFID_Reader.c: 71: return 1;
  2480  0012E2  0E01               	movlw	1
  2481  0012E4  0012               	return	
  2482  0012E6                     __end_of_VerifySignal:
  2483                           	opt stack 0
  2484                           tblptru	equ	0xFF8
  2485                           prodh	equ	0xFF4
  2486                           prodl	equ	0xFF3
  2487                           intcon	equ	0xFF2
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           indf1	equ	0xFE7
  2491                           fsr1h	equ	0xFE2
  2492                           fsr1l	equ	0xFE1
  2493                           indf2	equ	0xFDF
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _ScanWithRange *****************
  2499 ;; Defined at:
  2500 ;;		line 77 in file "Movement.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  2503 ;;		 -> main@mL(9), 
  2504 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  2505 ;;		 -> main@mR(9), 
  2506 ;;  milliseconds    2   17[BANK0 ] int 
  2507 ;;  TurnDirectio    1   19[BANK0 ] unsigned char 
  2508 ;;  MoveTimeEntr    2   20[BANK0 ] PTR unsigned char 
  2509 ;;		 -> main@MoveTime(100), 
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  buf            40   24[BANK0 ] unsigned char [40]
  2512 ;;  SensorResult    4   69[BANK0 ] unsigned int [2]
  2513 ;;  n               2   73[BANK0 ] unsigned int 
  2514 ;;  DirectionFou    2   66[BANK0 ] const unsigned int 
  2515 ;;  i               2   64[BANK0 ] unsigned int 
  2516 ;;  RightFlag       1   76[BANK0 ] unsigned char 
  2517 ;;  LeftFlag        1   75[BANK0 ] unsigned char 
  2518 ;;  FlagCounter     1   68[BANK0 ] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      unsigned char 
  2521 ;; Registers used:
  2522 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2528 ;;      Params:         0       9       0       0
  2529 ;;      Locals:         0      53       0       0
  2530 ;;      Temps:          0       2       0       0
  2531 ;;      Totals:         0      64       0       0
  2532 ;;Total ram usage:       64 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    7
  2535 ;; This function calls:
  2536 ;;		_LCD_String
  2537 ;;		_SendLCD
  2538 ;;		_SetLine
  2539 ;;		_delay_tenth_s
  2540 ;;		_grabLeftIR
  2541 ;;		_grabRightIR
  2542 ;;		_sprintf
  2543 ;;		_stop
  2544 ;;		_turnLeft
  2545 ;;		_turnRight
  2546 ;; This function is called by:
  2547 ;;		_main
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text8
  2552  000B98                     __ptext8:
  2553                           	opt stack 0
  2554  000B98                     _ScanWithRange:
  2555                           	opt stack 23
  2556                           
  2557                           ;Movement.c: 80: unsigned int SensorResult[2]={0,0};
  2558                           
  2559                           ;incstack = 0
  2560  000B98  C0BC  F0A5         	movff	ScanWithRange@F3889,ScanWithRange@SensorResult
  2561  000B9C  C0BD  F0A6         	movff	ScanWithRange@F3889+1,ScanWithRange@SensorResult+1
  2562  000BA0  C0BE  F0A7         	movff	ScanWithRange@F3889+2,ScanWithRange@SensorResult+2
  2563  000BA4  C0BF  F0A8         	movff	ScanWithRange@F3889+3,ScanWithRange@SensorResult+3
  2564                           
  2565                           ;Movement.c: 81: unsigned char LeftFlag=0;
  2566  000BA8  0E00               	movlw	0
  2567  000BAA  0100               	movlb	0	; () banked
  2568  000BAC  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2569                           
  2570                           ;Movement.c: 82: unsigned char RightFlag=0;
  2571  000BAE  0E00               	movlw	0
  2572  000BB0  0100               	movlb	0	; () banked
  2573  000BB2  6FAC               	movwf	ScanWithRange@RightFlag& (0+255),b
  2574                           
  2575                           ;Movement.c: 83: char buf[40];
  2576                           ;Movement.c: 84: unsigned int i=0;
  2577  000BB4  0E00               	movlw	0
  2578  000BB6  0100               	movlb	0	; () banked
  2579  000BB8  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2580  000BBA  0E00               	movlw	0
  2581  000BBC  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2582                           
  2583                           ;Movement.c: 85: unsigned int n=0;
  2584  000BBE  0E00               	movlw	0
  2585  000BC0  0100               	movlb	0	; () banked
  2586  000BC2  6FAA               	movwf	(ScanWithRange@n+1)& (0+255),b
  2587  000BC4  0E00               	movlw	0
  2588  000BC6  6FA9               	movwf	ScanWithRange@n& (0+255),b
  2589                           
  2590                           ;Movement.c: 86: unsigned char FlagCounter=0;
  2591  000BC8  0E00               	movlw	0
  2592  000BCA  0100               	movlb	0	; () banked
  2593  000BCC  6FA4               	movwf	ScanWithRange@FlagCounter& (0+255),b
  2594                           
  2595                           ;Movement.c: 89: const unsigned int DirectionFoundThreshold=4000;
  2596  000BCE  0E0F               	movlw	15
  2597  000BD0  0100               	movlb	0	; () banked
  2598  000BD2  6FA3               	movwf	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),b
  2599  000BD4  0EA0               	movlw	160
  2600  000BD6  6FA2               	movwf	ScanWithRange@DirectionFoundThreshold& (0+255),b
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;Movement.c: 98: turnRight(mL,mR);
  2604  000BD8  C06D  F066         	movff	ScanWithRange@mL,turnRight@mL
  2605  000BDC  C06E  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2606  000BE0  C06F  F068         	movff	ScanWithRange@mR,turnRight@mR
  2607  000BE4  C070  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2608  000BE8  EC46  F00B         	call	_turnRight	;wreg free
  2609                           
  2610                           ;Movement.c: 99: delay_tenth_s(5);
  2611  000BEC  0E05               	movlw	5
  2612  000BEE  ECD2  F00B         	call	_delay_tenth_s
  2613                           
  2614                           ;Movement.c: 100: stop(mL,mR);
  2615  000BF2  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2616  000BF6  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2617  000BFA  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2618  000BFE  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2619  000C02  EC73  F009         	call	_stop	;wreg free
  2620                           
  2621                           ;Movement.c: 103: TurnDirection=0;
  2622  000C06  0E00               	movlw	0
  2623  000C08  0100               	movlb	0	; () banked
  2624  000C0A  6F73               	movwf	ScanWithRange@TurnDirection& (0+255),b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;Movement.c: 104: for (i=1; i<=milliseconds; i++) {
  2628  000C0C  0E00               	movlw	0
  2629  000C0E  0100               	movlb	0	; () banked
  2630  000C10  6FA1               	movwf	(ScanWithRange@i+1)& (0+255),b
  2631  000C12  0E01               	movlw	1
  2632  000C14  6FA0               	movwf	ScanWithRange@i& (0+255),b
  2633  000C16  D0D1               	goto	l3134
  2634  000C18                     l3070:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;Movement.c: 107: SensorResult[0]=grabLeftIR();
  2638  000C18  EC7D  F00A         	call	_grabLeftIR	;wreg free
  2639  000C1C  C024  F0A5         	movff	?_grabLeftIR,ScanWithRange@SensorResult
  2640  000C20  C025  F0A6         	movff	?_grabLeftIR+1,ScanWithRange@SensorResult+1
  2641                           
  2642                           ;Movement.c: 108: SensorResult[1]=grabRightIR();
  2643  000C24  EC44  F00A         	call	_grabRightIR	;wreg free
  2644  000C28  C024  F0A7         	movff	?_grabRightIR,ScanWithRange@SensorResult+2
  2645  000C2C  C025  F0A8         	movff	?_grabRightIR+1,ScanWithRange@SensorResult+3
  2646                           
  2647                           ;Movement.c: 112: CAP1BUFH=0;
  2648  000C30  0E00               	movlw	0
  2649  000C32  6E69               	movwf	3945,c	;volatile
  2650                           
  2651                           ;Movement.c: 113: CAP1BUFL=0;
  2652  000C34  0E00               	movlw	0
  2653  000C36  6E68               	movwf	3944,c	;volatile
  2654                           
  2655                           ;Movement.c: 114: CAP2BUFH=0;
  2656  000C38  0E00               	movlw	0
  2657  000C3A  6E67               	movwf	3943,c	;volatile
  2658                           
  2659                           ;Movement.c: 115: CAP2BUFL=0;
  2660  000C3C  0E00               	movlw	0
  2661  000C3E  6E66               	movwf	3942,c	;volatile
  2662                           
  2663                           ;Movement.c: 118: SendLCD(0b00000001,0);
  2664  000C40  0E00               	movlw	0
  2665  000C42  6E28               	movwf	SendLCD@type,c
  2666  000C44  0E01               	movlw	1
  2667  000C46  EC3B  F00C         	call	_SendLCD
  2668                           
  2669                           ;Movement.c: 119: _delay((unsigned long)((50)*(8000000/4000000.0)));
  2670  000C4A  0E21               	movlw	33
  2671  000C4C                     u2957:
  2672  000C4C  2EE8               	decfsz	wreg,f,c
  2673  000C4E  D7FE               	goto	u2957
  2674  000C50  F000               	nop	
  2675                           
  2676                           ;Movement.c: 120: SendLCD(0b00000010,0);
  2677  000C52  0E00               	movlw	0
  2678  000C54  6E28               	movwf	SendLCD@type,c
  2679  000C56  0E02               	movlw	2
  2680  000C58  EC3B  F00C         	call	_SendLCD
  2681                           
  2682                           ;Movement.c: 121: _delay((unsigned long)((2)*(8000000/4000.0)));
  2683  000C5C  0E06               	movlw	6
  2684  000C5E  0100               	movlb	0	; () banked
  2685  000C60  6F76               	movwf	??_ScanWithRange& (0+255),b
  2686  000C62  0E30               	movlw	48
  2687  000C64                     u2967:
  2688  000C64  2EE8               	decfsz	wreg,f,c
  2689  000C66  D7FE               	goto	u2967
  2690  000C68  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2691  000C6A  D7FC               	goto	u2967
  2692  000C6C  D000               	nop2	
  2693                           
  2694                           ;Movement.c: 122: SetLine(1);
  2695  000C6E  0E01               	movlw	1
  2696  000C70  EC23  F00C         	call	_SetLine
  2697                           
  2698                           ;Movement.c: 123: LCD_String("     ScanIR");
  2699  000C74  0E39               	movlw	low STR_1
  2700  000C76  6E2A               	movwf	LCD_String@string,c
  2701  000C78  0E03               	movlw	high STR_1
  2702  000C7A  6E2B               	movwf	LCD_String@string+1,c
  2703  000C7C  ECEE  F00A         	call	_LCD_String	;wreg free
  2704                           
  2705                           ;Movement.c: 124: SetLine(2);
  2706  000C80  0E02               	movlw	2
  2707  000C82  EC23  F00C         	call	_SetLine
  2708                           
  2709                           ;Movement.c: 125: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  2710  000C86  0E78               	movlw	low ScanWithRange@buf
  2711  000C88  6E30               	movwf	sprintf@sp,c
  2712  000C8A  0E00               	movlw	high ScanWithRange@buf
  2713  000C8C  6E31               	movwf	sprintf@sp+1,c
  2714  000C8E  0E0C               	movlw	low (STR_6+1)
  2715  000C90  6E32               	movwf	sprintf@f,c
  2716  000C92  0E03               	movlw	high (STR_6+1)
  2717  000C94  6E33               	movwf	sprintf@f+1,c
  2718  000C96  C0A5  F034         	movff	ScanWithRange@SensorResult,?_sprintf+4
  2719  000C9A  C0A6  F035         	movff	ScanWithRange@SensorResult+1,?_sprintf+5
  2720  000C9E  C0A7  F036         	movff	ScanWithRange@SensorResult+2,?_sprintf+6
  2721  000CA2  C0A8  F037         	movff	ScanWithRange@SensorResult+3,?_sprintf+7
  2722  000CA6  EC49  F004         	call	_sprintf	;wreg free
  2723                           
  2724                           ;Movement.c: 126: LCD_String(buf);
  2725  000CAA  0E78               	movlw	low ScanWithRange@buf
  2726  000CAC  6E2A               	movwf	LCD_String@string,c
  2727  000CAE  0E00               	movlw	high ScanWithRange@buf
  2728  000CB0  6E2B               	movwf	LCD_String@string+1,c
  2729  000CB2  ECEE  F00A         	call	_LCD_String	;wreg free
  2730                           
  2731                           ;Movement.c: 129: turnLeft(mL,mR);
  2732  000CB6  C06D  F066         	movff	ScanWithRange@mL,turnLeft@mL
  2733  000CBA  C06E  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  2734  000CBE  C06F  F068         	movff	ScanWithRange@mR,turnLeft@mR
  2735  000CC2  C070  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  2736  000CC6  EC6D  F00B         	call	_turnLeft	;wreg free
  2737                           
  2738                           ;Movement.c: 130: _delay((unsigned long)((1)*(8000000/4000.0)));
  2739  000CCA  0E03               	movlw	3
  2740  000CCC  0100               	movlb	0	; () banked
  2741  000CCE  6F76               	movwf	??_ScanWithRange& (0+255),b
  2742  000CD0  0E98               	movlw	152
  2743  000CD2                     u2977:
  2744  000CD2  2EE8               	decfsz	wreg,f,c
  2745  000CD4  D7FE               	goto	u2977
  2746  000CD6  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2747  000CD8  D7FC               	goto	u2977
  2748                           
  2749                           ;Movement.c: 131: stop(mL,mR);
  2750  000CDA  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2751  000CDE  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2752  000CE2  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2753  000CE6  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2754  000CEA  EC73  F009         	call	_stop	;wreg free
  2755                           
  2756                           ;Movement.c: 133: if (SensorResult[1]>DirectionFoundThreshold) {
  2757  000CEE  0100               	movlb	0	; () banked
  2758  000CF0  51A7               	movf	(ScanWithRange@SensorResult+2)& (0+255),w,b
  2759  000CF2  0100               	movlb	0	; () banked
  2760  000CF4  5DA2               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2761  000CF6  0100               	movlb	0	; () banked
  2762  000CF8  51A8               	movf	(ScanWithRange@SensorResult+3)& (0+255),w,b
  2763  000CFA  0100               	movlb	0	; () banked
  2764  000CFC  59A3               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2765  000CFE  B0D8               	btfsc	status,0,c
  2766  000D00  D003               	goto	l3104
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;Movement.c: 134: RightFlag=1;
  2770  000D02  0E01               	movlw	1
  2771  000D04  0100               	movlb	0	; () banked
  2772  000D06  6FAC               	movwf	ScanWithRange@RightFlag& (0+255),b
  2773  000D08                     l3104:
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;Movement.c: 135: }
  2777                           ;Movement.c: 137: if (SensorResult[0]>DirectionFoundThreshold) {
  2778  000D08  0100               	movlb	0	; () banked
  2779  000D0A  51A5               	movf	ScanWithRange@SensorResult& (0+255),w,b
  2780  000D0C  0100               	movlb	0	; () banked
  2781  000D0E  5DA2               	subwf	ScanWithRange@DirectionFoundThreshold& (0+255),w,b
  2782  000D10  0100               	movlb	0	; () banked
  2783  000D12  51A6               	movf	(ScanWithRange@SensorResult+1)& (0+255),w,b
  2784  000D14  0100               	movlb	0	; () banked
  2785  000D16  59A3               	subwfb	(ScanWithRange@DirectionFoundThreshold+1)& (0+255),w,b
  2786  000D18  B0D8               	btfsc	status,0,c
  2787  000D1A  D003               	goto	l3108
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;Movement.c: 138: LeftFlag=1;
  2791  000D1C  0E01               	movlw	1
  2792  000D1E  0100               	movlb	0	; () banked
  2793  000D20  6FAB               	movwf	ScanWithRange@LeftFlag& (0+255),b
  2794  000D22                     l3108:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;Movement.c: 139: }
  2798                           ;Movement.c: 142: if ((LeftFlag==1)||(RightFlag==1)) {
  2799  000D22  0100               	movlb	0	; () banked
  2800  000D24  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2801  000D26  B4D8               	btfsc	status,2,c
  2802  000D28  D004               	goto	l3112
  2803                           
  2804                           ; BSR set to: 0
  2805  000D2A  0100               	movlb	0	; () banked
  2806  000D2C  05AC               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2807  000D2E  A4D8               	btfss	status,2,c
  2808  000D30  D002               	goto	l3114
  2809  000D32                     l3112:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;Movement.c: 143: FlagCounter++;
  2813  000D32  0100               	movlb	0	; () banked
  2814  000D34  2BA4               	incf	ScanWithRange@FlagCounter& (0+255),f,b
  2815  000D36                     l3114:
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;Movement.c: 144: }
  2819                           ;Movement.c: 148: if ((LeftFlag==1)&&(RightFlag==1)) {
  2820  000D36  0100               	movlb	0	; () banked
  2821  000D38  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2822  000D3A  A4D8               	btfss	status,2,c
  2823  000D3C  D03B               	goto	l3132
  2824                           
  2825                           ; BSR set to: 0
  2826  000D3E  0100               	movlb	0	; () banked
  2827  000D40  05AC               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2828  000D42  A4D8               	btfss	status,2,c
  2829  000D44  D037               	goto	l3132
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;Movement.c: 149: for (n=1; n<=(FlagCounter>>1); n++) {
  2833  000D46  0E00               	movlw	0
  2834  000D48  0100               	movlb	0	; () banked
  2835  000D4A  6FAA               	movwf	(ScanWithRange@n+1)& (0+255),b
  2836  000D4C  0E01               	movlw	1
  2837  000D4E  6FA9               	movwf	ScanWithRange@n& (0+255),b
  2838  000D50  D01F               	goto	l216
  2839  000D52                     l3120:
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;Movement.c: 150: turnRight(mL,mR);
  2843  000D52  C06D  F066         	movff	ScanWithRange@mL,turnRight@mL
  2844  000D56  C06E  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2845  000D5A  C06F  F068         	movff	ScanWithRange@mR,turnRight@mR
  2846  000D5E  C070  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2847  000D62  EC46  F00B         	call	_turnRight	;wreg free
  2848                           
  2849                           ;Movement.c: 151: _delay((unsigned long)((1)*(8000000/4000.0)));
  2850  000D66  0E03               	movlw	3
  2851  000D68  0100               	movlb	0	; () banked
  2852  000D6A  6F76               	movwf	??_ScanWithRange& (0+255),b
  2853  000D6C  0E98               	movlw	152
  2854  000D6E                     u2987:
  2855  000D6E  2EE8               	decfsz	wreg,f,c
  2856  000D70  D7FE               	goto	u2987
  2857  000D72  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2858  000D74  D7FC               	goto	u2987
  2859                           
  2860                           ;Movement.c: 152: stop(mL,mR);
  2861  000D76  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2862  000D7A  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2863  000D7E  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2864  000D82  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2865  000D86  EC73  F009         	call	_stop	;wreg free
  2866  000D8A  0100               	movlb	0	; () banked
  2867  000D8C  4BA9               	infsnz	ScanWithRange@n& (0+255),f,b
  2868  000D8E  2BAA               	incf	(ScanWithRange@n+1)& (0+255),f,b
  2869  000D90                     l216:
  2870                           
  2871                           ; BSR set to: 0
  2872  000D90  0100               	movlb	0	; () banked
  2873  000D92  90D8               	bcf	status,0,c
  2874  000D94  31A4               	rrcf	ScanWithRange@FlagCounter& (0+255),w,b
  2875  000D96  0100               	movlb	0	; () banked
  2876  000D98  6F76               	movwf	??_ScanWithRange& (0+255),b
  2877  000D9A  6B77               	clrf	(??_ScanWithRange+1)& (0+255),b
  2878  000D9C  0100               	movlb	0	; () banked
  2879  000D9E  51A9               	movf	ScanWithRange@n& (0+255),w,b
  2880  000DA0  0100               	movlb	0	; () banked
  2881  000DA2  5D76               	subwf	??_ScanWithRange& (0+255),w,b
  2882  000DA4  0100               	movlb	0	; () banked
  2883  000DA6  51AA               	movf	(ScanWithRange@n+1)& (0+255),w,b
  2884  000DA8  0100               	movlb	0	; () banked
  2885  000DAA  5977               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2886  000DAC  B0D8               	btfsc	status,0,c
  2887  000DAE  D7D1               	goto	l3120
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;Movement.c: 153: }
  2891                           ;Movement.c: 154: return 2;
  2892                           
  2893                           ; BSR set to: 0
  2894  000DB0  0E02               	movlw	2
  2895                           
  2896                           ; BSR set to: 0
  2897  000DB2  0012               	return	
  2898  000DB4                     l3132:
  2899                           
  2900                           ; BSR set to: 0
  2901  000DB4  0100               	movlb	0	; () banked
  2902  000DB6  4BA0               	infsnz	ScanWithRange@i& (0+255),f,b
  2903  000DB8  2BA1               	incf	(ScanWithRange@i+1)& (0+255),f,b
  2904  000DBA                     l3134:
  2905                           
  2906                           ; BSR set to: 0
  2907  000DBA  0100               	movlb	0	; () banked
  2908  000DBC  51A0               	movf	ScanWithRange@i& (0+255),w,b
  2909  000DBE  0100               	movlb	0	; () banked
  2910  000DC0  5D71               	subwf	ScanWithRange@milliseconds& (0+255),w,b
  2911  000DC2  0100               	movlb	0	; () banked
  2912  000DC4  51A1               	movf	(ScanWithRange@i+1)& (0+255),w,b
  2913  000DC6  0100               	movlb	0	; () banked
  2914  000DC8  5972               	subwfb	(ScanWithRange@milliseconds+1)& (0+255),w,b
  2915  000DCA  B0D8               	btfsc	status,0,c
  2916  000DCC  D725               	goto	l3070
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;Movement.c: 155: }
  2920                           ;Movement.c: 157: }
  2921                           ;Movement.c: 160: if ((LeftFlag==1)||(RightFlag==1)) {
  2922                           
  2923                           ; BSR set to: 0
  2924  000DCE  0100               	movlb	0	; () banked
  2925  000DD0  05AB               	decf	ScanWithRange@LeftFlag& (0+255),w,b
  2926  000DD2  B4D8               	btfsc	status,2,c
  2927  000DD4  D004               	goto	l3140
  2928                           
  2929                           ; BSR set to: 0
  2930  000DD6  0100               	movlb	0	; () banked
  2931  000DD8  05AC               	decf	ScanWithRange@RightFlag& (0+255),w,b
  2932  000DDA  A4D8               	btfss	status,2,c
  2933  000DDC  D036               	goto	l3154
  2934  000DDE                     l3140:
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;Movement.c: 161: for (n=1; n<=(FlagCounter); n++) {
  2938  000DDE  0E00               	movlw	0
  2939  000DE0  0100               	movlb	0	; () banked
  2940  000DE2  6FAA               	movwf	(ScanWithRange@n+1)& (0+255),b
  2941  000DE4  0E01               	movlw	1
  2942  000DE6  6FA9               	movwf	ScanWithRange@n& (0+255),b
  2943  000DE8  D01F               	goto	l224
  2944  000DEA                     l3142:
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;Movement.c: 162: turnRight(mL,mR);
  2948  000DEA  C06D  F066         	movff	ScanWithRange@mL,turnRight@mL
  2949  000DEE  C06E  F067         	movff	ScanWithRange@mL+1,turnRight@mL+1
  2950  000DF2  C06F  F068         	movff	ScanWithRange@mR,turnRight@mR
  2951  000DF6  C070  F069         	movff	ScanWithRange@mR+1,turnRight@mR+1
  2952  000DFA  EC46  F00B         	call	_turnRight	;wreg free
  2953                           
  2954                           ;Movement.c: 163: _delay((unsigned long)((1)*(8000000/4000.0)));
  2955  000DFE  0E03               	movlw	3
  2956  000E00  0100               	movlb	0	; () banked
  2957  000E02  6F76               	movwf	??_ScanWithRange& (0+255),b
  2958  000E04  0E98               	movlw	152
  2959  000E06                     u2997:
  2960  000E06  2EE8               	decfsz	wreg,f,c
  2961  000E08  D7FE               	goto	u2997
  2962  000E0A  2F76               	decfsz	??_ScanWithRange& (0+255),f,b
  2963  000E0C  D7FC               	goto	u2997
  2964                           
  2965                           ;Movement.c: 164: stop(mL,mR);
  2966  000E0E  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  2967  000E12  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  2968  000E16  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  2969  000E1A  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  2970  000E1E  EC73  F009         	call	_stop	;wreg free
  2971  000E22  0100               	movlb	0	; () banked
  2972  000E24  4BA9               	infsnz	ScanWithRange@n& (0+255),f,b
  2973  000E26  2BAA               	incf	(ScanWithRange@n+1)& (0+255),f,b
  2974  000E28                     l224:
  2975                           
  2976                           ; BSR set to: 0
  2977  000E28  0100               	movlb	0	; () banked
  2978  000E2A  51A4               	movf	ScanWithRange@FlagCounter& (0+255),w,b
  2979  000E2C  0100               	movlb	0	; () banked
  2980  000E2E  6F76               	movwf	??_ScanWithRange& (0+255),b
  2981  000E30  6B77               	clrf	(??_ScanWithRange+1)& (0+255),b
  2982  000E32  0100               	movlb	0	; () banked
  2983  000E34  51A9               	movf	ScanWithRange@n& (0+255),w,b
  2984  000E36  0100               	movlb	0	; () banked
  2985  000E38  5D76               	subwf	??_ScanWithRange& (0+255),w,b
  2986  000E3A  0100               	movlb	0	; () banked
  2987  000E3C  51AA               	movf	(ScanWithRange@n+1)& (0+255),w,b
  2988  000E3E  0100               	movlb	0	; () banked
  2989  000E40  5977               	subwfb	(??_ScanWithRange+1)& (0+255),w,b
  2990  000E42  B0D8               	btfsc	status,0,c
  2991  000E44  D7D2               	goto	l3142
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;Movement.c: 165: }
  2995                           ;Movement.c: 166: return 2;
  2996                           
  2997                           ; BSR set to: 0
  2998  000E46  0E02               	movlw	2
  2999                           
  3000                           ; BSR set to: 0
  3001  000E48  0012               	return	
  3002  000E4A                     l3154:
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;Movement.c: 167: }
  3006                           ;Movement.c: 170: turnLeft(mL,mR);
  3007  000E4A  C06D  F066         	movff	ScanWithRange@mL,turnLeft@mL
  3008  000E4E  C06E  F067         	movff	ScanWithRange@mL+1,turnLeft@mL+1
  3009  000E52  C06F  F068         	movff	ScanWithRange@mR,turnLeft@mR
  3010  000E56  C070  F069         	movff	ScanWithRange@mR+1,turnLeft@mR+1
  3011  000E5A  EC6D  F00B         	call	_turnLeft	;wreg free
  3012                           
  3013                           ;Movement.c: 171: delay_tenth_s(5);
  3014  000E5E  0E05               	movlw	5
  3015  000E60  ECD2  F00B         	call	_delay_tenth_s
  3016                           
  3017                           ;Movement.c: 172: stop(mL,mR);
  3018  000E64  C06D  F062         	movff	ScanWithRange@mL,stop@mL
  3019  000E68  C06E  F063         	movff	ScanWithRange@mL+1,stop@mL+1
  3020  000E6C  C06F  F064         	movff	ScanWithRange@mR,stop@mR
  3021  000E70  C070  F065         	movff	ScanWithRange@mR+1,stop@mR+1
  3022  000E74  EC73  F009         	call	_stop	;wreg free
  3023                           
  3024                           ;Movement.c: 173: return -1;
  3025  000E78  0EFF               	movlw	255
  3026  000E7A  0012               	return	
  3027  000E7C                     __end_of_ScanWithRange:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           intcon	equ	0xFF2
  3033                           postinc0	equ	0xFEE
  3034                           wreg	equ	0xFE8
  3035                           indf1	equ	0xFE7
  3036                           fsr1h	equ	0xFE2
  3037                           fsr1l	equ	0xFE1
  3038                           indf2	equ	0xFDF
  3039                           fsr2h	equ	0xFDA
  3040                           fsr2l	equ	0xFD9
  3041                           status	equ	0xFD8
  3042                           
  3043 ;; *************** function _turnRight *****************
  3044 ;; Defined at:
  3045 ;;		line 98 in file "dc_motor.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  3048 ;;		 -> main@mL(9), 
  3049 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  3050 ;;		 -> main@mR(9), 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;		None               void
  3055 ;; Registers used:
  3056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3062 ;;      Params:         0       4       0       0
  3063 ;;      Locals:         0       0       0       0
  3064 ;;      Temps:          0       0       0       0
  3065 ;;      Totals:         0       4       0       0
  3066 ;;Total ram usage:        4 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    6
  3069 ;; This function calls:
  3070 ;;		_fullSpeedAhead
  3071 ;;		_stop
  3072 ;; This function is called by:
  3073 ;;		_ScanWithRange
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077                           	psect	text9
  3078  00168C                     __ptext9:
  3079                           	opt stack 0
  3080  00168C                     _turnRight:
  3081                           	opt stack 23
  3082                           
  3083                           ;dc_motor.c: 100: stop(mL, mR);
  3084                           
  3085                           ;incstack = 0
  3086  00168C  C066  F062         	movff	turnRight@mL,stop@mL
  3087  001690  C067  F063         	movff	turnRight@mL+1,stop@mL+1
  3088  001694  C068  F064         	movff	turnRight@mR,stop@mR
  3089  001698  C069  F065         	movff	turnRight@mR+1,stop@mR+1
  3090  00169C  EC73  F009         	call	_stop	;wreg free
  3091                           
  3092                           ;dc_motor.c: 102: mL->direction=1;
  3093  0016A0  0100               	movlb	0	; () banked
  3094  0016A2  EE20 F001          	lfsr	2,1
  3095  0016A6  5166               	movf	turnRight@mL& (0+255),w,b
  3096  0016A8  26D9               	addwf	fsr2l,f,c
  3097  0016AA  5167               	movf	(turnRight@mL+1)& (0+255),w,b
  3098  0016AC  22DA               	addwfc	fsr2h,f,c
  3099  0016AE  0E01               	movlw	1
  3100  0016B0  6EDF               	movwf	indf2,c
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;dc_motor.c: 103: mR->direction=0;
  3104  0016B2  0100               	movlb	0	; () banked
  3105  0016B4  EE20 F001          	lfsr	2,1
  3106  0016B8  5168               	movf	turnRight@mR& (0+255),w,b
  3107  0016BA  26D9               	addwf	fsr2l,f,c
  3108  0016BC  5169               	movf	(turnRight@mR+1)& (0+255),w,b
  3109  0016BE  22DA               	addwfc	fsr2h,f,c
  3110  0016C0  0E00               	movlw	0
  3111  0016C2  6EDF               	movwf	indf2,c
  3112                           
  3113                           ;dc_motor.c: 104: fullSpeedAhead(mL, mR);
  3114  0016C4  C066  F062         	movff	turnRight@mL,fullSpeedAhead@mL
  3115  0016C8  C067  F063         	movff	turnRight@mL+1,fullSpeedAhead@mL+1
  3116  0016CC  C068  F064         	movff	turnRight@mR,fullSpeedAhead@mR
  3117  0016D0  C069  F065         	movff	turnRight@mR+1,fullSpeedAhead@mR+1
  3118  0016D4  ECB6  F00A         	call	_fullSpeedAhead	;wreg free
  3119  0016D8  0012               	return		;funcret
  3120  0016DA                     __end_of_turnRight:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           intcon	equ	0xFF2
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           indf1	equ	0xFE7
  3129                           fsr1h	equ	0xFE2
  3130                           fsr1l	equ	0xFE1
  3131                           indf2	equ	0xFDF
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136 ;; *************** function _turnLeft *****************
  3137 ;; Defined at:
  3138 ;;		line 87 in file "dc_motor.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  mL              2    6[BANK0 ] PTR struct DC_motor
  3141 ;;		 -> main@mL(9), 
  3142 ;;  mR              2    8[BANK0 ] PTR struct DC_motor
  3143 ;;		 -> main@mR(9), 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;		None               void
  3148 ;; Registers used:
  3149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3155 ;;      Params:         0       4       0       0
  3156 ;;      Locals:         0       0       0       0
  3157 ;;      Temps:          0       0       0       0
  3158 ;;      Totals:         0       4       0       0
  3159 ;;Total ram usage:        4 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    6
  3162 ;; This function calls:
  3163 ;;		_fullSpeedAhead
  3164 ;;		_stop
  3165 ;; This function is called by:
  3166 ;;		_ScanWithRange
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text10
  3171  0016DA                     __ptext10:
  3172                           	opt stack 0
  3173  0016DA                     _turnLeft:
  3174                           	opt stack 23
  3175                           
  3176                           ;dc_motor.c: 89: stop(mL, mR);
  3177                           
  3178                           ;incstack = 0
  3179  0016DA  C066  F062         	movff	turnLeft@mL,stop@mL
  3180  0016DE  C067  F063         	movff	turnLeft@mL+1,stop@mL+1
  3181  0016E2  C068  F064         	movff	turnLeft@mR,stop@mR
  3182  0016E6  C069  F065         	movff	turnLeft@mR+1,stop@mR+1
  3183  0016EA  EC73  F009         	call	_stop	;wreg free
  3184                           
  3185                           ;dc_motor.c: 91: mL->direction=0;
  3186  0016EE  0100               	movlb	0	; () banked
  3187  0016F0  EE20 F001          	lfsr	2,1
  3188  0016F4  5166               	movf	turnLeft@mL& (0+255),w,b
  3189  0016F6  26D9               	addwf	fsr2l,f,c
  3190  0016F8  5167               	movf	(turnLeft@mL+1)& (0+255),w,b
  3191  0016FA  22DA               	addwfc	fsr2h,f,c
  3192  0016FC  0E00               	movlw	0
  3193  0016FE  6EDF               	movwf	indf2,c
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;dc_motor.c: 92: mR->direction=1;
  3197  001700  0100               	movlb	0	; () banked
  3198  001702  EE20 F001          	lfsr	2,1
  3199  001706  5168               	movf	turnLeft@mR& (0+255),w,b
  3200  001708  26D9               	addwf	fsr2l,f,c
  3201  00170A  5169               	movf	(turnLeft@mR+1)& (0+255),w,b
  3202  00170C  22DA               	addwfc	fsr2h,f,c
  3203  00170E  0E01               	movlw	1
  3204  001710  6EDF               	movwf	indf2,c
  3205                           
  3206                           ;dc_motor.c: 93: fullSpeedAhead(mL, mR);
  3207  001712  C066  F062         	movff	turnLeft@mL,fullSpeedAhead@mL
  3208  001716  C067  F063         	movff	turnLeft@mL+1,fullSpeedAhead@mL+1
  3209  00171A  C068  F064         	movff	turnLeft@mR,fullSpeedAhead@mR
  3210  00171E  C069  F065         	movff	turnLeft@mR+1,fullSpeedAhead@mR+1
  3211  001722  ECB6  F00A         	call	_fullSpeedAhead	;wreg free
  3212  001726  0012               	return		;funcret
  3213  001728                     __end_of_turnLeft:
  3214                           	opt stack 0
  3215                           tblptru	equ	0xFF8
  3216                           prodh	equ	0xFF4
  3217                           prodl	equ	0xFF3
  3218                           intcon	equ	0xFF2
  3219                           postinc0	equ	0xFEE
  3220                           wreg	equ	0xFE8
  3221                           indf1	equ	0xFE7
  3222                           fsr1h	equ	0xFE2
  3223                           fsr1l	equ	0xFE1
  3224                           indf2	equ	0xFDF
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function _fullSpeedAhead *****************
  3230 ;; Defined at:
  3231 ;;		line 108 in file "dc_motor.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3234 ;;		 -> main@mL(9), 
  3235 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3236 ;;		 -> main@mR(9), 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;		None
  3239 ;; Return value:  Size  Location     Type
  3240 ;;		None               void
  3241 ;; Registers used:
  3242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3248 ;;      Params:         0       4       0       0
  3249 ;;      Locals:         0       0       0       0
  3250 ;;      Temps:          1       0       0       0
  3251 ;;      Totals:         1       4       0       0
  3252 ;;Total ram usage:        5 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    5
  3255 ;; This function calls:
  3256 ;;		_setMotorPWM
  3257 ;; This function is called by:
  3258 ;;		_turnLeft
  3259 ;;		_turnRight
  3260 ;;		_fullSpeedBack
  3261 ;;		_main
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text11
  3266  00156C                     __ptext11:
  3267                           	opt stack 0
  3268  00156C                     _fullSpeedAhead:
  3269                           	opt stack 24
  3270                           
  3271                           ;dc_motor.c: 111: while(mL->power<100 || mR->power<100){
  3272                           
  3273                           ;incstack = 0
  3274  00156C  D028               	goto	l65
  3275  00156E                     l2868:
  3276                           
  3277                           ;dc_motor.c: 112: if(mL->power<100){
  3278  00156E  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3279  001572  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3280  001576  0E64               	movlw	100
  3281  001578  60DF               	cpfslt	indf2,c
  3282  00157A  D005               	goto	l2872
  3283                           
  3284                           ;dc_motor.c: 113: mL->power++;
  3285  00157C  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3286  001580  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3287  001584  2ADF               	incf	indf2,f,c
  3288  001586                     l2872:
  3289                           
  3290                           ;dc_motor.c: 114: }
  3291                           ;dc_motor.c: 115: if(mR->power<100){
  3292  001586  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3293  00158A  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3294  00158E  0E64               	movlw	100
  3295  001590  60DF               	cpfslt	indf2,c
  3296  001592  D005               	goto	l2876
  3297                           
  3298                           ;dc_motor.c: 116: mR->power++;
  3299  001594  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3300  001598  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3301  00159C  2ADF               	incf	indf2,f,c
  3302  00159E                     l2876:
  3303                           
  3304                           ;dc_motor.c: 117: }
  3305                           ;dc_motor.c: 118: setMotorPWM(mL);
  3306  00159E  C062  F032         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3307  0015A2  C063  F033         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3308  0015A6  EC3E  F007         	call	_setMotorPWM	;wreg free
  3309                           
  3310                           ;dc_motor.c: 119: setMotorPWM(mR);
  3311  0015AA  C064  F032         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3312  0015AE  C065  F033         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3313  0015B2  EC3E  F007         	call	_setMotorPWM	;wreg free
  3314                           
  3315                           ;dc_motor.c: 120: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3316  0015B6  0E21               	movlw	33
  3317  0015B8                     u3007:
  3318  0015B8  2EE8               	decfsz	wreg,f,c
  3319  0015BA  D7FE               	goto	u3007
  3320  0015BC  F000               	nop	
  3321  0015BE                     l65:
  3322  0015BE  C062  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3323  0015C2  C063  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3324  0015C6  0E63               	movlw	99
  3325  0015C8  64DF               	cpfsgt	indf2,c
  3326  0015CA  D7D1               	goto	l2868
  3327  0015CC  C064  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3328  0015D0  C065  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3329  0015D4  0E63               	movlw	99
  3330  0015D6  64DF               	cpfsgt	indf2,c
  3331  0015D8  D7CA               	goto	l2868
  3332  0015DA  0012               	return	
  3333  0015DC                     __end_of_fullSpeedAhead:
  3334                           	opt stack 0
  3335                           tblptru	equ	0xFF8
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           intcon	equ	0xFF2
  3339                           postinc0	equ	0xFEE
  3340                           wreg	equ	0xFE8
  3341                           indf1	equ	0xFE7
  3342                           fsr1h	equ	0xFE2
  3343                           fsr1l	equ	0xFE1
  3344                           indf2	equ	0xFDF
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _delay_tenth_s *****************
  3350 ;; Defined at:
  3351 ;;		line 21 in file "Movement.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  tenth_second    1    wreg     unsigned char 
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;  tenth_second    1   36[COMRAM] unsigned char 
  3356 ;;  i               2   37[COMRAM] unsigned int 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;		None               void
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3366 ;;      Params:         0       0       0       0
  3367 ;;      Locals:         3       0       0       0
  3368 ;;      Temps:          1       0       0       0
  3369 ;;      Totals:         4       0       0       0
  3370 ;;Total ram usage:        4 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    3
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_ScanWithRange
  3377 ;;		_main
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text12
  3382  0017A4                     __ptext12:
  3383                           	opt stack 0
  3384  0017A4                     _delay_tenth_s:
  3385                           	opt stack 27
  3386                           
  3387                           ;incstack = 0
  3388                           ;delay_tenth_s@tenth_seconds stored from wreg
  3389  0017A4  6E25               	movwf	delay_tenth_s@tenth_seconds,c
  3390                           
  3391                           ;Movement.c: 22: unsigned int i=0;
  3392  0017A6  0E00               	movlw	0
  3393  0017A8  6E27               	movwf	delay_tenth_s@i+1,c
  3394  0017AA  0E00               	movlw	0
  3395  0017AC  6E26               	movwf	delay_tenth_s@i,c
  3396                           
  3397                           ;Movement.c: 23: for (i=1; i<=tenth_seconds*2; i++) {
  3398  0017AE  0E00               	movlw	0
  3399  0017B0  6E27               	movwf	delay_tenth_s@i+1,c
  3400  0017B2  0E01               	movlw	1
  3401  0017B4  6E26               	movwf	delay_tenth_s@i,c
  3402  0017B6  D009               	goto	l2180
  3403  0017B8                     l2176:
  3404                           
  3405                           ;Movement.c: 25: _delay((unsigned long)((50)*(8000000/4000.0)));
  3406  0017B8  0E82               	movlw	130
  3407  0017BA  6E24               	movwf	??_delay_tenth_s& (0+255),c
  3408  0017BC  0EDE               	movlw	222
  3409  0017BE                     u3017:
  3410  0017BE  2EE8               	decfsz	wreg,f,c
  3411  0017C0  D7FE               	goto	u3017
  3412  0017C2  2E24               	decfsz	??_delay_tenth_s& (0+255),f,c
  3413  0017C4  D7FC               	goto	u3017
  3414  0017C6  4A26               	infsnz	delay_tenth_s@i,f,c
  3415  0017C8  2A27               	incf	delay_tenth_s@i+1,f,c
  3416  0017CA                     l2180:
  3417  0017CA  5025               	movf	delay_tenth_s@tenth_seconds,w,c
  3418  0017CC  0D02               	mullw	2
  3419  0017CE  5026               	movf	delay_tenth_s@i,w,c
  3420  0017D0  5CF3               	subwf	prodl,w,c
  3421  0017D2  5027               	movf	delay_tenth_s@i+1,w,c
  3422  0017D4  58F4               	subwfb	prodh,w,c
  3423  0017D6  A0D8               	btfss	status,0,c
  3424  0017D8  0012               	return	
  3425  0017DA  D7EE               	goto	l2176
  3426  0017DC                     __end_of_delay_tenth_s:
  3427                           	opt stack 0
  3428                           tblptru	equ	0xFF8
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           intcon	equ	0xFF2
  3432                           postinc0	equ	0xFEE
  3433                           wreg	equ	0xFE8
  3434                           indf1	equ	0xFE7
  3435                           fsr1h	equ	0xFE2
  3436                           fsr1l	equ	0xFE1
  3437                           indf2	equ	0xFDF
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function _ScanIR *****************
  3443 ;; Defined at:
  3444 ;;		line 34 in file "Movement.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  mL              2   13[BANK0 ] PTR struct DC_motor
  3447 ;;		 -> main@mL(9), 
  3448 ;;  mR              2   15[BANK0 ] PTR struct DC_motor
  3449 ;;		 -> main@mR(9), 
  3450 ;;  TurnDirectio    1   17[BANK0 ] unsigned char 
  3451 ;;  Move            2   18[BANK0 ] PTR unsigned char 
  3452 ;;		 -> main@Move(1), 
  3453 ;;  MoveTime        2   20[BANK0 ] PTR unsigned char 
  3454 ;;		 -> main@MoveTime(100), 
  3455 ;;  MoveType        2   22[BANK0 ] PTR unsigned char 
  3456 ;;		 -> main@MoveType(100), 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;  buf            40   24[BANK0 ] unsigned char [40]
  3459 ;;  SensorResult    4   66[BANK0 ] unsigned int [2]
  3460 ;;  DirectionMov    2   64[BANK0 ] const unsigned int 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      unsigned char 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3470 ;;      Params:         0      11       0       0
  3471 ;;      Locals:         0      46       0       0
  3472 ;;      Temps:          1       0       0       0
  3473 ;;      Totals:         1      57       0       0
  3474 ;;Total ram usage:       58 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    7
  3477 ;; This function calls:
  3478 ;;		_LCD_String
  3479 ;;		_SendLCD
  3480 ;;		_SetLine
  3481 ;;		_grabLeftIR
  3482 ;;		_grabRightIR
  3483 ;;		_sprintf
  3484 ;;		_stop
  3485 ;; This function is called by:
  3486 ;;		_main
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text13
  3491  000FB6                     __ptext13:
  3492                           	opt stack 0
  3493  000FB6                     _ScanIR:
  3494                           	opt stack 23
  3495                           
  3496                           ;Movement.c: 37: unsigned int SensorResult[2]={0,0};
  3497                           
  3498                           ;incstack = 0
  3499  000FB6  C0B8  F0A2         	movff	ScanIR@F3878,ScanIR@SensorResult
  3500  000FBA  C0B9  F0A3         	movff	ScanIR@F3878+1,ScanIR@SensorResult+1
  3501  000FBE  C0BA  F0A4         	movff	ScanIR@F3878+2,ScanIR@SensorResult+2
  3502  000FC2  C0BB  F0A5         	movff	ScanIR@F3878+3,ScanIR@SensorResult+3
  3503                           
  3504                           ;Movement.c: 38: char buf[40];
  3505                           ;Movement.c: 41: const unsigned int DirectionMoveThreshold=2500;
  3506  000FC6  0E09               	movlw	9
  3507  000FC8  0100               	movlb	0	; () banked
  3508  000FCA  6FA1               	movwf	(ScanIR@DirectionMoveThreshold+1)& (0+255),b
  3509  000FCC  0EC4               	movlw	196
  3510  000FCE  6FA0               	movwf	ScanIR@DirectionMoveThreshold& (0+255),b
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;Movement.c: 44: SensorResult[0]=grabLeftIR();
  3514  000FD0  EC7D  F00A         	call	_grabLeftIR	;wreg free
  3515  000FD4  C024  F0A2         	movff	?_grabLeftIR,ScanIR@SensorResult
  3516  000FD8  C025  F0A3         	movff	?_grabLeftIR+1,ScanIR@SensorResult+1
  3517                           
  3518                           ;Movement.c: 45: SensorResult[1]=grabRightIR();
  3519  000FDC  EC44  F00A         	call	_grabRightIR	;wreg free
  3520  000FE0  C024  F0A4         	movff	?_grabRightIR,ScanIR@SensorResult+2
  3521  000FE4  C025  F0A5         	movff	?_grabRightIR+1,ScanIR@SensorResult+3
  3522                           
  3523                           ;Movement.c: 49: CAP1BUFH=0;
  3524  000FE8  0E00               	movlw	0
  3525  000FEA  6E69               	movwf	3945,c	;volatile
  3526                           
  3527                           ;Movement.c: 50: CAP1BUFL=0;
  3528  000FEC  0E00               	movlw	0
  3529  000FEE  6E68               	movwf	3944,c	;volatile
  3530                           
  3531                           ;Movement.c: 51: CAP2BUFH=0;
  3532  000FF0  0E00               	movlw	0
  3533  000FF2  6E67               	movwf	3943,c	;volatile
  3534                           
  3535                           ;Movement.c: 52: CAP2BUFL=0;
  3536  000FF4  0E00               	movlw	0
  3537  000FF6  6E66               	movwf	3942,c	;volatile
  3538                           
  3539                           ;Movement.c: 55: SendLCD(0b00000001,0);
  3540  000FF8  0E00               	movlw	0
  3541  000FFA  6E28               	movwf	SendLCD@type,c
  3542  000FFC  0E01               	movlw	1
  3543  000FFE  EC3B  F00C         	call	_SendLCD
  3544                           
  3545                           ;Movement.c: 56: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3546  001002  0E21               	movlw	33
  3547  001004                     u3027:
  3548  001004  2EE8               	decfsz	wreg,f,c
  3549  001006  D7FE               	goto	u3027
  3550  001008  F000               	nop	
  3551                           
  3552                           ;Movement.c: 57: SendLCD(0b00000010,0);
  3553  00100A  0E00               	movlw	0
  3554  00100C  6E28               	movwf	SendLCD@type,c
  3555  00100E  0E02               	movlw	2
  3556  001010  EC3B  F00C         	call	_SendLCD
  3557                           
  3558                           ;Movement.c: 58: _delay((unsigned long)((2)*(8000000/4000.0)));
  3559  001014  0E06               	movlw	6
  3560  001016  6E39               	movwf	??_ScanIR& (0+255),c
  3561  001018  0E30               	movlw	48
  3562  00101A                     u3037:
  3563  00101A  2EE8               	decfsz	wreg,f,c
  3564  00101C  D7FE               	goto	u3037
  3565  00101E  2E39               	decfsz	??_ScanIR& (0+255),f,c
  3566  001020  D7FC               	goto	u3037
  3567  001022  D000               	nop2	
  3568                           
  3569                           ;Movement.c: 59: SetLine(1);
  3570  001024  0E01               	movlw	1
  3571  001026  EC23  F00C         	call	_SetLine
  3572                           
  3573                           ;Movement.c: 60: LCD_String("     ScanIR");
  3574  00102A  0E39               	movlw	low STR_1
  3575  00102C  6E2A               	movwf	LCD_String@string,c
  3576  00102E  0E03               	movlw	high STR_1
  3577  001030  6E2B               	movwf	LCD_String@string+1,c
  3578  001032  ECEE  F00A         	call	_LCD_String	;wreg free
  3579                           
  3580                           ;Movement.c: 61: SetLine(2);
  3581  001036  0E02               	movlw	2
  3582  001038  EC23  F00C         	call	_SetLine
  3583                           
  3584                           ;Movement.c: 62: sprintf(buf,"     %04d, %04d",SensorResult[0],SensorResult[1]);
  3585  00103C  0E78               	movlw	low ScanIR@buf
  3586  00103E  6E30               	movwf	sprintf@sp,c
  3587  001040  0E00               	movlw	high ScanIR@buf
  3588  001042  6E31               	movwf	sprintf@sp+1,c
  3589  001044  0E0C               	movlw	low (STR_6+1)
  3590  001046  6E32               	movwf	sprintf@f,c
  3591  001048  0E03               	movlw	high (STR_6+1)
  3592  00104A  6E33               	movwf	sprintf@f+1,c
  3593  00104C  C0A2  F034         	movff	ScanIR@SensorResult,?_sprintf+4
  3594  001050  C0A3  F035         	movff	ScanIR@SensorResult+1,?_sprintf+5
  3595  001054  C0A4  F036         	movff	ScanIR@SensorResult+2,?_sprintf+6
  3596  001058  C0A5  F037         	movff	ScanIR@SensorResult+3,?_sprintf+7
  3597  00105C  EC49  F004         	call	_sprintf	;wreg free
  3598                           
  3599                           ;Movement.c: 63: LCD_String(buf);
  3600  001060  0E78               	movlw	low ScanIR@buf
  3601  001062  6E2A               	movwf	LCD_String@string,c
  3602  001064  0E00               	movlw	high ScanIR@buf
  3603  001066  6E2B               	movwf	LCD_String@string+1,c
  3604  001068  ECEE  F00A         	call	_LCD_String	;wreg free
  3605                           
  3606                           ;Movement.c: 67: if ((SensorResult[0]>DirectionMoveThreshold)&&(SensorResult[1]>Directio
      +                          nMoveThreshold)) {
  3607  00106C  0100               	movlb	0	; () banked
  3608  00106E  51A2               	movf	ScanIR@SensorResult& (0+255),w,b
  3609  001070  0100               	movlb	0	; () banked
  3610  001072  5DA0               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3611  001074  0100               	movlb	0	; () banked
  3612  001076  51A3               	movf	(ScanIR@SensorResult+1)& (0+255),w,b
  3613  001078  0100               	movlb	0	; () banked
  3614  00107A  59A1               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3615  00107C  B0D8               	btfsc	status,0,c
  3616  00107E  D00C               	goto	l3050
  3617                           
  3618                           ; BSR set to: 0
  3619  001080  0100               	movlb	0	; () banked
  3620  001082  51A4               	movf	(ScanIR@SensorResult+2)& (0+255),w,b
  3621  001084  0100               	movlb	0	; () banked
  3622  001086  5DA0               	subwf	ScanIR@DirectionMoveThreshold& (0+255),w,b
  3623  001088  0100               	movlb	0	; () banked
  3624  00108A  51A5               	movf	(ScanIR@SensorResult+3)& (0+255),w,b
  3625  00108C  0100               	movlb	0	; () banked
  3626  00108E  59A1               	subwfb	(ScanIR@DirectionMoveThreshold+1)& (0+255),w,b
  3627  001090  B0D8               	btfsc	status,0,c
  3628  001092  D002               	goto	l3050
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;Movement.c: 68: return 2;
  3632  001094  0E02               	movlw	2
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;Movement.c: 69: } else {
  3636                           
  3637                           ; BSR set to: 0
  3638  001096  0012               	return	
  3639  001098                     l3050:
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;Movement.c: 70: stop(mL,mR);
  3643  001098  C06D  F062         	movff	ScanIR@mL,stop@mL
  3644  00109C  C06E  F063         	movff	ScanIR@mL+1,stop@mL+1
  3645  0010A0  C06F  F064         	movff	ScanIR@mR,stop@mR
  3646  0010A4  C070  F065         	movff	ScanIR@mR+1,stop@mR+1
  3647  0010A8  EC73  F009         	call	_stop	;wreg free
  3648                           
  3649                           ;Movement.c: 71: return 0;
  3650  0010AC  0E00               	movlw	0
  3651  0010AE  0012               	return	
  3652  0010B0                     __end_of_ScanIR:
  3653                           	opt stack 0
  3654                           tblptru	equ	0xFF8
  3655                           prodh	equ	0xFF4
  3656                           prodl	equ	0xFF3
  3657                           intcon	equ	0xFF2
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           indf1	equ	0xFE7
  3661                           fsr1h	equ	0xFE2
  3662                           fsr1l	equ	0xFE1
  3663                           indf2	equ	0xFDF
  3664                           fsr2h	equ	0xFDA
  3665                           fsr2l	equ	0xFD9
  3666                           status	equ	0xFD8
  3667                           
  3668 ;; *************** function _stop *****************
  3669 ;; Defined at:
  3670 ;;		line 67 in file "dc_motor.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  mL              2    2[BANK0 ] PTR struct DC_motor
  3673 ;;		 -> main@mL(9), 
  3674 ;;  mR              2    4[BANK0 ] PTR struct DC_motor
  3675 ;;		 -> main@mR(9), 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;		None               void
  3680 ;; Registers used:
  3681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3687 ;;      Params:         0       4       0       0
  3688 ;;      Locals:         0       0       0       0
  3689 ;;      Temps:          0       0       0       0
  3690 ;;      Totals:         0       4       0       0
  3691 ;;Total ram usage:        4 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    5
  3694 ;; This function calls:
  3695 ;;		_setMotorPWM
  3696 ;; This function is called by:
  3697 ;;		_turnLeft
  3698 ;;		_turnRight
  3699 ;;		_ScanIR
  3700 ;;		_ScanWithRange
  3701 ;;		_main
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text14
  3706  0012E6                     __ptext14:
  3707                           	opt stack 0
  3708  0012E6                     _stop:
  3709                           	opt stack 25
  3710                           
  3711                           ;dc_motor.c: 70: while(mL->power>0 || mR->power>0){
  3712                           
  3713                           ;incstack = 0
  3714  0012E6  D028               	goto	l2860
  3715  0012E8                     l2846:
  3716                           
  3717                           ;dc_motor.c: 71: if(mL->power>0){
  3718  0012E8  C062  FFD9         	movff	stop@mL,fsr2l
  3719  0012EC  C063  FFDA         	movff	stop@mL+1,fsr2h
  3720  0012F0  50DF               	movf	indf2,w,c
  3721  0012F2  B4D8               	btfsc	status,2,c
  3722  0012F4  D005               	goto	l2850
  3723                           
  3724                           ;dc_motor.c: 72: mL->power--;
  3725  0012F6  C062  FFD9         	movff	stop@mL,fsr2l
  3726  0012FA  C063  FFDA         	movff	stop@mL+1,fsr2h
  3727  0012FE  06DF               	decf	indf2,f,c
  3728  001300                     l2850:
  3729                           
  3730                           ;dc_motor.c: 73: }
  3731                           ;dc_motor.c: 74: if(mR->power>0){
  3732  001300  C064  FFD9         	movff	stop@mR,fsr2l
  3733  001304  C065  FFDA         	movff	stop@mR+1,fsr2h
  3734  001308  50DF               	movf	indf2,w,c
  3735  00130A  B4D8               	btfsc	status,2,c
  3736  00130C  D005               	goto	l2854
  3737                           
  3738                           ;dc_motor.c: 75: mR->power--;
  3739  00130E  C064  FFD9         	movff	stop@mR,fsr2l
  3740  001312  C065  FFDA         	movff	stop@mR+1,fsr2h
  3741  001316  06DF               	decf	indf2,f,c
  3742  001318                     l2854:
  3743                           
  3744                           ;dc_motor.c: 76: }
  3745                           ;dc_motor.c: 77: setMotorPWM(mL);
  3746  001318  C062  F032         	movff	stop@mL,setMotorPWM@m
  3747  00131C  C063  F033         	movff	stop@mL+1,setMotorPWM@m+1
  3748  001320  EC3E  F007         	call	_setMotorPWM	;wreg free
  3749                           
  3750                           ;dc_motor.c: 78: setMotorPWM(mR);
  3751  001324  C064  F032         	movff	stop@mR,setMotorPWM@m
  3752  001328  C065  F033         	movff	stop@mR+1,setMotorPWM@m+1
  3753  00132C  EC3E  F007         	call	_setMotorPWM	;wreg free
  3754                           
  3755                           ;dc_motor.c: 79: _delay((unsigned long)((50)*(8000000/4000000.0)));
  3756  001330  0E21               	movlw	33
  3757  001332                     u3047:
  3758  001332  2EE8               	decfsz	wreg,f,c
  3759  001334  D7FE               	goto	u3047
  3760  001336  F000               	nop	
  3761  001338                     l2860:
  3762  001338  C062  FFD9         	movff	stop@mL,fsr2l
  3763  00133C  C063  FFDA         	movff	stop@mL+1,fsr2h
  3764  001340  50DF               	movf	indf2,w,c
  3765  001342  A4D8               	btfss	status,2,c
  3766  001344  D7D1               	goto	l2846
  3767  001346  C064  FFD9         	movff	stop@mR,fsr2l
  3768  00134A  C065  FFDA         	movff	stop@mR+1,fsr2h
  3769  00134E  50DF               	movf	indf2,w,c
  3770  001350  A4D8               	btfss	status,2,c
  3771  001352  D7CA               	goto	l2846
  3772                           
  3773                           ;dc_motor.c: 80: }
  3774                           ;dc_motor.c: 81: mL->direction=1;
  3775  001354  0100               	movlb	0	; () banked
  3776  001356  EE20 F001          	lfsr	2,1
  3777  00135A  5162               	movf	stop@mL& (0+255),w,b
  3778  00135C  26D9               	addwf	fsr2l,f,c
  3779  00135E  5163               	movf	(stop@mL+1)& (0+255),w,b
  3780  001360  22DA               	addwfc	fsr2h,f,c
  3781  001362  0E01               	movlw	1
  3782  001364  6EDF               	movwf	indf2,c
  3783                           
  3784                           ;dc_motor.c: 82: mR->direction=1;
  3785  001366  0100               	movlb	0	; () banked
  3786  001368  EE20 F001          	lfsr	2,1
  3787  00136C  5164               	movf	stop@mR& (0+255),w,b
  3788  00136E  26D9               	addwf	fsr2l,f,c
  3789  001370  5165               	movf	(stop@mR+1)& (0+255),w,b
  3790  001372  22DA               	addwfc	fsr2h,f,c
  3791  001374  0E01               	movlw	1
  3792  001376  6EDF               	movwf	indf2,c
  3793                           
  3794                           ; BSR set to: 0
  3795  001378  0012               	return		;funcret
  3796  00137A                     __end_of_stop:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           indf1	equ	0xFE7
  3805                           fsr1h	equ	0xFE2
  3806                           fsr1l	equ	0xFE1
  3807                           indf2	equ	0xFDF
  3808                           fsr2h	equ	0xFDA
  3809                           fsr2l	equ	0xFD9
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _setMotorPWM *****************
  3813 ;; Defined at:
  3814 ;;		line 26 in file "dc_motor.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  m               2   49[COMRAM] PTR struct DC_motor
  3817 ;;		 -> main@mR(9), main@mL(9), 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  PWMduty         2    0[BANK0 ] int 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;		None               void
  3822 ;; Registers used:
  3823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3829 ;;      Params:         2       0       0       0
  3830 ;;      Locals:         0       2       0       0
  3831 ;;      Temps:          5       0       0       0
  3832 ;;      Totals:         7       2       0       0
  3833 ;;Total ram usage:        9 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    4
  3836 ;; This function calls:
  3837 ;;		___awdiv
  3838 ;;		___wmul
  3839 ;; This function is called by:
  3840 ;;		_stop
  3841 ;;		_fullSpeedAhead
  3842 ;;		_setMotorFullSpeed
  3843 ;;		_stopMotor
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text15
  3848  000E7C                     __ptext15:
  3849                           	opt stack 0
  3850  000E7C                     _setMotorPWM:
  3851                           	opt stack 25
  3852                           
  3853                           ;dc_motor.c: 28: int PWMduty;
  3854                           ;dc_motor.c: 30: PWMduty = (m->power*m->PWMperiod)/100;
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;incstack = 0
  3858  000E7C  C032  FFD9         	movff	setMotorPWM@m,fsr2l
  3859  000E80  C033  FFDA         	movff	setMotorPWM@m+1,fsr2h
  3860  000E84  50DF               	movf	indf2,w,c
  3861  000E86  6E34               	movwf	??_setMotorPWM& (0+255),c
  3862  000E88  5034               	movf	??_setMotorPWM,w,c
  3863  000E8A  6E24               	movwf	___wmul@multiplier,c
  3864  000E8C  6A25               	clrf	___wmul@multiplier+1,c
  3865  000E8E  EE20 F007          	lfsr	2,7
  3866  000E92  5032               	movf	setMotorPWM@m,w,c
  3867  000E94  26D9               	addwf	fsr2l,f,c
  3868  000E96  5033               	movf	setMotorPWM@m+1,w,c
  3869  000E98  22DA               	addwfc	fsr2h,f,c
  3870  000E9A  CFDE F026          	movff	postinc2,___wmul@multiplicand
  3871  000E9E  CFDD F027          	movff	postdec2,___wmul@multiplicand+1
  3872  000EA2  EC7B  F00C         	call	___wmul	;wreg free
  3873  000EA6  C024  F02A         	movff	?___wmul,___awdiv@dividend
  3874  000EAA  C025  F02B         	movff	?___wmul+1,___awdiv@dividend+1
  3875  000EAE  0E00               	movlw	0
  3876  000EB0  6E2D               	movwf	___awdiv@divisor+1,c
  3877  000EB2  0E64               	movlw	100
  3878  000EB4  6E2C               	movwf	___awdiv@divisor,c
  3879  000EB6  EC02  F00A         	call	___awdiv	;wreg free
  3880  000EBA  C02A  F060         	movff	?___awdiv,setMotorPWM@PWMduty
  3881  000EBE  C02B  F061         	movff	?___awdiv+1,setMotorPWM@PWMduty+1
  3882                           
  3883                           ;dc_motor.c: 32: if (m->direction)
  3884  000EC2  EE20 F001          	lfsr	2,1
  3885  000EC6  5032               	movf	setMotorPWM@m,w,c
  3886  000EC8  26D9               	addwf	fsr2l,f,c
  3887  000ECA  5033               	movf	setMotorPWM@m+1,w,c
  3888  000ECC  22DA               	addwfc	fsr2h,f,c
  3889  000ECE  50DF               	movf	indf2,w,c
  3890  000ED0  B4D8               	btfsc	status,2,c
  3891  000ED2  D02E               	goto	l2842
  3892                           
  3893                           ;dc_motor.c: 33: {
  3894                           ;dc_motor.c: 34: LATB=LATB|(1<<(m->dir_pin));
  3895  000ED4  EE20 F006          	lfsr	2,6
  3896  000ED8  5032               	movf	setMotorPWM@m,w,c
  3897  000EDA  26D9               	addwf	fsr2l,f,c
  3898  000EDC  5033               	movf	setMotorPWM@m+1,w,c
  3899  000EDE  22DA               	addwfc	fsr2h,f,c
  3900  000EE0  50DF               	movf	indf2,w,c
  3901  000EE2  6E34               	movwf	??_setMotorPWM& (0+255),c
  3902  000EE4  0E01               	movlw	1
  3903  000EE6  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3904  000EE8  2A34               	incf	??_setMotorPWM,f,c
  3905  000EEA  D002               	goto	u2244
  3906  000EEC                     u2245:
  3907  000EEC  90D8               	bcf	status,0,c
  3908  000EEE  3635               	rlcf	??_setMotorPWM+1,f,c
  3909  000EF0                     u2244:
  3910  000EF0  2E34               	decfsz	??_setMotorPWM,f,c
  3911  000EF2  D7FC               	goto	u2245
  3912  000EF4  5035               	movf	??_setMotorPWM+1,w,c
  3913  000EF6  108A               	iorwf	3978,w,c	;volatile
  3914  000EF8  6E8A               	movwf	3978,c	;volatile
  3915                           
  3916                           ;dc_motor.c: 35: PWMduty=m->PWMperiod-PWMduty;
  3917  000EFA  EE20 F007          	lfsr	2,7
  3918  000EFE  5032               	movf	setMotorPWM@m,w,c
  3919  000F00  26D9               	addwf	fsr2l,f,c
  3920  000F02  5033               	movf	setMotorPWM@m+1,w,c
  3921  000F04  22DA               	addwfc	fsr2h,f,c
  3922  000F06  CFDE F034          	movff	postinc2,??_setMotorPWM
  3923  000F0A  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3924  000F0E  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3925  000F12  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3926  000F16  1E36               	comf	??_setMotorPWM+2,f,c
  3927  000F18  1E37               	comf	??_setMotorPWM+3,f,c
  3928  000F1A  4A36               	infsnz	??_setMotorPWM+2,f,c
  3929  000F1C  2A37               	incf	??_setMotorPWM+3,f,c
  3930  000F1E  5034               	movf	??_setMotorPWM,w,c
  3931  000F20  2436               	addwf	??_setMotorPWM+2,w,c
  3932  000F22  0100               	movlb	0	; () banked
  3933  000F24  6F60               	movwf	setMotorPWM@PWMduty& (0+255),b
  3934  000F26  5035               	movf	??_setMotorPWM+1,w,c
  3935  000F28  2037               	addwfc	??_setMotorPWM+3,w,c
  3936  000F2A  0100               	movlb	0	; () banked
  3937  000F2C  6F61               	movwf	(setMotorPWM@PWMduty+1)& (0+255),b
  3938                           
  3939                           ;dc_motor.c: 36: }
  3940  000F2E  D014               	goto	l35
  3941  000F30                     l2842:
  3942                           
  3943                           ;dc_motor.c: 37: else
  3944                           ;dc_motor.c: 38: {
  3945                           ;dc_motor.c: 39: LATB=LATB&(~(1<<(m->dir_pin)));
  3946  000F30  EE20 F006          	lfsr	2,6
  3947  000F34  5032               	movf	setMotorPWM@m,w,c
  3948  000F36  26D9               	addwf	fsr2l,f,c
  3949  000F38  5033               	movf	setMotorPWM@m+1,w,c
  3950  000F3A  22DA               	addwfc	fsr2h,f,c
  3951  000F3C  50DF               	movf	indf2,w,c
  3952  000F3E  6E34               	movwf	??_setMotorPWM& (0+255),c
  3953  000F40  0E01               	movlw	1
  3954  000F42  6E35               	movwf	(??_setMotorPWM+1)& (0+255),c
  3955  000F44  2A34               	incf	??_setMotorPWM,f,c
  3956  000F46  D002               	goto	u2254
  3957  000F48                     u2255:
  3958  000F48  90D8               	bcf	status,0,c
  3959  000F4A  3635               	rlcf	??_setMotorPWM+1,f,c
  3960  000F4C                     u2254:
  3961  000F4C  2E34               	decfsz	??_setMotorPWM,f,c
  3962  000F4E  D7FC               	goto	u2255
  3963  000F50  5035               	movf	??_setMotorPWM+1,w,c
  3964  000F52  0AFF               	xorlw	255
  3965  000F54  148A               	andwf	3978,w,c	;volatile
  3966  000F56  6E8A               	movwf	3978,c	;volatile
  3967  000F58                     l35:
  3968                           
  3969                           ;dc_motor.c: 40: }
  3970                           ;dc_motor.c: 43: *(m->dutyLowByte)=PWMduty<<2;
  3971  000F58  EE20 F002          	lfsr	2,2
  3972  000F5C  5032               	movf	setMotorPWM@m,w,c
  3973  000F5E  26D9               	addwf	fsr2l,f,c
  3974  000F60  5033               	movf	setMotorPWM@m+1,w,c
  3975  000F62  22DA               	addwfc	fsr2h,f,c
  3976  000F64  CFDE F034          	movff	postinc2,??_setMotorPWM
  3977  000F68  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3978  000F6C  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  3979  000F70  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3980  000F74  0100               	movlb	0	; () banked
  3981  000F76  4560               	rlncf	setMotorPWM@PWMduty& (0+255),w,b
  3982  000F78  46E8               	rlncf	wreg,f,c
  3983  000F7A  0BFC               	andlw	252
  3984  000F7C  6EDF               	movwf	indf2,c
  3985                           
  3986                           ;dc_motor.c: 44: *(m->dutyHighByte)=PWMduty>>6;
  3987  000F7E  EE20 F004          	lfsr	2,4
  3988  000F82  5032               	movf	setMotorPWM@m,w,c
  3989  000F84  26D9               	addwf	fsr2l,f,c
  3990  000F86  5033               	movf	setMotorPWM@m+1,w,c
  3991  000F88  22DA               	addwfc	fsr2h,f,c
  3992  000F8A  CFDE F034          	movff	postinc2,??_setMotorPWM
  3993  000F8E  CFDD F035          	movff	postdec2,??_setMotorPWM+1
  3994  000F92  C034  FFD9         	movff	??_setMotorPWM,fsr2l
  3995  000F96  C035  FFDA         	movff	??_setMotorPWM+1,fsr2h
  3996  000F9A  C060  F036         	movff	setMotorPWM@PWMduty,??_setMotorPWM+2
  3997  000F9E  C061  F037         	movff	setMotorPWM@PWMduty+1,??_setMotorPWM+3
  3998  000FA2  0E06               	movlw	6
  3999  000FA4  6E38               	movwf	(??_setMotorPWM+4)& (0+255),c
  4000  000FA6                     u2265:
  4001  000FA6  3437               	rlcf	??_setMotorPWM+3,w,c
  4002  000FA8  3237               	rrcf	??_setMotorPWM+3,f,c
  4003  000FAA  3236               	rrcf	??_setMotorPWM+2,f,c
  4004  000FAC  2E38               	decfsz	(??_setMotorPWM+4)& (0+255),f,c
  4005  000FAE  D7FB               	goto	u2265
  4006  000FB0  5036               	movf	??_setMotorPWM+2,w,c
  4007  000FB2  6EDF               	movwf	indf2,c
  4008                           
  4009                           ; BSR set to: 0
  4010  000FB4  0012               	return		;funcret
  4011  000FB6                     __end_of_setMotorPWM:
  4012                           	opt stack 0
  4013                           tblptru	equ	0xFF8
  4014                           prodh	equ	0xFF4
  4015                           prodl	equ	0xFF3
  4016                           intcon	equ	0xFF2
  4017                           postinc0	equ	0xFEE
  4018                           wreg	equ	0xFE8
  4019                           indf1	equ	0xFE7
  4020                           fsr1h	equ	0xFE2
  4021                           fsr1l	equ	0xFE1
  4022                           indf2	equ	0xFDF
  4023                           postinc2	equ	0xFDE
  4024                           postdec2	equ	0xFDD
  4025                           fsr2h	equ	0xFDA
  4026                           fsr2l	equ	0xFD9
  4027                           status	equ	0xFD8
  4028                           
  4029 ;; *************** function ___awdiv *****************
  4030 ;; Defined at:
  4031 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;  dividend        2   41[COMRAM] int 
  4034 ;;  divisor         2   43[COMRAM] int 
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;  quotient        2   47[COMRAM] int 
  4037 ;;  sign            1   46[COMRAM] unsigned char 
  4038 ;;  counter         1   45[COMRAM] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  2   41[COMRAM] int 
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4048 ;;      Params:         4       0       0       0
  4049 ;;      Locals:         4       0       0       0
  4050 ;;      Temps:          0       0       0       0
  4051 ;;      Totals:         8       0       0       0
  4052 ;;Total ram usage:        8 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    3
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_setMotorPWM
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text16
  4063  001404                     __ptext16:
  4064                           	opt stack 0
  4065  001404                     ___awdiv:
  4066                           	opt stack 25
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;incstack = 0
  4070  001404  0E00               	movlw	0
  4071  001406  6E2F               	movwf	___awdiv@sign,c
  4072  001408  AE2D               	btfss	___awdiv@divisor+1,7,c
  4073  00140A  D006               	goto	l2800
  4074  00140C  6C2C               	negf	___awdiv@divisor,c
  4075  00140E  1E2D               	comf	___awdiv@divisor+1,f,c
  4076  001410  B0D8               	btfsc	status,0,c
  4077  001412  2A2D               	incf	___awdiv@divisor+1,f,c
  4078  001414  0E01               	movlw	1
  4079  001416  6E2F               	movwf	___awdiv@sign,c
  4080  001418                     l2800:
  4081  001418  AE2B               	btfss	___awdiv@dividend+1,7,c
  4082  00141A  D006               	goto	l2806
  4083  00141C  6C2A               	negf	___awdiv@dividend,c
  4084  00141E  1E2B               	comf	___awdiv@dividend+1,f,c
  4085  001420  B0D8               	btfsc	status,0,c
  4086  001422  2A2B               	incf	___awdiv@dividend+1,f,c
  4087  001424  0E01               	movlw	1
  4088  001426  1A2F               	xorwf	___awdiv@sign,f,c
  4089  001428                     l2806:
  4090  001428  0E00               	movlw	0
  4091  00142A  6E31               	movwf	___awdiv@quotient+1,c
  4092  00142C  0E00               	movlw	0
  4093  00142E  6E30               	movwf	___awdiv@quotient,c
  4094  001430  502C               	movf	___awdiv@divisor,w,c
  4095  001432  102D               	iorwf	___awdiv@divisor+1,w,c
  4096  001434  B4D8               	btfsc	status,2,c
  4097  001436  D01C               	goto	l2828
  4098  001438  0E01               	movlw	1
  4099  00143A  6E2E               	movwf	___awdiv@counter,c
  4100  00143C  D004               	goto	l2814
  4101  00143E                     l2812:
  4102  00143E  90D8               	bcf	status,0,c
  4103  001440  362C               	rlcf	___awdiv@divisor,f,c
  4104  001442  362D               	rlcf	___awdiv@divisor+1,f,c
  4105  001444  2A2E               	incf	___awdiv@counter,f,c
  4106  001446                     l2814:
  4107  001446  AE2D               	btfss	___awdiv@divisor+1,7,c
  4108  001448  D7FA               	goto	l2812
  4109  00144A                     l2816:
  4110  00144A  90D8               	bcf	status,0,c
  4111  00144C  3630               	rlcf	___awdiv@quotient,f,c
  4112  00144E  3631               	rlcf	___awdiv@quotient+1,f,c
  4113  001450  502C               	movf	___awdiv@divisor,w,c
  4114  001452  5C2A               	subwf	___awdiv@dividend,w,c
  4115  001454  502D               	movf	___awdiv@divisor+1,w,c
  4116  001456  582B               	subwfb	___awdiv@dividend+1,w,c
  4117  001458  A0D8               	btfss	status,0,c
  4118  00145A  D005               	goto	l2824
  4119  00145C  502C               	movf	___awdiv@divisor,w,c
  4120  00145E  5E2A               	subwf	___awdiv@dividend,f,c
  4121  001460  502D               	movf	___awdiv@divisor+1,w,c
  4122  001462  5A2B               	subwfb	___awdiv@dividend+1,f,c
  4123  001464  8030               	bsf	___awdiv@quotient,0,c
  4124  001466                     l2824:
  4125  001466  90D8               	bcf	status,0,c
  4126  001468  322D               	rrcf	___awdiv@divisor+1,f,c
  4127  00146A  322C               	rrcf	___awdiv@divisor,f,c
  4128  00146C  2E2E               	decfsz	___awdiv@counter,f,c
  4129  00146E  D7ED               	goto	l2816
  4130  001470                     l2828:
  4131  001470  502F               	movf	___awdiv@sign,w,c
  4132  001472  B4D8               	btfsc	status,2,c
  4133  001474  D004               	goto	l2832
  4134  001476  6C30               	negf	___awdiv@quotient,c
  4135  001478  1E31               	comf	___awdiv@quotient+1,f,c
  4136  00147A  B0D8               	btfsc	status,0,c
  4137  00147C  2A31               	incf	___awdiv@quotient+1,f,c
  4138  00147E                     l2832:
  4139  00147E  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  4140  001482  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  4141  001486  0012               	return	
  4142  001488                     __end_of___awdiv:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           prodh	equ	0xFF4
  4146                           prodl	equ	0xFF3
  4147                           intcon	equ	0xFF2
  4148                           postinc0	equ	0xFEE
  4149                           wreg	equ	0xFE8
  4150                           indf1	equ	0xFE7
  4151                           fsr1h	equ	0xFE2
  4152                           fsr1l	equ	0xFE1
  4153                           indf2	equ	0xFDF
  4154                           postinc2	equ	0xFDE
  4155                           postdec2	equ	0xFDD
  4156                           fsr2h	equ	0xFDA
  4157                           fsr2l	equ	0xFD9
  4158                           status	equ	0xFD8
  4159                           
  4160 ;; *************** function _sprintf *****************
  4161 ;; Defined at:
  4162 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;  sp              2   47[COMRAM] PTR unsigned char 
  4165 ;;		 -> main@buf(40), ScanWithRange@buf(40), ScanIR@buf(40), 
  4166 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4167 ;;		 -> STR_6(17), STR_4(16), STR_2(16), 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  tmpval          4    0        struct .
  4170 ;;  cp              3    0        PTR const unsigned char 
  4171 ;;  width           2   10[BANK0 ] int 
  4172 ;;  val             2    7[BANK0 ] unsigned int 
  4173 ;;  ap              2    4[BANK0 ] PTR void [1]
  4174 ;;		 -> ?_sprintf(2), 
  4175 ;;  len             2    0        unsigned int 
  4176 ;;  c               1   12[BANK0 ] char 
  4177 ;;  flag            1    9[BANK0 ] unsigned char 
  4178 ;;  prec            1    6[BANK0 ] char 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  2   47[COMRAM] int 
  4181 ;; Registers used:
  4182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4188 ;;      Params:         8       0       0       0
  4189 ;;      Locals:         0       9       0       0
  4190 ;;      Temps:          0       4       0       0
  4191 ;;      Totals:         8      13       0       0
  4192 ;;Total ram usage:       21 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    4
  4195 ;; This function calls:
  4196 ;;		___lwdiv
  4197 ;;		___lwmod
  4198 ;;		___wmul
  4199 ;;		_isdigit
  4200 ;; This function is called by:
  4201 ;;		_ScanIR
  4202 ;;		_ScanWithRange
  4203 ;;		_main
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text17
  4208  000892                     __ptext17:
  4209                           	opt stack 0
  4210  000892                     _sprintf:
  4211                           	opt stack 26
  4212                           
  4213                           ;doprnt.c: 494: va_list ap;
  4214                           ;doprnt.c: 499: signed char c;
  4215                           ;doprnt.c: 501: int width;
  4216                           ;doprnt.c: 506: signed char prec;
  4217                           ;doprnt.c: 508: unsigned char flag;
  4218                           ;doprnt.c: 523: union {
  4219                           ;doprnt.c: 524: unsigned long vd;
  4220                           ;doprnt.c: 525: double integ;
  4221                           ;doprnt.c: 526: } tmpval;
  4222                           ;doprnt.c: 528: unsigned int val;
  4223                           ;doprnt.c: 529: unsigned len;
  4224                           ;doprnt.c: 530: const char * cp;
  4225                           ;doprnt.c: 533: *ap = __va_start();
  4226                           
  4227                           ;incstack = 0
  4228  000892  0E34               	movlw	low (?_sprintf+4)
  4229  000894  0100               	movlb	0	; () banked
  4230  000896  6F64               	movwf	sprintf@ap& (0+255),b
  4231  000898  0E00               	movlw	high (?_sprintf+4)
  4232  00089A  0100               	movlb	0	; () banked
  4233  00089C  6F65               	movwf	(sprintf@ap+1)& (0+255),b
  4234                           
  4235                           ;doprnt.c: 536: while(c = *f++) {
  4236  00089E  D168               	goto	l3004
  4237  0008A0                     l2898:
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;doprnt.c: 538: if(c != '%')
  4241  0008A0  0E25               	movlw	37
  4242  0008A2  0100               	movlb	0	; () banked
  4243  0008A4  196C               	xorwf	sprintf@c& (0+255),w,b
  4244  0008A6  B4D8               	btfsc	status,2,c
  4245  0008A8  D009               	goto	l2904
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;doprnt.c: 540: {
  4249                           ;doprnt.c: 541: ((*sp++ = (c)));
  4250  0008AA  C030  FFD9         	movff	sprintf@sp,fsr2l
  4251  0008AE  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4252  0008B2  C06C  FFDF         	movff	sprintf@c,indf2
  4253                           
  4254                           ; BSR set to: 0
  4255  0008B6  4A30               	infsnz	sprintf@sp,f,c
  4256  0008B8  2A31               	incf	sprintf@sp+1,f,c
  4257                           
  4258                           ;doprnt.c: 542: continue;
  4259  0008BA  D15A               	goto	l3004
  4260  0008BC                     l2904:
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;doprnt.c: 543: }
  4264                           ;doprnt.c: 546: width = 0;
  4265  0008BC  0E00               	movlw	0
  4266  0008BE  0100               	movlb	0	; () banked
  4267  0008C0  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4268  0008C2  0E00               	movlw	0
  4269  0008C4  6F6A               	movwf	sprintf@width& (0+255),b
  4270                           
  4271                           ;doprnt.c: 548: flag = 0;
  4272  0008C6  0E00               	movlw	0
  4273  0008C8  0100               	movlb	0	; () banked
  4274  0008CA  6F69               	movwf	sprintf@flag& (0+255),b
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;doprnt.c: 551: switch(*f) {
  4278                           
  4279                           ;doprnt.c: 550: for(;;) {
  4280  0008CC  D004               	goto	l2910
  4281  0008CE                     l2906:
  4282                           
  4283                           ;doprnt.c: 580: flag |= 0x04;
  4284  0008CE  0100               	movlb	0	; () banked
  4285  0008D0  8569               	bsf	sprintf@flag& (0+255),2,b
  4286                           
  4287                           ;doprnt.c: 581: f++;
  4288  0008D2  4A32               	infsnz	sprintf@f,f,c
  4289  0008D4  2A33               	incf	sprintf@f+1,f,c
  4290  0008D6                     l2910:
  4291  0008D6  C032  FFF6         	movff	sprintf@f,tblptrl
  4292  0008DA  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4293  0008DE                     	if	0	;tblptru may be non-zero
  4294  0008DE                     	endif
  4295  0008DE                     	if	0	;tblptru may be non-zero
  4296  0008DE                     	endif
  4297  0008DE  0008               	tblrd		*
  4298  0008E0  50F5               	movf	tablat,w,c
  4299                           
  4300                           ; Switch size 1, requested type "space"
  4301                           ; Number of cases is 1, Range of values is 48 to 48
  4302                           ; switch strategies available:
  4303                           ; Name         Instructions Cycles
  4304                           ; simple_byte            4     3 (average)
  4305                           ;	Chosen strategy is simple_byte
  4306  0008E2  0A30               	xorlw	48	; case 48
  4307  0008E4  B4D8               	btfsc	status,2,c
  4308  0008E6  D7F3               	goto	l2906
  4309                           
  4310                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4311                           
  4312                           ;doprnt.c: 586: }
  4313                           
  4314                           ;doprnt.c: 585: break;
  4315  0008E8  C032  FFF6         	movff	sprintf@f,tblptrl
  4316  0008EC  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4317  0008F0                     	if	0	;tblptru may be non-zero
  4318  0008F0                     	endif
  4319  0008F0                     	if	0	;tblptru may be non-zero
  4320  0008F0                     	endif
  4321  0008F0  0008               	tblrd		*
  4322  0008F2  50F5               	movf	tablat,w,c
  4323  0008F4  EC9F  F00C         	call	_isdigit
  4324  0008F8  A0D8               	btfss	status,0,c
  4325  0008FA  D03E               	goto	l2926
  4326                           
  4327                           ;doprnt.c: 598: width = 0;
  4328  0008FC  0E00               	movlw	0
  4329  0008FE  0100               	movlb	0	; () banked
  4330  000900  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4331  000902  0E00               	movlw	0
  4332  000904  6F6A               	movwf	sprintf@width& (0+255),b
  4333  000906                     l2916:
  4334                           
  4335                           ;doprnt.c: 600: width *= 10;
  4336  000906  C06A  F024         	movff	sprintf@width,___wmul@multiplier
  4337  00090A  C06B  F025         	movff	sprintf@width+1,___wmul@multiplier+1
  4338  00090E  0E00               	movlw	0
  4339  000910  6E27               	movwf	___wmul@multiplicand+1,c
  4340  000912  0E0A               	movlw	10
  4341  000914  6E26               	movwf	___wmul@multiplicand,c
  4342  000916  EC7B  F00C         	call	___wmul	;wreg free
  4343  00091A  C024  F06A         	movff	?___wmul,sprintf@width
  4344  00091E  C025  F06B         	movff	?___wmul+1,sprintf@width+1
  4345                           
  4346                           ;doprnt.c: 601: width += *f++ - '0';
  4347  000922  0ED0               	movlw	208
  4348  000924  0100               	movlb	0	; () banked
  4349  000926  6F60               	movwf	??_sprintf& (0+255),b
  4350  000928  0EFF               	movlw	255
  4351  00092A  0100               	movlb	0	; () banked
  4352  00092C  6F61               	movwf	(??_sprintf+1)& (0+255),b
  4353  00092E  C032  FFF6         	movff	sprintf@f,tblptrl
  4354  000932  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4355  000936                     	if	0	;tblptru may be non-zero
  4356  000936                     	endif
  4357  000936                     	if	0	;tblptru may be non-zero
  4358  000936                     	endif
  4359  000936  0008               	tblrd		*
  4360  000938  50F5               	movf	tablat,w,c
  4361  00093A  0100               	movlb	0	; () banked
  4362  00093C  6F62               	movwf	(??_sprintf+2)& (0+255),b
  4363  00093E  6B63               	clrf	(??_sprintf+3)& (0+255),b
  4364  000940  0100               	movlb	0	; () banked
  4365  000942  5160               	movf	??_sprintf& (0+255),w,b
  4366  000944  0100               	movlb	0	; () banked
  4367  000946  2762               	addwf	(??_sprintf+2)& (0+255),f,b
  4368  000948  0100               	movlb	0	; () banked
  4369  00094A  5161               	movf	(??_sprintf+1)& (0+255),w,b
  4370  00094C  0100               	movlb	0	; () banked
  4371  00094E  2363               	addwfc	(??_sprintf+3)& (0+255),f,b
  4372  000950  0100               	movlb	0	; () banked
  4373  000952  5162               	movf	(??_sprintf+2)& (0+255),w,b
  4374  000954  0100               	movlb	0	; () banked
  4375  000956  276A               	addwf	sprintf@width& (0+255),f,b
  4376  000958  0100               	movlb	0	; () banked
  4377  00095A  5163               	movf	(??_sprintf+3)& (0+255),w,b
  4378  00095C  0100               	movlb	0	; () banked
  4379  00095E  236B               	addwfc	(sprintf@width+1)& (0+255),f,b
  4380                           
  4381                           ; BSR set to: 0
  4382  000960  4A32               	infsnz	sprintf@f,f,c
  4383  000962  2A33               	incf	sprintf@f+1,f,c
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4387  000964  C032  FFF6         	movff	sprintf@f,tblptrl
  4388  000968  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4389  00096C                     	if	0	;tblptru may be non-zero
  4390  00096C                     	endif
  4391  00096C                     	if	0	;tblptru may be non-zero
  4392  00096C                     	endif
  4393  00096C  0008               	tblrd		*
  4394  00096E  50F5               	movf	tablat,w,c
  4395  000970  EC9F  F00C         	call	_isdigit
  4396  000974  B0D8               	btfsc	status,0,c
  4397  000976  D7C7               	goto	l2916
  4398  000978                     l2926:
  4399  000978  C032  FFF6         	movff	sprintf@f,tblptrl
  4400  00097C  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4401  000980  4A32               	infsnz	sprintf@f,f,c
  4402  000982  2A33               	incf	sprintf@f+1,f,c
  4403  000984                     	if	0	;tblptru may be non-zero
  4404  000984                     	endif
  4405  000984                     	if	0	;tblptru may be non-zero
  4406  000984                     	endif
  4407  000984  0008               	tblrd		*
  4408  000986  CFF5 F06C          	movff	tablat,sprintf@c
  4409  00098A  0100               	movlb	0	; () banked
  4410  00098C  516C               	movf	sprintf@c& (0+255),w,b
  4411                           
  4412                           ; Switch size 1, requested type "space"
  4413                           ; Number of cases is 3, Range of values is 0 to 105
  4414                           ; switch strategies available:
  4415                           ; Name         Instructions Cycles
  4416                           ; simple_byte           10     6 (average)
  4417                           ;	Chosen strategy is simple_byte
  4418  00098E  0A00               	xorlw	0	; case 0
  4419  000990  B4D8               	btfsc	status,2,c
  4420  000992  D0FB               	goto	l3006
  4421  000994  0A64               	xorlw	100	; case 100
  4422  000996  B4D8               	btfsc	status,2,c
  4423  000998  D003               	goto	l2928
  4424  00099A  0A0D               	xorlw	13	; case 105
  4425  00099C  A4D8               	btfss	status,2,c
  4426  00099E  D0E8               	goto	l3004
  4427  0009A0                     l2928:
  4428                           
  4429                           ;doprnt.c: 1253: {
  4430                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4431  0009A0  C064  FFD9         	movff	sprintf@ap,fsr2l
  4432  0009A4  C065  FFDA         	movff	sprintf@ap+1,fsr2h
  4433  0009A8  CFDE F067          	movff	postinc2,sprintf@val
  4434  0009AC  CFDD F068          	movff	postdec2,sprintf@val+1
  4435  0009B0  0E02               	movlw	2
  4436  0009B2  0100               	movlb	0	; () banked
  4437  0009B4  2764               	addwf	sprintf@ap& (0+255),f,b
  4438  0009B6  0E00               	movlw	0
  4439  0009B8  2365               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;doprnt.c: 1261: if((int)val < 0) {
  4443  0009BA  0100               	movlb	0	; () banked
  4444  0009BC  AF68               	btfss	(sprintf@val+1)& (0+255),7,b
  4445  0009BE  D008               	goto	l2938
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;doprnt.c: 1262: flag |= 0x03;
  4449  0009C0  0E03               	movlw	3
  4450  0009C2  0100               	movlb	0	; () banked
  4451  0009C4  1369               	iorwf	sprintf@flag& (0+255),f,b
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;doprnt.c: 1263: val = -val;
  4455  0009C6  0100               	movlb	0	; () banked
  4456  0009C8  6D67               	negf	sprintf@val& (0+255),b
  4457  0009CA  1F68               	comf	(sprintf@val+1)& (0+255),f,b
  4458  0009CC  B0D8               	btfsc	status,0,c
  4459  0009CE  2B68               	incf	(sprintf@val+1)& (0+255),f,b
  4460  0009D0                     l2938:
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;doprnt.c: 1264: }
  4464                           ;doprnt.c: 1266: }
  4465                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4466  0009D0  0E01               	movlw	1
  4467  0009D2  0100               	movlb	0	; () banked
  4468  0009D4  6F6C               	movwf	sprintf@c& (0+255),b
  4469  0009D6                     l2940:
  4470                           
  4471                           ; BSR set to: 0
  4472  0009D6  0E05               	movlw	5
  4473  0009D8  0100               	movlb	0	; () banked
  4474  0009DA  196C               	xorwf	sprintf@c& (0+255),w,b
  4475  0009DC  B4D8               	btfsc	status,2,c
  4476  0009DE  D016               	goto	l2952
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;doprnt.c: 1306: if(val < dpowers[c])
  4480                           
  4481                           ; BSR set to: 0
  4482                           
  4483                           ; BSR set to: 0
  4484  0009E0  0100               	movlb	0	; () banked
  4485  0009E2  516C               	movf	sprintf@c& (0+255),w,b
  4486  0009E4  0D02               	mullw	2
  4487  0009E6  0E01               	movlw	low _dpowers
  4488  0009E8  24F3               	addwf	prodl,w,c
  4489  0009EA  6EF6               	movwf	tblptrl,c
  4490  0009EC  0E03               	movlw	high _dpowers
  4491  0009EE  20F4               	addwfc	prodh,w,c
  4492  0009F0  6EF7               	movwf	tblptrh,c
  4493  0009F2                     	if	0	;There are less than 3 active tblptr bytes
  4494  0009F2                     	endif
  4495  0009F2  0009               	tblrd		*+
  4496  0009F4  50F5               	movf	tablat,w,c
  4497  0009F6  0100               	movlb	0	; () banked
  4498  0009F8  5D67               	subwf	sprintf@val& (0+255),w,b
  4499  0009FA  0009               	tblrd		*+
  4500  0009FC  50F5               	movf	tablat,w,c
  4501  0009FE  0100               	movlb	0	; () banked
  4502  000A00  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  4503  000A02  A0D8               	btfss	status,0,c
  4504  000A04  D003               	goto	l2952
  4505                           
  4506                           ; BSR set to: 0
  4507                           
  4508                           ; BSR set to: 0
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;doprnt.c: 1307: break;
  4512  000A06  0100               	movlb	0	; () banked
  4513  000A08  2B6C               	incf	sprintf@c& (0+255),f,b
  4514  000A0A  D7E5               	goto	l2940
  4515  000A0C                     l2952:
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4519  000A0C  0100               	movlb	0	; () banked
  4520  000A0E  516A               	movf	sprintf@width& (0+255),w,b
  4521  000A10  0100               	movlb	0	; () banked
  4522  000A12  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4523  000A14  B4D8               	btfsc	status,2,c
  4524  000A16  D00B               	goto	l2958
  4525                           
  4526                           ; BSR set to: 0
  4527  000A18  C069  F060         	movff	sprintf@flag,??_sprintf
  4528  000A1C  0E03               	movlw	3
  4529  000A1E  0100               	movlb	0	; () banked
  4530  000A20  1760               	andwf	??_sprintf& (0+255),f,b
  4531  000A22  B4D8               	btfsc	status,2,c
  4532  000A24  D004               	goto	l2958
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;doprnt.c: 1346: width--;
  4536  000A26  0100               	movlb	0	; () banked
  4537  000A28  076A               	decf	sprintf@width& (0+255),f,b
  4538  000A2A  A0D8               	btfss	status,0,c
  4539  000A2C  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4540  000A2E                     l2958:
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;doprnt.c: 1381: if(width > c)
  4544  000A2E  0E80               	movlw	128
  4545  000A30  0100               	movlb	0	; () banked
  4546  000A32  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4547  000A34  0E7F               	movlw	127
  4548  000A36  0100               	movlb	0	; () banked
  4549  000A38  6F60               	movwf	??_sprintf& (0+255),b
  4550  000A3A  0100               	movlb	0	; () banked
  4551  000A3C  516A               	movf	sprintf@width& (0+255),w,b
  4552  000A3E  0100               	movlb	0	; () banked
  4553  000A40  5D6C               	subwf	sprintf@c& (0+255),w,b
  4554  000A42  0100               	movlb	0	; () banked
  4555  000A44  516B               	movf	(sprintf@width+1)& (0+255),w,b
  4556  000A46  0A80               	xorlw	128
  4557  000A48  0100               	movlb	0	; () banked
  4558  000A4A  5960               	subwfb	??_sprintf& (0+255),w,b
  4559  000A4C  B0D8               	btfsc	status,0,c
  4560  000A4E  D00B               	goto	l2962
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;doprnt.c: 1382: width -= c;
  4564  000A50  0100               	movlb	0	; () banked
  4565  000A52  516C               	movf	sprintf@c& (0+255),w,b
  4566  000A54  0100               	movlb	0	; () banked
  4567  000A56  5F6A               	subwf	sprintf@width& (0+255),f,b
  4568  000A58  0E00               	movlw	0
  4569  000A5A  0100               	movlb	0	; () banked
  4570  000A5C  BF6C               	btfsc	sprintf@c& (0+255),7,b
  4571  000A5E  0EFF               	movlw	255
  4572  000A60  0100               	movlb	0	; () banked
  4573  000A62  5B6B               	subwfb	(sprintf@width+1)& (0+255),f,b
  4574  000A64  D005               	goto	l2964
  4575  000A66                     l2962:
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;doprnt.c: 1383: else
  4579                           ;doprnt.c: 1384: width = 0;
  4580  000A66  0E00               	movlw	0
  4581  000A68  0100               	movlb	0	; () banked
  4582  000A6A  6F6B               	movwf	(sprintf@width+1)& (0+255),b
  4583  000A6C  0E00               	movlw	0
  4584  000A6E  6F6A               	movwf	sprintf@width& (0+255),b
  4585  000A70                     l2964:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;doprnt.c: 1387: if(flag & 0x04) {
  4589  000A70  0100               	movlb	0	; () banked
  4590  000A72  A569               	btfss	sprintf@flag& (0+255),2,b
  4591  000A74  D022               	goto	l2980
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;doprnt.c: 1392: if(flag & 0x03)
  4595  000A76  C069  F060         	movff	sprintf@flag,??_sprintf
  4596  000A7A  0E03               	movlw	3
  4597  000A7C  0100               	movlb	0	; () banked
  4598  000A7E  1760               	andwf	??_sprintf& (0+255),f,b
  4599  000A80  B4D8               	btfsc	status,2,c
  4600  000A82  D008               	goto	l2972
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  4604  000A84  C030  FFD9         	movff	sprintf@sp,fsr2l
  4605  000A88  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4606  000A8C  0E2D               	movlw	45
  4607  000A8E  6EDF               	movwf	indf2,c
  4608                           
  4609                           ; BSR set to: 0
  4610  000A90  4A30               	infsnz	sprintf@sp,f,c
  4611  000A92  2A31               	incf	sprintf@sp+1,f,c
  4612  000A94                     l2972:
  4613                           
  4614                           ; BSR set to: 0
  4615                           ;doprnt.c: 1415: if(width)
  4616  000A94  0100               	movlb	0	; () banked
  4617  000A96  516A               	movf	sprintf@width& (0+255),w,b
  4618  000A98  0100               	movlb	0	; () banked
  4619  000A9A  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4620  000A9C  B4D8               	btfsc	status,2,c
  4621  000A9E  D034               	goto	l2994
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4625                           
  4626                           ; BSR set to: 0
  4627                           
  4628                           ;doprnt.c: 1416: do
  4629  000AA0  C030  FFD9         	movff	sprintf@sp,fsr2l
  4630  000AA4  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4631  000AA8  0E30               	movlw	48
  4632  000AAA  6EDF               	movwf	indf2,c
  4633                           
  4634                           ; BSR set to: 0
  4635  000AAC  4A30               	infsnz	sprintf@sp,f,c
  4636  000AAE  2A31               	incf	sprintf@sp+1,f,c
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;doprnt.c: 1418: while(--width);
  4640  000AB0  0100               	movlb	0	; () banked
  4641  000AB2  076A               	decf	sprintf@width& (0+255),f,b
  4642  000AB4  A0D8               	btfss	status,0,c
  4643  000AB6  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4644  000AB8  D7ED               	goto	l2972
  4645  000ABA                     l2980:
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;doprnt.c: 1422: {
  4649                           ;doprnt.c: 1424: if(width
  4650                           ;doprnt.c: 1428: )
  4651  000ABA  0100               	movlb	0	; () banked
  4652  000ABC  516A               	movf	sprintf@width& (0+255),w,b
  4653  000ABE  0100               	movlb	0	; () banked
  4654  000AC0  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4655  000AC2  B4D8               	btfsc	status,2,c
  4656  000AC4  D012               	goto	l2988
  4657  000AC6                     l2982:
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4661  000AC6  C030  FFD9         	movff	sprintf@sp,fsr2l
  4662  000ACA  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4663  000ACE  0E20               	movlw	32
  4664  000AD0  6EDF               	movwf	indf2,c
  4665                           
  4666                           ; BSR set to: 0
  4667  000AD2  4A30               	infsnz	sprintf@sp,f,c
  4668  000AD4  2A31               	incf	sprintf@sp+1,f,c
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 1431: while(--width);
  4672  000AD6  0100               	movlb	0	; () banked
  4673  000AD8  076A               	decf	sprintf@width& (0+255),f,b
  4674  000ADA  A0D8               	btfss	status,0,c
  4675  000ADC  076B               	decf	(sprintf@width+1)& (0+255),f,b
  4676  000ADE  0100               	movlb	0	; () banked
  4677  000AE0  516A               	movf	sprintf@width& (0+255),w,b
  4678  000AE2  0100               	movlb	0	; () banked
  4679  000AE4  116B               	iorwf	(sprintf@width+1)& (0+255),w,b
  4680  000AE6  A4D8               	btfss	status,2,c
  4681  000AE8  D7EE               	goto	l2982
  4682  000AEA                     l2988:
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;doprnt.c: 1438: if(flag & 0x03)
  4686  000AEA  C069  F060         	movff	sprintf@flag,??_sprintf
  4687  000AEE  0E03               	movlw	3
  4688  000AF0  0100               	movlb	0	; () banked
  4689  000AF2  1760               	andwf	??_sprintf& (0+255),f,b
  4690  000AF4  B4D8               	btfsc	status,2,c
  4691  000AF6  D008               	goto	l2994
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4695  000AF8  C030  FFD9         	movff	sprintf@sp,fsr2l
  4696  000AFC  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4697  000B00  0E2D               	movlw	45
  4698  000B02  6EDF               	movwf	indf2,c
  4699                           
  4700                           ; BSR set to: 0
  4701  000B04  4A30               	infsnz	sprintf@sp,f,c
  4702  000B06  2A31               	incf	sprintf@sp+1,f,c
  4703  000B08                     l2994:
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;doprnt.c: 1469: }
  4707                           ;doprnt.c: 1472: prec = c;
  4708  000B08  C06C  F066         	movff	sprintf@c,sprintf@prec
  4709                           
  4710                           ;doprnt.c: 1474: while(prec--) {
  4711  000B0C  D02B               	goto	l3002
  4712  000B0E                     l2996:
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;doprnt.c: 1478: {
  4716                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4717  000B0E  0100               	movlb	0	; () banked
  4718  000B10  5166               	movf	sprintf@prec& (0+255),w,b
  4719  000B12  0D02               	mullw	2
  4720  000B14  0E01               	movlw	low _dpowers
  4721  000B16  24F3               	addwf	prodl,w,c
  4722  000B18  6EF6               	movwf	tblptrl,c
  4723  000B1A  0E03               	movlw	high _dpowers
  4724  000B1C  20F4               	addwfc	prodh,w,c
  4725  000B1E  6EF7               	movwf	tblptrh,c
  4726  000B20                     	if	0	;There are less than 3 active tblptr bytes
  4727  000B20                     	endif
  4728  000B20  0009               	tblrd		*+
  4729  000B22  CFF5 F026          	movff	tablat,___lwdiv@divisor
  4730  000B26  000A               	tblrd		*-
  4731  000B28  CFF5 F027          	movff	tablat,___lwdiv@divisor+1
  4732  000B2C  C067  F024         	movff	sprintf@val,___lwdiv@dividend
  4733  000B30  C068  F025         	movff	sprintf@val+1,___lwdiv@dividend+1
  4734  000B34  EC1D  F00B         	call	___lwdiv	;wreg free
  4735  000B38  C024  F02B         	movff	?___lwdiv,___lwmod@dividend
  4736  000B3C  C025  F02C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4737  000B40  0E00               	movlw	0
  4738  000B42  6E2E               	movwf	___lwmod@divisor+1,c
  4739  000B44  0E0A               	movlw	10
  4740  000B46  6E2D               	movwf	___lwmod@divisor,c
  4741  000B48  EC94  F00B         	call	___lwmod	;wreg free
  4742  000B4C  502B               	movf	?___lwmod,w,c
  4743  000B4E  0F30               	addlw	48
  4744  000B50  0100               	movlb	0	; () banked
  4745  000B52  6F6C               	movwf	sprintf@c& (0+255),b
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;doprnt.c: 1523: }
  4749                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4750  000B54  C030  FFD9         	movff	sprintf@sp,fsr2l
  4751  000B58  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4752  000B5C  C06C  FFDF         	movff	sprintf@c,indf2
  4753                           
  4754                           ; BSR set to: 0
  4755  000B60  4A30               	infsnz	sprintf@sp,f,c
  4756  000B62  2A31               	incf	sprintf@sp+1,f,c
  4757  000B64                     l3002:
  4758                           
  4759                           ; BSR set to: 0
  4760  000B64  0100               	movlb	0	; () banked
  4761  000B66  0766               	decf	sprintf@prec& (0+255),f,b
  4762  000B68  0100               	movlb	0	; () banked
  4763  000B6A  2966               	incf	sprintf@prec& (0+255),w,b
  4764  000B6C  A4D8               	btfss	status,2,c
  4765  000B6E  D7CF               	goto	l2996
  4766  000B70                     l3004:
  4767  000B70  C032  FFF6         	movff	sprintf@f,tblptrl
  4768  000B74  C033  FFF7         	movff	sprintf@f+1,tblptrh
  4769  000B78  4A32               	infsnz	sprintf@f,f,c
  4770  000B7A  2A33               	incf	sprintf@f+1,f,c
  4771  000B7C                     	if	0	;tblptru may be non-zero
  4772  000B7C                     	endif
  4773  000B7C                     	if	0	;tblptru may be non-zero
  4774  000B7C                     	endif
  4775  000B7C  0008               	tblrd		*
  4776  000B7E  CFF5 F06C          	movff	tablat,sprintf@c
  4777  000B82  0100               	movlb	0	; () banked
  4778  000B84  516C               	movf	sprintf@c& (0+255),w,b
  4779  000B86  A4D8               	btfss	status,2,c
  4780  000B88  D68B               	goto	l2898
  4781  000B8A                     l3006:
  4782                           
  4783                           ;doprnt.c: 1538: *sp = 0;
  4784  000B8A  C030  FFD9         	movff	sprintf@sp,fsr2l
  4785  000B8E  C031  FFDA         	movff	sprintf@sp+1,fsr2h
  4786  000B92  0E00               	movlw	0
  4787  000B94  6EDF               	movwf	indf2,c
  4788  000B96  0012               	return	
  4789  000B98                     __end_of_sprintf:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           intcon	equ	0xFF2
  4798                           postinc0	equ	0xFEE
  4799                           wreg	equ	0xFE8
  4800                           indf1	equ	0xFE7
  4801                           fsr1h	equ	0xFE2
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _isdigit *****************
  4811 ;; Defined at:
  4812 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  c               1    wreg     unsigned char 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  c               1   37[COMRAM] unsigned char 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;		None               void
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4826 ;;      Params:         0       0       0       0
  4827 ;;      Locals:         2       0       0       0
  4828 ;;      Temps:          1       0       0       0
  4829 ;;      Totals:         3       0       0       0
  4830 ;;Total ram usage:        3 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    3
  4833 ;; This function calls:
  4834 ;;		Nothing
  4835 ;; This function is called by:
  4836 ;;		_sprintf
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text18
  4841  00193E                     __ptext18:
  4842                           	opt stack 0
  4843  00193E                     _isdigit:
  4844                           	opt stack 26
  4845                           
  4846                           ;incstack = 0
  4847                           ;isdigit@c stored from wreg
  4848  00193E  6E26               	movwf	isdigit@c,c
  4849  001940  0E00               	movlw	0
  4850  001942  6E25               	movwf	_isdigit$1873,c
  4851  001944  0E3A               	movlw	58
  4852  001946  6026               	cpfslt	isdigit@c,c
  4853  001948  D005               	goto	l2068
  4854  00194A  0E2F               	movlw	47
  4855  00194C  6426               	cpfsgt	isdigit@c,c
  4856  00194E  D002               	goto	l2068
  4857  001950  0E01               	movlw	1
  4858  001952  6E25               	movwf	_isdigit$1873,c
  4859  001954                     l2068:
  4860  001954  C025  F024         	movff	_isdigit$1873,??_isdigit
  4861  001958  3024               	rrcf	??_isdigit,w,c
  4862  00195A  0012               	return	
  4863  00195C                     __end_of_isdigit:
  4864                           	opt stack 0
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           prodh	equ	0xFF4
  4870                           prodl	equ	0xFF3
  4871                           intcon	equ	0xFF2
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           indf1	equ	0xFE7
  4875                           fsr1h	equ	0xFE2
  4876                           fsr1l	equ	0xFE1
  4877                           indf2	equ	0xFDF
  4878                           postinc2	equ	0xFDE
  4879                           postdec2	equ	0xFDD
  4880                           fsr2h	equ	0xFDA
  4881                           fsr2l	equ	0xFD9
  4882                           status	equ	0xFD8
  4883                           
  4884 ;; *************** function ___wmul *****************
  4885 ;; Defined at:
  4886 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  multiplier      2   35[COMRAM] unsigned int 
  4889 ;;  multiplicand    2   37[COMRAM] unsigned int 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  product         2   39[COMRAM] unsigned int 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  2   35[COMRAM] unsigned int 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0, prodl, prodh
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4901 ;;      Params:         4       0       0       0
  4902 ;;      Locals:         2       0       0       0
  4903 ;;      Temps:          0       0       0       0
  4904 ;;      Totals:         6       0       0       0
  4905 ;;Total ram usage:        6 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    3
  4908 ;; This function calls:
  4909 ;;		Nothing
  4910 ;; This function is called by:
  4911 ;;		_setMotorPWM
  4912 ;;		_sprintf
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text19
  4917  0018F6                     __ptext19:
  4918                           	opt stack 0
  4919  0018F6                     ___wmul:
  4920                           	opt stack 25
  4921                           
  4922                           ;incstack = 0
  4923  0018F6  5024               	movf	___wmul@multiplier,w,c
  4924  0018F8  0226               	mulwf	___wmul@multiplicand,c
  4925  0018FA  CFF3 F028          	movff	prodl,___wmul@product
  4926  0018FE  CFF4 F029          	movff	prodh,___wmul@product+1
  4927  001902  5024               	movf	___wmul@multiplier,w,c
  4928  001904  0227               	mulwf	___wmul@multiplicand+1,c
  4929  001906  50F3               	movf	prodl,w,c
  4930  001908  2629               	addwf	___wmul@product+1,f,c
  4931  00190A  5025               	movf	___wmul@multiplier+1,w,c
  4932  00190C  0226               	mulwf	___wmul@multiplicand,c
  4933  00190E  50F3               	movf	prodl,w,c
  4934  001910  2629               	addwf	___wmul@product+1,f,c
  4935  001912  C028  F024         	movff	___wmul@product,?___wmul
  4936  001916  C029  F025         	movff	___wmul@product+1,?___wmul+1
  4937  00191A  0012               	return	
  4938  00191C                     __end_of___wmul:
  4939                           	opt stack 0
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           postinc0	equ	0xFEE
  4948                           wreg	equ	0xFE8
  4949                           indf1	equ	0xFE7
  4950                           fsr1h	equ	0xFE2
  4951                           fsr1l	equ	0xFE1
  4952                           indf2	equ	0xFDF
  4953                           postinc2	equ	0xFDE
  4954                           postdec2	equ	0xFDD
  4955                           fsr2h	equ	0xFDA
  4956                           fsr2l	equ	0xFD9
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function ___lwmod *****************
  4960 ;; Defined at:
  4961 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;  dividend        2   42[COMRAM] unsigned int 
  4964 ;;  divisor         2   44[COMRAM] unsigned int 
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;  counter         1   46[COMRAM] unsigned char 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  2   42[COMRAM] unsigned int 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4976 ;;      Params:         4       0       0       0
  4977 ;;      Locals:         1       0       0       0
  4978 ;;      Temps:          0       0       0       0
  4979 ;;      Totals:         5       0       0       0
  4980 ;;Total ram usage:        5 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    3
  4983 ;; This function calls:
  4984 ;;		Nothing
  4985 ;; This function is called by:
  4986 ;;		_sprintf
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           	psect	text20
  4991  001728                     __ptext20:
  4992                           	opt stack 0
  4993  001728                     ___lwmod:
  4994                           	opt stack 26
  4995                           
  4996                           ;incstack = 0
  4997  001728  502D               	movf	___lwmod@divisor,w,c
  4998  00172A  102E               	iorwf	___lwmod@divisor+1,w,c
  4999  00172C  B4D8               	btfsc	status,2,c
  5000  00172E  D018               	goto	l869
  5001  001730  0E01               	movlw	1
  5002  001732  6E2F               	movwf	___lwmod@counter,c
  5003  001734  D004               	goto	l2100
  5004  001736                     l2098:
  5005  001736  90D8               	bcf	status,0,c
  5006  001738  362D               	rlcf	___lwmod@divisor,f,c
  5007  00173A  362E               	rlcf	___lwmod@divisor+1,f,c
  5008  00173C  2A2F               	incf	___lwmod@counter,f,c
  5009  00173E                     l2100:
  5010  00173E  AE2E               	btfss	___lwmod@divisor+1,7,c
  5011  001740  D7FA               	goto	l2098
  5012  001742                     l2102:
  5013  001742  502D               	movf	___lwmod@divisor,w,c
  5014  001744  5C2B               	subwf	___lwmod@dividend,w,c
  5015  001746  502E               	movf	___lwmod@divisor+1,w,c
  5016  001748  582C               	subwfb	___lwmod@dividend+1,w,c
  5017  00174A  A0D8               	btfss	status,0,c
  5018  00174C  D004               	goto	l2106
  5019  00174E  502D               	movf	___lwmod@divisor,w,c
  5020  001750  5E2B               	subwf	___lwmod@dividend,f,c
  5021  001752  502E               	movf	___lwmod@divisor+1,w,c
  5022  001754  5A2C               	subwfb	___lwmod@dividend+1,f,c
  5023  001756                     l2106:
  5024  001756  90D8               	bcf	status,0,c
  5025  001758  322E               	rrcf	___lwmod@divisor+1,f,c
  5026  00175A  322D               	rrcf	___lwmod@divisor,f,c
  5027  00175C  2E2F               	decfsz	___lwmod@counter,f,c
  5028  00175E  D7F1               	goto	l2102
  5029  001760                     l869:
  5030  001760  C02B  F02B         	movff	___lwmod@dividend,?___lwmod
  5031  001764  C02C  F02C         	movff	___lwmod@dividend+1,?___lwmod+1
  5032  001768  0012               	return		;funcret
  5033  00176A                     __end_of___lwmod:
  5034                           	opt stack 0
  5035                           tblptru	equ	0xFF8
  5036                           tblptrh	equ	0xFF7
  5037                           tblptrl	equ	0xFF6
  5038                           tablat	equ	0xFF5
  5039                           prodh	equ	0xFF4
  5040                           prodl	equ	0xFF3
  5041                           intcon	equ	0xFF2
  5042                           postinc0	equ	0xFEE
  5043                           wreg	equ	0xFE8
  5044                           indf1	equ	0xFE7
  5045                           fsr1h	equ	0xFE2
  5046                           fsr1l	equ	0xFE1
  5047                           indf2	equ	0xFDF
  5048                           postinc2	equ	0xFDE
  5049                           postdec2	equ	0xFDD
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function ___lwdiv *****************
  5055 ;; Defined at:
  5056 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  dividend        2   35[COMRAM] unsigned int 
  5059 ;;  divisor         2   37[COMRAM] unsigned int 
  5060 ;; Auto vars:     Size  Location     Type
  5061 ;;  quotient        2   39[COMRAM] unsigned int 
  5062 ;;  counter         1   41[COMRAM] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  2   35[COMRAM] unsigned int 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5072 ;;      Params:         4       0       0       0
  5073 ;;      Locals:         3       0       0       0
  5074 ;;      Temps:          0       0       0       0
  5075 ;;      Totals:         7       0       0       0
  5076 ;;Total ram usage:        7 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    3
  5079 ;; This function calls:
  5080 ;;		Nothing
  5081 ;; This function is called by:
  5082 ;;		_sprintf
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text21
  5087  00163A                     __ptext21:
  5088                           	opt stack 0
  5089  00163A                     ___lwdiv:
  5090                           	opt stack 26
  5091                           
  5092                           ;incstack = 0
  5093  00163A  0E00               	movlw	0
  5094  00163C  6E29               	movwf	___lwdiv@quotient+1,c
  5095  00163E  0E00               	movlw	0
  5096  001640  6E28               	movwf	___lwdiv@quotient,c
  5097  001642  5026               	movf	___lwdiv@divisor,w,c
  5098  001644  1027               	iorwf	___lwdiv@divisor+1,w,c
  5099  001646  B4D8               	btfsc	status,2,c
  5100  001648  D01C               	goto	l859
  5101  00164A  0E01               	movlw	1
  5102  00164C  6E2A               	movwf	___lwdiv@counter,c
  5103  00164E  D004               	goto	l2080
  5104  001650                     l2078:
  5105  001650  90D8               	bcf	status,0,c
  5106  001652  3626               	rlcf	___lwdiv@divisor,f,c
  5107  001654  3627               	rlcf	___lwdiv@divisor+1,f,c
  5108  001656  2A2A               	incf	___lwdiv@counter,f,c
  5109  001658                     l2080:
  5110  001658  AE27               	btfss	___lwdiv@divisor+1,7,c
  5111  00165A  D7FA               	goto	l2078
  5112  00165C                     l2082:
  5113  00165C  90D8               	bcf	status,0,c
  5114  00165E  3628               	rlcf	___lwdiv@quotient,f,c
  5115  001660  3629               	rlcf	___lwdiv@quotient+1,f,c
  5116  001662  5026               	movf	___lwdiv@divisor,w,c
  5117  001664  5C24               	subwf	___lwdiv@dividend,w,c
  5118  001666  5027               	movf	___lwdiv@divisor+1,w,c
  5119  001668  5825               	subwfb	___lwdiv@dividend+1,w,c
  5120  00166A  A0D8               	btfss	status,0,c
  5121  00166C  D005               	goto	l2090
  5122  00166E  5026               	movf	___lwdiv@divisor,w,c
  5123  001670  5E24               	subwf	___lwdiv@dividend,f,c
  5124  001672  5027               	movf	___lwdiv@divisor+1,w,c
  5125  001674  5A25               	subwfb	___lwdiv@dividend+1,f,c
  5126  001676  8028               	bsf	___lwdiv@quotient,0,c
  5127  001678                     l2090:
  5128  001678  90D8               	bcf	status,0,c
  5129  00167A  3227               	rrcf	___lwdiv@divisor+1,f,c
  5130  00167C  3226               	rrcf	___lwdiv@divisor,f,c
  5131  00167E  2E2A               	decfsz	___lwdiv@counter,f,c
  5132  001680  D7ED               	goto	l2082
  5133  001682                     l859:
  5134  001682  C028  F024         	movff	___lwdiv@quotient,?___lwdiv
  5135  001686  C029  F025         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5136  00168A  0012               	return		;funcret
  5137  00168C                     __end_of___lwdiv:
  5138                           	opt stack 0
  5139                           tblptru	equ	0xFF8
  5140                           tblptrh	equ	0xFF7
  5141                           tblptrl	equ	0xFF6
  5142                           tablat	equ	0xFF5
  5143                           prodh	equ	0xFF4
  5144                           prodl	equ	0xFF3
  5145                           intcon	equ	0xFF2
  5146                           postinc0	equ	0xFEE
  5147                           wreg	equ	0xFE8
  5148                           indf1	equ	0xFE7
  5149                           fsr1h	equ	0xFE2
  5150                           fsr1l	equ	0xFE1
  5151                           indf2	equ	0xFDF
  5152                           postinc2	equ	0xFDE
  5153                           postdec2	equ	0xFDD
  5154                           fsr2h	equ	0xFDA
  5155                           fsr2l	equ	0xFD9
  5156                           status	equ	0xFD8
  5157                           
  5158 ;; *************** function _grabRightIR *****************
  5159 ;; Defined at:
  5160 ;;		line 74 in file "IR_Reading.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5165 ;;  i               1   42[COMRAM] unsigned char 
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  2   35[COMRAM] unsigned int 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, status,0
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5175 ;;      Params:         2       0       0       0
  5176 ;;      Locals:         3       0       0       0
  5177 ;;      Temps:          3       0       0       0
  5178 ;;      Totals:         8       0       0       0
  5179 ;;Total ram usage:        8 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; Hardware stack levels required when called:    3
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		_ScanIR
  5186 ;;		_ScanWithRange
  5187 ;;		_main
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text22
  5192  001488                     __ptext22:
  5193                           	opt stack 0
  5194  001488                     _grabRightIR:
  5195                           	opt stack 27
  5196                           
  5197                           ;IR_Reading.c: 76: unsigned int IR_signal=0;
  5198                           
  5199                           ;incstack = 0
  5200  001488  0E00               	movlw	0
  5201  00148A  6E2A               	movwf	grabRightIR@IR_signal+1,c
  5202  00148C  0E00               	movlw	0
  5203  00148E  6E29               	movwf	grabRightIR@IR_signal,c
  5204                           
  5205                           ;IR_Reading.c: 77: unsigned char i=0;
  5206  001490  0E00               	movlw	0
  5207  001492  6E2B               	movwf	grabRightIR@i,c
  5208                           
  5209                           ;IR_Reading.c: 79: for (i=0; i<4; i++) {
  5210  001494  0E00               	movlw	0
  5211  001496  6E2B               	movwf	grabRightIR@i,c
  5212  001498                     l2124:
  5213  001498  0E03               	movlw	3
  5214  00149A  642B               	cpfsgt	grabRightIR@i,c
  5215  00149C  D001               	goto	l2128
  5216  00149E  D01E               	goto	l2134
  5217  0014A0                     l2128:
  5218                           
  5219                           ;IR_Reading.c: 81: IR_signal+=((CAP1BUFH << 7) | (CAP1BUFL>>1));
  5220  0014A0  5069               	movf	3945,w,c	;volatile
  5221  0014A2  6E26               	movwf	??_grabRightIR& (0+255),c
  5222  0014A4  6A27               	clrf	(??_grabRightIR+1)& (0+255),c
  5223  0014A6  0E07               	movlw	7
  5224  0014A8                     u1465:
  5225  0014A8  90D8               	bcf	status,0,c
  5226  0014AA  3626               	rlcf	??_grabRightIR,f,c
  5227  0014AC  3627               	rlcf	??_grabRightIR+1,f,c
  5228  0014AE  2EE8               	decfsz	wreg,f,c
  5229  0014B0  D7FB               	goto	u1465
  5230  0014B2  CF68 F028          	movff	3944,??_grabRightIR+2	;volatile
  5231  0014B6  90D8               	bcf	status,0,c
  5232  0014B8  3228               	rrcf	??_grabRightIR+2,f,c
  5233  0014BA  5028               	movf	??_grabRightIR+2,w,c
  5234  0014BC  1226               	iorwf	??_grabRightIR,f,c
  5235  0014BE  0E00               	movlw	0
  5236  0014C0  1227               	iorwf	??_grabRightIR+1,f,c
  5237  0014C2  5026               	movf	??_grabRightIR,w,c
  5238  0014C4  2629               	addwf	grabRightIR@IR_signal,f,c
  5239  0014C6  5027               	movf	??_grabRightIR+1,w,c
  5240  0014C8  222A               	addwfc	grabRightIR@IR_signal+1,f,c
  5241                           
  5242                           ;IR_Reading.c: 82: _delay((unsigned long)((50)*(8000000/4000.0)));
  5243  0014CA  0E82               	movlw	130
  5244  0014CC  6E26               	movwf	??_grabRightIR& (0+255),c
  5245  0014CE  0EDE               	movlw	222
  5246  0014D0                     u3057:
  5247  0014D0  2EE8               	decfsz	wreg,f,c
  5248  0014D2  D7FE               	goto	u3057
  5249  0014D4  2E26               	decfsz	??_grabRightIR& (0+255),f,c
  5250  0014D6  D7FC               	goto	u3057
  5251  0014D8  2A2B               	incf	grabRightIR@i,f,c
  5252  0014DA  D7DE               	goto	l2124
  5253  0014DC                     l2134:
  5254                           
  5255                           ;IR_Reading.c: 83: }
  5256                           ;IR_Reading.c: 85: return IR_signal>>2;
  5257  0014DC  C029  F026         	movff	grabRightIR@IR_signal,??_grabRightIR
  5258  0014E0  C02A  F027         	movff	grabRightIR@IR_signal+1,??_grabRightIR+1
  5259  0014E4  90D8               	bcf	status,0,c
  5260  0014E6  3227               	rrcf	??_grabRightIR+1,f,c
  5261  0014E8  3226               	rrcf	??_grabRightIR,f,c
  5262  0014EA  90D8               	bcf	status,0,c
  5263  0014EC  3227               	rrcf	??_grabRightIR+1,f,c
  5264  0014EE  3226               	rrcf	??_grabRightIR,f,c
  5265  0014F0  C026  F024         	movff	??_grabRightIR,?_grabRightIR
  5266  0014F4  C027  F025         	movff	??_grabRightIR+1,?_grabRightIR+1
  5267  0014F8  0012               	return	
  5268  0014FA                     __end_of_grabRightIR:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           indf1	equ	0xFE7
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function _grabLeftIR *****************
  5290 ;; Defined at:
  5291 ;;		line 90 in file "IR_Reading.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  IR_signal       2   40[COMRAM] unsigned int 
  5296 ;;  i               1   42[COMRAM] unsigned char 
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  2   35[COMRAM] unsigned int 
  5299 ;; Registers used:
  5300 ;;		wreg, status,2, status,0
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5306 ;;      Params:         2       0       0       0
  5307 ;;      Locals:         3       0       0       0
  5308 ;;      Temps:          3       0       0       0
  5309 ;;      Totals:         8       0       0       0
  5310 ;;Total ram usage:        8 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    3
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_ScanIR
  5317 ;;		_ScanWithRange
  5318 ;;		_main
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text23
  5323  0014FA                     __ptext23:
  5324                           	opt stack 0
  5325  0014FA                     _grabLeftIR:
  5326                           	opt stack 27
  5327                           
  5328                           ;IR_Reading.c: 92: unsigned int IR_signal=0;
  5329                           
  5330                           ;incstack = 0
  5331  0014FA  0E00               	movlw	0
  5332  0014FC  6E2A               	movwf	grabLeftIR@IR_signal+1,c
  5333  0014FE  0E00               	movlw	0
  5334  001500  6E29               	movwf	grabLeftIR@IR_signal,c
  5335                           
  5336                           ;IR_Reading.c: 93: unsigned char i=0;
  5337  001502  0E00               	movlw	0
  5338  001504  6E2B               	movwf	grabLeftIR@i,c
  5339                           
  5340                           ;IR_Reading.c: 95: for (i=0; i<4; i++) {
  5341  001506  0E00               	movlw	0
  5342  001508  6E2B               	movwf	grabLeftIR@i,c
  5343  00150A                     l2140:
  5344  00150A  0E03               	movlw	3
  5345  00150C  642B               	cpfsgt	grabLeftIR@i,c
  5346  00150E  D001               	goto	l2144
  5347  001510  D01E               	goto	l2150
  5348  001512                     l2144:
  5349                           
  5350                           ;IR_Reading.c: 97: IR_signal+=((CAP2BUFH << 7) | (CAP2BUFL>>1));
  5351  001512  5067               	movf	3943,w,c	;volatile
  5352  001514  6E26               	movwf	??_grabLeftIR& (0+255),c
  5353  001516  6A27               	clrf	(??_grabLeftIR+1)& (0+255),c
  5354  001518  0E07               	movlw	7
  5355  00151A                     u1495:
  5356  00151A  90D8               	bcf	status,0,c
  5357  00151C  3626               	rlcf	??_grabLeftIR,f,c
  5358  00151E  3627               	rlcf	??_grabLeftIR+1,f,c
  5359  001520  2EE8               	decfsz	wreg,f,c
  5360  001522  D7FB               	goto	u1495
  5361  001524  CF66 F028          	movff	3942,??_grabLeftIR+2	;volatile
  5362  001528  90D8               	bcf	status,0,c
  5363  00152A  3228               	rrcf	??_grabLeftIR+2,f,c
  5364  00152C  5028               	movf	??_grabLeftIR+2,w,c
  5365  00152E  1226               	iorwf	??_grabLeftIR,f,c
  5366  001530  0E00               	movlw	0
  5367  001532  1227               	iorwf	??_grabLeftIR+1,f,c
  5368  001534  5026               	movf	??_grabLeftIR,w,c
  5369  001536  2629               	addwf	grabLeftIR@IR_signal,f,c
  5370  001538  5027               	movf	??_grabLeftIR+1,w,c
  5371  00153A  222A               	addwfc	grabLeftIR@IR_signal+1,f,c
  5372                           
  5373                           ;IR_Reading.c: 98: _delay((unsigned long)((50)*(8000000/4000.0)));
  5374  00153C  0E82               	movlw	130
  5375  00153E  6E26               	movwf	??_grabLeftIR& (0+255),c
  5376  001540  0EDE               	movlw	222
  5377  001542                     u3067:
  5378  001542  2EE8               	decfsz	wreg,f,c
  5379  001544  D7FE               	goto	u3067
  5380  001546  2E26               	decfsz	??_grabLeftIR& (0+255),f,c
  5381  001548  D7FC               	goto	u3067
  5382  00154A  2A2B               	incf	grabLeftIR@i,f,c
  5383  00154C  D7DE               	goto	l2140
  5384  00154E                     l2150:
  5385                           
  5386                           ;IR_Reading.c: 99: }
  5387                           ;IR_Reading.c: 101: return IR_signal>>2;
  5388  00154E  C029  F026         	movff	grabLeftIR@IR_signal,??_grabLeftIR
  5389  001552  C02A  F027         	movff	grabLeftIR@IR_signal+1,??_grabLeftIR+1
  5390  001556  90D8               	bcf	status,0,c
  5391  001558  3227               	rrcf	??_grabLeftIR+1,f,c
  5392  00155A  3226               	rrcf	??_grabLeftIR,f,c
  5393  00155C  90D8               	bcf	status,0,c
  5394  00155E  3227               	rrcf	??_grabLeftIR+1,f,c
  5395  001560  3226               	rrcf	??_grabLeftIR,f,c
  5396  001562  C026  F024         	movff	??_grabLeftIR,?_grabLeftIR
  5397  001566  C027  F025         	movff	??_grabLeftIR+1,?_grabLeftIR+1
  5398  00156A  0012               	return	
  5399  00156C                     __end_of_grabLeftIR:
  5400                           	opt stack 0
  5401                           tblptru	equ	0xFF8
  5402                           tblptrh	equ	0xFF7
  5403                           tblptrl	equ	0xFF6
  5404                           tablat	equ	0xFF5
  5405                           prodh	equ	0xFF4
  5406                           prodl	equ	0xFF3
  5407                           intcon	equ	0xFF2
  5408                           postinc0	equ	0xFEE
  5409                           wreg	equ	0xFE8
  5410                           indf1	equ	0xFE7
  5411                           fsr1h	equ	0xFE2
  5412                           fsr1l	equ	0xFE1
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           fsr2h	equ	0xFDA
  5417                           fsr2l	equ	0xFD9
  5418                           status	equ	0xFD8
  5419                           
  5420 ;; *************** function _SetLine *****************
  5421 ;; Defined at:
  5422 ;;		line 74 in file "LCD.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  line            1    wreg     unsigned char 
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;  line            1   41[COMRAM] unsigned char 
  5427 ;; Return value:  Size  Location     Type
  5428 ;;		None               void
  5429 ;; Registers used:
  5430 ;;		wreg, status,2, status,0, cstack
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5436 ;;      Params:         0       0       0       0
  5437 ;;      Locals:         1       0       0       0
  5438 ;;      Temps:          0       0       0       0
  5439 ;;      Totals:         1       0       0       0
  5440 ;;Total ram usage:        1 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    6
  5443 ;; This function calls:
  5444 ;;		_SendLCD
  5445 ;; This function is called by:
  5446 ;;		_ScanIR
  5447 ;;		_ScanWithRange
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text24
  5453  001846                     __ptext24:
  5454                           	opt stack 0
  5455  001846                     _SetLine:
  5456                           	opt stack 24
  5457                           
  5458                           ;incstack = 0
  5459                           ;SetLine@line stored from wreg
  5460  001846  6E2A               	movwf	SetLine@line,c
  5461                           
  5462                           ;LCD.c: 75: if (line==1) {
  5463  001848  042A               	decf	SetLine@line,w,c
  5464  00184A  A4D8               	btfss	status,2,c
  5465  00184C  D006               	goto	l2158
  5466                           
  5467                           ;LCD.c: 76: SendLCD(0x80,0);
  5468  00184E  0E00               	movlw	0
  5469  001850  6E28               	movwf	SendLCD@type,c
  5470  001852  0E80               	movlw	128
  5471  001854  EC3B  F00C         	call	_SendLCD
  5472                           
  5473                           ;LCD.c: 77: } else if (line==2) {
  5474  001858  D009               	goto	l2162
  5475  00185A                     l2158:
  5476  00185A  0E02               	movlw	2
  5477  00185C  182A               	xorwf	SetLine@line,w,c
  5478  00185E  A4D8               	btfss	status,2,c
  5479  001860  D005               	goto	l2162
  5480                           
  5481                           ;LCD.c: 78: SendLCD(0xC0,0);
  5482  001862  0E00               	movlw	0
  5483  001864  6E28               	movwf	SendLCD@type,c
  5484  001866  0EC0               	movlw	192
  5485  001868  EC3B  F00C         	call	_SendLCD
  5486  00186C                     l2162:
  5487                           
  5488                           ;LCD.c: 79: }
  5489                           ;LCD.c: 80: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5490  00186C  0E21               	movlw	33
  5491  00186E                     u3077:
  5492  00186E  2EE8               	decfsz	wreg,f,c
  5493  001870  D7FE               	goto	u3077
  5494  001872  F000               	nop	
  5495  001874  0012               	return		;funcret
  5496  001876                     __end_of_SetLine:
  5497                           	opt stack 0
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           intcon	equ	0xFF2
  5505                           postinc0	equ	0xFEE
  5506                           wreg	equ	0xFE8
  5507                           indf1	equ	0xFE7
  5508                           fsr1h	equ	0xFE2
  5509                           fsr1l	equ	0xFE1
  5510                           indf2	equ	0xFDF
  5511                           postinc2	equ	0xFDE
  5512                           postdec2	equ	0xFDD
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function _LCD_String *****************
  5518 ;; Defined at:
  5519 ;;		line 83 in file "LCD.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  string          2   41[COMRAM] PTR unsigned char 
  5522 ;;		 -> STR_9(11), STR_8(12), STR_7(10), main@buf(40), 
  5523 ;;		 -> STR_5(17), ScanWithRange@buf(40), STR_3(12), ScanIR@buf(40), 
  5524 ;;		 -> STR_1(12), 
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;		None
  5527 ;; Return value:  Size  Location     Type
  5528 ;;		None               void
  5529 ;; Registers used:
  5530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5536 ;;      Params:         2       0       0       0
  5537 ;;      Locals:         0       0       0       0
  5538 ;;      Temps:          0       0       0       0
  5539 ;;      Totals:         2       0       0       0
  5540 ;;Total ram usage:        2 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    6
  5543 ;; This function calls:
  5544 ;;		_SendLCD
  5545 ;; This function is called by:
  5546 ;;		_ScanIR
  5547 ;;		_ScanWithRange
  5548 ;;		_main
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           	psect	text25
  5553  0015DC                     __ptext25:
  5554                           	opt stack 0
  5555  0015DC                     _LCD_String:
  5556                           	opt stack 23
  5557                           
  5558                           ;LCD.c: 85: while(*string != 0){
  5559                           
  5560                           ;incstack = 0
  5561  0015DC  D01A               	goto	l2172
  5562  0015DE                     l2166:
  5563                           
  5564                           ;LCD.c: 88: SendLCD(*string++,1);
  5565  0015DE  0E01               	movlw	1
  5566  0015E0  6E28               	movwf	SendLCD@type,c
  5567  0015E2  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5568  0015E6  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5569  0015EA  6AF8               	clrf	tblptru,c
  5570  0015EC  0E02               	movlw	(high __ramtop+-1)
  5571  0015EE  64F7               	cpfsgt	tblptrh,c
  5572  0015F0  D003               	bra	u1537
  5573  0015F2  0008               	tblrd		*
  5574  0015F4  50F5               	movf	tablat,w,c
  5575  0015F6  D005               	bra	u1530
  5576  0015F8                     u1537:
  5577  0015F8  CFF6 FFE1          	movff	tblptrl,fsr1l
  5578  0015FC  CFF7 FFE2          	movff	tblptrh,fsr1h
  5579  001600  50E7               	movf	indf1,w,c
  5580  001602                     u1530:
  5581  001602  EC3B  F00C         	call	_SendLCD
  5582  001606  4A2A               	infsnz	LCD_String@string,f,c
  5583  001608  2A2B               	incf	LCD_String@string+1,f,c
  5584                           
  5585                           ;LCD.c: 89: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5586  00160A  0E21               	movlw	33
  5587  00160C                     u3087:
  5588  00160C  2EE8               	decfsz	wreg,f,c
  5589  00160E  D7FE               	goto	u3087
  5590  001610  F000               	nop	
  5591  001612                     l2172:
  5592  001612  C02A  FFF6         	movff	LCD_String@string,tblptrl
  5593  001616  C02B  FFF7         	movff	LCD_String@string+1,tblptrh
  5594  00161A  6AF8               	clrf	tblptru,c
  5595  00161C  0E02               	movlw	(high __ramtop+-1)
  5596  00161E  64F7               	cpfsgt	tblptrh,c
  5597  001620  D003               	bra	u1547
  5598  001622  0008               	tblrd		*
  5599  001624  50F5               	movf	tablat,w,c
  5600  001626  D005               	bra	u1540
  5601  001628                     u1547:
  5602  001628  CFF6 FFE1          	movff	tblptrl,fsr1l
  5603  00162C  CFF7 FFE2          	movff	tblptrh,fsr1h
  5604  001630  50E7               	movf	indf1,w,c
  5605  001632                     u1540:
  5606  001632  0900               	iorlw	0
  5607  001634  B4D8               	btfsc	status,2,c
  5608  001636  0012               	return	
  5609  001638  D7D2               	goto	l2166
  5610  00163A                     __end_of_LCD_String:
  5611                           	opt stack 0
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodh	equ	0xFF4
  5617                           prodl	equ	0xFF3
  5618                           intcon	equ	0xFF2
  5619                           postinc0	equ	0xFEE
  5620                           wreg	equ	0xFE8
  5621                           indf1	equ	0xFE7
  5622                           fsr1h	equ	0xFE2
  5623                           fsr1l	equ	0xFE1
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function _SendLCD *****************
  5632 ;; Defined at:
  5633 ;;		line 27 in file "LCD.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;  Byte            1    wreg     unsigned char 
  5636 ;;  type            1   39[COMRAM] unsigned char 
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;  Byte            1   40[COMRAM] unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;		None               void
  5641 ;; Registers used:
  5642 ;;		wreg, status,2, status,0, cstack
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5648 ;;      Params:         1       0       0       0
  5649 ;;      Locals:         1       0       0       0
  5650 ;;      Temps:          0       0       0       0
  5651 ;;      Totals:         2       0       0       0
  5652 ;;Total ram usage:        2 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    5
  5655 ;; This function calls:
  5656 ;;		_LCDout
  5657 ;; This function is called by:
  5658 ;;		_initLCD
  5659 ;;		_SetLine
  5660 ;;		_LCD_String
  5661 ;;		_ScanIR
  5662 ;;		_ScanWithRange
  5663 ;;		_main
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text26
  5668  001876                     __ptext26:
  5669                           	opt stack 0
  5670  001876                     _SendLCD:
  5671                           	opt stack 24
  5672                           
  5673                           ;incstack = 0
  5674                           ;SendLCD@Byte stored from wreg
  5675  001876  6E29               	movwf	SendLCD@Byte,c
  5676                           
  5677                           ;LCD.c: 30: LATAbits.LATA6=type;
  5678  001878  B028               	btfsc	SendLCD@type,0,c
  5679  00187A  D002               	bra	u1365
  5680  00187C  9C89               	bcf	3977,6,c	;volatile
  5681  00187E  D001               	bra	u1366
  5682  001880                     u1365:
  5683  001880  8C89               	bsf	3977,6,c	;volatile
  5684  001882                     u1366:
  5685                           
  5686                           ;LCD.c: 32: LCDout((Byte&0xF0)>>4);
  5687  001882  3829               	swapf	SendLCD@Byte,w,c
  5688  001884  0B0F               	andlw	15
  5689  001886  0B0F               	andlw	15
  5690  001888  EC58  F008         	call	_LCDout
  5691                           
  5692                           ;LCD.c: 33: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5693  00188C  0E06               	movlw	6
  5694  00188E                     u3097:
  5695  00188E  2EE8               	decfsz	wreg,f,c
  5696  001890  D7FE               	goto	u3097
  5697  001892  D000               	nop2		;nop
  5698                           
  5699                           ;LCD.c: 35: LCDout(Byte&0x0F);
  5700  001894  5029               	movf	SendLCD@Byte,w,c
  5701  001896  0B0F               	andlw	15
  5702  001898  EC58  F008         	call	_LCDout
  5703                           
  5704                           ;LCD.c: 36: _delay((unsigned long)((50)*(8000000/4000000.0)));
  5705  00189C  0E21               	movlw	33
  5706  00189E                     u3107:
  5707  00189E  2EE8               	decfsz	wreg,f,c
  5708  0018A0  D7FE               	goto	u3107
  5709  0018A2  F000               	nop	
  5710  0018A4  0012               	return		;funcret
  5711  0018A6                     __end_of_SendLCD:
  5712                           	opt stack 0
  5713                           tblptru	equ	0xFF8
  5714                           tblptrh	equ	0xFF7
  5715                           tblptrl	equ	0xFF6
  5716                           tablat	equ	0xFF5
  5717                           prodh	equ	0xFF4
  5718                           prodl	equ	0xFF3
  5719                           intcon	equ	0xFF2
  5720                           postinc0	equ	0xFEE
  5721                           wreg	equ	0xFE8
  5722                           indf1	equ	0xFE7
  5723                           fsr1h	equ	0xFE2
  5724                           fsr1l	equ	0xFE1
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           fsr2h	equ	0xFDA
  5729                           fsr2l	equ	0xFD9
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function _LCDout *****************
  5733 ;; Defined at:
  5734 ;;		line 14 in file "LCD.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  number          1    wreg     unsigned char 
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;  number          1   38[COMRAM] unsigned char 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;		None               void
  5741 ;; Registers used:
  5742 ;;		wreg, status,2, status,0, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5748 ;;      Params:         0       0       0       0
  5749 ;;      Locals:         1       0       0       0
  5750 ;;      Temps:          3       0       0       0
  5751 ;;      Totals:         4       0       0       0
  5752 ;;Total ram usage:        4 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    4
  5755 ;; This function calls:
  5756 ;;		_E_TOG
  5757 ;; This function is called by:
  5758 ;;		_SendLCD
  5759 ;;		_initLCD
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           	psect	text27
  5764  0010B0                     __ptext27:
  5765                           	opt stack 0
  5766  0010B0                     _LCDout:
  5767                           	opt stack 24
  5768                           
  5769                           ;incstack = 0
  5770                           ;LCDout@number stored from wreg
  5771  0010B0  6E27               	movwf	LCDout@number,c
  5772                           
  5773                           ;LCD.c: 17: LATCbits.LATC1 = (number<<7)>>7;
  5774  0010B2  5027               	movf	LCDout@number,w,c
  5775  0010B4  6E24               	movwf	??_LCDout& (0+255),c
  5776  0010B6  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5777  0010B8  0E07               	movlw	7
  5778  0010BA                     u1215:
  5779  0010BA  90D8               	bcf	status,0,c
  5780  0010BC  3624               	rlcf	??_LCDout,f,c
  5781  0010BE  3625               	rlcf	??_LCDout+1,f,c
  5782  0010C0  2EE8               	decfsz	wreg,f,c
  5783  0010C2  D7FB               	goto	u1215
  5784  0010C4  0E07               	movlw	7
  5785  0010C6  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5786  0010C8                     u1225:
  5787  0010C8  3425               	rlcf	??_LCDout+1,w,c
  5788  0010CA  3225               	rrcf	??_LCDout+1,f,c
  5789  0010CC  3224               	rrcf	??_LCDout,f,c
  5790  0010CE  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5791  0010D0  D7FB               	goto	u1225
  5792  0010D2  4624               	rlncf	??_LCDout,f,c
  5793  0010D4  508B               	movf	3979,w,c	;volatile
  5794  0010D6  1824               	xorwf	??_LCDout,w,c
  5795  0010D8  0BFD               	andlw	-3
  5796  0010DA  1824               	xorwf	??_LCDout,w,c
  5797  0010DC  6E8B               	movwf	3979,c	;volatile
  5798                           
  5799                           ;LCD.c: 18: LATCbits.LATC2 = (number<<6)>>7;
  5800  0010DE  5027               	movf	LCDout@number,w,c
  5801  0010E0  6E24               	movwf	??_LCDout& (0+255),c
  5802  0010E2  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5803  0010E4  0E06               	movlw	6
  5804  0010E6                     u1235:
  5805  0010E6  90D8               	bcf	status,0,c
  5806  0010E8  3624               	rlcf	??_LCDout,f,c
  5807  0010EA  3625               	rlcf	??_LCDout+1,f,c
  5808  0010EC  2EE8               	decfsz	wreg,f,c
  5809  0010EE  D7FB               	goto	u1235
  5810  0010F0  0E07               	movlw	7
  5811  0010F2  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5812  0010F4                     u1245:
  5813  0010F4  3425               	rlcf	??_LCDout+1,w,c
  5814  0010F6  3225               	rrcf	??_LCDout+1,f,c
  5815  0010F8  3224               	rrcf	??_LCDout,f,c
  5816  0010FA  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5817  0010FC  D7FB               	goto	u1245
  5818  0010FE  4624               	rlncf	??_LCDout,f,c
  5819  001100  4624               	rlncf	??_LCDout,f,c
  5820  001102  508B               	movf	3979,w,c	;volatile
  5821  001104  1824               	xorwf	??_LCDout,w,c
  5822  001106  0BFB               	andlw	-5
  5823  001108  1824               	xorwf	??_LCDout,w,c
  5824  00110A  6E8B               	movwf	3979,c	;volatile
  5825                           
  5826                           ;LCD.c: 19: LATDbits.LATD0 = (number<<5)>>7;
  5827  00110C  5027               	movf	LCDout@number,w,c
  5828  00110E  6E24               	movwf	??_LCDout& (0+255),c
  5829  001110  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5830  001112  0E05               	movlw	5
  5831  001114                     u1255:
  5832  001114  90D8               	bcf	status,0,c
  5833  001116  3624               	rlcf	??_LCDout,f,c
  5834  001118  3625               	rlcf	??_LCDout+1,f,c
  5835  00111A  2EE8               	decfsz	wreg,f,c
  5836  00111C  D7FB               	goto	u1255
  5837  00111E  0E07               	movlw	7
  5838  001120  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5839  001122                     u1265:
  5840  001122  3425               	rlcf	??_LCDout+1,w,c
  5841  001124  3225               	rrcf	??_LCDout+1,f,c
  5842  001126  3224               	rrcf	??_LCDout,f,c
  5843  001128  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5844  00112A  D7FB               	goto	u1265
  5845  00112C  508C               	movf	3980,w,c	;volatile
  5846  00112E  1824               	xorwf	??_LCDout,w,c
  5847  001130  0BFE               	andlw	-2
  5848  001132  1824               	xorwf	??_LCDout,w,c
  5849  001134  6E8C               	movwf	3980,c	;volatile
  5850                           
  5851                           ;LCD.c: 20: LATDbits.LATD1 = (number<<4)>>7;
  5852  001136  5027               	movf	LCDout@number,w,c
  5853  001138  6E24               	movwf	??_LCDout& (0+255),c
  5854  00113A  6A25               	clrf	(??_LCDout+1)& (0+255),c
  5855  00113C  3A24               	swapf	??_LCDout,f,c
  5856  00113E  3A25               	swapf	??_LCDout+1,f,c
  5857  001140  0EF0               	movlw	240
  5858  001142  1625               	andwf	??_LCDout+1,f,c
  5859  001144  5024               	movf	??_LCDout,w,c
  5860  001146  0B0F               	andlw	15
  5861  001148  1225               	iorwf	??_LCDout+1,f,c
  5862  00114A  0EF0               	movlw	240
  5863  00114C  1624               	andwf	??_LCDout,f,c
  5864  00114E  0E07               	movlw	7
  5865  001150  6E26               	movwf	(??_LCDout+2)& (0+255),c
  5866  001152                     u1275:
  5867  001152  3425               	rlcf	??_LCDout+1,w,c
  5868  001154  3225               	rrcf	??_LCDout+1,f,c
  5869  001156  3224               	rrcf	??_LCDout,f,c
  5870  001158  2E26               	decfsz	(??_LCDout+2)& (0+255),f,c
  5871  00115A  D7FB               	goto	u1275
  5872  00115C  4624               	rlncf	??_LCDout,f,c
  5873  00115E  508C               	movf	3980,w,c	;volatile
  5874  001160  1824               	xorwf	??_LCDout,w,c
  5875  001162  0BFD               	andlw	-3
  5876  001164  1824               	xorwf	??_LCDout,w,c
  5877  001166  6E8C               	movwf	3980,c	;volatile
  5878                           
  5879                           ;LCD.c: 21: E_TOG();
  5880  001168  ECBC  F00C         	call	_E_TOG	;wreg free
  5881                           
  5882                           ;LCD.c: 22: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5883  00116C  0E03               	movlw	3
  5884  00116E                     u3117:
  5885  00116E  2EE8               	decfsz	wreg,f,c
  5886  001170  D7FE               	goto	u3117
  5887  001172  F000               	nop	
  5888  001174  0012               	return		;funcret
  5889  001176                     __end_of_LCDout:
  5890                           	opt stack 0
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           postinc0	equ	0xFEE
  5899                           wreg	equ	0xFE8
  5900                           indf1	equ	0xFE7
  5901                           fsr1h	equ	0xFE2
  5902                           fsr1l	equ	0xFE1
  5903                           indf2	equ	0xFDF
  5904                           postinc2	equ	0xFDE
  5905                           postdec2	equ	0xFDD
  5906                           fsr2h	equ	0xFDA
  5907                           fsr2l	equ	0xFD9
  5908                           status	equ	0xFD8
  5909                           
  5910 ;; *************** function _E_TOG *****************
  5911 ;; Defined at:
  5912 ;;		line 5 in file "LCD.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;		None
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;		None
  5917 ;; Return value:  Size  Location     Type
  5918 ;;		None               void
  5919 ;; Registers used:
  5920 ;;		wreg
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5926 ;;      Params:         0       0       0       0
  5927 ;;      Locals:         0       0       0       0
  5928 ;;      Temps:          0       0       0       0
  5929 ;;      Totals:         0       0       0       0
  5930 ;;Total ram usage:        0 bytes
  5931 ;; Hardware stack levels used:    1
  5932 ;; Hardware stack levels required when called:    3
  5933 ;; This function calls:
  5934 ;;		Nothing
  5935 ;; This function is called by:
  5936 ;;		_LCDout
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text28
  5941  001978                     __ptext28:
  5942                           	opt stack 0
  5943  001978                     _E_TOG:
  5944                           	opt stack 24
  5945                           
  5946                           ;LCD.c: 8: LATCbits.LATC0=1;
  5947                           
  5948                           ;incstack = 0
  5949  001978  808B               	bsf	3979,0,c	;volatile
  5950                           
  5951                           ;LCD.c: 9: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5952  00197A  0E03               	movlw	3
  5953  00197C                     u3127:
  5954  00197C  2EE8               	decfsz	wreg,f,c
  5955  00197E  D7FE               	goto	u3127
  5956  001980  F000               	nop	
  5957                           
  5958                           ;LCD.c: 10: LATCbits.LATC0=0;
  5959  001982  908B               	bcf	3979,0,c	;volatile
  5960  001984  0012               	return		;funcret
  5961  001986                     __end_of_E_TOG:
  5962                           	opt stack 0
  5963                           tblptru	equ	0xFF8
  5964                           tblptrh	equ	0xFF7
  5965                           tblptrl	equ	0xFF6
  5966                           tablat	equ	0xFF5
  5967                           prodh	equ	0xFF4
  5968                           prodl	equ	0xFF3
  5969                           intcon	equ	0xFF2
  5970                           postinc0	equ	0xFEE
  5971                           wreg	equ	0xFE8
  5972                           indf1	equ	0xFE7
  5973                           fsr1h	equ	0xFE2
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           postinc2	equ	0xFDE
  5977                           postdec2	equ	0xFDD
  5978                           fsr2h	equ	0xFDA
  5979                           fsr2l	equ	0xFD9
  5980                           status	equ	0xFD8
  5981                           
  5982 ;; *************** function _InterruptHandlerLow *****************
  5983 ;; Defined at:
  5984 ;;		line 18 in file "main.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;		None
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;		None               void
  5991 ;; Registers used:
  5992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5998 ;;      Params:         0       0       0       0
  5999 ;;      Locals:         0       0       0       0
  6000 ;;      Temps:         17       0       0       0
  6001 ;;      Totals:        17       0       0       0
  6002 ;;Total ram usage:       17 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    2
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		Interrupt level 1
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	intcodelo
  6013  000018                     __pintcodelo:
  6014                           	opt stack 0
  6015  000018                     _InterruptHandlerLow:
  6016                           	opt stack 23
  6017                           
  6018                           ;incstack = 0
  6019  000018  803C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  6020  00001A  CFD8 F013          	movff	status,??_InterruptHandlerLow
  6021  00001E  CFE8 F014          	movff	wreg,??_InterruptHandlerLow+1
  6022  000022  CFE0 F015          	movff	bsr,??_InterruptHandlerLow+2
  6023  000026  CFFA F016          	movff	pclath,??_InterruptHandlerLow+3
  6024  00002A  CFFB F017          	movff	pclatu,??_InterruptHandlerLow+4
  6025  00002E  CFE9 F018          	movff	fsr0l,??_InterruptHandlerLow+5
  6026  000032  CFEA F019          	movff	fsr0h,??_InterruptHandlerLow+6
  6027  000036  CFE1 F01A          	movff	fsr1l,??_InterruptHandlerLow+7
  6028  00003A  CFE2 F01B          	movff	fsr1h,??_InterruptHandlerLow+8
  6029  00003E  CFD9 F01C          	movff	fsr2l,??_InterruptHandlerLow+9
  6030  000042  CFDA F01D          	movff	fsr2h,??_InterruptHandlerLow+10
  6031  000046  CFF3 F01E          	movff	prodl,??_InterruptHandlerLow+11
  6032  00004A  CFF4 F01F          	movff	prodh,??_InterruptHandlerLow+12
  6033  00004E  CFF6 F020          	movff	tblptrl,??_InterruptHandlerLow+13
  6034  000052  CFF7 F021          	movff	tblptrh,??_InterruptHandlerLow+14
  6035  000056  CFF8 F022          	movff	tblptru,??_InterruptHandlerLow+15
  6036  00005A  CFF5 F023          	movff	tablat,??_InterruptHandlerLow+16
  6037                           
  6038                           ;main.c: 20: if (PIR1bits.RCIF) {
  6039  00005E  AA9E               	btfss	3998,5,c	;volatile
  6040  000060  D016               	goto	i1l358
  6041                           
  6042                           ;main.c: 21: ReceivedString[i]=RCREG;
  6043  000062  503A               	movf	_i,w,c	;volatile
  6044  000064  0D01               	mullw	1
  6045  000066  0EC0               	movlw	low _ReceivedString
  6046  000068  24F3               	addwf	prodl,w,c
  6047  00006A  6ED9               	movwf	fsr2l,c
  6048  00006C  0E00               	movlw	high _ReceivedString
  6049  00006E  20F4               	addwfc	prodh,w,c
  6050  000070  6EDA               	movwf	fsr2h,c
  6051  000072  CFAE FFDF          	movff	4014,indf2	;volatile
  6052                           
  6053                           ;main.c: 22: RFID_Read=1;
  6054  000076  0E01               	movlw	1
  6055  000078  0101               	movlb	1	; () banked
  6056  00007A  6FFE               	movwf	_RFID_Read& (0+255),b	;volatile
  6057                           
  6058                           ; BSR set to: 1
  6059                           ;main.c: 23: if (i==15){
  6060  00007C  0E0F               	movlw	15
  6061  00007E  183A               	xorwf	_i,w,c	;volatile
  6062  000080  A4D8               	btfss	status,2,c
  6063  000082  D003               	goto	i1l2578
  6064                           
  6065                           ; BSR set to: 1
  6066                           ;main.c: 24: i=0;
  6067  000084  0E00               	movlw	0
  6068  000086  6E3A               	movwf	_i,c	;volatile
  6069                           
  6070                           ;main.c: 25: }else{
  6071  000088  D001               	goto	i1l2580
  6072  00008A                     i1l2578:
  6073                           
  6074                           ; BSR set to: 1
  6075                           ;main.c: 26: i++;
  6076  00008A  2A3A               	incf	_i,f,c	;volatile
  6077  00008C                     i1l2580:
  6078                           
  6079                           ; BSR set to: 1
  6080                           ;main.c: 27: }
  6081                           ;main.c: 28: PIR1bits.RCIF=0;
  6082  00008C  9A9E               	bcf	3998,5,c	;volatile
  6083  00008E                     i1l358:
  6084  00008E  C023  FFF5         	movff	??_InterruptHandlerLow+16,tablat
  6085  000092  C022  FFF8         	movff	??_InterruptHandlerLow+15,tblptru
  6086  000096  C021  FFF7         	movff	??_InterruptHandlerLow+14,tblptrh
  6087  00009A  C020  FFF6         	movff	??_InterruptHandlerLow+13,tblptrl
  6088  00009E  C01F  FFF4         	movff	??_InterruptHandlerLow+12,prodh
  6089  0000A2  C01E  FFF3         	movff	??_InterruptHandlerLow+11,prodl
  6090  0000A6  C01D  FFDA         	movff	??_InterruptHandlerLow+10,fsr2h
  6091  0000AA  C01C  FFD9         	movff	??_InterruptHandlerLow+9,fsr2l
  6092  0000AE  C01B  FFE2         	movff	??_InterruptHandlerLow+8,fsr1h
  6093  0000B2  C01A  FFE1         	movff	??_InterruptHandlerLow+7,fsr1l
  6094  0000B6  C019  FFEA         	movff	??_InterruptHandlerLow+6,fsr0h
  6095  0000BA  C018  FFE9         	movff	??_InterruptHandlerLow+5,fsr0l
  6096  0000BE  C017  FFFB         	movff	??_InterruptHandlerLow+4,pclatu
  6097  0000C2  C016  FFFA         	movff	??_InterruptHandlerLow+3,pclath
  6098  0000C6  C015  FFE0         	movff	??_InterruptHandlerLow+2,bsr
  6099  0000CA  C014  FFE8         	movff	??_InterruptHandlerLow+1,wreg
  6100  0000CE  C013  FFD8         	movff	??_InterruptHandlerLow,status
  6101  0000D2  903C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  6102  0000D4  0010               	retfie	
  6103  0000D6                     __end_of_InterruptHandlerLow:
  6104                           	opt stack 0
  6105                           pclatu	equ	0xFFB
  6106                           pclath	equ	0xFFA
  6107                           tblptru	equ	0xFF8
  6108                           tblptrh	equ	0xFF7
  6109                           tblptrl	equ	0xFF6
  6110                           tablat	equ	0xFF5
  6111                           prodh	equ	0xFF4
  6112                           prodl	equ	0xFF3
  6113                           intcon	equ	0xFF2
  6114                           postinc0	equ	0xFEE
  6115                           fsr0h	equ	0xFEA
  6116                           fsr0l	equ	0xFE9
  6117                           wreg	equ	0xFE8
  6118                           indf1	equ	0xFE7
  6119                           fsr1h	equ	0xFE2
  6120                           fsr1l	equ	0xFE1
  6121                           bsr	equ	0xFE0
  6122                           indf2	equ	0xFDF
  6123                           postinc2	equ	0xFDE
  6124                           postdec2	equ	0xFDD
  6125                           fsr2h	equ	0xFDA
  6126                           fsr2l	equ	0xFD9
  6127                           status	equ	0xFD8
  6128                           
  6129 ;; *************** function _InterruptHandlerHigh *****************
  6130 ;; Defined at:
  6131 ;;		line 34 in file "main.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;		None
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;		None
  6136 ;; Return value:  Size  Location     Type
  6137 ;;		None               void
  6138 ;; Registers used:
  6139 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6145 ;;      Params:         0       0       0       0
  6146 ;;      Locals:         0       0       0       0
  6147 ;;      Temps:         14       0       0       0
  6148 ;;      Totals:        14       0       0       0
  6149 ;;Total ram usage:       14 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    1
  6152 ;; This function calls:
  6153 ;;		i2_delay_tenth_s
  6154 ;; This function is called by:
  6155 ;;		Interrupt level 2
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           	psect	intcode
  6160  000008                     __pintcode:
  6161                           	opt stack 0
  6162  000008                     _InterruptHandlerHigh:
  6163                           	opt stack 23
  6164                           
  6165                           ;incstack = 0
  6166  000008  823C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6167  00000A  CFFA F005          	movff	pclath,??_InterruptHandlerHigh
  6168  00000E  CFFB F006          	movff	pclatu,??_InterruptHandlerHigh+1
  6169  000012  EFBD  F009         	goto	int_func
  6170                           pclatu	equ	0xFFB
  6171                           pclath	equ	0xFFA
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           postinc0	equ	0xFEE
  6180                           fsr0h	equ	0xFEA
  6181                           fsr0l	equ	0xFE9
  6182                           wreg	equ	0xFE8
  6183                           indf1	equ	0xFE7
  6184                           fsr1h	equ	0xFE2
  6185                           fsr1l	equ	0xFE1
  6186                           bsr	equ	0xFE0
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194                           	psect	intcode_body
  6195  00137A                     __pintcode_body:
  6196                           	opt stack 23
  6197  00137A                     int_func:
  6198                           	opt stack 23
  6199  00137A  CFE9 F007          	movff	fsr0l,??_InterruptHandlerHigh+2
  6200  00137E  CFEA F008          	movff	fsr0h,??_InterruptHandlerHigh+3
  6201  001382  CFE1 F009          	movff	fsr1l,??_InterruptHandlerHigh+4
  6202  001386  CFE2 F00A          	movff	fsr1h,??_InterruptHandlerHigh+5
  6203  00138A  CFD9 F00B          	movff	fsr2l,??_InterruptHandlerHigh+6
  6204  00138E  CFDA F00C          	movff	fsr2h,??_InterruptHandlerHigh+7
  6205  001392  CFF3 F00D          	movff	prodl,??_InterruptHandlerHigh+8
  6206  001396  CFF4 F00E          	movff	prodh,??_InterruptHandlerHigh+9
  6207  00139A  CFF6 F00F          	movff	tblptrl,??_InterruptHandlerHigh+10
  6208  00139E  CFF7 F010          	movff	tblptrh,??_InterruptHandlerHigh+11
  6209  0013A2  CFF8 F011          	movff	tblptru,??_InterruptHandlerHigh+12
  6210  0013A6  CFF5 F012          	movff	tablat,??_InterruptHandlerHigh+13
  6211                           
  6212                           ;main.c: 35: if (INTCONbits.INT0IF) {
  6213  0013AA  A2F2               	btfss	intcon,1,c	;volatile
  6214  0013AC  D00D               	goto	i2l366
  6215                           
  6216                           ;main.c: 36: if (mode==-1) {
  6217  0013AE  283B               	incf	_mode,w,c	;volatile
  6218  0013B0  A4D8               	btfss	status,2,c
  6219  0013B2  D003               	goto	i2l2588
  6220                           
  6221                           ;main.c: 38: mode=1;
  6222  0013B4  0E01               	movlw	1
  6223  0013B6  6E3B               	movwf	_mode,c	;volatile
  6224                           
  6225                           ;main.c: 39: } else if (mode==0) {
  6226  0013B8  D003               	goto	i2l2592
  6227  0013BA                     i2l2588:
  6228  0013BA  503B               	movf	_mode,w,c	;volatile
  6229  0013BC  A4D8               	btfss	status,2,c
  6230                           
  6231                           ;main.c: 43: mode=-1;
  6232                           
  6233                           ;main.c: 41: } else {
  6234  0013BE  683B               	setf	_mode,c	;volatile
  6235  0013C0                     i2l2592:
  6236                           
  6237                           ;main.c: 44: }
  6238                           ;main.c: 46: delay_tenth_s(2);
  6239  0013C0  0E02               	movlw	2
  6240  0013C2  ECEE  F00B         	call	i2_delay_tenth_s
  6241                           
  6242                           ;main.c: 47: INTCONbits.INT0IF=0;
  6243  0013C6  92F2               	bcf	intcon,1,c	;volatile
  6244  0013C8                     i2l366:
  6245  0013C8  C012  FFF5         	movff	??_InterruptHandlerHigh+13,tablat
  6246  0013CC  C011  FFF8         	movff	??_InterruptHandlerHigh+12,tblptru
  6247  0013D0  C010  FFF7         	movff	??_InterruptHandlerHigh+11,tblptrh
  6248  0013D4  C00F  FFF6         	movff	??_InterruptHandlerHigh+10,tblptrl
  6249  0013D8  C00E  FFF4         	movff	??_InterruptHandlerHigh+9,prodh
  6250  0013DC  C00D  FFF3         	movff	??_InterruptHandlerHigh+8,prodl
  6251  0013E0  C00C  FFDA         	movff	??_InterruptHandlerHigh+7,fsr2h
  6252  0013E4  C00B  FFD9         	movff	??_InterruptHandlerHigh+6,fsr2l
  6253  0013E8  C00A  FFE2         	movff	??_InterruptHandlerHigh+5,fsr1h
  6254  0013EC  C009  FFE1         	movff	??_InterruptHandlerHigh+4,fsr1l
  6255  0013F0  C008  FFEA         	movff	??_InterruptHandlerHigh+3,fsr0h
  6256  0013F4  C007  FFE9         	movff	??_InterruptHandlerHigh+2,fsr0l
  6257  0013F8  C006  FFFB         	movff	??_InterruptHandlerHigh+1,pclatu
  6258  0013FC  C005  FFFA         	movff	??_InterruptHandlerHigh,pclath
  6259  001400  923C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6260  001402  0011               	retfie		f
  6261  001404                     __end_of_InterruptHandlerHigh:
  6262                           	opt stack 0
  6263                           pclatu	equ	0xFFB
  6264                           pclath	equ	0xFFA
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           intcon	equ	0xFF2
  6272                           postinc0	equ	0xFEE
  6273                           fsr0h	equ	0xFEA
  6274                           fsr0l	equ	0xFE9
  6275                           wreg	equ	0xFE8
  6276                           indf1	equ	0xFE7
  6277                           fsr1h	equ	0xFE2
  6278                           fsr1l	equ	0xFE1
  6279                           bsr	equ	0xFE0
  6280                           indf2	equ	0xFDF
  6281                           postinc2	equ	0xFDE
  6282                           postdec2	equ	0xFDD
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function i2_delay_tenth_s *****************
  6288 ;; Defined at:
  6289 ;;		line 21 in file "Movement.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  tenth_second    1    wreg     unsigned char 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  tenth_second    1    1[COMRAM] unsigned char 
  6294 ;;  delay_tenth_    2    2[COMRAM] unsigned int 
  6295 ;; Return value:  Size  Location     Type
  6296 ;;		None               void
  6297 ;; Registers used:
  6298 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6304 ;;      Params:         0       0       0       0
  6305 ;;      Locals:         3       0       0       0
  6306 ;;      Temps:          1       0       0       0
  6307 ;;      Totals:         4       0       0       0
  6308 ;;Total ram usage:        4 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_InterruptHandlerHigh
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           	psect	text31
  6318  0017DC                     __ptext31:
  6319                           	opt stack 0
  6320  0017DC                     i2_delay_tenth_s:
  6321                           	opt stack 23
  6322                           
  6323                           ;incstack = 0
  6324                           ;i2delay_tenth_s@tenth_seconds stored from wreg
  6325  0017DC  6E02               	movwf	i2delay_tenth_s@tenth_seconds,c
  6326                           
  6327                           ;Movement.c: 22: unsigned int i=0;
  6328  0017DE  0E00               	movlw	0
  6329  0017E0  6E04               	movwf	i2delay_tenth_s@i+1,c
  6330  0017E2  0E00               	movlw	0
  6331  0017E4  6E03               	movwf	i2delay_tenth_s@i,c
  6332                           
  6333                           ;Movement.c: 23: for (i=1; i<=tenth_seconds*2; i++) {
  6334  0017E6  0E00               	movlw	0
  6335  0017E8  6E04               	movwf	i2delay_tenth_s@i+1,c
  6336  0017EA  0E01               	movlw	1
  6337  0017EC  6E03               	movwf	i2delay_tenth_s@i,c
  6338  0017EE  D009               	goto	i2l2550
  6339  0017F0                     i2l2546:
  6340                           
  6341                           ;Movement.c: 25: _delay((unsigned long)((50)*(8000000/4000.0)));
  6342  0017F0  0E82               	movlw	130
  6343  0017F2  6E01               	movwf	??i2_delay_tenth_s& (0+255),c
  6344  0017F4  0EDE               	movlw	222
  6345  0017F6                     i2u313_47:
  6346  0017F6  2EE8               	decfsz	wreg,f,c
  6347  0017F8  D7FE               	goto	i2u313_47
  6348  0017FA  2E01               	decfsz	??i2_delay_tenth_s& (0+255),f,c
  6349  0017FC  D7FC               	goto	i2u313_47
  6350  0017FE  4A03               	infsnz	i2delay_tenth_s@i,f,c
  6351  001800  2A04               	incf	i2delay_tenth_s@i+1,f,c
  6352  001802                     i2l2550:
  6353  001802  5002               	movf	i2delay_tenth_s@tenth_seconds,w,c
  6354  001804  0D02               	mullw	2
  6355  001806  5003               	movf	i2delay_tenth_s@i,w,c
  6356  001808  5CF3               	subwf	prodl,w,c
  6357  00180A  5004               	movf	i2delay_tenth_s@i+1,w,c
  6358  00180C  58F4               	subwfb	prodh,w,c
  6359  00180E  A0D8               	btfss	status,0,c
  6360  001810  0012               	return	
  6361  001812  D7EE               	goto	i2l2546
  6362  001814                     __end_ofi2_delay_tenth_s:
  6363                           	opt stack 0
  6364                           pclatu	equ	0xFFB
  6365                           pclath	equ	0xFFA
  6366                           tblptru	equ	0xFF8
  6367                           tblptrh	equ	0xFF7
  6368                           tblptrl	equ	0xFF6
  6369                           tablat	equ	0xFF5
  6370                           prodh	equ	0xFF4
  6371                           prodl	equ	0xFF3
  6372                           intcon	equ	0xFF2
  6373                           postinc0	equ	0xFEE
  6374                           fsr0h	equ	0xFEA
  6375                           fsr0l	equ	0xFE9
  6376                           wreg	equ	0xFE8
  6377                           indf1	equ	0xFE7
  6378                           fsr1h	equ	0xFE2
  6379                           fsr1l	equ	0xFE1
  6380                           bsr	equ	0xFE0
  6381                           indf2	equ	0xFDF
  6382                           postinc2	equ	0xFDE
  6383                           postdec2	equ	0xFDD
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8
  6387                           pclatu	equ	0xFFB
  6388                           pclath	equ	0xFFA
  6389                           tblptru	equ	0xFF8
  6390                           tblptrh	equ	0xFF7
  6391                           tblptrl	equ	0xFF6
  6392                           tablat	equ	0xFF5
  6393                           prodh	equ	0xFF4
  6394                           prodl	equ	0xFF3
  6395                           intcon	equ	0xFF2
  6396                           postinc0	equ	0xFEE
  6397                           fsr0h	equ	0xFEA
  6398                           fsr0l	equ	0xFE9
  6399                           wreg	equ	0xFE8
  6400                           indf1	equ	0xFE7
  6401                           fsr1h	equ	0xFE2
  6402                           fsr1l	equ	0xFE1
  6403                           bsr	equ	0xFE0
  6404                           indf2	equ	0xFDF
  6405                           postinc2	equ	0xFDE
  6406                           postdec2	equ	0xFDD
  6407                           fsr2h	equ	0xFDA
  6408                           fsr2l	equ	0xFD9
  6409                           status	equ	0xFD8
  6410                           
  6411                           	psect	rparam
  6412  0000                     pclatu	equ	0xFFB
  6413                           pclath	equ	0xFFA
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           intcon	equ	0xFF2
  6421                           postinc0	equ	0xFEE
  6422                           fsr0h	equ	0xFEA
  6423                           fsr0l	equ	0xFE9
  6424                           wreg	equ	0xFE8
  6425                           indf1	equ	0xFE7
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           bsr	equ	0xFE0
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           postdec2	equ	0xFDD
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436                           	psect	temp
  6437  00003C                     btemp:
  6438                           	opt stack 0
  6439  00003C                     	ds	1
  6440  0000                     int$flags	set	btemp
  6441                           pclatu	equ	0xFFB
  6442                           pclath	equ	0xFFA
  6443                           tblptru	equ	0xFF8
  6444                           tblptrh	equ	0xFF7
  6445                           tblptrl	equ	0xFF6
  6446                           tablat	equ	0xFF5
  6447                           prodh	equ	0xFF4
  6448                           prodl	equ	0xFF3
  6449                           intcon	equ	0xFF2
  6450                           postinc0	equ	0xFEE
  6451                           fsr0h	equ	0xFEA
  6452                           fsr0l	equ	0xFE9
  6453                           wreg	equ	0xFE8
  6454                           indf1	equ	0xFE7
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           bsr	equ	0xFE0
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           postdec2	equ	0xFDD
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8


Data Sizes:
    Strings     79
    Constant    10
    Data        0
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      59
    BANK0           160     88     112
    BANK1           256    250     255
    BANK2           256     18      18

Pointer List with Targets:

    ScanIR@MoveType	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveType(BANK1[100]), 

    ScanIR@MoveTime	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    ScanIR@Move	PTR unsigned char  size(2) Largest target is 1
		 -> main@Move(BANK0[1]), 

    ScanWithRange@MoveTimeEntry	PTR unsigned char  size(2) Largest target is 100
		 -> main@MoveTime(BANK1[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_4(CODE[16]), STR_2(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 40
		 -> main@buf(BANK1[40]), ScanWithRange@buf(BANK0[40]), ScanIR@buf(BANK0[40]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    VerifySignal@Signal	PTR unsigned char  size(2) Largest target is 16
		 -> ReceivedString(BANK0[16]), 

    ScanWithRange@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanWithRange@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    ScanIR@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    ScanIR@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    LCD_String@string	PTR unsigned char  size(2) Largest target is 40
		 -> STR_9(CODE[11]), STR_8(CODE[12]), STR_7(CODE[10]), main@buf(BANK1[40]), 
		 -> STR_5(CODE[17]), ScanWithRange@buf(BANK0[40]), STR_3(CODE[12]), ScanIR@buf(BANK0[40]), 
		 -> STR_1(CODE[12]), 

    fullSpeedBack@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedBack@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedBack@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    fullSpeedAhead@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    fullSpeedAhead@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    fullSpeedAhead@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnRight@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnRight@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    turnLeft@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    turnLeft@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mR.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stop@mL.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mL(BANK2[9]), 

    stopMotor@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    stopMotor@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorFullSpeed@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorFullSpeed@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    S71DC_motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1H(SFR[1]), PDC0H(SFR[1]), 

    S71DC_motor$dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m.dutyLowByte	PTR unsigned char  size(2) Largest target is 1
		 -> PDC1L(SFR[1]), PDC0L(SFR[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@mR(BANK2[9]), main@mL(BANK2[9]), 


Critical Paths under _main in COMRAM

    _main->_ScanIR
    _main->_fullSpeedAhead
    _initLCD->_SendLCD
    _fullSpeedBack->_fullSpeedAhead
    _turnRight->_fullSpeedAhead
    _turnLeft->_fullSpeedAhead
    _fullSpeedAhead->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___awdiv
    ___awdiv->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _SetLine->_SendLCD
    _LCD_String->_SendLCD
    _SendLCD->_LCDout

Critical Paths under _InterruptHandlerLow in COMRAM

    None.

Critical Paths under _InterruptHandlerHigh in COMRAM

    _InterruptHandlerHigh->i2_delay_tenth_s

Critical Paths under _main in BANK0

    _main->_ScanWithRange
    _fullSpeedBack->_fullSpeedAhead
    _ScanWithRange->_sprintf
    _turnRight->_fullSpeedAhead
    _turnRight->_stop
    _turnLeft->_fullSpeedAhead
    _turnLeft->_stop
    _fullSpeedAhead->_setMotorPWM
    _ScanIR->_sprintf
    _stop->_setMotorPWM

Critical Paths under _InterruptHandlerLow in BANK0

    None.

Critical Paths under _InterruptHandlerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandlerLow in BANK1

    None.

Critical Paths under _InterruptHandlerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandlerLow in BANK2

    None.

Critical Paths under _InterruptHandlerHigh in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               279   279      0   63770
                                             77 BANK0     11    11      0
                                              0 BANK1    250   250      0
                                              0 BANK2     18    18      0
                         _LCD_String
                             _ScanIR
                      _ScanWithRange
                            _SendLCD
                            _SetLine
                       _VerifySignal
                      _delay_tenth_s
                       _enableSensor
                     _fullSpeedAhead
                      _fullSpeedBack
                         _grabLeftIR
                        _grabRightIR
                             _initIR
                            _initLCD
                       _initMotorPWM
                           _initRFID
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initRFID                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initMotorPWM                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0    1138
                                             41 COMRAM     1     1      0
                             _LCDout
                            _SendLCD
 ---------------------------------------------------------------------------------
 (1) _initIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fullSpeedBack                                        4     0      4    3630
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
 ---------------------------------------------------------------------------------
 (1) _enableSensor                                         2     1      1     216
                                             35 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _VerifySignal                                        12    10      2     337
                                             35 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 (1) _ScanWithRange                                       64    55      9   29259
                                             13 BANK0     64    55      9
                         _LCD_String
                            _SendLCD
                            _SetLine
                      _delay_tenth_s
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
                           _turnLeft
                          _turnRight
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            4     0      4    8184
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             4     0      4    8030
                                              6 BANK0      4     0      4
                     _fullSpeedAhead
                               _stop
 ---------------------------------------------------------------------------------
 (2) _fullSpeedAhead                                       5     1      4    3198
                                             56 COMRAM     1     1      0
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _delay_tenth_s                                        4     4      0      47
                                             35 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ScanIR                                              58    47     11   12100
                                             56 COMRAM     1     1      0
                                             13 BANK0     57    46     11
                         _LCD_String
                            _SendLCD
                            _SetLine
                         _grabLeftIR
                        _grabRightIR
                            _sprintf
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4338
                                              2 BANK0      4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          9     7      2    1872
                                             49 COMRAM     7     5      2
                                              0 BANK0      2     2      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     561
                                             41 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    22      8    2933
                                             47 COMRAM     8     0      8
                                              0 BANK0     13    13      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             35 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     502
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             42 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             35 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _grabRightIR                                          8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _grabLeftIR                                           8     6      2      71
                                             35 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _SetLine                                              1     1      0    1094
                                             41 COMRAM     1     1      0
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1671
                                             41 COMRAM     2     0      2
                            _SendLCD
 ---------------------------------------------------------------------------------
 (2) _SendLCD                                              2     1      1    1050
                                             39 COMRAM     2     1      1
                             _LCDout
 ---------------------------------------------------------------------------------
 (3) _LCDout                                               4     4      0      88
                                             35 COMRAM     4     4      0
                              _E_TOG
 ---------------------------------------------------------------------------------
 (4) _E_TOG                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _InterruptHandlerLow                                 17    17      0       0
                                             18 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandlerHigh                                14    14      0      47
                                              4 COMRAM    14    14      0
                    i2_delay_tenth_s
 ---------------------------------------------------------------------------------
 (8) i2_delay_tenth_s                                      4     4      0      47
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_String
     _SendLCD
       _LCDout
         _E_TOG
   _ScanIR
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _ScanWithRange
     _LCD_String
       _SendLCD
         _LCDout
           _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
     _SetLine
       _SendLCD
         _LCDout
           _E_TOG
     _delay_tenth_s
     _grabLeftIR
     _grabRightIR
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
     _stop
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
     _turnLeft
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
     _turnRight
       _fullSpeedAhead
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
       _stop
         _setMotorPWM
           ___awdiv
             ___wmul (ARG)
           ___wmul
   _SendLCD
     _LCDout
       _E_TOG
   _SetLine
     _SendLCD
       _LCDout
         _E_TOG
   _VerifySignal
   _delay_tenth_s
   _enableSensor
   _fullSpeedAhead
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul
   _fullSpeedBack
     _fullSpeedAhead
       _setMotorPWM
         ___awdiv
           ___wmul (ARG)
         ___wmul
   _grabLeftIR
   _grabRightIR
   _initIR
   _initLCD
     _LCDout
       _E_TOG
     _SendLCD
       _LCDout
         _E_TOG
   _initMotorPWM
   _initRFID
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _stop
     _setMotorPWM
       ___awdiv
         ___wmul (ARG)
       ___wmul

 _InterruptHandlerLow (ROOT)

 _InterruptHandlerHigh (ROOT)
   i2_delay_tenth_s

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     12      12       9        7.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     FA      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      70       5       70.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      3B       1       62.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BC       3        0.0%
DATA                 0      0     1BC      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Mar 18 14:45:18 2018

                        ?_grabRightIR 0024                                     _i 003A  
                                  l35 0F58                                    l65 15BE  
                        ___awdiv@sign 002F                                    bsr 000FE0  
                 ___wmul@multiplicand 0026                           main@Message 01F0  
                         ?_LCD_String 002A                                   l224 0E28  
                                 l216 0D90                                   l371 040A  
                                 l859 1682                                   l869 1760  
                         grabLeftIR@i 002B                                   prod 000FF3  
                                 wreg 000FE8                          main@MoveTime 0100  
                        main@MoveType 0164                                  l2100 173E  
                                l2102 1742                                  l2106 1756  
                                l3002 0B64                                  l2140 150A  
                                l2124 1498                                  l3004 0B70  
                                l2150 154E                                  l2134 14DC  
                                l3006 0B8A                                  l2144 1512  
                                l2128 14A0                                  l2080 1658  
                                l3120 0D52                                  l3112 0D32  
                                l3104 0D08                                  l2162 186C  
                                l2090 1678                                  l2082 165C  
                                l3050 1098                                  l3114 0D36  
                                l2322 18E4                                  l2172 1612  
                                l2068 1954                                  l2180 17CA  
                                l3140 0DDE                                  l3132 0DB4  
                                l3108 0D22                                  l3212 0410  
                                l2166 15DE                                  l2158 185A  
                                l2078 1650                                  l3142 0DEA  
                                l3070 0C18                                  l3134 0DBA  
                                l3302 0690                                  l2176 17B8  
                                l3312 06F8                                  l2098 1736  
                                l3154 0E4A                                  l3322 0742  
                                l2540 12E2                                  l2532 1292  
                                l3324 0748                                  l3316 0702  
                                l3334 076E                                  l3262 051A  
                                l3246 04D2                                  l2800 1418  
                                l2528 128A                                  l3328 0752  
                                l3336 0774                                  l3344 07D0  
                                l3354 0828                                  l3290 061A  
                                l2812 143E                                  l3364 086E  
                                l3356 082E                                  l2910 08D6  
                                l2814 1446                                  l2806 1428  
                                l3294 066C                                  l3278 058E  
                                l2904 08BC                                  l2832 147E  
                                l2824 1466                                  l2816 144A  
                                l3368 0870                                  l2906 08CE  
                                l2842 0F30                                  l2850 1300  
                                l3298 067A                                  l2940 09D6  
                                l2916 0906                                  l2828 1470  
                                l2860 1338                                  l2926 0978  
                                l2854 1318                                  l2846 12E8  
                                l2952 0A0C                                  l2928 09A0  
                                l2872 1586                                  l2962 0A66  
                                l2938 09D0                                  l2972 0A94  
                                l2980 0ABA                                  l2964 0A70  
                                l2876 159E                                  l2868 156E  
                                l2982 0AC6                                  l2958 0A2E  
                                l2994 0B08                                  l2898 08A0  
                                l2996 0B0E                                  l2988 0AEA  
                                STR_1 0339                                  STR_2 030C  
                                STR_3 0339                                  STR_4 030C  
                                STR_5 031C                                  STR_6 030B  
                                STR_7 0350                                  STR_8 032D  
                                STR_9 0345                                  u1215 10BA  
                                u1225 10C8                                  u1235 10E6  
                                u1245 10F4                                  _LATB 000F8A  
                                u1255 1114                                  u3007 15B8  
                                u1265 1122                                  u3017 17BE  
                                u1530 1602                                  u1275 1152  
                                u3107 189E                                  u3027 1004  
                                u1540 1632                                  u2244 0EF0  
                                u3117 116E                                  u1365 1880  
                                u2245 0EEC                                  u3037 101A  
                                u1366 1882                                  u2254 0F4C  
                                u3127 197C                                  u2255 0F48  
                                u3047 1332                                  u1537 15F8  
                                u3057 14D0                                  u1465 14A8  
                                u2265 0FA6                                  u1547 1628  
                                u3067 1542                                  u3077 186E  
                                u3087 160C                                  u1495 151A  
                                u3097 188E                                  u2750 06C2  
                                u1775 18E0                                  u1776 18E2  
                                u2760 06D6                                  u2752 06C4  
                                u2762 06D8                                  u1795 18F2  
                                u2907 11DC                                  u1796 18F4  
                                u2917 11EE                                  u2837 0466  
                                u2927 1204                                  u2847 047E  
                                u2937 1218                                  u2857 1188  
                                u2947 122A                                  u2867 119E  
                                u2957 0C4C                                  u2877 11AE  
                                u2967 0C64                                  u2887 11BC  
                                u2977 0CD2                                  u2897 11CA  
                                u2987 0D6E                                  u2997 0E06  
                          ScanIR@Move 0072                                  _main 035C  
                                _mode 003B                         main@ScanAngle 00AF  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                indf1 000FE7                                  fsr1l 000FE1  
                                indf2 000FDF                                  fsr2l 000FD9  
                                btemp 003C                                  _stop 12E6  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 00D6  
                        ___param_bank 000010                       i2_delay_tenth_s 17DC  
                     __end_of_SendLCD 18A6                       __end_of_SetLine 1876  
                  ScanWithRange@F3889 00BC                           ScanIR@F3878 00B8  
                               ?_main 0001                       __end_of___awdiv 1488  
                               ?_stop 0062                       ___awdiv@divisor 002C  
                               _PDC0H 000F78                                 _PDC1H 000F76  
                               _PDC0L 000F79                                 _PDC1L 000F77  
                               _T5CON 000FB7                          grabRightIR@i 002B  
                     __end_of___lwdiv 168C                       __end_of___lwmod 176A  
                               i1l358 008E                                 i2l366 13C8  
                     ___awdiv@counter 002E                                 _RCREG 000FAE  
                               _E_TOG 1978                                 _SPBRG 000FAF  
                               _TRISC 000F94                                 _TXREG 000FAD  
                     __end_of_initLCD 1232                       __end_of_dpowers 030B  
                     __end_of_isdigit 195C                                 main@i 00B7  
                               tablat 000FF5                                 status 000FD8  
                 __size_of_LCD_String 005E                       __end_of_sprintf 0B98  
              __size_of_ScanWithRange 02E4                       __initialization 18A6  
                        __end_of_main 0892                          __end_of_stop 137A  
                      delay_tenth_s@i 0026                        __CFG_OSC$IRCIO 000000  
                    LCD_String@string 002A          ScanIR@DirectionMoveThreshold 00A0  
                __end_of_enableSensor 18F6                   VerifySignal@hexByte 002D  
                              ??_main 00AD                                ??_stop 0039  
                       __activetblptr 000002                         ?_initMotorPWM 0001  
                              ?_E_TOG 0001            ScanWithRange@TurnDirection 0073  
                        ?_setMotorPWM 0032                __size_of_fullSpeedBack 003A  
                    ___awdiv@dividend 002A                                i1l2580 008C  
                              i1l2578 008A                                i2l2550 1802  
                      __CFG_WDTEN$OFF 000000                                i2l2546 17F0  
                              i2l2592 13C0                                i2l2588 13BA  
               __end_of_delay_tenth_s 17DC                                _LCDout 10B0  
                         SendLCD@Byte 0029                                _OSCCON 000FD3  
                              _PTCON0 000F7F                                _PTCON1 000F7E  
                              _SPBRGH 000FB0                                _PTPERH 000F7A  
                              _PTPERL 000F7B               __end_ofi2_delay_tenth_s 1814  
                         SendLCD@type 0028                             ??_SendLCD 0029  
                              _ScanIR 0FB6                             ??_SetLine 002A  
                              ___wmul 18F6                             ??___awdiv 002E  
                    __end_of_initRFID 1978                             ??___lwdiv 0028  
                           ??___lwmod 002F                                _initIR 191C  
                __size_of_grabRightIR 0072                                clear_0 18B8  
                    ___awdiv@quotient 0030                                main@mL 0200  
                              main@mR 0209                        ??_initMotorPWM 0024  
                           ??_initLCD 002A                         _ScanWithRange 0B98  
                           ??_isdigit 0024          i2delay_tenth_s@tenth_seconds 0002  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                              stop@mL 0062                                stop@mR 0064  
                           ??_sprintf 0060                      __end_of_turnLeft 1728  
                     fullSpeedBack@mL 0066                       fullSpeedBack@mR 0068  
                          __accesstop 0060               __end_of__initialization 18C2  
                       ___rparam_used 000001                           SetLine@line 002A  
                       __end_of_E_TOG 1986                        __pcstackCOMRAM 0001  
                       _fullSpeedBack 176A                          ??_LCD_String 002C  
                      ?_ScanWithRange 006D                  VerifySignal@checksum 002C  
                             ??_E_TOG 0024         __size_of_InterruptHandlerHigh 13FC  
         __end_of_InterruptHandlerLow 00D6            delay_tenth_s@tenth_seconds 0025  
                        sprintf@width 006A                            __pbssBANK0 00B8  
                          __pbssBANK1 01FA                               ?_LCDout 0001  
                    ?i2_delay_tenth_s 0001                    __end_of_LCD_String 163A  
                             ?_ScanIR 006D                        ?_fullSpeedBack 0066  
               __size_of_enableSensor 0026                               ?___wmul 0024  
                 grabLeftIR@IR_signal 0029                               _CAP1CON 000F63  
                             _CAP2CON 000F62                               ?_initIR 0001  
             __size_of_fullSpeedAhead 0070                            _grabLeftIR 14FA  
                             _PWMCON0 000F6F                               _PWMCON1 000F6E  
                 ScanIR@TurnDirection 0071                             ?_initRFID 0001  
                __size_of_setMotorPWM 013A                       __size_of_LCDout 00C6  
                        _enableSensor 18D0                    __size_of_turnRight 004E  
                __end_of_initMotorPWM 1846                               _SendLCD 1876  
                             __Hparam 0000                               _SetLine 1846  
                             __Lparam 0000                       __size_of_ScanIR 00FA  
                             ___awdiv 1404                       __size_of___wmul 0026  
                             ___lwdiv 163A                               ___lwmod 1728  
                        __psmallconst 0300                       __size_of_initIR 0022  
                             __pcinit 18A6                       ??_ScanWithRange 0076  
                             __ramtop 0300                             ?_turnLeft 0066  
                             __ptext0 035C                               __ptext1 195C  
                             __ptext2 1814                               __ptext3 1176  
                             __ptext4 191C                               __ptext5 176A  
                             __ptext6 18D0                               __ptext7 1232  
                             __ptext8 0B98                               __ptext9 168C  
                             _initLCD 1176                               _dpowers 0301  
                             _isdigit 193E                          LCDout@number 0027  
                       ?_VerifySignal 0024                               main@buf 01C8  
                             _sprintf 0892                        __pintcode_body 137A  
                end_of_initialization 18C2                        ScanWithRange@i 00A0  
                      ScanWithRange@n 00A9                    setMotorPWM@PWMduty 0060  
                          ??_initRFID 0024                         __Lmediumconst 0000  
                             int_func 137A                    ScanIR@SensorResult 00A2  
                     ??_fullSpeedBack 003A                             _RFID_Read 01FE  
                           _RCSTAbits 000FAB                               postdec2 000FDD  
                             postinc0 000FEE                               postinc2 000FDE  
                          ??_turnLeft 003A                     __end_of_turnRight 16DA  
                         ?_grabLeftIR 0024                             _TRISAbits 000F92  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                           _TRISDbits 000F95                             _TRISEbits 000F96  
                      ??_VerifySignal 0026                      fullSpeedAhead@mL 0062  
                    fullSpeedAhead@mR 0064                ScanWithRange@RightFlag 00AC  
                      __end_of_LCDout 1176                             _TXSTAbits 000FAC  
                           ScanIR@buf 0078            ScanWithRange@MoveTimeEntry 0074  
                       ??_grabRightIR 0026                        __end_of_ScanIR 10B0  
                      _fullSpeedAhead 156C                        _ReceivedString 00C0  
                      __end_of___wmul 191C                           _BAUDCONbits 000FAA  
                      __end_of_initIR 193E                __size_of_delay_tenth_s 0038  
                 start_initialization 18A6                    VerifySignal@Signal 0024  
               __size_of_initMotorPWM 0032                              ??_LCDout 0024  
        __end_of_InterruptHandlerHigh 1404                              ??_ScanIR 0039  
              __end_of_fullSpeedAhead 15DC                   __size_of_grabLeftIR 0072  
                            ??___wmul 0028                              ??_initIR 0024  
                 __end_of_grabRightIR 14FA                          _initMotorPWM 1814  
                         __pbssCOMRAM 003A                         __pcstackBANK0 0060  
                       __pcstackBANK1 0100                         __pcstackBANK2 0200  
                        _isdigit$1873 0025          __size_of_InterruptHandlerLow 00BE  
                       _delay_tenth_s 17A4                           sprintf@flag 0069  
                         sprintf@prec 0066                     __size_of_initRFID 001C  
                            ?_SendLCD 0028                              ?_SetLine 0001  
                    ___lwdiv@dividend 0024                       ?_fullSpeedAhead 0062  
                           __pintcode 0008                  __end_of_VerifySignal 12E6  
                            ?___awdiv 002A              __size_ofi2_delay_tenth_s 0038  
                            ?___lwdiv 0024                              ?___lwmod 002B  
                         __pintcodelo 0018                              _CAP1BUFH 000F69  
                            _CAP1BUFL 000F68                              _CAP2BUFH 000F67  
                            _CAP2BUFL 000F66                              ?_initLCD 0001  
                    main@SensorResult 00B0                           __smallconst 0300  
                      __size_of_E_TOG 000E                              ?_isdigit 0001  
                   __size_of_turnLeft 004E                         ??_setMotorPWM 0034  
                    ___lwdiv@quotient 0028                              ?_sprintf 0030  
                      ?_delay_tenth_s 0001                        ___wmul@product 0028  
                            _LATAbits 000F89                              _LATCbits 000F8B  
                            _LATDbits 000F8C                              _LATEbits 000F8D  
                            _IPR1bits 000F9F                              _PIE1bits 000F9D  
                         turnRight@mL 0066                           turnRight@mR 0068  
                            i2u313_47 17F6                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             main@F3893 01FA  
                         _grabRightIR 1488                 ScanWithRange@LeftFlag 00AB  
                grabRightIR@IR_signal 0029             ScanWithRange@milliseconds 0071  
                   ___wmul@multiplier 0024                 __end_of_ScanWithRange 0E7C  
                        setMotorPWM@m 0032                  _InterruptHandlerHigh 0008  
                            ScanIR@mL 006D                              ScanIR@mR 006F  
                        ??_grabLeftIR 0026                             _turnRight 168C  
                      ScanIR@MoveTime 0074                        ScanIR@MoveType 0076  
                    ScanWithRange@buf 0078                   __end_of_setMotorPWM 0FB6  
                            __Hrparam 0000                      __size_of_SendLCD 0030  
                            __Lrparam 0000                 __end_of_fullSpeedBack 17A4  
                    __size_of_SetLine 0030                    __end_of_grabLeftIR 156C  
                    __size_of___awdiv 0084                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                            _ANSEL0bits 000FB8  
               ?_InterruptHandlerHigh 0001                     ??i2_delay_tenth_s 0001  
                          sprintf@val 0067                      __size_of_initLCD 00BC  
                    __size_of_isdigit 001E                       ___lwdiv@divisor 0026  
                     ___lwdiv@counter 002A                            ?_turnRight 0066  
                            __ptext10 16DA                              __ptext11 156C  
                            __ptext20 1728                              __ptext12 17A4  
                            __ptext21 163A                              __ptext13 0FB6  
                            __ptext22 1488                              __ptext14 12E6  
                            __ptext31 17DC                              __ptext23 14FA  
                            __ptext15 0E7C                              __ptext24 1846  
                            __ptext16 1404                              __ptext25 15DC  
                            __ptext17 0892                              __ptext26 1876  
                            __ptext18 193E                              __ptext27 10B0  
                            __ptext19 18F6                              __ptext28 1978  
                     ??_delay_tenth_s 0024                      __size_of_sprintf 0306  
                   main@TurnDirection 00B4                              _initRFID 195C  
           ScanWithRange@SensorResult 00A5              ScanWithRange@FlagCounter 00A4  
                       __size_of_main 0536                    main@DirectionFound 00B5  
                       __size_of_stop 0094                            turnLeft@mL 0066  
                          turnLeft@mR 0068                 __size_of_VerifySignal 00B4  
                            int$flags 003C                              main@Move 00B6  
                 _InterruptHandlerLow 0018                            _LCD_String 15DC  
                            _turnLeft 16DA                       ScanWithRange@mL 006D  
                     ScanWithRange@mR 006F                    enableSensor@sensor 0025  
                  enableSensor@status 0024                         VerifySignal@i 002F  
                          _INTCONbits 000FF2                              isdigit@c 0026  
                         _setMotorPWM 0E7C                          _VerifySignal 1232  
                            intlevel1 0000                              intlevel2 0000  
                           sprintf@ap 0064                             sprintf@sp 0030  
                ?_InterruptHandlerLow 0001                         ?_enableSensor 0024  
                    ___lwmod@dividend 002B                      ??_fullSpeedAhead 0039  
                          _OSCCONbits 000FD3  ScanWithRange@DirectionFoundThreshold 00A2  
              ??_InterruptHandlerHigh 0005                              sprintf@c 006C  
                            sprintf@f 0032                       ___lwmod@divisor 002D  
                     ___lwmod@counter 002F                           ??_turnRight 003A  
               ??_InterruptHandlerLow 0013                        ??_enableSensor 0025  
                    i2delay_tenth_s@i 0003  
